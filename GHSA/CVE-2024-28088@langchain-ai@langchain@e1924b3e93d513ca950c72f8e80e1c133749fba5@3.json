{
  "cve_id": "CVE-2024-28088",
  "cve_desc": "LangChain through 0.1.10 allows ../ directory traversal by an actor who is able to control the final part of the path parameter in a load_chain call. This bypasses the intended behavior of loading configurations only from the hwchase17/langchain-hub GitHub repository. The outcome can be disclosure of an API key for a large language model online service, or remote code execution. (A patch is available as of release 0.1.29 of langchain-core.)",
  "repo": "langchain-ai/langchain",
  "patch_hash": "e1924b3e93d513ca950c72f8e80e1c133749fba5",
  "patch_info": {
    "commit_hash": "e1924b3e93d513ca950c72f8e80e1c133749fba5",
    "repo": "langchain-ai/langchain",
    "commit_url": "https://github.com/langchain-ai/langchain/commit/e1924b3e93d513ca950c72f8e80e1c133749fba5",
    "files": [
      "libs/core/langchain_core/utils/loading.py",
      "libs/core/poetry.lock",
      "libs/core/pyproject.toml",
      "libs/core/tests/unit_tests/utils/test_loading.py"
    ],
    "message": "core[patch]: deprecate hwchase17/langchain-hub, address path traversal (#18600)\n\nDeprecates the old langchain-hub repository. Does *not* deprecate the\nnew https://smith.langchain.com/hub\n\n@PinkDraconian has correctly raised that in the event someone is loading\nunsanitized user input into the `try_load_from_hub` function, they have\nthe ability to load files from other locations in github than the\nhwchase17/langchain-hub repository.\n\nThis PR adds some more path checking to that function and deprecates the\nfunctionality in favor of the hub built into LangSmith.",
    "before_after_code_files": [
      "libs/core/langchain_core/utils/loading.py||libs/core/langchain_core/utils/loading.py",
      "libs/core/poetry.lock||libs/core/poetry.lock",
      "libs/community/tests/unit_tests/utilities/test_loading.py||libs/core/tests/unit_tests/utils/test_loading.py"
    ]
  },
  "patch_diff": {
    "libs/core/langchain_core/utils/loading.py||libs/core/langchain_core/utils/loading.py": [
      "File: libs/core/langchain_core/utils/loading.py -> libs/core/langchain_core/utils/loading.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: import requests",
      "12: DEFAULT_REF = os.environ.get(\"LANGCHAIN_HUB_DEFAULT_REF\", \"master\")",
      "13: URL_BASE = os.environ.get(",
      "14:     \"LANGCHAIN_HUB_URL_BASE\",",
      "16: )",
      "17: HUB_PATH_RE = re.compile(r\"lc(?P<ref>@[^:]+)?://(?P<path>.*)\")",
      "19: T = TypeVar(\"T\")",
      "22: def try_load_from_hub(",
      "23:     path: Union[str, Path],",
      "24:     loader: Callable[[str], T],",
      "",
      "[Removed Lines]",
      "15:     \"https://raw.githubusercontent.com/hwchase17/langchain-hub/{ref}/\",",
      "",
      "[Added Lines]",
      "12: from langchain_core._api.deprecation import deprecated",
      "15: LANGCHAINHUB_REPO = \"https://raw.githubusercontent.com/hwchase17/langchain-hub/\"",
      "18:     LANGCHAINHUB_REPO + \"{ref}/\",",
      "25: @deprecated(",
      "26:     since=\"0.1.30\",",
      "27:     removal=\"0.2\",",
      "28:     message=(",
      "29:         \"Using the hwchase17/langchain-hub \"",
      "30:         \"repo for prompts is deprecated. Please use \"",
      "31:         \"https://smith.langchain.com/hub instead.\"",
      "32:     ),",
      "33: )",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "43:     # Instead, use PurePosixPath to ensure that forward slashes are used as the",
      "44:     # path separator, regardless of the operating system.",
      "45:     full_url = urljoin(URL_BASE.format(ref=ref), PurePosixPath(remote_path).__str__())",
      "47:     r = requests.get(full_url, timeout=5)",
      "48:     if r.status_code != 200:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58:     if not full_url.startswith(LANGCHAINHUB_REPO):",
      "59:         raise ValueError(f\"Invalid hub path: {path}\")",
      "",
      "---------------"
    ],
    "libs/core/poetry.lock||libs/core/poetry.lock": [
      "File: libs/core/poetry.lock -> libs/core/poetry.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "2214: socks = [\"PySocks (>=1.5.6,!=1.5.7)\"]",
      "2215: use-chardet-on-py3 = [\"chardet (>=3.0.2,<6)\"]",
      "2217: [[package]]",
      "2218: name = \"rfc3339-validator\"",
      "2219: version = \"0.1.4\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2217: [[package]]",
      "2218: name = \"responses\"",
      "2219: version = \"0.25.0\"",
      "2220: description = \"A utility library for mocking out the `requests` Python library.\"",
      "2221: optional = false",
      "2222: python-versions = \">=3.8\"",
      "2223: files = [",
      "2224:     {file = \"responses-0.25.0-py3-none-any.whl\", hash = \"sha256:2f0b9c2b6437db4b528619a77e5d565e4ec2a9532162ac1a131a83529db7be1a\"},",
      "2225:     {file = \"responses-0.25.0.tar.gz\", hash = \"sha256:01ae6a02b4f34e39bffceb0fc6786b67a25eae919c6368d05eabc8d9576c2a66\"},",
      "2226: ]",
      "2228: [package.dependencies]",
      "2229: pyyaml = \"*\"",
      "2230: requests = \">=2.30.0,<3.0\"",
      "2231: urllib3 = \">=1.25.10,<3.0\"",
      "2233: [package.extras]",
      "2234: tests = [\"coverage (>=6.0.0)\", \"flake8\", \"mypy\", \"pytest (>=7.0.0)\", \"pytest-asyncio\", \"pytest-cov\", \"pytest-httpserver\", \"tomli\", \"tomli-w\", \"types-PyYAML\", \"types-requests\"]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2796: [metadata]",
      "2797: lock-version = \"2.0\"",
      "2798: python-versions = \">=3.8.1,<4.0\"",
      "",
      "[Removed Lines]",
      "2799: content-hash = \"8fe07123109b62d7210542d8aff20df6df00819e5b0f36bc12f02206c5161c43\"",
      "",
      "[Added Lines]",
      "2818: content-hash = \"de97591989f083b89c7a7bc6dabba87e29e13fddc812450d5196d564b2c02ce1\"",
      "",
      "---------------"
    ],
    "libs/community/tests/unit_tests/utilities/test_loading.py||libs/core/tests/unit_tests/utils/test_loading.py": [
      "File: libs/community/tests/unit_tests/utilities/test_loading.py -> libs/core/tests/unit_tests/utils/test_loading.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "94:     with pytest.raises(ValueError, match=re.compile(\"Could not find file at .*\")):",
      "95:         try_load_from_hub(f\"lc://{path}\", loader, \"chains\", {\"json\"})",
      "96:     loader.assert_not_called()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "100: def test_path_traversal() -> None:",
      "101:     \"\"\"Test that a path traversal attack is prevented.\"\"\"",
      "102:     path = \"lc://chains/../../../../../../../../../it.json\"",
      "103:     loader = Mock()",
      "105:     with pytest.raises(ValueError):",
      "106:         try_load_from_hub(path, loader, \"chains\", {\"json\"})",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ea141511d896ab52b49cca097f85bb5e1f18846b",
      "candidate_info": {
        "commit_hash": "ea141511d896ab52b49cca097f85bb5e1f18846b",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/ea141511d896ab52b49cca097f85bb5e1f18846b",
        "files": [
          "libs/community/langchain_community/document_loaders/base.py",
          "libs/community/langchain_community/document_loaders/blob_loaders/schema.py",
          "libs/core/langchain_core/document_loaders/__init__.py",
          "libs/core/langchain_core/document_loaders/base.py",
          "libs/core/langchain_core/document_loaders/blob_loaders.py",
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml"
        ],
        "message": "core: Move document loader interfaces to core (#17723)\n\nThis is needed to be able to move document loaders to partner packages.\n\n---------\n\nCo-authored-by: Eugene Yurtsev <eyurtsev@gmail.com>",
        "before_after_code_files": [
          "libs/community/langchain_community/document_loaders/base.py||libs/community/langchain_community/document_loaders/base.py",
          "libs/community/langchain_community/document_loaders/blob_loaders/schema.py||libs/community/langchain_community/document_loaders/blob_loaders/schema.py",
          "libs/core/langchain_core/document_loaders/__init__.py||libs/core/langchain_core/document_loaders/__init__.py",
          "libs/core/langchain_core/document_loaders/base.py||libs/core/langchain_core/document_loaders/base.py",
          "libs/core/langchain_core/document_loaders/blob_loaders.py||libs/core/langchain_core/document_loaders/blob_loaders.py",
          "libs/core/poetry.lock||libs/core/poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/community/langchain_community/document_loaders/base.py||libs/community/langchain_community/document_loaders/base.py": [
          "File: libs/community/langchain_community/document_loaders/base.py -> libs/community/langchain_community/document_loaders/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: \"\"\"Abstract interface for document loader implementations.\"\"\"",
          "2: from __future__ import annotations",
          "4: from abc import ABC, abstractmethod",
          "5: from typing import TYPE_CHECKING, AsyncIterator, Iterator, List, Optional",
          "7: from langchain_core.documents import Document",
          "8: from langchain_core.runnables import run_in_executor",
          "10: if TYPE_CHECKING:",
          "11:     from langchain_text_splitters import TextSplitter",
          "13: from langchain_community.document_loaders.blob_loaders import Blob",
          "16: class BaseLoader(ABC):",
          "17:     \"\"\"Interface for Document Loader.",
          "19:     Implementations should implement the lazy-loading method using generators",
          "20:     to avoid loading all Documents into memory at once.",
          "22:     `load` is provided just for user convenience and should not be overridden.",
          "23:     \"\"\"",
          "25:     # Sub-classes should not implement this method directly. Instead, they",
          "26:     # should implement the lazy load method.",
          "27:     def load(self) -> List[Document]:",
          "28:         \"\"\"Load data into Document objects.\"\"\"",
          "29:         return list(self.lazy_load())",
          "31:     def load_and_split(",
          "32:         self, text_splitter: Optional[TextSplitter] = None",
          "33:     ) -> List[Document]:",
          "34:         \"\"\"Load Documents and split into chunks. Chunks are returned as Documents.",
          "36:         Do not override this method. It should be considered to be deprecated!",
          "38:         Args:",
          "39:             text_splitter: TextSplitter instance to use for splitting documents.",
          "40:               Defaults to RecursiveCharacterTextSplitter.",
          "42:         Returns:",
          "43:             List of Documents.",
          "44:         \"\"\"",
          "46:         if text_splitter is None:",
          "47:             try:",
          "48:                 from langchain_text_splitters import RecursiveCharacterTextSplitter",
          "49:             except ImportError as e:",
          "50:                 raise ImportError(",
          "51:                     \"Unable to import from langchain_text_splitters. Please specify \"",
          "52:                     \"text_splitter or install langchain_text_splitters with \"",
          "53:                     \"`pip install -U langchain-text-splitters`.\"",
          "54:                 ) from e",
          "56:             _text_splitter: TextSplitter = RecursiveCharacterTextSplitter()",
          "57:         else:",
          "58:             _text_splitter = text_splitter",
          "59:         docs = self.load()",
          "60:         return _text_splitter.split_documents(docs)",
          "62:     # Attention: This method will be upgraded into an abstractmethod once it's",
          "63:     #            implemented in all the existing subclasses.",
          "64:     def lazy_load(self) -> Iterator[Document]:",
          "65:         \"\"\"A lazy loader for Documents.\"\"\"",
          "66:         raise NotImplementedError(",
          "67:             f\"{self.__class__.__name__} does not implement lazy_load()\"",
          "68:         )",
          "70:     async def alazy_load(self) -> AsyncIterator[Document]:",
          "71:         \"\"\"A lazy loader for Documents.\"\"\"",
          "72:         iterator = await run_in_executor(None, self.lazy_load)",
          "73:         done = object()",
          "74:         while True:",
          "75:             doc = await run_in_executor(None, next, iterator, done)  # type: ignore[call-arg, arg-type]",
          "76:             if doc is done:",
          "77:                 break",
          "78:             yield doc  # type: ignore[misc]",
          "81: class BaseBlobParser(ABC):",
          "82:     \"\"\"Abstract interface for blob parsers.",
          "84:     A blob parser provides a way to parse raw data stored in a blob into one",
          "85:     or more documents.",
          "87:     The parser can be composed with blob loaders, making it easy to reuse",
          "88:     a parser independent of how the blob was originally loaded.",
          "89:     \"\"\"",
          "91:     @abstractmethod",
          "92:     def lazy_parse(self, blob: Blob) -> Iterator[Document]:",
          "93:         \"\"\"Lazy parsing interface.",
          "95:         Subclasses are required to implement this method.",
          "97:         Args:",
          "98:             blob: Blob instance",
          "100:         Returns:",
          "101:             Generator of documents",
          "102:         \"\"\"",
          "104:     def parse(self, blob: Blob) -> List[Document]:",
          "105:         \"\"\"Eagerly parse the blob into a document or documents.",
          "107:         This is a convenience method for interactive development environment.",
          "109:         Production applications should favor the lazy_parse method instead.",
          "111:         Subclasses should generally not over-ride this parse method.",
          "113:         Args:",
          "114:             blob: Blob instance",
          "116:         Returns:",
          "117:             List of documents",
          "118:         \"\"\"",
          "119:         return list(self.lazy_parse(blob))",
          "",
          "[Added Lines]",
          "1: from langchain_core.document_loaders import BaseBlobParser, BaseLoader",
          "3: __all__ = [",
          "4:     \"BaseBlobParser\",",
          "5:     \"BaseLoader\",",
          "6: ]",
          "",
          "---------------"
        ],
        "libs/community/langchain_community/document_loaders/blob_loaders/schema.py||libs/community/langchain_community/document_loaders/blob_loaders/schema.py": [
          "File: libs/community/langchain_community/document_loaders/blob_loaders/schema.py -> libs/community/langchain_community/document_loaders/blob_loaders/schema.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: \"\"\"Schema for Blobs and Blob Loaders.",
          "3: The goal is to facilitate decoupling of content loading from content parsing code.",
          "5: In addition, content loading code should provide a lazy loading interface by default.",
          "6: \"\"\"",
          "7: from __future__ import annotations",
          "9: import contextlib",
          "10: import mimetypes",
          "11: from abc import ABC, abstractmethod",
          "12: from io import BufferedReader, BytesIO",
          "13: from pathlib import PurePath",
          "14: from typing import Any, Dict, Generator, Iterable, Mapping, Optional, Union, cast",
          "16: from langchain_core.pydantic_v1 import BaseModel, Field, root_validator",
          "18: PathLike = Union[str, PurePath]",
          "21: class Blob(BaseModel):",
          "22:     \"\"\"Blob represents raw data by either reference or value.",
          "24:     Provides an interface to materialize the blob in different representations, and",
          "25:     help to decouple the development of data loaders from the downstream parsing of",
          "26:     the raw data.",
          "28:     Inspired by: https://developer.mozilla.org/en-US/docs/Web/API/Blob",
          "29:     \"\"\"",
          "31:     data: Union[bytes, str, None]",
          "32:     \"\"\"Raw data associated with the blob.\"\"\"",
          "33:     mimetype: Optional[str] = None",
          "34:     \"\"\"MimeType not to be confused with a file extension.\"\"\"",
          "35:     encoding: str = \"utf-8\"",
          "36:     \"\"\"Encoding to use if decoding the bytes into a string.",
          "38:     Use utf-8 as default encoding, if decoding to string.",
          "39:     \"\"\"",
          "40:     path: Optional[PathLike] = None",
          "41:     \"\"\"Location where the original content was found.\"\"\"",
          "43:     metadata: Dict[str, Any] = Field(default_factory=dict)",
          "44:     \"\"\"Metadata about the blob (e.g., source)\"\"\"",
          "46:     class Config:",
          "47:         arbitrary_types_allowed = True",
          "48:         frozen = True",
          "50:     @property",
          "51:     def source(self) -> Optional[str]:",
          "52:         \"\"\"The source location of the blob as string if known otherwise none.",
          "54:         If a path is associated with the blob, it will default to the path location.",
          "56:         Unless explicitly set via a metadata field called \"source\", in which",
          "57:         case that value will be used instead.",
          "58:         \"\"\"",
          "59:         if self.metadata and \"source\" in self.metadata:",
          "60:             return cast(Optional[str], self.metadata[\"source\"])",
          "61:         return str(self.path) if self.path else None",
          "63:     @root_validator(pre=True)",
          "64:     def check_blob_is_valid(cls, values: Mapping[str, Any]) -> Mapping[str, Any]:",
          "65:         \"\"\"Verify that either data or path is provided.\"\"\"",
          "66:         if \"data\" not in values and \"path\" not in values:",
          "67:             raise ValueError(\"Either data or path must be provided\")",
          "68:         return values",
          "70:     def as_string(self) -> str:",
          "71:         \"\"\"Read data as a string.\"\"\"",
          "72:         if self.data is None and self.path:",
          "73:             with open(str(self.path), \"r\", encoding=self.encoding) as f:",
          "74:                 return f.read()",
          "75:         elif isinstance(self.data, bytes):",
          "76:             return self.data.decode(self.encoding)",
          "77:         elif isinstance(self.data, str):",
          "78:             return self.data",
          "79:         else:",
          "80:             raise ValueError(f\"Unable to get string for blob {self}\")",
          "82:     def as_bytes(self) -> bytes:",
          "83:         \"\"\"Read data as bytes.\"\"\"",
          "84:         if isinstance(self.data, bytes):",
          "85:             return self.data",
          "86:         elif isinstance(self.data, str):",
          "87:             return self.data.encode(self.encoding)",
          "88:         elif self.data is None and self.path:",
          "89:             with open(str(self.path), \"rb\") as f:",
          "90:                 return f.read()",
          "91:         else:",
          "92:             raise ValueError(f\"Unable to get bytes for blob {self}\")",
          "94:     @contextlib.contextmanager",
          "95:     def as_bytes_io(self) -> Generator[Union[BytesIO, BufferedReader], None, None]:",
          "96:         \"\"\"Read data as a byte stream.\"\"\"",
          "97:         if isinstance(self.data, bytes):",
          "98:             yield BytesIO(self.data)",
          "99:         elif self.data is None and self.path:",
          "100:             with open(str(self.path), \"rb\") as f:",
          "101:                 yield f",
          "102:         else:",
          "103:             raise NotImplementedError(f\"Unable to convert blob {self}\")",
          "105:     @classmethod",
          "106:     def from_path(",
          "107:         cls,",
          "108:         path: PathLike,",
          "110:         encoding: str = \"utf-8\",",
          "111:         mime_type: Optional[str] = None,",
          "112:         guess_type: bool = True,",
          "113:         metadata: Optional[dict] = None,",
          "114:     ) -> Blob:",
          "115:         \"\"\"Load the blob from a path like object.",
          "117:         Args:",
          "118:             path: path like object to file to be read",
          "119:             encoding: Encoding to use if decoding the bytes into a string",
          "120:             mime_type: if provided, will be set as the mime-type of the data",
          "121:             guess_type: If True, the mimetype will be guessed from the file extension,",
          "122:                         if a mime-type was not provided",
          "123:             metadata: Metadata to associate with the blob",
          "125:         Returns:",
          "126:             Blob instance",
          "127:         \"\"\"",
          "128:         if mime_type is None and guess_type:",
          "129:             _mimetype = mimetypes.guess_type(path)[0] if guess_type else None",
          "130:         else:",
          "131:             _mimetype = mime_type",
          "132:         # We do not load the data immediately, instead we treat the blob as a",
          "133:         # reference to the underlying data.",
          "134:         return cls(",
          "135:             data=None,",
          "136:             mimetype=_mimetype,",
          "137:             encoding=encoding,",
          "138:             path=path,",
          "139:             metadata=metadata if metadata is not None else {},",
          "140:         )",
          "142:     @classmethod",
          "143:     def from_data(",
          "144:         cls,",
          "145:         data: Union[str, bytes],",
          "147:         encoding: str = \"utf-8\",",
          "148:         mime_type: Optional[str] = None,",
          "149:         path: Optional[str] = None,",
          "150:         metadata: Optional[dict] = None,",
          "151:     ) -> Blob:",
          "152:         \"\"\"Initialize the blob from in-memory data.",
          "154:         Args:",
          "155:             data: the in-memory data associated with the blob",
          "156:             encoding: Encoding to use if decoding the bytes into a string",
          "157:             mime_type: if provided, will be set as the mime-type of the data",
          "158:             path: if provided, will be set as the source from which the data came",
          "159:             metadata: Metadata to associate with the blob",
          "161:         Returns:",
          "162:             Blob instance",
          "163:         \"\"\"",
          "164:         return cls(",
          "165:             data=data,",
          "166:             mimetype=mime_type,",
          "167:             encoding=encoding,",
          "168:             path=path,",
          "169:             metadata=metadata if metadata is not None else {},",
          "170:         )",
          "172:     def __repr__(self) -> str:",
          "173:         \"\"\"Define the blob representation.\"\"\"",
          "174:         str_repr = f\"Blob {id(self)}\"",
          "175:         if self.source:",
          "176:             str_repr += f\" {self.source}\"",
          "177:         return str_repr",
          "180: class BlobLoader(ABC):",
          "181:     \"\"\"Abstract interface for blob loaders implementation.",
          "183:     Implementer should be able to load raw content from a storage system according",
          "184:     to some criteria and return the raw content lazily as a stream of blobs.",
          "185:     \"\"\"",
          "187:     @abstractmethod",
          "188:     def yield_blobs(",
          "189:         self,",
          "190:     ) -> Iterable[Blob]:",
          "191:         \"\"\"A lazy loader for raw data represented by LangChain's Blob object.",
          "193:         Returns:",
          "194:             A generator over blobs",
          "195:         \"\"\"",
          "",
          "[Added Lines]",
          "1: from langchain_core.document_loaders.blob_loaders import Blob, BlobLoader, PathLike",
          "3: __all__ = [",
          "4:     \"Blob\",",
          "5:     \"BlobLoader\",",
          "6:     \"PathLike\",",
          "7: ]",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/document_loaders/__init__.py||libs/core/langchain_core/document_loaders/__init__.py": [
          "File: libs/core/langchain_core/document_loaders/__init__.py -> libs/core/langchain_core/document_loaders/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from langchain_core.document_loaders.base import BaseBlobParser, BaseLoader",
          "2: from langchain_core.document_loaders.blob_loaders import Blob, BlobLoader, PathLike",
          "4: __all__ = [",
          "5:     \"BaseBlobParser\",",
          "6:     \"BaseLoader\",",
          "7:     \"Blob\",",
          "8:     \"BlobLoader\",",
          "9:     \"PathLike\",",
          "10: ]",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/document_loaders/base.py||libs/core/langchain_core/document_loaders/base.py": [
          "File: libs/core/langchain_core/document_loaders/base.py -> libs/core/langchain_core/document_loaders/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"Abstract interface for document loader implementations.\"\"\"",
          "2: from __future__ import annotations",
          "4: from abc import ABC, abstractmethod",
          "5: from typing import TYPE_CHECKING, AsyncIterator, Iterator, List, Optional",
          "7: from langchain_core.documents import Document",
          "8: from langchain_core.runnables import run_in_executor",
          "10: if TYPE_CHECKING:",
          "11:     from langchain_text_splitters import TextSplitter",
          "13: from langchain_core.document_loaders.blob_loaders import Blob",
          "16: class BaseLoader(ABC):",
          "17:     \"\"\"Interface for Document Loader.",
          "19:     Implementations should implement the lazy-loading method using generators",
          "20:     to avoid loading all Documents into memory at once.",
          "22:     `load` is provided just for user convenience and should not be overridden.",
          "23:     \"\"\"",
          "25:     # Sub-classes should not implement this method directly. Instead, they",
          "26:     # should implement the lazy load method.",
          "27:     def load(self) -> List[Document]:",
          "28:         \"\"\"Load data into Document objects.\"\"\"",
          "29:         return list(self.lazy_load())",
          "31:     def load_and_split(",
          "32:         self, text_splitter: Optional[TextSplitter] = None",
          "33:     ) -> List[Document]:",
          "34:         \"\"\"Load Documents and split into chunks. Chunks are returned as Documents.",
          "36:         Do not override this method. It should be considered to be deprecated!",
          "38:         Args:",
          "39:             text_splitter: TextSplitter instance to use for splitting documents.",
          "40:               Defaults to RecursiveCharacterTextSplitter.",
          "42:         Returns:",
          "43:             List of Documents.",
          "44:         \"\"\"",
          "46:         if text_splitter is None:",
          "47:             try:",
          "48:                 from langchain_text_splitters import RecursiveCharacterTextSplitter",
          "49:             except ImportError as e:",
          "50:                 raise ImportError(",
          "51:                     \"Unable to import from langchain_text_splitters. Please specify \"",
          "52:                     \"text_splitter or install langchain_text_splitters with \"",
          "53:                     \"`pip install -U langchain-text-splitters`.\"",
          "54:                 ) from e",
          "56:             _text_splitter: TextSplitter = RecursiveCharacterTextSplitter()",
          "57:         else:",
          "58:             _text_splitter = text_splitter",
          "59:         docs = self.load()",
          "60:         return _text_splitter.split_documents(docs)",
          "62:     # Attention: This method will be upgraded into an abstractmethod once it's",
          "63:     #            implemented in all the existing subclasses.",
          "64:     def lazy_load(self) -> Iterator[Document]:",
          "65:         \"\"\"A lazy loader for Documents.\"\"\"",
          "66:         raise NotImplementedError(",
          "67:             f\"{self.__class__.__name__} does not implement lazy_load()\"",
          "68:         )",
          "70:     async def alazy_load(self) -> AsyncIterator[Document]:",
          "71:         \"\"\"A lazy loader for Documents.\"\"\"",
          "72:         iterator = await run_in_executor(None, self.lazy_load)",
          "73:         done = object()",
          "74:         while True:",
          "75:             doc = await run_in_executor(None, next, iterator, done)  # type: ignore[call-arg, arg-type]",
          "76:             if doc is done:",
          "77:                 break",
          "78:             yield doc  # type: ignore[misc]",
          "81: class BaseBlobParser(ABC):",
          "82:     \"\"\"Abstract interface for blob parsers.",
          "84:     A blob parser provides a way to parse raw data stored in a blob into one",
          "85:     or more documents.",
          "87:     The parser can be composed with blob loaders, making it easy to reuse",
          "88:     a parser independent of how the blob was originally loaded.",
          "89:     \"\"\"",
          "91:     @abstractmethod",
          "92:     def lazy_parse(self, blob: Blob) -> Iterator[Document]:",
          "93:         \"\"\"Lazy parsing interface.",
          "95:         Subclasses are required to implement this method.",
          "97:         Args:",
          "98:             blob: Blob instance",
          "100:         Returns:",
          "101:             Generator of documents",
          "102:         \"\"\"",
          "104:     def parse(self, blob: Blob) -> List[Document]:",
          "105:         \"\"\"Eagerly parse the blob into a document or documents.",
          "107:         This is a convenience method for interactive development environment.",
          "109:         Production applications should favor the lazy_parse method instead.",
          "111:         Subclasses should generally not over-ride this parse method.",
          "113:         Args:",
          "114:             blob: Blob instance",
          "116:         Returns:",
          "117:             List of documents",
          "118:         \"\"\"",
          "119:         return list(self.lazy_parse(blob))",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/document_loaders/blob_loaders.py||libs/core/langchain_core/document_loaders/blob_loaders.py": [
          "File: libs/core/langchain_core/document_loaders/blob_loaders.py -> libs/core/langchain_core/document_loaders/blob_loaders.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \"\"\"Schema for Blobs and Blob Loaders.",
          "3: The goal is to facilitate decoupling of content loading from content parsing code.",
          "5: In addition, content loading code should provide a lazy loading interface by default.",
          "6: \"\"\"",
          "7: from __future__ import annotations",
          "9: import contextlib",
          "10: import mimetypes",
          "11: from abc import ABC, abstractmethod",
          "12: from io import BufferedReader, BytesIO",
          "13: from pathlib import PurePath",
          "14: from typing import Any, Dict, Generator, Iterable, Mapping, Optional, Union, cast",
          "16: from langchain_core.pydantic_v1 import BaseModel, Field, root_validator",
          "18: PathLike = Union[str, PurePath]",
          "21: class Blob(BaseModel):",
          "22:     \"\"\"Blob represents raw data by either reference or value.",
          "24:     Provides an interface to materialize the blob in different representations, and",
          "25:     help to decouple the development of data loaders from the downstream parsing of",
          "26:     the raw data.",
          "28:     Inspired by: https://developer.mozilla.org/en-US/docs/Web/API/Blob",
          "29:     \"\"\"",
          "31:     data: Union[bytes, str, None]",
          "32:     \"\"\"Raw data associated with the blob.\"\"\"",
          "33:     mimetype: Optional[str] = None",
          "34:     \"\"\"MimeType not to be confused with a file extension.\"\"\"",
          "35:     encoding: str = \"utf-8\"",
          "36:     \"\"\"Encoding to use if decoding the bytes into a string.",
          "38:     Use utf-8 as default encoding, if decoding to string.",
          "39:     \"\"\"",
          "40:     path: Optional[PathLike] = None",
          "41:     \"\"\"Location where the original content was found.\"\"\"",
          "43:     metadata: Dict[str, Any] = Field(default_factory=dict)",
          "44:     \"\"\"Metadata about the blob (e.g., source)\"\"\"",
          "46:     class Config:",
          "47:         arbitrary_types_allowed = True",
          "48:         frozen = True",
          "50:     @property",
          "51:     def source(self) -> Optional[str]:",
          "52:         \"\"\"The source location of the blob as string if known otherwise none.",
          "54:         If a path is associated with the blob, it will default to the path location.",
          "56:         Unless explicitly set via a metadata field called \"source\", in which",
          "57:         case that value will be used instead.",
          "58:         \"\"\"",
          "59:         if self.metadata and \"source\" in self.metadata:",
          "60:             return cast(Optional[str], self.metadata[\"source\"])",
          "61:         return str(self.path) if self.path else None",
          "63:     @root_validator(pre=True)",
          "64:     def check_blob_is_valid(cls, values: Mapping[str, Any]) -> Mapping[str, Any]:",
          "65:         \"\"\"Verify that either data or path is provided.\"\"\"",
          "66:         if \"data\" not in values and \"path\" not in values:",
          "67:             raise ValueError(\"Either data or path must be provided\")",
          "68:         return values",
          "70:     def as_string(self) -> str:",
          "71:         \"\"\"Read data as a string.\"\"\"",
          "72:         if self.data is None and self.path:",
          "73:             with open(str(self.path), \"r\", encoding=self.encoding) as f:",
          "74:                 return f.read()",
          "75:         elif isinstance(self.data, bytes):",
          "76:             return self.data.decode(self.encoding)",
          "77:         elif isinstance(self.data, str):",
          "78:             return self.data",
          "79:         else:",
          "80:             raise ValueError(f\"Unable to get string for blob {self}\")",
          "82:     def as_bytes(self) -> bytes:",
          "83:         \"\"\"Read data as bytes.\"\"\"",
          "84:         if isinstance(self.data, bytes):",
          "85:             return self.data",
          "86:         elif isinstance(self.data, str):",
          "87:             return self.data.encode(self.encoding)",
          "88:         elif self.data is None and self.path:",
          "89:             with open(str(self.path), \"rb\") as f:",
          "90:                 return f.read()",
          "91:         else:",
          "92:             raise ValueError(f\"Unable to get bytes for blob {self}\")",
          "94:     @contextlib.contextmanager",
          "95:     def as_bytes_io(self) -> Generator[Union[BytesIO, BufferedReader], None, None]:",
          "96:         \"\"\"Read data as a byte stream.\"\"\"",
          "97:         if isinstance(self.data, bytes):",
          "98:             yield BytesIO(self.data)",
          "99:         elif self.data is None and self.path:",
          "100:             with open(str(self.path), \"rb\") as f:",
          "101:                 yield f",
          "102:         else:",
          "103:             raise NotImplementedError(f\"Unable to convert blob {self}\")",
          "105:     @classmethod",
          "106:     def from_path(",
          "107:         cls,",
          "108:         path: PathLike,",
          "110:         encoding: str = \"utf-8\",",
          "111:         mime_type: Optional[str] = None,",
          "112:         guess_type: bool = True,",
          "113:         metadata: Optional[dict] = None,",
          "114:     ) -> Blob:",
          "115:         \"\"\"Load the blob from a path like object.",
          "117:         Args:",
          "118:             path: path like object to file to be read",
          "119:             encoding: Encoding to use if decoding the bytes into a string",
          "120:             mime_type: if provided, will be set as the mime-type of the data",
          "121:             guess_type: If True, the mimetype will be guessed from the file extension,",
          "122:                         if a mime-type was not provided",
          "123:             metadata: Metadata to associate with the blob",
          "125:         Returns:",
          "126:             Blob instance",
          "127:         \"\"\"",
          "128:         if mime_type is None and guess_type:",
          "129:             _mimetype = mimetypes.guess_type(path)[0] if guess_type else None",
          "130:         else:",
          "131:             _mimetype = mime_type",
          "132:         # We do not load the data immediately, instead we treat the blob as a",
          "133:         # reference to the underlying data.",
          "134:         return cls(",
          "135:             data=None,",
          "136:             mimetype=_mimetype,",
          "137:             encoding=encoding,",
          "138:             path=path,",
          "139:             metadata=metadata if metadata is not None else {},",
          "140:         )",
          "142:     @classmethod",
          "143:     def from_data(",
          "144:         cls,",
          "145:         data: Union[str, bytes],",
          "147:         encoding: str = \"utf-8\",",
          "148:         mime_type: Optional[str] = None,",
          "149:         path: Optional[str] = None,",
          "150:         metadata: Optional[dict] = None,",
          "151:     ) -> Blob:",
          "152:         \"\"\"Initialize the blob from in-memory data.",
          "154:         Args:",
          "155:             data: the in-memory data associated with the blob",
          "156:             encoding: Encoding to use if decoding the bytes into a string",
          "157:             mime_type: if provided, will be set as the mime-type of the data",
          "158:             path: if provided, will be set as the source from which the data came",
          "159:             metadata: Metadata to associate with the blob",
          "161:         Returns:",
          "162:             Blob instance",
          "163:         \"\"\"",
          "164:         return cls(",
          "165:             data=data,",
          "166:             mimetype=mime_type,",
          "167:             encoding=encoding,",
          "168:             path=path,",
          "169:             metadata=metadata if metadata is not None else {},",
          "170:         )",
          "172:     def __repr__(self) -> str:",
          "173:         \"\"\"Define the blob representation.\"\"\"",
          "174:         str_repr = f\"Blob {id(self)}\"",
          "175:         if self.source:",
          "176:             str_repr += f\" {self.source}\"",
          "177:         return str_repr",
          "180: class BlobLoader(ABC):",
          "181:     \"\"\"Abstract interface for blob loaders implementation.",
          "183:     Implementer should be able to load raw content from a storage system according",
          "184:     to some criteria and return the raw content lazily as a stream of blobs.",
          "185:     \"\"\"",
          "187:     @abstractmethod",
          "188:     def yield_blobs(",
          "189:         self,",
          "190:     ) -> Iterable[Blob]:",
          "191:         \"\"\"A lazy loader for raw data represented by LangChain's Blob object.",
          "193:         Returns:",
          "194:             A generator over blobs",
          "195:         \"\"\"",
          "",
          "---------------"
        ],
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1133:     {file = \"jupyterlab_widgets-3.0.9.tar.gz\", hash = \"sha256:6005a4e974c7beee84060fdfba341a3218495046de8ae3ec64888e5fe19fdb4c\"},",
          "1134: ]",
          "1136: [[package]]",
          "1137: name = \"langsmith\"",
          "1138: version = \"0.1.1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1136: [[package]]",
          "1137: name = \"langchain-text-splitters\"",
          "1138: version = \"0.0.1\"",
          "1139: description = \"LangChain text splitting utilities\"",
          "1140: optional = false",
          "1141: python-versions = \">=3.8.1,<4.0\"",
          "1142: files = []",
          "1143: develop = true",
          "1145: [package.dependencies]",
          "1146: langchain-core = \"^0.1.28\"",
          "1148: [package.extras]",
          "1149: extended-testing = [\"lxml (>=5.1.0,<6.0.0)\"]",
          "1151: [package.source]",
          "1152: type = \"directory\"",
          "1153: url = \"../text-splitters\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2815: [metadata]",
          "2816: lock-version = \"2.0\"",
          "2817: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "2818: content-hash = \"de97591989f083b89c7a7bc6dabba87e29e13fddc812450d5196d564b2c02ce1\"",
          "",
          "[Added Lines]",
          "2837: content-hash = \"092a56ee5733650e75cdacb0480d6a7fea1ff40a4a7f33500f77990a6e590ea4\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0319ccd2737f4437d1304b687993d07032b7927c",
      "candidate_info": {
        "commit_hash": "0319ccd2737f4437d1304b687993d07032b7927c",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/0319ccd2737f4437d1304b687993d07032b7927c",
        "files": [
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml"
        ],
        "message": "core[patch]: only support pydantic >= 2.9 for now (#26176)\n\nFor now we'll only support pydantic ^ 2.9. We'll relax the constraint\nnext week once we work around some issues with pydantic 2.7 / 2.8.",
        "before_after_code_files": [
          "libs/core/poetry.lock||libs/core/poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.6.1 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "278:     {file = \"cffi-1.17.1-cp312-cp312-win32.whl\", hash = \"sha256:a08d7e755f8ed21095a310a693525137cfe756ce62d066e53f502a83dc550f65\"},",
          "279:     {file = \"cffi-1.17.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:51392eae71afec0d0c8fb1a53b204dbb3bcabcb3c9b807eedf3e1e6ccf2de903\"},",
          "280:     {file = \"cffi-1.17.1-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:f3a2b4222ce6b60e2e8b337bb9596923045681d71e5a082783484d845390938e\"},",
          "281: ]",
          "283: [package.dependencies]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "281:     {file = \"cffi-1.17.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:0984a4925a435b1da406122d4d7968dd861c1385afe3b45ba82b750f229811e2\"},",
          "282:     {file = \"cffi-1.17.1-cp313-cp313-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d01b12eeeb4427d3110de311e1774046ad344f5b1a7403101878976ecd7a10f3\"},",
          "283:     {file = \"cffi-1.17.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:706510fe141c86a69c8ddc029c7910003a17353970cff3b904ff0686a5927683\"},",
          "284:     {file = \"cffi-1.17.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:de55b766c7aa2e2a3092c51e0483d700341182f08e67c63630d5b6f200bb28e5\"},",
          "285:     {file = \"cffi-1.17.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:c59d6e989d07460165cc5ad3c61f9fd8f1b4796eacbd81cee78957842b834af4\"},",
          "286:     {file = \"cffi-1.17.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:dd398dbc6773384a17fe0d3e7eeb8d1a21c2200473ee6806bb5e6a8e62bb73dd\"},",
          "287:     {file = \"cffi-1.17.1-cp313-cp313-musllinux_1_1_aarch64.whl\", hash = \"sha256:3edc8d958eb099c634dace3c7e16560ae474aa3803a5df240542b305d14e14ed\"},",
          "288:     {file = \"cffi-1.17.1-cp313-cp313-musllinux_1_1_x86_64.whl\", hash = \"sha256:72e72408cad3d5419375fc87d289076ee319835bdfa2caad331e377589aebba9\"},",
          "289:     {file = \"cffi-1.17.1-cp313-cp313-win32.whl\", hash = \"sha256:e03eab0a8677fa80d646b5ddece1cbeaf556c313dcfac435ba11f107ba117b5d\"},",
          "290:     {file = \"cffi-1.17.1-cp313-cp313-win_amd64.whl\", hash = \"sha256:f6a16c31041f09ead72d69f583767292f750d24913dadacf5756b966aacb3f1a\"},",
          "291:     {file = \"cffi-1.17.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:636062ea65bd0195bc012fea9321aca499c0504409f413dc88af450b57ffd03b\"},",
          "292:     {file = \"cffi-1.17.1-cp38-cp38-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c7eac2ef9b63c79431bc4b25f1cd649d7f061a28808cbc6c47b534bd789ef964\"},",
          "293:     {file = \"cffi-1.17.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e221cf152cff04059d011ee126477f0d9588303eb57e88923578ace7baad17f9\"},",
          "294:     {file = \"cffi-1.17.1-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:31000ec67d4221a71bd3f67df918b1f88f676f1c3b535a7eb473255fdc0b83fc\"},",
          "295:     {file = \"cffi-1.17.1-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:6f17be4345073b0a7b8ea599688f692ac3ef23ce28e5df79c04de519dbc4912c\"},",
          "296:     {file = \"cffi-1.17.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0e2b1fac190ae3ebfe37b979cc1ce69c81f4e4fe5746bb401dca63a9062cdaf1\"},",
          "297:     {file = \"cffi-1.17.1-cp38-cp38-win32.whl\", hash = \"sha256:7596d6620d3fa590f677e9ee430df2958d2d6d6de2feeae5b20e82c00b76fbf8\"},",
          "298:     {file = \"cffi-1.17.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:78122be759c3f8a014ce010908ae03364d00a1f81ab5c7f4a7a5120607ea56e1\"},",
          "299:     {file = \"cffi-1.17.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:b2ab587605f4ba0bf81dc0cb08a41bd1c0a5906bd59243d56bad7668a6fc6c16\"},",
          "300:     {file = \"cffi-1.17.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:28b16024becceed8c6dfbc75629e27788d8a3f9030691a1dbf9821a128b22c36\"},",
          "301:     {file = \"cffi-1.17.1-cp39-cp39-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1d599671f396c4723d016dbddb72fe8e0397082b0a77a4fab8028923bec050e8\"},",
          "302:     {file = \"cffi-1.17.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ca74b8dbe6e8e8263c0ffd60277de77dcee6c837a3d0881d8c1ead7268c9e576\"},",
          "303:     {file = \"cffi-1.17.1-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:f7f5baafcc48261359e14bcd6d9bff6d4b28d9103847c9e136694cb0501aef87\"},",
          "304:     {file = \"cffi-1.17.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:98e3969bcff97cae1b2def8ba499ea3d6f31ddfdb7635374834cf89a1a08ecf0\"},",
          "305:     {file = \"cffi-1.17.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:cdf5ce3acdfd1661132f2a9c19cac174758dc2352bfe37d98aa7512c6b7178b3\"},",
          "306:     {file = \"cffi-1.17.1-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:9755e4345d1ec879e3849e62222a18c7174d65a6a92d5b346b1863912168b595\"},",
          "307:     {file = \"cffi-1.17.1-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:f1e22e8c4419538cb197e4dd60acc919d7696e5ef98ee4da4e01d3f8cfa4cc5a\"},",
          "308:     {file = \"cffi-1.17.1-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:c03e868a0b3bc35839ba98e74211ed2b05d2119be4e8a0f224fba9384f1fe02e\"},",
          "309:     {file = \"cffi-1.17.1-cp39-cp39-win32.whl\", hash = \"sha256:e31ae45bc2e29f6b2abd0de1cc3b9d5205aa847cafaecb8af1476a609a2f6eb7\"},",
          "310:     {file = \"cffi-1.17.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:d016c76bdd850f3c626af19b0542c9677ba156e4ee4fccfdd7848803533ef662\"},",
          "311:     {file = \"cffi-1.17.1.tar.gz\", hash = \"sha256:1c39c6016c32bc48dd54561950ebd6836e1670f2ae46128f67cf49e789c52824\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1178: [[package]]",
          "1179: name = \"langsmith\"",
          "1181: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "1182: optional = false",
          "1183: python-versions = \"<4.0,>=3.8.1\"",
          "1184: files = [",
          "1187: ]",
          "1189: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1180: version = \"0.1.115\"",
          "1185:     {file = \"langsmith-0.1.115-py3-none-any.whl\", hash = \"sha256:04e35cfd4c2d4ff1ea10bb577ff43957b05ebb3d9eb4e06e200701f4a2b4ac9f\"},",
          "1186:     {file = \"langsmith-0.1.115.tar.gz\", hash = \"sha256:3b775377d858d32354f3ee0dd1ed637068cfe9a1f13e7b3bfa82db1615cdffc9\"},",
          "",
          "[Added Lines]",
          "1211: version = \"0.1.116\"",
          "1216:     {file = \"langsmith-0.1.116-py3-none-any.whl\", hash = \"sha256:4b5ea64c81ba5ca309695c85dc3fb4617429a985129ed5d9eca00d1c9d6483f4\"},",
          "1217:     {file = \"langsmith-0.1.116.tar.gz\", hash = \"sha256:5ccd7f5c1840f7c507ab3ee56334a1391de28c8bf72669782e2d82cafeefffa7\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3039: [metadata]",
          "3040: lock-version = \"2.0\"",
          "3041: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "3042: content-hash = \"0e0eec209d5652d6476b0d71393415eea2917f38235ad6e0b09ffd97f5b2ce87\"",
          "",
          "[Added Lines]",
          "3073: content-hash = \"f6f4881a490558c029e567af38ee5c6f3c2e050e96edd6fc3e841a75901a9225\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "093ae04d58371a7df1a5b217847d671299dd4449",
      "candidate_info": {
        "commit_hash": "093ae04d58371a7df1a5b217847d671299dd4449",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/093ae04d58371a7df1a5b217847d671299dd4449",
        "files": [
          ".github/workflows/check_diffs.yml",
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml",
          "libs/partners/ai21/poetry.lock",
          "libs/text-splitters/poetry.lock"
        ],
        "message": "core[patch]: Pin pydantic in py3.12.4 (#23130)",
        "before_after_code_files": [
          "libs/core/poetry.lock||libs/core/poetry.lock",
          "libs/partners/ai21/poetry.lock||libs/partners/ai21/poetry.lock",
          "libs/text-splitters/poetry.lock||libs/text-splitters/poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.7.1 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2172:     {file = \"PyYAML-6.0.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:69b023b2b4daa7548bcfbd4aa3da05b3a74b772db9e23b982788168117739938\"},",
          "2173:     {file = \"PyYAML-6.0.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:81e0b275a9ecc9c0c0c07b4b90ba548307583c125f54d5b6946cfee6360c733d\"},",
          "2174:     {file = \"PyYAML-6.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ba336e390cd8e4d1739f42dfe9bb83a3cc2e80f567d8805e11b46f4a943f5515\"},",
          "2175:     {file = \"PyYAML-6.0.1-cp310-cp310-win32.whl\", hash = \"sha256:bd4af7373a854424dabd882decdc5579653d7868b8fb26dc7d0e99f823aa5924\"},",
          "2176:     {file = \"PyYAML-6.0.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:fd1592b3fdf65fff2ad0004b5e363300ef59ced41c2e6b3a99d4089fa8c5435d\"},",
          "2177:     {file = \"PyYAML-6.0.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:6965a7bc3cf88e5a1c3bd2e0b5c22f8d677dc88a455344035f03399034eb3007\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2175:     {file = \"PyYAML-6.0.1-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:326c013efe8048858a6d312ddd31d56e468118ad4cdeda36c719bf5bb6192290\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2179:     {file = \"PyYAML-6.0.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:42f8152b8dbc4fe7d96729ec2b99c7097d656dc1213a3229ca5383f973a5ed6d\"},",
          "2180:     {file = \"PyYAML-6.0.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc\"},",
          "2181:     {file = \"PyYAML-6.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d2b04aac4d386b172d5b9692e2d2da8de7bfb6c387fa4f801fbf6fb2e6ba4673\"},",
          "2182:     {file = \"PyYAML-6.0.1-cp311-cp311-win32.whl\", hash = \"sha256:1635fd110e8d85d55237ab316b5b011de701ea0f29d07611174a1b42f1444741\"},",
          "2183:     {file = \"PyYAML-6.0.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:bf07ee2fef7014951eeb99f56f39c9bb4af143d8aa3c21b1677805985307da34\"},",
          "2184:     {file = \"PyYAML-6.0.1-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:50550eb667afee136e9a77d6dc71ae76a44df8b3e51e41b77f6de2932bfe0f47\"},",
          "2185:     {file = \"PyYAML-6.0.1-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1fe35611261b29bd1de0070f0b2f47cb6ff71fa6595c077e42bd0c419fa27b98\"},",
          "2186:     {file = \"PyYAML-6.0.1-cp36-cp36m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:704219a11b772aea0d8ecd7058d0082713c3562b4e271b849ad7dc4a5c90c13c\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2183:     {file = \"PyYAML-6.0.1-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:e7d73685e87afe9f3b36c799222440d6cf362062f78be1013661b00c5c6f678b\"},",
          "2186:     {file = \"PyYAML-6.0.1-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:855fb52b0dc35af121542a76b9a84f8d1cd886ea97c84703eaa6d88e37a2ad28\"},",
          "2187:     {file = \"PyYAML-6.0.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:40df9b996c2b73138957fe23a16a4f0ba614f4c0efce1e9406a184b6d07fa3a9\"},",
          "2188:     {file = \"PyYAML-6.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a08c6f0fe150303c1c6b71ebcd7213c2858041a7e01975da3a99aed1e7a378ef\"},",
          "2189:     {file = \"PyYAML-6.0.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6c22bec3fbe2524cde73d7ada88f6566758a8f7227bfbf93a408a9d86bcc12a0\"},",
          "2190:     {file = \"PyYAML-6.0.1-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:8d4e9c88387b0f5c7d5f281e55304de64cf7f9c0021a3525bd3b1c542da3b0e4\"},",
          "2191:     {file = \"PyYAML-6.0.1-cp312-cp312-win32.whl\", hash = \"sha256:d483d2cdf104e7c9fa60c544d92981f12ad66a457afae824d146093b8c294c54\"},",
          "2192:     {file = \"PyYAML-6.0.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2197:     {file = \"PyYAML-6.0.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a0cd17c15d3bb3fa06978b4e8958dcdc6e0174ccea823003a106c7d4d7899ac5\"},",
          "2198:     {file = \"PyYAML-6.0.1-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:28c119d996beec18c05208a8bd78cbe4007878c6dd15091efb73a30e90539696\"},",
          "2199:     {file = \"PyYAML-6.0.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7e07cbde391ba96ab58e532ff4803f79c4129397514e1413a7dc761ccd755735\"},",
          "2200:     {file = \"PyYAML-6.0.1-cp38-cp38-win32.whl\", hash = \"sha256:184c5108a2aca3c5b3d3bf9395d50893a7ab82a38004c8f61c258d4428e80206\"},",
          "2201:     {file = \"PyYAML-6.0.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:1e2722cc9fbb45d9b87631ac70924c11d3a401b2d7f410cc0e3bbf249f2dca62\"},",
          "2202:     {file = \"PyYAML-6.0.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:9eb6caa9a297fc2c2fb8862bc5370d0303ddba53ba97e71f08023b6cd73d16a8\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2209:     {file = \"PyYAML-6.0.1-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:49a183be227561de579b4a36efbb21b3eab9651dd81b1858589f796549873dd6\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2204:     {file = \"PyYAML-6.0.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5773183b6446b2c99bb77e77595dd486303b4faab2b086e7b17bc6bef28865f6\"},",
          "2205:     {file = \"PyYAML-6.0.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:b786eecbdf8499b9ca1d697215862083bd6d2a99965554781d0d8d1ad31e13a0\"},",
          "2206:     {file = \"PyYAML-6.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bc1bf2925a1ecd43da378f4db9e4f799775d6367bdb94671027b73b393a7c42c\"},",
          "2207:     {file = \"PyYAML-6.0.1-cp39-cp39-win32.whl\", hash = \"sha256:faca3bdcf85b2fc05d06ff3fbc1f83e1391b3e724afa3feba7d13eeab355484c\"},",
          "2208:     {file = \"PyYAML-6.0.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:510c9deebc5c0225e8c96813043e62b680ba2f9c50a08d3724c7f28a747d1486\"},",
          "2209:     {file = \"PyYAML-6.0.1.tar.gz\", hash = \"sha256:bfdf460b1736c775f2ba9f6a92bca30bc2095067b8a9d77876d1fad6cc3b4a43\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2217:     {file = \"PyYAML-6.0.1-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2992: [metadata]",
          "2993: lock-version = \"2.0\"",
          "2994: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "2995: content-hash = \"368d050ae41dfbb296a7319987ebfe09ddf599474078649a517fb6c432b6d9b1\"",
          "",
          "[Added Lines]",
          "3006: content-hash = \"b501fc38415a876676a94ee7b912e8a35c19e21f022a6544beca59be93254eee\"",
          "",
          "---------------"
        ],
        "libs/partners/ai21/poetry.lock||libs/partners/ai21/poetry.lock": [
          "File: libs/partners/ai21/poetry.lock -> libs/partners/ai21/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"ai21\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.7.1 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "448: [[package]]",
          "449: name = \"langchain-core\"",
          "451: description = \"Building applications with LLMs through composability\"",
          "452: optional = false",
          "453: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "450: version = \"0.2.4\"",
          "",
          "[Added Lines]",
          "450: version = \"0.2.9\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "457: [package.dependencies]",
          "458: jsonpatch = \"^1.33\"",
          "462: PyYAML = \">=5.3\"",
          "468: [package.source]",
          "469: type = \"directory\"",
          "",
          "[Removed Lines]",
          "459: langsmith = \"^0.1.66\"",
          "460: packaging = \"^23.2\"",
          "461: pydantic = \">=1,<3\"",
          "463: tenacity = \"^8.1.0\"",
          "465: [package.extras]",
          "466: extended-testing = [\"jinja2 (>=3,<4)\"]",
          "",
          "[Added Lines]",
          "459: langsmith = \"^0.1.75\"",
          "460: packaging = \">=23.2,<25\"",
          "461: pydantic = [",
          "462:     {version = \">=1,<3\", markers = \"python_full_version < \\\"3.12.4\\\"\"},",
          "463:     {version = \">=2.7.4,<3.0.0\", markers = \"python_full_version >= \\\"3.12.4\\\"\"},",
          "464: ]",
          "466: tenacity = \"^8.1.0,!=8.4.0\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "472: [[package]]",
          "473: name = \"langchain-standard-tests\"",
          "475: description = \"Standard tests for LangChain implementations\"",
          "476: optional = false",
          "477: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "474: version = \"0.1.0\"",
          "",
          "[Added Lines]",
          "474: version = \"0.1.1\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "498: [package.dependencies]",
          "499: langchain-core = \"^0.2.0\"",
          "504: [package.source]",
          "505: type = \"directory\"",
          "506: url = \"../../text-splitters\"",
          "508: [[package]]",
          "509: name = \"langsmith\"",
          "511: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "512: optional = false",
          "513: python-versions = \"<4.0,>=3.8.1\"",
          "514: files = [",
          "517: ]",
          "519: [package.dependencies]",
          "",
          "[Removed Lines]",
          "501: [package.extras]",
          "502: extended-testing = [\"beautifulsoup4 (>=4.12.3,<5.0.0)\", \"lxml (>=4.9.3,<6.0)\"]",
          "510: version = \"0.1.71\"",
          "515:     {file = \"langsmith-0.1.71-py3-none-any.whl\", hash = \"sha256:a9979de2780442eb24eced31314e49f5ece6f807a0d70740b2c6c39217226794\"},",
          "516:     {file = \"langsmith-0.1.71.tar.gz\", hash = \"sha256:bdb1037a08acf7c19b3969c085df09c1eecb65baca8400b3b76ae871e2c8a97e\"},",
          "",
          "[Added Lines]",
          "507: version = \"0.1.79\"",
          "512:     {file = \"langsmith-0.1.79-py3-none-any.whl\", hash = \"sha256:c7f2c23981917713b5515b773f37c84ff68a7adf803476e2ebb5adcb36a04202\"},",
          "513:     {file = \"langsmith-0.1.79.tar.gz\", hash = \"sha256:d215718cfdcdf4a011126b7a3d4a37eee96d887e59ac1e628a57e24b2bfa3163\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "701: [package.extras]",
          "702: email = [\"email-validator (>=2.0.0)\"]",
          "704: [[package]]",
          "705: name = \"pydantic-core\"",
          "706: version = \"2.18.4\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "701: [[package]]",
          "702: name = \"pydantic\"",
          "703: version = \"2.7.4\"",
          "704: description = \"Data validation using Python type hints\"",
          "705: optional = false",
          "706: python-versions = \">=3.8\"",
          "707: files = [",
          "708:     {file = \"pydantic-2.7.4-py3-none-any.whl\", hash = \"sha256:ee8538d41ccb9c0a9ad3e0e5f07bf15ed8015b481ced539a1759d8cc89ae90d0\"},",
          "709:     {file = \"pydantic-2.7.4.tar.gz\", hash = \"sha256:0c84efd9548d545f63ac0060c1e4d39bb9b14db8b3c0652338aecc07b5adec52\"},",
          "710: ]",
          "712: [package.dependencies]",
          "713: annotated-types = \">=0.4.0\"",
          "714: pydantic-core = \"2.18.4\"",
          "715: typing-extensions = \">=4.6.1\"",
          "717: [package.extras]",
          "718: email = [\"email-validator (>=2.0.0)\"]",
          "",
          "---------------"
        ],
        "libs/text-splitters/poetry.lock||libs/text-splitters/poetry.lock": [
          "File: libs/text-splitters/poetry.lock -> libs/text-splitters/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.7.1 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "678: [[package]]",
          "679: name = \"fastjsonschema\"",
          "681: description = \"Fastest Python implementation of JSON schema\"",
          "682: optional = false",
          "683: python-versions = \"*\"",
          "684: files = [",
          "687: ]",
          "689: [package.extras]",
          "",
          "[Removed Lines]",
          "680: version = \"2.19.1\"",
          "685:     {file = \"fastjsonschema-2.19.1-py3-none-any.whl\", hash = \"sha256:3672b47bc94178c9f23dbb654bf47440155d4db9df5f7bc47643315f9c405cd0\"},",
          "686:     {file = \"fastjsonschema-2.19.1.tar.gz\", hash = \"sha256:e3126a94bdc4623d3de4485f8d468a12f02a67921315ddc87836d6e456dc789d\"},",
          "",
          "[Added Lines]",
          "680: version = \"2.20.0\"",
          "685:     {file = \"fastjsonschema-2.20.0-py3-none-any.whl\", hash = \"sha256:5875f0b0fa7a0043a91e93a9b8f793bcbbba9691e7fd83dca95c28ba26d21f0a\"},",
          "686:     {file = \"fastjsonschema-2.20.0.tar.gz\", hash = \"sha256:3d48fc5300ee96f5d116f10fe6f28d938e6008f59a6a025c2649475b87f76a23\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "717: [[package]]",
          "718: name = \"gprof2dot\"",
          "720: description = \"Generate a dot graph from the output of several profilers.\"",
          "721: optional = false",
          "723: files = [",
          "726: ]",
          "728: [[package]]",
          "",
          "[Removed Lines]",
          "719: version = \"2024.6.5\"",
          "722: python-versions = \">=2.7\"",
          "724:     {file = \"gprof2dot-2024.6.5-py2.py3-none-any.whl\", hash = \"sha256:0be69ac4f5e0d6f57e0c627fa8f6053bdca6a7a226ea6fd8a74b69c845c7d2df\"},",
          "725:     {file = \"gprof2dot-2024.6.5.tar.gz\", hash = \"sha256:7564e4483f710d463bca1f27668aa595faaf0beee8ad0461df063a44305122a0\"},",
          "",
          "[Added Lines]",
          "719: version = \"2024.6.6\"",
          "722: python-versions = \">=3.8\"",
          "724:     {file = \"gprof2dot-2024.6.6-py2.py3-none-any.whl\", hash = \"sha256:45b14ad7ce64e299c8f526881007b9eb2c6b75505d5613e96e66ee4d5ab33696\"},",
          "725:     {file = \"gprof2dot-2024.6.6.tar.gz\", hash = \"sha256:fa1420c60025a9eb7734f65225b4da02a10fc6dd741b37fa129bc6b41951e5ab\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1011: [[package]]",
          "1012: name = \"jsonpointer\"",
          "1014: description = \"Identify specific nodes in a JSON document (RFC 6901)\"",
          "1015: optional = false",
          "1017: files = [",
          "1020: ]",
          "1022: [[package]]",
          "",
          "[Removed Lines]",
          "1013: version = \"2.4\"",
          "1016: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*\"",
          "1018:     {file = \"jsonpointer-2.4-py2.py3-none-any.whl\", hash = \"sha256:15d51bba20eea3165644553647711d150376234112651b4f1811022aecad7d7a\"},",
          "1019:     {file = \"jsonpointer-2.4.tar.gz\", hash = \"sha256:585cee82b70211fa9e6043b7bb89db6e1aa49524340dde8ad6b63206ea689d88\"},",
          "",
          "[Added Lines]",
          "1013: version = \"3.0.0\"",
          "1016: python-versions = \">=3.7\"",
          "1018:     {file = \"jsonpointer-3.0.0-py2.py3-none-any.whl\", hash = \"sha256:13e088adc14fca8b6aa8177c044e12701e6ad4b28ff10e65f2267a90109c9942\"},",
          "1019:     {file = \"jsonpointer-3.0.0.tar.gz\", hash = \"sha256:2b2d729f2091522d61c3b31f82e11870f60b68f43fbc705cb76bf4b832af59ef\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1250: [[package]]",
          "1251: name = \"jupyterlab\"",
          "1253: description = \"JupyterLab computational environment\"",
          "1254: optional = false",
          "1255: python-versions = \">=3.8\"",
          "1256: files = [",
          "1259: ]",
          "1261: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1252: version = \"4.2.1\"",
          "1257:     {file = \"jupyterlab-4.2.1-py3-none-any.whl\", hash = \"sha256:6ac6e3827b3c890e6e549800e8a4f4aaea6a69321e2240007902aa7a0c56a8e4\"},",
          "1258:     {file = \"jupyterlab-4.2.1.tar.gz\", hash = \"sha256:a10fb71085a6900820c62d43324005046402ffc8f0fde696103e37238a839507\"},",
          "",
          "[Added Lines]",
          "1252: version = \"4.2.2\"",
          "1257:     {file = \"jupyterlab-4.2.2-py3-none-any.whl\", hash = \"sha256:59ee9b839f43308c3dfd55d72d1f1a299ed42a7f91f2d1afe9c12a783f9e525f\"},",
          "1258:     {file = \"jupyterlab-4.2.2.tar.gz\", hash = \"sha256:a534b6a25719a92a40d514fb133a9fe8f0d9981b0bbce5d8a5fcaa33344a3038\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1271: jupyterlab-server = \">=2.27.1,<3\"",
          "1272: notebook-shim = \">=0.2\"",
          "1273: packaging = \"*\"",
          "1274: tomli = {version = \">=1.2.2\", markers = \"python_version < \\\"3.11\\\"\"}",
          "1275: tornado = \">=6.2.0\"",
          "1276: traitlets = \"*\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1274: setuptools = \">=40.1.0\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1333: [[package]]",
          "1334: name = \"langchain-core\"",
          "1336: description = \"Building applications with LLMs through composability\"",
          "1337: optional = false",
          "1338: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "1335: version = \"0.2.4\"",
          "",
          "[Added Lines]",
          "1336: version = \"0.2.9\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1342: [package.dependencies]",
          "1343: jsonpatch = \"^1.33\"",
          "1347: PyYAML = \">=5.3\"",
          "1350: [package.source]",
          "1351: type = \"directory\"",
          "",
          "[Removed Lines]",
          "1344: langsmith = \"^0.1.66\"",
          "1345: packaging = \"^23.2\"",
          "1346: pydantic = \">=1,<3\"",
          "1348: tenacity = \"^8.1.0\"",
          "",
          "[Added Lines]",
          "1345: langsmith = \"^0.1.75\"",
          "1346: packaging = \">=23.2,<25\"",
          "1347: pydantic = [",
          "1348:     {version = \">=1,<3\", markers = \"python_full_version < \\\"3.12.4\\\"\"},",
          "1349:     {version = \">=2.7.4,<3.0.0\", markers = \"python_full_version >= \\\"3.12.4\\\"\"},",
          "1350: ]",
          "1352: tenacity = \"^8.1.0,!=8.4.0\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1372: [[package]]",
          "1373: name = \"langsmith\"",
          "1375: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "1376: optional = false",
          "1377: python-versions = \"<4.0,>=3.8.1\"",
          "1378: files = [",
          "1381: ]",
          "1383: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1374: version = \"0.1.73\"",
          "1379:     {file = \"langsmith-0.1.73-py3-none-any.whl\", hash = \"sha256:38bfcce2cfcf0b2da2e9628b903c9e768e1ce59d450e8a584514c1638c595e93\"},",
          "1380:     {file = \"langsmith-0.1.73.tar.gz\", hash = \"sha256:0055471cb1fddb76ec65499716764ad0b0314affbdf33ff1f72ad5e2d6a3b224\"},",
          "",
          "[Added Lines]",
          "1378: version = \"0.1.79\"",
          "1383:     {file = \"langsmith-0.1.79-py3-none-any.whl\", hash = \"sha256:c7f2c23981917713b5515b773f37c84ff68a7adf803476e2ebb5adcb36a04202\"},",
          "1384:     {file = \"langsmith-0.1.79.tar.gz\", hash = \"sha256:d215718cfdcdf4a011126b7a3d4a37eee96d887e59ac1e628a57e24b2bfa3163\"},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1844: [[package]]",
          "1845: name = \"notebook\"",
          "1847: description = \"Jupyter Notebook - A web-based notebook environment for interactive computing\"",
          "1848: optional = false",
          "1849: python-versions = \">=3.8\"",
          "1850: files = [",
          "1853: ]",
          "1855: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1846: version = \"7.2.0\"",
          "1851:     {file = \"notebook-7.2.0-py3-none-any.whl\", hash = \"sha256:b4752d7407d6c8872fc505df0f00d3cae46e8efb033b822adacbaa3f1f3ce8f5\"},",
          "1852:     {file = \"notebook-7.2.0.tar.gz\", hash = \"sha256:34a2ba4b08ad5d19ec930db7484fb79746a1784be9e1a5f8218f9af8656a141f\"},",
          "",
          "[Added Lines]",
          "1850: version = \"7.2.1\"",
          "1855:     {file = \"notebook-7.2.1-py3-none-any.whl\", hash = \"sha256:f45489a3995746f2195a137e0773e2130960b51c9ac3ce257dbc2705aab3a6ca\"},",
          "1856:     {file = \"notebook-7.2.1.tar.gz\", hash = \"sha256:4287b6da59740b32173d01d641f763d292f49c30e7a51b89c46ba8473126341e\"},",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1921: [[package]]",
          "1922: name = \"numpy\"",
          "1924: description = \"Fundamental package for array computing in Python\"",
          "1925: optional = false",
          "1926: python-versions = \">=3.9\"",
          "1927: files = [",
          "1964: ]",
          "1966: [[package]]",
          "1967: name = \"orjson\"",
          "1969: description = \"Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy\"",
          "1970: optional = false",
          "1971: python-versions = \">=3.8\"",
          "1972: files = [",
          "2019: ]",
          "2021: [[package]]",
          "",
          "[Removed Lines]",
          "1923: version = \"1.26.4\"",
          "1928:     {file = \"numpy-1.26.4-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:9ff0f4f29c51e2803569d7a51c2304de5554655a60c5d776e35b4a41413830d0\"},",
          "1929:     {file = \"numpy-1.26.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:2e4ee3380d6de9c9ec04745830fd9e2eccb3e6cf790d39d7b98ffd19b0dd754a\"},",
          "1930:     {file = \"numpy-1.26.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d209d8969599b27ad20994c8e41936ee0964e6da07478d6c35016bc386b66ad4\"},",
          "1931:     {file = \"numpy-1.26.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ffa75af20b44f8dba823498024771d5ac50620e6915abac414251bd971b4529f\"},",
          "1932:     {file = \"numpy-1.26.4-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:62b8e4b1e28009ef2846b4c7852046736bab361f7aeadeb6a5b89ebec3c7055a\"},",
          "1933:     {file = \"numpy-1.26.4-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:a4abb4f9001ad2858e7ac189089c42178fcce737e4169dc61321660f1a96c7d2\"},",
          "1934:     {file = \"numpy-1.26.4-cp310-cp310-win32.whl\", hash = \"sha256:bfe25acf8b437eb2a8b2d49d443800a5f18508cd811fea3181723922a8a82b07\"},",
          "1935:     {file = \"numpy-1.26.4-cp310-cp310-win_amd64.whl\", hash = \"sha256:b97fe8060236edf3662adfc2c633f56a08ae30560c56310562cb4f95500022d5\"},",
          "1936:     {file = \"numpy-1.26.4-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:4c66707fabe114439db9068ee468c26bbdf909cac0fb58686a42a24de1760c71\"},",
          "1937:     {file = \"numpy-1.26.4-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:edd8b5fe47dab091176d21bb6de568acdd906d1887a4584a15a9a96a1dca06ef\"},",
          "1938:     {file = \"numpy-1.26.4-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:7ab55401287bfec946ced39700c053796e7cc0e3acbef09993a9ad2adba6ca6e\"},",
          "1939:     {file = \"numpy-1.26.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:666dbfb6ec68962c033a450943ded891bed2d54e6755e35e5835d63f4f6931d5\"},",
          "1940:     {file = \"numpy-1.26.4-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:96ff0b2ad353d8f990b63294c8986f1ec3cb19d749234014f4e7eb0112ceba5a\"},",
          "1941:     {file = \"numpy-1.26.4-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:60dedbb91afcbfdc9bc0b1f3f402804070deed7392c23eb7a7f07fa857868e8a\"},",
          "1942:     {file = \"numpy-1.26.4-cp311-cp311-win32.whl\", hash = \"sha256:1af303d6b2210eb850fcf03064d364652b7120803a0b872f5211f5234b399f20\"},",
          "1943:     {file = \"numpy-1.26.4-cp311-cp311-win_amd64.whl\", hash = \"sha256:cd25bcecc4974d09257ffcd1f098ee778f7834c3ad767fe5db785be9a4aa9cb2\"},",
          "1944:     {file = \"numpy-1.26.4-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:b3ce300f3644fb06443ee2222c2201dd3a89ea6040541412b8fa189341847218\"},",
          "1945:     {file = \"numpy-1.26.4-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:03a8c78d01d9781b28a6989f6fa1bb2c4f2d51201cf99d3dd875df6fbd96b23b\"},",
          "1946:     {file = \"numpy-1.26.4-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:9fad7dcb1aac3c7f0584a5a8133e3a43eeb2fe127f47e3632d43d677c66c102b\"},",
          "1947:     {file = \"numpy-1.26.4-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:675d61ffbfa78604709862923189bad94014bef562cc35cf61d3a07bba02a7ed\"},",
          "1948:     {file = \"numpy-1.26.4-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:ab47dbe5cc8210f55aa58e4805fe224dac469cde56b9f731a4c098b91917159a\"},",
          "1949:     {file = \"numpy-1.26.4-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:1dda2e7b4ec9dd512f84935c5f126c8bd8b9f2fc001e9f54af255e8c5f16b0e0\"},",
          "1950:     {file = \"numpy-1.26.4-cp312-cp312-win32.whl\", hash = \"sha256:50193e430acfc1346175fcbdaa28ffec49947a06918b7b92130744e81e640110\"},",
          "1951:     {file = \"numpy-1.26.4-cp312-cp312-win_amd64.whl\", hash = \"sha256:08beddf13648eb95f8d867350f6a018a4be2e5ad54c8d8caed89ebca558b2818\"},",
          "1952:     {file = \"numpy-1.26.4-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:7349ab0fa0c429c82442a27a9673fc802ffdb7c7775fad780226cb234965e53c\"},",
          "1953:     {file = \"numpy-1.26.4-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:52b8b60467cd7dd1e9ed082188b4e6bb35aa5cdd01777621a1658910745b90be\"},",
          "1954:     {file = \"numpy-1.26.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d5241e0a80d808d70546c697135da2c613f30e28251ff8307eb72ba696945764\"},",
          "1955:     {file = \"numpy-1.26.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f870204a840a60da0b12273ef34f7051e98c3b5961b61b0c2c1be6dfd64fbcd3\"},",
          "1956:     {file = \"numpy-1.26.4-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:679b0076f67ecc0138fd2ede3a8fd196dddc2ad3254069bcb9faf9a79b1cebcd\"},",
          "1957:     {file = \"numpy-1.26.4-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:47711010ad8555514b434df65f7d7b076bb8261df1ca9bb78f53d3b2db02e95c\"},",
          "1958:     {file = \"numpy-1.26.4-cp39-cp39-win32.whl\", hash = \"sha256:a354325ee03388678242a4d7ebcd08b5c727033fcff3b2f536aea978e15ee9e6\"},",
          "1959:     {file = \"numpy-1.26.4-cp39-cp39-win_amd64.whl\", hash = \"sha256:3373d5d70a5fe74a2c1bb6d2cfd9609ecf686d47a2d7b1d37a8f3b6bf6003aea\"},",
          "1960:     {file = \"numpy-1.26.4-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:afedb719a9dcfc7eaf2287b839d8198e06dcd4cb5d276a3df279231138e83d30\"},",
          "1961:     {file = \"numpy-1.26.4-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:95a7476c59002f2f6c590b9b7b998306fba6a5aa646b1e22ddfeaf8f78c3a29c\"},",
          "1962:     {file = \"numpy-1.26.4-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:7e50d0a0cc3189f9cb0aeb3a6a6af18c16f59f004b866cd2be1c14b36134a4a0\"},",
          "1963:     {file = \"numpy-1.26.4.tar.gz\", hash = \"sha256:2a02aba9ed12e4ac4eb3ea9421c420301a0c6460d9830d74a9df87efa4912010\"},",
          "1968: version = \"3.10.3\"",
          "1973:     {file = \"orjson-3.10.3-cp310-cp310-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:9fb6c3f9f5490a3eb4ddd46fc1b6eadb0d6fc16fb3f07320149c3286a1409dd8\"},",
          "1974:     {file = \"orjson-3.10.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:252124b198662eee80428f1af8c63f7ff077c88723fe206a25df8dc57a57b1fa\"},",
          "1975:     {file = \"orjson-3.10.3-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:9f3e87733823089a338ef9bbf363ef4de45e5c599a9bf50a7a9b82e86d0228da\"},",
          "1976:     {file = \"orjson-3.10.3-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:c8334c0d87103bb9fbbe59b78129f1f40d1d1e8355bbed2ca71853af15fa4ed3\"},",
          "1977:     {file = \"orjson-3.10.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1952c03439e4dce23482ac846e7961f9d4ec62086eb98ae76d97bd41d72644d7\"},",
          "1978:     {file = \"orjson-3.10.3-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:c0403ed9c706dcd2809f1600ed18f4aae50be263bd7112e54b50e2c2bc3ebd6d\"},",
          "1979:     {file = \"orjson-3.10.3-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:382e52aa4270a037d41f325e7d1dfa395b7de0c367800b6f337d8157367bf3a7\"},",
          "1980:     {file = \"orjson-3.10.3-cp310-none-win32.whl\", hash = \"sha256:be2aab54313752c04f2cbaab4515291ef5af8c2256ce22abc007f89f42f49109\"},",
          "1981:     {file = \"orjson-3.10.3-cp310-none-win_amd64.whl\", hash = \"sha256:416b195f78ae461601893f482287cee1e3059ec49b4f99479aedf22a20b1098b\"},",
          "1982:     {file = \"orjson-3.10.3-cp311-cp311-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:73100d9abbbe730331f2242c1fc0bcb46a3ea3b4ae3348847e5a141265479700\"},",
          "1983:     {file = \"orjson-3.10.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:544a12eee96e3ab828dbfcb4d5a0023aa971b27143a1d35dc214c176fdfb29b3\"},",
          "1984:     {file = \"orjson-3.10.3-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:520de5e2ef0b4ae546bea25129d6c7c74edb43fc6cf5213f511a927f2b28148b\"},",
          "1985:     {file = \"orjson-3.10.3-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:ccaa0a401fc02e8828a5bedfd80f8cd389d24f65e5ca3954d72c6582495b4bcf\"},",
          "1986:     {file = \"orjson-3.10.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9a7bc9e8bc11bac40f905640acd41cbeaa87209e7e1f57ade386da658092dc16\"},",
          "1987:     {file = \"orjson-3.10.3-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:3582b34b70543a1ed6944aca75e219e1192661a63da4d039d088a09c67543b08\"},",
          "1988:     {file = \"orjson-3.10.3-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:1c23dfa91481de880890d17aa7b91d586a4746a4c2aa9a145bebdbaf233768d5\"},",
          "1989:     {file = \"orjson-3.10.3-cp311-none-win32.whl\", hash = \"sha256:1770e2a0eae728b050705206d84eda8b074b65ee835e7f85c919f5705b006c9b\"},",
          "1990:     {file = \"orjson-3.10.3-cp311-none-win_amd64.whl\", hash = \"sha256:93433b3c1f852660eb5abdc1f4dd0ced2be031ba30900433223b28ee0140cde5\"},",
          "1991:     {file = \"orjson-3.10.3-cp312-cp312-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:a39aa73e53bec8d410875683bfa3a8edf61e5a1c7bb4014f65f81d36467ea098\"},",
          "1992:     {file = \"orjson-3.10.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0943a96b3fa09bee1afdfccc2cb236c9c64715afa375b2af296c73d91c23eab2\"},",
          "1993:     {file = \"orjson-3.10.3-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:e852baafceff8da3c9defae29414cc8513a1586ad93e45f27b89a639c68e8176\"},",
          "1994:     {file = \"orjson-3.10.3-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:18566beb5acd76f3769c1d1a7ec06cdb81edc4d55d2765fb677e3eaa10fa99e0\"},",
          "1995:     {file = \"orjson-3.10.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1bd2218d5a3aa43060efe649ec564ebedec8ce6ae0a43654b81376216d5ebd42\"},",
          "1996:     {file = \"orjson-3.10.3-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:cf20465e74c6e17a104ecf01bf8cd3b7b252565b4ccee4548f18b012ff2f8069\"},",
          "1997:     {file = \"orjson-3.10.3-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:ba7f67aa7f983c4345eeda16054a4677289011a478ca947cd69c0a86ea45e534\"},",
          "1998:     {file = \"orjson-3.10.3-cp312-none-win32.whl\", hash = \"sha256:17e0713fc159abc261eea0f4feda611d32eabc35708b74bef6ad44f6c78d5ea0\"},",
          "1999:     {file = \"orjson-3.10.3-cp312-none-win_amd64.whl\", hash = \"sha256:4c895383b1ec42b017dd2c75ae8a5b862fc489006afde06f14afbdd0309b2af0\"},",
          "2000:     {file = \"orjson-3.10.3-cp38-cp38-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:be2719e5041e9fb76c8c2c06b9600fe8e8584e6980061ff88dcbc2691a16d20d\"},",
          "2001:     {file = \"orjson-3.10.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:cb0175a5798bdc878956099f5c54b9837cb62cfbf5d0b86ba6d77e43861bcec2\"},",
          "2002:     {file = \"orjson-3.10.3-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:978be58a68ade24f1af7758626806e13cff7748a677faf95fbb298359aa1e20d\"},",
          "2003:     {file = \"orjson-3.10.3-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:16bda83b5c61586f6f788333d3cf3ed19015e3b9019188c56983b5a299210eb5\"},",
          "2004:     {file = \"orjson-3.10.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4ad1f26bea425041e0a1adad34630c4825a9e3adec49079b1fb6ac8d36f8b754\"},",
          "2005:     {file = \"orjson-3.10.3-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:9e253498bee561fe85d6325ba55ff2ff08fb5e7184cd6a4d7754133bd19c9195\"},",
          "2006:     {file = \"orjson-3.10.3-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:0a62f9968bab8a676a164263e485f30a0b748255ee2f4ae49a0224be95f4532b\"},",
          "2007:     {file = \"orjson-3.10.3-cp38-none-win32.whl\", hash = \"sha256:8d0b84403d287d4bfa9bf7d1dc298d5c1c5d9f444f3737929a66f2fe4fb8f134\"},",
          "2008:     {file = \"orjson-3.10.3-cp38-none-win_amd64.whl\", hash = \"sha256:8bc7a4df90da5d535e18157220d7915780d07198b54f4de0110eca6b6c11e290\"},",
          "2009:     {file = \"orjson-3.10.3-cp39-cp39-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:9059d15c30e675a58fdcd6f95465c1522b8426e092de9fff20edebfdc15e1cb0\"},",
          "2010:     {file = \"orjson-3.10.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8d40c7f7938c9c2b934b297412c067936d0b54e4b8ab916fd1a9eb8f54c02294\"},",
          "2011:     {file = \"orjson-3.10.3-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:d4a654ec1de8fdaae1d80d55cee65893cb06494e124681ab335218be6a0691e7\"},",
          "2012:     {file = \"orjson-3.10.3-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:831c6ef73f9aa53c5f40ae8f949ff7681b38eaddb6904aab89dca4d85099cb78\"},",
          "2013:     {file = \"orjson-3.10.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:99b880d7e34542db89f48d14ddecbd26f06838b12427d5a25d71baceb5ba119d\"},",
          "2014:     {file = \"orjson-3.10.3-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:2e5e176c994ce4bd434d7aafb9ecc893c15f347d3d2bbd8e7ce0b63071c52e25\"},",
          "2015:     {file = \"orjson-3.10.3-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:b69a58a37dab856491bf2d3bbf259775fdce262b727f96aafbda359cb1d114d8\"},",
          "2016:     {file = \"orjson-3.10.3-cp39-none-win32.whl\", hash = \"sha256:b8d4d1a6868cde356f1402c8faeb50d62cee765a1f7ffcfd6de732ab0581e063\"},",
          "2017:     {file = \"orjson-3.10.3-cp39-none-win_amd64.whl\", hash = \"sha256:5102f50c5fc46d94f2033fe00d392588564378260d64377aec702f21a7a22912\"},",
          "2018:     {file = \"orjson-3.10.3.tar.gz\", hash = \"sha256:2b166507acae7ba2f7c315dcf185a9111ad5e992ac81f2d507aac39193c2c818\"},",
          "",
          "[Added Lines]",
          "1927: version = \"2.0.0\"",
          "1932:     {file = \"numpy-2.0.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:04494f6ec467ccb5369d1808570ae55f6ed9b5809d7f035059000a37b8d7e86f\"},",
          "1933:     {file = \"numpy-2.0.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:2635dbd200c2d6faf2ef9a0d04f0ecc6b13b3cad54f7c67c61155138835515d2\"},",
          "1934:     {file = \"numpy-2.0.0-cp310-cp310-macosx_14_0_arm64.whl\", hash = \"sha256:0a43f0974d501842866cc83471bdb0116ba0dffdbaac33ec05e6afed5b615238\"},",
          "1935:     {file = \"numpy-2.0.0-cp310-cp310-macosx_14_0_x86_64.whl\", hash = \"sha256:8d83bb187fb647643bd56e1ae43f273c7f4dbcdf94550d7938cfc32566756514\"},",
          "1936:     {file = \"numpy-2.0.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:79e843d186c8fb1b102bef3e2bc35ef81160ffef3194646a7fdd6a73c6b97196\"},",
          "1937:     {file = \"numpy-2.0.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6d7696c615765091cc5093f76fd1fa069870304beaccfd58b5dcc69e55ef49c1\"},",
          "1938:     {file = \"numpy-2.0.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:b4c76e3d4c56f145d41b7b6751255feefae92edbc9a61e1758a98204200f30fc\"},",
          "1939:     {file = \"numpy-2.0.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:acd3a644e4807e73b4e1867b769fbf1ce8c5d80e7caaef0d90dcdc640dfc9787\"},",
          "1940:     {file = \"numpy-2.0.0-cp310-cp310-win32.whl\", hash = \"sha256:cee6cc0584f71adefe2c908856ccc98702baf95ff80092e4ca46061538a2ba98\"},",
          "1941:     {file = \"numpy-2.0.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:ed08d2703b5972ec736451b818c2eb9da80d66c3e84aed1deeb0c345fefe461b\"},",
          "1942:     {file = \"numpy-2.0.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:ad0c86f3455fbd0de6c31a3056eb822fc939f81b1618f10ff3406971893b62a5\"},",
          "1943:     {file = \"numpy-2.0.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:e7f387600d424f91576af20518334df3d97bc76a300a755f9a8d6e4f5cadd289\"},",
          "1944:     {file = \"numpy-2.0.0-cp311-cp311-macosx_14_0_arm64.whl\", hash = \"sha256:34f003cb88b1ba38cb9a9a4a3161c1604973d7f9d5552c38bc2f04f829536609\"},",
          "1945:     {file = \"numpy-2.0.0-cp311-cp311-macosx_14_0_x86_64.whl\", hash = \"sha256:b6f6a8f45d0313db07d6d1d37bd0b112f887e1369758a5419c0370ba915b3871\"},",
          "1946:     {file = \"numpy-2.0.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5f64641b42b2429f56ee08b4f427a4d2daf916ec59686061de751a55aafa22e4\"},",
          "1947:     {file = \"numpy-2.0.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a7039a136017eaa92c1848152827e1424701532ca8e8967fe480fe1569dae581\"},",
          "1948:     {file = \"numpy-2.0.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:46e161722e0f619749d1cd892167039015b2c2817296104487cd03ed4a955995\"},",
          "1949:     {file = \"numpy-2.0.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:0e50842b2295ba8414c8c1d9d957083d5dfe9e16828b37de883f51fc53c4016f\"},",
          "1950:     {file = \"numpy-2.0.0-cp311-cp311-win32.whl\", hash = \"sha256:2ce46fd0b8a0c947ae047d222f7136fc4d55538741373107574271bc00e20e8f\"},",
          "1951:     {file = \"numpy-2.0.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:fbd6acc766814ea6443628f4e6751d0da6593dae29c08c0b2606164db026970c\"},",
          "1952:     {file = \"numpy-2.0.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:354f373279768fa5a584bac997de6a6c9bc535c482592d7a813bb0c09be6c76f\"},",
          "1953:     {file = \"numpy-2.0.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:4d2f62e55a4cd9c58c1d9a1c9edaedcd857a73cb6fda875bf79093f9d9086f85\"},",
          "1954:     {file = \"numpy-2.0.0-cp312-cp312-macosx_14_0_arm64.whl\", hash = \"sha256:1e72728e7501a450288fc8e1f9ebc73d90cfd4671ebbd631f3e7857c39bd16f2\"},",
          "1955:     {file = \"numpy-2.0.0-cp312-cp312-macosx_14_0_x86_64.whl\", hash = \"sha256:84554fc53daa8f6abf8e8a66e076aff6ece62de68523d9f665f32d2fc50fd66e\"},",
          "1956:     {file = \"numpy-2.0.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c73aafd1afca80afecb22718f8700b40ac7cab927b8abab3c3e337d70e10e5a2\"},",
          "1957:     {file = \"numpy-2.0.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:49d9f7d256fbc804391a7f72d4a617302b1afac1112fac19b6c6cec63fe7fe8a\"},",
          "1958:     {file = \"numpy-2.0.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:0ec84b9ba0654f3b962802edc91424331f423dcf5d5f926676e0150789cb3d95\"},",
          "1959:     {file = \"numpy-2.0.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:feff59f27338135776f6d4e2ec7aeeac5d5f7a08a83e80869121ef8164b74af9\"},",
          "1960:     {file = \"numpy-2.0.0-cp312-cp312-win32.whl\", hash = \"sha256:c5a59996dc61835133b56a32ebe4ef3740ea5bc19b3983ac60cc32be5a665d54\"},",
          "1961:     {file = \"numpy-2.0.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:a356364941fb0593bb899a1076b92dfa2029f6f5b8ba88a14fd0984aaf76d0df\"},",
          "1962:     {file = \"numpy-2.0.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:e61155fae27570692ad1d327e81c6cf27d535a5d7ef97648a17d922224b216de\"},",
          "1963:     {file = \"numpy-2.0.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:4554eb96f0fd263041baf16cf0881b3f5dafae7a59b1049acb9540c4d57bc8cb\"},",
          "1964:     {file = \"numpy-2.0.0-cp39-cp39-macosx_14_0_arm64.whl\", hash = \"sha256:903703372d46bce88b6920a0cd86c3ad82dae2dbef157b5fc01b70ea1cfc430f\"},",
          "1965:     {file = \"numpy-2.0.0-cp39-cp39-macosx_14_0_x86_64.whl\", hash = \"sha256:3e8e01233d57639b2e30966c63d36fcea099d17c53bf424d77f088b0f4babd86\"},",
          "1966:     {file = \"numpy-2.0.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1cde1753efe513705a0c6d28f5884e22bdc30438bf0085c5c486cdaff40cd67a\"},",
          "1967:     {file = \"numpy-2.0.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:821eedb7165ead9eebdb569986968b541f9908979c2da8a4967ecac4439bae3d\"},",
          "1968:     {file = \"numpy-2.0.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:9a1712c015831da583b21c5bfe15e8684137097969c6d22e8316ba66b5baabe4\"},",
          "1969:     {file = \"numpy-2.0.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:9c27f0946a3536403efb0e1c28def1ae6730a72cd0d5878db38824855e3afc44\"},",
          "1970:     {file = \"numpy-2.0.0-cp39-cp39-win32.whl\", hash = \"sha256:63b92c512d9dbcc37f9d81b123dec99fdb318ba38c8059afc78086fe73820275\"},",
          "1971:     {file = \"numpy-2.0.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:3f6bed7f840d44c08ebdb73b1825282b801799e325bcbdfa6bc5c370e5aecc65\"},",
          "1972:     {file = \"numpy-2.0.0-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:9416a5c2e92ace094e9f0082c5fd473502c91651fb896bc17690d6fc475128d6\"},",
          "1973:     {file = \"numpy-2.0.0-pp39-pypy39_pp73-macosx_14_0_x86_64.whl\", hash = \"sha256:17067d097ed036636fa79f6a869ac26df7db1ba22039d962422506640314933a\"},",
          "1974:     {file = \"numpy-2.0.0-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:38ecb5b0582cd125f67a629072fed6f83562d9dd04d7e03256c9829bdec027ad\"},",
          "1975:     {file = \"numpy-2.0.0-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:cef04d068f5fb0518a77857953193b6bb94809a806bd0a14983a8f12ada060c9\"},",
          "1976:     {file = \"numpy-2.0.0.tar.gz\", hash = \"sha256:cf5d1c9e6837f8af9f92b6bd3e86d513cdc11f60fd62185cc49ec7d1aba34864\"},",
          "1981: version = \"3.10.5\"",
          "1986:     {file = \"orjson-3.10.5-cp310-cp310-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:545d493c1f560d5ccfc134803ceb8955a14c3fcb47bbb4b2fee0232646d0b932\"},",
          "1987:     {file = \"orjson-3.10.5-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f4324929c2dd917598212bfd554757feca3e5e0fa60da08be11b4aa8b90013c1\"},",
          "1988:     {file = \"orjson-3.10.5-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:8c13ca5e2ddded0ce6a927ea5a9f27cae77eee4c75547b4297252cb20c4d30e6\"},",
          "1989:     {file = \"orjson-3.10.5-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:b6c8e30adfa52c025f042a87f450a6b9ea29649d828e0fec4858ed5e6caecf63\"},",
          "1990:     {file = \"orjson-3.10.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:338fd4f071b242f26e9ca802f443edc588fa4ab60bfa81f38beaedf42eda226c\"},",
          "1991:     {file = \"orjson-3.10.5-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:6970ed7a3126cfed873c5d21ece1cd5d6f83ca6c9afb71bbae21a0b034588d96\"},",
          "1992:     {file = \"orjson-3.10.5-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:235dadefb793ad12f7fa11e98a480db1f7c6469ff9e3da5e73c7809c700d746b\"},",
          "1993:     {file = \"orjson-3.10.5-cp310-none-win32.whl\", hash = \"sha256:be79e2393679eda6a590638abda16d167754393f5d0850dcbca2d0c3735cebe2\"},",
          "1994:     {file = \"orjson-3.10.5-cp310-none-win_amd64.whl\", hash = \"sha256:c4a65310ccb5c9910c47b078ba78e2787cb3878cdded1702ac3d0da71ddc5228\"},",
          "1995:     {file = \"orjson-3.10.5-cp311-cp311-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:cdf7365063e80899ae3a697def1277c17a7df7ccfc979990a403dfe77bb54d40\"},",
          "1996:     {file = \"orjson-3.10.5-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6b68742c469745d0e6ca5724506858f75e2f1e5b59a4315861f9e2b1df77775a\"},",
          "1997:     {file = \"orjson-3.10.5-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:7d10cc1b594951522e35a3463da19e899abe6ca95f3c84c69e9e901e0bd93d38\"},",
          "1998:     {file = \"orjson-3.10.5-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:dcbe82b35d1ac43b0d84072408330fd3295c2896973112d495e7234f7e3da2e1\"},",
          "1999:     {file = \"orjson-3.10.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:10c0eb7e0c75e1e486c7563fe231b40fdd658a035ae125c6ba651ca3b07936f5\"},",
          "2000:     {file = \"orjson-3.10.5-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:53ed1c879b10de56f35daf06dbc4a0d9a5db98f6ee853c2dbd3ee9d13e6f302f\"},",
          "2001:     {file = \"orjson-3.10.5-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:099e81a5975237fda3100f918839af95f42f981447ba8f47adb7b6a3cdb078fa\"},",
          "2002:     {file = \"orjson-3.10.5-cp311-none-win32.whl\", hash = \"sha256:1146bf85ea37ac421594107195db8bc77104f74bc83e8ee21a2e58596bfb2f04\"},",
          "2003:     {file = \"orjson-3.10.5-cp311-none-win_amd64.whl\", hash = \"sha256:36a10f43c5f3a55c2f680efe07aa93ef4a342d2960dd2b1b7ea2dd764fe4a37c\"},",
          "2004:     {file = \"orjson-3.10.5-cp312-cp312-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:68f85ecae7af14a585a563ac741b0547a3f291de81cd1e20903e79f25170458f\"},",
          "2005:     {file = \"orjson-3.10.5-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:28afa96f496474ce60d3340fe8d9a263aa93ea01201cd2bad844c45cd21f5268\"},",
          "2006:     {file = \"orjson-3.10.5-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:9cd684927af3e11b6e754df80b9ffafd9fb6adcaa9d3e8fdd5891be5a5cad51e\"},",
          "2007:     {file = \"orjson-3.10.5-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:3d21b9983da032505f7050795e98b5d9eee0df903258951566ecc358f6696969\"},",
          "2008:     {file = \"orjson-3.10.5-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1ad1de7fef79736dde8c3554e75361ec351158a906d747bd901a52a5c9c8d24b\"},",
          "2009:     {file = \"orjson-3.10.5-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:2d97531cdfe9bdd76d492e69800afd97e5930cb0da6a825646667b2c6c6c0211\"},",
          "2010:     {file = \"orjson-3.10.5-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:d69858c32f09c3e1ce44b617b3ebba1aba030e777000ebdf72b0d8e365d0b2b3\"},",
          "2011:     {file = \"orjson-3.10.5-cp312-none-win32.whl\", hash = \"sha256:64c9cc089f127e5875901ac05e5c25aa13cfa5dbbbd9602bda51e5c611d6e3e2\"},",
          "2012:     {file = \"orjson-3.10.5-cp312-none-win_amd64.whl\", hash = \"sha256:b2efbd67feff8c1f7728937c0d7f6ca8c25ec81373dc8db4ef394c1d93d13dc5\"},",
          "2013:     {file = \"orjson-3.10.5-cp38-cp38-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:03b565c3b93f5d6e001db48b747d31ea3819b89abf041ee10ac6988886d18e01\"},",
          "2014:     {file = \"orjson-3.10.5-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:584c902ec19ab7928fd5add1783c909094cc53f31ac7acfada817b0847975f26\"},",
          "2015:     {file = \"orjson-3.10.5-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:5a35455cc0b0b3a1eaf67224035f5388591ec72b9b6136d66b49a553ce9eb1e6\"},",
          "2016:     {file = \"orjson-3.10.5-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:1670fe88b116c2745a3a30b0f099b699a02bb3482c2591514baf5433819e4f4d\"},",
          "2017:     {file = \"orjson-3.10.5-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:185c394ef45b18b9a7d8e8f333606e2e8194a50c6e3c664215aae8cf42c5385e\"},",
          "2018:     {file = \"orjson-3.10.5-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:ca0b3a94ac8d3886c9581b9f9de3ce858263865fdaa383fbc31c310b9eac07c9\"},",
          "2019:     {file = \"orjson-3.10.5-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:dfc91d4720d48e2a709e9c368d5125b4b5899dced34b5400c3837dadc7d6271b\"},",
          "2020:     {file = \"orjson-3.10.5-cp38-none-win32.whl\", hash = \"sha256:c05f16701ab2a4ca146d0bca950af254cb7c02f3c01fca8efbbad82d23b3d9d4\"},",
          "2021:     {file = \"orjson-3.10.5-cp38-none-win_amd64.whl\", hash = \"sha256:8a11d459338f96a9aa7f232ba95679fc0c7cedbd1b990d736467894210205c09\"},",
          "2022:     {file = \"orjson-3.10.5-cp39-cp39-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:85c89131d7b3218db1b24c4abecea92fd6c7f9fab87441cfc342d3acc725d807\"},",
          "2023:     {file = \"orjson-3.10.5-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:fb66215277a230c456f9038d5e2d84778141643207f85336ef8d2a9da26bd7ca\"},",
          "2024:     {file = \"orjson-3.10.5-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:51bbcdea96cdefa4a9b4461e690c75ad4e33796530d182bdd5c38980202c134a\"},",
          "2025:     {file = \"orjson-3.10.5-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:dbead71dbe65f959b7bd8cf91e0e11d5338033eba34c114f69078d59827ee139\"},",
          "2026:     {file = \"orjson-3.10.5-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5df58d206e78c40da118a8c14fc189207fffdcb1f21b3b4c9c0c18e839b5a214\"},",
          "2027:     {file = \"orjson-3.10.5-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:c4057c3b511bb8aef605616bd3f1f002a697c7e4da6adf095ca5b84c0fd43595\"},",
          "2028:     {file = \"orjson-3.10.5-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:b39e006b00c57125ab974362e740c14a0c6a66ff695bff44615dcf4a70ce2b86\"},",
          "2029:     {file = \"orjson-3.10.5-cp39-none-win32.whl\", hash = \"sha256:eded5138cc565a9d618e111c6d5c2547bbdd951114eb822f7f6309e04db0fb47\"},",
          "2030:     {file = \"orjson-3.10.5-cp39-none-win_amd64.whl\", hash = \"sha256:cc28e90a7cae7fcba2493953cff61da5a52950e78dc2dacfe931a317ee3d8de7\"},",
          "2031:     {file = \"orjson-3.10.5.tar.gz\", hash = \"sha256:7a5baef8a4284405d96c90c7c62b755e9ef1ada84c2406c24a9ebec86b89f46d\"},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2032: [[package]]",
          "2033: name = \"packaging\"",
          "2035: description = \"Core utilities for Python packages\"",
          "2036: optional = false",
          "2038: files = [",
          "2041: ]",
          "2043: [[package]]",
          "",
          "[Removed Lines]",
          "2034: version = \"23.2\"",
          "2037: python-versions = \">=3.7\"",
          "2039:     {file = \"packaging-23.2-py3-none-any.whl\", hash = \"sha256:8c491190033a9af7e1d931d0b5dacc2ef47509b34dd0de67ed209b5203fc88c7\"},",
          "2040:     {file = \"packaging-23.2.tar.gz\", hash = \"sha256:048fb0e9405036518eaaf48a55953c750c11e1a1b68e0dd1a9d62ed0c092cfc5\"},",
          "",
          "[Added Lines]",
          "2047: version = \"24.1\"",
          "2050: python-versions = \">=3.8\"",
          "2052:     {file = \"packaging-24.1-py3-none-any.whl\", hash = \"sha256:5b8f2217dbdbd2f7f384c41c628544e6d52f2d0f53c6d0c3ea61aa5d1d7ff124\"},",
          "2053:     {file = \"packaging-24.1.tar.gz\", hash = \"sha256:026ed72c8ed3fcce5bf8950572258698927fd1dbda10a5e981cdf0ac37f4f002\"},",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2196: [[package]]",
          "2197: name = \"prompt-toolkit\"",
          "2199: description = \"Library for building powerful interactive command lines in Python\"",
          "2200: optional = false",
          "2201: python-versions = \">=3.7.0\"",
          "2202: files = [",
          "2205: ]",
          "2207: [package.dependencies]",
          "",
          "[Removed Lines]",
          "2198: version = \"3.0.46\"",
          "2203:     {file = \"prompt_toolkit-3.0.46-py3-none-any.whl\", hash = \"sha256:45abe60a8300f3c618b23c16c4bb98c6fc80af8ce8b17c7ae92db48db3ee63c1\"},",
          "2204:     {file = \"prompt_toolkit-3.0.46.tar.gz\", hash = \"sha256:869c50d682152336e23c4db7f74667639b5047494202ffe7670817053fd57795\"},",
          "",
          "[Added Lines]",
          "2211: version = \"3.0.47\"",
          "2216:     {file = \"prompt_toolkit-3.0.47-py3-none-any.whl\", hash = \"sha256:0d7bfa67001d5e39d02c224b663abc33687405033a8c422d0d675a5a13361d10\"},",
          "2217:     {file = \"prompt_toolkit-3.0.47.tar.gz\", hash = \"sha256:1e1b29cb58080b1e69f207c893a1a7bf16d127a5c30c9d17a25a5d77792e5360\"},",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2274: [[package]]",
          "2275: name = \"pydantic\"",
          "2277: description = \"Data validation using Python type hints\"",
          "2278: optional = false",
          "2279: python-versions = \">=3.8\"",
          "2280: files = [",
          "2283: ]",
          "2285: [package.dependencies]",
          "",
          "[Removed Lines]",
          "2276: version = \"2.7.3\"",
          "2281:     {file = \"pydantic-2.7.3-py3-none-any.whl\", hash = \"sha256:ea91b002777bf643bb20dd717c028ec43216b24a6001a280f83877fd2655d0b4\"},",
          "2282:     {file = \"pydantic-2.7.3.tar.gz\", hash = \"sha256:c46c76a40bb1296728d7a8b99aa73dd70a48c3510111ff290034f860c99c419e\"},",
          "",
          "[Added Lines]",
          "2289: version = \"2.7.4\"",
          "2294:     {file = \"pydantic-2.7.4-py3-none-any.whl\", hash = \"sha256:ee8538d41ccb9c0a9ad3e0e5f07bf15ed8015b481ced539a1759d8cc89ae90d0\"},",
          "2295:     {file = \"pydantic-2.7.4.tar.gz\", hash = \"sha256:0c84efd9548d545f63ac0060c1e4d39bb9b14db8b3c0652338aecc07b5adec52\"},",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3344: [[package]]",
          "3345: name = \"tenacity\"",
          "3347: description = \"Retry code until it succeeds\"",
          "3348: optional = false",
          "3349: python-versions = \">=3.8\"",
          "3350: files = [",
          "3353: ]",
          "3355: [package.extras]",
          "",
          "[Removed Lines]",
          "3346: version = \"8.3.0\"",
          "3351:     {file = \"tenacity-8.3.0-py3-none-any.whl\", hash = \"sha256:3649f6443dbc0d9b01b9d8020a9c4ec7a1ff5f6f3c6c8a036ef371f573fe9185\"},",
          "3352:     {file = \"tenacity-8.3.0.tar.gz\", hash = \"sha256:953d4e6ad24357bceffbc9707bc74349aca9d245f68eb65419cf0c249a1949a2\"},",
          "",
          "[Added Lines]",
          "3359: version = \"8.4.1\"",
          "3364:     {file = \"tenacity-8.4.1-py3-none-any.whl\", hash = \"sha256:28522e692eda3e1b8f5e99c51464efcc0b9fc86933da92415168bc1c4e2308fa\"},",
          "3365:     {file = \"tenacity-8.4.1.tar.gz\", hash = \"sha256:54b1412b878ddf7e1f1577cd49527bad8cdef32421bd599beac0c6c3f10582fd\"},",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3546: [[package]]",
          "3547: name = \"tornado\"",
          "3549: description = \"Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed.\"",
          "3550: optional = false",
          "3552: files = [",
          "3564: ]",
          "3566: [[package]]",
          "",
          "[Removed Lines]",
          "3548: version = \"6.4\"",
          "3551: python-versions = \">= 3.8\"",
          "3553:     {file = \"tornado-6.4-cp38-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:02ccefc7d8211e5a7f9e8bc3f9e5b0ad6262ba2fbb683a6443ecc804e5224ce0\"},",
          "3554:     {file = \"tornado-6.4-cp38-abi3-macosx_10_9_x86_64.whl\", hash = \"sha256:27787de946a9cffd63ce5814c33f734c627a87072ec7eed71f7fc4417bb16263\"},",
          "3555:     {file = \"tornado-6.4-cp38-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f7894c581ecdcf91666a0912f18ce5e757213999e183ebfc2c3fdbf4d5bd764e\"},",
          "3556:     {file = \"tornado-6.4-cp38-abi3-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:e43bc2e5370a6a8e413e1e1cd0c91bedc5bd62a74a532371042a18ef19e10579\"},",
          "3557:     {file = \"tornado-6.4-cp38-abi3-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f0251554cdd50b4b44362f73ad5ba7126fc5b2c2895cc62b14a1c2d7ea32f212\"},",
          "3558:     {file = \"tornado-6.4-cp38-abi3-musllinux_1_1_aarch64.whl\", hash = \"sha256:fd03192e287fbd0899dd8f81c6fb9cbbc69194d2074b38f384cb6fa72b80e9c2\"},",
          "3559:     {file = \"tornado-6.4-cp38-abi3-musllinux_1_1_i686.whl\", hash = \"sha256:88b84956273fbd73420e6d4b8d5ccbe913c65d31351b4c004ae362eba06e1f78\"},",
          "3560:     {file = \"tornado-6.4-cp38-abi3-musllinux_1_1_x86_64.whl\", hash = \"sha256:71ddfc23a0e03ef2df1c1397d859868d158c8276a0603b96cf86892bff58149f\"},",
          "3561:     {file = \"tornado-6.4-cp38-abi3-win32.whl\", hash = \"sha256:6f8a6c77900f5ae93d8b4ae1196472d0ccc2775cc1dfdc9e7727889145c45052\"},",
          "3562:     {file = \"tornado-6.4-cp38-abi3-win_amd64.whl\", hash = \"sha256:10aeaa8006333433da48dec9fe417877f8bcc21f48dda8d661ae79da357b2a63\"},",
          "3563:     {file = \"tornado-6.4.tar.gz\", hash = \"sha256:72291fa6e6bc84e626589f1c29d90a5a6d593ef5ae68052ee2ef000dfd273dee\"},",
          "",
          "[Added Lines]",
          "3561: version = \"6.4.1\"",
          "3564: python-versions = \">=3.8\"",
          "3566:     {file = \"tornado-6.4.1-cp38-abi3-macosx_10_9_universal2.whl\", hash = \"sha256:163b0aafc8e23d8cdc3c9dfb24c5368af84a81e3364745ccb4427669bf84aec8\"},",
          "3567:     {file = \"tornado-6.4.1-cp38-abi3-macosx_10_9_x86_64.whl\", hash = \"sha256:6d5ce3437e18a2b66fbadb183c1d3364fb03f2be71299e7d10dbeeb69f4b2a14\"},",
          "3568:     {file = \"tornado-6.4.1-cp38-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e2e20b9113cd7293f164dc46fffb13535266e713cdb87bd2d15ddb336e96cfc4\"},",
          "3569:     {file = \"tornado-6.4.1-cp38-abi3-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:8ae50a504a740365267b2a8d1a90c9fbc86b780a39170feca9bcc1787ff80842\"},",
          "3570:     {file = \"tornado-6.4.1-cp38-abi3-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:613bf4ddf5c7a95509218b149b555621497a6cc0d46ac341b30bd9ec19eac7f3\"},",
          "3571:     {file = \"tornado-6.4.1-cp38-abi3-musllinux_1_2_aarch64.whl\", hash = \"sha256:25486eb223babe3eed4b8aecbac33b37e3dd6d776bc730ca14e1bf93888b979f\"},",
          "3572:     {file = \"tornado-6.4.1-cp38-abi3-musllinux_1_2_i686.whl\", hash = \"sha256:454db8a7ecfcf2ff6042dde58404164d969b6f5d58b926da15e6b23817950fc4\"},",
          "3573:     {file = \"tornado-6.4.1-cp38-abi3-musllinux_1_2_x86_64.whl\", hash = \"sha256:a02a08cc7a9314b006f653ce40483b9b3c12cda222d6a46d4ac63bb6c9057698\"},",
          "3574:     {file = \"tornado-6.4.1-cp38-abi3-win32.whl\", hash = \"sha256:d9a566c40b89757c9aa8e6f032bcdb8ca8795d7c1a9762910c722b1635c9de4d\"},",
          "3575:     {file = \"tornado-6.4.1-cp38-abi3-win_amd64.whl\", hash = \"sha256:b24b8982ed444378d7f21d563f4180a2de31ced9d8d84443907a0a64da2072e7\"},",
          "3576:     {file = \"tornado-6.4.1.tar.gz\", hash = \"sha256:92d3ab53183d8c50f8204a51e6f91d18a15d5ef261e84d452800d4ff6fc504e9\"},",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3643: [[package]]",
          "3644: name = \"typing-extensions\"",
          "3646: description = \"Backported and Experimental Type Hints for Python 3.8+\"",
          "3647: optional = false",
          "3648: python-versions = \">=3.8\"",
          "3649: files = [",
          "3652: ]",
          "3654: [[package]]",
          "",
          "[Removed Lines]",
          "3645: version = \"4.12.1\"",
          "3650:     {file = \"typing_extensions-4.12.1-py3-none-any.whl\", hash = \"sha256:6024b58b69089e5a89c347397254e35f1bf02a907728ec7fee9bf0fe837d203a\"},",
          "3651:     {file = \"typing_extensions-4.12.1.tar.gz\", hash = \"sha256:915f5e35ff76f56588223f15fdd5938f9a1cf9195c0de25130c627e4d597f6d1\"},",
          "",
          "[Added Lines]",
          "3658: version = \"4.12.2\"",
          "3663:     {file = \"typing_extensions-4.12.2-py3-none-any.whl\", hash = \"sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d\"},",
          "3664:     {file = \"typing_extensions-4.12.2.tar.gz\", hash = \"sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8\"},",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3668: [[package]]",
          "3669: name = \"urllib3\"",
          "3671: description = \"HTTP library with thread-safe connection pooling, file post, and more.\"",
          "3672: optional = false",
          "3673: python-versions = \">=3.8\"",
          "3674: files = [",
          "3677: ]",
          "3679: [package.extras]",
          "",
          "[Removed Lines]",
          "3670: version = \"2.2.1\"",
          "3675:     {file = \"urllib3-2.2.1-py3-none-any.whl\", hash = \"sha256:450b20ec296a467077128bff42b73080516e71b56ff59a60a02bef2232c4fa9d\"},",
          "3676:     {file = \"urllib3-2.2.1.tar.gz\", hash = \"sha256:d0570876c61ab9e520d776c38acbbb5b05a776d3f9ff98a5c8fd5162a444cf19\"},",
          "",
          "[Added Lines]",
          "3683: version = \"2.2.2\"",
          "3688:     {file = \"urllib3-2.2.2-py3-none-any.whl\", hash = \"sha256:a448b2f64d686155468037e1ace9f2d2199776e17f0a46610480d311f73e3472\"},",
          "3689:     {file = \"urllib3-2.2.2.tar.gz\", hash = \"sha256:dd505485549a7a552833da5e6063639d0d177c04f23bc3864e41e5dc5f612168\"},",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3776: [[package]]",
          "3777: name = \"webcolors\"",
          "3779: description = \"A library for working with the color formats defined by HTML and CSS.\"",
          "3780: optional = false",
          "3782: files = [",
          "3785: ]",
          "3787: [package.extras]",
          "3788: docs = [\"furo\", \"sphinx\", \"sphinx-copybutton\", \"sphinx-inline-tabs\", \"sphinx-notfound-page\", \"sphinxext-opengraph\"]",
          "3791: [[package]]",
          "3792: name = \"webencodings\"",
          "",
          "[Removed Lines]",
          "3778: version = \"1.13\"",
          "3781: python-versions = \">=3.7\"",
          "3783:     {file = \"webcolors-1.13-py3-none-any.whl\", hash = \"sha256:29bc7e8752c0a1bd4a1f03c14d6e6a72e93d82193738fa860cbff59d0fcc11bf\"},",
          "3784:     {file = \"webcolors-1.13.tar.gz\", hash = \"sha256:c225b674c83fa923be93d235330ce0300373d02885cef23238813b0d5668304a\"},",
          "3789: tests = [\"pytest\", \"pytest-cov\"]",
          "",
          "[Added Lines]",
          "3791: version = \"24.6.0\"",
          "3794: python-versions = \">=3.8\"",
          "3796:     {file = \"webcolors-24.6.0-py3-none-any.whl\", hash = \"sha256:8cf5bc7e28defd1d48b9e83d5fc30741328305a8195c29a8e668fa45586568a1\"},",
          "3797:     {file = \"webcolors-24.6.0.tar.gz\", hash = \"sha256:1d160d1de46b3e81e58d0a280d0c78b467dc80f47294b91b1ad8029d2cedb55b\"},",
          "3802: tests = [\"coverage[toml]\"]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0d5b599623ca2477c97c95a6a5cecb7fc835d07",
      "candidate_info": {
        "commit_hash": "f0d5b599623ca2477c97c95a6a5cecb7fc835d07",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/f0d5b599623ca2477c97c95a6a5cecb7fc835d07",
        "files": [
          "libs/community/tests/integration_tests/callbacks/test_langchain_tracer.py",
          "libs/core/langchain_core/callbacks/manager.py",
          "libs/core/langchain_core/prompts/loading.py",
          "libs/core/langchain_core/tracers/context.py",
          "libs/core/langchain_core/tracers/langchain_v1.py",
          "libs/core/langchain_core/utils/loading.py",
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml",
          "libs/core/tests/unit_tests/tracers/test_langchain_v1.py",
          "libs/core/tests/unit_tests/utils/test_loading.py",
          "libs/experimental/langchain_experimental/prompts/load.py",
          "libs/langchain/langchain/agents/loading.py",
          "libs/langchain/langchain/chains/loading.py"
        ],
        "message": "core[patch]: remove requests (#19891)\n\nRemoves required usage of `requests` from `langchain-core`, all of which\nhas been deprecated.\n\n- removes Tracer V1 implementations\n- removes old `try_load_from_hub` github-based hub implementations\n\nRemoval done in a way where imports will still succeed, and usage will\nfail with a `RuntimeError`.",
        "before_after_code_files": [
          "libs/community/tests/integration_tests/callbacks/test_langchain_tracer.py||libs/community/tests/integration_tests/callbacks/test_langchain_tracer.py",
          "libs/core/langchain_core/callbacks/manager.py||libs/core/langchain_core/callbacks/manager.py",
          "libs/core/langchain_core/prompts/loading.py||libs/core/langchain_core/prompts/loading.py",
          "libs/core/langchain_core/tracers/context.py||libs/core/langchain_core/tracers/context.py",
          "libs/core/langchain_core/tracers/langchain_v1.py||libs/core/langchain_core/tracers/langchain_v1.py",
          "libs/core/langchain_core/utils/loading.py||libs/core/langchain_core/utils/loading.py",
          "libs/core/poetry.lock||libs/core/poetry.lock",
          "libs/core/tests/unit_tests/tracers/test_langchain_v1.py||libs/core/tests/unit_tests/tracers/test_langchain_v1.py",
          "libs/core/tests/unit_tests/utils/test_loading.py||libs/core/tests/unit_tests/utils/test_loading.py",
          "libs/experimental/langchain_experimental/prompts/load.py||libs/experimental/langchain_experimental/prompts/load.py",
          "libs/langchain/langchain/agents/loading.py||libs/langchain/langchain/agents/loading.py",
          "libs/langchain/langchain/chains/loading.py||libs/langchain/langchain/chains/loading.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/langchain_core/utils/loading.py||libs/core/langchain_core/utils/loading.py",
            "libs/core/poetry.lock||libs/core/poetry.lock",
            "libs/community/tests/unit_tests/utilities/test_loading.py||libs/core/tests/unit_tests/utils/test_loading.py"
          ],
          "candidate": [
            "libs/core/langchain_core/utils/loading.py||libs/core/langchain_core/utils/loading.py",
            "libs/core/poetry.lock||libs/core/poetry.lock",
            "libs/core/tests/unit_tests/utils/test_loading.py||libs/core/tests/unit_tests/utils/test_loading.py"
          ]
        }
      },
      "candidate_diff": {
        "libs/community/tests/integration_tests/callbacks/test_langchain_tracer.py||libs/community/tests/integration_tests/callbacks/test_langchain_tracer.py": [
          "File: libs/community/tests/integration_tests/callbacks/test_langchain_tracer.py -> libs/community/tests/integration_tests/callbacks/test_langchain_tracer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Integration tests for the langchain tracer module.\"\"\"",
          "2: import asyncio",
          "3: import os",
          "5: from aiohttp import ClientSession",
          "6: from langchain_core.callbacks.manager import atrace_as_chain_group, trace_as_chain_group",
          "7: from langchain_core.prompts import PromptTemplate",
          "10: from langchain_community.chat_models import ChatOpenAI",
          "11: from langchain_community.llms import OpenAI",
          "",
          "[Removed Lines]",
          "8: from langchain_core.tracers.context import tracing_enabled, tracing_v2_enabled",
          "",
          "[Added Lines]",
          "9: from langchain_core.tracers.context import tracing_v2_enabled",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:         del os.environ[\"LANGCHAIN_HANDLER\"]",
          "136: async def test_tracing_v2_environment_variable() -> None:",
          "137:     from langchain.agents import AgentType, initialize_agent, load_tools",
          "",
          "[Removed Lines]",
          "98: def test_tracing_context_manager() -> None:",
          "99:     from langchain.agents import AgentType, initialize_agent, load_tools",
          "101:     llm = OpenAI(temperature=0)",
          "102:     tools = load_tools([\"llm-math\", \"serpapi\"], llm=llm)",
          "103:     agent = initialize_agent(",
          "104:         tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True",
          "105:     )",
          "106:     if \"LANGCHAIN_TRACING\" in os.environ:",
          "107:         del os.environ[\"LANGCHAIN_TRACING\"]",
          "108:     with tracing_enabled() as session:",
          "109:         assert session",
          "110:         agent.run(questions[0])  # this should be traced",
          "112:     agent.run(questions[0])  # this should not be traced",
          "115: async def test_tracing_context_manager_async() -> None:",
          "116:     from langchain.agents import AgentType, initialize_agent, load_tools",
          "118:     llm = OpenAI(temperature=0)",
          "119:     async_tools = load_tools([\"llm-math\", \"serpapi\"], llm=llm)",
          "120:     agent = initialize_agent(",
          "121:         async_tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True",
          "122:     )",
          "123:     if \"LANGCHAIN_TRACING\" in os.environ:",
          "124:         del os.environ[\"LANGCHAIN_TRACING\"]",
          "126:     # start a background task",
          "127:     task = asyncio.create_task(agent.arun(questions[0]))  # this should not be traced",
          "128:     with tracing_enabled() as session:",
          "129:         assert session",
          "130:         tasks = [agent.arun(q) for q in questions[1:4]]  # these should be traced",
          "131:         await asyncio.gather(*tasks)",
          "133:     await task",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/callbacks/manager.py||libs/core/langchain_core/callbacks/manager.py": [
          "File: libs/core/langchain_core/callbacks/manager.py -> libs/core/langchain_core/callbacks/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1914:         _configure_hooks,",
          "1915:         _get_tracer_project,",
          "1916:         _tracing_v2_is_enabled,",
          "1918:         tracing_v2_callback_var,",
          "1919:     )",
          "",
          "[Removed Lines]",
          "1917:         tracing_callback_var,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1953:         callback_manager.add_metadata(inheritable_metadata or {})",
          "1954:         callback_manager.add_metadata(local_metadata or {}, False)",
          "1961:     )",
          "1963:     tracer_v2 = tracing_v2_callback_var.get()",
          "1964:     tracing_v2_enabled_ = _tracing_v2_is_enabled()",
          "1965:     tracer_project = _get_tracer_project()",
          "1966:     debug = _get_debug()",
          "1968:         from langchain_core.tracers.langchain import LangChainTracer",
          "1970:         from langchain_core.tracers.stdout import ConsoleCallbackHandler",
          "1972:         if verbose and not any(",
          "",
          "[Removed Lines]",
          "1956:     tracer = tracing_callback_var.get()",
          "1957:     tracing_enabled_ = (",
          "1958:         env_var_is_set(\"LANGCHAIN_TRACING\")",
          "1959:         or tracer is not None",
          "1960:         or env_var_is_set(\"LANGCHAIN_HANDLER\")",
          "1967:     if verbose or debug or tracing_enabled_ or tracing_v2_enabled_:",
          "1969:         from langchain_core.tracers.langchain_v1 import LangChainTracerV1",
          "",
          "[Added Lines]",
          "1955:     v1_tracing_enabled_ = env_var_is_set(\"LANGCHAIN_TRACING\") or env_var_is_set(",
          "1956:         \"LANGCHAIN_HANDLER\"",
          "1962:     if v1_tracing_enabled_ and not tracing_v2_enabled_:",
          "1963:         # if both are enabled, can silently ignore the v1 tracer",
          "1964:         raise RuntimeError(",
          "1965:             \"Tracing using LangChainTracerV1 is no longer supported. \"",
          "1966:             \"Please set the LANGCHAIN_TRACING_V2 environment variable to enable \"",
          "1967:             \"tracing instead.\"",
          "1968:         )",
          "1972:     if verbose or debug or tracing_v2_enabled_:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1982:             for handler in callback_manager.handlers",
          "1983:         ):",
          "1984:             callback_manager.add_handler(ConsoleCallbackHandler(), True)",
          "1995:         if tracing_v2_enabled_ and not any(",
          "1996:             isinstance(handler, LangChainTracer)",
          "1997:             for handler in callback_manager.handlers",
          "",
          "[Removed Lines]",
          "1985:         if tracing_enabled_ and not any(",
          "1986:             isinstance(handler, LangChainTracerV1)",
          "1987:             for handler in callback_manager.handlers",
          "1988:         ):",
          "1989:             if tracer:",
          "1990:                 callback_manager.add_handler(tracer, True)",
          "1991:             else:",
          "1992:                 handler = LangChainTracerV1()",
          "1993:                 handler.load_session(tracer_project)",
          "1994:                 callback_manager.add_handler(handler, True)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/prompts/loading.py||libs/core/langchain_core/prompts/loading.py": [
          "File: libs/core/langchain_core/prompts/loading.py -> libs/core/langchain_core/prompts/loading.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: from langchain_core.prompts.chat import ChatPromptTemplate",
          "12: from langchain_core.prompts.few_shot import FewShotPromptTemplate",
          "13: from langchain_core.prompts.prompt import PromptTemplate",
          "16: URL_BASE = \"https://raw.githubusercontent.com/hwchase17/langchain-hub/master/prompts/\"",
          "17: logger = logging.getLogger(__name__)",
          "",
          "[Removed Lines]",
          "14: from langchain_core.utils import try_load_from_hub",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128: def load_prompt(path: Union[str, Path]) -> BasePromptTemplate:",
          "129:     \"\"\"Unified method for loading a prompt from LangChainHub or local fs.\"\"\"",
          "138: def _load_prompt_from_file(file: Union[str, Path]) -> BasePromptTemplate:",
          "",
          "[Removed Lines]",
          "130:     if hub_result := try_load_from_hub(",
          "131:         path, _load_prompt_from_file, \"prompts\", {\"py\", \"json\", \"yaml\"}",
          "132:     ):",
          "133:         return hub_result",
          "134:     else:",
          "135:         return _load_prompt_from_file(path)",
          "",
          "[Added Lines]",
          "130:     if isinstance(path, str) and path.startswith(\"lc://\"):",
          "131:         raise RuntimeError(",
          "132:             \"Loading from the deprecated github-based Hub is no longer supported. \"",
          "133:             \"Please use the new LangChain Hub at https://smith.langchain.com/hub \"",
          "134:             \"instead.\"",
          "135:         )",
          "136:     return _load_prompt_from_file(path)",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/tracers/context.py||libs/core/langchain_core/tracers/context.py": [
          "File: libs/core/langchain_core/tracers/context.py -> libs/core/langchain_core/tracers/context.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from langsmith import utils as ls_utils",
          "19: from langsmith.run_helpers import get_run_tree_context",
          "22: from langchain_core.tracers.langchain import LangChainTracer",
          "24: from langchain_core.tracers.run_collector import RunCollectorCallbackHandler",
          "25: from langchain_core.tracers.schemas import TracerSessionV1",
          "26: from langchain_core.utils.env import env_var_is_set",
          "",
          "[Removed Lines]",
          "21: from langchain_core._api import deprecated",
          "23: from langchain_core.tracers.langchain_v1 import LangChainTracerV1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     from langchain_core.callbacks.base import BaseCallbackHandler, Callbacks",
          "32:     from langchain_core.callbacks.manager import AsyncCallbackManager, CallbackManager",
          "40:     \"tracing_callback_v2\", default=None",
          "43:     \"run_collector\", default=None",
          "47: @contextmanager",
          "49: def tracing_enabled(",
          "50:     session_name: str = \"default\",",
          "51: ) -> Generator[TracerSessionV1, None, None]:",
          "74: @contextmanager",
          "",
          "[Removed Lines]",
          "34: # Deprecated as of 0.1.0, will be removed in 0.2.0.",
          "35: tracing_callback_var: ContextVar[Optional[LangChainTracerV1]] = ContextVar(  # noqa: E501",
          "36:     \"tracing_callback\", default=None",
          "37: )",
          "39: tracing_v2_callback_var: ContextVar[Optional[LangChainTracer]] = ContextVar(  # noqa: E501",
          "41: )",
          "42: run_collector_var: ContextVar[Optional[RunCollectorCallbackHandler]] = ContextVar(  # noqa: E501",
          "44: )",
          "48: @deprecated(\"0.1.0\", alternative=\"tracing_v2_enabled\", removal=\"0.2.0\")",
          "52:     \"\"\"Get the Deprecated LangChainTracer in a context manager.",
          "54:     Args:",
          "55:         session_name (str, optional): The name of the session.",
          "56:           Defaults to \"default\".",
          "58:     Returns:",
          "59:         TracerSessionV1: The LangChainTracer session.",
          "61:     Example:",
          "62:         >>> with tracing_enabled() as session:",
          "63:         ...     # Use the LangChainTracer session",
          "64:     \"\"\"",
          "65:     cb = LangChainTracerV1()",
          "66:     session = cast(TracerSessionV1, cb.load_session(session_name))",
          "67:     try:",
          "68:         tracing_callback_var.set(cb)",
          "69:         yield session",
          "70:     finally:",
          "71:         tracing_callback_var.set(None)",
          "",
          "[Added Lines]",
          "32: # for backwards partial compatibility if this is imported by users but unused",
          "33: tracing_callback_var: Any = None",
          "34: tracing_v2_callback_var: ContextVar[Optional[LangChainTracer]] = ContextVar(",
          "36: )  # noqa: E501",
          "37: run_collector_var: ContextVar[Optional[RunCollectorCallbackHandler]] = ContextVar(",
          "39: )  # noqa: E501",
          "46:     \"\"\"Throws an error because this has been replaced by tracing_v2_enabled.\"\"\"",
          "47:     raise RuntimeError(",
          "48:         \"tracing_enabled is no longer supported. Please use tracing_enabled_v2 instead.\"",
          "49:     )",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/tracers/langchain_v1.py||libs/core/langchain_core/tracers/langchain_v1.py": [
          "File: libs/core/langchain_core/tracers/langchain_v1.py -> libs/core/langchain_core/tracers/langchain_v1.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: from __future__ import annotations",
          "3: import logging",
          "4: import os",
          "5: from typing import Any, Dict, Optional, Union",
          "7: import requests",
          "9: from langchain_core._api import deprecated",
          "10: from langchain_core.messages import get_buffer_string",
          "11: from langchain_core.tracers.base import BaseTracer",
          "12: from langchain_core.tracers.schemas import (",
          "13:     ChainRun,",
          "14:     LLMRun,",
          "15:     Run,",
          "16:     ToolRun,",
          "17:     TracerSession,",
          "18:     TracerSessionV1,",
          "19:     TracerSessionV1Base,",
          "20: )",
          "21: from langchain_core.utils import raise_for_status_with_text",
          "23: logger = logging.getLogger(__name__)",
          "26: def get_headers() -> Dict[str, Any]:",
          "27:     \"\"\"Get the headers for the LangChain API.\"\"\"",
          "28:     headers: Dict[str, Any] = {\"Content-Type\": \"application/json\"}",
          "29:     if os.getenv(\"LANGCHAIN_API_KEY\"):",
          "30:         headers[\"x-api-key\"] = os.getenv(\"LANGCHAIN_API_KEY\")",
          "31:     return headers",
          "34: def _get_endpoint() -> str:",
          "35:     return os.getenv(\"LANGCHAIN_ENDPOINT\", \"http://localhost:8000\")",
          "38: @deprecated(\"0.1.0\", alternative=\"LangChainTracer\", removal=\"0.2.0\")",
          "39: class LangChainTracerV1(BaseTracer):",
          "40:     \"\"\"Implementation of the SharedTracer that POSTS to the langchain endpoint.\"\"\"",
          "42:     def __init__(self, **kwargs: Any) -> None:",
          "43:         \"\"\"Initialize the LangChain tracer.\"\"\"",
          "44:         super().__init__(**kwargs)",
          "45:         self.session: Optional[TracerSessionV1] = None",
          "46:         self._endpoint = _get_endpoint()",
          "47:         self._headers = get_headers()",
          "49:     def _convert_to_v1_run(self, run: Run) -> Union[LLMRun, ChainRun, ToolRun]:",
          "50:         session = self.session or self.load_default_session()",
          "51:         if not isinstance(session, TracerSessionV1):",
          "52:             raise ValueError(",
          "53:                 \"LangChainTracerV1 is not compatible with\"",
          "54:                 f\" session of type {type(session)}\"",
          "55:             )",
          "57:         if run.run_type == \"llm\":",
          "58:             if \"prompts\" in run.inputs:",
          "59:                 prompts = run.inputs[\"prompts\"]",
          "60:             elif \"messages\" in run.inputs:",
          "61:                 prompts = [get_buffer_string(batch) for batch in run.inputs[\"messages\"]]",
          "62:             else:",
          "63:                 raise ValueError(\"No prompts found in LLM run inputs\")",
          "64:             return LLMRun(",
          "65:                 uuid=str(run.id) if run.id else None,  # type: ignore[arg-type]",
          "66:                 parent_uuid=str(run.parent_run_id) if run.parent_run_id else None,",
          "67:                 start_time=run.start_time,",
          "68:                 end_time=run.end_time,  # type: ignore[arg-type]",
          "69:                 extra=run.extra,",
          "70:                 execution_order=run.execution_order,",
          "71:                 child_execution_order=run.child_execution_order,",
          "72:                 serialized=run.serialized,  # type: ignore[arg-type]",
          "73:                 session_id=session.id,",
          "74:                 error=run.error,",
          "75:                 prompts=prompts,",
          "76:                 response=run.outputs if run.outputs else None,  # type: ignore[arg-type]",
          "77:             )",
          "78:         if run.run_type == \"chain\":",
          "79:             child_runs = [self._convert_to_v1_run(run) for run in run.child_runs]",
          "80:             return ChainRun(",
          "81:                 uuid=str(run.id) if run.id else None,  # type: ignore[arg-type]",
          "82:                 parent_uuid=str(run.parent_run_id) if run.parent_run_id else None,",
          "83:                 start_time=run.start_time,",
          "84:                 end_time=run.end_time,  # type: ignore[arg-type]",
          "85:                 execution_order=run.execution_order,",
          "86:                 child_execution_order=run.child_execution_order,",
          "87:                 serialized=run.serialized,  # type: ignore[arg-type]",
          "88:                 session_id=session.id,",
          "89:                 inputs=run.inputs,",
          "90:                 outputs=run.outputs,",
          "91:                 error=run.error,",
          "92:                 extra=run.extra,",
          "93:                 child_llm_runs=[run for run in child_runs if isinstance(run, LLMRun)],",
          "94:                 child_chain_runs=[",
          "95:                     run for run in child_runs if isinstance(run, ChainRun)",
          "96:                 ],",
          "97:                 child_tool_runs=[run for run in child_runs if isinstance(run, ToolRun)],",
          "98:             )",
          "99:         if run.run_type == \"tool\":",
          "100:             child_runs = [self._convert_to_v1_run(run) for run in run.child_runs]",
          "101:             return ToolRun(",
          "102:                 uuid=str(run.id) if run.id else None,  # type: ignore[arg-type]",
          "103:                 parent_uuid=str(run.parent_run_id) if run.parent_run_id else None,",
          "104:                 start_time=run.start_time,",
          "105:                 end_time=run.end_time,  # type: ignore[arg-type]",
          "106:                 execution_order=run.execution_order,",
          "107:                 child_execution_order=run.child_execution_order,",
          "108:                 serialized=run.serialized,  # type: ignore[arg-type]",
          "109:                 session_id=session.id,",
          "110:                 action=str(run.serialized),",
          "111:                 tool_input=run.inputs.get(\"input\", \"\"),",
          "112:                 output=None if run.outputs is None else run.outputs.get(\"output\"),",
          "113:                 error=run.error,",
          "114:                 extra=run.extra,",
          "115:                 child_chain_runs=[",
          "116:                     run for run in child_runs if isinstance(run, ChainRun)",
          "117:                 ],",
          "118:                 child_tool_runs=[run for run in child_runs if isinstance(run, ToolRun)],",
          "119:                 child_llm_runs=[run for run in child_runs if isinstance(run, LLMRun)],",
          "120:             )",
          "121:         raise ValueError(f\"Unknown run type: {run.run_type}\")",
          "123:     def _persist_run(self, run: Union[Run, LLMRun, ChainRun, ToolRun]) -> None:",
          "124:         \"\"\"Persist a run.\"\"\"",
          "125:         if isinstance(run, Run):",
          "126:             v1_run = self._convert_to_v1_run(run)",
          "127:         else:",
          "128:             v1_run = run",
          "129:         if isinstance(v1_run, LLMRun):",
          "130:             endpoint = f\"{self._endpoint}/llm-runs\"",
          "131:         elif isinstance(v1_run, ChainRun):",
          "132:             endpoint = f\"{self._endpoint}/chain-runs\"",
          "133:         else:",
          "134:             endpoint = f\"{self._endpoint}/tool-runs\"",
          "136:         try:",
          "137:             response = requests.post(",
          "138:                 endpoint,",
          "139:                 data=v1_run.json(),",
          "140:                 headers=self._headers,",
          "141:             )",
          "142:             raise_for_status_with_text(response)",
          "143:         except Exception as e:",
          "144:             logger.warning(f\"Failed to persist run: {e}\")",
          "146:     def _persist_session(",
          "147:         self, session_create: TracerSessionV1Base",
          "148:     ) -> Union[TracerSessionV1, TracerSession]:",
          "149:         \"\"\"Persist a session.\"\"\"",
          "150:         try:",
          "151:             r = requests.post(",
          "152:                 f\"{self._endpoint}/sessions\",",
          "153:                 data=session_create.json(),",
          "154:                 headers=self._headers,",
          "155:             )",
          "156:             session = TracerSessionV1(id=r.json()[\"id\"], **session_create.dict())",
          "157:         except Exception as e:",
          "158:             logger.warning(f\"Failed to create session, using default session: {e}\")",
          "159:             session = TracerSessionV1(id=1, **session_create.dict())",
          "160:         return session",
          "162:     def _load_session(self, session_name: Optional[str] = None) -> TracerSessionV1:",
          "163:         \"\"\"Load a session from the tracer.\"\"\"",
          "164:         try:",
          "165:             url = f\"{self._endpoint}/sessions\"",
          "166:             if session_name:",
          "167:                 url += f\"?name={session_name}\"",
          "168:             r = requests.get(url, headers=self._headers)",
          "170:             tracer_session = TracerSessionV1(**r.json()[0])",
          "171:         except Exception as e:",
          "172:             session_type = \"default\" if not session_name else session_name",
          "173:             logger.warning(",
          "174:                 f\"Failed to load {session_type} session, using empty session: {e}\"",
          "175:             )",
          "176:             tracer_session = TracerSessionV1(id=1)",
          "178:         self.session = tracer_session",
          "179:         return tracer_session",
          "181:     def load_session(self, session_name: str) -> Union[TracerSessionV1, TracerSession]:",
          "182:         \"\"\"Load a session with the given name from the tracer.\"\"\"",
          "183:         return self._load_session(session_name)",
          "185:     def load_default_session(self) -> Union[TracerSessionV1, TracerSession]:",
          "186:         \"\"\"Load the default tracing session and set it as the Tracer's session.\"\"\"",
          "187:         return self._load_session(\"default\")",
          "",
          "[Added Lines]",
          "1: from typing import Any",
          "4: def get_headers(*args: Any, **kwargs: Any) -> Any:",
          "5:     raise RuntimeError(",
          "6:         \"get_headers for LangChainTracerV1 is no longer supported. \"",
          "7:         \"Please use LangChainTracer instead.\"",
          "8:     )",
          "11: def LangChainTracerV1(*args: Any, **kwargs: Any) -> Any:",
          "12:     raise RuntimeError(",
          "13:         \"LangChainTracerV1 is no longer supported. Please use LangChainTracer instead.\"",
          "14:     )",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/utils/loading.py||libs/core/langchain_core/utils/loading.py": [
          "File: libs/core/langchain_core/utils/loading.py -> libs/core/langchain_core/utils/loading.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Utilities for loading configurations from langchain_core-hub.\"\"\"",
          "34: def try_load_from_hub(",
          "",
          "[Removed Lines]",
          "3: import os",
          "4: import re",
          "5: import tempfile",
          "6: from pathlib import Path, PurePosixPath",
          "7: from typing import Any, Callable, Optional, Set, TypeVar, Union",
          "8: from urllib.parse import urljoin",
          "10: import requests",
          "12: from langchain_core._api.deprecation import deprecated",
          "14: DEFAULT_REF = os.environ.get(\"LANGCHAIN_HUB_DEFAULT_REF\", \"master\")",
          "15: LANGCHAINHUB_REPO = \"https://raw.githubusercontent.com/hwchase17/langchain-hub/\"",
          "16: URL_BASE = os.environ.get(",
          "17:     \"LANGCHAIN_HUB_URL_BASE\",",
          "18:     LANGCHAINHUB_REPO + \"{ref}/\",",
          "19: )",
          "20: HUB_PATH_RE = re.compile(r\"lc(?P<ref>@[^:]+)?://(?P<path>.*)\")",
          "22: T = TypeVar(\"T\")",
          "25: @deprecated(",
          "26:     since=\"0.1.30\",",
          "27:     removal=\"0.2\",",
          "28:     message=(",
          "29:         \"Using the hwchase17/langchain-hub \"",
          "30:         \"repo for prompts is deprecated. Please use \"",
          "31:         \"https://smith.langchain.com/hub instead.\"",
          "32:     ),",
          "33: )",
          "35:     path: Union[str, Path],",
          "36:     loader: Callable[[str], T],",
          "37:     valid_prefix: str,",
          "38:     valid_suffixes: Set[str],",
          "40: ) -> Optional[T]:",
          "41:     \"\"\"Load configuration from hub.  Returns None if path is not a hub path.\"\"\"",
          "42:     if not isinstance(path, str) or not (match := HUB_PATH_RE.match(path)):",
          "43:         return None",
          "44:     ref, remote_path_str = match.groups()",
          "45:     ref = ref[1:] if ref else DEFAULT_REF",
          "46:     remote_path = Path(remote_path_str)",
          "47:     if remote_path.parts[0] != valid_prefix:",
          "48:         return None",
          "49:     if remote_path.suffix[1:] not in valid_suffixes:",
          "50:         raise ValueError(f\"Unsupported file type, must be one of {valid_suffixes}.\")",
          "52:     # Using Path with URLs is not recommended, because on Windows",
          "53:     # the backslash is used as the path separator, which can cause issues",
          "54:     # when working with URLs that use forward slashes as the path separator.",
          "55:     # Instead, use PurePosixPath to ensure that forward slashes are used as the",
          "56:     # path separator, regardless of the operating system.",
          "57:     full_url = urljoin(URL_BASE.format(ref=ref), PurePosixPath(remote_path).__str__())",
          "58:     if not full_url.startswith(LANGCHAINHUB_REPO):",
          "59:         raise ValueError(f\"Invalid hub path: {path}\")",
          "61:     r = requests.get(full_url, timeout=5)",
          "62:     if r.status_code != 200:",
          "63:         raise ValueError(f\"Could not find file at {full_url}\")",
          "64:     with tempfile.TemporaryDirectory() as tmpdirname:",
          "65:         file = Path(tmpdirname) / remote_path.name",
          "66:         with open(file, \"wb\") as f:",
          "67:             f.write(r.content)",
          "68:         return loader(str(file), **kwargs)",
          "",
          "[Added Lines]",
          "3: from typing import Any",
          "9: ) -> Any:",
          "10:     raise RuntimeError(",
          "11:         \"Loading from the deprecated github-based Hub is no longer supported. \"",
          "12:         \"Please use the new LangChain Hub at https://smith.langchain.com/hub instead.\"",
          "13:     )",
          "",
          "---------------"
        ],
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.6.1 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.7.1 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "605: [[package]]",
          "606: name = \"httpcore\"",
          "608: description = \"A minimal low-level HTTP client.\"",
          "609: optional = false",
          "610: python-versions = \">=3.8\"",
          "611: files = [",
          "614: ]",
          "616: [package.dependencies]",
          "",
          "[Removed Lines]",
          "607: version = \"1.0.4\"",
          "612:     {file = \"httpcore-1.0.4-py3-none-any.whl\", hash = \"sha256:ac418c1db41bade2ad53ae2f3834a3a0f5ae76b56cf5aa497d2d033384fc7d73\"},",
          "613:     {file = \"httpcore-1.0.4.tar.gz\", hash = \"sha256:cb2839ccfcba0d2d3c1131d3c3e26dfc327326fbe7a5dc0dbfe9f6c9151bb022\"},",
          "",
          "[Added Lines]",
          "607: version = \"1.0.5\"",
          "612:     {file = \"httpcore-1.0.5-py3-none-any.whl\", hash = \"sha256:421f18bac248b25d310f3cacd198d55b8e6125c107797b609ff9b7a6ba7991b5\"},",
          "613:     {file = \"httpcore-1.0.5.tar.gz\", hash = \"sha256:34a38e2f9291467ee3b44e89dd52615370e152954ba21721378a87b2960f7a61\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "621: asyncio = [\"anyio (>=4.0,<5.0)\"]",
          "622: http2 = [\"h2 (>=3,<5)\"]",
          "623: socks = [\"socksio (==1.*)\"]",
          "626: [[package]]",
          "627: name = \"httpx\"",
          "",
          "[Removed Lines]",
          "624: trio = [\"trio (>=0.22.0,<0.25.0)\"]",
          "",
          "[Added Lines]",
          "624: trio = [\"trio (>=0.22.0,<0.26.0)\"]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "709: [[package]]",
          "710: name = \"ipykernel\"",
          "712: description = \"IPython Kernel for Jupyter\"",
          "713: optional = false",
          "714: python-versions = \">=3.8\"",
          "715: files = [",
          "718: ]",
          "720: [package.dependencies]",
          "",
          "[Removed Lines]",
          "711: version = \"6.29.3\"",
          "716:     {file = \"ipykernel-6.29.3-py3-none-any.whl\", hash = \"sha256:5aa086a4175b0229d4eca211e181fb473ea78ffd9869af36ba7694c947302a21\"},",
          "717:     {file = \"ipykernel-6.29.3.tar.gz\", hash = \"sha256:e14c250d1f9ea3989490225cc1a542781b095a18a19447fcf2b5eaf7d0ac5bd2\"},",
          "",
          "[Added Lines]",
          "711: version = \"6.29.4\"",
          "716:     {file = \"ipykernel-6.29.4-py3-none-any.whl\", hash = \"sha256:1181e653d95c6808039c509ef8e67c4126b3b3af7781496c7cbfb5ed938a27da\"},",
          "717:     {file = \"ipykernel-6.29.4.tar.gz\", hash = \"sha256:3d44070060f9475ac2092b760123fadf105d2e2493c24848b6691a7c4f42af5c\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1208: langchain-core = \"^0.1.28\"",
          "1210: [package.extras]",
          "1213: [package.source]",
          "1214: type = \"directory\"",
          "",
          "[Removed Lines]",
          "1211: extended-testing = [\"lxml (>=5.1.0,<6.0.0)\"]",
          "",
          "[Added Lines]",
          "1211: extended-testing = [\"lxml (>=4.9.3,<6.0)\"]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1217: [[package]]",
          "1218: name = \"langsmith\"",
          "1220: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "1221: optional = false",
          "1222: python-versions = \"<4.0,>=3.8.1\"",
          "1223: files = [",
          "1226: ]",
          "1228: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1219: version = \"0.1.31\"",
          "1224:     {file = \"langsmith-0.1.31-py3-none-any.whl\", hash = \"sha256:5211a9dc00831db307eb843485a97096484b697b5d2cd1efaac34228e97ca087\"},",
          "1225:     {file = \"langsmith-0.1.31.tar.gz\", hash = \"sha256:efd54ccd44be7fda911bfdc0ead340473df2fdd07345c7252901834d0c4aa37e\"},",
          "",
          "[Added Lines]",
          "1219: version = \"0.1.38\"",
          "1224:     {file = \"langsmith-0.1.38-py3-none-any.whl\", hash = \"sha256:f36479f82cf537cf40d129ac2e485e72a3981360c7b6cf2549dad77d98eafd8f\"},",
          "1225:     {file = \"langsmith-0.1.38.tar.gz\", hash = \"sha256:2c1f98ac0a8c02e43b625650a6e13c65b09523551bfc21a59d20963f46f7d265\"},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1554: [[package]]",
          "1555: name = \"orjson\"",
          "1557: description = \"Fast, correct Python JSON library supporting dataclasses, datetimes, and numpy\"",
          "1558: optional = false",
          "1559: python-versions = \">=3.8\"",
          "1560: files = [",
          "1611: ]",
          "1613: [[package]]",
          "",
          "[Removed Lines]",
          "1556: version = \"3.9.15\"",
          "1561:     {file = \"orjson-3.9.15-cp310-cp310-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:d61f7ce4727a9fa7680cd6f3986b0e2c732639f46a5e0156e550e35258aa313a\"},",
          "1562:     {file = \"orjson-3.9.15-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4feeb41882e8aa17634b589533baafdceb387e01e117b1ec65534ec724023d04\"},",
          "1563:     {file = \"orjson-3.9.15-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:fbbeb3c9b2edb5fd044b2a070f127a0ac456ffd079cb82746fc84af01ef021a4\"},",
          "1564:     {file = \"orjson-3.9.15-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:b66bcc5670e8a6b78f0313bcb74774c8291f6f8aeef10fe70e910b8040f3ab75\"},",
          "1565:     {file = \"orjson-3.9.15-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:2973474811db7b35c30248d1129c64fd2bdf40d57d84beed2a9a379a6f57d0ab\"},",
          "1566:     {file = \"orjson-3.9.15-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9fe41b6f72f52d3da4db524c8653e46243c8c92df826ab5ffaece2dba9cccd58\"},",
          "1567:     {file = \"orjson-3.9.15-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:4228aace81781cc9d05a3ec3a6d2673a1ad0d8725b4e915f1089803e9efd2b99\"},",
          "1568:     {file = \"orjson-3.9.15-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:6f7b65bfaf69493c73423ce9db66cfe9138b2f9ef62897486417a8fcb0a92bfe\"},",
          "1569:     {file = \"orjson-3.9.15-cp310-none-win32.whl\", hash = \"sha256:2d99e3c4c13a7b0fb3792cc04c2829c9db07838fb6973e578b85c1745e7d0ce7\"},",
          "1570:     {file = \"orjson-3.9.15-cp310-none-win_amd64.whl\", hash = \"sha256:b725da33e6e58e4a5d27958568484aa766e825e93aa20c26c91168be58e08cbb\"},",
          "1571:     {file = \"orjson-3.9.15-cp311-cp311-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:c8e8fe01e435005d4421f183038fc70ca85d2c1e490f51fb972db92af6e047c2\"},",
          "1572:     {file = \"orjson-3.9.15-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:87f1097acb569dde17f246faa268759a71a2cb8c96dd392cd25c668b104cad2f\"},",
          "1573:     {file = \"orjson-3.9.15-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:ff0f9913d82e1d1fadbd976424c316fbc4d9c525c81d047bbdd16bd27dd98cfc\"},",
          "1574:     {file = \"orjson-3.9.15-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:8055ec598605b0077e29652ccfe9372247474375e0e3f5775c91d9434e12d6b1\"},",
          "1575:     {file = \"orjson-3.9.15-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d6768a327ea1ba44c9114dba5fdda4a214bdb70129065cd0807eb5f010bfcbb5\"},",
          "1576:     {file = \"orjson-3.9.15-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:12365576039b1a5a47df01aadb353b68223da413e2e7f98c02403061aad34bde\"},",
          "1577:     {file = \"orjson-3.9.15-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:71c6b009d431b3839d7c14c3af86788b3cfac41e969e3e1c22f8a6ea13139404\"},",
          "1578:     {file = \"orjson-3.9.15-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:e18668f1bd39e69b7fed19fa7cd1cd110a121ec25439328b5c89934e6d30d357\"},",
          "1579:     {file = \"orjson-3.9.15-cp311-none-win32.whl\", hash = \"sha256:62482873e0289cf7313461009bf62ac8b2e54bc6f00c6fabcde785709231a5d7\"},",
          "1580:     {file = \"orjson-3.9.15-cp311-none-win_amd64.whl\", hash = \"sha256:b3d336ed75d17c7b1af233a6561cf421dee41d9204aa3cfcc6c9c65cd5bb69a8\"},",
          "1581:     {file = \"orjson-3.9.15-cp312-cp312-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:82425dd5c7bd3adfe4e94c78e27e2fa02971750c2b7ffba648b0f5d5cc016a73\"},",
          "1582:     {file = \"orjson-3.9.15-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2c51378d4a8255b2e7c1e5cc430644f0939539deddfa77f6fac7b56a9784160a\"},",
          "1583:     {file = \"orjson-3.9.15-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:6ae4e06be04dc00618247c4ae3f7c3e561d5bc19ab6941427f6d3722a0875ef7\"},",
          "1584:     {file = \"orjson-3.9.15-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:bcef128f970bb63ecf9a65f7beafd9b55e3aaf0efc271a4154050fc15cdb386e\"},",
          "1585:     {file = \"orjson-3.9.15-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:b72758f3ffc36ca566ba98a8e7f4f373b6c17c646ff8ad9b21ad10c29186f00d\"},",
          "1586:     {file = \"orjson-3.9.15-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:10c57bc7b946cf2efa67ac55766e41764b66d40cbd9489041e637c1304400494\"},",
          "1587:     {file = \"orjson-3.9.15-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:946c3a1ef25338e78107fba746f299f926db408d34553b4754e90a7de1d44068\"},",
          "1588:     {file = \"orjson-3.9.15-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:2f256d03957075fcb5923410058982aea85455d035607486ccb847f095442bda\"},",
          "1589:     {file = \"orjson-3.9.15-cp312-none-win_amd64.whl\", hash = \"sha256:5bb399e1b49db120653a31463b4a7b27cf2fbfe60469546baf681d1b39f4edf2\"},",
          "1590:     {file = \"orjson-3.9.15-cp38-cp38-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:b17f0f14a9c0ba55ff6279a922d1932e24b13fc218a3e968ecdbf791b3682b25\"},",
          "1591:     {file = \"orjson-3.9.15-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:7f6cbd8e6e446fb7e4ed5bac4661a29e43f38aeecbf60c4b900b825a353276a1\"},",
          "1592:     {file = \"orjson-3.9.15-cp38-cp38-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:76bc6356d07c1d9f4b782813094d0caf1703b729d876ab6a676f3aaa9a47e37c\"},",
          "1593:     {file = \"orjson-3.9.15-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:fdfa97090e2d6f73dced247a2f2d8004ac6449df6568f30e7fa1a045767c69a6\"},",
          "1594:     {file = \"orjson-3.9.15-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:7413070a3e927e4207d00bd65f42d1b780fb0d32d7b1d951f6dc6ade318e1b5a\"},",
          "1595:     {file = \"orjson-3.9.15-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9cf1596680ac1f01839dba32d496136bdd5d8ffb858c280fa82bbfeb173bdd40\"},",
          "1596:     {file = \"orjson-3.9.15-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:809d653c155e2cc4fd39ad69c08fdff7f4016c355ae4b88905219d3579e31eb7\"},",
          "1597:     {file = \"orjson-3.9.15-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:920fa5a0c5175ab14b9c78f6f820b75804fb4984423ee4c4f1e6d748f8b22bc1\"},",
          "1598:     {file = \"orjson-3.9.15-cp38-none-win32.whl\", hash = \"sha256:2b5c0f532905e60cf22a511120e3719b85d9c25d0e1c2a8abb20c4dede3b05a5\"},",
          "1599:     {file = \"orjson-3.9.15-cp38-none-win_amd64.whl\", hash = \"sha256:67384f588f7f8daf040114337d34a5188346e3fae6c38b6a19a2fe8c663a2f9b\"},",
          "1600:     {file = \"orjson-3.9.15-cp39-cp39-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:6fc2fe4647927070df3d93f561d7e588a38865ea0040027662e3e541d592811e\"},",
          "1601:     {file = \"orjson-3.9.15-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:34cbcd216e7af5270f2ffa63a963346845eb71e174ea530867b7443892d77180\"},",
          "1602:     {file = \"orjson-3.9.15-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:f541587f5c558abd93cb0de491ce99a9ef8d1ae29dd6ab4dbb5a13281ae04cbd\"},",
          "1603:     {file = \"orjson-3.9.15-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:92255879280ef9c3c0bcb327c5a1b8ed694c290d61a6a532458264f887f052cb\"},",
          "1604:     {file = \"orjson-3.9.15-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:05a1f57fb601c426635fcae9ddbe90dfc1ed42245eb4c75e4960440cac667262\"},",
          "1605:     {file = \"orjson-3.9.15-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ede0bde16cc6e9b96633df1631fbcd66491d1063667f260a4f2386a098393790\"},",
          "1606:     {file = \"orjson-3.9.15-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:e88b97ef13910e5f87bcbc4dd7979a7de9ba8702b54d3204ac587e83639c0c2b\"},",
          "1607:     {file = \"orjson-3.9.15-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:57d5d8cf9c27f7ef6bc56a5925c7fbc76b61288ab674eb352c26ac780caa5b10\"},",
          "1608:     {file = \"orjson-3.9.15-cp39-none-win32.whl\", hash = \"sha256:001f4eb0ecd8e9ebd295722d0cbedf0748680fb9998d3993abaed2f40587257a\"},",
          "1609:     {file = \"orjson-3.9.15-cp39-none-win_amd64.whl\", hash = \"sha256:ea0b183a5fe6b2b45f3b854b0d19c4e932d6f5934ae1f723b07cf9560edd4ec7\"},",
          "1610:     {file = \"orjson-3.9.15.tar.gz\", hash = \"sha256:95cae920959d772f30ab36d3b25f83bb0f3be671e986c72ce22f8fa700dae061\"},",
          "",
          "[Added Lines]",
          "1556: version = \"3.10.0\"",
          "1561:     {file = \"orjson-3.10.0-cp310-cp310-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:47af5d4b850a2d1328660661f0881b67fdbe712aea905dadd413bdea6f792c33\"},",
          "1562:     {file = \"orjson-3.10.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c90681333619d78360d13840c7235fdaf01b2b129cb3a4f1647783b1971542b6\"},",
          "1563:     {file = \"orjson-3.10.0-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:400c5b7c4222cb27b5059adf1fb12302eebcabf1978f33d0824aa5277ca899bd\"},",
          "1564:     {file = \"orjson-3.10.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:5dcb32e949eae80fb335e63b90e5808b4b0f64e31476b3777707416b41682db5\"},",
          "1565:     {file = \"orjson-3.10.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:aa7d507c7493252c0a0264b5cc7e20fa2f8622b8a83b04d819b5ce32c97cf57b\"},",
          "1566:     {file = \"orjson-3.10.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e286a51def6626f1e0cc134ba2067dcf14f7f4b9550f6dd4535fd9d79000040b\"},",
          "1567:     {file = \"orjson-3.10.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:8acd4b82a5f3a3ec8b1dc83452941d22b4711964c34727eb1e65449eead353ca\"},",
          "1568:     {file = \"orjson-3.10.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:30707e646080dd3c791f22ce7e4a2fc2438765408547c10510f1f690bd336217\"},",
          "1569:     {file = \"orjson-3.10.0-cp310-none-win32.whl\", hash = \"sha256:115498c4ad34188dcb73464e8dc80e490a3e5e88a925907b6fedcf20e545001a\"},",
          "1570:     {file = \"orjson-3.10.0-cp310-none-win_amd64.whl\", hash = \"sha256:6735dd4a5a7b6df00a87d1d7a02b84b54d215fb7adac50dd24da5997ffb4798d\"},",
          "1571:     {file = \"orjson-3.10.0-cp311-cp311-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:9587053e0cefc284e4d1cd113c34468b7d3f17666d22b185ea654f0775316a26\"},",
          "1572:     {file = \"orjson-3.10.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1bef1050b1bdc9ea6c0d08468e3e61c9386723633b397e50b82fda37b3563d72\"},",
          "1573:     {file = \"orjson-3.10.0-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:d16c6963ddf3b28c0d461641517cd312ad6b3cf303d8b87d5ef3fa59d6844337\"},",
          "1574:     {file = \"orjson-3.10.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:4251964db47ef090c462a2d909f16c7c7d5fe68e341dabce6702879ec26d1134\"},",
          "1575:     {file = \"orjson-3.10.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:73bbbdc43d520204d9ef0817ac03fa49c103c7f9ea94f410d2950755be2c349c\"},",
          "1576:     {file = \"orjson-3.10.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:414e5293b82373606acf0d66313aecb52d9c8c2404b1900683eb32c3d042dbd7\"},",
          "1577:     {file = \"orjson-3.10.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:feaed5bb09877dc27ed0d37f037ddef6cb76d19aa34b108db270d27d3d2ef747\"},",
          "1578:     {file = \"orjson-3.10.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:5127478260db640323cea131ee88541cb1a9fbce051f0b22fa2f0892f44da302\"},",
          "1579:     {file = \"orjson-3.10.0-cp311-none-win32.whl\", hash = \"sha256:b98345529bafe3c06c09996b303fc0a21961820d634409b8639bc16bd4f21b63\"},",
          "1580:     {file = \"orjson-3.10.0-cp311-none-win_amd64.whl\", hash = \"sha256:658ca5cee3379dd3d37dbacd43d42c1b4feee99a29d847ef27a1cb18abdfb23f\"},",
          "1581:     {file = \"orjson-3.10.0-cp312-cp312-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:4329c1d24fd130ee377e32a72dc54a3c251e6706fccd9a2ecb91b3606fddd998\"},",
          "1582:     {file = \"orjson-3.10.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ef0f19fdfb6553342b1882f438afd53c7cb7aea57894c4490c43e4431739c700\"},",
          "1583:     {file = \"orjson-3.10.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:c4f60db24161534764277f798ef53b9d3063092f6d23f8f962b4a97edfa997a0\"},",
          "1584:     {file = \"orjson-3.10.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:1de3fd5c7b208d836f8ecb4526995f0d5877153a4f6f12f3e9bf11e49357de98\"},",
          "1585:     {file = \"orjson-3.10.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:f93e33f67729d460a177ba285002035d3f11425ed3cebac5f6ded4ef36b28344\"},",
          "1586:     {file = \"orjson-3.10.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:237ba922aef472761acd697eef77fef4831ab769a42e83c04ac91e9f9e08fa0e\"},",
          "1587:     {file = \"orjson-3.10.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:98c1bfc6a9bec52bc8f0ab9b86cc0874b0299fccef3562b793c1576cf3abb570\"},",
          "1588:     {file = \"orjson-3.10.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:30d795a24be16c03dca0c35ca8f9c8eaaa51e3342f2c162d327bd0225118794a\"},",
          "1589:     {file = \"orjson-3.10.0-cp312-none-win32.whl\", hash = \"sha256:6a3f53dc650bc860eb26ec293dfb489b2f6ae1cbfc409a127b01229980e372f7\"},",
          "1590:     {file = \"orjson-3.10.0-cp312-none-win_amd64.whl\", hash = \"sha256:983db1f87c371dc6ffc52931eb75f9fe17dc621273e43ce67bee407d3e5476e9\"},",
          "1591:     {file = \"orjson-3.10.0-cp38-cp38-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:9a667769a96a72ca67237224a36faf57db0c82ab07d09c3aafc6f956196cfa1b\"},",
          "1592:     {file = \"orjson-3.10.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ade1e21dfde1d37feee8cf6464c20a2f41fa46c8bcd5251e761903e46102dc6b\"},",
          "1593:     {file = \"orjson-3.10.0-cp38-cp38-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:23c12bb4ced1c3308eff7ba5c63ef8f0edb3e4c43c026440247dd6c1c61cea4b\"},",
          "1594:     {file = \"orjson-3.10.0-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:b2d014cf8d4dc9f03fc9f870de191a49a03b1bcda51f2a957943fb9fafe55aac\"},",
          "1595:     {file = \"orjson-3.10.0-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:eadecaa16d9783affca33597781328e4981b048615c2ddc31c47a51b833d6319\"},",
          "1596:     {file = \"orjson-3.10.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:cd583341218826f48bd7c6ebf3310b4126216920853cbc471e8dbeaf07b0b80e\"},",
          "1597:     {file = \"orjson-3.10.0-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:90bfc137c75c31d32308fd61951d424424426ddc39a40e367704661a9ee97095\"},",
          "1598:     {file = \"orjson-3.10.0-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:13b5d3c795b09a466ec9fcf0bd3ad7b85467d91a60113885df7b8d639a9d374b\"},",
          "1599:     {file = \"orjson-3.10.0-cp38-none-win32.whl\", hash = \"sha256:5d42768db6f2ce0162544845facb7c081e9364a5eb6d2ef06cd17f6050b048d8\"},",
          "1600:     {file = \"orjson-3.10.0-cp38-none-win_amd64.whl\", hash = \"sha256:33e6655a2542195d6fd9f850b428926559dee382f7a862dae92ca97fea03a5ad\"},",
          "1601:     {file = \"orjson-3.10.0-cp39-cp39-macosx_10_15_x86_64.macosx_11_0_arm64.macosx_10_15_universal2.whl\", hash = \"sha256:4050920e831a49d8782a1720d3ca2f1c49b150953667eed6e5d63a62e80f46a2\"},",
          "1602:     {file = \"orjson-3.10.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1897aa25a944cec774ce4a0e1c8e98fb50523e97366c637b7d0cddabc42e6643\"},",
          "1603:     {file = \"orjson-3.10.0-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:9bf565a69e0082ea348c5657401acec3cbbb31564d89afebaee884614fba36b4\"},",
          "1604:     {file = \"orjson-3.10.0-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:b6ebc17cfbbf741f5c1a888d1854354536f63d84bee537c9a7c0335791bb9009\"},",
          "1605:     {file = \"orjson-3.10.0-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d2817877d0b69f78f146ab305c5975d0618df41acf8811249ee64231f5953fee\"},",
          "1606:     {file = \"orjson-3.10.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:57d017863ec8aa4589be30a328dacd13c2dc49de1c170bc8d8c8a98ece0f2925\"},",
          "1607:     {file = \"orjson-3.10.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:22c2f7e377ac757bd3476ecb7480c8ed79d98ef89648f0176deb1da5cd014eb7\"},",
          "1608:     {file = \"orjson-3.10.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:e62ba42bfe64c60c1bc84799944f80704e996592c6b9e14789c8e2a303279912\"},",
          "1609:     {file = \"orjson-3.10.0-cp39-none-win32.whl\", hash = \"sha256:60c0b1bdbccd959ebd1575bd0147bd5e10fc76f26216188be4a36b691c937077\"},",
          "1610:     {file = \"orjson-3.10.0-cp39-none-win_amd64.whl\", hash = \"sha256:175a41500ebb2fdf320bf78e8b9a75a1279525b62ba400b2b2444e274c2c8bee\"},",
          "1611:     {file = \"orjson-3.10.0.tar.gz\", hash = \"sha256:ba4d8cac5f2e2cff36bea6b6481cdb92b38c202bcec603d6f5ff91960595a1ed\"},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1808: [[package]]",
          "1809: name = \"pycparser\"",
          "1811: description = \"C parser in Python\"",
          "1812: optional = false",
          "1814: files = [",
          "1817: ]",
          "1819: [[package]]",
          "",
          "[Removed Lines]",
          "1810: version = \"2.21\"",
          "1813: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"",
          "1815:     {file = \"pycparser-2.21-py2.py3-none-any.whl\", hash = \"sha256:8ee45429555515e1f6b185e78100aea234072576aa43ab53aefcae078162fca9\"},",
          "1816:     {file = \"pycparser-2.21.tar.gz\", hash = \"sha256:e644fdec12f7872f86c58ff790da456218b10f863970249516d60a5eaca77206\"},",
          "",
          "[Added Lines]",
          "1811: version = \"2.22\"",
          "1814: python-versions = \">=3.8\"",
          "1816:     {file = \"pycparser-2.22-py3-none-any.whl\", hash = \"sha256:c3702b6d3dd8c7abc1afa565d7e63d53a1d0bd86cdc24edd75470f4de499cfcc\"},",
          "1817:     {file = \"pycparser-2.22.tar.gz\", hash = \"sha256:491c8be9c040f5390f5bf44a5b07752bd07f56edf992381b05c701439eec10f6\"},",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2145:     {file = \"PyYAML-6.0.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:bf07ee2fef7014951eeb99f56f39c9bb4af143d8aa3c21b1677805985307da34\"},",
          "2146:     {file = \"PyYAML-6.0.1-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:855fb52b0dc35af121542a76b9a84f8d1cd886ea97c84703eaa6d88e37a2ad28\"},",
          "2147:     {file = \"PyYAML-6.0.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:40df9b996c2b73138957fe23a16a4f0ba614f4c0efce1e9406a184b6d07fa3a9\"},",
          "2148:     {file = \"PyYAML-6.0.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6c22bec3fbe2524cde73d7ada88f6566758a8f7227bfbf93a408a9d86bcc12a0\"},",
          "2149:     {file = \"PyYAML-6.0.1-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:8d4e9c88387b0f5c7d5f281e55304de64cf7f9c0021a3525bd3b1c542da3b0e4\"},",
          "2150:     {file = \"PyYAML-6.0.1-cp312-cp312-win32.whl\", hash = \"sha256:d483d2cdf104e7c9fa60c544d92981f12ad66a457afae824d146093b8c294c54\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2149:     {file = \"PyYAML-6.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a08c6f0fe150303c1c6b71ebcd7213c2858041a7e01975da3a99aed1e7a378ef\"},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2966: [metadata]",
          "2967: lock-version = \"2.0\"",
          "2968: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "2969: content-hash = \"203d96b330412ce9defad6739381e4031fc9e995c2d9e0a61a905fc79fff11dd\"",
          "",
          "[Added Lines]",
          "2971: content-hash = \"c26c35cf1c6529b38924a1b9d3186fdefb3b3a1fecc5197559586451bb913f4a\"",
          "",
          "---------------"
        ],
        "libs/core/tests/unit_tests/tracers/test_langchain_v1.py||libs/core/tests/unit_tests/tracers/test_langchain_v1.py": [
          "File: libs/core/tests/unit_tests/tracers/test_langchain_v1.py -> libs/core/tests/unit_tests/tracers/test_langchain_v1.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libs/core/tests/unit_tests/utils/test_loading.py||libs/core/tests/unit_tests/utils/test_loading.py": [
          "File: libs/core/tests/unit_tests/utils/test_loading.py -> libs/core/tests/unit_tests/utils/test_loading.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libs/experimental/langchain_experimental/prompts/load.py||libs/experimental/langchain_experimental/prompts/load.py": [
          "File: libs/experimental/langchain_experimental/prompts/load.py -> libs/experimental/langchain_experimental/prompts/load.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: # Susceptible to arbitrary code execution: https://github.com/langchain-ai/langchain/issues/4849",
          "2: import importlib.util",
          "3: import json",
          "4: from pathlib import Path",
          "5: from typing import Union",
          "7: import yaml",
          "8: from langchain.prompts.loading import load_prompt_from_config, try_load_from_hub",
          "9: from langchain_core.prompts import BasePromptTemplate",
          "12: def load_prompt(path: Union[str, Path]) -> BasePromptTemplate:",
          "13:     \"\"\"Unified method for loading a prompt from LangChainHub or local file system.\"\"\"",
          "15:     if hub_result := try_load_from_hub(",
          "16:         path, _load_prompt_from_file, \"prompts\", {\"py\", \"json\", \"yaml\"}",
          "17:     ):",
          "18:         return hub_result",
          "19:     else:",
          "20:         return _load_prompt_from_file(path)",
          "23: def _load_prompt_from_file(file: Union[str, Path]) -> BasePromptTemplate:",
          "24:     \"\"\"Load prompt from file.\"\"\"",
          "25:     # Convert file to a Path object.",
          "26:     if isinstance(file, str):",
          "27:         file_path = Path(file)",
          "28:     else:",
          "29:         file_path = file",
          "30:     # Load from either json or yaml.",
          "31:     if file_path.suffix == \".json\":",
          "32:         with open(file_path) as f:",
          "33:             config = json.load(f)",
          "34:     elif file_path.suffix.endswith((\".yaml\", \".yml\")):",
          "35:         with open(file_path, \"r\") as f:",
          "36:             config = yaml.safe_load(f)",
          "37:     elif file_path.suffix == \".py\":",
          "38:         spec = importlib.util.spec_from_loader(",
          "39:             \"prompt\", loader=None, origin=str(file_path)",
          "40:         )",
          "41:         if spec is None:",
          "42:             raise ValueError(\"could not load spec\")",
          "43:         helper = importlib.util.module_from_spec(spec)",
          "44:         with open(file_path, \"rb\") as f:",
          "45:             exec(f.read(), helper.__dict__)",
          "46:         if not isinstance(helper.PROMPT, BasePromptTemplate):",
          "47:             raise ValueError(\"Did not get object of type BasePromptTemplate.\")",
          "48:         return helper.PROMPT",
          "49:     else:",
          "50:         raise ValueError(f\"Got unsupported file type {file_path.suffix}\")",
          "51:     # Load the prompt from the config now.",
          "52:     return load_prompt_from_config(config)",
          "",
          "[Added Lines]",
          "1: from langchain.prompts.loading import load_prompt",
          "3: __all__ = [\"load_prompt\"]",
          "",
          "---------------"
        ],
        "libs/langchain/langchain/agents/loading.py||libs/langchain/langchain/agents/loading.py": [
          "File: libs/langchain/langchain/agents/loading.py -> libs/langchain/langchain/agents/loading.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: from langchain_core._api import deprecated",
          "9: from langchain_core.language_models import BaseLanguageModel",
          "10: from langchain_core.tools import Tool",
          "13: from langchain.agents.agent import BaseMultiActionAgent, BaseSingleActionAgent",
          "14: from langchain.agents.types import AGENT_TO_CLASS",
          "",
          "[Removed Lines]",
          "11: from langchain_core.utils.loading import try_load_from_hub",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:     Returns:",
          "101:         An agent executor.",
          "102:     \"\"\"",
          "112: def _load_agent_from_file(",
          "",
          "[Removed Lines]",
          "103:     valid_suffixes = {\"json\", \"yaml\"}",
          "104:     if hub_result := try_load_from_hub(",
          "105:         path, _load_agent_from_file, \"agents\", valid_suffixes",
          "106:     ):",
          "107:         return hub_result",
          "108:     else:",
          "109:         return _load_agent_from_file(path, **kwargs)",
          "",
          "[Added Lines]",
          "103:     if isinstance(path, str) and path.startswith(\"lc://\"):",
          "104:         raise RuntimeError(",
          "105:             \"Loading from the deprecated github-based Hub is no longer supported. \"",
          "106:             \"Please use the new LangChain Hub at https://smith.langchain.com/hub \"",
          "107:             \"instead.\"",
          "108:         )",
          "109:     return _load_agent_from_file(path, **kwargs)",
          "",
          "---------------"
        ],
        "libs/langchain/langchain/chains/loading.py||libs/langchain/langchain/chains/loading.py": [
          "File: libs/langchain/langchain/chains/loading.py -> libs/langchain/langchain/chains/loading.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:     load_prompt,",
          "11:     load_prompt_from_config,",
          "12: )",
          "15: from langchain.chains import ReduceDocumentsChain",
          "16: from langchain.chains.api.base import APIChain",
          "",
          "[Removed Lines]",
          "13: from langchain_core.utils.loading import try_load_from_hub",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "623: def load_chain(path: Union[str, Path], **kwargs: Any) -> Chain:",
          "624:     \"\"\"Unified method for loading a chain from LangChainHub or local fs.\"\"\"",
          "633: def _load_chain_from_file(file: Union[str, Path], **kwargs: Any) -> Chain:",
          "",
          "[Removed Lines]",
          "625:     if hub_result := try_load_from_hub(",
          "626:         path, _load_chain_from_file, \"chains\", {\"json\", \"yaml\"}, **kwargs",
          "627:     ):",
          "628:         return hub_result",
          "629:     else:",
          "630:         return _load_chain_from_file(path, **kwargs)",
          "",
          "[Added Lines]",
          "625:     if isinstance(path, str) and path.startswith(\"lc://\"):",
          "626:         raise RuntimeError(",
          "627:             \"Loading from the deprecated github-based Hub is no longer supported. \"",
          "628:             \"Please use the new LangChain Hub at https://smith.langchain.com/hub \"",
          "629:             \"instead.\"",
          "630:         )",
          "631:     return _load_chain_from_file(path, **kwargs)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be75c749e8e7dce9fc3ebc17621270a18c5fb018",
      "candidate_info": {
        "commit_hash": "be75c749e8e7dce9fc3ebc17621270a18c5fb018",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/be75c749e8e7dce9fc3ebc17621270a18c5fb018",
        "files": [
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml"
        ],
        "message": "core[patch]: bump langsmith (#22476)\n\nNoticing errors logged in some situations when tracing with Langsmith:\n```python\nfrom langchain_core.pydantic_v1 import BaseModel\nfrom langchain_anthropic import ChatAnthropic\n\n\nclass AnswerWithJustification(BaseModel):\n    \"\"\"An answer to the user question along with justification for the answer.\"\"\"\n    answer: str\n    justification: str\n\n\nllm = ChatAnthropic(model=\"claude-3-haiku-20240307\")\nstructured_llm = llm.with_structured_output(AnswerWithJustification)\n\nlist(structured_llm.stream(\"What weighs more a pound of bricks or a pound of feathers\"))\n```\n```\nError in LangChainTracer.on_chain_end callback: AttributeError(\"'NoneType' object has no attribute 'append'\")\n[AnswerWithJustification(answer='A pound of bricks and a pound of feathers weigh the same amount.', justification='This is because a pound is a unit of mass, not volume. By definition, a pound of any material, whether bricks or feathers, will weigh the same - one pound. The physical size or volume of the materials does not matter when measuring by mass. So a pound of bricks and a pound of feathers both weigh exactly one pound.')]\n```",
        "before_after_code_files": [
          "libs/core/poetry.lock||libs/core/poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "882: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*\"",
          "883: files = [",
          "884:     {file = \"jsonpointer-2.4-py2.py3-none-any.whl\", hash = \"sha256:15d51bba20eea3165644553647711d150376234112651b4f1811022aecad7d7a\"},",
          "885: ]",
          "887: [[package]]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885:     {file = \"jsonpointer-2.4.tar.gz\", hash = \"sha256:585cee82b70211fa9e6043b7bb89db6e1aa49524340dde8ad6b63206ea689d88\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1217: [[package]]",
          "1218: name = \"langsmith\"",
          "1220: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "1221: optional = false",
          "1222: python-versions = \"<4.0,>=3.8.1\"",
          "1223: files = [",
          "1226: ]",
          "1228: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1219: version = \"0.1.65\"",
          "1224:     {file = \"langsmith-0.1.65-py3-none-any.whl\", hash = \"sha256:ab4487029240e69cca30da1065f1e9138e5a7ca2bbe8c697f0bd7d5839f71cf7\"},",
          "1225:     {file = \"langsmith-0.1.65.tar.gz\", hash = \"sha256:d3c2eb2391478bd79989f02652cf66e29a7959d677614b6993a47cef43f7f43b\"},",
          "",
          "[Added Lines]",
          "1220: version = \"0.1.69\"",
          "1225:     {file = \"langsmith-0.1.69-py3-none-any.whl\", hash = \"sha256:3d7bd6fadb0852fc4cd2e7cf8a1593306046900052da3970bb2b48ed21cc73d8\"},",
          "1226:     {file = \"langsmith-0.1.69.tar.gz\", hash = \"sha256:0146764904a8e479620b7e73efcba1cf172b621799564dd7e7342859c05c264a\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2128:     {file = \"PyYAML-6.0.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:69b023b2b4daa7548bcfbd4aa3da05b3a74b772db9e23b982788168117739938\"},",
          "2129:     {file = \"PyYAML-6.0.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:81e0b275a9ecc9c0c0c07b4b90ba548307583c125f54d5b6946cfee6360c733d\"},",
          "2130:     {file = \"PyYAML-6.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ba336e390cd8e4d1739f42dfe9bb83a3cc2e80f567d8805e11b46f4a943f5515\"},",
          "2131:     {file = \"PyYAML-6.0.1-cp310-cp310-win32.whl\", hash = \"sha256:bd4af7373a854424dabd882decdc5579653d7868b8fb26dc7d0e99f823aa5924\"},",
          "2132:     {file = \"PyYAML-6.0.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:fd1592b3fdf65fff2ad0004b5e363300ef59ced41c2e6b3a99d4089fa8c5435d\"},",
          "2133:     {file = \"PyYAML-6.0.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:6965a7bc3cf88e5a1c3bd2e0b5c22f8d677dc88a455344035f03399034eb3007\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2132:     {file = \"PyYAML-6.0.1-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:326c013efe8048858a6d312ddd31d56e468118ad4cdeda36c719bf5bb6192290\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2135:     {file = \"PyYAML-6.0.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:42f8152b8dbc4fe7d96729ec2b99c7097d656dc1213a3229ca5383f973a5ed6d\"},",
          "2136:     {file = \"PyYAML-6.0.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc\"},",
          "2137:     {file = \"PyYAML-6.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d2b04aac4d386b172d5b9692e2d2da8de7bfb6c387fa4f801fbf6fb2e6ba4673\"},",
          "2138:     {file = \"PyYAML-6.0.1-cp311-cp311-win32.whl\", hash = \"sha256:1635fd110e8d85d55237ab316b5b011de701ea0f29d07611174a1b42f1444741\"},",
          "2139:     {file = \"PyYAML-6.0.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:bf07ee2fef7014951eeb99f56f39c9bb4af143d8aa3c21b1677805985307da34\"},",
          "2140:     {file = \"PyYAML-6.0.1-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:50550eb667afee136e9a77d6dc71ae76a44df8b3e51e41b77f6de2932bfe0f47\"},",
          "2141:     {file = \"PyYAML-6.0.1-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1fe35611261b29bd1de0070f0b2f47cb6ff71fa6595c077e42bd0c419fa27b98\"},",
          "2142:     {file = \"PyYAML-6.0.1-cp36-cp36m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:704219a11b772aea0d8ecd7058d0082713c3562b4e271b849ad7dc4a5c90c13c\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2140:     {file = \"PyYAML-6.0.1-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:e7d73685e87afe9f3b36c799222440d6cf362062f78be1013661b00c5c6f678b\"},",
          "2143:     {file = \"PyYAML-6.0.1-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:855fb52b0dc35af121542a76b9a84f8d1cd886ea97c84703eaa6d88e37a2ad28\"},",
          "2144:     {file = \"PyYAML-6.0.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:40df9b996c2b73138957fe23a16a4f0ba614f4c0efce1e9406a184b6d07fa3a9\"},",
          "2145:     {file = \"PyYAML-6.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a08c6f0fe150303c1c6b71ebcd7213c2858041a7e01975da3a99aed1e7a378ef\"},",
          "2146:     {file = \"PyYAML-6.0.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6c22bec3fbe2524cde73d7ada88f6566758a8f7227bfbf93a408a9d86bcc12a0\"},",
          "2147:     {file = \"PyYAML-6.0.1-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:8d4e9c88387b0f5c7d5f281e55304de64cf7f9c0021a3525bd3b1c542da3b0e4\"},",
          "2148:     {file = \"PyYAML-6.0.1-cp312-cp312-win32.whl\", hash = \"sha256:d483d2cdf104e7c9fa60c544d92981f12ad66a457afae824d146093b8c294c54\"},",
          "2149:     {file = \"PyYAML-6.0.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2153:     {file = \"PyYAML-6.0.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a0cd17c15d3bb3fa06978b4e8958dcdc6e0174ccea823003a106c7d4d7899ac5\"},",
          "2154:     {file = \"PyYAML-6.0.1-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:28c119d996beec18c05208a8bd78cbe4007878c6dd15091efb73a30e90539696\"},",
          "2155:     {file = \"PyYAML-6.0.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7e07cbde391ba96ab58e532ff4803f79c4129397514e1413a7dc761ccd755735\"},",
          "2156:     {file = \"PyYAML-6.0.1-cp38-cp38-win32.whl\", hash = \"sha256:184c5108a2aca3c5b3d3bf9395d50893a7ab82a38004c8f61c258d4428e80206\"},",
          "2157:     {file = \"PyYAML-6.0.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:1e2722cc9fbb45d9b87631ac70924c11d3a401b2d7f410cc0e3bbf249f2dca62\"},",
          "2158:     {file = \"PyYAML-6.0.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:9eb6caa9a297fc2c2fb8862bc5370d0303ddba53ba97e71f08023b6cd73d16a8\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2166:     {file = \"PyYAML-6.0.1-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:49a183be227561de579b4a36efbb21b3eab9651dd81b1858589f796549873dd6\"},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2160:     {file = \"PyYAML-6.0.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5773183b6446b2c99bb77e77595dd486303b4faab2b086e7b17bc6bef28865f6\"},",
          "2161:     {file = \"PyYAML-6.0.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:b786eecbdf8499b9ca1d697215862083bd6d2a99965554781d0d8d1ad31e13a0\"},",
          "2162:     {file = \"PyYAML-6.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bc1bf2925a1ecd43da378f4db9e4f799775d6367bdb94671027b73b393a7c42c\"},",
          "2163:     {file = \"PyYAML-6.0.1-cp39-cp39-win32.whl\", hash = \"sha256:faca3bdcf85b2fc05d06ff3fbc1f83e1391b3e724afa3feba7d13eeab355484c\"},",
          "2164:     {file = \"PyYAML-6.0.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:510c9deebc5c0225e8c96813043e62b680ba2f9c50a08d3724c7f28a747d1486\"},",
          "2165:     {file = \"PyYAML-6.0.1.tar.gz\", hash = \"sha256:bfdf460b1736c775f2ba9f6a92bca30bc2095067b8a9d77876d1fad6cc3b4a43\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2174:     {file = \"PyYAML-6.0.1-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5\"},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2951: [metadata]",
          "2952: lock-version = \"2.0\"",
          "2953: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "2954: content-hash = \"4feba718f092ba77ab3263f6002898eddf6661fcfdae8b29b607936abb7e33c9\"",
          "",
          "[Added Lines]",
          "2966: content-hash = \"40745c3aae8f648b7bc63bff85e26e5658567dec39f57149a7b1ba7637c93751\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}