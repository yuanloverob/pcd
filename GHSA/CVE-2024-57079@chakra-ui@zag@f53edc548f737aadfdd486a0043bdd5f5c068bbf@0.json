{
  "cve_id": "CVE-2024-57079",
  "cve_desc": "A prototype pollution in the lib.deepMerge function of @zag-js/core v0.50.0 allows attackers to cause a Denial of Service (DoS) via supplying a crafted payload.",
  "repo": "chakra-ui/zag",
  "patch_hash": "f53edc548f737aadfdd486a0043bdd5f5c068bbf",
  "patch_info": {
    "commit_hash": "f53edc548f737aadfdd486a0043bdd5f5c068bbf",
    "repo": "chakra-ui/zag",
    "commit_url": "https://github.com/chakra-ui/zag/commit/f53edc548f737aadfdd486a0043bdd5f5c068bbf",
    "files": [
      "packages/core/src/deep-merge.ts",
      "packages/core/tests/deep-merge.test.ts"
    ],
    "message": "fix(security): proto pollution in deepMerge",
    "before_after_code_files": [
      "packages/core/src/deep-merge.ts||packages/core/src/deep-merge.ts",
      "packages/core/tests/deep-merge.test.ts||packages/core/tests/deep-merge.test.ts"
    ]
  },
  "patch_diff": {
    "packages/core/src/deep-merge.ts||packages/core/src/deep-merge.ts": [
      "File: packages/core/src/deep-merge.ts -> packages/core/src/deep-merge.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import { compact, isPlainObject } from \"@zag-js/utils\"",
      "3: export function deepMerge<T extends Record<string, any>>(source: T, ...objects: T[]): T {",
      "4:   for (const obj of objects) {",
      "5:     const target = compact(obj)",
      "6:     for (const key in target) {",
      "12:       } else {",
      "14:       }",
      "15:     }",
      "16:   }",
      "",
      "[Removed Lines]",
      "7:       if (isPlainObject(obj[key])) {",
      "8:         if (!source[key]) {",
      "9:           source[key] = {} as any",
      "10:         }",
      "11:         deepMerge(source[key], obj[key])",
      "13:         source[key] = obj[key]",
      "",
      "[Added Lines]",
      "4:   if (!isPlainObject(source)) {",
      "5:     throw new TypeError(\"Source argument must be a plain object\")",
      "6:   }",
      "9:     if (!isPlainObject(obj)) continue",
      "14:       if (!Object.prototype.hasOwnProperty.call(target, key)) continue",
      "17:       if (key === \"__proto__\" || key === \"constructor\" || key === \"prototype\") continue",
      "19:       const sourceVal = source[key]",
      "20:       const targetVal = obj[key]",
      "22:       if (isPlainObject(targetVal)) {",
      "23:         source[key] = isPlainObject(sourceVal) ? deepMerge(sourceVal, targetVal) : { ...targetVal }",
      "25:         source[key] = targetVal",
      "",
      "---------------"
    ],
    "packages/core/tests/deep-merge.test.ts||packages/core/tests/deep-merge.test.ts": [
      "File: packages/core/tests/deep-merge.test.ts -> packages/core/tests/deep-merge.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { describe, expect, test } from \"vitest\"",
      "2: import { deepMerge } from \"../src/deep-merge\"",
      "4: describe(\"deepMerge\", () => {",
      "5:   test(\"basic object merging\", () => {",
      "6:     const obj1 = { a: 1 }",
      "7:     const obj2 = { b: 2 }",
      "8:     expect(deepMerge<any>(obj1, obj2)).toEqual({ a: 1, b: 2 })",
      "9:   })",
      "11:   test(\"deep object merging\", () => {",
      "12:     const obj1 = { a: { x: 1 } }",
      "13:     const obj2 = { a: { y: 2 } }",
      "14:     expect(deepMerge<any>(obj1, obj2)).toEqual({ a: { x: 1, y: 2 } })",
      "15:   })",
      "17:   test(\"multiple objects merging\", () => {",
      "18:     const obj1 = { a: 1 }",
      "19:     const obj2 = { b: 2 }",
      "20:     const obj3 = { c: 3 }",
      "21:     expect(deepMerge<any>(obj1, obj2, obj3)).toEqual({ a: 1, b: 2, c: 3 })",
      "22:   })",
      "24:   test(\"overwriting primitives\", () => {",
      "25:     const obj1 = { a: 1 }",
      "26:     const obj2 = { a: 2 }",
      "27:     expect(deepMerge<any>(obj1, obj2)).toEqual({ a: 2 })",
      "28:   })",
      "30:   test(\"handles nested object overwriting primitive\", () => {",
      "31:     const obj1 = { a: 1 }",
      "32:     const obj2 = { a: { b: 2 } }",
      "33:     expect(deepMerge<any>(obj1, obj2)).toEqual({ a: { b: 2 } })",
      "34:   })",
      "37:   test(\"prevents prototype pollution\", () => {",
      "38:     const malicious = { __proto__: { polluted: true } }",
      "39:     const obj = {}",
      "40:     deepMerge<any>(obj, malicious)",
      "41:     expect(({} as any).polluted).toBeUndefined()",
      "42:   })",
      "44:   test(\"prevents constructor pollution\", () => {",
      "45:     const malicious = { constructor: { polluted: true } }",
      "46:     const obj = {}",
      "47:     deepMerge<any>(obj, malicious)",
      "49:     expect(Object.prototype.polluted).toBeUndefined()",
      "50:   })",
      "52:   test(\"prevents prototype key pollution\", () => {",
      "53:     const malicious = { prototype: { polluted: true } }",
      "54:     const obj = {}",
      "55:     deepMerge<any>(obj, malicious)",
      "57:     expect(Object.prototype.polluted).toBeUndefined()",
      "58:   })",
      "61:   test(\"throws on non-object source\", () => {",
      "62:     expect(() => deepMerge<any>([] as any, {})).toThrow(TypeError)",
      "63:     expect(() => deepMerge<any>(null as any, {})).toThrow(TypeError)",
      "64:     expect(() => deepMerge<any>(42 as any, {})).toThrow(TypeError)",
      "65:   })",
      "67:   test(\"skips non-object arguments\", () => {",
      "68:     expect(() => deepMerge<any>({}, [] as any)).not.toThrow()",
      "69:     expect(() => deepMerge<any>({}, null as any)).not.toThrow()",
      "70:     expect(() => deepMerge<any>({}, 42 as any)).not.toThrow()",
      "71:   })",
      "74:   test(\"handles empty objects\", () => {",
      "75:     expect(deepMerge<any>({}, {})).toEqual({})",
      "76:   })",
      "78:   test(\"preserves source object when no arguments provided\", () => {",
      "79:     const source = { a: 1 }",
      "80:     expect(deepMerge<any>(source)).toEqual({ a: 1 })",
      "81:   })",
      "83:   test(\"handles nested arrays\", () => {",
      "84:     const obj1 = { arr: [1, 2] }",
      "85:     const obj2 = { arr: [3, 4] }",
      "86:     expect(deepMerge<any>(obj1, obj2)).toEqual({ arr: [3, 4] })",
      "87:   })",
      "89:   test(\"handles null values\", () => {",
      "90:     const obj1 = { a: null }",
      "91:     const obj2 = { b: null }",
      "92:     expect(deepMerge<any>(obj1, obj2)).toEqual({ a: null, b: null })",
      "93:   })",
      "95:   test(\"handles undefined values\", () => {",
      "96:     const obj1 = { a: undefined }",
      "97:     const obj2 = { b: undefined }",
      "98:     expect(deepMerge<any>(obj1, obj2)).toEqual({ a: undefined, b: undefined })",
      "99:   })",
      "100: })",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8d4d226615490f9ce760a1dd7af87f58886ccb74",
      "candidate_info": {
        "commit_hash": "8d4d226615490f9ce760a1dd7af87f58886ccb74",
        "repo": "chakra-ui/zag",
        "commit_url": "https://github.com/chakra-ui/zag/commit/8d4d226615490f9ce760a1dd7af87f58886ccb74",
        "files": [
          ".changeset/long-cougars-juggle.md",
          "packages/core/src/deep-merge.ts",
          "packages/utilities/core/src/guard.ts"
        ],
        "message": "fix: prototype getting lost during deepmerge",
        "before_after_code_files": [
          "packages/core/src/deep-merge.ts||packages/core/src/deep-merge.ts",
          "packages/utilities/core/src/guard.ts||packages/utilities/core/src/guard.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/core/src/deep-merge.ts||packages/core/src/deep-merge.ts"
          ],
          "candidate": [
            "packages/core/src/deep-merge.ts||packages/core/src/deep-merge.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/core/src/deep-merge.ts||packages/core/src/deep-merge.ts": [
          "File: packages/core/src/deep-merge.ts -> packages/core/src/deep-merge.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: export function deepMerge<T extends Record<string, any>>(source: T, ...objects: T[]): T {",
          "4:   for (const obj of objects) {",
          "5:     const target = compact(obj)",
          "6:     for (const key in target) {",
          "8:         if (!source[key]) {",
          "9:           source[key] = {} as any",
          "10:         }",
          "",
          "[Removed Lines]",
          "1: import { compact, isObject } from \"@zag-js/utils\"",
          "7:       if (isObject(obj[key])) {",
          "",
          "[Added Lines]",
          "1: import { compact, isPlainObject } from \"@zag-js/utils\"",
          "7:       if (isPlainObject(obj[key])) {",
          "",
          "---------------"
        ],
        "packages/utilities/core/src/guard.ts||packages/utilities/core/src/guard.ts": [
          "File: packages/utilities/core/src/guard.ts -> packages/utilities/core/src/guard.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export const isDev = () => process.env.NODE_ENV !== \"production\"",
          "2: export const isArray = (v: any): v is any[] => Array.isArray(v)",
          "3: export const isBoolean = (v: any): v is boolean => v === true || v === false",
          "5: export const isNumber = (v: any): v is number => typeof v === \"number\" && !Number.isNaN(v)",
          "6: export const isString = (v: any): v is string => typeof v === \"string\"",
          "7: export const isFunction = (v: any): v is Function => typeof v === \"function\"",
          "",
          "[Removed Lines]",
          "4: export const isObject = (v: any): v is Record<string, any> => !(v == null || typeof v !== \"object\" || isArray(v))",
          "",
          "[Added Lines]",
          "4: export const isObjectLike = (v: any): v is Record<string, any> => v != null && typeof v === \"object\"",
          "5: export const isObject = (v: any): v is Record<string, any> => isObjectLike(v) && !isArray(v)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: export const hasProp = <T extends string>(obj: any, prop: T): obj is Record<T, any> =>",
          "11:   Object.prototype.hasOwnProperty.call(obj, prop)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: const baseGetTag = (v: any) => Object.prototype.toString.call(v)",
          "15: const fnToString = Function.prototype.toString",
          "16: const objectCtorString = fnToString.call(Object)",
          "18: export const isPlainObject = (v: any) => {",
          "19:   if (!isObjectLike(v) || baseGetTag(v) != \"[object Object]\") return false",
          "20:   const proto = Object.getPrototypeOf(v)",
          "21:   if (proto === null) return true",
          "22:   const Ctor = hasProp(proto, \"constructor\") && proto.constructor",
          "23:   return typeof Ctor == \"function\" && Ctor instanceof Ctor && fnToString.call(Ctor) == objectCtorString",
          "24: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}