{
  "cve_id": "CVE-2024-9340",
  "cve_desc": "A Denial of Service (DoS) vulnerability in zenml-io/zenml version 0.66.0 allows unauthenticated attackers to cause excessive resource consumption by sending malformed multipart requests with arbitrary characters appended to the end of multipart boundaries. This flaw in the multipart request boundary processing mechanism leads to an infinite loop, resulting in a complete denial of service for all users. Affected endpoints include `/api/v1/login` and `/api/v1/device_authorization`.",
  "repo": "zenml-io/zenml",
  "patch_hash": "cba152eb9ca3071c8372b0b91c02d9d3351de48d",
  "patch_info": {
    "commit_hash": "cba152eb9ca3071c8372b0b91c02d9d3351de48d",
    "repo": "zenml-io/zenml",
    "commit_url": "https://github.com/zenml-io/zenml/commit/cba152eb9ca3071c8372b0b91c02d9d3351de48d",
    "files": [
      "src/zenml/config/server_config.py",
      "src/zenml/constants.py",
      "src/zenml/zen_server/zen_server_api.py"
    ],
    "message": "Prevent too large requests (#3048)\n\n* prevent too large requests\n\n* reject file upload attempts\n\n* lint",
    "before_after_code_files": [
      "src/zenml/config/server_config.py||src/zenml/config/server_config.py",
      "src/zenml/constants.py||src/zenml/constants.py",
      "src/zenml/zen_server/zen_server_api.py||src/zenml/zen_server/zen_server_api.py"
    ]
  },
  "patch_diff": {
    "src/zenml/config/server_config.py||src/zenml/config/server_config.py": [
      "File: src/zenml/config/server_config.py -> src/zenml/config/server_config.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:     DEFAULT_ZENML_SERVER_LOGIN_RATE_LIMIT_DAY,",
      "30:     DEFAULT_ZENML_SERVER_LOGIN_RATE_LIMIT_MINUTE,",
      "31:     DEFAULT_ZENML_SERVER_MAX_DEVICE_AUTH_ATTEMPTS,",
      "32:     DEFAULT_ZENML_SERVER_NAME,",
      "33:     DEFAULT_ZENML_SERVER_PIPELINE_RUN_AUTH_WINDOW,",
      "34:     DEFAULT_ZENML_SERVER_SECURE_HEADERS_CACHE,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "32:     DEFAULT_ZENML_SERVER_MAX_REQUEST_BODY_SIZE_IN_BYTES,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "231:         auto_activate: Whether to automatically activate the server and create a",
      "232:             default admin user account with an empty password during the initial",
      "233:             deployment.",
      "234:     \"\"\"",
      "236:     deployment_type: ServerDeploymentType = ServerDeploymentType.OTHER",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "235:         max_request_body_size_in_bytes: The maximum size of the request body in",
      "236:             bytes. If not specified, the default value of 256 Kb will be used.",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "320:     thread_pool_size: int = DEFAULT_ZENML_SERVER_THREAD_POOL_SIZE",
      "322:     _deployment_id: Optional[UUID] = None",
      "324:     @model_validator(mode=\"before\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325:     max_request_body_size_in_bytes: int = (",
      "326:         DEFAULT_ZENML_SERVER_MAX_REQUEST_BODY_SIZE_IN_BYTES",
      "327:     )",
      "",
      "---------------"
    ],
    "src/zenml/constants.py||src/zenml/constants.py": [
      "File: src/zenml/constants.py -> src/zenml/constants.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "317: DEFAULT_ZENML_SERVER_SECURE_HEADERS_REPORT_TO = \"default\"",
      "318: DEFAULT_ZENML_SERVER_USE_LEGACY_DASHBOARD = False",
      "319: DEFAULT_ZENML_SERVER_REPORT_USER_ACTIVITY_TO_DB_SECONDS = 30",
      "321: # Configurations to decide which resources report their usage and check for",
      "322: # entitlement in the case of a cloud deployment. Expected Format is this:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "320: DEFAULT_ZENML_SERVER_MAX_REQUEST_BODY_SIZE_IN_BYTES = 256 * 1024 * 1024",
      "",
      "---------------"
    ],
    "src/zenml/zen_server/zen_server_api.py||src/zenml/zen_server/zen_server_api.py": [
      "File: src/zenml/zen_server/zen_server_api.py -> src/zenml/zen_server/zen_server_api.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: from asyncio.log import logger",
      "25: from datetime import datetime, timedelta, timezone",
      "26: from genericpath import isfile",
      "29: from anyio import to_thread",
      "30: from fastapi import FastAPI, HTTPException, Request",
      "",
      "[Removed Lines]",
      "27: from typing import Any, List",
      "",
      "[Added Lines]",
      "27: from typing import Any, List, Set",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "32: from fastapi.responses import ORJSONResponse",
      "33: from fastapi.staticfiles import StaticFiles",
      "34: from fastapi.templating import Jinja2Templates",
      "35: from starlette.middleware.cors import CORSMiddleware",
      "38: import zenml",
      "39: from zenml.analytics import source_context",
      "",
      "[Removed Lines]",
      "36: from starlette.responses import FileResponse",
      "",
      "[Added Lines]",
      "35: from starlette.middleware.base import (",
      "36:     BaseHTTPMiddleware,",
      "37:     RequestResponseEndpoint,",
      "38: )",
      "40: from starlette.responses import FileResponse, JSONResponse, Response",
      "41: from starlette.types import ASGIApp",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "143:     return ORJSONResponse(error_detail(exc, ValueError), status_code=422)",
      "146: app.add_middleware(",
      "147:     CORSMiddleware,",
      "148:     allow_origins=server_config().cors_allow_origins,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "151: class RequestBodyLimit(BaseHTTPMiddleware):",
      "152:     \"\"\"Limits the size of the request body.\"\"\"",
      "154:     def __init__(self, app: ASGIApp, max_bytes: int) -> None:",
      "155:         \"\"\"Limits the size of the request body.",
      "157:         Args:",
      "158:             app: The FastAPI app.",
      "159:             max_bytes: The maximum size of the request body.",
      "160:         \"\"\"",
      "161:         super().__init__(app)",
      "162:         self.max_bytes = max_bytes",
      "164:     async def dispatch(",
      "165:         self, request: Request, call_next: RequestResponseEndpoint",
      "166:     ) -> Response:",
      "167:         \"\"\"Limits the size of the request body.",
      "169:         Args:",
      "170:             request: The incoming request.",
      "171:             call_next: The next function to be called.",
      "173:         Returns:",
      "174:             The response to the request.",
      "175:         \"\"\"",
      "176:         if content_length := request.headers.get(\"content-length\"):",
      "177:             if int(content_length) > self.max_bytes:",
      "178:                 return Response(status_code=413)  # Request Entity Too Large",
      "179:         return await call_next(request)",
      "182: class RestrictFileUploadsMiddleware(BaseHTTPMiddleware):",
      "183:     \"\"\"Restrict file uploads to certain paths.\"\"\"",
      "185:     def __init__(self, app: FastAPI, allowed_paths: Set[str]):",
      "186:         \"\"\"Restrict file uploads to certain paths.",
      "188:         Args:",
      "189:             app: The FastAPI app.",
      "190:             allowed_paths: The allowed paths.",
      "191:         \"\"\"",
      "192:         super().__init__(app)",
      "193:         self.allowed_paths = allowed_paths",
      "195:     async def dispatch(",
      "196:         self, request: Request, call_next: RequestResponseEndpoint",
      "197:     ) -> Response:",
      "198:         \"\"\"Restrict file uploads to certain paths.",
      "200:         Args:",
      "201:             request: The incoming request.",
      "202:             call_next: The next function to be called.",
      "204:         Returns:",
      "205:             The response to the request.",
      "206:         \"\"\"",
      "207:         if request.method == \"POST\":",
      "208:             content_type = request.headers.get(\"content-type\", \"\")",
      "209:             if (",
      "210:                 \"multipart/form-data\" in content_type",
      "211:                 and request.url.path not in self.allowed_paths",
      "212:             ):",
      "213:                 return JSONResponse(",
      "214:                     status_code=403,",
      "215:                     content={",
      "216:                         \"detail\": \"File uploads are not allowed on this endpoint.\"",
      "217:                     },",
      "218:                 )",
      "219:         return await call_next(request)",
      "222: ALLOWED_FOR_FILE_UPLOAD: Set[str] = set()",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "151:     allow_headers=[\"*\"],",
      "152: )",
      "155: @app.middleware(\"http\")",
      "156: async def set_secure_headers(request: Request, call_next: Any) -> Any:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "232: app.add_middleware(",
      "233:     RequestBodyLimit, max_bytes=server_config().max_request_body_size_in_bytes",
      "234: )",
      "235: app.add_middleware(",
      "236:     RestrictFileUploadsMiddleware, allowed_paths=ALLOWED_FOR_FILE_UPLOAD",
      "237: )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "01308238009d5183c675abe1008ea549f47c45f8",
      "candidate_info": {
        "commit_hash": "01308238009d5183c675abe1008ea549f47c45f8",
        "repo": "zenml-io/zenml",
        "commit_url": "https://github.com/zenml-io/zenml/commit/01308238009d5183c675abe1008ea549f47c45f8",
        "files": [
          "docs/book/getting-started/deploying-zenml/README.md",
          "scripts/install-dashboard.sh",
          "src/zenml/cli/server.py",
          "src/zenml/config/server_config.py",
          "src/zenml/constants.py",
          "src/zenml/lineage_graph/__init__.py",
          "src/zenml/lineage_graph/edge.py",
          "src/zenml/lineage_graph/lineage_graph.py",
          "src/zenml/lineage_graph/node/__init__.py",
          "src/zenml/lineage_graph/node/artifact_node.py",
          "src/zenml/lineage_graph/node/base_node.py",
          "src/zenml/lineage_graph/node/step_node.py",
          "src/zenml/models/v2/misc/server_models.py",
          "src/zenml/utils/dashboard_utils.py",
          "src/zenml/zen_server/deploy/docker/docker_zen_server.py",
          "src/zenml/zen_server/deploy/local/local_zen_server.py",
          "src/zenml/zen_server/routers/runs_endpoints.py",
          "src/zenml/zen_server/zen_server_api.py",
          "src/zenml/zen_stores/base_zen_store.py",
          "src/zenml/zen_stores/sql_zen_store.py",
          "tests/integration/functional/test_lineage_graph.py"
        ],
        "message": "Remove lineage graph and legacy dashboard support (#3064)\n\n* Remove lineage graph\n\n* Remove support for legacy dashboard\n\n* Remove legacy dashboard download from script\n\n* Redirect to pro dashboard if configured\n\n* Remove legacy function arg\n\n* Fix return annotation",
        "before_after_code_files": [
          "scripts/install-dashboard.sh||scripts/install-dashboard.sh",
          "src/zenml/cli/server.py||src/zenml/cli/server.py",
          "src/zenml/config/server_config.py||src/zenml/config/server_config.py",
          "src/zenml/constants.py||src/zenml/constants.py",
          "src/zenml/lineage_graph/__init__.py||src/zenml/lineage_graph/__init__.py",
          "src/zenml/lineage_graph/edge.py||src/zenml/lineage_graph/edge.py",
          "src/zenml/lineage_graph/lineage_graph.py||src/zenml/lineage_graph/lineage_graph.py",
          "src/zenml/lineage_graph/node/__init__.py||src/zenml/lineage_graph/node/__init__.py",
          "src/zenml/lineage_graph/node/artifact_node.py||src/zenml/lineage_graph/node/artifact_node.py",
          "src/zenml/lineage_graph/node/base_node.py||src/zenml/lineage_graph/node/base_node.py",
          "src/zenml/lineage_graph/node/step_node.py||src/zenml/lineage_graph/node/step_node.py",
          "src/zenml/models/v2/misc/server_models.py||src/zenml/models/v2/misc/server_models.py",
          "src/zenml/utils/dashboard_utils.py||src/zenml/utils/dashboard_utils.py",
          "src/zenml/zen_server/deploy/docker/docker_zen_server.py||src/zenml/zen_server/deploy/docker/docker_zen_server.py",
          "src/zenml/zen_server/deploy/local/local_zen_server.py||src/zenml/zen_server/deploy/local/local_zen_server.py",
          "src/zenml/zen_server/routers/runs_endpoints.py||src/zenml/zen_server/routers/runs_endpoints.py",
          "src/zenml/zen_server/zen_server_api.py||src/zenml/zen_server/zen_server_api.py",
          "src/zenml/zen_stores/base_zen_store.py||src/zenml/zen_stores/base_zen_store.py",
          "src/zenml/zen_stores/sql_zen_store.py||src/zenml/zen_stores/sql_zen_store.py",
          "tests/integration/functional/test_lineage_graph.py||tests/integration/functional/test_lineage_graph.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/zenml/config/server_config.py||src/zenml/config/server_config.py",
            "src/zenml/constants.py||src/zenml/constants.py",
            "src/zenml/zen_server/zen_server_api.py||src/zenml/zen_server/zen_server_api.py"
          ],
          "candidate": [
            "src/zenml/config/server_config.py||src/zenml/config/server_config.py",
            "src/zenml/constants.py||src/zenml/constants.py",
            "src/zenml/zen_server/zen_server_api.py||src/zenml/zen_server/zen_server_api.py"
          ]
        }
      },
      "candidate_diff": {
        "scripts/install-dashboard.sh||scripts/install-dashboard.sh": [
          "File: scripts/install-dashboard.sh -> scripts/install-dashboard.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: : \"${INSTALL_PATH:=./src/zenml/zen_server}\"",
          "7: : \"${INSTALL_DIR:=dashboard}\"",
          "9: : \"${VERIFY_CHECKSUM:=true}\"",
          "10: # : \"${DESIRED_VERSION:=latest}\"",
          "",
          "[Removed Lines]",
          "8: : \"${LEGACY_INSTALL_DIR:=dashboard_legacy}\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: # checkGitIgnore checks if the dashboard directories are ignored by Git",
          "30: checkGitIgnore() {",
          "31:   if [ -f \".gitignore\" ]; then",
          "34:       echo \"Please remove the corresponding entries from the .gitignore file to proceed with the installation.\"",
          "35:       exit 1",
          "36:     fi",
          "",
          "[Removed Lines]",
          "32:     if grep -q -E \"(^|\\/)dashboard($|\\/)\" \".gitignore\" || grep -q -E \"(^|\\/)src\\/zenml\\/zen_server\\/dashboard($|\\/)\" \".gitignore\" || grep -q -E \"(^|\\/)dashboard-legacy($|\\/)\" \".gitignore\" || grep -q -E \"(^|\\/)src\\/zenml\\/zen_server\\/dashboard-legacy($|\\/)\" \".gitignore\"; then",
          "33:       echo \"Error: The '/dashboard', '/dashboard-legacy', 'src/zenml/zen_server/dashboard-legacy' or 'src/zenml/zen_server/dashboard' directory is ignored by Git.\"",
          "",
          "[Added Lines]",
          "31:     if grep -q -E \"(^|\\/)dashboard($|\\/)\" \".gitignore\" || grep -q -E \"(^|\\/)src\\/zenml\\/zen_server\\/dashboard($|\\/)\" \".gitignore\"; then",
          "32:       echo \"Error: The '/dashboard' or 'src/zenml/zen_server/dashboard' directory is ignored by Git.\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "167:   downloadFile \"zenml-dashboard.tar.gz\"",
          "168:   verifyFile \"zenml-dashboard.tar.gz\"",
          "169:   installFile \"$INSTALL_DIR\"",
          "174: fi",
          "175: cleanup",
          "",
          "[Removed Lines]",
          "171:   downloadFile \"zenml-dashboard-legacy.tar.gz\"",
          "172:   verifyFile \"zenml-dashboard-legacy.tar.gz\"",
          "173:   installFile \"$LEGACY_INSTALL_DIR\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/cli/server.py||src/zenml/cli/server.py": [
          "File: src/zenml/cli/server.py -> src/zenml/cli/server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:     default=None,",
          "93:     help=\"Specify an ngrok auth token to use for exposing the ZenML server.\",",
          "94: )",
          "102: def up(",
          "103:     docker: bool = False,",
          "104:     ip_address: Union[",
          "",
          "[Removed Lines]",
          "95: @click.option(",
          "96:     \"--legacy\",",
          "97:     is_flag=True,",
          "98:     help=\"Start the legacy ZenML dashboard instead of the new ZenML dashboard.\",",
          "99:     default=False,",
          "100:     type=click.BOOL,",
          "101: )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:     connect: bool = False,",
          "110:     image: Optional[str] = None,",
          "111:     ngrok_token: Optional[str] = None,",
          "113: ) -> None:",
          "114:     \"\"\"Start the ZenML dashboard locally and connect the client to it.",
          "",
          "[Removed Lines]",
          "112:     legacy: bool = False,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:         ngrok_token: An ngrok auth token to use for exposing the ZenML dashboard",
          "126:             on a public domain. Primarily used for accessing the dashboard in",
          "127:             Colab.",
          "130:     \"\"\"",
          "131:     from zenml.zen_server.deploy.deployer import ServerDeployer",
          "",
          "[Removed Lines]",
          "128:         legacy: Start the legacy ZenML dashboard instead of the new ZenML",
          "129:             dashboard.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:         ServerProviderType.DOCKER,",
          "199:     ]:",
          "200:         config_attrs[\"ip_address\"] = ip_address",
          "203:     from zenml.zen_server.deploy.deployment import ServerDeploymentConfig",
          "",
          "[Removed Lines]",
          "201:     config_attrs[\"use_legacy_dashboard\"] = legacy",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/config/server_config.py||src/zenml/config/server_config.py": [
          "File: src/zenml/config/server_config.py -> src/zenml/config/server_config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     DEFAULT_ZENML_SERVER_SECURE_HEADERS_XFO,",
          "42:     DEFAULT_ZENML_SERVER_SECURE_HEADERS_XXP,",
          "43:     DEFAULT_ZENML_SERVER_THREAD_POOL_SIZE,",
          "45:     ENV_ZENML_SERVER_PREFIX,",
          "46: )",
          "47: from zenml.enums import AuthScheme",
          "",
          "[Removed Lines]",
          "44:     DEFAULT_ZENML_SERVER_USE_LEGACY_DASHBOARD,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:             one of the reserved values `disabled`, `no`, `none`, `false`, `off`",
          "219:             or to an empty string, the `Permissions-Policy` header will not be",
          "220:             included in responses.",
          "224:         server_name: The name of the ZenML server. Used only during initial",
          "225:             deployment. Can be changed later as a part of the server settings.",
          "226:         display_announcements: Whether to display announcements about ZenML in",
          "",
          "[Removed Lines]",
          "221:         use_legacy_dashboard: Whether to use the legacy dashboard. If set to",
          "222:             `True`, the dashboard will be used with the old UI. If set to",
          "223:             `False`, the new dashboard will be used.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313:         default=DEFAULT_ZENML_SERVER_SECURE_HEADERS_PERMISSIONS,",
          "314:         union_mode=\"left_to_right\",",
          "315:     )",
          "318:     server_name: str = DEFAULT_ZENML_SERVER_NAME",
          "319:     display_announcements: bool = True",
          "",
          "[Removed Lines]",
          "316:     use_legacy_dashboard: bool = DEFAULT_ZENML_SERVER_USE_LEGACY_DASHBOARD",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/constants.py||src/zenml/constants.py": [
          "File: src/zenml/constants.py -> src/zenml/constants.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: ENV_ZENML_SERVER_REPORTABLE_RESOURCES = (",
          "182:     f\"{ENV_ZENML_SERVER_PREFIX}REPORTABLE_RESOURCES\"",
          "183: )",
          "187: ENV_ZENML_SERVER_AUTO_ACTIVATE = f\"{ENV_ZENML_SERVER_PREFIX}AUTO_ACTIVATE\"",
          "188: ENV_ZENML_RUN_SINGLE_STEPS_WITHOUT_STACK = (",
          "189:     \"ZENML_RUN_SINGLE_STEPS_WITHOUT_STACK\"",
          "",
          "[Removed Lines]",
          "184: ENV_ZENML_SERVER_USE_LEGACY_DASHBOARD = (",
          "185:     f\"{ENV_ZENML_SERVER_PREFIX}USE_LEGACY_DASHBOARD\"",
          "186: )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:     \"payment=(), sync-xhr=(), usb=()\"",
          "317: )",
          "318: DEFAULT_ZENML_SERVER_SECURE_HEADERS_REPORT_TO = \"default\"",
          "320: DEFAULT_ZENML_SERVER_REPORT_USER_ACTIVITY_TO_DB_SECONDS = 30",
          "321: DEFAULT_ZENML_SERVER_MAX_REQUEST_BODY_SIZE_IN_BYTES = 256 * 1024 * 1024",
          "",
          "[Removed Lines]",
          "319: DEFAULT_ZENML_SERVER_USE_LEGACY_DASHBOARD = False",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "354: EVENT_SOURCES = \"/event-sources\"",
          "355: FLAVORS = \"/flavors\"",
          "356: GET_OR_CREATE = \"/get-or-create\"",
          "358: HEALTH = \"/health\"",
          "359: INFO = \"/info\"",
          "360: LOGIN = \"/login\"",
          "",
          "[Removed Lines]",
          "357: GRAPH = \"/graph\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/lineage_graph/__init__.py||src/zenml/lineage_graph/__init__.py": [
          "File: src/zenml/lineage_graph/__init__.py -> src/zenml/lineage_graph/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/lineage_graph/edge.py||src/zenml/lineage_graph/edge.py": [
          "File: src/zenml/lineage_graph/edge.py -> src/zenml/lineage_graph/edge.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/lineage_graph/lineage_graph.py||src/zenml/lineage_graph/lineage_graph.py": [
          "File: src/zenml/lineage_graph/lineage_graph.py -> src/zenml/lineage_graph/lineage_graph.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/lineage_graph/node/__init__.py||src/zenml/lineage_graph/node/__init__.py": [
          "File: src/zenml/lineage_graph/node/__init__.py -> src/zenml/lineage_graph/node/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/lineage_graph/node/artifact_node.py||src/zenml/lineage_graph/node/artifact_node.py": [
          "File: src/zenml/lineage_graph/node/artifact_node.py -> src/zenml/lineage_graph/node/artifact_node.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/lineage_graph/node/base_node.py||src/zenml/lineage_graph/node/base_node.py": [
          "File: src/zenml/lineage_graph/node/base_node.py -> src/zenml/lineage_graph/node/base_node.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/lineage_graph/node/step_node.py||src/zenml/lineage_graph/node/step_node.py": [
          "File: src/zenml/lineage_graph/node/step_node.py -> src/zenml/lineage_graph/node/step_node.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/models/v2/misc/server_models.py||src/zenml/models/v2/misc/server_models.py": [
          "File: src/zenml/models/v2/misc/server_models.py -> src/zenml/models/v2/misc/server_models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:         {},",
          "100:         title=\"The metadata associated with the server.\",",
          "101:     )",
          "107:     last_user_activity: Optional[datetime] = Field(",
          "108:         None,",
          "",
          "[Removed Lines]",
          "102:     use_legacy_dashboard: bool = Field(",
          "103:         False,",
          "104:         title=\"Flag to indicate whether the server is using the legacy dashboard.\",",
          "105:     )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/utils/dashboard_utils.py||src/zenml/utils/dashboard_utils.py": [
          "File: src/zenml/utils/dashboard_utils.py -> src/zenml/utils/dashboard_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #  permissions and limitations under the License.",
          "14: \"\"\"Utility class to help with interacting with the dashboard.\"\"\"",
          "17: from uuid import UUID",
          "19: from zenml import constants",
          "",
          "[Removed Lines]",
          "16: from typing import Optional, Tuple",
          "",
          "[Added Lines]",
          "16: from typing import Optional",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     return None",
          "52:     \"\"\"Get the base url of the dashboard deployed by the server.",
          "54:     Returns:",
          "57:     \"\"\"",
          "58:     client = Client()",
          "60:     if client.zen_store.type == StoreType.REST:",
          "61:         server_info = client.zen_store.get_store_info()",
          "67:         if server_info.server_url:",
          "68:             url = server_info.server_url",
          "69:         else:",
          "70:             url = client.zen_store.url",
          "77: def get_stack_url(stack: StackResponse) -> Optional[str]:",
          "",
          "[Removed Lines]",
          "51: def get_server_dashboard_url() -> Tuple[Optional[str], bool]:",
          "55:         The server dashboard url and whether the dashboard is the legacy",
          "56:         dashboard or not.",
          "62:         if server_info.use_legacy_dashboard:",
          "63:             suffix = f\"{constants.WORKSPACES}/{client.active_workspace.name}\"",
          "64:         else:",
          "65:             suffix = \"\"",
          "72:         return url + suffix, server_info.use_legacy_dashboard",
          "74:     return None, False",
          "",
          "[Added Lines]",
          "51: def get_server_dashboard_url() -> Optional[str]:",
          "55:         The server dashboard url.",
          "67:         return url",
          "69:     return None",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:     Returns:",
          "84:         the URL to the stack if the dashboard is available, else None.",
          "85:     \"\"\"",
          "88:     if base_url:",
          "94:     return None",
          "",
          "[Removed Lines]",
          "86:     base_url, is_legacy_dashboard = get_server_dashboard_url()",
          "89:         if is_legacy_dashboard:",
          "90:             return base_url + f\"{constants.STACKS}/{stack.id}/configuration\"",
          "91:         else:",
          "92:             return base_url + constants.STACKS",
          "",
          "[Added Lines]",
          "81:     base_url = get_server_dashboard_url()",
          "84:         return base_url + constants.STACKS",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:     Returns:",
          "104:         the URL to the component if the dashboard is available, else None.",
          "105:     \"\"\"",
          "108:     if base_url:",
          "117:     return None",
          "",
          "[Removed Lines]",
          "106:     base_url, is_legacy_dashboard = get_server_dashboard_url()",
          "109:         if is_legacy_dashboard:",
          "110:             return (",
          "111:                 base_url",
          "112:                 + f\"{constants.STACK_COMPONENTS}/{component.type.value}/{component.id}/configuration\"",
          "113:             )",
          "114:         else:",
          "115:             return base_url + constants.STACKS",
          "",
          "[Added Lines]",
          "98:     base_url = get_server_dashboard_url()",
          "101:         return base_url + constants.STACKS",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:     if cloud_url:",
          "131:         return f\"{cloud_url}{constants.RUNS}/{run.id}\"",
          "134:     if dashboard_url:",
          "143:     return None",
          "",
          "[Removed Lines]",
          "133:     dashboard_url, is_legacy_dashboard = get_server_dashboard_url()",
          "135:         if is_legacy_dashboard:",
          "136:             if run.pipeline:",
          "137:                 return f\"{dashboard_url}{constants.PIPELINES}/{run.pipeline.id}{constants.RUNS}/{run.id}/dag\"",
          "138:             else:",
          "139:                 return f\"{dashboard_url}/all-runs/{run.id}/dag\"",
          "140:         else:",
          "141:             return f\"{dashboard_url}{constants.RUNS}/{run.id}\"",
          "",
          "[Added Lines]",
          "119:     dashboard_url = get_server_dashboard_url()",
          "121:         return f\"{dashboard_url}{constants.RUNS}/{run.id}\"",
          "",
          "---------------"
        ],
        "src/zenml/zen_server/deploy/docker/docker_zen_server.py||src/zenml/zen_server/deploy/docker/docker_zen_server.py": [
          "File: src/zenml/zen_server/deploy/docker/docker_zen_server.py -> src/zenml/zen_server/deploy/docker/docker_zen_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: from zenml.config.global_config import GlobalConfiguration",
          "23: from zenml.config.store_config import StoreConfiguration",
          "24: from zenml.constants import (",
          "26:     ENV_ZENML_ANALYTICS_OPT_IN,",
          "27:     ENV_ZENML_CONFIG_PATH,",
          "28:     ENV_ZENML_DISABLE_DATABASE_MIGRATION,",
          "29:     ENV_ZENML_LOCAL_STORES_PATH,",
          "30:     ENV_ZENML_SERVER_AUTO_ACTIVATE,",
          "31:     ENV_ZENML_SERVER_DEPLOYMENT_TYPE,",
          "33:     LOCAL_STORES_DIRECTORY_NAME,",
          "34:     ZEN_SERVER_ENTRYPOINT,",
          "35: )",
          "",
          "[Removed Lines]",
          "25:     DEFAULT_ZENML_SERVER_USE_LEGACY_DASHBOARD,",
          "32:     ENV_ZENML_SERVER_USE_LEGACY_DASHBOARD,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:     port: int = 8238",
          "71:     image: str = DOCKER_ZENML_SERVER_DEFAULT_IMAGE",
          "72:     store: Optional[StoreConfiguration] = None",
          "75:     model_config = ConfigDict(extra=\"forbid\")",
          "",
          "[Removed Lines]",
          "73:     use_legacy_dashboard: bool = DEFAULT_ZENML_SERVER_USE_LEGACY_DASHBOARD",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "174:             LOCAL_STORES_DIRECTORY_NAME,",
          "175:         )",
          "176:         env[ENV_ZENML_DISABLE_DATABASE_MIGRATION] = \"True\"",
          "180:         env[ENV_ZENML_SERVER_AUTO_ACTIVATE] = \"True\"",
          "182:         return cmd, env",
          "",
          "[Removed Lines]",
          "177:         env[ENV_ZENML_SERVER_USE_LEGACY_DASHBOARD] = str(",
          "178:             self.config.server.use_legacy_dashboard",
          "179:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/zen_server/deploy/local/local_zen_server.py||src/zenml/zen_server/deploy/local/local_zen_server.py": [
          "File: src/zenml/zen_server/deploy/local/local_zen_server.py -> src/zenml/zen_server/deploy/local/local_zen_server.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: from zenml.config.store_config import StoreConfiguration",
          "25: from zenml.constants import (",
          "26:     DEFAULT_LOCAL_SERVICE_IP_ADDRESS,",
          "28:     ENV_ZENML_CONFIG_PATH,",
          "29:     ENV_ZENML_DISABLE_DATABASE_MIGRATION,",
          "30:     ENV_ZENML_LOCAL_STORES_PATH,",
          "31:     ENV_ZENML_SERVER_AUTO_ACTIVATE,",
          "32:     ENV_ZENML_SERVER_DEPLOYMENT_TYPE,",
          "34:     ZEN_SERVER_ENTRYPOINT,",
          "35: )",
          "36: from zenml.enums import StoreType",
          "",
          "[Removed Lines]",
          "27:     DEFAULT_ZENML_SERVER_USE_LEGACY_DASHBOARD,",
          "33:     ENV_ZENML_SERVER_USE_LEGACY_DASHBOARD,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:     )",
          "69:     blocking: bool = False",
          "70:     store: Optional[StoreConfiguration] = None",
          "73:     model_config = ConfigDict(extra=\"forbid\")",
          "",
          "[Removed Lines]",
          "71:     use_legacy_dashboard: bool = DEFAULT_ZENML_SERVER_USE_LEGACY_DASHBOARD",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:             GlobalConfiguration().local_stores_path",
          "161:         )",
          "162:         env[ENV_ZENML_DISABLE_DATABASE_MIGRATION] = \"True\"",
          "166:         env[ENV_ZENML_SERVER_AUTO_ACTIVATE] = \"True\"",
          "168:         return cmd, env",
          "",
          "[Removed Lines]",
          "163:         env[ENV_ZENML_SERVER_USE_LEGACY_DASHBOARD] = str(",
          "164:             self.config.server.use_legacy_dashboard",
          "165:         )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/zen_server/routers/runs_endpoints.py||src/zenml/zen_server/routers/runs_endpoints.py": [
          "File: src/zenml/zen_server/routers/runs_endpoints.py -> src/zenml/zen_server/routers/runs_endpoints.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: from zenml.constants import (",
          "22:     API,",
          "24:     PIPELINE_CONFIGURATION,",
          "25:     REFRESH,",
          "26:     RUNS,",
          "",
          "[Removed Lines]",
          "23:     GRAPH,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     VERSION_1,",
          "30: )",
          "31: from zenml.enums import ExecutionStatus, StackComponentType",
          "33: from zenml.logger import get_logger",
          "34: from zenml.models import (",
          "35:     Page,",
          "",
          "[Removed Lines]",
          "32: from zenml.lineage_graph.lineage_graph import LineageGraph",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:     )",
          "235: @router.get(",
          "236:     \"/{run_id}\" + STEPS,",
          "237:     response_model=Page[StepRunResponse],",
          "",
          "[Removed Lines]",
          "209: @router.get(",
          "210:     \"/{run_id}\" + GRAPH,",
          "211:     response_model=LineageGraph,",
          "212:     responses={401: error_response, 404: error_response, 422: error_response},",
          "213: )",
          "214: @handle_exceptions",
          "215: def get_run_dag(",
          "216:     run_id: UUID,",
          "217:     _: AuthContext = Security(authorize),",
          "218: ) -> LineageGraph:",
          "219:     \"\"\"Get the DAG for a given pipeline run.",
          "221:     Args:",
          "222:         run_id: ID of the pipeline run to use to get the DAG.",
          "224:     Returns:",
          "225:         The DAG for a given pipeline run.",
          "226:     \"\"\"",
          "227:     run = verify_permissions_and_get_entity(",
          "228:         id=run_id, get_method=zen_store().get_run, hydrate=True",
          "229:     )",
          "230:     graph = LineageGraph()",
          "231:     graph.generate_run_nodes_and_edges(run)",
          "232:     return graph",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/zen_server/zen_server_api.py||src/zenml/zen_server/zen_server_api.py": [
          "File: src/zenml/zen_server/zen_server_api.py -> src/zenml/zen_server/zen_server_api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     RequestResponseEndpoint,",
          "38: )",
          "39: from starlette.middleware.cors import CORSMiddleware",
          "41: from starlette.types import ASGIApp",
          "43: import zenml",
          "",
          "[Removed Lines]",
          "40: from starlette.responses import FileResponse, JSONResponse, Response",
          "",
          "[Added Lines]",
          "40: from starlette.responses import (",
          "41:     FileResponse,",
          "42:     JSONResponse,",
          "43:     RedirectResponse,",
          "44:     Response,",
          "45: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     HEALTH,",
          "49: )",
          "50: from zenml.enums import AuthScheme, SourceContextTypes",
          "51: from zenml.zen_server.exceptions import error_detail",
          "52: from zenml.zen_server.routers import (",
          "53:     actions_endpoints,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: from zenml.models import ServerDeploymentType",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:     zen_store,",
          "99: )",
          "107: def relative_path(rel: str) -> str:",
          "",
          "[Removed Lines]",
          "101: if server_config().use_legacy_dashboard:",
          "102:     DASHBOARD_DIRECTORY = \"dashboard_legacy\"",
          "103: else:",
          "104:     DASHBOARD_DIRECTORY = \"dashboard\"",
          "",
          "[Added Lines]",
          "107: DASHBOARD_DIRECTORY = \"dashboard\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "346:     initialize_secure_headers()",
          "360:     app.mount(",
          "361:         \"/assets\",",
          "362:         StaticFiles(",
          "",
          "[Removed Lines]",
          "349: if server_config().use_legacy_dashboard:",
          "350:     app.mount(",
          "351:         \"/static\",",
          "352:         StaticFiles(",
          "353:             directory=relative_path(",
          "354:                 os.path.join(DASHBOARD_DIRECTORY, \"static\")",
          "355:             ),",
          "356:             check_dir=False,",
          "357:         ),",
          "358:     )",
          "359: else:",
          "",
          "[Added Lines]",
          "352: DASHBOARD_REDIRECT_URL = None",
          "353: if (",
          "354:     server_config().dashboard_url",
          "355:     and server_config().deployment_type == ServerDeploymentType.CLOUD",
          "356: ):",
          "357:     DASHBOARD_REDIRECT_URL = server_config().dashboard_url",
          "359: if not DASHBOARD_REDIRECT_URL:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "396:     Raises:",
          "397:         HTTPException: If the dashboard files are not included.",
          "398:     \"\"\"",
          "399:     if not os.path.isfile(",
          "400:         os.path.join(relative_path(DASHBOARD_DIRECTORY), \"index.html\")",
          "401:     ):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:     if DASHBOARD_REDIRECT_URL:",
          "400:         return RedirectResponse(url=DASHBOARD_REDIRECT_URL)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "504:     Returns:",
          "505:         The ZenML dashboard.",
          "506:     \"\"\"",
          "507:     # some static files need to be served directly from the root dashboard",
          "508:     # directory",
          "509:     if file_path and file_path in root_static_files:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:     if DASHBOARD_REDIRECT_URL:",
          "511:         return RedirectResponse(url=DASHBOARD_REDIRECT_URL)",
          "",
          "---------------"
        ],
        "src/zenml/zen_stores/base_zen_store.py||src/zenml/zen_stores/base_zen_store.py": [
          "File: src/zenml/zen_stores/base_zen_store.py -> src/zenml/zen_stores/base_zen_store.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "426:         secrets_store_type = SecretsStoreType.NONE",
          "427:         if isinstance(self, SqlZenStore) and self.config.secrets_store:",
          "428:             secrets_store_type = self.config.secrets_store.type",
          "430:         return ServerModel(",
          "431:             id=GlobalConfiguration().user_id,",
          "432:             active=True,",
          "",
          "[Removed Lines]",
          "429:         use_legacy_dashboard = server_config.use_legacy_dashboard",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "440:             dashboard_url=server_config.dashboard_url or \"\",",
          "441:             analytics_enabled=GlobalConfiguration().analytics_opt_in,",
          "442:             metadata=metadata,",
          "444:         )",
          "446:     def is_local_store(self) -> bool:",
          "",
          "[Removed Lines]",
          "443:             use_legacy_dashboard=use_legacy_dashboard,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/zenml/zen_stores/sql_zen_store.py||src/zenml/zen_stores/sql_zen_store.py": [
          "File: src/zenml/zen_stores/sql_zen_store.py -> src/zenml/zen_stores/sql_zen_store.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9205:                 # Running inside server with external auth",
          "9206:                 return False",
          "9209:                 return True",
          "9211:         else:",
          "",
          "[Removed Lines]",
          "9208:             if config.auto_activate or config.use_legacy_dashboard:",
          "",
          "[Added Lines]",
          "9208:             if config.auto_activate:",
          "",
          "---------------"
        ],
        "tests/integration/functional/test_lineage_graph.py||tests/integration/functional/test_lineage_graph.py": [
          "File: tests/integration/functional/test_lineage_graph.py -> tests/integration/functional/test_lineage_graph.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c58f97d1d380230b226754036d9cdc238a00d9e8",
      "candidate_info": {
        "commit_hash": "c58f97d1d380230b226754036d9cdc238a00d9e8",
        "repo": "zenml-io/zenml",
        "commit_url": "https://github.com/zenml-io/zenml/commit/c58f97d1d380230b226754036d9cdc238a00d9e8",
        "files": [
          "src/zenml/constants.py",
          "src/zenml/integrations/kubernetes/orchestrators/kube_utils.py",
          "src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator.py",
          "src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator_entrypoint.py",
          "src/zenml/integrations/kubernetes/orchestrators/manifest_utils.py",
          "src/zenml/integrations/kubernetes/service_connectors/kubernetes_service_connector.py",
          "src/zenml/models/__init__.py",
          "src/zenml/models/v2/core/service_connector.py",
          "src/zenml/models/v2/misc/server_models.py",
          "src/zenml/zen_server/deploy/helm/templates/_environment.tpl",
          "src/zenml/zen_server/deploy/helm/templates/server-db-job.yaml",
          "src/zenml/zen_server/deploy/helm/templates/server-deployment.yaml",
          "src/zenml/zen_server/deploy/helm/templates/server-secret.yaml",
          "src/zenml/zen_server/routers/server_endpoints.py",
          "src/zenml/zen_server/zen_server_api.py",
          "src/zenml/zen_stores/migrations/utils.py",
          "src/zenml/zen_stores/rest_zen_store.py"
        ],
        "message": "Various fixes and improvements (#3211)\n\n* Various fixes and improvements\n\n* Improve availability during rolling upgrades and client robustness\n\n* Fix linter\n\n* Move helm chart changes to separate commit\n\n* Helm chart improvements for robustness and high availability\n\n* Apply code review suggestions\n\n* Refined total connections",
        "before_after_code_files": [
          "src/zenml/constants.py||src/zenml/constants.py",
          "src/zenml/integrations/kubernetes/orchestrators/kube_utils.py||src/zenml/integrations/kubernetes/orchestrators/kube_utils.py",
          "src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator.py||src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator.py",
          "src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator_entrypoint.py||src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator_entrypoint.py",
          "src/zenml/integrations/kubernetes/orchestrators/manifest_utils.py||src/zenml/integrations/kubernetes/orchestrators/manifest_utils.py",
          "src/zenml/integrations/kubernetes/service_connectors/kubernetes_service_connector.py||src/zenml/integrations/kubernetes/service_connectors/kubernetes_service_connector.py",
          "src/zenml/models/__init__.py||src/zenml/models/__init__.py",
          "src/zenml/models/v2/core/service_connector.py||src/zenml/models/v2/core/service_connector.py",
          "src/zenml/models/v2/misc/server_models.py||src/zenml/models/v2/misc/server_models.py",
          "src/zenml/zen_server/deploy/helm/templates/_environment.tpl||src/zenml/zen_server/deploy/helm/templates/_environment.tpl",
          "src/zenml/zen_server/routers/server_endpoints.py||src/zenml/zen_server/routers/server_endpoints.py",
          "src/zenml/zen_server/zen_server_api.py||src/zenml/zen_server/zen_server_api.py",
          "src/zenml/zen_stores/migrations/utils.py||src/zenml/zen_stores/migrations/utils.py",
          "src/zenml/zen_stores/rest_zen_store.py||src/zenml/zen_stores/rest_zen_store.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/zenml/constants.py||src/zenml/constants.py",
            "src/zenml/zen_server/zen_server_api.py||src/zenml/zen_server/zen_server_api.py"
          ],
          "candidate": [
            "src/zenml/constants.py||src/zenml/constants.py",
            "src/zenml/zen_server/zen_server_api.py||src/zenml/zen_server/zen_server_api.py"
          ]
        }
      },
      "candidate_diff": {
        "src/zenml/constants.py||src/zenml/constants.py": [
          "File: src/zenml/constants.py -> src/zenml/constants.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "353: GET_OR_CREATE = \"/get-or-create\"",
          "354: HEALTH = \"/health\"",
          "355: INFO = \"/info\"",
          "356: LOGIN = \"/login\"",
          "357: LOGOUT = \"/logout\"",
          "358: LOGS = \"/logs\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "356: LOAD_INFO = \"/load-info\"",
          "",
          "---------------"
        ],
        "src/zenml/integrations/kubernetes/orchestrators/kube_utils.py||src/zenml/integrations/kubernetes/orchestrators/kube_utils.py": [
          "File: src/zenml/integrations/kubernetes/orchestrators/kube_utils.py -> src/zenml/integrations/kubernetes/orchestrators/kube_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: from kubernetes.client.rest import ApiException",
          "44: from zenml.integrations.kubernetes.orchestrators.manifest_utils import (",
          "46:     build_namespace_manifest,",
          "47:     build_service_account_manifest,",
          "48: )",
          "49: from zenml.logger import get_logger",
          "",
          "[Removed Lines]",
          "45:     build_cluster_role_binding_manifest_for_service_account,",
          "",
          "[Added Lines]",
          "46:     build_role_binding_manifest_for_service_account,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "288:     rbac_api: k8s_client.RbacAuthorizationV1Api,",
          "289:     service_account_name: str,",
          "290:     namespace: str,",
          "292: ) -> None:",
          "293:     \"\"\"Create a new Kubernetes service account with \"edit\" rights.",
          "",
          "[Removed Lines]",
          "291:     cluster_role_binding_name: str = \"zenml-edit\",",
          "",
          "[Added Lines]",
          "291:     role_binding_name: str = \"zenml-edit\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:         rbac_api: Client of Rbac Authorization V1 API of Kubernetes API.",
          "298:         service_account_name: Name of the service account.",
          "299:         namespace: Kubernetes namespace. Defaults to \"default\".",
          "302:     \"\"\"",
          "305:         role_name=\"edit\",",
          "306:         service_account_name=service_account_name,",
          "307:         namespace=namespace,",
          "308:     )",
          "311:     sa_manifest = build_service_account_manifest(",
          "312:         name=service_account_name, namespace=namespace",
          "",
          "[Removed Lines]",
          "300:         cluster_role_binding_name: Name of the cluster role binding.",
          "301:             Defaults to \"zenml-edit\".",
          "303:     crb_manifest = build_cluster_role_binding_manifest_for_service_account(",
          "304:         name=cluster_role_binding_name,",
          "309:     _if_not_exists(rbac_api.create_cluster_role_binding)(body=crb_manifest)",
          "",
          "[Added Lines]",
          "300:         role_binding_name: Name of the role binding. Defaults to \"zenml-edit\".",
          "302:     rb_manifest = build_role_binding_manifest_for_service_account(",
          "303:         name=role_binding_name,",
          "308:     _if_not_exists(rbac_api.create_namespaced_role_binding)(",
          "309:         namespace=namespace, body=rb_manifest",
          "310:     )",
          "",
          "---------------"
        ],
        "src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator.py||src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator.py": [
          "File: src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator.py -> src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     build_cron_job_manifest,",
          "60:     build_pod_manifest,",
          "61: )",
          "62: from zenml.logger import get_logger",
          "63: from zenml.orchestrators import ContainerizedOrchestrator",
          "64: from zenml.orchestrators.utils import get_orchestrator_run_name",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: from zenml.integrations.kubernetes.pod_settings import KubernetesPodSettings",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:             custom_validation_function=_validate_local_requirements,",
          "329:         )",
          "331:     def prepare_or_run_pipeline(",
          "332:         self,",
          "333:         deployment: \"PipelineDeploymentResponse\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:     @classmethod",
          "333:     def apply_default_resource_requests(",
          "334:         cls,",
          "335:         memory: str,",
          "336:         cpu: Optional[str] = None,",
          "337:         pod_settings: Optional[KubernetesPodSettings] = None,",
          "338:     ) -> KubernetesPodSettings:",
          "339:         \"\"\"Applies default resource requests to a pod settings object.",
          "341:         Args:",
          "342:             memory: The memory resource request.",
          "343:             cpu: The CPU resource request.",
          "344:             pod_settings: The pod settings to update. A new one will be created",
          "345:                 if not provided.",
          "347:         Returns:",
          "348:             The new or updated pod settings.",
          "349:         \"\"\"",
          "350:         resources = {",
          "351:             \"requests\": {\"memory\": memory},",
          "352:         }",
          "353:         if cpu:",
          "354:             resources[\"requests\"][\"cpu\"] = cpu",
          "355:         if not pod_settings:",
          "356:             pod_settings = KubernetesPodSettings(resources=resources)",
          "357:         elif not pod_settings.resources:",
          "358:             # We can't update the pod settings in place (because it's a frozen",
          "359:             # pydantic model), so we have to create a new one.",
          "360:             pod_settings = KubernetesPodSettings(",
          "362:                 resources=resources,",
          "363:             )",
          "364:         else:",
          "365:             set_requests = pod_settings.resources.get(\"requests\", {})",
          "366:             resources[\"requests\"].update(set_requests)",
          "367:             pod_settings.resources[\"requests\"] = resources[\"requests\"]",
          "369:         return pod_settings",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:             )",
          "423:             return",
          "425:         # Create and run the orchestrator pod.",
          "426:         pod_manifest = build_pod_manifest(",
          "427:             run_name=orchestrator_run_name,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465:         # We set some default minimum resource requests for the orchestrator pod",
          "466:         # here if the user has not specified any, because the orchestrator pod",
          "467:         # takes up some memory resources itself and, if not specified, the pod",
          "468:         # will be scheduled on any node regardless of available memory and risk",
          "469:         # negatively impacting or even crashing the node due to memory pressure.",
          "470:         orchestrator_pod_settings = self.apply_default_resource_requests(",
          "471:             memory=\"400Mi\",",
          "472:             cpu=\"100m\",",
          "473:             pod_settings=settings.orchestrator_pod_settings,",
          "474:         )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "431:             command=command,",
          "432:             args=args,",
          "433:             privileged=False,",
          "435:             service_account_name=service_account_name,",
          "436:             env=environment,",
          "437:             mount_local_stores=self.config.is_local,",
          "",
          "[Removed Lines]",
          "434:             pod_settings=settings.orchestrator_pod_settings,",
          "",
          "[Added Lines]",
          "485:             pod_settings=orchestrator_pod_settings,",
          "",
          "---------------"
        ],
        "src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator_entrypoint.py||src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator_entrypoint.py": [
          "File: src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator_entrypoint.py -> src/zenml/integrations/kubernetes/orchestrators/kubernetes_orchestrator_entrypoint.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:         env = get_config_environment_vars()",
          "117:         env[ENV_ZENML_KUBERNETES_RUN_ID] = orchestrator_run_id",
          "119:         # Define Kubernetes pod manifest.",
          "120:         pod_manifest = build_pod_manifest(",
          "121:             pod_name=pod_name,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:         # We set some default minimum memory resource requests for the step pod",
          "120:         # here if the user has not specified any, because the step pod takes up",
          "121:         # some memory resources itself and, if not specified, the pod will be",
          "122:         # scheduled on any node regardless of available memory and risk",
          "123:         # negatively impacting or even crashing the node due to memory pressure.",
          "124:         pod_settings = KubernetesOrchestrator.apply_default_resource_requests(",
          "125:             memory=\"400Mi\",",
          "126:             pod_settings=settings.pod_settings,",
          "127:         )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:             args=step_args,",
          "127:             env=env,",
          "128:             privileged=settings.privileged,",
          "130:             service_account_name=settings.step_pod_service_account_name",
          "131:             or settings.service_account_name,",
          "132:             mount_local_stores=mount_local_stores,",
          "",
          "[Removed Lines]",
          "129:             pod_settings=settings.pod_settings,",
          "",
          "[Added Lines]",
          "139:             pod_settings=pod_settings,",
          "",
          "---------------"
        ],
        "src/zenml/integrations/kubernetes/orchestrators/manifest_utils.py||src/zenml/integrations/kubernetes/orchestrators/manifest_utils.py": [
          "File: src/zenml/integrations/kubernetes/orchestrators/manifest_utils.py -> src/zenml/integrations/kubernetes/orchestrators/manifest_utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:     return job_manifest",
          "308:     name: str,",
          "309:     role_name: str,",
          "310:     service_account_name: str,",
          "311:     namespace: str = \"default\",",
          "312: ) -> Dict[str, Any]:",
          "315:     Args:",
          "316:         name: Name of the cluster role binding.",
          "",
          "[Removed Lines]",
          "307: def build_cluster_role_binding_manifest_for_service_account(",
          "313:     \"\"\"Build a manifest for a cluster role binding of a service account.",
          "",
          "[Added Lines]",
          "307: def build_role_binding_manifest_for_service_account(",
          "313:     \"\"\"Build a manifest for a role binding of a service account.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:     \"\"\"",
          "324:     return {",
          "325:         \"apiVersion\": \"rbac.authorization.k8s.io/v1\",",
          "327:         \"metadata\": {\"name\": name},",
          "328:         \"subjects\": [",
          "329:             {",
          "",
          "[Removed Lines]",
          "326:         \"kind\": \"ClusterRoleBinding\",",
          "",
          "[Added Lines]",
          "326:         \"kind\": \"RoleBinding\",",
          "",
          "---------------"
        ],
        "src/zenml/integrations/kubernetes/service_connectors/kubernetes_service_connector.py||src/zenml/integrations/kubernetes/service_connectors/kubernetes_service_connector.py": [
          "File: src/zenml/integrations/kubernetes/service_connectors/kubernetes_service_connector.py -> src/zenml/integrations/kubernetes/service_connectors/kubernetes_service_connector.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: from kubernetes import client as k8s_client",
          "27: from kubernetes import config as k8s_config",
          "28: from pydantic import Field",
          "30: from zenml.constants import KUBERNETES_CLUSTER_RESOURCE_TYPE",
          "31: from zenml.exceptions import AuthorizationException",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: from urllib3.exceptions import HTTPError",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "572:                 auth_settings=[\"BearerToken\"],",
          "573:                 response_type=\"VersionInfo\",",
          "574:             )",
          "576:             raise AuthorizationException(",
          "577:                 f\"failed to verify Kubernetes cluster access: {err}\"",
          "578:             ) from err",
          "",
          "[Removed Lines]",
          "575:         except k8s_client.ApiException as err:",
          "",
          "[Added Lines]",
          "576:         except (k8s_client.ApiException, HTTPError) as err:",
          "",
          "---------------"
        ],
        "src/zenml/models/__init__.py||src/zenml/models/__init__.py": [
          "File: src/zenml/models/__init__.py -> src/zenml/models/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:     ServiceConnectorTypedResourcesModel,",
          "329:     ResourceTypeModel,",
          "330: )",
          "332: from zenml.models.v2.core.trigger import (",
          "333:     TriggerRequest,",
          "334:     TriggerFilter,",
          "",
          "[Removed Lines]",
          "331: from zenml.models.v2.misc.server_models import ServerDatabaseType, ServerModel",
          "",
          "[Added Lines]",
          "331: from zenml.models.v2.misc.server_models import (",
          "332:     ServerDatabaseType,",
          "333:     ServerLoadInfo,",
          "334:     ServerModel,",
          "335: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "731:     \"ExternalUserModel\",",
          "732:     \"BuildItem\",",
          "733:     \"LoadedVisualization\",",
          "734:     \"ServerModel\",",
          "735:     \"ServerDatabaseType\",",
          "736:     \"ServerDeploymentType\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:     \"ServerLoadInfo\",",
          "",
          "---------------"
        ],
        "src/zenml/models/v2/core/service_connector.py||src/zenml/models/v2/core/service_connector.py": [
          "File: src/zenml/models/v2/core/service_connector.py -> src/zenml/models/v2/core/service_connector.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "488: ):",
          "489:     \"\"\"Response model for service connectors.\"\"\"",
          "491:     name: str = Field(",
          "492:         title=\"The service connector name.\",",
          "493:         max_length=STR_FIELD_MAX_LENGTH,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "491:     # Disable the warning for updating responses, because we update the",
          "492:     # service connector type in place",
          "493:     _warn_on_response_updates: bool = False",
          "",
          "---------------"
        ],
        "src/zenml/models/v2/misc/server_models.py||src/zenml/models/v2/misc/server_models.py": [
          "File: src/zenml/models/v2/misc/server_models.py -> src/zenml/models/v2/misc/server_models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:         # Local ZenML servers are identifiable by the fact that their",
          "119:         # server ID is the same as the local client (user) ID.",
          "120:         return self.id == GlobalConfiguration().user_id",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123: class ServerLoadInfo(BaseModel):",
          "124:     \"\"\"Domain model for ZenML server load information.\"\"\"",
          "126:     threads: int = Field(",
          "127:         title=\"Number of threads that the server is currently using.\"",
          "128:     )",
          "130:     db_connections_total: int = Field(",
          "131:         title=\"Total number of database connections (active and idle) that the \"",
          "132:         \"server currently has established.\"",
          "133:     )",
          "135:     db_connections_active: int = Field(",
          "136:         title=\"Number of database connections that the server is currently \"",
          "137:         \"actively using to make queries or transactions.\"",
          "138:     )",
          "140:     db_connections_overflow: int = Field(",
          "141:         title=\"Number of overflow database connections that the server is \"",
          "142:         \"currently actively using to make queries or transactions.\"",
          "143:     )",
          "",
          "---------------"
        ],
        "src/zenml/zen_server/deploy/helm/templates/_environment.tpl||src/zenml/zen_server/deploy/helm/templates/_environment.tpl": [
          "File: src/zenml/zen_server/deploy/helm/templates/_environment.tpl -> src/zenml/zen_server/deploy/helm/templates/_environment.tpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: {{/*",
          "7: ZenML server configuration options (non-secret values).",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: {{/*",
          "7: ZenML store configuration options (non-secret values).",
          "9: This template constructs a dictionary that is similar to the python values that",
          "10: can be configured in the zenml.zen_store.sql_zen_store.SqlZenStoreConfiguration",
          "11: class. Only non-secret values are included in this dictionary.",
          "13: The dictionary is then converted into deployment environment variables by other",
          "14: templates and inserted where it is needed.",
          "16: The input is taken from a .ZenML dict that is passed to the template and",
          "17: contains the values configured in the values.yaml file for the ZenML server.",
          "19: Args:",
          "20:   .ZenML: A dictionary with the ZenML configuration values configured for the",
          "21:   ZenML server.",
          "22: Returns:",
          "23:   A dictionary with the non-secret values configured for the ZenML store.",
          "25: {{- define \"zenml.storeConfigurationAttrs\" -}}",
          "26: {{- if .ZenML.database.url }}",
          "27: type: sql",
          "28: ssl_verify_server_cert: {{ .ZenML.database.sslVerifyServerCert | default \"false\" | quote }}",
          "29: {{- if .ZenML.database.backupStrategy }}",
          "30: backup_strategy: {{ .ZenML.database.backupStrategy | quote }}",
          "31: {{- if eq .ZenML.database.backupStrategy \"database\" }}",
          "32: backup_database: {{ .ZenML.database.backupDatabase | quote }}",
          "33: {{- else if eq .ZenML.database.backupStrategy \"dump-file\" }}",
          "34: backup_directory: \"/backups\"",
          "35: {{- end }}",
          "36: {{- end }}",
          "37: {{- if .ZenML.database.poolSize }}",
          "38: pool_size: {{ .ZenML.database.poolSize | quote }}",
          "39: {{- end }}",
          "40: {{- if .ZenML.database.maxOverflow }}",
          "41: max_overflow: {{ .ZenML.database.maxOverflow | quote }}",
          "42: {{- end }}",
          "43: {{- end }}",
          "44: {{- end }}",
          "47: {{/*",
          "48: ZenML store configuration options (secret values).",
          "50: This template constructs a dictionary that is similar to the python values that",
          "51: can be configured in the zenml.zen_store.sql_zen_store.SqlZenStoreConfiguration",
          "52: class. Only secret values are included in this dictionary.",
          "54: The dictionary is then converted into deployment environment variables by other",
          "55: templates and inserted where it is needed.",
          "57: The input is taken from a .ZenML dict that is passed to the template and",
          "58: contains the values configured in the values.yaml file for the ZenML server.",
          "60: Args:",
          "61:   .ZenML: A dictionary with the ZenML configuration values configured for the",
          "62:   ZenML server.",
          "63: Returns:",
          "64:   A dictionary with the secret values configured for the ZenML store.",
          "66: {{- define \"zenml.storeSecretConfigurationAttrs\" -}}",
          "67: {{- if .ZenML.database.url }}",
          "68: url: {{ .ZenML.database.url | quote }}",
          "69: {{- if .ZenML.database.sslCa }}",
          "70: ssl_ca: {{ .Files.Get .ZenML.database.sslCa }}",
          "71: {{- end }}",
          "72: {{- if .ZenML.database.sslCert }}",
          "73: ssl_cert: {{ .Files.Get .ZenML.database.sslCert }}",
          "74: {{- end }}",
          "75: {{- if .ZenML.database.sslKey }}",
          "76: ssl_key: {{ .Files.Get .ZenML.database.sslKey }}",
          "77: {{- end }}",
          "78: {{- end }}",
          "79: {{- end }}",
          "82: {{/*",
          "83: Store configuration environment variables (non-secret values).",
          "85: Passes the .Values.zenml dict as input to the `zenml.storeConfigurationAttrs`",
          "86: template and converts the output into a dictionary of environment variables that",
          "87: need to be configured for the store.",
          "89: Args:",
          "90:   .Values: The values.yaml file for the ZenML deployment.",
          "91: Returns:",
          "92:   A dictionary with the non-secret environment variables that are configured for",
          "93:   the store (i.e. keys starting with `ZENML_STORE_`).",
          "95: {{- define \"zenml.storeEnvVariables\" -}}",
          "96: {{ $zenml := dict \"ZenML\" .Values.zenml }}",
          "97: {{- range $k, $v := include \"zenml.storeConfigurationAttrs\" $zenml | fromYaml }}",
          "98: ZENML_STORE_{{ $k | upper }}: {{ $v | quote }}",
          "99: {{- end }}",
          "100: {{- end }}",
          "103: {{/*",
          "104: Store configuration environment variables (secret values).",
          "106: Passes the .Values.zenml dict as input to the `zenml.storeSecretConfigurationAttrs`",
          "107: template and converts the output into a dictionary of environment variables that",
          "108: need to be configured for the store.",
          "110: Args:",
          "111:   .Values: The values.yaml file for the ZenML deployment.",
          "112: Returns:",
          "113:   A dictionary with the secret environment variables that are configured for",
          "114:   the store (i.e. keys starting with `ZENML_STORE_`).",
          "116: {{- define \"zenml.storeSecretEnvVariables\" -}}",
          "117: {{ $zenml := dict \"ZenML\" .Values.zenml }}",
          "118: {{- range $k, $v := include \"zenml.storeSecretConfigurationAttrs\" $zenml | fromYaml }}",
          "119: ZENML_STORE_{{ $k | upper }}: {{ $v | quote }}",
          "120: {{- end }}",
          "121: {{- end }}",
          "",
          "---------------"
        ],
        "src/zenml/zen_server/routers/server_endpoints.py||src/zenml/zen_server/routers/server_endpoints.py": [
          "File: src/zenml/zen_server/routers/server_endpoints.py -> src/zenml/zen_server/routers/server_endpoints.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:     ACTIVATE,",
          "23:     API,",
          "24:     INFO,",
          "25:     ONBOARDING_STATE,",
          "26:     SERVER_SETTINGS,",
          "27:     VERSION_1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:     LOAD_INFO,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: from zenml.exceptions import IllegalOperationError",
          "31: from zenml.models import (",
          "32:     ServerActivationRequest,",
          "33:     ServerModel,",
          "34:     ServerSettingsResponse,",
          "35:     ServerSettingsUpdate,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:     ServerLoadInfo,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     return zen_store().get_store_info()",
          "74: @router.get(",
          "75:     ONBOARDING_STATE,",
          "76:     responses={",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: @router.get(",
          "77:     LOAD_INFO,",
          "78:     response_model=ServerLoadInfo,",
          "79: )",
          "80: @handle_exceptions",
          "81: def server_load_info(_: AuthContext = Security(authorize)) -> ServerLoadInfo:",
          "82:     \"\"\"Get information about the server load.",
          "84:     Returns:",
          "85:         Information about the server load.",
          "86:     \"\"\"",
          "87:     import threading",
          "89:     # Get the current number of threads",
          "90:     num_threads = len(threading.enumerate())",
          "92:     store = zen_store()",
          "94:     if store.config.driver == \"sqlite\":",
          "95:         # SQLite doesn't have a connection pool",
          "96:         return ServerLoadInfo(",
          "97:             threads=num_threads,",
          "98:             db_connections_total=0,",
          "99:             db_connections_active=0,",
          "100:             db_connections_overflow=0,",
          "101:         )",
          "103:     from sqlalchemy.pool import QueuePool",
          "105:     # Get the number of connections",
          "106:     pool = store.engine.pool",
          "107:     assert isinstance(pool, QueuePool)",
          "108:     idle_conn = pool.checkedin()",
          "109:     active_conn = pool.checkedout()",
          "110:     overflow_conn = max(0, pool.overflow())",
          "111:     total_conn = idle_conn + active_conn",
          "113:     return ServerLoadInfo(",
          "114:         threads=num_threads,",
          "115:         db_connections_total=total_conn,",
          "116:         db_connections_active=active_conn,",
          "117:         db_connections_overflow=overflow_conn,",
          "118:     )",
          "",
          "---------------"
        ],
        "src/zenml/zen_server/zen_server_api.py||src/zenml/zen_server/zen_server_api.py": [
          "File: src/zenml/zen_server/zen_server_api.py -> src/zenml/zen_server/zen_server_api.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:         if content_length := request.headers.get(\"content-length\"):",
          "181:             if int(content_length) > self.max_bytes:",
          "182:                 return Response(status_code=413)  # Request Entity Too Large",
          "186: class RestrictFileUploadsMiddleware(BaseHTTPMiddleware):",
          "",
          "[Removed Lines]",
          "183:         return await call_next(request)",
          "",
          "[Added Lines]",
          "184:         try:",
          "185:             return await call_next(request)",
          "186:         except Exception:",
          "187:             logger.exception(\"An error occurred while processing the request\")",
          "188:             return JSONResponse(",
          "189:                 status_code=500,",
          "190:                 content={\"detail\": \"An unexpected error occurred.\"},",
          "191:             )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "220:                         \"detail\": \"File uploads are not allowed on this endpoint.\"",
          "221:                     },",
          "222:                 )",
          "226: ALLOWED_FOR_FILE_UPLOAD: Set[str] = set()",
          "",
          "[Removed Lines]",
          "223:         return await call_next(request)",
          "",
          "[Added Lines]",
          "232:         try:",
          "233:             return await call_next(request)",
          "234:         except Exception:",
          "235:             logger.exception(\"An error occurred while processing the request\")",
          "236:             return JSONResponse(",
          "237:                 status_code=500,",
          "238:                 content={\"detail\": \"An unexpected error occurred.\"},",
          "239:             )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "252:     Returns:",
          "253:         The response with secure headers set.",
          "254:     \"\"\"",
          "255:     # If the request is for the openAPI docs, don't set secure headers",
          "256:     if request.url.path.startswith(\"/docs\") or request.url.path.startswith(",
          "257:         \"/redoc\"",
          "258:     ):",
          "262:     secure_headers().framework.fastapi(response)",
          "263:     return response",
          "",
          "[Removed Lines]",
          "259:         return await call_next(request)",
          "261:     response = await call_next(request)",
          "",
          "[Added Lines]",
          "271:     try:",
          "272:         response = await call_next(request)",
          "273:     except Exception:",
          "274:         logger.exception(\"An error occurred while processing the request\")",
          "275:         response = JSONResponse(",
          "276:             status_code=500,",
          "277:             content={\"detail\": \"An unexpected error occurred.\"},",
          "278:         )",
          "284:         return response",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "298:         zen_store()._update_last_user_activity_timestamp(",
          "299:             last_user_activity=last_user_activity",
          "300:         )",
          "304: @app.middleware(\"http\")",
          "",
          "[Removed Lines]",
          "301:     return await call_next(request)",
          "",
          "[Added Lines]",
          "326:     try:",
          "327:         return await call_next(request)",
          "328:     except Exception:",
          "329:         logger.exception(\"An error occurred while processing the request\")",
          "330:         return JSONResponse(",
          "331:             status_code=500,",
          "332:             content={\"detail\": \"An unexpected error occurred.\"},",
          "333:         )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "330:         )",
          "331:         source_context.set(SourceContextTypes.API)",
          "336: @app.on_event(\"startup\")",
          "",
          "[Removed Lines]",
          "333:     return await call_next(request)",
          "",
          "[Added Lines]",
          "365:     try:",
          "366:         return await call_next(request)",
          "367:     except Exception:",
          "368:         logger.exception(\"An error occurred while processing the request\")",
          "369:         return JSONResponse(",
          "370:             status_code=500,",
          "371:             content={\"detail\": \"An unexpected error occurred.\"},",
          "372:         )",
          "",
          "---------------"
        ],
        "src/zenml/zen_stores/migrations/utils.py||src/zenml/zen_stores/migrations/utils.py": [
          "File: src/zenml/zen_stores/migrations/utils.py -> src/zenml/zen_stores/migrations/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:                         + \"\\n);\"",
          "274:                     )",
          "276:                 # Store the table schema",
          "277:                 store_db_info(",
          "279:                 )",
          "281:                 # 2. extract the table data in batches",
          "301:                 # Fetch the number of rows in the table",
          "302:                 row_count = conn.scalar(",
          "",
          "[Removed Lines]",
          "278:                     dict(table=table.name, create_stmt=create_table_stmt)",
          "283:                 # If the table has a `created` column, we use it to sort",
          "284:                 # the rows in the table starting with the oldest rows.",
          "285:                 # This is to ensure that the rows are inserted in the",
          "286:                 # correct order, since some tables have inner foreign key",
          "287:                 # constraints.",
          "288:                 if \"created\" in table.columns:",
          "289:                     order_by = [table.columns[\"created\"]]",
          "290:                 else:",
          "291:                     order_by = []",
          "292:                 if \"id\" in table.columns:",
          "293:                     # If the table has an `id` column, we also use it to sort",
          "294:                     # the rows in the table, even if we already use \"created\"",
          "295:                     # to sort the rows. We need a unique field to sort the rows,",
          "296:                     # to break the tie between rows with the same \"created\"",
          "297:                     # date, otherwise the same entry might end up multiple times",
          "298:                     # in subsequent pages.",
          "299:                     order_by.append(table.columns[\"id\"])",
          "",
          "[Added Lines]",
          "276:                 # Detect self-referential foreign keys from the table schema",
          "277:                 has_self_referential_foreign_keys = False",
          "278:                 for fk in table.foreign_keys:",
          "279:                     # Check if the foreign key points to the same table",
          "280:                     if fk.column.table == table:",
          "281:                         has_self_referential_foreign_keys = True",
          "282:                         break",
          "286:                     dict(",
          "287:                         table=table.name,",
          "288:                         create_stmt=create_table_stmt,",
          "289:                         self_references=has_self_referential_foreign_keys,",
          "290:                     )",
          "294:                 order_by = [col for col in table.primary_key]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:                 # Fetch the data from the table in batches",
          "307:                 if row_count is not None:",
          "309:                     for i in range(0, row_count, batch_size):",
          "310:                         rows = conn.execute(",
          "311:                             table.select()",
          "",
          "[Removed Lines]",
          "308:                     batch_size = 50",
          "",
          "[Added Lines]",
          "303:                     batch_size = 100",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "350:         with self.engine.begin() as connection:",
          "351:             # read the DB information one JSON object at a time",
          "352:             for table_dump in load_db_info():",
          "353:                 table_name = table_dump[\"table\"]",
          "354:                 if \"create_stmt\" in table_dump:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:             self_references: Dict[str, bool] = {}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "356:                     connection.execute(text(table_dump[\"create_stmt\"]))",
          "357:                     # Reload the database metadata after creating the table",
          "358:                     metadata.reflect(bind=self.engine)",
          "360:                 if \"data\" in table_dump:",
          "361:                     # insert the data into the database",
          "362:                     table = metadata.tables[table_name]",
          "363:                     for row in table_dump[\"data\"]:",
          "364:                         # Convert column values to the correct type",
          "365:                         for column in table.columns:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:                     self_references[table_name] = table_dump.get(",
          "356:                         \"self_references\", False",
          "357:                     )",
          "362:                     if self_references.get(table_name, False):",
          "363:                         # If the table has self-referential foreign keys, we",
          "364:                         # need to disable the foreign key checks before inserting",
          "365:                         # the rows and re-enable them afterwards. This is because",
          "366:                         # the rows need to be inserted in the correct order to",
          "367:                         # satisfy the foreign key constraints and we don't sort",
          "368:                         # the rows by creation time in the backup.",
          "369:                         connection.execute(text(\"SET FOREIGN_KEY_CHECKS = 0\"))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "372:                                     row[column.name], \"utf-8\"",
          "373:                                 )",
          "380:     def backup_database_to_file(self, dump_file: str) -> None:",
          "381:         \"\"\"Backup the database to a file.",
          "",
          "[Removed Lines]",
          "375:                     # Insert the rows into the table",
          "376:                     connection.execute(",
          "377:                         table.insert().values(table_dump[\"data\"])",
          "378:                     )",
          "",
          "[Added Lines]",
          "383:                     # Insert the rows into the table in batches",
          "384:                     batch_size = 100",
          "385:                     for i in range(0, len(table_dump[\"data\"]), batch_size):",
          "386:                         connection.execute(",
          "387:                             table.insert().values(",
          "388:                                 table_dump[\"data\"][i : i + batch_size]",
          "389:                             )",
          "390:                         )",
          "392:                     if table_dump.get(\"self_references\", False):",
          "393:                         # Re-enable the foreign key checks after inserting the rows",
          "394:                         connection.execute(text(\"SET FOREIGN_KEY_CHECKS = 1\"))",
          "",
          "---------------"
        ],
        "src/zenml/zen_stores/rest_zen_store.py||src/zenml/zen_stores/rest_zen_store.py": [
          "File: src/zenml/zen_stores/rest_zen_store.py -> src/zenml/zen_stores/rest_zen_store.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4172:                 )",
          "4174:             self._session = requests.Session()",
          "4176:             self._session.mount(\"https://\", HTTPAdapter(max_retries=retries))",
          "4177:             self._session.mount(\"http://\", HTTPAdapter(max_retries=retries))",
          "4178:             self._session.verify = self.config.verify_ssl",
          "",
          "[Removed Lines]",
          "4175:             retries = Retry(backoff_factor=0.1, connect=5)",
          "",
          "[Added Lines]",
          "4175:             # Retries are triggered for idempotent HTTP methods (GET, HEAD, PUT,",
          "4176:             # OPTIONS and DELETE) on specific HTTP status codes:",
          "4177:             #",
          "4178:             #     500: Internal Server Error.",
          "4179:             #     502: Bad Gateway.",
          "4180:             #     503: Service Unavailable.",
          "4181:             #     504: Gateway Timeout.",
          "4182:             #",
          "4183:             # This also handles connection level errors, if a connection attempt",
          "4184:             # fails due to transient issues like:",
          "4185:             #",
          "4186:             #     DNS resolution errors.",
          "4187:             #     Connection timeouts.",
          "4188:             #     Network disruptions.",
          "4189:             #",
          "4190:             # Additional errors retried:",
          "4191:             #",
          "4192:             #     Read Timeouts: If the server does not send a response within",
          "4193:             #     the timeout period.",
          "4194:             #     Connection Refused: If the server refuses the connection.",
          "4195:             #",
          "4196:             retries = Retry(",
          "4197:                 connect=5,",
          "4198:                 read=8,",
          "4199:                 redirect=3,",
          "4200:                 status=10,",
          "4201:                 allowed_methods=[\"HEAD\", \"GET\", \"PUT\", \"DELETE\", \"OPTIONS\"],",
          "4202:                 status_forcelist=[",
          "4203:                     408,  # Request Timeout",
          "4204:                     429,  # Too Many Requests",
          "4205:                     500,  # Internal Server Error",
          "4206:                     502,  # Bad Gateway",
          "4207:                     503,  # Service Unavailable",
          "4208:                     504,  # Gateway Timeout",
          "4209:                 ],",
          "4210:                 other=3,",
          "4211:                 backoff_factor=0.5,",
          "4212:             )",
          "",
          "---------------"
        ]
      }
    }
  ]
}