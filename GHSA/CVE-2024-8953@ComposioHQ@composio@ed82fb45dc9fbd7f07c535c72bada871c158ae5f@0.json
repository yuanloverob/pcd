{
  "cve_id": "CVE-2024-8953",
  "cve_desc": "In composiohq/composio version 0.4.3, the mathematical_calculator endpoint uses the unsafe eval() function to perform mathematical operations. This can lead to arbitrary code execution if untrusted input is passed to the eval() function.",
  "repo": "ComposioHQ/composio",
  "patch_hash": "ed82fb45dc9fbd7f07c535c72bada871c158ae5f",
  "patch_info": {
    "commit_hash": "ed82fb45dc9fbd7f07c535c72bada871c158ae5f",
    "repo": "ComposioHQ/composio",
    "commit_url": "https://github.com/ComposioHQ/composio/commit/ed82fb45dc9fbd7f07c535c72bada871c158ae5f",
    "files": [
      "python/composio/tools/local/mathematical/actions/calculator.py"
    ],
    "message": "Fix/mathematical calculator (#868)\n\n<!-- ELLIPSIS_HIDDEN -->\n\n\n> [!IMPORTANT]\n> Replaces `eval` with a safe AST-based evaluation in `Calculator` to\nprevent arbitrary code execution and improve error handling.\n> \n>   - **Security**:\n> - Replaces `eval` with AST-based evaluation in `Calculator.execute()`\nto prevent arbitrary code execution.\n>   - **Functionality**:\n> - Introduces `_safe_eval()` in `calculator.py` to evaluate AST nodes,\nsupporting `Add`, `Sub`, `Mult`, `Div`, `Pow`, `USub`, and `UAdd`\noperations.\n> - Handles `Constant`, `BinOp`, and `UnaryOp` node types in\n`_safe_eval()`.\n>   - **Error Handling**:\n> - Returns error messages in `CalculatorResponse` if evaluation fails.\n> \n> <sup>This description was created by </sup>[<img alt=\"Ellipsis\"\nsrc=\"https://img.shields.io/badge/Ellipsis-blue?color=175173\">](https://www.ellipsis.dev?ref=ComposioHQ%2Fcomposio&utm_source=github&utm_medium=referral)<sup>\nfor 7cd67b3d700b4433526e60ffa552aa6771824ac6. It will automatically\nupdate as commits are pushed.</sup>\n\n\n<!-- ELLIPSIS_HIDDEN -->\n\n---------\n\nCo-authored-by: Samvit Jatia <samvitjatia@Samvits-MacBook-Pro.local>",
    "before_after_code_files": [
      "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
    ]
  },
  "patch_diff": {
    "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py": [
      "File: python/composio/tools/local/mathematical/actions/calculator.py -> python/composio/tools/local/mathematical/actions/calculator.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: from pydantic import BaseModel, Field",
      "",
      "[Removed Lines]",
      "1: from typing import Dict",
      "",
      "[Added Lines]",
      "1: import ast",
      "2: import operator",
      "3: from typing import Any, Callable, Dict, Type, Union, cast",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "8: class CalculatorRequest(BaseModel):",
      "9:     operation: str = Field(",
      "10:         ...,",
      "12:         json_schema_extra={\"file_readable\": True},",
      "13:     )",
      "",
      "[Removed Lines]",
      "11:         description=\"A mathematical expression, a couple examples are `200*7` or `5000/2*10`\",",
      "",
      "[Added Lines]",
      "13:         description=\"A mathematical expression, examples: 200*7 or 5000/2*10\",",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "20: class Calculator(LocalAction[CalculatorRequest, CalculatorResponse]):",
      "21:     \"\"\"",
      "23:     \"\"\"",
      "25:     _tags = [\"calculator\"]",
      "27:     def execute(self, request: CalculatorRequest, metadata: Dict) -> CalculatorResponse:",
      "",
      "[Removed Lines]",
      "22:     Useful to perform any mathematical calculations, like sum, minus, multiplication, division, etc.",
      "28:         return CalculatorResponse(",
      "29:             result=str(eval(request.operation))  # pylint: disable=eval-used",
      "30:         )",
      "",
      "[Added Lines]",
      "24:     Performs mathematical calculations such as addition, subtraction, multiplication, and division.",
      "29:     # Define supported operators with more precise type hints",
      "30:     operators: Dict[",
      "31:         Type[Union[ast.operator, ast.unaryop]], Callable[..., Union[int, float]]",
      "32:     ] = {",
      "33:         ast.Add: cast(Callable[..., Union[int, float]], operator.add),",
      "34:         ast.Sub: cast(Callable[..., Union[int, float]], operator.sub),",
      "35:         ast.Mult: cast(Callable[..., Union[int, float]], operator.mul),",
      "36:         ast.Div: cast(Callable[..., Union[int, float]], operator.truediv),",
      "37:         ast.Pow: cast(Callable[..., Union[int, float]], operator.pow),",
      "38:         ast.USub: cast(Callable[..., Union[int, float]], operator.neg),",
      "39:         ast.UAdd: cast(Callable[..., Union[int, float]], operator.pos),",
      "40:     }",
      "43:         \"\"\"",
      "44:         Executes the calculator operation with proper error handling.",
      "45:         \"\"\"",
      "46:         try:",
      "47:             node = ast.parse(request.operation, mode=\"eval\").body",
      "48:             result = self._safe_eval(node)",
      "49:             return CalculatorResponse(result=str(result))",
      "50:         except SyntaxError:",
      "51:             return CalculatorResponse(result=\"Error: Invalid mathematical expression\")",
      "52:         except (TypeError, ValueError) as e:",
      "53:             return CalculatorResponse(result=f\"Error: {str(e)}\")",
      "54:         except Exception:",
      "55:             return CalculatorResponse(",
      "56:                 result=\"Error: An unexpected error occurred while calculating\"",
      "57:             )",
      "59:     def _safe_eval(self, node: ast.AST) -> Union[int, float]:",
      "60:         \"\"\"",
      "61:         Main evaluation method that dispatches to specific node handlers.",
      "62:         \"\"\"",
      "63:         handlers: Dict[Type[ast.AST], Callable[[Any], Union[int, float]]] = {",
      "64:             ast.Constant: self._eval_constant,",
      "65:             ast.BinOp: self._eval_binary_operation,",
      "66:             ast.UnaryOp: self._eval_unary_operation,",
      "67:         }",
      "69:         handler = handlers.get(type(node))",
      "70:         if handler:",
      "71:             return handler(node)",
      "72:         raise TypeError(f\"Unsupported type: {type(node).__name__}\")",
      "74:     def _eval_constant(self, node: ast.Constant) -> Union[int, float]:",
      "75:         \"\"\"",
      "76:         Evaluates constant nodes (numbers).",
      "77:         \"\"\"",
      "78:         if isinstance(node.value, (int, float)):",
      "79:             return node.value",
      "80:         raise TypeError(f\"Unsupported constant type: {type(node.value).__name__}\")",
      "82:     def _eval_binary_operation(self, node: ast.BinOp) -> Union[int, float]:",
      "83:         \"\"\"",
      "84:         Evaluates binary operations (e.g., addition, multiplication).",
      "85:         \"\"\"",
      "86:         left = self._safe_eval(node.left)",
      "87:         right = self._safe_eval(node.right)",
      "88:         op_type = type(node.op)",
      "90:         if op_type not in self.operators:",
      "91:             raise TypeError(f\"Unsupported binary operator: {op_type.__name__}\")",
      "93:         # Check for division by zero before operation",
      "94:         if op_type == ast.Div and right == 0:",
      "95:             raise ValueError(\"Division by zero is not allowed\")",
      "97:         return self.operators[op_type](left, right)",
      "99:     def _eval_unary_operation(self, node: ast.UnaryOp) -> Union[int, float]:",
      "100:         \"\"\"",
      "101:         Evaluates unary operations (e.g., negation).",
      "102:         \"\"\"",
      "103:         operand = self._safe_eval(node.operand)",
      "104:         op_type = type(node.op)",
      "106:         if op_type not in self.operators:",
      "107:             raise TypeError(f\"Unsupported unary operator: {op_type.__name__}\")",
      "109:         return self.operators[op_type](operand)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f2733d3f8f43924e13b68a3b192a62d8c153f169",
      "candidate_info": {
        "commit_hash": "f2733d3f8f43924e13b68a3b192a62d8c153f169",
        "repo": "ComposioHQ/composio",
        "commit_url": "https://github.com/ComposioHQ/composio/commit/f2733d3f8f43924e13b68a3b192a62d8c153f169",
        "files": [
          "python/composio/tools/local/mathematical/actions/calculator.py"
        ],
        "message": "Using ast instead of asteval",
        "before_after_code_files": [
          "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ComposioHQ/composio/pull/868"
        ],
        "olp_code_files": {
          "patch": [
            "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
          ],
          "candidate": [
            "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
          ]
        }
      },
      "candidate_diff": {
        "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py": [
          "File: python/composio/tools/local/mathematical/actions/calculator.py -> python/composio/tools/local/mathematical/actions/calculator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: from typing import Dict",
          "5: from pydantic import BaseModel, Field",
          "7: from composio.tools.base.local import LocalAction",
          "10: class CalculatorRequest(BaseModel):",
          "11:     operation: str = Field(",
          "12:         ...,",
          "14:         json_schema_extra={\"file_readable\": True},",
          "15:     )",
          "18: class CalculatorResponse(BaseModel):",
          "19:     result: str = Field(..., description=\"Result of the calculation\")",
          "22: class Calculator(LocalAction[CalculatorRequest, CalculatorResponse]):",
          "23:     \"\"\"",
          "25:     \"\"\"",
          "27:     _tags = [\"calculator\"]",
          "29:     def execute(self, request: CalculatorRequest, metadata: Dict) -> CalculatorResponse:",
          "30:         try:",
          "77:             return CalculatorResponse(result=str(result))",
          "79:         except Exception as e:",
          "",
          "[Removed Lines]",
          "1: import math",
          "4: from asteval import Interpreter",
          "13:         description=\"A mathematical expression, a couple examples are `200*7` or `5000/2*10`\",",
          "24:     Useful to perform any mathematical calculations, like sum, minus, multiplication, division, etc.",
          "31:             # Create safe interpreter",
          "32:             aeval = Interpreter(",
          "33:                 use_numpy=False,",
          "34:                 minimal=True,",
          "35:                 no_import=True,",
          "36:                 no_exec=True,",
          "37:                 builtins_readonly=True,",
          "38:             )",
          "40:             # Add safe mathematical functions and constants",
          "41:             safe_math = {",
          "42:                 \"abs\": abs,",
          "43:                 \"round\": round,",
          "44:                 \"pow\": pow,",
          "45:                 \"min\": min,",
          "46:                 \"max\": max,",
          "47:                 \"pi\": math.pi,",
          "48:                 \"e\": math.e,",
          "49:                 \"sqrt\": math.sqrt,",
          "50:                 \"sin\": math.sin,",
          "51:                 \"cos\": math.cos,",
          "52:                 \"tan\": math.tan,",
          "53:                 \"log\": math.log,",
          "54:                 \"log10\": math.log10,",
          "55:                 \"exp\": math.exp,",
          "56:             }",
          "58:             for name, func in safe_math.items():",
          "59:                 aeval.symtable[name] = func",
          "61:             # Validate expression",
          "62:             allowed_chars = set(\"0123456789.+-*/() abcdefghijklmnopqrstuvwxyz\u03c0\u221a^\")",
          "63:             if not all(c.lower() in allowed_chars for c in request.operation):",
          "64:                 raise ValueError(\"Invalid characters in expression\")",
          "66:             # Evaluate expression safely",
          "67:             result = aeval.eval(request.operation)",
          "69:             # Check for evaluation errors",
          "70:             if aeval.error_msg:",
          "71:                 raise ValueError(f\"Error evaluating expression: {aeval.error_msg}\")",
          "73:             # Validate result type",
          "74:             if not isinstance(result, (int, float, complex)):",
          "75:                 raise ValueError(\"Invalid result type\")",
          "80:             raise ValueError(f\"Invalid mathematical expression: {str(e)}\")",
          "",
          "[Added Lines]",
          "2: import ast",
          "3: import operator",
          "10:         description=\"A mathematical expression, examples: 200*7 or 5000/2*10\",",
          "19:     Performs mathematical calculations such as addition, subtraction, multiplication, and division.",
          "24:     # Define supported operators",
          "25:     operators = {",
          "26:         ast.Add: operator.add,",
          "27:         ast.Sub: operator.sub,",
          "28:         ast.Mult: operator.mul,",
          "29:         ast.Div: operator.truediv,",
          "30:         ast.Pow: operator.pow,",
          "31:         ast.USub: operator.neg,",
          "32:         ast.UAdd: operator.pos,",
          "33:     }",
          "37:             # Parse the expression into an AST",
          "38:             node = ast.parse(request.operation, mode='eval').body",
          "39:             result = self._safe_eval(node)",
          "42:             # Handle exceptions and return error messages",
          "43:             return CalculatorResponse(result=f\"Error: {str(e)}\")",
          "45:     def _safe_eval(self, node):",
          "46:         if isinstance(node, ast.Constant):  # <number>",
          "47:             if isinstance(node.value, (int, float)):",
          "48:                 return node.value",
          "49:             else:",
          "50:                 raise TypeError(f\"Unsupported constant type: {type(node.value).__name__}\")",
          "51:         elif isinstance(node, ast.BinOp):  # <left> <operator> <right>",
          "52:             left = self._safe_eval(node.left)",
          "53:             right = self._safe_eval(node.right)",
          "54:             op_type = type(node.op)",
          "55:             if op_type in self.operators:",
          "56:                 return self.operators[op_type](left, right)",
          "57:             else:",
          "58:                 raise TypeError(f\"Unsupported binary operator: {op_type.__name__}\")",
          "59:         elif isinstance(node, ast.UnaryOp):  # <operator> <operand> e.g., -1",
          "60:             operand = self._safe_eval(node.operand)",
          "61:             op_type = type(node.op)",
          "62:             if op_type in self.operators:",
          "63:                 return self.operators[op_type](operand)",
          "64:             else:",
          "65:                 raise TypeError(f\"Unsupported unary operator: {op_type.__name__}\")",
          "66:         else:",
          "67:             raise TypeError(f\"Unsupported type: {type(node).__name__}\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7cd67b3d700b4433526e60ffa552aa6771824ac6",
      "candidate_info": {
        "commit_hash": "7cd67b3d700b4433526e60ffa552aa6771824ac6",
        "repo": "ComposioHQ/composio",
        "commit_url": "https://github.com/ComposioHQ/composio/commit/7cd67b3d700b4433526e60ffa552aa6771824ac6",
        "files": [
          "python/composio/tools/local/mathematical/actions/calculator.py"
        ],
        "message": "linting fixes",
        "before_after_code_files": [
          "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ComposioHQ/composio/pull/868"
        ],
        "olp_code_files": {
          "patch": [
            "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
          ],
          "candidate": [
            "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
          ]
        }
      },
      "candidate_diff": {
        "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py": [
          "File: python/composio/tools/local/mathematical/actions/calculator.py -> python/composio/tools/local/mathematical/actions/calculator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import ast",
          "2: import operator",
          "5: from pydantic import BaseModel, Field",
          "6: from composio.tools.base.local import LocalAction",
          "8: class CalculatorRequest(BaseModel):",
          "9:     operation: str = Field(",
          "10:         ...,",
          "",
          "[Removed Lines]",
          "3: from typing import Dict, Union, Any",
          "",
          "[Added Lines]",
          "3: from typing import Any, Callable, Dict, Type, Union, cast",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:     _tags = [\"calculator\"]",
          "34:     }",
          "36:     def execute(self, request: CalculatorRequest, metadata: Dict) -> CalculatorResponse:",
          "",
          "[Removed Lines]",
          "25:     # Define supported operators",
          "26:     operators = {",
          "27:         ast.Add: operator.add,",
          "28:         ast.Sub: operator.sub,",
          "29:         ast.Mult: operator.mul,",
          "30:         ast.Div: operator.truediv,",
          "31:         ast.Pow: operator.pow,",
          "32:         ast.USub: operator.neg,",
          "33:         ast.UAdd: operator.pos,",
          "",
          "[Added Lines]",
          "29:     # Define supported operators with more precise type hints",
          "30:     operators: Dict[",
          "31:         Type[Union[ast.operator, ast.unaryop]], Callable[..., Union[int, float]]",
          "32:     ] = {",
          "33:         ast.Add: cast(Callable[..., Union[int, float]], operator.add),",
          "34:         ast.Sub: cast(Callable[..., Union[int, float]], operator.sub),",
          "35:         ast.Mult: cast(Callable[..., Union[int, float]], operator.mul),",
          "36:         ast.Div: cast(Callable[..., Union[int, float]], operator.truediv),",
          "37:         ast.Pow: cast(Callable[..., Union[int, float]], operator.pow),",
          "38:         ast.USub: cast(Callable[..., Union[int, float]], operator.neg),",
          "39:         ast.UAdd: cast(Callable[..., Union[int, float]], operator.pos),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:             return CalculatorResponse(result=\"Error: Invalid mathematical expression\")",
          "46:         except (TypeError, ValueError) as e:",
          "47:             return CalculatorResponse(result=f\"Error: {str(e)}\")",
          "51:     def _safe_eval(self, node: ast.AST) -> Union[int, float]:",
          "52:         \"\"\"",
          "53:         Main evaluation method that dispatches to specific node handlers.",
          "54:         \"\"\"",
          "56:             ast.Constant: self._eval_constant,",
          "57:             ast.BinOp: self._eval_binary_operation,",
          "59:         }",
          "61:         handler = handlers.get(type(node))",
          "",
          "[Removed Lines]",
          "48:         except Exception as e:",
          "49:             return CalculatorResponse(result=\"Error: An unexpected error occurred while calculating\")",
          "55:         handlers: Dict[type[ast.AST], Any] = {",
          "58:             ast.UnaryOp: self._eval_unary_operation",
          "",
          "[Added Lines]",
          "54:         except Exception:",
          "55:             return CalculatorResponse(",
          "56:                 result=\"Error: An unexpected error occurred while calculating\"",
          "57:             )",
          "63:         handlers: Dict[Type[ast.AST], Callable[[Any], Union[int, float]]] = {",
          "66:             ast.UnaryOp: self._eval_unary_operation,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "98:         if op_type not in self.operators:",
          "99:             raise TypeError(f\"Unsupported unary operator: {op_type.__name__}\")",
          "",
          "[Removed Lines]",
          "101:         return self.operators[op_type](operand)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85cdb11c1ad450947e19973e01cdbfde35aa8bed",
      "candidate_info": {
        "commit_hash": "85cdb11c1ad450947e19973e01cdbfde35aa8bed",
        "repo": "ComposioHQ/composio",
        "commit_url": "https://github.com/ComposioHQ/composio/commit/85cdb11c1ad450947e19973e01cdbfde35aa8bed",
        "files": [
          "python/composio/tools/local/mathematical/actions/calculator.py"
        ],
        "message": "Feat refactoring + comment resolution",
        "before_after_code_files": [
          "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ComposioHQ/composio/pull/868"
        ],
        "olp_code_files": {
          "patch": [
            "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
          ],
          "candidate": [
            "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
          ]
        }
      },
      "candidate_diff": {
        "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py": [
          "File: python/composio/tools/local/mathematical/actions/calculator.py -> python/composio/tools/local/mathematical/actions/calculator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import ast",
          "2: import operator",
          "5: from pydantic import BaseModel, Field",
          "7: from composio.tools.base.local import LocalAction",
          "10: class CalculatorRequest(BaseModel):",
          "11:     operation: str = Field(",
          "12:         ...,",
          "",
          "[Removed Lines]",
          "3: from typing import Dict",
          "",
          "[Added Lines]",
          "3: from typing import Dict, Union, Any",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     }",
          "40:     def execute(self, request: CalculatorRequest, metadata: Dict) -> CalculatorResponse:",
          "41:         try:",
          "43:             node = ast.parse(request.operation, mode=\"eval\").body",
          "44:             result = self._safe_eval(node)",
          "45:             return CalculatorResponse(result=str(result))",
          "48:             return CalculatorResponse(result=f\"Error: {str(e)}\")",
          "",
          "[Removed Lines]",
          "42:             # Parse the expression into an AST",
          "46:         except Exception as e:",
          "47:             # Handle exceptions and return error messages",
          "50:     def _safe_eval(self, node):",
          "51:         if isinstance(node, ast.Constant):  # <number>",
          "52:             if isinstance(node.value, (int, float)):",
          "53:                 return node.value",
          "54:             else:",
          "55:                 raise TypeError(",
          "56:                     f\"Unsupported constant type: {type(node.value).__name__}\"",
          "57:                 )",
          "58:         elif isinstance(node, ast.BinOp):  # <left> <operator> <right>",
          "59:             left = self._safe_eval(node.left)",
          "60:             right = self._safe_eval(node.right)",
          "61:             op_type = type(node.op)",
          "62:             if op_type in self.operators:",
          "63:                 return self.operators[op_type](left, right)",
          "64:             else:",
          "65:                 raise TypeError(f\"Unsupported binary operator: {op_type.__name__}\")",
          "66:         elif isinstance(node, ast.UnaryOp):  # <operator> <operand> e.g., -1",
          "67:             operand = self._safe_eval(node.operand)",
          "68:             op_type = type(node.op)",
          "69:             if op_type in self.operators:",
          "70:                 return self.operators[op_type](operand)",
          "71:             else:",
          "72:                 raise TypeError(f\"Unsupported unary operator: {op_type.__name__}\")",
          "73:         else:",
          "74:             raise TypeError(f\"Unsupported type: {type(node).__name__}\")",
          "",
          "[Added Lines]",
          "37:         \"\"\"",
          "38:         Executes the calculator operation with proper error handling.",
          "39:         \"\"\"",
          "44:         except SyntaxError:",
          "45:             return CalculatorResponse(result=\"Error: Invalid mathematical expression\")",
          "46:         except (TypeError, ValueError) as e:",
          "48:         except Exception as e:",
          "49:             return CalculatorResponse(result=\"Error: An unexpected error occurred while calculating\")",
          "51:     def _safe_eval(self, node: ast.AST) -> Union[int, float]:",
          "52:         \"\"\"",
          "53:         Main evaluation method that dispatches to specific node handlers.",
          "54:         \"\"\"",
          "55:         handlers: Dict[type[ast.AST], Any] = {",
          "56:             ast.Constant: self._eval_constant,",
          "57:             ast.BinOp: self._eval_binary_operation,",
          "58:             ast.UnaryOp: self._eval_unary_operation",
          "59:         }",
          "61:         handler = handlers.get(type(node))",
          "62:         if handler:",
          "63:             return handler(node)",
          "64:         raise TypeError(f\"Unsupported type: {type(node).__name__}\")",
          "66:     def _eval_constant(self, node: ast.Constant) -> Union[int, float]:",
          "67:         \"\"\"",
          "68:         Evaluates constant nodes (numbers).",
          "69:         \"\"\"",
          "70:         if isinstance(node.value, (int, float)):",
          "71:             return node.value",
          "72:         raise TypeError(f\"Unsupported constant type: {type(node.value).__name__}\")",
          "74:     def _eval_binary_operation(self, node: ast.BinOp) -> Union[int, float]:",
          "75:         \"\"\"",
          "76:         Evaluates binary operations (e.g., addition, multiplication).",
          "77:         \"\"\"",
          "78:         left = self._safe_eval(node.left)",
          "79:         right = self._safe_eval(node.right)",
          "80:         op_type = type(node.op)",
          "82:         if op_type not in self.operators:",
          "83:             raise TypeError(f\"Unsupported binary operator: {op_type.__name__}\")",
          "85:         # Check for division by zero before operation",
          "86:         if op_type == ast.Div and right == 0:",
          "87:             raise ValueError(\"Division by zero is not allowed\")",
          "89:         return self.operators[op_type](left, right)",
          "91:     def _eval_unary_operation(self, node: ast.UnaryOp) -> Union[int, float]:",
          "92:         \"\"\"",
          "93:         Evaluates unary operations (e.g., negation).",
          "94:         \"\"\"",
          "95:         operand = self._safe_eval(node.operand)",
          "96:         op_type = type(node.op)",
          "98:         if op_type not in self.operators:",
          "99:             raise TypeError(f\"Unsupported unary operator: {op_type.__name__}\")",
          "101:         return self.operators[op_type](operand)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "138b4bfd221adafb888b1f399397ed7f1dbbf9cf",
      "candidate_info": {
        "commit_hash": "138b4bfd221adafb888b1f399397ed7f1dbbf9cf",
        "repo": "ComposioHQ/composio",
        "commit_url": "https://github.com/ComposioHQ/composio/commit/138b4bfd221adafb888b1f399397ed7f1dbbf9cf",
        "files": [
          "python/composio/tools/local/mathematical/actions/calculator.py"
        ],
        "message": "linting fix",
        "before_after_code_files": [
          "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ComposioHQ/composio/pull/868"
        ],
        "olp_code_files": {
          "patch": [
            "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
          ],
          "candidate": [
            "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
          ]
        }
      },
      "candidate_diff": {
        "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py": [
          "File: python/composio/tools/local/mathematical/actions/calculator.py -> python/composio/tools/local/mathematical/actions/calculator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import ast",
          "3: import operator",
          "4: from pydantic import BaseModel, Field",
          "5: from composio.tools.base.local import LocalAction",
          "7: class CalculatorRequest(BaseModel):",
          "8:     operation: str = Field(",
          "9:         ...,",
          "",
          "[Removed Lines]",
          "1: from typing import Dict",
          "",
          "[Added Lines]",
          "3: from typing import Dict",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     def execute(self, request: CalculatorRequest, metadata: Dict) -> CalculatorResponse:",
          "36:         try:",
          "37:             # Parse the expression into an AST",
          "39:             result = self._safe_eval(node)",
          "40:             return CalculatorResponse(result=str(result))",
          "41:         except Exception as e:",
          "",
          "[Removed Lines]",
          "38:             node = ast.parse(request.operation, mode='eval').body",
          "",
          "[Added Lines]",
          "43:             node = ast.parse(request.operation, mode=\"eval\").body",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:             if isinstance(node.value, (int, float)):",
          "48:                 return node.value",
          "49:             else:",
          "51:         elif isinstance(node, ast.BinOp):  # <left> <operator> <right>",
          "52:             left = self._safe_eval(node.left)",
          "53:             right = self._safe_eval(node.right)",
          "",
          "[Removed Lines]",
          "50:                 raise TypeError(f\"Unsupported constant type: {type(node.value).__name__}\")",
          "",
          "[Added Lines]",
          "55:                 raise TypeError(",
          "56:                     f\"Unsupported constant type: {type(node.value).__name__}\"",
          "57:                 )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de0dabf73cc9a2d79baf117397aa409448465cc4",
      "candidate_info": {
        "commit_hash": "de0dabf73cc9a2d79baf117397aa409448465cc4",
        "repo": "ComposioHQ/composio",
        "commit_url": "https://github.com/ComposioHQ/composio/commit/de0dabf73cc9a2d79baf117397aa409448465cc4",
        "files": [
          "python/composio/tools/local/mathematical/actions/calculator.py"
        ],
        "message": "Fixing vulnerability",
        "before_after_code_files": [
          "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ComposioHQ/composio/pull/868"
        ],
        "olp_code_files": {
          "patch": [
            "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
          ],
          "candidate": [
            "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py"
          ]
        }
      },
      "candidate_diff": {
        "python/composio/tools/local/mathematical/actions/calculator.py||python/composio/tools/local/mathematical/actions/calculator.py": [
          "File: python/composio/tools/local/mathematical/actions/calculator.py -> python/composio/tools/local/mathematical/actions/calculator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from typing import Dict",
          "3: from pydantic import BaseModel, Field",
          "5: from composio.tools.base.local import LocalAction",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import math",
          "4: from asteval import Interpreter",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     _tags = [\"calculator\"]",
          "27:     def execute(self, request: CalculatorRequest, metadata: Dict) -> CalculatorResponse:",
          "",
          "[Removed Lines]",
          "28:         return CalculatorResponse(",
          "29:             result=str(eval(request.operation))  # pylint: disable=eval-used",
          "30:         )",
          "",
          "[Added Lines]",
          "30:         try:",
          "31:             # Create safe interpreter",
          "32:             aeval = Interpreter(",
          "33:                 use_numpy=False,",
          "34:                 minimal=True,",
          "35:                 no_import=True,",
          "36:                 no_exec=True,",
          "37:                 builtins_readonly=True,",
          "38:             )",
          "40:             # Add safe mathematical functions and constants",
          "41:             safe_math = {",
          "42:                 \"abs\": abs,",
          "43:                 \"round\": round,",
          "44:                 \"pow\": pow,",
          "45:                 \"min\": min,",
          "46:                 \"max\": max,",
          "47:                 \"pi\": math.pi,",
          "48:                 \"e\": math.e,",
          "49:                 \"sqrt\": math.sqrt,",
          "50:                 \"sin\": math.sin,",
          "51:                 \"cos\": math.cos,",
          "52:                 \"tan\": math.tan,",
          "53:                 \"log\": math.log,",
          "54:                 \"log10\": math.log10,",
          "55:                 \"exp\": math.exp,",
          "56:             }",
          "58:             for name, func in safe_math.items():",
          "59:                 aeval.symtable[name] = func",
          "61:             # Validate expression",
          "62:             allowed_chars = set(\"0123456789.+-*/() abcdefghijklmnopqrstuvwxyz\u03c0\u221a^\")",
          "63:             if not all(c.lower() in allowed_chars for c in request.operation):",
          "64:                 raise ValueError(\"Invalid characters in expression\")",
          "66:             # Evaluate expression safely",
          "67:             result = aeval.eval(request.operation)",
          "69:             # Check for evaluation errors",
          "70:             if aeval.error_msg:",
          "71:                 raise ValueError(f\"Error evaluating expression: {aeval.error_msg}\")",
          "73:             # Validate result type",
          "74:             if not isinstance(result, (int, float, complex)):",
          "75:                 raise ValueError(\"Invalid result type\")",
          "77:             return CalculatorResponse(result=str(result))",
          "79:         except Exception as e:",
          "80:             raise ValueError(f\"Invalid mathematical expression: {str(e)}\")",
          "",
          "---------------"
        ]
      }
    }
  ]
}