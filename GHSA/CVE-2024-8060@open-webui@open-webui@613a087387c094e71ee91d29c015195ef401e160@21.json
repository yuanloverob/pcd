{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9ff54288efac82dee58f4bdf0e012805460a8cb0",
      "candidate_info": {
        "commit_hash": "9ff54288efac82dee58f4bdf0e012805460a8cb0",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/9ff54288efac82dee58f4bdf0e012805460a8cb0",
        "files": [
          "src/lib/components/chat/MessageInput.svelte",
          "src/lib/components/chat/Settings/Interface.svelte",
          "src/lib/stores/index.ts"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte",
          "src/lib/components/chat/Settings/Interface.svelte||src/lib/components/chat/Settings/Interface.svelte",
          "src/lib/stores/index.ts||src/lib/stores/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte": [
          "File: src/lib/components/chat/MessageInput.svelte -> src/lib/components/chat/MessageInput.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "676:             bind:value={prompt}",
          "677:             id=\"chat-input\"",
          "678:             messageInput={true}",
          "680:              (!$mobile ||",
          "681:               !(",
          "682:                'ontouchstart' in window ||",
          "",
          "[Removed Lines]",
          "679:             shiftEnter={!($settings?.alternativeEnterBehavior ?? false) &&",
          "",
          "[Added Lines]",
          "679:             shiftEnter={!($settings?.ctrlEnterToSend ?? false) &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "819:                 e.preventDefault();",
          "820:                 if (prompt !== '' || files.length > 0) {",
          "821:                  dispatch('submit', prompt);",
          "",
          "[Removed Lines]",
          "813:                const submitMessage =",
          "814:                 ($settings?.alternativeEnterBehavior ?? false)",
          "815:                  ? e.keyCode === 13 && isCtrlPressed",
          "816:                  : e.keyCode === 13 && !e.shiftKey;",
          "818:                if (submitMessage) {",
          "",
          "[Added Lines]",
          "813:                const enterPressed =",
          "814:                 ($settings?.ctrlEnterToSend ?? false)",
          "815:                  ? (e.key === 'Enter' || e.keyCode === 13) && isCtrlPressed",
          "816:                  : (e.key === 'Enter' || e.keyCode === 13) && !e.shiftKey;",
          "818:                if (enterPressed) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "882:            class=\"scrollbar-hidden bg-transparent dark:text-gray-100 outline-hidden w-full pt-3 px-1 resize-none\"",
          "883:            placeholder={placeholder ? placeholder : $i18n.t('Send a Message')}",
          "884:            bind:value={prompt}",
          "909:            on:keydown={async (e) => {",
          "910:             const isCtrlPressed = e.ctrlKey || e.metaKey; // metaKey is for Cmd key on Mac",
          "911:             const commandsContainerElement =",
          "912:              document.getElementById('commands-container');",
          "914:             if (e.key === 'Escape') {",
          "915:              stopResponse();",
          "916:             }",
          "918:             if (isCtrlPressed && e.key === 'Enter' && e.shiftKey) {",
          "919:              e.preventDefault();",
          "",
          "[Removed Lines]",
          "885:            on:keypress={(e) => {",
          "886:             if (",
          "887:              !$mobile ||",
          "888:              !(",
          "889:               'ontouchstart' in window ||",
          "890:               navigator.maxTouchPoints > 0 ||",
          "891:               navigator.msMaxTouchPoints > 0",
          "892:              )",
          "893:             ) {",
          "895:              if (e.key === 'Enter' && !e.shiftKey) {",
          "896:               e.preventDefault();",
          "897:              }",
          "900:              if (",
          "901:               (prompt !== '' || files.length > 0) &&",
          "902:               e.key === 'Enter' &&",
          "903:               !e.shiftKey",
          "904:              ) {",
          "905:               dispatch('submit', prompt);",
          "906:              }",
          "907:             }",
          "908:            }}",
          "",
          "[Added Lines]",
          "888:             console.log('keydown', e);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "949:              editButton?.click();",
          "950:             }",
          "982:               commandOptionButton?.click();",
          "985:              }",
          "997:              const words = findWordIndices(prompt);",
          "999:              if (words.length > 0) {",
          "",
          "[Removed Lines]",
          "952:             if (commandsContainerElement && e.key === 'ArrowUp') {",
          "953:              e.preventDefault();",
          "954:              commandsElement.selectUp();",
          "956:              const commandOptionButton = [",
          "957:               ...document.getElementsByClassName('selected-command-option-button')",
          "958:              ]?.at(-1);",
          "959:              commandOptionButton.scrollIntoView({ block: 'center' });",
          "960:             }",
          "962:             if (commandsContainerElement && e.key === 'ArrowDown') {",
          "963:              e.preventDefault();",
          "964:              commandsElement.selectDown();",
          "966:              const commandOptionButton = [",
          "967:               ...document.getElementsByClassName('selected-command-option-button')",
          "968:              ]?.at(-1);",
          "969:              commandOptionButton.scrollIntoView({ block: 'center' });",
          "970:             }",
          "972:             if (commandsContainerElement && e.key === 'Enter') {",
          "973:              e.preventDefault();",
          "975:              const commandOptionButton = [",
          "976:               ...document.getElementsByClassName('selected-command-option-button')",
          "977:              ]?.at(-1);",
          "979:              if (e.shiftKey) {",
          "980:               prompt = `${prompt}\\n`;",
          "981:              } else if (commandOptionButton) {",
          "983:              } else {",
          "984:               document.getElementById('send-message-button')?.click();",
          "986:             }",
          "988:             if (commandsContainerElement && e.key === 'Tab') {",
          "989:              e.preventDefault();",
          "991:              const commandOptionButton = [",
          "992:               ...document.getElementsByClassName('selected-command-option-button')",
          "993:              ]?.at(-1);",
          "995:              commandOptionButton?.click();",
          "996:             } else if (e.key === 'Tab') {",
          "",
          "[Added Lines]",
          "931:             if (commandsContainerElement) {",
          "932:              if (commandsContainerElement && e.key === 'ArrowUp') {",
          "933:               e.preventDefault();",
          "934:               commandsElement.selectUp();",
          "936:               const commandOptionButton = [",
          "937:                ...document.getElementsByClassName('selected-command-option-button')",
          "938:               ]?.at(-1);",
          "939:               commandOptionButton.scrollIntoView({ block: 'center' });",
          "940:              }",
          "942:              if (commandsContainerElement && e.key === 'ArrowDown') {",
          "943:               e.preventDefault();",
          "944:               commandsElement.selectDown();",
          "946:               const commandOptionButton = [",
          "947:                ...document.getElementsByClassName('selected-command-option-button')",
          "948:               ]?.at(-1);",
          "949:               commandOptionButton.scrollIntoView({ block: 'center' });",
          "950:              }",
          "952:              if (commandsContainerElement && e.key === 'Enter') {",
          "953:               e.preventDefault();",
          "955:               const commandOptionButton = [",
          "956:                ...document.getElementsByClassName('selected-command-option-button')",
          "957:               ]?.at(-1);",
          "959:               if (e.shiftKey) {",
          "960:                prompt = `${prompt}\\n`;",
          "961:               } else if (commandOptionButton) {",
          "962:                commandOptionButton?.click();",
          "963:               } else {",
          "964:                document.getElementById('send-message-button')?.click();",
          "965:               }",
          "966:              }",
          "968:              if (commandsContainerElement && e.key === 'Tab') {",
          "969:               e.preventDefault();",
          "971:               const commandOptionButton = [",
          "972:                ...document.getElementsByClassName('selected-command-option-button')",
          "973:               ]?.at(-1);",
          "977:             } else {",
          "978:              if (",
          "979:               !$mobile ||",
          "980:               !(",
          "981:                'ontouchstart' in window ||",
          "982:                navigator.maxTouchPoints > 0 ||",
          "983:                navigator.msMaxTouchPoints > 0",
          "984:               )",
          "985:              ) {",
          "986:               console.log('keypress', e);",
          "988:               const isCtrlPressed = e.ctrlKey || e.metaKey;",
          "989:               const enterPressed =",
          "990:                ($settings?.ctrlEnterToSend ?? false)",
          "991:                 ? (e.key === 'Enter' || e.keyCode === 13) && isCtrlPressed",
          "992:                 : (e.key === 'Enter' || e.keyCode === 13) && !e.shiftKey;",
          "994:               console.log('Enter pressed:', enterPressed);",
          "996:               if (enterPressed) {",
          "997:                e.preventDefault();",
          "998:               }",
          "1001:               if ((prompt !== '' || files.length > 0) && enterPressed) {",
          "1002:                dispatch('submit', prompt);",
          "1003:               }",
          "1004:              }",
          "1005:             }",
          "1007:             if (e.key === 'Tab') {",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Settings/Interface.svelte||src/lib/components/chat/Settings/Interface.svelte": [
          "File: src/lib/components/chat/Settings/Interface.svelte -> src/lib/components/chat/Settings/Interface.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  let landingPageMode = '';",
          "38:  let chatBubble = true;",
          "39:  let chatDirection: 'LTR' | 'RTL' = 'LTR';",
          "42:  let imageCompression = false;",
          "43:  let imageCompressionSize = {",
          "",
          "[Removed Lines]",
          "40:  let alternativeEnterBehavior = false;",
          "",
          "[Added Lines]",
          "40:  let ctrlEnterToSend = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:   saveSettings({ chatDirection });",
          "195:  };",
          "200:  };",
          "202:  const updateInterfaceHandler = async () => {",
          "",
          "[Removed Lines]",
          "197:  const toggleAlternativeEnterBehavior = async () => {",
          "198:   alternativeEnterBehavior = !alternativeEnterBehavior;",
          "199:   saveSettings({ alternativeEnterBehavior });",
          "",
          "[Added Lines]",
          "197:  const togglectrlEnterToSend = async () => {",
          "198:   ctrlEnterToSend = !ctrlEnterToSend;",
          "199:   saveSettings({ ctrlEnterToSend });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:   notificationSound = $settings.notificationSound ?? true;",
          "240:   hapticFeedback = $settings.hapticFeedback ?? false;",
          "243:   imageCompression = $settings.imageCompression ?? false;",
          "244:   imageCompressionSize = $settings.imageCompressionSize ?? { width: '', height: '' };",
          "",
          "[Removed Lines]",
          "241:   alternativeEnterBehavior = $settings.alternativeEnterBehavior ?? false;",
          "",
          "[Added Lines]",
          "241:   ctrlEnterToSend = $settings.ctrlEnterToSend ?? false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "668:      <button",
          "669:       class=\"p-1 px-3 text-xs flex rounded transition\"",
          "674:       on:click={() => {",
          "676:       }}",
          "677:       type=\"button\"",
          "678:      >",
          "680:        <span class=\"ml-2 self-center\">{$i18n.t('Ctrl+Enter to Send')}</span>",
          "681:       {:else}",
          "682:        <span class=\"ml-2 self-center\">{$i18n.t('Enter to Send')}</span>",
          "",
          "[Removed Lines]",
          "670:       class:bg-gray-100={alternativeEnterBehavior}",
          "671:       class:dark:bg-gray-800={alternativeEnterBehavior}",
          "672:       class:hover:bg-gray-200={alternativeEnterBehavior}",
          "673:       class:dark:hover:bg-gray-700={alternativeEnterBehavior}",
          "675:        toggleAlternativeEnterBehavior();",
          "679:       {#if alternativeEnterBehavior === true}",
          "",
          "[Added Lines]",
          "671:        togglectrlEnterToSend();",
          "675:       {#if ctrlEnterToSend === true}",
          "",
          "---------------"
        ],
        "src/lib/stores/index.ts||src/lib/stores/index.ts": [
          "File: src/lib/stores/index.ts -> src/lib/stores/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "140:  title?: TitleSettings;",
          "141:  splitLargeDeltas?: boolean;",
          "142:  chatDirection: 'LTR' | 'RTL';",
          "145:  system?: string;",
          "146:  requestFormat?: string;",
          "",
          "[Removed Lines]",
          "143:  alternativeEnterBehavior?: boolean;",
          "",
          "[Added Lines]",
          "143:  ctrlEnterToSend?: boolean;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4747c88e05a51fbc2167a2832dbcd5a5a733f72",
      "candidate_info": {
        "commit_hash": "a4747c88e05a51fbc2167a2832dbcd5a5a733f72",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/a4747c88e05a51fbc2167a2832dbcd5a5a733f72",
        "files": [
          "backend/open_webui/utils/auth.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py": [
          "File: backend/open_webui/utils/auth.py -> backend/open_webui/utils/auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "71: def get_license_data(app, key):",
          "72:     if key:",
          "73:         try:",
          "75:             res = requests.post(",
          "77:                 json={\"key\": key, \"version\": \"1\"},",
          "78:                 timeout=5,",
          "79:             )",
          "",
          "[Removed Lines]",
          "74:             # https://api.openwebui.com",
          "76:                 \"http://localhost:5555/api/v1/license\",",
          "",
          "[Added Lines]",
          "75:                 \"https://api.openwebui.com/api/v1/license\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfdde8bb1fde581aa680ed9156fd634088b1e17b",
      "candidate_info": {
        "commit_hash": "dfdde8bb1fde581aa680ed9156fd634088b1e17b",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/dfdde8bb1fde581aa680ed9156fd634088b1e17b",
        "files": [
          "src/lib/components/common/Collapsible.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/common/Collapsible.svelte||src/lib/components/common/Collapsible.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/common/Collapsible.svelte||src/lib/components/common/Collapsible.svelte": [
          "File: src/lib/components/common/Collapsible.svelte -> src/lib/components/common/Collapsible.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: > ${formatJSONString(result)}",
          "215: > \\`\\`\\``}",
          "216:        />",
          "229:       {:else}",
          "230:        <Markdown",
          "231:         id={`tool-calls-${attributes?.id}-result`}",
          "",
          "[Removed Lines]",
          "218:        {#if typeof files === 'object'}",
          "219:         {#each files ?? [] as file, idx}",
          "220:          {#if file.startsWith('data:image/')}",
          "221:           <Image",
          "222:            id={`tool-calls-${attributes?.id}-result-${idx}`}",
          "223:            src={file}",
          "224:            alt=\"Image\"",
          "225:           />",
          "226:          {/if}",
          "227:         {/each}",
          "228:        {/if}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fdd3024f76720db8b3dd9b0ba7daccd6385a700",
      "candidate_info": {
        "commit_hash": "8fdd3024f76720db8b3dd9b0ba7daccd6385a700",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/8fdd3024f76720db8b3dd9b0ba7daccd6385a700",
        "files": [
          "backend/open_webui/utils/middleware.py",
          "backend/open_webui/utils/misc.py",
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "backend/open_webui/utils/misc.py||backend/open_webui/utils/misc.py",
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "901:         if message:",
          "902:             messages = get_message_list(message_map, message.get(\"id\"))",
          "905:                 if TASKS.TITLE_GENERATION in tasks:",
          "906:                     if tasks[TASKS.TITLE_GENERATION]:",
          "907:                         res = await generate_title(",
          "",
          "[Removed Lines]",
          "904:             if tasks:",
          "",
          "[Added Lines]",
          "904:             if tasks and messages:",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/misc.py||backend/open_webui/utils/misc.py": [
          "File: backend/open_webui/utils/misc.py -> backend/open_webui/utils/misc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     current_message = messages.get(message_id)",
          "22:     if not current_message:",
          "25:     # Reconstruct the chain by following the parentId links",
          "26:     message_list = []",
          "",
          "[Removed Lines]",
          "23:         return f\"Message ID {message_id} not found in the history.\"",
          "",
          "[Added Lines]",
          "23:         return None",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "827:   }",
          "828:  };",
          "831:   if (responseMessageId === null) {",
          "832:    return [];",
          "833:   }",
          "835:   const message = history.messages[responseMessageId];",
          "836:   if (message?.parentId) {",
          "838:   } else {",
          "839:    return [message];",
          "840:   }",
          "",
          "[Removed Lines]",
          "830:  const createMessagesList = (history, responseMessageId) => {",
          "837:    return [...createMessagesList(history, message.parentId), message];",
          "",
          "[Added Lines]",
          "830:  const createMessagesList = (responseMessageId) => {",
          "837:    return [...createMessagesList(message.parentId), message];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "896:  };",
          "898:  const chatActionHandler = async (chatId, actionId, modelId, responseMessageId, event = null) => {",
          "901:   const res = await chatAction(localStorage.token, actionId, {",
          "902:    model: modelId,",
          "",
          "[Removed Lines]",
          "899:   const messages = createMessagesList(history, responseMessageId);",
          "",
          "[Added Lines]",
          "899:   const messages = createMessagesList(responseMessageId);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "965:    const modelId = selectedModels[0];",
          "966:    const model = $models.filter((m) => m.id === modelId).at(0);",
          "969:    const parentMessage = messages.length !== 0 ? messages.at(-1) : null;",
          "971:    const userMessageId = uuidv4();",
          "",
          "[Removed Lines]",
          "968:    const messages = createMessagesList(history, history.currentId);",
          "",
          "[Added Lines]",
          "968:    const messages = createMessagesList(history.currentId);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1210:    );",
          "1212:    history.messages[message.id] = message;",
          "1219:   }",
          "1221:   console.log(data);",
          "",
          "[Removed Lines]",
          "1213:    await chatCompletedHandler(",
          "1214:     chatId,",
          "1215:     message.model,",
          "1216:     message.id,",
          "1217:     createMessagesList(history, message.id)",
          "1218:    );",
          "",
          "[Added Lines]",
          "1213:    await chatCompletedHandler(chatId, message.model, message.id, createMessagesList(message.id));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1231:  const submitPrompt = async (userPrompt, { _raw = false } = {}) => {",
          "1232:   console.log('submitPrompt', userPrompt, $chatId);",
          "1235:   const _selectedModels = selectedModels.map((modelId) =>",
          "1236:    $models.map((m) => m.id).includes(modelId) ? modelId : ''",
          "1237:   );",
          "",
          "[Removed Lines]",
          "1234:   const messages = createMessagesList(history, history.currentId);",
          "",
          "[Added Lines]",
          "1229:   const messages = createMessagesList(history.currentId);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1331:   saveSessionSelectedModels();",
          "1334:  };",
          "1336:  const sendPrompt = async (",
          "",
          "[Removed Lines]",
          "1333:   sendPrompt(userPrompt, userMessageId, { newChat: true });",
          "",
          "[Added Lines]",
          "1328:   await sendPrompt(userPrompt, userMessageId, { newChat: true });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1338:   parentId: string,",
          "1339:   { modelId = null, modelIdx = null, newChat = false } = {}",
          "1340:  ) => {",
          "1353:   if (",
          "1354:    newChat &&",
          "",
          "[Removed Lines]",
          "1342:   let selectedModelIds = modelId",
          "1343:    ? [modelId]",
          "1344:    : atSelectedModel !== undefined",
          "1345:     ? [atSelectedModel.id]",
          "1346:     : selectedModels;",
          "1349:   const responseMessageIds: Record<PropertyKey, string> = {};",
          "1351:   const _chatId = JSON.parse(JSON.stringify($chatId));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1357:   ) {",
          "1358:    await initChatHandler();",
          "1359:   } else {",
          "1361:   }",
          "1363:   for (const [_modelIdx, modelId] of selectedModelIds.entries()) {",
          "1364:    const model = $models.filter((m) => m.id === modelId).at(0);",
          "",
          "[Removed Lines]",
          "1360:    await saveChatHandler(_chatId);",
          "",
          "[Added Lines]",
          "1344:    await saveChatHandler($chatId);",
          "1348:   let selectedModelIds = modelId",
          "1349:    ? [modelId]",
          "1350:    : atSelectedModel !== undefined",
          "1351:     ? [atSelectedModel.id]",
          "1352:     : selectedModels;",
          "1355:   const responseMessageIds: Record<PropertyKey, string> = {};",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1397:   await tick();",
          "1404:   await Promise.all(",
          "1405:    selectedModelIds.map(async (modelId, _modelIdx) => {",
          "1406:     console.log('modelId', modelId);",
          "1407:     const model = $models.filter((m) => m.id === modelId).at(0);",
          "1409:     if (model) {",
          "1412:      const hasImages = messages.some((message) =>",
          "1414:      );",
          "1416:      if (hasImages && !(model.info?.meta?.capabilities?.vision ?? true)) {",
          "",
          "[Removed Lines]",
          "1400:   await saveChatHandler(_chatId);",
          "1402:   await tick();",
          "1410:      const messages = createMessagesList(history, parentId);",
          "1413:       message?.files?.some((file) => file.type === 'image')",
          "",
          "[Added Lines]",
          "1393:   await saveChatHandler($chatId);",
          "1395:   const _chatId = JSON.parse(JSON.stringify($chatId));",
          "1402:      const messages = createMessagesList(parentId);",
          "1405:       message.files?.some((file) => file.type === 'image')",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1452:      const chatEventEmitter = await getChatEventEmitter(model.id, _chatId);",
          "1454:      scrollToBottom();",
          "1457:      if (chatEventEmitter) clearInterval(chatEventEmitter);",
          "1458:     } else {",
          "",
          "[Removed Lines]",
          "1455:      await sendPromptSocket(history, model, responseMessageId, _chatId);",
          "",
          "[Added Lines]",
          "1447:      await sendPromptSocket(model, responseMessageId, _chatId);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1465:   chats.set(await getChatList(localStorage.token, $currentChatPage));",
          "1466:  };",
          "1469:   const responseMessage = history.messages[responseMessageId];",
          "1470:   const userMessage = history.messages[responseMessage.parentId];",
          "",
          "[Removed Lines]",
          "1468:  const sendPromptSocket = async (history, model, responseMessageId, _chatId) => {",
          "",
          "[Added Lines]",
          "1460:  const sendPromptSocket = async (model, responseMessageId, _chatId) => {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1515:       }`",
          "1516:      }",
          "1517:     : undefined,",
          "1519:     ...message,",
          "1520:     content: removeDetails(message.content, ['reasoning', 'code_interpreter'])",
          "1521:    }))",
          "",
          "[Removed Lines]",
          "1518:    ...createMessagesList(history, responseMessageId).map((message) => ({",
          "",
          "[Added Lines]",
          "1510:    ...createMessagesList(responseMessageId).map((message) => ({",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1750:     .at(0);",
          "1752:    if (model) {",
          "1754:    }",
          "1755:   }",
          "1756:  };",
          "",
          "[Removed Lines]",
          "1753:     await sendPromptSocket(history, model, responseMessage.id, _chatId);",
          "",
          "[Added Lines]",
          "1745:     await sendPromptSocket(model, responseMessage.id, _chatId);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1811:     system: $settings.system ?? undefined,",
          "1812:     params: params,",
          "1813:     history: history,",
          "1815:     tags: [],",
          "1816:     timestamp: Date.now()",
          "1817:    });",
          "",
          "[Removed Lines]",
          "1814:     messages: createMessagesList(history, history.currentId),",
          "",
          "[Added Lines]",
          "1806:     messages: createMessagesList(history.currentId),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1833:     chat = await updateChatById(localStorage.token, _chatId, {",
          "1834:      models: selectedModels,",
          "1835:      history: history,",
          "1837:      params: params,",
          "1838:      files: chatFiles",
          "1839:     });",
          "",
          "[Removed Lines]",
          "1836:      messages: createMessagesList(history, history.currentId),",
          "",
          "[Added Lines]",
          "1828:      messages: createMessagesList(history.currentId),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1941:     {/if}",
          "1943:     <div class=\"flex flex-col flex-auto z-10 w-full\">",
          "1945:       <div",
          "1946:        class=\" pb-2.5 flex flex-col justify-between w-full flex-auto overflow-auto h-0 max-w-full z-10 scrollbar-hidden\"",
          "1947:        id=\"messages-container\"",
          "",
          "[Removed Lines]",
          "1944:      {#if $settings?.landingPageMode === 'chat' || createMessagesList(history, history.currentId).length > 0}",
          "",
          "[Added Lines]",
          "1936:      {#if $settings?.landingPageMode === 'chat' || createMessagesList(history.currentId).length > 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "36ffa9824bb82a4703a818f178bf9ef6db1dde4c",
      "candidate_info": {
        "commit_hash": "36ffa9824bb82a4703a818f178bf9ef6db1dde4c",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/36ffa9824bb82a4703a818f178bf9ef6db1dde4c",
        "files": [
          "backend/open_webui/utils/auth.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py": [
          "File: backend/open_webui/utils/auth.py -> backend/open_webui/utils/auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:                         setattr(app.state, \"USER_COUNT\", v)",
          "88:                     elif k == \"name\":",
          "89:                         setattr(app.state, \"WEBUI_NAME\", v)",
          "92:                 return True",
          "93:             else:",
          "94:                 log.error(",
          "",
          "[Removed Lines]",
          "90:                     elif k == \"info\":",
          "91:                         setattr(app.state, \"LICENSE_INFO\", v)",
          "",
          "[Added Lines]",
          "90:                     elif k == \"metadata\":",
          "91:                         setattr(app.state, \"LICENSE_METADATA\", v)",
          "",
          "---------------"
        ]
      }
    }
  ]
}