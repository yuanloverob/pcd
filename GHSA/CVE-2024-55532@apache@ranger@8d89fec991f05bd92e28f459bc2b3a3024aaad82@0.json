{
  "cve_id": "CVE-2024-55532",
  "cve_desc": "Improper Neutralization of Formula Elements in Export CSV feature of Apache Ranger in Apache Ranger Version < 2.6.0.\nUsers are recommended to upgrade to version 2.6.0, which fixes this issue.",
  "repo": "apache/ranger",
  "patch_hash": "8d89fec991f05bd92e28f459bc2b3a3024aaad82",
  "patch_info": {
    "commit_hash": "8d89fec991f05bd92e28f459bc2b3a3024aaad82",
    "repo": "apache/ranger",
    "commit_url": "https://github.com/apache/ranger/commit/8d89fec991f05bd92e28f459bc2b3a3024aaad82",
    "files": [
      "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
      "security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java",
      "security-admin/src/main/webapp/react-webapp/src/views/Reports/UserAccessLayout.jsx",
      "security-admin/src/main/webapp/templates/reports/UserAccessLayout_tmpl.html"
    ],
    "message": "RANGER-5015: Implementing Best Practices While Exporting CSV and Excel Files\n\nSigned-off-by: Mugdha Varadkar <mugdha@apache.org>",
    "before_after_code_files": [
      "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java||security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
      "security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java||security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java",
      "security-admin/src/main/webapp/react-webapp/src/views/Reports/UserAccessLayout.jsx||security-admin/src/main/webapp/react-webapp/src/views/Reports/UserAccessLayout.jsx",
      "security-admin/src/main/webapp/templates/reports/UserAccessLayout_tmpl.html||security-admin/src/main/webapp/templates/reports/UserAccessLayout_tmpl.html"
    ]
  },
  "patch_diff": {
    "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java||security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java": [
      "File: security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java -> security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "213: import java.util.Set;",
      "214: import java.util.StringTokenizer;",
      "215: import java.util.TreeSet;",
      "216: import java.util.stream.Collectors;",
      "218: import static org.apache.ranger.db.XXGlobalStateDao.RANGER_GLOBAL_STATE_NAME_GDS;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "216: import java.util.regex.Pattern;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "255:     private static final String FILE_HEADER                 = \"ID|Name|Resources|Roles|Groups|Users|Accesses|Service Type|Status|Policy Type|Delegate Admin|isRecursive|isExcludes|Service Name|Description|isAuditEnabled|Policy Conditions|Policy Condition Type|Masking Options|Row Filter Expr|Policy Label Name\";",
      "256:     private static final String COMMA_DELIMITER             = \"|\";",
      "258:     private static final Comparator<RangerPolicyDelta> POLICY_DELTA_ID_COMPARATOR = new RangerPolicyDeltaComparator();",
      "260:     public static boolean SUPPORTS_POLICY_DELTAS;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "259:     private static final String  DEFAULT_CSV_SANITIZATION_PATTERN = \"^[=+\\\\-@\\\\t\\\\r]\";",
      "260:     private static final Pattern CSV_SANITIZATION_PATTERN = Pattern.compile(PropertiesUtil.getProperty(\"ranger.admin.csv.sanitization.pattern\", DEFAULT_CSV_SANITIZATION_PATTERN));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4731:         String                            userNames                = \"\";",
      "4732:         String                            policyLabelName          = \"\";",
      "4733:         String                            accessType               = \"\";",
      "4735:         Boolean                           delegateAdmin            = false;",
      "4736:         String                            isExcludesValue          = \"\";",
      "4737:         String                            maskingInfo              = \"\";",
      "",
      "[Removed Lines]",
      "4734:         String                            policyType               = \"\";",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4898:             policyConditionTypeValue = \"\";",
      "4899:         }",
      "4923:         if (CollectionUtils.isNotEmpty(policyLabels)) {",
      "4924:             for (String policyLabel : policyLabels) {",
      "4925:                 if (StringUtils.isNotBlank(policyLabel)) {",
      "",
      "[Removed Lines]",
      "4901:         String policyStatus;",
      "4903:         if (policy.getIsEnabled()) {",
      "4904:             policyStatus = \"Enabled\";",
      "4905:         } else {",
      "4906:             policyStatus = \"Disabled\";",
      "4907:         }",
      "4909:         int policyTypeInt = policy.getPolicyType();",
      "4911:         switch (policyTypeInt) {",
      "4912:             case RangerPolicy.POLICY_TYPE_ACCESS:",
      "4913:                 policyType = POLICY_TYPE_ACCESS;",
      "4914:                 break;",
      "4915:             case RangerPolicy.POLICY_TYPE_DATAMASK:",
      "4916:                 policyType = POLICY_TYPE_DATAMASK;",
      "4917:                 break;",
      "4918:             case RangerPolicy.POLICY_TYPE_ROWFILTER:",
      "4919:                 policyType = POLICY_TYPE_ROWFILTER;",
      "4920:                 break;",
      "4921:         }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4937:         csvBuffer.append(policy.getId());",
      "4938:         csvBuffer.append(COMMA_DELIMITER);",
      "4940:         csvBuffer.append(COMMA_DELIMITER);",
      "4942:         csvBuffer.append(COMMA_DELIMITER);",
      "4944:         csvBuffer.append(COMMA_DELIMITER);",
      "4946:         csvBuffer.append(COMMA_DELIMITER);",
      "4948:         csvBuffer.append(COMMA_DELIMITER);",
      "4949:         csvBuffer.append(accessType.trim());",
      "4950:         csvBuffer.append(COMMA_DELIMITER);",
      "4952:         csvBuffer.append(COMMA_DELIMITER);",
      "4954:         csvBuffer.append(COMMA_DELIMITER);",
      "4956:         csvBuffer.append(COMMA_DELIMITER);",
      "4957:         csvBuffer.append(delegateAdmin.toString().toUpperCase());",
      "4958:         csvBuffer.append(COMMA_DELIMITER);",
      "",
      "[Removed Lines]",
      "4939:         csvBuffer.append(policyName);",
      "4941:         csvBuffer.append(resourceKeyVal);",
      "4943:         csvBuffer.append(roleNames);",
      "4945:         csvBuffer.append(groupNames);",
      "4947:         csvBuffer.append(userNames);",
      "4951:         csvBuffer.append(serviceType);",
      "4953:         csvBuffer.append(policyStatus);",
      "4955:         csvBuffer.append(policyType);",
      "",
      "[Added Lines]",
      "4920:         csvBuffer.append(sanitizeCell(policyName));",
      "4922:         csvBuffer.append(sanitizeCell(resourceKeyVal));",
      "4924:         csvBuffer.append(sanitizeCell(roleNames));",
      "4926:         csvBuffer.append(sanitizeCell(groupNames));",
      "4928:         csvBuffer.append(sanitizeCell(userNames));",
      "4932:         csvBuffer.append(sanitizeCell(serviceType));",
      "4934:         csvBuffer.append(policy.getIsEnabled() ? \"Enabled\" : \"Disabled\");",
      "4936:         csvBuffer.append(getPolicyTypeString(policy.getPolicyType()));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "4960:         csvBuffer.append(COMMA_DELIMITER);",
      "4961:         csvBuffer.append(isExcludesValue);",
      "4962:         csvBuffer.append(COMMA_DELIMITER);",
      "4964:         csvBuffer.append(COMMA_DELIMITER);",
      "4966:         csvBuffer.append(COMMA_DELIMITER);",
      "4967:         csvBuffer.append(isAuditEnabled.toString().toUpperCase());",
      "4968:         csvBuffer.append(COMMA_DELIMITER);",
      "4970:         csvBuffer.append(COMMA_DELIMITER);",
      "4972:         csvBuffer.append(COMMA_DELIMITER);",
      "4974:         csvBuffer.append(COMMA_DELIMITER);",
      "4976:         csvBuffer.append(COMMA_DELIMITER);",
      "4978:         csvBuffer.append(COMMA_DELIMITER);",
      "4979:         csvBuffer.append(LINE_SEPARATOR);",
      "4980:     }",
      "4982:     private <T> void writeJson(List<T> objList, String jsonFileName, HttpServletResponse response, JSON_FILE_NAME_TYPE type) {",
      "4983:         response.setContentType(\"text/json\");",
      "4984:         response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + jsonFileName);",
      "",
      "[Removed Lines]",
      "4963:         csvBuffer.append(serviceName);",
      "4965:         csvBuffer.append(description);",
      "4969:         csvBuffer.append(conditionKeyValue.trim());",
      "4971:         csvBuffer.append(policyConditionTypeValue);",
      "4973:         csvBuffer.append(maskingInfo);",
      "4975:         csvBuffer.append(filterExpr);",
      "4977:         csvBuffer.append(policyLabelName);",
      "",
      "[Added Lines]",
      "4944:         csvBuffer.append(sanitizeCell(serviceName));",
      "4946:         csvBuffer.append(sanitizeCell(description));",
      "4950:         csvBuffer.append(sanitizeCell(conditionKeyValue.trim()));",
      "4952:         csvBuffer.append(sanitizeCell(policyConditionTypeValue));",
      "4954:         csvBuffer.append(sanitizeCell(maskingInfo));",
      "4956:         csvBuffer.append(sanitizeCell(filterExpr));",
      "4958:         csvBuffer.append(sanitizeCell(policyLabelName));",
      "4963:     private String sanitizeCell(String value) {",
      "4964:         return (value != null && !value.isEmpty() && CSV_SANITIZATION_PATTERN.matcher(value).find()) ? \" \" + value : value;",
      "4965:     }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "5044:         String       userNames                = \"\";",
      "5045:         String       policyLabelNames         = \"\";",
      "5046:         String       accessType               = \"\";",
      "5049:         Boolean      delegateAdmin            = false;",
      "5050:         String       isRecursive;",
      "5051:         String       isExcludes;",
      "5054:         Boolean      isAuditEnabled           = policy.getIsAuditEnabled();",
      "5055:         String       isExcludesValue          = \"\";",
      "5060:         List<RangerPolicyItemAccess>               accesses          = new ArrayList<>();",
      "5061:         List<RangerPolicyItemCondition>            conditionsList    = new ArrayList<>();",
      "",
      "[Removed Lines]",
      "5047:         String       policyStatus;",
      "5048:         String       policyType               = \"\";",
      "5052:         String       serviceName;",
      "5053:         String       description;",
      "5056:         Cell         cell                     = row.createCell(0);",
      "5058:         cell.setCellValue(policy.getId());",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "5072:         RangerPolicy.RangerPolicyItemDataMaskInfo  dataMaskInfo;",
      "5073:         RangerPolicy.RangerPolicyItemRowFilterInfo filterInfo;",
      "5081:         if (resources != null) {",
      "5082:             for (Entry<String, RangerPolicyResource> resource : resources.entrySet()) {",
      "",
      "[Removed Lines]",
      "5075:         cell = row.createCell(1);",
      "5077:         cell.setCellValue(policy.getName());",
      "5079:         cell = row.createCell(2);",
      "",
      "[Added Lines]",
      "5053:         row.createCell(0).setCellValue(policy.getId());",
      "5054:         row.createCell(1).setCellValue(sanitizeCell(policy.getName()));",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "5101:             resourceKeyVal   = sb.toString();",
      "5102:             resourceKeyVal   = resourceKeyVal.substring(1);",
      "5106:             if (policyItem != null && dataMaskPolicyItem == null && rowFilterPolicyItem == null) {",
      "5107:                 roles          = policyItem.getRoles();",
      "",
      "[Removed Lines]",
      "5104:             cell.setCellValue(resourceKeyVal);",
      "",
      "[Added Lines]",
      "5079:             row.createCell(2).setCellValue(sanitizeCell(resourceKeyVal));",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "5128:                     maskingInfo = maskingInfo + \"; conditionExpr=[\" + conditionExpr + \"]\";",
      "5129:                 }",
      "5133:             } else if (rowFilterPolicyItem != null && policyItem == null && dataMaskPolicyItem == null) {",
      "5134:                 roles          = rowFilterPolicyItem.getRoles();",
      "5135:                 groups         = rowFilterPolicyItem.getGroups();",
      "",
      "[Removed Lines]",
      "5131:                 cell = row.createCell(18);",
      "5132:                 cell.setCellValue(maskingInfo);",
      "",
      "[Added Lines]",
      "5106:                 row.createCell(18).setCellValue(sanitizeCell(maskingInfo));",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "5142:                 String filterExpr = filterInfo.getFilterExpr();",
      "5147:             }",
      "5149:             if (CollectionUtils.isNotEmpty(accesses)) {",
      "",
      "[Removed Lines]",
      "5144:                 cell = row.createCell(19);",
      "5146:                 cell.setCellValue(filterExpr);",
      "",
      "[Added Lines]",
      "5118:                 row.createCell(19).setCellValue(sanitizeCell(filterExpr));",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "5194:                 conditionKeyValue = conditionType + \"=\" + conditionValue;",
      "5195:             }",
      "5207:             String serviceType = policy.getServiceType();",
      "",
      "[Removed Lines]",
      "5197:             cell = row.createCell(3);",
      "5198:             cell.setCellValue(roleNames);",
      "5199:             cell = row.createCell(4);",
      "5200:             cell.setCellValue(groupNames);",
      "5201:             cell = row.createCell(5);",
      "5202:             cell.setCellValue(userNames);",
      "5203:             cell = row.createCell(6);",
      "5204:             cell.setCellValue(accessType.trim());",
      "5205:             cell = row.createCell(7);",
      "",
      "[Added Lines]",
      "5169:             row.createCell(3).setCellValue(sanitizeCell(roleNames));",
      "5170:             row.createCell(4).setCellValue(sanitizeCell(groupNames));",
      "5171:             row.createCell(5).setCellValue(sanitizeCell(userNames));",
      "5172:             row.createCell(6).setCellValue(accessType.trim());",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "5224:                 policyConditionTypeValue = \"\";",
      "5225:             }",
      "5230:         }",
      "5238:         policyLabels = policy.getPolicyLabels();",
      "",
      "[Removed Lines]",
      "5227:             cell.setCellValue(serviceType);",
      "5229:             cell = row.createCell(8);",
      "5232:         if (policy.getIsEnabled()) {",
      "5233:             policyStatus = \"Enabled\";",
      "5234:         } else {",
      "5235:             policyStatus = \"Disabled\";",
      "5236:         }",
      "",
      "[Added Lines]",
      "5194:             row.createCell(7).setCellValue(sanitizeCell(serviceType));",
      "5197:         row.createCell(8).setCellValue(policy.getIsEnabled() ? \"Enabled\" : \"Disabled\");",
      "5198:         row.createCell(9).setCellValue(getPolicyTypeString(policy.getPolicyType()));",
      "5199:         row.createCell(10).setCellValue(delegateAdmin.toString().toUpperCase());",
      "5200:         row.createCell(11).setCellValue(isRecursiveValue);",
      "5201:         row.createCell(12).setCellValue(isExcludesValue);",
      "5202:         row.createCell(13).setCellValue(sanitizeCell(policy.getService()));",
      "5203:         row.createCell(14).setCellValue(sanitizeCell(policy.getDescription()));",
      "5204:         row.createCell(15).setCellValue(isAuditEnabled.toString().toUpperCase());",
      "5205:         row.createCell(16).setCellValue(sanitizeCell(conditionKeyValue.trim()));",
      "5206:         row.createCell(17).setCellValue(sanitizeCell(policyConditionTypeValue));",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "5247:             }",
      "5248:         }",
      "5257:             case RangerPolicy.POLICY_TYPE_ACCESS:",
      "5261:             case RangerPolicy.POLICY_TYPE_DATAMASK:",
      "5265:             case RangerPolicy.POLICY_TYPE_ROWFILTER:",
      "5268:         }",
      "5291:     }",
      "5293:     private void createHeaderRow(Sheet sheet) {",
      "",
      "[Removed Lines]",
      "5250:         cell.setCellValue(policyStatus);",
      "5252:         cell = row.createCell(9);",
      "5254:         int policyTypeInt = policy.getPolicyType();",
      "5256:         switch (policyTypeInt) {",
      "5258:                 policyType = POLICY_TYPE_ACCESS;",
      "5259:                 break;",
      "5262:                 policyType = POLICY_TYPE_DATAMASK;",
      "5263:                 break;",
      "5266:                 policyType = POLICY_TYPE_ROWFILTER;",
      "5267:                 break;",
      "5270:         cell.setCellValue(policyType);",
      "5271:         cell = row.createCell(10);",
      "5272:         cell.setCellValue(delegateAdmin.toString().toUpperCase());",
      "5273:         cell = row.createCell(11);",
      "5274:         cell.setCellValue(isRecursiveValue);",
      "5275:         cell = row.createCell(12);",
      "5276:         cell.setCellValue(isExcludesValue);",
      "5277:         cell        = row.createCell(13);",
      "5278:         serviceName = policy.getService();",
      "5279:         cell.setCellValue(serviceName);",
      "5280:         cell        = row.createCell(14);",
      "5281:         description = policy.getDescription();",
      "5282:         cell.setCellValue(description);",
      "5283:         cell = row.createCell(15);",
      "5284:         cell.setCellValue(isAuditEnabled.toString().toUpperCase());",
      "5285:         cell = row.createCell(16);",
      "5286:         cell.setCellValue(conditionKeyValue.trim());",
      "5287:         cell = row.createCell(17);",
      "5288:         cell.setCellValue(policyConditionTypeValue);",
      "5289:         cell = row.createCell(20);",
      "5290:         cell.setCellValue(policyLabelNames);",
      "",
      "[Added Lines]",
      "5220:         row.createCell(20).setCellValue(sanitizeCell(policyLabelNames));",
      "5221:     }",
      "5223:     private String getPolicyTypeString(int policyType) {",
      "5224:         switch (policyType) {",
      "5226:                 return POLICY_TYPE_ACCESS;",
      "5228:                 return POLICY_TYPE_DATAMASK;",
      "5230:                 return POLICY_TYPE_ROWFILTER;",
      "5231:             default:",
      "5232:                 return \"\";",
      "",
      "---------------"
    ],
    "security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java||security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java": [
      "File: security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java -> security-admin/src/main/java/org/apache/ranger/rest/ServiceREST.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "1986:         return ret;",
      "1987:     }",
      "1989:     @GET",
      "1990:     @Path(\"/policies/downloadExcel\")",
      "1991:     @Produces(\"application/ms-excel\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1989:     @Deprecated",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2038:         }",
      "2039:     }",
      "2041:     @GET",
      "2042:     @Path(\"/policies/csv\")",
      "2043:     @Produces(\"text/csv\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2042:     @Deprecated",
      "",
      "---------------"
    ],
    "security-admin/src/main/webapp/react-webapp/src/views/Reports/UserAccessLayout.jsx||security-admin/src/main/webapp/react-webapp/src/views/Reports/UserAccessLayout.jsx": [
      "File: security-admin/src/main/webapp/react-webapp/src/views/Reports/UserAccessLayout.jsx -> security-admin/src/main/webapp/react-webapp/src/views/Reports/UserAccessLayout.jsx",
      "--- Hunk 1 ---",
      "[Context before]",
      "413:     }",
      "414:   };",
      "426:     try {",
      "428:         url: exportApiUrl,",
      "429:         params: searchParamsObj,",
      "430:         responseType: \"blob\"",
      "",
      "[Removed Lines]",
      "416:   const exportPolicy = async (exportType) => {",
      "417:     let exportResp;",
      "418:     let exportApiUrl = \"/plugins/policies/exportJson\";",
      "420:     if (exportType === \"downloadExcel\") {",
      "421:       exportApiUrl = \"/plugins/policies/downloadExcel\";",
      "422:     } else if (exportType === \"csv\") {",
      "423:       exportApiUrl = \"/plugins/policies/csv\";",
      "424:     }",
      "427:       exportResp = await fetchApi({",
      "",
      "[Added Lines]",
      "416:   const exportPolicy = async () => {",
      "417:     const exportApiUrl = \"/plugins/policies/exportJson\";",
      "420:       const exportResp = await fetchApi({",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "433:       if (exportResp.status === 200) {",
      "434:         downloadFile({",
      "436:           apiResponse: exportResp.data",
      "437:         });",
      "438:       } else {",
      "",
      "[Removed Lines]",
      "435:           exportType: exportType,",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "443:     }",
      "444:   };",
      "457:     const fileName =",
      "458:       \"Ranger_Policies_\" +",
      "",
      "[Removed Lines]",
      "446:   const downloadFile = ({ exportType, apiResponse }) => {",
      "447:     let fileExtension;",
      "449:     if (exportType === \"downloadExcel\") {",
      "450:       fileExtension = \".xls\";",
      "451:     } else if (exportType === \"csv\") {",
      "452:       fileExtension = \".csv\";",
      "453:     } else {",
      "454:       fileExtension = \".json\";",
      "455:     }",
      "",
      "[Added Lines]",
      "438:   const downloadFile = ({ apiResponse }) => {",
      "439:     const fileExtension = \".json\";",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "705:           </Col>",
      "706:         </Row>",
      "707:         <Row>",
      "720:               >",
      "732:                   <React.Fragment>",
      "735:                       JSON file",
      "736:                     </Dropdown.Item>",
      "737:                   </React.Fragment>",
      "742:         </Row>",
      "743:         {filterServiceDefs?.map((serviceDef) => (",
      "744:           <SearchPolicyTable",
      "",
      "[Removed Lines]",
      "708:           <Col sm={12} className=\"mt-3 text-end\">",
      "709:             <Dropdown",
      "710:               as={ButtonGroup}",
      "711:               key=\"left\"",
      "712:               drop=\"start\"",
      "713:               size=\"sm\"",
      "714:               className=\"manage-export\"",
      "715:               title=\"Export all below policies\"",
      "716:             >",
      "717:               <Dropdown.Toggle",
      "718:                 data-name=\"downloadFormatBtn\"",
      "719:                 data-cy=\"downloadFormatBtn\"",
      "721:                 <i className=\"fa-fw fa fa-external-link-square\"></i> Export",
      "722:               </Dropdown.Toggle>",
      "723:               <Dropdown.Menu>",
      "724:                 <Dropdown.Item onClick={() => exportPolicy(\"downloadExcel\")}>",
      "725:                   Excel file",
      "726:                 </Dropdown.Item>",
      "727:                 <Dropdown.Divider />",
      "728:                 <Dropdown.Item onClick={() => exportPolicy(\"csv\")}>",
      "729:                   CSV file",
      "730:                 </Dropdown.Item>",
      "731:                 {!isAuditRole && (",
      "733:                     <Dropdown.Divider />",
      "734:                     <Dropdown.Item onClick={() => exportPolicy(\"exportJson\")}>",
      "738:                 )}",
      "739:               </Dropdown.Menu>",
      "740:             </Dropdown>",
      "741:           </Col>",
      "",
      "[Added Lines]",
      "692:           {!isAuditRole && (",
      "693:             <Col sm={12} className=\"mt-3 text-end\">",
      "694:               <Dropdown",
      "695:                 as={ButtonGroup}",
      "696:                 key=\"left\"",
      "697:                 drop=\"start\"",
      "698:                 size=\"sm\"",
      "699:                 className=\"manage-export\"",
      "700:                 title=\"Export all below policies\"",
      "702:                 <Dropdown.Toggle",
      "703:                   data-name=\"downloadFormatBtn\"",
      "704:                   data-cy=\"downloadFormatBtn\"",
      "705:                 >",
      "706:                   <i className=\"fa-fw fa fa-external-link-square\"></i> Export",
      "707:                 </Dropdown.Toggle>",
      "708:                 <Dropdown.Menu>",
      "710:                     <Dropdown.Item onClick={() => exportPolicy()}>",
      "714:                 </Dropdown.Menu>",
      "715:               </Dropdown>",
      "716:             </Col>",
      "717:           )}",
      "",
      "---------------"
    ],
    "security-admin/src/main/webapp/templates/reports/UserAccessLayout_tmpl.html||security-admin/src/main/webapp/templates/reports/UserAccessLayout_tmpl.html": [
      "File: security-admin/src/main/webapp/templates/reports/UserAccessLayout_tmpl.html -> security-admin/src/main/webapp/templates/reports/UserAccessLayout_tmpl.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "115:     </div>",
      "116:     {{/if}}",
      "117:     <div class=\"row\">",
      "131:                 </div>",
      "132:             </div>",
      "135:     </div>",
      "136:     <div class=\"row report-table\">",
      "137:         <div class=\"col-md-12\">",
      "",
      "[Removed Lines]",
      "118:         <div class=\"col-md-12\">",
      "119:             <div class=\"btn-group dropleft btn-right\" style=\"margin-top:10px;\">",
      "120:                 <button type=\"button\" data-name=\"downloadFormatBtn\" class=\"btn btn-primary btn-sm dropdown-toggle\" title=\"Export all below policies\" data-toggle=\"dropdown\">",
      "121:                     <i class=\"fa-fw fa fa-external-link-square\"></i> Export",
      "122:                 </button>",
      "123:                 <div class=\"dropdown-menu drop-font download-list\">",
      "124:                     <a data-id=\"xlsFormat\" class=\"downloadFormat dropdown-item\" href=\"javascript:void(0)\">Excel file</a>",
      "125:                     <div class=\"dropdown-divider\"></div>",
      "126:                     <a data-id=\"csvFormat\" class=\"downloadFormat dropdown-item\" href=\"javascript:void(0)\">CSV file</a>",
      "127:                     {{#showExportJson}}",
      "128:                     <div class=\"dropdown-divider\"></div>",
      "129:                     <a data-id=\"jsonFormat\" class=\"downloadFormat dropdown-item\" href=\"javascript:void(0)\">JSON file</a>",
      "130:                     {{/showExportJson}}",
      "133:         </div>",
      "134:         <a href=\"javascript:void(0)\" data-id=\"downloadReport\"></a>",
      "",
      "[Added Lines]",
      "118:         {{#showExportJson}}",
      "119:             <div class=\"col-md-12\">",
      "120:                 <div class=\"btn-group dropleft btn-right\" style=\"margin-top:10px;\">",
      "121:                     <button type=\"button\" data-name=\"downloadFormatBtn\" class=\"btn btn-primary btn-sm dropdown-toggle\" title=\"Export all below policies\" data-toggle=\"dropdown\">",
      "122:                         <i class=\"fa-fw fa fa-external-link-square\"></i> Export",
      "123:                     </button>",
      "124:                     <div class=\"dropdown-menu drop-font download-list\">",
      "125:                         <a data-id=\"jsonFormat\" class=\"downloadFormat dropdown-item\" href=\"javascript:void(0)\">JSON file</a>",
      "126:                     </div>",
      "129:             <a href=\"javascript:void(0)\" data-id=\"downloadReport\"></a>",
      "130:         {{/showExportJson}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d2d3a2df91331496e270227b9659b3b1b550a474",
      "candidate_info": {
        "commit_hash": "d2d3a2df91331496e270227b9659b3b1b550a474",
        "repo": "apache/ranger",
        "commit_url": "https://github.com/apache/ranger/commit/d2d3a2df91331496e270227b9659b3b1b550a474",
        "files": [
          "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java"
        ],
        "message": "RANGER-5015: Implementing Best Practices While Exporting CSV and Excel Files\n\nSigned-off-by: Mugdha Varadkar <mugdha@apache.org>",
        "before_after_code_files": [
          "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java||security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java||security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java"
          ],
          "candidate": [
            "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java||security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java"
          ]
        }
      },
      "candidate_diff": {
        "security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java||security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java": [
          "File: security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java -> security-admin/src/main/java/org/apache/ranger/biz/ServiceDBStore.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import java.util.Set;",
          "44: import java.util.StringTokenizer;",
          "45: import java.util.TreeSet;",
          "46: import java.util.stream.Collectors;",
          "48: import javax.annotation.PostConstruct;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import java.util.regex.Pattern;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:  private static final String RANGER_PLUGIN_CONFIG_PREFIX = \"ranger.plugin.\";",
          "268:  public static final String RANGER_PLUGIN_AUDIT_FILTERS  = \"ranger.plugin.audit.filters\";",
          "270:  static {",
          "271:   try {",
          "272:    LOCAL_HOSTNAME = java.net.InetAddress.getLocalHost().getCanonicalHostName();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:  private static final String  DEFAULT_CSV_SANITIZATION_PATTERN = \"^[=+\\\\-@\\\\t\\\\r]\";",
          "272:  private static final Pattern CSV_SANITIZATION_PATTERN = Pattern.compile(PropertiesUtil.getProperty(\"ranger.admin.csv.sanitization.pattern\", DEFAULT_CSV_SANITIZATION_PATTERN));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4303:   String userNames = \"\";",
          "4304:   String policyLabelName = \"\";",
          "4305:   String accessType = \"\";",
          "4308:   Boolean delegateAdmin = false;",
          "4309:   String isRecursive = \"\";",
          "4310:   String isExcludes = \"\";",
          "",
          "[Removed Lines]",
          "4306:   String policyStatus = \"\";",
          "4307:   String policyType = \"\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4457:   } else if (policyConditionType == null) {",
          "4458:    policyConditionTypeValue = \"\";",
          "4459:   }",
          "4477:   if (CollectionUtils.isNotEmpty(policyLabels)) {",
          "4478:    for (String policyLabel : policyLabels) {",
          "4479:     if (StringUtils.isNotBlank(policyLabel)) {",
          "",
          "[Removed Lines]",
          "4460:   if (policy.getIsEnabled()) {",
          "4461:    policyStatus = \"Enabled\";",
          "4462:   } else {",
          "4463:    policyStatus = \"Disabled\";",
          "4464:   }",
          "4465:   int policyTypeInt = policy.getPolicyType();",
          "4466:   switch (policyTypeInt) {",
          "4467:   case RangerPolicy.POLICY_TYPE_ACCESS:",
          "4468:    policyType = POLICY_TYPE_ACCESS;",
          "4469:    break;",
          "4470:   case RangerPolicy.POLICY_TYPE_DATAMASK:",
          "4471:    policyType = POLICY_TYPE_DATAMASK;",
          "4472:    break;",
          "4473:   case RangerPolicy.POLICY_TYPE_ROWFILTER:",
          "4474:    policyType = POLICY_TYPE_ROWFILTER;",
          "4475:    break;",
          "4476:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4490:   csvBuffer.append(policy.getId());",
          "4491:   csvBuffer.append(COMMA_DELIMITER);",
          "4493:   csvBuffer.append(COMMA_DELIMITER);",
          "4495:   csvBuffer.append(COMMA_DELIMITER);",
          "4497:   csvBuffer.append(COMMA_DELIMITER);",
          "4499:   csvBuffer.append(COMMA_DELIMITER);",
          "4501:   csvBuffer.append(COMMA_DELIMITER);",
          "4502:   csvBuffer.append(accessType.trim());",
          "4503:   csvBuffer.append(COMMA_DELIMITER);",
          "4505:   csvBuffer.append(COMMA_DELIMITER);",
          "4507:   csvBuffer.append(COMMA_DELIMITER);",
          "4509:   csvBuffer.append(COMMA_DELIMITER);",
          "4510:   csvBuffer.append(delegateAdmin.toString().toUpperCase());",
          "4511:   csvBuffer.append(COMMA_DELIMITER);",
          "",
          "[Removed Lines]",
          "4492:   csvBuffer.append(policyName);",
          "4494:   csvBuffer.append(resourceKeyVal);",
          "4496:   csvBuffer.append(roleNames);",
          "4498:   csvBuffer.append(groupNames);",
          "4500:   csvBuffer.append(userNames);",
          "4504:   csvBuffer.append(ServiceType);",
          "4506:   csvBuffer.append(policyStatus);",
          "4508:   csvBuffer.append(policyType);",
          "",
          "[Added Lines]",
          "4478:   csvBuffer.append(sanitizeCell(policyName));",
          "4480:   csvBuffer.append(sanitizeCell(resourceKeyVal));",
          "4482:   csvBuffer.append(sanitizeCell(roleNames));",
          "4484:   csvBuffer.append(sanitizeCell(groupNames));",
          "4486:   csvBuffer.append(sanitizeCell(userNames));",
          "4490:   csvBuffer.append(sanitizeCell(ServiceType));",
          "4492:   csvBuffer.append(policy.getIsEnabled() ? \"Enabled\" : \"Disabled\");",
          "4494:   csvBuffer.append(getPolicyTypeString(policy.getPolicyType()));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4513:   csvBuffer.append(COMMA_DELIMITER);",
          "4514:   csvBuffer.append(isExcludesValue);",
          "4515:   csvBuffer.append(COMMA_DELIMITER);",
          "4517:   csvBuffer.append(COMMA_DELIMITER);",
          "4519:   csvBuffer.append(COMMA_DELIMITER);",
          "4520:   csvBuffer.append(isAuditEnabled.toString().toUpperCase());",
          "4521:   csvBuffer.append(COMMA_DELIMITER);",
          "4523:   csvBuffer.append(COMMA_DELIMITER);",
          "4525:   csvBuffer.append(COMMA_DELIMITER);",
          "4527:   csvBuffer.append(COMMA_DELIMITER);",
          "4529:   csvBuffer.append(COMMA_DELIMITER);",
          "4531:   csvBuffer.append(COMMA_DELIMITER);",
          "4532:   csvBuffer.append(LINE_SEPARATOR);",
          "4533:  }",
          "",
          "[Removed Lines]",
          "4516:   csvBuffer.append(serviceName);",
          "4518:   csvBuffer.append(description);",
          "4522:   csvBuffer.append(conditionKeyValue.trim());",
          "4524:   csvBuffer.append(policyConditionTypeValue);",
          "4526:   csvBuffer.append(maskingInfo);",
          "4528:   csvBuffer.append(filterExpr);",
          "4530:   csvBuffer.append(policyLabelName);",
          "",
          "[Added Lines]",
          "4502:   csvBuffer.append(sanitizeCell(serviceName));",
          "4504:   csvBuffer.append(sanitizeCell(description));",
          "4508:   csvBuffer.append(sanitizeCell(conditionKeyValue.trim()));",
          "4510:   csvBuffer.append(sanitizeCell(policyConditionTypeValue));",
          "4512:   csvBuffer.append(sanitizeCell(maskingInfo));",
          "4514:   csvBuffer.append(sanitizeCell(filterExpr));",
          "4516:   csvBuffer.append(sanitizeCell(policyLabelName));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4652:   return policiesMap;",
          "4653:  }",
          "4655:  private void writeBookForPolicyItems(Map<String, String> svcNameToSvcType, RangerPolicy policy, RangerPolicyItem policyItem, RangerDataMaskPolicyItem dataMaskPolicyItem, RangerRowFilterPolicyItem rowFilterPolicyItem, Row row, String policyConditionType) {",
          "4656:   if (LOG.isDebugEnabled()) {",
          "4657:    LOG.debug(\"policyConditionType:[\" + policyConditionType + \"]\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4641:  private String sanitizeCell(String value) {",
          "4642:   return (value != null && !value.isEmpty() && CSV_SANITIZATION_PATTERN.matcher(value).find()) ? \" \" + value : value;",
          "4643:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4665:   String userNames = \"\";",
          "4666:   String policyLabelNames = \"\";",
          "4667:   String accessType = \"\";",
          "4670:   Boolean delegateAdmin = false;",
          "4671:   String isRecursive = \"\";",
          "4672:   String isExcludes = \"\";",
          "4676:   Boolean isAuditEnabled = true;",
          "4677:   isAuditEnabled = policy.getIsAuditEnabled();",
          "4678:   String isExcludesValue = \"\";",
          "4681:   List<RangerPolicyItemAccess> accesses = new ArrayList<>();",
          "4682:   List<RangerPolicyItemCondition> conditionsList = new ArrayList<>();",
          "4683:   String conditionKeyValue = \"\";",
          "",
          "[Removed Lines]",
          "4668:   String policyStatus = \"\";",
          "4669:   String policyType = \"\";",
          "4673:   String serviceName = \"\";",
          "4675:   String description = \"\";",
          "4679:   Cell cell = row.createCell(0);",
          "4680:   cell.setCellValue(policy.getId());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4692:   Map<String, RangerPolicyResource> resources = policy.getResources();",
          "4693:   RangerPolicy.RangerPolicyItemDataMaskInfo dataMaskInfo = new RangerPolicy.RangerPolicyItemDataMaskInfo();",
          "4694:   RangerPolicy.RangerPolicyItemRowFilterInfo filterInfo = new RangerPolicy.RangerPolicyItemRowFilterInfo();",
          "4698:   if (resources != null) {",
          "4699:    for (Entry<String, RangerPolicyResource> resource : resources.entrySet()) {",
          "4700:     resKey = resource.getKey();",
          "",
          "[Removed Lines]",
          "4695:   cell = row.createCell(1);",
          "4696:   cell.setCellValue(policy.getName());",
          "4697:   cell = row.createCell(2);",
          "",
          "[Added Lines]",
          "4680:   row.createCell(0).setCellValue(policy.getId());",
          "4681:   row.createCell(1).setCellValue(sanitizeCell(policy.getName()));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4713:    isRecursiveValue = isRecursiveValue.substring(1);",
          "4714:    resourceKeyVal = sb.toString();",
          "4715:    resourceKeyVal = resourceKeyVal.substring(1);",
          "4717:    if (policyItem != null && dataMaskPolicyItem == null && rowFilterPolicyItem == null) {",
          "4718:     roles = policyItem.getRoles();",
          "4719:     groups = policyItem.getGroups();",
          "",
          "[Removed Lines]",
          "4716:    cell.setCellValue(resourceKeyVal);",
          "",
          "[Added Lines]",
          "4701:    row.createCell(2).setCellValue(sanitizeCell(resourceKeyVal));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4736:     if (conditionExpr != null && !conditionExpr.isEmpty() && valueExpr != null && !valueExpr.isEmpty()) {",
          "4737:      maskingInfo = maskingInfo + \"; conditionExpr=[\" + conditionExpr + \"]\";",
          "4738:     }",
          "4741:    } else if (rowFilterPolicyItem != null && policyItem == null && dataMaskPolicyItem == null) {",
          "4742:     roles = rowFilterPolicyItem.getRoles();",
          "4743:     groups = rowFilterPolicyItem.getGroups();",
          "",
          "[Removed Lines]",
          "4739:     cell = row.createCell(18);",
          "4740:     cell.setCellValue(maskingInfo);",
          "",
          "[Added Lines]",
          "4724:     row.createCell(18).setCellValue(sanitizeCell(maskingInfo));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4747:     conditionsList = rowFilterPolicyItem.getConditions();",
          "4748:     filterInfo = rowFilterPolicyItem.getRowFilterInfo();",
          "4749:     String filterExpr = filterInfo.getFilterExpr();",
          "4752:    }",
          "4753:    if (CollectionUtils.isNotEmpty(accesses)) {",
          "4754:     for (RangerPolicyItemAccess access : accesses) {",
          "",
          "[Removed Lines]",
          "4750:     cell = row.createCell(19);",
          "4751:     cell.setCellValue(filterExpr);",
          "",
          "[Added Lines]",
          "4734:     row.createCell(19).setCellValue(sanitizeCell(filterExpr));;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4785:     conditionValue = conditionList.toString();",
          "4786:     conditionKeyValue = conditionType + \"=\" + conditionValue;",
          "4787:    }",
          "4798:    String ServiceType = policy.getServiceType();",
          "4799:    if (StringUtils.isBlank(ServiceType)) {",
          "",
          "[Removed Lines]",
          "4788:    cell = row.createCell(3);",
          "4789:    cell.setCellValue(roleNames);",
          "4790:    cell = row.createCell(4);",
          "4791:    cell.setCellValue(groupNames);",
          "4792:    cell = row.createCell(5);",
          "4793:    cell.setCellValue(userNames);",
          "4794:    cell = row.createCell(6);",
          "4795:    cell.setCellValue(accessType.trim());",
          "4796:    cell = row.createCell(7);",
          "",
          "[Added Lines]",
          "4771:    row.createCell(3).setCellValue(sanitizeCell(roleNames));",
          "4772:    row.createCell(4).setCellValue(sanitizeCell(groupNames));",
          "4773:    row.createCell(5).setCellValue(sanitizeCell(userNames));",
          "4774:    row.createCell(6).setCellValue(accessType.trim());",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4812:     policyConditionTypeValue = \"\";",
          "4813:    }",
          "4818:   }",
          "4824:   policyLabels = policy.getPolicyLabels();",
          "4825:   if (CollectionUtils.isNotEmpty(policyLabels)) {",
          "4826:    policyLabelNames = policyLabelNames + policyLabels.toString();",
          "",
          "[Removed Lines]",
          "4815:    cell.setCellValue(ServiceType);",
          "4816:    cell = row.createCell(8);",
          "4819:   if (policy.getIsEnabled()) {",
          "4820:    policyStatus = \"Enabled\";",
          "4821:   } else {",
          "4822:    policyStatus = \"Disabled\";",
          "4823:   }",
          "",
          "[Added Lines]",
          "4793:    row.createCell(7).setCellValue(sanitizeCell(ServiceType));",
          "4797:   row.createCell(8).setCellValue(policy.getIsEnabled() ? \"Enabled\" : \"Disabled\");",
          "4798:   row.createCell(9).setCellValue(getPolicyTypeString(policy.getPolicyType()));",
          "4799:   row.createCell(10).setCellValue(delegateAdmin.toString().toUpperCase());",
          "4800:   row.createCell(11).setCellValue(isRecursiveValue);",
          "4801:   row.createCell(12).setCellValue(isExcludesValue);",
          "4802:   row.createCell(13).setCellValue(sanitizeCell(policy.getService()));",
          "4803:   row.createCell(14).setCellValue(sanitizeCell(policy.getDescription()));",
          "4804:   row.createCell(15).setCellValue(isAuditEnabled.toString().toUpperCase());",
          "4805:   row.createCell(16).setCellValue(sanitizeCell(conditionKeyValue.trim()));",
          "4806:   row.createCell(17).setCellValue(sanitizeCell(policyConditionTypeValue));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4829:     policyLabelNames = policyLabelToken.nextToken().toString();",
          "4830:    }",
          "4831:   }",
          "4844:   case RangerPolicy.POLICY_TYPE_ROWFILTER:",
          "4847:   }",
          "4870:  }",
          "4872:  private void createHeaderRow(Sheet sheet) {",
          "",
          "[Removed Lines]",
          "4832:   cell.setCellValue(policyStatus);",
          "4833:   cell = row.createCell(9);",
          "4834:   int policyTypeInt = policy.getPolicyType();",
          "4835:   switch (policyTypeInt) {",
          "4836:   case RangerPolicy.POLICY_TYPE_ACCESS:",
          "4837:    policyType = POLICY_TYPE_ACCESS;",
          "4838:    break;",
          "4840:   case RangerPolicy.POLICY_TYPE_DATAMASK:",
          "4841:    policyType = POLICY_TYPE_DATAMASK;",
          "4842:    break;",
          "4845:    policyType = POLICY_TYPE_ROWFILTER;",
          "4846:    break;",
          "4848:   cell.setCellValue(policyType);",
          "4849:   cell = row.createCell(10);",
          "4850:   cell.setCellValue(delegateAdmin.toString().toUpperCase());",
          "4851:   cell = row.createCell(11);",
          "4852:   cell.setCellValue(isRecursiveValue);",
          "4853:   cell = row.createCell(12);",
          "4854:   cell.setCellValue(isExcludesValue);",
          "4855:   cell = row.createCell(13);",
          "4856:   serviceName = policy.getService();",
          "4857:   cell.setCellValue(serviceName);",
          "4858:   cell = row.createCell(14);",
          "4859:   description = policy.getDescription();",
          "4860:   cell.setCellValue(description);",
          "4861:   cell = row.createCell(15);",
          "4862:   cell.setCellValue(isAuditEnabled.toString().toUpperCase());",
          "4863:   cell = row.createCell(16);",
          "4864:   cell.setCellValue(conditionKeyValue.trim());",
          "4865:   cell = row.createCell(17);",
          "4866:   cell.setCellValue(policyConditionTypeValue);",
          "4867:   cell = row.createCell(20);",
          "4868:   cell.setCellValue(policyLabelNames);",
          "",
          "[Added Lines]",
          "4816:   row.createCell(20).setCellValue(sanitizeCell(policyLabelNames));",
          "4818:  }",
          "4820:  private String getPolicyTypeString(int policyType) {",
          "4821:   switch (policyType) {",
          "4822:   case RangerPolicy.POLICY_TYPE_ACCESS:",
          "4823:    return POLICY_TYPE_ACCESS;",
          "4824:   case RangerPolicy.POLICY_TYPE_DATAMASK:",
          "4825:    return POLICY_TYPE_DATAMASK;",
          "4827:    return POLICY_TYPE_ROWFILTER;",
          "4828:   default:",
          "4829:    return \"\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}