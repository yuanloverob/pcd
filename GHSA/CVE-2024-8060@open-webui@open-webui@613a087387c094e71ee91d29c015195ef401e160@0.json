{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "45474531410113042dbb950851f549cf607c3802",
      "candidate_info": {
        "commit_hash": "45474531410113042dbb950851f549cf607c3802",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/45474531410113042dbb950851f549cf607c3802",
        "files": [
          "src/lib/apis/index.ts",
          "src/lib/components/chat/Settings/Tools/Connection.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/apis/index.ts||src/lib/apis/index.ts",
          "src/lib/components/chat/Settings/Tools/Connection.svelte||src/lib/components/chat/Settings/Tools/Connection.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/apis/index.ts||src/lib/apis/index.ts": [
          "File: src/lib/apis/index.ts -> src/lib/apis/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "299: export const getToolServersData = async (servers: object[]) => {",
          "300:  return await Promise.all(",
          "301:   servers",
          "303:    .map(async (server) => {",
          "304:     const data = await getToolServerData(server?.key, server?.url).catch((err) => {",
          "305:      console.error(err);",
          "",
          "[Removed Lines]",
          "302:    .filter(async (server) => server?.config?.enable)",
          "",
          "[Added Lines]",
          "302:    .filter((server) => server?.config?.enable)",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Settings/Tools/Connection.svelte||src/lib/components/chat/Settings/Tools/Connection.svelte": [
          "File: src/lib/components/chat/Settings/Tools/Connection.svelte -> src/lib/components/chat/Settings/Tools/Connection.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     inputClassName=\" outline-hidden bg-transparent w-full\"",
          "77:     placeholder={$i18n.t('API Key')}",
          "78:     bind:value={key}",
          "79:    />",
          "80:   </div>",
          "81:  </Tooltip>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:     required={false}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4fc2e0e510114d2aa3d56162265d2a532fc6078",
      "candidate_info": {
        "commit_hash": "e4fc2e0e510114d2aa3d56162265d2a532fc6078",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/e4fc2e0e510114d2aa3d56162265d2a532fc6078",
        "files": [
          "backend/open_webui/socket/main.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/socket/main.py||backend/open_webui/socket/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/socket/main.py||backend/open_webui/socket/main.py": [
          "File: backend/open_webui/socket/main.py -> backend/open_webui/socket/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "327: def get_event_call(request_info):",
          "329:         response = await sio.call(",
          "330:             \"chat-events\",",
          "331:             {",
          "",
          "[Removed Lines]",
          "328:     async def __event_call__(event_data):",
          "",
          "[Added Lines]",
          "328:     async def __event_caller__(event_data):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:         )",
          "338:         return response",
          "343: def get_user_id_from_session_pool(sid):",
          "",
          "[Removed Lines]",
          "340:     return __event_call__",
          "",
          "[Added Lines]",
          "340:     return __event_caller__",
          "343: get_event_caller = get_event_call",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "811e1f92b165a5ef7984b9ba92572659c73b415e",
      "candidate_info": {
        "commit_hash": "811e1f92b165a5ef7984b9ba92572659c73b415e",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/811e1f92b165a5ef7984b9ba92572659c73b415e",
        "files": [
          "backend/open_webui/routers/models.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/models.py||backend/open_webui/routers/models.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/models.py||backend/open_webui/routers/models.py": [
          "File: backend/open_webui/routers/models.py -> backend/open_webui/routers/models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         return Models.get_models_by_user_id(user.id)",
          "34: ############################",
          "35: # CreateNewModel",
          "36: ############################",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: ###########################",
          "35: # GetBaseModels",
          "36: ###########################",
          "39: @router.get(\"/base\", response_model=list[ModelResponse])",
          "40: async def get_base_models(user=Depends(get_admin_user)):",
          "41:     return Models.get_base_models()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a4dbf7cf057617308f27df536d9143840d6ea70",
      "candidate_info": {
        "commit_hash": "0a4dbf7cf057617308f27df536d9143840d6ea70",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/0a4dbf7cf057617308f27df536d9143840d6ea70",
        "files": [
          "src/lib/components/chat/Artifacts.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Artifacts.svelte||src/lib/components/chat/Artifacts.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Artifacts.svelte||src/lib/components/chat/Artifacts.svelte": [
          "File: src/lib/components/chat/Artifacts.svelte -> src/lib/components/chat/Artifacts.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:   if (contents.length === 0) {",
          "124:    showControls.set(false);",
          "125:    showArtifacts.set(false);",
          "126:   }",
          "128:   selectedContentIdx = contents ? contents.length - 1 : 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:    toast.error($i18n.t('No HTML, CSS, or JavaScript content found.'));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce08ea5f6c5c04118ba2ce8bce3a74277e2b1ddf",
      "candidate_info": {
        "commit_hash": "ce08ea5f6c5c04118ba2ce8bce3a74277e2b1ddf",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/ce08ea5f6c5c04118ba2ce8bce3a74277e2b1ddf",
        "files": [
          "src/lib/components/channel/Messages/Message.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/channel/Messages/Message.svelte||src/lib/components/channel/Messages/Message.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/channel/Messages/Message.svelte||src/lib/components/channel/Messages/Message.svelte": [
          "File: src/lib/components/channel/Messages/Message.svelte -> src/lib/components/channel/Messages/Message.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:        class=\"mt-1.5 flex flex-shrink-0 items-center text-xs self-center invisible group-hover:visible text-gray-500 font-medium first-letter:capitalize\"",
          "157:       >",
          "158:        <Tooltip content={dayjs(message.created_at / 1000000).format('LLLL')}>",
          "160:        </Tooltip>",
          "161:       </div>",
          "162:      {/if}",
          "",
          "[Removed Lines]",
          "159:         {dayjs(message.created_at / 1000000).format('LT')}",
          "",
          "[Added Lines]",
          "159:         {dayjs(message.created_at / 1000000).format('HH:mm')}",
          "",
          "---------------"
        ]
      }
    }
  ]
}