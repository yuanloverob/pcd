{
  "cve_id": "CVE-2024-29032",
  "cve_desc": "Qiskit IBM Runtime is an environment that streamlines quantum computations and provides optimal implementations of the Qiskit quantum computing SDK. Starting in version 0.1.0 and prior to version 0.21.2, deserializing json data using `qiskit_ibm_runtime.RuntimeDecoder` can lead to arbitrary code execution given a correctly formatted input string. Version 0.21.2 contains a fix for this issue.",
  "repo": "Qiskit/qiskit-ibm-runtime",
  "patch_hash": "b78fca114133051805d00043a404b25a33835f4d",
  "patch_info": {
    "commit_hash": "b78fca114133051805d00043a404b25a33835f4d",
    "repo": "Qiskit/qiskit-ibm-runtime",
    "commit_url": "https://github.com/Qiskit/qiskit-ibm-runtime/commit/b78fca114133051805d00043a404b25a33835f4d",
    "files": [
      "qiskit_ibm_runtime/utils/json.py",
      "test/unit/test_data_serialization.py"
    ],
    "message": "Merge pull request from GHSA-x4x5-jv3x-9c7m\n\n* restrict import path\n\n* add test",
    "before_after_code_files": [
      "qiskit_ibm_runtime/utils/json.py||qiskit_ibm_runtime/utils/json.py",
      "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py"
    ]
  },
  "patch_diff": {
    "qiskit_ibm_runtime/utils/json.py||qiskit_ibm_runtime/utils/json.py": [
      "File: qiskit_ibm_runtime/utils/json.py -> qiskit_ibm_runtime/utils/json.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "373:                 # to deserialize load qpy circuit and return first instruction object in that circuit.",
      "374:                 circuit = _decode_and_deserialize(obj_val, load)[0]",
      "375:                 return circuit.data[0][0]",
      "377:                 return _deserialize_from_settings(",
      "378:                     mod_name=obj[\"__module__\"],",
      "379:                     class_name=obj[\"__class__\"],",
      "",
      "[Removed Lines]",
      "376:             if obj_type == \"settings\":",
      "",
      "[Added Lines]",
      "376:             if obj_type == \"settings\" and obj[\"__module__\"].startswith(",
      "377:                 \"qiskit.quantum_info.operators\"",
      "378:             ):",
      "",
      "---------------"
    ],
    "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py": [
      "File: test/unit/test_data_serialization.py -> test/unit/test_data_serialization.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: from qiskit.circuit.library import EfficientSU2, CXGate, PhaseGate, U2Gate",
      "29: import qiskit.quantum_info as qi",
      "31: from qiskit.result import Result, Counts",
      "32: from qiskit.primitives.containers.bindings_array import BindingsArray",
      "33: from qiskit.primitives.containers.observables_array import ObservablesArray",
      "",
      "[Removed Lines]",
      "30: from qiskit.quantum_info import SparsePauliOp, Pauli, Statevector",
      "",
      "[Added Lines]",
      "30: from qiskit.quantum_info import SparsePauliOp, Pauli",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "107:                     decoded = [decoded]",
      "108:                 self.assertTrue(all(isinstance(item, QuantumCircuit) for item in decoded))",
      "111:     def test_coder_operators(self):",
      "112:         \"\"\"Test runtime encoder and decoder for operators.\"\"\"",
      "117:         subtests = (",
      "118:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[2]),",
      "120:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[1 + 2j]),",
      "121:         )",
      "123:         for operator in subtests:",
      "",
      "[Removed Lines]",
      "110:     @skip(\"Skip until qiskit-ibm-provider/736 is merged\")",
      "114:         coeff_x = Parameter(\"x\")",
      "115:         coeff_y = coeff_x + 1",
      "119:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[coeff_y]),",
      "",
      "[Added Lines]",
      "113:         # TODO: Re-enable use of Parameter when #1521 is fixed.",
      "114:         # coeff_x = Parameter(\"x\")",
      "115:         # coeff_y = coeff_x + 1",
      "119:             # SparsePauliOp(Pauli(\"XYZX\"), coeffs=[coeff_y]),",
      "121:             Pauli(\"XYZ\"),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "225:         subtests = (",
      "226:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[2]),",
      "228:         )",
      "229:         for operator in subtests:",
      "230:             with self.subTest(operator=operator):",
      "",
      "[Removed Lines]",
      "227:             Statevector([1, 0]),",
      "",
      "[Added Lines]",
      "228:             Pauli(\"XYZX\"),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "531:             decoded = json.loads(encoded, cls=RuntimeDecoder)[\"primitive_result\"]",
      "532:             self.assertIsInstance(decoded, PrimitiveResult)",
      "533:             self.assert_primitive_results_equal(primitive_result, decoded)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "536:     def test_unknown_settings(self):",
      "537:         \"\"\"Test settings not on whitelisted path.\"\"\"",
      "538:         random_settings = {",
      "539:             \"__type__\": \"settings\",",
      "540:             \"__module__\": \"subprocess\",",
      "541:             \"__class__\": \"Popen\",",
      "542:             \"__value__\": {",
      "543:                 \"args\": [\"echo\", \"hi\"]",
      "544:             }",
      "545:         }",
      "546:         encoded = json.dumps(random_settings)",
      "547:         decoded = json.loads(encoded, cls=RuntimeDecoder)",
      "548:         self.assertIsInstance(decoded, dict)",
      "549:         self.assertDictEqual(decoded, random_settings)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9ede911df5ec2cbeed85e0ffd77b12c6d45fd4a0",
      "candidate_info": {
        "commit_hash": "9ede911df5ec2cbeed85e0ffd77b12c6d45fd4a0",
        "repo": "Qiskit/qiskit-ibm-runtime",
        "commit_url": "https://github.com/Qiskit/qiskit-ibm-runtime/commit/9ede911df5ec2cbeed85e0ffd77b12c6d45fd4a0",
        "files": [
          "test/unit/test_data_serialization.py"
        ],
        "message": "fix black (#1525)",
        "before_after_code_files": [
          "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py"
          ],
          "candidate": [
            "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py"
          ]
        }
      },
      "candidate_diff": {
        "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py": [
          "File: test/unit/test_data_serialization.py -> test/unit/test_data_serialization.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:             \"__type__\": \"settings\",",
          "540:             \"__module__\": \"subprocess\",",
          "541:             \"__class__\": \"Popen\",",
          "545:         }",
          "546:         encoded = json.dumps(random_settings)",
          "547:         decoded = json.loads(encoded, cls=RuntimeDecoder)",
          "",
          "[Removed Lines]",
          "542:             \"__value__\": {",
          "543:                 \"args\": [\"echo\", \"hi\"]",
          "544:             }",
          "",
          "[Added Lines]",
          "542:             \"__value__\": {\"args\": [\"echo\", \"hi\"]},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e0a25975e1202fba14eabba48ce61ac688e32cc",
      "candidate_info": {
        "commit_hash": "4e0a25975e1202fba14eabba48ce61ac688e32cc",
        "repo": "Qiskit/qiskit-ibm-runtime",
        "commit_url": "https://github.com/Qiskit/qiskit-ibm-runtime/commit/4e0a25975e1202fba14eabba48ce61ac688e32cc",
        "files": [
          "test/unit/test_data_serialization.py"
        ],
        "message": "Remove opflow and algorithms from serialization tests (#1085)\n\n* Remove opflow from tests\n\n* Re-add test for PauliSumOp\n\n* Fix lint\n\n* Fix black\n\n---------\n\nCo-authored-by: Kevin Tian <kevin.tian@ibm.com>",
        "before_after_code_files": [
          "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py"
          ],
          "candidate": [
            "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py"
          ]
        }
      },
      "candidate_diff": {
        "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py": [
          "File: test/unit/test_data_serialization.py -> test/unit/test_data_serialization.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: from datetime import datetime",
          "22: import numpy as np",
          "32: from qiskit.circuit import Parameter, QuantumCircuit",
          "33: from qiskit.test.reference_circuits import ReferenceCircuits",
          "34: from qiskit.circuit.library import EfficientSU2, CXGate, PhaseGate, U2Gate",
          "58: from qiskit.providers.fake_provider import FakeNairobi",
          "59: from qiskit.quantum_info import SparsePauliOp, Pauli, Statevector",
          "60: from qiskit.result import Result",
          "61: from qiskit_aer.noise import NoiseModel",
          "63: from qiskit_ibm_runtime.utils import RuntimeEncoder, RuntimeDecoder",
          "64: from .mock.fake_runtime_client import CustomResultRuntimeJob",
          "65: from .mock.fake_runtime_service import FakeRuntimeService",
          "",
          "[Removed Lines]",
          "23: import scipy.sparse",
          "24: from qiskit.algorithms.optimizers import (",
          "25:     ADAM,",
          "26:     GSLS,",
          "27:     SPSA,",
          "28:     QNSPSA,",
          "29:     L_BFGS_B,",
          "30:     NELDER_MEAD,",
          "31: )",
          "35: from qiskit.opflow import (",
          "36:     PauliSumOp,",
          "37:     MatrixOp,",
          "38:     PauliOp,",
          "39:     CircuitOp,",
          "40:     EvolvedOp,",
          "41:     TaperedPauliSumOp,",
          "42:     Z2Symmetries,",
          "43:     I,",
          "44:     X,",
          "45:     Y,",
          "46:     Z,",
          "47:     StateFn,",
          "48:     CircuitStateFn,",
          "49:     DictStateFn,",
          "50:     VectorStateFn,",
          "51:     OperatorStateFn,",
          "52:     SparseVectorStateFn,",
          "53:     CVaRMeasurement,",
          "54:     ComposedOp,",
          "55:     SummedOp,",
          "56:     TensoredOp,",
          "57: )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:     def test_coder_operators(self):",
          "127:         \"\"\"Test runtime encoder and decoder for operators.\"\"\"",
          "128:         coeff_x = Parameter(\"x\")",
          "129:         coeff_y = coeff_x + 1",
          "142:         subtests = (",
          "164:         )",
          "165:         for operator in subtests:",
          "166:             with self.subTest(operator=operator):",
          "167:                 encoded = json.dumps(operator, cls=RuntimeEncoder)",
          "168:                 self.assertIsInstance(encoded, str)",
          "196:     def test_coder_noise_model(self):",
          "197:         \"\"\"Test encoding and decoding a noise model.\"\"\"",
          "",
          "[Removed Lines]",
          "130:         quantum_circuit = QuantumCircuit(1)",
          "131:         quantum_circuit.h(0)",
          "132:         operator = 2.0 * I ^ I",
          "133:         z2_symmetries = Z2Symmetries(",
          "134:             [Pauli(\"IIZI\"), Pauli(\"ZIII\")],",
          "135:             [Pauli(\"IIXI\"), Pauli(\"XIII\")],",
          "136:             [1, 3],",
          "137:             [-1, 1],",
          "138:         )",
          "139:         isqrt2 = 1 / np.sqrt(2)",
          "140:         sparse = scipy.sparse.csr_matrix([[0, isqrt2, 0, isqrt2]])",
          "143:             PauliSumOp(SparsePauliOp(Pauli(\"XYZX\"), coeffs=[2]), coeff=3),",
          "144:             PauliSumOp(SparsePauliOp(Pauli(\"XYZX\"), coeffs=[1]), coeff=coeff_y),",
          "145:             PauliSumOp(SparsePauliOp(Pauli(\"XYZX\"), coeffs=[1 + 2j]), coeff=3 - 2j),",
          "146:             PauliSumOp.from_list([(\"II\", -1.052373245772859), (\"IZ\", 0.39793742484318045)]),",
          "147:             MatrixOp(primitive=np.array([[0, -1j], [1j, 0]]), coeff=coeff_x),",
          "148:             PauliOp(primitive=Pauli(\"Y\"), coeff=coeff_x),",
          "149:             CircuitOp(quantum_circuit, coeff=coeff_x),",
          "150:             EvolvedOp(operator, coeff=coeff_x),",
          "151:             TaperedPauliSumOp(SparsePauliOp(Pauli(\"XYZX\"), coeffs=[2]), z2_symmetries),",
          "152:             StateFn(quantum_circuit, coeff=coeff_x),",
          "153:             CircuitStateFn(quantum_circuit, is_measurement=True),",
          "154:             DictStateFn(\"1\" * 3, is_measurement=True),",
          "155:             VectorStateFn(np.ones(2**3, dtype=complex)),",
          "156:             OperatorStateFn(CircuitOp(QuantumCircuit(1))),",
          "157:             SparseVectorStateFn(sparse),",
          "158:             Statevector([1, 0]),",
          "159:             CVaRMeasurement(Z, 0.2),",
          "160:             ComposedOp([(X ^ Y ^ Z), (Z ^ X ^ Y ^ Z).to_matrix_op()]),",
          "161:             SummedOp([X ^ X * 2, Y ^ Y], 2),",
          "162:             TensoredOp([(X ^ Y), (Z ^ I)]),",
          "163:             (Z ^ Z) ^ (I ^ 2),",
          "169:                 decoded = json.loads(encoded, cls=RuntimeDecoder)",
          "170:                 self.assertEqual(operator, decoded)",
          "172:     def test_coder_optimizers(self):",
          "173:         \"\"\"Test runtime encoder and decoder for optimizers.\"\"\"",
          "174:         subtests = (",
          "175:             (ADAM, {\"maxiter\": 100, \"amsgrad\": True}),",
          "176:             (GSLS, {\"maxiter\": 50, \"min_step_size\": 0.01}),",
          "177:             (SPSA, {\"maxiter\": 10, \"learning_rate\": 0.01, \"perturbation\": 0.1}),",
          "178:             (QNSPSA, {\"fidelity\": 123, \"maxiter\": 25, \"resamplings\": {1: 100, 2: 50}}),",
          "179:             # some SciPy optimizers only work with default arguments due to Qiskit/qiskit-terra#6682",
          "180:             (L_BFGS_B, {}),",
          "181:             (NELDER_MEAD, {}),",
          "182:             # Enable when https://github.com/scikit-quant/scikit-quant/issues/24 is fixed",
          "183:             # (IMFIL, {\"maxiter\": 20}),",
          "184:             # (SNOBFIT, {\"maxiter\": 200, \"maxfail\": 20}),",
          "185:         )",
          "186:         for opt_cls, settings in subtests:",
          "187:             with self.subTest(opt_cls=opt_cls):",
          "188:                 optimizer = opt_cls(**settings)",
          "189:                 encoded = json.dumps(optimizer, cls=RuntimeEncoder)",
          "190:                 self.assertIsInstance(encoded, str)",
          "191:                 decoded = json.loads(encoded, cls=RuntimeDecoder)",
          "192:                 self.assertTrue(isinstance(decoded, opt_cls))",
          "193:                 for key, value in settings.items():",
          "194:                     self.assertEqual(decoded.settings[key], value)",
          "",
          "[Added Lines]",
          "97:         # filter warnings triggered by opflow imports",
          "98:         with warnings.catch_warnings():",
          "99:             warnings.filterwarnings(",
          "100:                 \"ignore\", category=DeprecationWarning, module=r\"qiskit\\.opflow\\.\"",
          "101:             )",
          "102:             from qiskit.opflow import PauliSumOp  # pylint: disable=import-outside-toplevel",
          "104:         # catch warnings triggered by opflow use",
          "105:         with warnings.catch_warnings(record=True) as w_log:",
          "106:             deprecated_op = PauliSumOp(SparsePauliOp(Pauli(\"XYZX\"), coeffs=[2]))",
          "107:             self.assertTrue(len(w_log) > 0)",
          "113:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[2]),",
          "114:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[coeff_y]),",
          "115:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[1 + 2j]),",
          "116:             deprecated_op,",
          "124:                 with warnings.catch_warnings():",
          "125:                     # filter warnings triggered by opflow imports",
          "126:                     # in L146 of utils/json.py",
          "127:                     warnings.filterwarnings(",
          "128:                         \"ignore\", category=DeprecationWarning, module=r\"qiskit\\.opflow\\.\"",
          "129:                     )",
          "130:                     warnings.filterwarnings(",
          "131:                         \"ignore\",",
          "132:                         category=DeprecationWarning,",
          "133:                         module=r\"qiskit_ibm_runtime\\.utils\\.json\",",
          "134:                     )",
          "135:                     decoded = json.loads(encoded, cls=RuntimeDecoder)",
          "136:                     self.assertEqual(operator, decoded)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "268:         temp_fp.close()",
          "270:         subtests = (",
          "273:             Statevector([1, 0]),",
          "274:         )",
          "275:         for operator in subtests:",
          "",
          "[Removed Lines]",
          "271:             PauliSumOp(SparsePauliOp(Pauli(\"XYZX\"), coeffs=[2]), coeff=3),",
          "272:             DictStateFn(\"1\" * 3, is_measurement=True),",
          "",
          "[Added Lines]",
          "213:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[2]),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efa7f4dfca3ded3acf8765944f135203f02234b1",
      "candidate_info": {
        "commit_hash": "efa7f4dfca3ded3acf8765944f135203f02234b1",
        "repo": "Qiskit/qiskit-ibm-runtime",
        "commit_url": "https://github.com/Qiskit/qiskit-ibm-runtime/commit/efa7f4dfca3ded3acf8765944f135203f02234b1",
        "files": [
          "qiskit_ibm_runtime/utils/json.py",
          "test/unit/test_data_serialization.py"
        ],
        "message": "Merge pull request from GHSA-x4x5-jv3x-9c7m\n\n* restrict import path\n\n* add test",
        "before_after_code_files": [
          "qiskit_ibm_runtime/utils/json.py||qiskit_ibm_runtime/utils/json.py",
          "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "qiskit_ibm_runtime/utils/json.py||qiskit_ibm_runtime/utils/json.py",
            "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py"
          ],
          "candidate": [
            "qiskit_ibm_runtime/utils/json.py||qiskit_ibm_runtime/utils/json.py",
            "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py"
          ]
        }
      },
      "candidate_diff": {
        "qiskit_ibm_runtime/utils/json.py||qiskit_ibm_runtime/utils/json.py": [
          "File: qiskit_ibm_runtime/utils/json.py -> qiskit_ibm_runtime/utils/json.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:                 # to deserialize load qpy circuit and return first instruction object in that circuit.",
          "370:                 circuit = _decode_and_deserialize(obj_val, load)[0]",
          "371:                 return circuit.data[0][0]",
          "373:                 return _deserialize_from_settings(",
          "374:                     mod_name=obj[\"__module__\"],",
          "375:                     class_name=obj[\"__class__\"],",
          "",
          "[Removed Lines]",
          "372:             if obj_type == \"settings\":",
          "",
          "[Added Lines]",
          "372:             if obj_type == \"settings\" and obj[\"__module__\"].startswith(",
          "373:                 \"qiskit.quantum_info.operators\"",
          "374:             ):",
          "",
          "---------------"
        ],
        "test/unit/test_data_serialization.py||test/unit/test_data_serialization.py": [
          "File: test/unit/test_data_serialization.py -> test/unit/test_data_serialization.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: from qiskit.circuit.library import EfficientSU2, CXGate, PhaseGate, U2Gate",
          "29: import qiskit.quantum_info as qi",
          "31: from qiskit.result import Result, Counts",
          "32: from qiskit.primitives.containers.bindings_array import BindingsArray",
          "33: from qiskit.primitives.containers.observables_array import ObservablesArray",
          "",
          "[Removed Lines]",
          "30: from qiskit.quantum_info import SparsePauliOp, Pauli, Statevector",
          "",
          "[Added Lines]",
          "30: from qiskit.quantum_info import SparsePauliOp, Pauli",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:                     decoded = [decoded]",
          "108:                 self.assertTrue(all(isinstance(item, QuantumCircuit) for item in decoded))",
          "111:     def test_coder_operators(self):",
          "112:         \"\"\"Test runtime encoder and decoder for operators.\"\"\"",
          "117:         subtests = (",
          "118:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[2]),",
          "120:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[1 + 2j]),",
          "121:         )",
          "123:         for operator in subtests:",
          "",
          "[Removed Lines]",
          "110:     @skip(\"Skip until qiskit-ibm-provider/736 is merged\")",
          "114:         coeff_x = Parameter(\"x\")",
          "115:         coeff_y = coeff_x + 1",
          "119:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[coeff_y]),",
          "",
          "[Added Lines]",
          "113:         # TODO: Re-enable use of Parameter when #1521 is fixed.",
          "114:         # coeff_x = Parameter(\"x\")",
          "115:         # coeff_y = coeff_x + 1",
          "119:             # SparsePauliOp(Pauli(\"XYZX\"), coeffs=[coeff_y]),",
          "121:             Pauli(\"XYZ\"),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "225:         subtests = (",
          "226:             SparsePauliOp(Pauli(\"XYZX\"), coeffs=[2]),",
          "228:         )",
          "229:         for operator in subtests:",
          "230:             with self.subTest(operator=operator):",
          "",
          "[Removed Lines]",
          "227:             Statevector([1, 0]),",
          "",
          "[Added Lines]",
          "228:             Pauli(\"XYZX\"),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "531:             decoded = json.loads(encoded, cls=RuntimeDecoder)[\"primitive_result\"]",
          "532:             self.assertIsInstance(decoded, PrimitiveResult)",
          "533:             self.assert_primitive_results_equal(primitive_result, decoded)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "536:     def test_unknown_settings(self):",
          "537:         \"\"\"Test settings not on whitelisted path.\"\"\"",
          "538:         random_settings = {",
          "539:             \"__type__\": \"settings\",",
          "540:             \"__module__\": \"subprocess\",",
          "541:             \"__class__\": \"Popen\",",
          "542:             \"__value__\": {",
          "543:                 \"args\": [\"echo\", \"hi\"]",
          "544:             }",
          "545:         }",
          "546:         encoded = json.dumps(random_settings)",
          "547:         decoded = json.loads(encoded, cls=RuntimeDecoder)",
          "548:         self.assertIsInstance(decoded, dict)",
          "549:         self.assertDictEqual(decoded, random_settings)",
          "",
          "---------------"
        ]
      }
    }
  ]
}