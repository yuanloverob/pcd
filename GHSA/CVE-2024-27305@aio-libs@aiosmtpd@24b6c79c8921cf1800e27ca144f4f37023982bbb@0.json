{
  "cve_id": "CVE-2024-27305",
  "cve_desc": "aiosmtpd is a reimplementation of the Python stdlib smtpd.py based on asyncio. aiosmtpd is vulnerable to inbound SMTP smuggling. SMTP smuggling is a novel vulnerability based on not so novel interpretation differences of the SMTP protocol. By exploiting SMTP smuggling, an attacker may send smuggle/spoof e-mails with fake sender addresses, allowing advanced phishing attacks. This issue is also existed in other SMTP software like Postfix. With the right SMTP server constellation, an attacker can send spoofed e-mails to inbound/receiving aiosmtpd instances. This issue has been addressed in version 1.4.5. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "aio-libs/aiosmtpd",
  "patch_hash": "24b6c79c8921cf1800e27ca144f4f37023982bbb",
  "patch_info": {
    "commit_hash": "24b6c79c8921cf1800e27ca144f4f37023982bbb",
    "repo": "aio-libs/aiosmtpd",
    "commit_url": "https://github.com/aio-libs/aiosmtpd/commit/24b6c79c8921cf1800e27ca144f4f37023982bbb",
    "files": [
      "aiosmtpd/smtp.py",
      "aiosmtpd/tests/test_smtpsmuggling.py"
    ],
    "message": "Merge pull request from GHSA-pr2m-px7j-xg65\n\n* SMTP Smuggling Fix\n\nAdapted adherence to RFC 5321 \u00a7 2.3.8 to fix SMTP smuggling issues (https://www.rfc-editor.org/rfc/rfc5321#section-2.3.8)\n\n* Apply suggestions from code review\n\nCo-authored-by: Sam Bull <git@sambull.org>\n\n* Add files via upload\n\n* Update test_smtpsmuggling.py\n\n---------\n\nCo-authored-by: Sam Bull <git@sambull.org>",
    "before_after_code_files": [
      "aiosmtpd/smtp.py||aiosmtpd/smtp.py",
      "aiosmtpd/tests/test_smtpsmuggling.py||aiosmtpd/tests/test_smtpsmuggling.py"
    ]
  },
  "patch_diff": {
    "aiosmtpd/smtp.py||aiosmtpd/smtp.py": [
      "File: aiosmtpd/smtp.py -> aiosmtpd/smtp.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "87: EMPTY_BARR = bytearray()",
      "88: EMPTYBYTES = b''",
      "89: MISSING = _Missing.MISSING",
      "91: VALID_AUTHMECH = re.compile(r\"[A-Z0-9_-]+\\Z\")",
      "93: # https://tools.ietf.org/html/rfc3207.html#page-3",
      "",
      "[Removed Lines]",
      "90: NEWLINE = '\\n'",
      "",
      "[Added Lines]",
      "90: NEWLINE = '\\r\\n'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1427:             # Since eof_received cancels this coroutine,",
      "1428:             # readuntil() can never raise asyncio.IncompleteReadError.",
      "1429:             try:",
      "1431:                 log.debug('DATA readline: %s', line)",
      "1433:             except asyncio.CancelledError:",
      "1434:                 # The connection got reset during the DATA command.",
      "1435:                 log.info('Connection lost during DATA')",
      "",
      "[Removed Lines]",
      "1430:                 line: bytes = await self._reader.readuntil()",
      "1432:                 assert line.endswith(b'\\n')",
      "",
      "[Added Lines]",
      "1430:                 # https://datatracker.ietf.org/doc/html/rfc5321#section-2.3.8",
      "1431:                 line: bytes = await self._reader.readuntil(b'\\r\\n')",
      "1433:                 assert line.endswith(b'\\r\\n')",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1446:                 data *= 0",
      "1447:                 # Drain the stream anyways",
      "1448:                 line = await self._reader.read(e.consumed)",
      "1450:             # A lone dot in a line signals the end of DATA.",
      "1451:             if not line_fragments and line == b'.\\r\\n':",
      "1452:                 break",
      "",
      "[Removed Lines]",
      "1449:                 assert not line.endswith(b'\\n')",
      "",
      "[Added Lines]",
      "1450:                 assert not line.endswith(b'\\r\\n')",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1458:                 # Discard data immediately to prevent memory pressure",
      "1459:                 data *= 0",
      "1460:             line_fragments.append(line)",
      "1462:                 # Record data only if state is \"NOMINAL\"",
      "1463:                 if state == _DataState.NOMINAL:",
      "1464:                     line = EMPTY_BARR.join(line_fragments)",
      "",
      "[Removed Lines]",
      "1461:             if line.endswith(b'\\n'):",
      "",
      "[Added Lines]",
      "1462:             if line.endswith(b'\\r\\n'):",
      "",
      "---------------"
    ],
    "aiosmtpd/tests/test_smtpsmuggling.py||aiosmtpd/tests/test_smtpsmuggling.py": [
      "File: aiosmtpd/tests/test_smtpsmuggling.py -> aiosmtpd/tests/test_smtpsmuggling.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: # Copyright 2014-2021 The aiosmtpd Developers",
      "2: # SPDX-License-Identifier: Apache-2.0",
      "4: \"\"\"Test SMTP smuggling.\"\"\"",
      "6: from email.mime.text import MIMEText",
      "7: from smtplib import SMTP, SMTP_SSL",
      "8: from typing import Generator, Union",
      "10: import pytest",
      "11: import smtplib",
      "13: from aiosmtpd.controller import Controller",
      "14: from aiosmtpd.testing.helpers import ReceivingHandler",
      "15: from aiosmtpd.testing.statuscodes import SMTP_STATUS_CODES as S",
      "17: from aiosmtpd.smtp import SMTP as Server",
      "18: from aiosmtpd.smtp import Session as ServerSession",
      "19: from aiosmtpd.smtp import Envelope",
      "21: from .conftest import Global, controller_data, handler_data",
      "23: from aiosmtpd.testing.helpers import (",
      "24:     ReceivingHandler",
      "25: )",
      "27: def new_data(self, msg):",
      "28:         self.putcmd(\"data\")",
      "30:         (code, repl) = self.getreply()",
      "31:         if self.debuglevel > 0:",
      "32:             self._print_debug('data:', (code, repl))",
      "33:         if code != 354:",
      "34:             raise SMTPDataError(code, repl)",
      "35:         else:",
      "36:             ##### Patching input encoding so we can send raw messages",
      "37:             #if isinstance(msg, str):",
      "38:             #    msg = smtplib._fix_eols(msg).encode('ascii')",
      "39:             #q = smtplib._quote_periods(msg)",
      "40:             #if q[-2:] != smtplib.bCRLF:",
      "41:             #    q = q + smtplib.bCRLF",
      "42:             #q = q + b\".\" + smtplib.bCRLF",
      "43:             q = msg",
      "44:             self.send(q)",
      "45:             (code, msg) = self.getreply()",
      "46:             if self.debuglevel > 0:",
      "47:                 self._print_debug('data:', (code, msg))",
      "48:             return (code, msg)",
      "50: def return_unchanged(data):",
      "51:     return data",
      "53: class TestSmuggling:",
      "54:     @handler_data(class_=ReceivingHandler)",
      "55:     def test_smtp_smuggling(self, plain_controller, client):",
      "56:         smtplib._fix_eols = return_unchanged",
      "57:         smtplib._quote_periods = return_unchanged",
      "58:         smtplib.SMTP.data = new_data",
      "60:         handler = plain_controller.handler",
      "61:         sender = \"sender@example.com\"",
      "62:         recipients = [\"rcpt1@example.com\"]",
      "63:         resp = client.helo(\"example.com\")",
      "64:         assert resp == S.S250_FQDN",
      "65:         # Trying SMTP smuggling with a fake \\n.\\r\\n end-of-data sequence.",
      "66:         message_data = b\"\"\"\\",
      "67: From: Anne Person <anne@example.com>\\r\\n\\",
      "68: To: Bart Person <bart@example.com>\\r\\n\\",
      "69: Subject: A test\\r\\n\\",
      "70: Message-ID: <ant>\\r\\n\\",
      "71: \\r\\n\\",
      "72: Testing\\",
      "73: \\n.\\r\\n\\",
      "74: NO SMUGGLING",
      "75: \\r\\n.\\r\\n\\",
      "76: \"\"\"",
      "77:         results = client.sendmail(sender, recipients, message_data)",
      "78:         client.quit()",
      "79:         assert b\"NO SMUGGLING\" in handler.box[0].content",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "242f226a895e3db7d2af3e6db9c42ac4e7412644",
      "candidate_info": {
        "commit_hash": "242f226a895e3db7d2af3e6db9c42ac4e7412644",
        "repo": "aio-libs/aiosmtpd",
        "commit_url": "https://github.com/aio-libs/aiosmtpd/commit/242f226a895e3db7d2af3e6db9c42ac4e7412644",
        "files": [
          "aiosmtpd/__init__.py",
          "aiosmtpd/docs/NEWS.rst",
          "aiosmtpd/tests/test_smtpsmuggling.py"
        ],
        "message": "Release v1.4.5 (#415)",
        "before_after_code_files": [
          "aiosmtpd/__init__.py||aiosmtpd/__init__.py",
          "aiosmtpd/tests/test_smtpsmuggling.py||aiosmtpd/tests/test_smtpsmuggling.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "aiosmtpd/tests/test_smtpsmuggling.py||aiosmtpd/tests/test_smtpsmuggling.py"
          ],
          "candidate": [
            "aiosmtpd/tests/test_smtpsmuggling.py||aiosmtpd/tests/test_smtpsmuggling.py"
          ]
        }
      },
      "candidate_diff": {
        "aiosmtpd/__init__.py||aiosmtpd/__init__.py": [
          "File: aiosmtpd/__init__.py -> aiosmtpd/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import warnings",
          "10: def _get_or_new_eventloop() -> asyncio.AbstractEventLoop:",
          "",
          "[Removed Lines]",
          "7: __version__ = \"1.4.4.post2\"",
          "",
          "[Added Lines]",
          "7: __version__ = \"1.4.5\"",
          "",
          "---------------"
        ],
        "aiosmtpd/tests/test_smtpsmuggling.py||aiosmtpd/tests/test_smtpsmuggling.py": [
          "File: aiosmtpd/tests/test_smtpsmuggling.py -> aiosmtpd/tests/test_smtpsmuggling.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # SPDX-License-Identifier: Apache-2.0",
          "4: \"\"\"Test SMTP smuggling.\"\"\"",
          "",
          "[Removed Lines]",
          "1: # Copyright 2014-2021 The aiosmtpd Developers",
          "",
          "[Added Lines]",
          "1: # Copyright 2024 The aiosmtpd Developers",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d073363bf26e1cbb4097a1ff0cc81ee9642d569",
      "candidate_info": {
        "commit_hash": "9d073363bf26e1cbb4097a1ff0cc81ee9642d569",
        "repo": "aio-libs/aiosmtpd",
        "commit_url": "https://github.com/aio-libs/aiosmtpd/commit/9d073363bf26e1cbb4097a1ff0cc81ee9642d569",
        "files": [
          "aiosmtpd/tests/test_smtpsmuggling.py"
        ],
        "message": "Update test_smtpsmuggling.py (#416)\n\n---------\n\nCo-authored-by: Sam Bull <git@sambull.org>",
        "before_after_code_files": [
          "aiosmtpd/tests/test_smtpsmuggling.py||aiosmtpd/tests/test_smtpsmuggling.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "aiosmtpd/tests/test_smtpsmuggling.py||aiosmtpd/tests/test_smtpsmuggling.py"
          ],
          "candidate": [
            "aiosmtpd/tests/test_smtpsmuggling.py||aiosmtpd/tests/test_smtpsmuggling.py"
          ]
        }
      },
      "candidate_diff": {
        "aiosmtpd/tests/test_smtpsmuggling.py||aiosmtpd/tests/test_smtpsmuggling.py": [
          "File: aiosmtpd/tests/test_smtpsmuggling.py -> aiosmtpd/tests/test_smtpsmuggling.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: \"\"\"Test SMTP smuggling.\"\"\"",
          "11: import smtplib",
          "14: from aiosmtpd.testing.helpers import ReceivingHandler",
          "15: from aiosmtpd.testing.statuscodes import SMTP_STATUS_CODES as S",
          "27: def new_data(self, msg):",
          "31:         if self.debuglevel > 0:",
          "50: def return_unchanged(data):",
          "51:     return data",
          "53: class TestSmuggling:",
          "54:     @handler_data(class_=ReceivingHandler)",
          "55:     def test_smtp_smuggling(self, plain_controller, client):",
          "",
          "[Removed Lines]",
          "6: from email.mime.text import MIMEText",
          "7: from smtplib import SMTP, SMTP_SSL",
          "8: from typing import Generator, Union",
          "10: import pytest",
          "13: from aiosmtpd.controller import Controller",
          "17: from aiosmtpd.smtp import SMTP as Server",
          "18: from aiosmtpd.smtp import Session as ServerSession",
          "19: from aiosmtpd.smtp import Envelope",
          "21: from .conftest import Global, controller_data, handler_data",
          "23: from aiosmtpd.testing.helpers import (",
          "24:     ReceivingHandler",
          "25: )",
          "28:         self.putcmd(\"data\")",
          "30:         (code, repl) = self.getreply()",
          "32:             self._print_debug('data:', (code, repl))",
          "33:         if code != 354:",
          "34:             raise SMTPDataError(code, repl)",
          "35:         else:",
          "36:             ##### Patching input encoding so we can send raw messages",
          "37:             #if isinstance(msg, str):",
          "38:             #    msg = smtplib._fix_eols(msg).encode('ascii')",
          "39:             #q = smtplib._quote_periods(msg)",
          "40:             #if q[-2:] != smtplib.bCRLF:",
          "41:             #    q = q + smtplib.bCRLF",
          "42:             #q = q + b\".\" + smtplib.bCRLF",
          "43:             q = msg",
          "44:             self.send(q)",
          "45:             (code, msg) = self.getreply()",
          "46:             if self.debuglevel > 0:",
          "47:                 self._print_debug('data:', (code, msg))",
          "48:             return (code, msg)",
          "",
          "[Added Lines]",
          "7: import re",
          "12: from .conftest import handler_data",
          "16:     self.putcmd(\"data\")",
          "17:     (code, repl) = self.getreply()",
          "18:     if self.debuglevel > 0:",
          "19:         self._print_debug('data:', (code, repl))",
          "20:     if code != 354:",
          "21:         raise smtplib.SMTPDataError(code, repl)",
          "22:     else:",
          "23:         q = msg",
          "24:         self.send(q)",
          "25:         (code, msg) = self.getreply()",
          "26:         if self.debuglevel > 0:",
          "27:             self._print_debug('data:', (code, msg))",
          "28:         return (code, msg)",
          "31: def orig_data(self, msg):",
          "32:     self.putcmd(\"data\")",
          "33:     (code, repl) = self.getreply()",
          "34:     if self.debuglevel > 0:",
          "35:         self._print_debug('data:', (code, repl))",
          "36:     if code != 354:",
          "37:         raise smtplib.SMTPDataError(code, repl)",
          "38:     else:",
          "39:         if isinstance(msg, str):",
          "40:             msg = _fix_eols(msg).encode('ascii')",
          "41:         q = _quote_periods(msg)",
          "42:         if q[-2:] != smtplib.bCRLF:",
          "43:             q = q + smtplib.bCRLF",
          "45:         q = q + b\".\" + smtplib.bCRLF",
          "46:         self.send(q)",
          "47:         (code, msg) = self.getreply()",
          "49:             self._print_debug('data:', (code, msg))",
          "50:         return (code, msg)",
          "53: def _fix_eols(data):",
          "54:     return re.sub(r'(?:\\r\\n|\\n|\\r(?!\\n))', smtplib.CRLF, data)",
          "57: def _quote_periods(bindata):",
          "58:     return re.sub(br'(?m)^\\.', b'..', bindata)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: NO SMUGGLING",
          "75: \\r\\n.\\r\\n\\",
          "76: \"\"\"",
          "78:         client.quit()",
          "79:         assert b\"NO SMUGGLING\" in handler.box[0].content",
          "",
          "[Removed Lines]",
          "77:         results = client.sendmail(sender, recipients, message_data)",
          "",
          "[Added Lines]",
          "89:         client.sendmail(sender, recipients, message_data)",
          "91:         smtplib._fix_eols = _fix_eols",
          "92:         smtplib._quote_periods = _quote_periods",
          "93:         smtplib.SMTP.data = orig_data",
          "",
          "---------------"
        ]
      }
    }
  ]
}