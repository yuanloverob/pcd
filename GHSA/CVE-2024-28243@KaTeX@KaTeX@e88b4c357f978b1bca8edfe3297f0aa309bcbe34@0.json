{
  "cve_id": "CVE-2024-28243",
  "cve_desc": "KaTeX is a JavaScript library for TeX math rendering on the web. KaTeX users who render untrusted mathematical expressions could encounter malicious input using `\\edef` that causes a near-infinite loop, despite setting `maxExpand` to avoid such loops. This can be used as an availability attack, where e.g. a client rendering another user's KaTeX input will be unable to use the site due to memory overflow, tying up the main thread, or stack overflow. Upgrade to KaTeX v0.16.10 to remove this vulnerability.",
  "repo": "KaTeX/KaTeX",
  "patch_hash": "e88b4c357f978b1bca8edfe3297f0aa309bcbe34",
  "patch_info": {
    "commit_hash": "e88b4c357f978b1bca8edfe3297f0aa309bcbe34",
    "repo": "KaTeX/KaTeX",
    "commit_url": "https://github.com/KaTeX/KaTeX/commit/e88b4c357f978b1bca8edfe3297f0aa309bcbe34",
    "files": [
      "docs/options.md",
      "src/MacroExpander.js",
      "test/katex-spec.js"
    ],
    "message": "fix: \\edef bypassing maxExpand via exponential blowup\n\nModify `\\edef`, and `expandTokens` more generally, to count the number\nof tokens in the entire expansion instead of just 1.  This prevents\nexponential blowup in the expanded tokens via a linear number of `\\edef`\nand apparent expansions.",
    "before_after_code_files": [
      "src/MacroExpander.js||src/MacroExpander.js",
      "test/katex-spec.js||test/katex-spec.js"
    ]
  },
  "patch_diff": {
    "src/MacroExpander.js||src/MacroExpander.js": [
      "File: src/MacroExpander.js -> src/MacroExpander.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "245:         return args;",
      "246:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "252:     countExpansion(amount: number): void {",
      "253:         this.expansionCount += amount;",
      "254:         if (this.expansionCount > this.settings.maxExpand) {",
      "255:             throw new ParseError(\"Too many expansions: infinite loop or \" +",
      "256:                 \"need to increase maxExpand setting\");",
      "257:         }",
      "258:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "276:             this.pushToken(topToken);",
      "277:             return false;",
      "278:         }",
      "284:         let tokens = expansion.tokens;",
      "285:         const args = this.consumeArgs(expansion.numArgs, expansion.delimiters);",
      "286:         if (expansion.numArgs) {",
      "",
      "[Removed Lines]",
      "279:         this.expansionCount++;",
      "280:         if (this.expansionCount > this.settings.maxExpand) {",
      "281:             throw new ParseError(\"Too many expansions: infinite loop or \" +",
      "282:                 \"need to increase maxExpand setting\");",
      "283:         }",
      "",
      "[Added Lines]",
      "291:         this.countExpansion(1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "375:                 output.push(token);",
      "376:             }",
      "377:         }",
      "378:         return output;",
      "379:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "388:         this.countExpansion(output.length);",
      "",
      "---------------"
    ],
    "test/katex-spec.js||test/katex-spec.js": [
      "File: test/katex-spec.js -> test/katex-spec.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "3997:         expect`\\gdef\\foo{\\foo}\\foo`.not.toParse(",
      "3998:             new Settings({maxExpand: 10}));",
      "3999:     });",
      "4000: });",
      "4002: describe(\"The \\\\mathchoice function\", function() {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4001:     it(\"should prevent exponential blowup via \\\\edef\", () => {",
      "4002:         expect`\\edef0{x}\\edef0{00}\\edef0{00}\\edef0{00}\\edef0{00}`.not.toParse(",
      "4003:             new Settings({maxExpand: 10}));",
      "4004:     });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bdb0be201794d22adaee05438b07a2830efea9da",
      "candidate_info": {
        "commit_hash": "bdb0be201794d22adaee05438b07a2830efea9da",
        "repo": "KaTeX/KaTeX",
        "commit_url": "https://github.com/KaTeX/KaTeX/commit/bdb0be201794d22adaee05438b07a2830efea9da",
        "files": [
          "docs/options.md",
          "src/MacroExpander.js",
          "src/defineMacro.js",
          "test/katex-spec.js"
        ],
        "message": "fix: Support `\\let` via `macros` option (#3738)\n\n* fix: Support `\\let` via `macros` option\n\nIssue #3737 turned out to be how we handled the return value of `expandOnce`.\nWe assumed that, if the return value isn't an `Array`, it's an\n`instanceof Token`.  This isn't necessary true with a user's `macros`\nobject, and given that we don't currently export `Token`, it's pretty\ndifficult to bypass.\n\nGiven that we never actually use the array return values from\n`expandOnce`, I changed the return value for `expandOnce` to either a\n`number` (to indicate the number of expanded tokens, so you could still\nlook up the tokens in the stack if you wanted to) or `false`\n(to indicate no expansion happened).  We can't use `0` for the latter\nbecause an actual expansion might result in zero tokens.\nThe resulting code is arguably cleaner.\n\nI also documented that `macros` can have object expansions, and\nspecified how to simulate `\\let`.\n\nFixes #3737\n\n* Revise macros documentation according to comments",
        "before_after_code_files": [
          "src/MacroExpander.js||src/MacroExpander.js",
          "src/defineMacro.js||src/defineMacro.js",
          "test/katex-spec.js||test/katex-spec.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/MacroExpander.js||src/MacroExpander.js",
            "test/katex-spec.js||test/katex-spec.js"
          ],
          "candidate": [
            "src/MacroExpander.js||src/MacroExpander.js",
            "test/katex-spec.js||test/katex-spec.js"
          ]
        }
      },
      "candidate_diff": {
        "src/MacroExpander.js||src/MacroExpander.js": [
          "File: src/MacroExpander.js -> src/MacroExpander.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:         const topToken = this.popToken();",
          "269:         const name = topToken.text;",
          "270:         const expansion = !topToken.noexpand ? this._getExpansion(name) : null;",
          "",
          "[Removed Lines]",
          "267:     expandOnce(expandableOnly?: boolean): Token | Token[] {",
          "",
          "[Added Lines]",
          "267:     expandOnce(expandableOnly?: boolean): number | boolean {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "274:                 throw new ParseError(\"Undefined control sequence: \" + name);",
          "275:             }",
          "276:             this.pushToken(topToken);",
          "278:         }",
          "279:         this.expansionCount++;",
          "280:         if (this.expansionCount > this.settings.maxExpand) {",
          "",
          "[Removed Lines]",
          "277:             return topToken;",
          "",
          "[Added Lines]",
          "277:             return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "310:         }",
          "312:         this.pushTokens(tokens);",
          "314:     }",
          "",
          "[Removed Lines]",
          "313:         return tokens;",
          "",
          "[Added Lines]",
          "313:         return tokens.length;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "330:     expandNextToken(): Token {",
          "331:         for (;;) {",
          "339:                 }",
          "341:             }",
          "342:         }",
          "",
          "[Removed Lines]",
          "332:             const expanded = this.expandOnce();",
          "334:             if (expanded instanceof Token) {",
          "337:                 if (expanded.treatAsRelax) {",
          "338:                     expanded.text = \"\\\\relax\";",
          "340:                 return this.stack.pop();  // === expanded",
          "",
          "[Added Lines]",
          "332:             if (this.expandOnce() === false) {  // fully expanded",
          "333:                 const token = this.stack.pop();",
          "336:                 if (token.treatAsRelax) {",
          "337:                     token.text = \"\\\\relax\";",
          "339:                 return token;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "365:         const oldStackLength = this.stack.length;",
          "366:         this.pushTokens(tokens);",
          "367:         while (this.stack.length > oldStackLength) {",
          "375:                 }",
          "377:             }",
          "378:         }",
          "379:         return output;",
          "",
          "[Removed Lines]",
          "368:             const expanded = this.expandOnce(true); // expand only expandable tokens",
          "370:             if (expanded instanceof Token) {",
          "371:                 if (expanded.treatAsRelax) {",
          "373:                     expanded.noexpand = false;",
          "374:                     expanded.treatAsRelax = false;",
          "376:                 output.push(this.stack.pop());",
          "",
          "[Added Lines]",
          "368:             if (this.expandOnce(true) === false) {  // fully expanded",
          "369:                 const token = this.stack.pop();",
          "370:                 if (token.treatAsRelax) {",
          "372:                     token.noexpand = false;",
          "373:                     token.treatAsRelax = false;",
          "375:                 output.push(token);",
          "",
          "---------------"
        ],
        "src/defineMacro.js||src/defineMacro.js": [
          "File: src/defineMacro.js -> src/defineMacro.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "38:     expandOnce(expandableOnly?: boolean): Token | Token[];",
          "",
          "[Added Lines]",
          "38:     expandOnce(expandableOnly?: boolean): number | boolean;",
          "",
          "---------------"
        ],
        "test/katex-spec.js||test/katex-spec.js": [
          "File: test/katex-spec.js -> test/katex-spec.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "3499:         expect`\\futurelet\\foo\\frac1{2+\\foo}`.toParseLike`\\frac1{2+1}`;",
          "3500:     });",
          "3502:     it(\"\\\\newcommand doesn't change settings.macros\", () => {",
          "3503:         const macros = {};",
          "3504:         expect`\\newcommand\\foo{x^2}\\foo+\\foo`.toParse(new Settings({macros}));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3502:     it(\"macros argument can simulate \\\\let\", () => {",
          "3503:         expect(\"\\\\int\").toParseLike(\"\\\\int\\\\limits\", {macros: {",
          "3504:             \"\\\\Oldint\": {",
          "3505:                 tokens: [{text: \"\\\\int\", noexpand: true}],",
          "3506:                 numArgs: 0,",
          "3507:                 unexpandable: true,",
          "3508:             },",
          "3509:             \"\\\\int\": {",
          "3510:                 tokens: [{text: \"\\\\limits\"}, {text: \"\\\\Oldint\"}],",
          "3511:                 numArgs: 0,",
          "3512:             },",
          "3513:         }});",
          "3514:     });",
          "",
          "---------------"
        ]
      }
    }
  ]
}