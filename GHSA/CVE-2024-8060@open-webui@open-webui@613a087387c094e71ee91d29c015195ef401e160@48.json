{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "14e650077a94a9116a64f2fee0af1a48d6c873fa",
      "candidate_info": {
        "commit_hash": "14e650077a94a9116a64f2fee0af1a48d6c873fa",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/14e650077a94a9116a64f2fee0af1a48d6c873fa",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "557:             await __event_emitter__(",
          "558:                 {",
          "559:                     \"type\": \"message\",",
          "561:                 }",
          "562:             )",
          "",
          "[Removed Lines]",
          "560:                     \"data\": {\"content\": f\"![Generated Image]({image['url']})\"},",
          "",
          "[Added Lines]",
          "560:                     \"data\": {\"content\": f\"![Generated Image]({image['url']})\\n\"},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "30182d77cc3132fc74eb3cd2e80a7b4982cfef25",
      "candidate_info": {
        "commit_hash": "30182d77cc3132fc74eb3cd2e80a7b4982cfef25",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/30182d77cc3132fc74eb3cd2e80a7b4982cfef25",
        "files": [
          "backend/open_webui/config.py",
          "src/lib/components/admin/Settings/General.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/config.py||backend/open_webui/config.py",
          "src/lib/components/admin/Settings/General.svelte||src/lib/components/admin/Settings/General.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/config.py||backend/open_webui/config.py": [
          "File: backend/open_webui/config.py -> backend/open_webui/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "650:         pass",
          "653: ####################################",
          "654: # STORAGE PROVIDER",
          "655: ####################################",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "653: ####################################",
          "654: # LICENSE_KEY",
          "655: ####################################",
          "657: LICENSE_KEY = PersistentConfig(",
          "658:     \"LICENSE_KEY\",",
          "659:     \"license.key\",",
          "660:     os.environ.get(\"LICENSE_KEY\", \"\"),",
          "661: )",
          "",
          "---------------"
        ],
        "src/lib/components/admin/Settings/General.svelte||src/lib/components/admin/Settings/General.svelte": [
          "File: src/lib/components/admin/Settings/General.svelte -> src/lib/components/admin/Settings/General.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:       </div>",
          "168:      </div>",
          "171:       <div class=\"flex w-full justify-between items-center\">",
          "172:        <div class=\"text-xs\">",
          "173:         <div class=\"\">",
          "174:          {$i18n.t('Help')}",
          "175:         </div>",
          "176:         <div class=\" text-xs text-gray-500\">",
          "178:         </div>",
          "179:        </div>",
          "",
          "[Removed Lines]",
          "170:      <div class=\"\">",
          "177:          Learn how to use Open WebUI and get help from the community.",
          "",
          "[Added Lines]",
          "170:      <div class=\"mb-2\">",
          "177:          {$i18n.t('Discover how to use Open WebUI and seek support from the community.')}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:        </div>",
          "213:       </div>",
          "214:      </div>",
          "215:     </div>",
          "217:     <div class=\"mb-3\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:      <div class=\"mb-2\">",
          "217:       <div class=\"flex w-full justify-between items-center\">",
          "218:        <div class=\"text-xs\">",
          "219:         <div class=\"\">",
          "220:          {$i18n.t('License')}",
          "221:         </div>",
          "222:         <a",
          "223:          class=\" text-xs text-gray-500 underline\"",
          "224:          href=\"https://docs.openwebui.com/enterprise\"",
          "225:          target=\"_blank\"",
          "226:         >",
          "227:          {$i18n.t(",
          "228:           'Upgrade to a licensed plan for enhanced capabilities and dedicated support.'",
          "229:          )}",
          "230:         </a>",
          "231:        </div>",
          "233:        <!-- <button class=\" text-xs font-medium\">",
          "234:         {$i18n.t('Activate')}",
          "235:        </button> -->",
          "236:       </div>",
          "237:      </div>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "08cd749160ea265a0176941b5821eb3a6648da27",
      "candidate_info": {
        "commit_hash": "08cd749160ea265a0176941b5821eb3a6648da27",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/08cd749160ea265a0176941b5821eb3a6648da27",
        "files": [
          "backend/open_webui/routers/chats.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/chats.py||backend/open_webui/routers/chats.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/chats.py||backend/open_webui/routers/chats.py": [
          "File: backend/open_webui/routers/chats.py -> backend/open_webui/routers/chats.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:             \"user_id\": user.id,",
          "413:             \"chat_id\": id,",
          "414:             \"message_id\": message_id,",
          "416:     )",
          "418:     if event_emitter:",
          "",
          "[Removed Lines]",
          "415:         }",
          "",
          "[Added Lines]",
          "415:         },",
          "416:         False,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430:     return ChatResponse(**chat.model_dump())",
          "433: ############################",
          "434: # DeleteChatById",
          "435: ############################",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "434: ############################",
          "435: # SendChatMessageEventById",
          "436: ############################",
          "437: class EventForm(BaseModel):",
          "438:     type: str",
          "439:     data: dict",
          "442: @router.post(\"/{id}/messages/{message_id}/event\", response_model=Optional[bool])",
          "443: async def send_chat_message_event_by_id(",
          "444:     id: str, message_id: str, form_data: EventForm, user=Depends(get_verified_user)",
          "445: ):",
          "446:     chat = Chats.get_chat_by_id(id)",
          "448:     if not chat:",
          "449:         raise HTTPException(",
          "450:             status_code=status.HTTP_401_UNAUTHORIZED,",
          "451:             detail=ERROR_MESSAGES.ACCESS_PROHIBITED,",
          "452:         )",
          "454:     if chat.user_id != user.id and user.role != \"admin\":",
          "455:         raise HTTPException(",
          "456:             status_code=status.HTTP_401_UNAUTHORIZED,",
          "457:             detail=ERROR_MESSAGES.ACCESS_PROHIBITED,",
          "458:         )",
          "460:     event_emitter = get_event_emitter(",
          "461:         {",
          "462:             \"user_id\": user.id,",
          "463:             \"chat_id\": id,",
          "464:             \"message_id\": message_id,",
          "465:         }",
          "466:     )",
          "468:     try:",
          "469:         if event_emitter:",
          "470:             await event_emitter(form_data.model_dump())",
          "471:         else:",
          "472:             return False",
          "473:         return True",
          "474:     except:",
          "475:         return False",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70a5be08c74e7856944ed0b4570489cca6f5182a",
      "candidate_info": {
        "commit_hash": "70a5be08c74e7856944ed0b4570489cca6f5182a",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/70a5be08c74e7856944ed0b4570489cca6f5182a",
        "files": [
          "src/lib/components/admin/Settings/CodeExecution.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/admin/Settings/CodeExecution.svelte||src/lib/components/admin/Settings/CodeExecution.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Settings/CodeExecution.svelte||src/lib/components/admin/Settings/CodeExecution.svelte": [
          "File: src/lib/components/admin/Settings/CodeExecution.svelte -> src/lib/components/admin/Settings/CodeExecution.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:         </div>",
          "170:        </div>",
          "173:         <div class=\"text-gray-500 text-xs\">",
          "174:          {$i18n.t(",
          "175:           'Warning: Jupyter execution enables arbitrary code execution, posing severe security risks\u2014proceed with extreme caution.'",
          "",
          "[Removed Lines]",
          "172:        {#if config.CODE_EXECUTION_ENGINE === 'jupyter'}",
          "",
          "[Added Lines]",
          "172:        {#if config.CODE_INTERPRETER_ENGINE === 'jupyter'}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcbdfbd744c08272a8ea886bdd0f56d6887ef5dd",
      "candidate_info": {
        "commit_hash": "fcbdfbd744c08272a8ea886bdd0f56d6887ef5dd",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/fcbdfbd744c08272a8ea886bdd0f56d6887ef5dd",
        "files": [
          "backend/open_webui/utils/audit.py",
          "backend/open_webui/utils/auth.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/audit.py||backend/open_webui/utils/audit.py",
          "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/audit.py||backend/open_webui/utils/audit.py": [
          "File: backend/open_webui/utils/audit.py -> backend/open_webui/utils/audit.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:         auth_header = request.headers.get(\"Authorization\")",
          "196:         assert auth_header",
          "199:         return user",
          "",
          "[Removed Lines]",
          "197:         user = get_current_user(request, get_http_authorization_cred(auth_header))",
          "",
          "[Added Lines]",
          "197:         user = get_current_user(request, None, get_http_authorization_cred(auth_header))",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py": [
          "File: backend/open_webui/utils/auth.py -> backend/open_webui/utils/auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:         else:",
          "206:             # Refresh the user's last active timestamp asynchronously",
          "207:             # to prevent blocking the request",
          "209:         return user",
          "210:     else:",
          "211:         raise HTTPException(",
          "",
          "[Removed Lines]",
          "208:             background_tasks.add_task(Users.update_user_last_active_by_id, user.id)",
          "",
          "[Added Lines]",
          "208:             if background_tasks:",
          "209:                 background_tasks.add_task(Users.update_user_last_active_by_id, user.id)",
          "",
          "---------------"
        ]
      }
    }
  ]
}