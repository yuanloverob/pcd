{
  "cve_id": "CVE-2024-10846",
  "cve_desc": "The compose-go library component in versions v2.10-v2.4.0 allows an authorized user who sends malicious YAML payloads to cause the compose-go to consume excessive amount of Memory and CPU cycles while parsing YAML, such as used by Docker Compose from versions  v2.27.0 to v2.29.7 included",
  "repo": "docker/compose",
  "patch_hash": "d239f0f3187a2ed5404c61f83bd5e995c81600ff",
  "patch_info": {
    "commit_hash": "d239f0f3187a2ed5404c61f83bd5e995c81600ff",
    "repo": "docker/compose",
    "commit_url": "https://github.com/docker/compose/commit/d239f0f3187a2ed5404c61f83bd5e995c81600ff#diff-33ef32bf6c23acb95f5902d7097b7a1d5128ca061167ec0716715b0b9eeaa5f6R10",
    "files": [
      "cmd/compose/config.go",
      "go.mod",
      "go.sum",
      "pkg/compose/create.go",
      "pkg/e2e/container_name_test.go",
      "pkg/e2e/fixtures/container_name/compose.yaml"
    ],
    "message": "check container_name is not in use by another service we will create\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
    "before_after_code_files": [
      "cmd/compose/config.go||cmd/compose/config.go",
      "go.mod||go.mod",
      "go.sum||go.sum",
      "pkg/compose/create.go||pkg/compose/create.go",
      "pkg/e2e/container_name_test.go||pkg/e2e/container_name_test.go"
    ]
  },
  "patch_diff": {
    "cmd/compose/config.go||cmd/compose/config.go": [
      "File: cmd/compose/config.go -> cmd/compose/config.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "169:    return err",
      "170:   }",
      "172:   switch opts.Format {",
      "173:   case \"json\":",
      "174:    content, err = project.MarshalJSON()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:   if !opts.noConsistency {",
      "173:    err := project.CheckContainerNameUnicity()",
      "174:    if err != nil {",
      "175:     return err",
      "176:    }",
      "177:   }",
      "",
      "---------------"
    ],
    "go.mod||go.mod": [
      "File: go.mod -> go.mod",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:  github.com/Microsoft/go-winio v0.6.1",
      "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
      "9:  github.com/buger/goterm v1.0.4",
      "11:  github.com/containerd/console v1.0.4",
      "12:  github.com/containerd/containerd v1.7.13",
      "13:  github.com/davecgh/go-spew v1.1.1",
      "",
      "[Removed Lines]",
      "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39",
      "",
      "[Added Lines]",
      "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4",
      "",
      "---------------"
    ],
    "go.sum||go.sum": [
      "File: go.sum -> go.sum",
      "--- Hunk 1 ---",
      "[Context before]",
      "90: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
      "91: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
      "92: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
      "95: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
      "96: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
      "97: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
      "",
      "[Removed Lines]",
      "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39 h1:ZUpnv0xA75X9gy9Y7hjJm51nflGbr+2URaLXBtEic7A=",
      "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
      "",
      "[Added Lines]",
      "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4 h1:WYiZ9D0WBykHUJLlpt+w7NXX0hy+cQKKdVe7vmsNZvg=",
      "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
      "",
      "---------------"
    ],
    "pkg/compose/create.go||pkg/compose/create.go": [
      "File: pkg/compose/create.go -> pkg/compose/create.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:   options.Services = project.ServiceNames()",
      "78:  }",
      "80:  var observedState Containers",
      "82:  if err != nil {",
      "83:   return err",
      "84:  }",
      "",
      "[Removed Lines]",
      "81:  observedState, err := s.getContainers(ctx, project.Name, oneOffInclude, true)",
      "",
      "[Added Lines]",
      "80:  err := project.CheckContainerNameUnicity()",
      "81:  if err != nil {",
      "82:   return err",
      "83:  }",
      "86:  observedState, err = s.getContainers(ctx, project.Name, oneOffInclude, true)",
      "",
      "---------------"
    ],
    "pkg/e2e/container_name_test.go||pkg/e2e/container_name_test.go": [
      "File: pkg/e2e/container_name_test.go -> pkg/e2e/container_name_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:    Copyright 2022 Docker Compose CLI authors",
      "7:    Licensed under the Apache License, Version 2.0 (the \"License\");",
      "8:    you may not use this file except in compliance with the License.",
      "9:    You may obtain a copy of the License at",
      "11:        http://www.apache.org/licenses/LICENSE-2.0",
      "13:    Unless required by applicable law or agreed to in writing, software",
      "14:    distributed under the License is distributed on an \"AS IS\" BASIS,",
      "15:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "16:    See the License for the specific language governing permissions and",
      "17:    limitations under the License.",
      "20: package e2e",
      "22: import (",
      "23:  \"testing\"",
      "25:  \"gotest.tools/v3/icmd\"",
      "26: )",
      "28: func TestUpContainerNameConflict(t *testing.T) {",
      "29:  c := NewParallelCLI(t)",
      "30:  const projectName = \"e2e-container_name_conflict\"",
      "32:  t.Cleanup(func() {",
      "33:   c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "34:  })",
      "36:  res := c.RunDockerComposeCmdNoCheck(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\")",
      "37:  res.Assert(t, icmd.Expected{ExitCode: 1, Err: `container name \"test\" is already in use`})",
      "39:  c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "40:  c.RunDockerComposeCmd(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\", \"test\")",
      "42:  c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "43:  c.RunDockerComposeCmd(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\", \"another_test\")",
      "44: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "16c8099cf8bc8cd51d03c5d72fa606d7c5b56bf6",
      "candidate_info": {
        "commit_hash": "16c8099cf8bc8cd51d03c5d72fa606d7c5b56bf6",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/16c8099cf8bc8cd51d03c5d72fa606d7c5b56bf6",
        "files": [
          "cmd/compose/build.go",
          "cmd/compose/completion.go",
          "cmd/compose/compose.go",
          "cmd/compose/config.go",
          "cmd/compose/publish.go",
          "cmd/compose/pull.go",
          "cmd/compose/push.go",
          "cmd/compose/run.go",
          "cmd/compose/scale.go",
          "cmd/compose/viz.go",
          "cmd/compose/watch.go",
          "go.mod",
          "go.sum",
          "internal/tracing/attributes.go",
          "pkg/compose/build.go",
          "pkg/compose/scale.go",
          "pkg/compose/up.go"
        ],
        "message": "Use listener for file metadata\n\nSigned-off-by: jhrotko <joana.hrotko@docker.com>",
        "before_after_code_files": [
          "cmd/compose/build.go||cmd/compose/build.go",
          "cmd/compose/completion.go||cmd/compose/completion.go",
          "cmd/compose/compose.go||cmd/compose/compose.go",
          "cmd/compose/config.go||cmd/compose/config.go",
          "cmd/compose/publish.go||cmd/compose/publish.go",
          "cmd/compose/pull.go||cmd/compose/pull.go",
          "cmd/compose/push.go||cmd/compose/push.go",
          "cmd/compose/run.go||cmd/compose/run.go",
          "cmd/compose/scale.go||cmd/compose/scale.go",
          "cmd/compose/viz.go||cmd/compose/viz.go",
          "cmd/compose/watch.go||cmd/compose/watch.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "internal/tracing/attributes.go||internal/tracing/attributes.go",
          "pkg/compose/build.go||pkg/compose/build.go",
          "pkg/compose/scale.go||pkg/compose/scale.go",
          "pkg/compose/up.go||pkg/compose/up.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/compose/config.go||cmd/compose/config.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "cmd/compose/config.go||cmd/compose/config.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "cmd/compose/build.go||cmd/compose/build.go": [
          "File: cmd/compose/build.go -> cmd/compose/build.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: }",
          "138: func runBuild(ctx context.Context, dockerCli command.Cli, backend api.Service, opts buildOptions, services []string) error {",
          "140:  if err != nil {",
          "141:   return err",
          "142:  }",
          "",
          "[Removed Lines]",
          "139:  project, err := opts.ToProject(ctx, dockerCli, services, cli.WithResolvedPaths(true), cli.WithoutEnvironmentResolution)",
          "",
          "[Added Lines]",
          "139:  project, _, err := opts.ToProject(ctx, dockerCli, services, cli.WithResolvedPaths(true), cli.WithoutEnvironmentResolution)",
          "",
          "---------------"
        ],
        "cmd/compose/completion.go||cmd/compose/completion.go": [
          "File: cmd/compose/completion.go -> cmd/compose/completion.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: func completeServiceNames(dockerCli command.Cli, p *ProjectOptions) validArgsFn {",
          "38:  return func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {",
          "39:   p.Offline = true",
          "41:   if err != nil {",
          "42:    return nil, cobra.ShellCompDirectiveNoFileComp",
          "43:   }",
          "",
          "[Removed Lines]",
          "40:   project, err := p.ToProject(cmd.Context(), dockerCli, nil)",
          "",
          "[Added Lines]",
          "40:   project, _, err := p.ToProject(cmd.Context(), dockerCli, nil)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72: func completeProfileNames(dockerCli command.Cli, p *ProjectOptions) validArgsFn {",
          "73:  return func(cmd *cobra.Command, args []string, toComplete string) ([]string, cobra.ShellCompDirective) {",
          "74:   p.Offline = true",
          "76:   if err != nil {",
          "77:    return nil, cobra.ShellCompDirectiveNoFileComp",
          "78:   }",
          "",
          "[Removed Lines]",
          "75:   project, err := p.ToProject(cmd.Context(), dockerCli, nil)",
          "",
          "[Added Lines]",
          "75:   project, _, err := p.ToProject(cmd.Context(), dockerCli, nil)",
          "",
          "---------------"
        ],
        "cmd/compose/compose.go||cmd/compose/compose.go": [
          "File: cmd/compose/compose.go -> cmd/compose/compose.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:  \"github.com/docker/cli/cli-plugins/manager\"",
          "37:  \"github.com/docker/cli/cli/command\"",
          "38:  \"github.com/docker/compose/v2/cmd/formatter\"",
          "39:  \"github.com/docker/compose/v2/pkg/api\"",
          "40:  \"github.com/docker/compose/v2/pkg/compose\"",
          "41:  ui \"github.com/docker/compose/v2/pkg/progress\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:  \"github.com/docker/compose/v2/internal/tracing\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:    cli.WithDiscardEnvFile,",
          "142:   }",
          "145:   if err != nil {",
          "146:    return err",
          "147:   }",
          "149:   return fn(ctx, project, args)",
          "150:  })",
          "151: }",
          "",
          "[Removed Lines]",
          "144:   project, err := o.ToProject(ctx, dockerCli, args, options...)",
          "",
          "[Added Lines]",
          "145:   project, metrics, err := o.ToProject(ctx, dockerCli, args, options...)",
          "150:   ctx = context.WithValue(ctx, tracing.Metrics{}, metrics)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "166:  name := o.ProjectName",
          "167:  var project *types.Project",
          "168:  if len(o.ConfigPaths) > 0 || o.ProjectName == \"\" {",
          "170:   if err != nil {",
          "171:    envProjectName := os.Getenv(ComposeProjectName)",
          "172:    if envProjectName != \"\" {",
          "",
          "[Removed Lines]",
          "169:   p, err := o.ToProject(ctx, dockerCli, services, cli.WithDiscardEnvFile)",
          "",
          "[Added Lines]",
          "172:   p, _, err := o.ToProject(ctx, dockerCli, services, cli.WithDiscardEnvFile)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:   return envProjectName, nil",
          "191:  }",
          "194:  if err != nil {",
          "195:   return \"\", err",
          "196:  }",
          "197:  return project.Name, nil",
          "198: }",
          "201:  if !o.Offline {",
          "202:   po = append(po, o.remoteLoaders(dockerCli)...)",
          "203:  }",
          "",
          "[Removed Lines]",
          "193:  project, err := o.ToProject(ctx, dockerCli, nil)",
          "200: func (o *ProjectOptions) ToProject(ctx context.Context, dockerCli command.Cli, services []string, po ...cli.ProjectOptionsFn) (*types.Project, error) {",
          "",
          "[Added Lines]",
          "196:  project, _, err := o.ToProject(ctx, dockerCli, nil)",
          "203: func (o *ProjectOptions) ToProject(ctx context.Context, dockerCli command.Cli, services []string, po ...cli.ProjectOptionsFn) (*types.Project, tracing.Metrics, error) {",
          "204:  var metrics tracing.Metrics",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "207:  options, err := o.toProjectOptions(po...)",
          "208:  if err != nil {",
          "210:  }",
          "212:  if o.Compatibility || utils.StringToBool(options.Environment[ComposeCompatibility]) {",
          "213:   api.Separator = \"_\"",
          "214:  }",
          "216:  project, err := cli.ProjectFromOptions(options)",
          "217:  if err != nil {",
          "219:  }",
          "221:  if project.Name == \"\" {",
          "223:  }",
          "225:  project, err = project.WithServicesEnabled(services...)",
          "226:  if err != nil {",
          "228:  }",
          "230:  for name, s := range project.Services {",
          "",
          "[Removed Lines]",
          "209:   return nil, compose.WrapComposeError(err)",
          "218:   return nil, compose.WrapComposeError(err)",
          "222:   return nil, errors.New(\"project name can't be empty. Use `--project-name` to set a valid name\")",
          "227:   return nil, err",
          "",
          "[Added Lines]",
          "213:   return nil, metrics, compose.WrapComposeError(err)",
          "216:  options.WithListeners(func(event string, metadata map[string]any) {",
          "217:   if event == \"extends\" {",
          "218:    metrics.CountExtends++",
          "219:   }",
          "220:  })",
          "227:   return nil, metrics, compose.WrapComposeError(err)",
          "231:   return nil, metrics, errors.New(\"project name can't be empty. Use `--project-name` to set a valid name\")",
          "236:   return nil, metrics, err",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "245:  project = project.WithoutUnnecessaryResources()",
          "247:  project, err = project.WithSelectedServices(services)",
          "249: }",
          "251: func (o *ProjectOptions) remoteLoaders(dockerCli command.Cli) []cli.ProjectOptionsFn {",
          "",
          "[Removed Lines]",
          "248:  return project, err",
          "",
          "[Added Lines]",
          "257:  return project, metrics, err",
          "",
          "---------------"
        ],
        "cmd/compose/config.go||cmd/compose/config.go": [
          "File: cmd/compose/config.go -> cmd/compose/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  \"github.com/docker/cli/cli/command\"",
          "30:  \"github.com/spf13/cobra\"",
          "32:  \"github.com/docker/compose/v2/pkg/api\"",
          "33:  \"github.com/docker/compose/v2/pkg/compose\"",
          "34: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:  \"github.com/docker/compose/v2/internal/tracing\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:  noConsistency       bool",
          "51: }",
          "54:  po = append(po,",
          "55:   cli.WithInterpolation(!o.noInterpolate),",
          "56:   cli.WithResolvedPaths(!o.noResolvePath),",
          "",
          "[Removed Lines]",
          "53: func (o *configOptions) ToProject(ctx context.Context, dockerCli command.Cli, services []string, po ...cli.ProjectOptionsFn) (*types.Project, error) {",
          "",
          "[Added Lines]",
          "54: func (o *configOptions) ToProject(ctx context.Context, dockerCli command.Cli, services []string, po ...cli.ProjectOptionsFn) (*types.Project, tracing.Metrics, error) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125: func runConfig(ctx context.Context, dockerCli command.Cli, backend api.Service, opts configOptions, services []string) error {",
          "126:  var content []byte",
          "128:  if err != nil {",
          "129:   return err",
          "130:  }",
          "",
          "[Removed Lines]",
          "127:  project, err := opts.ToProject(ctx, dockerCli, services)",
          "",
          "[Added Lines]",
          "128:  project, _, err := opts.ToProject(ctx, dockerCli, services)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154: }",
          "156: func runServices(ctx context.Context, dockerCli command.Cli, opts configOptions) error {",
          "158:  if err != nil {",
          "159:   return err",
          "160:  }",
          "",
          "[Removed Lines]",
          "157:  project, err := opts.ToProject(ctx, dockerCli, nil, cli.WithoutEnvironmentResolution)",
          "",
          "[Added Lines]",
          "158:  project, _, err := opts.ToProject(ctx, dockerCli, nil, cli.WithoutEnvironmentResolution)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166: }",
          "168: func runVolumes(ctx context.Context, dockerCli command.Cli, opts configOptions) error {",
          "170:  if err != nil {",
          "171:   return err",
          "172:  }",
          "",
          "[Removed Lines]",
          "169:  project, err := opts.ToProject(ctx, dockerCli, nil, cli.WithoutEnvironmentResolution)",
          "",
          "[Added Lines]",
          "170:  project, _, err := opts.ToProject(ctx, dockerCli, nil, cli.WithoutEnvironmentResolution)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "181:  if opts.hash != \"*\" {",
          "182:   services = append(services, strings.Split(opts.hash, \",\")...)",
          "183:  }",
          "185:  if err != nil {",
          "186:   return err",
          "187:  }",
          "",
          "[Removed Lines]",
          "184:  project, err := opts.ToProject(ctx, dockerCli, nil, cli.WithoutEnvironmentResolution)",
          "",
          "[Added Lines]",
          "185:  project, _, err := opts.ToProject(ctx, dockerCli, nil, cli.WithoutEnvironmentResolution)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "218: func runProfiles(ctx context.Context, dockerCli command.Cli, opts configOptions, services []string) error {",
          "219:  set := map[string]struct{}{}",
          "221:  if err != nil {",
          "222:   return err",
          "223:  }",
          "",
          "[Removed Lines]",
          "220:  project, err := opts.ToProject(ctx, dockerCli, services, cli.WithoutEnvironmentResolution)",
          "",
          "[Added Lines]",
          "221:  project, _, err := opts.ToProject(ctx, dockerCli, services, cli.WithoutEnvironmentResolution)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "238: }",
          "240: func runConfigImages(ctx context.Context, dockerCli command.Cli, opts configOptions, services []string) error {",
          "242:  if err != nil {",
          "243:   return err",
          "244:  }",
          "",
          "[Removed Lines]",
          "241:  project, err := opts.ToProject(ctx, dockerCli, services, cli.WithoutEnvironmentResolution)",
          "",
          "[Added Lines]",
          "242:  project, _, err := opts.ToProject(ctx, dockerCli, services, cli.WithoutEnvironmentResolution)",
          "",
          "---------------"
        ],
        "cmd/compose/publish.go||cmd/compose/publish.go": [
          "File: cmd/compose/publish.go -> cmd/compose/publish.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: }",
          "52: func runPublish(ctx context.Context, dockerCli command.Cli, backend api.Service, opts publishOptions, repository string) error {",
          "54:  if err != nil {",
          "55:   return err",
          "56:  }",
          "",
          "[Removed Lines]",
          "53:  project, err := opts.ToProject(ctx, dockerCli, nil)",
          "",
          "[Added Lines]",
          "53:  project, _, err := opts.ToProject(ctx, dockerCli, nil)",
          "",
          "---------------"
        ],
        "cmd/compose/pull.go||cmd/compose/pull.go": [
          "File: cmd/compose/pull.go -> cmd/compose/pull.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: }",
          "96: func runPull(ctx context.Context, dockerCli command.Cli, backend api.Service, opts pullOptions, services []string) error {",
          "98:  if err != nil {",
          "99:   return err",
          "100:  }",
          "",
          "[Removed Lines]",
          "97:  project, err := opts.ToProject(ctx, dockerCli, services)",
          "",
          "[Added Lines]",
          "97:  project, _, err := opts.ToProject(ctx, dockerCli, services)",
          "",
          "---------------"
        ],
        "cmd/compose/push.go||cmd/compose/push.go": [
          "File: cmd/compose/push.go -> cmd/compose/push.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: }",
          "56: func runPush(ctx context.Context, dockerCli command.Cli, backend api.Service, opts pushOptions, services []string) error {",
          "58:  if err != nil {",
          "59:   return err",
          "60:  }",
          "",
          "[Removed Lines]",
          "57:  project, err := opts.ToProject(ctx, dockerCli, services)",
          "",
          "[Added Lines]",
          "57:  project, _, err := opts.ToProject(ctx, dockerCli, services)",
          "",
          "---------------"
        ],
        "cmd/compose/run.go||cmd/compose/run.go": [
          "File: cmd/compose/run.go -> cmd/compose/run.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:    return nil",
          "157:   }),",
          "158:   RunE: Adapt(func(ctx context.Context, args []string) error {",
          "160:    if err != nil {",
          "161:     return err",
          "162:    }",
          "",
          "[Removed Lines]",
          "159:    project, err := p.ToProject(ctx, dockerCli, []string{options.Service}, cgo.WithResolvedPaths(true), cgo.WithDiscardEnvFile)",
          "",
          "[Added Lines]",
          "159:    project, _, err := p.ToProject(ctx, dockerCli, []string{options.Service}, cgo.WithResolvedPaths(true), cgo.WithDiscardEnvFile)",
          "",
          "---------------"
        ],
        "cmd/compose/scale.go||cmd/compose/scale.go": [
          "File: cmd/compose/scale.go -> cmd/compose/scale.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: func runScale(ctx context.Context, dockerCli command.Cli, backend api.Service, opts scaleOptions, serviceReplicaTuples map[string]int) error {",
          "63:  services := maps.Keys(serviceReplicaTuples)",
          "65:  if err != nil {",
          "66:   return err",
          "67:  }",
          "",
          "[Removed Lines]",
          "64:  project, err := opts.ToProject(ctx, dockerCli, services)",
          "",
          "[Added Lines]",
          "64:  project, _, err := opts.ToProject(ctx, dockerCli, services)",
          "",
          "---------------"
        ],
        "cmd/compose/viz.go||cmd/compose/viz.go": [
          "File: cmd/compose/viz.go -> cmd/compose/viz.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: func runViz(ctx context.Context, dockerCli command.Cli, backend api.Service, opts *vizOptions) error {",
          "67:  _, _ = fmt.Fprintln(os.Stderr, \"viz command is EXPERIMENTAL\")",
          "69:  if err != nil {",
          "70:   return err",
          "71:  }",
          "",
          "[Removed Lines]",
          "68:  project, err := opts.ToProject(ctx, dockerCli, nil)",
          "",
          "[Added Lines]",
          "68:  project, _, err := opts.ToProject(ctx, dockerCli, nil)",
          "",
          "---------------"
        ],
        "cmd/compose/watch.go||cmd/compose/watch.go": [
          "File: cmd/compose/watch.go -> cmd/compose/watch.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: }",
          "65: func runWatch(ctx context.Context, dockerCli command.Cli, backend api.Service, watchOpts watchOptions, buildOpts buildOptions, services []string) error {",
          "67:  if err != nil {",
          "68:   return err",
          "69:  }",
          "",
          "[Removed Lines]",
          "66:  project, err := watchOpts.ToProject(ctx, dockerCli, nil)",
          "",
          "[Added Lines]",
          "66:  project, _, err := watchOpts.ToProject(ctx, dockerCli, nil)",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.12",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-rc.5",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-rc.6",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "88: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "91: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "92: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "93: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-rc.5 h1:YoGsuVzxve1m5SdCfZqI8wJoMVZWu7SelHoqiCqb+iQ=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-rc.5/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "[Added Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-rc.6 h1:sv9W3U0IEYqgGqTbSDpU2c8cttWQmlbJ0D6jdt//Dv8=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-rc.6/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "---------------"
        ],
        "internal/tracing/attributes.go||internal/tracing/attributes.go": [
          "File: internal/tracing/attributes.go -> internal/tracing/attributes.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: package tracing",
          "19: import (",
          "20:  \"crypto/sha256\"",
          "21:  \"encoding/json\"",
          "22:  \"fmt\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:  \"context\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: type SpanOptions []trace.SpanStartEventOption",
          "38: func (s SpanOptions) SpanStartOptions() []trace.SpanStartOption {",
          "39:  out := make([]trace.SpanStartOption, len(s))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: type Metrics struct {",
          "39:  CountExtends int",
          "40: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:  if proj == nil {",
          "61:   return nil",
          "62:  }",
          "64:  capabilities, gpu, tpu := proj.ServicesWithCapabilities()",
          "65:  attrs := []attribute.KeyValue{",
          "66:   attribute.String(\"project.name\", proj.Name),",
          "67:   attribute.String(\"project.dir\", proj.WorkingDir),",
          "68:   attribute.StringSlice(\"project.compose_files\", proj.ComposeFiles),",
          "71:   attribute.StringSlice(\"project.profiles\", proj.Profiles),",
          "72:   attribute.StringSlice(\"project.volumes\", proj.VolumeNames()),",
          "73:   attribute.StringSlice(\"project.networks\", proj.NetworkNames()),",
          "",
          "[Removed Lines]",
          "59: func ProjectOptions(proj *types.Project) SpanOptions {",
          "69:   attribute.StringSlice(\"project.services.active\", proj.ServiceNames()),",
          "70:   attribute.StringSlice(\"project.services.disabled\", proj.DisabledServiceNames()),",
          "",
          "[Added Lines]",
          "63: func ProjectOptions(ctx context.Context, proj *types.Project) SpanOptions {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:   attribute.StringSlice(\"project.configs\", proj.ConfigNames()),",
          "76:   attribute.StringSlice(\"project.extensions\", keys(proj.Extensions)),",
          "77:   attribute.StringSlice(\"project.includes\", flattenIncludeReferences(proj.IncludeReferences)),",
          "78:   attribute.StringSlice(\"project.services.build\", proj.ServicesWithBuild()),",
          "79:   attribute.StringSlice(\"project.services.depends_on\", proj.ServicesWithDependsOn()),",
          "80:   attribute.StringSlice(\"project.services.capabilities\", capabilities),",
          "81:   attribute.StringSlice(\"project.services.capabilities.gpu\", gpu),",
          "82:   attribute.StringSlice(\"project.services.capabilities.tpu\", tpu),",
          "83:  }",
          "84:  if projHash, ok := projectHash(proj); ok {",
          "85:   attrs = append(attrs, attribute.String(\"project.hash\", projHash))",
          "86:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:   attribute.StringSlice(\"project.services.active\", proj.ServiceNames()),",
          "80:   attribute.StringSlice(\"project.services.disabled\", proj.DisabledServiceNames()),",
          "87:  if metrics, ok := ctx.Value(Metrics{}).(Metrics); ok {",
          "88:   attrs = append(attrs, attribute.Int(\"project.services.extends\", metrics.CountExtends))",
          "89:  }",
          "",
          "---------------"
        ],
        "pkg/compose/build.go||pkg/compose/build.go": [
          "File: pkg/compose/build.go -> pkg/compose/build.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   return err",
          "222:  }",
          "225:   func(ctx context.Context) error {",
          "226:    return s.pullRequiredImages(ctx, project, images, quietPull)",
          "227:   },",
          "",
          "[Removed Lines]",
          "224:  err = tracing.SpanWrapFunc(\"project/pull\", tracing.ProjectOptions(project),",
          "",
          "[Added Lines]",
          "224:  err = tracing.SpanWrapFunc(\"project/pull\", tracing.ProjectOptions(ctx, project),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:  }",
          "233:  if buildOpts != nil {",
          "235:    func(ctx context.Context) error {",
          "236:     builtImages, err := s.build(ctx, project, *buildOpts, images)",
          "237:     if err != nil {",
          "",
          "[Removed Lines]",
          "234:   err = tracing.SpanWrapFunc(\"project/build\", tracing.ProjectOptions(project),",
          "",
          "[Added Lines]",
          "234:   err = tracing.SpanWrapFunc(\"project/build\", tracing.ProjectOptions(ctx, project),",
          "",
          "---------------"
        ],
        "pkg/compose/scale.go||pkg/compose/scale.go": [
          "File: pkg/compose/scale.go -> pkg/compose/scale.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: )",
          "27: func (s *composeService) Scale(ctx context.Context, project *types.Project, options api.ScaleOptions) error {",
          "29:   err := s.create(ctx, project, api.CreateOptions{Services: options.Services})",
          "30:   if err != nil {",
          "31:    return err",
          "",
          "[Removed Lines]",
          "28:  return progress.Run(ctx, tracing.SpanWrapFunc(\"project/scale\", tracing.ProjectOptions(project), func(ctx context.Context) error {",
          "",
          "[Added Lines]",
          "28:  return progress.Run(ctx, tracing.SpanWrapFunc(\"project/scale\", tracing.ProjectOptions(ctx, project), func(ctx context.Context) error {",
          "",
          "---------------"
        ],
        "pkg/compose/up.go||pkg/compose/up.go": [
          "File: pkg/compose/up.go -> pkg/compose/up.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: )",
          "34: func (s *composeService) Up(ctx context.Context, project *types.Project, options api.UpOptions) error { //nolint:gocyclo",
          "36:   w := progress.ContextWriter(ctx)",
          "37:   w.HasMore(options.Start.Attach == nil)",
          "38:   err := s.create(ctx, project, options.Create)",
          "",
          "[Removed Lines]",
          "35:  err := progress.Run(ctx, tracing.SpanWrapFunc(\"project/up\", tracing.ProjectOptions(project), func(ctx context.Context) error {",
          "",
          "[Added Lines]",
          "35:  err := progress.Run(ctx, tracing.SpanWrapFunc(\"project/up\", tracing.ProjectOptions(ctx, project), func(ctx context.Context) error {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5694a2b0f80af3ef9acc539a29bf859c84c04625",
      "candidate_info": {
        "commit_hash": "5694a2b0f80af3ef9acc539a29bf859c84c04625",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/5694a2b0f80af3ef9acc539a29bf859c84c04625",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "build(deps): bump github.com/containerd/containerd from 1.7.17 to 1.7.18\n\nBumps [github.com/containerd/containerd](https://github.com/containerd/containerd) from 1.7.17 to 1.7.18.\n- [Release notes](https://github.com/containerd/containerd/releases)\n- [Changelog](https://github.com/containerd/containerd/blob/main/RELEASES.md)\n- [Commits](https://github.com/containerd/containerd/compare/v1.7.17...v1.7.18)\n\n---\nupdated-dependencies:\n- dependency-name: github.com/containerd/containerd\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  github.com/buger/goterm v1.0.4",
          "10:  github.com/compose-spec/compose-go/v2 v2.1.2-0.20240530052535-7dfa54c9658b",
          "11:  github.com/containerd/console v1.0.4",
          "13:  github.com/davecgh/go-spew v1.1.1",
          "14:  github.com/distribution/reference v0.6.0",
          "15:  github.com/docker/buildx v0.14.1",
          "",
          "[Removed Lines]",
          "12:  github.com/containerd/containerd v1.7.17",
          "",
          "[Added Lines]",
          "12:  github.com/containerd/containerd v1.7.18",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:  github.com/cenkalti/backoff/v4 v4.2.1 // indirect",
          "83:  github.com/cespare/xxhash/v2 v2.2.0 // indirect",
          "84:  github.com/containerd/continuity v0.4.3 // indirect",
          "85:  github.com/containerd/log v0.1.0 // indirect",
          "86:  github.com/containerd/ttrpc v1.2.4 // indirect",
          "87:  github.com/containerd/typeurl/v2 v2.1.1 // indirect",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:  github.com/containerd/errdefs v0.1.0 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "94: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "95: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
          "96: github.com/containerd/console v1.0.4/go.mod h1:YynlIjWYF8myEu6sdkwKIvGQq+cOckRm6So2avqoYAk=",
          "99: github.com/containerd/continuity v0.4.3 h1:6HVkalIp+2u1ZLH1J/pYX2oBVXlJZvh1X1A7bEZ9Su8=",
          "100: github.com/containerd/continuity v0.4.3/go.mod h1:F6PTNCKepoxEaXLQp3wDAjygEnImnZ/7o4JzpodfroQ=",
          "101: github.com/containerd/fifo v1.1.0 h1:4I2mbh5stb1u6ycIABlBw9zgtlK8viPI9QkQNRQEEmY=",
          "102: github.com/containerd/fifo v1.1.0/go.mod h1:bmC4NWMbXlt2EZ0Hc7Fx7QzTFxgPID13eH0Qu+MAb2o=",
          "103: github.com/containerd/log v0.1.0 h1:TCJt7ioM2cr/tfR8GPbGf9/VRAX8D2B4PjzCpfX540I=",
          "",
          "[Removed Lines]",
          "97: github.com/containerd/containerd v1.7.17 h1:KjNnn0+tAVQHAoaWRjmdak9WlvnFR/8rU1CHHy8Rm2A=",
          "98: github.com/containerd/containerd v1.7.17/go.mod h1:vK+hhT4TIv2uejlcDlbVIc8+h/BqtKLIyNrtCZol8lI=",
          "",
          "[Added Lines]",
          "97: github.com/containerd/containerd v1.7.18 h1:jqjZTQNfXGoEaZdW1WwPU0RqSn1Bm2Ay/KJPUuO8nao=",
          "98: github.com/containerd/containerd v1.7.18/go.mod h1:IYEk9/IO6wAPUz2bCMVUbsfXjzw5UNP5fLz4PsUygQ4=",
          "101: github.com/containerd/errdefs v0.1.0 h1:m0wCRBiu1WJT/Fr+iOoQHMQS/eP5myQ8lCv4Dz5ZURM=",
          "102: github.com/containerd/errdefs v0.1.0/go.mod h1:YgWiiHtLmSeBrvpw+UfPijzbLaB77mEG1WwJTDETIV0=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "163cdfd31db1a1f56bfd369468323dda0a2af677",
      "candidate_info": {
        "commit_hash": "163cdfd31db1a1f56bfd369468323dda0a2af677",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/163cdfd31db1a1f56bfd369468323dda0a2af677",
        "files": [
          "go.mod",
          "go.sum",
          "pkg/e2e/compose_environment_test.go",
          "pkg/e2e/fixtures/environment/empty-variable/Dockerfile",
          "pkg/e2e/fixtures/environment/empty-variable/compose.yaml"
        ],
        "message": "empty env variable with no value must be unset in container\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/e2e/compose_environment_test.go||pkg/e2e/compose_environment_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  github.com/Microsoft/go-winio v0.6.2",
          "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
          "9:  github.com/buger/goterm v1.0.4",
          "11:  github.com/containerd/containerd v1.7.18",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "13:  github.com/distribution/reference v0.6.0",
          "",
          "[Removed Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.1.3",
          "",
          "[Added Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.1.4-0.20240708103555-327323ea44d4",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "88: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "91: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "92: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "93: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
          "",
          "[Removed Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.1.3 h1:bD67uqLuL/XgkAK6ir3xZvNLFPxPScEi1KW7R5esrLE=",
          "90: github.com/compose-spec/compose-go/v2 v2.1.3/go.mod h1:lFN0DrMxIncJGYAXTfWuajfwj5haBJqrBkarHcnjJKc=",
          "",
          "[Added Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.1.4-0.20240708103555-327323ea44d4 h1:jpoA30Hs8qGuT2Rv/mk9pga4y/Glw/5O+jyOCv2la3I=",
          "90: github.com/compose-spec/compose-go/v2 v2.1.4-0.20240708103555-327323ea44d4/go.mod h1:lFN0DrMxIncJGYAXTfWuajfwj5haBJqrBkarHcnjJKc=",
          "",
          "---------------"
        ],
        "pkg/e2e/compose_environment_test.go||pkg/e2e/compose_environment_test.go": [
          "File: pkg/e2e/compose_environment_test.go -> pkg/e2e/compose_environment_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "222:   c.RunDockerComposeCmd(t, \"--project-name\", \"env-file-comments\", \"down\", \"--rmi\", \"all\")",
          "223:  })",
          "224: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226: func TestUnsetEnv(t *testing.T) {",
          "227:  c := NewParallelCLI(t)",
          "228:  t.Cleanup(func() {",
          "229:   c.RunDockerComposeCmd(t, \"--project-name\", \"empty-variable\", \"down\", \"--rmi\", \"all\")",
          "230:  })",
          "232:  t.Run(\"override env variable\", func(t *testing.T) {",
          "233:   c.RunDockerComposeCmd(t, \"-f\", \"./fixtures/environment/empty-variable/compose.yaml\", \"build\")",
          "235:   res := c.RunDockerComposeCmd(t, \"-f\", \"./fixtures/environment/empty-variable/compose.yaml\",",
          "236:    \"run\", \"-e\", \"EMPTY=hello\", \"--rm\", \"empty-variable\")",
          "237:   res.Assert(t, icmd.Expected{Out: `=hello=`})",
          "238:  })",
          "240:  t.Run(\"unset env variable\", func(t *testing.T) {",
          "241:   res := c.RunDockerComposeCmd(t, \"-f\", \"./fixtures/environment/empty-variable/compose.yaml\",",
          "242:    \"run\", \"--rm\", \"empty-variable\")",
          "243:   res.Assert(t, icmd.Expected{Out: `==`})",
          "244:  })",
          "245: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "818bc3c34a0e62c15618487e74fb7121779a6295",
      "candidate_info": {
        "commit_hash": "818bc3c34a0e62c15618487e74fb7121779a6295",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/818bc3c34a0e62c15618487e74fb7121779a6295",
        "files": [
          "go.mod",
          "go.sum",
          "pkg/compose/watch.go",
          "pkg/e2e/fixtures/watch/compose.yaml",
          "pkg/e2e/fixtures/watch/config/file.config",
          "pkg/e2e/watch_test.go"
        ],
        "message": "add sync+restart action to watch attribute\n\nSigned-off-by: Guillaume Lours <705411+glours@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/watch.go||pkg/compose/watch.go",
          "pkg/e2e/fixtures/watch/config/file.config||pkg/e2e/fixtures/watch/config/file.config",
          "pkg/e2e/watch_test.go||pkg/e2e/watch_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/adrg/xdg v0.4.0",
          "9:  github.com/buger/goterm v1.0.4",
          "11:  github.com/containerd/console v1.0.3",
          "12:  github.com/containerd/containerd v1.7.7",
          "13:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "10:  github.com/compose-spec/compose-go v1.19.0",
          "",
          "[Added Lines]",
          "10:  github.com/compose-spec/compose-go v1.20.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "140: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "141: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "144: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "145: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "146: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "142: github.com/compose-spec/compose-go v1.19.0 h1:t68gAcwStDg0hy2kFvqHJIksf6xkqRnlSKfL45/ETqo=",
          "143: github.com/compose-spec/compose-go v1.19.0/go.mod h1:+MdqXV4RA7wdFsahh/Kb8U0pAJqkg7mr4PM9tFKU8RM=",
          "",
          "[Added Lines]",
          "142: github.com/compose-spec/compose-go v1.20.0 h1:h4ZKOst1EF/DwZp7dWkb+wbTVE4nEyT9Lc89to84Ol4=",
          "143: github.com/compose-spec/compose-go v1.20.0/go.mod h1:+MdqXV4RA7wdFsahh/Kb8U0pAJqkg7mr4PM9tFKU8RM=",
          "",
          "---------------"
        ],
        "pkg/compose/watch.go||pkg/compose/watch.go": [
          "File: pkg/compose/watch.go -> pkg/compose/watch.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "416: func (s *composeService) handleWatchBatch(ctx context.Context, project *types.Project, serviceName string, build api.BuildOptions, batch []fileEvent, syncer sync.Syncer) error {",
          "417:  pathMappings := make([]sync.PathMapping, len(batch))",
          "418:  for i := range batch {",
          "419:   if batch[i].Action == types.WatchActionRebuild {",
          "420:    fmt.Fprintf(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:  restartService := false",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "441:    }",
          "442:    return nil",
          "443:   }",
          "444:   pathMappings[i] = batch[i].PathMapping",
          "445:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445:   if batch[i].Action == types.WatchActionSyncRestart {",
          "446:    restartService = true",
          "447:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "453:  if err := syncer.Sync(ctx, service, pathMappings); err != nil {",
          "454:   return err",
          "455:  }",
          "456:  return nil",
          "457: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "460:  if restartService {",
          "461:   return s.Restart(ctx, project.Name, api.RestartOptions{",
          "462:    Services: []string{serviceName},",
          "463:    Project:  project,",
          "464:    NoDeps:   false,",
          "465:   })",
          "466:  }",
          "",
          "---------------"
        ],
        "pkg/e2e/fixtures/watch/config/file.config||pkg/e2e/fixtures/watch/config/file.config": [
          "File: pkg/e2e/fixtures/watch/config/file.config -> pkg/e2e/fixtures/watch/config/file.config",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: This is a config file",
          "",
          "---------------"
        ],
        "pkg/e2e/watch_test.go||pkg/e2e/watch_test.go": [
          "File: pkg/e2e/watch_test.go -> pkg/e2e/watch_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: func doTest(t *testing.T, svcName string, tarSync bool) {",
          "60:  tmpdir := t.TempDir()",
          "61:  dataDir := filepath.Join(tmpdir, \"data\")",
          "63:   t.Helper()",
          "65:   require.NoError(t, os.MkdirAll(filepath.Dir(dest), 0o700))",
          "66:   t.Logf(\"writing %q to %q\", contents, dest)",
          "67:   require.NoError(t, os.WriteFile(dest, []byte(contents+\"\\n\"), 0o600))",
          "68:  }",
          "70:  composeFilePath := filepath.Join(tmpdir, \"compose.yaml\")",
          "71:  CopyFile(t, filepath.Join(\"fixtures\", \"watch\", \"compose.yaml\"), composeFilePath)",
          "",
          "[Removed Lines]",
          "62:  writeDataFile := func(name string, contents string) {",
          "64:   dest := filepath.Join(dataDir, name)",
          "",
          "[Added Lines]",
          "62:  configDir := filepath.Join(tmpdir, \"config\")",
          "64:  writeTestFile := func(name, contents, sourceDir string) {",
          "66:   dest := filepath.Join(sourceDir, name)",
          "71:  writeDataFile := func(name, contents string) {",
          "72:   writeTestFile(name, contents, dataDir)",
          "73:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:    Err:      \"No such file or directory\",",
          "196:   })",
          "198:  testComplete.Store(true)",
          "199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:  t.Logf(\"Sync and restart use case\")",
          "204:  require.NoError(t, os.Mkdir(configDir, 0o700))",
          "205:  writeTestFile(\"file.config\", \"This is an updated config file\", configDir)",
          "206:  checkRestart := func(state string) poll.Check {",
          "207:   return func(pollLog poll.LogT) poll.Result {",
          "208:    if strings.Contains(r.Combined(), state) {",
          "209:     return poll.Success()",
          "210:    }",
          "211:    return poll.Continue(r.Combined())",
          "212:   }",
          "213:  }",
          "214:  poll.WaitOn(t, checkRestart(fmt.Sprintf(\"%s-1  Restarting\", svcName)))",
          "215:  poll.WaitOn(t, checkRestart(fmt.Sprintf(\"%s-1  Started\", svcName)))",
          "216:  poll.WaitOn(t, checkFileContents(\"/app/config/file.config\", \"This is an updated config file\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c496c230710d299834cf2586d0f75066dc60d06c",
      "candidate_info": {
        "commit_hash": "c496c230710d299834cf2586d0f75066dc60d06c",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/c496c230710d299834cf2586d0f75066dc60d06c",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "ci: upgrade compose-go to v1.15.1 (#10757)\n\n* Fix for \"`build.context` is required\" errors\n\nhttps://github.com/compose-spec/compose-go/releases/tag/v1.15.1\n\nSigned-off-by: Milas Bowman <milas.bowman@docker.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.2",
          "12:  github.com/cucumber/godog v0.0.0-00010101000000-000000000000 // replaced; see replace for the actual version used",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go v1.15.0",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go v1.15.1",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: github.com/cncf/xds/go v0.0.0-20211011173535-cb28da3451f1/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "132: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4 h1:/inchEIKaYC1Akx+H+gqO04wryn5h75LSazbRlnya1k=",
          "133: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "136: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "137: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "138: github.com/containerd/console v1.0.3/go.mod h1:7LqA/THxQ86k76b8c/EMSiaJ3h1eZkMkXar0TQ1gf3U=",
          "",
          "[Removed Lines]",
          "134: github.com/compose-spec/compose-go v1.15.0 h1:rv3TTgbS3U4Y8sRTngrcxDmpbz+fq26wTqHculSCi6s=",
          "135: github.com/compose-spec/compose-go v1.15.0/go.mod h1:3yngGBGfls6FHGQsg4B1z6gz8ej9SOvmAJtxCwgbcnc=",
          "",
          "[Added Lines]",
          "134: github.com/compose-spec/compose-go v1.15.1 h1:0yaEt6/66dLN0bNWYDTj0CDx626uCdQ9ipJVIJx8O8M=",
          "135: github.com/compose-spec/compose-go v1.15.1/go.mod h1:3yngGBGfls6FHGQsg4B1z6gz8ej9SOvmAJtxCwgbcnc=",
          "",
          "---------------"
        ]
      }
    }
  ]
}