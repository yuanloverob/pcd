{
  "cve_id": "CVE-2024-27295",
  "cve_desc": "Directus is a real-time API and App dashboard for managing SQL database content. The password reset mechanism of the Directus backend allows attackers to receive a password reset email of a victim user, specifically having it arrive at a similar email address as the victim with a one or more characters changed to use accents. This is due to the fact that by default MySQL/MariaDB are configured for accent-insensitive and case-insensitive comparisons. This vulnerability is fixed in version 10.8.3.\n\n",
  "repo": "directus/directus",
  "patch_hash": "a8ef790ea2d28b1727f9027d99bd360920d57919",
  "patch_info": {
    "commit_hash": "a8ef790ea2d28b1727f9027d99bd360920d57919",
    "repo": "directus/directus",
    "commit_url": "https://github.com/directus/directus/commit/a8ef790ea2d28b1727f9027d99bd360920d57919",
    "files": [
      "api/src/services/users.ts"
    ],
    "message": "Merge pull request from GHSA-qw9g-7549-7wg5\n\nCo-authored-by: Rijk van Zanten <rijkvanzanten@me.com>",
    "before_after_code_files": [
      "api/src/services/users.ts||api/src/services/users.ts"
    ]
  },
  "patch_diff": {
    "api/src/services/users.ts||api/src/services/users.ts": [
      "File: api/src/services/users.ts -> api/src/services/users.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "143:   return await this.knex",
      "145:    .from('directus_users')",
      "146:    .whereRaw(`LOWER(??) = ?`, ['email', email.toLowerCase()])",
      "147:    .first();",
      "",
      "[Removed Lines]",
      "142:  private async getUserByEmail(email: string): Promise<{ id: string; role: string; status: string; password: string }> {",
      "144:    .select('id', 'role', 'status', 'password')",
      "",
      "[Added Lines]",
      "142:  private async getUserByEmail(",
      "143:   email: string",
      "144:  ): Promise<{ id: string; role: string; status: string; password: string; email: string }> {",
      "146:    .select('id', 'role', 'status', 'password', 'email')",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "393:     const subjectLine = subject ?? \"You've been invited\";",
      "395:     await mailService.send({",
      "397:      subject: subjectLine,",
      "398:      template: {",
      "399:       name: 'user-invitation',",
      "400:       data: {",
      "401:        url: this.inviteUrl(email, url),",
      "403:       },",
      "404:      },",
      "405:     });",
      "",
      "[Removed Lines]",
      "396:      to: email,",
      "402:        email,",
      "",
      "[Added Lines]",
      "398:      to: user.email,",
      "404:        email: user.email,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "451:    accountability: this.accountability,",
      "452:   });",
      "455:   const token = jwt.sign(payload, env['SECRET'] as string, { expiresIn: '1d', issuer: 'directus' });",
      "457:   const acceptURL = url",
      "",
      "[Removed Lines]",
      "454:   const payload = { email, scope: 'password-reset', hash: getSimpleHash('' + user.password) };",
      "",
      "[Added Lines]",
      "456:   const payload = { email: user.email, scope: 'password-reset', hash: getSimpleHash('' + user.password) };",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "461:   const subjectLine = subject ? subject : 'Password Reset Request';",
      "463:   await mailService.send({",
      "465:    subject: subjectLine,",
      "466:    template: {",
      "467:     name: 'password-reset',",
      "468:     data: {",
      "469:      url: acceptURL,",
      "471:     },",
      "472:    },",
      "473:   });",
      "",
      "[Removed Lines]",
      "464:    to: email,",
      "470:      email,",
      "",
      "[Added Lines]",
      "466:    to: user.email,",
      "472:      email: user.email,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd91484443854e0440b4c1c8d714b76559d7254e",
      "candidate_info": {
        "commit_hash": "bd91484443854e0440b4c1c8d714b76559d7254e",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/bd91484443854e0440b4c1c8d714b76559d7254e",
        "files": [
          ".changeset/perfect-colts-begin.md",
          "api/src/operations/mail/index.ts",
          "api/src/services/mail/index.ts",
          "api/src/services/notifications.ts",
          "api/src/services/shares.ts",
          "api/src/services/users.test.ts",
          "api/src/services/users.ts",
          "contributors.yml"
        ],
        "message": "Return send mail promise (#21741)",
        "before_after_code_files": [
          "api/src/operations/mail/index.ts||api/src/operations/mail/index.ts",
          "api/src/services/mail/index.ts||api/src/services/mail/index.ts",
          "api/src/services/notifications.ts||api/src/services/notifications.ts",
          "api/src/services/shares.ts||api/src/services/shares.ts",
          "api/src/services/users.test.ts||api/src/services/users.test.ts",
          "api/src/services/users.ts||api/src/services/users.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "api/src/services/users.ts||api/src/services/users.ts"
          ],
          "candidate": [
            "api/src/services/users.ts||api/src/services/users.ts"
          ]
        }
      },
      "candidate_diff": {
        "api/src/operations/mail/index.ts||api/src/operations/mail/index.ts": [
          "File: api/src/operations/mail/index.ts -> api/src/operations/mail/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import type { EmailOptions } from '../../services/mail/index.js';",
          "3: import { MailService } from '../../services/mail/index.js';",
          "4: import { md } from '../../utils/md.js';",
          "6: export type Options = {",
          "7:  body?: string;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import { useLogger } from '../../logger.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:  subject: string;",
          "13: };",
          "15: export default defineOperationApi<Options>({",
          "16:  id: 'mail',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: const logger = useLogger();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "29:    mailObject.html = type === 'wysiwyg' ? safeBody : md(safeBody);",
          "30:   }",
          "33:  },",
          "34: });",
          "",
          "[Removed Lines]",
          "32:   await mailService.send(mailObject);",
          "",
          "[Added Lines]",
          "35:   mailService.send(mailObject).catch((error) => {",
          "36:    logger.error(error, 'Could not send mail in \"mail\" operation');",
          "37:   });",
          "",
          "---------------"
        ],
        "api/src/services/mail/index.ts||api/src/services/mail/index.ts": [
          "File: api/src/services/mail/index.ts -> api/src/services/mail/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   }",
          "53:  }",
          "56:   const { template, ...emailOptions } = options;",
          "57:   let { html } = options;",
          "",
          "[Removed Lines]",
          "55:  async send(options: EmailOptions): Promise<void> {",
          "",
          "[Added Lines]",
          "55:  async send<T>(options: EmailOptions): Promise<T> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     .join('\\n');",
          "80:   }",
          "86:  }",
          "88:  private async renderTemplate(template: string, variables: Record<string, any>) {",
          "",
          "[Removed Lines]",
          "82:   this.mailer.sendMail({ ...emailOptions, from, html }).catch((error) => {",
          "83:    logger.warn(`Email send failed:`);",
          "84:    logger.warn(error);",
          "85:   });",
          "",
          "[Added Lines]",
          "82:   const info = await this.mailer.sendMail({ ...emailOptions, from, html });",
          "83:   return info;",
          "",
          "---------------"
        ],
        "api/src/services/notifications.ts||api/src/services/notifications.ts": [
          "File: api/src/services/notifications.ts -> api/src/services/notifications.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:    const html = data.message ? md(data.message) : '';",
          "54:    if (user['email'] && user['email_notifications'] === true) {",
          "57:       template: {",
          "58:        name: 'base',",
          "59:        data: user['role']?.app_access ? { url: manageUserAccountUrl, html } : { html },",
          "60:       },",
          "61:       to: user['email'],",
          "62:       subject: data.subject,",
          "63:      });",
          "67:    }",
          "68:   }",
          "69:  }",
          "",
          "[Removed Lines]",
          "55:     try {",
          "56:      await this.mailService.send({",
          "64:     } catch (error: any) {",
          "65:      logger.error(error.message);",
          "66:     }",
          "",
          "[Added Lines]",
          "55:     this.mailService",
          "56:      .send({",
          "63:      })",
          "64:      .catch((error) => {",
          "65:       logger.error(error, `Could not send notification via mail`);",
          "",
          "---------------"
        ],
        "api/src/services/shares.ts||api/src/services/shares.ts": [
          "File: api/src/services/shares.ts -> api/src/services/shares.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import { ItemsService } from './items.js';",
          "20: import { MailService } from './mail/index.js';",
          "21: import { UsersService } from './users.js';",
          "23: const env = useEnv();",
          "25: export class SharesService extends ItemsService {",
          "26:  authorizationService: AuthorizationService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import { useLogger } from '../logger.js';",
          "25: const logger = useLogger();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157: `;",
          "159:   for (const email of payload.emails) {",
          "165:      },",
          "170:   }",
          "171:  }",
          "172: }",
          "",
          "[Removed Lines]",
          "160:    await mailService.send({",
          "161:     template: {",
          "162:      name: 'base',",
          "163:      data: {",
          "164:       html: md(message),",
          "166:     },",
          "167:     to: email,",
          "168:     subject: `${userName(userInfo)} has shared an item with you`,",
          "169:    });",
          "",
          "[Added Lines]",
          "162:    mailService",
          "163:     .send({",
          "164:      template: {",
          "165:       name: 'base',",
          "166:       data: {",
          "167:        html: md(message),",
          "168:       },",
          "170:      to: email,",
          "171:      subject: `${userName(userInfo)} has shared an item with you`,",
          "172:     })",
          "173:     .catch((error) => {",
          "174:      logger.error(error, `Could not send share notification mail`);",
          "175:     });",
          "",
          "---------------"
        ],
        "api/src/services/users.test.ts||api/src/services/users.test.ts": [
          "File: api/src/services/users.test.ts -> api/src/services/users.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: vi.mock('./mail', () => {",
          "24:  const MailService = vi.fn();",
          "27:  return { MailService };",
          "28: });",
          "",
          "[Removed Lines]",
          "25:  MailService.prototype.send = vi.fn();",
          "",
          "[Added Lines]",
          "25:  MailService.prototype.send = vi.fn().mockImplementation(() => Promise.resolve());",
          "",
          "---------------"
        ],
        "api/src/services/users.ts||api/src/services/users.ts": [
          "File: api/src/services/users.ts -> api/src/services/users.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import { ItemsService } from './items.js';",
          "17: import { MailService } from './mail/index.js';",
          "18: import { SettingsService } from './settings.js';",
          "20: const env = useEnv();",
          "22: export class UsersService extends ItemsService {",
          "23:  constructor(options: AbstractServiceOptions) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: import { useLogger } from '../logger.js';",
          "22: const logger = useLogger();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "406:    if (isEmpty(user) || user.status === 'invited') {",
          "407:     const subjectLine = subject ?? \"You've been invited\";",
          "417:       },",
          "420:    }",
          "421:   }",
          "422:  }",
          "",
          "[Removed Lines]",
          "409:     await mailService.send({",
          "410:      to: user?.email ?? email,",
          "411:      subject: subjectLine,",
          "412:      template: {",
          "413:       name: 'user-invitation',",
          "414:       data: {",
          "415:        url: this.inviteUrl(user?.email ?? email, url),",
          "416:        email: user?.email ?? email,",
          "418:      },",
          "419:     });",
          "",
          "[Added Lines]",
          "411:     mailService",
          "412:      .send({",
          "413:       to: user?.email ?? email,",
          "414:       subject: subjectLine,",
          "415:       template: {",
          "416:        name: 'user-invitation',",
          "417:        data: {",
          "418:         url: this.inviteUrl(user?.email ?? email, url),",
          "419:         email: user?.email ?? email,",
          "420:        },",
          "422:      })",
          "423:      .catch((error) => {",
          "424:       logger.error(error, `Could not send user invitation mail`);",
          "425:      });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "475:   const subjectLine = subject ? subject : 'Password Reset Request';",
          "485:     },",
          "489:   await stall(STALL_TIME, timeStart);",
          "490:  }",
          "",
          "[Removed Lines]",
          "477:   await mailService.send({",
          "478:    to: user.email,",
          "479:    subject: subjectLine,",
          "480:    template: {",
          "481:     name: 'password-reset',",
          "482:     data: {",
          "483:      url: acceptURL,",
          "484:      email: user.email,",
          "486:    },",
          "487:   });",
          "",
          "[Added Lines]",
          "483:   mailService",
          "484:    .send({",
          "485:     to: user.email,",
          "486:     subject: subjectLine,",
          "487:     template: {",
          "488:      name: 'password-reset',",
          "489:      data: {",
          "490:       url: acceptURL,",
          "491:       email: user.email,",
          "492:      },",
          "494:    })",
          "495:    .catch((error) => {",
          "496:     logger.error(error, `Could not send password reset mail`);",
          "497:    });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60ea729957bcd6de28c466fe4369346e14922073",
      "candidate_info": {
        "commit_hash": "60ea729957bcd6de28c466fe4369346e14922073",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/60ea729957bcd6de28c466fe4369346e14922073",
        "files": [
          ".changeset/long-mayflies-try.md",
          "api/src/services/users.ts"
        ],
        "message": "Fix invite email error (#20891)\n\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>",
        "before_after_code_files": [
          "api/src/services/users.ts||api/src/services/users.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "api/src/services/users.ts||api/src/services/users.ts"
          ],
          "candidate": [
            "api/src/services/users.ts||api/src/services/users.ts"
          ]
        }
      },
      "candidate_diff": {
        "api/src/services/users.ts||api/src/services/users.ts": [
          "File: api/src/services/users.ts -> api/src/services/users.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:  private async getUserByEmail(",
          "144:   email: string,",
          "146:   return await this.knex",
          "147:    .select('id', 'role', 'status', 'password', 'email')",
          "148:    .from('directus_users')",
          "",
          "[Removed Lines]",
          "145:  ): Promise<{ id: string; role: string; status: string; password: string; email: string }> {",
          "",
          "[Added Lines]",
          "145:  ): Promise<{ id: string; role: string; status: string; password: string; email: string } | undefined> {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "396:     const subjectLine = subject ?? \"You've been invited\";",
          "398:     await mailService.send({",
          "400:      subject: subjectLine,",
          "401:      template: {",
          "402:       name: 'user-invitation',",
          "403:       data: {",
          "406:       },",
          "407:      },",
          "408:     });",
          "",
          "[Removed Lines]",
          "399:      to: user.email,",
          "404:        url: this.inviteUrl(email, url),",
          "405:        email: user.email,",
          "",
          "[Added Lines]",
          "399:      to: user?.email ?? email,",
          "404:        url: this.inviteUrl(user?.email ?? email, url),",
          "405:        email: user?.email ?? email,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7930029f71ae83ffb21ba6fa42d08e36cc3d8bf",
      "candidate_info": {
        "commit_hash": "d7930029f71ae83ffb21ba6fa42d08e36cc3d8bf",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/d7930029f71ae83ffb21ba6fa42d08e36cc3d8bf",
        "files": [
          "api/src/services/users.test.ts",
          "api/src/services/users.ts",
          "contributors.yml"
        ],
        "message": "Resend user invites (#18147)\n\n* Support for re-sending user invites. Close #1799\n\n* Reuse getUserByEmail in user service.\n\n* Add mockImplementation to spies on ItemsServices\n\n* Signed contributors list.\n\n* Fix invite tests\n\n* Fix comments\n\n---------\n\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>\nCo-authored-by: Rijk van Zanten <rijkvanzanten@me.com>",
        "before_after_code_files": [
          "api/src/services/users.test.ts||api/src/services/users.test.ts",
          "api/src/services/users.ts||api/src/services/users.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "api/src/services/users.ts||api/src/services/users.ts"
          ],
          "candidate": [
            "api/src/services/users.ts||api/src/services/users.ts"
          ]
        }
      },
      "candidate_diff": {
        "api/src/services/users.test.ts||api/src/services/users.test.ts": [
          "File: api/src/services/users.test.ts -> api/src/services/users.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import type { Knex } from 'knex';",
          "4: import { createTracker, MockClient, Tracker } from 'knex-mock-client';",
          "5: import { afterEach, beforeAll, beforeEach, describe, expect, it, MockedFunction, SpyInstance, vi } from 'vitest';",
          "7: import { ForbiddenException, InvalidPayloadException } from '../exceptions/index.js';",
          "8: import { RecordNotUniqueException } from '../exceptions/database/record-not-unique.js';",
          "",
          "[Removed Lines]",
          "6: import { ItemsService, UsersService } from './index.js';",
          "",
          "[Added Lines]",
          "6: import { ItemsService, MailService, UsersService } from './index.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:  getDatabaseClient: vi.fn().mockReturnValue('postgres'),",
          "13: }));",
          "15: const testRoleId = '4ccdb196-14b3-4ed1-b9da-c1978be07ca2';",
          "17: const testSchema = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: vi.mock('./mail', () => {",
          "16:  const MailService = vi.fn();",
          "17:  MailService.prototype.send = vi.fn();",
          "19:  return { MailService };",
          "20: });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:  describe('Services / Users', () => {",
          "68:   let service: UsersService;",
          "69:   let superUpdateManySpy: SpyInstance;",
          "70:   let checkUniqueEmailsSpy: SpyInstance;",
          "71:   let checkPasswordPolicySpy: SpyInstance;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:   let mailService: MailService;",
          "77:   let superCreateManySpy: SpyInstance;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:     },",
          "107:    });",
          "112:    checkUniqueEmailsSpy = vi",
          "",
          "[Removed Lines]",
          "109:    superUpdateManySpy = vi.spyOn(ItemsService.prototype, 'updateMany');",
          "",
          "[Added Lines]",
          "118:    superCreateManySpy = vi.spyOn(ItemsService.prototype as any, 'createMany');",
          "119:    superUpdateManySpy = vi.spyOn(ItemsService.prototype as any, 'updateMany');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:    checkRemainingActiveAdminSpy = vi",
          "122:     .spyOn(UsersService.prototype as any, 'checkRemainingActiveAdmin')",
          "123:     .mockResolvedValue(() => vi.fn());",
          "124:   });",
          "126:   afterEach(() => {",
          "131:   });",
          "133:   describe('createOne', () => {",
          "",
          "[Removed Lines]",
          "127:    checkUniqueEmailsSpy.mockClear();",
          "128:    checkPasswordPolicySpy.mockClear();",
          "129:    checkRemainingAdminExistenceSpy.mockClear();",
          "130:    checkRemainingActiveAdminSpy.mockClear();",
          "",
          "[Added Lines]",
          "135:    vi.spyOn(UsersService.prototype as any, 'inviteUrl').mockImplementation(() => vi.fn());",
          "137:    mailService = new MailService({",
          "138:     schema: testSchema,",
          "139:    });",
          "143:    vi.clearAllMocks();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "603:     expect(checkRemainingAdminExistenceSpy).toBeCalledTimes(1);",
          "604:    });",
          "605:   });",
          "606:  });",
          "607: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620:   describe('invite', () => {",
          "621:    it('should invite new users', async () => {",
          "622:     const service = new UsersService({",
          "623:      knex: db,",
          "624:      schema: testSchema,",
          "625:      accountability: { role: 'test', admin: true },",
          "626:     });",
          "628:     const promise = service.inviteUser('user@example.com', 'invite-role', null);",
          "630:     await expect(promise).resolves.not.toThrow();",
          "632:     expect(superCreateManySpy.mock.lastCall![0]).toEqual([",
          "633:      expect.objectContaining({",
          "634:       email: 'user@example.com',",
          "635:       status: 'invited',",
          "636:       role: 'invite-role',",
          "637:      }),",
          "638:     ]);",
          "640:     expect(mailService.send).toBeCalledTimes(1);",
          "641:    });",
          "643:    it('should re-send invites for invited users', async () => {",
          "644:     const service = new UsersService({",
          "645:      knex: db,",
          "646:      schema: testSchema,",
          "647:      accountability: { role: 'test', admin: true },",
          "648:     });",
          "651:     vi.spyOn(UsersService.prototype as any, 'getUserByEmail').mockResolvedValueOnce({",
          "652:      status: 'invited',",
          "653:      role: 'invite-role',",
          "654:     });",
          "656:     const promise = service.inviteUser('user@example.com', 'invite-role', null);",
          "657:     await expect(promise).resolves.not.toThrow();",
          "659:     expect(superCreateManySpy).not.toBeCalled();",
          "660:     expect(mailService.send).toBeCalledTimes(1);",
          "661:    });",
          "663:    it('should not re-send invites for users in state other than invited', async () => {",
          "664:     const service = new UsersService({",
          "665:      knex: db,",
          "666:      schema: testSchema,",
          "667:      accountability: { role: 'test', admin: true },",
          "668:     });",
          "671:     vi.spyOn(UsersService.prototype as any, 'getUserByEmail').mockResolvedValueOnce({",
          "672:      status: 'active',",
          "673:      role: 'invite-role',",
          "674:     });",
          "676:     const promise = service.inviteUser('user@example.com', 'invite-role', null);",
          "677:     await expect(promise).resolves.not.toThrow();",
          "679:     expect(superCreateManySpy).not.toBeCalled();",
          "680:     expect(mailService.send).not.toBeCalled();",
          "681:    });",
          "683:    it('should update role when re-sent invite contains different role than user has', async () => {",
          "684:     const service = new UsersService({",
          "685:      knex: db,",
          "686:      schema: testSchema,",
          "687:      accountability: { role: 'test', admin: true },",
          "688:     });",
          "690:     tracker.on.select(/select \"admin_access\" from \"directus_roles\"/).response({ admin_access: true });",
          "693:     vi.spyOn(UsersService.prototype as any, 'getUserByEmail').mockResolvedValueOnce({",
          "694:      id: 1,",
          "695:      status: 'invited',",
          "696:      role: 'existing-role',",
          "697:     });",
          "699:     const promise = service.inviteUser('user@example.com', 'invite-role', null);",
          "700:     await expect(promise).resolves.not.toThrow();",
          "702:     expect(superUpdateManySpy.mock.lastCall![0]).toEqual([1]);",
          "703:     expect(superUpdateManySpy.mock.lastCall![1]).toContain({ role: 'invite-role' });",
          "704:    });",
          "705:   });",
          "",
          "---------------"
        ],
        "api/src/services/users.ts||api/src/services/users.ts": [
          "File: api/src/services/users.ts -> api/src/services/users.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import type { Query } from '@directus/types';",
          "3: import { getSimpleHash, toArray } from '@directus/utils';",
          "4: import jwt from 'jsonwebtoken';",
          "6: import { performance } from 'perf_hooks';",
          "7: import getDatabase from '../database/index.js';",
          "8: import env from '../env.js';",
          "",
          "[Removed Lines]",
          "5: import { cloneDeep } from 'lodash-es';",
          "",
          "[Added Lines]",
          "5: import { cloneDeep, isEmpty } from 'lodash-es';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:   }",
          "136:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:  private async getUserByEmail(email: string): Promise<{ id: string; role: string; status: string; password: string }> {",
          "142:   return await this.knex",
          "143:    .select('id', 'role', 'status', 'password')",
          "144:    .from('directus_users')",
          "145:    .whereRaw(`LOWER(??) = ?`, ['email', email.toLowerCase()])",
          "146:    .first();",
          "147:  }",
          "152:  private inviteUrl(email: string, url: string | null): string {",
          "153:   const payload = { email, scope: 'invite' };",
          "155:   const token = jwt.sign(payload, env['SECRET'] as string, { expiresIn: '7d', issuer: 'directus' });",
          "156:   const inviteURL = url ? new Url(url) : new Url(env['PUBLIC_URL']).addPath('admin', 'accept-invite');",
          "157:   inviteURL.setQuery('token', token);",
          "159:   return inviteURL.toString();",
          "160:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "326:   });",
          "328:   for (const email of emails) {",
          "346:      },",
          "349:   }",
          "350:  }",
          "",
          "[Removed Lines]",
          "329:    const payload = { email, scope: 'invite' };",
          "330:    const token = jwt.sign(payload, env['SECRET'] as string, { expiresIn: '7d', issuer: 'directus' });",
          "331:    const subjectLine = subject ?? \"You've been invited\";",
          "332:    const inviteURL = url ? new Url(url) : new Url(env['PUBLIC_URL']).addPath('admin', 'accept-invite');",
          "333:    inviteURL.setQuery('token', token);",
          "336:    await this.createOne({ email, role, status: 'invited' }, opts);",
          "338:    await mailService.send({",
          "339:     to: email,",
          "340:     subject: subjectLine,",
          "341:     template: {",
          "342:      name: 'user-invitation',",
          "343:      data: {",
          "344:       url: inviteURL.toString(),",
          "345:       email,",
          "347:     },",
          "348:    });",
          "",
          "[Added Lines]",
          "354:    const user = await this.getUserByEmail(email);",
          "357:    if (isEmpty(user)) {",
          "358:     await this.createOne({ email, role, status: 'invited' }, opts);",
          "361:    } else if (user.status === 'invited' && user.role !== role) {",
          "362:     await this.updateOne(user.id, { role }, opts);",
          "363:    }",
          "366:    if (isEmpty(user) || user.status === 'invited') {",
          "367:     const subjectLine = subject ?? \"You've been invited\";",
          "369:     await mailService.send({",
          "370:      to: email,",
          "371:      subject: subjectLine,",
          "372:      template: {",
          "373:       name: 'user-invitation',",
          "374:       data: {",
          "375:        url: this.inviteUrl(email, url),",
          "376:        email,",
          "377:       },",
          "379:     });",
          "380:    }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "358:   if (scope !== 'invite') throw new ForbiddenException();",
          "362:   if (user?.status !== 'invited') {",
          "363:    throw new InvalidPayloadException(`Email address ${email} hasn't been invited.`);",
          "",
          "[Removed Lines]",
          "360:   const user = await this.knex.select('id', 'status').from('directus_users').where({ email }).first();",
          "",
          "[Added Lines]",
          "392:   const user = await this.getUserByEmail(email);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "376:   const STALL_TIME = 500;",
          "377:   const timeStart = performance.now();",
          "385:   if (user?.status !== 'active') {",
          "386:    await stall(STALL_TIME, timeStart);",
          "",
          "[Removed Lines]",
          "379:   const user = await this.knex",
          "380:    .select('status', 'password')",
          "381:    .from('directus_users')",
          "382:    .whereRaw('LOWER(??) = ?', ['email', email.toLowerCase()])",
          "383:    .first();",
          "",
          "[Added Lines]",
          "411:   const user = await this.getUserByEmail(email);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "436:    opts.preMutationException = err;",
          "437:   }",
          "441:   if (user?.status !== 'active' || hash !== getSimpleHash('' + user.password)) {",
          "442:    throw new ForbiddenException();",
          "",
          "[Removed Lines]",
          "439:   const user = await this.knex.select('id', 'status', 'password').from('directus_users').where({ email }).first();",
          "",
          "[Added Lines]",
          "467:   const user = await this.getUserByEmail(email);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78db52949ce2ce6bb634d25612c1298853756f9b",
      "candidate_info": {
        "commit_hash": "78db52949ce2ce6bb634d25612c1298853756f9b",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/78db52949ce2ce6bb634d25612c1298853756f9b",
        "files": [
          ".changeset/stale-donuts-whisper.md",
          "api/src/controllers/users.ts",
          "api/src/services/graphql/index.ts",
          "api/src/services/users.ts",
          "docs/self-hosted/config-options.md",
          "packages/env/src/constants/directus-variables.ts",
          "packages/types/src/users.ts",
          "sdk/src/rest/commands/utils/users.ts"
        ],
        "message": "Add support for custom URLs for email verification (#22565)\n\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>",
        "before_after_code_files": [
          "api/src/controllers/users.ts||api/src/controllers/users.ts",
          "api/src/services/graphql/index.ts||api/src/services/graphql/index.ts",
          "api/src/services/users.ts||api/src/services/users.ts",
          "packages/env/src/constants/directus-variables.ts||packages/env/src/constants/directus-variables.ts",
          "packages/types/src/users.ts||packages/types/src/users.ts",
          "sdk/src/rest/commands/utils/users.ts||sdk/src/rest/commands/utils/users.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "api/src/services/users.ts||api/src/services/users.ts"
          ],
          "candidate": [
            "api/src/services/users.ts||api/src/services/users.ts"
          ]
        }
      },
      "candidate_diff": {
        "api/src/controllers/users.ts||api/src/controllers/users.ts": [
          "File: api/src/controllers/users.ts -> api/src/controllers/users.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "505: const registerSchema = Joi.object<RegisterUserInput>({",
          "506:  email: Joi.string().email().required(),",
          "507:  password: Joi.string().required(),",
          "508:  first_name: Joi.string(),",
          "509:  last_name: Joi.string(),",
          "510: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:  verification_url: Joi.string().uri(),",
          "",
          "---------------"
        ],
        "api/src/services/graphql/index.ts||api/src/services/graphql/index.ts": [
          "File: api/src/services/graphql/index.ts -> api/src/services/graphql/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2634:     args: {",
          "2635:      email: new GraphQLNonNull(GraphQLString),",
          "2636:      password: new GraphQLNonNull(GraphQLString),",
          "2637:      first_name: GraphQLString,",
          "2638:      last_name: GraphQLString,",
          "2639:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2637:      verification_url: GraphQLString,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2649:      await service.registerUser({",
          "2650:       email: args.email,",
          "2651:       password: args.password,",
          "2652:       first_name: args.first_name,",
          "2653:       last_name: args.last_name,",
          "2654:      });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2653:       verification_url: args.verification_url,",
          "",
          "---------------"
        ],
        "api/src/services/users.ts||api/src/services/users.ts": [
          "File: api/src/services/users.ts -> api/src/services/users.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:  }",
          "160:  private inviteUrl(email: string, url: string | null): string {",
          "161:   const payload = { email, scope: 'invite' };",
          "163:   const token = jwt.sign(payload, getSecret(), { expiresIn: '7d', issuer: 'directus' });",
          "168:  }",
          "",
          "[Removed Lines]",
          "164:   const inviteURL = url ? new Url(url) : new Url(env['PUBLIC_URL'] as string).addPath('admin', 'accept-invite');",
          "165:   inviteURL.setQuery('token', token);",
          "167:   return inviteURL.toString();",
          "",
          "[Added Lines]",
          "165:   return (url ? new Url(url) : new Url(env['PUBLIC_URL'] as string).addPath('admin', 'accept-invite'))",
          "166:    .setQuery('token', token)",
          "167:    .toString();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:   try {",
          "382:    if (url && isUrlAllowed(url, env['USER_INVITE_URL_ALLOW_LIST'] as string) === false) {",
          "384:    }",
          "385:   } catch (err: any) {",
          "386:    opts.preMutationError = err;",
          "",
          "[Removed Lines]",
          "383:     throw new InvalidPayloadError({ reason: `Url \"${url}\" can't be used to invite users` });",
          "",
          "[Added Lines]",
          "383:     throw new InvalidPayloadError({ reason: `URL \"${url}\" can't be used to invite users` });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "453:  }",
          "455:  async registerUser(input: RegisterUserInput) {",
          "456:   const STALL_TIME = env['REGISTER_STALL_TIME'] as number;",
          "457:   const timeStart = performance.now();",
          "458:   const serviceOptions: AbstractServiceOptions = { accountability: this.accountability, schema: this.schema };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "456:   if (",
          "457:    input.verification_url &&",
          "458:    isUrlAllowed(input.verification_url, env['USER_REGISTER_URL_ALLOW_LIST'] as string) === false",
          "459:   ) {",
          "460:    throw new InvalidPayloadError({",
          "461:     reason: `URL \"${input.verification_url}\" can't be used to verify registered users`,",
          "462:    });",
          "463:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "514:     issuer: 'directus',",
          "515:    });",
          "521:    mailService",
          "522:     .send({",
          "",
          "[Removed Lines]",
          "517:    const verificationURL = new Url(env['PUBLIC_URL'] as string)",
          "518:     .addPath('users', 'register', 'verify-email')",
          "519:     .setQuery('token', token);",
          "",
          "[Added Lines]",
          "526:    const verificationUrl = (",
          "527:     input.verification_url",
          "528:      ? new Url(input.verification_url)",
          "529:      : new Url(env['PUBLIC_URL'] as string).addPath('users', 'register', 'verify-email')",
          "530:    )",
          "531:     .setQuery('token', token)",
          "532:     .toString();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "525:      template: {",
          "526:       name: 'user-registration',",
          "527:       data: {",
          "529:        email: input.email,",
          "530:        first_name,",
          "531:        last_name,",
          "",
          "[Removed Lines]",
          "528:        url: verificationURL.toString(),",
          "",
          "[Added Lines]",
          "541:        url: verificationUrl,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "571:   }",
          "573:   if (url && isUrlAllowed(url, env['PASSWORD_RESET_URL_ALLOW_LIST'] as string) === false) {",
          "575:   }",
          "577:   const mailService = new MailService({",
          "",
          "[Removed Lines]",
          "574:    throw new InvalidPayloadError({ reason: `Url \"${url}\" can't be used to reset passwords` });",
          "",
          "[Added Lines]",
          "587:    throw new InvalidPayloadError({ reason: `URL \"${url}\" can't be used to reset passwords` });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "583:   const payload = { email: user.email, scope: 'password-reset', hash: getSimpleHash('' + user.password) };",
          "584:   const token = jwt.sign(payload, getSecret(), { expiresIn: '1d', issuer: 'directus' });",
          "590:   const subjectLine = subject ? subject : 'Password Reset Request';",
          "",
          "[Removed Lines]",
          "586:   const acceptURL = url",
          "587:    ? new Url(url).setQuery('token', token).toString()",
          "588:    : new Url(env['PUBLIC_URL'] as string).addPath('admin', 'reset-password').setQuery('token', token).toString();",
          "",
          "[Added Lines]",
          "599:   const acceptUrl = (url ? new Url(url) : new Url(env['PUBLIC_URL'] as string).addPath('admin', 'reset-password'))",
          "600:    .setQuery('token', token)",
          "601:    .toString();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "596:     template: {",
          "597:      name: 'password-reset',",
          "598:      data: {",
          "600:       email: user.email,",
          "601:      },",
          "602:     },",
          "",
          "[Removed Lines]",
          "599:       url: acceptURL,",
          "",
          "[Added Lines]",
          "612:       url: acceptUrl,",
          "",
          "---------------"
        ],
        "packages/env/src/constants/directus-variables.ts||packages/env/src/constants/directus-variables.ts": [
          "File: packages/env/src/constants/directus-variables.ts -> packages/env/src/constants/directus-variables.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  'REGISTER_STALL_TIME',",
          "62:  'PASSWORD_RESET_URL_ALLOW_LIST',",
          "63:  'USER_INVITE_URL_ALLOW_LIST',",
          "64:  'IP_TRUST_PROXY',",
          "65:  'IP_CUSTOM_HEADER',",
          "66:  'ASSETS_CONTENT_SECURITY_POLICY',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:  'USER_REGISTER_URL_ALLOW_LIST',",
          "",
          "---------------"
        ],
        "packages/types/src/users.ts||packages/types/src/users.ts": [
          "File: packages/types/src/users.ts -> packages/types/src/users.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: export type RegisterUserInput = {",
          "48:  email: NonNullable<User['email']>;",
          "49:  password: NonNullable<User['password']>;",
          "50:  first_name?: User['first_name'];",
          "51:  last_name?: User['last_name'];",
          "52: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:  verification_url?: string | null;",
          "",
          "---------------"
        ],
        "sdk/src/rest/commands/utils/users.ts||sdk/src/rest/commands/utils/users.ts": [
          "File: sdk/src/rest/commands/utils/users.ts -> sdk/src/rest/commands/utils/users.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:  <Schema>(",
          "54:   email: string,",
          "55:   password: string,",
          "57:  ): RestCommand<void, Schema> =>",
          "58:  () => ({",
          "59:   path: `/users/register`,",
          "",
          "[Removed Lines]",
          "56:   options: { first_name?: string; last_name?: string } = {},",
          "",
          "[Added Lines]",
          "56:   options: { verification_url?: string; first_name?: string; last_name?: string } = {},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9c36d7d8efe8309e318f83af3b8b0babbc680c03",
      "candidate_info": {
        "commit_hash": "9c36d7d8efe8309e318f83af3b8b0babbc680c03",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/9c36d7d8efe8309e318f83af3b8b0babbc680c03",
        "files": [
          "api/src/services/items.ts",
          "api/src/services/roles.test.ts",
          "api/src/services/roles.ts",
          "api/src/services/users.test.ts",
          "api/src/services/users.ts",
          "api/src/types/items.ts"
        ],
        "message": "Throw validation error after authorization (#17499)\n\n* Throw validation error after authorization\n\n* Improve tests\n\n* Refactor for deleteMany\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>\n\n* Refactor other usages in users service that errors before ForbiddenException\n\n* Update tests\n\n* Adjust test for 'deleteByQuery'\n\n---------\n\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>\nCo-authored-by: Rijk van Zanten <rijkvanzanten@me.com>",
        "before_after_code_files": [
          "api/src/services/items.ts||api/src/services/items.ts",
          "api/src/services/roles.test.ts||api/src/services/roles.test.ts",
          "api/src/services/roles.ts||api/src/services/roles.ts",
          "api/src/services/users.test.ts||api/src/services/users.test.ts",
          "api/src/services/users.ts||api/src/services/users.ts",
          "api/src/types/items.ts||api/src/types/items.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "api/src/services/users.ts||api/src/services/users.ts"
          ],
          "candidate": [
            "api/src/services/users.ts||api/src/services/users.ts"
          ]
        }
      },
      "candidate_diff": {
        "api/src/services/items.ts||api/src/services/items.ts": [
          "File: api/src/services/items.ts -> api/src/services/items.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     ? await authorizationService.validatePayload('create', this.collection, payloadAfterHooks)",
          "122:     : payloadAfterHooks;",
          "124:    const {",
          "125:     payload: payloadWithM2O,",
          "126:     revisions: revisionsM2O,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:    if (opts?.preMutationException) {",
          "125:     throw opts.preMutationException;",
          "126:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "546:    ? await authorizationService.validatePayload('update', this.collection, payloadAfterHooks)",
          "547:    : payloadAfterHooks;",
          "549:   await this.knex.transaction(async (trx) => {",
          "550:    const payloadService = new PayloadService(this.collection, {",
          "551:     accountability: this.accountability,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "553:   if (opts?.preMutationException) {",
          "554:    throw opts.preMutationException;",
          "555:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "792:    await authorizationService.checkAccess('delete', this.collection, keys);",
          "793:   }",
          "795:   if (opts?.emitEvents !== false) {",
          "796:    await emitter.emitFilter(",
          "797:     this.eventScope === 'items' ? ['items.delete', `${this.collection}.items.delete`] : `${this.eventScope}.delete`,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "803:   if (opts?.preMutationException) {",
          "804:    throw opts.preMutationException;",
          "805:   }",
          "",
          "---------------"
        ],
        "api/src/services/roles.test.ts||api/src/services/roles.test.ts": [
          "File: api/src/services/roles.test.ts -> api/src/services/roles.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { getTracker, MockClient, Tracker } from 'knex-mock-client';",
          "3: import { afterEach, beforeAll, beforeEach, describe, expect, it, MockedFunction, SpyInstance, vi } from 'vitest';",
          "4: import { ItemsService, PermissionsService, PresetsService, RolesService, UsersService } from '.';",
          "7: vi.mock('../../src/database/index', () => {",
          "8:  return { __esModule: true, default: vi.fn(), getDatabaseClient: vi.fn().mockReturnValue('postgres') };",
          "9: });",
          "11: describe('Integration Tests', () => {",
          "12:  let db: MockedFunction<Knex>;",
          "13:  let tracker: Tracker;",
          "",
          "[Removed Lines]",
          "5: import { UnprocessableEntityException } from '../exceptions';",
          "",
          "[Added Lines]",
          "5: import { ForbiddenException, UnprocessableEntityException } from '../exceptions';",
          "6: import { SchemaOverview } from '@directus/shared/types';",
          "12: const testSchema = {",
          "13:  collections: {",
          "14:   directus_roles: {",
          "15:    collection: 'directus_roles',",
          "16:    primary: 'id',",
          "17:    singleton: false,",
          "18:    sortField: null,",
          "19:    note: null,",
          "20:    accountability: null,",
          "21:    fields: {",
          "22:     id: {",
          "23:      field: 'id',",
          "24:      defaultValue: null,",
          "25:      nullable: false,",
          "26:      generated: true,",
          "27:      type: 'uuid',",
          "28:      dbType: 'uuid',",
          "29:      precision: null,",
          "30:      scale: null,",
          "31:      special: [],",
          "32:      note: null,",
          "33:      validation: null,",
          "34:      alias: false,",
          "35:     },",
          "36:    },",
          "37:   },",
          "38:  },",
          "39:  relations: [],",
          "40: } as SchemaOverview;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:    beforeEach(() => {",
          "40:     service = new RolesService({",
          "41:      knex: db,",
          "46:     });",
          "48:    });",
          "50:    afterEach(() => {",
          "",
          "[Removed Lines]",
          "42:      schema: {",
          "43:       collections: {},",
          "44:       relations: [],",
          "45:      },",
          "47:     superUpdateOne = vi.spyOn(ItemsService.prototype, 'updateOne').mockResolvedValueOnce(adminRoleId);",
          "",
          "[Added Lines]",
          "73:      schema: testSchema,",
          "75:     superUpdateOne = vi.spyOn(ItemsService.prototype, 'updateOne');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:       });",
          "98:       it('having a removed a last user that is the last admin of system', async () => {",
          "99:        const data: Record<string, any> = {",
          "100:         users: [],",
          "101:        };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:        const service = new RolesService({",
          "128:         knex: db,",
          "129:         schema: testSchema,",
          "130:         accountability: { role: 'test', admin: false },",
          "131:        });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:        tracker.on.select('select \"id\" from \"directus_users\" where \"role\" = ?').responseOnce([{ id: userId1 }]);",
          "104:        tracker.on.select('select count(*) as \"count\" from \"directus_users\"').responseOnce({ count: 0 });",
          "107:        try {",
          "109:        } catch (err: any) {",
          "112:        }",
          "114:       });",
          "115:      });",
          "",
          "[Removed Lines]",
          "106:        expect.assertions(3);",
          "108:         await service.updateOne(adminRoleId, data);",
          "110:         expect(err.message).toBe(`You can't remove the last admin user from the admin role.`);",
          "111:         expect(err).toBeInstanceOf(UnprocessableEntityException);",
          "113:        expect(superUpdateOne).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "140:        const promise = service.updateOne(adminRoleId, data);",
          "142:        expect.assertions(5); // to ensure both assertions in the catch block are reached",
          "145:         await promise;",
          "147:         expect(err.message).toBe(`You don't have permission to access this.`);",
          "148:         expect(err).toBeInstanceOf(ForbiddenException);",
          "151:        expect(superUpdateOne).toHaveBeenCalled();",
          "152:        expect(superUpdateOne.mock.lastCall![2].preMutationException.message).toBe(",
          "153:         `You can't remove the last admin user from the admin role.`",
          "154:        );",
          "155:        expect(superUpdateOne.mock.lastCall![2].preMutationException).toBeInstanceOf(",
          "156:         UnprocessableEntityException",
          "157:        );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "155:       });",
          "157:       it('having a removed a last user that is the last admin of system', async () => {",
          "158:        const data: Record<string, any> = {",
          "159:         users: [],",
          "160:        };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:        const service = new RolesService({",
          "203:         knex: db,",
          "204:         schema: testSchema,",
          "205:         accountability: { role: 'test', admin: false },",
          "206:        });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "162:        tracker.on.select('select \"id\" from \"directus_users\" where \"role\" = ?').responseOnce([{ id: userId1 }]);",
          "163:        tracker.on.select('select count(*) as \"count\" from \"directus_users\"').responseOnce({ count: 0 });",
          "166:        try {",
          "168:        } catch (err: any) {",
          "171:        }",
          "173:       });",
          "174:      });",
          "",
          "[Removed Lines]",
          "165:        expect.assertions(3);",
          "167:         await service.updateOne(adminRoleId, data);",
          "169:         expect(err.message).toBe(`You can't remove the last admin user from the admin role.`);",
          "170:         expect(err).toBeInstanceOf(UnprocessableEntityException);",
          "172:        expect(superUpdateOne).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "215:        const promise = service.updateOne(adminRoleId, data);",
          "217:        expect.assertions(5); // to ensure both assertions in the catch block are reached",
          "220:         await promise;",
          "222:         expect(err.message).toBe(`You don't have permission to access this.`);",
          "223:         expect(err).toBeInstanceOf(ForbiddenException);",
          "226:        expect(superUpdateOne).toHaveBeenCalled();",
          "227:        expect(superUpdateOne.mock.lastCall![2].preMutationException.message).toBe(",
          "228:         `You can't remove the last admin user from the admin role.`",
          "229:        );",
          "230:        expect(superUpdateOne.mock.lastCall![2].preMutationException).toBeInstanceOf(",
          "231:         UnprocessableEntityException",
          "232:        );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "244:       });",
          "246:       it('having a removed a last user that is the last admin of system', async () => {",
          "247:        const data: Record<string, any> = {",
          "248:         users: {",
          "249:          create: [],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "307:        const service = new RolesService({",
          "308:         knex: db,",
          "309:         schema: testSchema,",
          "310:         accountability: { role: 'test', admin: false },",
          "311:        });",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "255:        tracker.on.select('select \"id\" from \"directus_users\" where \"role\" = ?').responseOnce([{ id: userId1 }]);",
          "256:        tracker.on.select('select count(*) as \"count\" from \"directus_users\"').responseOnce({ count: 0 });",
          "259:        try {",
          "261:        } catch (err: any) {",
          "264:        }",
          "266:       });",
          "267:      });",
          "268:     });",
          "",
          "[Removed Lines]",
          "258:        expect.assertions(3);",
          "260:         await service.updateOne(adminRoleId, data);",
          "262:         expect(err.message).toBe(`You can't remove the last admin user from the admin role.`);",
          "263:         expect(err).toBeInstanceOf(UnprocessableEntityException);",
          "265:        expect(superUpdateOne).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "324:        const promise = service.updateOne(adminRoleId, data);",
          "326:        expect.assertions(5); // to ensure both assertions in the catch block are reached",
          "329:         await promise;",
          "331:         expect(err.message).toBe(`You don't have permission to access this.`);",
          "332:         expect(err).toBeInstanceOf(ForbiddenException);",
          "335:        expect(superUpdateOne).toHaveBeenCalled();",
          "336:        expect(superUpdateOne.mock.lastCall![2].preMutationException.message).toBe(",
          "337:         `You can't remove the last admin user from the admin role.`",
          "338:        );",
          "339:        expect(superUpdateOne.mock.lastCall![2].preMutationException).toBeInstanceOf(",
          "340:         UnprocessableEntityException",
          "341:        );",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "285:       });",
          "287:       it('having an added user that is the last admin', async () => {",
          "288:        const data: Record<string, any> = {",
          "289:         users: [userId1, userId2],",
          "290:        };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:        const service = new RolesService({",
          "365:         knex: db,",
          "366:         schema: testSchema,",
          "367:         accountability: { role: 'test', admin: false },",
          "368:        });",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "292:        tracker.on.select('select \"id\" from \"directus_users\" where \"role\" = ?').responseOnce([{ id: userId1 }]);",
          "293:        tracker.on.select('select count(*) as \"count\" from \"directus_users\"').responseOnce({ count: 0 });",
          "296:        try {",
          "298:        } catch (err: any) {",
          "301:        }",
          "303:       });",
          "305:       it('having a removed user', async () => {",
          "",
          "[Removed Lines]",
          "295:        expect.assertions(3);",
          "297:         await service.updateOne(adminRoleId, data);",
          "299:         expect(err.message).toBe(`You can't remove the last admin user from the admin role.`);",
          "300:         expect(err).toBeInstanceOf(UnprocessableEntityException);",
          "302:        expect(superUpdateOne).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "377:        const promise = service.updateOne(adminRoleId, data);",
          "379:        expect.assertions(5); // to ensure both assertions in the catch block are reached",
          "382:         await promise;",
          "384:         expect(err.message).toBe(`You don't have permission to access this.`);",
          "385:         expect(err).toBeInstanceOf(ForbiddenException);",
          "388:        expect(superUpdateOne).toHaveBeenCalled();",
          "389:        expect(superUpdateOne.mock.lastCall![2].preMutationException.message).toBe(",
          "390:         `You can't remove the last admin user from the admin role.`",
          "391:        );",
          "392:        expect(superUpdateOne.mock.lastCall![2].preMutationException).toBeInstanceOf(",
          "393:         UnprocessableEntityException",
          "394:        );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "331:       });",
          "333:       it('having a removed a last user that is the last admin of system', async () => {",
          "334:        const data: Record<string, any> = {",
          "335:         users: [],",
          "336:        };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:        const service = new RolesService({",
          "427:         knex: db,",
          "428:         schema: testSchema,",
          "429:         accountability: { role: 'test', admin: false },",
          "430:        });",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "338:        tracker.on.select('select \"id\" from \"directus_users\" where \"role\" = ?').responseOnce([{ id: userId1 }]);",
          "339:        tracker.on.select('select count(*) as \"count\" from \"directus_users\"').responseOnce({ count: 0 });",
          "342:        try {",
          "344:        } catch (err: any) {",
          "347:        }",
          "349:       });",
          "350:      });",
          "",
          "[Removed Lines]",
          "341:        expect.assertions(3);",
          "343:         await service.updateOne(adminRoleId, data);",
          "345:         expect(err.message).toBe(`You can't remove the last admin user from the admin role.`);",
          "346:         expect(err).toBeInstanceOf(UnprocessableEntityException);",
          "348:        expect(superUpdateOne).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "439:        const promise = service.updateOne(adminRoleId, data);",
          "441:        expect.assertions(5); // to ensure both assertions in the catch block are reached",
          "444:         await promise;",
          "446:         expect(err.message).toBe(`You don't have permission to access this.`);",
          "447:         expect(err).toBeInstanceOf(ForbiddenException);",
          "450:        expect(superUpdateOne).toHaveBeenCalled();",
          "451:        expect(superUpdateOne.mock.lastCall![2].preMutationException.message).toBe(",
          "452:         `You can't remove the last admin user from the admin role.`",
          "453:        );",
          "454:        expect(superUpdateOne.mock.lastCall![2].preMutationException).toBeInstanceOf(",
          "455:         UnprocessableEntityException",
          "456:        );",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "364:       });",
          "366:       it('having an added user that is the last admin', async () => {",
          "367:        const data: Record<string, any> = {",
          "368:         users: [{ id: userId1 }, { id: userId2 }],",
          "369:        };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "475:        const service = new RolesService({",
          "476:         knex: db,",
          "477:         schema: testSchema,",
          "478:         accountability: { role: 'test', admin: false },",
          "479:        });",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "371:        tracker.on.select('select \"id\" from \"directus_users\" where \"role\" = ?').responseOnce([{ id: userId1 }]);",
          "372:        tracker.on.select('select count(*) as \"count\" from \"directus_users\"').responseOnce({ count: 0 });",
          "375:        try {",
          "377:        } catch (err: any) {",
          "380:        }",
          "382:       });",
          "384:       it('having a removed user', async () => {",
          "",
          "[Removed Lines]",
          "374:        expect.assertions(3);",
          "376:         await service.updateOne(adminRoleId, data);",
          "378:         expect(err.message).toBe(`You can't remove the last admin user from the admin role.`);",
          "379:         expect(err).toBeInstanceOf(UnprocessableEntityException);",
          "381:        expect(superUpdateOne).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "488:        const promise = service.updateOne(adminRoleId, data);",
          "490:        expect.assertions(5); // to ensure both assertions in the catch block are reached",
          "493:         await promise;",
          "495:         expect(err.message).toBe(`You don't have permission to access this.`);",
          "496:         expect(err).toBeInstanceOf(ForbiddenException);",
          "499:        expect(superUpdateOne).toHaveBeenCalled();",
          "500:        expect(superUpdateOne.mock.lastCall![2].preMutationException.message).toBe(",
          "501:         `You can't remove the last admin user from the admin role.`",
          "502:        );",
          "503:        expect(superUpdateOne.mock.lastCall![2].preMutationException).toBeInstanceOf(",
          "504:         UnprocessableEntityException",
          "505:        );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "410:       });",
          "412:       it('having a removed a last user that is the last admin of system', async () => {",
          "413:        const data: Record<string, any> = {",
          "414:         users: [],",
          "415:        };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "537:        const service = new RolesService({",
          "538:         knex: db,",
          "539:         schema: testSchema,",
          "540:         accountability: { role: 'test', admin: false },",
          "541:        });",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "417:        tracker.on.select('select \"id\" from \"directus_users\" where \"role\" = ?').responseOnce([{ id: userId1 }]);",
          "418:        tracker.on.select('select count(*) as \"count\" from \"directus_users\"').responseOnce({ count: 0 });",
          "421:        try {",
          "423:        } catch (err: any) {",
          "426:        }",
          "428:       });",
          "429:      });",
          "",
          "[Removed Lines]",
          "420:        expect.assertions(3);",
          "422:         await service.updateOne(adminRoleId, data);",
          "424:         expect(err.message).toBe(`You can't remove the last admin user from the admin role.`);",
          "425:         expect(err).toBeInstanceOf(UnprocessableEntityException);",
          "427:        expect(superUpdateOne).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "550:        const promise = service.updateOne(adminRoleId, data);",
          "552:        expect.assertions(5); // to ensure both assertions in the catch block are reached",
          "555:         await promise;",
          "557:         expect(err.message).toBe(`You don't have permission to access this.`);",
          "558:         expect(err).toBeInstanceOf(ForbiddenException);",
          "561:        expect(superUpdateOne).toHaveBeenCalled();",
          "562:        expect(superUpdateOne.mock.lastCall![2].preMutationException.message).toBe(",
          "563:         `You can't remove the last admin user from the admin role.`",
          "564:        );",
          "565:        expect(superUpdateOne.mock.lastCall![2].preMutationException).toBeInstanceOf(",
          "566:         UnprocessableEntityException",
          "567:        );",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "464:       });",
          "466:       it('having an added user that is the last admin', async () => {",
          "467:        const data: Record<string, any> = {",
          "468:         users: {",
          "469:          create: [],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "607:        const service = new RolesService({",
          "608:         knex: db,",
          "609:         schema: testSchema,",
          "610:         accountability: { role: 'test', admin: false },",
          "611:        });",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "475:        tracker.on.select('select \"id\" from \"directus_users\" where \"role\" = ?').responseOnce([{ id: userId1 }]);",
          "476:        tracker.on.select('select count(*) as \"count\" from \"directus_users\"').responseOnce({ count: 0 });",
          "479:        try {",
          "481:        } catch (err: any) {",
          "484:        }",
          "486:       });",
          "488:       it('having a removed user', async () => {",
          "",
          "[Removed Lines]",
          "478:        expect.assertions(3);",
          "480:         await service.updateOne(adminRoleId, data);",
          "482:         expect(err.message).toBe(`You can't remove the last admin user from the admin role.`);",
          "483:         expect(err).toBeInstanceOf(UnprocessableEntityException);",
          "485:        expect(superUpdateOne).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "624:        const promise = service.updateOne(adminRoleId, data);",
          "626:        expect.assertions(5); // to ensure both assertions in the catch block are reached",
          "629:         await promise;",
          "631:         expect(err.message).toBe(`You don't have permission to access this.`);",
          "632:         expect(err).toBeInstanceOf(ForbiddenException);",
          "635:        expect(superUpdateOne).toHaveBeenCalled();",
          "636:        expect(superUpdateOne.mock.lastCall![2].preMutationException.message).toBe(",
          "637:         `You can't remove the last admin user from the admin role.`",
          "638:        );",
          "639:        expect(superUpdateOne.mock.lastCall![2].preMutationException).toBeInstanceOf(",
          "640:         UnprocessableEntityException",
          "641:        );",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "522:       });",
          "524:       it('having a removed a last user that is the last admin of system', async () => {",
          "525:        const data: Record<string, any> = {",
          "526:         users: {",
          "527:          create: [],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "681:        const service = new RolesService({",
          "682:         knex: db,",
          "683:         schema: testSchema,",
          "684:         accountability: { role: 'test', admin: false },",
          "685:        });",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "533:        tracker.on.select('select \"id\" from \"directus_users\" where \"role\" = ?').responseOnce([{ id: userId1 }]);",
          "534:        tracker.on.select('select count(*) as \"count\" from \"directus_users\"').responseOnce({ count: 0 });",
          "537:        try {",
          "539:        } catch (err: any) {",
          "542:        }",
          "544:       });",
          "545:      });",
          "546:     });",
          "",
          "[Removed Lines]",
          "536:        expect.assertions(3);",
          "538:         await service.updateOne(adminRoleId, data);",
          "540:         expect(err.message).toBe(`You can't remove the last admin user from the admin role.`);",
          "541:         expect(err).toBeInstanceOf(UnprocessableEntityException);",
          "543:        expect(superUpdateOne).not.toHaveBeenCalled();",
          "",
          "[Added Lines]",
          "698:        const promise = service.updateOne(adminRoleId, data);",
          "700:        expect.assertions(5); // to ensure both assertions in the catch block are reached",
          "703:         await promise;",
          "705:         expect(err.message).toBe(`You don't have permission to access this.`);",
          "706:         expect(err).toBeInstanceOf(ForbiddenException);",
          "709:        expect(superUpdateOne).toHaveBeenCalled();",
          "710:        expect(superUpdateOne.mock.lastCall![2].preMutationException.message).toBe(",
          "711:         `You can't remove the last admin user from the admin role.`",
          "712:        );",
          "713:        expect(superUpdateOne.mock.lastCall![2].preMutationException).toBeInstanceOf(",
          "714:         UnprocessableEntityException",
          "715:        );",
          "",
          "---------------"
        ],
        "api/src/services/roles.ts||api/src/services/roles.ts": [
          "File: api/src/services/roles.ts -> api/src/services/roles.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  }",
          "72:  async updateOne(key: PrimaryKey, data: Record<string, any>, opts?: MutationOptions): Promise<PrimaryKey> {",
          "75:   }",
          "77:   return super.updateOne(key, data, opts);",
          "",
          "[Removed Lines]",
          "73:   if ('users' in data) {",
          "74:    await this.checkForOtherAdminUsers(key, data.users);",
          "",
          "[Added Lines]",
          "73:   try {",
          "74:    if ('users' in data) {",
          "75:     await this.checkForOtherAdminUsers(key, data.users);",
          "76:    }",
          "77:   } catch (err: any) {",
          "78:    (opts || (opts = {})).preMutationException = err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:   const keys = data.map((item) => item[primaryKeyField]);",
          "84:   const setsToNoAdmin = data.some((item) => item.admin_access === false);",
          "88:   }",
          "90:   return super.updateBatch(data, opts);",
          "91:  }",
          "93:  async updateMany(keys: PrimaryKey[], data: Record<string, any>, opts?: MutationOptions): Promise<PrimaryKey[]> {",
          "96:   }",
          "98:   return super.updateMany(keys, data, opts);",
          "",
          "[Removed Lines]",
          "86:   if (setsToNoAdmin) {",
          "87:    await this.checkForOtherAdminRoles(keys);",
          "94:   if ('admin_access' in data && data.admin_access === false) {",
          "95:    await this.checkForOtherAdminRoles(keys);",
          "",
          "[Added Lines]",
          "90:   try {",
          "91:    if (setsToNoAdmin) {",
          "92:     await this.checkForOtherAdminRoles(keys);",
          "93:    }",
          "94:   } catch (err: any) {",
          "95:    (opts || (opts = {})).preMutationException = err;",
          "102:   try {",
          "103:    if ('admin_access' in data && data.admin_access === false) {",
          "104:     await this.checkForOtherAdminRoles(keys);",
          "105:    }",
          "106:   } catch (err: any) {",
          "107:    (opts || (opts = {})).preMutationException = err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:  }",
          "106:  async deleteMany(keys: PrimaryKey[]): Promise<PrimaryKey[]> {",
          "109:   await this.knex.transaction(async (trx) => {",
          "110:    const itemsService = new ItemsService('directus_roles', {",
          "",
          "[Removed Lines]",
          "107:   await this.checkForOtherAdminRoles(keys);",
          "",
          "[Added Lines]",
          "119:   const opts: MutationOptions = {};",
          "121:   try {",
          "122:    await this.checkForOtherAdminRoles(keys);",
          "123:   } catch (err: any) {",
          "124:    opts.preMutationException = err;",
          "125:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "144:    await usersService.updateByQuery(",
          "145:     {",
          "",
          "[Removed Lines]",
          "136:    await permissionsService.deleteByQuery({",
          "137:     filter: { role: { _in: keys } },",
          "138:    });",
          "140:    await presetsService.deleteByQuery({",
          "141:     filter: { role: { _in: keys } },",
          "142:    });",
          "",
          "[Added Lines]",
          "154:    await permissionsService.deleteByQuery(",
          "155:     {",
          "156:      filter: { role: { _in: keys } },",
          "157:     },",
          "158:     opts",
          "159:    );",
          "161:    await presetsService.deleteByQuery(",
          "162:     {",
          "163:      filter: { role: { _in: keys } },",
          "164:     },",
          "165:     opts",
          "166:    );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "148:     {",
          "149:      status: 'suspended',",
          "150:      role: null,",
          "152:    );",
          "155:   });",
          "157:   return keys;",
          "",
          "[Removed Lines]",
          "151:     }",
          "154:    await itemsService.deleteMany(keys);",
          "",
          "[Added Lines]",
          "175:     },",
          "176:     opts",
          "179:    await itemsService.deleteMany(keys, opts);",
          "",
          "---------------"
        ],
        "api/src/services/users.test.ts||api/src/services/users.test.ts": [
          "File: api/src/services/users.test.ts -> api/src/services/users.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { getTracker, MockClient, Tracker } from 'knex-mock-client';",
          "4: import { afterEach, beforeAll, beforeEach, describe, expect, it, MockedFunction, SpyInstance, vi } from 'vitest';",
          "5: import { ItemsService, UsersService } from '.';",
          "7: import { RecordNotUniqueException } from '../exceptions/database/record-not-unique';",
          "9: vi.mock('../../src/database/index', () => ({",
          "",
          "[Removed Lines]",
          "6: import { InvalidPayloadException } from '../exceptions';",
          "",
          "[Added Lines]",
          "6: import { ForbiddenException, InvalidPayloadException } from '../exceptions';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:      const promise = service.updateOne(1, { [field]: 'test' });",
          "236:      try {",
          "237:       await promise;",
          "238:      } catch (err: any) {",
          "241:      }",
          "242:     }",
          "243:    );",
          "",
          "[Removed Lines]",
          "234:      expect.assertions(2); // to ensure both assertions in the catch block are reached",
          "239:       expect(err.message).toBe(`You can't change the \"${field}\" value manually.`);",
          "240:       expect(err).toBeInstanceOf(InvalidPayloadException);",
          "",
          "[Added Lines]",
          "234:      expect.assertions(5); // to ensure both assertions in the catch block are reached",
          "239:       expect(err.message).toBe(`You don't have permission to access this.`);",
          "240:       expect(err).toBeInstanceOf(ForbiddenException);",
          "243:      expect(superUpdateManySpy).toHaveBeenCalled();",
          "244:      expect(superUpdateManySpy.mock.lastCall![2].preMutationException.message).toBe(",
          "245:       `You can't change the \"${field}\" value manually.`",
          "246:      );",
          "247:      expect(superUpdateManySpy.mock.lastCall![2].preMutationException).toBeInstanceOf(InvalidPayloadException);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:      const promise = service.updateMany([1], { [field]: 'test' });",
          "345:      try {",
          "346:       await promise;",
          "347:      } catch (err: any) {",
          "350:      }",
          "351:     }",
          "352:    );",
          "",
          "[Removed Lines]",
          "343:      expect.assertions(2); // to ensure both assertions in the catch block are reached",
          "348:       expect(err.message).toBe(`You can't change the \"${field}\" value manually.`);",
          "349:       expect(err).toBeInstanceOf(InvalidPayloadException);",
          "",
          "[Added Lines]",
          "349:      expect.assertions(5); // to ensure both assertions in the catch block are reached",
          "354:       expect(err.message).toBe(`You don't have permission to access this.`);",
          "355:       expect(err).toBeInstanceOf(ForbiddenException);",
          "358:      expect(superUpdateManySpy).toHaveBeenCalled();",
          "359:      expect(superUpdateManySpy.mock.lastCall![2].preMutationException.message).toBe(",
          "360:       `You can't change the \"${field}\" value manually.`",
          "361:      );",
          "362:      expect(superUpdateManySpy.mock.lastCall![2].preMutationException).toBeInstanceOf(InvalidPayloadException);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "470:      const promise = service.updateByQuery({}, { [field]: 'test' });",
          "474:      try {",
          "475:       await promise;",
          "476:      } catch (err: any) {",
          "479:      }",
          "480:     }",
          "481:    );",
          "",
          "[Removed Lines]",
          "472:      expect.assertions(2); // to ensure both assertions in the catch block are reached",
          "477:       expect(err.message).toBe(`You can't change the \"${field}\" value manually.`);",
          "478:       expect(err).toBeInstanceOf(InvalidPayloadException);",
          "",
          "[Added Lines]",
          "484:      expect.assertions(5); // to ensure both assertions in the catch block are reached",
          "489:       expect(err.message).toBe(`You don't have permission to access this.`);",
          "490:       expect(err).toBeInstanceOf(ForbiddenException);",
          "493:      expect(superUpdateManySpy).toHaveBeenCalled();",
          "494:      expect(superUpdateManySpy.mock.lastCall![2].preMutationException.message).toBe(",
          "495:       `You can't change the \"${field}\" value manually.`",
          "496:      );",
          "497:      expect(superUpdateManySpy.mock.lastCall![2].preMutationException).toBeInstanceOf(InvalidPayloadException);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "516:   describe('deleteOne', () => {",
          "517:    it('should checkRemainingAdminExistence once', async () => {",
          "519:     expect(checkRemainingAdminExistenceSpy).toBeCalledTimes(1);",
          "520:    });",
          "521:   });",
          "523:   describe('deleteMany', () => {",
          "524:    it('should checkRemainingAdminExistence once', async () => {",
          "526:     expect(checkRemainingAdminExistenceSpy).toBeCalledTimes(1);",
          "527:    });",
          "528:   });",
          "530:   describe('deleteByQuery', () => {",
          "531:    it('should checkRemainingAdminExistence once', async () => {",
          "536:     expect(checkRemainingAdminExistenceSpy).toBeCalledTimes(1);",
          "537:    });",
          "538:   });",
          "",
          "[Removed Lines]",
          "518:     await service.deleteOne(1);",
          "525:     await service.deleteMany([1]);",
          "533:     vi.spyOn(ItemsService.prototype, 'readByQuery').mockResolvedValue([{ id: 1 }]);",
          "535:     await service.deleteByQuery({});",
          "",
          "[Added Lines]",
          "536:     const service = new UsersService({",
          "537:      knex: db,",
          "538:      schema: testSchema,",
          "539:      accountability: { role: 'test', admin: false },",
          "540:     });",
          "542:     const promise = service.deleteOne(1);",
          "544:     expect.assertions(3); // to ensure both assertions in the catch block are reached",
          "546:     try {",
          "547:      await promise;",
          "548:     } catch (err: any) {",
          "549:      expect(err.message).toBe(`You don't have permission to access this.`);",
          "550:      expect(err).toBeInstanceOf(ForbiddenException);",
          "551:     }",
          "559:     const service = new UsersService({",
          "560:      knex: db,",
          "561:      schema: testSchema,",
          "562:      accountability: { role: 'test', admin: false },",
          "563:     });",
          "565:     const promise = service.deleteMany([1]);",
          "567:     expect.assertions(3); // to ensure both assertions in the catch block are reached",
          "569:     try {",
          "570:      await promise;",
          "571:     } catch (err: any) {",
          "572:      expect(err.message).toBe(`You don't have permission to access this.`);",
          "573:      expect(err).toBeInstanceOf(ForbiddenException);",
          "574:     }",
          "582:     const service = new UsersService({",
          "583:      knex: db,",
          "584:      schema: testSchema,",
          "585:      accountability: { role: 'test', admin: false },",
          "586:     });",
          "589:     vi.spyOn(ItemsService.prototype, 'readByQuery').mockResolvedValueOnce([{ id: 1 }]);",
          "591:     const promise = service.deleteByQuery({ filter: { id: { _eq: 1 } } });",
          "593:     expect.assertions(3); // to ensure both assertions in the catch block are reached",
          "595:     try {",
          "596:      await promise;",
          "597:     } catch (err: any) {",
          "598:      expect(err.message).toBe(`You don't have permission to access this.`);",
          "599:      expect(err).toBeInstanceOf(ForbiddenException);",
          "600:     }",
          "",
          "---------------"
        ],
        "api/src/services/users.ts||api/src/services/users.ts": [
          "File: api/src/services/users.ts -> api/src/services/users.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:   const emails = data.map((payload) => payload.email).filter((email) => email);",
          "156:   const passwords = data.map((payload) => payload.password).filter((password) => password);",
          "164:   }",
          "166:   return await super.createMany(data, opts);",
          "",
          "[Removed Lines]",
          "158:   if (emails.length) {",
          "159:    await this.checkUniqueEmails(emails);",
          "160:   }",
          "162:   if (passwords.length) {",
          "163:    await this.checkPasswordPolicy(passwords);",
          "",
          "[Added Lines]",
          "158:   try {",
          "159:    if (emails.length) {",
          "160:     await this.checkUniqueEmails(emails);",
          "161:    }",
          "163:    if (passwords.length) {",
          "164:     await this.checkPasswordPolicy(passwords);",
          "165:    }",
          "166:   } catch (err: any) {",
          "167:    (opts || (opts = {})).preMutationException = err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:  async updateMany(keys: PrimaryKey[], data: Partial<Item>, opts?: MutationOptions): Promise<PrimaryKey[]> {",
          "218:    }",
          "232:    }",
          "247:    }",
          "255:    }",
          "258:   }",
          "260:   return await super.updateMany(keys, data, opts);",
          "",
          "[Removed Lines]",
          "210:   if (data.role) {",
          "212:    const roleId = data.role?.id ?? data.role;",
          "214:    const newRole = await this.knex.select('admin_access').from('directus_roles').where('id', roleId).first();",
          "216:    if (!newRole?.admin_access) {",
          "217:     await this.checkRemainingAdminExistence(keys);",
          "219:   }",
          "221:   if (data.status !== undefined && data.status !== 'active') {",
          "222:    await this.checkRemainingActiveAdmin(keys);",
          "223:   }",
          "225:   if (data.email) {",
          "226:    if (keys.length > 1) {",
          "227:     throw new RecordNotUniqueException('email', {",
          "228:      collection: 'directus_users',",
          "229:      field: 'email',",
          "230:      invalid: data.email,",
          "231:     });",
          "233:    await this.checkUniqueEmails([data.email], keys[0]);",
          "234:   }",
          "236:   if (data.password) {",
          "237:    await this.checkPasswordPolicy([data.password]);",
          "238:   }",
          "240:   if (data.tfa_secret !== undefined) {",
          "241:    throw new InvalidPayloadException(`You can't change the \"tfa_secret\" value manually.`);",
          "242:   }",
          "244:   if (data.provider !== undefined) {",
          "245:    if (this.accountability && this.accountability.admin !== true) {",
          "246:     throw new InvalidPayloadException(`You can't change the \"provider\" value manually.`);",
          "249:    data.auth_data = null;",
          "250:   }",
          "252:   if (data.external_identifier !== undefined) {",
          "253:    if (this.accountability && this.accountability.admin !== true) {",
          "254:     throw new InvalidPayloadException(`You can't change the \"external_identifier\" value manually.`);",
          "257:    data.auth_data = null;",
          "",
          "[Added Lines]",
          "214:   try {",
          "215:    if (data.role) {",
          "217:     const roleId = data.role?.id ?? data.role;",
          "219:     const newRole = await this.knex.select('admin_access').from('directus_roles').where('id', roleId).first();",
          "221:     if (!newRole?.admin_access) {",
          "222:      await this.checkRemainingAdminExistence(keys);",
          "223:     }",
          "226:    if (data.status !== undefined && data.status !== 'active') {",
          "227:     await this.checkRemainingActiveAdmin(keys);",
          "230:    if (data.email) {",
          "231:     if (keys.length > 1) {",
          "232:      throw new RecordNotUniqueException('email', {",
          "233:       collection: 'directus_users',",
          "234:       field: 'email',",
          "235:       invalid: data.email,",
          "236:      });",
          "237:     }",
          "238:     await this.checkUniqueEmails([data.email], keys[0]);",
          "239:    }",
          "241:    if (data.password) {",
          "242:     await this.checkPasswordPolicy([data.password]);",
          "243:    }",
          "245:    if (data.tfa_secret !== undefined) {",
          "246:     throw new InvalidPayloadException(`You can't change the \"tfa_secret\" value manually.`);",
          "249:    if (data.provider !== undefined) {",
          "250:     if (this.accountability && this.accountability.admin !== true) {",
          "251:      throw new InvalidPayloadException(`You can't change the \"provider\" value manually.`);",
          "252:     }",
          "254:     data.auth_data = null;",
          "257:    if (data.external_identifier !== undefined) {",
          "258:     if (this.accountability && this.accountability.admin !== true) {",
          "259:      throw new InvalidPayloadException(`You can't change the \"external_identifier\" value manually.`);",
          "260:     }",
          "262:     data.auth_data = null;",
          "263:    }",
          "264:   } catch (err: any) {",
          "265:    (opts || (opts = {})).preMutationException = err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "274:  async deleteMany(keys: PrimaryKey[], opts?: MutationOptions): Promise<PrimaryKey[]> {",
          "277:   await this.knex('directus_notifications').update({ sender: null }).whereIn('sender', keys);",
          "",
          "[Removed Lines]",
          "275:   await this.checkRemainingAdminExistence(keys);",
          "",
          "[Added Lines]",
          "283:   try {",
          "284:    await this.checkRemainingAdminExistence(keys);",
          "285:   } catch (err: any) {",
          "286:    (opts || (opts = {})).preMutationException = err;",
          "287:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300:  }",
          "302:  async inviteUser(email: string | string[], role: string, url: string | null, subject?: string | null): Promise<void> {",
          "305:   }",
          "307:   const emails = toArray(email);",
          "",
          "[Removed Lines]",
          "303:   if (url && isUrlAllowed(url, env.USER_INVITE_URL_ALLOW_LIST) === false) {",
          "304:    throw new InvalidPayloadException(`Url \"${url}\" can't be used to invite users.`);",
          "",
          "[Added Lines]",
          "315:   const opts: MutationOptions = {};",
          "317:   try {",
          "318:    if (url && isUrlAllowed(url, env.USER_INVITE_URL_ALLOW_LIST) === false) {",
          "319:     throw new InvalidPayloadException(`Url \"${url}\" can't be used to invite users.`);",
          "320:    }",
          "321:   } catch (err: any) {",
          "322:    opts.preMutationException = err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "318:    inviteURL.setQuery('token', token);",
          "323:    await mailService.send({",
          "324:     to: email,",
          "",
          "[Removed Lines]",
          "321:    await this.createOne({ email, role, status: 'invited' });",
          "",
          "[Added Lines]",
          "339:    await this.createOne({ email, role, status: 'invited' }, opts);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "358:  }",
          "360:  async requestPasswordReset(email: string, url: string | null, subject?: string | null): Promise<void> {",
          "365:   const STALL_TIME = 500;",
          "366:   const timeStart = performance.now();",
          "",
          "[Removed Lines]",
          "361:   if (url && isUrlAllowed(url, env.PASSWORD_RESET_URL_ALLOW_LIST) === false) {",
          "362:    throw new InvalidPayloadException(`Url \"${url}\" can't be used to reset passwords.`);",
          "363:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "376:    throw new ForbiddenException();",
          "377:   }",
          "379:   const mailService = new MailService({",
          "380:    schema: this.schema,",
          "381:    knex: this.knex,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393:   if (url && isUrlAllowed(url, env.PASSWORD_RESET_URL_ALLOW_LIST) === false) {",
          "394:    throw new InvalidPayloadException(`Url \"${url}\" can't be used to reset passwords.`);",
          "395:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "414:   if (scope !== 'password-reset' || !hash) throw new ForbiddenException();",
          "418:   const user = await this.knex.select('id', 'status', 'password').from('directus_users').where({ email }).first();",
          "",
          "[Removed Lines]",
          "416:   await this.checkPasswordPolicy([password]);",
          "",
          "[Added Lines]",
          "434:   const opts: MutationOptions = {};",
          "436:   try {",
          "437:    await this.checkPasswordPolicy([password]);",
          "438:   } catch (err: any) {",
          "439:    opts.preMutationException = err;",
          "440:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "431:    },",
          "432:   });",
          "435:  }",
          "436: }",
          "",
          "[Removed Lines]",
          "434:   await service.updateOne(user.id, { password, status: 'active' });",
          "",
          "[Added Lines]",
          "458:   await service.updateOne(user.id, { password, status: 'active' }, opts);",
          "",
          "---------------"
        ],
        "api/src/types/items.ts||api/src/types/items.ts": [
          "File: api/src/types/items.ts -> api/src/types/items.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import { EventContext } from '@directus/shared/types';",
          "8: export type Item = Record<string, any>;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import { BaseException } from '@directus/shared/exceptions';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:  bypassEmitAction?: (params: ActionEventParams) => void;",
          "48: };",
          "50: export type ActionEventParams = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:  preMutationException?: BaseException;",
          "",
          "---------------"
        ]
      }
    }
  ]
}