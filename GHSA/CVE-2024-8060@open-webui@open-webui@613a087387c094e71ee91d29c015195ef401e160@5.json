{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ae0554224adf81ff0a6ae27828db79f1f6bdf3e6",
      "candidate_info": {
        "commit_hash": "ae0554224adf81ff0a6ae27828db79f1f6bdf3e6",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/ae0554224adf81ff0a6ae27828db79f1f6bdf3e6",
        "files": [
          "backend/open_webui/main.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/main.py||backend/open_webui/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "987:             \"files\": form_data.get(\"files\", None),",
          "988:             \"features\": form_data.get(\"features\", None),",
          "989:             \"variables\": form_data.get(\"variables\", None),",
          "991:             \"direct\": model_item.get(\"direct\", False),",
          "993:                 {\"function_calling\": \"native\"}",
          "",
          "[Removed Lines]",
          "990:             \"model\": model_info,",
          "",
          "[Added Lines]",
          "990:             \"model\": model_info.model_dump() if model_info else model,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dbe5d1ca0867fd7b473b5640172258c75c590fd4",
      "candidate_info": {
        "commit_hash": "dbe5d1ca0867fd7b473b5640172258c75c590fd4",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/dbe5d1ca0867fd7b473b5640172258c75c590fd4",
        "files": [
          "backend/open_webui/retrieval/utils.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/retrieval/utils.py||backend/open_webui/retrieval/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/retrieval/utils.py||backend/open_webui/retrieval/utils.py": [
          "File: backend/open_webui/retrieval/utils.py -> backend/open_webui/retrieval/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:     for file in files:",
          "307:         if file.get(\"docs\"):",
          "310:             context = {",
          "311:                 \"documents\": [[doc.get(\"content\") for doc in file.get(\"docs\")]],",
          "312:                 \"metadatas\": [[doc.get(\"metadata\") for doc in file.get(\"docs\")]],",
          "",
          "[Removed Lines]",
          "309:             print(\"file.get('docs')\", file.get(\"docs\"))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "88c02d5a140e732129d1ec9006324a6f1c69074f",
      "candidate_info": {
        "commit_hash": "88c02d5a140e732129d1ec9006324a6f1c69074f",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/88c02d5a140e732129d1ec9006324a6f1c69074f",
        "files": [
          "backend/open_webui/env.py",
          "backend/open_webui/socket/main.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/env.py||backend/open_webui/env.py",
          "backend/open_webui/socket/main.py||backend/open_webui/socket/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/env.py||backend/open_webui/env.py": [
          "File: backend/open_webui/env.py -> backend/open_webui/env.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "386: WEBSOCKET_MANAGER = os.environ.get(\"WEBSOCKET_MANAGER\", \"\")",
          "388: WEBSOCKET_REDIS_URL = os.environ.get(\"WEBSOCKET_REDIS_URL\", REDIS_URL)",
          "391: AIOHTTP_CLIENT_TIMEOUT = os.environ.get(\"AIOHTTP_CLIENT_TIMEOUT\", \"\")",
          "",
          "[Removed Lines]",
          "389: WEBSOCKET_REDIS_LOCK_TIMEOUT_IN_SECONDS = os.environ.get(\"WEBSOCKET_REDIS_LOCK_TIMEOUT_IN_SECONDS\", 60)",
          "",
          "[Added Lines]",
          "389: WEBSOCKET_REDIS_LOCK_TIMEOUT = os.environ.get(\"WEBSOCKET_REDIS_LOCK_TIMEOUT\", 60)",
          "",
          "---------------"
        ],
        "backend/open_webui/socket/main.py||backend/open_webui/socket/main.py": [
          "File: backend/open_webui/socket/main.py -> backend/open_webui/socket/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     ENABLE_WEBSOCKET_SUPPORT,",
          "13:     WEBSOCKET_MANAGER,",
          "14:     WEBSOCKET_REDIS_URL,",
          "16: )",
          "17: from open_webui.utils.auth import decode_token",
          "18: from open_webui.socket.utils import RedisDict, RedisLock",
          "",
          "[Removed Lines]",
          "15:     WEBSOCKET_REDIS_LOCK_TIMEOUT_IN_SECONDS,",
          "",
          "[Added Lines]",
          "15:     WEBSOCKET_REDIS_LOCK_TIMEOUT,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:     clean_up_lock = RedisLock(",
          "63:         redis_url=WEBSOCKET_REDIS_URL,",
          "64:         lock_name=\"usage_cleanup_lock\",",
          "66:     )",
          "67:     aquire_func = clean_up_lock.aquire_lock",
          "68:     renew_func = clean_up_lock.renew_lock",
          "",
          "[Removed Lines]",
          "65:         timeout_secs=WEBSOCKET_REDIS_LOCK_TIMEOUT_IN_SECONDS,",
          "",
          "[Added Lines]",
          "65:         timeout_secs=WEBSOCKET_REDIS_LOCK_TIMEOUT,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3214d08b51f495d30bc1f1de3e21fc81abe244c",
      "candidate_info": {
        "commit_hash": "e3214d08b51f495d30bc1f1de3e21fc81abe244c",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/e3214d08b51f495d30bc1f1de3e21fc81abe244c",
        "files": [
          "src/lib/apis/index.ts",
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/apis/index.ts||src/lib/apis/index.ts",
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/apis/index.ts||src/lib/apis/index.ts": [
          "File: src/lib/apis/index.ts -> src/lib/apis/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "880:  return res;",
          "881: };",
          "884:  let error = null;",
          "886:  const res = await fetch(`${WEBUI_BASE_URL}/api/version/updates`, {",
          "887:   method: 'GET',",
          "888:   headers: {",
          "890:   }",
          "891:  })",
          "892:   .then(async (res) => {",
          "",
          "[Removed Lines]",
          "883: export const getVersionUpdates = async () => {",
          "889:    'Content-Type': 'application/json'",
          "",
          "[Added Lines]",
          "883: export const getVersionUpdates = async (token: string) => {",
          "889:    'Content-Type': 'application/json',",
          "890:    Authorization: `Bearer ${token}`",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "827:   }",
          "828:  };",
          "831:   if (responseMessageId === null) {",
          "832:    return [];",
          "833:   }",
          "835:   const message = history.messages[responseMessageId];",
          "836:   if (message?.parentId) {",
          "838:   } else {",
          "839:    return [message];",
          "840:   }",
          "",
          "[Removed Lines]",
          "830:  const createMessagesList = (responseMessageId) => {",
          "837:    return [...createMessagesList(message.parentId), message];",
          "",
          "[Added Lines]",
          "830:  const createMessagesList = (history, responseMessageId) => {",
          "837:    return [...createMessagesList(history, message.parentId), message];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "896:  };",
          "898:  const chatActionHandler = async (chatId, actionId, modelId, responseMessageId, event = null) => {",
          "901:   const res = await chatAction(localStorage.token, actionId, {",
          "902:    model: modelId,",
          "",
          "[Removed Lines]",
          "899:   const messages = createMessagesList(responseMessageId);",
          "",
          "[Added Lines]",
          "899:   const messages = createMessagesList(history, responseMessageId);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "965:    const modelId = selectedModels[0];",
          "966:    const model = $models.filter((m) => m.id === modelId).at(0);",
          "969:    const parentMessage = messages.length !== 0 ? messages.at(-1) : null;",
          "971:    const userMessageId = uuidv4();",
          "",
          "[Removed Lines]",
          "968:    const messages = createMessagesList(history.currentId);",
          "",
          "[Added Lines]",
          "968:    const messages = createMessagesList(history, history.currentId);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1210:    );",
          "1212:    history.messages[message.id] = message;",
          "1214:   }",
          "1216:   console.log(data);",
          "",
          "[Removed Lines]",
          "1213:    await chatCompletedHandler(chatId, message.model, message.id, createMessagesList(message.id));",
          "",
          "[Added Lines]",
          "1213:    await chatCompletedHandler(",
          "1214:     chatId,",
          "1215:     message.model,",
          "1216:     message.id,",
          "1217:     createMessagesList(history, message.id)",
          "1218:    );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1226:  const submitPrompt = async (userPrompt, { _raw = false } = {}) => {",
          "1227:   console.log('submitPrompt', userPrompt, $chatId);",
          "1230:   const _selectedModels = selectedModels.map((modelId) =>",
          "1231:    $models.map((m) => m.id).includes(modelId) ? modelId : ''",
          "1232:   );",
          "",
          "[Removed Lines]",
          "1229:   const messages = createMessagesList(history.currentId);",
          "",
          "[Added Lines]",
          "1234:   const messages = createMessagesList(history, history.currentId);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1326:   saveSessionSelectedModels();",
          "1329:  };",
          "1331:  const sendPrompt = async (",
          "",
          "[Removed Lines]",
          "1328:   await sendPrompt(userPrompt, userMessageId, { newChat: true });",
          "",
          "[Added Lines]",
          "1333:   sendPrompt(userPrompt, userMessageId, { newChat: true });",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1333:   parentId: string,",
          "1334:   { modelId = null, modelIdx = null, newChat = false } = {}",
          "1335:  ) => {",
          "1337:   if (",
          "1338:    newChat &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1341:   const _chatId = JSON.parse(JSON.stringify($chatId));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1341:   ) {",
          "1342:    await initChatHandler();",
          "1343:   } else {",
          "1345:   }",
          "",
          "[Removed Lines]",
          "1344:    await saveChatHandler($chatId);",
          "",
          "[Added Lines]",
          "1351:    await saveChatHandler(_chatId);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1390:   await tick();",
          "1396:   await Promise.all(",
          "1397:    selectedModelIds.map(async (modelId, _modelIdx) => {",
          "1398:     console.log('modelId', modelId);",
          "1399:     const model = $models.filter((m) => m.id === modelId).at(0);",
          "1401:     if (model) {",
          "1404:      const hasImages = messages.some((message) =>",
          "1405:       message?.files?.some((file) => file.type === 'image')",
          "",
          "[Removed Lines]",
          "1393:   await saveChatHandler($chatId);",
          "1395:   const _chatId = JSON.parse(JSON.stringify($chatId));",
          "1402:      const messages = createMessagesList(parentId);",
          "",
          "[Added Lines]",
          "1400:   saveChatHandler(_chatId);",
          "1408:      const messages = createMessagesList(history, parentId);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1444:      const chatEventEmitter = await getChatEventEmitter(model.id, _chatId);",
          "1446:      scrollToBottom();",
          "1449:      if (chatEventEmitter) clearInterval(chatEventEmitter);",
          "1450:     } else {",
          "",
          "[Removed Lines]",
          "1447:      await sendPromptSocket(model, responseMessageId, _chatId);",
          "",
          "[Added Lines]",
          "1453:      await sendPromptSocket(history, model, responseMessageId, _chatId);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1457:   chats.set(await getChatList(localStorage.token, $currentChatPage));",
          "1458:  };",
          "1461:   const responseMessage = history.messages[responseMessageId];",
          "1462:   const userMessage = history.messages[responseMessage.parentId];",
          "",
          "[Removed Lines]",
          "1460:  const sendPromptSocket = async (model, responseMessageId, _chatId) => {",
          "",
          "[Added Lines]",
          "1466:  const sendPromptSocket = async (history, model, responseMessageId, _chatId) => {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1507:       }`",
          "1508:      }",
          "1509:     : undefined,",
          "1511:     ...message,",
          "1512:     content: removeDetailsWithReasoning(message.content)",
          "1513:    }))",
          "",
          "[Removed Lines]",
          "1510:    ...createMessagesList(responseMessageId).map((message) => ({",
          "",
          "[Added Lines]",
          "1516:    ...createMessagesList(history, responseMessageId).map((message) => ({",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1742:     .at(0);",
          "1744:    if (model) {",
          "1746:    }",
          "1747:   }",
          "1748:  };",
          "",
          "[Removed Lines]",
          "1745:     await sendPromptSocket(model, responseMessage.id, _chatId);",
          "",
          "[Added Lines]",
          "1751:     await sendPromptSocket(history, model, responseMessage.id, _chatId);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1803:     system: $settings.system ?? undefined,",
          "1804:     params: params,",
          "1805:     history: history,",
          "1807:     tags: [],",
          "1808:     timestamp: Date.now()",
          "1809:    });",
          "",
          "[Removed Lines]",
          "1806:     messages: createMessagesList(history.currentId),",
          "",
          "[Added Lines]",
          "1812:     messages: createMessagesList(history, history.currentId),",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1825:     chat = await updateChatById(localStorage.token, _chatId, {",
          "1826:      models: selectedModels,",
          "1827:      history: history,",
          "1829:      params: params,",
          "1830:      files: chatFiles",
          "1831:     });",
          "",
          "[Removed Lines]",
          "1828:      messages: createMessagesList(history.currentId),",
          "",
          "[Added Lines]",
          "1834:      messages: createMessagesList(history, history.currentId),",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1933:     {/if}",
          "1935:     <div class=\"flex flex-col flex-auto z-10 w-full\">",
          "1937:       <div",
          "1938:        class=\" pb-2.5 flex flex-col justify-between w-full flex-auto overflow-auto h-0 max-w-full z-10 scrollbar-hidden\"",
          "1939:        id=\"messages-container\"",
          "",
          "[Removed Lines]",
          "1936:      {#if $settings?.landingPageMode === 'chat' || createMessagesList(history.currentId).length > 0}",
          "",
          "[Added Lines]",
          "1942:      {#if $settings?.landingPageMode === 'chat' || createMessagesList(history, history.currentId).length > 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3dde2f67cfaa938b9b25cf549deb9249793835d8",
      "candidate_info": {
        "commit_hash": "3dde2f67cfaa938b9b25cf549deb9249793835d8",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/3dde2f67cfaa938b9b25cf549deb9249793835d8",
        "files": [
          "backend/open_webui/utils/chat.py",
          "backend/open_webui/utils/filter.py",
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/chat.py||backend/open_webui/utils/chat.py",
          "backend/open_webui/utils/filter.py||backend/open_webui/utils/filter.py",
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/chat.py||backend/open_webui/utils/chat.py": [
          "File: backend/open_webui/utils/chat.py -> backend/open_webui/utils/chat.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:     try:",
          "205:         result, _ = await process_filter_functions(",
          "208:             request=request,",
          "210:             extra_params=extra_params,",
          "211:         )",
          "212:         return result",
          "",
          "[Removed Lines]",
          "206:             handler_type=\"outlet\",",
          "207:             filter_ids=get_sorted_filter_ids(model),",
          "209:             data=data,",
          "",
          "[Added Lines]",
          "207:             filter_ids=get_sorted_filter_ids(model),",
          "208:             filter_type=\"outlet\",",
          "209:             form_data=data,",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/filter.py||backend/open_webui/utils/filter.py": [
          "File: backend/open_webui/utils/filter.py -> backend/open_webui/utils/filter.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         function.id",
          "20:         for function in Functions.get_functions_by_type(\"filter\", active_only=True)",
          "21:     ]",
          "23:     filter_ids = [fid for fid in filter_ids if fid in enabled_filter_ids]",
          "24:     filter_ids.sort(key=get_priority)",
          "25:     return filter_ids",
          "27: async def process_filter_functions(",
          "33: ):",
          "34:     skip_files = None",
          "",
          "[Removed Lines]",
          "28:     handler_type,",
          "29:     filter_ids,",
          "30:     request,",
          "31:     data,",
          "32:     extra_params",
          "",
          "[Added Lines]",
          "30:     request, filter_ids, filter_type, form_data, extra_params",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:             request.app.state.FUNCTIONS[filter_id] = function_module",
          "47:         # Check if the function has a file_handler variable",
          "49:             skip_files = function_module.file_handler",
          "51:         # Apply valves to the function",
          "",
          "[Removed Lines]",
          "48:         if handler_type == \"inlet\" and hasattr(function_module, \"file_handler\"):",
          "",
          "[Added Lines]",
          "46:         if filter_type == \"inlet\" and hasattr(function_module, \"file_handler\"):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:             )",
          "58:         # Prepare handler function",
          "60:         if not handler:",
          "61:             continue",
          "63:         try:",
          "64:             # Prepare parameters",
          "65:             sig = inspect.signature(handler)",
          "68:             # Add extra parameters that exist in the handler's signature",
          "69:             for key in list(extra_params.keys()):",
          "",
          "[Removed Lines]",
          "59:         handler = getattr(function_module, handler_type, None)",
          "66:             params = {\"body\": data}",
          "",
          "[Added Lines]",
          "57:         handler = getattr(function_module, filter_type, None)",
          "64:             params = {\"body\": form_data}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:                     except Exception as e:",
          "83:                         print(e)",
          "86:             # Execute handler",
          "87:             if inspect.iscoroutinefunction(handler):",
          "89:             else:",
          "92:         except Exception as e:",
          "94:             raise e",
          "96:     # Handle file cleanup for inlet",
          "",
          "[Removed Lines]",
          "88:                 data = await handler(**params)",
          "90:                 data = handler(**params)",
          "93:             print(f\"Error in {handler_type} handler {filter_id}: {e}\")",
          "97:     if skip_files and \"files\" in data.get(\"metadata\", {}):",
          "98:         del data[\"metadata\"][\"files\"]",
          "100:     return data, {}",
          "",
          "[Added Lines]",
          "85:                 form_data = await handler(**params)",
          "87:                 form_data = handler(**params)",
          "90:             print(f\"Error in {filter_type} handler {filter_id}: {e}\")",
          "94:     if skip_files and \"files\" in form_data.get(\"metadata\", {}):",
          "95:         del form_data[\"metadata\"][\"files\"]",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "695:     try:",
          "696:         form_data, flags = await process_filter_functions(",
          "699:             request=request,",
          "701:             extra_params=extra_params,",
          "702:         )",
          "703:     except Exception as e:",
          "",
          "[Removed Lines]",
          "697:             handler_type=\"inlet\",",
          "698:             filter_ids=get_sorted_filter_ids(model),",
          "700:             data=form_data,",
          "",
          "[Added Lines]",
          "698:             filter_ids=get_sorted_filter_ids(model),",
          "699:             filter_type=\"inlet\",",
          "700:             form_data=form_data,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1040:         def split_content_and_whitespace(content):",
          "1041:             content_stripped = content.rstrip()",
          "1043:             return content_stripped, original_whitespace",
          "1045:         def is_opening_code_block(content):",
          "1047:             # Even number of segments means the last backticks are opening a new block",
          "1048:             return len(backtick_segments) > 1 and len(backtick_segments) % 2 == 0",
          "",
          "[Removed Lines]",
          "1042:             original_whitespace = content[len(content_stripped):] if len(content) > len(content_stripped) else ''",
          "1046:             backtick_segments = content.split('```')",
          "",
          "[Added Lines]",
          "1042:             original_whitespace = (",
          "1043:                 content[len(content_stripped) :]",
          "1044:                 if len(content) > len(content_stripped)",
          "1045:                 else \"\"",
          "1046:             )",
          "1050:             backtick_segments = content.split(\"```\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1113:                         output = block.get(\"output\", None)",
          "1114:                         lang = attributes.get(\"lang\", \"\")",
          "1117:                         if is_opening_code_block(content_stripped):",
          "1118:                             # Remove trailing backticks that would open a new block",
          "1120:                         else:",
          "1121:                             # Keep content as is - either closing backticks or no backticks",
          "1122:                             content = content_stripped + original_whitespace",
          "",
          "[Removed Lines]",
          "1116:                         content_stripped, original_whitespace = split_content_and_whitespace(content)",
          "1119:                             content = content_stripped.rstrip('`').rstrip() + original_whitespace",
          "",
          "[Added Lines]",
          "1120:                         content_stripped, original_whitespace = (",
          "1121:                             split_content_and_whitespace(content)",
          "1122:                         )",
          "1125:                             content = (",
          "1126:                                 content_stripped.rstrip(\"`\").rstrip()",
          "1127:                                 + original_whitespace",
          "1128:                             )",
          "",
          "---------------"
        ]
      }
    }
  ]
}