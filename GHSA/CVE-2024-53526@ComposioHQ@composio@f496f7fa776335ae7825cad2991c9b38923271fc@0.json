{
  "cve_id": "CVE-2024-53526",
  "cve_desc": "composio >=0.5.40 is vulnerable to Command Execution in composio_openai, composio_claude, and composio_julep via the handle_tool_calls function.",
  "repo": "ComposioHQ/composio",
  "patch_hash": "f496f7fa776335ae7825cad2991c9b38923271fc",
  "patch_info": {
    "commit_hash": "f496f7fa776335ae7825cad2991c9b38923271fc",
    "repo": "ComposioHQ/composio",
    "commit_url": "https://github.com/ComposioHQ/composio/commit/f496f7fa776335ae7825cad2991c9b38923271fc",
    "files": [
      "python/composio/tools/toolset.py",
      "python/examples/miscellaneous/runtime_tools/langchain_math.py",
      "python/plugins/autogen/composio_autogen/toolset.py",
      "python/plugins/camel/composio_camel/toolset.py",
      "python/plugins/claude/composio_claude/toolset.py",
      "python/plugins/crew_ai/composio_crewai/toolset.py",
      "python/plugins/griptape/composio_griptape/toolset.py",
      "python/plugins/langchain/composio_langchain/toolset.py",
      "python/plugins/llamaindex/composio_llamaindex/toolset.py",
      "python/plugins/lyzr/composio_lyzr/toolset.py",
      "python/plugins/openai/composio_openai/toolset.py",
      "python/plugins/phidata/composio_phidata/toolset.py",
      "python/plugins/praisonai/composio_praisonai/toolset.py",
      "python/tests/test_cli/test_connections.py",
      "python/tests/test_tools/test_toolset.py"
    ],
    "message": "fix: Add validation of which tools were requested by `get_tools` (#1107)",
    "before_after_code_files": [
      "python/composio/tools/toolset.py||python/composio/tools/toolset.py",
      "python/examples/miscellaneous/runtime_tools/langchain_math.py||python/examples/miscellaneous/runtime_tools/langchain_math.py",
      "python/plugins/autogen/composio_autogen/toolset.py||python/plugins/autogen/composio_autogen/toolset.py",
      "python/plugins/camel/composio_camel/toolset.py||python/plugins/camel/composio_camel/toolset.py",
      "python/plugins/claude/composio_claude/toolset.py||python/plugins/claude/composio_claude/toolset.py",
      "python/plugins/crew_ai/composio_crewai/toolset.py||python/plugins/crew_ai/composio_crewai/toolset.py",
      "python/plugins/griptape/composio_griptape/toolset.py||python/plugins/griptape/composio_griptape/toolset.py",
      "python/plugins/langchain/composio_langchain/toolset.py||python/plugins/langchain/composio_langchain/toolset.py",
      "python/plugins/llamaindex/composio_llamaindex/toolset.py||python/plugins/llamaindex/composio_llamaindex/toolset.py",
      "python/plugins/lyzr/composio_lyzr/toolset.py||python/plugins/lyzr/composio_lyzr/toolset.py",
      "python/plugins/openai/composio_openai/toolset.py||python/plugins/openai/composio_openai/toolset.py",
      "python/plugins/phidata/composio_phidata/toolset.py||python/plugins/phidata/composio_phidata/toolset.py",
      "python/plugins/praisonai/composio_praisonai/toolset.py||python/plugins/praisonai/composio_praisonai/toolset.py",
      "python/tests/test_cli/test_connections.py||python/tests/test_cli/test_connections.py",
      "python/tests/test_tools/test_toolset.py||python/tests/test_tools/test_toolset.py"
    ]
  },
  "patch_diff": {
    "python/composio/tools/toolset.py||python/composio/tools/toolset.py": [
      "File: python/composio/tools/toolset.py -> python/composio/tools/toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:         )",
      "329:         self.max_retries = max_retries",
      "331:     def _validating_connection_ids(",
      "332:         self,",
      "333:         connected_account_ids: t.Dict[AppType, str],",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331:         # To be populated by get_tools(), from within subclasses like",
      "332:         # composio_openai's Toolset.",
      "333:         self._requested_actions: t.Optional[t.List[str]] = None",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "797:         :return: Output object from the function call",
      "798:         \"\"\"",
      "799:         action = Action(action)",
      "800:         params = self._serialize_execute_params(param=params)",
      "801:         if processors is not None:",
      "802:             self._merge_processors(processors)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "804:         if (",
      "805:             self._requested_actions is not None",
      "806:             and action.slug not in self._requested_actions",
      "807:         ):",
      "808:             raise ComposioSDKError(",
      "809:                 f\"Action {action.slug} is being called, but was never requested by the toolset. \"",
      "810:                 \"Make sure that the actions you are trying to execute are requested in your \"",
      "811:                 \"`get_tools()` call.\"",
      "812:             )",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "945:         tags: t.Optional[t.Sequence[TagType]] = None,",
      "947:         check_connected_accounts: bool = True,",
      "948:     ) -> t.List[ActionModel]:",
      "949:         runtime_actions = t.cast(",
      "950:             t.List[t.Type[LocalAction]],",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "963:         _populate_requested: bool = False,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1010:             if item.name == Action.ANTHROPIC_TEXT_EDITOR.slug:",
      "1011:                 item.name = \"str_replace_editor\"",
      "1013:         return items",
      "1015:     def _process_schema(self, action_item: ActionModel) -> ActionModel:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1029:         if _populate_requested:",
      "1030:             action_names = [item.name for item in items]",
      "1031:             if self._requested_actions is None:",
      "1032:                 self._requested_actions = []",
      "1034:             self._requested_actions += action_names",
      "",
      "---------------"
    ],
    "python/examples/miscellaneous/runtime_tools/langchain_math.py||python/examples/miscellaneous/runtime_tools/langchain_math.py": [
      "File: python/examples/miscellaneous/runtime_tools/langchain_math.py -> python/examples/miscellaneous/runtime_tools/langchain_math.py"
    ],
    "python/plugins/autogen/composio_autogen/toolset.py||python/plugins/autogen/composio_autogen/toolset.py": [
      "File: python/plugins/autogen/composio_autogen/toolset.py -> python/plugins/autogen/composio_autogen/toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "26:         self,",
      "27:         caller: ConversableAgent,",
      "28:         executor: ConversableAgent,",
      "30:         actions: t.Optional[t.Sequence[ActionType]] = None,",
      "31:         tags: t.Optional[t.List[TagType]] = None,",
      "32:         entity_id: t.Optional[str] = None,",
      "33:     ) -> None:",
      "",
      "[Removed Lines]",
      "29:         apps: t.Optional[t.Sequence[AppType]] = None,",
      "",
      "[Added Lines]",
      "30:         apps: t.Optional[t.Sequence[AppType]] = None,",
      "",
      "---------------"
    ],
    "python/plugins/camel/composio_camel/toolset.py||python/plugins/camel/composio_camel/toolset.py": [
      "File: python/plugins/camel/composio_camel/toolset.py -> python/plugins/camel/composio_camel/toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "187:                 apps=apps,",
      "188:                 tags=tags,",
      "189:                 check_connected_accounts=check_connected_accounts,",
      "190:             )",
      "191:         ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "190:                 _populate_requested=True,",
      "",
      "---------------"
    ],
    "python/plugins/claude/composio_claude/toolset.py||python/plugins/claude/composio_claude/toolset.py": [
      "File: python/plugins/claude/composio_claude/toolset.py -> python/plugins/claude/composio_claude/toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:                 apps=apps,",
      "134:                 tags=tags,",
      "135:                 check_connected_accounts=check_connected_accounts,",
      "136:             )",
      "137:         ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "136:                 _populate_requested=True,",
      "",
      "---------------"
    ],
    "python/plugins/crew_ai/composio_crewai/toolset.py||python/plugins/crew_ai/composio_crewai/toolset.py": [
      "File: python/plugins/crew_ai/composio_crewai/toolset.py -> python/plugins/crew_ai/composio_crewai/toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "174:                     apps=apps,",
      "175:                     tags=tags,",
      "176:                     check_connected_accounts=check_connected_accounts,",
      "177:                 )",
      "178:             ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "177:                     _populate_requested=True,",
      "",
      "---------------"
    ],
    "python/plugins/griptape/composio_griptape/toolset.py||python/plugins/griptape/composio_griptape/toolset.py": [
      "File: python/plugins/griptape/composio_griptape/toolset.py -> python/plugins/griptape/composio_griptape/toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "166:                 apps=apps,",
      "167:                 tags=tags,",
      "168:                 check_connected_accounts=check_connected_accounts,",
      "169:             )",
      "170:         ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:                 _populate_requested=True,",
      "",
      "---------------"
    ],
    "python/plugins/langchain/composio_langchain/toolset.py||python/plugins/langchain/composio_langchain/toolset.py": [
      "File: python/plugins/langchain/composio_langchain/toolset.py -> python/plugins/langchain/composio_langchain/toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "180:                 apps=apps,",
      "181:                 tags=tags,",
      "182:                 check_connected_accounts=check_connected_accounts,",
      "183:             )",
      "184:         ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "183:                 _populate_requested=True,",
      "",
      "---------------"
    ],
    "python/plugins/llamaindex/composio_llamaindex/toolset.py||python/plugins/llamaindex/composio_llamaindex/toolset.py": [
      "File: python/plugins/llamaindex/composio_llamaindex/toolset.py -> python/plugins/llamaindex/composio_llamaindex/toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:                 apps=apps,",
      "163:                 tags=tags,",
      "164:                 check_connected_accounts=check_connected_accounts,",
      "165:             )",
      "166:         ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "165:                 _populate_requested=True,",
      "",
      "---------------"
    ],
    "python/plugins/lyzr/composio_lyzr/toolset.py||python/plugins/lyzr/composio_lyzr/toolset.py": [
      "File: python/plugins/lyzr/composio_lyzr/toolset.py -> python/plugins/lyzr/composio_lyzr/toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "121:                 apps=apps,",
      "122:                 tags=tags,",
      "123:                 check_connected_accounts=check_connected_accounts,",
      "124:             )",
      "125:         ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "124:                 _populate_requested=True,",
      "",
      "---------------"
    ],
    "python/plugins/openai/composio_openai/toolset.py||python/plugins/openai/composio_openai/toolset.py": [
      "File: python/plugins/openai/composio_openai/toolset.py -> python/plugins/openai/composio_openai/toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "135:                 apps=apps,",
      "136:                 tags=tags,",
      "137:                 check_connected_accounts=check_connected_accounts,",
      "138:             )",
      "139:         ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "138:                 _populate_requested=True,",
      "",
      "---------------"
    ],
    "python/plugins/phidata/composio_phidata/toolset.py||python/plugins/phidata/composio_phidata/toolset.py": [
      "File: python/plugins/phidata/composio_phidata/toolset.py -> python/plugins/phidata/composio_phidata/toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "123:                 apps=apps,",
      "124:                 tags=tags,",
      "125:                 check_connected_accounts=check_connected_accounts,",
      "126:             )",
      "127:         ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "126:                 _populate_requested=True,",
      "",
      "---------------"
    ],
    "python/plugins/praisonai/composio_praisonai/toolset.py||python/plugins/praisonai/composio_praisonai/toolset.py": [
      "File: python/plugins/praisonai/composio_praisonai/toolset.py -> python/plugins/praisonai/composio_praisonai/toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "216:                 apps=apps,",
      "217:                 tags=tags,",
      "218:                 check_connected_accounts=check_connected_accounts,",
      "219:             )",
      "220:         ]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "219:                 _populate_requested=True,",
      "",
      "---------------"
    ],
    "python/tests/test_cli/test_connections.py||python/tests/test_cli/test_connections.py": [
      "File: python/tests/test_cli/test_connections.py -> python/tests/test_cli/test_connections.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:         assert (",
      "26:             \"Id    : 6f4f4191-7fe9-4b5c-b491-4b7ec56ebf5d\" in result.stdout",
      "27:         ), result.stderr",
      "",
      "[Removed Lines]",
      "28:         assert \"Status: ACTIVE\" in result.stdout, result.stderr",
      "",
      "[Added Lines]",
      "28:         assert \"Status: EXPIRED\" in result.stdout, result.stderr",
      "",
      "---------------"
    ],
    "python/tests/test_tools/test_toolset.py||python/tests/test_tools/test_toolset.py": [
      "File: python/tests/test_tools/test_toolset.py -> python/tests/test_tools/test_toolset.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "390:             ]",
      "391:         )",
      "392:         assert len(t.cast(str, schema.name)) == char_limit",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "395: def test_invalid_handle_tool_calls() -> None:",
      "396:     \"\"\"Test edge case where the Agent tries to call a tool that wasn't requested from get_tools().\"\"\"",
      "397:     toolset = LangchainToolSet()",
      "399:     toolset.get_tools(actions=[Action.GMAIL_FETCH_EMAILS])",
      "400:     with pytest.raises(ComposioSDKError) as exc:",
      "401:         with mock.patch.object(toolset, \"_execute_remote\"):",
      "402:             toolset.execute_action(Action.HACKERNEWS_GET_FRONTPAGE, {})",
      "404:     assert (",
      "405:         \"Action HACKERNEWS_GET_FRONTPAGE is being called, but was never requested by the toolset.\"",
      "406:         in exc.value.message",
      "407:     )",
      "409:     # Ensure it does NOT fail if a subsequent get_tools added that action",
      "410:     toolset.get_tools(actions=[Action.HACKERNEWS_GET_FRONTPAGE])",
      "411:     with mock.patch.object(toolset, \"_execute_remote\"):",
      "412:         toolset.execute_action(Action.HACKERNEWS_GET_FRONTPAGE, {})",
      "414:     # Ensure it DOES NOT fail if get_tools is never called",
      "415:     toolset = LangchainToolSet()",
      "416:     with mock.patch.object(toolset, \"_execute_remote\"):",
      "417:         toolset.execute_action(Action.HACKERNEWS_GET_FRONTPAGE, {})",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "216c98d89a62e33e2cec797a67bfaa5af907f145",
      "candidate_info": {
        "commit_hash": "216c98d89a62e33e2cec797a67bfaa5af907f145",
        "repo": "ComposioHQ/composio",
        "commit_url": "https://github.com/ComposioHQ/composio/commit/216c98d89a62e33e2cec797a67bfaa5af907f145",
        "files": [
          "python/composio/tools/toolset.py",
          "python/plugins/autogen/composio_autogen/toolset.py",
          "python/plugins/camel/composio_camel/toolset.py",
          "python/plugins/claude/composio_claude/toolset.py",
          "python/plugins/crew_ai/composio_crewai/toolset.py",
          "python/plugins/google/composio_google/toolset.py",
          "python/plugins/griptape/composio_griptape/toolset.py",
          "python/plugins/julep/composio_julep/toolset.py",
          "python/plugins/langchain/composio_langchain/toolset.py",
          "python/plugins/llamaindex/composio_llamaindex/toolset.py",
          "python/plugins/lyzr/composio_lyzr/toolset.py",
          "python/plugins/openai/composio_openai/toolset.py",
          "python/plugins/phidata/composio_phidata/toolset.py",
          "python/plugins/praisonai/composio_praisonai/toolset.py",
          "python/tests/test_tools/test_toolset.py"
        ],
        "message": "fix: Allow manual execute action for any action (#1147)",
        "before_after_code_files": [
          "python/composio/tools/toolset.py||python/composio/tools/toolset.py",
          "python/plugins/autogen/composio_autogen/toolset.py||python/plugins/autogen/composio_autogen/toolset.py",
          "python/plugins/camel/composio_camel/toolset.py||python/plugins/camel/composio_camel/toolset.py",
          "python/plugins/claude/composio_claude/toolset.py||python/plugins/claude/composio_claude/toolset.py",
          "python/plugins/crew_ai/composio_crewai/toolset.py||python/plugins/crew_ai/composio_crewai/toolset.py",
          "python/plugins/google/composio_google/toolset.py||python/plugins/google/composio_google/toolset.py",
          "python/plugins/griptape/composio_griptape/toolset.py||python/plugins/griptape/composio_griptape/toolset.py",
          "python/plugins/julep/composio_julep/toolset.py||python/plugins/julep/composio_julep/toolset.py",
          "python/plugins/langchain/composio_langchain/toolset.py||python/plugins/langchain/composio_langchain/toolset.py",
          "python/plugins/llamaindex/composio_llamaindex/toolset.py||python/plugins/llamaindex/composio_llamaindex/toolset.py",
          "python/plugins/lyzr/composio_lyzr/toolset.py||python/plugins/lyzr/composio_lyzr/toolset.py",
          "python/plugins/openai/composio_openai/toolset.py||python/plugins/openai/composio_openai/toolset.py",
          "python/plugins/phidata/composio_phidata/toolset.py||python/plugins/phidata/composio_phidata/toolset.py",
          "python/plugins/praisonai/composio_praisonai/toolset.py||python/plugins/praisonai/composio_praisonai/toolset.py",
          "python/tests/test_tools/test_toolset.py||python/tests/test_tools/test_toolset.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "python/composio/tools/toolset.py||python/composio/tools/toolset.py",
            "python/plugins/autogen/composio_autogen/toolset.py||python/plugins/autogen/composio_autogen/toolset.py",
            "python/plugins/camel/composio_camel/toolset.py||python/plugins/camel/composio_camel/toolset.py",
            "python/plugins/claude/composio_claude/toolset.py||python/plugins/claude/composio_claude/toolset.py",
            "python/plugins/crew_ai/composio_crewai/toolset.py||python/plugins/crew_ai/composio_crewai/toolset.py",
            "python/plugins/griptape/composio_griptape/toolset.py||python/plugins/griptape/composio_griptape/toolset.py",
            "python/plugins/langchain/composio_langchain/toolset.py||python/plugins/langchain/composio_langchain/toolset.py",
            "python/plugins/llamaindex/composio_llamaindex/toolset.py||python/plugins/llamaindex/composio_llamaindex/toolset.py",
            "python/plugins/lyzr/composio_lyzr/toolset.py||python/plugins/lyzr/composio_lyzr/toolset.py",
            "python/plugins/openai/composio_openai/toolset.py||python/plugins/openai/composio_openai/toolset.py",
            "python/plugins/phidata/composio_phidata/toolset.py||python/plugins/phidata/composio_phidata/toolset.py",
            "python/plugins/praisonai/composio_praisonai/toolset.py||python/plugins/praisonai/composio_praisonai/toolset.py",
            "python/tests/test_tools/test_toolset.py||python/tests/test_tools/test_toolset.py"
          ],
          "candidate": [
            "python/composio/tools/toolset.py||python/composio/tools/toolset.py",
            "python/plugins/autogen/composio_autogen/toolset.py||python/plugins/autogen/composio_autogen/toolset.py",
            "python/plugins/camel/composio_camel/toolset.py||python/plugins/camel/composio_camel/toolset.py",
            "python/plugins/claude/composio_claude/toolset.py||python/plugins/claude/composio_claude/toolset.py",
            "python/plugins/crew_ai/composio_crewai/toolset.py||python/plugins/crew_ai/composio_crewai/toolset.py",
            "python/plugins/griptape/composio_griptape/toolset.py||python/plugins/griptape/composio_griptape/toolset.py",
            "python/plugins/langchain/composio_langchain/toolset.py||python/plugins/langchain/composio_langchain/toolset.py",
            "python/plugins/llamaindex/composio_llamaindex/toolset.py||python/plugins/llamaindex/composio_llamaindex/toolset.py",
            "python/plugins/lyzr/composio_lyzr/toolset.py||python/plugins/lyzr/composio_lyzr/toolset.py",
            "python/plugins/openai/composio_openai/toolset.py||python/plugins/openai/composio_openai/toolset.py",
            "python/plugins/phidata/composio_phidata/toolset.py||python/plugins/phidata/composio_phidata/toolset.py",
            "python/plugins/praisonai/composio_praisonai/toolset.py||python/plugins/praisonai/composio_praisonai/toolset.py",
            "python/tests/test_tools/test_toolset.py||python/tests/test_tools/test_toolset.py"
          ]
        }
      },
      "candidate_diff": {
        "python/composio/tools/toolset.py||python/composio/tools/toolset.py": [
          "File: python/composio/tools/toolset.py -> python/composio/tools/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:         # To be populated by get_tools(), from within subclasses like",
          "330:         # composio_openai's Toolset.",
          "333:     def _validating_connection_ids(",
          "334:         self,",
          "",
          "[Removed Lines]",
          "331:         self._requested_actions: t.Optional[t.List[str]] = None",
          "",
          "[Added Lines]",
          "331:         self._requested_actions: t.List[str] = []",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "848:         text: t.Optional[str] = None,",
          "850:         processors: t.Optional[ProcessorsType] = None,",
          "851:     ) -> t.Dict:",
          "852:         \"\"\"",
          "853:         Execute an action on a given entity.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "851:         _check_requested_actions: bool = False,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "861:         :return: Output object from the function call",
          "862:         \"\"\"",
          "863:         action = Action(action)",
          "868:             raise ComposioSDKError(",
          "869:                 f\"Action {action.slug} is being called, but was never requested by the toolset. \"",
          "870:                 \"Make sure that the actions you are trying to execute are requested in your \"",
          "",
          "[Removed Lines]",
          "864:         if (",
          "865:             self._requested_actions is not None",
          "866:             and action.slug not in self._requested_actions",
          "867:         ):",
          "",
          "[Added Lines]",
          "865:         if _check_requested_actions and action.slug not in self._requested_actions:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1089:         if _populate_requested:",
          "1090:             action_names = [item.name for item in items]",
          "1094:             self._requested_actions += action_names",
          "1096:         return items",
          "",
          "[Removed Lines]",
          "1091:             if self._requested_actions is None:",
          "1092:                 self._requested_actions = []",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "python/plugins/autogen/composio_autogen/toolset.py||python/plugins/autogen/composio_autogen/toolset.py": [
          "File: python/plugins/autogen/composio_autogen/toolset.py -> python/plugins/autogen/composio_autogen/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:         :param entity_id: Entity ID to use for executing function calls.",
          "44:         \"\"\"",
          "45:         self.validate_tools(apps=apps, actions=actions, tags=tags)",
          "47:         for schema in schemas:",
          "48:             self._register_schema_to_autogen(",
          "49:                 schema=schema.model_dump(",
          "",
          "[Removed Lines]",
          "46:         schemas = self.get_action_schemas(actions=actions, apps=apps, tags=tags)",
          "",
          "[Added Lines]",
          "46:         schemas = self.get_action_schemas(",
          "47:             actions=actions,",
          "48:             apps=apps,",
          "49:             tags=tags,",
          "50:             _populate_requested=True,",
          "51:         )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:                 action=Action(value=name),",
          "122:                 params=kwargs,",
          "123:                 entity_id=entity_id or self.entity_id,",
          "124:             )",
          "126:         function = types.FunctionType(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:                 _check_requested_actions=True,",
          "",
          "---------------"
        ],
        "python/plugins/camel/composio_camel/toolset.py||python/plugins/camel/composio_camel/toolset.py": [
          "File: python/plugins/camel/composio_camel/toolset.py -> python/plugins/camel/composio_camel/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:                 action=Action(value=name),",
          "127:                 params=kwargs,",
          "128:                 entity_id=entity_id or self.entity_id,",
          "129:             )",
          "131:         return OpenAIFunction(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:                 _check_requested_actions=True,",
          "",
          "---------------"
        ],
        "python/plugins/claude/composio_claude/toolset.py||python/plugins/claude/composio_claude/toolset.py": [
          "File: python/plugins/claude/composio_claude/toolset.py -> python/plugins/claude/composio_claude/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:             action=Action(value=tool_call.name),",
          "162:             params=t.cast(t.Dict, tool_call.input),",
          "163:             entity_id=entity_id or self.entity_id,",
          "164:         )",
          "166:     def handle_tool_calls(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:             _check_requested_actions=True,",
          "",
          "---------------"
        ],
        "python/plugins/crew_ai/composio_crewai/toolset.py||python/plugins/crew_ai/composio_crewai/toolset.py": [
          "File: python/plugins/crew_ai/composio_crewai/toolset.py -> python/plugins/crew_ai/composio_crewai/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:                     action=Action(value=action),",
          "105:                     params=kwargs,",
          "106:                     entity_id=entity_id or self.entity_id,",
          "107:                 )",
          "109:             class Wrapper(BaseTool):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:                     _check_requested_actions=True,",
          "",
          "---------------"
        ],
        "python/plugins/google/composio_google/toolset.py||python/plugins/google/composio_google/toolset.py": [
          "File: python/plugins/google/composio_google/toolset.py -> python/plugins/google/composio_google/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:                     ),",
          "161:                 )",
          "162:                 for tool in self.get_action_schemas(",
          "164:                 )",
          "165:             ]",
          "166:         )",
          "",
          "[Removed Lines]",
          "163:                     actions=actions, apps=apps, tags=tags",
          "",
          "[Added Lines]",
          "163:                     actions=actions,",
          "164:                     apps=apps,",
          "165:                     tags=tags,",
          "166:                     _populate_requested=True,",
          "",
          "---------------"
        ],
        "python/plugins/griptape/composio_griptape/toolset.py||python/plugins/griptape/composio_griptape/toolset.py": [
          "File: python/plugins/griptape/composio_griptape/toolset.py -> python/plugins/griptape/composio_griptape/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:                 action=Action(value=name),",
          "87:                 params=params,",
          "88:                 entity_id=entity_id or self.entity_id,",
          "89:             )",
          "91:         class GripTapeTool(BaseTool):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:                 _check_requested_actions=True,",
          "",
          "---------------"
        ],
        "python/plugins/julep/composio_julep/toolset.py||python/plugins/julep/composio_julep/toolset.py": [
          "File: python/plugins/julep/composio_julep/toolset.py -> python/plugins/julep/composio_julep/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:                                 action=Action(value=tool_function[\"name\"]),",
          "47:                                 params=json.loads(tool_function[\"arguments\"]),",
          "48:                                 entity_id=entity_id or self.entity_id,",
          "49:                             )",
          "50:                         )",
          "51:                     except json.JSONDecodeError:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:                                 _check_requested_actions=True,",
          "",
          "---------------"
        ],
        "python/plugins/langchain/composio_langchain/toolset.py||python/plugins/langchain/composio_langchain/toolset.py": [
          "File: python/plugins/langchain/composio_langchain/toolset.py -> python/plugins/langchain/composio_langchain/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:                 action=action,",
          "89:                 params=kwargs,",
          "90:                 entity_id=entity_id or self.entity_id,",
          "91:             )",
          "93:         action_func = types.FunctionType(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:                 _check_requested_actions=True,",
          "",
          "---------------"
        ],
        "python/plugins/llamaindex/composio_llamaindex/toolset.py||python/plugins/llamaindex/composio_llamaindex/toolset.py": [
          "File: python/plugins/llamaindex/composio_llamaindex/toolset.py -> python/plugins/llamaindex/composio_llamaindex/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:                 action=Action(value=action),",
          "75:                 params=kwargs,",
          "76:                 entity_id=entity_id or self.entity_id,",
          "77:             )",
          "79:         action_func = types.FunctionType(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:                 _check_requested_actions=True,",
          "",
          "---------------"
        ],
        "python/plugins/lyzr/composio_lyzr/toolset.py||python/plugins/lyzr/composio_lyzr/toolset.py": [
          "File: python/plugins/lyzr/composio_lyzr/toolset.py -> python/plugins/lyzr/composio_lyzr/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:                 action=Action(value=name),",
          "48:                 params=kwargs,",
          "49:                 entity_id=entity_id or self.entity_id,",
          "50:             )",
          "52:         action_func = types.FunctionType(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:                 _check_requested_actions=True,",
          "",
          "---------------"
        ],
        "python/plugins/openai/composio_openai/toolset.py||python/plugins/openai/composio_openai/toolset.py": [
          "File: python/plugins/openai/composio_openai/toolset.py -> python/plugins/openai/composio_openai/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:             action=tool_call.function.name,",
          "189:             params=json.loads(tool_call.function.arguments),",
          "190:             entity_id=entity_id or self.entity_id,",
          "191:         )",
          "193:     def handle_tool_calls(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191:             _check_requested_actions=True,",
          "",
          "---------------"
        ],
        "python/plugins/phidata/composio_phidata/toolset.py||python/plugins/phidata/composio_phidata/toolset.py": [
          "File: python/plugins/phidata/composio_phidata/toolset.py -> python/plugins/phidata/composio_phidata/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:                     action=Action(value=name),",
          "58:                     params=kwargs,",
          "59:                     entity_id=entity_id or self.entity_id,",
          "60:                 )",
          "61:             )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:                     _check_requested_actions=True,",
          "",
          "---------------"
        ],
        "python/plugins/praisonai/composio_praisonai/toolset.py||python/plugins/praisonai/composio_praisonai/toolset.py": [
          "File: python/plugins/praisonai/composio_praisonai/toolset.py -> python/plugins/praisonai/composio_praisonai/toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:             action=Action(value=tool_identifier),",
          "80:             params=params,",
          "81:             entity_id=self.entity_id,",
          "82:         )",
          "84:     def _process_basetool(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:             _check_requested_actions=True,",
          "",
          "---------------"
        ],
        "python/tests/test_tools/test_toolset.py||python/tests/test_tools/test_toolset.py": [
          "File: python/tests/test_tools/test_toolset.py -> python/tests/test_tools/test_toolset.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:     toolset.get_tools(actions=[Action.GMAIL_FETCH_EMAILS])",
          "544:     with pytest.raises(ComposioSDKError) as exc:",
          "545:         with mock.patch.object(toolset, \"_execute_remote\"):",
          "548:     assert (",
          "549:         \"Action HACKERNEWS_GET_FRONTPAGE is being called, but was never requested by the toolset.\"",
          "",
          "[Removed Lines]",
          "546:             toolset.execute_action(Action.HACKERNEWS_GET_FRONTPAGE, {})",
          "",
          "[Added Lines]",
          "546:             toolset.execute_action(",
          "547:                 Action.HACKERNEWS_GET_FRONTPAGE,",
          "548:                 {},",
          "549:                 # This is passed as True by all tools",
          "550:                 _check_requested_actions=True,",
          "551:             )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "553:     # Ensure it does NOT fail if a subsequent get_tools added that action",
          "554:     toolset.get_tools(actions=[Action.HACKERNEWS_GET_FRONTPAGE])",
          "555:     with mock.patch.object(toolset, \"_execute_remote\"):",
          "559:     toolset = LangchainToolSet()",
          "560:     with mock.patch.object(toolset, \"_execute_remote\"):",
          "561:         toolset.execute_action(Action.HACKERNEWS_GET_FRONTPAGE, {})",
          "",
          "[Removed Lines]",
          "556:         toolset.execute_action(Action.HACKERNEWS_GET_FRONTPAGE, {})",
          "558:     # Ensure it DOES NOT fail if get_tools is never called",
          "",
          "[Added Lines]",
          "561:         toolset.execute_action(",
          "562:             Action.HACKERNEWS_GET_FRONTPAGE,",
          "563:             {},",
          "564:             # This is passed as True by all tools",
          "565:             _check_requested_actions=True,",
          "566:         )",
          "568:     # Ensure it DOES NOT fail if execute_action is called manually, not by a tool",
          "570:     toolset.get_tools(actions=[Action.GMAIL_FETCH_EMAILS])",
          "",
          "---------------"
        ]
      }
    }
  ]
}