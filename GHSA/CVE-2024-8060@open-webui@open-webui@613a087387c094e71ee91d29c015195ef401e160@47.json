{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "689317c5b51a872aa3cff68e94962145fba559a0",
      "candidate_info": {
        "commit_hash": "689317c5b51a872aa3cff68e94962145fba559a0",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/689317c5b51a872aa3cff68e94962145fba559a0",
        "files": [
          "backend/open_webui/routers/configs.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/configs.py||backend/open_webui/routers/configs.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/configs.py||backend/open_webui/routers/configs.py": [
          "File: backend/open_webui/routers/configs.py -> backend/open_webui/routers/configs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: ############################",
          "45:     ENABLE_DIRECT_CONNECTIONS: bool",
          "49: async def get_direct_connections_config(request: Request, user=Depends(get_admin_user)):",
          "50:     return {",
          "51:         \"ENABLE_DIRECT_CONNECTIONS\": request.app.state.config.ENABLE_DIRECT_CONNECTIONS,",
          "52:     }",
          "56: async def set_direct_connections_config(",
          "58: ):",
          "59:     request.app.state.config.ENABLE_DIRECT_CONNECTIONS = (",
          "60:         form_data.ENABLE_DIRECT_CONNECTIONS",
          "",
          "[Removed Lines]",
          "44: class DirectAPIConfigForm(BaseModel):",
          "48: @router.get(\"/direct_connections\", response_model=DirectAPIConfigForm)",
          "55: @router.post(\"/direct_connections\", response_model=DirectAPIConfigForm)",
          "57:     request: Request, form_data: DirectAPIConfigForm, user=Depends(get_admin_user)",
          "",
          "[Added Lines]",
          "44: class DirectConnectionsConfigForm(BaseModel):",
          "48: @router.get(\"/direct_connections\", response_model=DirectConnectionsConfigForm)",
          "55: @router.post(\"/direct_connections\", response_model=DirectConnectionsConfigForm)",
          "57:     request: Request,",
          "58:     form_data: DirectConnectionsConfigForm,",
          "59:     user=Depends(get_admin_user),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19214203190576936ae8bacefb29faf678544537",
      "candidate_info": {
        "commit_hash": "19214203190576936ae8bacefb29faf678544537",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/19214203190576936ae8bacefb29faf678544537",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac\n\nCo-Authored-By: dulicon <57261058+dulicon@users.noreply.github.com>",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1660:                                             )",
          "1662:                                             if tool_call_index is not None:",
          "1667:                                                     response_tool_calls.append(",
          "1668:                                                         delta_tool_call",
          "1669:                                                     )",
          "1670:                                                 else:",
          "1671:                                                     delta_name = delta_tool_call.get(",
          "1672:                                                         \"function\", {}",
          "1673:                                                     ).get(\"name\")",
          "",
          "[Removed Lines]",
          "1663:                                                 if (",
          "1664:                                                     len(response_tool_calls)",
          "1665:                                                     <= tool_call_index",
          "1666:                                                 ):",
          "",
          "[Added Lines]",
          "1663:                                                 # Check if the tool call already exists",
          "1664:                                                 current_response_tool_call = None",
          "1665:                                                 for (",
          "1666:                                                     response_tool_call",
          "1667:                                                 ) in response_tool_calls:",
          "1668:                                                     if (",
          "1669:                                                         response_tool_call.get(\"index\")",
          "1670:                                                         == tool_call_index",
          "1671:                                                     ):",
          "1672:                                                         current_response_tool_call = (",
          "1673:                                                             response_tool_call",
          "1674:                                                         )",
          "1675:                                                         break",
          "1677:                                                 if current_response_tool_call is None:",
          "1678:                                                     # Add the new tool call",
          "1683:                                                     # Update the existing tool call",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1678:                                                     )",
          "1680:                                                     if delta_name:",
          "1687:                                                     if delta_arguments:",
          "1691:                                                             \"arguments\"",
          "1692:                                                         ] += delta_arguments",
          "",
          "[Removed Lines]",
          "1681:                                                         response_tool_calls[",
          "1682:                                                             tool_call_index",
          "1683:                                                         ][\"function\"][",
          "1684:                                                             \"name\"",
          "1685:                                                         ] += delta_name",
          "1688:                                                         response_tool_calls[",
          "1689:                                                             tool_call_index",
          "1690:                                                         ][\"function\"][",
          "",
          "[Added Lines]",
          "1694:                                                         current_response_tool_call[",
          "1695:                                                             \"function\"",
          "1696:                                                         ][\"name\"] += delta_name",
          "1699:                                                         current_response_tool_call[",
          "1700:                                                             \"function\"",
          "1701:                                                         ][",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e3628270865575876c23558a502b871e5fd6ce5",
      "candidate_info": {
        "commit_hash": "1e3628270865575876c23558a502b871e5fd6ce5",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/1e3628270865575876c23558a502b871e5fd6ce5",
        "files": [
          "backend/open_webui/routers/openai.py",
          "src/lib/components/chat/ModelSelector/Selector.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/openai.py||backend/open_webui/routers/openai.py",
          "src/lib/components/chat/ModelSelector/Selector.svelte||src/lib/components/chat/ModelSelector/Selector.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/openai.py||backend/open_webui/routers/openai.py": [
          "File: backend/open_webui/routers/openai.py -> backend/open_webui/routers/openai.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:                             \"urlIdx\": idx,",
          "410:                         }",
          "411:                         for model in models",
          "424:                         )",
          "425:                     ]",
          "426:                 )",
          "",
          "[Removed Lines]",
          "412:                         if \"api.openai.com\"",
          "413:                         not in request.app.state.config.OPENAI_API_BASE_URLS[idx]",
          "414:                         or not any(",
          "415:                             name in model[\"id\"]",
          "416:                             for name in [",
          "417:                                 \"babbage\",",
          "418:                                 \"dall-e\",",
          "419:                                 \"davinci\",",
          "420:                                 \"embedding\",",
          "421:                                 \"tts\",",
          "422:                                 \"whisper\",",
          "423:                             ]",
          "",
          "[Added Lines]",
          "413:                         if (model.get(\"id\") or model.get(\"name\"))",
          "414:                         and (",
          "415:                             \"api.openai.com\"",
          "416:                             not in request.app.state.config.OPENAI_API_BASE_URLS[idx]",
          "417:                             or not any(",
          "418:                                 name in model[\"id\"]",
          "419:                                 for name in [",
          "420:                                     \"babbage\",",
          "421:                                     \"dall-e\",",
          "422:                                     \"davinci\",",
          "423:                                     \"embedding\",",
          "424:                                     \"tts\",",
          "425:                                     \"whisper\",",
          "426:                                 ]",
          "427:                             )",
          "",
          "---------------"
        ],
        "src/lib/components/chat/ModelSelector/Selector.svelte||src/lib/components/chat/ModelSelector/Selector.svelte": [
          "File: src/lib/components/chat/ModelSelector/Selector.svelte -> src/lib/components/chat/ModelSelector/Selector.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:         {$i18n.t('All')}",
          "343:        </button>",
          "345:        {#each tags as tag}",
          "346:         <button",
          "347:          class=\"min-w-fit outline-none p-1.5 {selectedTag === tag",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345:        <button",
          "346:         class=\"min-w-fit outline-none p-1.5 {selectedTag === ''",
          "347:          ? ''",
          "348:          : 'text-gray-300 dark:text-gray-600 hover:text-gray-700 dark:hover:text-white'} transition capitalize\"",
          "349:         on:click={() => {",
          "350:          selectedTag = '';",
          "351:         }}",
          "352:        >",
          "353:         {$i18n.t('Ollama')}",
          "354:        </button>",
          "356:        <button",
          "357:         class=\"min-w-fit outline-none p-1.5 {selectedTag === ''",
          "358:          ? ''",
          "359:          : 'text-gray-300 dark:text-gray-600 hover:text-gray-700 dark:hover:text-white'} transition capitalize\"",
          "360:         on:click={() => {",
          "361:          selectedTag = '';",
          "362:         }}",
          "363:        >",
          "364:         {$i18n.t('OpenAI')}",
          "365:        </button>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "266899acc0b3c079e8c0612fe8e5010a8cf1459e",
      "candidate_info": {
        "commit_hash": "266899acc0b3c079e8c0612fe8e5010a8cf1459e",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/266899acc0b3c079e8c0612fe8e5010a8cf1459e",
        "files": [
          "src/lib/components/chat/Suggestions.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Suggestions.svelte||src/lib/components/chat/Suggestions.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Suggestions.svelte||src/lib/components/chat/Suggestions.svelte": [
          "File: src/lib/components/chat/Suggestions.svelte -> src/lib/components/chat/Suggestions.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   }",
          "54:  };",
          "57:   sortedPrompts = [...(suggestionPrompts ?? [])].sort(() => Math.random() - 0.5);",
          "58:   getFilteredPrompts(inputValue);",
          "60: </script>",
          "62: <div class=\"mb-1 flex gap-1 text-xs font-medium items-center text-gray-400 dark:text-gray-600\">",
          "",
          "[Removed Lines]",
          "56:  onMount(() => {",
          "59:  });",
          "",
          "[Added Lines]",
          "56:  $: if (suggestionPrompts) {",
          "59:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f3fcdcf5c01530ba288ce3a401203eb29d66c96",
      "candidate_info": {
        "commit_hash": "8f3fcdcf5c01530ba288ce3a401203eb29d66c96",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/8f3fcdcf5c01530ba288ce3a401203eb29d66c96",
        "files": [
          "src/lib/components/admin/Functions/FunctionEditor.svelte",
          "src/lib/components/chat/Messages/CodeBlock.svelte",
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "src/lib/components/workspace/Tools/ToolkitEditor.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/admin/Functions/FunctionEditor.svelte||src/lib/components/admin/Functions/FunctionEditor.svelte",
          "src/lib/components/chat/Messages/CodeBlock.svelte||src/lib/components/chat/Messages/CodeBlock.svelte",
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "src/lib/components/workspace/Tools/ToolkitEditor.svelte||src/lib/components/workspace/Tools/ToolkitEditor.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Functions/FunctionEditor.svelte||src/lib/components/admin/Functions/FunctionEditor.svelte": [
          "File: src/lib/components/admin/Functions/FunctionEditor.svelte -> src/lib/components/admin/Functions/FunctionEditor.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:       lang=\"python\"",
          "373:       {boilerplate}",
          "374:       onChange={(e) => {",
          "376:       }}",
          "377:       onSave={async () => {",
          "378:        if (formElement) {",
          "",
          "[Removed Lines]",
          "375:        _content = e.detail.value;",
          "",
          "[Added Lines]",
          "375:        _content = e;",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages/CodeBlock.svelte||src/lib/components/chat/Messages/CodeBlock.svelte": [
          "File: src/lib/components/chat/Messages/CodeBlock.svelte -> src/lib/components/chat/Messages/CodeBlock.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:       saveCode();",
          "466:      }}",
          "467:      onChange={(e) => {",
          "469:      }}",
          "470:     />",
          "471:    </div>",
          "",
          "[Removed Lines]",
          "468:       _code = e.detail.value;",
          "",
          "[Added Lines]",
          "468:       _code = e;",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte": [
          "File: src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte -> src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:     {attributes}",
          "90:     {save}",
          "91:     onCode={(e) => {",
          "93:     }}",
          "94:     onSave={(e) => {",
          "95:      dispatch('update', {",
          "96:       raw: token.raw,",
          "97:       oldContent: token.text,",
          "99:      });",
          "100:     }}",
          "101:    />",
          "",
          "[Removed Lines]",
          "92:      dispatch('code', e.detail);",
          "98:       newContent: e.detail",
          "",
          "[Added Lines]",
          "92:      dispatch('code', e);",
          "98:       newContent: e",
          "",
          "---------------"
        ],
        "src/lib/components/workspace/Tools/ToolkitEditor.svelte||src/lib/components/workspace/Tools/ToolkitEditor.svelte": [
          "File: src/lib/components/workspace/Tools/ToolkitEditor.svelte -> src/lib/components/workspace/Tools/ToolkitEditor.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:       {boilerplate}",
          "286:       lang=\"python\"",
          "287:       onChange={(e) => {",
          "289:       }}",
          "290:       onSave={() => {",
          "291:        if (formElement) {",
          "",
          "[Removed Lines]",
          "288:        _content = e.detail.value;",
          "",
          "[Added Lines]",
          "288:        _content = e;",
          "",
          "---------------"
        ]
      }
    }
  ]
}