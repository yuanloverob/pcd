{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ba81b47800bd9bc65de15687fe71bc23f6ff3e1e",
      "candidate_info": {
        "commit_hash": "ba81b47800bd9bc65de15687fe71bc23f6ff3e1e",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/ba81b47800bd9bc65de15687fe71bc23f6ff3e1e",
        "files": [
          "backend/open_webui/routers/ollama.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/ollama.py||backend/open_webui/routers/ollama.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/ollama.py||backend/open_webui/routers/ollama.py": [
          "File: backend/open_webui/routers/ollama.py -> backend/open_webui/routers/ollama.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "962:             )",
          "963:         url_idx = random.choice(models[model].get(\"urls\", []))",
          "964:     url = request.app.state.config.OLLAMA_BASE_URLS[url_idx]",
          "968: @router.post(\"/api/chat\")",
          "",
          "[Removed Lines]",
          "965:     return url",
          "",
          "[Added Lines]",
          "965:     return url, url_idx",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1030:     if \":\" not in payload[\"model\"]:",
          "1031:         payload[\"model\"] = f\"{payload['model']}:latest\"",
          "1044:     api_config = request.app.state.config.OLLAMA_API_CONFIGS.get(",
          "1045:         str(url_idx),",
          "1046:         request.app.state.config.OLLAMA_API_CONFIGS.get(url, {}),  # Legacy support",
          "",
          "[Removed Lines]",
          "1033:     await get_all_models(request)",
          "1034:     model = request.app.state.OLLAMA_MODELS.get(model_id)",
          "1035:     if model:",
          "1036:         url_idx = model[\"urls\"].pop()",
          "1037:     else:",
          "1038:         raise HTTPException(",
          "1039:             status_code=404,",
          "1040:             detail=\"Model not found\",",
          "1041:         )",
          "1043:     url = await get_ollama_url(request, payload[\"model\"], url_idx)",
          "",
          "[Added Lines]",
          "1033:     url, url_idx = await get_ollama_url(request, payload[\"model\"], url_idx)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1142:     if \":\" not in payload[\"model\"]:",
          "1143:         payload[\"model\"] = f\"{payload['model']}:latest\"",
          "1146:     api_config = request.app.state.config.OLLAMA_API_CONFIGS.get(",
          "1147:         str(url_idx),",
          "1148:         request.app.state.config.OLLAMA_API_CONFIGS.get(url, {}),  # Legacy support",
          "",
          "[Removed Lines]",
          "1145:     url = await get_ollama_url(request, payload[\"model\"], url_idx)",
          "",
          "[Added Lines]",
          "1135:     url, url_idx = await get_ollama_url(request, payload[\"model\"], url_idx)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1219:     if \":\" not in payload[\"model\"]:",
          "1220:         payload[\"model\"] = f\"{payload['model']}:latest\"",
          "1223:     api_config = request.app.state.config.OLLAMA_API_CONFIGS.get(",
          "1224:         str(url_idx),",
          "1225:         request.app.state.config.OLLAMA_API_CONFIGS.get(url, {}),  # Legacy support",
          "",
          "[Removed Lines]",
          "1222:     url = await get_ollama_url(request, payload[\"model\"], url_idx)",
          "",
          "[Added Lines]",
          "1212:     url, url_idx = await get_ollama_url(request, payload[\"model\"], url_idx)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "074a44379011a03fecaacb0a4e28837ac94d7bc3",
      "candidate_info": {
        "commit_hash": "074a44379011a03fecaacb0a4e28837ac94d7bc3",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/074a44379011a03fecaacb0a4e28837ac94d7bc3",
        "files": [
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1327:   { modelId = null, modelIdx = null, newChat = false } = {}",
          "1328:  ) => {",
          "1329:   let _chatId = JSON.parse(JSON.stringify($chatId));",
          "1345:   let selectedModelIds = modelId",
          "1346:    ? [modelId]",
          "",
          "[Removed Lines]",
          "1332:   if (",
          "1333:    newChat &&",
          "1334:    history.messages[history.currentId].parentId === null &&",
          "1335:    history.messages[history.currentId].role === 'user'",
          "1336:   ) {",
          "1337:    _chatId = await initChatHandler(history);",
          "1338:   } else {",
          "1339:    await saveChatHandler(_chatId, history);",
          "1340:   }",
          "1342:   await tick();",
          "",
          "[Added Lines]",
          "1330:   const _history = JSON.parse(JSON.stringify(history));",
          "1332:   const responseMessageIds: Record<PropertyKey, string> = {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1349:     : selectedModels;",
          "1353:   for (const [_modelIdx, modelId] of selectedModelIds.entries()) {",
          "1354:    const model = $models.filter((m) => m.id === modelId).at(0);",
          "",
          "[Removed Lines]",
          "1352:   const responseMessageIds: Record<PropertyKey, string> = {};",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1384:     responseMessageIds[`${modelId}-${modelIdx ? modelIdx : _modelIdx}`] = responseMessageId;",
          "1385:    }",
          "1386:   }",
          "1387:   await tick();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1375:   history = history;",
          "1378:   if (newChat && _history.messages[_history.currentId].parentId === null) {",
          "1379:    _chatId = await initChatHandler(_history);",
          "1380:   } else {",
          "1381:    await saveChatHandler(_chatId, _history);",
          "1382:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f243e523a6f6f9007a8b380b5323cac53db51170",
      "candidate_info": {
        "commit_hash": "f243e523a6f6f9007a8b380b5323cac53db51170",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/f243e523a6f6f9007a8b380b5323cac53db51170",
        "files": [
          "backend/open_webui/routers/retrieval.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py": [
          "File: backend/open_webui/routers/retrieval.py -> backend/open_webui/routers/retrieval.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1493:         else:",
          "1494:             collection_names = []",
          "1495:             for doc_idx, doc in enumerate(docs):",
          "1502:                 await run_in_threadpool(",
          "1503:                     save_docs_to_vector_db,",
          "",
          "[Removed Lines]",
          "1496:                 collection_name = f\"web-search-{calculate_sha256_string(",
          "1497:                     f\"{form_data.query}-{urls[doc_idx]}\"",
          "1498:                 )}\"[:63]",
          "1499:                 collection_names.append(collection_name)",
          "",
          "[Added Lines]",
          "1496:                 collection_name = f\"web-search-{calculate_sha256_string(form_data.query + '-' + urls[doc_idx])}\"[",
          "1497:                     :63",
          "1498:                 ]",
          "1500:                 collection_names.append(collection_name)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0df6cce405973f5cc9ea8b1be9ed216e6d65b8a",
      "candidate_info": {
        "commit_hash": "a0df6cce405973f5cc9ea8b1be9ed216e6d65b8a",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/a0df6cce405973f5cc9ea8b1be9ed216e6d65b8a",
        "files": [
          "src/lib/components/admin/Settings/Evaluations.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/admin/Settings/Evaluations.svelte||src/lib/components/admin/Settings/Evaluations.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Settings/Evaluations.svelte||src/lib/components/admin/Settings/Evaluations.svelte": [
          "File: src/lib/components/admin/Settings/Evaluations.svelte -> src/lib/components/admin/Settings/Evaluations.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <script lang=\"ts\">",
          "2:  import { toast } from 'svelte-sonner';",
          "4:  import { createEventDispatcher, onMount, getContext, tick } from 'svelte';",
          "6:  const dispatch = createEventDispatcher();",
          "",
          "[Removed Lines]",
          "3:  import { models, settings, user } from '$lib/stores';",
          "",
          "[Added Lines]",
          "3:  import { models, settings, user, config } from '$lib/stores';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:  const i18n = getContext('i18n');",
          "20:  let showAddModel = false;",
          "22:  const submitHandler = async () => {",
          "24:    toast.error(err);",
          "25:    return null;",
          "26:   });",
          "29:    toast.success('Settings saved successfully');",
          "30:    models.set(",
          "31:     await getModels(",
          "",
          "[Removed Lines]",
          "19:  let config = null;",
          "23:   config = await updateConfig(localStorage.token, config).catch((err) => {",
          "28:   if (config) {",
          "",
          "[Added Lines]",
          "19:  let evaluationConfig = null;",
          "23:   evaluationConfig = await updateConfig(localStorage.token, evaluationConfig).catch((err) => {",
          "28:   if (evaluationConfig) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:  };",
          "39:  const addModelHandler = async (model) => {",
          "43:   await submitHandler();",
          "44:   models.set(",
          "",
          "[Removed Lines]",
          "40:   config.EVALUATION_ARENA_MODELS.push(model);",
          "41:   config.EVALUATION_ARENA_MODELS = [...config.EVALUATION_ARENA_MODELS];",
          "",
          "[Added Lines]",
          "40:   evaluationConfig.EVALUATION_ARENA_MODELS.push(model);",
          "41:   evaluationConfig.EVALUATION_ARENA_MODELS = [...evaluationConfig.EVALUATION_ARENA_MODELS];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "50:  };",
          "52:  const editModelHandler = async (model, modelIdx) => {",
          "56:   await submitHandler();",
          "57:   models.set(",
          "",
          "[Removed Lines]",
          "53:   config.EVALUATION_ARENA_MODELS[modelIdx] = model;",
          "54:   config.EVALUATION_ARENA_MODELS = [...config.EVALUATION_ARENA_MODELS];",
          "",
          "[Added Lines]",
          "53:   evaluationConfig.EVALUATION_ARENA_MODELS[modelIdx] = model;",
          "54:   evaluationConfig.EVALUATION_ARENA_MODELS = [...evaluationConfig.EVALUATION_ARENA_MODELS];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "63:  };",
          "65:  const deleteModelHandler = async (modelIdx) => {",
          "67:    (m, mIdx) => mIdx !== modelIdx",
          "68:   );",
          "",
          "[Removed Lines]",
          "66:   config.EVALUATION_ARENA_MODELS = config.EVALUATION_ARENA_MODELS.filter(",
          "",
          "[Added Lines]",
          "66:   evaluationConfig.EVALUATION_ARENA_MODELS = evaluationConfig.EVALUATION_ARENA_MODELS.filter(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "79:  onMount(async () => {",
          "80:   if ($user.role === 'admin') {",
          "82:     toast.error(err);",
          "83:     return null;",
          "84:    });",
          "",
          "[Removed Lines]",
          "81:    config = await getConfig(localStorage.token).catch((err) => {",
          "",
          "[Added Lines]",
          "81:    evaluationConfig = await getConfig(localStorage.token).catch((err) => {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "101:  }}",
          "102: >",
          "103:  <div class=\"overflow-y-scroll scrollbar-hidden h-full\">",
          "105:    <div class=\"\">",
          "106:     <div class=\"text-sm font-medium mb-2\">{$i18n.t('General Settings')}</div>",
          "",
          "[Removed Lines]",
          "104:   {#if config !== null}",
          "",
          "[Added Lines]",
          "104:   {#if evaluationConfig !== null}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "110:       <div class=\" text-xs font-medium\">{$i18n.t('Arena Models')}</div>",
          "112:       <Tooltip content={$i18n.t(`Message rating should be enabled to use this feature`)}>",
          "114:       </Tooltip>",
          "115:      </div>",
          "116:     </div>",
          "119:      <hr class=\" border-gray-50 dark:border-gray-700/10 my-2\" />",
          "121:      <div class=\"flex justify-between items-center mb-2\">",
          "",
          "[Removed Lines]",
          "113:        <Switch bind:state={config.ENABLE_EVALUATION_ARENA_MODELS} />",
          "118:     {#if config.ENABLE_EVALUATION_ARENA_MODELS}",
          "",
          "[Added Lines]",
          "113:        <Switch bind:state={evaluationConfig.ENABLE_EVALUATION_ARENA_MODELS} />",
          "118:     {#if evaluationConfig.ENABLE_EVALUATION_ARENA_MODELS}",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "137:      </div>",
          "139:      <div class=\"flex flex-col gap-2\">",
          "142:         <Model",
          "143:          {model}",
          "144:          on:edit={(e) => {",
          "",
          "[Removed Lines]",
          "140:       {#if (config?.EVALUATION_ARENA_MODELS ?? []).length > 0}",
          "141:        {#each config.EVALUATION_ARENA_MODELS as model, index}",
          "",
          "[Added Lines]",
          "140:       {#if (evaluationConfig?.EVALUATION_ARENA_MODELS ?? []).length > 0}",
          "141:        {#each evaluationConfig.EVALUATION_ARENA_MODELS as model, index}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "953e4080774fd88d7e347ea3ca90767c98ed63f9",
      "candidate_info": {
        "commit_hash": "953e4080774fd88d7e347ea3ca90767c98ed63f9",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/953e4080774fd88d7e347ea3ca90767c98ed63f9",
        "files": [
          "backend/open_webui/routers/images.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/images.py||backend/open_webui/routers/images.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/images.py||backend/open_webui/routers/images.py": [
          "File: backend/open_webui/routers/images.py -> backend/open_webui/routers/images.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:     image_format = mimetypes.guess_extension(content_type)",
          "416:     file = UploadFile(",
          "417:         file=io.BytesIO(image_data),",
          "419:         headers={",
          "420:             \"content-type\": content_type,",
          "421:         },",
          "",
          "[Removed Lines]",
          "418:         filename=f\"generated{image_format}\",  # will be converted to a unique ID on upload_file",
          "",
          "[Added Lines]",
          "418:         filename=f\"generated-image{image_format}\",  # will be converted to a unique ID on upload_file",
          "",
          "---------------"
        ]
      }
    }
  ]
}