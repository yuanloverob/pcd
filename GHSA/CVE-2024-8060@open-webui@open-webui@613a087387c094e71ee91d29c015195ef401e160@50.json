{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ef734833a5980713a4ac1dbfb1ebdceaa74a7970",
      "candidate_info": {
        "commit_hash": "ef734833a5980713a4ac1dbfb1ebdceaa74a7970",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/ef734833a5980713a4ac1dbfb1ebdceaa74a7970",
        "files": [
          "src/lib/components/chat/Messages/ResponseMessage.svelte"
        ],
        "message": "fix",
        "before_after_code_files": [
          "src/lib/components/chat/Messages/ResponseMessage.svelte||src/lib/components/chat/Messages/ResponseMessage.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Messages/ResponseMessage.svelte||src/lib/components/chat/Messages/ResponseMessage.svelte": [
          "File: src/lib/components/chat/Messages/ResponseMessage.svelte -> src/lib/components/chat/Messages/ResponseMessage.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1328:         {/if}",
          "1329:        {/if}",
          "1330:       {/if}",
          "1343:      </div>",
          "1344:     {/if}",
          "1345:    </div>",
          "1346:   </div>",
          "",
          "[Removed Lines]",
          "1332:       {#if message.done && showRateComment}",
          "1333:        <RateComment",
          "1334:         bind:message",
          "1335:         bind:show={showRateComment}",
          "1336:         on:save={async (e) => {",
          "1337:          await feedbackHandler(null, {",
          "1338:           ...e.detail",
          "1339:          });",
          "1340:         }}",
          "1341:        />",
          "1342:       {/if}",
          "",
          "[Added Lines]",
          "1333:      {#if message.done && showRateComment}",
          "1334:       <RateComment",
          "1335:        bind:message",
          "1336:        bind:show={showRateComment}",
          "1337:        on:save={async (e) => {",
          "1338:         await feedbackHandler(null, {",
          "1339:          ...e.detail",
          "1340:         });",
          "1341:        }}",
          "1342:       />",
          "1343:      {/if}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57010901e6077dbb12417f90dd99bbdd83b30d42",
      "candidate_info": {
        "commit_hash": "57010901e6077dbb12417f90dd99bbdd83b30d42",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/57010901e6077dbb12417f90dd99bbdd83b30d42",
        "files": [
          "backend/open_webui/config.py",
          "backend/open_webui/main.py",
          "backend/open_webui/retrieval/utils.py",
          "backend/open_webui/retrieval/vector/dbs/chroma.py",
          "backend/open_webui/routers/retrieval.py",
          "backend/open_webui/utils/middleware.py",
          "src/lib/components/admin/Settings/Documents.svelte",
          "src/lib/components/admin/Settings/WebSearch.svelte",
          "src/lib/components/chat/Messages/Citations.svelte",
          "src/lib/components/common/FileItemModal.svelte"
        ],
        "message": "enh: bypass embedding and retrieval",
        "before_after_code_files": [
          "backend/open_webui/config.py||backend/open_webui/config.py",
          "backend/open_webui/main.py||backend/open_webui/main.py",
          "backend/open_webui/retrieval/utils.py||backend/open_webui/retrieval/utils.py",
          "backend/open_webui/retrieval/vector/dbs/chroma.py||backend/open_webui/retrieval/vector/dbs/chroma.py",
          "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py",
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "src/lib/components/admin/Settings/Documents.svelte||src/lib/components/admin/Settings/Documents.svelte",
          "src/lib/components/admin/Settings/WebSearch.svelte||src/lib/components/admin/Settings/WebSearch.svelte",
          "src/lib/components/chat/Messages/Citations.svelte||src/lib/components/chat/Messages/Citations.svelte",
          "src/lib/components/common/FileItemModal.svelte||src/lib/components/common/FileItemModal.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/config.py||backend/open_webui/config.py": [
          "File: backend/open_webui/config.py -> backend/open_webui/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1502: # Chroma",
          "1503: if VECTOR_DB == \"chroma\":",
          "1504:     import chromadb",
          "1505:     CHROMA_DATA_PATH = f\"{DATA_DIR}/vector_db\"",
          "1506:     CHROMA_TENANT = os.environ.get(\"CHROMA_TENANT\", chromadb.DEFAULT_TENANT)",
          "1507:     CHROMA_DATABASE = os.environ.get(\"CHROMA_DATABASE\", chromadb.DEFAULT_DATABASE)",
          "1508:     CHROMA_HTTP_HOST = os.environ.get(\"CHROMA_HTTP_HOST\", \"\")",
          "1509:     CHROMA_HTTP_PORT = int(os.environ.get(\"CHROMA_HTTP_PORT\", \"8000\"))",
          "1510:     CHROMA_CLIENT_AUTH_PROVIDER = os.environ.get(\"CHROMA_CLIENT_AUTH_PROVIDER\", \"\")",
          "1512:     # Comma-separated list of header=value pairs",
          "1513:     CHROMA_HTTP_HEADERS = os.environ.get(\"CHROMA_HTTP_HEADERS\", \"\")",
          "1514:     if CHROMA_HTTP_HEADERS:",
          "",
          "[Removed Lines]",
          "1511:     CHROMA_CLIENT_AUTH_CREDENTIALS = os.environ.get(\"CHROMA_CLIENT_AUTH_CREDENTIALS\", \"\")",
          "",
          "[Added Lines]",
          "1512:     CHROMA_CLIENT_AUTH_CREDENTIALS = os.environ.get(",
          "1513:         \"CHROMA_CLIENT_AUTH_CREDENTIALS\", \"\"",
          "1514:     )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1608:     os.getenv(\"DOCUMENT_INTELLIGENCE_KEY\", \"\"),",
          "1609: )",
          "1611: RAG_TOP_K = PersistentConfig(",
          "1612:     \"RAG_TOP_K\", \"rag.top_k\", int(os.environ.get(\"RAG_TOP_K\", \"3\"))",
          "1613: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1615: BYPASS_EMBEDDING_AND_RETRIEVAL = PersistentConfig(",
          "1616:     \"BYPASS_EMBEDDING_AND_RETRIEVAL\",",
          "1617:     \"rag.bypass_embedding_and_retrieval\",",
          "1618:     os.environ.get(\"BYPASS_EMBEDDING_AND_RETRIEVAL\", \"False\").lower() == \"true\",",
          "1619: )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1824:     os.getenv(\"RAG_WEB_SEARCH_ENGINE\", \"\"),",
          "1825: )",
          "1831: )",
          "1833: # You can provide a list of your own websites to filter after performing a web search.",
          "",
          "[Removed Lines]",
          "1827: RAG_WEB_SEARCH_FULL_CONTEXT = PersistentConfig(",
          "1828:     \"RAG_WEB_SEARCH_FULL_CONTEXT\",",
          "1829:     \"rag.web.search.full_context\",",
          "1830:     os.getenv(\"RAG_WEB_SEARCH_FULL_CONTEXT\", \"False\").lower() == \"true\",",
          "",
          "[Added Lines]",
          "1838: BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = PersistentConfig(",
          "1839:     \"BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\",",
          "1840:     \"rag.web.search.bypass_embedding_and_retrieval\",",
          "1841:     os.getenv(\"BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\", \"False\").lower() == \"true\",",
          "",
          "---------------"
        ],
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     RAG_TEMPLATE,",
          "163:     DEFAULT_RAG_TEMPLATE,",
          "164:     RAG_FULL_CONTEXT,",
          "165:     RAG_EMBEDDING_MODEL,",
          "166:     RAG_EMBEDDING_MODEL_AUTO_UPDATE,",
          "167:     RAG_EMBEDDING_MODEL_TRUST_REMOTE_CODE,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:     BYPASS_EMBEDDING_AND_RETRIEVAL,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:     YOUTUBE_LOADER_PROXY_URL,",
          "192:     # Retrieval (Web Search)",
          "193:     RAG_WEB_SEARCH_ENGINE,",
          "195:     RAG_WEB_SEARCH_RESULT_COUNT,",
          "196:     RAG_WEB_SEARCH_CONCURRENT_REQUESTS,",
          "197:     RAG_WEB_SEARCH_TRUST_ENV,",
          "",
          "[Removed Lines]",
          "194:     RAG_WEB_SEARCH_FULL_CONTEXT,",
          "",
          "[Added Lines]",
          "195:     BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "533: app.state.config.RAG_FULL_CONTEXT = RAG_FULL_CONTEXT",
          "534: app.state.config.ENABLE_RAG_HYBRID_SEARCH = ENABLE_RAG_HYBRID_SEARCH",
          "535: app.state.config.ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION = (",
          "536:     ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535: app.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL = BYPASS_EMBEDDING_AND_RETRIEVAL",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "568: app.state.config.ENABLE_RAG_WEB_SEARCH = ENABLE_RAG_WEB_SEARCH",
          "569: app.state.config.RAG_WEB_SEARCH_ENGINE = RAG_WEB_SEARCH_ENGINE",
          "571: app.state.config.RAG_WEB_SEARCH_DOMAIN_FILTER_LIST = RAG_WEB_SEARCH_DOMAIN_FILTER_LIST",
          "573: app.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION = ENABLE_GOOGLE_DRIVE_INTEGRATION",
          "",
          "[Removed Lines]",
          "570: app.state.config.RAG_WEB_SEARCH_FULL_CONTEXT = RAG_WEB_SEARCH_FULL_CONTEXT",
          "",
          "[Added Lines]",
          "572: app.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (",
          "573:     BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL",
          "574: )",
          "",
          "---------------"
        ],
        "backend/open_webui/retrieval/utils.py||backend/open_webui/retrieval/utils.py": [
          "File: backend/open_webui/retrieval/utils.py -> backend/open_webui/retrieval/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: from open_webui.utils.misc import get_last_user_message, calculate_sha256_string",
          "19: from open_webui.models.users import UserModel",
          "21: from open_webui.env import (",
          "22:     SRC_LOG_LEVELS,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: from open_webui.models.files import Files",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344: def get_sources_from_files(",
          "345:     files,",
          "346:     queries,",
          "347:     embedding_function,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:     request,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "359:     relevant_contexts = []",
          "361:     for file in files:",
          "362:         if file.get(\"docs\"):",
          "363:             context = {",
          "364:                 \"documents\": [[doc.get(\"content\") for doc in file.get(\"docs\")]],",
          "365:                 \"metadatas\": [[doc.get(\"metadata\") for doc in file.get(\"docs\")]],",
          "366:             }",
          "367:         elif file.get(\"context\") == \"full\":",
          "368:             context = {",
          "369:                 \"documents\": [[file.get(\"file\").get(\"data\", {}).get(\"content\")]],",
          "370:                 \"metadatas\": [[{\"file_id\": file.get(\"id\"), \"name\": file.get(\"name\")}]],",
          "371:             }",
          "375:             collection_names = []",
          "376:             if file.get(\"type\") == \"collection\":",
          "377:                 if file.get(\"legacy\"):",
          "",
          "[Removed Lines]",
          "372:         else:",
          "373:             context = None",
          "",
          "[Added Lines]",
          "365:         context = None",
          "367:             # BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL",
          "373:             # Manual Full Mode Toggle",
          "378:         elif (",
          "379:             file.get(\"type\") != \"web_search\"",
          "380:             and request.app.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL",
          "381:         ):",
          "382:             # BYPASS_EMBEDDING_AND_RETRIEVAL",
          "383:             if file.get(\"type\") == \"collection\":",
          "384:                 file_ids = file.get(\"data\", {}).get(\"file_ids\", [])",
          "386:                 documents = []",
          "387:                 metadatas = []",
          "388:                 for file_id in file_ids:",
          "389:                     file_object = Files.get_file_by_id(file_id)",
          "391:                     if file_object:",
          "392:                         documents.append(file_object.data.get(\"content\", \"\"))",
          "393:                         metadatas.append(",
          "394:                             {",
          "395:                                 \"file_id\": file_id,",
          "396:                                 \"name\": file_object.filename,",
          "397:                                 \"source\": file_object.filename,",
          "398:                             }",
          "399:                         )",
          "401:                 context = {",
          "402:                     \"documents\": [documents],",
          "403:                     \"metadatas\": [metadatas],",
          "404:                 }",
          "406:             elif file.get(\"id\"):",
          "407:                 file_object = Files.get_file_by_id(file.get(\"id\"))",
          "408:                 if file_object:",
          "409:                     context = {",
          "410:                         \"documents\": [[file_object.data.get(\"content\", \"\")]],",
          "411:                         \"metadatas\": [",
          "412:                             [",
          "413:                                 {",
          "414:                                     \"file_id\": file.get(\"id\"),",
          "415:                                     \"name\": file_object.filename,",
          "416:                                     \"source\": file_object.filename,",
          "417:                                 }",
          "418:                             ]",
          "419:                         ],",
          "420:                     }",
          "421:         else:",
          "",
          "---------------"
        ],
        "backend/open_webui/retrieval/vector/dbs/chroma.py||backend/open_webui/retrieval/vector/dbs/chroma.py": [
          "File: backend/open_webui/retrieval/vector/dbs/chroma.py -> backend/open_webui/retrieval/vector/dbs/chroma.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:                     }",
          "108:                 )",
          "109:             return None",
          "112:             return None",
          "114:     def get(self, collection_name: str) -> Optional[GetResult]:",
          "",
          "[Removed Lines]",
          "110:         except Exception as e:",
          "111:             log.exception(f\"{e}\")",
          "",
          "[Added Lines]",
          "110:         except:",
          "",
          "---------------"
        ],
        "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py": [
          "File: backend/open_webui/routers/retrieval.py -> backend/open_webui/routers/retrieval.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:         \"status\": True,",
          "353:         \"pdf_extract_images\": request.app.state.config.PDF_EXTRACT_IMAGES,",
          "354:         \"RAG_FULL_CONTEXT\": request.app.state.config.RAG_FULL_CONTEXT,",
          "355:         \"enable_google_drive_integration\": request.app.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION,",
          "356:         \"enable_onedrive_integration\": request.app.state.config.ENABLE_ONEDRIVE_INTEGRATION,",
          "357:         \"content_extraction\": {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:         \"BYPASS_EMBEDDING_AND_RETRIEVAL\": request.app.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:         },",
          "379:         \"web\": {",
          "380:             \"ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION\": request.app.state.config.ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION,",
          "382:             \"search\": {",
          "383:                 \"enabled\": request.app.state.config.ENABLE_RAG_WEB_SEARCH,",
          "384:                 \"drive\": request.app.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION,",
          "",
          "[Removed Lines]",
          "381:             \"RAG_WEB_SEARCH_FULL_CONTEXT\": request.app.state.config.RAG_WEB_SEARCH_FULL_CONTEXT,",
          "",
          "[Added Lines]",
          "382:             \"BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\": request.app.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "473: class WebConfig(BaseModel):",
          "474:     search: WebSearchConfig",
          "475:     ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION: Optional[bool] = None",
          "479: class ConfigUpdateForm(BaseModel):",
          "480:     RAG_FULL_CONTEXT: Optional[bool] = None",
          "481:     pdf_extract_images: Optional[bool] = None",
          "482:     enable_google_drive_integration: Optional[bool] = None",
          "483:     enable_onedrive_integration: Optional[bool] = None",
          "",
          "[Removed Lines]",
          "476:     RAG_WEB_SEARCH_FULL_CONTEXT: Optional[bool] = None",
          "",
          "[Added Lines]",
          "477:     BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL: Optional[bool] = None",
          "482:     BYPASS_EMBEDDING_AND_RETRIEVAL: Optional[bool] = None",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "504:         else request.app.state.config.RAG_FULL_CONTEXT",
          "505:     )",
          "507:     request.app.state.config.ENABLE_GOOGLE_DRIVE_INTEGRATION = (",
          "508:         form_data.enable_google_drive_integration",
          "509:         if form_data.enable_google_drive_integration is not None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "509:     request.app.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL = (",
          "510:         form_data.BYPASS_EMBEDDING_AND_RETRIEVAL",
          "511:         if form_data.BYPASS_EMBEDDING_AND_RETRIEVAL is not None",
          "512:         else request.app.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL",
          "513:     )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "557:         request.app.state.config.ENABLE_RAG_WEB_SEARCH = form_data.web.search.enabled",
          "558:         request.app.state.config.RAG_WEB_SEARCH_ENGINE = form_data.web.search.engine",
          "562:         )",
          "564:         request.app.state.config.SEARXNG_QUERY_URL = (",
          "",
          "[Removed Lines]",
          "560:         request.app.state.config.RAG_WEB_SEARCH_FULL_CONTEXT = (",
          "561:             form_data.web.RAG_WEB_SEARCH_FULL_CONTEXT",
          "",
          "[Added Lines]",
          "568:         request.app.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL = (",
          "569:             form_data.web.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "626:         \"status\": True,",
          "627:         \"pdf_extract_images\": request.app.state.config.PDF_EXTRACT_IMAGES,",
          "628:         \"RAG_FULL_CONTEXT\": request.app.state.config.RAG_FULL_CONTEXT,",
          "629:         \"file\": {",
          "630:             \"max_size\": request.app.state.config.FILE_MAX_SIZE,",
          "631:             \"max_count\": request.app.state.config.FILE_MAX_COUNT,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "637:         \"BYPASS_EMBEDDING_AND_RETRIEVAL\": request.app.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "650:         },",
          "651:         \"web\": {",
          "652:             \"ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION\": request.app.state.config.ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION,",
          "654:             \"search\": {",
          "655:                 \"enabled\": request.app.state.config.ENABLE_RAG_WEB_SEARCH,",
          "656:                 \"engine\": request.app.state.config.RAG_WEB_SEARCH_ENGINE,",
          "",
          "[Removed Lines]",
          "653:             \"RAG_WEB_SEARCH_FULL_CONTEXT\": request.app.state.config.RAG_WEB_SEARCH_FULL_CONTEXT,",
          "",
          "[Added Lines]",
          "662:             \"BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL\": request.app.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1019:         hash = calculate_sha256_string(text_content)",
          "1020:         Files.update_file_hash_by_id(file.id, hash)",
          "1041:                     },",
          "1042:                 )",
          "1052:     except Exception as e:",
          "1053:         log.exception(e)",
          "1054:         if \"No pandoc was found\" in str(e):",
          "",
          "[Removed Lines]",
          "1022:         try:",
          "1023:             result = save_docs_to_vector_db(",
          "1024:                 request,",
          "1025:                 docs=docs,",
          "1026:                 collection_name=collection_name,",
          "1027:                 metadata={",
          "1028:                     \"file_id\": file.id,",
          "1029:                     \"name\": file.filename,",
          "1030:                     \"hash\": hash,",
          "1031:                 },",
          "1032:                 add=(True if form_data.collection_name else False),",
          "1033:                 user=user,",
          "1034:             )",
          "1036:             if result:",
          "1037:                 Files.update_file_metadata_by_id(",
          "1038:                     file.id,",
          "1039:                     {",
          "1040:                         \"collection_name\": collection_name,",
          "1044:                 return {",
          "1045:                     \"status\": True,",
          "1046:                     \"collection_name\": collection_name,",
          "1047:                     \"filename\": file.filename,",
          "1048:                     \"content\": text_content,",
          "1049:                 }",
          "1050:         except Exception as e:",
          "1051:             raise e",
          "",
          "[Added Lines]",
          "1031:         if not request.app.state.config.BYPASS_EMBEDDING_AND_RETRIEVAL:",
          "1032:             try:",
          "1033:                 result = save_docs_to_vector_db(",
          "1034:                     request,",
          "1035:                     docs=docs,",
          "1036:                     collection_name=collection_name,",
          "1037:                     metadata={",
          "1038:                         \"file_id\": file.id,",
          "1039:                         \"name\": file.filename,",
          "1040:                         \"hash\": hash,",
          "1042:                     add=(True if form_data.collection_name else False),",
          "1043:                     user=user,",
          "1046:                 if result:",
          "1047:                     Files.update_file_metadata_by_id(",
          "1048:                         file.id,",
          "1049:                         {",
          "1050:                             \"collection_name\": collection_name,",
          "1051:                         },",
          "1052:                     )",
          "1054:                     return {",
          "1055:                         \"status\": True,",
          "1056:                         \"collection_name\": collection_name,",
          "1057:                         \"filename\": file.filename,",
          "1058:                         \"content\": text_content,",
          "1059:                     }",
          "1060:             except Exception as e:",
          "1061:                 raise e",
          "1062:         else:",
          "1063:             return {",
          "1064:                 \"status\": True,",
          "1065:                 \"collection_name\": None,",
          "1066:                 \"filename\": file.filename,",
          "1067:                 \"content\": text_content,",
          "1068:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1408:         )",
          "1409:         docs = await loader.aload()",
          "1412:             return {",
          "1413:                 \"status\": True,",
          "1414:                 \"docs\": [",
          "1415:                     {",
          "1416:                         \"content\": doc.page_content,",
          "",
          "[Removed Lines]",
          "1411:         if request.app.state.config.RAG_WEB_SEARCH_FULL_CONTEXT:",
          "",
          "[Added Lines]",
          "1429:         if request.app.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL:",
          "1432:                 \"collection_name\": None,",
          "1433:                 \"filenames\": urls,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1418:                     }",
          "1419:                     for doc in docs",
          "1420:                 ],",
          "1422:                 \"loaded_count\": len(docs),",
          "1423:             }",
          "1424:         else:",
          "",
          "[Removed Lines]",
          "1421:                 \"filenames\": urls,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "351:                 all_results.append(results)",
          "352:                 files = form_data.get(\"files\", [])",
          "355:                     files.append(",
          "356:                         {",
          "358:                             \"name\": searchQuery,",
          "360:                             \"urls\": results[\"filenames\"],",
          "361:                         }",
          "362:                     )",
          "364:                     files.append(",
          "365:                         {",
          "367:                             \"name\": searchQuery,",
          "369:                             \"urls\": results[\"filenames\"],",
          "370:                         }",
          "371:                     )",
          "372:                 form_data[\"files\"] = files",
          "373:         except Exception as e:",
          "374:             log.exception(e)",
          "",
          "[Removed Lines]",
          "354:                 if request.app.state.config.RAG_WEB_SEARCH_FULL_CONTEXT:",
          "357:                             \"docs\": results.get(\"docs\", []),",
          "359:                             \"type\": \"web_search_docs\",",
          "363:                 else:",
          "366:                             \"collection_name\": results[\"collection_name\"],",
          "368:                             \"type\": \"web_search_results\",",
          "",
          "[Added Lines]",
          "354:                 if results.get(\"collection_name\"):",
          "357:                             \"collection_name\": results[\"collection_name\"],",
          "359:                             \"type\": \"web_search\",",
          "363:                 elif results.get(\"docs\"):",
          "366:                             \"docs\": results.get(\"docs\", []),",
          "368:                             \"type\": \"web_search\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "518:     sources = []",
          "520:     if files := body.get(\"metadata\", {}).get(\"files\", None):",
          "521:         try:",
          "522:             queries_response = await generate_queries(",
          "523:                 request,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "522:         queries = []",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "543:                 queries_response = {\"queries\": [queries_response]}",
          "545:             queries = queries_response.get(\"queries\", [])",
          "549:         if len(queries) == 0:",
          "550:             queries = [get_last_user_message(body[\"messages\"])]",
          "",
          "[Removed Lines]",
          "546:         except Exception as e:",
          "547:             queries = []",
          "",
          "[Added Lines]",
          "548:         except:",
          "549:             pass",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "556:                 sources = await loop.run_in_executor(",
          "557:                     executor,",
          "558:                     lambda: get_sources_from_files(",
          "559:                         files=files,",
          "560:                         queries=queries,",
          "561:                         embedding_function=lambda query: request.app.state.EMBEDDING_FUNCTION(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561:                         request=request,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "795:     if len(sources) > 0:",
          "796:         context_string = \"\"",
          "797:         for source_idx, source in enumerate(sources):",
          "800:             if \"document\" in source:",
          "801:                 for doc_idx, doc_context in enumerate(source[\"document\"]):",
          "802:                     context_string += f\"<source><source_id>{source_idx}</source_id><source_context>{doc_context}</source_context></source>\\n\"",
          "",
          "[Removed Lines]",
          "798:             source_id = source.get(\"source\", {}).get(\"name\", \"\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1913:                         )",
          "1915:                         log.info(f\"content_blocks={content_blocks}\")",
          "1918:                         try:",
          "1919:                             res = await generate_chat_completion(",
          "",
          "[Removed Lines]",
          "1916:                         log.info(f\"serialize_content_blocks={serialize_content_blocks(content_blocks)}\")",
          "",
          "[Added Lines]",
          "1918:                         log.info(",
          "1919:                             f\"serialize_content_blocks={serialize_content_blocks(content_blocks)}\"",
          "1920:                         )",
          "",
          "---------------"
        ],
        "src/lib/components/admin/Settings/Documents.svelte||src/lib/components/admin/Settings/Documents.svelte": [
          "File: src/lib/components/admin/Settings/Documents.svelte -> src/lib/components/admin/Settings/Documents.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  let pdfExtractImages = true;",
          "61:  let RAG_FULL_CONTEXT = false;",
          "63:  let enableGoogleDriveIntegration = false;",
          "64:  let enableOneDriveIntegration = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:  let BYPASS_EMBEDDING_AND_RETRIEVAL = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:  };",
          "172:  const submitHandler = async () => {",
          "179:   if (contentExtractionEngine === 'tika' && tikaServerUrl === '') {",
          "180:    toast.error($i18n.t('Tika Server URL required.'));",
          "181:    return;",
          "",
          "[Removed Lines]",
          "173:   await embeddingModelUpdateHandler();",
          "175:   if (querySettings.hybrid) {",
          "176:    await rerankingModelUpdateHandler();",
          "177:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:    toast.error($i18n.t('Document Intelligence endpoint and key required.'));",
          "188:    return;",
          "189:   }",
          "190:   const res = await updateRAGConfig(localStorage.token, {",
          "191:    pdf_extract_images: pdfExtractImages,",
          "192:    enable_google_drive_integration: enableGoogleDriveIntegration,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "186:   if (!BYPASS_EMBEDDING_AND_RETRIEVAL) {",
          "187:    await embeddingModelUpdateHandler();",
          "189:    if (querySettings.hybrid) {",
          "190:     await rerankingModelUpdateHandler();",
          "191:    }",
          "192:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196:     max_count: fileMaxCount === '' ? null : fileMaxCount",
          "197:    },",
          "198:    RAG_FULL_CONTEXT: RAG_FULL_CONTEXT,",
          "199:    chunk: {",
          "200:     text_splitter: textSplitter,",
          "201:     chunk_overlap: chunkOverlap,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:    BYPASS_EMBEDDING_AND_RETRIEVAL: BYPASS_EMBEDDING_AND_RETRIEVAL,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "260:    chunkOverlap = res.chunk.chunk_overlap;",
          "262:    RAG_FULL_CONTEXT = res.RAG_FULL_CONTEXT;",
          "264:    contentExtractionEngine = res.content_extraction.engine;",
          "265:    tikaServerUrl = res.content_extraction.tika_server_url;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:    BYPASS_EMBEDDING_AND_RETRIEVAL = res.BYPASS_EMBEDDING_AND_RETRIEVAL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "328:        <select",
          "329:         class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 text-xs bg-transparent outline-hidden text-right\"",
          "330:         bind:value={contentExtractionEngine}",
          "334:        >",
          "335:         <option value=\"\">{$i18n.t('Default')} </option>",
          "336:         <option value=\"tika\">{$i18n.t('Tika')}</option>",
          "",
          "[Removed Lines]",
          "331:         on:change={(e) => {",
          "332:          showDocumentIntelligenceConfig = e.target.value === 'document_intelligence';",
          "333:         }}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "376:     {/if}",
          "378:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "380:      <div class=\"flex items-center relative\">",
          "384:       >",
          "388:      </div>",
          "389:     </div>",
          "407:       </div>",
          "412:        </div>",
          "423:        </div>",
          "424:       </div>",
          "425:      </div>",
          "427:    </div>",
          "456:       </div>",
          "457:      </div>",
          "469:       </div>",
          "484:       </div>",
          "502:        </div>",
          "516:          <button",
          "517:           class=\"px-2.5 bg-transparent text-gray-800 dark:bg-transparent dark:text-gray-100 rounded-lg transition\"",
          "518:           on:click={() => {",
          "520:           }}",
          "522:          >",
          "524:            <div class=\"self-center\">",
          "525:             <svg",
          "526:              class=\" w-4 h-4\"",
          "",
          "[Removed Lines]",
          "379:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Text Splitter')}</div>",
          "381:       <select",
          "382:        class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 text-xs bg-transparent outline-hidden text-right\"",
          "383:        bind:value={textSplitter}",
          "385:        <option value=\"\">{$i18n.t('Default')} ({$i18n.t('Character')})</option>",
          "386:        <option value=\"token\">{$i18n.t('Token')} ({$i18n.t('Tiktoken')})</option>",
          "387:       </select>",
          "391:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "392:      <div class=\" flex gap-1.5 w-full\">",
          "393:       <div class=\"  w-full justify-between\">",
          "394:        <div class=\"self-center text-xs font-medium min-w-fit mb-1\">",
          "395:         {$i18n.t('Chunk Size')}",
          "396:        </div>",
          "397:        <div class=\"self-center\">",
          "398:         <input",
          "399:          class=\" w-full rounded-lg py-1.5 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "400:          type=\"number\"",
          "401:          placeholder={$i18n.t('Enter Chunk Size')}",
          "402:          bind:value={chunkSize}",
          "403:          autocomplete=\"off\"",
          "404:          min=\"0\"",
          "405:         />",
          "406:        </div>",
          "409:       <div class=\"w-full\">",
          "410:        <div class=\" self-center text-xs font-medium min-w-fit mb-1\">",
          "411:         {$i18n.t('Chunk Overlap')}",
          "414:        <div class=\"self-center\">",
          "415:         <input",
          "416:          class=\"w-full rounded-lg py-1.5 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "417:          type=\"number\"",
          "418:          placeholder={$i18n.t('Enter Chunk Overlap')}",
          "419:          bind:value={chunkOverlap}",
          "420:          autocomplete=\"off\"",
          "421:          min=\"0\"",
          "422:         />",
          "426:     </div>",
          "429:    <div class=\"mb-3\">",
          "430:     <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Embedding')}</div>",
          "432:     <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "434:     <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "435:      <div class=\"flex w-full justify-between\">",
          "436:       <div class=\" self-center text-xs font-medium\">{$i18n.t('Embedding Model Engine')}</div>",
          "437:       <div class=\"flex items-center relative\">",
          "438:        <select",
          "439:         class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 p-1 text-xs bg-transparent outline-hidden text-right\"",
          "440:         bind:value={embeddingEngine}",
          "441:         placeholder=\"Select an embedding model engine\"",
          "442:         on:change={(e) => {",
          "443:          if (e.target.value === 'ollama') {",
          "444:           embeddingModel = '';",
          "445:          } else if (e.target.value === 'openai') {",
          "446:           embeddingModel = 'text-embedding-3-small';",
          "447:          } else if (e.target.value === '') {",
          "448:           embeddingModel = 'sentence-transformers/all-MiniLM-L6-v2';",
          "449:          }",
          "450:         }}",
          "451:        >",
          "452:         <option value=\"\">{$i18n.t('Default (SentenceTransformers)')}</option>",
          "453:         <option value=\"ollama\">{$i18n.t('Ollama')}</option>",
          "454:         <option value=\"openai\">{$i18n.t('OpenAI')}</option>",
          "455:        </select>",
          "459:      {#if embeddingEngine === 'openai'}",
          "460:       <div class=\"my-0.5 flex gap-2 pr-2\">",
          "461:        <input",
          "462:         class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "463:         placeholder={$i18n.t('API Base URL')}",
          "464:         bind:value={OpenAIUrl}",
          "465:         required",
          "466:        />",
          "468:        <SensitiveInput placeholder={$i18n.t('API Key')} bind:value={OpenAIKey} />",
          "470:      {:else if embeddingEngine === 'ollama'}",
          "471:       <div class=\"my-0.5 flex gap-2 pr-2\">",
          "472:        <input",
          "473:         class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "474:         placeholder={$i18n.t('API Base URL')}",
          "475:         bind:value={OllamaUrl}",
          "476:         required",
          "477:        />",
          "479:        <SensitiveInput",
          "480:         placeholder={$i18n.t('API Key')}",
          "481:         bind:value={OllamaKey}",
          "482:         required={false}",
          "483:        />",
          "485:      {/if}",
          "486:     </div>",
          "488:     <div class=\"  mb-2.5 flex flex-col w-full\">",
          "489:      <div class=\" mb-1 text-xs font-medium\">{$i18n.t('Embedding Model')}</div>",
          "491:      <div class=\"\">",
          "492:       {#if embeddingEngine === 'ollama'}",
          "493:        <div class=\"flex w-full\">",
          "494:         <div class=\"flex-1 mr-2\">",
          "495:          <input",
          "496:           class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "497:           bind:value={embeddingModel}",
          "498:           placeholder={$i18n.t('Set embedding model')}",
          "499:           required",
          "500:          />",
          "501:         </div>",
          "503:       {:else}",
          "504:        <div class=\"flex w-full\">",
          "505:         <div class=\"flex-1 mr-2\">",
          "506:          <input",
          "507:           class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "508:           placeholder={$i18n.t('Set embedding model (e.g. {{model}})', {",
          "509:            model: embeddingModel.slice(-40)",
          "510:           })}",
          "511:           bind:value={embeddingModel}",
          "512:          />",
          "513:         </div>",
          "515:         {#if embeddingEngine === ''}",
          "519:            embeddingModelUpdateHandler();",
          "521:           disabled={updateEmbeddingModelLoading}",
          "523:           {#if updateEmbeddingModelLoading}",
          "",
          "[Added Lines]",
          "382:      <div class=\" self-center text-xs font-medium\">",
          "383:       <Tooltip content={$i18n.t('Full Context Mode')} placement=\"top-start\">",
          "384:        {$i18n.t('Bypass Embedding and Retrieval')}",
          "385:       </Tooltip>",
          "386:      </div>",
          "388:       <Tooltip",
          "389:        content={BYPASS_EMBEDDING_AND_RETRIEVAL",
          "390:         ? 'Inject the entire content as context for comprehensive processing, this is recommended for complex queries.'",
          "391:         : 'Default to segmented retrieval for focused and relevant content extraction, this is recommended for most cases.'}",
          "393:        <Switch bind:state={BYPASS_EMBEDDING_AND_RETRIEVAL} />",
          "394:       </Tooltip>",
          "398:     {#if !BYPASS_EMBEDDING_AND_RETRIEVAL}",
          "399:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "400:       <div class=\" self-center text-xs font-medium\">{$i18n.t('Text Splitter')}</div>",
          "401:       <div class=\"flex items-center relative\">",
          "402:        <select",
          "403:         class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 text-xs bg-transparent outline-hidden text-right\"",
          "404:         bind:value={textSplitter}",
          "405:        >",
          "406:         <option value=\"\">{$i18n.t('Default')} ({$i18n.t('Character')})</option>",
          "407:         <option value=\"token\">{$i18n.t('Token')} ({$i18n.t('Tiktoken')})</option>",
          "408:        </select>",
          "410:      </div>",
          "412:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "413:       <div class=\" flex gap-1.5 w-full\">",
          "414:        <div class=\"  w-full justify-between\">",
          "415:         <div class=\"self-center text-xs font-medium min-w-fit mb-1\">",
          "416:          {$i18n.t('Chunk Size')}",
          "417:         </div>",
          "418:         <div class=\"self-center\">",
          "419:          <input",
          "420:           class=\" w-full rounded-lg py-1.5 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "421:           type=\"number\"",
          "422:           placeholder={$i18n.t('Enter Chunk Size')}",
          "423:           bind:value={chunkSize}",
          "424:           autocomplete=\"off\"",
          "425:           min=\"0\"",
          "426:          />",
          "427:         </div>",
          "430:        <div class=\"w-full\">",
          "431:         <div class=\" self-center text-xs font-medium min-w-fit mb-1\">",
          "432:          {$i18n.t('Chunk Overlap')}",
          "433:         </div>",
          "435:         <div class=\"self-center\">",
          "436:          <input",
          "437:           class=\"w-full rounded-lg py-1.5 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "438:           type=\"number\"",
          "439:           placeholder={$i18n.t('Enter Chunk Overlap')}",
          "440:           bind:value={chunkOverlap}",
          "441:           autocomplete=\"off\"",
          "442:           min=\"0\"",
          "443:          />",
          "444:         </div>",
          "448:     {/if}",
          "451:    {#if !BYPASS_EMBEDDING_AND_RETRIEVAL}",
          "452:     <div class=\"mb-3\">",
          "453:      <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Embedding')}</div>",
          "455:      <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "457:      <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "458:       <div class=\"flex w-full justify-between\">",
          "459:        <div class=\" self-center text-xs font-medium\">",
          "460:         {$i18n.t('Embedding Model Engine')}",
          "461:        </div>",
          "462:        <div class=\"flex items-center relative\">",
          "463:         <select",
          "464:          class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 p-1 text-xs bg-transparent outline-hidden text-right\"",
          "465:          bind:value={embeddingEngine}",
          "466:          placeholder=\"Select an embedding model engine\"",
          "467:          on:change={(e) => {",
          "468:           if (e.target.value === 'ollama') {",
          "469:            embeddingModel = '';",
          "470:           } else if (e.target.value === 'openai') {",
          "471:            embeddingModel = 'text-embedding-3-small';",
          "472:           } else if (e.target.value === '') {",
          "473:            embeddingModel = 'sentence-transformers/all-MiniLM-L6-v2';",
          "474:           }",
          "475:          }}",
          "476:         >",
          "477:          <option value=\"\">{$i18n.t('Default (SentenceTransformers)')}</option>",
          "478:          <option value=\"ollama\">{$i18n.t('Ollama')}</option>",
          "479:          <option value=\"openai\">{$i18n.t('OpenAI')}</option>",
          "480:         </select>",
          "481:        </div>",
          "484:       {#if embeddingEngine === 'openai'}",
          "485:        <div class=\"my-0.5 flex gap-2 pr-2\">",
          "486:         <input",
          "487:          class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "488:          placeholder={$i18n.t('API Base URL')}",
          "489:          bind:value={OpenAIUrl}",
          "490:          required",
          "491:         />",
          "493:         <SensitiveInput placeholder={$i18n.t('API Key')} bind:value={OpenAIKey} />",
          "494:        </div>",
          "495:       {:else if embeddingEngine === 'ollama'}",
          "496:        <div class=\"my-0.5 flex gap-2 pr-2\">",
          "497:         <input",
          "498:          class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "499:          placeholder={$i18n.t('API Base URL')}",
          "500:          bind:value={OllamaUrl}",
          "501:          required",
          "502:         />",
          "504:         <SensitiveInput",
          "505:          placeholder={$i18n.t('API Key')}",
          "506:          bind:value={OllamaKey}",
          "507:          required={false}",
          "508:         />",
          "509:        </div>",
          "510:       {/if}",
          "513:      <div class=\"  mb-2.5 flex flex-col w-full\">",
          "514:       <div class=\" mb-1 text-xs font-medium\">{$i18n.t('Embedding Model')}</div>",
          "516:       <div class=\"\">",
          "517:        {#if embeddingEngine === 'ollama'}",
          "518:         <div class=\"flex w-full\">",
          "519:          <div class=\"flex-1 mr-2\">",
          "520:           <input",
          "521:            class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "522:            bind:value={embeddingModel}",
          "523:            placeholder={$i18n.t('Set embedding model')}",
          "524:            required",
          "525:           />",
          "526:          </div>",
          "527:         </div>",
          "528:        {:else}",
          "529:         <div class=\"flex w-full\">",
          "530:          <div class=\"flex-1 mr-2\">",
          "531:           <input",
          "532:            class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "533:            placeholder={$i18n.t('Set embedding model (e.g. {{model}})', {",
          "534:             model: embeddingModel.slice(-40)",
          "535:            })}",
          "536:            bind:value={embeddingModel}",
          "537:           />",
          "538:          </div>",
          "540:          {#if embeddingEngine === ''}",
          "541:           <button",
          "542:            class=\"px-2.5 bg-transparent text-gray-800 dark:bg-transparent dark:text-gray-100 rounded-lg transition\"",
          "543:            on:click={() => {",
          "544:             embeddingModelUpdateHandler();",
          "545:            }}",
          "546:            disabled={updateEmbeddingModelLoading}",
          "547:           >",
          "548:            {#if updateEmbeddingModelLoading}",
          "549:             <div class=\"self-center\">",
          "550:              <svg",
          "551:               class=\" w-4 h-4\"",
          "552:               viewBox=\"0 0 24 24\"",
          "553:               fill=\"currentColor\"",
          "554:               xmlns=\"http://www.w3.org/2000/svg\"",
          "555:              >",
          "556:               <style>",
          "557:                .spinner_ajPY {",
          "558:                 transform-origin: center;",
          "559:                 animation: spinner_AtaB 0.75s infinite linear;",
          "560:                }",
          "562:                @keyframes spinner_AtaB {",
          "563:                 100% {",
          "564:                  transform: rotate(360deg);",
          "565:                 }",
          "566:                }",
          "567:               </style>",
          "568:               <path",
          "569:                d=\"M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z\"",
          "570:                opacity=\".25\"",
          "571:               />",
          "572:               <path",
          "573:                d=\"M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z\"",
          "574:                class=\"spinner_ajPY\"",
          "575:               />",
          "576:              </svg>",
          "577:             </div>",
          "578:            {:else}",
          "579:             <svg",
          "580:              xmlns=\"http://www.w3.org/2000/svg\"",
          "581:              viewBox=\"0 0 16 16\"",
          "582:              fill=\"currentColor\"",
          "583:              class=\"w-4 h-4\"",
          "584:             >",
          "585:              <path",
          "586:               d=\"M8.75 2.75a.75.75 0 0 0-1.5 0v5.69L5.03 6.22a.75.75 0 0 0-1.06 1.06l3.5 3.5a.75.75 0 0 0 1.06 0l3.5-3.5a.75.75 0 0 0-1.06-1.06L8.75 8.44V2.75Z\"",
          "587:              />",
          "588:              <path",
          "589:               d=\"M3.5 9.75a.75.75 0 0 0-1.5 0v1.5A2.75 2.75 0 0 0 4.75 14h6.5A2.75 2.75 0 0 0 14 11.25v-1.5a.75.75 0 0 0-1.5 0v1.5c0 .69-.56 1.25-1.25 1.25h-6.5c-.69 0-1.25-.56-1.25-1.25v-1.5Z\"",
          "590:              />",
          "591:             </svg>",
          "592:            {/if}",
          "593:           </button>",
          "594:          {/if}",
          "595:         </div>",
          "596:        {/if}",
          "599:       <div class=\"mt-1 mb-1 text-xs text-gray-400 dark:text-gray-500\">",
          "600:        {$i18n.t(",
          "601:         'Warning: If you update or change your embedding model, you will need to re-import all documents.'",
          "602:        )}",
          "604:      </div>",
          "606:      {#if embeddingEngine === 'ollama' || embeddingEngine === 'openai'}",
          "607:       <div class=\"  mb-2.5 flex w-full justify-between\">",
          "608:        <div class=\" self-center text-xs font-medium\">{$i18n.t('Embedding Batch Size')}</div>",
          "610:        <div class=\"\">",
          "611:         <input",
          "612:          bind:value={embeddingBatchSize}",
          "613:          type=\"number\"",
          "614:          class=\" bg-transparent text-center w-14 outline-none\"",
          "615:          min=\"-2\"",
          "616:          max=\"16000\"",
          "617:          step=\"1\"",
          "618:         />",
          "620:       </div>",
          "621:      {/if}",
          "623:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "624:       <div class=\" self-center text-xs font-medium\">{$i18n.t('Full Context Mode')}</div>",
          "625:       <div class=\"flex items-center relative\">",
          "626:        <Tooltip",
          "627:         content={RAG_FULL_CONTEXT",
          "628:          ? 'Inject entire contents as context for comprehensive processing, this is recommended for complex queries.'",
          "629:          : 'Default to segmented retrieval for focused and relevant content extraction, this is recommended for most cases.'}",
          "630:        >",
          "631:         <Switch bind:state={RAG_FULL_CONTEXT} />",
          "632:        </Tooltip>",
          "633:       </div>",
          "634:      </div>",
          "636:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "637:       <div class=\" self-center text-xs font-medium\">{$i18n.t('Hybrid Search')}</div>",
          "638:       <div class=\"flex items-center relative\">",
          "639:        <Switch",
          "640:         bind:state={querySettings.hybrid}",
          "641:         on:change={() => {",
          "642:          toggleHybridSearch();",
          "643:         }}",
          "644:        />",
          "645:       </div>",
          "646:      </div>",
          "648:      {#if querySettings.hybrid === true}",
          "649:       <div class=\"  mb-2.5 flex flex-col w-full\">",
          "650:        <div class=\" mb-1 text-xs font-medium\">{$i18n.t('Reranking Model')}</div>",
          "652:        <div class=\"\">",
          "653:         <div class=\"flex w-full\">",
          "654:          <div class=\"flex-1 mr-2\">",
          "655:           <input",
          "656:            class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "657:            placeholder={$i18n.t('Set reranking model (e.g. {{model}})', {",
          "658:             model: 'BAAI/bge-reranker-v2-m3'",
          "659:            })}",
          "660:            bind:value={rerankingModel}",
          "661:           />",
          "662:          </div>",
          "666:            rerankingModelUpdateHandler();",
          "668:           disabled={updateRerankingModelLoading}",
          "670:           {#if updateRerankingModelLoading}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "566:            </svg>",
          "567:           {/if}",
          "568:          </button>",
          "570:        </div>",
          "579:     </div>",
          "586:        <input",
          "588:         type=\"number\"",
          "593:        />",
          "594:       </div>",
          "595:      </div>",
          "630:          <input",
          "631:           class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "636:          />",
          "637:         </div>",
          "691:        </div>",
          "692:       </div>",
          "717:      <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "730:         />",
          "737:       </div>",
          "738:      </div>",
          "757:     </div>",
          "760:    <div class=\"mb-3\">",
          "761:     <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Files')}</div>",
          "",
          "[Removed Lines]",
          "569:         {/if}",
          "571:       {/if}",
          "572:      </div>",
          "574:      <div class=\"mt-1 mb-1 text-xs text-gray-400 dark:text-gray-500\">",
          "575:       {$i18n.t(",
          "576:        'Warning: If you update or change your embedding model, you will need to re-import all documents.'",
          "577:       )}",
          "578:      </div>",
          "581:     {#if embeddingEngine === 'ollama' || embeddingEngine === 'openai'}",
          "582:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "583:       <div class=\" self-center text-xs font-medium\">{$i18n.t('Embedding Batch Size')}</div>",
          "585:       <div class=\"\">",
          "587:         bind:value={embeddingBatchSize}",
          "589:         class=\" bg-transparent text-center w-14 outline-none\"",
          "590:         min=\"-2\"",
          "591:         max=\"16000\"",
          "592:         step=\"1\"",
          "596:     {/if}",
          "598:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "599:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Full Context Mode')}</div>",
          "600:      <div class=\"flex items-center relative\">",
          "601:       <Tooltip",
          "602:        content={RAG_FULL_CONTEXT",
          "603:         ? 'Inject entire contents as context for comprehensive processing, this is recommended for complex queries.'",
          "604:         : 'Default to segmented retrieval for focused and relevant content extraction, this is recommended for most cases.'}",
          "605:       >",
          "606:        <Switch bind:state={RAG_FULL_CONTEXT} />",
          "607:       </Tooltip>",
          "608:      </div>",
          "609:     </div>",
          "611:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "612:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Hybrid Search')}</div>",
          "613:      <div class=\"flex items-center relative\">",
          "614:       <Switch",
          "615:        bind:state={querySettings.hybrid}",
          "616:        on:change={() => {",
          "617:         toggleHybridSearch();",
          "618:        }}",
          "619:       />",
          "620:      </div>",
          "621:     </div>",
          "623:     {#if querySettings.hybrid === true}",
          "624:      <div class=\"  mb-2.5 flex flex-col w-full\">",
          "625:       <div class=\" mb-1 text-xs font-medium\">{$i18n.t('Reranking Model')}</div>",
          "627:       <div class=\"\">",
          "628:        <div class=\"flex w-full\">",
          "629:         <div class=\"flex-1 mr-2\">",
          "632:           placeholder={$i18n.t('Set reranking model (e.g. {{model}})', {",
          "633:            model: 'BAAI/bge-reranker-v2-m3'",
          "634:           })}",
          "635:           bind:value={rerankingModel}",
          "638:         <button",
          "639:          class=\"px-2.5 bg-transparent text-gray-800 dark:bg-transparent dark:text-gray-100 rounded-lg transition\"",
          "640:          on:click={() => {",
          "641:           rerankingModelUpdateHandler();",
          "642:          }}",
          "643:          disabled={updateRerankingModelLoading}",
          "644:         >",
          "645:          {#if updateRerankingModelLoading}",
          "646:           <div class=\"self-center\">",
          "647:            <svg",
          "648:             class=\" w-4 h-4\"",
          "649:             viewBox=\"0 0 24 24\"",
          "650:             fill=\"currentColor\"",
          "651:             xmlns=\"http://www.w3.org/2000/svg\"",
          "652:            >",
          "653:             <style>",
          "654:              .spinner_ajPY {",
          "655:               transform-origin: center;",
          "656:               animation: spinner_AtaB 0.75s infinite linear;",
          "657:              }",
          "659:              @keyframes spinner_AtaB {",
          "660:               100% {",
          "661:                transform: rotate(360deg);",
          "662:               }",
          "663:              }",
          "664:             </style>",
          "665:             <path",
          "666:              d=\"M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z\"",
          "667:              opacity=\".25\"",
          "668:             />",
          "669:             <path",
          "670:              d=\"M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z\"",
          "671:              class=\"spinner_ajPY\"",
          "672:             />",
          "673:            </svg>",
          "674:           </div>",
          "675:          {:else}",
          "676:           <svg",
          "677:            xmlns=\"http://www.w3.org/2000/svg\"",
          "678:            viewBox=\"0 0 16 16\"",
          "679:            fill=\"currentColor\"",
          "680:            class=\"w-4 h-4\"",
          "681:           >",
          "682:            <path",
          "683:             d=\"M8.75 2.75a.75.75 0 0 0-1.5 0v5.69L5.03 6.22a.75.75 0 0 0-1.06 1.06l3.5 3.5a.75.75 0 0 0 1.06 0l3.5-3.5a.75.75 0 0 0-1.06-1.06L8.75 8.44V2.75Z\"",
          "684:            />",
          "685:            <path",
          "686:             d=\"M3.5 9.75a.75.75 0 0 0-1.5 0v1.5A2.75 2.75 0 0 0 4.75 14h6.5A2.75 2.75 0 0 0 14 11.25v-1.5a.75.75 0 0 0-1.5 0v1.5c0 .69-.56 1.25-1.25 1.25h-6.5c-.69 0-1.25-.56-1.25-1.25v-1.5Z\"",
          "687:            />",
          "688:           </svg>",
          "689:          {/if}",
          "690:         </button>",
          "693:      </div>",
          "694:     {/if}",
          "695:    </div>",
          "697:    <div class=\"mb-3\">",
          "698:     <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Query')}</div>",
          "700:     <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "702:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "703:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Top K')}</div>",
          "704:      <div class=\"flex items-center relative\">",
          "705:       <input",
          "706:        class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "707:        type=\"number\"",
          "708:        placeholder={$i18n.t('Enter Top K')}",
          "709:        bind:value={querySettings.k}",
          "710:        autocomplete=\"off\"",
          "711:        min=\"0\"",
          "712:       />",
          "713:      </div>",
          "714:     </div>",
          "716:     {#if querySettings.hybrid === true}",
          "718:       <div class=\" flex w-full justify-between\">",
          "719:        <div class=\" self-center text-xs font-medium\">{$i18n.t('Minimum Score')}</div>",
          "720:        <div class=\"flex items-center relative\">",
          "721:         <input",
          "722:          class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "723:          type=\"number\"",
          "724:          step=\"0.01\"",
          "725:          placeholder={$i18n.t('Enter Score')}",
          "726:          bind:value={querySettings.r}",
          "727:          autocomplete=\"off\"",
          "728:          min=\"0.0\"",
          "729:          title={$i18n.t('The score should be a value between 0.0 (0%) and 1.0 (100%).')}",
          "731:        </div>",
          "732:       </div>",
          "733:       <div class=\"mt-1 text-xs text-gray-400 dark:text-gray-500\">",
          "734:        {$i18n.t(",
          "735:         'Note: If you set a minimum score, the search will only return documents with a score greater than or equal to the minimum score.'",
          "736:        )}",
          "739:     {/if}",
          "741:     <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "742:      <div class=\" mb-1 text-xs font-medium\">{$i18n.t('RAG Template')}</div>",
          "743:      <div class=\"flex w-full items-center relative\">",
          "744:       <Tooltip",
          "745:        content={$i18n.t('Leave empty to use the default prompt, or enter a custom prompt')}",
          "746:        placement=\"top-start\"",
          "747:        className=\"w-full\"",
          "748:       >",
          "749:        <Textarea",
          "750:         bind:value={querySettings.template}",
          "751:         placeholder={$i18n.t(",
          "752:          'Leave empty to use the default prompt, or enter a custom prompt'",
          "753:         )}",
          "754:        />",
          "755:       </Tooltip>",
          "756:      </div>",
          "758:    </div>",
          "",
          "[Added Lines]",
          "716:         </div>",
          "718:       </div>",
          "719:      {/if}",
          "722:     <div class=\"mb-3\">",
          "723:      <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Retrieval')}</div>",
          "725:      <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "727:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "728:       <div class=\" self-center text-xs font-medium\">{$i18n.t('Top K')}</div>",
          "729:       <div class=\"flex items-center relative\">",
          "731:         class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "733:         placeholder={$i18n.t('Enter Top K')}",
          "734:         bind:value={querySettings.k}",
          "735:         autocomplete=\"off\"",
          "736:         min=\"0\"",
          "741:      {#if querySettings.hybrid === true}",
          "742:       <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "743:        <div class=\" flex w-full justify-between\">",
          "744:         <div class=\" self-center text-xs font-medium\">{$i18n.t('Minimum Score')}</div>",
          "745:         <div class=\"flex items-center relative\">",
          "748:           type=\"number\"",
          "749:           step=\"0.01\"",
          "750:           placeholder={$i18n.t('Enter Score')}",
          "751:           bind:value={querySettings.r}",
          "752:           autocomplete=\"off\"",
          "753:           min=\"0.0\"",
          "754:           title={$i18n.t('The score should be a value between 0.0 (0%) and 1.0 (100%).')}",
          "757:        </div>",
          "758:        <div class=\"mt-1 text-xs text-gray-400 dark:text-gray-500\">",
          "759:         {$i18n.t(",
          "760:          'Note: If you set a minimum score, the search will only return documents with a score greater than or equal to the minimum score.'",
          "761:         )}",
          "764:      {/if}",
          "767:       <div class=\" mb-1 text-xs font-medium\">{$i18n.t('RAG Template')}</div>",
          "768:       <div class=\"flex w-full items-center relative\">",
          "769:        <Tooltip",
          "770:         content={$i18n.t('Leave empty to use the default prompt, or enter a custom prompt')}",
          "771:         placement=\"top-start\"",
          "772:         className=\"w-full\"",
          "773:        >",
          "774:         <Textarea",
          "775:          bind:value={querySettings.template}",
          "776:          placeholder={$i18n.t(",
          "777:           'Leave empty to use the default prompt, or enter a custom prompt'",
          "778:          )}",
          "780:        </Tooltip>",
          "784:    {/if}",
          "",
          "---------------"
        ],
        "src/lib/components/admin/Settings/WebSearch.svelte||src/lib/components/admin/Settings/WebSearch.svelte": [
          "File: src/lib/components/admin/Settings/WebSearch.svelte -> src/lib/components/admin/Settings/WebSearch.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:     </div>",
          "120:     <div class=\" py-0.5 flex w-full justify-between\">",
          "122:      <div class=\"flex items-center relative\">",
          "123:       <Tooltip",
          "126:         : 'Default to segmented retrieval for focused and relevant content extraction, this is recommended for most cases.'}",
          "127:       >",
          "129:       </Tooltip>",
          "130:      </div>",
          "131:     </div>",
          "",
          "[Removed Lines]",
          "121:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Full Context Mode')}</div>",
          "124:        content={webConfig.RAG_WEB_SEARCH_FULL_CONTEXT",
          "125:         ? 'Inject the entire web results as context for comprehensive processing, this is recommended for complex queries.'",
          "128:        <Switch bind:state={webConfig.RAG_WEB_SEARCH_FULL_CONTEXT} />",
          "",
          "[Added Lines]",
          "121:      <div class=\" self-center text-xs font-medium\">",
          "122:       <Tooltip content={$i18n.t('Full Context Mode')} placement=\"top-start\">",
          "123:        {$i18n.t('Bypass Embedding and Retrieval')}",
          "124:       </Tooltip>",
          "125:      </div>",
          "128:        content={webConfig.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL",
          "129:         ? 'Inject the entire content as context for comprehensive processing, this is recommended for complex queries.'",
          "132:        <Switch bind:state={webConfig.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL} />",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages/Citations.svelte||src/lib/components/chat/Messages/Citations.svelte": [
          "File: src/lib/components/chat/Messages/Citations.svelte -> src/lib/components/chat/Messages/Citations.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:  }",
          "45:  $: {",
          "46:   citations = sources.reduce((acc, source) => {",
          "47:    if (Object.keys(source).length === 0) {",
          "48:     return acc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:   console.log('sources', sources);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:     const distance = source.distances?.[index];",
          "57:     let _source = source?.source;",
          "59:     if (metadata?.name) {",
          "",
          "[Removed Lines]",
          "56:     const id = metadata?.source ?? 'N/A';",
          "",
          "[Added Lines]",
          "57:     const id = metadata?.source ?? source?.source?.id ?? 'N/A';",
          "",
          "---------------"
        ],
        "src/lib/components/common/FileItemModal.svelte||src/lib/components/common/FileItemModal.svelte": [
          "File: src/lib/components/common/FileItemModal.svelte -> src/lib/components/common/FileItemModal.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:       <div>",
          "88:        <Tooltip",
          "89:         content={enableFullContent",
          "91:          : 'Default to segmented retrieval for focused and relevant content extraction, this is recommended for most cases.'}",
          "92:        >",
          "93:         <div class=\"flex items-center gap-1.5 text-xs\">",
          "",
          "[Removed Lines]",
          "90:          ? 'Inject the entire document as context for comprehensive processing, this is recommended for complex queries.'",
          "",
          "[Added Lines]",
          "90:          ? 'Inject the entire content as context for comprehensive processing, this is recommended for complex queries.'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9bada6421e0e2f06a396ffbec501471aed3cc81f",
      "candidate_info": {
        "commit_hash": "9bada6421e0e2f06a396ffbec501471aed3cc81f",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/9bada6421e0e2f06a396ffbec501471aed3cc81f",
        "files": [
          "src/lib/components/chat/Messages/CodeBlock.svelte"
        ],
        "message": "refac: code block image styling",
        "before_after_code_files": [
          "src/lib/components/chat/Messages/CodeBlock.svelte||src/lib/components/chat/Messages/CodeBlock.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Messages/CodeBlock.svelte||src/lib/components/chat/Messages/CodeBlock.svelte": [
          "File: src/lib/components/chat/Messages/CodeBlock.svelte -> src/lib/components/chat/Messages/CodeBlock.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "514:          <div class=\"flex flex-col gap-2\">",
          "515:           {#each files as file}",
          "516:            {#if file.type.startsWith('image')}",
          "518:            {/if}",
          "519:           {/each}",
          "520:          </div>",
          "",
          "[Removed Lines]",
          "517:             <img src={file.data} alt=\"Output\" />",
          "",
          "[Added Lines]",
          "517:             <img src={file.data} alt=\"Output\" class=\" w-full max-w-[36rem]\" />",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da8c42ee497eae02a6baa3f3b96ad8690578044b",
      "candidate_info": {
        "commit_hash": "da8c42ee497eae02a6baa3f3b96ad8690578044b",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/da8c42ee497eae02a6baa3f3b96ad8690578044b",
        "files": [
          "src/lib/components/admin/Settings/Models/ConfigureModelsModal.svelte",
          "src/lib/components/admin/Settings/Models/ModelList.svelte"
        ],
        "message": "feat: Sort models by name in ascending/descending order\n\nCo-Authored-By: silentoplayz <50341825+silentoplayz@users.noreply.github.com>",
        "before_after_code_files": [
          "src/lib/components/admin/Settings/Models/ConfigureModelsModal.svelte||src/lib/components/admin/Settings/Models/ConfigureModelsModal.svelte",
          "src/lib/components/admin/Settings/Models/ModelList.svelte||src/lib/components/admin/Settings/Models/ModelList.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Settings/Models/ConfigureModelsModal.svelte||src/lib/components/admin/Settings/Models/ConfigureModelsModal.svelte": [
          "File: src/lib/components/admin/Settings/Models/ConfigureModelsModal.svelte -> src/lib/components/admin/Settings/Models/ConfigureModelsModal.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  import Spinner from '$lib/components/common/Spinner.svelte';",
          "17:  import Minus from '$lib/components/icons/Minus.svelte';",
          "18:  import Plus from '$lib/components/icons/Plus.svelte';",
          "20:  export let show = false;",
          "21:  export let initHandler = () => {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  import ChevronUp from '$lib/components/icons/ChevronUp.svelte';",
          "20:  import ChevronDown from '$lib/components/icons/ChevronDown.svelte';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:  let defaultModelIds = [];",
          "27:  let modelIds = [];",
          "29:  let loading = false;",
          "30:  let showResetModal = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:  let sortKey = '';",
          "32:  let sortOrder = '';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:    ...allModelIds.filter((id) => !orderedSet.has(id)).sort((a, b) => a.localeCompare(b))",
          "73:   ];",
          "74:  };",
          "75:  const submitHandler = async () => {",
          "76:   loading = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   sortKey = '';",
          "81:   sortOrder = '';",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "145:      >",
          "146:       <div>",
          "147:        <div class=\"flex flex-col w-full\">",
          "149:          <div class=\"text-xs text-gray-500\">{$i18n.t('Reorder Models')}</div>",
          "152:         <ModelList bind:modelIds />",
          "153:        </div>",
          "",
          "[Removed Lines]",
          "148:         <div class=\"mb-1 flex justify-between\">",
          "150:         </div>",
          "",
          "[Added Lines]",
          "156:         <button",
          "157:          class=\"mb-1 flex gap-2\"",
          "158:          type=\"button\"",
          "159:          on:click={() => {",
          "160:           sortKey = 'model';",
          "162:           if (sortOrder === 'asc') {",
          "163:            sortOrder = 'desc';",
          "164:           } else {",
          "165:            sortOrder = 'asc';",
          "166:           }",
          "168:           modelIds = modelIds",
          "169:            .filter((id) => id !== '')",
          "170:            .sort((a, b) => {",
          "171:             const nameA = $models.find((model) => model.id === a)?.name || a;",
          "172:             const nameB = $models.find((model) => model.id === b)?.name || b;",
          "173:             return sortOrder === 'desc'",
          "174:              ? nameA.localeCompare(nameB)",
          "175:              : nameB.localeCompare(nameA);",
          "176:            });",
          "177:          }}",
          "178:         >",
          "181:          {#if sortKey === 'model'}",
          "182:           <span class=\"font-normal self-center\">",
          "183:            {#if sortOrder === 'asc'}",
          "184:             <ChevronUp className=\"size-3\" />",
          "185:            {:else}",
          "186:             <ChevronDown className=\"size-3\" />",
          "187:            {/if}",
          "188:           </span>",
          "189:          {:else}",
          "190:           <span class=\"invisible\">",
          "191:            <ChevronUp className=\"size-3\" />",
          "192:           </span>",
          "193:          {/if}",
          "194:         </button>",
          "",
          "---------------"
        ],
        "src/lib/components/admin/Settings/Models/ModelList.svelte||src/lib/components/admin/Settings/Models/ModelList.svelte": [
          "File: src/lib/components/admin/Settings/Models/ModelList.svelte -> src/lib/components/admin/Settings/Models/ModelList.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:   modelIds = modelList;",
          "22:  };",
          "32: </script>",
          "34: {#if modelIds.length > 0}",
          "",
          "[Removed Lines]",
          "24:  onMount(() => {",
          "25:   sortable = Sortable.create(modelListElement, {",
          "26:    animation: 150,",
          "27:    onUpdate: async (event) => {",
          "28:     positionChangeHandler();",
          "29:    }",
          "30:   });",
          "31:  });",
          "",
          "[Added Lines]",
          "24:  $: if (modelIds) {",
          "25:   init();",
          "26:  }",
          "28:  const init = () => {",
          "29:   if (sortable) {",
          "30:    sortable.destroy();",
          "31:   }",
          "33:   if (modelListElement) {",
          "34:    sortable = Sortable.create(modelListElement, {",
          "35:     animation: 150,",
          "36:     onUpdate: async (event) => {",
          "37:      positionChangeHandler();",
          "38:     }",
          "39:    });",
          "40:   }",
          "41:  };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddb30589e355eac6c485b3410466ca13e5365ff9",
      "candidate_info": {
        "commit_hash": "ddb30589e355eac6c485b3410466ca13e5365ff9",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/ddb30589e355eac6c485b3410466ca13e5365ff9",
        "files": [
          "backend/open_webui/models/chats.py",
          "backend/open_webui/models/functions.py",
          "backend/open_webui/models/tools.py",
          "backend/open_webui/retrieval/vector/dbs/milvus.py",
          "backend/open_webui/retrieval/vector/dbs/pgvector.py",
          "backend/open_webui/routers/auths.py",
          "backend/open_webui/routers/utils.py",
          "backend/open_webui/utils/auth.py",
          "backend/open_webui/utils/misc.py",
          "src/lib/i18n/locales/ar-BH/translation.json",
          "src/lib/i18n/locales/bg-BG/translation.json",
          "src/lib/i18n/locales/bn-BD/translation.json",
          "src/lib/i18n/locales/ca-ES/translation.json",
          "src/lib/i18n/locales/ceb-PH/translation.json",
          "src/lib/i18n/locales/cs-CZ/translation.json",
          "src/lib/i18n/locales/da-DK/translation.json",
          "src/lib/i18n/locales/de-DE/translation.json",
          "src/lib/i18n/locales/dg-DG/translation.json",
          "src/lib/i18n/locales/el-GR/translation.json",
          "src/lib/i18n/locales/en-GB/translation.json",
          "src/lib/i18n/locales/en-US/translation.json",
          "src/lib/i18n/locales/es-ES/translation.json",
          "src/lib/i18n/locales/eu-ES/translation.json",
          "src/lib/i18n/locales/fa-IR/translation.json",
          "src/lib/i18n/locales/fi-FI/translation.json",
          "src/lib/i18n/locales/fr-CA/translation.json",
          "src/lib/i18n/locales/fr-FR/translation.json",
          "src/lib/i18n/locales/he-IL/translation.json",
          "src/lib/i18n/locales/hi-IN/translation.json",
          "src/lib/i18n/locales/hr-HR/translation.json",
          "src/lib/i18n/locales/hu-HU/translation.json",
          "src/lib/i18n/locales/id-ID/translation.json",
          "src/lib/i18n/locales/ie-GA/translation.json",
          "src/lib/i18n/locales/it-IT/translation.json",
          "src/lib/i18n/locales/ja-JP/translation.json",
          "src/lib/i18n/locales/ka-GE/translation.json",
          "src/lib/i18n/locales/ko-KR/translation.json",
          "src/lib/i18n/locales/lt-LT/translation.json",
          "src/lib/i18n/locales/ms-MY/translation.json",
          "src/lib/i18n/locales/nb-NO/translation.json",
          "src/lib/i18n/locales/nl-NL/translation.json",
          "src/lib/i18n/locales/pa-IN/translation.json",
          "src/lib/i18n/locales/pl-PL/translation.json",
          "src/lib/i18n/locales/pt-BR/translation.json",
          "src/lib/i18n/locales/pt-PT/translation.json",
          "src/lib/i18n/locales/ro-RO/translation.json",
          "src/lib/i18n/locales/ru-RU/translation.json",
          "src/lib/i18n/locales/sk-SK/translation.json",
          "src/lib/i18n/locales/sr-RS/translation.json",
          "src/lib/i18n/locales/sv-SE/translation.json",
          "src/lib/i18n/locales/th-TH/translation.json",
          "src/lib/i18n/locales/tk-TW/translation.json",
          "src/lib/i18n/locales/tr-TR/translation.json",
          "src/lib/i18n/locales/uk-UA/translation.json",
          "src/lib/i18n/locales/ur-PK/translation.json",
          "src/lib/i18n/locales/vi-VN/translation.json",
          "src/lib/i18n/locales/zh-CN/translation.json",
          "src/lib/i18n/locales/zh-TW/translation.json"
        ],
        "message": "chore: format\n\nHIDE MODELS",
        "before_after_code_files": [
          "backend/open_webui/models/chats.py||backend/open_webui/models/chats.py",
          "backend/open_webui/models/functions.py||backend/open_webui/models/functions.py",
          "backend/open_webui/models/tools.py||backend/open_webui/models/tools.py",
          "backend/open_webui/retrieval/vector/dbs/milvus.py||backend/open_webui/retrieval/vector/dbs/milvus.py",
          "backend/open_webui/retrieval/vector/dbs/pgvector.py||backend/open_webui/retrieval/vector/dbs/pgvector.py",
          "backend/open_webui/routers/auths.py||backend/open_webui/routers/auths.py",
          "backend/open_webui/routers/utils.py||backend/open_webui/routers/utils.py",
          "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py",
          "backend/open_webui/utils/misc.py||backend/open_webui/utils/misc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/models/chats.py||backend/open_webui/models/chats.py": [
          "File: backend/open_webui/models/chats.py -> backend/open_webui/models/chats.py"
        ],
        "backend/open_webui/models/functions.py||backend/open_webui/models/functions.py": [
          "File: backend/open_webui/models/functions.py -> backend/open_webui/models/functions.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:             return user_settings[\"functions\"][\"valves\"].get(id, {})",
          "204:         except Exception as e:",
          "206:             return None",
          "208:     def update_user_valves_by_id_and_user_id(",
          "",
          "[Removed Lines]",
          "205:             log.exception(f\"Error getting user values by id {id} and user id {user_id}: {e}\")",
          "",
          "[Added Lines]",
          "205:             log.exception(",
          "206:                 f\"Error getting user values by id {id} and user id {user_id}: {e}\"",
          "207:             )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:             return user_settings[\"functions\"][\"valves\"][id]",
          "227:         except Exception as e:",
          "229:             return None",
          "231:     def update_function_by_id(self, id: str, updated: dict) -> Optional[FunctionModel]:",
          "",
          "[Removed Lines]",
          "228:             log.exception(f\"Error updating user valves by id {id} and user_id {user_id}: {e}\")",
          "",
          "[Added Lines]",
          "230:             log.exception(",
          "231:                 f\"Error updating user valves by id {id} and user_id {user_id}: {e}\"",
          "232:             )",
          "",
          "---------------"
        ],
        "backend/open_webui/models/tools.py||backend/open_webui/models/tools.py": [
          "File: backend/open_webui/models/tools.py -> backend/open_webui/models/tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:             return user_settings[\"tools\"][\"valves\"].get(id, {})",
          "206:         except Exception as e:",
          "208:             return None",
          "210:     def update_user_valves_by_id_and_user_id(",
          "",
          "[Removed Lines]",
          "207:             log.exception(f\"Error getting user values by id {id} and user_id {user_id}: {e}\")",
          "",
          "[Added Lines]",
          "207:             log.exception(",
          "208:                 f\"Error getting user values by id {id} and user_id {user_id}: {e}\"",
          "209:             )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:             return user_settings[\"tools\"][\"valves\"][id]",
          "229:         except Exception as e:",
          "231:             return None",
          "233:     def update_tool_by_id(self, id: str, updated: dict) -> Optional[ToolModel]:",
          "",
          "[Removed Lines]",
          "230:             log.exception(f\"Error updating user valves by id {id} and user_id {user_id}: {e}\")",
          "",
          "[Added Lines]",
          "232:             log.exception(",
          "233:                 f\"Error updating user valves by id {id} and user_id {user_id}: {e}\"",
          "234:             )",
          "",
          "---------------"
        ],
        "backend/open_webui/retrieval/vector/dbs/milvus.py||backend/open_webui/retrieval/vector/dbs/milvus.py": [
          "File: backend/open_webui/retrieval/vector/dbs/milvus.py -> backend/open_webui/retrieval/vector/dbs/milvus.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:             log.debug(all_results)",
          "203:             return self._result_to_get_result([all_results])",
          "204:         except Exception as e:",
          "206:             return None",
          "208:     def get(self, collection_name: str) -> Optional[GetResult]:",
          "",
          "[Removed Lines]",
          "205:             log.exception(f\"Error querying collection {collection_name} with limit {limit}: {e}\")",
          "",
          "[Added Lines]",
          "205:             log.exception(",
          "206:                 f\"Error querying collection {collection_name} with limit {limit}: {e}\"",
          "207:             )",
          "",
          "---------------"
        ],
        "backend/open_webui/retrieval/vector/dbs/pgvector.py||backend/open_webui/retrieval/vector/dbs/pgvector.py": [
          "File: backend/open_webui/retrieval/vector/dbs/pgvector.py -> backend/open_webui/retrieval/vector/dbs/pgvector.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:                     )",
          "191:                     self.session.add(new_chunk)",
          "192:             self.session.commit()",
          "194:         except Exception as e:",
          "195:             self.session.rollback()",
          "196:             log.exception(f\"Error during upsert: {e}\")",
          "",
          "[Removed Lines]",
          "193:             log.info(f\"Upserted {len(items)} items into collection '{collection_name}'.\")",
          "",
          "[Added Lines]",
          "193:             log.info(",
          "194:                 f\"Upserted {len(items)} items into collection '{collection_name}'.\"",
          "195:             )",
          "",
          "---------------"
        ],
        "backend/open_webui/routers/auths.py||backend/open_webui/routers/auths.py": [
          "File: backend/open_webui/routers/auths.py -> backend/open_webui/routers/auths.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: )",
          "32: from fastapi import APIRouter, Depends, HTTPException, Request, status",
          "33: from fastapi.responses import RedirectResponse, Response",
          "39: from pydantic import BaseModel",
          "40: from open_webui.utils.misc import parse_duration, validate_email_format",
          "41: from open_webui.utils.auth import (",
          "",
          "[Removed Lines]",
          "34: from open_webui.config import (",
          "35:     OPENID_PROVIDER_URL,",
          "36:     ENABLE_OAUTH_SIGNUP,",
          "37:     ENABLE_LDAP",
          "38: )",
          "",
          "[Added Lines]",
          "34: from open_webui.config import OPENID_PROVIDER_URL, ENABLE_OAUTH_SIGNUP, ENABLE_LDAP",
          "",
          "---------------"
        ],
        "backend/open_webui/routers/utils.py||backend/open_webui/routers/utils.py": [
          "File: backend/open_webui/routers/utils.py -> backend/open_webui/routers/utils.py"
        ],
        "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py": [
          "File: backend/open_webui/utils/auth.py -> backend/open_webui/utils/auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: from open_webui.models.users import Users",
          "16: from open_webui.constants import ERROR_MESSAGES",
          "19: from fastapi import BackgroundTasks, Depends, HTTPException, Request, Response, status",
          "20: from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer",
          "",
          "[Removed Lines]",
          "17: from open_webui.env import WEBUI_SECRET_KEY, TRUSTED_SIGNATURE_KEY, STATIC_DIR, SRC_LOG_LEVELS",
          "",
          "[Added Lines]",
          "17: from open_webui.env import (",
          "18:     WEBUI_SECRET_KEY,",
          "19:     TRUSTED_SIGNATURE_KEY,",
          "20:     STATIC_DIR,",
          "21:     SRC_LOG_LEVELS,",
          "22: )",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/misc.py||backend/open_webui/utils/misc.py": [
          "File: backend/open_webui/utils/misc.py -> backend/open_webui/utils/misc.py"
        ]
      }
    }
  ]
}