{
  "cve_id": "CVE-2024-56513",
  "cve_desc": "Karmada is a Kubernetes management system that allows users to run cloud-native applications across multiple Kubernetes clusters and clouds. Prior to version 1.12.0, the PULL mode clusters registered with the `karmadactl register` command have excessive privileges to access control plane resources. By abusing these permissions, an attacker able to authenticate as the karmada-agent to a karmada cluster would be able to obtain administrative privileges over the entire federation system including all registered member clusters. Since Karmada v1.12.0, command `karmadactl register` restricts the access permissions of pull mode member clusters to control plane resources. This way, an attacker able to authenticate as the karmada-agent cannot control other member clusters in Karmada. As a workaround, one may restrict the access permissions of pull mode member clusters to control plane resources according to Karmada Component Permissions Docs.",
  "repo": "karmada-io/karmada",
  "patch_hash": "2c82055c4c7f469411b1ba48c4dba4841df04831",
  "patch_info": {
    "commit_hash": "2c82055c4c7f469411b1ba48c4dba4841df04831",
    "repo": "karmada-io/karmada",
    "commit_url": "https://github.com/karmada-io/karmada/commit/2c82055c4c7f469411b1ba48c4dba4841df04831",
    "files": [
      "artifacts/deploy/bootstrap-token-configuration.yaml",
      "charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl",
      "pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go",
      "pkg/karmadactl/cmdinit/karmada/deploy.go",
      "pkg/karmadactl/cmdinit/karmada/rbac.go",
      "pkg/karmadactl/cmdinit/karmada/rbac_test.go",
      "pkg/karmadactl/register/register.go",
      "pkg/karmadactl/unregister/unregister.go",
      "pkg/karmadactl/unregister/unregister_test.go",
      "pkg/karmadactl/util/work.go",
      "pkg/util/rbac.go"
    ],
    "message": "Merge pull request #5793 from zhzhuang-zju/register\n\nminimize the RBAC permissions for the pull mode cluster",
    "before_after_code_files": [
      "charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl||charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl",
      "pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go||pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go",
      "pkg/karmadactl/cmdinit/karmada/deploy.go||pkg/karmadactl/cmdinit/karmada/deploy.go",
      "pkg/karmadactl/cmdinit/karmada/rbac.go||pkg/karmadactl/cmdinit/karmada/rbac.go",
      "pkg/karmadactl/cmdinit/karmada/rbac_test.go||pkg/karmadactl/cmdinit/karmada/rbac_test.go",
      "pkg/karmadactl/register/register.go||pkg/karmadactl/register/register.go",
      "pkg/karmadactl/unregister/unregister.go||pkg/karmadactl/unregister/unregister.go",
      "pkg/karmadactl/unregister/unregister_test.go||pkg/karmadactl/unregister/unregister_test.go",
      "pkg/karmadactl/util/work.go||pkg/karmadactl/util/work.go",
      "pkg/util/rbac.go||pkg/util/rbac.go"
    ]
  },
  "patch_diff": {
    "charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl||charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl": [
      "File: charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl -> charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:   name: system:bootstrappers:karmada:default-cluster-token",
      "76: ---",
      "77: apiVersion: rbac.authorization.k8s.io/v1",
      "78: kind: ClusterRoleBinding",
      "79: metadata:",
      "80:   name: system:karmada:agent-autoapprove-bootstrap",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78: kind: ClusterRole",
      "79: metadata:",
      "80:   name: system:karmada:certificatesigningrequest:autoapprover",
      "81:   {{- if \"karmada.commonLabels\" }}",
      "82:   labels:",
      "83:     {{- include \"karmada.commonLabels\" . | nindent 4 }}",
      "84:   {{- end }}",
      "85: rules:",
      "86: - apiGroups:",
      "87:   - certificates.k8s.io",
      "88:   resources:",
      "89:   - certificatesigningrequests/clusteragent",
      "90:   verbs:",
      "91:   - create",
      "92: ---",
      "93: apiVersion: rbac.authorization.k8s.io/v1",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85: roleRef:",
      "86:   apiGroup: rbac.authorization.k8s.io",
      "87:   kind: ClusterRole",
      "89: subjects:",
      "90: - apiGroup: rbac.authorization.k8s.io",
      "91:   kind: Group",
      "92:   name: system:bootstrappers:karmada:default-cluster-token",
      "93: ---",
      "94: apiVersion: rbac.authorization.k8s.io/v1",
      "95: kind: ClusterRoleBinding",
      "96: metadata:",
      "97:   name: system:karmada:agent-autoapprove-certificate-rotation",
      "",
      "[Removed Lines]",
      "88:   name: system:certificates.k8s.io:certificatesigningrequests:nodeclient",
      "",
      "[Added Lines]",
      "104:   name: system:karmada:certificatesigningrequest:autoapprover",
      "111: kind: ClusterRole",
      "112: metadata:",
      "113:   name: system:karmada:certificatesigningrequest:selfautoapprover",
      "114:   {{- if \"karmada.commonLabels\" }}",
      "115:   labels:",
      "116:     {{- include \"karmada.commonLabels\" . | nindent 4 }}",
      "117:   {{- end }}",
      "118: rules:",
      "119: - apiGroups:",
      "120:   - certificates.k8s.io",
      "121:   resources:",
      "122:   - certificatesigningrequests/selfclusteragent",
      "123:   verbs:",
      "124:   - create",
      "125: ---",
      "126: apiVersion: rbac.authorization.k8s.io/v1",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "102: roleRef:",
      "103:   apiGroup: rbac.authorization.k8s.io",
      "104:   kind: ClusterRole",
      "106: subjects:",
      "107: - apiGroup: rbac.authorization.k8s.io",
      "108:   kind: Group",
      "110: ---",
      "111: apiVersion: rbac.authorization.k8s.io/v1",
      "112: kind: ClusterRole",
      "113: metadata:",
      "115:   {{- if \"karmada.commonLabels\" }}",
      "116:   labels:",
      "117:     {{- include \"karmada.commonLabels\" . | nindent 4 }}",
      "118:   {{- end }}",
      "119: rules:",
      "120: - apiGroups:",
      "147:   resources:",
      "149:   verbs:",
      "218: ---",
      "219: apiVersion: rbac.authorization.k8s.io/v1",
      "220: kind: ClusterRoleBinding",
      "221: metadata:",
      "223:   {{- if \"karmada.commonLabels\" }}",
      "224:   labels:",
      "225:     {{- include \"karmada.commonLabels\" . | nindent 4 }}",
      "",
      "[Removed Lines]",
      "105:   name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient",
      "109:   name: system:nodes",
      "114:   name: system:karmada:agent",
      "121:   - authentication.k8s.io",
      "122:   resources:",
      "123:   - tokenreviews",
      "124:   verbs:",
      "125:   - create",
      "126: - apiGroups:",
      "127:   - cluster.karmada.io",
      "128:   resources:",
      "129:   - clusters",
      "130:   verbs:",
      "131:   - create",
      "132:   - get",
      "133:   - list",
      "134:   - watch",
      "135:   - patch",
      "136:   - update",
      "137:   - delete",
      "138: - apiGroups:",
      "139:   - cluster.karmada.io",
      "140:   resources:",
      "141:   - clusters/status",
      "142:   verbs:",
      "143:   - patch",
      "144:   - update",
      "145: - apiGroups:",
      "146:   - work.karmada.io",
      "148:   - works",
      "150:   - create",
      "151:   - get",
      "152:   - list",
      "153:   - watch",
      "154:   - update",
      "155:   - delete",
      "156: - apiGroups:",
      "157:   - work.karmada.io",
      "158:   resources:",
      "159:   - works/status",
      "160:   verbs:",
      "161:   - patch",
      "162:   - update",
      "163: - apiGroups:",
      "164:   - config.karmada.io",
      "165:   resources:",
      "166:   - resourceinterpreterwebhookconfigurations",
      "167:   - resourceinterpretercustomizations",
      "168:   verbs:",
      "169:   - get",
      "170:   - list",
      "171:   - watch",
      "172: - apiGroups:",
      "173:   - \"\"",
      "174:   resources:",
      "175:   - namespaces",
      "176:   verbs:",
      "177:   - get",
      "178:   - list",
      "179:   - watch",
      "180:   - create",
      "181: - apiGroups:",
      "182:   - \"\"",
      "183:   resources:",
      "184:   - secrets",
      "185:   verbs:",
      "186:   - get",
      "187:   - list",
      "188:   - watch",
      "189:   - create",
      "190:   - patch",
      "191: - apiGroups:",
      "192:   - coordination.k8s.io",
      "193:   resources:",
      "194:   - leases",
      "195:   verbs:",
      "196:   - create",
      "197:   - delete",
      "198:   - get",
      "199:   - patch",
      "200:   - update",
      "201: - apiGroups:",
      "202:   - certificates.k8s.io",
      "203:   resources:",
      "204:   - certificatesigningrequests",
      "205:   verbs:",
      "206:   - create",
      "207:   - get",
      "208:   - list",
      "209:   - watch",
      "210: - apiGroups:",
      "211:   - \"\"",
      "212:   resources:",
      "213:   - events",
      "214:   verbs:",
      "215:   - create",
      "216:   - patch",
      "217:   - update",
      "222:   name: system:karmada:agent",
      "",
      "[Added Lines]",
      "137:   name: system:karmada:certificatesigningrequest:selfautoapprover",
      "141:   name: system:karmada:agents",
      "146:   name: system:karmada:agent-rbac-generator",
      "153:   - \"*\"",
      "155:   - \"*\"",
      "157:   - \"*\"",
      "162:   name: system:karmada:agent-rbac-generator",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "227: roleRef:",
      "228:   apiGroup: rbac.authorization.k8s.io",
      "229:   kind: ClusterRole",
      "231: subjects:",
      "232: - apiGroup: rbac.authorization.k8s.io",
      "235: {{- end -}}",
      "",
      "[Removed Lines]",
      "230:   name: system:karmada:agent",
      "233:   kind: Group",
      "234:   name: system:nodes",
      "",
      "[Added Lines]",
      "170:   name: system:karmada:agent-rbac-generator",
      "173:   kind: User",
      "174:   name: system:karmada:agent:rbac-generator",
      "",
      "---------------"
    ],
    "pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go||pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go": [
      "File: pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go -> pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  KarmadaAgentBootstrap = \"system:karmada:agent-bootstrap\"",
      "36:  KarmadaAgentAutoApproveBootstrapClusterRoleBinding = \"system:karmada:agent-autoapprove-bootstrap\"",
      "38:  KarmadaAgentAutoApproveCertificateRotationClusterRoleBinding = \"system:karmada:agent-autoapprove-certificate-rotation\"",
      "44:  KarmadaAgentBootstrapTokenAuthGroup = \"system:bootstrappers:karmada:default-cluster-token\"",
      "45: )",
      "",
      "[Removed Lines]",
      "34:  KarmadaAgentGroup = \"system:nodes\"",
      "40:  CSRAutoApprovalClusterRoleName = \"system:certificates.k8s.io:certificatesigningrequests:nodeclient\"",
      "42:  KarmadaAgentSelfCSRAutoApprovalClusterRoleName = \"system:certificates.k8s.io:certificatesigningrequests:selfnodeclient\"",
      "",
      "[Added Lines]",
      "34:  KarmadaAgentGroup = \"system:karmada:agents\"",
      "40:  CSRAutoApprovalClusterRoleName = \"system:karmada:certificatesigningrequest:autoapprover\"",
      "42:  KarmadaAgentSelfCSRAutoApprovalClusterRoleName = \"system:karmada:certificatesigningrequest:selfautoapprover\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "62: func AutoApproveKarmadaAgentBootstrapTokens(clientSet kubernetes.Interface) error {",
      "65:  clusterRoleBinding := utils.ClusterRoleBindingFromSubjects(KarmadaAgentAutoApproveBootstrapClusterRoleBinding, CSRAutoApprovalClusterRoleName,",
      "66:   []rbacv1.Subject{",
      "",
      "[Removed Lines]",
      "63:  klog.Infoln(\"[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Karmada Agent Bootstrap Token\")",
      "",
      "[Added Lines]",
      "63:  klog.Infoln(\"[bootstrap-token] configured RBAC rules to allow the agentcsrapproving controller automatically approve CSRs from a Karmada Agent Bootstrap Token\")",
      "64:  csrAutoApprovalClusterRole := utils.ClusterRoleFromRules(CSRAutoApprovalClusterRoleName, []rbacv1.PolicyRule{",
      "65:   {",
      "66:    APIGroups: []string{\"certificates.k8s.io\"},",
      "67:    Resources: []string{\"certificatesigningrequests/clusteragent\"},",
      "68:    Verbs:     []string{\"create\"},",
      "69:   },",
      "70:  }, nil, nil)",
      "71:  err := cmdutil.CreateOrUpdateClusterRole(clientSet, csrAutoApprovalClusterRole)",
      "72:  if err != nil {",
      "73:   return err",
      "74:  }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76: func AutoApproveAgentCertificateRotation(clientSet kubernetes.Interface) error {",
      "77:  klog.Infoln(\"[bootstrap-token] configured RBAC rules to allow certificate rotation for all agent client certificates in the member cluster\")",
      "79:  clusterRoleBinding := utils.ClusterRoleBindingFromSubjects(KarmadaAgentAutoApproveCertificateRotationClusterRoleBinding, KarmadaAgentSelfCSRAutoApprovalClusterRoleName,",
      "80:   []rbacv1.Subject{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "89:  karmadaAgentSelfCSRAutoApprovalClusterRole := utils.ClusterRoleFromRules(KarmadaAgentSelfCSRAutoApprovalClusterRoleName, []rbacv1.PolicyRule{",
      "90:   {",
      "91:    APIGroups: []string{\"certificates.k8s.io\"},",
      "92:    Resources: []string{\"certificatesigningrequests/selfclusteragent\"},",
      "93:    Verbs:     []string{\"create\"},",
      "94:   },",
      "95:  }, nil, nil)",
      "96:  err := cmdutil.CreateOrUpdateClusterRole(clientSet, karmadaAgentSelfCSRAutoApprovalClusterRole)",
      "97:  if err != nil {",
      "98:   return err",
      "99:  }",
      "",
      "---------------"
    ],
    "pkg/karmadactl/cmdinit/karmada/deploy.go||pkg/karmadactl/cmdinit/karmada/deploy.go": [
      "File: pkg/karmadactl/cmdinit/karmada/deploy.go -> pkg/karmadactl/cmdinit/karmada/deploy.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "185:   return fmt.Errorf(\"error creating clusterinfo RBAC rules: %v\", err)",
      "186:  }",
      "190:   return err",
      "191:  }",
      "",
      "[Removed Lines]",
      "189:  if err := grantAccessPermissionToAgent(clientSet); err != nil {",
      "",
      "[Added Lines]",
      "189:  if err := grantAccessPermissionToAgentRBACGenerator(clientSet); err != nil {",
      "",
      "---------------"
    ],
    "pkg/karmadactl/cmdinit/karmada/rbac.go||pkg/karmadactl/cmdinit/karmada/rbac.go": [
      "File: pkg/karmadactl/cmdinit/karmada/rbac.go -> pkg/karmadactl/cmdinit/karmada/rbac.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: )",
      "28: const (",
      "33: )",
      "",
      "[Removed Lines]",
      "29:  karmadaViewClusterRole        = \"karmada-view\"",
      "30:  karmadaEditClusterRole        = \"karmada-edit\"",
      "31:  karmadaAgentAccessClusterRole = \"system:karmada:agent\"",
      "32:  karmadaAgentGroup             = \"system:nodes\"",
      "",
      "[Added Lines]",
      "29:  karmadaViewClusterRole                      = \"karmada-view\"",
      "30:  karmadaEditClusterRole                      = \"karmada-edit\"",
      "31:  karmadaAgentRBACGeneratorClusterRole        = \"system:karmada:agent-rbac-generator\"",
      "32:  karmadaAgentRBACGeneratorClusterRoleBinding = \"system:karmada:agent-rbac-generator\"",
      "33:  agentRBACGenerator                          = \"system:karmada:agent:rbac-generator\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "62:  return nil",
      "63: }",
      "68:   {",
      "122:   },",
      "123:  }, nil, nil)",
      "124:  err := cmdutil.CreateOrUpdateClusterRole(clientSet, clusterRole)",
      "",
      "[Removed Lines]",
      "66: func grantAccessPermissionToAgent(clientSet kubernetes.Interface) error {",
      "67:  clusterRole := utils.ClusterRoleFromRules(karmadaAgentAccessClusterRole, []rbacv1.PolicyRule{",
      "69:    APIGroups: []string{\"authentication.k8s.io\"},",
      "70:    Resources: []string{\"tokenreviews\"},",
      "71:    Verbs:     []string{\"create\"},",
      "72:   },",
      "73:   {",
      "74:    APIGroups: []string{\"cluster.karmada.io\"},",
      "75:    Resources: []string{\"clusters\"},",
      "76:    Verbs:     []string{\"create\", \"get\", \"list\", \"watch\", \"patch\", \"update\", \"delete\"},",
      "77:   },",
      "78:   {",
      "79:    APIGroups: []string{\"cluster.karmada.io\"},",
      "80:    Resources: []string{\"clusters/status\"},",
      "81:    Verbs:     []string{\"patch\", \"update\"},",
      "82:   },",
      "83:   {",
      "84:    APIGroups: []string{\"work.karmada.io\"},",
      "85:    Resources: []string{\"works\"},",
      "86:    Verbs:     []string{\"create\", \"get\", \"list\", \"watch\", \"update\", \"delete\"},",
      "87:   },",
      "88:   {",
      "89:    APIGroups: []string{\"work.karmada.io\"},",
      "90:    Resources: []string{\"works/status\"},",
      "91:    Verbs:     []string{\"patch\", \"update\"},",
      "92:   },",
      "93:   {",
      "94:    APIGroups: []string{\"config.karmada.io\"},",
      "95:    Resources: []string{\"resourceinterpreterwebhookconfigurations\", \"resourceinterpretercustomizations\"},",
      "96:    Verbs:     []string{\"get\", \"list\", \"watch\"},",
      "97:   },",
      "98:   {",
      "99:    APIGroups: []string{\"\"},",
      "100:    Resources: []string{\"namespaces\"},",
      "101:    Verbs:     []string{\"get\", \"list\", \"watch\", \"create\"},",
      "102:   },",
      "103:   {",
      "104:    APIGroups: []string{\"\"},",
      "105:    Resources: []string{\"secrets\"},",
      "106:    Verbs:     []string{\"get\", \"list\", \"watch\", \"create\", \"patch\"},",
      "107:   },",
      "108:   {",
      "109:    APIGroups: []string{\"coordination.k8s.io\"},",
      "110:    Resources: []string{\"leases\"},",
      "111:    Verbs:     []string{\"create\", \"delete\", \"get\", \"patch\", \"update\"},",
      "112:   },",
      "113:   {",
      "114:    APIGroups: []string{\"certificates.k8s.io\"},",
      "115:    Resources: []string{\"certificatesigningrequests\"},",
      "116:    Verbs:     []string{\"create\", \"get\", \"list\", \"watch\"},",
      "117:   },",
      "118:   {",
      "119:    APIGroups: []string{\"\"},",
      "120:    Resources: []string{\"events\"},",
      "121:    Verbs:     []string{\"create\", \"patch\", \"update\"},",
      "",
      "[Added Lines]",
      "67: func grantAccessPermissionToAgentRBACGenerator(clientSet kubernetes.Interface) error {",
      "68:  clusterRole := utils.ClusterRoleFromRules(karmadaAgentRBACGeneratorClusterRole, []rbacv1.PolicyRule{",
      "70:    APIGroups: []string{\"*\"},",
      "71:    Resources: []string{\"*\"},",
      "72:    Verbs:     []string{\"*\"},",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "126:   return err",
      "127:  }",
      "130:   []rbacv1.Subject{",
      "131:    {",
      "134:    }}, nil)",
      "137:  err = cmdutil.CreateOrUpdateClusterRoleBinding(clientSet, clusterRoleBinding)",
      "138:  if err != nil {",
      "139:   return err",
      "",
      "[Removed Lines]",
      "129:  clusterRoleBinding := utils.ClusterRoleBindingFromSubjects(karmadaAgentAccessClusterRole, karmadaAgentAccessClusterRole,",
      "132:     Kind: rbacv1.GroupKind,",
      "133:     Name: karmadaAgentGroup,",
      "136:  klog.V(1).Info(\"Grant the limited access permission to 'karmada-agent'\")",
      "",
      "[Added Lines]",
      "80:  clusterRoleBinding := utils.ClusterRoleBindingFromSubjects(karmadaAgentRBACGeneratorClusterRoleBinding, karmadaAgentRBACGeneratorClusterRole,",
      "83:     Kind: rbacv1.UserKind,",
      "84:     Name: agentRBACGenerator,",
      "87:  klog.V(1).Info(\"Grant the access permission to 'karmada-agent-rbac-generator'\")",
      "",
      "---------------"
    ],
    "pkg/karmadactl/cmdinit/karmada/rbac_test.go||pkg/karmadactl/cmdinit/karmada/rbac_test.go": [
      "File: pkg/karmadactl/cmdinit/karmada/rbac_test.go -> pkg/karmadactl/cmdinit/karmada/rbac_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: func Test_grantAccessPermissionToAgent(t *testing.T) {",
      "33:  client := fake.NewSimpleClientset()",
      "36:  }",
      "37: }",
      "",
      "[Removed Lines]",
      "34:  if err := grantAccessPermissionToAgent(client); err != nil {",
      "35:   t.Errorf(\"grantAccessPermissionToAgent() expected no error, but got err: %v\", err)",
      "",
      "[Added Lines]",
      "34:  if err := grantAccessPermissionToAgentRBACGenerator(client); err != nil {",
      "35:   t.Errorf(\"grantAccessPermissionToAgentRBACGenerator() expected no error, but got err: %v\", err)",
      "",
      "---------------"
    ],
    "pkg/karmadactl/register/register.go||pkg/karmadactl/register/register.go": [
      "File: pkg/karmadactl/register/register.go -> pkg/karmadactl/register/register.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:  \"github.com/karmada-io/karmada/pkg/apis/cluster/validation\"",
      "53:  karmadaclientset \"github.com/karmada-io/karmada/pkg/generated/clientset/versioned\"",
      "55:  \"github.com/karmada-io/karmada/pkg/karmadactl/options\"",
      "56:  cmdutil \"github.com/karmada-io/karmada/pkg/karmadactl/util\"",
      "57:  \"github.com/karmada-io/karmada/pkg/karmadactl/util/apiclient\"",
      "",
      "[Removed Lines]",
      "54:  addonutils \"github.com/karmada-io/karmada/pkg/karmadactl/addons/utils\"",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "83:  CACertPath = \"/etc/karmada/pki/ca.crt\"",
      "90:  KarmadaAgentBootstrapKubeConfigFileName = \"bootstrap-karmada-agent.conf\"",
      "",
      "[Removed Lines]",
      "85:  ClusterPermissionPrefix = \"system:node:\"",
      "87:  ClusterPermissionGroups = \"system:nodes\"",
      "",
      "[Added Lines]",
      "84:  ClusterPermissionPrefix = \"system:karmada:agent:\"",
      "86:  ClusterPermissionGroups = \"system:karmada:agents\"",
      "88:  AgentRBACGenerator = \"system:karmada:agent:rbac-generator\"",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "97:  KarmadaAgentName = \"karmada-agent\"",
      "99:  KarmadaAgentServiceAccountName = \"karmada-agent-sa\"",
      "103:  BootstrapUserName = \"token-bootstrap-client\"",
      "",
      "[Removed Lines]",
      "101:  SignerName = \"kubernetes.io/kube-apiserver-client-kubelet\"",
      "",
      "[Added Lines]",
      "102:  SignerName = \"kubernetes.io/kube-apiserver-client\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "261:  memberClusterEndpoint string",
      "262:  memberClusterClient   *kubeclient.Clientset",
      "263: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "266:  rbacResources *RBACResources",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "288:   o.ClusterName = config.Contexts[config.CurrentContext].Cluster",
      "289:  }",
      "291:  o.memberClusterEndpoint = restConfig.Host",
      "293:  o.memberClusterClient, err = apiclient.NewClientSet(restConfig)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "295:  o.rbacResources = GenerateRBACResources(o.ClusterName, o.ClusterNamespace)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "358:   return err",
      "359:  }",
      "364:  if err != nil {",
      "365:   return err",
      "366:  }",
      "370:  if err != nil {",
      "371:   return err",
      "372:  }",
      "373:  _, exist, err := karmadautil.GetClusterWithKarmadaClient(karmadaClient, o.ClusterName)",
      "374:  if err != nil {",
      "376:  } else if exist {",
      "378:  }",
      "",
      "[Removed Lines]",
      "362:  fmt.Println(\"[karmada-agent-start] Waiting to construct karmada-agent kubeconfig\")",
      "363:  karmadaAgentCfg, err := o.constructKarmadaAgentConfig(bootstrapClient, karmadaClusterInfo)",
      "368:  fmt.Println(\"[karmada-agent-start] Waiting to check cluster exists\")",
      "369:  karmadaClient, err := ToKarmadaClient(karmadaAgentCfg)",
      "375:   return err",
      "377:   return fmt.Errorf(\"failed to register as cluster with name %s already exists\", o.ClusterName)",
      "",
      "[Added Lines]",
      "367:  var rbacClient *kubeclient.Clientset",
      "368:  defer func() {",
      "369:   if err != nil && rbacClient != nil {",
      "370:    fmt.Println(\"karmadactl register failed and started deleting the created resources\")",
      "371:    err = o.rbacResources.Delete(rbacClient)",
      "372:    if err != nil {",
      "373:     klog.Warningf(\"Failed to delete rbac resources: %v\", err)",
      "374:    }",
      "375:   }",
      "376:  }()",
      "378:  rbacClient, err = o.EnsureNecessaryResourcesExistInControlPlane(bootstrapClient, karmadaClusterInfo)",
      "383:  err = o.EnsureNecessaryResourcesExistInMemberCluster(bootstrapClient, karmadaClusterInfo)",
      "388:  fmt.Printf(\"\\ncluster(%s) is joined successfully\\n\", o.ClusterName)",
      "390:  return nil",
      "391: }",
      "394: func (o *CommandRegisterOption) EnsureNecessaryResourcesExistInControlPlane(bootstrapClient *kubeclient.Clientset, karmadaClusterInfo *clientcmdapi.Cluster) (*kubeclient.Clientset, error) {",
      "395:  csrName := \"agent-rbac-generator-\" + o.ClusterName + k8srand.String(5)",
      "396:  rbacCfg, err := o.constructAgentRBACGeneratorConfig(bootstrapClient, karmadaClusterInfo, csrName)",
      "397:  if err != nil {",
      "398:   return nil, err",
      "399:  }",
      "401:  kubelient, err := ToClientSet(rbacCfg)",
      "402:  if err != nil {",
      "403:   return nil, err",
      "404:  }",
      "405:  defer func() {",
      "406:   err = kubelient.CertificatesV1().CertificateSigningRequests().Delete(context.Background(), csrName, metav1.DeleteOptions{})",
      "407:   if err != nil {",
      "408:    klog.Warningf(\"Failed to delete CertificateSigningRequests %s: %v\", csrName, err)",
      "409:   }",
      "410:  }()",
      "412:  fmt.Println(\"[karmada-agent-start] Waiting to check cluster exists\")",
      "413:  karmadaClient, err := ToKarmadaClient(rbacCfg)",
      "414:  if err != nil {",
      "415:   return kubelient, err",
      "416:  }",
      "419:   return kubelient, err",
      "421:   return kubelient, fmt.Errorf(\"failed to register as cluster with name %s already exists\", o.ClusterName)",
      "422:  }",
      "424:  fmt.Println(\"[karmada-agent-start] Assign the necessary RBAC permissions to the agent\")",
      "425:  err = o.ensureAgentRBACResourcesExistInControlPlane(kubelient)",
      "426:  if err != nil {",
      "427:   return kubelient, err",
      "428:  }",
      "430:  return kubelient, nil",
      "431: }",
      "434: func (o *CommandRegisterOption) EnsureNecessaryResourcesExistInMemberCluster(bootstrapClient *kubeclient.Clientset, karmadaClusterInfo *clientcmdapi.Cluster) error {",
      "436:  fmt.Println(\"[karmada-agent-start] Waiting to construct karmada-agent kubeconfig\")",
      "437:  karmadaAgentCfg, err := o.constructKarmadaAgentConfig(bootstrapClient, karmadaClusterInfo)",
      "438:  if err != nil {",
      "439:   return err",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "382:   karmadautil.KarmadaSystemLabel: karmadautil.KarmadaSystemLabelValue,",
      "383:  }",
      "386:   return err",
      "387:  }",
      "390:  fmt.Println(\"[karmada-agent-start] Waiting the necessary secret and RBAC\")",
      "392:   return err",
      "393:  }",
      "396:  fmt.Println(\"[karmada-agent-start] Waiting karmada-agent Deployment\")",
      "397:  KarmadaAgentDeployment := o.makeKarmadaAgentDeployment()",
      "399:   return err",
      "400:  }",
      "403:   return err",
      "404:  }",
      "408:  return nil",
      "409: }",
      "",
      "[Removed Lines]",
      "385:  if _, err := karmadautil.EnsureNamespaceExistWithLabels(o.memberClusterClient, o.Namespace, o.DryRun, labels); err != nil {",
      "391:  if err := o.createSecretAndRBACInMemberCluster(karmadaAgentCfg); err != nil {",
      "398:  if _, err := o.memberClusterClient.AppsV1().Deployments(o.Namespace).Create(context.TODO(), KarmadaAgentDeployment, metav1.CreateOptions{}); err != nil {",
      "402:  if err := addonutils.WaitForDeploymentRollout(o.memberClusterClient, KarmadaAgentDeployment, int(o.Timeout)); err != nil {",
      "406:  fmt.Printf(\"\\ncluster(%s) is joined successfully\\n\", o.ClusterName)",
      "",
      "[Added Lines]",
      "447:  if _, err = karmadautil.EnsureNamespaceExistWithLabels(o.memberClusterClient, o.Namespace, o.DryRun, labels); err != nil {",
      "453:  if err = o.createSecretAndRBACInMemberCluster(karmadaAgentCfg); err != nil {",
      "460:  if _, err = o.memberClusterClient.AppsV1().Deployments(o.Namespace).Create(context.TODO(), KarmadaAgentDeployment, metav1.CreateOptions{}); err != nil {",
      "464:  if err = cmdutil.WaitForDeploymentRollout(o.memberClusterClient, KarmadaAgentDeployment, int(o.Timeout)); err != nil {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "505:  return bootstrapClient, clusterinfo, nil",
      "506: }",
      "510:  var cert []byte",
      "513:  if err != nil {",
      "514:   return nil, err",
      "515:  }",
      "",
      "[Removed Lines]",
      "509: func (o *CommandRegisterOption) constructKarmadaAgentConfig(bootstrapClient *kubeclient.Clientset, karmadaClusterInfo *clientcmdapi.Cluster) (*clientcmdapi.Config, error) {",
      "512:  pk, csr, err := generateKeyAndCSR(o.ClusterName)",
      "",
      "[Added Lines]",
      "569: func (o *CommandRegisterOption) ensureAgentRBACResourcesExistInControlPlane(client kubeclient.Interface) error {",
      "570:  for i := range o.rbacResources.ClusterRoles {",
      "571:   _, err := karmadautil.CreateClusterRole(client, o.rbacResources.ClusterRoles[i])",
      "572:   if err != nil {",
      "573:    return err",
      "574:   }",
      "575:  }",
      "576:  for i := range o.rbacResources.ClusterRoleBindings {",
      "577:   _, err := karmadautil.CreateClusterRoleBinding(client, o.rbacResources.ClusterRoleBindings[i])",
      "578:   if err != nil {",
      "579:    return err",
      "580:   }",
      "581:  }",
      "583:  for i := range o.rbacResources.Roles {",
      "584:   roleNamespace := &corev1.Namespace{",
      "585:    ObjectMeta: metav1.ObjectMeta{",
      "586:     Name: o.rbacResources.Roles[i].GetNamespace(),",
      "587:     Labels: map[string]string{",
      "588:      karmadautil.KarmadaSystemLabel: karmadautil.KarmadaSystemLabelValue,",
      "589:     },",
      "590:    },",
      "591:   }",
      "592:   _, err := karmadautil.CreateNamespace(client, roleNamespace)",
      "593:   if err != nil {",
      "594:    return err",
      "595:   }",
      "596:   _, err = karmadautil.CreateRole(client, o.rbacResources.Roles[i])",
      "597:   if err != nil {",
      "598:    return err",
      "599:   }",
      "600:  }",
      "602:  for i := range o.rbacResources.RoleBindings {",
      "603:   _, err := karmadautil.CreateRoleBinding(client, o.rbacResources.RoleBindings[i])",
      "604:   if err != nil {",
      "605:    return err",
      "606:   }",
      "607:  }",
      "609:  return nil",
      "610: }",
      "613: type RBACResources struct {",
      "614:  ClusterRoles        []*rbacv1.ClusterRole",
      "615:  ClusterRoleBindings []*rbacv1.ClusterRoleBinding",
      "616:  Roles               []*rbacv1.Role",
      "617:  RoleBindings        []*rbacv1.RoleBinding",
      "618: }",
      "621: func GenerateRBACResources(clusterName, clusterNamespace string) *RBACResources {",
      "622:  return &RBACResources{",
      "623:   ClusterRoles:        []*rbacv1.ClusterRole{GenerateClusterRole(clusterName)},",
      "624:   ClusterRoleBindings: []*rbacv1.ClusterRoleBinding{GenerateClusterRoleBinding(clusterName)},",
      "625:   Roles:               []*rbacv1.Role{GenerateSecretAccessRole(clusterName, clusterNamespace), GenerateWorkAccessRole(clusterName)},",
      "626:   RoleBindings:        []*rbacv1.RoleBinding{GenerateSecretAccessRoleBinding(clusterName, clusterNamespace), GenerateWorkAccessRoleBinding(clusterName)},",
      "627:  }",
      "628: }",
      "631: func (r *RBACResources) List() []Obj {",
      "632:  var obj []Obj",
      "633:  for i := range r.ClusterRoles {",
      "634:   obj = append(obj, Obj{Kind: \"ClusterRole\", Name: r.ClusterRoles[i].GetName()})",
      "635:  }",
      "636:  for i := range r.ClusterRoleBindings {",
      "637:   obj = append(obj, Obj{Kind: \"ClusterRoleBinding\", Name: r.ClusterRoleBindings[i].GetName()})",
      "638:  }",
      "639:  for i := range r.Roles {",
      "640:   obj = append(obj, Obj{Kind: \"Role\", Name: r.Roles[i].GetName(), Namespace: r.Roles[i].GetNamespace()})",
      "641:  }",
      "642:  for i := range r.RoleBindings {",
      "643:   obj = append(obj, Obj{Kind: \"RoleBinding\", Name: r.RoleBindings[i].GetName(), Namespace: r.RoleBindings[i].GetNamespace()})",
      "644:  }",
      "645:  return obj",
      "646: }",
      "649: func (r *RBACResources) ToString() string {",
      "650:  var resources []string",
      "651:  for i := range r.List() {",
      "652:   resources = append(resources, r.List()[i].ToString())",
      "653:  }",
      "654:  return strings.Join(resources, \"\\n\")",
      "655: }",
      "658: func (r *RBACResources) Delete(client kubeclient.Interface) error {",
      "659:  var err error",
      "660:  for _, resource := range r.List() {",
      "661:   switch resource.Kind {",
      "662:   case \"ClusterRole\":",
      "663:    err = karmadautil.DeleteClusterRole(client, resource.Name)",
      "664:   case \"ClusterRoleBinding\":",
      "665:    err = karmadautil.DeleteClusterRoleBinding(client, resource.Name)",
      "666:   case \"Role\":",
      "667:    err = karmadautil.DeleteRole(client, resource.Namespace, resource.Name)",
      "668:   case \"RoleBinding\":",
      "669:    err = karmadautil.DeleteRoleBinding(client, resource.Namespace, resource.Name)",
      "670:   }",
      "671:   if err != nil {",
      "672:    return err",
      "673:   }",
      "674:  }",
      "675:  return nil",
      "676: }",
      "679: type Obj struct{ Kind, Name, Namespace string }",
      "682: func (o *Obj) ToString() string {",
      "683:  if o.Namespace == \"\" {",
      "684:   return fmt.Sprintf(\"%s/%s\", o.Kind, o.Name)",
      "685:  }",
      "686:  return fmt.Sprintf(\"%s/%s/%s\", o.Kind, o.Namespace, o.Name)",
      "687: }",
      "690: func GenerateClusterRole(clusterName string) *rbacv1.ClusterRole {",
      "691:  clusterRoleName := fmt.Sprintf(\"system:karmada:%s:agent\", clusterName)",
      "692:  return &rbacv1.ClusterRole{",
      "693:   TypeMeta: metav1.TypeMeta{",
      "694:    APIVersion: rbacv1.SchemeGroupVersion.String(),",
      "695:    Kind:       \"ClusterRole\",",
      "696:   },",
      "697:   ObjectMeta: metav1.ObjectMeta{",
      "698:    Name: clusterRoleName,",
      "699:   },",
      "700:   Rules: []rbacv1.PolicyRule{",
      "701:    {",
      "702:     APIGroups:     []string{\"cluster.karmada.io\"},",
      "703:     Resources:     []string{\"clusters\"},",
      "704:     ResourceNames: []string{clusterName},",
      "705:     Verbs:         []string{\"get\", \"delete\"},",
      "706:    },",
      "707:    {",
      "708:     APIGroups: []string{\"cluster.karmada.io\"},",
      "709:     Resources: []string{\"clusters\"},",
      "710:     Verbs:     []string{\"create\", \"list\", \"watch\"},",
      "711:    },",
      "712:    {",
      "713:     APIGroups:     []string{\"cluster.karmada.io\"},",
      "714:     Resources:     []string{\"clusters/status\"},",
      "715:     ResourceNames: []string{clusterName},",
      "716:     Verbs:         []string{\"update\"},",
      "717:    },",
      "718:    {",
      "719:     APIGroups: []string{\"config.karmada.io\"},",
      "720:     Resources: []string{\"resourceinterpreterwebhookconfigurations\", \"resourceinterpretercustomizations\"},",
      "721:     Verbs:     []string{\"get\", \"list\", \"watch\"},",
      "722:    },",
      "723:    {",
      "724:     APIGroups: []string{\"\"},",
      "725:     Resources: []string{\"namespaces\"},",
      "726:     Verbs:     []string{\"get\"},",
      "727:    },",
      "728:    {",
      "729:     APIGroups: []string{\"coordination.k8s.io\"},",
      "730:     Resources: []string{\"leases\"},",
      "731:     Verbs:     []string{\"get\", \"create\", \"update\"},",
      "732:    },",
      "733:    {",
      "734:     APIGroups: []string{\"certificates.k8s.io\"},",
      "735:     Resources: []string{\"certificatesigningrequests\"},",
      "736:     Verbs:     []string{\"get\", \"create\"},",
      "737:    },",
      "738:    {",
      "739:     APIGroups: []string{\"\"},",
      "740:     Resources: []string{\"services\"},",
      "741:     Verbs:     []string{\"list\", \"watch\"},",
      "742:    },",
      "743:    {",
      "744:     APIGroups: []string{\"\"},",
      "745:     Resources: []string{\"events\"},",
      "746:     Verbs:     []string{\"patch\", \"create\", \"update\"},",
      "747:    },",
      "748:   },",
      "749:  }",
      "750: }",
      "753: func GenerateClusterRoleBinding(clusterName string) *rbacv1.ClusterRoleBinding {",
      "754:  return &rbacv1.ClusterRoleBinding{",
      "755:   TypeMeta: metav1.TypeMeta{",
      "756:    APIVersion: \"rbac.authorization.k8s.io/v1\",",
      "757:    Kind:       \"ClusterRoleBinding\",",
      "758:   },",
      "759:   ObjectMeta: metav1.ObjectMeta{Name: fmt.Sprintf(\"system:karmada:%s:agent\", clusterName)},",
      "760:   Subjects: []rbacv1.Subject{",
      "761:    {",
      "762:     APIGroup: \"rbac.authorization.k8s.io\",",
      "763:     Kind:     \"User\",",
      "764:     Name:     generateAgentUserName(clusterName),",
      "765:    },",
      "766:   },",
      "767:   RoleRef: rbacv1.RoleRef{",
      "768:    APIGroup: \"rbac.authorization.k8s.io\",",
      "769:    Kind:     \"ClusterRole\",",
      "770:    Name:     fmt.Sprintf(\"system:karmada:%s:agent\", clusterName),",
      "771:   },",
      "772:  }",
      "773: }",
      "776: func GenerateSecretAccessRole(clusterName, clusterNamespace string) *rbacv1.Role {",
      "777:  secretAccessRoleName := fmt.Sprintf(\"system:karmada:%s:agent-secret\", clusterName)",
      "778:  return &rbacv1.Role{",
      "779:   ObjectMeta: metav1.ObjectMeta{",
      "780:    Name:      secretAccessRoleName,",
      "781:    Namespace: clusterNamespace,",
      "782:   },",
      "783:   Rules: []rbacv1.PolicyRule{",
      "784:    {",
      "785:     Verbs:         []string{\"get\", \"patch\"},",
      "786:     APIGroups:     []string{\"\"},",
      "787:     Resources:     []string{\"secrets\"},",
      "788:     ResourceNames: []string{clusterName, clusterName + \"-impersonator\"},",
      "789:    },",
      "790:    {",
      "791:     Verbs:     []string{\"create\"},",
      "792:     APIGroups: []string{\"\"},",
      "793:     Resources: []string{\"secrets\"},",
      "794:    },",
      "795:   },",
      "796:  }",
      "797: }",
      "800: func GenerateSecretAccessRoleBinding(clusterName, clusterNamespace string) *rbacv1.RoleBinding {",
      "801:  return &rbacv1.RoleBinding{",
      "802:   TypeMeta: metav1.TypeMeta{",
      "803:    APIVersion: \"rbac.authorization.k8s.io/v1\",",
      "804:    Kind:       \"RoleBinding\",",
      "805:   },",
      "806:   ObjectMeta: metav1.ObjectMeta{",
      "807:    Name:      fmt.Sprintf(\"system:karmada:%s:agent-secret\", clusterName),",
      "808:    Namespace: clusterNamespace,",
      "809:   },",
      "810:   Subjects: []rbacv1.Subject{",
      "811:    {",
      "812:     APIGroup: \"rbac.authorization.k8s.io\",",
      "813:     Kind:     \"User\",",
      "814:     Name:     generateAgentUserName(clusterName),",
      "815:    },",
      "816:   },",
      "817:   RoleRef: rbacv1.RoleRef{",
      "818:    APIGroup: \"rbac.authorization.k8s.io\",",
      "819:    Kind:     \"Role\",",
      "820:    Name:     fmt.Sprintf(\"system:karmada:%s:agent-secret\", clusterName),",
      "821:   },",
      "822:  }",
      "823: }",
      "826: func GenerateWorkAccessRole(clusterName string) *rbacv1.Role {",
      "827:  workAccessRoleName := fmt.Sprintf(\"system:karmada:%s:agent-work\", clusterName)",
      "828:  return &rbacv1.Role{",
      "829:   ObjectMeta: metav1.ObjectMeta{",
      "830:    Name:      workAccessRoleName,",
      "831:    Namespace: \"karmada-es-\" + clusterName,",
      "832:   },",
      "833:   Rules: []rbacv1.PolicyRule{",
      "834:    {",
      "835:     Verbs:     []string{\"get\", \"create\", \"list\", \"watch\", \"update\", \"delete\"},",
      "836:     APIGroups: []string{\"work.karmada.io\"},",
      "837:     Resources: []string{\"works\"},",
      "838:    },",
      "839:    {",
      "840:     Verbs:     []string{\"patch\", \"update\"},",
      "841:     APIGroups: []string{\"work.karmada.io\"},",
      "842:     Resources: []string{\"works/status\"},",
      "843:    },",
      "844:   },",
      "845:  }",
      "846: }",
      "849: func GenerateWorkAccessRoleBinding(clusterName string) *rbacv1.RoleBinding {",
      "850:  return &rbacv1.RoleBinding{",
      "851:   TypeMeta: metav1.TypeMeta{",
      "852:    APIVersion: \"rbac.authorization.k8s.io/v1\",",
      "853:    Kind:       \"RoleBinding\",",
      "854:   },",
      "855:   ObjectMeta: metav1.ObjectMeta{",
      "856:    Name:      fmt.Sprintf(\"system:karmada:%s:agent-work\", clusterName),",
      "857:    Namespace: \"karmada-es-\" + clusterName,",
      "858:   },",
      "859:   Subjects: []rbacv1.Subject{",
      "860:    {",
      "861:     APIGroup: \"rbac.authorization.k8s.io\",",
      "862:     Kind:     \"User\",",
      "863:     Name:     generateAgentUserName(clusterName),",
      "864:    },",
      "865:   },",
      "866:   RoleRef: rbacv1.RoleRef{",
      "867:    APIGroup: \"rbac.authorization.k8s.io\",",
      "868:    Kind:     \"Role\",",
      "869:    Name:     fmt.Sprintf(\"system:karmada:%s:agent-work\", clusterName),",
      "870:   },",
      "871:  }",
      "872: }",
      "874: func (o *CommandRegisterOption) constructKubeConfig(bootstrapClient *kubeclient.Clientset, karmadaClusterInfo *clientcmdapi.Cluster, csrName, commonName string, organization []string) (*clientcmdapi.Config, error) {",
      "877:  pk, csr, err := generateKeyAndCSR(commonName, organization)",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "519:   return nil, err",
      "520:  }",
      "524:  certificateSigningRequest := &certificatesv1.CertificateSigningRequest{",
      "525:   ObjectMeta: metav1.ObjectMeta{",
      "526:    Name: csrName,",
      "",
      "[Removed Lines]",
      "522:  csrName := o.ClusterName + \"-\" + k8srand.String(5)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "547:  if err != nil {",
      "548:   return nil, err",
      "549:  }",
      "552:  err = wait.PollUntilContextTimeout(context.TODO(), 1*time.Second, o.Timeout, false, func(context.Context) (done bool, err error) {",
      "553:   csrOK, err := bootstrapClient.CertificatesV1().CertificateSigningRequests().Get(context.TODO(), csrName, metav1.GetOptions{})",
      "554:   if err != nil {",
      "556:   }",
      "558:   if csrOK.Status.Certificate != nil {",
      "560:    cert = csrOK.Status.Certificate",
      "561:    return true, nil",
      "562:   }",
      "565:   return false, nil",
      "566:  })",
      "567:  if err != nil {",
      "568:   return nil, err",
      "569:  }",
      "572:   karmadaClusterInfo.Server,",
      "573:   DefaultClusterName,",
      "574:   o.ClusterName,",
      "575:   karmadaClusterInfo.CertificateAuthorityData,",
      "576:   cert,",
      "577:   pkData,",
      "580:  kubeConfigFile := filepath.Join(KarmadaDir, KarmadaAgentKubeConfigFileName)",
      "",
      "[Removed Lines]",
      "551:  klog.V(1).Infof(\"Waiting for the client certificate to be issued\")",
      "555:    return false, fmt.Errorf(\"failed to get the cluster csr %s. err: %v\", o.ClusterName, err)",
      "559:    klog.V(1).Infof(\"Signing certificate successfully\")",
      "564:   klog.V(1).Infof(\"Waiting for the client certificate to be issued\")",
      "571:  karmadaAgentCfg := CreateWithCert(",
      "578:  )",
      "",
      "[Added Lines]",
      "913:  klog.V(1).Infof(fmt.Sprintf(\"Waiting for the client certificate %s to be issued\", csrName))",
      "917:    return false, fmt.Errorf(\"failed to get the cluster csr %s. err: %v\", csrName, err)",
      "921:    klog.V(1).Infof(fmt.Sprintf(\"Signing certificate of csr %s successfully\", csrName))",
      "926:   klog.V(1).Infof(fmt.Sprintf(\"Waiting for the client certificate of csr %s to be issued\", csrName))",
      "927:   klog.V(1).Infof(\"Approve the CSR %s manually by executing `kubectl certificate approve %s` on the control plane\", csrName, csrName)",
      "934:  return CreateWithCert(",
      "941:  ), nil",
      "942: }",
      "945: func (o *CommandRegisterOption) constructKarmadaAgentConfig(bootstrapClient *kubeclient.Clientset, karmadaClusterInfo *clientcmdapi.Cluster) (*clientcmdapi.Config, error) {",
      "946:  csrName := o.ClusterName + \"-\" + k8srand.String(5)",
      "948:  karmadaAgentCfg, err := o.constructKubeConfig(bootstrapClient, karmadaClusterInfo, csrName, generateAgentUserName(o.ClusterName), []string{ClusterPermissionGroups})",
      "949:  if err != nil {",
      "950:   return nil, err",
      "951:  }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "588:  return karmadaAgentCfg, nil",
      "589: }",
      "592: func (o *CommandRegisterOption) createSecretAndRBACInMemberCluster(karmadaAgentCfg *clientcmdapi.Config) error {",
      "593:  configBytes, err := clientcmd.Write(*karmadaAgentCfg)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "965: func (o *CommandRegisterOption) constructAgentRBACGeneratorConfig(bootstrapClient *kubeclient.Clientset, karmadaClusterInfo *clientcmdapi.Cluster, csrName string) (*clientcmdapi.Config, error) {",
      "966:  return o.constructKubeConfig(bootstrapClient, karmadaClusterInfo, csrName, AgentRBACGenerator, []string{ClusterPermissionGroups})",
      "967: }",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "781: }",
      "785:  pk, err := rsa.GenerateKey(rand.Reader, 3072)",
      "786:  if err != nil {",
      "787:   return nil, nil, err",
      "",
      "[Removed Lines]",
      "784: func generateKeyAndCSR(clusterName string) (*rsa.PrivateKey, []byte, error) {",
      "",
      "[Added Lines]",
      "1162: func generateKeyAndCSR(commonName string, organization []string) (*rsa.PrivateKey, []byte, error) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "790:  csr, err := x509.CreateCertificateRequest(rand.Reader, &x509.CertificateRequest{",
      "791:   Subject: pkix.Name{",
      "794:   },",
      "795:  }, pk)",
      "796:  if err != nil {",
      "",
      "[Removed Lines]",
      "792:    CommonName:   ClusterPermissionPrefix + clusterName,",
      "793:    Organization: []string{ClusterPermissionGroups},",
      "",
      "[Added Lines]",
      "1170:    CommonName:   commonName,",
      "1171:    Organization: organization,",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "1071:  return karmadaClient, nil",
      "1072: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1452: func generateAgentUserName(clusterName string) string {",
      "1453:  return ClusterPermissionPrefix + clusterName",
      "1454: }",
      "",
      "---------------"
    ],
    "pkg/karmadactl/unregister/unregister.go||pkg/karmadactl/unregister/unregister.go": [
      "File: pkg/karmadactl/unregister/unregister.go -> pkg/karmadactl/unregister/unregister.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "137:  MemberClusterClient kubeclient.Interface",
      "138: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "140:  rbacResources *register.RBACResources",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "157:  if len(args) > 0 {",
      "158:   j.ClusterName = args[0]",
      "159:  }",
      "160:  return nil",
      "161: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "164:  j.rbacResources = register.GenerateRBACResources(j.ClusterName, j.ClusterNamespace)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "303:  return clientcmd.Load(agentConfigSecret.Data[fileName])",
      "304: }",
      "316: func (j *CommandUnregisterOption) RunUnregisterCluster() error {",
      "317:  if j.DryRun {",
      "318:   return nil",
      "319:  }",
      "324:   klog.Errorf(\"Failed to delete cluster object. cluster name: %s, error: %v\", j.ClusterName, err)",
      "325:   return err",
      "326:  }",
      "327:  klog.Infof(\"Successfully delete cluster object (%s) from control plane.\", j.ClusterName)",
      "330:  var err error",
      "331:  for _, resource := range j.listMemberClusterResources() {",
      "332:   switch resource.Kind {",
      "",
      "[Removed Lines]",
      "306: type obj struct{ Kind, Name, Namespace string }",
      "308: func (o *obj) ToString() string {",
      "309:  if o.Namespace == \"\" {",
      "310:   return fmt.Sprintf(\"%s/%s\", o.Kind, o.Name)",
      "311:  }",
      "312:  return fmt.Sprintf(\"%s/%s/%s\", o.Kind, o.Namespace, o.Name)",
      "313: }",
      "323:  if err := cmdutil.DeleteClusterObject(j.ControlPlaneKubeClient, j.ControlPlaneClient, j.ClusterName, j.Wait, j.DryRun, false); err != nil {",
      "",
      "[Added Lines]",
      "317:  start := time.Now()",
      "321:  err := cmdutil.EnsureWorksDeleted(j.ControlPlaneClient, names.GenerateExecutionSpaceName(j.ClusterName), j.Wait)",
      "322:  if err != nil {",
      "323:   klog.Errorf(\"Failed to delete works object. cluster name: %s, error: %v\", j.ClusterName, err)",
      "324:   return err",
      "325:  }",
      "326:  j.Wait = j.Wait - time.Since(start)",
      "330:  if err = cmdutil.DeleteClusterObject(j.ControlPlaneKubeClient, j.ControlPlaneClient, j.ClusterName, j.Wait, j.DryRun, false); err != nil {",
      "336:  if j.KarmadaConfig != \"\" {",
      "337:   if err = j.rbacResources.Delete(j.ControlPlaneKubeClient); err != nil {",
      "338:    klog.Errorf(\"Failed to delete karmada-agent RBAC resources from control plane. cluster name: %s, error: %v\", j.ClusterName, err)",
      "339:    return err",
      "340:   }",
      "341:   klog.Infof(\"Successfully delete karmada-agent RBAC resources from control plane. cluster name: %s\", j.ClusterName)",
      "342:  } else {",
      "343:   klog.Warningf(\"The RBAC resources on the control plane need to be manually cleaned up, including the following resources:\\n%s\", j.rbacResources.ToString())",
      "344:  }",
      "347:  if err = j.cleanupMemberClusterResources(); err != nil {",
      "348:   return err",
      "349:  }",
      "352:  localObsoleteFiles := []register.Obj{",
      "353:   {Kind: \"File\", Name: filepath.Join(register.KarmadaDir, register.KarmadaAgentKubeConfigFileName)},",
      "354:   {Kind: \"File\", Name: register.CACertPath},",
      "355:  }",
      "356:  for _, obj := range localObsoleteFiles {",
      "357:   if err = os.Remove(obj.Name); err != nil {",
      "358:    if os.IsNotExist(err) {",
      "359:     continue",
      "360:    }",
      "361:    klog.Errorf(\"Failed to delete local file (%v) in current node: %+v.\", obj.Name, err)",
      "362:    return err",
      "363:   }",
      "364:   klog.Infof(\"Successfully delete local file (%v) in current node.\", obj.Name)",
      "365:  }",
      "367:  return nil",
      "368: }",
      "371: func (j *CommandUnregisterOption) cleanupMemberClusterResources() error {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "350:   }",
      "351:   klog.Infof(\"Successfully delete resource (%v) from member cluster (%s).\", resource, j.ClusterName)",
      "352:  }",
      "371: }",
      "377:   {Kind: \"ServiceAccount\", Namespace: j.ClusterNamespace, Name: names.GenerateServiceAccountName(j.ClusterName)},",
      "378:   {Kind: \"ClusterRole\", Name: names.GenerateRoleName(names.GenerateServiceAccountName(j.ClusterName))},",
      "",
      "[Removed Lines]",
      "355:  localObsoleteFiles := []obj{",
      "356:   {Kind: \"File\", Name: filepath.Join(register.KarmadaDir, register.KarmadaAgentKubeConfigFileName)},",
      "357:   {Kind: \"File\", Name: register.CACertPath},",
      "358:  }",
      "359:  for _, obj := range localObsoleteFiles {",
      "360:   if err = os.Remove(obj.Name); err != nil {",
      "361:    if os.IsNotExist(err) {",
      "362:     continue",
      "363:    }",
      "364:    klog.Errorf(\"Failed to delete local file (%v) in current node: %+v.\", obj.Name, err)",
      "365:    return err",
      "366:   }",
      "367:   klog.Infof(\"Successfully delete local file (%v) in current node.\", obj.Name)",
      "368:  }",
      "370:  return nil",
      "374: func (j *CommandUnregisterOption) listMemberClusterResources() []obj {",
      "375:  return []obj{",
      "",
      "[Added Lines]",
      "395:  return err",
      "399: func (j *CommandUnregisterOption) listMemberClusterResources() []register.Obj {",
      "400:  return []register.Obj{",
      "",
      "---------------"
    ],
    "pkg/karmadactl/unregister/unregister_test.go||pkg/karmadactl/unregister/unregister_test.go": [
      "File: pkg/karmadactl/unregister/unregister_test.go -> pkg/karmadactl/unregister/unregister_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "216:    }",
      "217:    j.ControlPlaneClient = fakekarmadaclient.NewSimpleClientset(tt.clusterObject...)",
      "218:    j.MemberClusterClient = fake.NewSimpleClientset(tt.clusterResources...)",
      "219:    err := j.RunUnregisterCluster()",
      "220:    if (err == nil && tt.wantErr) || (err != nil && !tt.wantErr) {",
      "221:     t.Errorf(\"RunUnregisterCluster() error = %v, wantErr %v\", err, tt.wantErr)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "219:    j.rbacResources = register.GenerateRBACResources(j.ClusterName, j.ClusterNamespace)",
      "",
      "---------------"
    ],
    "pkg/karmadactl/util/work.go||pkg/karmadactl/util/work.go": [
      "File: pkg/karmadactl/util/work.go -> pkg/karmadactl/util/work.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: Copyright 2024 The Karmada Authors.",
      "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
      "5: you may not use this file except in compliance with the License.",
      "6: You may obtain a copy of the License at",
      "8:     http://www.apache.org/licenses/LICENSE-2.0",
      "10: Unless required by applicable law or agreed to in writing, software",
      "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
      "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "13: See the License for the specific language governing permissions and",
      "14: limitations under the License.",
      "17: package util",
      "19: import (",
      "20:  \"context\"",
      "21:  \"fmt\"",
      "22:  \"time\"",
      "24:  apierrors \"k8s.io/apimachinery/pkg/api/errors\"",
      "25:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
      "26:  \"k8s.io/apimachinery/pkg/util/wait\"",
      "28:  karmadaclientset \"github.com/karmada-io/karmada/pkg/generated/clientset/versioned\"",
      "29: )",
      "32: func EnsureWorksDeleted(controlPlaneKarmadaClient karmadaclientset.Interface, namespace string,",
      "33:  timeout time.Duration) error {",
      "35:  err := wait.PollUntilContextTimeout(context.TODO(), 1*time.Second, timeout, false, func(context.Context) (done bool, err error) {",
      "36:   list, err := controlPlaneKarmadaClient.WorkV1alpha1().Works(namespace).List(context.TODO(), metav1.ListOptions{})",
      "37:   if err != nil {",
      "38:    return false, fmt.Errorf(\"failed to list work in namespace %s\", namespace)",
      "39:   }",
      "41:   if len(list.Items) == 0 {",
      "42:    return true, nil",
      "43:   }",
      "44:   for i := range list.Items {",
      "45:    work := &list.Items[i]",
      "46:    err = controlPlaneKarmadaClient.WorkV1alpha1().Works(namespace).Delete(context.TODO(), work.GetName(), metav1.DeleteOptions{})",
      "47:    if err != nil && !apierrors.IsNotFound(err) {",
      "48:     return false, fmt.Errorf(\"failed to delete the work(%s/%s)\", namespace, work.GetName())",
      "49:    }",
      "50:   }",
      "51:   return false, nil",
      "52:  })",
      "54:  return err",
      "55: }",
      "",
      "---------------"
    ],
    "pkg/util/rbac.go||pkg/util/rbac.go": [
      "File: pkg/util/rbac.go -> pkg/util/rbac.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "192:  return rules",
      "193: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "196: func CreateRole(client kubeclient.Interface, roleObj *rbacv1.Role) (*rbacv1.Role, error) {",
      "197:  createdObj, err := client.RbacV1().Roles(roleObj.GetNamespace()).Create(context.TODO(), roleObj, metav1.CreateOptions{})",
      "198:  if err != nil {",
      "199:   if apierrors.IsAlreadyExists(err) {",
      "200:    return roleObj, nil",
      "201:   }",
      "203:   return nil, err",
      "204:  }",
      "206:  return createdObj, nil",
      "207: }",
      "210: func CreateRoleBinding(client kubeclient.Interface, roleBindingObj *rbacv1.RoleBinding) (*rbacv1.RoleBinding, error) {",
      "211:  createdObj, err := client.RbacV1().RoleBindings(roleBindingObj.GetNamespace()).Create(context.TODO(), roleBindingObj, metav1.CreateOptions{})",
      "212:  if err != nil {",
      "213:   if apierrors.IsAlreadyExists(err) {",
      "214:    return roleBindingObj, nil",
      "215:   }",
      "217:   return nil, err",
      "218:  }",
      "220:  return createdObj, nil",
      "221: }",
      "224: func DeleteRole(client kubeclient.Interface, namespace, name string) error {",
      "225:  err := client.RbacV1().Roles(namespace).Delete(context.TODO(), name, metav1.DeleteOptions{})",
      "226:  if err != nil && !apierrors.IsNotFound(err) {",
      "227:   return err",
      "228:  }",
      "229:  return nil",
      "230: }",
      "233: func DeleteRoleBinding(client kubeclient.Interface, namespace, name string) error {",
      "234:  err := client.RbacV1().RoleBindings(namespace).Delete(context.TODO(), name, metav1.DeleteOptions{})",
      "235:  if err != nil && !apierrors.IsNotFound(err) {",
      "236:   return err",
      "237:  }",
      "238:  return nil",
      "239: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af90640361041a4c9f4dc93158eb1d27bf5cb98e",
      "candidate_info": {
        "commit_hash": "af90640361041a4c9f4dc93158eb1d27bf5cb98e",
        "repo": "karmada-io/karmada",
        "commit_url": "https://github.com/karmada-io/karmada/commit/af90640361041a4c9f4dc93158eb1d27bf5cb98e",
        "files": [
          "artifacts/deploy/bootstrap-token-configuration.yaml",
          "charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl",
          "pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go",
          "pkg/karmadactl/cmdinit/karmada/deploy.go",
          "pkg/karmadactl/cmdinit/karmada/rbac.go",
          "pkg/karmadactl/cmdinit/karmada/rbac_test.go",
          "pkg/karmadactl/register/register.go",
          "pkg/karmadactl/unregister/unregister.go",
          "pkg/karmadactl/unregister/unregister_test.go",
          "pkg/karmadactl/util/work.go",
          "pkg/util/rbac.go"
        ],
        "message": "minimize the RBAC permissions for the pull mode cluster\n\nSigned-off-by: zhzhuang-zju <m17799853869@163.com>",
        "before_after_code_files": [
          "charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl||charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl",
          "pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go||pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go",
          "pkg/karmadactl/cmdinit/karmada/deploy.go||pkg/karmadactl/cmdinit/karmada/deploy.go",
          "pkg/karmadactl/cmdinit/karmada/rbac.go||pkg/karmadactl/cmdinit/karmada/rbac.go",
          "pkg/karmadactl/cmdinit/karmada/rbac_test.go||pkg/karmadactl/cmdinit/karmada/rbac_test.go",
          "pkg/karmadactl/register/register.go||pkg/karmadactl/register/register.go",
          "pkg/karmadactl/unregister/unregister.go||pkg/karmadactl/unregister/unregister.go",
          "pkg/karmadactl/unregister/unregister_test.go||pkg/karmadactl/unregister/unregister_test.go",
          "pkg/karmadactl/util/work.go||pkg/karmadactl/util/work.go",
          "pkg/util/rbac.go||pkg/util/rbac.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/karmada-io/karmada/pull/5793"
        ],
        "olp_code_files": {
          "patch": [
            "charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl||charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl",
            "pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go||pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go",
            "pkg/karmadactl/cmdinit/karmada/deploy.go||pkg/karmadactl/cmdinit/karmada/deploy.go",
            "pkg/karmadactl/cmdinit/karmada/rbac.go||pkg/karmadactl/cmdinit/karmada/rbac.go",
            "pkg/karmadactl/cmdinit/karmada/rbac_test.go||pkg/karmadactl/cmdinit/karmada/rbac_test.go",
            "pkg/karmadactl/register/register.go||pkg/karmadactl/register/register.go",
            "pkg/karmadactl/unregister/unregister.go||pkg/karmadactl/unregister/unregister.go",
            "pkg/karmadactl/unregister/unregister_test.go||pkg/karmadactl/unregister/unregister_test.go",
            "pkg/karmadactl/util/work.go||pkg/karmadactl/util/work.go",
            "pkg/util/rbac.go||pkg/util/rbac.go"
          ],
          "candidate": [
            "charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl||charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl",
            "pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go||pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go",
            "pkg/karmadactl/cmdinit/karmada/deploy.go||pkg/karmadactl/cmdinit/karmada/deploy.go",
            "pkg/karmadactl/cmdinit/karmada/rbac.go||pkg/karmadactl/cmdinit/karmada/rbac.go",
            "pkg/karmadactl/cmdinit/karmada/rbac_test.go||pkg/karmadactl/cmdinit/karmada/rbac_test.go",
            "pkg/karmadactl/register/register.go||pkg/karmadactl/register/register.go",
            "pkg/karmadactl/unregister/unregister.go||pkg/karmadactl/unregister/unregister.go",
            "pkg/karmadactl/unregister/unregister_test.go||pkg/karmadactl/unregister/unregister_test.go",
            "pkg/karmadactl/util/work.go||pkg/karmadactl/util/work.go",
            "pkg/util/rbac.go||pkg/util/rbac.go"
          ]
        }
      },
      "candidate_diff": {
        "charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl||charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl": [
          "File: charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl -> charts/karmada/templates/_karmada_bootstrap_token_configuration.tpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:   name: system:bootstrappers:karmada:default-cluster-token",
          "76: ---",
          "77: apiVersion: rbac.authorization.k8s.io/v1",
          "78: kind: ClusterRoleBinding",
          "79: metadata:",
          "80:   name: system:karmada:agent-autoapprove-bootstrap",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: kind: ClusterRole",
          "79: metadata:",
          "80:   name: system:karmada:certificatesigningrequest:autoapprover",
          "81:   {{- if \"karmada.commonLabels\" }}",
          "82:   labels:",
          "83:     {{- include \"karmada.commonLabels\" . | nindent 4 }}",
          "84:   {{- end }}",
          "85: rules:",
          "86: - apiGroups:",
          "87:   - certificates.k8s.io",
          "88:   resources:",
          "89:   - certificatesigningrequests/clusteragent",
          "90:   verbs:",
          "91:   - create",
          "92: ---",
          "93: apiVersion: rbac.authorization.k8s.io/v1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85: roleRef:",
          "86:   apiGroup: rbac.authorization.k8s.io",
          "87:   kind: ClusterRole",
          "89: subjects:",
          "90: - apiGroup: rbac.authorization.k8s.io",
          "91:   kind: Group",
          "92:   name: system:bootstrappers:karmada:default-cluster-token",
          "93: ---",
          "94: apiVersion: rbac.authorization.k8s.io/v1",
          "95: kind: ClusterRoleBinding",
          "96: metadata:",
          "97:   name: system:karmada:agent-autoapprove-certificate-rotation",
          "",
          "[Removed Lines]",
          "88:   name: system:certificates.k8s.io:certificatesigningrequests:nodeclient",
          "",
          "[Added Lines]",
          "104:   name: system:karmada:certificatesigningrequest:autoapprover",
          "111: kind: ClusterRole",
          "112: metadata:",
          "113:   name: system:karmada:certificatesigningrequest:selfautoapprover",
          "114:   {{- if \"karmada.commonLabels\" }}",
          "115:   labels:",
          "116:     {{- include \"karmada.commonLabels\" . | nindent 4 }}",
          "117:   {{- end }}",
          "118: rules:",
          "119: - apiGroups:",
          "120:   - certificates.k8s.io",
          "121:   resources:",
          "122:   - certificatesigningrequests/selfclusteragent",
          "123:   verbs:",
          "124:   - create",
          "125: ---",
          "126: apiVersion: rbac.authorization.k8s.io/v1",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102: roleRef:",
          "103:   apiGroup: rbac.authorization.k8s.io",
          "104:   kind: ClusterRole",
          "106: subjects:",
          "107: - apiGroup: rbac.authorization.k8s.io",
          "108:   kind: Group",
          "110: ---",
          "111: apiVersion: rbac.authorization.k8s.io/v1",
          "112: kind: ClusterRole",
          "113: metadata:",
          "115:   {{- if \"karmada.commonLabels\" }}",
          "116:   labels:",
          "117:     {{- include \"karmada.commonLabels\" . | nindent 4 }}",
          "118:   {{- end }}",
          "119: rules:",
          "120: - apiGroups:",
          "147:   resources:",
          "149:   verbs:",
          "218: ---",
          "219: apiVersion: rbac.authorization.k8s.io/v1",
          "220: kind: ClusterRoleBinding",
          "221: metadata:",
          "223:   {{- if \"karmada.commonLabels\" }}",
          "224:   labels:",
          "225:     {{- include \"karmada.commonLabels\" . | nindent 4 }}",
          "",
          "[Removed Lines]",
          "105:   name: system:certificates.k8s.io:certificatesigningrequests:selfnodeclient",
          "109:   name: system:nodes",
          "114:   name: system:karmada:agent",
          "121:   - authentication.k8s.io",
          "122:   resources:",
          "123:   - tokenreviews",
          "124:   verbs:",
          "125:   - create",
          "126: - apiGroups:",
          "127:   - cluster.karmada.io",
          "128:   resources:",
          "129:   - clusters",
          "130:   verbs:",
          "131:   - create",
          "132:   - get",
          "133:   - list",
          "134:   - watch",
          "135:   - patch",
          "136:   - update",
          "137:   - delete",
          "138: - apiGroups:",
          "139:   - cluster.karmada.io",
          "140:   resources:",
          "141:   - clusters/status",
          "142:   verbs:",
          "143:   - patch",
          "144:   - update",
          "145: - apiGroups:",
          "146:   - work.karmada.io",
          "148:   - works",
          "150:   - create",
          "151:   - get",
          "152:   - list",
          "153:   - watch",
          "154:   - update",
          "155:   - delete",
          "156: - apiGroups:",
          "157:   - work.karmada.io",
          "158:   resources:",
          "159:   - works/status",
          "160:   verbs:",
          "161:   - patch",
          "162:   - update",
          "163: - apiGroups:",
          "164:   - config.karmada.io",
          "165:   resources:",
          "166:   - resourceinterpreterwebhookconfigurations",
          "167:   - resourceinterpretercustomizations",
          "168:   verbs:",
          "169:   - get",
          "170:   - list",
          "171:   - watch",
          "172: - apiGroups:",
          "173:   - \"\"",
          "174:   resources:",
          "175:   - namespaces",
          "176:   verbs:",
          "177:   - get",
          "178:   - list",
          "179:   - watch",
          "180:   - create",
          "181: - apiGroups:",
          "182:   - \"\"",
          "183:   resources:",
          "184:   - secrets",
          "185:   verbs:",
          "186:   - get",
          "187:   - list",
          "188:   - watch",
          "189:   - create",
          "190:   - patch",
          "191: - apiGroups:",
          "192:   - coordination.k8s.io",
          "193:   resources:",
          "194:   - leases",
          "195:   verbs:",
          "196:   - create",
          "197:   - delete",
          "198:   - get",
          "199:   - patch",
          "200:   - update",
          "201: - apiGroups:",
          "202:   - certificates.k8s.io",
          "203:   resources:",
          "204:   - certificatesigningrequests",
          "205:   verbs:",
          "206:   - create",
          "207:   - get",
          "208:   - list",
          "209:   - watch",
          "210: - apiGroups:",
          "211:   - \"\"",
          "212:   resources:",
          "213:   - events",
          "214:   verbs:",
          "215:   - create",
          "216:   - patch",
          "217:   - update",
          "222:   name: system:karmada:agent",
          "",
          "[Added Lines]",
          "137:   name: system:karmada:certificatesigningrequest:selfautoapprover",
          "141:   name: system:karmada:agents",
          "146:   name: system:karmada:agent-rbac-generator",
          "153:   - \"*\"",
          "155:   - \"*\"",
          "157:   - \"*\"",
          "162:   name: system:karmada:agent-rbac-generator",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227: roleRef:",
          "228:   apiGroup: rbac.authorization.k8s.io",
          "229:   kind: ClusterRole",
          "231: subjects:",
          "232: - apiGroup: rbac.authorization.k8s.io",
          "235: {{- end -}}",
          "",
          "[Removed Lines]",
          "230:   name: system:karmada:agent",
          "233:   kind: Group",
          "234:   name: system:nodes",
          "",
          "[Added Lines]",
          "170:   name: system:karmada:agent-rbac-generator",
          "173:   kind: User",
          "174:   name: system:karmada:agent:rbac-generator",
          "",
          "---------------"
        ],
        "pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go||pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go": [
          "File: pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go -> pkg/karmadactl/cmdinit/bootstraptoken/agent/tlsbootstrap.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  KarmadaAgentBootstrap = \"system:karmada:agent-bootstrap\"",
          "36:  KarmadaAgentAutoApproveBootstrapClusterRoleBinding = \"system:karmada:agent-autoapprove-bootstrap\"",
          "38:  KarmadaAgentAutoApproveCertificateRotationClusterRoleBinding = \"system:karmada:agent-autoapprove-certificate-rotation\"",
          "44:  KarmadaAgentBootstrapTokenAuthGroup = \"system:bootstrappers:karmada:default-cluster-token\"",
          "45: )",
          "",
          "[Removed Lines]",
          "34:  KarmadaAgentGroup = \"system:nodes\"",
          "40:  CSRAutoApprovalClusterRoleName = \"system:certificates.k8s.io:certificatesigningrequests:nodeclient\"",
          "42:  KarmadaAgentSelfCSRAutoApprovalClusterRoleName = \"system:certificates.k8s.io:certificatesigningrequests:selfnodeclient\"",
          "",
          "[Added Lines]",
          "34:  KarmadaAgentGroup = \"system:karmada:agents\"",
          "40:  CSRAutoApprovalClusterRoleName = \"system:karmada:certificatesigningrequest:autoapprover\"",
          "42:  KarmadaAgentSelfCSRAutoApprovalClusterRoleName = \"system:karmada:certificatesigningrequest:selfautoapprover\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: func AutoApproveKarmadaAgentBootstrapTokens(clientSet kubernetes.Interface) error {",
          "65:  clusterRoleBinding := utils.ClusterRoleBindingFromSubjects(KarmadaAgentAutoApproveBootstrapClusterRoleBinding, CSRAutoApprovalClusterRoleName,",
          "66:   []rbacv1.Subject{",
          "",
          "[Removed Lines]",
          "63:  klog.Infoln(\"[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Karmada Agent Bootstrap Token\")",
          "",
          "[Added Lines]",
          "63:  klog.Infoln(\"[bootstrap-token] configured RBAC rules to allow the agentcsrapproving controller automatically approve CSRs from a Karmada Agent Bootstrap Token\")",
          "64:  csrAutoApprovalClusterRole := utils.ClusterRoleFromRules(CSRAutoApprovalClusterRoleName, []rbacv1.PolicyRule{",
          "65:   {",
          "66:    APIGroups: []string{\"certificates.k8s.io\"},",
          "67:    Resources: []string{\"certificatesigningrequests/clusteragent\"},",
          "68:    Verbs:     []string{\"create\"},",
          "69:   },",
          "70:  }, nil, nil)",
          "71:  err := cmdutil.CreateOrUpdateClusterRole(clientSet, csrAutoApprovalClusterRole)",
          "72:  if err != nil {",
          "73:   return err",
          "74:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: func AutoApproveAgentCertificateRotation(clientSet kubernetes.Interface) error {",
          "77:  klog.Infoln(\"[bootstrap-token] configured RBAC rules to allow certificate rotation for all agent client certificates in the member cluster\")",
          "79:  clusterRoleBinding := utils.ClusterRoleBindingFromSubjects(KarmadaAgentAutoApproveCertificateRotationClusterRoleBinding, KarmadaAgentSelfCSRAutoApprovalClusterRoleName,",
          "80:   []rbacv1.Subject{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89:  karmadaAgentSelfCSRAutoApprovalClusterRole := utils.ClusterRoleFromRules(KarmadaAgentSelfCSRAutoApprovalClusterRoleName, []rbacv1.PolicyRule{",
          "90:   {",
          "91:    APIGroups: []string{\"certificates.k8s.io\"},",
          "92:    Resources: []string{\"certificatesigningrequests/selfclusteragent\"},",
          "93:    Verbs:     []string{\"create\"},",
          "94:   },",
          "95:  }, nil, nil)",
          "96:  err := cmdutil.CreateOrUpdateClusterRole(clientSet, karmadaAgentSelfCSRAutoApprovalClusterRole)",
          "97:  if err != nil {",
          "98:   return err",
          "99:  }",
          "",
          "---------------"
        ],
        "pkg/karmadactl/cmdinit/karmada/deploy.go||pkg/karmadactl/cmdinit/karmada/deploy.go": [
          "File: pkg/karmadactl/cmdinit/karmada/deploy.go -> pkg/karmadactl/cmdinit/karmada/deploy.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:   return fmt.Errorf(\"error creating clusterinfo RBAC rules: %v\", err)",
          "186:  }",
          "190:   return err",
          "191:  }",
          "",
          "[Removed Lines]",
          "189:  if err := grantAccessPermissionToAgent(clientSet); err != nil {",
          "",
          "[Added Lines]",
          "189:  if err := grantAccessPermissionToAgentRBACGenerator(clientSet); err != nil {",
          "",
          "---------------"
        ],
        "pkg/karmadactl/cmdinit/karmada/rbac.go||pkg/karmadactl/cmdinit/karmada/rbac.go": [
          "File: pkg/karmadactl/cmdinit/karmada/rbac.go -> pkg/karmadactl/cmdinit/karmada/rbac.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: )",
          "28: const (",
          "33: )",
          "",
          "[Removed Lines]",
          "29:  karmadaViewClusterRole        = \"karmada-view\"",
          "30:  karmadaEditClusterRole        = \"karmada-edit\"",
          "31:  karmadaAgentAccessClusterRole = \"system:karmada:agent\"",
          "32:  karmadaAgentGroup             = \"system:nodes\"",
          "",
          "[Added Lines]",
          "29:  karmadaViewClusterRole                      = \"karmada-view\"",
          "30:  karmadaEditClusterRole                      = \"karmada-edit\"",
          "31:  karmadaAgentRBACGeneratorClusterRole        = \"system:karmada:agent-rbac-generator\"",
          "32:  karmadaAgentRBACGeneratorClusterRoleBinding = \"system:karmada:agent-rbac-generator\"",
          "33:  agentRBACGenerator                          = \"system:karmada:agent:rbac-generator\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:  return nil",
          "63: }",
          "68:   {",
          "122:   },",
          "123:  }, nil, nil)",
          "124:  err := cmdutil.CreateOrUpdateClusterRole(clientSet, clusterRole)",
          "",
          "[Removed Lines]",
          "66: func grantAccessPermissionToAgent(clientSet kubernetes.Interface) error {",
          "67:  clusterRole := utils.ClusterRoleFromRules(karmadaAgentAccessClusterRole, []rbacv1.PolicyRule{",
          "69:    APIGroups: []string{\"authentication.k8s.io\"},",
          "70:    Resources: []string{\"tokenreviews\"},",
          "71:    Verbs:     []string{\"create\"},",
          "72:   },",
          "73:   {",
          "74:    APIGroups: []string{\"cluster.karmada.io\"},",
          "75:    Resources: []string{\"clusters\"},",
          "76:    Verbs:     []string{\"create\", \"get\", \"list\", \"watch\", \"patch\", \"update\", \"delete\"},",
          "77:   },",
          "78:   {",
          "79:    APIGroups: []string{\"cluster.karmada.io\"},",
          "80:    Resources: []string{\"clusters/status\"},",
          "81:    Verbs:     []string{\"patch\", \"update\"},",
          "82:   },",
          "83:   {",
          "84:    APIGroups: []string{\"work.karmada.io\"},",
          "85:    Resources: []string{\"works\"},",
          "86:    Verbs:     []string{\"create\", \"get\", \"list\", \"watch\", \"update\", \"delete\"},",
          "87:   },",
          "88:   {",
          "89:    APIGroups: []string{\"work.karmada.io\"},",
          "90:    Resources: []string{\"works/status\"},",
          "91:    Verbs:     []string{\"patch\", \"update\"},",
          "92:   },",
          "93:   {",
          "94:    APIGroups: []string{\"config.karmada.io\"},",
          "95:    Resources: []string{\"resourceinterpreterwebhookconfigurations\", \"resourceinterpretercustomizations\"},",
          "96:    Verbs:     []string{\"get\", \"list\", \"watch\"},",
          "97:   },",
          "98:   {",
          "99:    APIGroups: []string{\"\"},",
          "100:    Resources: []string{\"namespaces\"},",
          "101:    Verbs:     []string{\"get\", \"list\", \"watch\", \"create\"},",
          "102:   },",
          "103:   {",
          "104:    APIGroups: []string{\"\"},",
          "105:    Resources: []string{\"secrets\"},",
          "106:    Verbs:     []string{\"get\", \"list\", \"watch\", \"create\", \"patch\"},",
          "107:   },",
          "108:   {",
          "109:    APIGroups: []string{\"coordination.k8s.io\"},",
          "110:    Resources: []string{\"leases\"},",
          "111:    Verbs:     []string{\"create\", \"delete\", \"get\", \"patch\", \"update\"},",
          "112:   },",
          "113:   {",
          "114:    APIGroups: []string{\"certificates.k8s.io\"},",
          "115:    Resources: []string{\"certificatesigningrequests\"},",
          "116:    Verbs:     []string{\"create\", \"get\", \"list\", \"watch\"},",
          "117:   },",
          "118:   {",
          "119:    APIGroups: []string{\"\"},",
          "120:    Resources: []string{\"events\"},",
          "121:    Verbs:     []string{\"create\", \"patch\", \"update\"},",
          "",
          "[Added Lines]",
          "67: func grantAccessPermissionToAgentRBACGenerator(clientSet kubernetes.Interface) error {",
          "68:  clusterRole := utils.ClusterRoleFromRules(karmadaAgentRBACGeneratorClusterRole, []rbacv1.PolicyRule{",
          "70:    APIGroups: []string{\"*\"},",
          "71:    Resources: []string{\"*\"},",
          "72:    Verbs:     []string{\"*\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:   return err",
          "127:  }",
          "130:   []rbacv1.Subject{",
          "131:    {",
          "134:    }}, nil)",
          "137:  err = cmdutil.CreateOrUpdateClusterRoleBinding(clientSet, clusterRoleBinding)",
          "138:  if err != nil {",
          "139:   return err",
          "",
          "[Removed Lines]",
          "129:  clusterRoleBinding := utils.ClusterRoleBindingFromSubjects(karmadaAgentAccessClusterRole, karmadaAgentAccessClusterRole,",
          "132:     Kind: rbacv1.GroupKind,",
          "133:     Name: karmadaAgentGroup,",
          "136:  klog.V(1).Info(\"Grant the limited access permission to 'karmada-agent'\")",
          "",
          "[Added Lines]",
          "80:  clusterRoleBinding := utils.ClusterRoleBindingFromSubjects(karmadaAgentRBACGeneratorClusterRoleBinding, karmadaAgentRBACGeneratorClusterRole,",
          "83:     Kind: rbacv1.UserKind,",
          "84:     Name: agentRBACGenerator,",
          "87:  klog.V(1).Info(\"Grant the access permission to 'karmada-agent-rbac-generator'\")",
          "",
          "---------------"
        ],
        "pkg/karmadactl/cmdinit/karmada/rbac_test.go||pkg/karmadactl/cmdinit/karmada/rbac_test.go": [
          "File: pkg/karmadactl/cmdinit/karmada/rbac_test.go -> pkg/karmadactl/cmdinit/karmada/rbac_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: func Test_grantAccessPermissionToAgent(t *testing.T) {",
          "33:  client := fake.NewSimpleClientset()",
          "36:  }",
          "37: }",
          "",
          "[Removed Lines]",
          "34:  if err := grantAccessPermissionToAgent(client); err != nil {",
          "35:   t.Errorf(\"grantAccessPermissionToAgent() expected no error, but got err: %v\", err)",
          "",
          "[Added Lines]",
          "34:  if err := grantAccessPermissionToAgentRBACGenerator(client); err != nil {",
          "35:   t.Errorf(\"grantAccessPermissionToAgentRBACGenerator() expected no error, but got err: %v\", err)",
          "",
          "---------------"
        ],
        "pkg/karmadactl/register/register.go||pkg/karmadactl/register/register.go": [
          "File: pkg/karmadactl/register/register.go -> pkg/karmadactl/register/register.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  \"github.com/karmada-io/karmada/pkg/apis/cluster/validation\"",
          "53:  karmadaclientset \"github.com/karmada-io/karmada/pkg/generated/clientset/versioned\"",
          "55:  \"github.com/karmada-io/karmada/pkg/karmadactl/options\"",
          "56:  cmdutil \"github.com/karmada-io/karmada/pkg/karmadactl/util\"",
          "57:  \"github.com/karmada-io/karmada/pkg/karmadactl/util/apiclient\"",
          "",
          "[Removed Lines]",
          "54:  addonutils \"github.com/karmada-io/karmada/pkg/karmadactl/addons/utils\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:  CACertPath = \"/etc/karmada/pki/ca.crt\"",
          "90:  KarmadaAgentBootstrapKubeConfigFileName = \"bootstrap-karmada-agent.conf\"",
          "",
          "[Removed Lines]",
          "85:  ClusterPermissionPrefix = \"system:node:\"",
          "87:  ClusterPermissionGroups = \"system:nodes\"",
          "",
          "[Added Lines]",
          "84:  ClusterPermissionPrefix = \"system:karmada:agent:\"",
          "86:  ClusterPermissionGroups = \"system:karmada:agents\"",
          "88:  AgentRBACGenerator = \"system:karmada:agent:rbac-generator\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:  KarmadaAgentName = \"karmada-agent\"",
          "99:  KarmadaAgentServiceAccountName = \"karmada-agent-sa\"",
          "103:  BootstrapUserName = \"token-bootstrap-client\"",
          "",
          "[Removed Lines]",
          "101:  SignerName = \"kubernetes.io/kube-apiserver-client-kubelet\"",
          "",
          "[Added Lines]",
          "102:  SignerName = \"kubernetes.io/kube-apiserver-client\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "261:  memberClusterEndpoint string",
          "262:  memberClusterClient   *kubeclient.Clientset",
          "263: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266:  rbacResources *RBACResources",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "288:   o.ClusterName = config.Contexts[config.CurrentContext].Cluster",
          "289:  }",
          "291:  o.memberClusterEndpoint = restConfig.Host",
          "293:  o.memberClusterClient, err = apiclient.NewClientSet(restConfig)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "295:  o.rbacResources = GenerateRBACResources(o.ClusterName, o.ClusterNamespace)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "358:   return err",
          "359:  }",
          "364:  if err != nil {",
          "365:   return err",
          "366:  }",
          "370:  if err != nil {",
          "371:   return err",
          "372:  }",
          "373:  _, exist, err := karmadautil.GetClusterWithKarmadaClient(karmadaClient, o.ClusterName)",
          "374:  if err != nil {",
          "376:  } else if exist {",
          "378:  }",
          "",
          "[Removed Lines]",
          "362:  fmt.Println(\"[karmada-agent-start] Waiting to construct karmada-agent kubeconfig\")",
          "363:  karmadaAgentCfg, err := o.constructKarmadaAgentConfig(bootstrapClient, karmadaClusterInfo)",
          "368:  fmt.Println(\"[karmada-agent-start] Waiting to check cluster exists\")",
          "369:  karmadaClient, err := ToKarmadaClient(karmadaAgentCfg)",
          "375:   return err",
          "377:   return fmt.Errorf(\"failed to register as cluster with name %s already exists\", o.ClusterName)",
          "",
          "[Added Lines]",
          "367:  var rbacClient *kubeclient.Clientset",
          "368:  defer func() {",
          "369:   if err != nil && rbacClient != nil {",
          "370:    fmt.Println(\"karmadactl register failed and started deleting the created resources\")",
          "371:    err = o.rbacResources.Delete(rbacClient)",
          "372:    if err != nil {",
          "373:     klog.Warningf(\"Failed to delete rbac resources: %v\", err)",
          "374:    }",
          "375:   }",
          "376:  }()",
          "378:  rbacClient, err = o.EnsureNecessaryResourcesExistInControlPlane(bootstrapClient, karmadaClusterInfo)",
          "383:  err = o.EnsureNecessaryResourcesExistInMemberCluster(bootstrapClient, karmadaClusterInfo)",
          "388:  fmt.Printf(\"\\ncluster(%s) is joined successfully\\n\", o.ClusterName)",
          "390:  return nil",
          "391: }",
          "394: func (o *CommandRegisterOption) EnsureNecessaryResourcesExistInControlPlane(bootstrapClient *kubeclient.Clientset, karmadaClusterInfo *clientcmdapi.Cluster) (*kubeclient.Clientset, error) {",
          "395:  csrName := \"agent-rbac-generator-\" + o.ClusterName + k8srand.String(5)",
          "396:  rbacCfg, err := o.constructAgentRBACGeneratorConfig(bootstrapClient, karmadaClusterInfo, csrName)",
          "397:  if err != nil {",
          "398:   return nil, err",
          "399:  }",
          "401:  kubelient, err := ToClientSet(rbacCfg)",
          "402:  if err != nil {",
          "403:   return nil, err",
          "404:  }",
          "405:  defer func() {",
          "406:   err = kubelient.CertificatesV1().CertificateSigningRequests().Delete(context.Background(), csrName, metav1.DeleteOptions{})",
          "407:   if err != nil {",
          "408:    klog.Warningf(\"Failed to delete CertificateSigningRequests %s: %v\", csrName, err)",
          "409:   }",
          "410:  }()",
          "412:  fmt.Println(\"[karmada-agent-start] Waiting to check cluster exists\")",
          "413:  karmadaClient, err := ToKarmadaClient(rbacCfg)",
          "414:  if err != nil {",
          "415:   return kubelient, err",
          "416:  }",
          "419:   return kubelient, err",
          "421:   return kubelient, fmt.Errorf(\"failed to register as cluster with name %s already exists\", o.ClusterName)",
          "422:  }",
          "424:  fmt.Println(\"[karmada-agent-start] Assign the necessary RBAC permissions to the agent\")",
          "425:  err = o.ensureAgentRBACResourcesExistInControlPlane(kubelient)",
          "426:  if err != nil {",
          "427:   return kubelient, err",
          "428:  }",
          "430:  return kubelient, nil",
          "431: }",
          "434: func (o *CommandRegisterOption) EnsureNecessaryResourcesExistInMemberCluster(bootstrapClient *kubeclient.Clientset, karmadaClusterInfo *clientcmdapi.Cluster) error {",
          "436:  fmt.Println(\"[karmada-agent-start] Waiting to construct karmada-agent kubeconfig\")",
          "437:  karmadaAgentCfg, err := o.constructKarmadaAgentConfig(bootstrapClient, karmadaClusterInfo)",
          "438:  if err != nil {",
          "439:   return err",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "382:   karmadautil.KarmadaSystemLabel: karmadautil.KarmadaSystemLabelValue,",
          "383:  }",
          "386:   return err",
          "387:  }",
          "390:  fmt.Println(\"[karmada-agent-start] Waiting the necessary secret and RBAC\")",
          "392:   return err",
          "393:  }",
          "396:  fmt.Println(\"[karmada-agent-start] Waiting karmada-agent Deployment\")",
          "397:  KarmadaAgentDeployment := o.makeKarmadaAgentDeployment()",
          "399:   return err",
          "400:  }",
          "403:   return err",
          "404:  }",
          "408:  return nil",
          "409: }",
          "",
          "[Removed Lines]",
          "385:  if _, err := karmadautil.EnsureNamespaceExistWithLabels(o.memberClusterClient, o.Namespace, o.DryRun, labels); err != nil {",
          "391:  if err := o.createSecretAndRBACInMemberCluster(karmadaAgentCfg); err != nil {",
          "398:  if _, err := o.memberClusterClient.AppsV1().Deployments(o.Namespace).Create(context.TODO(), KarmadaAgentDeployment, metav1.CreateOptions{}); err != nil {",
          "402:  if err := addonutils.WaitForDeploymentRollout(o.memberClusterClient, KarmadaAgentDeployment, int(o.Timeout)); err != nil {",
          "406:  fmt.Printf(\"\\ncluster(%s) is joined successfully\\n\", o.ClusterName)",
          "",
          "[Added Lines]",
          "447:  if _, err = karmadautil.EnsureNamespaceExistWithLabels(o.memberClusterClient, o.Namespace, o.DryRun, labels); err != nil {",
          "453:  if err = o.createSecretAndRBACInMemberCluster(karmadaAgentCfg); err != nil {",
          "460:  if _, err = o.memberClusterClient.AppsV1().Deployments(o.Namespace).Create(context.TODO(), KarmadaAgentDeployment, metav1.CreateOptions{}); err != nil {",
          "464:  if err = cmdutil.WaitForDeploymentRollout(o.memberClusterClient, KarmadaAgentDeployment, int(o.Timeout)); err != nil {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "505:  return bootstrapClient, clusterinfo, nil",
          "506: }",
          "510:  var cert []byte",
          "513:  if err != nil {",
          "514:   return nil, err",
          "515:  }",
          "",
          "[Removed Lines]",
          "509: func (o *CommandRegisterOption) constructKarmadaAgentConfig(bootstrapClient *kubeclient.Clientset, karmadaClusterInfo *clientcmdapi.Cluster) (*clientcmdapi.Config, error) {",
          "512:  pk, csr, err := generateKeyAndCSR(o.ClusterName)",
          "",
          "[Added Lines]",
          "569: func (o *CommandRegisterOption) ensureAgentRBACResourcesExistInControlPlane(client kubeclient.Interface) error {",
          "570:  for i := range o.rbacResources.ClusterRoles {",
          "571:   _, err := karmadautil.CreateClusterRole(client, o.rbacResources.ClusterRoles[i])",
          "572:   if err != nil {",
          "573:    return err",
          "574:   }",
          "575:  }",
          "576:  for i := range o.rbacResources.ClusterRoleBindings {",
          "577:   _, err := karmadautil.CreateClusterRoleBinding(client, o.rbacResources.ClusterRoleBindings[i])",
          "578:   if err != nil {",
          "579:    return err",
          "580:   }",
          "581:  }",
          "583:  for i := range o.rbacResources.Roles {",
          "584:   roleNamespace := &corev1.Namespace{",
          "585:    ObjectMeta: metav1.ObjectMeta{",
          "586:     Name: o.rbacResources.Roles[i].GetNamespace(),",
          "587:     Labels: map[string]string{",
          "588:      karmadautil.KarmadaSystemLabel: karmadautil.KarmadaSystemLabelValue,",
          "589:     },",
          "590:    },",
          "591:   }",
          "592:   _, err := karmadautil.CreateNamespace(client, roleNamespace)",
          "593:   if err != nil {",
          "594:    return err",
          "595:   }",
          "596:   _, err = karmadautil.CreateRole(client, o.rbacResources.Roles[i])",
          "597:   if err != nil {",
          "598:    return err",
          "599:   }",
          "600:  }",
          "602:  for i := range o.rbacResources.RoleBindings {",
          "603:   _, err := karmadautil.CreateRoleBinding(client, o.rbacResources.RoleBindings[i])",
          "604:   if err != nil {",
          "605:    return err",
          "606:   }",
          "607:  }",
          "609:  return nil",
          "610: }",
          "613: type RBACResources struct {",
          "614:  ClusterRoles        []*rbacv1.ClusterRole",
          "615:  ClusterRoleBindings []*rbacv1.ClusterRoleBinding",
          "616:  Roles               []*rbacv1.Role",
          "617:  RoleBindings        []*rbacv1.RoleBinding",
          "618: }",
          "621: func GenerateRBACResources(clusterName, clusterNamespace string) *RBACResources {",
          "622:  return &RBACResources{",
          "623:   ClusterRoles:        []*rbacv1.ClusterRole{GenerateClusterRole(clusterName)},",
          "624:   ClusterRoleBindings: []*rbacv1.ClusterRoleBinding{GenerateClusterRoleBinding(clusterName)},",
          "625:   Roles:               []*rbacv1.Role{GenerateSecretAccessRole(clusterName, clusterNamespace), GenerateWorkAccessRole(clusterName)},",
          "626:   RoleBindings:        []*rbacv1.RoleBinding{GenerateSecretAccessRoleBinding(clusterName, clusterNamespace), GenerateWorkAccessRoleBinding(clusterName)},",
          "627:  }",
          "628: }",
          "631: func (r *RBACResources) List() []Obj {",
          "632:  var obj []Obj",
          "633:  for i := range r.ClusterRoles {",
          "634:   obj = append(obj, Obj{Kind: \"ClusterRole\", Name: r.ClusterRoles[i].GetName()})",
          "635:  }",
          "636:  for i := range r.ClusterRoleBindings {",
          "637:   obj = append(obj, Obj{Kind: \"ClusterRoleBinding\", Name: r.ClusterRoleBindings[i].GetName()})",
          "638:  }",
          "639:  for i := range r.Roles {",
          "640:   obj = append(obj, Obj{Kind: \"Role\", Name: r.Roles[i].GetName(), Namespace: r.Roles[i].GetNamespace()})",
          "641:  }",
          "642:  for i := range r.RoleBindings {",
          "643:   obj = append(obj, Obj{Kind: \"RoleBinding\", Name: r.RoleBindings[i].GetName(), Namespace: r.RoleBindings[i].GetNamespace()})",
          "644:  }",
          "645:  return obj",
          "646: }",
          "649: func (r *RBACResources) ToString() string {",
          "650:  var resources []string",
          "651:  for i := range r.List() {",
          "652:   resources = append(resources, r.List()[i].ToString())",
          "653:  }",
          "654:  return strings.Join(resources, \"\\n\")",
          "655: }",
          "658: func (r *RBACResources) Delete(client kubeclient.Interface) error {",
          "659:  var err error",
          "660:  for _, resource := range r.List() {",
          "661:   switch resource.Kind {",
          "662:   case \"ClusterRole\":",
          "663:    err = karmadautil.DeleteClusterRole(client, resource.Name)",
          "664:   case \"ClusterRoleBinding\":",
          "665:    err = karmadautil.DeleteClusterRoleBinding(client, resource.Name)",
          "666:   case \"Role\":",
          "667:    err = karmadautil.DeleteRole(client, resource.Namespace, resource.Name)",
          "668:   case \"RoleBinding\":",
          "669:    err = karmadautil.DeleteRoleBinding(client, resource.Namespace, resource.Name)",
          "670:   }",
          "671:   if err != nil {",
          "672:    return err",
          "673:   }",
          "674:  }",
          "675:  return nil",
          "676: }",
          "679: type Obj struct{ Kind, Name, Namespace string }",
          "682: func (o *Obj) ToString() string {",
          "683:  if o.Namespace == \"\" {",
          "684:   return fmt.Sprintf(\"%s/%s\", o.Kind, o.Name)",
          "685:  }",
          "686:  return fmt.Sprintf(\"%s/%s/%s\", o.Kind, o.Namespace, o.Name)",
          "687: }",
          "690: func GenerateClusterRole(clusterName string) *rbacv1.ClusterRole {",
          "691:  clusterRoleName := fmt.Sprintf(\"system:karmada:%s:agent\", clusterName)",
          "692:  return &rbacv1.ClusterRole{",
          "693:   TypeMeta: metav1.TypeMeta{",
          "694:    APIVersion: rbacv1.SchemeGroupVersion.String(),",
          "695:    Kind:       \"ClusterRole\",",
          "696:   },",
          "697:   ObjectMeta: metav1.ObjectMeta{",
          "698:    Name: clusterRoleName,",
          "699:   },",
          "700:   Rules: []rbacv1.PolicyRule{",
          "701:    {",
          "702:     APIGroups:     []string{\"cluster.karmada.io\"},",
          "703:     Resources:     []string{\"clusters\"},",
          "704:     ResourceNames: []string{clusterName},",
          "705:     Verbs:         []string{\"get\", \"delete\"},",
          "706:    },",
          "707:    {",
          "708:     APIGroups: []string{\"cluster.karmada.io\"},",
          "709:     Resources: []string{\"clusters\"},",
          "710:     Verbs:     []string{\"create\", \"list\", \"watch\"},",
          "711:    },",
          "712:    {",
          "713:     APIGroups:     []string{\"cluster.karmada.io\"},",
          "714:     Resources:     []string{\"clusters/status\"},",
          "715:     ResourceNames: []string{clusterName},",
          "716:     Verbs:         []string{\"update\"},",
          "717:    },",
          "718:    {",
          "719:     APIGroups: []string{\"config.karmada.io\"},",
          "720:     Resources: []string{\"resourceinterpreterwebhookconfigurations\", \"resourceinterpretercustomizations\"},",
          "721:     Verbs:     []string{\"get\", \"list\", \"watch\"},",
          "722:    },",
          "723:    {",
          "724:     APIGroups: []string{\"\"},",
          "725:     Resources: []string{\"namespaces\"},",
          "726:     Verbs:     []string{\"get\"},",
          "727:    },",
          "728:    {",
          "729:     APIGroups: []string{\"coordination.k8s.io\"},",
          "730:     Resources: []string{\"leases\"},",
          "731:     Verbs:     []string{\"get\", \"create\", \"update\"},",
          "732:    },",
          "733:    {",
          "734:     APIGroups: []string{\"certificates.k8s.io\"},",
          "735:     Resources: []string{\"certificatesigningrequests\"},",
          "736:     Verbs:     []string{\"get\", \"create\"},",
          "737:    },",
          "738:    {",
          "739:     APIGroups: []string{\"\"},",
          "740:     Resources: []string{\"services\"},",
          "741:     Verbs:     []string{\"list\", \"watch\"},",
          "742:    },",
          "743:    {",
          "744:     APIGroups: []string{\"\"},",
          "745:     Resources: []string{\"events\"},",
          "746:     Verbs:     []string{\"patch\", \"create\", \"update\"},",
          "747:    },",
          "748:   },",
          "749:  }",
          "750: }",
          "753: func GenerateClusterRoleBinding(clusterName string) *rbacv1.ClusterRoleBinding {",
          "754:  return &rbacv1.ClusterRoleBinding{",
          "755:   TypeMeta: metav1.TypeMeta{",
          "756:    APIVersion: \"rbac.authorization.k8s.io/v1\",",
          "757:    Kind:       \"ClusterRoleBinding\",",
          "758:   },",
          "759:   ObjectMeta: metav1.ObjectMeta{Name: fmt.Sprintf(\"system:karmada:%s:agent\", clusterName)},",
          "760:   Subjects: []rbacv1.Subject{",
          "761:    {",
          "762:     APIGroup: \"rbac.authorization.k8s.io\",",
          "763:     Kind:     \"User\",",
          "764:     Name:     generateAgentUserName(clusterName),",
          "765:    },",
          "766:   },",
          "767:   RoleRef: rbacv1.RoleRef{",
          "768:    APIGroup: \"rbac.authorization.k8s.io\",",
          "769:    Kind:     \"ClusterRole\",",
          "770:    Name:     fmt.Sprintf(\"system:karmada:%s:agent\", clusterName),",
          "771:   },",
          "772:  }",
          "773: }",
          "776: func GenerateSecretAccessRole(clusterName, clusterNamespace string) *rbacv1.Role {",
          "777:  secretAccessRoleName := fmt.Sprintf(\"system:karmada:%s:agent-secret\", clusterName)",
          "778:  return &rbacv1.Role{",
          "779:   ObjectMeta: metav1.ObjectMeta{",
          "780:    Name:      secretAccessRoleName,",
          "781:    Namespace: clusterNamespace,",
          "782:   },",
          "783:   Rules: []rbacv1.PolicyRule{",
          "784:    {",
          "785:     Verbs:         []string{\"get\", \"patch\"},",
          "786:     APIGroups:     []string{\"\"},",
          "787:     Resources:     []string{\"secrets\"},",
          "788:     ResourceNames: []string{clusterName, clusterName + \"-impersonator\"},",
          "789:    },",
          "790:    {",
          "791:     Verbs:     []string{\"create\"},",
          "792:     APIGroups: []string{\"\"},",
          "793:     Resources: []string{\"secrets\"},",
          "794:    },",
          "795:   },",
          "796:  }",
          "797: }",
          "800: func GenerateSecretAccessRoleBinding(clusterName, clusterNamespace string) *rbacv1.RoleBinding {",
          "801:  return &rbacv1.RoleBinding{",
          "802:   TypeMeta: metav1.TypeMeta{",
          "803:    APIVersion: \"rbac.authorization.k8s.io/v1\",",
          "804:    Kind:       \"RoleBinding\",",
          "805:   },",
          "806:   ObjectMeta: metav1.ObjectMeta{",
          "807:    Name:      fmt.Sprintf(\"system:karmada:%s:agent-secret\", clusterName),",
          "808:    Namespace: clusterNamespace,",
          "809:   },",
          "810:   Subjects: []rbacv1.Subject{",
          "811:    {",
          "812:     APIGroup: \"rbac.authorization.k8s.io\",",
          "813:     Kind:     \"User\",",
          "814:     Name:     generateAgentUserName(clusterName),",
          "815:    },",
          "816:   },",
          "817:   RoleRef: rbacv1.RoleRef{",
          "818:    APIGroup: \"rbac.authorization.k8s.io\",",
          "819:    Kind:     \"Role\",",
          "820:    Name:     fmt.Sprintf(\"system:karmada:%s:agent-secret\", clusterName),",
          "821:   },",
          "822:  }",
          "823: }",
          "826: func GenerateWorkAccessRole(clusterName string) *rbacv1.Role {",
          "827:  workAccessRoleName := fmt.Sprintf(\"system:karmada:%s:agent-work\", clusterName)",
          "828:  return &rbacv1.Role{",
          "829:   ObjectMeta: metav1.ObjectMeta{",
          "830:    Name:      workAccessRoleName,",
          "831:    Namespace: \"karmada-es-\" + clusterName,",
          "832:   },",
          "833:   Rules: []rbacv1.PolicyRule{",
          "834:    {",
          "835:     Verbs:     []string{\"get\", \"create\", \"list\", \"watch\", \"update\", \"delete\"},",
          "836:     APIGroups: []string{\"work.karmada.io\"},",
          "837:     Resources: []string{\"works\"},",
          "838:    },",
          "839:    {",
          "840:     Verbs:     []string{\"patch\", \"update\"},",
          "841:     APIGroups: []string{\"work.karmada.io\"},",
          "842:     Resources: []string{\"works/status\"},",
          "843:    },",
          "844:   },",
          "845:  }",
          "846: }",
          "849: func GenerateWorkAccessRoleBinding(clusterName string) *rbacv1.RoleBinding {",
          "850:  return &rbacv1.RoleBinding{",
          "851:   TypeMeta: metav1.TypeMeta{",
          "852:    APIVersion: \"rbac.authorization.k8s.io/v1\",",
          "853:    Kind:       \"RoleBinding\",",
          "854:   },",
          "855:   ObjectMeta: metav1.ObjectMeta{",
          "856:    Name:      fmt.Sprintf(\"system:karmada:%s:agent-work\", clusterName),",
          "857:    Namespace: \"karmada-es-\" + clusterName,",
          "858:   },",
          "859:   Subjects: []rbacv1.Subject{",
          "860:    {",
          "861:     APIGroup: \"rbac.authorization.k8s.io\",",
          "862:     Kind:     \"User\",",
          "863:     Name:     generateAgentUserName(clusterName),",
          "864:    },",
          "865:   },",
          "866:   RoleRef: rbacv1.RoleRef{",
          "867:    APIGroup: \"rbac.authorization.k8s.io\",",
          "868:    Kind:     \"Role\",",
          "869:    Name:     fmt.Sprintf(\"system:karmada:%s:agent-work\", clusterName),",
          "870:   },",
          "871:  }",
          "872: }",
          "874: func (o *CommandRegisterOption) constructKubeConfig(bootstrapClient *kubeclient.Clientset, karmadaClusterInfo *clientcmdapi.Cluster, csrName, commonName string, organization []string) (*clientcmdapi.Config, error) {",
          "877:  pk, csr, err := generateKeyAndCSR(commonName, organization)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "519:   return nil, err",
          "520:  }",
          "524:  certificateSigningRequest := &certificatesv1.CertificateSigningRequest{",
          "525:   ObjectMeta: metav1.ObjectMeta{",
          "526:    Name: csrName,",
          "",
          "[Removed Lines]",
          "522:  csrName := o.ClusterName + \"-\" + k8srand.String(5)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "547:  if err != nil {",
          "548:   return nil, err",
          "549:  }",
          "552:  err = wait.PollUntilContextTimeout(context.TODO(), 1*time.Second, o.Timeout, false, func(context.Context) (done bool, err error) {",
          "553:   csrOK, err := bootstrapClient.CertificatesV1().CertificateSigningRequests().Get(context.TODO(), csrName, metav1.GetOptions{})",
          "554:   if err != nil {",
          "556:   }",
          "558:   if csrOK.Status.Certificate != nil {",
          "560:    cert = csrOK.Status.Certificate",
          "561:    return true, nil",
          "562:   }",
          "565:   return false, nil",
          "566:  })",
          "567:  if err != nil {",
          "568:   return nil, err",
          "569:  }",
          "572:   karmadaClusterInfo.Server,",
          "573:   DefaultClusterName,",
          "574:   o.ClusterName,",
          "575:   karmadaClusterInfo.CertificateAuthorityData,",
          "576:   cert,",
          "577:   pkData,",
          "580:  kubeConfigFile := filepath.Join(KarmadaDir, KarmadaAgentKubeConfigFileName)",
          "",
          "[Removed Lines]",
          "551:  klog.V(1).Infof(\"Waiting for the client certificate to be issued\")",
          "555:    return false, fmt.Errorf(\"failed to get the cluster csr %s. err: %v\", o.ClusterName, err)",
          "559:    klog.V(1).Infof(\"Signing certificate successfully\")",
          "564:   klog.V(1).Infof(\"Waiting for the client certificate to be issued\")",
          "571:  karmadaAgentCfg := CreateWithCert(",
          "578:  )",
          "",
          "[Added Lines]",
          "913:  klog.V(1).Infof(fmt.Sprintf(\"Waiting for the client certificate %s to be issued\", csrName))",
          "917:    return false, fmt.Errorf(\"failed to get the cluster csr %s. err: %v\", csrName, err)",
          "921:    klog.V(1).Infof(fmt.Sprintf(\"Signing certificate of csr %s successfully\", csrName))",
          "926:   klog.V(1).Infof(fmt.Sprintf(\"Waiting for the client certificate of csr %s to be issued\", csrName))",
          "927:   klog.V(1).Infof(\"Approve the CSR %s manually by executing `kubectl certificate approve %s` on the control plane\", csrName, csrName)",
          "934:  return CreateWithCert(",
          "941:  ), nil",
          "942: }",
          "945: func (o *CommandRegisterOption) constructKarmadaAgentConfig(bootstrapClient *kubeclient.Clientset, karmadaClusterInfo *clientcmdapi.Cluster) (*clientcmdapi.Config, error) {",
          "946:  csrName := o.ClusterName + \"-\" + k8srand.String(5)",
          "948:  karmadaAgentCfg, err := o.constructKubeConfig(bootstrapClient, karmadaClusterInfo, csrName, generateAgentUserName(o.ClusterName), []string{ClusterPermissionGroups})",
          "949:  if err != nil {",
          "950:   return nil, err",
          "951:  }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "588:  return karmadaAgentCfg, nil",
          "589: }",
          "592: func (o *CommandRegisterOption) createSecretAndRBACInMemberCluster(karmadaAgentCfg *clientcmdapi.Config) error {",
          "593:  configBytes, err := clientcmd.Write(*karmadaAgentCfg)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "965: func (o *CommandRegisterOption) constructAgentRBACGeneratorConfig(bootstrapClient *kubeclient.Clientset, karmadaClusterInfo *clientcmdapi.Cluster, csrName string) (*clientcmdapi.Config, error) {",
          "966:  return o.constructKubeConfig(bootstrapClient, karmadaClusterInfo, csrName, AgentRBACGenerator, []string{ClusterPermissionGroups})",
          "967: }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "781: }",
          "785:  pk, err := rsa.GenerateKey(rand.Reader, 3072)",
          "786:  if err != nil {",
          "787:   return nil, nil, err",
          "",
          "[Removed Lines]",
          "784: func generateKeyAndCSR(clusterName string) (*rsa.PrivateKey, []byte, error) {",
          "",
          "[Added Lines]",
          "1162: func generateKeyAndCSR(commonName string, organization []string) (*rsa.PrivateKey, []byte, error) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "790:  csr, err := x509.CreateCertificateRequest(rand.Reader, &x509.CertificateRequest{",
          "791:   Subject: pkix.Name{",
          "794:   },",
          "795:  }, pk)",
          "796:  if err != nil {",
          "",
          "[Removed Lines]",
          "792:    CommonName:   ClusterPermissionPrefix + clusterName,",
          "793:    Organization: []string{ClusterPermissionGroups},",
          "",
          "[Added Lines]",
          "1170:    CommonName:   commonName,",
          "1171:    Organization: organization,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1071:  return karmadaClient, nil",
          "1072: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1452: func generateAgentUserName(clusterName string) string {",
          "1453:  return ClusterPermissionPrefix + clusterName",
          "1454: }",
          "",
          "---------------"
        ],
        "pkg/karmadactl/unregister/unregister.go||pkg/karmadactl/unregister/unregister.go": [
          "File: pkg/karmadactl/unregister/unregister.go -> pkg/karmadactl/unregister/unregister.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:  MemberClusterClient kubeclient.Interface",
          "138: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:  rbacResources *register.RBACResources",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:  if len(args) > 0 {",
          "158:   j.ClusterName = args[0]",
          "159:  }",
          "160:  return nil",
          "161: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:  j.rbacResources = register.GenerateRBACResources(j.ClusterName, j.ClusterNamespace)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:  return clientcmd.Load(agentConfigSecret.Data[fileName])",
          "304: }",
          "316: func (j *CommandUnregisterOption) RunUnregisterCluster() error {",
          "317:  if j.DryRun {",
          "318:   return nil",
          "319:  }",
          "324:   klog.Errorf(\"Failed to delete cluster object. cluster name: %s, error: %v\", j.ClusterName, err)",
          "325:   return err",
          "326:  }",
          "327:  klog.Infof(\"Successfully delete cluster object (%s) from control plane.\", j.ClusterName)",
          "330:  var err error",
          "331:  for _, resource := range j.listMemberClusterResources() {",
          "332:   switch resource.Kind {",
          "",
          "[Removed Lines]",
          "306: type obj struct{ Kind, Name, Namespace string }",
          "308: func (o *obj) ToString() string {",
          "309:  if o.Namespace == \"\" {",
          "310:   return fmt.Sprintf(\"%s/%s\", o.Kind, o.Name)",
          "311:  }",
          "312:  return fmt.Sprintf(\"%s/%s/%s\", o.Kind, o.Namespace, o.Name)",
          "313: }",
          "323:  if err := cmdutil.DeleteClusterObject(j.ControlPlaneKubeClient, j.ControlPlaneClient, j.ClusterName, j.Wait, j.DryRun, false); err != nil {",
          "",
          "[Added Lines]",
          "317:  start := time.Now()",
          "321:  err := cmdutil.EnsureWorksDeleted(j.ControlPlaneClient, names.GenerateExecutionSpaceName(j.ClusterName), j.Wait)",
          "322:  if err != nil {",
          "323:   klog.Errorf(\"Failed to delete works object. cluster name: %s, error: %v\", j.ClusterName, err)",
          "324:   return err",
          "325:  }",
          "326:  j.Wait = j.Wait - time.Since(start)",
          "330:  if err = cmdutil.DeleteClusterObject(j.ControlPlaneKubeClient, j.ControlPlaneClient, j.ClusterName, j.Wait, j.DryRun, false); err != nil {",
          "336:  if j.KarmadaConfig != \"\" {",
          "337:   if err = j.rbacResources.Delete(j.ControlPlaneKubeClient); err != nil {",
          "338:    klog.Errorf(\"Failed to delete karmada-agent RBAC resources from control plane. cluster name: %s, error: %v\", j.ClusterName, err)",
          "339:    return err",
          "340:   }",
          "341:   klog.Infof(\"Successfully delete karmada-agent RBAC resources from control plane. cluster name: %s\", j.ClusterName)",
          "342:  } else {",
          "343:   klog.Warningf(\"The RBAC resources on the control plane need to be manually cleaned up, including the following resources:\\n%s\", j.rbacResources.ToString())",
          "344:  }",
          "347:  if err = j.cleanupMemberClusterResources(); err != nil {",
          "348:   return err",
          "349:  }",
          "352:  localObsoleteFiles := []register.Obj{",
          "353:   {Kind: \"File\", Name: filepath.Join(register.KarmadaDir, register.KarmadaAgentKubeConfigFileName)},",
          "354:   {Kind: \"File\", Name: register.CACertPath},",
          "355:  }",
          "356:  for _, obj := range localObsoleteFiles {",
          "357:   if err = os.Remove(obj.Name); err != nil {",
          "358:    if os.IsNotExist(err) {",
          "359:     continue",
          "360:    }",
          "361:    klog.Errorf(\"Failed to delete local file (%v) in current node: %+v.\", obj.Name, err)",
          "362:    return err",
          "363:   }",
          "364:   klog.Infof(\"Successfully delete local file (%v) in current node.\", obj.Name)",
          "365:  }",
          "367:  return nil",
          "368: }",
          "371: func (j *CommandUnregisterOption) cleanupMemberClusterResources() error {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "350:   }",
          "351:   klog.Infof(\"Successfully delete resource (%v) from member cluster (%s).\", resource, j.ClusterName)",
          "352:  }",
          "371: }",
          "377:   {Kind: \"ServiceAccount\", Namespace: j.ClusterNamespace, Name: names.GenerateServiceAccountName(j.ClusterName)},",
          "378:   {Kind: \"ClusterRole\", Name: names.GenerateRoleName(names.GenerateServiceAccountName(j.ClusterName))},",
          "",
          "[Removed Lines]",
          "355:  localObsoleteFiles := []obj{",
          "356:   {Kind: \"File\", Name: filepath.Join(register.KarmadaDir, register.KarmadaAgentKubeConfigFileName)},",
          "357:   {Kind: \"File\", Name: register.CACertPath},",
          "358:  }",
          "359:  for _, obj := range localObsoleteFiles {",
          "360:   if err = os.Remove(obj.Name); err != nil {",
          "361:    if os.IsNotExist(err) {",
          "362:     continue",
          "363:    }",
          "364:    klog.Errorf(\"Failed to delete local file (%v) in current node: %+v.\", obj.Name, err)",
          "365:    return err",
          "366:   }",
          "367:   klog.Infof(\"Successfully delete local file (%v) in current node.\", obj.Name)",
          "368:  }",
          "370:  return nil",
          "374: func (j *CommandUnregisterOption) listMemberClusterResources() []obj {",
          "375:  return []obj{",
          "",
          "[Added Lines]",
          "395:  return err",
          "399: func (j *CommandUnregisterOption) listMemberClusterResources() []register.Obj {",
          "400:  return []register.Obj{",
          "",
          "---------------"
        ],
        "pkg/karmadactl/unregister/unregister_test.go||pkg/karmadactl/unregister/unregister_test.go": [
          "File: pkg/karmadactl/unregister/unregister_test.go -> pkg/karmadactl/unregister/unregister_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:    }",
          "217:    j.ControlPlaneClient = fakekarmadaclient.NewSimpleClientset(tt.clusterObject...)",
          "218:    j.MemberClusterClient = fake.NewSimpleClientset(tt.clusterResources...)",
          "219:    err := j.RunUnregisterCluster()",
          "220:    if (err == nil && tt.wantErr) || (err != nil && !tt.wantErr) {",
          "221:     t.Errorf(\"RunUnregisterCluster() error = %v, wantErr %v\", err, tt.wantErr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "219:    j.rbacResources = register.GenerateRBACResources(j.ClusterName, j.ClusterNamespace)",
          "",
          "---------------"
        ],
        "pkg/karmadactl/util/work.go||pkg/karmadactl/util/work.go": [
          "File: pkg/karmadactl/util/work.go -> pkg/karmadactl/util/work.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Copyright 2024 The Karmada Authors.",
          "4: Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5: you may not use this file except in compliance with the License.",
          "6: You may obtain a copy of the License at",
          "8:     http://www.apache.org/licenses/LICENSE-2.0",
          "10: Unless required by applicable law or agreed to in writing, software",
          "11: distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12: WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13: See the License for the specific language governing permissions and",
          "14: limitations under the License.",
          "17: package util",
          "19: import (",
          "20:  \"context\"",
          "21:  \"fmt\"",
          "22:  \"time\"",
          "24:  apierrors \"k8s.io/apimachinery/pkg/api/errors\"",
          "25:  metav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"",
          "26:  \"k8s.io/apimachinery/pkg/util/wait\"",
          "28:  karmadaclientset \"github.com/karmada-io/karmada/pkg/generated/clientset/versioned\"",
          "29: )",
          "32: func EnsureWorksDeleted(controlPlaneKarmadaClient karmadaclientset.Interface, namespace string,",
          "33:  timeout time.Duration) error {",
          "35:  err := wait.PollUntilContextTimeout(context.TODO(), 1*time.Second, timeout, false, func(context.Context) (done bool, err error) {",
          "36:   list, err := controlPlaneKarmadaClient.WorkV1alpha1().Works(namespace).List(context.TODO(), metav1.ListOptions{})",
          "37:   if err != nil {",
          "38:    return false, fmt.Errorf(\"failed to list work in namespace %s\", namespace)",
          "39:   }",
          "41:   if len(list.Items) == 0 {",
          "42:    return true, nil",
          "43:   }",
          "44:   for i := range list.Items {",
          "45:    work := &list.Items[i]",
          "46:    err = controlPlaneKarmadaClient.WorkV1alpha1().Works(namespace).Delete(context.TODO(), work.GetName(), metav1.DeleteOptions{})",
          "47:    if err != nil && !apierrors.IsNotFound(err) {",
          "48:     return false, fmt.Errorf(\"failed to delete the work(%s/%s)\", namespace, work.GetName())",
          "49:    }",
          "50:   }",
          "51:   return false, nil",
          "52:  })",
          "54:  return err",
          "55: }",
          "",
          "---------------"
        ],
        "pkg/util/rbac.go||pkg/util/rbac.go": [
          "File: pkg/util/rbac.go -> pkg/util/rbac.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:  return rules",
          "193: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: func CreateRole(client kubeclient.Interface, roleObj *rbacv1.Role) (*rbacv1.Role, error) {",
          "197:  createdObj, err := client.RbacV1().Roles(roleObj.GetNamespace()).Create(context.TODO(), roleObj, metav1.CreateOptions{})",
          "198:  if err != nil {",
          "199:   if apierrors.IsAlreadyExists(err) {",
          "200:    return roleObj, nil",
          "201:   }",
          "203:   return nil, err",
          "204:  }",
          "206:  return createdObj, nil",
          "207: }",
          "210: func CreateRoleBinding(client kubeclient.Interface, roleBindingObj *rbacv1.RoleBinding) (*rbacv1.RoleBinding, error) {",
          "211:  createdObj, err := client.RbacV1().RoleBindings(roleBindingObj.GetNamespace()).Create(context.TODO(), roleBindingObj, metav1.CreateOptions{})",
          "212:  if err != nil {",
          "213:   if apierrors.IsAlreadyExists(err) {",
          "214:    return roleBindingObj, nil",
          "215:   }",
          "217:   return nil, err",
          "218:  }",
          "220:  return createdObj, nil",
          "221: }",
          "224: func DeleteRole(client kubeclient.Interface, namespace, name string) error {",
          "225:  err := client.RbacV1().Roles(namespace).Delete(context.TODO(), name, metav1.DeleteOptions{})",
          "226:  if err != nil && !apierrors.IsNotFound(err) {",
          "227:   return err",
          "228:  }",
          "229:  return nil",
          "230: }",
          "233: func DeleteRoleBinding(client kubeclient.Interface, namespace, name string) error {",
          "234:  err := client.RbacV1().RoleBindings(namespace).Delete(context.TODO(), name, metav1.DeleteOptions{})",
          "235:  if err != nil && !apierrors.IsNotFound(err) {",
          "236:   return err",
          "237:  }",
          "238:  return nil",
          "239: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}