{
  "cve_id": "CVE-2024-48944",
  "cve_desc": "Server-Side Request Forgery (SSRF) vulnerability in Apache Kylin. Through a kylin server, an attacker may forge a request to invoke \"/kylin/api/xxx/diag\" api on another internal host and possibly get leaked information. There are two preconditions: 1) The attacker has got admin access to a kylin server; 2) Another internal host has the \"/kylin/api/xxx/diag\" api\n\nendpoint open for service.\n\n\nThis issue affects Apache Kylin: from 5.0.0 \nthrough \n\n5.0.1.\n\nUsers are recommended to upgrade to version 5.0.2, which fixes the issue.",
  "repo": "apache/kylin",
  "patch_hash": "4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
  "patch_info": {
    "commit_hash": "4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
    "files": [
      "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java"
    ],
    "message": "KYLIN-5644 fix diag api security, encryption changed from base64 to AES\n\nCo-authored-by: liang.hua <liang.hua@kyligence.io>",
    "before_after_code_files": [
      "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java||src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java||src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java"
    ]
  },
  "patch_diff": {
    "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java||src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java": [
      "File: src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java -> src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "81: import org.apache.kylin.common.msg.Message;",
      "82: import org.apache.kylin.common.msg.MsgPicker;",
      "83: import org.apache.kylin.common.persistence.transaction.TransactionException;",
      "84: import org.apache.kylin.common.util.JsonUtil;",
      "85: import org.apache.kylin.common.util.Pair;",
      "86: import org.apache.kylin.job.constant.JobStatusEnum;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84: import org.apache.kylin.common.util.EncryptUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "643:             if (StringUtils.isBlank(host) || host.startsWith(\"http://\")) {",
      "644:                 return host;",
      "645:             }",
      "647:         } catch (Exception e) {",
      "648:             logger.error(\"Failed to decode host, will use the original host name\");",
      "649:         }",
      "",
      "[Removed Lines]",
      "646:             return new String(Base64.decodeBase64(host), Charset.defaultCharset());",
      "",
      "[Added Lines]",
      "647:             String decryptValue = EncryptUtil.decrypt(new String(Base64.decodeBase64(host), Charset.defaultCharset()));",
      "648:             return StringUtils.isBlank(decryptValue) ? host : decryptValue;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "659:             if (!host.toLowerCase().startsWith(\"http\")) {",
      "660:                 host = \"http://\" + host;",
      "661:             }",
      "663:         } catch (Exception e) {",
      "664:             logger.error(\"Failed to encode host, will use the original host name\");",
      "665:         }",
      "",
      "[Removed Lines]",
      "662:             return Base64.encodeBase64String(host.getBytes(Charset.defaultCharset()));",
      "",
      "[Added Lines]",
      "664:             return Base64.encodeBase64String(EncryptUtil.encrypt(host).getBytes(Charset.defaultCharset()));",
      "",
      "---------------"
    ],
    "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java||src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java": [
      "File: src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java -> src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "311:         }",
      "312:         Assert.assertEquals(3, mockDataResponse.get(\"size\"));",
      "313:     }",
      "315: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "315:     @Test",
      "316:     public void testEncodeAndDecodeHost() {",
      "317:         Assert.assertTrue(nBasicController.encodeHost(\"\").isEmpty());",
      "318:         String host = \"localhost:7070\";",
      "319:         String encodeHost = nBasicController.encodeHost(host);",
      "320:         Assert.assertNotNull(encodeHost);",
      "321:         Assert.assertNotEquals(host, encodeHost);",
      "322:         String decodeHost = nBasicController.decodeHost(encodeHost);",
      "323:         Assert.assertEquals(\"http://\" + host, decodeHost);",
      "324:         Assert.assertEquals(\"ip\", nBasicController.decodeHost(\"ip\"));",
      "325:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f79e9fd1e323560d686182cdbad055227d85a5f4",
      "candidate_info": {
        "commit_hash": "f79e9fd1e323560d686182cdbad055227d85a5f4",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/f79e9fd1e323560d686182cdbad055227d85a5f4",
        "files": [
          "src/common-service/src/main/java/org/apache/kylin/rest/config/AppInitializer.java",
          "src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/EpochChangedListener.java",
          "src/core-common/src/main/java/org/apache/kylin/common/scheduler/ProjectSerialEventBus.java",
          "src/core-common/src/main/java/org/apache/kylin/common/scheduler/SchedulerEventNotifier.java",
          "src/core-common/src/test/java/org/apache/kylin/common/scheduler/ProjectSerialEventBusTest.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/epoch/EpochManager.java"
        ],
        "message": "KYLIN-5652 Fix out-of-order invocation of listeners on project epoch",
        "before_after_code_files": [
          "src/common-service/src/main/java/org/apache/kylin/rest/config/AppInitializer.java||src/common-service/src/main/java/org/apache/kylin/rest/config/AppInitializer.java",
          "src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/EpochChangedListener.java||src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/EpochChangedListener.java",
          "src/core-common/src/main/java/org/apache/kylin/common/scheduler/ProjectSerialEventBus.java||src/core-common/src/main/java/org/apache/kylin/common/scheduler/ProjectSerialEventBus.java",
          "src/core-common/src/main/java/org/apache/kylin/common/scheduler/SchedulerEventNotifier.java||src/core-common/src/main/java/org/apache/kylin/common/scheduler/SchedulerEventNotifier.java",
          "src/core-common/src/test/java/org/apache/kylin/common/scheduler/ProjectSerialEventBusTest.java||src/core-common/src/test/java/org/apache/kylin/common/scheduler/ProjectSerialEventBusTest.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/epoch/EpochManager.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/epoch/EpochManager.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/common-service/src/main/java/org/apache/kylin/rest/config/AppInitializer.java||src/common-service/src/main/java/org/apache/kylin/rest/config/AppInitializer.java": [
          "File: src/common-service/src/main/java/org/apache/kylin/rest/config/AppInitializer.java -> src/common-service/src/main/java/org/apache/kylin/rest/config/AppInitializer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import org.apache.kylin.common.persistence.metadata.JdbcAuditLogStore;",
          "34: import org.apache.kylin.common.persistence.transaction.EventListenerRegistry;",
          "35: import org.apache.kylin.common.scheduler.EventBusFactory;",
          "36: import org.apache.kylin.common.util.AddressUtil;",
          "37: import org.apache.kylin.common.util.HostInfoFetcher;",
          "38: import org.apache.kylin.engine.spark.filter.QueryFiltersCollector;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import org.apache.kylin.common.scheduler.ProjectSerialEventBus;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:                     new Date(System.currentTimeMillis() + kylinConfig.getGuardianHACheckInitDelay() * Constant.SECOND),",
          "186:                     kylinConfig.getGuardianHACheckInterval() * Constant.SECOND);",
          "187:         }",
          "188:     }",
          "190:     private void postInit() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:         taskScheduler.scheduleAtFixedRate(new ProjectSerialEventBus.TimingDispatcher(), ProjectSerialEventBus.TimingDispatcher.INTERVAL);",
          "",
          "---------------"
        ],
        "src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/EpochChangedListener.java||src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/EpochChangedListener.java": [
          "File: src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/EpochChangedListener.java -> src/common-service/src/main/java/org/apache/kylin/rest/config/initialize/EpochChangedListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: import java.io.IOException;",
          "21: import java.util.concurrent.atomic.AtomicBoolean;",
          "23: import org.apache.kylin.common.KylinConfig;",
          "24: import org.apache.kylin.common.persistence.ResourceStore;",
          "25: import org.apache.kylin.common.persistence.transaction.UnitOfWork;",
          "26: import org.apache.kylin.common.scheduler.EpochStartedNotifier;",
          "27: import org.apache.kylin.common.scheduler.ProjectControlledNotifier;",
          "28: import org.apache.kylin.common.scheduler.ProjectEscapedNotifier;",
          "29: import org.apache.kylin.job.engine.JobEngineConfig;",
          "30: import org.apache.kylin.job.execution.NExecutableManager;",
          "31: import org.apache.kylin.job.impl.threadpool.NDefaultScheduler;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.function.Consumer;",
          "25: import org.apache.kylin.common.exception.KylinRuntimeException;",
          "31: import org.apache.kylin.common.scheduler.SchedulerEventNotifier;",
          "32: import org.apache.kylin.guava30.shaded.common.eventbus.Subscribe;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44: import org.springframework.core.env.Environment;",
          "45: import org.springframework.stereotype.Component;",
          "48: import lombok.val;",
          "49: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "47: import org.apache.kylin.guava30.shaded.common.eventbus.Subscribe;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:     RecommendationTopNUpdateScheduler recommendationUpdateScheduler;",
          "72:     @Subscribe",
          "89:             }",
          "130:     }",
          "132:     @Subscribe",
          "133:     public void onProjectEscaped(ProjectEscapedNotifier notifier) {",
          "146:             }",
          "148:     }",
          "150:     @Subscribe",
          "",
          "[Removed Lines]",
          "73:     public void onProjectControlled(ProjectControlledNotifier notifier) throws IOException {",
          "74:         String project = notifier.getProject();",
          "75:         val kylinConfig = KylinConfig.getInstanceFromEnv();",
          "76:         val epochManager = EpochManager.getInstance();",
          "77:         if (!GLOBAL.equals(project)) {",
          "79:             if (!EpochManager.getInstance().checkEpochValid(project)) {",
          "80:                 log.warn(\"epoch:{} is invalid in project controlled\", project);",
          "81:                 return;",
          "82:             }",
          "84:             val oldScheduler = NDefaultScheduler.getInstance(project);",
          "86:             if (oldScheduler.hasStarted()",
          "87:                     && epochManager.checkEpochId(oldScheduler.getContext().getEpochId(), project)) {",
          "88:                 return;",
          "92:             if (oldScheduler.hasStarted()) {",
          "93:                 oldScheduler.forceShutdown();",
          "94:             }",
          "96:             log.info(\"start thread of project: {}\", project);",
          "97:             NDefaultScheduler scheduler = NDefaultScheduler.getInstance(project);",
          "98:             EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {",
          "99:                 scheduler.init(new JobEngineConfig(kylinConfig));",
          "100:                 if (!scheduler.hasStarted()) {",
          "101:                     throw new RuntimeException(\"Scheduler for \" + project + \" has not been started\");",
          "102:                 }",
          "103:                 StreamingScheduler ss = StreamingScheduler.getInstance(project);",
          "104:                 ss.init();",
          "105:                 if (!ss.getHasStarted().get()) {",
          "106:                     throw new RuntimeException(\"Streaming Scheduler for \" + project + \" has not been started\");",
          "107:                 }",
          "108:                 QueryHistoryTaskScheduler qhAccelerateScheduler = QueryHistoryTaskScheduler.getInstance(project);",
          "109:                 qhAccelerateScheduler.init();",
          "111:                 if (!qhAccelerateScheduler.hasStarted()) {",
          "112:                     throw new RuntimeException(",
          "113:                             \"Query history accelerate scheduler for \" + project + \" has not been started\");",
          "114:                 }",
          "115:                 recommendationUpdateScheduler.addProject(project);",
          "116:                 return 0;",
          "117:             }, project, 1);",
          "118:             scheduler.setHasFinishedTransactions(new AtomicBoolean(true));",
          "119:         } else {",
          "121:             CreateAdminUserUtils.createAllAdmins(userService, env);",
          "122:             InitUserGroupUtils.initUserGroups(env);",
          "123:             UnitOfWork.doInTransactionWithRetry(() -> {",
          "124:                 ResourceStore.getKylinMetaStore(KylinConfig.getInstanceFromEnv()).createMetaStoreUuidIfNotExist();",
          "125:                 return null;",
          "126:             }, \"\", 1);",
          "127:             InitResourceGroupUtils.initResourceGroup();",
          "128:             userAclService.syncAdminUserAcl();",
          "129:         }",
          "134:         String project = notifier.getProject();",
          "135:         val kylinConfig = KylinConfig.getInstanceFromEnv();",
          "136:         if (!GLOBAL.equals(project)) {",
          "137:             log.info(\"Shutdown related thread: {}\", project);",
          "138:             try {",
          "139:                 NExecutableManager.getInstance(kylinConfig, project).destoryAllProcess();",
          "140:                 QueryHistoryTaskScheduler.shutdownByProject(project);",
          "141:                 NDefaultScheduler.shutdownByProject(project);",
          "142:                 StreamingScheduler.shutdownByProject(project);",
          "143:                 recommendationUpdateScheduler.removeProject(project);",
          "144:             } catch (Exception e) {",
          "145:                 log.warn(\"error when shutdown \" + project + \" thread\", e);",
          "147:         }",
          "",
          "[Added Lines]",
          "76:     public void onProjectControlled(ProjectControlledNotifier notifier) {",
          "77:         wrapForCallbackInvocation(notifier, eventNotifier -> {",
          "78:             String project = notifier.getProject();",
          "79:             val kylinConfig = KylinConfig.getInstanceFromEnv();",
          "80:             val epochManager = EpochManager.getInstance();",
          "81:             if (!GLOBAL.equals(project)) {",
          "82:                 doOnProjectControlled(project, kylinConfig, epochManager);",
          "83:             } else {",
          "84:                 doOnGlobalControlled();",
          "86:         });",
          "91:         wrapForCallbackInvocation(notifier, eventNotifier -> {",
          "92:             String project = eventNotifier.getProject();",
          "93:             val kylinConfig = KylinConfig.getInstanceFromEnv();",
          "94:             if (!GLOBAL.equals(project)) {",
          "95:                 log.info(\"Shutdown related thread: {}\", project);",
          "96:                 try {",
          "97:                     NExecutableManager.getInstance(kylinConfig, project).destoryAllProcess();",
          "98:                     QueryHistoryTaskScheduler.shutdownByProject(project);",
          "99:                     NDefaultScheduler.shutdownByProject(project);",
          "100:                     StreamingScheduler.shutdownByProject(project);",
          "101:                     recommendationUpdateScheduler.removeProject(project);",
          "102:                 } catch (Exception e) {",
          "103:                     log.warn(\"error when shutdown \" + project + \" thread\", e);",
          "104:                 }",
          "106:         });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "153:         val resourceStore = ResourceStore.getKylinMetaStore(kylinConfig);",
          "154:         resourceStore.leaderCatchup();",
          "155:     }",
          "156: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     private void wrapForCallbackInvocation(SchedulerEventNotifier notifier, Consumer<SchedulerEventNotifier> consumer) {",
          "117:         try {",
          "118:             consumer.accept(notifier);",
          "119:         } finally {",
          "120:             notifier.invokeCallbackIfExists();",
          "121:         }",
          "122:     }",
          "124:     private void doOnGlobalControlled() {",
          "126:         try {",
          "127:             CreateAdminUserUtils.createAllAdmins(userService, env);",
          "128:         } catch (IOException e) {",
          "129:             throw new KylinRuntimeException(e);",
          "130:         }",
          "131:         InitUserGroupUtils.initUserGroups(env);",
          "132:         UnitOfWork.doInTransactionWithRetry(() -> {",
          "133:             ResourceStore.getKylinMetaStore(KylinConfig.getInstanceFromEnv()).createMetaStoreUuidIfNotExist();",
          "134:             return null;",
          "135:         }, \"\", 1);",
          "136:         InitResourceGroupUtils.initResourceGroup();",
          "137:         userAclService.syncAdminUserAcl();",
          "138:     }",
          "140:     private void doOnProjectControlled(String project, KylinConfig kylinConfig, EpochManager epochManager) {",
          "141:         if (!EpochManager.getInstance().checkEpochValid(project)) {",
          "142:             log.warn(\"epoch:{} is invalid in project controlled\", project);",
          "143:             return;",
          "144:         }",
          "146:         val oldScheduler = NDefaultScheduler.getInstance(project);",
          "148:         if (oldScheduler.hasStarted()",
          "149:                 && epochManager.checkEpochId(oldScheduler.getContext().getEpochId(), project)) {",
          "150:             return;",
          "151:         }",
          "154:         if (oldScheduler.hasStarted()) {",
          "155:             oldScheduler.forceShutdown();",
          "156:         }",
          "158:         log.info(\"start thread of project: {}\", project);",
          "159:         NDefaultScheduler scheduler = NDefaultScheduler.getInstance(project);",
          "160:         EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {",
          "161:             scheduler.init(new JobEngineConfig(kylinConfig));",
          "162:             if (!scheduler.hasStarted()) {",
          "163:                 throw new KylinRuntimeException(\"Scheduler for \" + project + \" has not been started\");",
          "164:             }",
          "165:             StreamingScheduler ss = StreamingScheduler.getInstance(project);",
          "166:             ss.init();",
          "167:             if (!ss.getHasStarted().get()) {",
          "168:                 throw new KylinRuntimeException(\"Streaming Scheduler for \" + project + \" has not been started\");",
          "169:             }",
          "170:             QueryHistoryTaskScheduler qhAccelerateScheduler = QueryHistoryTaskScheduler.getInstance(project);",
          "171:             qhAccelerateScheduler.init();",
          "173:             if (!qhAccelerateScheduler.hasStarted()) {",
          "174:                 throw new KylinRuntimeException(",
          "175:                         \"Query history accelerate scheduler for \" + project + \" has not been started\");",
          "176:             }",
          "177:             recommendationUpdateScheduler.addProject(project);",
          "178:             return 0;",
          "179:         }, project, 1);",
          "180:         scheduler.setHasFinishedTransactions(new AtomicBoolean(true));",
          "181:     }",
          "",
          "---------------"
        ],
        "src/core-common/src/main/java/org/apache/kylin/common/scheduler/ProjectSerialEventBus.java||src/core-common/src/main/java/org/apache/kylin/common/scheduler/ProjectSerialEventBus.java": [
          "File: src/core-common/src/main/java/org/apache/kylin/common/scheduler/ProjectSerialEventBus.java -> src/core-common/src/main/java/org/apache/kylin/common/scheduler/ProjectSerialEventBus.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.common.scheduler;",
          "21: import lombok.EqualsAndHashCode;",
          "22: import lombok.ToString;",
          "23: import lombok.extern.slf4j.Slf4j;",
          "24: import org.apache.kylin.common.Singletons;",
          "26: import java.time.Duration;",
          "27: import java.util.HashSet;",
          "28: import java.util.Iterator;",
          "29: import java.util.LinkedList;",
          "30: import java.util.Queue;",
          "31: import java.util.Set;",
          "32: import java.util.function.Consumer;",
          "34: @Slf4j",
          "35: public class ProjectSerialEventBus {",
          "37:     public static class TimingDispatcher implements Runnable {",
          "39:         public static final Duration INTERVAL = Duration.ofMinutes(10L);",
          "41:         @Override",
          "42:         public void run() {",
          "43:             log.info(\"ProjectSerialEventBus.TimingDispatcher invokes dispatch\");",
          "44:             ProjectSerialEventBus.getInstance().dispatch();",
          "45:         }",
          "46:     }",
          "49:     private static final long TIMEOUT_MILLISECONDS = 30L * 60L * 1000L;",
          "51:     public static ProjectSerialEventBus getInstance() {",
          "52:         return Singletons.getInstance(ProjectSerialEventBus.class);",
          "53:     }",
          "55:     private final EventBusFactory eventBus = EventBusFactory.getInstance();",
          "56:     private final Queue<SchedulerEventNotifier> eventsQueue = new LinkedList<>();",
          "57:     private final Set<RunningProject> runningProjects = new HashSet<>();",
          "58:     private final Consumer<SchedulerEventNotifier> finishProjectCallback = event -> finishProjectAndDispatch(event.getProject());",
          "60:     private ProjectSerialEventBus() {}",
          "62:     public synchronized void postAsync(SchedulerEventNotifier event) {",
          "63:         log.info(\"Post event {} on ProjectSerialEventBus\", event);",
          "64:         event.setCallback(finishProjectCallback);",
          "65:         eventsQueue.add(event);",
          "66:         if (!runningProjects.contains(RunningProject.wrapForComparison(event.getProject()))) {",
          "67:             dispatch();",
          "68:         }",
          "69:     }",
          "71:     public synchronized void dispatch() {",
          "73:         runningProjects.removeIf(RunningProject::isExpired);",
          "75:         Iterator<SchedulerEventNotifier> it = eventsQueue.iterator();",
          "76:         while (it.hasNext()) {",
          "77:             SchedulerEventNotifier e = it.next();",
          "78:             String project = e.getProject();",
          "79:             if (!runningProjects.contains(RunningProject.wrapForComparison(project))) {",
          "80:                 log.info(\"ProjectSerialEventBus dispatch event: {}\", e);",
          "81:                 eventBus.postAsync(e);",
          "82:                 runningProjects.add(RunningProject.newInstance(project));",
          "83:                 it.remove();",
          "84:             }",
          "85:         }",
          "86:     }",
          "88:     public synchronized void finishProjectAndDispatch(String project) {",
          "89:         log.info(\"ProjectSerialEventBus project({}) event finished\", project);",
          "90:         runningProjects.remove(RunningProject.wrapForComparison(project));",
          "91:         dispatch();",
          "92:     }",
          "94:     @EqualsAndHashCode",
          "95:     @ToString",
          "96:     static class RunningProject {",
          "98:         static RunningProject newInstance(String project) {",
          "99:             return new RunningProject(project, System.currentTimeMillis());",
          "100:         }",
          "102:         static RunningProject wrapForComparison(String project) {",
          "103:             return new RunningProject(project, -1L);",
          "104:         }",
          "106:         private final String project;",
          "108:         @EqualsAndHashCode.Exclude",
          "109:         private final long beginTime;",
          "111:         private RunningProject(String project, long beginTime) {",
          "112:             this.project = project;",
          "113:             this.beginTime = beginTime;",
          "114:         }",
          "116:         boolean isExpired() {",
          "117:             if (System.currentTimeMillis() - beginTime > TIMEOUT_MILLISECONDS) {",
          "118:                 log.warn(\"ProjectSerialEventBus RunningProject expired: {}\", this);",
          "119:                 return true;",
          "120:             }",
          "121:             return false;",
          "122:         }",
          "123:     }",
          "124: }",
          "",
          "---------------"
        ],
        "src/core-common/src/main/java/org/apache/kylin/common/scheduler/SchedulerEventNotifier.java||src/core-common/src/main/java/org/apache/kylin/common/scheduler/SchedulerEventNotifier.java": [
          "File: src/core-common/src/main/java/org/apache/kylin/common/scheduler/SchedulerEventNotifier.java -> src/core-common/src/main/java/org/apache/kylin/common/scheduler/SchedulerEventNotifier.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.common.scheduler;",
          "21: import java.util.Locale;",
          "23: import lombok.AllArgsConstructor;",
          "24: import lombok.Getter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.function.Consumer;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:     protected String project;",
          "35:     protected String subject;",
          "37:     public String getEventType() {",
          "38:         return this.getClass().getSimpleName();",
          "39:     }",
          "41:     @Override",
          "42:     public String toString() {",
          "44:     }",
          "45: }",
          "",
          "[Removed Lines]",
          "43:         return String.format(Locale.ROOT, \"%s {project=%s, subject=%s}\", getEventType(), project, subject);",
          "",
          "[Added Lines]",
          "37:     protected Consumer<SchedulerEventNotifier> callback;",
          "43:     public void invokeCallbackIfExists() {",
          "44:         if (callback != null) {",
          "45:             callback.accept(this);",
          "46:         }",
          "47:     }",
          "51:         return String.format(Locale.ROOT, \"%s {project=%s, subject=%s, callback=%s}\", getEventType(), project,",
          "52:                 subject, callback);",
          "",
          "---------------"
        ],
        "src/core-common/src/test/java/org/apache/kylin/common/scheduler/ProjectSerialEventBusTest.java||src/core-common/src/test/java/org/apache/kylin/common/scheduler/ProjectSerialEventBusTest.java": [
          "File: src/core-common/src/test/java/org/apache/kylin/common/scheduler/ProjectSerialEventBusTest.java -> src/core-common/src/test/java/org/apache/kylin/common/scheduler/ProjectSerialEventBusTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.common.scheduler;",
          "21: import static org.junit.jupiter.api.Assertions.assertEquals;",
          "22: import static org.junit.jupiter.api.Assertions.assertTrue;",
          "23: import static org.mockito.Mockito.mock;",
          "24: import static org.mockito.Mockito.spy;",
          "25: import static org.mockito.Mockito.times;",
          "26: import static org.mockito.Mockito.verify;",
          "28: import java.util.LinkedList;",
          "29: import java.util.Set;",
          "31: import org.apache.kylin.junit.annotation.MetadataInfo;",
          "32: import org.junit.jupiter.api.BeforeEach;",
          "33: import org.junit.jupiter.api.Test;",
          "34: import org.springframework.test.util.ReflectionTestUtils;",
          "36: @MetadataInfo",
          "37: public class ProjectSerialEventBusTest {",
          "39:     private ProjectSerialEventBus projectSerialEventBus;",
          "41:     private EventBusFactory eventBusFactory;",
          "43:     @BeforeEach",
          "44:     public void setUp() throws Exception {",
          "45:         projectSerialEventBus = spy(ProjectSerialEventBus.getInstance());",
          "46:         eventBusFactory = mock(EventBusFactory.class);",
          "47:         ReflectionTestUtils.setField(projectSerialEventBus, \"eventBus\", eventBusFactory);",
          "48:     }",
          "50:     @Test",
          "51:     @SuppressWarnings(\"unchecked\")",
          "52:     void testInnerQueueStatus() throws Exception {",
          "53:         LinkedList<SchedulerEventNotifier> innerEventsQueue = (LinkedList<SchedulerEventNotifier>) ReflectionTestUtils",
          "54:                 .getField(projectSerialEventBus, \"eventsQueue\");",
          "55:         Set<ProjectSerialEventBus.RunningProject> runningProjects = (Set<ProjectSerialEventBus.RunningProject>) ReflectionTestUtils",
          "56:                 .getField(projectSerialEventBus, \"runningProjects\");",
          "58:         projectSerialEventBus.postAsync(new ProjectEscapedNotifier(\"project1\"));",
          "59:         assertEquals(1, runningProjects.size());",
          "60:         projectSerialEventBus.postAsync(new ProjectControlledNotifier(\"project1\"));",
          "61:         assertEquals(1, runningProjects.size());",
          "62:         projectSerialEventBus.postAsync(new ProjectEscapedNotifier(\"project2\"));",
          "63:         assertEquals(2, runningProjects.size());",
          "64:         projectSerialEventBus.postAsync(new ProjectControlledNotifier(\"project2\"));",
          "65:         assertEquals(2, runningProjects.size());",
          "67:         verify(projectSerialEventBus, times(2)).dispatch();",
          "68:         assertEquals(2, innerEventsQueue.size());",
          "69:         assertEquals(\"project1\", innerEventsQueue.get(0).getProject());",
          "70:         assertTrue(innerEventsQueue.get(0) instanceof ProjectControlledNotifier);",
          "71:         assertEquals(\"project2\", innerEventsQueue.get(1).getProject());",
          "72:         assertTrue(innerEventsQueue.get(1) instanceof ProjectControlledNotifier);",
          "74:         projectSerialEventBus.finishProjectAndDispatch(\"project1\");",
          "75:         assertEquals(2, runningProjects.size());",
          "76:         projectSerialEventBus.finishProjectAndDispatch(\"project2\");",
          "77:         assertEquals(2, runningProjects.size());",
          "79:         assertEquals(0, innerEventsQueue.size());",
          "81:         projectSerialEventBus.finishProjectAndDispatch(\"project1\");",
          "82:         assertEquals(1, runningProjects.size());",
          "83:         projectSerialEventBus.finishProjectAndDispatch(\"project2\");",
          "84:         assertEquals(0, runningProjects.size());",
          "85:     }",
          "87:     @Test",
          "88:     @SuppressWarnings(\"unchecked\")",
          "89:     void testTimingDispatcherRun() {",
          "90:         LinkedList<SchedulerEventNotifier> innerEventsQueue = (LinkedList<SchedulerEventNotifier>) ReflectionTestUtils",
          "91:                 .getField(projectSerialEventBus, \"eventsQueue\");",
          "92:         Set<ProjectSerialEventBus.RunningProject> runningProjects = (Set<ProjectSerialEventBus.RunningProject>) ReflectionTestUtils",
          "93:                 .getField(projectSerialEventBus, \"runningProjects\");",
          "95:         innerEventsQueue.add(new ProjectEscapedNotifier(\"project1\"));",
          "96:         assertEquals(1, innerEventsQueue.size());",
          "97:         assertEquals(0, runningProjects.size());",
          "99:         new ProjectSerialEventBus.TimingDispatcher().run();",
          "101:         assertEquals(0, innerEventsQueue.size());",
          "102:         assertEquals(1, runningProjects.size());",
          "103:     }",
          "105:     @Test",
          "106:     void testRunningProjectExpired() {",
          "107:         ProjectSerialEventBus.RunningProject rp = ProjectSerialEventBus.RunningProject.newInstance(\"project1\");",
          "108:         final long DURATION_31_MINUTES_MILLIS = 31L * 60L * 1000L;",
          "109:         ReflectionTestUtils.setField(rp, \"beginTime\", System.currentTimeMillis() - DURATION_31_MINUTES_MILLIS);",
          "110:         assertTrue(rp.isExpired());",
          "111:     }",
          "112: }",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/epoch/EpochManager.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/epoch/EpochManager.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/epoch/EpochManager.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/epoch/EpochManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: import org.apache.kylin.common.scheduler.EventBusFactory;",
          "55: import org.apache.kylin.common.scheduler.ProjectControlledNotifier;",
          "56: import org.apache.kylin.common.scheduler.ProjectEscapedNotifier;",
          "57: import org.apache.kylin.common.scheduler.SourceUsageVerifyNotifier;",
          "58: import org.apache.kylin.common.util.AddressUtil;",
          "59: import org.apache.kylin.common.util.NamedThreadFactory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: import org.apache.kylin.common.scheduler.ProjectSerialEventBus;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:     private final KylinConfig config;",
          "96:     private String identity;",
          "97:     private final EventBusFactory eventBusFactory;",
          "98:     private final String serverMode;",
          "99:     private final boolean epochCheckEnabled;",
          "100:     private final long epochExpiredTime;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:     private final ProjectSerialEventBus projectSerialEventBus;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:         this.config = KylinConfig.readSystemKylinConfig();",
          "112:         this.identity = EpochOrchestrator.getOwnerIdentity();",
          "113:         this.eventBusFactory = EventBusFactory.getInstance();",
          "114:         this.epochStore = EpochStore.getEpochStore(config);",
          "115:         this.serverMode = config.getServerMode();",
          "116:         this.epochCheckEnabled = config.getEpochCheckerEnabled();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:         this.projectSerialEventBus = ProjectSerialEventBus.getInstance();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "358:             }",
          "360:             for (String project : escapedProjects) {",
          "362:             }",
          "364:             try (SetLogCategory ignored = new SetLogCategory(LogConstant.METADATA_CATEGORY)) {",
          "",
          "[Removed Lines]",
          "361:                 eventBusFactory.postAsync(new ProjectEscapedNotifier(project));",
          "",
          "[Added Lines]",
          "364:                 projectSerialEventBus.postAsync(new ProjectEscapedNotifier(project));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "379:                         logger.debug(\"after {} controlled projects: {}\", updateTypeName,",
          "380:                             String.join(\",\", newControlledProjects));",
          "381:                     }",
          "383:                 }",
          "384:             }",
          "",
          "[Removed Lines]",
          "382:                     newControlledProjects.forEach(p -> eventBusFactory.postAsync(new ProjectControlledNotifier(p)));",
          "",
          "[Added Lines]",
          "385:                     newControlledProjects.forEach(p -> projectSerialEventBus.postAsync(new ProjectControlledNotifier(p)));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "680:     public void updateEpochWithNotifier(String epochTarget, boolean force) {",
          "681:         EpochUpdateLockManager.executeEpochWithLock(epochTarget, () -> {",
          "682:             if (tryUpdateEpoch(epochTarget, force)) {",
          "684:             }",
          "685:             return null;",
          "686:         });",
          "",
          "[Removed Lines]",
          "683:                 eventBusFactory.postAsync(new ProjectControlledNotifier(epochTarget));",
          "",
          "[Added Lines]",
          "686:                 projectSerialEventBus.postAsync(new ProjectControlledNotifier(epochTarget));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ada7c4ee26cba3523d2af78039b1f72e5becc507",
      "candidate_info": {
        "commit_hash": "ada7c4ee26cba3523d2af78039b1f72e5becc507",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/ada7c4ee26cba3523d2af78039b1f72e5becc507",
        "files": [
          "src/query-server/src/main/java/org/apache/kylin/rest/controller/QueryResourceController.java",
          "src/query-server/src/test/java/org/apache/kylin/rest/controller/QueryResourceControllerTest.java",
          "src/query-service/src/main/java/org/apache/kylin/rest/service/QueryResourceService.java",
          "src/query-service/src/test/java/org/apache/kylin/rest/service/QueryResourceServiceTest.java",
          "src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala"
        ],
        "message": "KYLIN-5634 Query node capacity expansion and reduction",
        "before_after_code_files": [
          "src/query-server/src/main/java/org/apache/kylin/rest/controller/QueryResourceController.java||src/query-server/src/main/java/org/apache/kylin/rest/controller/QueryResourceController.java",
          "src/query-server/src/test/java/org/apache/kylin/rest/controller/QueryResourceControllerTest.java||src/query-server/src/test/java/org/apache/kylin/rest/controller/QueryResourceControllerTest.java",
          "src/query-service/src/main/java/org/apache/kylin/rest/service/QueryResourceService.java||src/query-service/src/main/java/org/apache/kylin/rest/service/QueryResourceService.java",
          "src/query-service/src/test/java/org/apache/kylin/rest/service/QueryResourceServiceTest.java||src/query-service/src/test/java/org/apache/kylin/rest/service/QueryResourceServiceTest.java",
          "src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala||src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/query-server/src/main/java/org/apache/kylin/rest/controller/QueryResourceController.java||src/query-server/src/main/java/org/apache/kylin/rest/controller/QueryResourceController.java": [
          "File: src/query-server/src/main/java/org/apache/kylin/rest/controller/QueryResourceController.java -> src/query-server/src/main/java/org/apache/kylin/rest/controller/QueryResourceController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.kylin.rest.controller;",
          "20: import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_JSON;",
          "21: import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON;",
          "23: import org.apache.kylin.rest.service.QueryResourceService;",
          "24: import org.apache.kylin.rest.service.QueryResourceService.QueryResource;",
          "25: import org.springframework.beans.factory.annotation.Autowired;",
          "26: import org.springframework.web.bind.annotation.GetMapping;",
          "27: import org.springframework.web.bind.annotation.PutMapping;",
          "28: import org.springframework.web.bind.annotation.RequestBody;",
          "29: import org.springframework.web.bind.annotation.RequestMapping;",
          "30: import org.springframework.web.bind.annotation.ResponseBody;",
          "31: import org.springframework.web.bind.annotation.RestController;",
          "33: @RestController",
          "34: @RequestMapping(value = \"/api/resource/query\", produces = { HTTP_VND_APACHE_KYLIN_JSON,",
          "35:         HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON })",
          "36: public class QueryResourceController {",
          "38:     @Autowired",
          "39:     private QueryResourceService queryResourceService;",
          "41:     @PutMapping(value = \"/adjust\")",
          "42:     @ResponseBody",
          "43:     public QueryResourceService.QueryResource adjustQueryResource(@RequestBody QueryResource resource) {",
          "44:         if (queryResourceService.isAvailable()) {",
          "45:             return queryResourceService.adjustQueryResource(resource);",
          "46:         }",
          "47:         return new QueryResource();",
          "48:     }",
          "50:     @GetMapping(value = \"/executor\")",
          "51:     @ResponseBody",
          "52:     public int getExecutorSize() {",
          "53:         if (queryResourceService.isAvailable()) {",
          "54:             return queryResourceService.getExecutorSize();",
          "55:         }",
          "56:         return -1;",
          "57:     }",
          "59: }",
          "",
          "---------------"
        ],
        "src/query-server/src/test/java/org/apache/kylin/rest/controller/QueryResourceControllerTest.java||src/query-server/src/test/java/org/apache/kylin/rest/controller/QueryResourceControllerTest.java": [
          "File: src/query-server/src/test/java/org/apache/kylin/rest/controller/QueryResourceControllerTest.java -> src/query-server/src/test/java/org/apache/kylin/rest/controller/QueryResourceControllerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.rest.controller;",
          "21: import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_JSON;",
          "23: import org.apache.kylin.common.util.JsonUtil;",
          "24: import org.apache.kylin.rest.service.QueryResourceService;",
          "25: import org.junit.Assert;",
          "26: import org.junit.Before;",
          "27: import org.junit.Test;",
          "28: import org.mockito.InjectMocks;",
          "29: import org.mockito.Mock;",
          "30: import org.mockito.Mockito;",
          "31: import org.mockito.MockitoAnnotations;",
          "32: import org.springframework.http.MediaType;",
          "33: import org.springframework.test.util.ReflectionTestUtils;",
          "34: import org.springframework.test.web.servlet.MockMvc;",
          "35: import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;",
          "36: import org.springframework.test.web.servlet.result.MockMvcResultMatchers;",
          "37: import org.springframework.test.web.servlet.setup.MockMvcBuilders;",
          "39: public class QueryResourceControllerTest {",
          "41:     private MockMvc mockMvc;",
          "43:     @InjectMocks",
          "44:     private QueryResourceController queryResourceController = Mockito.spy(new QueryResourceController());",
          "45:     @Mock",
          "46:     private QueryResourceService queryResourceService;",
          "48:     @Before",
          "49:     public void setup() {",
          "50:         MockitoAnnotations.initMocks(this);",
          "51:         mockMvc = MockMvcBuilders.standaloneSetup(queryResourceController)",
          "52:                 .defaultRequest(MockMvcRequestBuilders.get(\"/\")).build();",
          "53:         ReflectionTestUtils.setField(queryResourceController, \"queryResourceService\", queryResourceService);",
          "54:     }",
          "56:     @Test",
          "57:     public void testAdjustQueryResource() throws Exception {",
          "58:         QueryResourceService.QueryResource queryResource = new QueryResourceService.QueryResource();",
          "59:         queryResource.setInstance(1);",
          "60:         mockMvc.perform(MockMvcRequestBuilders.put(\"/api/resource/query/adjust\").contentType(MediaType.APPLICATION_JSON)",
          "61:                 .content(JsonUtil.writeValueAsString(queryResource))",
          "62:                 .accept(MediaType.parseMediaType(HTTP_VND_APACHE_KYLIN_JSON)))",
          "63:                 .andExpect(MockMvcResultMatchers.status().isOk());",
          "65:         Mockito.verify(queryResourceController).adjustQueryResource(Mockito.any());",
          "66:         Mockito.when(queryResourceService.isAvailable()).thenReturn(true);",
          "67:         Mockito.when(queryResourceService.adjustQueryResource(queryResource)).thenReturn(queryResource);",
          "68:         Assert.assertEquals(queryResource.getInstance(),",
          "69:                 queryResourceController.adjustQueryResource(queryResource).getInstance());",
          "70:     }",
          "72:     @Test",
          "73:     public void testGetExecutorSize() throws Exception {",
          "74:         mockMvc.perform(MockMvcRequestBuilders.get(\"/api/resource/query/executor\")",
          "75:                 .contentType(MediaType.APPLICATION_JSON).accept(MediaType.parseMediaType(HTTP_VND_APACHE_KYLIN_JSON)))",
          "76:                 .andExpect(MockMvcResultMatchers.status().isOk());",
          "77:         Mockito.verify(queryResourceController).getExecutorSize();",
          "78:         Mockito.when(queryResourceService.isAvailable()).thenReturn(true);",
          "79:         Mockito.when(queryResourceService.getExecutorSize()).thenReturn(1);",
          "80:         Assert.assertEquals(1, queryResourceController.getExecutorSize());",
          "81:     }",
          "82: }",
          "",
          "---------------"
        ],
        "src/query-service/src/main/java/org/apache/kylin/rest/service/QueryResourceService.java||src/query-service/src/main/java/org/apache/kylin/rest/service/QueryResourceService.java": [
          "File: src/query-service/src/main/java/org/apache/kylin/rest/service/QueryResourceService.java -> src/query-service/src/main/java/org/apache/kylin/rest/service/QueryResourceService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: package org.apache.kylin.rest.service;",
          "20: import java.util.ArrayList;",
          "22: import org.apache.spark.ExecutorAllocationClient;",
          "23: import org.apache.spark.sql.SparderEnv;",
          "24: import org.springframework.stereotype.Component;",
          "26: import lombok.AllArgsConstructor;",
          "27: import lombok.Data;",
          "28: import lombok.NoArgsConstructor;",
          "29: import lombok.val;",
          "30: import lombok.extern.slf4j.Slf4j;",
          "31: import scala.collection.JavaConverters;",
          "33: @Slf4j",
          "34: @Component",
          "35: public class QueryResourceService {",
          "37:     public QueryResource adjustQueryResource(QueryResource resource) {",
          "38:         int adjustNum;",
          "39:         if (resource.instance > 0) {",
          "40:             adjustNum = requestExecutor(resource.instance);",
          "41:         } else {",
          "42:             adjustNum = releaseExecutor(resource.instance * -1, resource.force);",
          "43:         }",
          "44:         return new QueryResource(adjustNum, resource.force);",
          "45:     }",
          "47:     public int getExecutorSize() {",
          "48:         return getExecutorAllocationClient().getExecutorIds().size();",
          "49:     }",
          "51:     private int requestExecutor(int instance) {",
          "52:         val client = getExecutorAllocationClient();",
          "53:         return client.requestExecutors(instance) ? instance : 0;",
          "54:     }",
          "56:     private int releaseExecutor(int instance, boolean force) {",
          "57:         val client = getExecutorAllocationClient();",
          "58:         val ids = client.getExecutorIds().iterator();",
          "59:         val idsToRemoved = new ArrayList<String>();",
          "60:         while (ids.hasNext()) {",
          "61:             if (idsToRemoved.size() == instance)",
          "62:                 break;",
          "63:             val id = ids.next();",
          "64:             idsToRemoved.add(id);",
          "65:         }",
          "67:         if (idsToRemoved.isEmpty()) {",
          "68:             return 0;",
          "69:         }",
          "70:         return client.killExecutors(JavaConverters.asScalaBuffer(idsToRemoved).toSeq(), true, false, force).size();",
          "71:     }",
          "73:     private ExecutorAllocationClient getExecutorAllocationClient() {",
          "74:         return SparderEnv.executorAllocationClient().get();",
          "75:     }",
          "77:     public boolean isAvailable() {",
          "78:         boolean available = SparderEnv.executorAllocationClient().isDefined() && SparderEnv.isSparkAvailable();",
          "79:         log.info(\"node is available={}\", available);",
          "80:         return available;",
          "81:     }",
          "83:     @Data",
          "84:     @AllArgsConstructor",
          "85:     @NoArgsConstructor",
          "86:     public static class QueryResource {",
          "87:         private int instance;",
          "88:         private boolean force;",
          "89:     }",
          "90: }",
          "",
          "---------------"
        ],
        "src/query-service/src/test/java/org/apache/kylin/rest/service/QueryResourceServiceTest.java||src/query-service/src/test/java/org/apache/kylin/rest/service/QueryResourceServiceTest.java": [
          "File: src/query-service/src/test/java/org/apache/kylin/rest/service/QueryResourceServiceTest.java -> src/query-service/src/test/java/org/apache/kylin/rest/service/QueryResourceServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.rest.service;",
          "21: import org.apache.kylin.common.util.NLocalFileMetadataTestCase;",
          "22: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "23: import org.apache.spark.ExecutorAllocationClient;",
          "24: import org.apache.spark.sql.SparderEnv;",
          "25: import org.apache.spark.sql.SparkSession;",
          "26: import org.junit.After;",
          "27: import org.junit.Assert;",
          "28: import org.junit.Before;",
          "29: import org.junit.Test;",
          "30: import org.mockito.InjectMocks;",
          "31: import org.mockito.Mock;",
          "32: import org.mockito.Mockito;",
          "33: import org.mockito.MockitoAnnotations;",
          "35: import lombok.val;",
          "36: import lombok.var;",
          "37: import scala.collection.JavaConverters;",
          "39: public class QueryResourceServiceTest extends NLocalFileMetadataTestCase {",
          "41:     private SparkSession ss;",
          "42:     @InjectMocks",
          "43:     private final QueryResourceService queryResourceService = Mockito.spy(new QueryResourceService());",
          "45:     @Mock",
          "46:     private ExecutorAllocationClient client;",
          "48:     @Before",
          "49:     public void setUp() throws Exception {",
          "50:         System.setProperty(\"SPARK_LOCAL_IP\", \"localhost\");",
          "51:         MockitoAnnotations.initMocks(this);",
          "52:         createTestMetadata();",
          "53:         ss = SparkSession.builder().appName(\"local\").master(\"local[1]\").getOrCreate();",
          "54:         SparderEnv.setSparkSession(ss);",
          "55:         SparderEnv.setExecutorAllocationClient(client);",
          "56:         Mockito.doReturn(true).when(client).isExecutorActive(Mockito.anyString());",
          "57:         ss.range(1, 10).createOrReplaceTempView(\"queryResourceServiceTest\");",
          "58:         val data = ss.sql(\"SELECT id,count(0) FROM queryResourceServiceTest group by id\");",
          "59:         data.persist();",
          "60:         data.show();",
          "61:         data.unpersist();",
          "62:     }",
          "64:     @After",
          "65:     public void after() throws Exception {",
          "66:         cleanupTestMetadata();",
          "67:         ss.stop();",
          "68:     }",
          "70:     @Test",
          "71:     public void testAdjustQueryResource() {",
          "72:         Assert.assertTrue(queryResourceService.isAvailable());",
          "73:         QueryResourceService.QueryResource queryResource = new QueryResourceService.QueryResource();",
          "75:         queryResource.setInstance(1);",
          "76:         var resource = queryResourceService.adjustQueryResource(queryResource);",
          "77:         Assert.assertEquals(0, resource.getInstance());",
          "78:         Mockito.doReturn(true).when(client).requestExecutors(Mockito.anyInt());",
          "79:         resource = queryResourceService.adjustQueryResource(queryResource);",
          "80:         Assert.assertEquals(1, resource.getInstance());",
          "82:         queryResource.setInstance(-1);",
          "83:         val seqs = JavaConverters.asScalaBuffer(Lists.newArrayList(\"1\")).toSeq();",
          "84:         Mockito.doReturn(seqs).when(client).getExecutorIds();",
          "85:         Assert.assertEquals(1, queryResourceService.getExecutorSize());",
          "86:         Mockito.doReturn(seqs).when(client).killExecutors(Mockito.any(), Mockito.anyBoolean(), Mockito.anyBoolean(),",
          "87:                 Mockito.anyBoolean());",
          "88:         resource = queryResourceService.adjustQueryResource(queryResource);",
          "89:         Assert.assertEquals(1, resource.getInstance());",
          "91:         queryResource.setInstance(0);",
          "92:         queryResource.setForce(true);",
          "93:         resource = queryResourceService.adjustQueryResource(queryResource);",
          "94:         Assert.assertEquals(0, resource.getInstance());",
          "95:     }",
          "96: }",
          "",
          "---------------"
        ],
        "src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala||src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala": [
          "File: src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala -> src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import org.apache.kylin.metadata.project.NProjectManager",
          "37: import org.apache.kylin.query.runtime.plan.QueryToExecutionIDCache",
          "38: import org.apache.spark.internal.Logging",
          "40: import org.apache.spark.sql.KylinSession._",
          "41: import org.apache.spark.sql.catalyst.optimizer.ConvertInnerJoinToSemiJoin",
          "42: import org.apache.spark.sql.catalyst.parser.ParseException",
          "",
          "[Removed Lines]",
          "39: import org.apache.spark.scheduler.{SparkListener, SparkListenerEvent, SparkListenerLogRollUp, SparkListenerTaskEnd}",
          "",
          "[Added Lines]",
          "39: import org.apache.spark.scheduler._",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: import org.apache.spark.sql.hive.ReplaceLocationRule",
          "47: import org.apache.spark.sql.udf.UdfManager",
          "48: import org.apache.spark.util.{ThreadUtils, Utils}",
          "52: object SparderEnv extends Logging {",
          "",
          "[Removed Lines]",
          "49: import org.apache.spark.{SparkConf, SparkContext}",
          "",
          "[Added Lines]",
          "49: import org.apache.spark.{ExecutorAllocationClient, SparkConf, SparkContext}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68:   @volatile",
          "69:   var lastStartSparkFailureTime: Long = 0",
          "71:   def getSparkSession: SparkSession = {",
          "72:     if (spark == null || spark.sparkContext.isStopped) {",
          "73:       logInfo(\"Init spark.\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   private var _executorAllocationClient: Option[ExecutorAllocationClient] = None",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:           .currentThread()",
          "245:           .getContextClassLoader",
          "246:           .toString)",
          "247:       registerListener(sparkSession.sparkContext)",
          "248:       registerQueryMetrics(sparkSession.sparkContext)",
          "249:       APP_MASTER_TRACK_URL = null",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:       setExecutorAllocationClient(sparkSession.sparkContext)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "278:     }",
          "279:   }",
          "281:   def registerListener(sc: SparkContext): Unit = {",
          "282:     val sparkListener = new SparkListener {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:   def setExecutorAllocationClient(client: ExecutorAllocationClient): Unit = {",
          "286:     _executorAllocationClient = Some(client)",
          "287:   }",
          "289:   def executorAllocationClient: Option[ExecutorAllocationClient] = _executorAllocationClient",
          "291:   def setExecutorAllocationClient(sc: SparkContext): Unit = {",
          "292:     _executorAllocationClient = sc.schedulerBackend match {",
          "293:       case client: ExecutorAllocationClient =>",
          "294:         Some(client)",
          "295:       case _ =>",
          "296:         None",
          "297:     }",
          "298:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6dc5c992b65fdfac107db5ab970260dc06603c91",
      "candidate_info": {
        "commit_hash": "6dc5c992b65fdfac107db5ab970260dc06603c91",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/6dc5c992b65fdfac107db5ab970260dc06603c91",
        "files": [
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDPartitionBuildExec.scala",
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDSegmentBuildExec.scala",
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeCubingJob.java",
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeMergingJob.java",
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeSampling.java",
          "src/spark-project/engine-spark/src/test/scala/org/apache/spark/sql/hive/utils/TestResourceDetectUtils.scala",
          "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala",
          "src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/hive/utils/ResourceDetectUtils.scala"
        ],
        "message": "KYLIN-5646 Fix in yarn cluster mode, an error is reported for incrementally building the partition table job\n\nCo-authored-by: sibing.zhang <sibing.zhang@qq.com>",
        "before_after_code_files": [
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDPartitionBuildExec.scala||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDPartitionBuildExec.scala",
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDSegmentBuildExec.scala||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDSegmentBuildExec.scala",
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeCubingJob.java||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeCubingJob.java",
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeMergingJob.java||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeMergingJob.java",
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeSampling.java||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeSampling.java",
          "src/spark-project/engine-spark/src/test/scala/org/apache/spark/sql/hive/utils/TestResourceDetectUtils.scala||src/spark-project/engine-spark/src/test/scala/org/apache/spark/sql/hive/utils/TestResourceDetectUtils.scala",
          "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala||src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala",
          "src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/hive/utils/ResourceDetectUtils.scala||src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/hive/utils/ResourceDetectUtils.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDPartitionBuildExec.scala||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDPartitionBuildExec.scala": [
          "File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDPartitionBuildExec.scala -> src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDPartitionBuildExec.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:       ).asJava",
          "71:       logInfo(s\"Detected source: $sourceName $leaves ${paths.asScala.mkString(\",\")}\")",
          "74:       sourceLeaves.put(sourceName, leaves)",
          "75:     }",
          "",
          "[Removed Lines]",
          "72:       sourceSize.put(sourceName, ResourceDetectUtils.getResourceSize(SparderEnv.getHadoopConfiguration(),",
          "73:         config.isConcurrencyFetchDataSourceSize, paths.asScala.map(path => new Path(path)): _*))",
          "",
          "[Added Lines]",
          "72:       sourceSize.put(sourceName, ResourceDetectUtils.getResourceSize(config, SparderEnv.getHadoopConfiguration(),",
          "73:         paths.asScala.map(path => new Path(path)): _*))",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDSegmentBuildExec.scala||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDSegmentBuildExec.scala": [
          "File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDSegmentBuildExec.scala -> src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/RDSegmentBuildExec.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.engine.spark.job",
          "22: import org.apache.hadoop.fs.Path",
          "23: import org.apache.kylin.engine.spark.job.stage.BuildParam",
          "24: import org.apache.kylin.engine.spark.job.stage.build.FlatTableAndDictBase",
          "25: import org.apache.kylin.metadata.cube.model.NDataSegment",
          "26: import org.apache.spark.sql.SparderEnv",
          "27: import org.apache.spark.sql.datasource.storage.StorageStoreUtils",
          "28: import org.apache.spark.sql.hive.utils.ResourceDetectUtils",
          "31: import scala.collection.JavaConverters._",
          "33: class RDSegmentBuildExec(private val jobContext: SegmentJob, //",
          "",
          "[Removed Lines]",
          "21: import org.apache.kylin.guava30.shaded.common.collect.Maps",
          "30: import java.io.IOException",
          "",
          "[Added Lines]",
          "21: import java.io.IOException",
          "26: import org.apache.kylin.guava30.shaded.common.collect.Maps",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:       val paths = ResourceDetectUtils.getPaths(execution.sparkPlan, true).map(_.toString).asJava",
          "65:       logInfo(s\"Detected source: $sourceName $leaves ${paths.asScala.mkString(\",\")}\")",
          "66:       val startTime = System.currentTimeMillis()",
          "68:         paths.asScala.map(path => new Path(path)): _*)",
          "69:       val endTime = System.currentTimeMillis()",
          "70:       logInfo(s\"Detect source size cost time is ${endTime - startTime} ms.\")",
          "",
          "[Removed Lines]",
          "67:       val resourceSize = ResourceDetectUtils.getResourceSize(SparderEnv.getHadoopConfiguration(), config.isConcurrencyFetchDataSourceSize,",
          "",
          "[Added Lines]",
          "68:       val resourceSize = ResourceDetectUtils.getResourceSize(config, SparderEnv.getHadoopConfiguration(),",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeCubingJob.java||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeCubingJob.java": [
          "File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeCubingJob.java -> src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeCubingJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:                 List<Path> paths = JavaConversions",
          "102:                         .seqAsJavaList(ResourceDetectUtils.getPaths(dataset.queryExecution().sparkPlan(), true));",
          "103:                 resourceSize.put(String.valueOf(source.getLayoutId()),",
          "105:                                 asScalaIteratorConverter(paths.iterator()).asScala().toSeq()));",
          "107:                 layoutLeafTaskNums.put(String.valueOf(source.getLayoutId()), Integer.parseInt(leafNodeNum));",
          "",
          "[Removed Lines]",
          "104:                         getResourceSize(SparderEnv.getHadoopConfiguration(), config.isConcurrencyFetchDataSourceSize(),",
          "",
          "[Added Lines]",
          "104:                         getResourceSize(config, SparderEnv.getHadoopConfiguration(),",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeMergingJob.java||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeMergingJob.java": [
          "File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeMergingJob.java -> src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeMergingJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.engine.spark.job;",
          "22: import org.apache.hadoop.fs.Path;",
          "23: import org.apache.kylin.engine.spark.application.SparkApplication;",
          "24: import org.apache.kylin.engine.spark.builder.DFLayoutMergeAssist;",
          "26: import org.apache.kylin.metadata.cube.model.NBatchConstants;",
          "27: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "28: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "",
          "[Removed Lines]",
          "21: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "25: import org.apache.kylin.engine.spark.job.LogJobInfoUtils;",
          "",
          "[Added Lines]",
          "21: import java.util.Collections;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "28: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import org.apache.spark.sql.hive.utils.ResourceDetectUtils;",
          "34: import org.slf4j.Logger;",
          "35: import org.slf4j.LoggerFactory;",
          "36: import scala.collection.JavaConversions;",
          "37: import scala.collection.JavaConverters;",
          "43: public class ResourceDetectBeforeMergingJob extends SparkApplication implements ResourceDetect {",
          "44:     protected static final Logger logger = LoggerFactory.getLogger(ResourceDetectBeforeMergingJob.class);",
          "",
          "[Removed Lines]",
          "39: import java.util.Collections;",
          "40: import java.util.List;",
          "41: import java.util.Map;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:             List<Path> paths = JavaConversions",
          "68:                     .seqAsJavaList(ResourceDetectUtils.getPaths(afterMerge.queryExecution().sparkPlan(), true));",
          "69:             resourceSize.put(String.valueOf(entry.getKey()),",
          "71:                             JavaConverters.asScalaIteratorConverter(paths.iterator()).asScala().toSeq()));",
          "72:         }",
          "73:         ResourceDetectUtils.write(new Path(config.getJobTmpShareDir(project, jobId),",
          "",
          "[Removed Lines]",
          "70:                     ResourceDetectUtils.getResourceSize(SparderEnv.getHadoopConfiguration(), config.isConcurrencyFetchDataSourceSize(),",
          "",
          "[Added Lines]",
          "70:                     ResourceDetectUtils.getResourceSize(config, SparderEnv.getHadoopConfiguration(),",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeSampling.java||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeSampling.java": [
          "File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeSampling.java -> src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/ResourceDetectBeforeSampling.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.kylin.engine.spark.job;",
          "22: import org.apache.hadoop.fs.Path;",
          "23: import org.apache.kylin.engine.spark.NSparkCubingEngine;",
          "24: import org.apache.kylin.engine.spark.application.SparkApplication;",
          "25: import org.apache.kylin.metadata.cube.model.NBatchConstants;",
          "26: import org.apache.kylin.metadata.model.NTableMetadataManager;",
          "27: import org.apache.kylin.metadata.model.TableDesc;",
          "",
          "[Removed Lines]",
          "20: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "21: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Added Lines]",
          "20: import java.util.List;",
          "21: import java.util.Map;",
          "26: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import org.apache.spark.sql.Row;",
          "32: import org.apache.spark.sql.SparderEnv;",
          "33: import org.apache.spark.sql.hive.utils.ResourceDetectUtils;",
          "34: import scala.collection.JavaConversions;",
          "35: import scala.collection.JavaConverters;",
          "40: @Slf4j",
          "41: public class ResourceDetectBeforeSampling extends SparkApplication implements ResourceDetect {",
          "42:     public static void main(String[] args) {",
          "",
          "[Removed Lines]",
          "37: import java.util.List;",
          "38: import java.util.Map;",
          "",
          "[Added Lines]",
          "37: import lombok.extern.slf4j.Slf4j;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:         Map<String, Long> resourceSize = Maps.newHashMap();",
          "62:         resourceSize.put(String.valueOf(tableName),",
          "64:                         JavaConverters.asScalaIteratorConverter(paths.iterator()).asScala().toSeq()));",
          "66:         Map<String, String> tableLeafTaskNums = Maps.newHashMap();",
          "",
          "[Removed Lines]",
          "63:                 ResourceDetectUtils.getResourceSize(SparderEnv.getHadoopConfiguration(),config.isConcurrencyFetchDataSourceSize(),",
          "",
          "[Added Lines]",
          "64:                 ResourceDetectUtils.getResourceSize(config, SparderEnv.getHadoopConfiguration(),",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/test/scala/org/apache/spark/sql/hive/utils/TestResourceDetectUtils.scala||src/spark-project/engine-spark/src/test/scala/org/apache/spark/sql/hive/utils/TestResourceDetectUtils.scala": [
          "File: src/spark-project/engine-spark/src/test/scala/org/apache/spark/sql/hive/utils/TestResourceDetectUtils.scala -> src/spark-project/engine-spark/src/test/scala/org/apache/spark/sql/hive/utils/TestResourceDetectUtils.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.spark.sql.hive.utils",
          "21: import java.io.FileOutputStream",
          "22: import java.util.{List => JList, Map => JMap}",
          "24: import org.apache.hadoop.fs.Path",
          "25: import org.apache.kylin.common.KylinConfig",
          "26: import org.apache.kylin.common.util.NLocalFileMetadataTestCase",
          "27: import org.apache.spark.sql.common.SparderBaseFunSuite",
          "28: import org.apache.spark.util.Utils",
          "32: class TestResourceDetectUtils extends SparderBaseFunSuite {",
          "33:   private var config: KylinConfig = _",
          "",
          "[Removed Lines]",
          "23: import org.apache.kylin.guava30.shaded.common.collect.{Lists, Maps}",
          "30: import java.nio.charset.Charset",
          "",
          "[Added Lines]",
          "22: import java.nio.charset.Charset",
          "28: import org.apache.kylin.guava30.shaded.common.collect.{Lists, Maps}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:     val contents = List(\"test\", \"test_test_test\")",
          "72:     val tempDir = Utils.createTempDir()",
          "73:     val files = List(new Path(tempDir.getPath, \"test1\"), new Path(tempDir.getPath, \"test2\"))",
          "74:     try {",
          "75:       for (i <- 0 to 1) {",
          "76:         val out = new FileOutputStream(files.apply(i).toString)",
          "77:         out.write(contents.apply(i).getBytes(Charset.defaultCharset()))",
          "78:         out.close()",
          "79:       }",
          "81:       assert(l == contents.map(_.getBytes(Charset.defaultCharset()).length).sum)",
          "83:       assert(l == contents.map(_.getBytes(Charset.defaultCharset()).length).sum)",
          "84:     } finally {",
          "85:       Utils.deleteRecursively(tempDir)",
          "86:     }",
          "",
          "[Removed Lines]",
          "80:       var l = ResourceDetectUtils.getResourceSize(false, files.head, files.last)",
          "82:       l = ResourceDetectUtils.getResourceSize(true, files.head, files.last)",
          "",
          "[Added Lines]",
          "74:     val files2 = List(new Path(tempDir.getPath, \"test3\"))",
          "81:       var l = ResourceDetectUtils.getResourceSize(config, files.head, files.last)",
          "85:       l = ResourceDetectUtils.getResourceSize(config, files2.head)",
          "86:       assert(l == 0)",
          "88:       config.setProperty(\"kylin.job.concurrency-fetch-datasource-size-enabled\", \"false\")",
          "89:       l = ResourceDetectUtils.getResourceSize(config, files.head, files.last)",
          "92:       l = ResourceDetectUtils.getResourceSize(config, files2.head)",
          "93:       assert(l == 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:       }",
          "104:       import scala.collection.JavaConverters._",
          "107:         new Path(path.get(0)))).max",
          "108:       assert(l == contents.last.getBytes(Charset.defaultCharset()).length)",
          "109:     } finally {",
          "",
          "[Removed Lines]",
          "106:       val l = resourcePaths.values().asScala.map(path => ResourceDetectUtils.getResourceSize(false,",
          "",
          "[Added Lines]",
          "116:       val l = resourcePaths.values().asScala.map(path => ResourceDetectUtils.getResourceSize(config,",
          "",
          "---------------"
        ],
        "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala||src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala": [
          "File: src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala -> src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:         val paths = ResourceDetectUtils.getPaths(df.queryExecution.sparkPlan)",
          "105:         var sourceTableSize: String = \"\"",
          "106:         if (isConcurrency) {",
          "108:             Duration(timeOut, TimeUnit.SECONDS), SparderEnv.getHadoopConfiguration(), paths: _*) + \"b\"",
          "109:         } else {",
          "111:         }",
          "112:         val partitions = Math.max(1, JavaUtils.byteStringAsMb(sourceTableSize) / basePartitionSize).toString",
          "113:         df.sparkSession.sessionState.conf.setLocalProperty(SHUFFLE_PARTITION, partitions)",
          "",
          "[Removed Lines]",
          "107:           sourceTableSize = ResourceDetectUtils.getResourceSizeWithTimeoutByConcurrency(",
          "110:           sourceTableSize = ResourceDetectUtils.getResourceSizBySerial(SparderEnv.getHadoopConfiguration(), paths: _*) + \"b\"",
          "",
          "[Added Lines]",
          "107:           sourceTableSize = ResourceDetectUtils.getResourceSizeWithTimeoutByConcurrency(config,",
          "110:           sourceTableSize = ResourceDetectUtils.getResourceSizBySerial(config, SparderEnv.getHadoopConfiguration(),",
          "111:             paths: _*) + \"b\"",
          "",
          "---------------"
        ],
        "src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/hive/utils/ResourceDetectUtils.scala||src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/hive/utils/ResourceDetectUtils.scala": [
          "File: src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/hive/utils/ResourceDetectUtils.scala -> src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/hive/utils/ResourceDetectUtils.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.spark.sql.hive.utils",
          "21: import com.google.gson.Gson",
          "22: import com.google.gson.reflect.TypeToken",
          "23: import org.apache.hadoop.conf.Configuration",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.io.IOException",
          "22: import java.nio.charset.Charset",
          "23: import java.util.concurrent.Executors",
          "24: import java.util.{Map => JMap}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: import org.apache.spark.sql.sources.NBaseRelation",
          "38: import org.apache.spark.util.ThreadUtils",
          "44: import scala.collection.JavaConverters._",
          "45: import scala.collection.mutable",
          "46: import scala.concurrent.duration._",
          "",
          "[Removed Lines]",
          "40: import java.io.IOException",
          "41: import java.nio.charset.Charset",
          "42: import java.util.concurrent.Executors",
          "43: import java.util.{Map => JMap}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:     false",
          "170:   }",
          "173:     val resourceSize = {",
          "176:       } else {",
          "178:       }",
          "179:     }",
          "180:     resourceSize",
          "181:   }",
          "184:     paths.map(path => {",
          "185:       QueryInterruptChecker.checkThreadInterrupted(errorMsgLog, \"Current step: get resource size.\")",
          "186:       val fs = path.getFileSystem(configuration)",
          "187:       if (fs.exists(path)) {",
          "189:       } else {",
          "190:         0L",
          "191:       }",
          "192:     }).sum",
          "193:   }",
          "197:     val threadNumber = kylinConfig.getConcurrencyFetchDataSourceSizeThreadNumber",
          "198:     logInfo(s\"Get resource size concurrency, thread number is $threadNumber\")",
          "199:     val executor = Executors.newFixedThreadPool(threadNumber)",
          "200:     implicit val executionContext: ExecutionContextExecutor = ExecutionContext.fromExecutor(executor)",
          "202:     try {",
          "203:       val combinedFuture = Future.sequence(futures)",
          "204:       val results: Seq[Long] = ThreadUtils.awaitResult(combinedFuture, timeout)",
          "",
          "[Removed Lines]",
          "172:   def getResourceSize(configuration: Configuration, isConcurrencyFetchDataSourceSize: Boolean, paths: Path*): Long = {",
          "174:       if (isConcurrencyFetchDataSourceSize) {",
          "175:         getResourceSizeWithTimeoutByConcurrency(Duration.Inf, configuration, paths: _*)",
          "177:         getResourceSizBySerial(configuration, paths: _*)",
          "183:   def getResourceSizBySerial(configuration: Configuration, paths: Path*): Long = {",
          "188:         HadoopUtil.getContentSummary(fs, path).getLength",
          "195:   def getResourceSizeWithTimeoutByConcurrency(timeout: Duration, configuration: Configuration, paths: Path*): Long = {",
          "196:     val kylinConfig = KylinConfig.getInstanceFromEnv",
          "201:     val futures: Seq[Future[Long]] = getResourceSize(configuration, executionContext, paths: _*)",
          "",
          "[Added Lines]",
          "173:   def getResourceSize(kylinConfig: KylinConfig, configuration: Configuration, paths: Path*): Long = {",
          "175:       if (kylinConfig.isConcurrencyFetchDataSourceSize) {",
          "176:         getResourceSizeWithTimeoutByConcurrency(kylinConfig, Duration.Inf, configuration, paths: _*)",
          "178:         getResourceSizBySerial(kylinConfig, configuration, paths: _*)",
          "184:   def getResourceSizBySerial(kylinConfig: KylinConfig, configuration: Configuration, paths: Path*): Long = {",
          "189:         HadoopUtil.getContentSummaryFromHdfsKylinConfig(fs, path, kylinConfig).getLength",
          "196:   def getResourceSizeWithTimeoutByConcurrency(kylinConfig: KylinConfig, timeout: Duration,",
          "197:                                               configuration: Configuration, paths: Path*): Long = {",
          "202:     val futures: Seq[Future[Long]] = getResourceSize(kylinConfig, configuration, executionContext, paths: _*)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208:     }",
          "209:   }",
          "213:     paths.map { path =>",
          "214:       Future {",
          "215:         val fs = path.getFileSystem(configuration)",
          "",
          "[Removed Lines]",
          "211:   def getResourceSize(configuration: Configuration, executionContext: ExecutionContextExecutor, paths: Path*): Seq[Future[Long]] = {",
          "212:     val kylinConfig = KylinConfig.getInstanceFromEnv",
          "",
          "[Added Lines]",
          "212:   def getResourceSize(kylinConfig: KylinConfig, configuration: Configuration,",
          "213:                       executionContext: ExecutionContextExecutor, paths: Path*): Seq[Future[Long]] = {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "222:     }",
          "223:   }",
          "227:   }",
          "229:   def getMaxResourceSize(shareDir: Path): Long = {",
          "",
          "[Removed Lines]",
          "225:   def getResourceSize(isConcurrencyFetchDataSourceSize: Boolean, paths: Path*): Long = {",
          "226:     getResourceSize(HadoopUtil.getCurrentConfiguration, isConcurrencyFetchDataSourceSize, paths: _*)",
          "",
          "[Added Lines]",
          "226:   def getResourceSize(kylinConfig: KylinConfig, paths: Path*): Long = {",
          "227:     getResourceSize(kylinConfig, HadoopUtil.getCurrentConfiguration, paths: _*)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e722aa6722bf3daae3bee9289441d7bc00144975",
      "candidate_info": {
        "commit_hash": "e722aa6722bf3daae3bee9289441d7bc00144975",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/e722aa6722bf3daae3bee9289441d7bc00144975",
        "files": [
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/DataflowCapabilityCheckerTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextTestUtil.java",
          "src/query/src/main/java/org/apache/kylin/query/engine/exec/sparder/SparderQueryPlanExec.java",
          "src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java"
        ],
        "message": "KYLIN-5633 fix recommendation on modelView & restore query behavior of hybrid model",
        "before_after_code_files": [
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/DataflowCapabilityCheckerTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/DataflowCapabilityCheckerTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextUtil.java||src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextTestUtil.java",
          "src/query/src/main/java/org/apache/kylin/query/engine/exec/sparder/SparderQueryPlanExec.java||src/query/src/main/java/org/apache/kylin/query/engine/exec/sparder/SparderQueryPlanExec.java",
          "src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java||src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/DataflowCapabilityCheckerTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/DataflowCapabilityCheckerTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/DataflowCapabilityCheckerTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/DataflowCapabilityCheckerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.kylin.metadata.model.NTableMetadataManager;",
          "33: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "34: import org.apache.kylin.query.relnode.OLAPContext;",
          "36: import org.junit.Assert;",
          "37: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "35: import org.apache.kylin.util.OlapContextUtil;",
          "",
          "[Added Lines]",
          "35: import org.apache.kylin.util.OlapContextTestUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "44:                 .getDataflow(\"abe3bf1a-c4bc-458d-8278-7ea8b00f5e96\");",
          "45:         String sql = \"SELECT seller_ID FROM TEST_KYLIN_FACT LEFT JOIN TEST_ACCOUNT ON SELLER_ID = ACCOUNT_ID\";",
          "48:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "49:         Candidate candidate = new Candidate(dataflow, olapContext, sqlAlias2ModelNameMap);",
          "50:         CapabilityResult result = DataflowCapabilityChecker.check(dataflow, candidate, olapContext.getSQLDigest());",
          "",
          "[Removed Lines]",
          "46:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "47:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "46:         OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "47:         Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:         {",
          "66:             String sql = \"select SITE_ID from EDW.TEST_SITES\";",
          "69:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "70:             Candidate candidate = new Candidate(dataflow, olapContext, sqlAlias2ModelNameMap);",
          "71:             CapabilityResult result = DataflowCapabilityChecker.check(dataflow, candidate, olapContext.getSQLDigest());",
          "",
          "[Removed Lines]",
          "67:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "68:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "67:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "68:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "79:         {",
          "80:             String sql = \"select sum(SITE_ID) from EDW.TEST_SITES\";",
          "83:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "84:             Candidate candidate = new Candidate(dataflow, olapContext, sqlAlias2ModelNameMap);",
          "85:             CapabilityResult result = DataflowCapabilityChecker.check(dataflow, candidate, olapContext.getSQLDigest());",
          "",
          "[Removed Lines]",
          "81:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "82:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "81:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "82:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "92:         {",
          "94:             String sql = \"select sum(SITE_ID) from EDW.TEST_SITES\";",
          "96:             removeAllSegments(dataflow);",
          "97:             dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "98:                     .getDataflow(\"89af4ee2-2cdb-4b07-b39e-4c29856309aa\");",
          "",
          "[Removed Lines]",
          "95:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "",
          "[Added Lines]",
          "95:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: import org.apache.kylin.query.relnode.OLAPContext;",
          "48: import org.apache.kylin.storage.StorageContext;",
          "49: import org.apache.kylin.util.MetadataTestUtils;",
          "51: import org.junit.Assert;",
          "52: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "50: import org.apache.kylin.util.OlapContextUtil;",
          "",
          "[Added Lines]",
          "50: import org.apache.kylin.util.OlapContextTestUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:         { // composite filters",
          "399:             val sqlFilter = sql + \"select * from T1\\n\"",
          "400:                     + \"where (cal_dt = DATE'2012-01-01' or (cast(cal_dt as date) = '2012-01-02' or cal_dt = '2012-01-03')) and (cal_dt is not null or cal_dt in ('2012-01-01', '2012-01-02'))\";",
          "402:             assertFiltersAndLayout(context, null,",
          "403:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),\"",
          "404:                             + \"OR(=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01), =(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02), =(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)),\"",
          "",
          "[Removed Lines]",
          "401:             val context = OlapContextUtil.getOlapContexts(project, sqlFilter).get(0);",
          "",
          "[Added Lines]",
          "401:             val context = OlapContextTestUtil.getOlapContexts(project, sqlFilter).get(0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "408:         { // invalid filters with or",
          "409:             val sqlFilter = sql + \"select * from T1\\n\"",
          "410:                     + \"where trans_id = 123  or trans_id + 1 = 123 or (trans_id + 2 = 234 and trans_id = 345)\";",
          "412:             assertFiltersAndLayout(context, null,",
          "413:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\");",
          "414:         }",
          "",
          "[Removed Lines]",
          "411:             val context = OlapContextUtil.getOlapContexts(project, sqlFilter).get(0);",
          "",
          "[Added Lines]",
          "411:             val context = OlapContextTestUtil.getOlapContexts(project, sqlFilter).get(0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "416:         { // invalid filters with and",
          "417:             val sqlFilter = sql + \"select * from T1\\n\"",
          "418:                     + \"where trans_id = 123 and (trans_id + 2 = 234 or trans_id = 345)\";",
          "420:             assertFiltersAndLayout(context, null,",
          "421:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),\"",
          "422:                             + \"=(DEFAULT.TEST_KYLIN_FACT.TRANS_ID, 123)\");",
          "",
          "[Removed Lines]",
          "419:             val context = OlapContextUtil.getOlapContexts(project, sqlFilter).get(0);",
          "",
          "[Added Lines]",
          "419:             val context = OlapContextTestUtil.getOlapContexts(project, sqlFilter).get(0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "425:         { // invalid filters with not",
          "426:             val sqlFilter = sql + \"select * from T1\\n\"",
          "427:                     + \"where trans_id = 123 and (not(trans_id = 234) or trans_id = 345) and (not(trans_id + 1 = 132))\";",
          "429:             assertFiltersAndLayout(context, null,",
          "430:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),\"",
          "431:                             + \"=(DEFAULT.TEST_KYLIN_FACT.TRANS_ID, 123),OR(<>(DEFAULT.TEST_KYLIN_FACT.TRANS_ID, 234), =(DEFAULT.TEST_KYLIN_FACT.TRANS_ID, 345))\");",
          "",
          "[Removed Lines]",
          "428:             val context = OlapContextUtil.getOlapContexts(project, sqlFilter).get(0);",
          "",
          "[Added Lines]",
          "428:             val context = OlapContextTestUtil.getOlapContexts(project, sqlFilter).get(0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "464:         { // inner join",
          "465:             val sqlInnerJoin = sql + \" select * from T1 inner join T2 on T1.cal_dt = T2.cal_dt \\n\"",
          "466:                     + \" where T1.cal_dt = '2012-01-01' and T2.cal_dt = DATE '2012-01-02'\";",
          "468:             assertFiltersAndLayout(contexts.get(0), seg1Id,",
          "469:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01)\");",
          "470:             assertFiltersAndLayout(contexts.get(1), seg2Id,",
          "",
          "[Removed Lines]",
          "467:             val contexts = OlapContextUtil.getOlapContexts(project, sqlInnerJoin);",
          "",
          "[Added Lines]",
          "467:             val contexts = OlapContextTestUtil.getOlapContexts(project, sqlInnerJoin);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "474:         { // left join",
          "475:             val sqlLeftJoin = sql + \" select * from T1 left join T2 on T1.cal_dt = T2.cal_dt \\n\"",
          "476:                     + \" where T1.cal_dt = DATE '2012-01-01' and T2.cal_dt = DATE '2012-01-02'\";",
          "478:             assertFiltersAndLayout(contexts.get(0), seg1Id,",
          "479:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01)\");",
          "480:             assertFiltersAndLayout(contexts.get(1), null,",
          "",
          "[Removed Lines]",
          "477:             val contexts = OlapContextUtil.getOlapContexts(project, sqlLeftJoin);",
          "",
          "[Added Lines]",
          "477:             val contexts = OlapContextTestUtil.getOlapContexts(project, sqlLeftJoin);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "484:         { // right join",
          "485:             val sqlRightJoin = sql + \" select * from T1 right join T2 on T1.cal_dt = T2.cal_dt \\n\"",
          "486:                     + \" where T1.cal_dt = DATE '2012-01-01' and T2.cal_dt = DATE '2012-01-02'\";",
          "488:             assertFiltersAndLayout(contexts.get(0), seg2Id,",
          "489:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02),=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02)\");",
          "490:             assertFiltersAndLayout(contexts.get(1), null,",
          "",
          "[Removed Lines]",
          "487:             val contexts = OlapContextUtil.getOlapContexts(project, sqlRightJoin);",
          "",
          "[Added Lines]",
          "487:             val contexts = OlapContextTestUtil.getOlapContexts(project, sqlRightJoin);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "494:         { // full join",
          "495:             val sqlFullJoin = sql + \" select * from T1 full join T2 on T1.cal_dt = T2.cal_dt \\n\"",
          "496:                     + \" where T1.cal_dt = DATE '2012-01-01' and T2.cal_dt = DATE '2012-01-02'\";",
          "498:             assertFiltersAndLayout(contexts.get(0), null,",
          "499:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\");",
          "500:             assertFiltersAndLayout(contexts.get(1), null,",
          "",
          "[Removed Lines]",
          "497:             val contexts = OlapContextUtil.getOlapContexts(project, sqlFullJoin);",
          "",
          "[Added Lines]",
          "497:             val contexts = OlapContextTestUtil.getOlapContexts(project, sqlFullJoin);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "538:                     + \"(cal_dt='2012-01-01' and trans_id = 15) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 16) or\\n\"",
          "539:                     + \"(cal_dt='2012-01-01' and trans_id = 17) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 18) or\\n\"",
          "540:                     + \"(cal_dt='2012-01-01' and trans_id = 19) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 20)\";",
          "542:             Assert.assertEquals(",
          "543:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\",",
          "544:                     contexts.get(0).getExpandedFilterConditions().stream().map(RexNode::toString)",
          "",
          "[Removed Lines]",
          "541:             val contexts = OlapContextUtil.getOlapContexts(project, sqlWithTooManyOrs);",
          "",
          "[Added Lines]",
          "541:             val contexts = OlapContextTestUtil.getOlapContexts(project, sqlWithTooManyOrs);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "552:                     + \"(cal_dt='2012-01-01' and trans_id = 6) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 7) or\\n\"",
          "553:                     + \"(cal_dt='2012-01-01' and trans_id = 8) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 9) or\\n\"",
          "554:                     + \"(cal_dt='2012-01-01' and trans_id = 10)\";",
          "556:             Assert.assertNotEquals(",
          "557:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\",",
          "558:                     contexts.get(0).getExpandedFilterConditions().stream().map(RexNode::toString)",
          "",
          "[Removed Lines]",
          "555:             val contexts = OlapContextUtil.getOlapContexts(project, sqlWithFilter);",
          "",
          "[Added Lines]",
          "555:             val contexts = OlapContextTestUtil.getOlapContexts(project, sqlWithFilter);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "606:                 + \"group by cal_dt\\n\";",
          "608:         {",
          "610:             StorageContext storageContext = olapContext.storageContext;",
          "611:             Assert.assertEquals(-1L, storageContext.getLayoutId().longValue());",
          "612:         }",
          "",
          "[Removed Lines]",
          "609:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(project, sql).get(0);",
          "",
          "[Added Lines]",
          "609:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(project, sql).get(0);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "615:             MetadataTestUtils.updateProjectConfig(project, \"kylin.query.index-match-rules\",",
          "616:                     QueryRouter.USE_VACANT_INDEXES);",
          "617:             try (QueryContext queryContext = QueryContext.current()) {",
          "619:                 StorageContext storageContext = olapContext.storageContext;",
          "620:                 Assert.assertEquals(10001L, storageContext.getLayoutId().longValue());",
          "621:                 Assert.assertFalse(queryContext.getQueryTagInfo().isVacant());",
          "",
          "[Removed Lines]",
          "618:                 OLAPContext olapContext = OlapContextUtil.getOlapContexts(project, sql).get(0);",
          "",
          "[Added Lines]",
          "618:                 OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(project, sql).get(0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "663:         MetadataTestUtils.updateProjectConfig(project, \"kylin.query.index-match-rules\", QueryRouter.USE_VACANT_INDEXES);",
          "664:         try (QueryContext queryContext = QueryContext.current()) {",
          "666:             StorageContext storageContext = olapContext.storageContext;",
          "667:             Assert.assertEquals(-1L, storageContext.getLayoutId().longValue());",
          "668:             Assert.assertFalse(queryContext.getQueryTagInfo().isVacant());",
          "",
          "[Removed Lines]",
          "665:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(project, sql).get(0);",
          "",
          "[Added Lines]",
          "665:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(project, sql).get(0);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "680:     }",
          "682:     private void assertNoRealizationFound(String project, String sql) throws SqlParseException {",
          "684:         Assert.assertNull(context.realization);",
          "685:     }",
          "",
          "[Removed Lines]",
          "683:         val context = OlapContextUtil.getOlapContexts(project, sql).get(0);",
          "",
          "[Added Lines]",
          "683:         val context = OlapContextTestUtil.getOlapContexts(project, sql).get(0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "693:     private void assertPrunedSegmentsRange(String project, String sql, String dfId,",
          "694:             List<Pair<String, String>> expectedRanges, long expectedLayoutId,",
          "695:             Map<String, List<Long>> expectedPartitions, String expectedFilterCond) throws SqlParseException {",
          "698:         if (expectedLayoutId == -1L) {",
          "699:             Assert.assertTrue(context.storageContext.isEmptyLayout());",
          "",
          "[Removed Lines]",
          "696:         val context = OlapContextUtil.getOlapContexts(project, sql).get(0);",
          "",
          "[Added Lines]",
          "696:         val context = OlapContextTestUtil.getOlapContexts(project, sql).get(0);",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: import org.apache.kylin.metadata.project.EnhancedUnitOfWork;",
          "46: import org.apache.kylin.query.relnode.OLAPContext;",
          "47: import org.apache.kylin.util.MetadataTestUtils;",
          "49: import org.junit.After;",
          "50: import org.junit.Assert;",
          "51: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "48: import org.apache.kylin.util.OlapContextUtil;",
          "",
          "[Added Lines]",
          "48: import org.apache.kylin.util.OlapContextTestUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:         NDataflowManager dataflowManager = NDataflowManager.getInstance(getTestConfig(), getProject());",
          "70:         {",
          "71:             String sql = \"select distinct DEAL_AMOUNT from test_kylin_fact \\n\";",
          "75:             String modelWithCCId = \"89af4ee2-2cdb-4b07-b39e-4c29856309aa\";",
          "76:             NDataflow dataflow = dataflowManager.getDataflow(modelWithCCId);",
          "78:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "",
          "[Removed Lines]",
          "72:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "77:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "72:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "77:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:         {",
          "90:             String sql = \"select sum(DEAL_AMOUNT) from test_kylin_fact \\n\";",
          "94:             String modelWithCCId = \"89af4ee2-2cdb-4b07-b39e-4c29856309aa\";",
          "95:             NDataflow dataflow = dataflowManager.getDataflow(modelWithCCId);",
          "97:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "",
          "[Removed Lines]",
          "91:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "96:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "91:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "96:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:         {",
          "109:             String sql = \"select DEAL_AMOUNT from test_kylin_fact \\n\";",
          "113:             String modelWithCCId = \"89af4ee2-2cdb-4b07-b39e-4c29856309aa\";",
          "114:             NDataflow dataflow = dataflowManager.getDataflow(modelWithCCId);",
          "116:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "",
          "[Removed Lines]",
          "110:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "115:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "110:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "115:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "146:         {",
          "147:             String sql = \"select CAL_DT, count(price) as GMV from test_kylin_fact \\n\"",
          "148:                     + \" where CAL_DT='2012-01-10' group by CAL_DT \";",
          "151:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "152:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "153:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "149:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "150:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "149:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "150:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "161:         {",
          "162:             String sql = \"select CAL_DT from test_kylin_fact where CAL_DT='2012-01-10'\";",
          "165:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "166:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "167:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "163:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "164:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "163:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "164:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "184:         {",
          "185:             String sql = \"select CAL_DT, TRANS_ID, count(*) as GMV from test_kylin_fact \\n\"",
          "186:                     + \" where CAL_DT='2012-01-10' and TRANS_ID > 10000 group by CAL_DT, TRANS_ID \";",
          "189:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "190:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "191:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "187:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "188:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "187:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "188:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "196:         {",
          "197:             String sql = \"select CAL_DT, TRANS_ID, count(*) as GMV from test_kylin_fact \\n\"",
          "198:                     + \" where CAL_DT > '2012-01-10' and TRANS_ID = 10000 group by CAL_DT, TRANS_ID \";",
          "201:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "202:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "203:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "199:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "200:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "199:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "200:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "210:             String sql = \"select CAL_DT, TRANS_ID, count(*) as GMV from test_kylin_fact \\n\"",
          "211:                     + \" where CAL_DT = '2012-01-10' and TRANS_ID = 10000 group by CAL_DT, TRANS_ID \";",
          "212:             mockTableStats();",
          "215:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "216:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "217:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "213:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "214:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "213:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "214:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "287:                 + \"AND test_kylin_fact.lstg_site_id = test_category_groupings.site_id\\n\"",
          "288:                 + \" left JOIN edw.test_sites as test_sites ON test_kylin_fact.lstg_site_id = test_sites.site_id\\n\"",
          "289:                 + \" group by test_kylin_fact.lstg_format_name, META_CATEG_NAME\";",
          "292:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "293:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "294:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "290:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "291:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "290:         OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "291:         Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "356:         String sql = \"select b.ACCOUNT_BUYER_LEVEL from \\\"DEFAULT\\\".\\\"TEST_KYLIN_FACT\\\" a\\n\"",
          "357:                 + \"left join \\\"DEFAULT\\\".\\\"TEST_ACCOUNT\\\" b on a.SELLER_ID = b.ACCOUNT_ID\";",
          "360:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "361:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "362:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "358:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "359:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "358:         OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "359:         Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "380:                 + \"group by  1.1000000000000001\\n\";",
          "382:         getTestConfig().setProperty(\"kylin.query.calcite.aggregate-pushdown-enabled\", \"true\");",
          "386:         OLAPContext oneOlapContext = olapContexts.get(0);",
          "388:         oneOlapContext.fixModel(dataflow.getModel(), oneMap);",
          "389:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "390:                 dataflow.getQueryableSegments(), oneOlapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "383:         List<OLAPContext> olapContexts = OlapContextUtil.getHepRulesOptimizedOlapContexts(getProject(), sql, false);",
          "387:         Map<String, String> oneMap = OlapContextUtil.matchJoins(dataflow.getModel(), oneOlapContext);",
          "",
          "[Added Lines]",
          "383:         List<OLAPContext> olapContexts = OlapContextTestUtil.getHepRulesOptimizedOlapContexts(getProject(), sql, false);",
          "387:         Map<String, String> oneMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), oneOlapContext);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "395:         OLAPContext anotherOlapContext = olapContexts.get(1);",
          "397:         anotherOlapContext.fixModel(dataflow.getModel(), anotherMap);",
          "398:         NLayoutCandidate anotherCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "399:                 dataflow.getQueryableSegments(), anotherOlapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "396:         Map<String, String> anotherMap = OlapContextUtil.matchJoins(dataflow.getModel(), anotherOlapContext);",
          "",
          "[Added Lines]",
          "396:         Map<String, String> anotherMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), anotherOlapContext);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "418:                 + \"group by  1.1000000000000001\\n\";",
          "420:         getTestConfig().setProperty(\"kylin.query.calcite.aggregate-pushdown-enabled\", \"false\");",
          "424:         OLAPContext oneOlapContext = olapContexts.get(0);",
          "426:         oneOlapContext.fixModel(dataflow.getModel(), oneMap);",
          "427:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "428:                 dataflow.getQueryableSegments(), oneOlapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "421:         List<OLAPContext> olapContexts = OlapContextUtil.getHepRulesOptimizedOlapContexts(getProject(), sql, false);",
          "425:         Map<String, String> oneMap = OlapContextUtil.matchJoins(dataflow.getModel(), oneOlapContext);",
          "",
          "[Added Lines]",
          "421:         List<OLAPContext> olapContexts = OlapContextTestUtil.getHepRulesOptimizedOlapContexts(getProject(), sql, false);",
          "425:         Map<String, String> oneMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), oneOlapContext);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "433:         OLAPContext anotherOlapContext = olapContexts.get(1);",
          "435:         anotherOlapContext.fixModel(dataflow.getModel(), anotherMap);",
          "436:         NLayoutCandidate anotherCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "437:                 dataflow.getQueryableSegments(), anotherOlapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "434:         Map<String, String> anotherMap = OlapContextUtil.matchJoins(dataflow.getModel(), anotherOlapContext);",
          "",
          "[Added Lines]",
          "434:         Map<String, String> anotherMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), anotherOlapContext);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "456:         {",
          "457:             String sql = \"select CAL_DT, TRANS_ID, count(*) as GMV from test_kylin_fact \\n\"",
          "458:                     + \" where CAL_DT = '2012-01-10' and TRANS_ID = 10000 group by CAL_DT, TRANS_ID \";",
          "461:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "",
          "[Removed Lines]",
          "459:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "460:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "459:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "460:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "474:         {",
          "475:             String sql = \"select CAL_DT, TRANS_ID, count(*) as GMV from test_kylin_fact \\n\"",
          "476:                     + \" where CAL_DT = '2012-01-10' and TRANS_ID > 10000 group by CAL_DT, TRANS_ID \";",
          "479:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "480:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "481:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "477:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "478:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "477:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "478:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "533:         String modelId = \"abe3bf1a-c4bc-458d-8278-7ea8b00f5e96\";",
          "534:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "535:         String sql = \"select avg(TEST_KYLIN_FACT.ITEM_COUNT) from TEST_KYLIN_FACT\";",
          "538:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "539:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "540:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "536:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "537:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "536:         OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "537:         Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "560:         {",
          "561:             String sql = \"select sum(ORDER_ID) from TEST_KYLIN_FACT\";",
          "564:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "565:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "566:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "562:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "563:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "562:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(emptyProject, sql).get(0);",
          "563:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "571:         {",
          "572:             String sql = \"select max(ORDER_ID) from TEST_KYLIN_FACT\";",
          "575:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "576:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "577:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "573:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "574:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "573:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(emptyProject, sql).get(0);",
          "574:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "582:         {",
          "583:             String sql = \"select min(ORDER_ID) from TEST_KYLIN_FACT\";",
          "586:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "587:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "588:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "584:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "585:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "584:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(emptyProject, sql).get(0);",
          "585:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "593:         {",
          "594:             String sql = \"select count(ORDER_ID) from TEST_KYLIN_FACT\";",
          "597:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "598:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "599:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "595:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "596:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "595:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(emptyProject, sql).get(0);",
          "596:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "604:         {",
          "605:             String sql = \"select count(distinct ORDER_ID) from TEST_KYLIN_FACT\";",
          "608:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "609:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "610:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "606:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "607:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "606:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(emptyProject, sql).get(0);",
          "607:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "615:         {",
          "616:             String sql = \"select collect_set(ORDER_ID) from TEST_KYLIN_FACT\";",
          "619:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "620:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "621:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "617:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "618:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "617:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(emptyProject, sql).get(0);",
          "618:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "625:         {",
          "626:             getTestConfig().setProperty(\"kylin.engine.segment-online-mode\", \"ANY\");",
          "627:             String sql = \"select max(PRICE)from TEST_KYLIN_FACT\";",
          "630:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "631:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "632:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "628:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "629:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "628:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(emptyProject, sql).get(0);",
          "629:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "661:         String sql = \"select LSTG_FORMAT_NAME,count(*) from TEST_KYLIN_FACT group by LSTG_FORMAT_NAME\";",
          "663:         {",
          "666:             olapContext.fixModel(dataflow.getModel(), tableAlias2ModelAliasMap);",
          "667:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "668:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "664:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "665:             Map<String, String> tableAlias2ModelAliasMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "664:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "665:             Map<String, String> tableAlias2ModelAliasMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "673:         {",
          "674:             overwriteSystemProp(\"kylin.query.layout.prefer-aggindex\", \"false\");",
          "677:             olapContext.fixModel(dataflow.getModel(), tableAlias2ModelAliasMap);",
          "678:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "679:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "675:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "676:             Map<String, String> tableAlias2ModelAliasMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "675:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "676:             Map<String, String> tableAlias2ModelAliasMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "687:         String project = \"table_index\";",
          "688:         MetadataTestUtils.updateProjectConfig(project, \"kylin.query.use-tableindex-answer-non-raw-query\", \"true\");",
          "689:         String sql = \"select max(PRICE)from TEST_KYLIN_FACT\";",
          "692:         String modelId = \"acfde546-2cc9-4eec-bc92-e3bd46d4e2ee\";",
          "693:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), project).getDataflow(modelId);",
          "695:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "696:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "697:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "690:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "694:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "690:         OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "694:         Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "712:             copyForWrite.setOverrideProps(props);",
          "713:         });",
          "714:         String sql = \"select max(PRICE) from TEST_KYLIN_FACT\";",
          "718:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "719:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "720:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "715:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "717:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "715:         OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "717:         Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "739:         for (String filter : filters) {",
          "740:             String sql = \"select CAL_DT from test_kylin_fact a inner join EDW.test_sites b \\n\"",
          "741:                     + \" on a.LSTG_SITE_ID = b.SITE_ID where \" + filter;",
          "744:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "745:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "746:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "742:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "743:             Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "742:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "743:             Map<String, String> sqlAlias2ModelName = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "776:                 + \"GROUP BY \\\"TEST_KYLIN_FACT\\\".\\\"TRANS_ID\\\"\";",
          "777:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "778:                 .getDataflow(\"741ca86a-1f13-46da-a59f-95fb68615e3a\");",
          "781:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "782:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "783:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "779:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "780:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "779:         OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "780:         Map<String, String> sqlAlias2ModelName = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import org.apache.kylin.query.engine.TypeSystem;",
          "39: import org.apache.kylin.query.engine.meta.SimpleDataContext;",
          "40: import org.apache.kylin.query.relnode.OLAPContext;",
          "42: import org.apache.spark.SparkConf;",
          "43: import org.apache.spark.sql.SparderEnv;",
          "44: import org.apache.spark.sql.SparkSession;",
          "",
          "[Removed Lines]",
          "41: import org.apache.kylin.util.OlapContextUtil;",
          "",
          "[Added Lines]",
          "41: import org.apache.kylin.util.OlapContextTestUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:                 + \"and TEST_BANK_INCOME.DT = '2021-11-02'\\n\" //",
          "106:                 + \"and TEST_BANK_INCOME.COUNTRY in ('INDONESIA')\\n\" //",
          "107:                 + \"and TEST_BANK_INCOME.COUNTRY in ('KENYA')\";",
          "109:         OLAPContext context = contexts.get(0);",
          "111:         CalciteSchema rootSchema = new QueryExec(project, kylinConfig).getRootSchema();",
          "",
          "[Removed Lines]",
          "108:         List<OLAPContext> contexts = OlapContextUtil.getOlapContexts(project, sql);",
          "",
          "[Added Lines]",
          "108:         List<OLAPContext> contexts = OlapContextTestUtil.getOlapContexts(project, sql);",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "29: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "30: import org.apache.kylin.query.relnode.OLAPContext;",
          "32: import org.junit.After;",
          "33: import org.junit.Assert;",
          "34: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "31: import org.apache.kylin.util.OlapContextUtil;",
          "",
          "[Added Lines]",
          "31: import org.apache.kylin.util.OlapContextTestUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:         for (String filter : filters) {",
          "60:             String sql = \"select a.NAME from TEST_BANK_INCOME a left join TEST_BANK_LOCATION b \\n\"",
          "61:                     + \" on a.COUNTRY = b.COUNTRY where \" + filter;",
          "64:             Assert.assertFalse(sqlAlias2ModelName.isEmpty());",
          "65:         }",
          "66:     }",
          "",
          "[Removed Lines]",
          "62:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "63:             Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "62:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "63:             Map<String, String> sqlAlias2ModelName = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:         overwriteSystemProp(\"kylin.query.join-match-optimization-enabled\", \"true\");",
          "75:         String sql = \"select a.NAME from TEST_BANK_INCOME a inner join TEST_BANK_LOCATION b on a.COUNTRY = b.COUNTRY\";",
          "76:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), project).getDataflow(modelId);",
          "79:         Assert.assertTrue(sqlAlias2ModelName.isEmpty());",
          "80:     }",
          "",
          "[Removed Lines]",
          "77:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(project, sql, true).get(0);",
          "78:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "77:         OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(project, sql, true).get(0);",
          "78:         Map<String, String> sqlAlias2ModelName = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:         for (String filter : filters) {",
          "92:             String sql = \"select CAL_DT from test_kylin_fact a inner join EDW.test_sites b \\n\"",
          "93:                     + \" on a.LSTG_SITE_ID = b.SITE_ID where \" + filter;",
          "96:             Assert.assertTrue(sqlAlias2ModelName.isEmpty());",
          "97:         }",
          "98:     }",
          "",
          "[Removed Lines]",
          "94:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "95:             Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "94:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "95:             Map<String, String> sqlAlias2ModelName = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "109:         for (String filter : filters) {",
          "110:             String sql = \"select a.NAME from TEST_BANK_INCOME a left join TEST_BANK_LOCATION b \\n\"",
          "111:                     + \" on a.COUNTRY = b.COUNTRY where \" + filter;",
          "114:             Assert.assertFalse(sqlAlias2ModelName.isEmpty());",
          "115:         }",
          "116:     }",
          "",
          "[Removed Lines]",
          "112:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql, true).get(0);",
          "113:             Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "112:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql, true).get(0);",
          "113:             Map<String, String> sqlAlias2ModelName = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "126:         for (String filter : filters) {",
          "127:             String sql = \"select a.NAME from TEST_BANK_INCOME a left join TEST_BANK_LOCATION b \\n\"",
          "128:                     + \" on a.COUNTRY = b.COUNTRY where \" + filter;",
          "131:             Assert.assertTrue(sqlAlias2ModelNameMap.isEmpty());",
          "132:         }",
          "133:     }",
          "",
          "[Removed Lines]",
          "129:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "130:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "129:             OLAPContext olapContext = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "130:             Map<String, String> sqlAlias2ModelNameMap = OlapContextTestUtil.matchJoins(dataflow.getModel(), olapContext);",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: import org.apache.kylin.query.engine.TypeSystem;",
          "39: import org.apache.kylin.query.engine.meta.SimpleDataContext;",
          "40: import org.apache.kylin.query.relnode.OLAPContext;",
          "42: import org.apache.spark.SparkConf;",
          "43: import org.apache.spark.sql.SparderEnv;",
          "44: import org.apache.spark.sql.SparkSession;",
          "",
          "[Removed Lines]",
          "41: import org.apache.kylin.util.OlapContextUtil;",
          "",
          "[Added Lines]",
          "41: import org.apache.kylin.util.OlapContextTestUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:     private List<NDataSegment> startRealizationPruner(NDataflowManager dataflowManager, String dataflowId, String sql,",
          "95:             String project, KylinConfig kylinConfig) throws Exception {",
          "96:         NDataflow dataflow = dataflowManager.getDataflow(dataflowId);",
          "98:         OLAPContext context = olapContexts.get(0);",
          "99:         CalciteSchema rootSchema = new QueryExec(project, kylinConfig).getRootSchema();",
          "100:         SimpleDataContext dataContext = new SimpleDataContext(rootSchema.plus(), TypeSystem.javaTypeFactory(),",
          "",
          "[Removed Lines]",
          "97:         List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "",
          "[Added Lines]",
          "97:         List<OLAPContext> olapContexts = OlapContextTestUtil.getOlapContexts(getProject(), sql);",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: import org.apache.kylin.metadata.realization.RealizationStatusEnum;",
          "48: import org.apache.kylin.query.engine.SchemaMetaData;",
          "49: import org.apache.kylin.query.relnode.OLAPContext;",
          "51: import org.apache.spark.SparkConf;",
          "52: import org.apache.spark.sql.SparderEnv;",
          "53: import org.apache.spark.sql.SparkSession;",
          "",
          "[Removed Lines]",
          "50: import org.apache.kylin.util.OlapContextUtil;",
          "",
          "[Added Lines]",
          "50: import org.apache.kylin.util.OlapContextTestUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:     public void testTableIndexAnswerSelectStarPartialMatch() throws Exception {",
          "100:         String sql = \"select * from kylin_sales\";",
          "101:         overwriteSystemProp(\"kylin.query.use-tableindex-answer-select-star.enabled\", \"true\");",
          "103:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "104:                 .getDataflow(\"ccb82d81-1497-ca6d-f226-3258a0f0ba4f\");",
          "105:         Assert.assertEquals(dataflow.getAllColumns().size(), context.allColumns.size());",
          "107:         context.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "108:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "109:                 dataflow.getQueryableSegments(), context.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "102:         OLAPContext context = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "106:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), context);",
          "",
          "[Added Lines]",
          "102:         OLAPContext context = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "106:         Map<String, String> sqlAlias2ModelName = OlapContextTestUtil.matchJoins(dataflow.getModel(), context);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:     public void testTableIndexAnswerSelectStarBaseTableIndex() throws Exception {",
          "116:         String sql = \"select * from test_kylin_fact \\n\";",
          "117:         overwriteSystemProp(\"kylin.query.use-tableindex-answer-select-star.enabled\", \"true\");",
          "119:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "120:                 .getDataflow(\"c7a44f37-8481-e78b-5cac-faa7d76767db\");",
          "121:         Assert.assertEquals(dataflow.getAllColumns().size(), context.allColumns.size());",
          "123:         context.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "124:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "125:                 dataflow.getQueryableSegments(), context.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "118:         OLAPContext context = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "122:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), context);",
          "",
          "[Added Lines]",
          "118:         OLAPContext context = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "122:         Map<String, String> sqlAlias2ModelName = OlapContextTestUtil.matchJoins(dataflow.getModel(), context);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:         dataflowManager.updateDataflow(updateOps);",
          "182:         String sql = \"select cal_dt, new_cc from test_kylin_fact\";",
          "184:         Set<TblColRef> allColumns = context.realization.getAllColumns();",
          "185:         Assert.assertEquals(13, allColumns.size());",
          "186:         SchemaMetaData schemaMetaData = new SchemaMetaData(getProject(), KylinConfig.getInstanceFromEnv());",
          "187:         Assert.assertEquals(26, schemaMetaData.getTables().get(1).getFields().size());",
          "190:         context.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "191:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "192:                 dataflow.getQueryableSegments(), context.getSQLDigest(), null);",
          "",
          "[Removed Lines]",
          "183:         OLAPContext context = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "189:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), context);",
          "",
          "[Added Lines]",
          "183:         OLAPContext context = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "189:         Map<String, String> sqlAlias2ModelName = OlapContextTestUtil.matchJoins(dataflow.getModel(), context);",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import org.apache.kylin.query.relnode.OLAPContext;",
          "40: import org.apache.kylin.storage.StorageContext;",
          "41: import org.apache.kylin.util.MetadataTestUtils;",
          "43: import org.junit.jupiter.api.AfterEach;",
          "44: import org.junit.jupiter.api.Assertions;",
          "45: import org.junit.jupiter.api.BeforeEach;",
          "",
          "[Removed Lines]",
          "42: import org.apache.kylin.util.OlapContextUtil;",
          "",
          "[Added Lines]",
          "42: import org.apache.kylin.util.OlapContextTestUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:                 QueryRouter.USE_VACANT_INDEXES);",
          "74:         try (QueryContext queryContext = QueryContext.current()) {",
          "75:             String sql = \"select max(LO_ORDERDATE) from ssb.lineorder\";",
          "77:             OLAPContext olapContext = olapContexts.get(0);",
          "78:             StorageContext storageContext = olapContext.storageContext;",
          "79:             Assertions.assertTrue(storageContext.isEmptyLayout());",
          "",
          "[Removed Lines]",
          "76:             List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "",
          "[Added Lines]",
          "76:             List<OLAPContext> olapContexts = OlapContextTestUtil.getOlapContexts(getProject(), sql);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:     void testUnmatchedWithNullResult() throws SqlParseException {",
          "86:         String modelId = \"d67bf0e4-30f4-9248-2528-52daa80be91a\";",
          "87:         String sql = \"select max(LO_ORDERPRIOTITY) from ssb.lineorder\";",
          "89:         OLAPContext olapContext = olapContexts.get(0);",
          "90:         NDataflow df = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "92:         olapContext.fixModel(df.getModel(), matchedJoinGraphAliasMap);",
          "94:         Candidate candidate = new Candidate(df, olapContext, matchedJoinGraphAliasMap);",
          "",
          "[Removed Lines]",
          "88:         List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "91:         Map<String, String> matchedJoinGraphAliasMap = OlapContextUtil.matchJoins(df.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "88:         List<OLAPContext> olapContexts = OlapContextTestUtil.getOlapContexts(getProject(), sql);",
          "91:         Map<String, String> matchedJoinGraphAliasMap = OlapContextTestUtil.matchJoins(df.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:         NDataModelManager modelMgr = NDataModelManager.getInstance(getTestConfig(), getProject());",
          "105:         modelMgr.listAllModels().stream().filter(model -> !model.isBroken())",
          "106:                 .forEach(model -> cleanAlreadyExistingLayoutsInSegments(model.getId()));",
          "108:         OLAPContext olapContext = olapContexts.get(0);",
          "109:         NDataflow df = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "111:         olapContext.fixModel(df.getModel(), matchedJoinGraphAliasMap);",
          "113:         Candidate candidate = new Candidate(df, olapContext, matchedJoinGraphAliasMap);",
          "",
          "[Removed Lines]",
          "107:         List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "110:         Map<String, String> matchedJoinGraphAliasMap = OlapContextUtil.matchJoins(df.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "107:         List<OLAPContext> olapContexts = OlapContextTestUtil.getOlapContexts(getProject(), sql);",
          "110:         Map<String, String> matchedJoinGraphAliasMap = OlapContextTestUtil.matchJoins(df.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "132:     void testUnmatchedAggIndex() throws SqlParseException {",
          "133:         String modelId = \"d67bf0e4-30f4-9248-2528-52daa80be91a\";",
          "134:         String sql = \"select max(LO_ORDERPRIOTITY) from ssb.lineorder\";",
          "136:         OLAPContext olapContext = olapContexts.get(0);",
          "137:         NDataflow df = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "139:         olapContext.fixModel(df.getModel(), matchedJoinGraphAliasMap);",
          "141:         Candidate candidate = new Candidate(df, olapContext, matchedJoinGraphAliasMap);",
          "",
          "[Removed Lines]",
          "135:         List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "138:         Map<String, String> matchedJoinGraphAliasMap = OlapContextUtil.matchJoins(df.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "135:         List<OLAPContext> olapContexts = OlapContextTestUtil.getOlapContexts(getProject(), sql);",
          "138:         Map<String, String> matchedJoinGraphAliasMap = OlapContextTestUtil.matchJoins(df.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "152:         NDataModelManager modelMgr = NDataModelManager.getInstance(getTestConfig(), getProject());",
          "153:         modelMgr.listAllModels().stream().filter(model -> !model.isBroken())",
          "154:                 .forEach(model -> cleanAlreadyExistingLayoutsInSegments(model.getId()));",
          "156:         OLAPContext olapContext = olapContexts.get(0);",
          "157:         NDataflow df = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "159:         olapContext.fixModel(df.getModel(), matchedJoinGraphAliasMap);",
          "161:         Candidate candidate = new Candidate(df, olapContext, matchedJoinGraphAliasMap);",
          "",
          "[Removed Lines]",
          "155:         List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "158:         Map<String, String> matchedJoinGraphAliasMap = OlapContextUtil.matchJoins(df.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "155:         List<OLAPContext> olapContexts = OlapContextTestUtil.getOlapContexts(getProject(), sql);",
          "158:         Map<String, String> matchedJoinGraphAliasMap = OlapContextTestUtil.matchJoins(df.getModel(), olapContext);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "175:         NDataModelManager modelMgr = NDataModelManager.getInstance(getTestConfig(), getProject());",
          "176:         modelMgr.listAllModels().stream().filter(model -> !model.isBroken())",
          "177:                 .forEach(model -> cleanAlreadyExistingLayoutsInSegments(model.getId()));",
          "179:         OLAPContext olapContext = olapContexts.get(0);",
          "180:         NDataflow df = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "182:         olapContext.fixModel(df.getModel(), matchedJoinGraphAliasMap);",
          "184:         Candidate candidate = new Candidate(df, olapContext, matchedJoinGraphAliasMap);",
          "",
          "[Removed Lines]",
          "178:         List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "181:         Map<String, String> matchedJoinGraphAliasMap = OlapContextUtil.matchJoins(df.getModel(), olapContext);",
          "",
          "[Added Lines]",
          "178:         List<OLAPContext> olapContexts = OlapContextTestUtil.getOlapContexts(getProject(), sql);",
          "181:         Map<String, String> matchedJoinGraphAliasMap = OlapContextTestUtil.matchJoins(df.getModel(), olapContext);",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextUtil.java||src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextTestUtil.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextUtil.java -> src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextTestUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Collection;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "25: import org.apache.calcite.rel.RelNode;",
          "26: import org.apache.calcite.sql.parser.SqlParseException;",
          "27: import org.apache.kylin.common.KylinConfig;",
          "28: import org.apache.kylin.metadata.model.NDataModel;",
          "29: import org.apache.kylin.metadata.project.NProjectManager;",
          "30: import org.apache.kylin.metadata.realization.NoRealizationFoundException;",
          "31: import org.apache.kylin.query.engine.QueryExec;",
          "32: import org.apache.kylin.query.relnode.OLAPContext;",
          "33: import org.apache.kylin.query.routing.RealizationChooser;",
          "34: import org.apache.kylin.query.util.QueryContextCutter;",
          "40:     public static List<OLAPContext> getOlapContexts(String project, String sql) throws SqlParseException {",
          "41:         return getOlapContexts(project, sql, false);",
          "",
          "[Removed Lines]",
          "36: import com.clearspring.analytics.util.Lists;",
          "38: public class OlapContextUtil {",
          "",
          "[Added Lines]",
          "24: import java.util.function.Consumer;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "33: import org.apache.kylin.metadata.realization.NoStreamingRealizationFoundException;",
          "39: public class OlapContextTestUtil {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     public static List<OLAPContext> getOlapContexts(String project, String sql, boolean reCutBanned)",
          "45:             throws SqlParseException {",
          "46:         QueryExec queryExec = new QueryExec(project, KylinConfig.getInstanceFromEnv());",
          "48:         try {",
          "49:             QueryContextCutter.selectRealization(rel, reCutBanned);",
          "53:         }",
          "",
          "[Removed Lines]",
          "47:         RelNode rel = queryExec.parseAndOptimize(sql);",
          "50:         } catch (NoRealizationFoundException e) {",
          "",
          "[Added Lines]",
          "49:             RelNode rel = queryExec.parseAndOptimize(sql);",
          "51:         } catch (NoRealizationFoundException | NoStreamingRealizationFoundException e) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:         return getOlapContexts();",
          "56:     }",
          "58:     public static List<OLAPContext> getHepRulesOptimizedOlapContexts(String project, String sql, boolean reCutBanned)",
          "59:             throws SqlParseException {",
          "60:         QueryExec queryExec = new QueryExec(project, KylinConfig.getInstanceFromEnv());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     public static List<OLAPContext> getOlapContexts(String project, String sql, boolean reCutBanned,",
          "60:             Consumer<NoRealizationFoundException> consumer) throws SqlParseException {",
          "61:         QueryExec queryExec = new QueryExec(project, KylinConfig.getInstanceFromEnv());",
          "62:         try {",
          "63:             RelNode rel = queryExec.parseAndOptimize(sql);",
          "64:             QueryContextCutter.selectRealization(rel, reCutBanned);",
          "65:         } catch (NoRealizationFoundException e) {",
          "66:             consumer.accept(e);",
          "67:         }",
          "68:         return getOlapContexts();",
          "69:     }",
          "",
          "---------------"
        ],
        "src/query/src/main/java/org/apache/kylin/query/engine/exec/sparder/SparderQueryPlanExec.java||src/query/src/main/java/org/apache/kylin/query/engine/exec/sparder/SparderQueryPlanExec.java": [
          "File: src/query/src/main/java/org/apache/kylin/query/engine/exec/sparder/SparderQueryPlanExec.java -> src/query/src/main/java/org/apache/kylin/query/engine/exec/sparder/SparderQueryPlanExec.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.kylin.common.exception.KylinException;",
          "33: import org.apache.kylin.common.exception.QueryErrorCode;",
          "34: import org.apache.kylin.common.msg.MsgPicker;",
          "35: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "36: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "37: import org.apache.kylin.query.engine.exec.ExecuteResult;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;",
          "36: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: import org.apache.kylin.query.util.QueryContextCutter;",
          "49: import org.apache.spark.SparkException;",
          "54: import lombok.val;",
          "55: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "51: import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;",
          "52: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:     public ExecuteResult executeToIterable(RelNode rel, MutableDataContext dataContext) {",
          "70:         QueryContext.currentTrace().startSpan(QueryTrace.MODEL_MATCHING);",
          "74:         val contexts = ContextUtil.listContexts();",
          "75:         for (OLAPContext context : contexts) {",
          "",
          "[Removed Lines]",
          "72:         selectRealization(rel);",
          "",
          "[Added Lines]",
          "71:         ContextUtil.dumpCalcitePlan(\"EXECUTION PLAN BEFORE (SparderQueryPlanExec) SELECT REALIZATION\", rel, log);",
          "72:         QueryContext.current().record(\"end_plan\");",
          "73:         QueryContext.current().getQueryTagInfo().setWithoutSyntaxError(true);",
          "75:         QueryContextCutter.selectRealization(rel, BackdoorToggles.getIsQueryFromAutoModeling());",
          "76:         ContextUtil.dumpCalcitePlan(\"EXECUTION PLAN AFTER (SparderQueryPlanExec) SELECT REALIZATION IS SET\", rel, log);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:         rewrite(rel);",
          "108:     }",
          "110:     private static boolean forceTableIndexAtException(Exception e) {",
          "",
          "[Removed Lines]",
          "96:         return doExecute(rel, dataContext);",
          "97:     }",
          "105:     private ExecuteResult doExecute(RelNode rel, DataContext dataContext) {",
          "106:         QueryEngine queryEngine = new SparkEngine();",
          "107:         return internalCompute(queryEngine, dataContext, rel.getInput(0));",
          "",
          "[Added Lines]",
          "102:         return internalCompute(new SparkEngine(), dataContext, rel.getInput(0));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "153:         return queryEngine.computeToIterable(dataContext, rel);",
          "154:     }",
          "",
          "[Removed Lines]",
          "159:     private void selectRealization(RelNode rel) {",
          "160:         ContextUtil.dumpCalcitePlan(\"EXECUTION PLAN BEFORE OLAPImplementor\", rel, log);",
          "161:         QueryContext.current().record(\"end_plan\");",
          "163:         QueryContext.current().getQueryTagInfo().setWithoutSyntaxError(true);",
          "164:         QueryContextCutter.selectRealization(rel, BackdoorToggles.getIsQueryFromAutoModeling());",
          "165:         ContextUtil.dumpCalcitePlan(\"EXECUTION PLAN AFTER REALIZATION IS SET\", rel, log);",
          "166:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java||src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java": [
          "File: src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java -> src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:         int retryCutTimes = 0;",
          "63:         while (retryCutTimes++ < MAX_RETRY_TIMES_OF_CONTEXT_CUT) {",
          "64:             try {",
          "66:             } catch (NoRealizationFoundException | NoStreamingRealizationFoundException e) {",
          "67:                 if (isReCutBanned && e instanceof NoStreamingRealizationFoundException) {",
          "68:                     checkStreamingTableWithAutoModeling();",
          "70:                     throw e;",
          "71:                 }",
          "72:                 reCutStrategy.tryCutToSmallerContexts(root, e);",
          "",
          "[Removed Lines]",
          "65:                 return collectContextInfoAndSelectRealization(root);",
          "69:                 } else if (isReCutBanned) {",
          "",
          "[Added Lines]",
          "67:                 fillOlapContextPropertiesWithRelTree(root);",
          "68:                 List<OLAPContext> olapContexts = chooseCandidate();",
          "69:                 if (isReCutBanned) {",
          "70:                     throw new NoRealizationFoundException(\"There is no need to select realizations for OlapContexts.\");",
          "71:                 }",
          "72:                 return olapContexts;",
          "76:                 } else if (isReCutBanned || e instanceof NoStreamingRealizationFoundException) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         throw new NoRealizationFoundException(errorMsg);",
          "89:     }",
          "93:         OLAPRel.OLAPImplementor kapImplementor = new OLAPRel.OLAPImplementor();",
          "94:         kapImplementor.visitChild(queryRoot.getInput(0), queryRoot);",
          "95:         QueryContext.current().record(\"collect_olap_context_info\");",
          "100:             olapContext.setHasSelected(true);",
          "101:             log.info(\"Context for realization matching: {}\", olapContext);",
          "104:         long selectLayoutStartTime = System.currentTimeMillis();",
          "105:         if (contexts.size() > 1) {",
          "",
          "[Removed Lines]",
          "91:     private static List<OLAPContext> collectContextInfoAndSelectRealization(RelNode queryRoot) {",
          "97:         List<OLAPContext> contexts = ContextUtil.listContextsHavingScan();",
          "99:         for (OLAPContext olapContext : contexts) {",
          "102:         }",
          "",
          "[Added Lines]",
          "98:     private static void fillOlapContextPropertiesWithRelTree(RelNode queryRoot) {",
          "103:     }",
          "105:     private static List<OLAPContext> chooseCandidate() {",
          "106:         List<OLAPContext> contexts = ContextUtil.listContextsHavingScan();",
          "107:         contexts.forEach(olapContext -> {",
          "110:         });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed8b34665df96225ea949643cdbe48a3934f738e",
      "candidate_info": {
        "commit_hash": "ed8b34665df96225ea949643cdbe48a3934f738e",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/ed8b34665df96225ea949643cdbe48a3934f738e",
        "files": [
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/stage/build/FlatTableAndDictBase.scala",
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/utils/SparkConfHelper.java"
        ],
        "message": "KYLIN-5641 fix set spark conf in serverless mode",
        "before_after_code_files": [
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/stage/build/FlatTableAndDictBase.scala||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/stage/build/FlatTableAndDictBase.scala",
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/utils/SparkConfHelper.java||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/utils/SparkConfHelper.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/stage/build/FlatTableAndDictBase.scala||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/stage/build/FlatTableAndDictBase.scala": [
          "File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/stage/build/FlatTableAndDictBase.scala -> src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/stage/build/FlatTableAndDictBase.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.kylin.engine.spark.model.SegmentFlatTableDesc",
          "33: import org.apache.kylin.engine.spark.model.planner.{CuboIdToLayoutUtils, FlatTableToCostUtils}",
          "34: import org.apache.kylin.engine.spark.smarter.IndexDependencyParser",
          "36: import org.apache.kylin.engine.spark.utils.SparkDataSource._",
          "37: import org.apache.kylin.guava30.shaded.common.collect.Sets",
          "38: import org.apache.kylin.metadata.cube.cuboid.AdaptiveSpanningTree",
          "",
          "[Removed Lines]",
          "35: import org.apache.kylin.engine.spark.utils.LogEx",
          "",
          "[Added Lines]",
          "35: import org.apache.kylin.engine.spark.utils.{LogEx, SparkConfHelper}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347:     }",
          "348:     logInfo(s\"Segment $segmentId persist flat table: $flatTablePath\")",
          "349:     sparkSession.sparkContext.setJobDescription(s\"Segment $segmentId persist flat table.\")",
          "353:     tableDS.write.mode(SaveMode.Overwrite).parquet(flatTablePath.toString)",
          "355:     DFBuilderHelper.checkPointSegment(dataSegment, (copied: NDataSegment) => {",
          "356:       copied.setFlatTableReady(true)",
          "357:       if (dataSegment.isFlatTableReady) {",
          "",
          "[Removed Lines]",
          "350:     if (config.isFlatTableRedistributionEnabled) {",
          "351:       sparkSession.sessionState.conf.setLocalProperty(\"spark.sql.sources.repartitionWritingDataSource\", \"true\")",
          "352:     }",
          "354:     sparkSession.sessionState.conf.setLocalProperty(\"spark.sql.sources.repartitionWritingDataSource\", null)",
          "",
          "[Added Lines]",
          "350:     SparkConfHelper.setLocalPropertyIfNeeded(sparkSession,",
          "351:       config.isFlatTableRedistributionEnabled,",
          "352:       \"spark.sql.sources.repartitionWritingDataSource\",",
          "353:       \"true\");",
          "355:     SparkConfHelper.resetLocalPropertyIfNeeded(sparkSession,",
          "356:       config.isFlatTableRedistributionEnabled,",
          "357:       \"spark.sql.sources.repartitionWritingDataSource\");",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/utils/SparkConfHelper.java||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/utils/SparkConfHelper.java": [
          "File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/utils/SparkConfHelper.java -> src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/utils/SparkConfHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.engine.spark.utils;",
          "25: import org.apache.kylin.common.KylinConfig;",
          "26: import org.apache.kylin.common.util.ClassUtil;",
          "27: import org.apache.kylin.common.util.JsonUtil;",
          "29: import org.apache.kylin.engine.spark.job.KylinBuildEnv;",
          "30: import org.apache.spark.SparkConf;",
          "31: import org.apache.spark.conf.rule.ExecutorCoreRule;",
          "32: import org.apache.spark.conf.rule.ExecutorInstancesRule;",
          "",
          "[Removed Lines]",
          "21: import java.util.HashMap;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "28: import org.apache.kylin.cluster.IClusterManager;",
          "",
          "[Added Lines]",
          "21: import com.fasterxml.jackson.core.JsonProcessingException;",
          "22: import org.apache.kylin.cluster.IClusterManager;",
          "27: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "28: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: import org.apache.spark.conf.rule.SparkConfRule;",
          "37: import org.apache.spark.conf.rule.StandaloneConfRule;",
          "38: import org.apache.spark.conf.rule.YarnConfRule;",
          "39: import org.slf4j.Logger;",
          "40: import org.slf4j.LoggerFactory;",
          "46: public class SparkConfHelper {",
          "47:     protected static final Logger logger = LoggerFactory.getLogger(SparkConfHelper.class);",
          "",
          "[Removed Lines]",
          "42: import com.fasterxml.jackson.core.JsonProcessingException;",
          "43: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "44: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "[Added Lines]",
          "38: import org.apache.spark.sql.SparkSession;",
          "42: import java.util.HashMap;",
          "43: import java.util.List;",
          "44: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:     public boolean hasCountDistinct() {",
          "116:         return \"true\".equalsIgnoreCase(getConf(COUNT_DISTICT));",
          "117:     }",
          "118: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:     public static void setLocalPropertyIfNeeded(SparkSession ss, boolean config, String key, String value) {",
          "120:         if (config) {",
          "121:             ss.sessionState().conf().setLocalProperty(key, value);",
          "122:         }",
          "123:     }",
          "125:     public static void resetLocalPropertyIfNeeded(SparkSession ss, boolean config, String key) {",
          "126:         if (config) {",
          "127:             ss.sessionState().conf().setLocalProperty(key, \"\");",
          "128:         }",
          "129:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}