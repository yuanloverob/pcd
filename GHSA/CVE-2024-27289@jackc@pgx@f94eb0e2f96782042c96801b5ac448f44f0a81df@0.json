{
  "cve_id": "CVE-2024-27289",
  "cve_desc": "pgx is a PostgreSQL driver and toolkit for Go. Prior to version 4.18.2, SQL injection can occur when all of the following conditions are met: the non-default simple protocol is used; a placeholder for a numeric value must be immediately preceded by a minus; there must be a second placeholder for a string value after the first placeholder; both must be on the same line; and both parameter values must be user-controlled. The problem is resolved in v4.18.2. As a workaround, do not use the simple protocol or do not place a minus directly before a placeholder.\n",
  "repo": "jackc/pgx",
  "patch_hash": "f94eb0e2f96782042c96801b5ac448f44f0a81df",
  "patch_info": {
    "commit_hash": "f94eb0e2f96782042c96801b5ac448f44f0a81df",
    "repo": "jackc/pgx",
    "commit_url": "https://github.com/jackc/pgx/commit/f94eb0e2f96782042c96801b5ac448f44f0a81df",
    "files": [
      "internal/sanitize/sanitize.go",
      "internal/sanitize/sanitize_test.go"
    ],
    "message": "Always wrap arguments in parentheses in the SQL sanitizer",
    "before_after_code_files": [
      "internal/sanitize/sanitize.go||internal/sanitize/sanitize.go",
      "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go"
    ]
  },
  "patch_diff": {
    "internal/sanitize/sanitize.go||internal/sanitize/sanitize.go": [
      "File: internal/sanitize/sanitize.go -> internal/sanitize/sanitize.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "44:     str = \"null\"",
      "45:    case int64:",
      "46:     str = strconv.FormatInt(arg, 10)",
      "52:    case float64:",
      "55:     str = strconv.FormatFloat(arg, 'f', -1, 64)",
      "59:    case bool:",
      "60:     str = strconv.FormatBool(arg)",
      "61:    case []byte:",
      "",
      "[Removed Lines]",
      "49:     if arg < 0 {",
      "50:      str = \"(\" + str + \")\"",
      "51:     }",
      "56:     if arg < 0 {",
      "57:      str = \"(\" + str + \")\"",
      "58:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "68:     return \"\", fmt.Errorf(\"invalid arg type: %T\", arg)",
      "69:    }",
      "70:    argUse[argIdx] = true",
      "71:   default:",
      "72:    return \"\", fmt.Errorf(\"invalid Part type: %T\", part)",
      "73:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64:    str = \"(\" + str + \")\"",
      "",
      "---------------"
    ],
    "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go": [
      "File: internal/sanitize/sanitize_test.go -> internal/sanitize/sanitize_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:   {",
      "128:    query:    sanitize.Query{Parts: []sanitize.Part{\"select 42\"}},",
      "129:    args:     []interface{}{},",
      "131:   },",
      "132:   {",
      "133:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
      "134:    args:     []interface{}{int64(42)},",
      "136:   },",
      "137:   {",
      "138:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
      "139:    args:     []interface{}{float64(1.23)},",
      "141:   },",
      "142:   {",
      "143:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
      "144:    args:     []interface{}{true},",
      "146:   },",
      "147:   {",
      "148:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
      "149:    args:     []interface{}{[]byte{0, 1, 2, 3, 255}},",
      "151:   },",
      "152:   {",
      "153:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
      "154:    args:     []interface{}{nil},",
      "156:   },",
      "157:   {",
      "158:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
      "159:    args:     []interface{}{\"foobar\"},",
      "161:   },",
      "162:   {",
      "163:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
      "164:    args:     []interface{}{\"foo'bar\"},",
      "166:   },",
      "167:   {",
      "168:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
      "169:    args:     []interface{}{`foo\\'bar`},",
      "171:   },",
      "172:   {",
      "173:    query:    sanitize.Query{Parts: []sanitize.Part{\"insert \", 1}},",
      "174:    args:     []interface{}{time.Date(2020, time.March, 1, 23, 59, 59, 999999999, time.UTC)},",
      "176:   },",
      "177:   {",
      "178:    query:    sanitize.Query{Parts: []sanitize.Part{\"select 1-\", 1}},",
      "",
      "[Removed Lines]",
      "130:    expected: `select 42`,",
      "135:    expected: `select 42`,",
      "140:    expected: `select 1.23`,",
      "145:    expected: `select true`,",
      "150:    expected: `select '\\x00010203ff'`,",
      "155:    expected: `select null`,",
      "160:    expected: `select 'foobar'`,",
      "165:    expected: `select 'foo''bar'`,",
      "170:    expected: `select 'foo\\''bar'`,",
      "175:    expected: `insert '2020-03-01 23:59:59.999999Z'`,",
      "",
      "[Added Lines]",
      "130:    expected: `select (42)`,",
      "135:    expected: `select (42)`,",
      "140:    expected: `select (1.23)`,",
      "145:    expected: `select (true)`,",
      "150:    expected: `select ('\\x00010203ff')`,",
      "155:    expected: `select (null)`,",
      "160:    expected: `select ('foobar')`,",
      "165:    expected: `select ('foo''bar')`,",
      "170:    expected: `select ('foo\\''bar')`,",
      "175:    expected: `insert ('2020-03-01 23:59:59.999999Z')`,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0bf9ac391c87b05d3c44cf0bbc43b9556761bc64",
      "candidate_info": {
        "commit_hash": "0bf9ac391c87b05d3c44cf0bbc43b9556761bc64",
        "repo": "jackc/pgx",
        "commit_url": "https://github.com/jackc/pgx/commit/0bf9ac391c87b05d3c44cf0bbc43b9556761bc64",
        "files": [
          "internal/sanitize/sanitize_test.go"
        ],
        "message": "Fix erroneous test case\n\nThe sanitizer does not rewrite the query portions of the query only the\nparameters.",
        "before_after_code_files": [
          "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go"
          ],
          "candidate": [
            "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go": [
          "File: internal/sanitize/sanitize_test.go -> internal/sanitize/sanitize_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   {",
          "128:    query:    sanitize.Query{Parts: []sanitize.Part{\"select 42\"}},",
          "129:    args:     []interface{}{},",
          "131:   },",
          "132:   {",
          "133:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "",
          "[Removed Lines]",
          "130:    expected: `select (42)`,",
          "",
          "[Added Lines]",
          "130:    expected: `select 42`,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69fcb4633334e5d366529f40ce63c29b272d2522",
      "candidate_info": {
        "commit_hash": "69fcb4633334e5d366529f40ce63c29b272d2522",
        "repo": "jackc/pgx",
        "commit_url": "https://github.com/jackc/pgx/commit/69fcb4633334e5d366529f40ce63c29b272d2522",
        "files": [
          "internal/sanitize/sanitize.go",
          "internal/sanitize/sanitize_test.go"
        ],
        "message": "Use spaces instead of parentheses for SQL sanitization.\n\nThis still solves the problem of negative numbers creating a line\ncomment, but this avoids breaking edge cases such as `set foo to $1`\nwhere the substition is taking place in a location where an arbitrary\nexpression is not allowed.",
        "before_after_code_files": [
          "internal/sanitize/sanitize.go||internal/sanitize/sanitize.go",
          "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "internal/sanitize/sanitize.go||internal/sanitize/sanitize.go",
            "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go"
          ],
          "candidate": [
            "internal/sanitize/sanitize.go||internal/sanitize/sanitize.go",
            "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/sanitize/sanitize.go||internal/sanitize/sanitize.go": [
          "File: internal/sanitize/sanitize.go -> internal/sanitize/sanitize.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   default:",
          "66:    return \"\", fmt.Errorf(\"invalid Part type: %T\", part)",
          "67:   }",
          "",
          "[Removed Lines]",
          "64:    str = \"(\" + str + \")\"",
          "",
          "[Added Lines]",
          "64:    str = \" \" + str + \" \"",
          "",
          "---------------"
        ],
        "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go": [
          "File: internal/sanitize/sanitize_test.go -> internal/sanitize/sanitize_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   {",
          "133:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "134:    args:     []interface{}{int64(42)},",
          "136:   },",
          "137:   {",
          "138:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "139:    args:     []interface{}{float64(1.23)},",
          "141:   },",
          "142:   {",
          "143:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "144:    args:     []interface{}{true},",
          "146:   },",
          "147:   {",
          "148:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "149:    args:     []interface{}{[]byte{0, 1, 2, 3, 255}},",
          "151:   },",
          "152:   {",
          "153:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "154:    args:     []interface{}{nil},",
          "156:   },",
          "157:   {",
          "158:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "159:    args:     []interface{}{\"foobar\"},",
          "161:   },",
          "162:   {",
          "163:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "164:    args:     []interface{}{\"foo'bar\"},",
          "166:   },",
          "167:   {",
          "168:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "169:    args:     []interface{}{`foo\\'bar`},",
          "171:   },",
          "172:   {",
          "173:    query:    sanitize.Query{Parts: []sanitize.Part{\"insert \", 1}},",
          "174:    args:     []interface{}{time.Date(2020, time.March, 1, 23, 59, 59, 999999999, time.UTC)},",
          "176:   },",
          "177:   {",
          "178:    query:    sanitize.Query{Parts: []sanitize.Part{\"select 1-\", 1}},",
          "179:    args:     []interface{}{int64(-1)},",
          "181:   },",
          "182:   {",
          "183:    query:    sanitize.Query{Parts: []sanitize.Part{\"select 1-\", 1}},",
          "184:    args:     []interface{}{float64(-1)},",
          "186:   },",
          "187:  }",
          "",
          "[Removed Lines]",
          "135:    expected: `select (42)`,",
          "140:    expected: `select (1.23)`,",
          "145:    expected: `select (true)`,",
          "150:    expected: `select ('\\x00010203ff')`,",
          "155:    expected: `select (null)`,",
          "160:    expected: `select ('foobar')`,",
          "165:    expected: `select ('foo''bar')`,",
          "170:    expected: `select ('foo\\''bar')`,",
          "175:    expected: `insert ('2020-03-01 23:59:59.999999Z')`,",
          "180:    expected: `select 1-(-1)`,",
          "185:    expected: `select 1-(-1)`,",
          "",
          "[Added Lines]",
          "135:    expected: `select  42 `,",
          "140:    expected: `select  1.23 `,",
          "145:    expected: `select  true `,",
          "150:    expected: `select  '\\x00010203ff' `,",
          "155:    expected: `select  null `,",
          "160:    expected: `select  'foobar' `,",
          "165:    expected: `select  'foo''bar' `,",
          "170:    expected: `select  'foo\\''bar' `,",
          "175:    expected: `insert  '2020-03-01 23:59:59.999999Z' `,",
          "180:    expected: `select 1- -1 `,",
          "185:    expected: `select 1- -1 `,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c543134753a0c5d22881c12404025724cb05ffd8",
      "candidate_info": {
        "commit_hash": "c543134753a0c5d22881c12404025724cb05ffd8",
        "repo": "jackc/pgx",
        "commit_url": "https://github.com/jackc/pgx/commit/c543134753a0c5d22881c12404025724cb05ffd8",
        "files": [
          "internal/sanitize/sanitize.go",
          "internal/sanitize/sanitize_test.go"
        ],
        "message": "SQL sanitizer wraps arguments in parentheses\n\npgx v5 was not vulnerable to CVE-2024-27289 do to how the sanitizer was\nbeing called. But the sanitizer itself still had the underlying issue.\nThis commit ports the fix from pgx v4 to v5 to ensure that the issue\ndoes not emerge if pgx uses the sanitizer differently in the future.",
        "before_after_code_files": [
          "internal/sanitize/sanitize.go||internal/sanitize/sanitize.go",
          "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "internal/sanitize/sanitize.go||internal/sanitize/sanitize.go",
            "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go"
          ],
          "candidate": [
            "internal/sanitize/sanitize.go||internal/sanitize/sanitize.go",
            "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/sanitize/sanitize.go||internal/sanitize/sanitize.go": [
          "File: internal/sanitize/sanitize.go -> internal/sanitize/sanitize.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     return \"\", fmt.Errorf(\"invalid arg type: %T\", arg)",
          "64:    }",
          "65:    argUse[argIdx] = true",
          "66:   default:",
          "67:    return \"\", fmt.Errorf(\"invalid Part type: %T\", part)",
          "68:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:    str = \"(\" + str + \")\"",
          "",
          "---------------"
        ],
        "internal/sanitize/sanitize_test.go||internal/sanitize/sanitize_test.go": [
          "File: internal/sanitize/sanitize_test.go -> internal/sanitize/sanitize_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   {",
          "133:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "134:    args:     []any{int64(42)},",
          "136:   },",
          "137:   {",
          "138:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "139:    args:     []any{float64(1.23)},",
          "141:   },",
          "142:   {",
          "143:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "144:    args:     []any{true},",
          "146:   },",
          "147:   {",
          "148:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "149:    args:     []any{[]byte{0, 1, 2, 3, 255}},",
          "151:   },",
          "152:   {",
          "153:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "154:    args:     []any{nil},",
          "156:   },",
          "157:   {",
          "158:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "159:    args:     []any{\"foobar\"},",
          "161:   },",
          "162:   {",
          "163:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "164:    args:     []any{\"foo'bar\"},",
          "166:   },",
          "167:   {",
          "168:    query:    sanitize.Query{Parts: []sanitize.Part{\"select \", 1}},",
          "169:    args:     []any{`foo\\'bar`},",
          "171:   },",
          "172:   {",
          "173:    query:    sanitize.Query{Parts: []sanitize.Part{\"insert \", 1}},",
          "174:    args:     []any{time.Date(2020, time.March, 1, 23, 59, 59, 999999999, time.UTC)},",
          "176:   },",
          "177:  }",
          "",
          "[Removed Lines]",
          "135:    expected: `select 42`,",
          "140:    expected: `select 1.23`,",
          "145:    expected: `select true`,",
          "150:    expected: `select '\\x00010203ff'`,",
          "155:    expected: `select null`,",
          "160:    expected: `select 'foobar'`,",
          "165:    expected: `select 'foo''bar'`,",
          "170:    expected: `select 'foo\\''bar'`,",
          "175:    expected: `insert '2020-03-01 23:59:59.999999Z'`,",
          "",
          "[Added Lines]",
          "135:    expected: `select (42)`,",
          "140:    expected: `select (1.23)`,",
          "145:    expected: `select (true)`,",
          "150:    expected: `select ('\\x00010203ff')`,",
          "155:    expected: `select (null)`,",
          "160:    expected: `select ('foobar')`,",
          "165:    expected: `select ('foo''bar')`,",
          "170:    expected: `select ('foo\\''bar')`,",
          "175:    expected: `insert ('2020-03-01 23:59:59.999999Z')`,",
          "176:   },",
          "177:   {",
          "178:    query:    sanitize.Query{Parts: []sanitize.Part{\"select 1-\", 1}},",
          "179:    args:     []any{int64(-1)},",
          "180:    expected: `select 1-(-1)`,",
          "181:   },",
          "182:   {",
          "183:    query:    sanitize.Query{Parts: []sanitize.Part{\"select 1-\", 1}},",
          "184:    args:     []any{float64(-1)},",
          "185:    expected: `select 1-(-1)`,",
          "",
          "---------------"
        ]
      }
    }
  ]
}