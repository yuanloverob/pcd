{
  "cve_id": "CVE-2024-56198",
  "cve_desc": "path-sanitizer is a simple lightweight npm package for sanitizing paths to prevent Path Traversal. Prior to 3.1.0, the filters can be bypassed using .=%5c which results in a path traversal. This vulnerability is fixed in 3.1.0.",
  "repo": "cabraviva/path-sanitizer",
  "patch_hash": "b6d2319eac910dffdfacc8460f5b5cc5a1518ead",
  "patch_info": {
    "commit_hash": "b6d2319eac910dffdfacc8460f5b5cc5a1518ead",
    "repo": "cabraviva/path-sanitizer",
    "commit_url": "https://github.com/cabraviva/path-sanitizer/commit/b6d2319eac910dffdfacc8460f5b5cc5a1518ead",
    "files": [
      "lib/index.test.ts",
      "lib/index.ts",
      "package.json",
      "pnpm-lock.yaml"
    ],
    "message": "Merge pull request #2 from cabraviva/dev\n\nFixed a security vulnerability",
    "before_after_code_files": [
      "lib/index.test.ts||lib/index.test.ts",
      "lib/index.ts||lib/index.ts"
    ]
  },
  "patch_diff": {
    "lib/index.test.ts||lib/index.test.ts": [
      "File: lib/index.test.ts -> lib/index.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "192:     it('Protects reported vulnerability #1', () => {",
      "193:         expect(linuxSlash(join('/var/app-dir', sanitize(\"..=%5c..=%5c..=%5c..=%5c..=%5c..=%5c..=%5cetc/passwd\")))).not.toBe('/etc/passwd')",
      "194:     })",
      "195: })",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "196:     it('Protects reported vulnerability #2', () => {",
      "197:         expect(linuxSlash(join('/var/app', sanitize(\"./../../test/../../../../../../../../../../etc/passwd\")))).not.toBe('/etc/passwd')",
      "198:     })",
      "",
      "---------------"
    ],
    "lib/index.ts||lib/index.ts": [
      "File: lib/index.ts -> lib/index.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:     sanitizedPath = sanitizedPath.replace(/[\\/\\\\]+/g, '/')",
      "107:     sanitizedPath = sanitizedPath.trim() === '.' ? '' : sanitizedPath",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "107:     sanitizedPath = sanitizedPath.replace(options.parentDirectoryRegEx, '/')",
      "110:     while (sanitizedPath.startsWith('/') || sanitizedPath.startsWith('./') || sanitizedPath.endsWith('/..') || sanitizedPath.endsWith('/../') || sanitizedPath.startsWith('../') || sanitizedPath.startsWith('/../')) {",
      "111:         sanitizedPath = sanitizedPath.replace(/^\\.\\//g, '') // ^./",
      "112:         sanitizedPath = sanitizedPath.replace(/^\\//g, '') // ^/",
      "114:         sanitizedPath = sanitizedPath.replace(/^[\\/\\\\]\\.\\.[\\/\\\\]/g, '/')",
      "115:         sanitizedPath = sanitizedPath.replace(/^\\.\\.[\\/\\\\]/g, '/')",
      "116:         sanitizedPath = sanitizedPath.replace(/[\\/\\\\]\\.\\.$/g, '/')",
      "117:         sanitizedPath = sanitizedPath.replace(/[\\/\\\\]\\.\\.\\/$/g, '/')",
      "118:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bb2e75880592b804ba20ba70b8e9f0b185ea5a79",
      "candidate_info": {
        "commit_hash": "bb2e75880592b804ba20ba70b8e9f0b185ea5a79",
        "repo": "cabraviva/path-sanitizer",
        "commit_url": "https://github.com/cabraviva/path-sanitizer/commit/bb2e75880592b804ba20ba70b8e9f0b185ea5a79",
        "files": [
          "lib/index.test.ts",
          "lib/index.ts"
        ],
        "message": "Fixed a security advisory\n\n GHSA-94p5-r7cc-3rpr",
        "before_after_code_files": [
          "lib/index.test.ts||lib/index.test.ts",
          "lib/index.ts||lib/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cabraviva/path-sanitizer/pull/2"
        ],
        "olp_code_files": {
          "patch": [
            "lib/index.test.ts||lib/index.test.ts",
            "lib/index.ts||lib/index.ts"
          ],
          "candidate": [
            "lib/index.test.ts||lib/index.test.ts",
            "lib/index.ts||lib/index.ts"
          ]
        }
      },
      "candidate_diff": {
        "lib/index.test.ts||lib/index.test.ts": [
          "File: lib/index.test.ts -> lib/index.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:     it('Protects reported vulnerability #1', () => {",
          "193:         expect(linuxSlash(join('/var/app-dir', sanitize(\"..=%5c..=%5c..=%5c..=%5c..=%5c..=%5c..=%5cetc/passwd\")))).not.toBe('/etc/passwd')",
          "194:     })",
          "195: })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196:     it('Protects reported vulnerability #2', () => {",
          "197:         expect(linuxSlash(join('/var/app', sanitize(\"./../../test/../../../../../../../../../../etc/passwd\")))).not.toBe('/etc/passwd')",
          "198:     })",
          "",
          "---------------"
        ],
        "lib/index.ts||lib/index.ts": [
          "File: lib/index.ts -> lib/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:     sanitizedPath = sanitizedPath.replace(/[\\/\\\\]+/g, '/')",
          "107:     sanitizedPath = sanitizedPath.trim() === '.' ? '' : sanitizedPath",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:     sanitizedPath = sanitizedPath.replace(options.parentDirectoryRegEx, '/')",
          "110:     while (sanitizedPath.startsWith('/') || sanitizedPath.startsWith('./') || sanitizedPath.endsWith('/..') || sanitizedPath.endsWith('/../') || sanitizedPath.startsWith('../') || sanitizedPath.startsWith('/../')) {",
          "111:         sanitizedPath = sanitizedPath.replace(/^\\.\\//g, '') // ^./",
          "112:         sanitizedPath = sanitizedPath.replace(/^\\//g, '') // ^/",
          "114:         sanitizedPath = sanitizedPath.replace(/^[\\/\\\\]\\.\\.[\\/\\\\]/g, '/')",
          "115:         sanitizedPath = sanitizedPath.replace(/^\\.\\.[\\/\\\\]/g, '/')",
          "116:         sanitizedPath = sanitizedPath.replace(/[\\/\\\\]\\.\\.$/g, '/')",
          "117:         sanitizedPath = sanitizedPath.replace(/[\\/\\\\]\\.\\.\\/$/g, '/')",
          "118:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}