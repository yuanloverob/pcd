{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2070d1096bec5bd5e5c50a9f8fbbbde88d390aa0",
      "candidate_info": {
        "commit_hash": "2070d1096bec5bd5e5c50a9f8fbbbde88d390aa0",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/2070d1096bec5bd5e5c50a9f8fbbbde88d390aa0",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1857:                             except Exception as e:",
          "1858:                                 tool_result = str(e)",
          "1860:                         results.append(",
          "1861:                             {",
          "1862:                                 \"tool_call_id\": tool_call_id,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1860:                         if isinstance(tool_result, dict):",
          "1861:                             tool_result = json.dumps(tool_result)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b4d91b5cb4354428fee50b971da400e20eae5a9a",
      "candidate_info": {
        "commit_hash": "b4d91b5cb4354428fee50b971da400e20eae5a9a",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/b4d91b5cb4354428fee50b971da400e20eae5a9a",
        "files": [
          "src/routes/+layout.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/routes/+layout.svelte||src/routes/+layout.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/routes/+layout.svelte||src/routes/+layout.svelte": [
          "File: src/routes/+layout.svelte -> src/routes/+layout.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:    if (type === 'message') {",
          "155:     if ($isLastActiveTab) {",
          "156:      if ($settings?.notificationEnabled ?? false) {",
          "158:        body: data?.content,",
          "160:       });",
          "161:      }",
          "162:     }",
          "",
          "[Removed Lines]",
          "157:       new Notification(`#${event?.channel?.name} | Open WebUI`, {",
          "159:        icon: `${WEBUI_BASE_URL}/static/favicon.png`",
          "",
          "[Added Lines]",
          "157:       new Notification(`${data?.user?.name} (#${event?.channel?.name}) | Open WebUI`, {",
          "159:        icon: data?.user?.profile_image_url ?? `${WEBUI_BASE_URL}/static/favicon.png`",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee44383c839924797923b1cbfe58a6051ea7a694",
      "candidate_info": {
        "commit_hash": "ee44383c839924797923b1cbfe58a6051ea7a694",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/ee44383c839924797923b1cbfe58a6051ea7a694",
        "files": [
          "backend/open_webui/routers/configs.py",
          "src/lib/components/admin/Settings/Tools.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/configs.py||backend/open_webui/routers/configs.py",
          "src/lib/components/admin/Settings/Tools.svelte||src/lib/components/admin/Settings/Tools.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/configs.py||backend/open_webui/routers/configs.py": [
          "File: backend/open_webui/routers/configs.py -> backend/open_webui/routers/configs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:     form_data: ToolServersConfigForm,",
          "101:     user=Depends(get_admin_user),",
          "102: ):",
          "105:     request.app.state.TOOL_SERVERS = await get_tool_servers_data(",
          "106:         request.app.state.config.TOOL_SERVER_CONNECTIONS",
          "",
          "[Removed Lines]",
          "103:     request.app.state.config.TOOL_SERVER_CONNECTIONS = form_data.TOOL_SERVER_CONNECTIONS",
          "",
          "[Added Lines]",
          "103:     request.app.state.config.TOOL_SERVER_CONNECTIONS = [",
          "104:         connection.model_dump() for connection in form_data.TOOL_SERVER_CONNECTIONS",
          "105:     ]",
          "",
          "---------------"
        ],
        "src/lib/components/admin/Settings/Tools.svelte||src/lib/components/admin/Settings/Tools.svelte": [
          "File: src/lib/components/admin/Settings/Tools.svelte -> src/lib/components/admin/Settings/Tools.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  import Connection from '$lib/components/chat/Settings/Tools/Connection.svelte';",
          "17:  import AddServerModal from '$lib/components/AddServerModal.svelte';",
          "19:  export let saveSettings: Function;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  import { getToolServerConnections, setToolServerConnections } from '$lib/apis/configs';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:   await updateHandler();",
          "27:  };",
          "31:  onMount(async () => {",
          "33:  });",
          "34: </script>",
          "",
          "[Removed Lines]",
          "29:  const updateHandler = async () => {};",
          "32:   servers = [];",
          "",
          "[Added Lines]",
          "30:  const updateHandler = async () => {",
          "31:   const res = await setToolServerConnections(localStorage.token, {",
          "32:    TOOL_SERVER_CONNECTIONS: servers",
          "33:   }).catch((err) => {",
          "34:    toast.error($i18n.t('Failed to save connections'));",
          "36:    return null;",
          "37:   });",
          "39:   if (res) {",
          "40:    toast.success($i18n.t('Connections saved successfully'));",
          "41:   }",
          "42:  };",
          "45:   const res = await getToolServerConnections(localStorage.token);",
          "46:   servers = res.TOOL_SERVER_CONNECTIONS;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b20ef492205f6c773a7557d82d1fe5ebeafd5b0",
      "candidate_info": {
        "commit_hash": "9b20ef492205f6c773a7557d82d1fe5ebeafd5b0",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/9b20ef492205f6c773a7557d82d1fe5ebeafd5b0",
        "files": [
          "backend/open_webui/config.py",
          "backend/open_webui/main.py",
          "backend/open_webui/retrieval/web/utils.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/config.py||backend/open_webui/config.py",
          "backend/open_webui/main.py||backend/open_webui/main.py",
          "backend/open_webui/retrieval/web/utils.py||backend/open_webui/retrieval/web/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/config.py||backend/open_webui/config.py": [
          "File: backend/open_webui/config.py -> backend/open_webui/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2081:     os.environ.get(\"PLAYWRIGHT_WS_URI\", None),",
          "2082: )",
          "2088: )",
          "2090: FIRECRAWL_API_KEY = PersistentConfig(",
          "",
          "[Removed Lines]",
          "2084: PLAYWRIGHT_GOTO_TIMEOUT = PersistentConfig(",
          "2085:     \"PLAYWRIGHT_GOTO_TIMEOUT\",",
          "2086:     \"rag.web.loader.engine.playwright.goto.timeout\",",
          "2087:     int(os.environ.get(\"PLAYWRIGHT_GOTO_TIMEOUT\", \"10\")),",
          "",
          "[Added Lines]",
          "2084: PLAYWRIGHT_TIMEOUT = PersistentConfig(",
          "2085:     \"PLAYWRIGHT_TIMEOUT\",",
          "2086:     \"rag.web.loader.engine.playwright.timeout\",",
          "2087:     int(os.environ.get(\"PLAYWRIGHT_TIMEOUT\", \"10\")),",
          "",
          "---------------"
        ],
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:     AUDIO_TTS_AZURE_SPEECH_REGION,",
          "156:     AUDIO_TTS_AZURE_SPEECH_OUTPUT_FORMAT,",
          "157:     PLAYWRIGHT_WS_URI,",
          "159:     FIRECRAWL_API_BASE_URL,",
          "160:     FIRECRAWL_API_KEY,",
          "161:     RAG_WEB_LOADER_ENGINE,",
          "",
          "[Removed Lines]",
          "158:     PLAYWRIGHT_GOTO_TIMEOUT,",
          "",
          "[Added Lines]",
          "158:     PLAYWRIGHT_TIMEOUT,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630: app.state.config.RAG_WEB_LOADER_ENGINE = RAG_WEB_LOADER_ENGINE",
          "631: app.state.config.RAG_WEB_SEARCH_TRUST_ENV = RAG_WEB_SEARCH_TRUST_ENV",
          "632: app.state.config.PLAYWRIGHT_WS_URI = PLAYWRIGHT_WS_URI",
          "634: app.state.config.FIRECRAWL_API_BASE_URL = FIRECRAWL_API_BASE_URL",
          "635: app.state.config.FIRECRAWL_API_KEY = FIRECRAWL_API_KEY",
          "636: app.state.config.TAVILY_EXTRACT_DEPTH = TAVILY_EXTRACT_DEPTH",
          "",
          "[Removed Lines]",
          "633: app.state.config.PLAYWRIGHT_GOTO_TIMEOUT = PLAYWRIGHT_GOTO_TIMEOUT",
          "",
          "[Added Lines]",
          "633: app.state.config.PLAYWRIGHT_TIMEOUT = PLAYWRIGHT_TIMEOUT",
          "",
          "---------------"
        ],
        "backend/open_webui/retrieval/web/utils.py||backend/open_webui/retrieval/web/utils.py": [
          "File: backend/open_webui/retrieval/web/utils.py -> backend/open_webui/retrieval/web/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: from open_webui.config import (",
          "30:     ENABLE_RAG_LOCAL_WEB_FETCH,",
          "31:     PLAYWRIGHT_WS_URI,",
          "33:     RAG_WEB_LOADER_ENGINE,",
          "34:     FIRECRAWL_API_BASE_URL,",
          "35:     FIRECRAWL_API_KEY,",
          "",
          "[Removed Lines]",
          "32:     PLAYWRIGHT_GOTO_TIMEOUT,",
          "",
          "[Added Lines]",
          "32:     PLAYWRIGHT_TIMEOUT,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377:         headless (bool): If True, the browser will run in headless mode.",
          "378:         proxy (dict): Proxy override settings for the Playwright session.",
          "379:         playwright_ws_url (Optional[str]): WebSocket endpoint URI for remote browser connection.",
          "381:     \"\"\"",
          "383:     def __init__(",
          "",
          "[Removed Lines]",
          "380:         playwright_goto_timeout (Optional[int]): Maximum operation time in milliseconds.",
          "",
          "[Added Lines]",
          "380:         playwright_timeout (Optional[int]): Maximum operation time in milliseconds.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "391:         remove_selectors: Optional[List[str]] = None,",
          "392:         proxy: Optional[Dict[str, str]] = None,",
          "393:         playwright_ws_url: Optional[str] = None,",
          "395:     ):",
          "396:         \"\"\"Initialize with additional safety parameters and remote browser support.\"\"\"",
          "",
          "[Removed Lines]",
          "394:         playwright_goto_timeout: Optional[int] = 10000,",
          "",
          "[Added Lines]",
          "394:         playwright_timeout: Optional[int] = 10000,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "418:         self.last_request_time = None",
          "419:         self.playwright_ws_url = playwright_ws_url",
          "420:         self.trust_env = trust_env",
          "423:     def lazy_load(self) -> Iterator[Document]:",
          "424:         \"\"\"Safely load URLs synchronously with support for remote browser.\"\"\"",
          "",
          "[Removed Lines]",
          "421:         self.playwright_goto_timeout = playwright_goto_timeout",
          "",
          "[Added Lines]",
          "421:         self.playwright_timeout = playwright_timeout",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "435:                 try:",
          "436:                     self._safe_process_url_sync(url)",
          "437:                     page = browser.new_page()",
          "439:                     if response is None:",
          "440:                         raise ValueError(f\"page.goto() returned None for url {url}\")",
          "",
          "[Removed Lines]",
          "438:                     response = page.goto(url, timeout=self.playwright_goto_timeout)",
          "",
          "[Added Lines]",
          "438:                     response = page.goto(url, timeout=self.playwright_timeout)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "466:                 try:",
          "467:                     await self._safe_process_url(url)",
          "468:                     page = await browser.new_page()",
          "472:                     if response is None:",
          "473:                         raise ValueError(f\"page.goto() returned None for url {url}\")",
          "",
          "[Removed Lines]",
          "469:                     response = await page.goto(",
          "470:                         url, timeout=self.playwright_goto_timeout",
          "471:                     )",
          "",
          "[Added Lines]",
          "469:                     response = await page.goto(url, timeout=self.playwright_timeout)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "611:     }",
          "613:     if RAG_WEB_LOADER_ENGINE.value == \"playwright\":",
          "617:         if PLAYWRIGHT_WS_URI.value:",
          "618:             web_loader_args[\"playwright_ws_url\"] = PLAYWRIGHT_WS_URI.value",
          "",
          "[Removed Lines]",
          "614:         web_loader_args[\"playwright_goto_timeout\"] = (",
          "615:             PLAYWRIGHT_GOTO_TIMEOUT.value * 1000",
          "616:         )",
          "",
          "[Added Lines]",
          "612:         web_loader_args[\"playwright_timeout\"] = PLAYWRIGHT_TIMEOUT.value * 1000",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b9b80279372d9148b997e5ac512e0952a907c06",
      "candidate_info": {
        "commit_hash": "5b9b80279372d9148b997e5ac512e0952a907c06",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/5b9b80279372d9148b997e5ac512e0952a907c06",
        "files": [
          "backend/open_webui/routers/files.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/files.py||backend/open_webui/routers/files.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/files.py||backend/open_webui/routers/files.py": [
          "File: backend/open_webui/routers/files.py -> backend/open_webui/routers/files.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: from typing import Optional",
          "6: from urllib.parse import quote",
          "9: from fastapi.responses import FileResponse, StreamingResponse",
          "10: from open_webui.constants import ERROR_MESSAGES",
          "11: from open_webui.env import SRC_LOG_LEVELS",
          "",
          "[Removed Lines]",
          "8: from fastapi import APIRouter, Depends, File, HTTPException, Request, UploadFile, status, Query",
          "",
          "[Added Lines]",
          "8: from fastapi import (",
          "9:     APIRouter,",
          "10:     Depends,",
          "11:     File,",
          "12:     HTTPException,",
          "13:     Request,",
          "14:     UploadFile,",
          "15:     status,",
          "16:     Query,",
          "17: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     file: UploadFile = File(...),",
          "39:     user=Depends(get_verified_user),",
          "40:     file_metadata: dict = {},",
          "42: ):",
          "43:     log.info(f\"file.content_type: {file.content_type}\")",
          "44:     try:",
          "",
          "[Removed Lines]",
          "41:     ingest_file: bool = Query(True)",
          "",
          "[Added Lines]",
          "50:     process: bool = Query(True),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:                 }",
          "68:             ),",
          "69:         )",
          "71:             try:",
          "72:                 if file.content_type in [",
          "73:                     \"audio/mpeg\",",
          "",
          "[Removed Lines]",
          "70:         if ingest_file:",
          "",
          "[Added Lines]",
          "79:         if process:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "230: @router.get(\"/{id}/content\")",
          "232:     file = Files.get_file_by_id(id)",
          "233:     if file and (file.user_id == user.id or user.role == \"admin\"):",
          "234:         try:",
          "",
          "[Removed Lines]",
          "231: async def get_file_content_by_id(id: str, user=Depends(get_verified_user), as_attachment: bool = Query(False)):",
          "",
          "[Added Lines]",
          "240: async def get_file_content_by_id(",
          "241:     id: str, user=Depends(get_verified_user), attachment: bool = Query(False)",
          "242: ):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "246:                 encoded_filename = quote(filename)",
          "247:                 headers = {}",
          "250:                     headers[\"Content-Disposition\"] = (",
          "251:                         f\"attachment; filename*=UTF-8''{encoded_filename}\"",
          "252:                     )",
          "253:                 else:",
          "255:                         headers[\"Content-Disposition\"] = (",
          "256:                             f\"inline; filename*=UTF-8''{encoded_filename}\"",
          "257:                         )",
          "",
          "[Removed Lines]",
          "249:                 if as_attachment:",
          "254:                     if content_type == \"application/pdf\" or filename.lower().endswith(\".pdf\"):",
          "",
          "[Added Lines]",
          "260:                 if attachment:",
          "265:                     if content_type == \"application/pdf\" or filename.lower().endswith(",
          "266:                         \".pdf\"",
          "267:                     ):",
          "",
          "---------------"
        ]
      }
    }
  ]
}