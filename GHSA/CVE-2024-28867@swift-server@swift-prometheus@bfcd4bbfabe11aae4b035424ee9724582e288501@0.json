{
  "cve_id": "CVE-2024-28867",
  "cve_desc": "Swift Prometheus is a Swift client for the Prometheus monitoring system, supporting counters, gauges and histograms. In code which applies _un-sanitized string values into metric names or labels_, an attacker could make use of this and send a `?lang` query parameter containing newlines, `}`  or similar characters which can lead to the attacker taking over the exported format -- including creating unbounded numbers of stored metrics, inflating server memory usage, or causing \"bogus\" metrics. This vulnerability is fixed in2.0.0-alpha.2.",
  "repo": "swift-server/swift-prometheus",
  "patch_hash": "bfcd4bbfabe11aae4b035424ee9724582e288501",
  "patch_info": {
    "commit_hash": "bfcd4bbfabe11aae4b035424ee9724582e288501",
    "repo": "swift-server/swift-prometheus",
    "commit_url": "https://github.com/swift-server/swift-prometheus/commit/bfcd4bbfabe11aae4b035424ee9724582e288501",
    "files": [
      "Sources/Prometheus/PrometheusCollectorRegistry.swift",
      "Tests/PrometheusTests/ValidNamesTests.swift"
    ],
    "message": "Merge pull request from GHSA-x768-cvr2-345r",
    "before_after_code_files": [
      "Sources/Prometheus/PrometheusCollectorRegistry.swift||Sources/Prometheus/PrometheusCollectorRegistry.swift",
      "Tests/PrometheusTests/ValidNamesTests.swift||Tests/PrometheusTests/ValidNamesTests.swift"
    ]
  },
  "patch_diff": {
    "Sources/Prometheus/PrometheusCollectorRegistry.swift||Sources/Prometheus/PrometheusCollectorRegistry.swift": [
      "File: Sources/Prometheus/PrometheusCollectorRegistry.swift -> Sources/Prometheus/PrometheusCollectorRegistry.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:     public func makeCounter(name: String) -> Counter {",
      "77:             guard let value = store[name] else {",
      "78:                 let counter = Counter(name: name, labels: [])",
      "79:                 store[name] = .counter(counter)",
      "",
      "[Removed Lines]",
      "76:         self.box.withLockedValue { store -> Counter in",
      "",
      "[Added Lines]",
      "76:         let name = name.ensureValidMetricName()",
      "77:         return self.box.withLockedValue { store -> Counter in",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "106:             return self.makeCounter(name: name)",
      "107:         }",
      "109:         return self.box.withLockedValue { store -> Counter in",
      "110:             guard let value = store[name] else {",
      "111:                 let labelNames = labels.allLabelNames",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "110:         let name = name.ensureValidMetricName()",
      "111:         let labels = labels.ensureValidLabelNames()",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "156:     public func makeGauge(name: String) -> Gauge {",
      "158:             guard let value = store[name] else {",
      "159:                 let gauge = Gauge(name: name, labels: [])",
      "160:                 store[name] = .gauge(gauge)",
      "",
      "[Removed Lines]",
      "157:         self.box.withLockedValue { store -> Gauge in",
      "",
      "[Added Lines]",
      "161:         let name = name.ensureValidMetricName()",
      "162:         return self.box.withLockedValue { store -> Gauge in",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "187:             return self.makeGauge(name: name)",
      "188:         }",
      "190:         return self.box.withLockedValue { store -> Gauge in",
      "191:             guard let value = store[name] else {",
      "192:                 let labelNames = labels.allLabelNames",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "195:         let name = name.ensureValidMetricName()",
      "196:         let labels = labels.ensureValidLabelNames()",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "238:     public func makeDurationHistogram(name: String, buckets: [Duration]) -> DurationHistogram {",
      "240:             guard let value = store[name] else {",
      "241:                 let gauge = DurationHistogram(name: name, labels: [], buckets: buckets)",
      "242:                 store[name] = .durationHistogram(gauge)",
      "",
      "[Removed Lines]",
      "239:         self.box.withLockedValue { store -> DurationHistogram in",
      "",
      "[Added Lines]",
      "247:         let name = name.ensureValidMetricName()",
      "248:         return self.box.withLockedValue { store -> DurationHistogram in",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "274:             return self.makeDurationHistogram(name: name, buckets: buckets)",
      "275:         }",
      "277:         return self.box.withLockedValue { store -> DurationHistogram in",
      "278:             guard let value = store[name] else {",
      "279:                 let labelNames = labels.allLabelNames",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "286:         let name = name.ensureValidMetricName()",
      "287:         let labels = labels.ensureValidLabelNames()",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "337:     public func makeValueHistogram(name: String, buckets: [Double]) -> ValueHistogram {",
      "339:             guard let value = store[name] else {",
      "340:                 let gauge = ValueHistogram(name: name, labels: [], buckets: buckets)",
      "341:                 store[name] = .valueHistogram(gauge)",
      "",
      "[Removed Lines]",
      "338:         self.box.withLockedValue { store -> ValueHistogram in",
      "",
      "[Added Lines]",
      "350:         let name = name.ensureValidMetricName()",
      "351:         return self.box.withLockedValue { store -> ValueHistogram in",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "364:             return self.makeValueHistogram(name: name, buckets: buckets)",
      "365:         }",
      "367:         return self.box.withLockedValue { store -> ValueHistogram in",
      "368:             guard let value = store[name] else {",
      "369:                 let labelNames = labels.allLabelNames",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "380:         let name = name.ensureValidMetricName()",
      "381:         let labels = labels.ensureValidLabelNames()",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "560:         result = result.sorted()",
      "561:         return result",
      "562:     }",
      "563: }",
      "565: extension [UInt8] {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "580:     fileprivate func ensureValidLabelNames() -> [(String, String)] {",
      "581:         if self.allSatisfy({ $0.0.isValidLabelName() }) {",
      "582:             return self",
      "583:         } else {",
      "584:             return self.map { ($0.ensureValidLabelName(), $1) }",
      "585:         }",
      "586:     }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "595:         return prerendered",
      "596:     }",
      "597: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "623: extension String {",
      "624:     fileprivate func isValidMetricName() -> Bool {",
      "625:         var isFirstCharacter = true",
      "626:         for ascii in self.utf8 {",
      "627:             defer { isFirstCharacter = false }",
      "628:             switch ascii {",
      "629:             case UInt8(ascii: \"A\")...UInt8(ascii: \"Z\"),",
      "630:                  UInt8(ascii: \"a\")...UInt8(ascii: \"z\"),",
      "631:                  UInt8(ascii: \"_\"), UInt8(ascii: \":\"):",
      "632:                 continue",
      "633:             case UInt8(ascii: \"0\"), UInt8(ascii: \"9\"):",
      "634:                 if isFirstCharacter {",
      "635:                     return false",
      "636:                 }",
      "637:                 continue",
      "638:             default:",
      "639:                 return false",
      "640:             }",
      "641:         }",
      "642:         return true",
      "643:     }",
      "645:     fileprivate func isValidLabelName() -> Bool {",
      "646:         var isFirstCharacter = true",
      "647:         for ascii in self.utf8 {",
      "648:             defer { isFirstCharacter = false }",
      "649:             switch ascii {",
      "650:             case UInt8(ascii: \"A\")...UInt8(ascii: \"Z\"),",
      "651:                  UInt8(ascii: \"a\")...UInt8(ascii: \"z\"),",
      "652:                  UInt8(ascii: \"_\"):",
      "653:                 continue",
      "654:             case UInt8(ascii: \"0\"), UInt8(ascii: \"9\"):",
      "655:                 if isFirstCharacter {",
      "656:                     return false",
      "657:                 }",
      "658:                 continue",
      "659:             default:",
      "660:                 return false",
      "661:             }",
      "662:         }",
      "663:         return true",
      "664:     }",
      "666:     fileprivate func ensureValidMetricName() -> String {",
      "667:         if self.isValidMetricName() {",
      "668:             return self",
      "669:         } else {",
      "670:             var new = self",
      "671:             new.fixPrometheusName(allowColon: true)",
      "672:             return new",
      "673:         }",
      "674:     }",
      "676:     fileprivate func ensureValidLabelName() -> String {",
      "677:         if self.isValidLabelName() {",
      "678:             return self",
      "679:         } else {",
      "680:             var new = self",
      "681:             new.fixPrometheusName(allowColon: false)",
      "682:             return new",
      "683:         }",
      "684:     }",
      "686:     fileprivate mutating func fixPrometheusName(allowColon: Bool) {",
      "687:         var startIndex = self.startIndex",
      "688:         var isFirstCharacter = true",
      "689:         while let fixIndex = self[startIndex...].firstIndex(where: { character in",
      "690:             defer { isFirstCharacter = false }",
      "691:             switch character {",
      "692:             case \"A\"...\"Z\", \"a\"...\"z\", \"_\":",
      "693:                 return false",
      "694:             case \":\":",
      "695:                 return !allowColon",
      "696:             case \"0\"...\"9\":",
      "697:                 return isFirstCharacter",
      "698:             default:",
      "699:                 return true",
      "700:             }",
      "701:         }) {",
      "702:             self.replaceSubrange(fixIndex...fixIndex, with: CollectionOfOne(\"_\"))",
      "703:             startIndex = fixIndex",
      "704:             if startIndex == self.endIndex {",
      "705:                 break",
      "706:             }",
      "707:         }",
      "708:     }",
      "709: }",
      "",
      "---------------"
    ],
    "Tests/PrometheusTests/ValidNamesTests.swift||Tests/PrometheusTests/ValidNamesTests.swift": [
      "File: Tests/PrometheusTests/ValidNamesTests.swift -> Tests/PrometheusTests/ValidNamesTests.swift",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "15: import Prometheus",
      "16: import XCTest",
      "18: final class ValidNamesTests: XCTestCase {",
      "19:     func testCounterWithEmoji() {",
      "20:         let client = PrometheusCollectorRegistry()",
      "21:         let counter = client.makeCounter(name: \"coffee\u2615\ufe0f\", labels: [])",
      "22:         counter.increment()",
      "24:         var buffer = [UInt8]()",
      "25:         client.emit(into: &buffer)",
      "26:         XCTAssertEqual(",
      "27:             String(decoding: buffer, as: Unicode.UTF8.self),",
      "28:             \"\"\"",
      "29:             # TYPE coffee_ counter",
      "30:             coffee_ 1",
      "32:             \"\"\"",
      "33:         )",
      "34:     }",
      "36:     func testIllegalMetricNames() async throws {",
      "37:         let registry = PrometheusCollectorRegistry()",
      "40:         let tests = [",
      "41:             \"name\",",
      "42:             \"\"\"",
      "43:             name{bad=\"haha\"} 121212121",
      "44:             bad_bad 12321323",
      "45:             \"\"\"",
      "46:         ]",
      "48:         for test in tests {",
      "49:             registry.makeCounter(",
      "50:                 name: test,",
      "51:                 labels: []",
      "52:             ).increment()",
      "53:         }",
      "55:         var buffer = [UInt8]()",
      "56:         registry.emit(into: &buffer)",
      "57:         XCTAssertEqual(",
      "58:             String(decoding: buffer, as: Unicode.UTF8.self).split(separator: \"\\n\").sorted().joined(separator: \"\\n\"),",
      "59:             \"\"\"",
      "60:             # TYPE name counter",
      "61:             # TYPE name_bad__haha___121212121_bad_bad_12321323 counter",
      "62:             name 1",
      "63:             name_bad__haha___121212121_bad_bad_12321323 1",
      "64:             \"\"\"",
      "65:         )",
      "66:     }",
      "68:     func testIllegalLabelNames() async throws {",
      "69:         let registry = PrometheusCollectorRegistry()",
      "71:         let tests = [",
      "72:             \"\"\"",
      "73:             name{bad=\"haha\"} 121212121",
      "74:             bad_bad 12321323",
      "75:             \"\"\"",
      "76:         ]",
      "78:         for test in tests {",
      "79:             registry.makeCounter(",
      "80:                 name: \"metric\",",
      "81:                 labels: [(test, \"value\")]",
      "82:             ).increment()",
      "83:         }",
      "85:         var buffer = [UInt8]()",
      "86:         registry.emit(into: &buffer)",
      "87:         XCTAssertEqual(",
      "88:             String(decoding: buffer, as: Unicode.UTF8.self).split(separator: \"\\n\").sorted().joined(separator: \"\\n\"),",
      "89:             \"\"\"",
      "90:             # TYPE metric counter",
      "91:             metric{name_bad__haha___121212121_bad_bad_12321323=\"value\"} 1",
      "92:             \"\"\"",
      "93:         )",
      "94:     }",
      "95: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b50f8779ebd978522d1b26ad3fbe9f07d67696d5",
      "candidate_info": {
        "commit_hash": "b50f8779ebd978522d1b26ad3fbe9f07d67696d5",
        "repo": "swift-server/swift-prometheus",
        "commit_url": "https://github.com/swift-server/swift-prometheus/commit/b50f8779ebd978522d1b26ad3fbe9f07d67696d5",
        "files": [
          "Sources/Prometheus/PrometheusCollectorRegistry.swift",
          "Tests/PrometheusTests/ValidNamesTests.swift"
        ],
        "message": "Fix formatting (#116)\n\nMotivation:\n\nbfcd4bb didn't go through the normal CI as it was a security fix.\nThe CI is unhappy with some of the formatting in this change.\n\nModifications:\n\n- Run the formatter\n\nResult:\n\nCI is happy",
        "before_after_code_files": [
          "Sources/Prometheus/PrometheusCollectorRegistry.swift||Sources/Prometheus/PrometheusCollectorRegistry.swift",
          "Tests/PrometheusTests/ValidNamesTests.swift||Tests/PrometheusTests/ValidNamesTests.swift"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Sources/Prometheus/PrometheusCollectorRegistry.swift||Sources/Prometheus/PrometheusCollectorRegistry.swift",
            "Tests/PrometheusTests/ValidNamesTests.swift||Tests/PrometheusTests/ValidNamesTests.swift"
          ],
          "candidate": [
            "Sources/Prometheus/PrometheusCollectorRegistry.swift||Sources/Prometheus/PrometheusCollectorRegistry.swift",
            "Tests/PrometheusTests/ValidNamesTests.swift||Tests/PrometheusTests/ValidNamesTests.swift"
          ]
        }
      },
      "candidate_diff": {
        "Sources/Prometheus/PrometheusCollectorRegistry.swift||Sources/Prometheus/PrometheusCollectorRegistry.swift": [
          "File: Sources/Prometheus/PrometheusCollectorRegistry.swift -> Sources/Prometheus/PrometheusCollectorRegistry.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:     }",
          "580:     fileprivate func ensureValidLabelNames() -> [(String, String)] {",
          "584:             return self.map { ($0.ensureValidLabelName(), $1) }",
          "585:         }",
          "586:     }",
          "587: }",
          "",
          "[Removed Lines]",
          "581:         if self.allSatisfy({ $0.0.isValidLabelName() }) {",
          "582:             return self",
          "583:         } else {",
          "",
          "[Added Lines]",
          "581:         guard self.allSatisfy({ $0.0.isValidLabelName() }) else {",
          "584:         return self",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627:             defer { isFirstCharacter = false }",
          "628:             switch ascii {",
          "629:             case UInt8(ascii: \"A\")...UInt8(ascii: \"Z\"),",
          "632:                 continue",
          "633:             case UInt8(ascii: \"0\"), UInt8(ascii: \"9\"):",
          "634:                 if isFirstCharacter {",
          "",
          "[Removed Lines]",
          "630:                  UInt8(ascii: \"a\")...UInt8(ascii: \"z\"),",
          "631:                  UInt8(ascii: \"_\"), UInt8(ascii: \":\"):",
          "",
          "[Added Lines]",
          "629:                 UInt8(ascii: \"a\")...UInt8(ascii: \"z\"),",
          "630:                 UInt8(ascii: \"_\"), UInt8(ascii: \":\"):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "648:             defer { isFirstCharacter = false }",
          "649:             switch ascii {",
          "650:             case UInt8(ascii: \"A\")...UInt8(ascii: \"Z\"),",
          "653:                 continue",
          "654:             case UInt8(ascii: \"0\"), UInt8(ascii: \"9\"):",
          "655:                 if isFirstCharacter {",
          "",
          "[Removed Lines]",
          "651:                  UInt8(ascii: \"a\")...UInt8(ascii: \"z\"),",
          "652:                  UInt8(ascii: \"_\"):",
          "",
          "[Added Lines]",
          "650:                 UInt8(ascii: \"a\")...UInt8(ascii: \"z\"),",
          "651:                 UInt8(ascii: \"_\"):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "664:     }",
          "666:     fileprivate func ensureValidMetricName() -> String {",
          "670:             var new = self",
          "671:             new.fixPrometheusName(allowColon: true)",
          "672:             return new",
          "673:         }",
          "674:     }",
          "676:     fileprivate func ensureValidLabelName() -> String {",
          "680:             var new = self",
          "681:             new.fixPrometheusName(allowColon: false)",
          "682:             return new",
          "683:         }",
          "684:     }",
          "686:     fileprivate mutating func fixPrometheusName(allowColon: Bool) {",
          "",
          "[Removed Lines]",
          "667:         if self.isValidMetricName() {",
          "668:             return self",
          "669:         } else {",
          "677:         if self.isValidLabelName() {",
          "678:             return self",
          "679:         } else {",
          "",
          "[Added Lines]",
          "666:         guard self.isValidMetricName() else {",
          "671:         return self",
          "675:         guard self.isValidLabelName() else {",
          "680:         return self",
          "",
          "---------------"
        ],
        "Tests/PrometheusTests/ValidNamesTests.swift||Tests/PrometheusTests/ValidNamesTests.swift": [
          "File: Tests/PrometheusTests/ValidNamesTests.swift -> Tests/PrometheusTests/ValidNamesTests.swift",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:             \"\"\"",
          "43:             name{bad=\"haha\"} 121212121",
          "44:             bad_bad 12321323",
          "46:         ]",
          "48:         for test in tests {",
          "",
          "[Removed Lines]",
          "45:             \"\"\"",
          "",
          "[Added Lines]",
          "45:             \"\"\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}