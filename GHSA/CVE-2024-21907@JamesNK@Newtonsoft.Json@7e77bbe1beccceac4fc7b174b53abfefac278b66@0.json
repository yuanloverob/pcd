{
  "cve_id": "CVE-2024-21907",
  "cve_desc": "Newtonsoft.Json before version 13.0.1 is affected by a mishandling of exceptional conditions vulnerability. Crafted data that is passed to the JsonConvert.DeserializeObject method may trigger a StackOverflow exception resulting in denial of service. Depending on the usage of the library, an unauthenticated and remote attacker may be able to cause the denial of service condition.\n",
  "repo": "JamesNK/Newtonsoft.Json",
  "patch_hash": "7e77bbe1beccceac4fc7b174b53abfefac278b66",
  "patch_info": {
    "commit_hash": "7e77bbe1beccceac4fc7b174b53abfefac278b66",
    "repo": "JamesNK/Newtonsoft.Json",
    "commit_url": "https://github.com/JamesNK/Newtonsoft.Json/commit/7e77bbe1beccceac4fc7b174b53abfefac278b66",
    "files": [
      "Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs",
      "Src/Newtonsoft.Json/JsonReader.cs",
      "Src/Newtonsoft.Json/JsonSerializer.cs",
      "Src/Newtonsoft.Json/JsonSerializerSettings.cs"
    ],
    "message": "Change JsonReader and JsonSerializer default max depth to 128 (#2462)",
    "before_after_code_files": [
      "Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs||Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs",
      "Src/Newtonsoft.Json/JsonReader.cs||Src/Newtonsoft.Json/JsonReader.cs",
      "Src/Newtonsoft.Json/JsonSerializer.cs||Src/Newtonsoft.Json/JsonSerializer.cs",
      "Src/Newtonsoft.Json/JsonSerializerSettings.cs||Src/Newtonsoft.Json/JsonSerializerSettings.cs"
    ]
  },
  "patch_diff": {
    "Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs||Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs": [
      "File: Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs -> Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "7995:                 () => JsonConvert.DeserializeObject<EmptyJsonValueTestClass>(\"{ A: \\\"\\\", B: 1, C: 123, D: 1.23, E: , F: null }\"),",
      "7996:                 \"Unexpected character encountered while parsing value: ,. Path 'E', line 1, position 36.\");",
      "7997:         }",
      "7998:     }",
      "7999: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7999:         [Test]",
      "8000:         public void SetMaxDepth_DepthExceeded()",
      "8001:         {",
      "8002:             JsonTextReader reader = new JsonTextReader(new StringReader(\"[[['text']]]\"));",
      "8003:             Assert.AreEqual(128, reader.MaxDepth);",
      "8005:             JsonSerializerSettings settings = new JsonSerializerSettings();",
      "8006:             Assert.AreEqual(128, settings.MaxDepth);",
      "8007:             Assert.AreEqual(false, settings._maxDepthSet);",
      "8010:             Assert.AreEqual(reader.MaxDepth, settings.MaxDepth);",
      "8012:             settings.MaxDepth = 2;",
      "8013:             Assert.AreEqual(2, settings.MaxDepth);",
      "8014:             Assert.AreEqual(true, settings._maxDepthSet);",
      "8016:             JsonSerializer serializer = JsonSerializer.Create(settings);",
      "8017:             Assert.AreEqual(2, serializer.MaxDepth);",
      "8019:             ExceptionAssert.Throws<JsonReaderException>(",
      "8020:                 () => serializer.Deserialize(reader),",
      "8021:                 \"The reader's MaxDepth of 2 has been exceeded. Path '[0][0]', line 1, position 3.\");",
      "8022:         }",
      "8024:         [Test]",
      "8025:         public void SetMaxDepth_DepthNotExceeded()",
      "8026:         {",
      "8027:             JsonTextReader reader = new JsonTextReader(new StringReader(\"['text']\"));",
      "8028:             JsonSerializerSettings settings = new JsonSerializerSettings();",
      "8030:             settings.MaxDepth = 2;",
      "8032:             JsonSerializer serializer = JsonSerializer.Create(settings);",
      "8033:             Assert.AreEqual(2, serializer.MaxDepth);",
      "8035:             serializer.Deserialize(reader);",
      "8037:             Assert.AreEqual(128, reader.MaxDepth);",
      "8038:         }",
      "",
      "---------------"
    ],
    "Src/Newtonsoft.Json/JsonReader.cs||Src/Newtonsoft.Json/JsonReader.cs": [
      "File: Src/Newtonsoft.Json/JsonReader.cs -> Src/Newtonsoft.Json/JsonReader.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "327:             _dateTimeZoneHandling = DateTimeZoneHandling.RoundtripKind;",
      "328:             _dateParseHandling = DateParseHandling.DateTime;",
      "329:             _floatParseHandling = FloatParseHandling.Double;",
      "331:             CloseInput = true;",
      "332:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "332:             _maxDepth = 128;",
      "",
      "---------------"
    ],
    "Src/Newtonsoft.Json/JsonSerializer.cs||Src/Newtonsoft.Json/JsonSerializer.cs": [
      "File: Src/Newtonsoft.Json/JsonSerializer.cs -> Src/Newtonsoft.Json/JsonSerializer.cs"
    ],
    "Src/Newtonsoft.Json/JsonSerializerSettings.cs||Src/Newtonsoft.Json/JsonSerializerSettings.cs": [
      "File: Src/Newtonsoft.Json/JsonSerializerSettings.cs -> Src/Newtonsoft.Json/JsonSerializerSettings.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:         internal static readonly CultureInfo DefaultCulture;",
      "62:         internal const bool DefaultCheckAdditionalContent = false;",
      "63:         internal const string DefaultDateFormatString = @\"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK\";",
      "65:         internal Formatting? _formatting;",
      "66:         internal DateFormatHandling? _dateFormatHandling;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64:         internal const int DefaultMaxDepth = 128;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "330:         public int? MaxDepth",
      "331:         {",
      "333:             set",
      "334:             {",
      "335:                 if (value <= 0)",
      "",
      "[Removed Lines]",
      "332:             get => _maxDepth;",
      "",
      "[Added Lines]",
      "333:             get => _maxDepthSet ? _maxDepth : DefaultMaxDepth;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6dc05be5a0f4808f06ec430f3bb59b24d3fbc3e",
      "candidate_info": {
        "commit_hash": "b6dc05be5a0f4808f06ec430f3bb59b24d3fbc3e",
        "repo": "JamesNK/Newtonsoft.Json",
        "commit_url": "https://github.com/JamesNK/Newtonsoft.Json/commit/b6dc05be5a0f4808f06ec430f3bb59b24d3fbc3e",
        "files": [
          "Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs",
          "Src/Newtonsoft.Json/JsonReader.cs",
          "Src/Newtonsoft.Json/JsonSerializerSettings.cs"
        ],
        "message": "Change MaxDepth default to 64 (#2473)",
        "before_after_code_files": [
          "Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs||Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs",
          "Src/Newtonsoft.Json/JsonReader.cs||Src/Newtonsoft.Json/JsonReader.cs",
          "Src/Newtonsoft.Json/JsonSerializerSettings.cs||Src/Newtonsoft.Json/JsonSerializerSettings.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs||Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs",
            "Src/Newtonsoft.Json/JsonReader.cs||Src/Newtonsoft.Json/JsonReader.cs",
            "Src/Newtonsoft.Json/JsonSerializerSettings.cs||Src/Newtonsoft.Json/JsonSerializerSettings.cs"
          ],
          "candidate": [
            "Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs||Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs",
            "Src/Newtonsoft.Json/JsonReader.cs||Src/Newtonsoft.Json/JsonReader.cs",
            "Src/Newtonsoft.Json/JsonSerializerSettings.cs||Src/Newtonsoft.Json/JsonSerializerSettings.cs"
          ]
        }
      },
      "candidate_diff": {
        "Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs||Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs": [
          "File: Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs -> Src/Newtonsoft.Json.Tests/Serialization/JsonSerializerTest.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "8000:         public void SetMaxDepth_DepthExceeded()",
          "8001:         {",
          "8002:             JsonTextReader reader = new JsonTextReader(new StringReader(\"[[['text']]]\"));",
          "8005:             JsonSerializerSettings settings = new JsonSerializerSettings();",
          "8007:             Assert.AreEqual(false, settings._maxDepthSet);",
          "",
          "[Removed Lines]",
          "8003:             Assert.AreEqual(128, reader.MaxDepth);",
          "8006:             Assert.AreEqual(128, settings.MaxDepth);",
          "",
          "[Added Lines]",
          "8003:             Assert.AreEqual(64, reader.MaxDepth);",
          "8006:             Assert.AreEqual(64, settings.MaxDepth);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8035:             serializer.Deserialize(reader);",
          "8038:         }",
          "8039:     }",
          "8040: }",
          "",
          "[Removed Lines]",
          "8037:             Assert.AreEqual(128, reader.MaxDepth);",
          "",
          "[Added Lines]",
          "8037:             Assert.AreEqual(64, reader.MaxDepth);",
          "",
          "---------------"
        ],
        "Src/Newtonsoft.Json/JsonReader.cs||Src/Newtonsoft.Json/JsonReader.cs": [
          "File: Src/Newtonsoft.Json/JsonReader.cs -> Src/Newtonsoft.Json/JsonReader.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:             _dateTimeZoneHandling = DateTimeZoneHandling.RoundtripKind;",
          "330:             _dateParseHandling = DateParseHandling.DateTime;",
          "331:             _floatParseHandling = FloatParseHandling.Double;",
          "334:             CloseInput = true;",
          "335:         }",
          "",
          "[Removed Lines]",
          "332:             _maxDepth = 128;",
          "",
          "[Added Lines]",
          "332:             _maxDepth = 64;",
          "",
          "---------------"
        ],
        "Src/Newtonsoft.Json/JsonSerializerSettings.cs||Src/Newtonsoft.Json/JsonSerializerSettings.cs": [
          "File: Src/Newtonsoft.Json/JsonSerializerSettings.cs -> Src/Newtonsoft.Json/JsonSerializerSettings.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         internal static readonly CultureInfo DefaultCulture;",
          "62:         internal const bool DefaultCheckAdditionalContent = false;",
          "63:         internal const string DefaultDateFormatString = @\"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK\";",
          "66:         internal Formatting? _formatting;",
          "67:         internal DateFormatHandling? _dateFormatHandling;",
          "",
          "[Removed Lines]",
          "64:         internal const int DefaultMaxDepth = 128;",
          "",
          "[Added Lines]",
          "64:         internal const int DefaultMaxDepth = 64;",
          "",
          "---------------"
        ]
      }
    }
  ]
}