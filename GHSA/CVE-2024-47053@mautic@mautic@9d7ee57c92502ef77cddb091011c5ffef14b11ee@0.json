{
  "cve_id": "CVE-2024-47053",
  "cve_desc": "This advisory addresses an authorization vulnerability in Mautic's HTTP Basic Authentication implementation. This flaw could allow unauthorized access to sensitive report data.\n\n  *  Improper Authorization:\u00a0An authorization flaw exists in Mautic's API Authorization implementation. Any authenticated user, regardless of assigned roles or permissions, can access all reports and their associated data via the API. This bypasses the intended access controls governed by the \"Reporting Permissions > View Own\" and \"Reporting Permissions > View Others\" permissions, which should restrict access to non-System Reports.",
  "repo": "mautic/mautic",
  "patch_hash": "9d7ee57c92502ef77cddb091011c5ffef14b11ee",
  "patch_info": {
    "commit_hash": "9d7ee57c92502ef77cddb091011c5ffef14b11ee",
    "repo": "mautic/mautic",
    "commit_url": "https://github.com/mautic/mautic/commit/9d7ee57c92502ef77cddb091011c5ffef14b11ee",
    "files": [
      "app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
      "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
    ],
    "message": "Merge pull request from GHSA-8xv7-g2q3-fqgc",
    "before_after_code_files": [
      "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
      "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
    ]
  },
  "patch_diff": {
    "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php": [
      "File: app/bundles/ReportBundle/Controller/Api/ReportApiController.php -> app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: use Mautic\\CoreBundle\\Factory\\ModelFactory;",
      "10: use Mautic\\CoreBundle\\Helper\\AppVersion;",
      "11: use Mautic\\CoreBundle\\Helper\\CoreParametersHelper;",
      "12: use Mautic\\CoreBundle\\Security\\Permissions\\CorePermissions;",
      "13: use Mautic\\CoreBundle\\Translation\\Translator;",
      "14: use Mautic\\ReportBundle\\Entity\\Report;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: use Mautic\\CoreBundle\\Helper\\UserHelper;",
      "13: use Mautic\\CoreBundle\\Security\\Exception\\PermissionException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     protected $model;",
      "34:     {",
      "35:         $reportModel = $modelFactory->getModel('report');",
      "36:         \\assert($reportModel instanceof ReportModel);",
      "",
      "[Removed Lines]",
      "33:     public function __construct(CorePermissions $security, Translator $translator, EntityResultHelper $entityResultHelper, RouterInterface $router, FormFactoryInterface $formFactory, AppVersion $appVersion, RequestStack $requestStack, ManagerRegistry $doctrine, ModelFactory $modelFactory, EventDispatcherInterface $dispatcher, CoreParametersHelper $coreParametersHelper, MauticFactory $factory)",
      "",
      "[Added Lines]",
      "35:     public function __construct(CorePermissions $security, Translator $translator, EntityResultHelper $entityResultHelper, RouterInterface $router, FormFactoryInterface $formFactory, AppVersion $appVersion, RequestStack $requestStack, ManagerRegistry $doctrine, ModelFactory $modelFactory, EventDispatcherInterface $dispatcher, CoreParametersHelper $coreParametersHelper, MauticFactory $factory, protected UserHelper $userHelper)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55:     {",
      "58:         if (!$entity instanceof $this->entityClass) {",
      "59:             return $this->notFound();",
      "60:         }",
      "62:         $reportData = $this->model->getReportData($entity, $this->formFactory, $this->getOptionsFromRequest($request));",
      "",
      "[Removed Lines]",
      "54:     public function getEntityAction(Request $request, $id)",
      "56:         $entity = $this->model->getEntity($id);",
      "",
      "[Added Lines]",
      "54:     public function getEntityAction(Request $request, $id): Response",
      "56:         try {",
      "57:             if (!$this->security->isGranted($this->permissionBase.':view')) {",
      "58:                 return $this->accessDenied();",
      "59:             }",
      "60:         } catch (PermissionException $e) {",
      "61:             return $this->accessDenied($e->getMessage());",
      "62:         }",
      "64:         $entity        = $this->model->getEntity($id);",
      "70:         if (",
      "71:             $this->security->checkPermissionExists($this->permissionBase.':viewother')",
      "72:             && !$this->security->isGranted($this->permissionBase.':viewother')",
      "73:             && $entity->getCreatedBy() !== $this->userHelper->getUser()->getId()",
      "74:         ) {",
      "75:             return $this->accessDenied();",
      "76:         }",
      "",
      "---------------"
    ],
    "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php": [
      "File: app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php -> app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: namespace Mautic\\ReportBundle\\Tests\\Controller\\Api;",
      "5: use Mautic\\CoreBundle\\Test\\MauticMysqlTestCase;",
      "6: use Symfony\\Component\\HttpFoundation\\Response;",
      "9: {",
      "10:     protected $useCleanupRollback = false;",
      "16:     {",
      "74:     }",
      "75: }",
      "",
      "[Removed Lines]",
      "8: final class ReportApiControllerTest extends MauticMysqlTestCase",
      "15:     public function testPostGetPatchPutDeleteEndPoints(): void",
      "18:         $data = json_decode(file_get_contents(__DIR__.'/data/post.json'), true);",
      "19:         $this->client->request('POST', '/api/reports/new', $data);",
      "20:         $response     = $this->client->getResponse();",
      "21:         $responseData = json_decode($response->getContent(), true);",
      "22:         $this->assertSame(Response::HTTP_CREATED, $response->getStatusCode());",
      "23:         $this->assertTrue(isset($responseData['report']));",
      "24:         $this->assertEquals($data['name'], $responseData['report']['name']);",
      "25:         $id     = $responseData['report']['id'];",
      "26:         $source = $data['source'];",
      "29:         $this->client->restart();",
      "30:         $this->client->request('GET', sprintf('/api/reports/%s', $id));",
      "31:         $response = $this->client->getResponse();",
      "32:         $this->assertSame(Response::HTTP_OK, $response->getStatusCode());",
      "33:         $responseData = json_decode($response->getContent(), true);",
      "34:         $this->assertTrue(isset($responseData['data']));",
      "35:         $this->assertTrue(isset($responseData['dataColumns']));",
      "36:         $this->assertTrue(isset($responseData['report']));",
      "37:         $this->assertEquals($data['name'], $responseData['report']['name']);",
      "40:         $data = json_decode(file_get_contents(__DIR__.'/data/patch.json'), true);",
      "41:         $this->client->request('PATCH', sprintf('/api/reports/%s/edit', $id), $data);",
      "42:         $response = $this->client->getResponse();",
      "43:         $this->assertSame(Response::HTTP_OK, $response->getStatusCode());",
      "44:         $responseData = json_decode($response->getContent(), true);",
      "45:         $this->assertTrue(isset($responseData['report']));",
      "46:         $this->assertEquals($source, $responseData['report']['source']);",
      "47:         $this->assertEquals($data['scheduleUnit'], $responseData['report']['scheduleUnit']);",
      "48:         $this->assertEquals($data['toAddress'], $responseData['report']['toAddress']);",
      "49:         $this->assertEquals($data['scheduleDay'], $responseData['report']['scheduleDay']);",
      "52:         $data = json_decode(file_get_contents(__DIR__.'/data/put.json'), true);",
      "53:         $this->client->request('PUT', sprintf('/api/reports/%s/edit', $id), $data);",
      "54:         $response = $this->client->getResponse();",
      "55:         $this->assertSame(Response::HTTP_OK, $response->getStatusCode());",
      "56:         $responseData = json_decode($response->getContent(), true);",
      "57:         $this->assertTrue(isset($responseData['report']));",
      "58:         $this->assertEquals($data['name'], $responseData['report']['name']);",
      "59:         $this->assertEquals($data['source'], $responseData['report']['source']);",
      "60:         $this->assertEquals($data['scheduleUnit'], $responseData['report']['scheduleUnit']);",
      "61:         $this->assertEquals($data['toAddress'], $responseData['report']['toAddress']);",
      "62:         $this->assertEquals($data['scheduleDay'], $responseData['report']['scheduleDay']);",
      "63:         $this->assertEmpty($responseData['report']['filters']);",
      "66:         $this->client->request('DELETE', sprintf('/api/reports/%s/delete', $id), $data);",
      "67:         $response = $this->client->getResponse();",
      "68:         $this->assertSame(Response::HTTP_OK, $response->getStatusCode());",
      "69:         $this->assertTrue(isset($responseData['report']));",
      "70:         $this->assertEquals($data['name'], $responseData['report']['name']);",
      "71:         $this->client->request('GET', sprintf('/api/reports/%s', $id), $data);",
      "72:         $response = $this->client->getResponse();",
      "73:         $this->assertSame(Response::HTTP_NOT_FOUND, $response->getStatusCode());",
      "",
      "[Added Lines]",
      "6: use Mautic\\ReportBundle\\Entity\\Report;",
      "7: use Mautic\\UserBundle\\Entity\\Permission;",
      "8: use Mautic\\UserBundle\\Entity\\Role;",
      "9: use Mautic\\UserBundle\\Entity\\User;",
      "10: use Mautic\\UserBundle\\Model\\RoleModel;",
      "13: class ReportApiControllerTest extends MauticMysqlTestCase",
      "17:     public function testGetReportFailByNoCorrectAccessRoleEmpty(): void",
      "18:     {",
      "19:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', []);",
      "20:         $this->client->request('GET', '/api/reports/'.$reportId);",
      "21:         $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());",
      "22:     }",
      "24:     public function testGetReportSuccessByCorrectAccessIsAdmin(): void",
      "25:     {",
      "26:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', [], false, true);",
      "27:         $this->client->request('GET', '/api/reports/'.$reportId);",
      "28:         $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());",
      "29:     }",
      "31:     public function testGetReportSuccessByNoCorrectAccessToViewOther(): void",
      "32:     {",
      "33:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', ['report:reports'=>['viewother']]);",
      "34:         $this->client->request('GET', '/api/reports/'.$reportId);",
      "35:         $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());",
      "36:     }",
      "38:     public function testReportFailByNoCorrectAccessToViewOwn(): void",
      "39:     {",
      "40:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', ['report:reports'=>['viewown']]);",
      "41:         $this->client->request('GET', '/api/reports/'.$reportId);",
      "42:         $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());",
      "43:     }",
      "45:     public function testReportSuccessViewOwnBySameUser(): void",
      "46:     {",
      "47:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', ['report:reports'=>['viewown']], true);",
      "48:         $this->client->request('GET', '/api/reports/'.$reportId);",
      "49:         $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());",
      "50:     }",
      "55:     private function createReportStructure(string $password, array $permissions, bool $createBy = false, bool $userIsAdmin = false): int",
      "57:         $role           = $this->createRole($userIsAdmin);",
      "58:         $user           = $this->createUser($role, $password);",
      "59:         $createByIdUser = 0;",
      "60:         if (!empty($createBy)) {",
      "61:             $createByIdUser = $user->getId();",
      "62:         }",
      "63:         $report   = $this->createReportData($createByIdUser);",
      "65:         if ($permissions) {",
      "66:             $this->setPermission($user, $permissions);",
      "67:         }",
      "69:         $this->clientServer = [];",
      "70:         $this->setUpSymfony($this->configParams);",
      "71:         $this->loginUser($user->getUserIdentifier());",
      "72:         $this->client->setServerParameter('PHP_AUTH_USER', $user->getUserIdentifier());",
      "73:         $this->client->setServerParameter('PHP_AUTH_PW', $password);",
      "75:         return $report->getId();",
      "76:     }",
      "81:     private function setPermission(User $user, array $permissions): Role",
      "82:     {",
      "83:         $role = $user->getRole();",
      "85:         $this->em->createQueryBuilder()",
      "86:             ->delete(Permission::class, 'p')",
      "87:             ->where('p.bundle = :bundle')",
      "88:             ->andWhere('p.role = :role_id')",
      "89:             ->setParameters(['bundle' => 'report', 'role_id' => $role->getId()])",
      "90:             ->getQuery()",
      "91:             ->execute();",
      "94:         $role->setIsAdmin(false);",
      "95:         $roleModel = static::getContainer()->get('mautic.user.model.role');",
      "96:         \\assert($roleModel instanceof RoleModel);",
      "97:         $roleModel->setRolePermissions($role, $permissions);",
      "98:         $this->em->persist($role);",
      "99:         $this->em->flush();",
      "101:         return $role;",
      "102:     }",
      "104:     private function createUser(Role $role, string $password='mautic'): User",
      "105:     {",
      "106:         $user = new User();",
      "107:         $user->setFirstName('John');",
      "108:         $user->setLastName('Doe');",
      "109:         $user->setUsername('john.doe');",
      "110:         $user->setEmail('john.doe@email.com');",
      "111:         $encoder = static::getContainer()->get('security.encoder_factory')->getEncoder($user);",
      "112:         $user->setPassword($encoder->encodePassword($password, null));",
      "113:         $user->setRole($role);",
      "115:         $this->em->persist($user);",
      "116:         $this->em->flush();",
      "118:         return $user;",
      "119:     }",
      "121:     private function createRole(bool $isAdmin = false): Role",
      "122:     {",
      "123:         $role = new Role();",
      "124:         $role->setName('Role');",
      "125:         $role->setIsAdmin($isAdmin);",
      "127:         $this->em->persist($role);",
      "128:         $this->em->flush();",
      "130:         return $role;",
      "131:     }",
      "133:     private function createReportData(int $createBy = 0): Report",
      "134:     {",
      "135:         $report = new Report();",
      "136:         $report->setName('Contact report');",
      "137:         $report->setDescription('<b>This is allowed HTML</b>');",
      "138:         $report->setSource('leads');",
      "139:         $coulmns = [",
      "140:             'l.firstname',",
      "141:             'l.lastname',",
      "142:             'l.email',",
      "143:             'l.date_added',",
      "144:         ];",
      "145:         $report->setColumns($coulmns);",
      "146:         if (!empty($createBy)) {",
      "147:             $report->setCreatedBy($createBy);",
      "148:             $report->setCreatedByUser($createBy);",
      "149:         }",
      "151:         $this->getContainer()->get('mautic.report.model.report')->saveEntity($report);",
      "153:         return $report;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "330f47425dd5eb128891c2d37734448398f33e69",
      "candidate_info": {
        "commit_hash": "330f47425dd5eb128891c2d37734448398f33e69",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/330f47425dd5eb128891c2d37734448398f33e69",
        "files": [
          "app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
          "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
        ],
        "message": "- mst-83",
        "before_after_code_files": [
          "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
          "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [
            "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
            "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
          ],
          "candidate": [
            "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
            "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
          ]
        }
      },
      "candidate_diff": {
        "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php": [
          "File: app/bundles/ReportBundle/Controller/Api/ReportApiController.php -> app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: use Mautic\\CoreBundle\\Factory\\ModelFactory;",
          "10: use Mautic\\CoreBundle\\Helper\\AppVersion;",
          "11: use Mautic\\CoreBundle\\Helper\\CoreParametersHelper;",
          "12: use Mautic\\CoreBundle\\Security\\Permissions\\CorePermissions;",
          "13: use Mautic\\CoreBundle\\Translation\\Translator;",
          "14: use Mautic\\ReportBundle\\Entity\\Report;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: use Mautic\\CoreBundle\\Helper\\UserHelper;",
          "13: use Mautic\\CoreBundle\\Security\\Exception\\PermissionException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:     protected $model;",
          "34:     {",
          "35:         $reportModel = $modelFactory->getModel('report');",
          "36:         \\assert($reportModel instanceof ReportModel);",
          "",
          "[Removed Lines]",
          "33:     public function __construct(CorePermissions $security, Translator $translator, EntityResultHelper $entityResultHelper, RouterInterface $router, FormFactoryInterface $formFactory, AppVersion $appVersion, RequestStack $requestStack, ManagerRegistry $doctrine, ModelFactory $modelFactory, EventDispatcherInterface $dispatcher, CoreParametersHelper $coreParametersHelper, MauticFactory $factory)",
          "",
          "[Added Lines]",
          "38:     protected $userHelper;",
          "40:     public function __construct(CorePermissions $security, Translator $translator, EntityResultHelper $entityResultHelper, RouterInterface $router, FormFactoryInterface $formFactory, AppVersion $appVersion, RequestStack $requestStack, ManagerRegistry $doctrine, ModelFactory $modelFactory, EventDispatcherInterface $dispatcher, CoreParametersHelper $coreParametersHelper, MauticFactory $factory, UserHelper $userHelper)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "40:         $this->entityNameOne    = 'report';",
          "41:         $this->entityNameMulti  = 'reports';",
          "42:         $this->serializerGroups = ['reportList', 'reportDetails'];",
          "44:         parent::__construct($security, $translator, $entityResultHelper, $router, $formFactory, $appVersion, $requestStack, $doctrine, $modelFactory, $dispatcher, $coreParametersHelper, $factory);",
          "45:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:         $this->userHelper       = $userHelper;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "55:     {",
          "58:         if (!$entity instanceof $this->entityClass) {",
          "59:             return $this->notFound();",
          "60:         }",
          "62:         $reportData = $this->model->getReportData($entity, $this->formFactory, $this->getOptionsFromRequest($request));",
          "",
          "[Removed Lines]",
          "54:     public function getEntityAction(Request $request, $id)",
          "56:         $entity = $this->model->getEntity($id);",
          "",
          "[Added Lines]",
          "60:     public function getEntityAction(Request $request, $id): Response",
          "62:         $entity        = $this->model->getEntity($id);",
          "63:         $tableAlias    = $this->model->getRepository()->getTableAlias();",
          "69:         try {",
          "70:             if (!$this->security->isGranted($this->permissionBase.':view')) {",
          "71:                 return $this->accessDenied();",
          "72:             }",
          "73:         } catch (PermissionException $e) {",
          "74:             return $this->accessDenied($e->getMessage());",
          "75:         }",
          "77:         if ($this->security->checkPermissionExists($this->permissionBase.':viewother')",
          "78:             && !$this->security->isGranted($this->permissionBase.':viewother')",
          "79:             && null !== $user = $this->userHelper->getUser()",
          "80:         ) {",
          "81:             $this->listFilters[] = [",
          "82:                 'column' => $tableAlias.'.createdBy',",
          "83:                 'expr'   => 'eq',",
          "84:                 'value'  => $user->getId(),",
          "85:             ];",
          "86:         }",
          "",
          "---------------"
        ],
        "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php": [
          "File: app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php -> app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace Mautic\\ReportBundle\\Tests\\Controller\\Api;",
          "5: use Mautic\\CoreBundle\\Test\\MauticMysqlTestCase;",
          "6: use Symfony\\Component\\HttpFoundation\\Response;",
          "8: final class ReportApiControllerTest extends MauticMysqlTestCase",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: use Mautic\\UserBundle\\Entity\\Role;",
          "7: use Mautic\\UserBundle\\Entity\\User;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:         $response = $this->client->getResponse();",
          "73:         $this->assertSame(Response::HTTP_NOT_FOUND, $response->getStatusCode());",
          "74:     }",
          "75: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     public function testGetReportFailByNoCorrectAccess(): void",
          "79:     {",
          "80:         $password = 'Maut1cR0cks!!!!!';",
          "81:         $idReport = $this->createReportData();",
          "82:         $role     = $this->createRole(false);",
          "83:         $user     = $this->createUser($role, $password);",
          "84:         $this->em->flush();",
          "85:         $this->em->detach($role);",
          "87:         $this->clientServer = [];",
          "88:         $this->setUpSymfony($this->configParams);",
          "89:         $user = $this->loginUser($user->getUserIdentifier());",
          "90:         $this->client->setServerParameter('PHP_AUTH_USER', $user->getUserIdentifier());",
          "91:         $this->client->setServerParameter('PHP_AUTH_PW', $password);",
          "92:         $this->client->request('GET', '/api/reports/'.$idReport);",
          "93:         $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());",
          "94:     }",
          "96:     private function createUser(Role $role, string $password='mautic'): User",
          "97:     {",
          "98:         $user = new User();",
          "99:         $user->setFirstName('John');",
          "100:         $user->setLastName('Doe');",
          "101:         $user->setUsername('john.doe');",
          "102:         $user->setEmail('john.doe@email.com');",
          "103:         $encoder = static::getContainer()->get('security.encoder_factory')->getEncoder($user);",
          "104:         $user->setPassword($encoder->encodePassword($password, null));",
          "105:         $user->setRole($role);",
          "107:         $this->em->persist($user);",
          "109:         return $user;",
          "110:     }",
          "112:     private function createRole(bool $isAdmin = false): Role",
          "113:     {",
          "114:         $role = new Role();",
          "115:         $role->setName('Role');",
          "116:         $role->setIsAdmin($isAdmin);",
          "118:         $this->em->persist($role);",
          "120:         return $role;",
          "121:     }",
          "123:     private function createReportData(): int",
          "124:     {",
          "125:         $data = json_decode(file_get_contents(__DIR__.'/data/post.json'), true);",
          "126:         $this->client->request('POST', '/api/reports/new', $data);",
          "127:         $response     = $this->client->getResponse();",
          "128:         $responseData = json_decode($response->getContent(), true);",
          "129:         $this->assertSame(Response::HTTP_CREATED, $response->getStatusCode());",
          "130:         $this->assertTrue(isset($responseData['report']));",
          "131:         $this->assertEquals($data['name'], $responseData['report']['name']);",
          "133:         return $responseData['report']['id'];",
          "134:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ce57f9565718887abc85ee460d70d3edc4a728a",
      "candidate_info": {
        "commit_hash": "8ce57f9565718887abc85ee460d70d3edc4a728a",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/8ce57f9565718887abc85ee460d70d3edc4a728a",
        "files": [
          "app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php"
        ],
        "message": "phpstan fix",
        "before_after_code_files": [
          "app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php||app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php||app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php": [
          "File: app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php -> app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php"
        ]
      }
    },
    {
      "candidate_hash": "8dfc79ee651f76a85dc4cd9ef4d2af413b73b50a",
      "candidate_info": {
        "commit_hash": "8dfc79ee651f76a85dc4cd9ef4d2af413b73b50a",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/8dfc79ee651f76a85dc4cd9ef4d2af413b73b50a",
        "files": [
          "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
        ],
        "message": "- mst-83 - add viewother permissions",
        "before_after_code_files": [
          "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [
            "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
          ],
          "candidate": [
            "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
          ]
        }
      },
      "candidate_diff": {
        "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php": [
          "File: app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php -> app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace Mautic\\ReportBundle\\Tests\\Controller\\Api;",
          "5: use Mautic\\CoreBundle\\Test\\MauticMysqlTestCase;",
          "6: use Mautic\\UserBundle\\Entity\\Permission;",
          "7: use Mautic\\UserBundle\\Entity\\Role;",
          "8: use Mautic\\UserBundle\\Entity\\User;",
          "9: use Mautic\\UserBundle\\Model\\RoleModel;",
          "10: use Symfony\\Component\\HttpFoundation\\Response;",
          "13: {",
          "14:     protected $useCleanupRollback = false;",
          "20:     {",
          "78:     }",
          "81:     {",
          "95:         $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());",
          "96:     }",
          "99:     {",
          "109:         $this->clientServer = [];",
          "110:         $this->setUpSymfony($this->configParams);",
          "112:         $this->client->setServerParameter('PHP_AUTH_USER', $user->getUserIdentifier());",
          "113:         $this->client->setServerParameter('PHP_AUTH_PW', $password);",
          "116:     }",
          "118:     private function createUser(Role $role, string $password='mautic'): User",
          "",
          "[Removed Lines]",
          "12: final class ReportApiControllerTest extends MauticMysqlTestCase",
          "19:     public function testPostGetPatchPutDeleteEndPoints(): void",
          "22:         $data = json_decode(file_get_contents(__DIR__.'/data/post.json'), true);",
          "23:         $this->client->request('POST', '/api/reports/new', $data);",
          "24:         $response     = $this->client->getResponse();",
          "25:         $responseData = json_decode($response->getContent(), true);",
          "26:         $this->assertSame(Response::HTTP_CREATED, $response->getStatusCode());",
          "27:         $this->assertTrue(isset($responseData['report']));",
          "28:         $this->assertEquals($data['name'], $responseData['report']['name']);",
          "29:         $id     = $responseData['report']['id'];",
          "30:         $source = $data['source'];",
          "33:         $this->client->restart();",
          "34:         $this->client->request('GET', sprintf('/api/reports/%s', $id));",
          "35:         $response = $this->client->getResponse();",
          "36:         $this->assertSame(Response::HTTP_OK, $response->getStatusCode());",
          "37:         $responseData = json_decode($response->getContent(), true);",
          "38:         $this->assertTrue(isset($responseData['data']));",
          "39:         $this->assertTrue(isset($responseData['dataColumns']));",
          "40:         $this->assertTrue(isset($responseData['report']));",
          "41:         $this->assertEquals($data['name'], $responseData['report']['name']);",
          "44:         $data = json_decode(file_get_contents(__DIR__.'/data/patch.json'), true);",
          "45:         $this->client->request('PATCH', sprintf('/api/reports/%s/edit', $id), $data);",
          "46:         $response = $this->client->getResponse();",
          "47:         $this->assertSame(Response::HTTP_OK, $response->getStatusCode());",
          "48:         $responseData = json_decode($response->getContent(), true);",
          "49:         $this->assertTrue(isset($responseData['report']));",
          "50:         $this->assertEquals($source, $responseData['report']['source']);",
          "51:         $this->assertEquals($data['scheduleUnit'], $responseData['report']['scheduleUnit']);",
          "52:         $this->assertEquals($data['toAddress'], $responseData['report']['toAddress']);",
          "53:         $this->assertEquals($data['scheduleDay'], $responseData['report']['scheduleDay']);",
          "56:         $data = json_decode(file_get_contents(__DIR__.'/data/put.json'), true);",
          "57:         $this->client->request('PUT', sprintf('/api/reports/%s/edit', $id), $data);",
          "58:         $response = $this->client->getResponse();",
          "59:         $this->assertSame(Response::HTTP_OK, $response->getStatusCode());",
          "60:         $responseData = json_decode($response->getContent(), true);",
          "61:         $this->assertTrue(isset($responseData['report']));",
          "62:         $this->assertEquals($data['name'], $responseData['report']['name']);",
          "63:         $this->assertEquals($data['source'], $responseData['report']['source']);",
          "64:         $this->assertEquals($data['scheduleUnit'], $responseData['report']['scheduleUnit']);",
          "65:         $this->assertEquals($data['toAddress'], $responseData['report']['toAddress']);",
          "66:         $this->assertEquals($data['scheduleDay'], $responseData['report']['scheduleDay']);",
          "67:         $this->assertEmpty($responseData['report']['filters']);",
          "70:         $this->client->request('DELETE', sprintf('/api/reports/%s/delete', $id), $data);",
          "71:         $response = $this->client->getResponse();",
          "72:         $this->assertSame(Response::HTTP_OK, $response->getStatusCode());",
          "73:         $this->assertTrue(isset($responseData['report']));",
          "74:         $this->assertEquals($data['name'], $responseData['report']['name']);",
          "75:         $this->client->request('GET', sprintf('/api/reports/%s', $id), $data);",
          "76:         $response = $this->client->getResponse();",
          "77:         $this->assertSame(Response::HTTP_NOT_FOUND, $response->getStatusCode());",
          "80:     public function testGetReportFailByNoCorrectAccess(): void",
          "82:         $password = 'Maut1cR0cks!!!!!';",
          "83:         $idReport = $this->createReportData();",
          "84:         $role     = $this->createRole(false);",
          "85:         $user     = $this->createUser($role, $password);",
          "86:         $this->em->flush();",
          "87:         $this->em->detach($role);",
          "89:         $this->clientServer = [];",
          "90:         $this->setUpSymfony($this->configParams);",
          "91:         $user = $this->loginUser($user->getUserIdentifier());",
          "92:         $this->client->setServerParameter('PHP_AUTH_USER', $user->getUserIdentifier());",
          "93:         $this->client->setServerParameter('PHP_AUTH_PW', $password);",
          "94:         $this->client->request('GET', '/api/reports/'.$idReport);",
          "98:     public function testGetReportFailByNoCorrectAccessToViewOther(): void",
          "100:         $password   = 'Maut1cR0cks!!!!!';",
          "101:         $idReport   = $this->createReportData();",
          "102:         $permission = ['report:reports'=>['viewother']];",
          "103:         $role       = $this->createRole(false);",
          "104:         $user       = $this->createUser($role, $password);",
          "105:         $this->em->flush();",
          "106:         $this->em->detach($role);",
          "107:         $this->setPermission($user, $permission);",
          "111:         $user = $this->loginUser($user->getUserIdentifier());",
          "114:         $this->client->request('GET', '/api/reports/'.$idReport);",
          "115:         $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());",
          "",
          "[Added Lines]",
          "6: use Mautic\\ReportBundle\\Entity\\Report;",
          "13: class ReportApiControllerTest extends MauticMysqlTestCase",
          "17:     public function testGetReportFailByNoCorrectAccessRoleEmpty(): void",
          "19:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', []);",
          "20:         $this->client->request('GET', '/api/reports/'.$reportId);",
          "21:         $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());",
          "24:     public function testGetReportSuccessByCorrectAccessIsAdmin(): void",
          "26:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', [], false, true);",
          "27:         $this->client->request('GET', '/api/reports/'.$reportId);",
          "28:         $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());",
          "29:     }",
          "31:     public function testGetReportSuccessByNoCorrectAccessToViewOther(): void",
          "32:     {",
          "33:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', ['report:reports'=>['viewother']]);",
          "34:         $this->client->request('GET', '/api/reports/'.$reportId);",
          "35:         $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());",
          "36:     }",
          "38:     public function testReportFailByNoCorrectAccessToViewOwn(): void",
          "39:     {",
          "40:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', ['report:reports'=>['viewown']]);",
          "41:         $this->client->request('GET', '/api/reports/'.$reportId);",
          "45:     public function testReportSuccessViewOwnBySameUser(): void",
          "47:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', ['report:reports'=>['viewown']], true);",
          "48:         $this->client->request('GET', '/api/reports/'.$reportId);",
          "49:         $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());",
          "50:     }",
          "55:     private function createReportStructure(string $password, array $permissions, bool $createBy = false, bool $userIsAdmin = false): int",
          "56:     {",
          "57:         $role           = $this->createRole($userIsAdmin);",
          "58:         $user           = $this->createUser($role, $password);",
          "59:         $createByIdUser = 0;",
          "60:         if (!empty($createBy)) {",
          "61:             $createByIdUser = $user->getId();",
          "62:         }",
          "63:         $report   = $this->createReportData($createByIdUser);",
          "65:         if ($permissions) {",
          "66:             $this->setPermission($user, $permissions);",
          "67:         }",
          "71:         $this->loginUser($user->getUserIdentifier());",
          "75:         return $report->getId();",
          "76:     }",
          "81:     private function setPermission(User $user, array $permissions): Role",
          "82:     {",
          "83:         $role = $user->getRole();",
          "85:         $this->em->createQueryBuilder()",
          "86:             ->delete(Permission::class, 'p')",
          "87:             ->where('p.bundle = :bundle')",
          "88:             ->andWhere('p.role = :role_id')",
          "89:             ->setParameters(['bundle' => 'report', 'role_id' => $role->getId()])",
          "90:             ->getQuery()",
          "91:             ->execute();",
          "94:         $role->setIsAdmin(false);",
          "95:         $roleModel = static::getContainer()->get('mautic.user.model.role');",
          "96:         \\assert($roleModel instanceof RoleModel);",
          "97:         $roleModel->setRolePermissions($role, $permissions);",
          "98:         $this->em->persist($role);",
          "99:         $this->em->flush();",
          "101:         return $role;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:         $user->setRole($role);",
          "129:         $this->em->persist($user);",
          "131:         return $user;",
          "132:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:         $this->em->flush();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:         $role->setIsAdmin($isAdmin);",
          "140:         $this->em->persist($role);",
          "142:         return $role;",
          "143:     }",
          "171:     {",
          "181:     }",
          "182: }",
          "",
          "[Removed Lines]",
          "148:     private function setPermission(User $user, array $permissions): void",
          "149:     {",
          "150:         $role = $user->getRole();",
          "153:         $this->em->createQueryBuilder()",
          "154:             ->delete(Permission::class, 'p')",
          "155:             ->where('p.bundle = :bundle')",
          "156:             ->andWhere('p.role = :role_id')",
          "157:             ->setParameters(['bundle' => 'report', 'role_id' => $role->getId()])",
          "158:             ->getQuery()",
          "159:             ->execute();",
          "162:         $role->setIsAdmin(false);",
          "163:         $roleModel = static::getContainer()->get('mautic.user.model.role');",
          "164:         \\assert($roleModel instanceof RoleModel);",
          "165:         $roleModel->setRolePermissions($role, $permissions);",
          "166:         $this->em->persist($role);",
          "167:         $this->em->flush();",
          "168:     }",
          "170:     private function createReportData(): int",
          "172:         $data = json_decode(file_get_contents(__DIR__.'/data/post.json'), true);",
          "173:         $this->client->request('POST', '/api/reports/new', $data);",
          "174:         $response     = $this->client->getResponse();",
          "175:         $responseData = json_decode($response->getContent(), true);",
          "176:         $this->assertSame(Response::HTTP_CREATED, $response->getStatusCode());",
          "177:         $this->assertTrue(isset($responseData['report']));",
          "178:         $this->assertEquals($data['name'], $responseData['report']['name']);",
          "180:         return $responseData['report']['id'];",
          "",
          "[Added Lines]",
          "128:         $this->em->flush();",
          "133:     private function createReportData(int $createBy = 0): Report",
          "135:         $report = new Report();",
          "136:         $report->setName('Contact report');",
          "137:         $report->setDescription('<b>This is allowed HTML</b>');",
          "138:         $report->setSource('leads');",
          "139:         $coulmns = [",
          "140:             'l.firstname',",
          "141:             'l.lastname',",
          "142:             'l.email',",
          "143:             'l.date_added',",
          "144:         ];",
          "145:         $report->setColumns($coulmns);",
          "146:         if (!empty($createBy)) {",
          "147:             $report->setCreatedBy($createBy);",
          "148:             $report->setCreatedByUser($createBy);",
          "149:         }",
          "151:         $this->getContainer()->get('mautic.report.model.report')->saveEntity($report);",
          "153:         return $report;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afb4bf879f72054cf826f46e6842d41de33c2462",
      "candidate_info": {
        "commit_hash": "afb4bf879f72054cf826f46e6842d41de33c2462",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/afb4bf879f72054cf826f46e6842d41de33c2462",
        "files": [
          "app/bundles/AssetBundle/Controller/UploadController.php",
          "app/bundles/AssetBundle/Entity/Asset.php",
          "app/bundles/AssetBundle/EventListener/UploadSubscriber.php",
          "app/bundles/AssetBundle/Form/Type/AssetType.php",
          "app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php"
        ],
        "message": "- add validation by extension and mimetype",
        "before_after_code_files": [
          "app/bundles/AssetBundle/Controller/UploadController.php||app/bundles/AssetBundle/Controller/UploadController.php",
          "app/bundles/AssetBundle/Entity/Asset.php||app/bundles/AssetBundle/Entity/Asset.php",
          "app/bundles/AssetBundle/EventListener/UploadSubscriber.php||app/bundles/AssetBundle/EventListener/UploadSubscriber.php",
          "app/bundles/AssetBundle/Form/Type/AssetType.php||app/bundles/AssetBundle/Form/Type/AssetType.php",
          "app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php||app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "app/bundles/AssetBundle/Controller/UploadController.php||app/bundles/AssetBundle/Controller/UploadController.php": [
          "File: app/bundles/AssetBundle/Controller/UploadController.php -> app/bundles/AssetBundle/Controller/UploadController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:         $request  = $this->getRequest();",
          "18:         $response = new EmptyResponse();",
          "19:         $files    = $this->getFiles($request->files);",
          "21:         if (!empty($files)) {",
          "22:             foreach ($files as $file) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20:         $this->setTranslator($this->container->get('translator'));",
          "",
          "---------------"
        ],
        "app/bundles/AssetBundle/Entity/Asset.php||app/bundles/AssetBundle/Entity/Asset.php": [
          "File: app/bundles/AssetBundle/Entity/Asset.php -> app/bundles/AssetBundle/Entity/Asset.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: use Mautic\\CoreBundle\\Doctrine\\Mapping\\ClassMetadataBuilder;",
          "9: use Mautic\\CoreBundle\\Entity\\FormEntity;",
          "10: use Mautic\\CoreBundle\\Helper\\FileHelper;",
          "11: use Symfony\\Component\\Filesystem\\Filesystem;",
          "12: use Symfony\\Component\\HttpFoundation\\File\\Exception\\FileNotFoundException;",
          "13: use Symfony\\Component\\HttpFoundation\\File\\File;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: use Mautic\\CoreBundle\\Loader\\ParameterLoader;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1164:                     ->setTranslationDomain('validators')",
          "1165:                     ->addViolation();",
          "1166:             }",
          "1169:             $object->setRemotePath(null);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1166:                     ->addViolation();",
          "1167:             }",
          "1168:             $loader           = new ParameterLoader();",
          "1169:             $parameters       = $loader->getParameterBag();",
          "1170:             $mimeTypesAllowed = $parameters->get('allowed_mimetypes');",
          "1172:             if (!empty($object->getFileMimeType()) && !in_array($object->getFileMimeType(), $mimeTypesAllowed)) {",
          "1173:                 $context->buildViolation('mautic.asset.asset.error.invalid.mimetype', [",
          "1174:                     '%fileMimetype%'=> $object->getFileMimeType(),",
          "1175:                     '%mimetypes%'   => implode(', ', $mimeTypesAllowed),",
          "1176:                 ])->atPath('file')",
          "1177:                     ->setTranslationDomain('validators')",
          "1178:                     ->addViolation();",
          "1179:             }",
          "1181:             $extensionsAllowed = array_keys($mimeTypesAllowed);",
          "1182:             $fileType          = $object->getExtension();",
          "1183:             if (null !== $object->getExtension() && !in_array($fileType, $extensionsAllowed)) {",
          "1184:                 $context->buildViolation('mautic.asset.asset.error.file.extension', [",
          "1185:                     '%fileExtension%'=> $object->getExtension(),",
          "1186:                     '%extensions%'   => implode(', ', $extensionsAllowed),",
          "1187:                 ])->atPath('file')",
          "1188:                     ->setTranslationDomain('validators')",
          "",
          "---------------"
        ],
        "app/bundles/AssetBundle/EventListener/UploadSubscriber.php||app/bundles/AssetBundle/EventListener/UploadSubscriber.php": [
          "File: app/bundles/AssetBundle/EventListener/UploadSubscriber.php -> app/bundles/AssetBundle/EventListener/UploadSubscriber.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: use Mautic\\AssetBundle\\Model\\AssetModel;",
          "6: use Mautic\\CoreBundle\\Exception\\FileInvalidException;",
          "7: use Mautic\\CoreBundle\\Helper\\CoreParametersHelper;",
          "8: use Mautic\\CoreBundle\\Validator\\FileUploadValidator;",
          "9: use Oneup\\UploaderBundle\\Event\\PostUploadEvent;",
          "10: use Oneup\\UploaderBundle\\Event\\ValidationEvent;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: use Mautic\\CoreBundle\\Translation\\Translator;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:     public function __construct(",
          "18:         private CoreParametersHelper $coreParametersHelper,",
          "19:         private AssetModel $assetModel,",
          "21:     ) {",
          "22:     }",
          "",
          "[Removed Lines]",
          "20:         private FileUploadValidator $fileUploadValidator",
          "",
          "[Added Lines]",
          "21:         private FileUploadValidator $fileUploadValidator,",
          "22:         protected Translator $translator,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:     public function onUploadValidation(ValidationEvent $event): void",
          "60:     {",
          "61:         $file       = $event->getFile();",
          "63:         $maxSize    = $this->assetModel->getMaxUploadSize('B');",
          "65:         if (null === $file) {",
          "",
          "[Removed Lines]",
          "62:         $extensions = $this->coreParametersHelper->get('allowed_extensions');",
          "",
          "[Added Lines]",
          "64:         $mimetypes  = $this->coreParametersHelper->get('allowed_mimetypes');",
          "65:         $extensions = array_keys($mimetypes);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:         } catch (FileInvalidException $e) {",
          "78:             throw new ValidationException($e->getMessage());",
          "79:         }",
          "80:     }",
          "81: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:         try {",
          "85:             $this->checkMimeType($file->getMimeType(), $mimetypes, 'mautic.asset.asset.error.file.mimetype');",
          "86:         } catch (FileInvalidException $e) {",
          "87:             throw new ValidationException($e->getMessage());",
          "88:         }",
          "89:     }",
          "94:     private function checkMimeType(string $mimeType, array $allowedMimeTypes, string $extensionErrorMsg): void",
          "95:     {",
          "96:         if (!in_array(strtolower($mimeType), array_map('strtolower', $allowedMimeTypes), true)) {",
          "97:             $error = $this->translator->trans($extensionErrorMsg, [",
          "98:                 '%fileMimetype%' => $mimeType,",
          "99:                 '%mimetypes%'    => implode(', ', $allowedMimeTypes),",
          "100:             ], 'validators');",
          "102:             throw new FileInvalidException($error);",
          "103:         }",
          "",
          "---------------"
        ],
        "app/bundles/AssetBundle/Form/Type/AssetType.php||app/bundles/AssetBundle/Form/Type/AssetType.php": [
          "File: app/bundles/AssetBundle/Form/Type/AssetType.php -> app/bundles/AssetBundle/Form/Type/AssetType.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: use Mautic\\CoreBundle\\Form\\Type\\PublishDownDateType;",
          "13: use Mautic\\CoreBundle\\Form\\Type\\PublishUpDateType;",
          "14: use Mautic\\CoreBundle\\Form\\Type\\YesNoButtonGroupType;",
          "15: use Symfony\\Component\\Form\\AbstractType;",
          "16: use Symfony\\Component\\Form\\Extension\\Core\\Type\\HiddenType;",
          "17: use Symfony\\Component\\Form\\Extension\\Core\\Type\\LocaleType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use Mautic\\CoreBundle\\Loader\\ParameterLoader;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: use Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;",
          "20: use Symfony\\Component\\Form\\FormBuilderInterface;",
          "21: use Symfony\\Component\\OptionsResolver\\OptionsResolver;",
          "22: use Symfony\\Component\\Validator\\Constraints\\NotBlank;",
          "23: use Symfony\\Component\\Validator\\Constraints\\Url;",
          "24: use Symfony\\Contracts\\Translation\\TranslatorInterface;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: use Symfony\\Component\\Validator\\Constraints\\Callback;",
          "26: use Symfony\\Component\\Validator\\Context\\ExecutionContextInterface;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:             'tempName',",
          "56:             HiddenType::class,",
          "57:             [",
          "61:             ]",
          "62:         );",
          "",
          "[Removed Lines]",
          "58:                 'label'      => $this->translator->trans('mautic.asset.asset.form.file.upload', ['%max%' => $maxUploadSize]),",
          "59:                 'label_attr' => ['class' => 'control-label'],",
          "60:                 'required'   => false,",
          "",
          "[Added Lines]",
          "61:                 'label'       => $this->translator->trans('mautic.asset.asset.form.file.upload', ['%max%' => $maxUploadSize]),",
          "62:                 'label_attr'  => ['class' => 'control-label'],",
          "63:                 'required'    => false,",
          "64:                 'constraints' => [",
          "65:                     new Callback([$this, 'validateExtension']),",
          "66:                 ],",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:             'originalFileName',",
          "66:             HiddenType::class,",
          "67:             [",
          "70:         );",
          "71:         $builder->add(",
          "72:             'disallow',",
          "",
          "[Removed Lines]",
          "68:                 'required' => false,",
          "69:             ]",
          "",
          "[Added Lines]",
          "74:                 'required'    => false,",
          "75:                 'constraints' => [",
          "76:                     new Callback([$this, 'validateExtension']),",
          "77:                 ],",
          "78:             ],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "180:         }",
          "181:     }",
          "183:     public function configureOptions(OptionsResolver $resolver): void",
          "184:     {",
          "185:         $resolver->setDefaults(['data_class' => Asset::class]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:     public function validateExtension($object, ExecutionContextInterface $context): void",
          "196:     {",
          "197:         if (empty($object)) {",
          "198:             return;",
          "199:         }",
          "200:         $parameters       = (new ParameterLoader())->getParameterBag();",
          "201:         $mimeTypesAllowed = $parameters->get('allowed_mimetypes');",
          "202:         $extensions       = array_keys($mimeTypesAllowed);",
          "203:         $fileName         = $object;",
          "204:         if (!is_string($object) && $object instanceof Asset) {",
          "205:             $fileName = $object->getOriginalFileName();",
          "206:         }",
          "207:         $fileExtension    = pathinfo($fileName, PATHINFO_EXTENSION);",
          "208:         if (!in_array($fileExtension, $extensions, true)) {",
          "209:             $context->buildViolation('mautic.asset.asset.error.file.extension', [",
          "210:                 '%fileExtension%'=> $fileExtension,",
          "211:                 '%extensions%'   => implode(', ', $extensions),",
          "212:             ])",
          "213:                 ->atPath('file')",
          "214:                 ->setTranslationDomain('validators')",
          "215:                 ->addViolation();",
          "216:         }",
          "217:     }",
          "",
          "---------------"
        ],
        "app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php||app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php": [
          "File: app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php -> app/bundles/AssetBundle/Tests/Controller/AssetControllerFunctionalTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:         $this->em->persist($role);",
          "234:         $this->em->flush();",
          "235:     }",
          "236: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237:     public function testPostRequestWithWrongTempNameAndOriginalFileNameFileExtension(): void",
          "238:     {",
          "239:         $response = $this->client->request(",
          "240:             Request::METHOD_GET,",
          "241:             '/s/assets/new',",
          "242:         );",
          "243:         $this->assertResponseStatusCodeSame(Response::HTTP_OK);",
          "244:         $form                              = $response->filter('form[name=\"asset\"]')->form();",
          "245:         $data                              = $form->getPhpValues();",
          "246:         $data['asset']['tempName']         = 'image2.php';",
          "247:         $data['asset']['originalFileName'] = 'originalImage2.php';",
          "248:         $data['asset']['storageLocation']  = 'local';",
          "249:         $data['asset']['title']            = 'title';",
          "250:         $data['asset']['description']      = 'description';",
          "251:         $this->client->submit($form, $data);",
          "252:         preg_match_all('/Upload failed as the file extension, php/', $this->client->getResponse()->getContent(), $matches);",
          "253:         $this->assertCount(2, $matches[0]);",
          "254:         $this->assertStringContainsString('Upload failed as the file extension, php', $this->client->getResponse()->getContent());",
          "255:     }",
          "257:     public function testPostRequestWithWrongTempNameFileExtension(): void",
          "258:     {",
          "259:         $response = $this->client->request(",
          "260:             Request::METHOD_GET,",
          "261:             '/s/assets/new',",
          "262:         );",
          "263:         $this->assertResponseStatusCodeSame(Response::HTTP_OK);",
          "264:         $form                              = $response->filter('form[name=\"asset\"]')->form();",
          "265:         $data                              = $form->getPhpValues();",
          "266:         $data['asset']['tempName']         = 'image2.php';",
          "267:         $data['asset']['originalFileName'] = 'originalImage2.png';",
          "268:         $data['asset']['storageLocation']  = 'local';",
          "269:         $data['asset']['title']            = 'title';",
          "270:         $data['asset']['description']      = 'description';",
          "271:         $this->client->submit($form, $data);",
          "272:         preg_match_all('/Upload failed as the file extension, php/', $this->client->getResponse()->getContent(), $matches);",
          "273:         $this->assertCount(1, $matches[0]);",
          "274:         $this->assertStringContainsString('Upload failed as the file extension, php', $this->client->getResponse()->getContent());",
          "275:     }",
          "277:     public function testPostResquetSuccessWithCorrectFileExtension(): void",
          "278:     {",
          "279:         $response = $this->client->request(",
          "280:             Request::METHOD_GET,",
          "281:             '/s/assets/new',",
          "282:         );",
          "283:         $this->assertResponseStatusCodeSame(Response::HTTP_OK);",
          "284:         $form                              = $response->filter('form[name=\"asset\"]')->form();",
          "285:         $data                              = $form->getPhpValues();",
          "286:         $data['asset']['tempName']         = 'image.png';",
          "287:         $data['asset']['originalFileName'] = 'originalImage.png';",
          "288:         $data['asset']['storageLocation']  = 'local';",
          "289:         $data['asset']['title']            = 'title';",
          "290:         $data['asset']['description']      = 'description';",
          "291:         $this->client->submit($form, $data);",
          "292:         $this->assertResponseStatusCodeSame(Response::HTTP_OK);",
          "293:         $this->assertStringNotContainsString('Upload failed as the file extension, php', $this->client->getResponse()->getContent());",
          "294:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5453a51d2e5e3b7e168a0d60eedeee35af7dff27",
      "candidate_info": {
        "commit_hash": "5453a51d2e5e3b7e168a0d60eedeee35af7dff27",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/5453a51d2e5e3b7e168a0d60eedeee35af7dff27",
        "files": [
          "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
        ],
        "message": "Fix failing test",
        "before_after_code_files": [
          "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [
            "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
          ],
          "candidate": [
            "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
          ]
        }
      },
      "candidate_diff": {
        "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php": [
          "File: app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php -> app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:         $this->clientServer = [];",
          "70:         $this->setUpSymfony($this->configParams);",
          "72:         $this->client->setServerParameter('PHP_AUTH_USER', $user->getUserIdentifier());",
          "73:         $this->client->setServerParameter('PHP_AUTH_PW', $password);",
          "",
          "[Removed Lines]",
          "71:         $this->loginUser($user->getUserIdentifier());",
          "",
          "[Added Lines]",
          "71:         $this->loginUser($user);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:         $user->setLastName('Doe');",
          "109:         $user->setUsername('john.doe');",
          "110:         $user->setEmail('john.doe@email.com');",
          "112:         $user->setPassword($encoder->encodePassword($password, null));",
          "113:         $user->setRole($role);",
          "",
          "[Removed Lines]",
          "111:         $encoder = static::getContainer()->get('security.encoder_factory')->getEncoder($user);",
          "",
          "[Added Lines]",
          "111:         $encoder = static::getContainer()->get('security.password_hasher_factory')->getEncoder($user);",
          "",
          "---------------"
        ]
      }
    }
  ]
}