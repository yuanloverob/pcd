{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6c82939e602bd27b43f967d4ceeafdea2d4c3a4",
      "candidate_info": {
        "commit_hash": "d6c82939e602bd27b43f967d4ceeafdea2d4c3a4",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/d6c82939e602bd27b43f967d4ceeafdea2d4c3a4",
        "files": [
          "src/lib/apis/models/index.ts",
          "src/lib/components/admin/Settings/Audio.svelte",
          "src/lib/components/channel/MessageInput.svelte",
          "src/lib/components/chat/MessageInput.svelte",
          "src/lib/components/chat/Settings/Audio.svelte",
          "src/lib/components/workspace/Knowledge.svelte",
          "src/lib/components/workspace/Knowledge/CreateKnowledgeBase.svelte",
          "src/lib/components/workspace/Knowledge/KnowledgeBase.svelte",
          "src/lib/components/workspace/Models.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/apis/models/index.ts||src/lib/apis/models/index.ts",
          "src/lib/components/admin/Settings/Audio.svelte||src/lib/components/admin/Settings/Audio.svelte",
          "src/lib/components/channel/MessageInput.svelte||src/lib/components/channel/MessageInput.svelte",
          "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte",
          "src/lib/components/chat/Settings/Audio.svelte||src/lib/components/chat/Settings/Audio.svelte",
          "src/lib/components/workspace/Knowledge.svelte||src/lib/components/workspace/Knowledge.svelte",
          "src/lib/components/workspace/Knowledge/CreateKnowledgeBase.svelte||src/lib/components/workspace/Knowledge/CreateKnowledgeBase.svelte",
          "src/lib/components/workspace/Knowledge/KnowledgeBase.svelte||src/lib/components/workspace/Knowledge/KnowledgeBase.svelte",
          "src/lib/components/workspace/Models.svelte||src/lib/components/workspace/Models.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/apis/models/index.ts||src/lib/apis/models/index.ts": [
          "File: src/lib/apis/models/index.ts -> src/lib/apis/models/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:    return json;",
          "220:   })",
          "221:   .catch((err) => {",
          "224:    console.log(err);",
          "225:    return null;",
          "",
          "[Removed Lines]",
          "222:    error = err;",
          "",
          "[Added Lines]",
          "222:    error = err.detail;",
          "",
          "---------------"
        ],
        "src/lib/components/admin/Settings/Audio.svelte||src/lib/components/admin/Settings/Audio.svelte": [
          "File: src/lib/components/admin/Settings/Audio.svelte -> src/lib/components/admin/Settings/Audio.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:    models = [];",
          "52:   } else {",
          "53:    const res = await _getModels(localStorage.token).catch((e) => {",
          "55:    });",
          "57:    if (res) {",
          "",
          "[Removed Lines]",
          "54:     toast.error(e);",
          "",
          "[Added Lines]",
          "54:     toast.error(`${e}`);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:    }, 100);",
          "75:   } else {",
          "76:    const res = await _getVoices(localStorage.token).catch((e) => {",
          "78:    });",
          "80:    if (res) {",
          "",
          "[Removed Lines]",
          "77:     toast.error(e);",
          "",
          "[Added Lines]",
          "77:     toast.error(`${e}`);",
          "",
          "---------------"
        ],
        "src/lib/components/channel/MessageInput.svelte||src/lib/components/channel/MessageInput.svelte": [
          "File: src/lib/components/channel/MessageInput.svelte -> src/lib/components/channel/MessageInput.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:     files = files.filter((item) => item?.itemId !== tempItemId);",
          "201:    }",
          "202:   } catch (e) {",
          "204:    files = files.filter((item) => item?.itemId !== tempItemId);",
          "205:   }",
          "206:  };",
          "",
          "[Removed Lines]",
          "203:    toast.error(e);",
          "",
          "[Added Lines]",
          "203:    toast.error(`${e}`);",
          "",
          "---------------"
        ],
        "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte": [
          "File: src/lib/components/chat/MessageInput.svelte -> src/lib/components/chat/MessageInput.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:     files = files.filter((item) => item?.itemId !== tempItemId);",
          "212:    }",
          "213:   } catch (e) {",
          "215:    files = files.filter((item) => item?.itemId !== tempItemId);",
          "216:   }",
          "217:  };",
          "",
          "[Removed Lines]",
          "214:    toast.error(e);",
          "",
          "[Added Lines]",
          "214:    toast.error(`${e}`);",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Settings/Audio.svelte||src/lib/components/chat/Settings/Audio.svelte": [
          "File: src/lib/components/chat/Settings/Audio.svelte -> src/lib/components/chat/Settings/Audio.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:    }, 100);",
          "40:   } else {",
          "41:    const res = await _getVoices(localStorage.token).catch((e) => {",
          "43:    });",
          "45:    if (res) {",
          "",
          "[Removed Lines]",
          "42:     toast.error(e);",
          "",
          "[Added Lines]",
          "42:     toast.error(`${e}`);",
          "",
          "---------------"
        ],
        "src/lib/components/workspace/Knowledge.svelte||src/lib/components/workspace/Knowledge.svelte": [
          "File: src/lib/components/workspace/Knowledge.svelte -> src/lib/components/workspace/Knowledge.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:  const deleteHandler = async (item) => {",
          "56:   const res = await deleteKnowledgeById(localStorage.token, item.id).catch((e) => {",
          "58:   });",
          "60:   if (res) {",
          "",
          "[Removed Lines]",
          "57:    toast.error(e);",
          "",
          "[Added Lines]",
          "57:    toast.error(`${e}`);",
          "",
          "---------------"
        ],
        "src/lib/components/workspace/Knowledge/CreateKnowledgeBase.svelte||src/lib/components/workspace/Knowledge/CreateKnowledgeBase.svelte": [
          "File: src/lib/components/workspace/Knowledge/CreateKnowledgeBase.svelte -> src/lib/components/workspace/Knowledge/CreateKnowledgeBase.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:    description,",
          "32:    accessControl",
          "33:   ).catch((e) => {",
          "35:   });",
          "37:   if (res) {",
          "",
          "[Removed Lines]",
          "34:    toast.error(e);",
          "",
          "[Added Lines]",
          "34:    toast.error(`${e}`);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:   <div class=\"mt-2\">",
          "114:    <div class=\"px-3 py-2 bg-gray-50 dark:bg-gray-950 rounded-lg\">",
          "119:    </div>",
          "120:   </div>",
          "",
          "[Removed Lines]",
          "115:     <AccessControl",
          "116:     bind:accessControl",
          "117:     accessRoles={['read', 'write']}",
          "118:     />",
          "",
          "[Added Lines]",
          "115:     <AccessControl bind:accessControl accessRoles={['read', 'write']} />",
          "",
          "---------------"
        ],
        "src/lib/components/workspace/Knowledge/KnowledgeBase.svelte||src/lib/components/workspace/Knowledge/KnowledgeBase.svelte": [
          "File: src/lib/components/workspace/Knowledge/KnowledgeBase.svelte -> src/lib/components/workspace/Knowledge/KnowledgeBase.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:   try {",
          "151:    const uploadedFile = await uploadFile(localStorage.token, file).catch((e) => {",
          "153:     return null;",
          "154:    });",
          "",
          "[Removed Lines]",
          "152:     toast.error(e);",
          "",
          "[Added Lines]",
          "152:     toast.error(`${e}`);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169:     toast.error($i18n.t('Failed to upload file.'));",
          "170:    }",
          "171:   } catch (e) {",
          "173:   }",
          "174:  };",
          "",
          "[Removed Lines]",
          "172:    toast.error(e);",
          "",
          "[Added Lines]",
          "172:    toast.error(`${e}`);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "339:  const syncDirectoryHandler = async () => {",
          "340:   if ((knowledge?.files ?? []).length > 0) {",
          "341:    const res = await resetKnowledgeById(localStorage.token, id).catch((e) => {",
          "343:    });",
          "345:    if (res) {",
          "",
          "[Removed Lines]",
          "342:     toast.error(e);",
          "",
          "[Added Lines]",
          "342:     toast.error(`${e}`);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "357:  const addFileHandler = async (fileId) => {",
          "358:   const updatedKnowledge = await addFileToKnowledgeById(localStorage.token, id, fileId).catch(",
          "359:    (e) => {",
          "361:     return null;",
          "362:    }",
          "363:   );",
          "",
          "[Removed Lines]",
          "360:     toast.error(e);",
          "",
          "[Added Lines]",
          "360:     toast.error(`${e}`);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "386:    }",
          "387:   } catch (e) {",
          "388:    console.error('Error in deleteFileHandler:', e);",
          "390:   }",
          "391:  };",
          "",
          "[Removed Lines]",
          "389:    toast.error(e);",
          "",
          "[Added Lines]",
          "389:    toast.error(`${e}`);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "395:   const content = selectedFile.data.content;",
          "397:   const res = updateFileDataContentById(localStorage.token, fileId, content).catch((e) => {",
          "399:   });",
          "401:   const updatedKnowledge = await updateFileFromKnowledgeById(",
          "",
          "[Removed Lines]",
          "398:    toast.error(e);",
          "",
          "[Added Lines]",
          "398:    toast.error(`${e}`);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "403:    id,",
          "404:    fileId",
          "405:   ).catch((e) => {",
          "407:   });",
          "409:   if (res && updatedKnowledge) {",
          "",
          "[Removed Lines]",
          "406:    toast.error(e);",
          "",
          "[Added Lines]",
          "406:    toast.error(`${e}`);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "430:     description: knowledge.description,",
          "431:     access_control: knowledge.access_control",
          "432:    }).catch((e) => {",
          "434:    });",
          "436:    if (res) {",
          "",
          "[Removed Lines]",
          "433:     toast.error(e);",
          "",
          "[Added Lines]",
          "433:     toast.error(`${e}`);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "522:   id = $page.params.id;",
          "524:   const res = await getKnowledgeById(localStorage.token, id).catch((e) => {",
          "526:    return null;",
          "527:   });",
          "",
          "[Removed Lines]",
          "525:    toast.error(e);",
          "",
          "[Added Lines]",
          "525:    toast.error(`${e}`);",
          "",
          "---------------"
        ],
        "src/lib/components/workspace/Models.svelte||src/lib/components/workspace/Models.svelte": [
          "File: src/lib/components/workspace/Models.svelte -> src/lib/components/workspace/Models.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  const deleteModelHandler = async (model) => {",
          "62:   const res = await deleteModelById(localStorage.token, model.id).catch((e) => {",
          "64:    return null;",
          "65:   });",
          "",
          "[Removed Lines]",
          "63:    toast.error(e);",
          "",
          "[Added Lines]",
          "63:    toast.error(`${e}`);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b7f9d14d0290cd897d1791c35aa7f6a7054a60f",
      "candidate_info": {
        "commit_hash": "2b7f9d14d0290cd897d1791c35aa7f6a7054a60f",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/2b7f9d14d0290cd897d1791c35aa7f6a7054a60f",
        "files": [
          "backend/open_webui/utils/chat.py",
          "src/routes/+layout.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/chat.py||backend/open_webui/utils/chat.py",
          "src/routes/+layout.svelte||src/routes/+layout.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/chat.py||backend/open_webui/utils/chat.py": [
          "File: backend/open_webui/utils/chat.py -> backend/open_webui/utils/chat.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import uuid",
          "11: import asyncio",
          "17: from open_webui.models.users import UserModel",
          "",
          "[Removed Lines]",
          "13: from fastapi import Request",
          "14: from starlette.responses import Response, StreamingResponse",
          "",
          "[Added Lines]",
          "13: from fastapi import Request, status",
          "14: from starlette.responses import Response, StreamingResponse, JSONResponse",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     if form_data.get(\"stream\"):",
          "83:         q = asyncio.Queue()",
          "129:     else:",
          "130:         res = await event_caller(",
          "131:             {",
          "",
          "[Removed Lines]",
          "85:         # Define a generator to stream responses",
          "86:         async def event_generator():",
          "87:             nonlocal q",
          "89:             async def message_listener(sid, data):",
          "90:                 \"\"\"",
          "91:                 Handle received socket messages and push them into the queue.",
          "92:                 \"\"\"",
          "93:                 await q.put(data)",
          "95:             # Register the listener",
          "96:             sio.on(channel, message_listener)",
          "98:             # Start processing chat completion in background",
          "99:             await event_emitter(",
          "100:                 {",
          "101:                     \"type\": \"request:chat:completion\",",
          "102:                     \"data\": {",
          "103:                         \"form_data\": form_data,",
          "104:                         \"model\": models[form_data[\"model\"]],",
          "105:                         \"channel\": channel,",
          "106:                         \"session_id\": session_id,",
          "107:                     },",
          "108:                 }",
          "109:             )",
          "111:             try:",
          "112:                 while True:",
          "113:                     data = await q.get()  # Wait for new messages",
          "114:                     if isinstance(data, dict):",
          "115:                         if \"error\" in data:",
          "116:                             raise Exception(data[\"error\"])",
          "118:                         if \"done\" in data and data[\"done\"]:",
          "119:                             break  # Stop streaming when 'done' is received",
          "121:                         yield f\"data: {json.dumps(data)}\\n\\n\"",
          "122:                     elif isinstance(data, str):",
          "123:                         yield data",
          "124:             finally:",
          "125:                 del sio.handlers[\"/\"][channel]  # Remove the listener",
          "127:         # Return the streaming response",
          "128:         return StreamingResponse(event_generator(), media_type=\"text/event-stream\")",
          "",
          "[Added Lines]",
          "85:         async def message_listener(sid, data):",
          "86:             \"\"\"",
          "87:             Handle received socket messages and push them into the queue.",
          "88:             \"\"\"",
          "89:             await q.put(data)",
          "91:         # Register the listener",
          "92:         sio.on(channel, message_listener)",
          "94:         # Start processing chat completion in background",
          "95:         res = await event_caller(",
          "96:             {",
          "97:                 \"type\": \"request:chat:completion\",",
          "98:                 \"data\": {",
          "99:                     \"form_data\": form_data,",
          "100:                     \"model\": models[form_data[\"model\"]],",
          "101:                     \"channel\": channel,",
          "102:                     \"session_id\": session_id,",
          "103:                 },",
          "104:             }",
          "105:         )",
          "107:         print(\"res\", res)",
          "109:         if res.get(\"status\", False):",
          "110:             # Define a generator to stream responses",
          "111:             async def event_generator():",
          "112:                 nonlocal q",
          "113:                 try:",
          "114:                     while True:",
          "115:                         data = await q.get()  # Wait for new messages",
          "116:                         if isinstance(data, dict):",
          "117:                             if \"done\" in data and data[\"done\"]:",
          "118:                                 break  # Stop streaming when 'done' is received",
          "120:                             yield f\"data: {json.dumps(data)}\\n\\n\"",
          "121:                         elif isinstance(data, str):",
          "122:                             yield data",
          "123:                 except Exception as e:",
          "124:                     log.debug(f\"Error in event generator: {e}\")",
          "125:                     pass",
          "127:             # Define a background task to run the event generator",
          "128:             async def background():",
          "129:                 try:",
          "130:                     del sio.handlers[\"/\"][channel]",
          "131:                 except Exception as e:",
          "132:                     pass",
          "134:             # Return the streaming response",
          "135:             return StreamingResponse(",
          "136:                 event_generator(), media_type=\"text/event-stream\", background=background",
          "137:             )",
          "138:         else:",
          "139:             raise Exception(str(res))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "139:             }",
          "140:         )",
          "144:         if \"error\" in res:",
          "145:             raise Exception(res[\"error\"])",
          "",
          "[Removed Lines]",
          "142:         print(res)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/routes/+layout.svelte||src/routes/+layout.svelte": [
          "File: src/routes/+layout.svelte -> src/routes/+layout.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:         OPENAI_API_URL",
          "280:        );",
          "283:         if (form_data?.stream ?? false) {",
          "285:          const reader = res.body.getReader();",
          "286:          const decoder = new TextDecoder();",
          "",
          "[Removed Lines]",
          "282:        if (res && res.ok) {",
          "",
          "[Added Lines]",
          "282:        if (res) {",
          "284:         if (!res.ok) {",
          "285:          throw await res.json();",
          "286:         }",
          "289:          cb({",
          "290:           status: true",
          "291:          });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:        }",
          "317:       } catch (error) {",
          "318:        console.error('chatCompletion', error);",
          "329:       }",
          "330:      }",
          "331:     } catch (error) {",
          "332:      console.error('chatCompletion', error);",
          "342:     } finally {",
          "343:      $socket.emit(channel, {",
          "344:       done: true",
          "",
          "[Removed Lines]",
          "320:        if (form_data?.stream ?? false) {",
          "321:         $socket.emit(channel, {",
          "322:          error: error",
          "323:         });",
          "324:        } else {",
          "325:         cb({",
          "326:          error: error",
          "327:         });",
          "328:        }",
          "333:      if (form_data?.stream ?? false) {",
          "334:       $socket.emit(channel, {",
          "335:        error: error",
          "336:       });",
          "337:      } else {",
          "338:       cb({",
          "339:        error: error",
          "340:       });",
          "341:      }",
          "",
          "[Added Lines]",
          "328:        cb(error);",
          "333:      cb(error);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "153413dc54d1d7401454d7c9ac0ea63a34d0e36f",
      "candidate_info": {
        "commit_hash": "153413dc54d1d7401454d7c9ac0ea63a34d0e36f",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/153413dc54d1d7401454d7c9ac0ea63a34d0e36f",
        "files": [
          "src/lib/components/admin/Settings/Connections.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/admin/Settings/Connections.svelte||src/lib/components/admin/Settings/Connections.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Settings/Connections.svelte||src/lib/components/admin/Settings/Connections.svelte": [
          "File: src/lib/components/admin/Settings/Connections.svelte -> src/lib/components/admin/Settings/Connections.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   }",
          "102:  };",
          "104:  const addOpenAIConnectionHandler = async (connection) => {",
          "105:   OPENAI_API_BASE_URLS = [...OPENAI_API_BASE_URLS, connection.url];",
          "106:   OPENAI_API_KEYS = [...OPENAI_API_KEYS, connection.key];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:  const updateDirectAPIHandler = async () => {",
          "105:   const res = await setDirectApiConfig(localStorage.token, directApiConfig).catch((error) => {",
          "106:    toast.error(`${error}`);",
          "107:   });",
          "109:   if (res) {",
          "110:    toast.success($i18n.t('Direct API settings updated'));",
          "111:    await models.set(await getModels());",
          "112:   }",
          "113:  };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:  const submitHandler = async () => {",
          "181:   updateOpenAIHandler();",
          "182:   updateOllamaHandler();",
          "186:   dispatch('save');",
          "187:  };",
          "",
          "[Removed Lines]",
          "184:   setDirectApiConfig(localStorage.token, directApiConfig);",
          "",
          "[Added Lines]",
          "194:   updateDirectAPIHandler();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "353:        <Switch",
          "354:         bind:state={directApiConfig.ENABLE_DIRECT_API}",
          "355:         on:change={async () => {",
          "357:         }}",
          "358:        />",
          "359:       </div>",
          "",
          "[Removed Lines]",
          "356:          updateOpenAIHandler();",
          "",
          "[Added Lines]",
          "366:          updateDirectAPIHandler();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3ca39f377ded8acd8e76c80801535dacd97ec78",
      "candidate_info": {
        "commit_hash": "a3ca39f377ded8acd8e76c80801535dacd97ec78",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/a3ca39f377ded8acd8e76c80801535dacd97ec78",
        "files": [
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1151:   if (done) {",
          "1152:    message.done = true;",
          "1161:    if ($settings.responseAutoCopy) {",
          "1162:     copyToClipboard(message.content);",
          "1163:    }",
          "",
          "[Removed Lines]",
          "1154:    if ($settings.notificationEnabled && !document.hasFocus()) {",
          "1155:     new Notification(`${message.model}`, {",
          "1156:      body: message.content,",
          "1157:      icon: `${WEBUI_BASE_URL}/static/favicon.png`",
          "1158:     });",
          "1159:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f5aba8be76a5c567d238dc210256171fadc29cf",
      "candidate_info": {
        "commit_hash": "4f5aba8be76a5c567d238dc210256171fadc29cf",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/4f5aba8be76a5c567d238dc210256171fadc29cf",
        "files": [
          "src/lib/components/layout/Navbar/Menu.svelte",
          "src/lib/components/layout/Sidebar/ChatMenu.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/layout/Navbar/Menu.svelte||src/lib/components/layout/Navbar/Menu.svelte",
          "src/lib/components/layout/Sidebar/ChatMenu.svelte||src/lib/components/layout/Sidebar/ChatMenu.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/layout/Navbar/Menu.svelte||src/lib/components/layout/Navbar/Menu.svelte": [
          "File: src/lib/components/layout/Navbar/Menu.svelte -> src/lib/components/layout/Navbar/Menu.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:      heightLeft -= pageHeight;",
          "97:     }",
          "100:    } catch (error) {",
          "101:     console.error('Error generating PDF', error);",
          "102:    }",
          "",
          "[Removed Lines]",
          "99:     pdf.save('document.pdf');",
          "",
          "[Added Lines]",
          "99:     pdf.save(`chat-${chat.chat.title}.pdf`);",
          "",
          "---------------"
        ],
        "src/lib/components/layout/Sidebar/ChatMenu.svelte||src/lib/components/layout/Sidebar/ChatMenu.svelte": [
          "File: src/lib/components/layout/Sidebar/ChatMenu.svelte -> src/lib/components/layout/Sidebar/ChatMenu.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  };",
          "81:  const downloadPdf = async () => {",
          "82:   const containerElement = document.getElementById('messages-container');",
          "84:   if (containerElement) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:   const chat = await getChatById(localStorage.token, chatId);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:      heightLeft -= pageHeight;",
          "114:     }",
          "117:    } catch (error) {",
          "118:     console.error('Error generating PDF', error);",
          "119:    }",
          "",
          "[Removed Lines]",
          "116:     pdf.save('document.pdf');",
          "",
          "[Added Lines]",
          "117:     pdf.save(`chat-${chat.chat.title}.pdf`);",
          "",
          "---------------"
        ]
      }
    }
  ]
}