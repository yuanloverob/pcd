{
  "cve_id": "CVE-2024-10846",
  "cve_desc": "The compose-go library component in versions v2.10-v2.4.0 allows an authorized user who sends malicious YAML payloads to cause the compose-go to consume excessive amount of Memory and CPU cycles while parsing YAML, such as used by Docker Compose from versions  v2.27.0 to v2.29.7 included",
  "repo": "docker/compose",
  "patch_hash": "d239f0f3187a2ed5404c61f83bd5e995c81600ff",
  "patch_info": {
    "commit_hash": "d239f0f3187a2ed5404c61f83bd5e995c81600ff",
    "repo": "docker/compose",
    "commit_url": "https://github.com/docker/compose/commit/d239f0f3187a2ed5404c61f83bd5e995c81600ff#diff-33ef32bf6c23acb95f5902d7097b7a1d5128ca061167ec0716715b0b9eeaa5f6R10",
    "files": [
      "cmd/compose/config.go",
      "go.mod",
      "go.sum",
      "pkg/compose/create.go",
      "pkg/e2e/container_name_test.go",
      "pkg/e2e/fixtures/container_name/compose.yaml"
    ],
    "message": "check container_name is not in use by another service we will create\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
    "before_after_code_files": [
      "cmd/compose/config.go||cmd/compose/config.go",
      "go.mod||go.mod",
      "go.sum||go.sum",
      "pkg/compose/create.go||pkg/compose/create.go",
      "pkg/e2e/container_name_test.go||pkg/e2e/container_name_test.go"
    ]
  },
  "patch_diff": {
    "cmd/compose/config.go||cmd/compose/config.go": [
      "File: cmd/compose/config.go -> cmd/compose/config.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "169:    return err",
      "170:   }",
      "172:   switch opts.Format {",
      "173:   case \"json\":",
      "174:    content, err = project.MarshalJSON()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:   if !opts.noConsistency {",
      "173:    err := project.CheckContainerNameUnicity()",
      "174:    if err != nil {",
      "175:     return err",
      "176:    }",
      "177:   }",
      "",
      "---------------"
    ],
    "go.mod||go.mod": [
      "File: go.mod -> go.mod",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:  github.com/Microsoft/go-winio v0.6.1",
      "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
      "9:  github.com/buger/goterm v1.0.4",
      "11:  github.com/containerd/console v1.0.4",
      "12:  github.com/containerd/containerd v1.7.13",
      "13:  github.com/davecgh/go-spew v1.1.1",
      "",
      "[Removed Lines]",
      "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39",
      "",
      "[Added Lines]",
      "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4",
      "",
      "---------------"
    ],
    "go.sum||go.sum": [
      "File: go.sum -> go.sum",
      "--- Hunk 1 ---",
      "[Context before]",
      "90: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
      "91: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
      "92: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
      "95: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
      "96: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
      "97: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
      "",
      "[Removed Lines]",
      "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39 h1:ZUpnv0xA75X9gy9Y7hjJm51nflGbr+2URaLXBtEic7A=",
      "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
      "",
      "[Added Lines]",
      "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4 h1:WYiZ9D0WBykHUJLlpt+w7NXX0hy+cQKKdVe7vmsNZvg=",
      "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
      "",
      "---------------"
    ],
    "pkg/compose/create.go||pkg/compose/create.go": [
      "File: pkg/compose/create.go -> pkg/compose/create.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:   options.Services = project.ServiceNames()",
      "78:  }",
      "80:  var observedState Containers",
      "82:  if err != nil {",
      "83:   return err",
      "84:  }",
      "",
      "[Removed Lines]",
      "81:  observedState, err := s.getContainers(ctx, project.Name, oneOffInclude, true)",
      "",
      "[Added Lines]",
      "80:  err := project.CheckContainerNameUnicity()",
      "81:  if err != nil {",
      "82:   return err",
      "83:  }",
      "86:  observedState, err = s.getContainers(ctx, project.Name, oneOffInclude, true)",
      "",
      "---------------"
    ],
    "pkg/e2e/container_name_test.go||pkg/e2e/container_name_test.go": [
      "File: pkg/e2e/container_name_test.go -> pkg/e2e/container_name_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:    Copyright 2022 Docker Compose CLI authors",
      "7:    Licensed under the Apache License, Version 2.0 (the \"License\");",
      "8:    you may not use this file except in compliance with the License.",
      "9:    You may obtain a copy of the License at",
      "11:        http://www.apache.org/licenses/LICENSE-2.0",
      "13:    Unless required by applicable law or agreed to in writing, software",
      "14:    distributed under the License is distributed on an \"AS IS\" BASIS,",
      "15:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "16:    See the License for the specific language governing permissions and",
      "17:    limitations under the License.",
      "20: package e2e",
      "22: import (",
      "23:  \"testing\"",
      "25:  \"gotest.tools/v3/icmd\"",
      "26: )",
      "28: func TestUpContainerNameConflict(t *testing.T) {",
      "29:  c := NewParallelCLI(t)",
      "30:  const projectName = \"e2e-container_name_conflict\"",
      "32:  t.Cleanup(func() {",
      "33:   c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "34:  })",
      "36:  res := c.RunDockerComposeCmdNoCheck(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\")",
      "37:  res.Assert(t, icmd.Expected{ExitCode: 1, Err: `container name \"test\" is already in use`})",
      "39:  c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "40:  c.RunDockerComposeCmd(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\", \"test\")",
      "42:  c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "43:  c.RunDockerComposeCmd(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\", \"another_test\")",
      "44: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "71bebc16eefe66fd518ab4b620287482fdd0cfa1",
      "candidate_info": {
        "commit_hash": "71bebc16eefe66fd518ab4b620287482fdd0cfa1",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/71bebc16eefe66fd518ab4b620287482fdd0cfa1",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "bump compose-go to v2.0.0-rc.3 which fixes multiple compose files merge issues\n\nSigned-off-by: Guillaume Lours <705411+glours@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.12",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-rc.2",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-rc.3",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "88: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "91: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "92: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "93: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-rc.2 h1:eJ01FpliL/02KvsaPyH1bSLbM1S70yWQUojHVRbyvy4=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-rc.2/go.mod h1:IVsvFyGVhw4FASzUtlWNVaAOhYmakXAFY9IlZ7LAuD8=",
          "",
          "[Added Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-rc.3 h1:t0qajSNkH3zR4HEN2CM+GVU7GBx5AwqiYJk5w800M7w=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-rc.3/go.mod h1:r7CJHU0GaLtRVLm2ch8RCNkJh3GHyaqqc2rSti7VP44=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c21d4cfb40bf413711c21e3c5f03930e189004a9",
      "candidate_info": {
        "commit_hash": "c21d4cfb40bf413711c21e3c5f03930e189004a9",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/c21d4cfb40bf413711c21e3c5f03930e189004a9",
        "files": [
          "go.mod",
          "go.sum",
          "pkg/compose/convergence.go",
          "pkg/compose/create.go",
          "pkg/compose/create_test.go",
          "pkg/compose/hash.go",
          "pkg/compose/remove.go",
          "pkg/compose/run.go",
          "pkg/e2e/fixtures/network-test/compose.subnet.yaml",
          "pkg/e2e/networks_test.go"
        ],
        "message": "detect network config changes and recreate if needed\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/convergence.go||pkg/compose/convergence.go",
          "pkg/compose/create.go||pkg/compose/create.go",
          "pkg/compose/create_test.go||pkg/compose/create_test.go",
          "pkg/compose/hash.go||pkg/compose/hash.go",
          "pkg/compose/remove.go||pkg/compose/remove.go",
          "pkg/compose/run.go||pkg/compose/run.go",
          "pkg/e2e/networks_test.go||pkg/e2e/networks_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  github.com/Microsoft/go-winio v0.6.2",
          "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
          "9:  github.com/buger/goterm v1.0.4",
          "11:  github.com/containerd/containerd v1.7.23",
          "12:  github.com/containerd/platforms v0.2.1",
          "13:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.4.4",
          "",
          "[Added Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.4.5-0.20241111154218-9d02caaf8465",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: github.com/cncf/xds/go v0.0.0-20240723142845-024c85f92f20/go.mod h1:W+zGtBO5Y1IgJhy4+A9GOqVhqLpfZi+vwmdNXUehLA8=",
          "86: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "90: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "91: github.com/containerd/cgroups/v3 v3.0.2 h1:f5WFqIVSgo5IZmtTT3qVBo6TzI1ON6sycSBKkymb9L0=",
          "92: github.com/containerd/cgroups/v3 v3.0.2/go.mod h1:JUgITrzdFqp42uI2ryGA+ge0ap/nxzYgkGmIcetmErE=",
          "",
          "[Removed Lines]",
          "88: github.com/compose-spec/compose-go/v2 v2.4.4 h1:cvHBl5Jf1iNBmRrZCICmHvaoskYc1etTPEMLKVwokAY=",
          "89: github.com/compose-spec/compose-go/v2 v2.4.4/go.mod h1:lFN0DrMxIncJGYAXTfWuajfwj5haBJqrBkarHcnjJKc=",
          "",
          "[Added Lines]",
          "88: github.com/compose-spec/compose-go/v2 v2.4.5-0.20241111154218-9d02caaf8465 h1:1PRX/3a/n4W2DrMJu4CV9OS8Z2eauOBLe0zOuSlrWDY=",
          "89: github.com/compose-spec/compose-go/v2 v2.4.5-0.20241111154218-9d02caaf8465/go.mod h1:lFN0DrMxIncJGYAXTfWuajfwj5haBJqrBkarHcnjJKc=",
          "",
          "---------------"
        ],
        "pkg/compose/convergence.go||pkg/compose/convergence.go": [
          "File: pkg/compose/convergence.go -> pkg/compose/convergence.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: type convergence struct {",
          "63: }",
          "65: func (c *convergence) getObservedState(serviceName string) Containers {",
          "66:  c.stateMutex.Lock()",
          "67:  defer c.stateMutex.Unlock()",
          "69: }",
          "71: func (c *convergence) setObservedState(serviceName string, containers Containers) {",
          "72:  c.stateMutex.Lock()",
          "73:  defer c.stateMutex.Unlock()",
          "75: }",
          "78:  observedState := map[string]Containers{}",
          "79:  for _, s := range services {",
          "80:   observedState[s] = Containers{}",
          "",
          "[Removed Lines]",
          "60:  service       *composeService",
          "61:  observedState map[string]Containers",
          "62:  stateMutex    sync.Mutex",
          "68:  return c.observedState[serviceName]",
          "74:  c.observedState[serviceName] = containers",
          "77: func newConvergence(services []string, state Containers, s *composeService) *convergence {",
          "",
          "[Added Lines]",
          "60:  service    *composeService",
          "61:  services   map[string]Containers",
          "62:  networks   map[string]string",
          "63:  stateMutex sync.Mutex",
          "69:  return c.services[serviceName]",
          "75:  c.services[serviceName] = containers",
          "78: func newConvergence(services []string, state Containers, networks map[string]string, s *composeService) *convergence {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   observedState[service] = append(observedState[service], c)",
          "85:  }",
          "86:  return &convergence{",
          "89:  }",
          "90: }",
          "",
          "[Removed Lines]",
          "87:   service:       s,",
          "88:   observedState: observedState,",
          "",
          "[Added Lines]",
          "88:   service:  s,",
          "89:   services: observedState,",
          "90:   networks: networks,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:  sort.Slice(containers, func(i, j int) bool {",
          "129:    return true",
          "130:   }",
          "133:    return false",
          "134:   }",
          "",
          "[Removed Lines]",
          "127:   if obsolete, _ := mustRecreate(service, containers[i], recreate); obsolete {",
          "131:   if obsolete, _ := mustRecreate(service, containers[j], recreate); obsolete {",
          "",
          "[Added Lines]",
          "129:   if obsolete, _ := c.mustRecreate(service, containers[i], recreate); obsolete {",
          "133:   if obsolete, _ := c.mustRecreate(service, containers[j], recreate); obsolete {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:    continue",
          "158:   }",
          "161:   if err != nil {",
          "162:    return err",
          "163:   }",
          "",
          "[Removed Lines]",
          "160:   mustRecreate, err := mustRecreate(service, container, recreate)",
          "",
          "[Added Lines]",
          "162:   mustRecreate, err := c.mustRecreate(service, container, recreate)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "315:  return nil",
          "316: }",
          "319:  if policy == api.RecreateNever {",
          "320:   return false, nil",
          "321:  }",
          "",
          "[Removed Lines]",
          "318: func mustRecreate(expected types.ServiceConfig, actual moby.Container, policy string) (bool, error) {",
          "",
          "[Added Lines]",
          "320: func (c *convergence) mustRecreate(expected types.ServiceConfig, actual moby.Container, policy string) (bool, error) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "328:  }",
          "329:  configChanged := actual.Labels[api.ConfigHashLabel] != configHash",
          "330:  imageUpdated := actual.Labels[api.ImageDigestLabel] != expected.CustomLabels[api.ImageDigestLabel]",
          "332: }",
          "334: func getContainerName(projectName string, service types.ServiceConfig, number int) string {",
          "",
          "[Removed Lines]",
          "331:  return configChanged || imageUpdated, nil",
          "",
          "[Added Lines]",
          "333:  if configChanged || imageUpdated {",
          "334:   return true, nil",
          "335:  }",
          "337:  if c.networks != nil {",
          "339:   for net := range expected.Networks {",
          "340:    id := c.networks[net]",
          "341:    if id == \"swarm\" {",
          "343:     continue",
          "344:    }",
          "345:    found := false",
          "346:    for _, settings := range actual.NetworkSettings.Networks {",
          "347:     if settings.NetworkID == id {",
          "348:      found = true",
          "349:      break",
          "350:     }",
          "351:    }",
          "352:    if !found {",
          "354:     return true, nil",
          "355:    }",
          "356:   }",
          "357:  }",
          "359:  return false, nil",
          "",
          "---------------"
        ],
        "pkg/compose/create.go||pkg/compose/create.go": [
          "File: pkg/compose/create.go -> pkg/compose/create.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:   return err",
          "81:  }",
          "89:  err = s.ensureImagesExists(ctx, project, options.Build, options.QuietPull)",
          "90:  if err != nil {",
          "91:   return err",
          "",
          "[Removed Lines]",
          "83:  var observedState Containers",
          "84:  observedState, err = s.getContainers(ctx, project.Name, oneOffInclude, true)",
          "85:  if err != nil {",
          "86:   return err",
          "87:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:  prepareNetworks(project)",
          "97:   return err",
          "98:  }",
          "",
          "[Removed Lines]",
          "96:  if err := s.ensureNetworks(ctx, project.Networks); err != nil {",
          "",
          "[Added Lines]",
          "90:  networks, err := s.ensureNetworks(ctx, project)",
          "91:  if err != nil {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:   return err",
          "102:  }",
          "104:  orphans := observedState.filter(isOrphaned(project))",
          "105:  if len(orphans) > 0 && !options.IgnoreOrphans {",
          "106:   if options.RemoveOrphans {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:  var observedState Containers",
          "100:  observedState, err = s.getContainers(ctx, project.Name, oneOffInclude, true)",
          "101:  if err != nil {",
          "102:   return err",
          "103:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:     \"--remove-orphans flag to clean it up.\", orphans.names())",
          "116:   }",
          "117:  }",
          "119: }",
          "121: func prepareNetworks(project *types.Project) {",
          "122:  for k, nw := range project.Networks {",
          "126:   project.Networks[k] = nw",
          "127:  }",
          "128: }",
          "133:   if err != nil {",
          "135:   }",
          "137:  }",
          "139: }",
          "141: func (s *composeService) ensureProjectVolumes(ctx context.Context, project *types.Project) error {",
          "",
          "[Removed Lines]",
          "118:  return newConvergence(options.Services, observedState, s).apply(ctx, project, options)",
          "123:   nw.Labels = nw.Labels.Add(api.NetworkLabel, k)",
          "124:   nw.Labels = nw.Labels.Add(api.ProjectLabel, project.Name)",
          "125:   nw.Labels = nw.Labels.Add(api.VersionLabel, api.ComposeVersion)",
          "130: func (s *composeService) ensureNetworks(ctx context.Context, networks types.Networks) error {",
          "131:  for i, nw := range networks {",
          "132:   err := s.ensureNetwork(ctx, &nw)",
          "134:    return err",
          "136:   networks[i] = nw",
          "138:  return nil",
          "",
          "[Added Lines]",
          "118:  return newConvergence(options.Services, observedState, networks, s).apply(ctx, project, options)",
          "123:   nw.CustomLabels = nw.CustomLabels.",
          "124:    Add(api.NetworkLabel, k).",
          "125:    Add(api.ProjectLabel, project.Name).",
          "126:    Add(api.VersionLabel, api.ComposeVersion)",
          "131: func (s *composeService) ensureNetworks(ctx context.Context, project *types.Project) (map[string]string, error) {",
          "132:  networks := map[string]string{}",
          "133:  for name, nw := range project.Networks {",
          "134:   id, err := s.ensureNetwork(ctx, project, name, &nw)",
          "136:    return nil, err",
          "138:   networks[name] = id",
          "139:   project.Networks[name] = nw",
          "141:  return networks, nil",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1200:  }",
          "1201: }",
          "1204:  if n.External {",
          "1205:   return s.resolveExternalNetwork(ctx, n)",
          "1206:  }",
          "1209:  if errdefs.IsConflict(err) {",
          "1213:  }",
          "1215: }",
          "1222:  inspect, err := s.apiClient().NetworkInspect(ctx, n.Name, network.InspectOptions{})",
          "1223:  if err == nil {",
          "",
          "[Removed Lines]",
          "1203: func (s *composeService) ensureNetwork(ctx context.Context, n *types.NetworkConfig) error {",
          "1208:  err := s.resolveOrCreateNetwork(ctx, n)",
          "1212:   return s.resolveOrCreateNetwork(ctx, n)",
          "1214:  return err",
          "1217: func (s *composeService) resolveOrCreateNetwork(ctx context.Context, n *types.NetworkConfig) error { //nolint:gocyclo",
          "1218:  expectedNetworkLabel := n.Labels[api.NetworkLabel]",
          "1219:  expectedProjectLabel := n.Labels[api.ProjectLabel]",
          "",
          "[Added Lines]",
          "1206: func (s *composeService) ensureNetwork(ctx context.Context, project *types.Project, name string, n *types.NetworkConfig) (string, error) {",
          "1211:  id, err := s.resolveOrCreateNetwork(ctx, project, name, n)",
          "1215:   return s.resolveOrCreateNetwork(ctx, project, \"\", n)",
          "1217:  return id, err",
          "1220: func (s *composeService) resolveOrCreateNetwork(ctx context.Context, project *types.Project, name string, n *types.NetworkConfig) (string, error) { //nolint:gocyclo",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1228:    if !ok {",
          "1229:     logrus.Warnf(\"a network with name %s exists but was not created by compose.\\n\"+",
          "1230:      \"Set `external: true` to use an existing network\", n.Name)",
          "1232:     logrus.Warnf(\"a network with name %s exists but was not created for project %q.\\n\"+",
          "1234:    }",
          "1237:      \"network %s was found but has incorrect label %s set to %q (expected: %q)\",",
          "1238:      n.Name,",
          "1239:      api.NetworkLabel,",
          "1240:      inspect.Labels[api.NetworkLabel],",
          "1242:     )",
          "1243:    }",
          "1245:   }",
          "1246:  }",
          "",
          "[Removed Lines]",
          "1231:    } else if p != expectedProjectLabel {",
          "1233:      \"Set `external: true` to use an existing network\", n.Name, expectedProjectLabel)",
          "1235:    if inspect.Labels[api.NetworkLabel] != expectedNetworkLabel {",
          "1236:     return fmt.Errorf(",
          "1241:      expectedNetworkLabel,",
          "1244:    return nil",
          "",
          "[Added Lines]",
          "1231:    } else if p != project.Name {",
          "1233:      \"Set `external: true` to use an existing network\", n.Name, project.Name)",
          "1235:    if inspect.Labels[api.NetworkLabel] != name {",
          "1236:     return \"\", fmt.Errorf(",
          "1241:      name,",
          "1245:    hash := inspect.Labels[api.ConfigHashLabel]",
          "1246:    expected, err := NetworkHash(n)",
          "1247:    if err != nil {",
          "1248:     return \"\", err",
          "1249:    }",
          "1250:    if hash == \"\" || hash == expected {",
          "1251:     return inspect.ID, nil",
          "1252:    }",
          "1254:    err = s.removeDivergedNetwork(ctx, project, name, n)",
          "1255:    if err != nil {",
          "1256:     return \"\", err",
          "1257:    }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1251:   Filters: filters.NewArgs(filters.Arg(\"name\", n.Name)),",
          "1252:  })",
          "1253:  if err != nil {",
          "1255:  }",
          "",
          "[Removed Lines]",
          "1254:   return err",
          "",
          "[Added Lines]",
          "1267:   return \"\", err",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1260:  })",
          "1262:  for _, net := range networks {",
          "1266:   }",
          "1267:  }",
          "",
          "[Removed Lines]",
          "1263:   if net.Labels[api.ProjectLabel] == expectedProjectLabel &&",
          "1264:    net.Labels[api.NetworkLabel] == expectedNetworkLabel {",
          "1265:    return nil",
          "",
          "[Added Lines]",
          "1276:   if net.Labels[api.ProjectLabel] == project.Name &&",
          "1277:    net.Labels[api.NetworkLabel] == name {",
          "1278:    return net.ID, nil",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1272:  if len(networks) > 0 {",
          "1273:   logrus.Warnf(\"a network with name %s exists but was not created by compose.\\n\"+",
          "1274:    \"Set `external: true` to use an existing network\", n.Name)",
          "1276:  }",
          "1278:  var ipam *network.IPAM",
          "",
          "[Removed Lines]",
          "1275:   return nil",
          "",
          "[Added Lines]",
          "1288:   return networks[0].ID, nil",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1291:    Config: config,",
          "1292:   }",
          "1293:  }",
          "1294:  createOpts := network.CreateOptions{",
          "1296:   Driver:     n.Driver,",
          "1297:   Options:    n.DriverOpts,",
          "1298:   Internal:   n.Internal,",
          "",
          "[Removed Lines]",
          "1295:   Labels:     n.Labels,",
          "",
          "[Added Lines]",
          "1307:  hash, err := NetworkHash(n)",
          "1308:  if err != nil {",
          "1309:   return \"\", err",
          "1310:  }",
          "1311:  n.CustomLabels = n.CustomLabels.Add(api.ConfigHashLabel, hash)",
          "1313:   Labels:     mergeLabels(n.Labels, n.CustomLabels),",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1322:  w := progress.ContextWriter(ctx)",
          "1323:  w.Event(progress.CreatingEvent(networkEventName))",
          "1326:  if err != nil {",
          "1327:   w.Event(progress.ErrorEvent(networkEventName))",
          "1329:  }",
          "1330:  w.Event(progress.CreatedEvent(networkEventName))",
          "1332: }",
          "",
          "[Removed Lines]",
          "1325:  _, err = s.apiClient().NetworkCreate(ctx, n.Name, createOpts)",
          "1328:   return fmt.Errorf(\"failed to create network %s: %w\", n.Name, err)",
          "1331:  return nil",
          "1334: func (s *composeService) resolveExternalNetwork(ctx context.Context, n *types.NetworkConfig) error {",
          "",
          "[Added Lines]",
          "1343:  resp, err := s.apiClient().NetworkCreate(ctx, n.Name, createOpts)",
          "1346:   return \"\", fmt.Errorf(\"failed to create network %s: %w\", n.Name, err)",
          "1349:  return resp.ID, nil",
          "1350: }",
          "1352: func (s *composeService) removeDivergedNetwork(ctx context.Context, project *types.Project, name string, n *types.NetworkConfig) error {",
          "1354:  var services []string",
          "1355:  for _, service := range project.Services.Filter(func(config types.ServiceConfig) bool {",
          "1356:   _, ok := config.Networks[name]",
          "1357:   return ok",
          "1358:  }) {",
          "1359:   services = append(services, service.Name)",
          "1360:  }",
          "1364:  err := s.stop(ctx, project.Name, api.StopOptions{",
          "1365:   Services: services,",
          "1366:   Project:  project,",
          "1367:  })",
          "1368:  if err != nil {",
          "1369:   return err",
          "1370:  }",
          "1372:  err = s.apiClient().NetworkRemove(ctx, n.Name)",
          "1373:  eventName := fmt.Sprintf(\"Network %s\", n.Name)",
          "1374:  progress.ContextWriter(ctx).Event(progress.RemovedEvent(eventName))",
          "1375:  return err",
          "1378: func (s *composeService) resolveExternalNetwork(ctx context.Context, n *types.NetworkConfig) (string, error) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1341:  })",
          "1343:  if err != nil {",
          "1345:  }",
          "1347:  if len(networks) == 0 {",
          "1349:   sn, err := s.apiClient().NetworkInspect(ctx, n.Name, network.InspectOptions{})",
          "1350:   if err != nil && !errdefs.IsNotFound(err) {",
          "1352:   }",
          "1353:   networks = append(networks, sn)",
          "1354:  }",
          "",
          "[Removed Lines]",
          "1344:   return err",
          "1351:    return err",
          "",
          "[Added Lines]",
          "1388:   return \"\", err",
          "1395:    return \"\", err",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1364:  switch len(networks) {",
          "1365:  case 1:",
          "1367:  case 0:",
          "1368:   enabled, err := s.isSWarmEnabled(ctx)",
          "1369:   if err != nil {",
          "1371:   }",
          "1372:   if enabled {",
          "1378:   }",
          "1380:  default:",
          "1382:  }",
          "1383: }",
          "",
          "[Removed Lines]",
          "1366:   return nil",
          "1370:    return err",
          "1377:    return nil",
          "1379:   return fmt.Errorf(\"network %s declared as external, but could not be found\", n.Name)",
          "1381:   return fmt.Errorf(\"multiple networks with name %q were found. Use network ID as `name` to avoid ambiguity\", n.Name)",
          "",
          "[Added Lines]",
          "1410:   return networks[0].ID, nil",
          "1414:    return \"\", err",
          "1421:    return \"swarm\", nil",
          "1423:   return \"\", fmt.Errorf(\"network %s declared as external, but could not be found\", n.Name)",
          "1425:   return \"\", fmt.Errorf(\"multiple networks with name %q were found. Use network ID as `name` to avoid ambiguity\", n.Name)",
          "",
          "---------------"
        ],
        "pkg/compose/create_test.go||pkg/compose/create_test.go": [
          "File: pkg/compose/create_test.go -> pkg/compose/create_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   Networks: composetypes.Networks(map[string]composetypes.NetworkConfig{\"skynet\": {}}),",
          "93:  }",
          "94:  prepareNetworks(&project)",
          "96:   \"com.docker.compose.network\": \"skynet\",",
          "97:   \"com.docker.compose.project\": \"myProject\",",
          "98:   \"com.docker.compose.version\": api.ComposeVersion,",
          "",
          "[Removed Lines]",
          "95:  assert.DeepEqual(t, project.Networks[\"skynet\"].Labels, composetypes.Labels(map[string]string{",
          "",
          "[Added Lines]",
          "95:  assert.DeepEqual(t, project.Networks[\"skynet\"].CustomLabels, composetypes.Labels(map[string]string{",
          "",
          "---------------"
        ],
        "pkg/compose/hash.go||pkg/compose/hash.go": [
          "File: pkg/compose/hash.go -> pkg/compose/hash.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  }",
          "42:  return digest.SHA256.FromBytes(bytes).Encoded(), nil",
          "43: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: func NetworkHash(o *types.NetworkConfig) (string, error) {",
          "46:  bytes, err := json.Marshal(o)",
          "47:  if err != nil {",
          "48:   return \"\", err",
          "49:  }",
          "50:  return digest.SHA256.FromBytes(bytes).Encoded(), nil",
          "51: }",
          "",
          "---------------"
        ],
        "pkg/compose/remove.go||pkg/compose/remove.go": [
          "File: pkg/compose/remove.go -> pkg/compose/remove.go"
        ],
        "pkg/compose/run.go||pkg/compose/run.go": [
          "File: pkg/compose/run.go -> pkg/compose/run.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:   Labels:            mergeLabels(service.Labels, service.CustomLabels),",
          "105:  }",
          "108:  if err != nil {",
          "109:   return \"\", err",
          "110:  }",
          "",
          "[Removed Lines]",
          "107:  err = newConvergence(project.ServiceNames(), observedState, s).resolveServiceReferences(&service)",
          "",
          "[Added Lines]",
          "107:  err = newConvergence(project.ServiceNames(), observedState, nil, s).resolveServiceReferences(&service)",
          "",
          "---------------"
        ],
        "pkg/e2e/networks_test.go||pkg/e2e/networks_test.go": [
          "File: pkg/e2e/networks_test.go -> pkg/e2e/networks_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   _ = c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
          "148:  })",
          "149: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151: func TestNetworkConfigChanged(t *testing.T) {",
          "153:  c := NewCLI(t)",
          "154:  const projectName = \"network_config_change\"",
          "156:  c.RunDockerComposeCmd(t, \"-f\", \"./fixtures/network-test/compose.subnet.yaml\", \"--project-name\", projectName, \"up\", \"-d\")",
          "157:  t.Cleanup(func() {",
          "158:   c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
          "159:  })",
          "161:  res := c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"exec\", \"test\", \"hostname\", \"-i\")",
          "162:  res.Assert(t, icmd.Expected{Out: \"172.28.0.\"})",
          "163:  res.Combined()",
          "165:  cmd := c.NewCmdWithEnv([]string{\"SUBNET=192.168.0.0/16\"},",
          "166:   \"docker\", \"compose\", \"-f\", \"./fixtures/network-test/compose.subnet.yaml\", \"--project-name\", projectName, \"up\", \"-d\")",
          "167:  res = icmd.RunCmd(cmd)",
          "168:  res.Assert(t, icmd.Success)",
          "169:  out := res.Combined()",
          "170:  fmt.Println(out)",
          "172:  res = c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"exec\", \"test\", \"hostname\", \"-i\")",
          "173:  res.Assert(t, icmd.Expected{Out: \"192.168.0.\"})",
          "174: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8808d81c59caf6436ade0a8975cd81ac53551bb",
      "candidate_info": {
        "commit_hash": "f8808d81c59caf6436ade0a8975cd81ac53551bb",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/f8808d81c59caf6436ade0a8975cd81ac53551bb",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "bump compose-go version to v2.1.0\n\nSigned-off-by: Guillaume Lours <705411+glours@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
          "9:  github.com/buger/goterm v1.0.4",
          "11:  github.com/containerd/console v1.0.4",
          "12:  github.com/containerd/containerd v1.7.13",
          "13:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4",
          "",
          "[Added Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.1.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "91: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "92: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "95: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "96: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "97: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
          "",
          "[Removed Lines]",
          "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4 h1:WYiZ9D0WBykHUJLlpt+w7NXX0hy+cQKKdVe7vmsNZvg=",
          "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "[Added Lines]",
          "93: github.com/compose-spec/compose-go/v2 v2.1.0 h1:qdW2qISQlCQG8v1O2TChcdxgAWTUGgUX/CPSO+ES9+E=",
          "94: github.com/compose-spec/compose-go/v2 v2.1.0/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b5a4588f9808e80a79f139ee53460a0655cff0a",
      "candidate_info": {
        "commit_hash": "9b5a4588f9808e80a79f139ee53460a0655cff0a",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/9b5a4588f9808e80a79f139ee53460a0655cff0a",
        "files": [
          "cmd/compose/compose.go",
          "cmd/compose/config.go",
          "docs/reference/compose_config.md",
          "docs/reference/docker_compose_config.yaml",
          "go.mod",
          "go.sum",
          "pkg/e2e/compose_environment_test.go"
        ],
        "message": "introduce --no-path-resolution to skip relative path to be resolved\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
        "before_after_code_files": [
          "cmd/compose/compose.go||cmd/compose/compose.go",
          "cmd/compose/config.go||cmd/compose/config.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/e2e/compose_environment_test.go||pkg/e2e/compose_environment_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/compose/config.go||cmd/compose/config.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "cmd/compose/config.go||cmd/compose/config.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "cmd/compose/compose.go||cmd/compose/compose.go": [
          "File: cmd/compose/compose.go -> cmd/compose/compose.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:   psCommand(&opts, streams, backend),",
          "393:   listCommand(streams, backend),",
          "394:   logsCommand(&opts, streams, backend),",
          "396:   killCommand(&opts, backend),",
          "397:   runCommand(&opts, streams, backend),",
          "398:   removeCommand(&opts, backend),",
          "",
          "[Removed Lines]",
          "395:   convertCommand(&opts, streams, backend),",
          "",
          "[Added Lines]",
          "395:   configCommand(&opts, streams, backend),",
          "",
          "---------------"
        ],
        "cmd/compose/config.go||cmd/compose/config.go": [
          "File: cmd/compose/config.go -> cmd/compose/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  resolveImageDigests bool",
          "41:  noInterpolate       bool",
          "42:  noNormalize         bool",
          "43:  services            bool",
          "44:  volumes             bool",
          "45:  profiles            bool",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:  noResolvePath       bool",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: func (o *configOptions) ToProject(services []string) (*types.Project, error) {",
          "52:  return o.ProjectOptions.ToProject(services,",
          "53:   cli.WithInterpolation(!o.noInterpolate),",
          "55:   cli.WithNormalization(!o.noNormalize),",
          "56:   cli.WithConsistency(!o.noConsistency),",
          "57:   cli.WithProfiles(o.Profiles),",
          "58:   cli.WithDiscardEnvFile)",
          "59: }",
          "62:  opts := configOptions{",
          "63:   ProjectOptions: p,",
          "64:  }",
          "",
          "[Removed Lines]",
          "54:   cli.WithResolvedPaths(true),",
          "61: func convertCommand(p *ProjectOptions, streams api.Streams, backend api.Service) *cobra.Command {",
          "",
          "[Added Lines]",
          "55:   cli.WithResolvedPaths(!o.noResolvePath),",
          "62: func configCommand(p *ProjectOptions, streams api.Streams, backend api.Service) *cobra.Command {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "106:  flags.BoolVarP(&opts.quiet, \"quiet\", \"q\", false, \"Only validate the configuration, don't print anything.\")",
          "107:  flags.BoolVar(&opts.noInterpolate, \"no-interpolate\", false, \"Don't interpolate environment variables.\")",
          "108:  flags.BoolVar(&opts.noNormalize, \"no-normalize\", false, \"Don't normalize compose model.\")",
          "109:  flags.BoolVar(&opts.noConsistency, \"no-consistency\", false, \"Don't check model consistency - warning: may produce invalid Compose output\")",
          "111:  flags.BoolVar(&opts.services, \"services\", false, \"Print the service names, one per line.\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:  flags.BoolVar(&opts.noResolvePath, \"no-path-resolution\", false, \"Don't resolve file paths.\")",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: require (",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.6",
          "7:  github.com/buger/goterm v1.0.4",
          "9:  github.com/containerd/console v1.0.3",
          "10:  github.com/containerd/containerd v1.6.21",
          "11:  github.com/cucumber/godog v0.0.0-00010101000000-000000000000 // replaced; see replace for the actual version used",
          "",
          "[Removed Lines]",
          "8:  github.com/compose-spec/compose-go v1.13.4",
          "",
          "[Added Lines]",
          "8:  github.com/compose-spec/compose-go v1.13.5",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "165: github.com/cncf/xds/go v0.0.0-20210922020428-25de7278fc84/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "166: github.com/cncf/xds/go v0.0.0-20211001041855-01bcc9b48dfe/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "167: github.com/cncf/xds/go v0.0.0-20211011173535-cb28da3451f1/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "170: github.com/containerd/cgroups v1.0.4 h1:jN/mbWBEaz+T1pi5OFtnkQ+8qnmEbAr1Oo1FRm5B0dA=",
          "171: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "172: github.com/containerd/console v1.0.3/go.mod h1:7LqA/THxQ86k76b8c/EMSiaJ3h1eZkMkXar0TQ1gf3U=",
          "",
          "[Removed Lines]",
          "168: github.com/compose-spec/compose-go v1.13.4 h1:O6xAsPqaY1s9KXteiO7wRCDTJLahv1XP/z/eUO9EfbI=",
          "169: github.com/compose-spec/compose-go v1.13.4/go.mod h1:rsiZ8uaOHJYJemDBzTe9UBpaq5ZFVEOO4TxM2G3SJxk=",
          "",
          "[Added Lines]",
          "168: github.com/compose-spec/compose-go v1.13.5 h1:ogqJOGEbe3uRxMg0ZEufOoCQTpX61l8tUeyW4UQgEBk=",
          "169: github.com/compose-spec/compose-go v1.13.5/go.mod h1:m0o4G6MQDHjjz9rY7No9FpnNi+9sKic262rzrwuCqic=",
          "",
          "---------------"
        ],
        "pkg/e2e/compose_environment_test.go||pkg/e2e/compose_environment_test.go": [
          "File: pkg/e2e/compose_environment_test.go -> pkg/e2e/compose_environment_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "177: func TestEnvInterpolation(t *testing.T) {",
          "178:  c := NewParallelCLI(t)",
          "186:  t.Run(\"shell priority from run command\", func(t *testing.T) {",
          "187:   cmd := c.NewDockerComposeCmd(t, \"-f\", \"./fixtures/environment/env-interpolation/compose.yaml\", \"config\")",
          "188:   cmd.Env = append(cmd.Env, \"WHEREAMI=shell\")",
          "189:   res := icmd.RunCmd(cmd)",
          "191:  })",
          "200:  t.Run(\"shell priority from run command using default value fallback\", func(t *testing.T) {",
          "201:   c.RunDockerComposeCmd(t, \"-f\", \"./fixtures/environment/env-interpolation-default-value/compose.yaml\", \"config\").",
          "202:    Assert(t, icmd.Expected{Out: `IMAGE: default_env:EnvFileDefaultValue`})",
          "",
          "[Removed Lines]",
          "190:   res.Assert(t, icmd.Expected{Out: `IMAGE: default_env:EnvFile`})",
          "",
          "[Added Lines]",
          "184:   res.Assert(t, icmd.Expected{Out: `IMAGE: default_env:shell`})",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "805541be9d321121fd635844bb2be78338d61781",
      "candidate_info": {
        "commit_hash": "805541be9d321121fd635844bb2be78338d61781",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/805541be9d321121fd635844bb2be78338d61781",
        "files": [
          "go.mod",
          "go.sum",
          "pkg/compose/watch.go",
          "pkg/compose/watch_test.go"
        ],
        "message": "watch: use official `develop` section (#11026)\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/watch.go||pkg/compose/watch.go",
          "pkg/compose/watch_test.go||pkg/compose/watch_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/adrg/xdg v0.4.0",
          "9:  github.com/buger/goterm v1.0.4",
          "11:  github.com/containerd/console v1.0.3",
          "12:  github.com/containerd/containerd v1.7.6",
          "13:  github.com/cucumber/godog v0.0.0-00010101000000-000000000000 // replaced; see replace for the actual version used",
          "",
          "[Removed Lines]",
          "10:  github.com/compose-spec/compose-go v1.18.4",
          "",
          "[Added Lines]",
          "10:  github.com/compose-spec/compose-go v1.19.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "140: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "141: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "144: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "145: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "146: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "142: github.com/compose-spec/compose-go v1.18.4 h1:yLYfsc3ATAYZVAJcXyx/V847/JVBmf3pfKfR13mXU4s=",
          "143: github.com/compose-spec/compose-go v1.18.4/go.mod h1:+MdqXV4RA7wdFsahh/Kb8U0pAJqkg7mr4PM9tFKU8RM=",
          "",
          "[Added Lines]",
          "142: github.com/compose-spec/compose-go v1.19.0 h1:t68gAcwStDg0hy2kFvqHJIksf6xkqRnlSKfL45/ETqo=",
          "143: github.com/compose-spec/compose-go v1.19.0/go.mod h1:+MdqXV4RA7wdFsahh/Kb8U0pAJqkg7mr4PM9tFKU8RM=",
          "",
          "---------------"
        ],
        "pkg/compose/watch.go||pkg/compose/watch.go": [
          "File: pkg/compose/watch.go -> pkg/compose/watch.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:  \"golang.org/x/sync/errgroup\"",
          "39: )",
          "59: const quietPeriod = 500 * time.Millisecond",
          "62: type fileEvent struct {",
          "63:  sync.PathMapping",
          "65: }",
          "",
          "[Removed Lines]",
          "41: type DevelopmentConfig struct {",
          "42:  Watch []Trigger `json:\"watch,omitempty\"`",
          "43: }",
          "45: type WatchAction string",
          "47: const (",
          "48:  WatchActionSync    WatchAction = \"sync\"",
          "49:  WatchActionRebuild WatchAction = \"rebuild\"",
          "50: )",
          "52: type Trigger struct {",
          "53:  Path   string   `json:\"path,omitempty\"`",
          "54:  Action string   `json:\"action,omitempty\"`",
          "55:  Target string   `json:\"target,omitempty\"`",
          "56:  Ignore []string `json:\"ignore,omitempty\"`",
          "57: }",
          "64:  Action WatchAction",
          "",
          "[Added Lines]",
          "46:  Action types.WatchAction",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "95:    return err",
          "96:   }",
          "98:   if config == nil {",
          "99:    continue",
          "100:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   if service.Develop != nil {",
          "81:    config = service.Develop",
          "82:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:  return eg.Wait()",
          "170: }",
          "173:  ctx, cancel := context.WithCancel(ctx)",
          "174:  defer cancel()",
          "",
          "[Removed Lines]",
          "172: func (s *composeService) watch(ctx context.Context, project *types.Project, name string, options api.WatchOptions, watcher watch.Notify, syncer sync.Syncer, triggers []Trigger) error {",
          "",
          "[Added Lines]",
          "158: func (s *composeService) watch(ctx context.Context, project *types.Project, name string, options api.WatchOptions, watcher watch.Notify, syncer sync.Syncer, triggers []types.Trigger) error {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "227:  if !watch.IsChild(trigger.Path, hostPath) {",
          "228:   return nil",
          "229:  }",
          "",
          "[Removed Lines]",
          "226: func maybeFileEvent(trigger Trigger, hostPath string, ignore watch.PathMatcher) *fileEvent {",
          "",
          "[Added Lines]",
          "212: func maybeFileEvent(trigger types.Trigger, hostPath string, ignore watch.PathMatcher) *fileEvent {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "250:  }",
          "252:  return &fileEvent{",
          "254:   PathMapping: sync.PathMapping{",
          "255:    HostPath:      hostPath,",
          "256:    ContainerPath: containerPath,",
          "",
          "[Removed Lines]",
          "253:   Action: WatchAction(trigger.Action),",
          "",
          "[Added Lines]",
          "239:   Action: trigger.Action,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "258:  }",
          "259: }",
          "263:  y, ok := service.Extensions[\"x-develop\"]",
          "264:  if !ok {",
          "265:   return nil, nil",
          "266:  }",
          "267:  err := mapstructure.Decode(y, &config)",
          "268:  if err != nil {",
          "269:   return nil, err",
          "",
          "[Removed Lines]",
          "261: func loadDevelopmentConfig(service types.ServiceConfig, project *types.Project) (*DevelopmentConfig, error) {",
          "262:  var config DevelopmentConfig",
          "",
          "[Added Lines]",
          "247: func loadDevelopmentConfig(service types.ServiceConfig, project *types.Project) (*types.DevelopConfig, error) {",
          "248:  var config types.DevelopConfig",
          "253:  logrus.Warnf(\"x-develop is DEPRECATED, please use the official `develop` attribute\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "286:    return nil, errors.New(\"watch rules MUST define a path\")",
          "287:   }",
          "290:    return nil, fmt.Errorf(\"service %s doesn't have a build section, can't apply 'rebuild' on watch\", service.Name)",
          "291:   }",
          "",
          "[Removed Lines]",
          "289:   if trigger.Action == string(WatchActionRebuild) && service.Build == nil {",
          "",
          "[Added Lines]",
          "276:   if trigger.Action == types.WatchActionRebuild && service.Build == nil {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "429: func (s *composeService) handleWatchBatch(ctx context.Context, project *types.Project, serviceName string, build api.BuildOptions, batch []fileEvent, syncer sync.Syncer) error {",
          "430:  pathMappings := make([]sync.PathMapping, len(batch))",
          "431:  for i := range batch {",
          "433:    fmt.Fprintf(",
          "434:     s.stdinfo(),",
          "435:     \"Rebuilding %s after changes were detected:%s\\n\",",
          "",
          "[Removed Lines]",
          "432:   if batch[i].Action == WatchActionRebuild {",
          "",
          "[Added Lines]",
          "419:   if batch[i].Action == types.WatchActionRebuild {",
          "",
          "---------------"
        ],
        "pkg/compose/watch_test.go||pkg/compose/watch_test.go": [
          "File: pkg/compose/watch_test.go -> pkg/compose/watch_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  eventBatchCh := batchDebounceEvents(ctx, clock, quietPeriod, ch)",
          "42:  for i := 0; i < 100; i++ {",
          "44:   if i%2 == 0 {",
          "45:    action = \"b\"",
          "46:   }",
          "",
          "[Removed Lines]",
          "43:   var action WatchAction = \"a\"",
          "",
          "[Added Lines]",
          "43:   var action types.WatchAction = \"a\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:    dockerCli: cli,",
          "125:    clock:     clock,",
          "126:   }",
          "128:    {",
          "129:     Path:   \"/sync\",",
          "130:     Action: \"sync\",",
          "",
          "[Removed Lines]",
          "127:   err := service.watch(ctx, &proj, \"test\", api.WatchOptions{}, watcher, syncer, []Trigger{",
          "",
          "[Added Lines]",
          "127:   err := service.watch(ctx, &proj, \"test\", api.WatchOptions{}, watcher, syncer, []types.Trigger{",
          "",
          "---------------"
        ]
      }
    }
  ]
}