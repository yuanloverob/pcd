{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "46ac6f2b294b63e612e1a7570f067ed436fae879",
      "candidate_info": {
        "commit_hash": "46ac6f2b294b63e612e1a7570f067ed436fae879",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/46ac6f2b294b63e612e1a7570f067ed436fae879",
        "files": [
          "backend/open_webui/retrieval/vector/dbs/chroma.py"
        ],
        "message": "fix",
        "before_after_code_files": [
          "backend/open_webui/retrieval/vector/dbs/chroma.py||backend/open_webui/retrieval/vector/dbs/chroma.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/retrieval/vector/dbs/chroma.py||backend/open_webui/retrieval/vector/dbs/chroma.py": [
          "File: backend/open_webui/retrieval/vector/dbs/chroma.py -> backend/open_webui/retrieval/vector/dbs/chroma.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:                 )",
          "109:             return None",
          "110:         except Exception as e:",
          "112:             return None",
          "114:     def get(self, collection_name: str) -> Optional[GetResult]:",
          "",
          "[Removed Lines]",
          "111:             log.exception(f\"Error querying collection {collection} with limit {limit}: {e}\")",
          "",
          "[Added Lines]",
          "111:             log.exception(",
          "112:                 f\"Error querying collection {collection_name} with limit {limit}: {e}\"",
          "113:             )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa91d83ac3848742e65a66a1bc9d119b3eea1c7e",
      "candidate_info": {
        "commit_hash": "fa91d83ac3848742e65a66a1bc9d119b3eea1c7e",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/fa91d83ac3848742e65a66a1bc9d119b3eea1c7e",
        "files": [
          "src/lib/components/admin/Settings/Documents.svelte"
        ],
        "message": "refac: documents settings ui",
        "before_after_code_files": [
          "src/lib/components/admin/Settings/Documents.svelte||src/lib/components/admin/Settings/Documents.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Settings/Documents.svelte||src/lib/components/admin/Settings/Documents.svelte": [
          "File: src/lib/components/admin/Settings/Documents.svelte -> src/lib/components/admin/Settings/Documents.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:  };",
          "243:  const toggleHybridSearch = async () => {",
          "245:   querySettings = await updateQuerySettings(localStorage.token, querySettings);",
          "246:  };",
          "",
          "[Removed Lines]",
          "244:   querySettings.hybrid = !querySettings.hybrid;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "313:  }}",
          "314: >",
          "315:  <div class=\" space-y-2.5 overflow-y-scroll scrollbar-hidden h-full pr-1.5\">",
          "412:      {/if}",
          "426:     </div>",
          "457:      </div>",
          "514:     </div>",
          "529:        <input",
          "535:        />",
          "536:       </div>",
          "590:      </div>",
          "615:     </div>",
          "625:       />",
          "626:      </div>",
          "627:     </div>",
          "667:    </div>",
          "680:       <input",
          "682:        type=\"number\"",
          "683:        placeholder={$i18n.t('Enter Top K')}",
          "684:        bind:value={querySettings.k}",
          "",
          "[Removed Lines]",
          "316:   <div class=\"flex flex-col gap-0.5\">",
          "317:    <div class=\" mb-0.5 text-sm font-medium\">{$i18n.t('General Settings')}</div>",
          "319:    <div class=\" flex w-full justify-between\">",
          "320:     <div class=\" self-center text-xs font-medium\">{$i18n.t('Embedding Model Engine')}</div>",
          "321:     <div class=\"flex items-center relative\">",
          "322:      <select",
          "323:       class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 p-1 text-xs bg-transparent outline-hidden text-right\"",
          "324:       bind:value={embeddingEngine}",
          "325:       placeholder=\"Select an embedding model engine\"",
          "326:       on:change={(e) => {",
          "327:        if (e.target.value === 'ollama') {",
          "328:         embeddingModel = '';",
          "329:        } else if (e.target.value === 'openai') {",
          "330:         embeddingModel = 'text-embedding-3-small';",
          "331:        } else if (e.target.value === '') {",
          "332:         embeddingModel = 'sentence-transformers/all-MiniLM-L6-v2';",
          "333:        }",
          "334:       }}",
          "335:      >",
          "336:       <option value=\"\">{$i18n.t('Default (SentenceTransformers)')}</option>",
          "337:       <option value=\"ollama\">{$i18n.t('Ollama')}</option>",
          "338:       <option value=\"openai\">{$i18n.t('OpenAI')}</option>",
          "339:      </select>",
          "340:     </div>",
          "341:    </div>",
          "343:    {#if embeddingEngine === 'openai'}",
          "344:     <div class=\"my-0.5 flex gap-2 pr-2\">",
          "345:      <input",
          "346:       class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "347:       placeholder={$i18n.t('API Base URL')}",
          "348:       bind:value={OpenAIUrl}",
          "349:       required",
          "350:      />",
          "352:      <SensitiveInput placeholder={$i18n.t('API Key')} bind:value={OpenAIKey} />",
          "353:     </div>",
          "354:    {:else if embeddingEngine === 'ollama'}",
          "355:     <div class=\"my-0.5 flex gap-2 pr-2\">",
          "356:      <input",
          "357:       class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "358:       placeholder={$i18n.t('API Base URL')}",
          "359:       bind:value={OllamaUrl}",
          "360:       required",
          "361:      />",
          "363:      <SensitiveInput",
          "364:       placeholder={$i18n.t('API Key')}",
          "365:       bind:value={OllamaKey}",
          "366:       required={false}",
          "367:      />",
          "368:     </div>",
          "369:    {/if}",
          "371:    {#if embeddingEngine === 'ollama' || embeddingEngine === 'openai'}",
          "372:     <div class=\"flex mt-0.5 space-x-2\">",
          "373:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Embedding Batch Size')}</div>",
          "374:      <div class=\" flex-1\">",
          "375:       <input",
          "376:        id=\"steps-range\"",
          "377:        type=\"range\"",
          "378:        min=\"1\"",
          "379:        max=\"2048\"",
          "380:        step=\"1\"",
          "381:        bind:value={embeddingBatchSize}",
          "382:        class=\"w-full h-2 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"",
          "383:       />",
          "384:      </div>",
          "385:      <div class=\"\">",
          "386:       <input",
          "387:        bind:value={embeddingBatchSize}",
          "388:        type=\"number\"",
          "389:        class=\" bg-transparent text-center w-14\"",
          "390:        min=\"-2\"",
          "391:        max=\"16000\"",
          "392:        step=\"1\"",
          "393:       />",
          "394:      </div>",
          "395:     </div>",
          "396:    {/if}",
          "398:    <div class=\" flex w-full justify-between\">",
          "399:     <div class=\" self-center text-xs font-medium\">{$i18n.t('Hybrid Search')}</div>",
          "401:     <button",
          "402:      class=\"p-1 px-3 text-xs flex rounded-sm transition\"",
          "403:      on:click={() => {",
          "404:       toggleHybridSearch();",
          "405:      }}",
          "406:      type=\"button\"",
          "407:     >",
          "408:      {#if querySettings.hybrid === true}",
          "409:       <span class=\"ml-2 self-center\">{$i18n.t('On')}</span>",
          "410:      {:else}",
          "411:       <span class=\"ml-2 self-center\">{$i18n.t('Off')}</span>",
          "413:     </button>",
          "414:    </div>",
          "416:    <div class=\" py-0.5 flex w-full justify-between\">",
          "417:     <div class=\" self-center text-xs font-medium\">{$i18n.t('Full Context Mode')}</div>",
          "418:     <div class=\"flex items-center relative\">",
          "419:      <Tooltip",
          "420:       content={RAG_FULL_CONTEXT",
          "421:        ? 'Inject entire contents as context for comprehensive processing, this is recommended for complex queries.'",
          "422:        : 'Default to segmented retrieval for focused and relevant content extraction, this is recommended for most cases.'}",
          "423:      >",
          "424:       <Switch bind:state={RAG_FULL_CONTEXT} />",
          "425:      </Tooltip>",
          "427:    </div>",
          "428:   </div>",
          "430:   <hr class=\"border-gray-100 dark:border-gray-850\" />",
          "432:   <div class=\"space-y-2\" />",
          "433:   <div>",
          "434:    <div class=\" mb-2 text-sm font-medium\">{$i18n.t('Embedding Model')}</div>",
          "436:    {#if embeddingEngine === 'ollama'}",
          "437:     <div class=\"flex w-full\">",
          "438:      <div class=\"flex-1 mr-2\">",
          "439:       <input",
          "440:        class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "441:        bind:value={embeddingModel}",
          "442:        placeholder={$i18n.t('Set embedding model')}",
          "443:        required",
          "444:       />",
          "445:      </div>",
          "446:     </div>",
          "447:    {:else}",
          "448:     <div class=\"flex w-full\">",
          "449:      <div class=\"flex-1 mr-2\">",
          "450:       <input",
          "451:        class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "452:        placeholder={$i18n.t('Set embedding model (e.g. {{model}})', {",
          "453:         model: embeddingModel.slice(-40)",
          "454:        })}",
          "455:        bind:value={embeddingModel}",
          "456:       />",
          "459:      {#if embeddingEngine === ''}",
          "460:       <button",
          "461:        class=\"px-2.5 bg-gray-50 hover:bg-gray-200 text-gray-800 dark:bg-gray-850 dark:hover:bg-gray-800 dark:text-gray-100 rounded-lg transition\"",
          "462:        on:click={() => {",
          "463:         embeddingModelUpdateHandler();",
          "464:        }}",
          "465:        disabled={updateEmbeddingModelLoading}",
          "466:       >",
          "467:        {#if updateEmbeddingModelLoading}",
          "468:         <div class=\"self-center\">",
          "469:          <svg",
          "470:           class=\" w-4 h-4\"",
          "471:           viewBox=\"0 0 24 24\"",
          "472:           fill=\"currentColor\"",
          "473:           xmlns=\"http://www.w3.org/2000/svg\"",
          "474:          >",
          "475:           <style>",
          "476:            .spinner_ajPY {",
          "477:             transform-origin: center;",
          "478:             animation: spinner_AtaB 0.75s infinite linear;",
          "479:            }",
          "481:            @keyframes spinner_AtaB {",
          "482:             100% {",
          "483:              transform: rotate(360deg);",
          "484:             }",
          "485:            }",
          "486:           </style>",
          "487:           <path",
          "488:            d=\"M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z\"",
          "489:            opacity=\".25\"",
          "490:           />",
          "491:           <path",
          "492:            d=\"M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z\"",
          "493:            class=\"spinner_ajPY\"",
          "494:           />",
          "495:          </svg>",
          "496:         </div>",
          "497:        {:else}",
          "498:         <svg",
          "499:          xmlns=\"http://www.w3.org/2000/svg\"",
          "500:          viewBox=\"0 0 16 16\"",
          "501:          fill=\"currentColor\"",
          "502:          class=\"w-4 h-4\"",
          "503:         >",
          "504:          <path",
          "505:           d=\"M8.75 2.75a.75.75 0 0 0-1.5 0v5.69L5.03 6.22a.75.75 0 0 0-1.06 1.06l3.5 3.5a.75.75 0 0 0 1.06 0l3.5-3.5a.75.75 0 0 0-1.06-1.06L8.75 8.44V2.75Z\"",
          "506:          />",
          "507:          <path",
          "508:           d=\"M3.5 9.75a.75.75 0 0 0-1.5 0v1.5A2.75 2.75 0 0 0 4.75 14h6.5A2.75 2.75 0 0 0 14 11.25v-1.5a.75.75 0 0 0-1.5 0v1.5c0 .69-.56 1.25-1.25 1.25h-6.5c-.69 0-1.25-.56-1.25-1.25v-1.5Z\"",
          "509:          />",
          "510:         </svg>",
          "511:        {/if}",
          "512:       </button>",
          "513:      {/if}",
          "515:    {/if}",
          "517:    <div class=\"mt-2 mb-1 text-xs text-gray-400 dark:text-gray-500\">",
          "518:     {$i18n.t(",
          "519:      'Warning: If you update or change your embedding model, you will need to re-import all documents.'",
          "520:     )}",
          "521:    </div>",
          "523:    {#if querySettings.hybrid === true}",
          "524:     <div class=\" \">",
          "525:      <div class=\" mb-2 text-sm font-medium\">{$i18n.t('Reranking Model')}</div>",
          "527:      <div class=\"flex w-full\">",
          "528:       <div class=\"flex-1 mr-2\">",
          "530:         class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "531:         placeholder={$i18n.t('Set reranking model (e.g. {{model}})', {",
          "532:          model: 'BAAI/bge-reranker-v2-m3'",
          "533:         })}",
          "534:         bind:value={rerankingModel}",
          "537:       <button",
          "538:        class=\"px-2.5 bg-gray-50 hover:bg-gray-200 text-gray-800 dark:bg-gray-850 dark:hover:bg-gray-800 dark:text-gray-100 rounded-lg transition\"",
          "539:        on:click={() => {",
          "540:         rerankingModelUpdateHandler();",
          "541:        }}",
          "542:        disabled={updateRerankingModelLoading}",
          "543:       >",
          "544:        {#if updateRerankingModelLoading}",
          "545:         <div class=\"self-center\">",
          "546:          <svg",
          "547:           class=\" w-4 h-4\"",
          "548:           viewBox=\"0 0 24 24\"",
          "549:           fill=\"currentColor\"",
          "550:           xmlns=\"http://www.w3.org/2000/svg\"",
          "551:          >",
          "552:           <style>",
          "553:            .spinner_ajPY {",
          "554:             transform-origin: center;",
          "555:             animation: spinner_AtaB 0.75s infinite linear;",
          "556:            }",
          "558:            @keyframes spinner_AtaB {",
          "559:             100% {",
          "560:              transform: rotate(360deg);",
          "561:             }",
          "562:            }",
          "563:           </style>",
          "564:           <path",
          "565:            d=\"M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z\"",
          "566:            opacity=\".25\"",
          "567:           />",
          "568:           <path",
          "569:            d=\"M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z\"",
          "570:            class=\"spinner_ajPY\"",
          "571:           />",
          "572:          </svg>",
          "573:         </div>",
          "574:        {:else}",
          "575:         <svg",
          "576:          xmlns=\"http://www.w3.org/2000/svg\"",
          "577:          viewBox=\"0 0 16 16\"",
          "578:          fill=\"currentColor\"",
          "579:          class=\"w-4 h-4\"",
          "580:         >",
          "581:          <path",
          "582:           d=\"M8.75 2.75a.75.75 0 0 0-1.5 0v5.69L5.03 6.22a.75.75 0 0 0-1.06 1.06l3.5 3.5a.75.75 0 0 0 1.06 0l3.5-3.5a.75.75 0 0 0-1.06-1.06L8.75 8.44V2.75Z\"",
          "583:          />",
          "584:          <path",
          "585:           d=\"M3.5 9.75a.75.75 0 0 0-1.5 0v1.5A2.75 2.75 0 0 0 4.75 14h6.5A2.75 2.75 0 0 0 14 11.25v-1.5a.75.75 0 0 0-1.5 0v1.5c0 .69-.56 1.25-1.25 1.25h-6.5c-.69 0-1.25-.56-1.25-1.25v-1.5Z\"",
          "586:          />",
          "587:         </svg>",
          "588:        {/if}",
          "589:       </button>",
          "591:     </div>",
          "592:    {/if}",
          "593:   </div>",
          "595:   <hr class=\" border-gray-100 dark:border-gray-850\" />",
          "597:   <div class=\"\">",
          "598:    <div class=\"text-sm font-medium mb-1\">{$i18n.t('Content Extraction')}</div>",
          "600:    <div class=\"flex w-full justify-between\">",
          "601:     <div class=\"self-center text-xs font-medium\">{$i18n.t('Engine')}</div>",
          "602:     <div class=\"flex items-center relative\">",
          "603:      <select",
          "604:       class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 text-xs bg-transparent outline-hidden text-right\"",
          "605:       bind:value={contentExtractionEngine}",
          "606:       on:change={(e) => {",
          "607:        showTikaServerUrl = e.target.value === 'tika';",
          "608:        showDocumentIntelligenceConfig = e.target.value === 'document_intelligence';",
          "609:       }}",
          "610:      >",
          "611:       <option value=\"\">{$i18n.t('Default')} </option>",
          "612:       <option value=\"tika\">{$i18n.t('Tika')}</option>",
          "613:       <option value=\"document_intelligence\">{$i18n.t('Document Intelligence')}</option>",
          "614:      </select>",
          "616:    </div>",
          "618:    {#if showTikaServerUrl}",
          "619:     <div class=\"flex w-full mt-1\">",
          "620:      <div class=\"flex-1 mr-2\">",
          "621:       <input",
          "622:        class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "623:        placeholder={$i18n.t('Enter Tika Server URL')}",
          "624:        bind:value={tikaServerUrl}",
          "628:    {/if}",
          "630:    {#if showDocumentIntelligenceConfig}",
          "631:     <div class=\"my-0.5 flex gap-2 pr-2\">",
          "632:      <input",
          "633:       class=\"flex-1 w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-none\"",
          "634:       placeholder={$i18n.t('Enter Document Intelligence Endpoint')}",
          "635:       bind:value={documentIntelligenceEndpoint}",
          "636:      />",
          "638:      <SensitiveInput",
          "639:       placeholder={$i18n.t('Enter Document Intelligence Key')}",
          "640:       bind:value={documentIntelligenceKey}",
          "641:      />",
          "642:     </div>",
          "643:    {/if}",
          "644:   </div>",
          "646:   <hr class=\" border-gray-100 dark:border-gray-850\" />",
          "648:   <div class=\"text-sm font-medium mb-1\">{$i18n.t('Google Drive')}</div>",
          "650:   <div class=\"\">",
          "651:    <div class=\"flex justify-between items-center text-xs\">",
          "652:     <div class=\"text-xs font-medium\">{$i18n.t('Enable Google Drive')}</div>",
          "653:     <div>",
          "654:      <Switch bind:state={enableGoogleDriveIntegration} />",
          "655:     </div>",
          "656:    </div>",
          "657:   </div>",
          "659:   <div class=\"text-sm font-medium mb-1\">{$i18n.t('OneDrive')}</div>",
          "661:   <div class=\"\">",
          "662:    <div class=\"flex justify-between items-center text-xs\">",
          "663:     <div class=\"text-xs font-medium\">{$i18n.t('Enable OneDrive')}</div>",
          "664:     <div>",
          "665:      <Switch bind:state={enableOneDriveIntegration} />",
          "666:     </div>",
          "668:   </div>",
          "670:   <hr class=\" border-gray-100 dark:border-gray-850\" />",
          "672:   <div class=\" \">",
          "673:    <div class=\" text-sm font-medium mb-1\">{$i18n.t('Query Params')}</div>",
          "675:    <div class=\" flex gap-1.5\">",
          "676:     <div class=\"flex flex-col w-full gap-1\">",
          "677:      <div class=\" text-xs font-medium w-full\">{$i18n.t('Top K')}</div>",
          "679:      <div class=\"w-full\">",
          "681:        class=\" w-full rounded-lg py-1.5 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "",
          "[Added Lines]",
          "315:   <div class=\"\">",
          "316:    <div class=\"mb-3\">",
          "317:     <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('General')}</div>",
          "319:     <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "321:     <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "322:      <div class=\"flex w-full justify-between\">",
          "323:       <div class=\" self-center text-xs font-medium\">{$i18n.t('Embedding Model Engine')}</div>",
          "324:       <div class=\"flex items-center relative\">",
          "325:        <select",
          "326:         class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 p-1 text-xs bg-transparent outline-hidden text-right\"",
          "327:         bind:value={embeddingEngine}",
          "328:         placeholder=\"Select an embedding model engine\"",
          "329:         on:change={(e) => {",
          "330:          if (e.target.value === 'ollama') {",
          "331:           embeddingModel = '';",
          "332:          } else if (e.target.value === 'openai') {",
          "333:           embeddingModel = 'text-embedding-3-small';",
          "334:          } else if (e.target.value === '') {",
          "335:           embeddingModel = 'sentence-transformers/all-MiniLM-L6-v2';",
          "336:          }",
          "337:         }}",
          "338:        >",
          "339:         <option value=\"\">{$i18n.t('Default (SentenceTransformers)')}</option>",
          "340:         <option value=\"ollama\">{$i18n.t('Ollama')}</option>",
          "341:         <option value=\"openai\">{$i18n.t('OpenAI')}</option>",
          "342:        </select>",
          "343:       </div>",
          "344:      </div>",
          "346:      {#if embeddingEngine === 'openai'}",
          "347:       <div class=\"my-0.5 flex gap-2 pr-2\">",
          "348:        <input",
          "349:         class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "350:         placeholder={$i18n.t('API Base URL')}",
          "351:         bind:value={OpenAIUrl}",
          "352:         required",
          "353:        />",
          "355:        <SensitiveInput placeholder={$i18n.t('API Key')} bind:value={OpenAIKey} />",
          "356:       </div>",
          "357:      {:else if embeddingEngine === 'ollama'}",
          "358:       <div class=\"my-0.5 flex gap-2 pr-2\">",
          "359:        <input",
          "360:         class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "361:         placeholder={$i18n.t('API Base URL')}",
          "362:         bind:value={OllamaUrl}",
          "363:         required",
          "364:        />",
          "366:        <SensitiveInput",
          "367:         placeholder={$i18n.t('API Key')}",
          "368:         bind:value={OllamaKey}",
          "369:         required={false}",
          "370:        />",
          "371:       </div>",
          "375:     <div class=\"  mb-2.5 flex flex-col w-full\">",
          "376:      <div class=\" mb-1 text-xs font-medium\">{$i18n.t('Embedding Model')}</div>",
          "378:      <div class=\"\">",
          "379:       {#if embeddingEngine === 'ollama'}",
          "380:        <div class=\"flex w-full\">",
          "381:         <div class=\"flex-1 mr-2\">",
          "382:          <input",
          "383:           class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "384:           bind:value={embeddingModel}",
          "385:           placeholder={$i18n.t('Set embedding model')}",
          "386:           required",
          "387:          />",
          "388:         </div>",
          "389:        </div>",
          "390:       {:else}",
          "391:        <div class=\"flex w-full\">",
          "392:         <div class=\"flex-1 mr-2\">",
          "393:          <input",
          "394:           class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "395:           placeholder={$i18n.t('Set embedding model (e.g. {{model}})', {",
          "396:            model: embeddingModel.slice(-40)",
          "397:           })}",
          "398:           bind:value={embeddingModel}",
          "399:          />",
          "400:         </div>",
          "402:         {#if embeddingEngine === ''}",
          "403:          <button",
          "404:           class=\"px-2.5 bg-transparent text-gray-800 dark:bg-transparent dark:text-gray-100 rounded-lg transition\"",
          "405:           on:click={() => {",
          "406:            embeddingModelUpdateHandler();",
          "407:           }}",
          "408:           disabled={updateEmbeddingModelLoading}",
          "409:          >",
          "410:           {#if updateEmbeddingModelLoading}",
          "411:            <div class=\"self-center\">",
          "412:             <svg",
          "413:              class=\" w-4 h-4\"",
          "414:              viewBox=\"0 0 24 24\"",
          "415:              fill=\"currentColor\"",
          "416:              xmlns=\"http://www.w3.org/2000/svg\"",
          "417:             >",
          "418:              <style>",
          "419:               .spinner_ajPY {",
          "420:                transform-origin: center;",
          "421:                animation: spinner_AtaB 0.75s infinite linear;",
          "422:               }",
          "424:               @keyframes spinner_AtaB {",
          "425:                100% {",
          "426:                 transform: rotate(360deg);",
          "427:                }",
          "428:               }",
          "429:              </style>",
          "430:              <path",
          "431:               d=\"M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z\"",
          "432:               opacity=\".25\"",
          "433:              />",
          "434:              <path",
          "435:               d=\"M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z\"",
          "436:               class=\"spinner_ajPY\"",
          "437:              />",
          "438:             </svg>",
          "439:            </div>",
          "440:           {:else}",
          "441:            <svg",
          "442:             xmlns=\"http://www.w3.org/2000/svg\"",
          "443:             viewBox=\"0 0 16 16\"",
          "444:             fill=\"currentColor\"",
          "445:             class=\"w-4 h-4\"",
          "446:            >",
          "447:             <path",
          "448:              d=\"M8.75 2.75a.75.75 0 0 0-1.5 0v5.69L5.03 6.22a.75.75 0 0 0-1.06 1.06l3.5 3.5a.75.75 0 0 0 1.06 0l3.5-3.5a.75.75 0 0 0-1.06-1.06L8.75 8.44V2.75Z\"",
          "449:             />",
          "450:             <path",
          "451:              d=\"M3.5 9.75a.75.75 0 0 0-1.5 0v1.5A2.75 2.75 0 0 0 4.75 14h6.5A2.75 2.75 0 0 0 14 11.25v-1.5a.75.75 0 0 0-1.5 0v1.5c0 .69-.56 1.25-1.25 1.25h-6.5c-.69 0-1.25-.56-1.25-1.25v-1.5Z\"",
          "452:             />",
          "453:            </svg>",
          "454:           {/if}",
          "455:          </button>",
          "456:         {/if}",
          "457:        </div>",
          "458:       {/if}",
          "461:      <div class=\"mt-1 mb-1 text-xs text-gray-400 dark:text-gray-500\">",
          "462:       {$i18n.t(",
          "463:        'Warning: If you update or change your embedding model, you will need to re-import all documents.'",
          "464:       )}",
          "465:      </div>",
          "468:     {#if embeddingEngine === 'ollama' || embeddingEngine === 'openai'}",
          "469:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "470:       <div class=\" self-center text-xs font-medium\">{$i18n.t('Embedding Batch Size')}</div>",
          "472:       <div class=\"\">",
          "474:         bind:value={embeddingBatchSize}",
          "475:         type=\"number\"",
          "476:         class=\" bg-transparent text-center w-14 outline-none\"",
          "477:         min=\"-2\"",
          "478:         max=\"16000\"",
          "479:         step=\"1\"",
          "483:     {/if}",
          "485:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "486:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Full Context Mode')}</div>",
          "487:      <div class=\"flex items-center relative\">",
          "488:       <Tooltip",
          "489:        content={RAG_FULL_CONTEXT",
          "490:         ? 'Inject entire contents as context for comprehensive processing, this is recommended for complex queries.'",
          "491:         : 'Default to segmented retrieval for focused and relevant content extraction, this is recommended for most cases.'}",
          "492:       >",
          "493:        <Switch bind:state={RAG_FULL_CONTEXT} />",
          "494:       </Tooltip>",
          "495:      </div>",
          "498:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "499:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Hybrid Search')}</div>",
          "500:      <div class=\"flex items-center relative\">",
          "501:       <Switch",
          "502:        bind:state={querySettings.hybrid}",
          "503:        on:change={() => {",
          "504:         toggleHybridSearch();",
          "505:        }}",
          "510:     {#if querySettings.hybrid === true}",
          "511:      <div class=\"  mb-2.5 flex flex-col w-full\">",
          "512:       <div class=\" mb-1 text-xs font-medium\">{$i18n.t('Reranking Model')}</div>",
          "514:       <div class=\"\">",
          "515:        <div class=\"flex w-full\">",
          "516:         <div class=\"flex-1 mr-2\">",
          "517:          <input",
          "518:           class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "519:           placeholder={$i18n.t('Set reranking model (e.g. {{model}})', {",
          "520:            model: 'BAAI/bge-reranker-v2-m3'",
          "521:           })}",
          "522:           bind:value={rerankingModel}",
          "523:          />",
          "524:         </div>",
          "525:         <button",
          "526:          class=\"px-2.5 bg-transparent text-gray-800 dark:bg-transparent dark:text-gray-100 rounded-lg transition\"",
          "527:          on:click={() => {",
          "528:           rerankingModelUpdateHandler();",
          "529:          }}",
          "530:          disabled={updateRerankingModelLoading}",
          "531:         >",
          "532:          {#if updateRerankingModelLoading}",
          "533:           <div class=\"self-center\">",
          "534:            <svg",
          "535:             class=\" w-4 h-4\"",
          "536:             viewBox=\"0 0 24 24\"",
          "537:             fill=\"currentColor\"",
          "538:             xmlns=\"http://www.w3.org/2000/svg\"",
          "539:            >",
          "540:             <style>",
          "541:              .spinner_ajPY {",
          "542:               transform-origin: center;",
          "543:               animation: spinner_AtaB 0.75s infinite linear;",
          "544:              }",
          "546:              @keyframes spinner_AtaB {",
          "547:               100% {",
          "548:                transform: rotate(360deg);",
          "549:               }",
          "550:              }",
          "551:             </style>",
          "552:             <path",
          "553:              d=\"M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z\"",
          "554:              opacity=\".25\"",
          "555:             />",
          "556:             <path",
          "557:              d=\"M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z\"",
          "558:              class=\"spinner_ajPY\"",
          "559:             />",
          "560:            </svg>",
          "561:           </div>",
          "562:          {:else}",
          "563:           <svg",
          "564:            xmlns=\"http://www.w3.org/2000/svg\"",
          "565:            viewBox=\"0 0 16 16\"",
          "566:            fill=\"currentColor\"",
          "567:            class=\"w-4 h-4\"",
          "568:           >",
          "569:            <path",
          "570:             d=\"M8.75 2.75a.75.75 0 0 0-1.5 0v5.69L5.03 6.22a.75.75 0 0 0-1.06 1.06l3.5 3.5a.75.75 0 0 0 1.06 0l3.5-3.5a.75.75 0 0 0-1.06-1.06L8.75 8.44V2.75Z\"",
          "571:            />",
          "572:            <path",
          "573:             d=\"M3.5 9.75a.75.75 0 0 0-1.5 0v1.5A2.75 2.75 0 0 0 4.75 14h6.5A2.75 2.75 0 0 0 14 11.25v-1.5a.75.75 0 0 0-1.5 0v1.5c0 .69-.56 1.25-1.25 1.25h-6.5c-.69 0-1.25-.56-1.25-1.25v-1.5Z\"",
          "574:            />",
          "575:           </svg>",
          "576:          {/if}",
          "577:         </button>",
          "578:        </div>",
          "579:       </div>",
          "580:      </div>",
          "581:     {/if}",
          "584:    <div class=\"mb-3\">",
          "585:     <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Query')}</div>",
          "587:     <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "589:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "590:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Top K')}</div>",
          "591:      <div class=\"flex items-center relative\">",
          "593:        class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "689:     </div>",
          "691:     {#if querySettings.hybrid === true}",
          "695:       </div>",
          "708:       </div>",
          "709:      </div>",
          "710:     {/if}",
          "718:     </div>",
          "732:    </div>",
          "767:      </div>",
          "768:     </div>",
          "773:      </div>",
          "784:      </div>",
          "794:      </div>",
          "795:     </div>",
          "796:    </div>",
          "811:       <Tooltip",
          "812:        content={$i18n.t(",
          "813:         'The maximum file size in MB. If the file size exceeds this limit, the file will not be uploaded.'",
          "",
          "[Removed Lines]",
          "692:      <div class=\" flex flex-col w-full gap-1\">",
          "693:       <div class=\"text-xs font-medium w-full\">",
          "694:        {$i18n.t('Minimum Score')}",
          "697:       <div class=\"w-full\">",
          "698:        <input",
          "699:         class=\" w-full rounded-lg py-1.5 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "700:         type=\"number\"",
          "701:         step=\"0.01\"",
          "702:         placeholder={$i18n.t('Enter Score')}",
          "703:         bind:value={querySettings.r}",
          "704:         autocomplete=\"off\"",
          "705:         min=\"0.0\"",
          "706:         title={$i18n.t('The score should be a value between 0.0 (0%) and 1.0 (100%).')}",
          "707:        />",
          "711:    </div>",
          "713:    {#if querySettings.hybrid === true}",
          "714:     <div class=\"mt-2 text-xs text-gray-400 dark:text-gray-500\">",
          "715:      {$i18n.t(",
          "716:       'Note: If you set a minimum score, the search will only return documents with a score greater than or equal to the minimum score.'",
          "717:      )}",
          "719:    {/if}",
          "721:    <div class=\"mt-2\">",
          "722:     <div class=\" mb-1 text-xs font-medium\">{$i18n.t('RAG Template')}</div>",
          "723:     <Tooltip",
          "724:      content={$i18n.t('Leave empty to use the default prompt, or enter a custom prompt')}",
          "725:      placement=\"top-start\"",
          "726:     >",
          "727:      <Textarea",
          "728:       bind:value={querySettings.template}",
          "729:       placeholder={$i18n.t('Leave empty to use the default prompt, or enter a custom prompt')}",
          "730:      />",
          "731:     </Tooltip>",
          "733:   </div>",
          "735:   <hr class=\" border-gray-100 dark:border-gray-850\" />",
          "737:   <div class=\" \">",
          "738:    <div class=\"mb-1 text-sm font-medium\">{$i18n.t('Chunk Params')}</div>",
          "740:    <div class=\"flex w-full justify-between mb-1.5\">",
          "741:     <div class=\"self-center text-xs font-medium\">{$i18n.t('Text Splitter')}</div>",
          "742:     <div class=\"flex items-center relative\">",
          "743:      <select",
          "744:       class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 text-xs bg-transparent outline-hidden text-right\"",
          "745:       bind:value={textSplitter}",
          "746:      >",
          "747:       <option value=\"\">{$i18n.t('Default')} ({$i18n.t('Character')})</option>",
          "748:       <option value=\"token\">{$i18n.t('Token')} ({$i18n.t('Tiktoken')})</option>",
          "749:      </select>",
          "750:     </div>",
          "751:    </div>",
          "753:    <div class=\" flex gap-1.5\">",
          "754:     <div class=\"  w-full justify-between\">",
          "755:      <div class=\"self-center text-xs font-medium min-w-fit mb-1\">",
          "756:       {$i18n.t('Chunk Size')}",
          "757:      </div>",
          "758:      <div class=\"self-center\">",
          "759:       <input",
          "760:        class=\" w-full rounded-lg py-1.5 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "761:        type=\"number\"",
          "762:        placeholder={$i18n.t('Enter Chunk Size')}",
          "763:        bind:value={chunkSize}",
          "764:        autocomplete=\"off\"",
          "765:        min=\"0\"",
          "766:       />",
          "770:     <div class=\"w-full\">",
          "771:      <div class=\" self-center text-xs font-medium min-w-fit mb-1\">",
          "772:       {$i18n.t('Chunk Overlap')}",
          "775:      <div class=\"self-center\">",
          "776:       <input",
          "777:        class=\"w-full rounded-lg py-1.5 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "778:        type=\"number\"",
          "779:        placeholder={$i18n.t('Enter Chunk Overlap')}",
          "780:        bind:value={chunkOverlap}",
          "781:        autocomplete=\"off\"",
          "782:        min=\"0\"",
          "783:       />",
          "785:     </div>",
          "786:    </div>",
          "788:    <div class=\"my-2\">",
          "789:     <div class=\"flex justify-between items-center text-xs\">",
          "790:      <div class=\" text-xs font-medium\">{$i18n.t('PDF Extract Images (OCR)')}</div>",
          "792:      <div>",
          "793:       <Switch bind:state={pdfExtractImages} />",
          "797:   </div>",
          "799:   <hr class=\" border-gray-100 dark:border-gray-850\" />",
          "801:   <div class=\"\">",
          "802:    <div class=\"text-sm font-medium mb-1\">{$i18n.t('Files')}</div>",
          "804:    <div class=\" flex gap-1.5\">",
          "805:     <div class=\"w-full\">",
          "806:      <div class=\" self-center text-xs font-medium min-w-fit mb-1\">",
          "807:       {$i18n.t('Max Upload Size')}",
          "808:      </div>",
          "810:      <div class=\"self-center\">",
          "",
          "[Added Lines]",
          "604:      <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "605:       <div class=\" flex w-full justify-between\">",
          "606:        <div class=\" self-center text-xs font-medium\">{$i18n.t('Minimum Score')}</div>",
          "607:        <div class=\"flex items-center relative\">",
          "608:         <input",
          "609:          class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "610:          type=\"number\"",
          "611:          step=\"0.01\"",
          "612:          placeholder={$i18n.t('Enter Score')}",
          "613:          bind:value={querySettings.r}",
          "614:          autocomplete=\"off\"",
          "615:          min=\"0.0\"",
          "616:          title={$i18n.t('The score should be a value between 0.0 (0%) and 1.0 (100%).')}",
          "617:         />",
          "618:        </div>",
          "620:       <div class=\"mt-1 text-xs text-gray-400 dark:text-gray-500\">",
          "621:        {$i18n.t(",
          "622:         'Note: If you set a minimum score, the search will only return documents with a score greater than or equal to the minimum score.'",
          "623:        )}",
          "628:     <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "629:      <div class=\" mb-1 text-xs font-medium\">{$i18n.t('RAG Template')}</div>",
          "630:      <div class=\"flex w-full items-center relative\">",
          "631:       <Tooltip",
          "632:        content={$i18n.t('Leave empty to use the default prompt, or enter a custom prompt')}",
          "633:        placement=\"top-start\"",
          "634:        className=\"w-full\"",
          "635:       >",
          "636:        <Textarea",
          "637:         bind:value={querySettings.template}",
          "638:         placeholder={$i18n.t(",
          "639:          'Leave empty to use the default prompt, or enter a custom prompt'",
          "640:         )}",
          "641:        />",
          "642:       </Tooltip>",
          "643:      </div>",
          "647:    <div class=\"mb-3\">",
          "648:     <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Content')}</div>",
          "650:     <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "652:     <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "653:      <div class=\"flex w-full justify-between\">",
          "654:       <div class=\" self-center text-xs font-medium\">",
          "655:        {$i18n.t('Content Extraction Engine')}",
          "656:       </div>",
          "658:       <div class=\"\">",
          "659:        <select",
          "660:         class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 text-xs bg-transparent outline-hidden text-right\"",
          "661:         bind:value={contentExtractionEngine}",
          "662:         on:change={(e) => {",
          "663:          showDocumentIntelligenceConfig = e.target.value === 'document_intelligence';",
          "664:         }}",
          "665:        >",
          "666:         <option value=\"\">{$i18n.t('Default')} </option>",
          "667:         <option value=\"tika\">{$i18n.t('Tika')}</option>",
          "668:         <option value=\"document_intelligence\">{$i18n.t('Document Intelligence')}</option>",
          "669:        </select>",
          "670:       </div>",
          "672:      {#if contentExtractionEngine === ''}",
          "673:       <div class=\"flex w-full mt-1\">",
          "674:        <div class=\"flex w-full justify-between items-center text-xs\">",
          "675:         <div class=\" text-xs font-medium\">{$i18n.t('PDF Extract Images (OCR)')}</div>",
          "677:         <div>",
          "678:          <Switch bind:state={pdfExtractImages} />",
          "679:         </div>",
          "680:        </div>",
          "681:       </div>",
          "682:      {:else if contentExtractionEngine === 'tika'}",
          "683:       <div class=\"flex w-full mt-1\">",
          "684:        <div class=\"flex-1 mr-2\">",
          "685:         <input",
          "686:          class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "687:          placeholder={$i18n.t('Enter Tika Server URL')}",
          "688:          bind:value={tikaServerUrl}",
          "689:         />",
          "690:        </div>",
          "691:       </div>",
          "692:      {:else if contentExtractionEngine === 'document_intelligence'}",
          "693:       <div class=\"my-0.5 flex gap-2 pr-2\">",
          "694:        <input",
          "695:         class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "696:         placeholder={$i18n.t('Enter Document Intelligence Endpoint')}",
          "697:         bind:value={documentIntelligenceEndpoint}",
          "698:        />",
          "700:        <SensitiveInput",
          "701:         placeholder={$i18n.t('Enter Document Intelligence Key')}",
          "702:         bind:value={documentIntelligenceKey}",
          "703:        />",
          "704:       </div>",
          "705:      {/if}",
          "708:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "709:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Text Splitter')}</div>",
          "710:      <div class=\"flex items-center relative\">",
          "711:       <select",
          "712:        class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 text-xs bg-transparent outline-hidden text-right\"",
          "713:        bind:value={textSplitter}",
          "714:       >",
          "715:        <option value=\"\">{$i18n.t('Default')} ({$i18n.t('Character')})</option>",
          "716:        <option value=\"token\">{$i18n.t('Token')} ({$i18n.t('Tiktoken')})</option>",
          "717:       </select>",
          "719:     </div>",
          "721:     <div class=\" flex gap-1.5\">",
          "722:      <div class=\"  w-full justify-between\">",
          "723:       <div class=\"self-center text-xs font-medium min-w-fit mb-1\">",
          "724:        {$i18n.t('Chunk Size')}",
          "725:       </div>",
          "726:       <div class=\"self-center\">",
          "727:        <input",
          "728:         class=\" w-full rounded-lg py-1.5 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "729:         type=\"number\"",
          "730:         placeholder={$i18n.t('Enter Chunk Size')}",
          "731:         bind:value={chunkSize}",
          "732:         autocomplete=\"off\"",
          "733:         min=\"0\"",
          "734:        />",
          "735:       </div>",
          "738:      <div class=\"w-full\">",
          "739:       <div class=\" self-center text-xs font-medium min-w-fit mb-1\">",
          "740:        {$i18n.t('Chunk Overlap')}",
          "741:       </div>",
          "743:       <div class=\"self-center\">",
          "744:        <input",
          "745:         class=\"w-full rounded-lg py-1.5 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "746:         type=\"number\"",
          "747:         placeholder={$i18n.t('Enter Chunk Overlap')}",
          "748:         bind:value={chunkOverlap}",
          "749:         autocomplete=\"off\"",
          "750:         min=\"0\"",
          "751:        />",
          "752:       </div>",
          "757:    <div class=\"mb-3\">",
          "758:     <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Files')}</div>",
          "760:     <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "762:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "763:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Max Upload Size')}</div>",
          "764:      <div class=\"flex items-center relative\">",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "815:        placement=\"top-start\"",
          "816:       >",
          "817:        <input",
          "819:         type=\"number\"",
          "820:         placeholder={$i18n.t('Leave empty for unlimited')}",
          "821:         bind:value={fileMaxSize}",
          "",
          "[Removed Lines]",
          "818:         class=\"w-full rounded-lg py-1.5 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "",
          "[Added Lines]",
          "772:         class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "826:      </div>",
          "827:     </div>",
          "834:       <Tooltip",
          "835:        content={$i18n.t(",
          "836:         'The maximum number of files that can be used at once in chat. If the number of files exceeds this limit, the files will not be uploaded.'",
          "",
          "[Removed Lines]",
          "829:     <div class=\"  w-full\">",
          "830:      <div class=\"self-center text-xs font-medium min-w-fit mb-1\">",
          "831:       {$i18n.t('Max Upload Count')}",
          "832:      </div>",
          "833:      <div class=\"self-center\">",
          "",
          "[Added Lines]",
          "783:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "784:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Max Upload Count')}</div>",
          "785:      <div class=\"flex items-center relative\">",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "838:        placement=\"top-start\"",
          "839:       >",
          "840:        <input",
          "842:         type=\"number\"",
          "843:         placeholder={$i18n.t('Leave empty for unlimited')}",
          "844:         bind:value={fileMaxCount}",
          "",
          "[Removed Lines]",
          "841:         class=\" w-full rounded-lg py-1.5 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "",
          "[Added Lines]",
          "793:         class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "849:      </div>",
          "850:     </div>",
          "851:    </div>",
          "880:     </div>",
          "904:     </div>",
          "907:     </div>",
          "909:   </div>",
          "910:  </div>",
          "911:  <div class=\"flex justify-end pt-3 text-sm font-medium\">",
          "",
          "[Removed Lines]",
          "852:   </div>",
          "854:   <hr class=\" border-gray-100 dark:border-gray-850\" />",
          "856:   <div>",
          "857:    <button",
          "858:     class=\" flex rounded-xl py-2 px-3.5 w-full hover:bg-gray-200 dark:hover:bg-gray-800 transition\"",
          "859:     on:click={() => {",
          "860:      showResetUploadDirConfirm = true;",
          "861:     }}",
          "862:     type=\"button\"",
          "863:    >",
          "864:     <div class=\" self-center mr-3\">",
          "865:      <svg",
          "866:       xmlns=\"http://www.w3.org/2000/svg\"",
          "867:       viewBox=\"0 0 24 24\"",
          "868:       fill=\"currentColor\"",
          "869:       class=\"size-4\"",
          "870:      >",
          "871:       <path",
          "872:        fill-rule=\"evenodd\"",
          "873:        d=\"M5.625 1.5H9a3.75 3.75 0 0 1 3.75 3.75v1.875c0 1.036.84 1.875 1.875 1.875H16.5a3.75 3.75 0 0 1 3.75 3.75v7.875c0 1.035-.84 1.875-1.875 1.875H5.625a1.875 1.875 0 0 1-1.875-1.875V3.375c0-1.036.84-1.875 1.875-1.875ZM9.75 14.25a.75.75 0 0 0 0 1.5H15a.75.75 0 0 0 0-1.5H9.75Z\"",
          "874:        clip-rule=\"evenodd\"",
          "875:       />",
          "876:       <path",
          "877:        d=\"M14.25 5.25a5.23 5.23 0 0 0-1.279-3.434 9.768 9.768 0 0 1 6.963 6.963A5.23 5.23 0 0 0 16.5 7.5h-1.875a.375.375 0 0 1-.375-.375V5.25Z\"",
          "878:       />",
          "879:      </svg>",
          "881:     <div class=\" self-center text-sm font-medium\">{$i18n.t('Reset Upload Directory')}</div>",
          "882:    </button>",
          "884:    <button",
          "885:     class=\" flex rounded-xl py-2 px-3.5 w-full hover:bg-gray-200 dark:hover:bg-gray-800 transition\"",
          "886:     on:click={() => {",
          "887:      showResetConfirm = true;",
          "888:     }}",
          "889:     type=\"button\"",
          "890:    >",
          "891:     <div class=\" self-center mr-3\">",
          "892:      <svg",
          "893:       xmlns=\"http://www.w3.org/2000/svg\"",
          "894:       viewBox=\"0 0 16 16\"",
          "895:       fill=\"currentColor\"",
          "896:       class=\"w-4 h-4\"",
          "897:      >",
          "898:       <path",
          "899:        fill-rule=\"evenodd\"",
          "900:        d=\"M3.5 2A1.5 1.5 0 0 0 2 3.5v9A1.5 1.5 0 0 0 3.5 14h9a1.5 1.5 0 0 0 1.5-1.5v-7A1.5 1.5 0 0 0 12.5 4H9.621a1.5 1.5 0 0 1-1.06-.44L7.439 2.44A1.5 1.5 0 0 0 6.38 2H3.5Zm6.75 7.75a.75.75 0 0 0 0-1.5h-4.5a.75.75 0 0 0 0 1.5h4.5Z\"",
          "901:        clip-rule=\"evenodd\"",
          "902:       />",
          "903:      </svg>",
          "905:     <div class=\" self-center text-sm font-medium\">",
          "906:      {$i18n.t('Reset Vector Storage/Knowledge')}",
          "908:    </button>",
          "",
          "[Added Lines]",
          "805:    <div class=\"mb-3\">",
          "806:     <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Integration')}</div>",
          "808:     <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "810:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "811:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Google Drive')}</div>",
          "812:      <div class=\"flex items-center relative\">",
          "813:       <Switch bind:state={enableGoogleDriveIntegration} />",
          "814:      </div>",
          "817:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "818:      <div class=\" self-center text-xs font-medium\">{$i18n.t('OneDrive')}</div>",
          "819:      <div class=\"flex items-center relative\">",
          "820:       <Switch bind:state={enableOneDriveIntegration} />",
          "821:      </div>",
          "822:     </div>",
          "823:    </div>",
          "825:    <div class=\"mb-3\">",
          "826:     <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Danger Zone')}</div>",
          "828:     <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "830:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "831:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Reset Upload Directory')}</div>",
          "832:      <div class=\"flex items-center relative\">",
          "833:       <button",
          "834:        class=\"text-xs\"",
          "835:        on:click={() => {",
          "836:         showResetUploadDirConfirm = true;",
          "837:        }}",
          "838:       >",
          "839:        {$i18n.t('Reset')}",
          "840:       </button>",
          "841:      </div>",
          "844:     <div class=\"  mb-2.5 flex w-full justify-between\">",
          "845:      <div class=\" self-center text-xs font-medium\">",
          "846:       {$i18n.t('Reset Vector Storage/Knowledge')}",
          "847:      </div>",
          "848:      <div class=\"flex items-center relative\">",
          "849:       <button",
          "850:        class=\"text-xs\"",
          "851:        on:click={() => {",
          "852:         showResetConfirm = true;",
          "853:        }}",
          "854:       >",
          "855:        {$i18n.t('Reset')}",
          "856:       </button>",
          "857:      </div>",
          "859:    </div>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78a8ef8e66c4a4c845fb4719fb7b75bdddfde09b",
      "candidate_info": {
        "commit_hash": "78a8ef8e66c4a4c845fb4719fb7b75bdddfde09b",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/78a8ef8e66c4a4c845fb4719fb7b75bdddfde09b",
        "files": [
          "backend/open_webui/routers/files.py",
          "backend/open_webui/routers/retrieval.py",
          "src/lib/components/channel/MessageInput.svelte",
          "src/lib/components/chat/MessageInput.svelte",
          "src/lib/components/workspace/Knowledge/KnowledgeBase.svelte"
        ],
        "message": "refac: audio file handling",
        "before_after_code_files": [
          "backend/open_webui/routers/files.py||backend/open_webui/routers/files.py",
          "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py",
          "src/lib/components/channel/MessageInput.svelte||src/lib/components/channel/MessageInput.svelte",
          "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte",
          "src/lib/components/workspace/Knowledge/KnowledgeBase.svelte||src/lib/components/workspace/Knowledge/KnowledgeBase.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/files.py||backend/open_webui/routers/files.py": [
          "File: backend/open_webui/routers/files.py -> backend/open_webui/routers/files.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     Files,",
          "17: )",
          "18: from open_webui.routers.retrieval import ProcessFileForm, process_file",
          "19: from open_webui.storage.provider import Storage",
          "20: from open_webui.utils.auth import get_admin_user, get_verified_user",
          "21: from pydantic import BaseModel",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: from open_webui.routers.audio import transcribe",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:         )",
          "69:         try:",
          "71:             file_item = Files.get_file_by_id(id=id)",
          "72:         except Exception as e:",
          "73:             log.exception(e)",
          "",
          "[Removed Lines]",
          "70:             process_file(request, ProcessFileForm(file_id=id), user=user)",
          "",
          "[Added Lines]",
          "71:             if file.content_type in [",
          "72:                 \"audio/mpeg\",",
          "73:                 \"audio/wav\",",
          "74:                 \"audio/ogg\",",
          "75:                 \"audio/x-m4a\",",
          "76:             ]:",
          "77:                 file_path = Storage.get_file(file_path)",
          "78:                 result = transcribe(request, file_path)",
          "79:                 process_file(",
          "80:                     request,",
          "81:                     ProcessFileForm(file_id=id, content=result.get(\"text\", \"\")),",
          "82:                     user=user,",
          "83:                 )",
          "84:             else:",
          "85:                 process_file(request, ProcessFileForm(file_id=id), user=user)",
          "",
          "---------------"
        ],
        "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py": [
          "File: backend/open_webui/routers/retrieval.py -> backend/open_webui/routers/retrieval.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "913:             # Update the content in the file",
          "914:             # Usage: /files/{file_id}/data/content/update",
          "918:             docs = [",
          "919:                 Document(",
          "",
          "[Removed Lines]",
          "916:             VECTOR_DB_CLIENT.delete_collection(collection_name=f\"file-{file.id}\")",
          "",
          "[Added Lines]",
          "916:             try:",
          "917:                 # /files/{file_id}/data/content/update",
          "918:                 VECTOR_DB_CLIENT.delete_collection(collection_name=f\"file-{file.id}\")",
          "919:             except:",
          "920:                 # Audio file upload pipeline",
          "921:                 pass",
          "",
          "---------------"
        ],
        "src/lib/components/channel/MessageInput.svelte||src/lib/components/channel/MessageInput.svelte": [
          "File: src/lib/components/channel/MessageInput.svelte -> src/lib/components/channel/MessageInput.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:   }",
          "159:   files = [...files, fileItem];",
          "177:   try {",
          "",
          "[Removed Lines]",
          "161:   if (['audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/x-m4a'].includes(file['type'])) {",
          "162:    const res = await transcribeAudio(localStorage.token, file).catch((error) => {",
          "163:     toast.error(`${error}`);",
          "164:     return null;",
          "165:    });",
          "167:    if (res) {",
          "168:     console.log(res);",
          "169:     const blob = new Blob([res.text], { type: 'text/plain' });",
          "170:     file = blobToFile(blob, `${file.name}.txt`);",
          "172:     fileItem.name = file.name;",
          "173:     fileItem.size = file.size;",
          "174:    }",
          "175:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte": [
          "File: src/lib/components/chat/MessageInput.svelte -> src/lib/components/chat/MessageInput.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   }",
          "176:   files = [...files, fileItem];",
          "194:   try {",
          "",
          "[Removed Lines]",
          "178:   if (['audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/x-m4a'].includes(file['type'])) {",
          "179:    const res = await transcribeAudio(localStorage.token, file).catch((error) => {",
          "180:     toast.error(`${error}`);",
          "181:     return null;",
          "182:    });",
          "184:    if (res) {",
          "185:     console.log(res);",
          "186:     const blob = new Blob([res.text], { type: 'text/plain' });",
          "187:     file = blobToFile(blob, `${file.name}.txt`);",
          "189:     fileItem.name = file.name;",
          "190:     fileItem.size = file.size;",
          "191:    }",
          "192:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/components/workspace/Knowledge/KnowledgeBase.svelte||src/lib/components/workspace/Knowledge/KnowledgeBase.svelte": [
          "File: src/lib/components/workspace/Knowledge/KnowledgeBase.svelte -> src/lib/components/workspace/Knowledge/KnowledgeBase.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   knowledge.files = [...(knowledge.files ?? []), fileItem];",
          "150:   try {",
          "151:    const uploadedFile = await uploadFile(localStorage.token, file).catch((e) => {",
          "152:     toast.error(`${e}`);",
          "",
          "[Removed Lines]",
          "137:   if (['audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/x-m4a'].includes(file['type'])) {",
          "138:    const res = await transcribeAudio(localStorage.token, file).catch((error) => {",
          "139:     toast.error(`${error}`);",
          "140:     return null;",
          "141:    });",
          "143:    if (res) {",
          "144:     console.log(res);",
          "145:     const blob = new Blob([res.text], { type: 'text/plain' });",
          "146:     file = blobToFile(blob, `${file.name}.txt`);",
          "147:    }",
          "148:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f27d7710b68fc9baac2878bc97bf8ae478f093f",
      "candidate_info": {
        "commit_hash": "9f27d7710b68fc9baac2878bc97bf8ae478f093f",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/9f27d7710b68fc9baac2878bc97bf8ae478f093f",
        "files": [
          "backend/open_webui/main.py",
          "src/lib/components/admin/Settings/Documents.svelte",
          "src/lib/components/chat/ChatPlaceholder.svelte",
          "src/lib/components/chat/MessageInput/InputMenu.svelte",
          "src/lib/components/chat/Messages.svelte",
          "src/lib/components/chat/Placeholder.svelte",
          "src/lib/i18n/locales/ka-GE/translation.json",
          "src/lib/utils/index.ts",
          "src/lib/utils/onedrive-file-picker.ts"
        ],
        "message": "chore: format",
        "before_after_code_files": [
          "backend/open_webui/main.py||backend/open_webui/main.py",
          "src/lib/components/admin/Settings/Documents.svelte||src/lib/components/admin/Settings/Documents.svelte",
          "src/lib/components/chat/ChatPlaceholder.svelte||src/lib/components/chat/ChatPlaceholder.svelte",
          "src/lib/components/chat/MessageInput/InputMenu.svelte||src/lib/components/chat/MessageInput/InputMenu.svelte",
          "src/lib/components/chat/Messages.svelte||src/lib/components/chat/Messages.svelte",
          "src/lib/components/chat/Placeholder.svelte||src/lib/components/chat/Placeholder.svelte",
          "src/lib/utils/index.ts||src/lib/utils/index.ts",
          "src/lib/utils/onedrive-file-picker.ts||src/lib/utils/onedrive-file-picker.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1186:                     \"client_id\": GOOGLE_DRIVE_CLIENT_ID.value,",
          "1187:                     \"api_key\": GOOGLE_DRIVE_API_KEY.value,",
          "1188:                 },",
          "1192:             }",
          "1193:             if user is not None",
          "1194:             else {}",
          "",
          "[Removed Lines]",
          "1189:                 \"onedrive\": {",
          "1190:                     \"client_id\": ONEDRIVE_CLIENT_ID.value",
          "1191:                 }",
          "",
          "[Added Lines]",
          "1189:                 \"onedrive\": {\"client_id\": ONEDRIVE_CLIENT_ID.value},",
          "",
          "---------------"
        ],
        "src/lib/components/admin/Settings/Documents.svelte||src/lib/components/admin/Settings/Documents.svelte": [
          "File: src/lib/components/admin/Settings/Documents.svelte -> src/lib/components/admin/Settings/Documents.svelte"
        ],
        "src/lib/components/chat/ChatPlaceholder.svelte||src/lib/components/chat/ChatPlaceholder.svelte": [
          "File: src/lib/components/chat/ChatPlaceholder.svelte -> src/lib/components/chat/ChatPlaceholder.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   <div class=\" w-full font-primary\" in:fade={{ duration: 200, delay: 300 }}>",
          "128:    <Suggestions",
          "129:     className=\"grid grid-cols-2\"",
          "132:      models[selectedModelIdx]?.info?.meta?.suggestion_prompts ??",
          "133:      $config?.default_prompt_suggestions ??",
          "134:      []}",
          "",
          "[Removed Lines]",
          "130:     suggestionPrompts={",
          "131:      atSelectedModel?.info?.meta?.suggestion_prompts ??",
          "",
          "[Added Lines]",
          "130:     suggestionPrompts={atSelectedModel?.info?.meta?.suggestion_prompts ??",
          "",
          "---------------"
        ],
        "src/lib/components/chat/MessageInput/InputMenu.svelte||src/lib/components/chat/MessageInput/InputMenu.svelte": [
          "File: src/lib/components/chat/MessageInput/InputMenu.svelte -> src/lib/components/chat/MessageInput/InputMenu.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:      }}",
          "237:     >",
          "238:      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" class=\"w-5 h-5\" fill=\"none\">",
          "241:       </mask>",
          "242:       <g mask=\"url(#mask0_87_7796)\">",
          "247:       </g>",
          "248:       <defs>",
          "252:        </linearGradient>",
          "256:        </linearGradient>",
          "260:        </linearGradient>",
          "264:        </linearGradient>",
          "265:       </defs>",
          "266:      </svg>",
          "",
          "[Removed Lines]",
          "239:       <mask id=\"mask0_87_7796\" style=\"mask-type:alpha\" maskUnits=\"userSpaceOnUse\" x=\"0\" y=\"6\" width=\"32\" height=\"20\">",
          "240:        <path d=\"M7.82979 26C3.50549 26 0 22.5675 0 18.3333C0 14.1921 3.35322 10.8179 7.54613 10.6716C9.27535 7.87166 12.4144 6 16 6C20.6308 6 24.5169 9.12183 25.5829 13.3335C29.1316 13.3603 32 16.1855 32 19.6667C32 23.0527 29 26 25.8723 25.9914L7.82979 26Z\" fill=\"#C4C4C4\"/>",
          "243:        <path d=\"M7.83017 26.0001C5.37824 26.0001 3.18957 24.8966 1.75391 23.1691L18.0429 16.3335L30.7089 23.4647C29.5926 24.9211 27.9066 26.0001 26.0004 25.9915C23.1254 26.0001 12.0629 26.0001 7.83017 26.0001Z\" fill=\"url(#paint0_linear_87_7796)\"/>",
          "244:        <path d=\"M25.5785 13.3149L18.043 16.3334L30.709 23.4647C31.5199 22.4065 32.0004 21.0916 32.0004 19.6669C32.0004 16.1857 29.1321 13.3605 25.5833 13.3337C25.5817 13.3274 25.5801 13.3212 25.5785 13.3149Z\" fill=\"url(#paint1_linear_87_7796)\"/>",
          "245:        <path d=\"M7.06445 10.7028L18.0423 16.3333L25.5779 13.3148C24.5051 9.11261 20.6237 6 15.9997 6C12.4141 6 9.27508 7.87166 7.54586 10.6716C7.3841 10.6773 7.22358 10.6877 7.06445 10.7028Z\" fill=\"url(#paint2_linear_87_7796)\"/>",
          "246:        <path d=\"M1.7535 23.1687L18.0425 16.3331L7.06471 10.7026C3.09947 11.0792 0 14.3517 0 18.3331C0 20.1665 0.657197 21.8495 1.7535 23.1687Z\" fill=\"url(#paint3_linear_87_7796)\"/>",
          "249:        <linearGradient id=\"paint0_linear_87_7796\" x1=\"4.42591\" y1=\"24.6668\" x2=\"27.2309\" y2=\"23.2764\" gradientUnits=\"userSpaceOnUse\">",
          "250:         <stop stop-color=\"#2086B8\"/>",
          "251:         <stop offset=\"1\" stop-color=\"#46D3F6\"/>",
          "253:        <linearGradient id=\"paint1_linear_87_7796\" x1=\"23.8302\" y1=\"19.6668\" x2=\"30.2108\" y2=\"15.2082\" gradientUnits=\"userSpaceOnUse\">",
          "254:         <stop stop-color=\"#1694DB\"/>",
          "255:         <stop offset=\"1\" stop-color=\"#62C3FE\"/>",
          "257:        <linearGradient id=\"paint2_linear_87_7796\" x1=\"8.51037\" y1=\"7.33333\" x2=\"23.3335\" y2=\"15.9348\" gradientUnits=\"userSpaceOnUse\">",
          "258:         <stop stop-color=\"#0D3D78\"/>",
          "259:         <stop offset=\"1\" stop-color=\"#063B83\"/>",
          "261:        <linearGradient id=\"paint3_linear_87_7796\" x1=\"-0.340429\" y1=\"19.9998\" x2=\"14.5634\" y2=\"14.4649\" gradientUnits=\"userSpaceOnUse\">",
          "262:         <stop stop-color=\"#16589B\"/>",
          "263:         <stop offset=\"1\" stop-color=\"#1464B7\"/>",
          "",
          "[Added Lines]",
          "239:       <mask",
          "240:        id=\"mask0_87_7796\"",
          "241:        style=\"mask-type:alpha\"",
          "242:        maskUnits=\"userSpaceOnUse\"",
          "243:        x=\"0\"",
          "244:        y=\"6\"",
          "245:        width=\"32\"",
          "246:        height=\"20\"",
          "247:       >",
          "248:        <path",
          "249:         d=\"M7.82979 26C3.50549 26 0 22.5675 0 18.3333C0 14.1921 3.35322 10.8179 7.54613 10.6716C9.27535 7.87166 12.4144 6 16 6C20.6308 6 24.5169 9.12183 25.5829 13.3335C29.1316 13.3603 32 16.1855 32 19.6667C32 23.0527 29 26 25.8723 25.9914L7.82979 26Z\"",
          "250:         fill=\"#C4C4C4\"",
          "251:        />",
          "254:        <path",
          "255:         d=\"M7.83017 26.0001C5.37824 26.0001 3.18957 24.8966 1.75391 23.1691L18.0429 16.3335L30.7089 23.4647C29.5926 24.9211 27.9066 26.0001 26.0004 25.9915C23.1254 26.0001 12.0629 26.0001 7.83017 26.0001Z\"",
          "256:         fill=\"url(#paint0_linear_87_7796)\"",
          "257:        />",
          "258:        <path",
          "259:         d=\"M25.5785 13.3149L18.043 16.3334L30.709 23.4647C31.5199 22.4065 32.0004 21.0916 32.0004 19.6669C32.0004 16.1857 29.1321 13.3605 25.5833 13.3337C25.5817 13.3274 25.5801 13.3212 25.5785 13.3149Z\"",
          "260:         fill=\"url(#paint1_linear_87_7796)\"",
          "261:        />",
          "262:        <path",
          "263:         d=\"M7.06445 10.7028L18.0423 16.3333L25.5779 13.3148C24.5051 9.11261 20.6237 6 15.9997 6C12.4141 6 9.27508 7.87166 7.54586 10.6716C7.3841 10.6773 7.22358 10.6877 7.06445 10.7028Z\"",
          "264:         fill=\"url(#paint2_linear_87_7796)\"",
          "265:        />",
          "266:        <path",
          "267:         d=\"M1.7535 23.1687L18.0425 16.3331L7.06471 10.7026C3.09947 11.0792 0 14.3517 0 18.3331C0 20.1665 0.657197 21.8495 1.7535 23.1687Z\"",
          "268:         fill=\"url(#paint3_linear_87_7796)\"",
          "269:        />",
          "272:        <linearGradient",
          "273:         id=\"paint0_linear_87_7796\"",
          "274:         x1=\"4.42591\"",
          "275:         y1=\"24.6668\"",
          "276:         x2=\"27.2309\"",
          "277:         y2=\"23.2764\"",
          "278:         gradientUnits=\"userSpaceOnUse\"",
          "279:        >",
          "280:         <stop stop-color=\"#2086B8\" />",
          "281:         <stop offset=\"1\" stop-color=\"#46D3F6\" />",
          "283:        <linearGradient",
          "284:         id=\"paint1_linear_87_7796\"",
          "285:         x1=\"23.8302\"",
          "286:         y1=\"19.6668\"",
          "287:         x2=\"30.2108\"",
          "288:         y2=\"15.2082\"",
          "289:         gradientUnits=\"userSpaceOnUse\"",
          "290:        >",
          "291:         <stop stop-color=\"#1694DB\" />",
          "292:         <stop offset=\"1\" stop-color=\"#62C3FE\" />",
          "294:        <linearGradient",
          "295:         id=\"paint2_linear_87_7796\"",
          "296:         x1=\"8.51037\"",
          "297:         y1=\"7.33333\"",
          "298:         x2=\"23.3335\"",
          "299:         y2=\"15.9348\"",
          "300:         gradientUnits=\"userSpaceOnUse\"",
          "301:        >",
          "302:         <stop stop-color=\"#0D3D78\" />",
          "303:         <stop offset=\"1\" stop-color=\"#063B83\" />",
          "305:        <linearGradient",
          "306:         id=\"paint3_linear_87_7796\"",
          "307:         x1=\"-0.340429\"",
          "308:         y1=\"19.9998\"",
          "309:         x2=\"14.5634\"",
          "310:         y2=\"14.4649\"",
          "311:         gradientUnits=\"userSpaceOnUse\"",
          "312:        >",
          "313:         <stop stop-color=\"#16589B\" />",
          "314:         <stop offset=\"1\" stop-color=\"#1464B7\" />",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages.svelte||src/lib/components/chat/Messages.svelte": [
          "File: src/lib/components/chat/Messages.svelte -> src/lib/components/chat/Messages.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:  {#if Object.keys(history?.messages ?? {}).length == 0}",
          "351:   <ChatPlaceholder",
          "352:    modelIds={selectedModels}",
          "354:    submitPrompt={async (p) => {",
          "355:     let text = p;",
          "",
          "[Removed Lines]",
          "353:    atSelectedModel={atSelectedModel}",
          "",
          "[Added Lines]",
          "353:    {atSelectedModel}",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Placeholder.svelte||src/lib/components/chat/Placeholder.svelte": [
          "File: src/lib/components/chat/Placeholder.svelte -> src/lib/components/chat/Placeholder.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:  <div class=\"mx-auto max-w-2xl font-primary\" in:fade={{ duration: 200, delay: 200 }}>",
          "214:   <div class=\"mx-5\">",
          "215:    <Suggestions",
          "218:      models[selectedModelIdx]?.info?.meta?.suggestion_prompts ??",
          "219:      $config?.default_prompt_suggestions ??",
          "220:      []}",
          "",
          "[Removed Lines]",
          "216:     suggestionPrompts={",
          "217:      atSelectedModel?.info?.meta?.suggestion_prompts ??",
          "",
          "[Added Lines]",
          "216:     suggestionPrompts={atSelectedModel?.info?.meta?.suggestion_prompts ??",
          "",
          "---------------"
        ],
        "src/lib/utils/index.ts||src/lib/utils/index.ts": [
          "File: src/lib/utils/index.ts -> src/lib/utils/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:  const initials =",
          "280:   sanitizedName.length > 0",
          "281:    ? sanitizedName[0] +",
          "285:    : '';",
          "287:  ctx.fillText(initials.toUpperCase(), canvas.width / 2, canvas.height / 2);",
          "",
          "[Removed Lines]",
          "282:    (sanitizedName.split(' ').length > 1",
          "283:     ? sanitizedName[sanitizedName.lastIndexOf(' ') + 1]",
          "284:     : '')",
          "",
          "[Added Lines]",
          "282:     (sanitizedName.split(' ').length > 1",
          "283:      ? sanitizedName[sanitizedName.lastIndexOf(' ') + 1]",
          "284:      : '')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:  return current === '0.0.0'",
          "349:   ? false",
          "350:   : current.localeCompare(latest, undefined, {",
          "355: };",
          "357: export const findWordIndices = (text) => {",
          "",
          "[Removed Lines]",
          "351:    numeric: true,",
          "352:    sensitivity: 'case',",
          "353:    caseFirst: 'upper'",
          "354:   }) < 0;",
          "",
          "[Added Lines]",
          "351:     numeric: true,",
          "352:     sensitivity: 'case',",
          "353:     caseFirst: 'upper'",
          "354:    }) < 0;",
          "",
          "---------------"
        ],
        "src/lib/utils/onedrive-file-picker.ts||src/lib/utils/onedrive-file-picker.ts": [
          "File: src/lib/utils/onedrive-file-picker.ts -> src/lib/utils/onedrive-file-picker.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: let CLIENT_ID = '';",
          "3: async function getCredentials() {",
          "14: }",
          "16: function loadMsalScript(): Promise<void> {",
          "30: }",
          "32: let msalInstance: any;",
          "35: async function initializeMsal() {",
          "55: }",
          "58: async function getToken(): Promise<string> {",
          "74: }",
          "77: const params = {",
          "96: };",
          "99: async function downloadOneDriveFile(fileInfo: any): Promise<Blob> {",
          "120: }",
          "123: export async function openOneDrivePicker(): Promise<any | null> {",
          "248: }",
          "251: export async function pickAndDownloadFile(): Promise<{ blob: Blob; name: string } | null> {",
          "264: }",
          "266: export { downloadOneDriveFile };",
          "",
          "[Removed Lines]",
          "4:   if (CLIENT_ID) return;",
          "5:   const response = await fetch('/api/config');",
          "6:   if (!response.ok) {",
          "7:     throw new Error('Failed to fetch OneDrive credentials');",
          "8:   }",
          "9:   const config = await response.json();",
          "10:   CLIENT_ID = config.onedrive?.client_id;",
          "11:   if (!CLIENT_ID) {",
          "12:     throw new Error('OneDrive client ID not configured');",
          "13:   }",
          "17:   return new Promise((resolve, reject) => {",
          "18:     const win = window;",
          "19:     if (win.msal) {",
          "20:       resolve();",
          "21:       return;",
          "22:     }",
          "23:     const script = document.createElement('script');",
          "24:     script.src = 'https://alcdn.msauth.net/browser/2.19.0/js/msal-browser.min.js';",
          "25:     script.async = true;",
          "26:     script.onload = () => resolve();",
          "27:     script.onerror = () => reject(new Error('Failed to load MSAL script'));",
          "28:     document.head.appendChild(script);",
          "29:   });",
          "36:   if (!CLIENT_ID) {",
          "37:     await getCredentials();",
          "38:   }",
          "39:   const msalParams = {",
          "40:     auth: {",
          "41:       authority: 'https://login.microsoftonline.com/consumers',",
          "42:       clientId: CLIENT_ID",
          "43:     }",
          "44:   };",
          "45:   try {",
          "46:     await loadMsalScript();",
          "47:     const win = window;",
          "48:     msalInstance = new win.msal.PublicClientApplication(msalParams);",
          "49:     if (msalInstance.initialize) {",
          "50:       await msalInstance.initialize();",
          "51:     }",
          "52:   } catch (error) {",
          "53:     console.error('MSAL initialization error:', error);",
          "54:   }",
          "59:   const authParams = { scopes: ['OneDrive.ReadWrite'] };",
          "60:   let accessToken = '';",
          "61:   try {",
          "62:     await initializeMsal();",
          "63:     const resp = await msalInstance.acquireTokenSilent(authParams);",
          "64:     accessToken = resp.accessToken;",
          "65:   } catch (err) {",
          "66:     const resp = await msalInstance.loginPopup(authParams);",
          "67:     msalInstance.setActiveAccount(resp.account);",
          "68:     if (resp.idToken) {",
          "69:       const resp2 = await msalInstance.acquireTokenSilent(authParams);",
          "70:       accessToken = resp2.accessToken;",
          "71:     }",
          "72:   }",
          "73:   return accessToken;",
          "76: const baseUrl = \"https://onedrive.live.com/picker\";",
          "78:   sdk: '8.0',",
          "79:   entry: {",
          "80:     oneDrive: {",
          "81:       files: {}",
          "82:     }",
          "83:   },",
          "84:   authentication: {},",
          "85:   messaging: {",
          "86:     origin: window?.location?.origin,",
          "87:     channelId: crypto.randomUUID()",
          "88:   },",
          "89:   typesAndSources: {",
          "90:     mode: 'files',",
          "91:     pivots: {",
          "92:       oneDrive: true,",
          "93:       recent: true",
          "94:     }",
          "95:   }",
          "100:   const accessToken = await getToken();",
          "101:   if (!accessToken) {",
          "102:     throw new Error('Unable to retrieve OneDrive access token.');",
          "103:   }",
          "104:   const fileInfoUrl = `${fileInfo[\"@sharePoint.endpoint\"]}/drives/${fileInfo.parentReference.driveId}/items/${fileInfo.id}`;",
          "105:   const response = await fetch(fileInfoUrl, {",
          "106:     headers: {",
          "107:       'Authorization': `Bearer ${accessToken}`",
          "108:     }",
          "109:   });",
          "110:   if (!response.ok) {",
          "111:     throw new Error('Failed to fetch file information.');",
          "112:   }",
          "113:   const fileData = await response.json();",
          "114:   const downloadUrl = fileData['@content.downloadUrl'];",
          "115:   const downloadResponse = await fetch(downloadUrl);",
          "116:   if (!downloadResponse.ok) {",
          "117:     throw new Error('Failed to download file.');",
          "118:   }",
          "119:   return await downloadResponse.blob();",
          "124:   if (typeof window === 'undefined') {",
          "125:     throw new Error('Not in browser environment');",
          "126:   }",
          "127:   return new Promise((resolve, reject) => {",
          "128:     let pickerWindow: Window | null = null;",
          "129:     let channelPort: MessagePort | null = null;",
          "131:     const handleWindowMessage = (event: MessageEvent) => {",
          "132:       if (event.source !== pickerWindow) return;",
          "133:       const message = event.data;",
          "134:       if (message?.type === 'initialize' && message?.channelId === params.messaging.channelId) {",
          "135:         channelPort = event.ports?.[0];",
          "136:         if (!channelPort) return;",
          "137:         channelPort.addEventListener('message', handlePortMessage);",
          "138:         channelPort.start();",
          "139:         channelPort.postMessage({ type: 'activate' });",
          "140:       }",
          "141:     };",
          "143:     const handlePortMessage = async (portEvent: MessageEvent) => {",
          "144:       const portData = portEvent.data;",
          "145:       switch (portData.type) {",
          "146:         case 'notification':",
          "147:           break;",
          "148:         case 'command': {",
          "149:           channelPort?.postMessage({ type: 'acknowledge', id: portData.id });",
          "150:           const command = portData.data;",
          "151:           switch (command.command) {",
          "152:             case 'authenticate': {",
          "153:               try {",
          "154:                 const newToken = await getToken();",
          "155:                 if (newToken) {",
          "156:                   channelPort?.postMessage({",
          "157:                     type: 'result',",
          "158:                     id: portData.id,",
          "159:                     data: { result: 'token', token: newToken }",
          "160:                   });",
          "161:                 } else {",
          "162:                   throw new Error('Could not retrieve auth token');",
          "163:                 }",
          "164:               } catch (err) {",
          "165:                 console.error(err);",
          "166:                 channelPort?.postMessage({",
          "167:                   result: 'error',",
          "168:                   error: { code: 'tokenError', message: 'Failed to get token' },",
          "169:                   isExpected: true",
          "170:                 });",
          "171:               }",
          "172:               break;",
          "173:             }",
          "174:             case 'close': {",
          "175:               cleanup();",
          "176:               resolve(null);",
          "177:               break;",
          "178:             }",
          "179:             case 'pick': {",
          "180:               channelPort?.postMessage({",
          "181:                 type: 'result',",
          "182:                 id: portData.id,",
          "183:                 data: { result: 'success' }",
          "184:               });",
          "185:               cleanup();",
          "186:               resolve(command);",
          "187:               break;",
          "188:             }",
          "189:             default: {",
          "190:               console.warn('Unsupported command:', command);",
          "191:               channelPort?.postMessage({",
          "192:                 result: 'error',",
          "193:                 error: { code: 'unsupportedCommand', message: command.command },",
          "194:                 isExpected: true",
          "195:               });",
          "196:               break;",
          "197:             }",
          "198:           }",
          "199:           break;",
          "200:         }",
          "201:       }",
          "202:     };",
          "204:     function cleanup() {",
          "205:       window.removeEventListener('message', handleWindowMessage);",
          "206:       if (channelPort) {",
          "207:         channelPort.removeEventListener('message', handlePortMessage);",
          "208:       }",
          "209:       if (pickerWindow) {",
          "210:         pickerWindow.close();",
          "211:         pickerWindow = null;",
          "212:       }",
          "213:     }",
          "215:     const initializePicker = async () => {",
          "216:       try {",
          "217:         const authToken = await getToken();",
          "218:         if (!authToken) {",
          "219:           return reject(new Error('Failed to acquire access token'));",
          "220:         }",
          "221:         pickerWindow = window.open('', 'OneDrivePicker', 'width=800,height=600');",
          "222:         if (!pickerWindow) {",
          "223:           return reject(new Error('Failed to open OneDrive picker window'));",
          "224:         }",
          "225:         const queryString = new URLSearchParams({",
          "226:           filePicker: JSON.stringify(params)",
          "227:         });",
          "228:         const url = `${baseUrl}?${queryString.toString()}`;",
          "229:         const form = pickerWindow.document.createElement('form');",
          "230:         form.setAttribute('action', url);",
          "231:         form.setAttribute('method', 'POST');",
          "232:         const input = pickerWindow.document.createElement('input');",
          "233:         input.setAttribute('type', 'hidden');",
          "234:         input.setAttribute('name', 'access_token');",
          "235:         input.setAttribute('value', authToken);",
          "236:         form.appendChild(input);",
          "237:         pickerWindow.document.body.appendChild(form);",
          "238:         form.submit();",
          "239:         window.addEventListener('message', handleWindowMessage);",
          "240:       } catch (err) {",
          "241:         if (pickerWindow) pickerWindow.close();",
          "242:         reject(err);",
          "243:       }",
          "244:     };",
          "246:     initializePicker();",
          "247:   });",
          "252:   try {",
          "253:     const pickerResult = await openOneDrivePicker();",
          "254:     if (!pickerResult || !pickerResult.items || pickerResult.items.length === 0) {",
          "255:       return null;",
          "256:     }",
          "257:     const selectedFile = pickerResult.items[0];",
          "258:     const blob = await downloadOneDriveFile(selectedFile);",
          "259:     return { blob, name: selectedFile.name };",
          "260:   } catch (error) {",
          "261:     console.error('Error occurred during OneDrive file pick/download:', error);",
          "262:     throw error;",
          "263:   }",
          "",
          "[Added Lines]",
          "4:  if (CLIENT_ID) return;",
          "5:  const response = await fetch('/api/config');",
          "6:  if (!response.ok) {",
          "7:   throw new Error('Failed to fetch OneDrive credentials');",
          "8:  }",
          "9:  const config = await response.json();",
          "10:  CLIENT_ID = config.onedrive?.client_id;",
          "11:  if (!CLIENT_ID) {",
          "12:   throw new Error('OneDrive client ID not configured');",
          "13:  }",
          "17:  return new Promise((resolve, reject) => {",
          "18:   const win = window;",
          "19:   if (win.msal) {",
          "20:    resolve();",
          "21:    return;",
          "22:   }",
          "23:   const script = document.createElement('script');",
          "24:   script.src = 'https://alcdn.msauth.net/browser/2.19.0/js/msal-browser.min.js';",
          "25:   script.async = true;",
          "26:   script.onload = () => resolve();",
          "27:   script.onerror = () => reject(new Error('Failed to load MSAL script'));",
          "28:   document.head.appendChild(script);",
          "29:  });",
          "36:  if (!CLIENT_ID) {",
          "37:   await getCredentials();",
          "38:  }",
          "39:  const msalParams = {",
          "40:   auth: {",
          "41:    authority: 'https://login.microsoftonline.com/consumers',",
          "42:    clientId: CLIENT_ID",
          "43:   }",
          "44:  };",
          "45:  try {",
          "46:   await loadMsalScript();",
          "47:   const win = window;",
          "48:   msalInstance = new win.msal.PublicClientApplication(msalParams);",
          "49:   if (msalInstance.initialize) {",
          "50:    await msalInstance.initialize();",
          "51:   }",
          "52:  } catch (error) {",
          "53:   console.error('MSAL initialization error:', error);",
          "54:  }",
          "59:  const authParams = { scopes: ['OneDrive.ReadWrite'] };",
          "60:  let accessToken = '';",
          "61:  try {",
          "62:   await initializeMsal();",
          "63:   const resp = await msalInstance.acquireTokenSilent(authParams);",
          "64:   accessToken = resp.accessToken;",
          "65:  } catch (err) {",
          "66:   const resp = await msalInstance.loginPopup(authParams);",
          "67:   msalInstance.setActiveAccount(resp.account);",
          "68:   if (resp.idToken) {",
          "69:    const resp2 = await msalInstance.acquireTokenSilent(authParams);",
          "70:    accessToken = resp2.accessToken;",
          "71:   }",
          "72:  }",
          "73:  return accessToken;",
          "76: const baseUrl = 'https://onedrive.live.com/picker';",
          "78:  sdk: '8.0',",
          "79:  entry: {",
          "80:   oneDrive: {",
          "81:    files: {}",
          "82:   }",
          "83:  },",
          "84:  authentication: {},",
          "85:  messaging: {",
          "86:   origin: window?.location?.origin,",
          "87:   channelId: crypto.randomUUID()",
          "88:  },",
          "89:  typesAndSources: {",
          "90:   mode: 'files',",
          "91:   pivots: {",
          "92:    oneDrive: true,",
          "93:    recent: true",
          "94:   }",
          "95:  }",
          "100:  const accessToken = await getToken();",
          "101:  if (!accessToken) {",
          "102:   throw new Error('Unable to retrieve OneDrive access token.');",
          "103:  }",
          "104:  const fileInfoUrl = `${fileInfo['@sharePoint.endpoint']}/drives/${fileInfo.parentReference.driveId}/items/${fileInfo.id}`;",
          "105:  const response = await fetch(fileInfoUrl, {",
          "106:   headers: {",
          "107:    Authorization: `Bearer ${accessToken}`",
          "108:   }",
          "109:  });",
          "110:  if (!response.ok) {",
          "111:   throw new Error('Failed to fetch file information.');",
          "112:  }",
          "113:  const fileData = await response.json();",
          "114:  const downloadUrl = fileData['@content.downloadUrl'];",
          "115:  const downloadResponse = await fetch(downloadUrl);",
          "116:  if (!downloadResponse.ok) {",
          "117:   throw new Error('Failed to download file.');",
          "118:  }",
          "119:  return await downloadResponse.blob();",
          "124:  if (typeof window === 'undefined') {",
          "125:   throw new Error('Not in browser environment');",
          "126:  }",
          "127:  return new Promise((resolve, reject) => {",
          "128:   let pickerWindow: Window | null = null;",
          "129:   let channelPort: MessagePort | null = null;",
          "131:   const handleWindowMessage = (event: MessageEvent) => {",
          "132:    if (event.source !== pickerWindow) return;",
          "133:    const message = event.data;",
          "134:    if (message?.type === 'initialize' && message?.channelId === params.messaging.channelId) {",
          "135:     channelPort = event.ports?.[0];",
          "136:     if (!channelPort) return;",
          "137:     channelPort.addEventListener('message', handlePortMessage);",
          "138:     channelPort.start();",
          "139:     channelPort.postMessage({ type: 'activate' });",
          "140:    }",
          "141:   };",
          "143:   const handlePortMessage = async (portEvent: MessageEvent) => {",
          "144:    const portData = portEvent.data;",
          "145:    switch (portData.type) {",
          "146:     case 'notification':",
          "147:      break;",
          "148:     case 'command': {",
          "149:      channelPort?.postMessage({ type: 'acknowledge', id: portData.id });",
          "150:      const command = portData.data;",
          "151:      switch (command.command) {",
          "152:       case 'authenticate': {",
          "153:        try {",
          "154:         const newToken = await getToken();",
          "155:         if (newToken) {",
          "156:          channelPort?.postMessage({",
          "157:           type: 'result',",
          "158:           id: portData.id,",
          "159:           data: { result: 'token', token: newToken }",
          "160:          });",
          "161:         } else {",
          "162:          throw new Error('Could not retrieve auth token');",
          "163:         }",
          "164:        } catch (err) {",
          "165:         console.error(err);",
          "166:         channelPort?.postMessage({",
          "167:          result: 'error',",
          "168:          error: { code: 'tokenError', message: 'Failed to get token' },",
          "169:          isExpected: true",
          "170:         });",
          "171:        }",
          "172:        break;",
          "173:       }",
          "174:       case 'close': {",
          "175:        cleanup();",
          "176:        resolve(null);",
          "177:        break;",
          "178:       }",
          "179:       case 'pick': {",
          "180:        channelPort?.postMessage({",
          "181:         type: 'result',",
          "182:         id: portData.id,",
          "183:         data: { result: 'success' }",
          "184:        });",
          "185:        cleanup();",
          "186:        resolve(command);",
          "187:        break;",
          "188:       }",
          "189:       default: {",
          "190:        console.warn('Unsupported command:', command);",
          "191:        channelPort?.postMessage({",
          "192:         result: 'error',",
          "193:         error: { code: 'unsupportedCommand', message: command.command },",
          "194:         isExpected: true",
          "195:        });",
          "196:        break;",
          "197:       }",
          "198:      }",
          "199:      break;",
          "200:     }",
          "201:    }",
          "202:   };",
          "204:   function cleanup() {",
          "205:    window.removeEventListener('message', handleWindowMessage);",
          "206:    if (channelPort) {",
          "207:     channelPort.removeEventListener('message', handlePortMessage);",
          "208:    }",
          "209:    if (pickerWindow) {",
          "210:     pickerWindow.close();",
          "211:     pickerWindow = null;",
          "212:    }",
          "213:   }",
          "215:   const initializePicker = async () => {",
          "216:    try {",
          "217:     const authToken = await getToken();",
          "218:     if (!authToken) {",
          "219:      return reject(new Error('Failed to acquire access token'));",
          "220:     }",
          "221:     pickerWindow = window.open('', 'OneDrivePicker', 'width=800,height=600');",
          "222:     if (!pickerWindow) {",
          "223:      return reject(new Error('Failed to open OneDrive picker window'));",
          "224:     }",
          "225:     const queryString = new URLSearchParams({",
          "226:      filePicker: JSON.stringify(params)",
          "227:     });",
          "228:     const url = `${baseUrl}?${queryString.toString()}`;",
          "229:     const form = pickerWindow.document.createElement('form');",
          "230:     form.setAttribute('action', url);",
          "231:     form.setAttribute('method', 'POST');",
          "232:     const input = pickerWindow.document.createElement('input');",
          "233:     input.setAttribute('type', 'hidden');",
          "234:     input.setAttribute('name', 'access_token');",
          "235:     input.setAttribute('value', authToken);",
          "236:     form.appendChild(input);",
          "237:     pickerWindow.document.body.appendChild(form);",
          "238:     form.submit();",
          "239:     window.addEventListener('message', handleWindowMessage);",
          "240:    } catch (err) {",
          "241:     if (pickerWindow) pickerWindow.close();",
          "242:     reject(err);",
          "243:    }",
          "244:   };",
          "246:   initializePicker();",
          "247:  });",
          "252:  try {",
          "253:   const pickerResult = await openOneDrivePicker();",
          "254:   if (!pickerResult || !pickerResult.items || pickerResult.items.length === 0) {",
          "255:    return null;",
          "256:   }",
          "257:   const selectedFile = pickerResult.items[0];",
          "258:   const blob = await downloadOneDriveFile(selectedFile);",
          "259:   return { blob, name: selectedFile.name };",
          "260:  } catch (error) {",
          "261:   console.error('Error occurred during OneDrive file pick/download:', error);",
          "262:   throw error;",
          "263:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "642dcd4b702a8e189c0d04e6899218797763a083",
      "candidate_info": {
        "commit_hash": "642dcd4b702a8e189c0d04e6899218797763a083",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/642dcd4b702a8e189c0d04e6899218797763a083",
        "files": [
          "src/lib/components/workspace/Models/ModelEditor.svelte",
          "src/routes/(app)/workspace/models/create/+page.svelte"
        ],
        "message": "fix: model import",
        "before_after_code_files": [
          "src/lib/components/workspace/Models/ModelEditor.svelte||src/lib/components/workspace/Models/ModelEditor.svelte",
          "src/routes/(app)/workspace/models/create/+page.svelte||src/routes/(app)/workspace/models/create/+page.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/workspace/Models/ModelEditor.svelte||src/lib/components/workspace/Models/ModelEditor.svelte": [
          "File: src/lib/components/workspace/Models/ModelEditor.svelte -> src/lib/components/workspace/Models/ModelEditor.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:   }",
          "182:   if (model) {",
          "184:    name = model.name;",
          "185:    await tick();",
          "",
          "[Removed Lines]",
          "183:    console.log(model);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/routes/(app)/workspace/models/create/+page.svelte||src/routes/(app)/workspace/models/create/+page.svelte": [
          "File: src/routes/(app)/workspace/models/create/+page.svelte -> src/routes/(app)/workspace/models/create/+page.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     !['https://openwebui.com', 'https://www.openwebui.com', 'http://localhost:5173'].includes(",
          "63:      event.origin",
          "64:     )",
          "66:     return;",
          "68:   });",
          "70:   if (window.opener ?? false) {",
          "",
          "[Removed Lines]",
          "65:    )",
          "67:    model = JSON.parse(event.data);",
          "",
          "[Added Lines]",
          "65:    ) {",
          "67:    }",
          "69:    let data = JSON.parse(event.data);",
          "71:    if (data?.info) {",
          "72:     data = data.info;",
          "73:    }",
          "75:    model = data;",
          "",
          "---------------"
        ]
      }
    }
  ]
}