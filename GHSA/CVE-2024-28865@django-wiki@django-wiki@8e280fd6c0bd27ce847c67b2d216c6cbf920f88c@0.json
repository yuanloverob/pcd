{
  "cve_id": "CVE-2024-28865",
  "cve_desc": "django-wiki is a wiki system for Django. Installations of django-wiki prior to version 0.10.1 are vulnerable to maliciously crafted article content that can cause severe use of server CPU through a regular expression loop. Version 0.10.1 fixes this issue. As a workaround, close off access to create and edit articles by anonymous users.",
  "repo": "django-wiki/django-wiki",
  "patch_hash": "8e280fd6c0bd27ce847c67b2d216c6cbf920f88c",
  "patch_info": {
    "commit_hash": "8e280fd6c0bd27ce847c67b2d216c6cbf920f88c",
    "repo": "django-wiki/django-wiki",
    "commit_url": "https://github.com/django-wiki/django-wiki/commit/8e280fd6c0bd27ce847c67b2d216c6cbf920f88c",
    "files": [
      "docs/release_notes.rst",
      "src/wiki/core/markdown/mdx/codehilite.py",
      "src/wiki/plugins/macros/mdx/macro.py",
      "src/wiki/templatetags/wiki_tags.py",
      "tests/plugins/macros/test_toc.py"
    ],
    "message": "Merge pull request from GHSA-wj85-w4f4-xh8h (#1350)\n\n* ReDos: Apply `re.escape` to unsafe variable `keyword` before passing to `re.compile`\n\n* Replace ReDos-vulnerable regex with the one from upstream Python-Markdown\n\n* ReDos backtracking fix for macro plugin\n\n* Add release note for GHSA-wj85-w4f4-xh8h\n\n* Bump release date\n\n* Bump version",
    "before_after_code_files": [
      "src/wiki/core/markdown/mdx/codehilite.py||src/wiki/core/markdown/mdx/codehilite.py",
      "src/wiki/plugins/macros/mdx/macro.py||src/wiki/plugins/macros/mdx/macro.py",
      "src/wiki/templatetags/wiki_tags.py||src/wiki/templatetags/wiki_tags.py",
      "tests/plugins/macros/test_toc.py||tests/plugins/macros/test_toc.py"
    ]
  },
  "patch_diff": {
    "src/wiki/core/markdown/mdx/codehilite.py||src/wiki/core/markdown/mdx/codehilite.py": [
      "File: src/wiki/core/markdown/mdx/codehilite.py -> src/wiki/core/markdown/mdx/codehilite.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import logging",
      "2: import re",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: from textwrap import dedent",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35:     \"\"\"",
      "37:     FENCED_BLOCK_RE = re.compile(",
      "46:         re.MULTILINE | re.DOTALL | re.VERBOSE,",
      "47:     )",
      "48:     CODE_WRAP = \"<pre>%s</pre>\"",
      "",
      "[Removed Lines]",
      "38:         r\"\"\"",
      "39: (?P<fence>^(?:~{3,}|`{3,}))[ ]*         # Opening ``` or ~~~",
      "40: (\\{?\\.?(?P<lang>[a-zA-Z0-9_+-]*))?[ ]*  # Optional {, and lang",
      "41: # Optional highlight lines, single- or double-quote-delimited",
      "42: (hl_lines=(?P<quot>\"|')(?P<hl_lines>.*?)(?P=quot))?[ ]*",
      "43: }?[ ]*\\n                                # Optional closing }",
      "44: (?P<code>.*?)(?<=\\n)",
      "45: (?P=fence)[ ]*$\"\"\",",
      "",
      "[Added Lines]",
      "41:         dedent(",
      "42:             r\"\"\"",
      "43:             (?P<fence>^(?:~{3,}|`{3,}))[ ]*                          # opening fence",
      "44:             ((\\{(?P<attrs>[^\\}\\n]*)\\})|                              # (optional {attrs} or",
      "45:             (\\.?(?P<lang>[\\w#.+-]*)[ ]*)?                            # optional (.)lang",
      "46:             (hl_lines=(?P<quot>\"|')(?P<hl_lines>.*?)(?P=quot)[ ]*)?) # optional hl_lines)",
      "47:             \\n                                                       # newline (end of opening fence)",
      "48:             (?P<code>.*?)(?<=\\n)                                     # the code block",
      "49:             (?P=fence)[ ]*$                                          # closing fence",
      "50:         \"\"\"",
      "51:         ),",
      "",
      "---------------"
    ],
    "src/wiki/plugins/macros/mdx/macro.py||src/wiki/plugins/macros/mdx/macro.py": [
      "File: src/wiki/plugins/macros/mdx/macro.py -> src/wiki/plugins/macros/mdx/macro.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: # http://stackoverflow.com/questions/430759/regex-for-managing-escaped-characters-for-items-like-string-literals",
      "12: re_sq_short = r\"'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'\"",
      "15: KWARG_RE = re.compile(",
      "16:     r\"\\s*(?P<arg>\\w+)(:(?P<value>([^\\']+|%s)))?\" % re_sq_short, re.IGNORECASE",
      "17: )",
      "",
      "[Removed Lines]",
      "14: MACRO_RE = r\"(\\[(?P<macro>\\w+)(?P<kwargs>\\s\\w+\\:.+)*\\])\"",
      "",
      "[Added Lines]",
      "15: MACRO_RE = (",
      "16:     r\"\"\"\\[(?P<macro>\\w+)(?P<kwargs>(\\s+\\w+\\:([^\\:\\]\\s]+|'[^']+'))+)*\\]\"\"\"",
      "17: )",
      "",
      "---------------"
    ],
    "src/wiki/templatetags/wiki_tags.py||src/wiki/templatetags/wiki_tags.py": [
      "File: src/wiki/templatetags/wiki_tags.py -> src/wiki/templatetags/wiki_tags.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "129:         before = \" \".join(before_words)",
      "130:         after = \" \".join(after_words)",
      "131:         html = (\"%s %s %s\" % (before, striptags(match), after)).strip()",
      "133:         html = kw_p.sub(r\"<strong>\\1</strong>\", html)",
      "135:         return mark_safe(html)",
      "",
      "[Removed Lines]",
      "132:         kw_p = re.compile(r\"(\\S*%s\\S*)\" % keyword, re.IGNORECASE)",
      "",
      "[Added Lines]",
      "132:         kw_p = re.compile(r\"(\\S*%s\\S*)\" % re.escape(keyword), re.IGNORECASE)",
      "",
      "---------------"
    ],
    "tests/plugins/macros/test_toc.py||tests/plugins/macros/test_toc.py": [
      "File: tests/plugins/macros/test_toc.py -> tests/plugins/macros/test_toc.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: class TocMacroTests(TestCase):",
      "11:     def test_toc_renders_table_of_content(self):",
      "12:         \"\"\"Verifies that the [TOC] wiki code renders a Table of Content\"\"\"",
      "13:         md = Markdown(extensions=[\"extra\", WikiTocExtension()])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11:     maxDiff = None",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2a15644ba6c94cb1e66744ac5ef618d7e6d6125a",
      "candidate_info": {
        "commit_hash": "2a15644ba6c94cb1e66744ac5ef618d7e6d6125a",
        "repo": "django-wiki/django-wiki",
        "commit_url": "https://github.com/django-wiki/django-wiki/commit/2a15644ba6c94cb1e66744ac5ef618d7e6d6125a",
        "files": [
          "docs/release_notes.rst",
          "src/wiki/__about__.py",
          "src/wiki/core/markdown/mdx/codehilite.py",
          "src/wiki/plugins/macros/mdx/macro.py",
          "src/wiki/templatetags/wiki_tags.py",
          "tests/plugins/macros/test_toc.py"
        ],
        "message": "Merge pull request from GHSA-wj85-w4f4-xh8h\n\n* ReDos: Apply `re.escape` to unsafe variable `keyword` before passing to `re.compile`\n\n* Replace ReDos-vulnerable regex with the one from upstream Python-Markdown\n\n* ReDos backtracking fix for macro plugin\n\n* Add release note for GHSA-wj85-w4f4-xh8h\n\n* Bump release date\n\n* Bump version",
        "before_after_code_files": [
          "src/wiki/__about__.py||src/wiki/__about__.py",
          "src/wiki/core/markdown/mdx/codehilite.py||src/wiki/core/markdown/mdx/codehilite.py",
          "src/wiki/plugins/macros/mdx/macro.py||src/wiki/plugins/macros/mdx/macro.py",
          "src/wiki/templatetags/wiki_tags.py||src/wiki/templatetags/wiki_tags.py",
          "tests/plugins/macros/test_toc.py||tests/plugins/macros/test_toc.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/django-wiki/django-wiki/pull/1350"
        ],
        "olp_code_files": {
          "patch": [
            "src/wiki/core/markdown/mdx/codehilite.py||src/wiki/core/markdown/mdx/codehilite.py",
            "src/wiki/plugins/macros/mdx/macro.py||src/wiki/plugins/macros/mdx/macro.py",
            "src/wiki/templatetags/wiki_tags.py||src/wiki/templatetags/wiki_tags.py",
            "tests/plugins/macros/test_toc.py||tests/plugins/macros/test_toc.py"
          ],
          "candidate": [
            "src/wiki/core/markdown/mdx/codehilite.py||src/wiki/core/markdown/mdx/codehilite.py",
            "src/wiki/plugins/macros/mdx/macro.py||src/wiki/plugins/macros/mdx/macro.py",
            "src/wiki/templatetags/wiki_tags.py||src/wiki/templatetags/wiki_tags.py",
            "tests/plugins/macros/test_toc.py||tests/plugins/macros/test_toc.py"
          ]
        }
      },
      "candidate_diff": {
        "src/wiki/__about__.py||src/wiki/__about__.py": [
          "File: src/wiki/__about__.py -> src/wiki/__about__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: __version__ = \"0.10\"",
          "",
          "[Added Lines]",
          "1: __version__ = \"0.10.1\"",
          "",
          "---------------"
        ],
        "src/wiki/core/markdown/mdx/codehilite.py||src/wiki/core/markdown/mdx/codehilite.py": [
          "File: src/wiki/core/markdown/mdx/codehilite.py -> src/wiki/core/markdown/mdx/codehilite.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import logging",
          "2: import re",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: from textwrap import dedent",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     \"\"\"",
          "37:     FENCED_BLOCK_RE = re.compile(",
          "46:         re.MULTILINE | re.DOTALL | re.VERBOSE,",
          "47:     )",
          "48:     CODE_WRAP = \"<pre>%s</pre>\"",
          "",
          "[Removed Lines]",
          "38:         r\"\"\"",
          "39: (?P<fence>^(?:~{3,}|`{3,}))[ ]*         # Opening ``` or ~~~",
          "40: (\\{?\\.?(?P<lang>[a-zA-Z0-9_+-]*))?[ ]*  # Optional {, and lang",
          "41: # Optional highlight lines, single- or double-quote-delimited",
          "42: (hl_lines=(?P<quot>\"|')(?P<hl_lines>.*?)(?P=quot))?[ ]*",
          "43: }?[ ]*\\n                                # Optional closing }",
          "44: (?P<code>.*?)(?<=\\n)",
          "45: (?P=fence)[ ]*$\"\"\",",
          "",
          "[Added Lines]",
          "41:         dedent(",
          "42:             r\"\"\"",
          "43:             (?P<fence>^(?:~{3,}|`{3,}))[ ]*                          # opening fence",
          "44:             ((\\{(?P<attrs>[^\\}\\n]*)\\})|                              # (optional {attrs} or",
          "45:             (\\.?(?P<lang>[\\w#.+-]*)[ ]*)?                            # optional (.)lang",
          "46:             (hl_lines=(?P<quot>\"|')(?P<hl_lines>.*?)(?P=quot)[ ]*)?) # optional hl_lines)",
          "47:             \\n                                                       # newline (end of opening fence)",
          "48:             (?P<code>.*?)(?<=\\n)                                     # the code block",
          "49:             (?P=fence)[ ]*$                                          # closing fence",
          "50:         \"\"\"",
          "51:         ),",
          "",
          "---------------"
        ],
        "src/wiki/plugins/macros/mdx/macro.py||src/wiki/plugins/macros/mdx/macro.py": [
          "File: src/wiki/plugins/macros/mdx/macro.py -> src/wiki/plugins/macros/mdx/macro.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: # http://stackoverflow.com/questions/430759/regex-for-managing-escaped-characters-for-items-like-string-literals",
          "11: re_sq_short = r\"'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'\"",
          "14: KWARG_RE = re.compile(",
          "15:     r\"\\s*(?P<arg>\\w+)(:(?P<value>([^\\']+|%s)))?\" % re_sq_short, re.IGNORECASE",
          "16: )",
          "",
          "[Removed Lines]",
          "13: MACRO_RE = r\"(\\[(?P<macro>\\w+)(?P<kwargs>\\s\\w+\\:.+)*\\])\"",
          "",
          "[Added Lines]",
          "14: MACRO_RE = r\"\"\"\\[(?P<macro>\\w+)(?P<kwargs>(\\s+\\w+\\:([^\\:\\]\\s]+|'[^']+'))+)*\\]\"\"\"",
          "",
          "---------------"
        ],
        "src/wiki/templatetags/wiki_tags.py||src/wiki/templatetags/wiki_tags.py": [
          "File: src/wiki/templatetags/wiki_tags.py -> src/wiki/templatetags/wiki_tags.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:         before = \" \".join(before_words)",
          "132:         after = \" \".join(after_words)",
          "133:         html = (\"%s %s %s\" % (before, striptags(match), after)).strip()",
          "135:         html = kw_p.sub(r\"<strong>\\1</strong>\", html)",
          "137:         return mark_safe(html)",
          "",
          "[Removed Lines]",
          "134:         kw_p = re.compile(r\"(\\S*%s\\S*)\" % keyword, re.IGNORECASE)",
          "",
          "[Added Lines]",
          "134:         kw_p = re.compile(r\"(\\S*%s\\S*)\" % re.escape(keyword), re.IGNORECASE)",
          "",
          "---------------"
        ],
        "tests/plugins/macros/test_toc.py||tests/plugins/macros/test_toc.py": [
          "File: tests/plugins/macros/test_toc.py -> tests/plugins/macros/test_toc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: class TocMacroTests(TestCase):",
          "7:     def test_toc_renders_table_of_content(self):",
          "8:         \"\"\"Verifies that the [TOC] wiki code renders a Table of Content\"\"\"",
          "9:         md = markdown.Markdown(extensions=[\"extra\", WikiTocExtension()])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:     maxDiff = None",
          "",
          "---------------"
        ]
      }
    }
  ]
}