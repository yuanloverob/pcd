{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "03759e79a39a8a8a7e08567bbca7eb9695067977",
      "candidate_info": {
        "commit_hash": "03759e79a39a8a8a7e08567bbca7eb9695067977",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/03759e79a39a8a8a7e08567bbca7eb9695067977",
        "files": [
          "src/lib/components/chat/Messages/ResponseMessage.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Messages/ResponseMessage.svelte||src/lib/components/chat/Messages/ResponseMessage.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Messages/ResponseMessage.svelte||src/lib/components/chat/Messages/ResponseMessage.svelte": [
          "File: src/lib/components/chat/Messages/ResponseMessage.svelte -> src/lib/components/chat/Messages/ResponseMessage.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "582:   id=\"message-{message.id}\"",
          "583:   dir={$settings.chatDirection}",
          "584:  >",
          "586:    <ProfileImage",
          "587:     src={model?.info?.meta?.profile_image_url ??",
          "588:      ($i18n.language === 'dg-DG' ? `/doge.png` : `${WEBUI_BASE_URL}/static/favicon.png`)}",
          "",
          "[Removed Lines]",
          "585:   <div class={`shrink-0 ${($settings?.chatDirection ?? 'LTR') === 'LTR' ? 'mr-3' : 'ml-3'}`}>",
          "",
          "[Added Lines]",
          "585:   <div class={`shrink-0 ltr:mr-3 rtl:ml-3`}>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c77e6fdb3f1672b6c2bcc4af45d05f2a1f98b62",
      "candidate_info": {
        "commit_hash": "6c77e6fdb3f1672b6c2bcc4af45d05f2a1f98b62",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/6c77e6fdb3f1672b6c2bcc4af45d05f2a1f98b62",
        "files": [
          "src/lib/components/chat/ModelSelector/Selector.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/ModelSelector/Selector.svelte||src/lib/components/chat/ModelSelector/Selector.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/ModelSelector/Selector.svelte||src/lib/components/chat/ModelSelector/Selector.svelte": [
          "File: src/lib/components/chat/ModelSelector/Selector.svelte -> src/lib/components/chat/ModelSelector/Selector.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:   ollamaVersion = await getOllamaVersion(localStorage.token).catch((error) => false);",
          "236:   if (items) {",
          "239:   }",
          "240:  });",
          "",
          "[Removed Lines]",
          "237:    tags = items.flatMap((item) => item.model?.info?.meta?.tags ?? []);",
          "238:    tags = [...new Set(tags)].map((tag) => tag.name).sort();",
          "",
          "[Added Lines]",
          "237:    tags = items.flatMap((item) => item.model?.info?.meta?.tags ?? []).map((tag) => tag.name);",
          "240:    tags = Array.from(new Set(tags)).sort((a, b) => a.localeCompare(b));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "911321878f1c77be078981597d614c065c4b0c16",
      "candidate_info": {
        "commit_hash": "911321878f1c77be078981597d614c065c4b0c16",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/911321878f1c77be078981597d614c065c4b0c16",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1811:                 await stream_body_handler(response)",
          "1814:                 tool_call_retries = 0",
          "1816:                 while len(tool_calls) > 0 and tool_call_retries < MAX_TOOL_CALL_RETRIES:",
          "",
          "[Removed Lines]",
          "1813:                 MAX_TOOL_CALL_RETRIES = 5",
          "",
          "[Added Lines]",
          "1813:                 MAX_TOOL_CALL_RETRIES = 10",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d59433bf7ed12be1c7c9f677c7774f1eb4c565e5",
      "candidate_info": {
        "commit_hash": "d59433bf7ed12be1c7c9f677c7774f1eb4c565e5",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/d59433bf7ed12be1c7c9f677c7774f1eb4c565e5",
        "files": [
          "src/lib/components/admin/Settings/Images.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/admin/Settings/Images.svelte||src/lib/components/admin/Settings/Images.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Settings/Images.svelte||src/lib/components/admin/Settings/Images.svelte": [
          "File: src/lib/components/admin/Settings/Images.svelte -> src/lib/components/admin/Settings/Images.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:    }",
          "193:    if (config.comfyui.COMFYUI_WORKFLOW) {",
          "199:    }",
          "201:    requiredWorkflowNodes = requiredWorkflowNodes.map((node) => {",
          "",
          "[Removed Lines]",
          "194:     config.comfyui.COMFYUI_WORKFLOW = JSON.stringify(",
          "195:      JSON.parse(config.comfyui.COMFYUI_WORKFLOW),",
          "196:      null,",
          "197:      2",
          "198:     );",
          "",
          "[Added Lines]",
          "194:     try {",
          "195:      config.comfyui.COMFYUI_WORKFLOW = JSON.stringify(",
          "196:       JSON.parse(config.comfyui.COMFYUI_WORKFLOW),",
          "197:       null,",
          "198:       2",
          "199:      );",
          "200:     } catch (e) {",
          "201:      console.log(e);",
          "202:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b612af29e9444d913469b1f5fb1bbad58281b87f",
      "candidate_info": {
        "commit_hash": "b612af29e9444d913469b1f5fb1bbad58281b87f",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/b612af29e9444d913469b1f5fb1bbad58281b87f",
        "files": [
          "src/lib/components/chat/MessageInput/Commands/Prompts.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/MessageInput/Commands/Prompts.svelte||src/lib/components/chat/MessageInput/Commands/Prompts.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/MessageInput/Commands/Prompts.svelte||src/lib/components/chat/MessageInput/Commands/Prompts.svelte": [
          "File: src/lib/components/chat/MessageInput/Commands/Prompts.svelte -> src/lib/components/chat/MessageInput/Commands/Prompts.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:    chatInputElement.focus();",
          "153:    chatInputElement.dispatchEvent(new Event('input'));",
          "156:   }",
          "157:  };",
          "158: </script>",
          "",
          "[Removed Lines]",
          "155:    chatInputElement.scrollTop = chatInputElement.scrollHeight;",
          "",
          "[Added Lines]",
          "155:    const words = extractCurlyBraceWords(prompt);",
          "157:    if (words.length > 0) {",
          "158:     const word = words.at(0);",
          "159:     const fullPrompt = prompt;",
          "161:     prompt = prompt.substring(0, word?.endIndex + 1);",
          "162:     await tick();",
          "164:     chatInputElement.scrollTop = chatInputElement.scrollHeight;",
          "166:     prompt = fullPrompt;",
          "167:     await tick();",
          "169:     chatInputElement.setSelectionRange(word?.startIndex, word.endIndex + 1);",
          "170:    } else {",
          "171:     chatInputElement.scrollTop = chatInputElement.scrollHeight;",
          "172:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}