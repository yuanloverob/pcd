{
  "cve_id": "CVE-2024-24765",
  "cve_desc": "CasaOS-UserService provides user management functionalities to CasaOS. Prior to version 0.4.7, path filtering of the URL for user avatar image files was not strict, making it possible to get any file on the system. This could allow an unauthorized actor to access, for example, the CasaOS user database, and possibly obtain system root privileges. Version 0.4.7 fixes this issue.",
  "repo": "IceWhaleTech/CasaOS-UserService",
  "patch_hash": "3f4558e23c0a9958f9a0e20aabc64aa8fd51840e",
  "patch_info": {
    "commit_hash": "3f4558e23c0a9958f9a0e20aabc64aa8fd51840e",
    "repo": "IceWhaleTech/CasaOS-UserService",
    "commit_url": "https://github.com/IceWhaleTech/CasaOS-UserService/commit/3f4558e23c0a9958f9a0e20aabc64aa8fd51840e",
    "files": [
      "route/v1/user.go"
    ],
    "message": "Merge pull request from GHSA-h5gf-cmm8-cg7c",
    "before_after_code_files": [
      "route/v1/user.go||route/v1/user.go"
    ]
  },
  "patch_diff": {
    "route/v1/user.go||route/v1/user.go": [
      "File: route/v1/user.go -> route/v1/user.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "13:  \"os\"",
      "14:  \"path\"",
      "15:  \"path/filepath\"",
      "16:  \"strconv\"",
      "17:  \"strings\"",
      "18:  \"time\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16:  \"regexp\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "667:   return",
      "668:  }",
      "670:  fileTmp, _ := os.Open(filePath)",
      "671:  defer fileTmp.Close()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "668:   return",
      "669:  }",
      "671:  matched, err := regexp.MatchString(`^/var/lib/casaos/\\d`, filePath)",
      "672:  if err != nil {",
      "673:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.INSUFFICIENT_PERMISSIONS, Message: common_err.GetMsg(common_err.INSUFFICIENT_PERMISSIONS)})",
      "674:   return",
      "675:  }",
      "676:  if !matched {",
      "677:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.INSUFFICIENT_PERMISSIONS, Message: common_err.GetMsg(common_err.INSUFFICIENT_PERMISSIONS)})",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "faeb91c26625e31db3398b0c40854aa3433bf993",
      "candidate_info": {
        "commit_hash": "faeb91c26625e31db3398b0c40854aa3433bf993",
        "repo": "IceWhaleTech/CasaOS-UserService",
        "commit_url": "https://github.com/IceWhaleTech/CasaOS-UserService/commit/faeb91c26625e31db3398b0c40854aa3433bf993",
        "files": [
          "go.mod",
          "go.sum",
          "pkg/utils/file/file.go",
          "route/v1.go",
          "route/v1/user.go"
        ],
        "message": "feat: migrate gin to echo (#44)",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/utils/file/file.go||pkg/utils/file/file.go",
          "route/v1.go||route/v1.go",
          "route/v1/user.go||route/v1/user.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "route/v1/user.go||route/v1/user.go"
          ],
          "candidate": [
            "route/v1/user.go||route/v1/user.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  github.com/coreos/go-systemd v0.0.0-20191104093116-d3cd4ed1dbcf",
          "8:  github.com/deepmap/oapi-codegen v1.12.4",
          "9:  github.com/getkin/kin-openapi v0.117.0",
          "12:  github.com/glebarez/sqlite v1.8.0",
          "13:  github.com/labstack/echo/v4 v4.10.2",
          "14:  github.com/satori/go.uuid v1.2.0",
          "",
          "[Removed Lines]",
          "10:  github.com/gin-contrib/gzip v0.0.6",
          "11:  github.com/gin-gonic/gin v1.9.1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:  github.com/dustin/go-humanize v1.0.1 // indirect",
          "30:  github.com/gabriel-vasile/mimetype v1.4.2 // indirect",
          "31:  github.com/gin-contrib/sse v0.1.0 // indirect",
          "32:  github.com/glebarez/go-sqlite v1.21.1 // indirect",
          "33:  github.com/go-openapi/jsonpointer v0.19.6 // indirect",
          "34:  github.com/go-openapi/swag v0.22.3 // indirect",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:  github.com/gin-gonic/gin v1.9.1 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: github.com/gabriel-vasile/mimetype v1.4.2/go.mod h1:zApsH/mKG4w07erKIaJPFiX0Tsq9BFQgN3qGY5GnNgA=",
          "29: github.com/getkin/kin-openapi v0.117.0 h1:QT2DyGujAL09F4NrKDHJGsUoIprlIcFVHWDVDcUFE8A=",
          "30: github.com/getkin/kin-openapi v0.117.0/go.mod h1:l5e9PaFUo9fyLJCPGQeXI2ML8c3P8BHOEV2VaAVf/pc=",
          "33: github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=",
          "34: github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=",
          "36: github.com/gin-gonic/gin v1.9.1 h1:4idEAncQnU5cB7BeOkPtxjfCSye0AAm1R0RVIqJ+Jmg=",
          "37: github.com/gin-gonic/gin v1.9.1/go.mod h1:hPrL7YrpYKXt5YId3A/Tnip5kqbEAP+KLuI3SUcPTeU=",
          "38: github.com/glebarez/go-sqlite v1.21.1 h1:7MZyUPh2XTrHS7xNEHQbrhfMZuPSzhkm2A1qgg0y5NY=",
          "",
          "[Removed Lines]",
          "31: github.com/gin-contrib/gzip v0.0.6 h1:NjcunTcGAj5CO1gn4N8jHOSIeRFHIbn51z6K+xaN4d4=",
          "32: github.com/gin-contrib/gzip v0.0.6/go.mod h1:QOJlmV2xmayAjkNS2Y8NQsMneuRShOU/kjovCXNuzzk=",
          "35: github.com/gin-gonic/gin v1.8.1/go.mod h1:ji8BvRH1azfM+SYow9zQ6SZMvR8qOMZHmsCuWR9tTTk=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: github.com/go-openapi/swag v0.19.5/go.mod h1:POnQmlKehdgb5mhVOsnJFsivZCEZ/vjK9gh66Z9tfKk=",
          "46: github.com/go-openapi/swag v0.22.3 h1:yMBqmnQ0gyZvEb/+KzuWZOXgllrXT4SADYbvDaXHv/g=",
          "47: github.com/go-openapi/swag v0.22.3/go.mod h1:UzaqsxGiab7freDnrUUra0MwWfN/q7tE4j+VcZ0yl14=",
          "49: github.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=",
          "51: github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=",
          "52: github.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=",
          "54: github.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=",
          "55: github.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=",
          "57: github.com/go-playground/validator/v10 v10.14.0 h1:vgvQWe3XCz3gIeFDm/HnTIbj6UGmg/+t63MyGU2n5js=",
          "58: github.com/go-playground/validator/v10 v10.14.0/go.mod h1:9iXMNT7sEkjXb0I+enO7QXmzG6QCsPWY4zveKFVRSyU=",
          "59: github.com/go-test/deep v1.0.8 h1:TDsG77qcSprGbC6vTN8OuXp5g+J+b5Pcguhf7Zt61VM=",
          "60: github.com/go-test/deep v1.0.8/go.mod h1:5C2ZWiW0ErCdrYzpqxLbTX7MG14M9iiw8DgHncVwcsE=",
          "62: github.com/goccy/go-json v0.10.2 h1:CrxCmQqYDkv1z7lO7Wbh2HN93uovUHgrECaO5ZrCXAU=",
          "63: github.com/goccy/go-json v0.10.2/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=",
          "64: github.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=",
          "",
          "[Removed Lines]",
          "48: github.com/go-playground/assert/v2 v2.0.1/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=",
          "50: github.com/go-playground/locales v0.14.0/go.mod h1:sawfccIbzZTqEDETgFXqTho0QybSa7l++s0DH+LDiLs=",
          "53: github.com/go-playground/universal-translator v0.18.0/go.mod h1:UvRDBj+xPUEGrFYl+lu/H90nyDXpg0fqeB/AQUGNTVA=",
          "56: github.com/go-playground/validator/v10 v10.10.0/go.mod h1:74x4gJWsvQexRdW8Pn3dXSGrTK4nAUsbPlLADvpJkos=",
          "61: github.com/goccy/go-json v0.9.7/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95: github.com/klauspost/cpuid/v2 v2.2.4/go.mod h1:RVVoqg1df56z8g3pUjL/3lE5UfnlrJX8tyFgg4nqhuY=",
          "96: github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=",
          "97: github.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=",
          "99: github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=",
          "100: github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=",
          "101: github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=",
          "",
          "[Removed Lines]",
          "98: github.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106: github.com/labstack/echo/v4 v4.10.2/go.mod h1:OEyqf2//K1DFdE57vw2DRgWY0M7s65IVQO2FzvI4J5k=",
          "107: github.com/labstack/gommon v0.4.0 h1:y7cvthEAEbU0yHOf4axH8ZG2NH8knB9iNSoTO8dyIk8=",
          "108: github.com/labstack/gommon v0.4.0/go.mod h1:uW6kP17uPlLJsD3ijUYn3/M5bAxtlZhMI6m3MFxTMTM=",
          "110: github.com/leodido/go-urn v1.2.4 h1:XlAE/cm/ms7TE/VMVoduSpNBoyc2dOxHs5MZSwAN63Q=",
          "111: github.com/leodido/go-urn v1.2.4/go.mod h1:7ZrI8mTSeBSHl/UaRyKQW1qZeMgak41ANeCNaVckg+4=",
          "112: github.com/mailru/easyjson v0.0.0-20190614124828-94de47d64c63/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=",
          "",
          "[Removed Lines]",
          "109: github.com/leodido/go-urn v1.2.1/go.mod h1:zt4jvISO2HfUBqxjfIshjdMTYS56ZS/qv49ictyFfxY=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127: github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=",
          "128: github.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826 h1:RWengNIwukTxcDr9M+97sNutRR1RKhG96O6jWumTTnw=",
          "129: github.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826/go.mod h1:TaXosZuwdSHYgviHp1DAtfrULt5eUgsSMsZf+YrPgl8=",
          "131: github.com/pelletier/go-toml/v2 v2.0.8 h1:0ctb6s9mE31h0/lhu+J6OPmVeDxJn+kYnJc2jZR9tGQ=",
          "132: github.com/pelletier/go-toml/v2 v2.0.8/go.mod h1:vuYfssBdrU2XDZ9bYydBu6t+6a6PYNcZljzZR9VXg+4=",
          "133: github.com/perimeterx/marshmallow v1.1.4 h1:pZLDH9RjlLGGorbXhcaQLhfuV0pFMNfPO55FuFkxqLw=",
          "",
          "[Removed Lines]",
          "130: github.com/pelletier/go-toml/v2 v2.0.1/go.mod h1:r9LEWfGN8R5k0VXJ+0BkIe7MYkRdwZOjgMj2KwnJFUo=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "139: github.com/remyoudompheng/bigfft v0.0.0-20200410134404-eec4a21b6bb0/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=",
          "140: github.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec h1:W09IVJc94icq4NjY3clb7Lk8O1qJ8BdBEF8z0ibU0rE=",
          "141: github.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=",
          "144: github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=",
          "145: github.com/rogpeppe/go-internal v1.10.0 h1:TMyTOH3F/DB16zRVcYyreMH6GnZZrwQVAoYjRBZyWFQ=",
          "146: github.com/rogpeppe/go-internal v1.10.0/go.mod h1:UQnix2H7Ngw/k4C5ijL5+65zddjncjaFoBhdsK/akog=",
          "",
          "[Removed Lines]",
          "142: github.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=",
          "143: github.com/rogpeppe/go-internal v1.8.0/go.mod h1:WmiCO8CzOY8rg0OYDC4/i/2WRWAB6poM+XZ2dLUbcbE=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "153: github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=",
          "154: github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=",
          "155: github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=",
          "157: github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=",
          "158: github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=",
          "159: github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=",
          "",
          "[Removed Lines]",
          "156: github.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "190: golang.org/x/arch v0.0.0-20210923205945-b76863e36670/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=",
          "191: golang.org/x/arch v0.3.0 h1:02VY4/ZcO/gBOH6PUaoiptASxtXU10jazRCP865E97k=",
          "192: golang.org/x/arch v0.3.0/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=",
          "194: golang.org/x/crypto v0.14.0 h1:wBqGXzWJW6m1XrIKlAH0Hs1JJ7+9KBwnIO8v66Q9cHc=",
          "195: golang.org/x/crypto v0.14.0/go.mod h1:MVFd36DqK4CsrnJYDkBA3VC4m2GkXAM0PvzMCn4JQf4=",
          "196: golang.org/x/exp v0.0.0-20230713183714-613f0c0eb8a1 h1:MGwJjxBy0HJshjDNfLsYO8xppfqWlA5ZT9OhtUUhTNw=",
          "197: golang.org/x/exp v0.0.0-20230713183714-613f0c0eb8a1/go.mod h1:FXUEEKJgO7OQYeo8N01OfiKP8RXMtf6e8aTskBGqWdc=",
          "199: golang.org/x/net v0.17.0 h1:pVaXccu2ozPjCXewfr1S7xza/zcXTity9cCdXQYSjIM=",
          "200: golang.org/x/net v0.17.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=",
          "203: golang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "205: golang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "206: golang.org/x/sys v0.0.0-20211103235746-7861aae1554b/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "207: golang.org/x/sys v0.0.0-20220704084225-05e143d24a9e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "",
          "[Removed Lines]",
          "193: golang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=",
          "198: golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=",
          "201: golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=",
          "202: golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "204: golang.org/x/sys v0.0.0-20210806184541-e5e7981a1069/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "209: golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=",
          "210: golang.org/x/sys v0.14.0 h1:Vz7Qs629MkJkGyHxUlRHizWJRG2j8fbQKjELVSNhy7Q=",
          "211: golang.org/x/sys v0.14.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=",
          "215: golang.org/x/text v0.13.0 h1:ablQoSUd0tRdKxZewP80B+BaqeKJuVhuRxj/dkrun3k=",
          "216: golang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=",
          "217: golang.org/x/time v0.3.0 h1:rg5rLMjNzMS1RkNLzCG38eapWhnYLFYXDXj2gOlr8j4=",
          "218: golang.org/x/time v0.3.0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=",
          "220: golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=",
          "221: google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=",
          "223: google.golang.org/protobuf v1.30.0 h1:kPPoIgf3TsEvrm0PFe15JQ+570QVxYzEvvHqChK+cng=",
          "224: google.golang.org/protobuf v1.30.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=",
          "225: gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=",
          "226: gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=",
          "227: gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=",
          "228: gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=",
          "230: gopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=",
          "231: gopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=",
          "232: gopkg.in/natefinch/lumberjack.v2 v2.2.1 h1:bBRl1b0OH9s/DuPhuXpNl+VtCaJXFZ5/uEFST95x9zc=",
          "",
          "[Removed Lines]",
          "212: golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=",
          "213: golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=",
          "214: golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=",
          "219: golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=",
          "222: google.golang.org/protobuf v1.28.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=",
          "229: gopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/utils/file/file.go||pkg/utils/file/file.go": [
          "File: pkg/utils/file/file.go -> pkg/utils/file/file.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"io\"",
          "5:  \"os\"",
          "6:  \"path\"",
          "7:  \"strings\"",
          "8: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:  \"mime/multipart\"",
          "8:  \"path/filepath\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:  return err",
          "145: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: func SaveUploadedFile(file *multipart.FileHeader, dst string) error {",
          "150:  src, err := file.Open()",
          "151:  if err != nil {",
          "152:   return err",
          "153:  }",
          "154:  defer src.Close()",
          "156:  if err = os.MkdirAll(filepath.Dir(dst), 0o750); err != nil {",
          "157:   return err",
          "158:  }",
          "160:  out, err := os.Create(dst)",
          "161:  if err != nil {",
          "162:   return err",
          "163:  }",
          "164:  defer out.Close()",
          "166:  _, err = io.Copy(out, src)",
          "167:  return err",
          "168: }",
          "",
          "---------------"
        ],
        "route/v1.go||route/v1.go": [
          "File: route/v1.go -> route/v1.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"crypto/ecdsa\"",
          "8:  \"github.com/IceWhaleTech/CasaOS-Common/utils/jwt\"",
          "9:  v1 \"github.com/IceWhaleTech/CasaOS-UserService/route/v1\"",
          "10:  \"github.com/IceWhaleTech/CasaOS-UserService/service\"",
          "13: )",
          "43:   },",
          "45:  {",
          "47:   v1UsersGroup.Use()",
          "69:  }",
          "72: }",
          "",
          "[Removed Lines]",
          "5:  \"os\"",
          "7:  \"github.com/IceWhaleTech/CasaOS-Common/middleware\"",
          "11:  \"github.com/gin-contrib/gzip\"",
          "12:  \"github.com/gin-gonic/gin\"",
          "15: func InitRouter() *gin.Engine {",
          "16:  r := gin.Default()",
          "17:  r.Use(middleware.Cors())",
          "19:  r.Use(gzip.Gzip(gzip.DefaultCompression))",
          "22:  if ginMode, success := os.LookupEnv(\"GIN_MODE\"); success {",
          "23:   gin.SetMode(ginMode)",
          "24:  } else {",
          "25:   gin.SetMode(gin.ReleaseMode)",
          "26:  }",
          "28:  r.POST(\"/v1/users/register\", v1.PostUserRegister)",
          "29:  r.POST(\"/v1/users/login\", v1.PostUserLogin)",
          "30:  r.GET(\"/v1/users/name\", v1.GetUserAllUsername) // all/name",
          "31:  r.POST(\"/v1/users/refresh\", v1.PostUserRefreshToken)",
          "33:  r.GET(\"/v1/users/image\", v1.GetUserImage)",
          "35:  r.GET(\"/v1/users/status\", v1.GetUserStatus) // init/check",
          "37:  v1Group := r.Group(\"/v1\")",
          "39:  v1Group.Use(jwt.JWT(",
          "40:   func() (*ecdsa.PublicKey, error) {",
          "41:    _, publicKey := service.MyService.User().GetKeyPair()",
          "42:    return publicKey, nil",
          "44:  ))",
          "46:   v1UsersGroup := v1Group.Group(\"/users\")",
          "48:   {",
          "49:    v1UsersGroup.GET(\"/current\", v1.GetUserInfo)",
          "50:    v1UsersGroup.PUT(\"/current\", v1.PutUserInfo)",
          "51:    v1UsersGroup.PUT(\"/current/password\", v1.PutUserPassword)",
          "53:    v1UsersGroup.GET(\"/current/custom/:key\", v1.GetUserCustomConf)",
          "54:    v1UsersGroup.POST(\"/current/custom/:key\", v1.PostUserCustomConf)",
          "55:    v1UsersGroup.DELETE(\"/current/custom/:key\", v1.DeleteUserCustomConf)",
          "57:    v1UsersGroup.POST(\"/current/image/:key\", v1.PostUserUploadImage)",
          "58:    v1UsersGroup.PUT(\"/current/image/:key\", v1.PutUserImage)",
          "60:    v1UsersGroup.DELETE(\"/current/image\", v1.DeleteUserImage)",
          "62:    v1UsersGroup.PUT(\"/avatar\", v1.PutUserAvatar)",
          "63:    v1UsersGroup.GET(\"/avatar\", v1.GetUserAvatar)",
          "65:    v1UsersGroup.DELETE(\"/:id\", v1.DeleteUser)",
          "66:    v1UsersGroup.GET(\"/:username\", v1.GetUserInfoByUsername)",
          "67:    v1UsersGroup.DELETE(\"\", v1.DeleteUserAll)",
          "68:   }",
          "71:  return r",
          "",
          "[Added Lines]",
          "5:  \"net/http\"",
          "6:  \"strconv\"",
          "11:  \"github.com/labstack/echo/v4\"",
          "12:  echo_middleware \"github.com/labstack/echo/v4/middleware\"",
          "15: func InitRouter() http.Handler {",
          "16:  e := echo.New()",
          "18:  e.Use((echo_middleware.CORSWithConfig(echo_middleware.CORSConfig{",
          "19:   AllowOrigins:     []string{\"*\"},",
          "20:   AllowMethods:     []string{echo.POST, echo.GET, echo.OPTIONS, echo.PUT, echo.DELETE},",
          "21:   AllowHeaders:     []string{echo.HeaderAuthorization, echo.HeaderContentLength, echo.HeaderXCSRFToken, echo.HeaderContentType, echo.HeaderAccessControlAllowOrigin, echo.HeaderAccessControlAllowHeaders, echo.HeaderAccessControlAllowMethods, echo.HeaderConnection, echo.HeaderOrigin, echo.HeaderXRequestedWith},",
          "22:   ExposeHeaders:    []string{echo.HeaderContentLength, echo.HeaderAccessControlAllowOrigin, echo.HeaderAccessControlAllowHeaders},",
          "23:   MaxAge:           172800,",
          "24:   AllowCredentials: true,",
          "25:  })))",
          "27:  e.Use(echo_middleware.Gzip())",
          "29:  e.Use(echo_middleware.Logger())",
          "31:  e.POST(\"/v1/users/register\", v1.PostUserRegister)",
          "32:  e.POST(\"/v1/users/login\", v1.PostUserLogin)",
          "33:  e.GET(\"/v1/users/name\", v1.GetUserAllUsername) // all/name",
          "34:  e.POST(\"/v1/users/refresh\", v1.PostUserRefreshToken)",
          "36:  e.GET(\"/v1/users/image\", v1.GetUserImage)",
          "38:  e.GET(\"/v1/users/status\", v1.GetUserStatus) // init/check",
          "40:  v1Group := e.Group(\"/v1\")",
          "42:  v1UsersGroup := v1Group.Group(\"/users\")",
          "43:  v1UsersGroup.Use(echo_middleware.JWTWithConfig(echo_middleware.JWTConfig{",
          "44:   Skipper: func(c echo.Context) bool {",
          "45:    return c.RealIP() == \"::1\" || c.RealIP() == \"127.0.0.1\"",
          "46:   },",
          "47:   ParseTokenFunc: func(token string, c echo.Context) (interface{}, error) {",
          "48:    valid, claims, err := jwt.Validate(",
          "49:     token,",
          "50:     func() (*ecdsa.PublicKey, error) {",
          "51:      _, publicKey := service.MyService.User().GetKeyPair()",
          "52:      return publicKey, nil",
          "53:     })",
          "54:    if err != nil || !valid {",
          "55:     return nil, echo.ErrUnauthorized",
          "56:    }",
          "58:    c.Request().Header.Set(\"user_id\", strconv.Itoa(claims.ID))",
          "60:    return claims, nil",
          "61:   },",
          "62:   TokenLookupFuncs: []echo_middleware.ValuesExtractor{",
          "63:    func(c echo.Context) ([]string, error) {",
          "64:     if len(c.Request().Header.Get(echo.HeaderAuthorization)) > 0 {",
          "65:      return []string{c.Request().Header.Get(echo.HeaderAuthorization)}, nil",
          "66:     }",
          "67:     return []string{c.QueryParam(\"token\")}, nil",
          "68:    },",
          "70:  }))",
          "73:   v1UsersGroup.GET(\"/current\", v1.GetUserInfo)",
          "74:   v1UsersGroup.PUT(\"/current\", v1.PutUserInfo)",
          "75:   v1UsersGroup.PUT(\"/current/password\", v1.PutUserPassword)",
          "77:   v1UsersGroup.GET(\"/current/custom/:key\", v1.GetUserCustomConf)",
          "78:   v1UsersGroup.POST(\"/current/custom/:key\", v1.PostUserCustomConf)",
          "79:   v1UsersGroup.DELETE(\"/current/custom/:key\", v1.DeleteUserCustomConf)",
          "81:   v1UsersGroup.POST(\"/current/image/:key\", v1.PostUserUploadImage)",
          "82:   v1UsersGroup.PUT(\"/current/image/:key\", v1.PutUserImage)",
          "84:   v1UsersGroup.DELETE(\"/current/image\", v1.DeleteUserImage)",
          "86:   v1UsersGroup.PUT(\"/avatar\", v1.PutUserAvatar)",
          "87:   v1UsersGroup.GET(\"/avatar\", v1.GetUserAvatar)",
          "89:   v1UsersGroup.DELETE(\"/:id\", v1.DeleteUser)",
          "90:   v1UsersGroup.GET(\"/:username\", v1.GetUserInfoByUsername)",
          "91:   v1UsersGroup.DELETE(\"\", v1.DeleteUserAll)",
          "94:  return e",
          "",
          "---------------"
        ],
        "route/v1/user.go||route/v1/user.go": [
          "File: route/v1/user.go -> route/v1/user.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  \"github.com/IceWhaleTech/CasaOS-UserService/pkg/utils/encryption\"",
          "31:  \"github.com/IceWhaleTech/CasaOS-UserService/pkg/utils/file\"",
          "32:  model2 \"github.com/IceWhaleTech/CasaOS-UserService/service/model\"",
          "33:  uuid \"github.com/satori/go.uuid\"",
          "34:  \"github.com/tidwall/gjson\"",
          "35:  \"go.uber.org/zap\"",
          "36:  \"golang.org/x/time/rate\"",
          "38:  \"github.com/IceWhaleTech/CasaOS-UserService/service\"",
          "40: )",
          "45:  json := make(map[string]string)",
          "48:  username := json[\"username\"]",
          "49:  pwd := json[\"password\"]",
          "50:  key := json[\"key\"]",
          "51:  if _, ok := service.UserRegisterHash[key]; !ok {",
          "53:    model.Result{Success: common_err.KEY_NOT_EXIST, Message: common_err.GetMsg(common_err.KEY_NOT_EXIST)})",
          "55:  }",
          "57:  if len(username) == 0 || len(pwd) == 0 {",
          "59:    model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "61:  }",
          "62:  if len(pwd) < 6 {",
          "64:    model.Result{Success: common_err.PWD_IS_TOO_SIMPLE, Message: common_err.GetMsg(common_err.PWD_IS_TOO_SIMPLE)})",
          "66:  }",
          "67:  oldUser := service.MyService.User().GetUserInfoByUserName(username)",
          "68:  if oldUser.Id > 0 {",
          "70:    model.Result{Success: common_err.USER_EXIST, Message: common_err.GetMsg(common_err.USER_EXIST)})",
          "72:  }",
          "74:  user := model2.UserDBModel{}",
          "",
          "[Removed Lines]",
          "39:  \"github.com/gin-gonic/gin\"",
          "44: func PostUserRegister(c *gin.Context) {",
          "46:  c.ShouldBind(&json)",
          "52:   c.JSON(common_err.CLIENT_ERROR,",
          "54:   return",
          "58:   c.JSON(common_err.CLIENT_ERROR,",
          "60:   return",
          "63:   c.JSON(common_err.CLIENT_ERROR,",
          "65:   return",
          "69:   c.JSON(common_err.CLIENT_ERROR,",
          "71:   return",
          "",
          "[Added Lines]",
          "33:  \"github.com/labstack/echo/v4\"",
          "44: func PostUserRegister(ctx echo.Context) error {",
          "46:  ctx.Bind(&json)",
          "52:   return ctx.JSON(common_err.CLIENT_ERROR,",
          "57:   return ctx.JSON(common_err.CLIENT_ERROR,",
          "61:   return ctx.JSON(common_err.CLIENT_ERROR,",
          "66:   return ctx.JSON(common_err.CLIENT_ERROR,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:  user = service.MyService.User().CreateUser(user)",
          "80:  if user.Id == 0 {",
          "83:  }",
          "84:  file.MkDir(config.AppInfo.UserDataPath + \"/\" + strconv.Itoa(user.Id))",
          "85:  delete(service.UserRegisterHash, key)",
          "87: }",
          "89: var limiter = rate.NewLimiter(rate.Every(time.Minute), 5)",
          "",
          "[Removed Lines]",
          "81:   c.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.SERVICE_ERROR, Message: common_err.GetMsg(common_err.SERVICE_ERROR)})",
          "82:   return",
          "86:  c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS)})",
          "",
          "[Added Lines]",
          "77:   return ctx.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.SERVICE_ERROR, Message: common_err.GetMsg(common_err.SERVICE_ERROR)})",
          "81:  return ctx.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS)})",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:  if !limiter.Allow() {",
          "103:    model.Result{",
          "104:     Success: common_err.TOO_MANY_LOGIN_REQUESTS,",
          "105:     Message: common_err.GetMsg(common_err.TOO_MANY_LOGIN_REQUESTS),",
          "106:    })",
          "108:  }",
          "110:  json := make(map[string]string)",
          "113:  username := json[\"username\"]",
          "115:  password := json[\"password\"]",
          "117:  if len(username) == 0 || len(password) == 0 {",
          "119:    model.Result{",
          "120:     Success: common_err.CLIENT_ERROR,",
          "121:     Message: common_err.GetMsg(common_err.INVALID_PARAMS),",
          "122:    })",
          "124:  }",
          "125:  user := service.MyService.User().GetUserAllInfoByName(username)",
          "126:  if user.Id == 0 {",
          "130:  }",
          "131:  if user.Password != encryption.GetMD5ByStr(password) {",
          "133:    model.Result{Success: common_err.USER_NOT_EXIST_OR_PWD_INVALID, Message: common_err.GetMsg(common_err.USER_NOT_EXIST_OR_PWD_INVALID)})",
          "135:  }",
          "140:  privateKey, _ := service.MyService.User().GetKeyPair()",
          "142:  token := system_model.VerifyInformation{}",
          "144:  accessToken, err := jwt.GetAccessToken(user.Username, privateKey, user.Id)",
          "145:  if err != nil {",
          "147:  }",
          "148:  token.AccessToken = accessToken",
          "150:  refreshToken, err := jwt.GetRefreshToken(user.Username, privateKey, user.Id)",
          "151:  if err != nil {",
          "153:  }",
          "154:  token.RefreshToken = refreshToken",
          "",
          "[Removed Lines]",
          "99: func PostUserLogin(c *gin.Context) {",
          "102:   c.JSON(common_err.TOO_MANY_REQUEST,",
          "107:   return",
          "111:  c.ShouldBind(&json)",
          "118:   c.JSON(common_err.CLIENT_ERROR,",
          "123:   return",
          "127:   c.JSON(common_err.CLIENT_ERROR,",
          "128:    model.Result{Success: common_err.USER_NOT_EXIST_OR_PWD_INVALID, Message: common_err.GetMsg(common_err.USER_NOT_EXIST_OR_PWD_INVALID)})",
          "129:   return",
          "132:   c.JSON(common_err.CLIENT_ERROR,",
          "134:   return",
          "138:  limiter = rate.NewLimiter(rate.Every(time.Minute), 5)",
          "146:   c.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
          "152:   c.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
          "",
          "[Added Lines]",
          "94: func PostUserLogin(ctx echo.Context) error {",
          "96:   return ctx.JSON(common_err.TOO_MANY_REQUEST,",
          "104:  ctx.Bind(&json)",
          "111:   return ctx.JSON(common_err.CLIENT_ERROR,",
          "119:   return ctx.JSON(common_err.CLIENT_ERROR,",
          "120:    model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "123:   return ctx.JSON(common_err.CLIENT_ERROR,",
          "133:   return ctx.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
          "139:   return ctx.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:  data[\"user\"] = user",
          "165:   model.Result{",
          "166:    Success: common_err.SUCCESS,",
          "167:    Message: common_err.GetMsg(common_err.SUCCESS),",
          "",
          "[Removed Lines]",
          "164:  c.JSON(common_err.SUCCESS,",
          "",
          "[Added Lines]",
          "151:  return ctx.JSON(common_err.SUCCESS,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:  user := service.MyService.User().GetUserInfoById(id)",
          "183:  if user.Id == 0 {",
          "185:    model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "187:  }",
          "188:  json := make(map[string]string)",
          "191:  data := json[\"file\"]",
          "192:  imgBase64 := strings.Replace(data, \"data:image/png;base64,\", \"\", 1)",
          "193:  decodeData, err := base64.StdEncoding.DecodeString(string(imgBase64))",
          "194:  if err != nil {",
          "197:  }",
          "",
          "[Removed Lines]",
          "180: func PutUserAvatar(c *gin.Context) {",
          "181:  id := c.GetHeader(\"user_id\")",
          "184:   c.JSON(common_err.SERVICE_ERROR,",
          "186:   return",
          "189:  c.ShouldBind(&json)",
          "195:   c.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
          "196:   return",
          "",
          "[Added Lines]",
          "167: func PutUserAvatar(ctx echo.Context) error {",
          "168:  id := ctx.Request().Header.Get(\"user_id\")",
          "171:   return ctx.JSON(common_err.SERVICE_ERROR,",
          "175:  ctx.Bind(&json)",
          "181:   return ctx.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "217:  }",
          "218:  user.Avatar = avatarPath",
          "219:  service.MyService.User().UpdateUser(user)",
          "221:   model.Result{",
          "222:    Success: common_err.SUCCESS,",
          "223:    Message: common_err.GetMsg(common_err.SUCCESS),",
          "",
          "[Removed Lines]",
          "220:  c.JSON(http.StatusOK,",
          "",
          "[Added Lines]",
          "205:  return ctx.JSON(http.StatusOK,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "237:  user := service.MyService.User().GetUserInfoById(id)",
          "238:  if user.Id == 0 {",
          "240:    model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "242:  }",
          "244:  if file.Exists(user.Avatar) {",
          "249:  }",
          "250:  user.Avatar = \"/usr/share/casaos/www/avatar.svg\"",
          "251:  if file.Exists(user.Avatar) {",
          "256:  }",
          "257:  user.Avatar = \"/var/lib/casaos/www/avatar.svg\"",
          "261: }",
          "",
          "[Removed Lines]",
          "235: func GetUserAvatar(c *gin.Context) {",
          "236:  id := c.GetHeader(\"user_id\")",
          "239:   c.JSON(common_err.SERVICE_ERROR,",
          "241:   return",
          "245:   c.Header(\"Content-Disposition\", \"attachment; filename*=utf-8''\"+url2.PathEscape(path.Base(user.Avatar)))",
          "246:   c.Header(\"Cache-Control\", \"no-cache, no-store, max-age=0, must-revalidate, value\")",
          "247:   c.File(user.Avatar)",
          "248:   return",
          "252:   c.Header(\"Content-Disposition\", \"attachment; filename*=utf-8''\"+url2.PathEscape(path.Base(user.Avatar)))",
          "253:   c.Header(\"Cache-Control\", \"no-cache, no-store, max-age=0, must-revalidate, value\")",
          "254:   c.File(user.Avatar)",
          "255:   return",
          "258:  c.Header(\"Content-Disposition\", \"attachment; filename*=utf-8''\"+url2.PathEscape(path.Base(user.Avatar)))",
          "259:  c.Header(\"Cache-Control\", \"no-cache, no-store, max-age=0, must-revalidate, value\")",
          "260:  c.File(user.Avatar)",
          "",
          "[Added Lines]",
          "220: func GetUserAvatar(ctx echo.Context) error {",
          "221:  id := ctx.Request().Header.Get(\"user_id\")",
          "224:   return ctx.JSON(common_err.SERVICE_ERROR,",
          "229:   ctx.Response().Header().Set(\"Content-Disposition\", \"attachment; filename*=utf-8''\"+url2.PathEscape(path.Base(user.Avatar)))",
          "230:   ctx.Response().Header().Set(\"Cache-Control\", \"no-cache, no-store, max-age=0, must-revalidate, value\")",
          "231:   return ctx.File(user.Avatar)",
          "236:   ctx.Response().Header().Set(\"Content-Disposition\", \"attachment; filename*=utf-8''\"+url2.PathEscape(path.Base(user.Avatar)))",
          "237:   ctx.Response().Header().Set(\"Cache-Control\", \"no-cache, no-store, max-age=0, must-revalidate, value\")",
          "238:   return ctx.File(user.Avatar)",
          "242:  ctx.Response().Header().Set(\"Content-Disposition\", \"attachment; filename*=utf-8''\"+url2.PathEscape(path.Base(user.Avatar)))",
          "243:  ctx.Response().Header().Set(\"Cache-Control\", \"no-cache, no-store, max-age=0, must-revalidate, value\")",
          "244:  return ctx.File(user.Avatar)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "273:  json := model2.UserDBModel{}",
          "275:  user := service.MyService.User().GetUserInfoById(id)",
          "276:  if user.Id == 0 {",
          "278:    model.Result{Success: common_err.USER_NOT_EXIST_OR_PWD_INVALID, Message: common_err.GetMsg(common_err.USER_NOT_EXIST_OR_PWD_INVALID)})",
          "280:  }",
          "281:  if len(json.Username) > 0 {",
          "282:   u := service.MyService.User().GetUserInfoByUserName(json.Username)",
          "283:   if u.Id > 0 {",
          "285:     model.Result{Success: common_err.USER_EXIST, Message: common_err.GetMsg(common_err.USER_EXIST)})",
          "287:   }",
          "288:  }",
          "",
          "[Removed Lines]",
          "271: func PutUserInfo(c *gin.Context) {",
          "272:  id := c.GetHeader(\"user_id\")",
          "274:  c.ShouldBind(&json)",
          "277:   c.JSON(common_err.SERVICE_ERROR,",
          "279:   return",
          "284:    c.JSON(common_err.CLIENT_ERROR,",
          "286:    return",
          "",
          "[Added Lines]",
          "255: func PutUserInfo(ctx echo.Context) error {",
          "256:  id := ctx.Request().Header.Get(\"user_id\")",
          "258:  ctx.Bind(&json)",
          "261:   return ctx.JSON(common_err.SERVICE_ERROR,",
          "267:    return ctx.JSON(common_err.CLIENT_ERROR,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "303:   json.Nickname = user.Nickname",
          "304:  }",
          "305:  service.MyService.User().UpdateUser(json)",
          "307: }",
          "",
          "[Removed Lines]",
          "306:  c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: json})",
          "",
          "[Added Lines]",
          "288:  return ctx.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: json})",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "318:  json := make(map[string]string)",
          "320:  oldPwd := json[\"old_password\"]",
          "321:  pwd := json[\"password\"]",
          "322:  if len(oldPwd) == 0 || len(pwd) == 0 {",
          "325:  }",
          "326:  user := service.MyService.User().GetUserAllInfoById(id)",
          "327:  if user.Id == 0 {",
          "329:    model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "331:  }",
          "332:  if user.Password != encryption.GetMD5ByStr(oldPwd) {",
          "335:  }",
          "336:  user.Password = encryption.GetMD5ByStr(pwd)",
          "337:  service.MyService.User().UpdateUserPassword(user)",
          "338:  user.Password = \"\"",
          "340: }",
          "",
          "[Removed Lines]",
          "316: func PutUserPassword(c *gin.Context) {",
          "317:  id := c.GetHeader(\"user_id\")",
          "319:  c.ShouldBind(&json)",
          "323:   c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "324:   return",
          "328:   c.JSON(common_err.SERVICE_ERROR,",
          "330:   return",
          "333:   c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.PWD_INVALID_OLD, Message: common_err.GetMsg(common_err.PWD_INVALID_OLD)})",
          "334:   return",
          "339:  c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: user})",
          "",
          "[Added Lines]",
          "298: func PutUserPassword(ctx echo.Context) error {",
          "299:  id := ctx.Request().Header.Get(\"user_id\")",
          "301:  ctx.Bind(&json)",
          "305:   return ctx.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "309:   return ctx.JSON(common_err.SERVICE_ERROR,",
          "313:   return ctx.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.PWD_INVALID_OLD, Message: common_err.GetMsg(common_err.PWD_INVALID_OLD)})",
          "318:  return ctx.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: user})",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "352:  json := make(map[string]string)",
          "354:  Nickname := json[\"nick_name\"]",
          "355:  if len(Nickname) == 0 {",
          "358:  }",
          "359:  user := service.MyService.User().GetUserInfoById(id)",
          "360:  if user.Id == 0 {",
          "362:    model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "364:  }",
          "365:  user.Nickname = Nickname",
          "366:  service.MyService.User().UpdateUser(user)",
          "368: }",
          "",
          "[Removed Lines]",
          "350: func PutUserNick(c *gin.Context) {",
          "351:  id := c.GetHeader(\"user_id\")",
          "353:  c.ShouldBind(&json)",
          "356:   c.JSON(http.StatusOK, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "357:   return",
          "361:   c.JSON(http.StatusOK,",
          "363:   return",
          "367:  c.JSON(http.StatusOK, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: user})",
          "",
          "[Added Lines]",
          "329: func PutUserNick(ctx echo.Context) error {",
          "330:  id := ctx.Request().Header.Get(\"user_id\")",
          "332:  ctx.Bind(&json)",
          "335:   return ctx.JSON(http.StatusOK, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "339:   return ctx.JSON(http.StatusOK,",
          "344:  return ctx.JSON(http.StatusOK, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: user})",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "380:  json := make(map[string]string)",
          "382:  desc := json[\"description\"]",
          "383:  if len(desc) == 0 {",
          "386:  }",
          "387:  user := service.MyService.User().GetUserInfoById(id)",
          "388:  if user.Id == 0 {",
          "390:    model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "392:  }",
          "393:  user.Description = desc",
          "395:  service.MyService.User().UpdateUser(user)",
          "398: }",
          "",
          "[Removed Lines]",
          "378: func PutUserDesc(c *gin.Context) {",
          "379:  id := c.GetHeader(\"user_id\")",
          "381:  c.ShouldBind(&json)",
          "384:   c.JSON(http.StatusOK, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "385:   return",
          "389:   c.JSON(http.StatusOK,",
          "391:   return",
          "397:  c.JSON(http.StatusOK, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: user})",
          "",
          "[Added Lines]",
          "355: func PutUserDesc(ctx echo.Context) error {",
          "356:  id := ctx.Request().Header.Get(\"user_id\")",
          "358:  ctx.Bind(&json)",
          "361:   return ctx.JSON(http.StatusOK, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "365:   return ctx.JSON(http.StatusOK,",
          "372:  return ctx.JSON(http.StatusOK, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: user})",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "408:  user := service.MyService.User().GetUserInfoById(id)",
          "411:   model.Result{",
          "412:    Success: common_err.SUCCESS,",
          "413:    Message: common_err.GetMsg(common_err.SUCCESS),",
          "",
          "[Removed Lines]",
          "406: func GetUserInfo(c *gin.Context) {",
          "407:  id := c.GetHeader(\"user_id\")",
          "410:  c.JSON(common_err.SUCCESS,",
          "",
          "[Added Lines]",
          "381: func GetUserInfo(ctx echo.Context) error {",
          "382:  id := ctx.Request().Header.Get(\"user_id\")",
          "385:  return ctx.JSON(common_err.SUCCESS,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "428:  if len(username) == 0 {",
          "431:  }",
          "432:  user := service.MyService.User().GetUserInfoByUserName(username)",
          "433:  if user.Id == 0 {",
          "436:  }",
          "439:   model.Result{",
          "440:    Success: common_err.SUCCESS,",
          "441:    Message: common_err.GetMsg(common_err.SUCCESS),",
          "",
          "[Removed Lines]",
          "426: func GetUserInfoByUsername(c *gin.Context) {",
          "427:  username := c.Param(\"username\")",
          "429:   c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "430:   return",
          "434:   c.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "435:   return",
          "438:  c.JSON(common_err.SUCCESS,",
          "",
          "[Added Lines]",
          "401: func GetUserInfoByUsername(ctx echo.Context) error {",
          "402:  username := ctx.Param(\"username\")",
          "404:   return ctx.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "408:   return ctx.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "411:  return ctx.JSON(common_err.SUCCESS,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "452:  users := service.MyService.User().GetAllUserName()",
          "453:  names := []string{}",
          "454:  for _, v := range users {",
          "455:   names = append(names, v.Username)",
          "456:  }",
          "458:   model.Result{",
          "459:    Success: common_err.SUCCESS,",
          "460:    Message: common_err.GetMsg(common_err.SUCCESS),",
          "",
          "[Removed Lines]",
          "451: func GetUserAllUsername(c *gin.Context) {",
          "457:  c.JSON(common_err.SUCCESS,",
          "",
          "[Added Lines]",
          "424: func GetUserAllUsername(ctx echo.Context) error {",
          "430:  return ctx.JSON(common_err.SUCCESS,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "473:  if len(name) == 0 {",
          "476:  }",
          "479:  user := service.MyService.User().GetUserInfoById(id)",
          "481:  if user.Id == 0 {",
          "483:    model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "485:  }",
          "486:  filePath := config.AppInfo.UserDataPath + \"/\" + id + \"/\" + name + \".json\"",
          "488:  data := file.ReadFullFile(filePath)",
          "489:  if !gjson.ValidBytes(data) {",
          "492:  }",
          "494: }",
          "",
          "[Removed Lines]",
          "471: func GetUserCustomConf(c *gin.Context) {",
          "472:  name := c.Param(\"key\")",
          "474:   c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "475:   return",
          "477:  id := c.GetHeader(\"user_id\")",
          "482:   c.JSON(common_err.SERVICE_ERROR,",
          "484:   return",
          "490:   c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: string(data)})",
          "491:   return",
          "493:  c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: json2.RawMessage(string(data))})",
          "",
          "[Added Lines]",
          "444: func GetUserCustomConf(ctx echo.Context) error {",
          "445:  name := ctx.Param(\"key\")",
          "447:   return ctx.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "449:  id := ctx.Request().Header.Get(\"user_id\")",
          "454:   return ctx.JSON(common_err.SERVICE_ERROR,",
          "461:   return ctx.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: string(data)})",
          "463:  return ctx.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: json2.RawMessage(string(data))})",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "504:  if len(name) == 0 {",
          "507:  }",
          "509:  user := service.MyService.User().GetUserInfoById(id)",
          "510:  if user.Id == 0 {",
          "512:    model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "514:  }",
          "516:  filePath := config.AppInfo.UserDataPath + \"/\" + strconv.Itoa(user.Id)",
          "518:  if err := file.IsNotExistMkDir(filePath); err != nil {",
          "520:    model.Result{Success: common_err.SERVICE_ERROR, Message: common_err.GetMsg(common_err.SERVICE_ERROR)})",
          "522:  }",
          "524:  if err := file.WriteToPath(data, filePath, name+\".json\"); err != nil {",
          "526:    model.Result{Success: common_err.SERVICE_ERROR, Message: common_err.GetMsg(common_err.SERVICE_ERROR)})",
          "528:  }",
          "530:  if name == \"system\" {",
          "",
          "[Removed Lines]",
          "502: func PostUserCustomConf(c *gin.Context) {",
          "503:  name := c.Param(\"key\")",
          "505:   c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "506:   return",
          "508:  id := c.GetHeader(\"user_id\")",
          "511:   c.JSON(common_err.SERVICE_ERROR,",
          "513:   return",
          "515:  data, _ := io.ReadAll(c.Request.Body)",
          "519:   c.JSON(common_err.SERVICE_ERROR,",
          "521:   return",
          "525:   c.JSON(common_err.SERVICE_ERROR,",
          "527:   return",
          "",
          "[Added Lines]",
          "472: func PostUserCustomConf(ctx echo.Context) error {",
          "473:  name := ctx.Param(\"key\")",
          "475:   return ctx.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "477:  id := ctx.Request().Header.Get(\"user_id\")",
          "480:   return ctx.JSON(common_err.SERVICE_ERROR,",
          "483:  data, _ := io.ReadAll(ctx.Request().Body)",
          "487:   return ctx.JSON(common_err.SERVICE_ERROR,",
          "492:   return ctx.JSON(common_err.SERVICE_ERROR,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "533:   response, err := service.MyService.MessageBus().PublishEventWithResponse(context.Background(), common.SERVICENAME, \"zimaos:user:save_config\", dataMap)",
          "534:   if err != nil {",
          "535:    logger.Error(\"failed to publish event to message bus\", zap.Error(err), zap.Any(\"event\", string(data)))",
          "537:   }",
          "538:   if response.StatusCode() != http.StatusOK {",
          "539:    logger.Error(\"failed to publish event to message bus\", zap.String(\"status\", response.Status()), zap.Any(\"response\", response))",
          "",
          "[Removed Lines]",
          "536:    return",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "542:  }",
          "545: }",
          "",
          "[Removed Lines]",
          "544:  c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: json2.RawMessage(string(data))})",
          "",
          "[Added Lines]",
          "509:  return ctx.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: json2.RawMessage(string(data))})",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "555:  if len(name) == 0 {",
          "558:  }",
          "560:  user := service.MyService.User().GetUserInfoById(id)",
          "561:  if user.Id == 0 {",
          "563:    model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "565:  }",
          "566:  filePath := config.AppInfo.UserDataPath + \"/\" + strconv.Itoa(user.Id) + \"/\" + name + \".json\"",
          "567:  err := os.Remove(filePath)",
          "568:  if err != nil {",
          "571:  }",
          "573: }",
          "",
          "[Removed Lines]",
          "553: func DeleteUserCustomConf(c *gin.Context) {",
          "554:  name := c.Param(\"key\")",
          "556:   c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "557:   return",
          "559:  id := c.GetHeader(\"user_id\")",
          "562:   c.JSON(common_err.SERVICE_ERROR,",
          "564:   return",
          "569:   c.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.SERVICE_ERROR, Message: common_err.GetMsg(common_err.SERVICE_ERROR)})",
          "570:   return",
          "572:  c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS)})",
          "",
          "[Added Lines]",
          "518: func DeleteUserCustomConf(ctx echo.Context) error {",
          "519:  name := ctx.Param(\"key\")",
          "521:   return ctx.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "523:  id := ctx.Request().Header.Get(\"user_id\")",
          "526:   return ctx.JSON(common_err.SERVICE_ERROR,",
          "532:   return ctx.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.SERVICE_ERROR, Message: common_err.GetMsg(common_err.SERVICE_ERROR)})",
          "534:  return ctx.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS)})",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "583:  service.MyService.User().DeleteUserById(id)",
          "585: }",
          "",
          "[Removed Lines]",
          "581: func DeleteUser(c *gin.Context) {",
          "582:  id := c.Param(\"id\")",
          "584:  c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: id})",
          "",
          "[Added Lines]",
          "543: func DeleteUser(ctx echo.Context) error {",
          "544:  id := ctx.Param(\"id\")",
          "546:  return ctx.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: id})",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "594:  json := make(map[string]string)",
          "597:  path := json[\"path\"]",
          "599:  if len(path) == 0 || len(key) == 0 {",
          "602:  }",
          "603:  if !file.Exists(path) {",
          "606:  }",
          "608:  _, err := file.GetImageExt(path)",
          "609:  if err != nil {",
          "612:  }",
          "614:  user := service.MyService.User().GetUserInfoById(id)",
          "615:  if user.Id == 0 {",
          "618:  }",
          "619:  fstat, _ := os.Stat(path)",
          "620:  if fstat.Size() > 10<<20 {",
          "623:  }",
          "624:  ext := file.GetExt(path)",
          "625:  filePath := config.AppInfo.UserDataPath + \"/\" + strconv.Itoa(user.Id) + \"/\" + key + ext",
          "",
          "[Removed Lines]",
          "592: func PutUserImage(c *gin.Context) {",
          "593:  id := c.GetHeader(\"user_id\")",
          "595:  c.ShouldBind(&json)",
          "598:  key := c.Param(\"key\")",
          "600:   c.JSON(http.StatusOK, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "601:   return",
          "604:   c.JSON(http.StatusOK, model.Result{Success: common_err.FILE_DOES_NOT_EXIST, Message: common_err.GetMsg(common_err.FILE_DOES_NOT_EXIST)})",
          "605:   return",
          "610:   c.JSON(http.StatusOK, model.Result{Success: common_err.NOT_IMAGE, Message: common_err.GetMsg(common_err.NOT_IMAGE)})",
          "611:   return",
          "616:   c.JSON(http.StatusOK, model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "617:   return",
          "621:   c.JSON(http.StatusOK, model.Result{Success: common_err.IMAGE_TOO_LARGE, Message: common_err.GetMsg(common_err.IMAGE_TOO_LARGE)})",
          "622:   return",
          "",
          "[Added Lines]",
          "554: func PutUserImage(ctx echo.Context) error {",
          "555:  id := ctx.Request().Header.Get(\"user_id\")",
          "557:  ctx.Bind(&json)",
          "560:  key := ctx.Param(\"key\")",
          "562:   return ctx.JSON(http.StatusOK, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "565:   return ctx.JSON(http.StatusOK, model.Result{Success: common_err.FILE_DOES_NOT_EXIST, Message: common_err.GetMsg(common_err.FILE_DOES_NOT_EXIST)})",
          "570:   return ctx.JSON(http.StatusOK, model.Result{Success: common_err.NOT_IMAGE, Message: common_err.GetMsg(common_err.NOT_IMAGE)})",
          "575:   return ctx.JSON(http.StatusOK, model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "579:   return ctx.JSON(http.StatusOK, model.Result{Success: common_err.IMAGE_TOO_LARGE, Message: common_err.GetMsg(common_err.IMAGE_TOO_LARGE)})",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "629:  data[\"path\"] = filePath",
          "630:  data[\"file_name\"] = key + ext",
          "631:  data[\"online_path\"] = \"/v1/users/image?path=\" + filePath",
          "633: }",
          "",
          "[Removed Lines]",
          "632:  c.JSON(http.StatusOK, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: data})",
          "",
          "[Added Lines]",
          "589:  return ctx.JSON(http.StatusOK, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: data})",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "650:  if len(key) == 0 {",
          "653:  }",
          "654:  if err != nil {",
          "657:  }",
          "659:  _, err = file.GetImageExtByName(f.Filename)",
          "660:  if err != nil {",
          "663:  }",
          "664:  ext := filepath.Ext(f.Filename)",
          "665:  user := service.MyService.User().GetUserInfoById(id)",
          "667:  if user.Id == 0 {",
          "670:  }",
          "671:  if t == \"avatar\" {",
          "672:   key = \"avatar\"",
          "673:  }",
          "674:  path := config.AppInfo.UserDataPath + \"/\" + strconv.Itoa(user.Id) + \"/\" + key + ext",
          "677:  data := make(map[string]string, 3)",
          "678:  data[\"path\"] = path",
          "679:  data[\"file_name\"] = key + ext",
          "680:  data[\"online_path\"] = \"/v1/users/image?path=\" + path",
          "682: }",
          "",
          "[Removed Lines]",
          "645: func PostUserUploadImage(c *gin.Context) {",
          "646:  id := c.GetHeader(\"user_id\")",
          "647:  f, err := c.FormFile(\"file\")",
          "648:  key := c.Param(\"key\")",
          "649:  t := c.PostForm(\"type\")",
          "651:   c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "652:   return",
          "655:   c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.CLIENT_ERROR, Message: common_err.GetMsg(common_err.CLIENT_ERROR), Data: err.Error()})",
          "656:   return",
          "661:   c.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.NOT_IMAGE, Message: common_err.GetMsg(common_err.NOT_IMAGE)})",
          "662:   return",
          "668:   c.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "669:   return",
          "676:  c.SaveUploadedFile(f, path)",
          "681:  c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: data})",
          "",
          "[Added Lines]",
          "602: func PostUserUploadImage(ctx echo.Context) error {",
          "603:  id := ctx.Request().Header.Get(\"user_id\")",
          "604:  f, err := ctx.FormFile(\"file\")",
          "605:  key := ctx.Param(\"key\")",
          "606:  t := ctx.FormValue(\"type\")",
          "608:   return ctx.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "611:   return ctx.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.CLIENT_ERROR, Message: common_err.GetMsg(common_err.CLIENT_ERROR), Data: err.Error()})",
          "616:   return ctx.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.NOT_IMAGE, Message: common_err.GetMsg(common_err.NOT_IMAGE)})",
          "622:   return ctx.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "629:  file.SaveUploadedFile(f, path)",
          "635:  return ctx.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: data})",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "691:  if len(filePath) == 0 {",
          "694:  }",
          "695:  absFilePath, err := filepath.Abs(filepath.Clean(filePath))",
          "696:  if err != nil {",
          "699:  }",
          "700:  if !file.Exists(absFilePath) {",
          "703:  }",
          "704:  if !strings.Contains(absFilePath, config.AppInfo.UserDataPath) {",
          "707:  }",
          "709:  matched, err := regexp.MatchString(`^/var/lib/casaos/\\d`, absFilePath)",
          "710:  if err != nil {",
          "713:  }",
          "714:  if !matched {",
          "717:  }",
          "719:  fileName := path.Base(absFilePath)",
          "724: }",
          "729:  if len(path) == 0 {",
          "732:  }",
          "733:  user := service.MyService.User().GetUserInfoById(id)",
          "734:  if user.Id == 0 {",
          "737:  }",
          "738:  if !file.Exists(path) {",
          "741:  }",
          "742:  if !strings.Contains(path, config.AppInfo.UserDataPath+\"/\"+strconv.Itoa(user.Id)) {",
          "745:  }",
          "746:  os.Remove(path)",
          "748: }",
          "",
          "[Removed Lines]",
          "689: func GetUserImage(c *gin.Context) {",
          "690:  filePath := c.Query(\"path\")",
          "692:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "693:   return",
          "697:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "698:   return",
          "701:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.FILE_DOES_NOT_EXIST, Message: common_err.GetMsg(common_err.FILE_DOES_NOT_EXIST)})",
          "702:   return",
          "705:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.INSUFFICIENT_PERMISSIONS, Message: common_err.GetMsg(common_err.INSUFFICIENT_PERMISSIONS)})",
          "706:   return",
          "711:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.INSUFFICIENT_PERMISSIONS, Message: common_err.GetMsg(common_err.INSUFFICIENT_PERMISSIONS)})",
          "712:   return",
          "715:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.INSUFFICIENT_PERMISSIONS, Message: common_err.GetMsg(common_err.INSUFFICIENT_PERMISSIONS)})",
          "716:   return",
          "722:  c.Header(\"Content-Disposition\", \"attachment; filename*=utf-8''\"+url2.PathEscape(fileName))",
          "723:  c.File(absFilePath)",
          "726: func DeleteUserImage(c *gin.Context) {",
          "727:  id := c.GetHeader(\"user_id\")",
          "728:  path := c.Query(\"path\")",
          "730:   c.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "731:   return",
          "735:   c.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "736:   return",
          "739:   c.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.FILE_DOES_NOT_EXIST, Message: common_err.GetMsg(common_err.FILE_DOES_NOT_EXIST)})",
          "740:   return",
          "743:   c.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.INSUFFICIENT_PERMISSIONS, Message: common_err.GetMsg(common_err.INSUFFICIENT_PERMISSIONS)})",
          "744:   return",
          "747:  c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS)})",
          "",
          "[Added Lines]",
          "643: func GetUserImage(ctx echo.Context) error {",
          "644:  filePath := ctx.QueryParam(\"path\")",
          "646:   return ctx.JSON(http.StatusNotFound, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "650:   return ctx.JSON(http.StatusNotFound, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "653:   return ctx.JSON(http.StatusNotFound, model.Result{Success: common_err.FILE_DOES_NOT_EXIST, Message: common_err.GetMsg(common_err.FILE_DOES_NOT_EXIST)})",
          "656:   return ctx.JSON(http.StatusNotFound, model.Result{Success: common_err.INSUFFICIENT_PERMISSIONS, Message: common_err.GetMsg(common_err.INSUFFICIENT_PERMISSIONS)})",
          "661:   return ctx.JSON(http.StatusNotFound, model.Result{Success: common_err.INSUFFICIENT_PERMISSIONS, Message: common_err.GetMsg(common_err.INSUFFICIENT_PERMISSIONS)})",
          "664:   return ctx.JSON(http.StatusNotFound, model.Result{Success: common_err.INSUFFICIENT_PERMISSIONS, Message: common_err.GetMsg(common_err.INSUFFICIENT_PERMISSIONS)})",
          "670:  ctx.Response().Header().Set(\"Content-Disposition\", \"attachment; filename*=utf-8''\"+url2.PathEscape(fileName))",
          "671:  return ctx.File(absFilePath)",
          "674: func DeleteUserImage(ctx echo.Context) error {",
          "675:  id := ctx.Request().Header.Get(\"user_id\")",
          "676:  path := ctx.QueryParam(\"path\")",
          "678:   return ctx.JSON(common_err.CLIENT_ERROR, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "682:   return ctx.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.USER_NOT_EXIST, Message: common_err.GetMsg(common_err.USER_NOT_EXIST)})",
          "685:   return ctx.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.FILE_DOES_NOT_EXIST, Message: common_err.GetMsg(common_err.FILE_DOES_NOT_EXIST)})",
          "688:   return ctx.JSON(common_err.SERVICE_ERROR, model.Result{Success: common_err.INSUFFICIENT_PERMISSIONS, Message: common_err.GetMsg(common_err.INSUFFICIENT_PERMISSIONS)})",
          "691:  return ctx.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS)})",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "759:  js := make(map[string]string)",
          "761:  refresh := js[\"refresh_token\"]",
          "763:  privateKey, _ := service.MyService.User().GetKeyPair()",
          "",
          "[Removed Lines]",
          "758: func PostUserRefreshToken(c *gin.Context) {",
          "760:  c.ShouldBind(&js)",
          "",
          "[Added Lines]",
          "702: func PostUserRefreshToken(ctx echo.Context) error {",
          "704:  ctx.Bind(&js)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "769:    return publicKey, nil",
          "770:   })",
          "771:  if err != nil {",
          "774:  }",
          "775:  if !claims.VerifyExpiresAt(time.Now(), true) || !claims.VerifyIssuer(\"refresh\", true) {",
          "778:  }",
          "780:  newAccessToken, err := jwt.GetAccessToken(claims.Username, privateKey, claims.ID)",
          "781:  if err != nil {",
          "784:  }",
          "786:  newRefreshToken, err := jwt.GetRefreshToken(claims.Username, privateKey, claims.ID)",
          "787:  if err != nil {",
          "790:  }",
          "792:  verifyInfo := system_model.VerifyInformation{",
          "",
          "[Removed Lines]",
          "772:   c.JSON(http.StatusUnauthorized, model.Result{Success: common_err.VERIFICATION_FAILURE, Message: common_err.GetMsg(common_err.VERIFICATION_FAILURE), Data: err.Error()})",
          "773:   return",
          "776:   c.JSON(http.StatusUnauthorized, model.Result{Success: common_err.VERIFICATION_FAILURE, Message: common_err.GetMsg(common_err.VERIFICATION_FAILURE)})",
          "777:   return",
          "782:   c.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
          "783:   return",
          "788:   c.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
          "789:   return",
          "",
          "[Added Lines]",
          "716:   return ctx.JSON(http.StatusUnauthorized, model.Result{Success: common_err.VERIFICATION_FAILURE, Message: common_err.GetMsg(common_err.VERIFICATION_FAILURE), Data: err.Error()})",
          "719:   return ctx.JSON(http.StatusUnauthorized, model.Result{Success: common_err.VERIFICATION_FAILURE, Message: common_err.GetMsg(common_err.VERIFICATION_FAILURE)})",
          "724:   return ctx.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
          "729:   return ctx.JSON(http.StatusInternalServerError, model.Result{Success: common_err.SERVICE_ERROR, Message: err.Error()})",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "795:   ExpiresAt:    time.Now().Add(3 * time.Hour).Unix(),",
          "796:  }",
          "799: }",
          "802:  service.MyService.User().DeleteAllUser()",
          "804: }",
          "",
          "[Removed Lines]",
          "798:  c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: verifyInfo})",
          "801: func DeleteUserAll(c *gin.Context) {",
          "803:  c.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS)})",
          "",
          "[Added Lines]",
          "738:  return ctx.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS), Data: verifyInfo})",
          "741: func DeleteUserAll(ctx echo.Context) error {",
          "743:  return ctx.JSON(common_err.SUCCESS, model.Result{Success: common_err.SUCCESS, Message: common_err.GetMsg(common_err.SUCCESS)})",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "814:  data := make(map[string]interface{}, 2)",
          "816:  if service.MyService.User().GetUserCount() > 0 {",
          "",
          "[Removed Lines]",
          "813: func GetUserStatus(c *gin.Context) {",
          "",
          "[Added Lines]",
          "753: func GetUserStatus(ctx echo.Context) error {",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "827:   logger.Error(\"NvidiaGPUInfoList error\", zap.Error(err))",
          "828:  }",
          "829:  data[\"gpus\"] = len(gpus)",
          "831:   model.Result{",
          "832:    Success: common_err.SUCCESS,",
          "833:    Message: common_err.GetMsg(common_err.SUCCESS),",
          "",
          "[Removed Lines]",
          "830:  c.JSON(common_err.SUCCESS,",
          "",
          "[Added Lines]",
          "770:  return ctx.JSON(common_err.SUCCESS,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2fdbdcf1ec7b7439a399f4d52d8d91d5f3f40693",
      "candidate_info": {
        "commit_hash": "2fdbdcf1ec7b7439a399f4d52d8d91d5f3f40693",
        "repo": "IceWhaleTech/CasaOS-UserService",
        "commit_url": "https://github.com/IceWhaleTech/CasaOS-UserService/commit/2fdbdcf1ec7b7439a399f4d52d8d91d5f3f40693",
        "files": [
          "route/v1/user.go"
        ],
        "message": "Adding Absolute Path Determination",
        "before_after_code_files": [
          "route/v1/user.go||route/v1/user.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "route/v1/user.go||route/v1/user.go"
          ],
          "candidate": [
            "route/v1/user.go||route/v1/user.go"
          ]
        }
      },
      "candidate_diff": {
        "route/v1/user.go||route/v1/user.go": [
          "File: route/v1/user.go -> route/v1/user.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "660:   return",
          "661:  }",
          "663:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.FILE_DOES_NOT_EXIST, Message: common_err.GetMsg(common_err.FILE_DOES_NOT_EXIST)})",
          "664:   return",
          "665:  }",
          "667:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.INSUFFICIENT_PERMISSIONS, Message: common_err.GetMsg(common_err.INSUFFICIENT_PERMISSIONS)})",
          "668:   return",
          "669:  }",
          "672:  if err != nil {",
          "673:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.INSUFFICIENT_PERMISSIONS, Message: common_err.GetMsg(common_err.INSUFFICIENT_PERMISSIONS)})",
          "674:   return",
          "",
          "[Removed Lines]",
          "662:  if !file.Exists(filePath) {",
          "666:  if !strings.Contains(filePath, config.AppInfo.UserDataPath) {",
          "671:  matched, err := regexp.MatchString(`^/var/lib/casaos/\\d`, filePath)",
          "",
          "[Added Lines]",
          "662:  absFilePath, err := filepath.Abs(filepath.Clean(filePath))",
          "663:  if err != nil {",
          "664:   c.JSON(http.StatusNotFound, model.Result{Success: common_err.INVALID_PARAMS, Message: common_err.GetMsg(common_err.INVALID_PARAMS)})",
          "665:   return",
          "666:  }",
          "667:  if !file.Exists(absFilePath) {",
          "671:  if !strings.Contains(absFilePath, config.AppInfo.UserDataPath) {",
          "676:  matched, err := regexp.MatchString(`^/var/lib/casaos/\\d`, absFilePath)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "678:   return",
          "679:  }",
          "687:  c.Header(\"Content-Disposition\", \"attachment; filename*=utf-8''\"+url2.PathEscape(fileName))",
          "689: }",
          "691: func DeleteUserImage(c *gin.Context) {",
          "",
          "[Removed Lines]",
          "681:  fileTmp, _ := os.Open(filePath)",
          "682:  defer fileTmp.Close()",
          "684:  fileName := path.Base(filePath)",
          "688:  c.File(filePath)",
          "",
          "[Added Lines]",
          "686:  fileName := path.Base(absFilePath)",
          "690:  c.File(absFilePath)",
          "",
          "---------------"
        ]
      }
    }
  ]
}