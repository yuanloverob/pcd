{
  "cve_id": "CVE-2024-29194",
  "cve_desc": "OneUptime is a solution for monitoring and managing online services. The vulnerability lies in the improper validation of client-side stored data within the web application. Specifically, the is_master_admin key, stored in the local storage of the browser, can be manipulated by an attacker. By changing this key from false to true, the application grants administrative privileges to the user, without proper server-side validation.  This has been patched in 7.0.1815.",
  "repo": "OneUptime/oneuptime",
  "patch_hash": "14016d23d834038dd65d3a96cf71af04b556a32c",
  "patch_info": {
    "commit_hash": "14016d23d834038dd65d3a96cf71af04b556a32c",
    "repo": "OneUptime/oneuptime",
    "commit_url": "https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c",
    "files": [
      "CommonServer/Types/Database/ModelPermission.ts",
      "Model/Models/BillingInvoice.ts",
      "Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "Model/Models/OnCallDutyPolicyExecutionLog.ts",
      "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "Model/Models/OnCallDutyPolicySchedule.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayer.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts",
      "Model/Models/User.ts"
    ],
    "message": "Add deletedByUserId property to several models",
    "before_after_code_files": [
      "CommonServer/Types/Database/ModelPermission.ts||CommonServer/Types/Database/ModelPermission.ts",
      "Model/Models/BillingInvoice.ts||Model/Models/BillingInvoice.ts",
      "Model/Models/OnCallDutyPolicyEscalationRule.ts||Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts||Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts||Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts||Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "Model/Models/OnCallDutyPolicyExecutionLog.ts||Model/Models/OnCallDutyPolicyExecutionLog.ts",
      "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts||Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "Model/Models/OnCallDutyPolicySchedule.ts||Model/Models/OnCallDutyPolicySchedule.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayer.ts||Model/Models/OnCallDutyPolicyScheduleLayer.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts||Model/Models/OnCallDutyPolicyScheduleLayerUser.ts",
      "Model/Models/User.ts||Model/Models/User.ts"
    ]
  },
  "patch_diff": {
    "CommonServer/Types/Database/ModelPermission.ts||CommonServer/Types/Database/ModelPermission.ts": [
      "File: CommonServer/Types/Database/ModelPermission.ts -> CommonServer/Types/Database/ModelPermission.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: import ColumnBillingAccessControl from 'Common/Types/BaseDatabase/ColumnBillingAccessControl';",
      "40: import DatabaseCommonInteractionPropsUtil from 'Common/Types/BaseDatabase/DatabaseCommonInteractionPropsUtil';",
      "41: import Includes from 'Common/Types/BaseDatabase/Includes';",
      "43: export interface CheckReadPermissionType<TBaseModel extends BaseModel> {",
      "44:     query: Query<TBaseModel>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: import UserModel from 'Common/Models/UserModel';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:                 props",
      "296:             );",
      "298:             if (!props.isMultiTenantRequest) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "301:             query = await this.addUserScopeToQuery(modelType, query, props);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "854:         return query;",
      "855:     }",
      "857:     private static async addTenantScopeToQuery<TBaseModel extends BaseModel>(",
      "858:         modelType: { new (): TBaseModel },",
      "859:         query: Query<TBaseModel>,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "862:     private static async addUserScopeToQuery<TBaseModel extends BaseModel>(",
      "863:         modelType: { new (): TBaseModel },",
      "864:         query: Query<TBaseModel>,",
      "865:         props: DatabaseCommonInteractionProps",
      "866:     ): Promise<Query<TBaseModel>> {",
      "867:         const model: BaseModel = new modelType();",
      "869:         if (model instanceof UserModel) {",
      "870:             if (props.userId) {",
      "871:                 (query as any)['_id'] = props.userId;",
      "872:             } else if (!props.isRoot && !props.isMasterAdmin) {",
      "873:                 throw new NotAuthorizedException(",
      "874:                     `You do not have permissions to query on - ${model.singularName}.`",
      "875:                 );",
      "876:             }",
      "877:         }",
      "879:         return query;",
      "880:     }",
      "",
      "---------------"
    ],
    "Model/Models/BillingInvoice.ts||Model/Models/BillingInvoice.ts": [
      "File: Model/Models/BillingInvoice.ts -> Model/Models/BillingInvoice.ts"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRule.ts||Model/Models/OnCallDutyPolicyEscalationRule.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRule.ts -> Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "355:     @JoinColumn({ name: 'deletedByUserId' })",
      "356:     public deletedByUser?: User = undefined;",
      "358:     @ColumnAccessControl({",
      "359:         create: [",
      "360:             Permission.ProjectOwner,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "358:     @ColumnAccessControl({",
      "359:         create: [],",
      "360:         read: [],",
      "361:         update: [],",
      "362:     })",
      "363:     @TableColumn({",
      "364:         type: TableColumnType.ObjectID,",
      "365:         title: 'Deleted by User ID',",
      "366:         description:",
      "367:             'User ID who deleted this object (if this object was deleted by a User)',",
      "368:     })",
      "369:     @Column({",
      "370:         type: ColumnType.ObjectID,",
      "371:         nullable: true,",
      "372:         transformer: ObjectID.getDatabaseTransformer(),",
      "373:     })",
      "374:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts||Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts -> Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "420:     )",
      "421:     @JoinColumn({ name: 'deletedByUserId' })",
      "422:     public deletedByUser?: User = undefined;",
      "423: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "425:     @ColumnAccessControl({",
      "426:         create: [],",
      "427:         read: [],",
      "428:         update: [],",
      "429:     })",
      "430:     @TableColumn({",
      "431:         type: TableColumnType.ObjectID,",
      "432:         title: 'Deleted by User ID',",
      "433:         description:",
      "434:             'User ID who deleted this object (if this object was deleted by a User)',",
      "435:     })",
      "436:     @Column({",
      "437:         type: ColumnType.ObjectID,",
      "438:         nullable: true,",
      "439:         transformer: ObjectID.getDatabaseTransformer(),",
      "440:     })",
      "441:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts||Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts -> Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "418:     )",
      "419:     @JoinColumn({ name: 'deletedByUserId' })",
      "420:     public deletedByUser?: User = undefined;",
      "421: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "422:     @ColumnAccessControl({",
      "423:         create: [],",
      "424:         read: [],",
      "425:         update: [],",
      "426:     })",
      "427:     @TableColumn({",
      "428:         type: TableColumnType.ObjectID,",
      "429:         title: 'Deleted by User ID',",
      "430:         description:",
      "431:             'User ID who deleted this object (if this object was deleted by a User)',",
      "432:     })",
      "433:     @Column({",
      "434:         type: ColumnType.ObjectID,",
      "435:         nullable: true,",
      "436:         transformer: ObjectID.getDatabaseTransformer(),",
      "437:     })",
      "438:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts||Model/Models/OnCallDutyPolicyEscalationRuleUser.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleUser.ts -> Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "417:     )",
      "418:     @JoinColumn({ name: 'deletedByUserId' })",
      "419:     public deletedByUser?: User = undefined;",
      "420: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "421:     @ColumnAccessControl({",
      "422:         create: [],",
      "423:         read: [],",
      "424:         update: [],",
      "425:     })",
      "426:     @TableColumn({",
      "427:         type: TableColumnType.ObjectID,",
      "428:         title: 'Deleted by User ID',",
      "429:         description:",
      "430:             'User ID who deleted this object (if this object was deleted by a User)',",
      "431:     })",
      "432:     @Column({",
      "433:         type: ColumnType.ObjectID,",
      "434:         nullable: true,",
      "435:         transformer: ObjectID.getDatabaseTransformer(),",
      "436:     })",
      "437:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyExecutionLog.ts||Model/Models/OnCallDutyPolicyExecutionLog.ts": [
      "File: Model/Models/OnCallDutyPolicyExecutionLog.ts -> Model/Models/OnCallDutyPolicyExecutionLog.ts"
    ],
    "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts||Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts": [
      "File: Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts -> Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "708:         unique: false,",
      "709:     })",
      "710:     public acknowledgedAt?: Date = undefined;",
      "711: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "712:     @ColumnAccessControl({",
      "713:         create: [],",
      "714:         read: [],",
      "715:         update: [],",
      "716:     })",
      "717:     @TableColumn({",
      "718:         type: TableColumnType.ObjectID,",
      "719:         title: 'Deleted by User ID',",
      "720:         description:",
      "721:             'User ID who deleted this object (if this object was deleted by a User)',",
      "722:     })",
      "723:     @Column({",
      "724:         type: ColumnType.ObjectID,",
      "725:         nullable: true,",
      "726:         transformer: ObjectID.getDatabaseTransformer(),",
      "727:     })",
      "728:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicySchedule.ts||Model/Models/OnCallDutyPolicySchedule.ts": [
      "File: Model/Models/OnCallDutyPolicySchedule.ts -> Model/Models/OnCallDutyPolicySchedule.ts"
    ],
    "Model/Models/OnCallDutyPolicyScheduleLayer.ts||Model/Models/OnCallDutyPolicyScheduleLayer.ts": [
      "File: Model/Models/OnCallDutyPolicyScheduleLayer.ts -> Model/Models/OnCallDutyPolicyScheduleLayer.ts"
    ],
    "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts||Model/Models/OnCallDutyPolicyScheduleLayerUser.ts": [
      "File: Model/Models/OnCallDutyPolicyScheduleLayerUser.ts -> Model/Models/OnCallDutyPolicyScheduleLayerUser.ts"
    ],
    "Model/Models/User.ts||Model/Models/User.ts": [
      "File: Model/Models/User.ts -> Model/Models/User.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: @AllowAccessIfSubscriptionIsUnpaid()",
      "33: @TableAccessControl({",
      "34:     create: [Permission.Public],",
      "40:     delete: [Permission.CurrentUser],",
      "41:     update: [Permission.CurrentUser],",
      "42: })",
      "",
      "[Removed Lines]",
      "35:     read: [",
      "36:         Permission.CurrentUser,",
      "37:         Permission.ProjectAdmin,",
      "38:         Permission.ProjectOwner,",
      "39:     ],",
      "",
      "[Added Lines]",
      "35:     read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: class User extends UserModel {",
      "57:     @ColumnAccessControl({",
      "58:         create: [Permission.Public],",
      "64:         update: [Permission.CurrentUser],",
      "65:     })",
      "66:     @TableColumn({ type: TableColumnType.Name, canReadOnRelationQuery: true })",
      "",
      "[Removed Lines]",
      "59:         read: [",
      "60:             Permission.CurrentUser,",
      "61:             Permission.ProjectAdmin,",
      "62:             Permission.ProjectOwner,",
      "63:         ],",
      "",
      "[Added Lines]",
      "55:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76:     @ColumnAccessControl({",
      "77:         create: [Permission.Public],",
      "84:         update: [Permission.CurrentUser],",
      "85:     })",
      "",
      "[Removed Lines]",
      "78:         read: [",
      "79:             Permission.CurrentUser,",
      "80:             Permission.ProjectAdmin,",
      "81:             Permission.ProjectOwner,",
      "82:         ],",
      "",
      "[Added Lines]",
      "70:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     @ColumnAccessControl({",
      "249:         create: [],",
      "256:         update: [Permission.CurrentUser],",
      "257:     })",
      "",
      "[Removed Lines]",
      "250:         read: [",
      "251:             Permission.CurrentUser,",
      "252:             Permission.ProjectAdmin,",
      "253:             Permission.ProjectOwner,",
      "254:         ],",
      "",
      "[Added Lines]",
      "238:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "277:     @ColumnAccessControl({",
      "278:         create: [],",
      "285:         update: [Permission.CurrentUser],",
      "286:     })",
      "",
      "[Removed Lines]",
      "279:         read: [",
      "280:             Permission.CurrentUser,",
      "281:             Permission.ProjectAdmin,",
      "282:             Permission.ProjectOwner,",
      "283:         ],",
      "",
      "[Added Lines]",
      "263:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "298:     @ColumnAccessControl({",
      "299:         create: [],",
      "306:         update: [Permission.CurrentUser],",
      "307:     })",
      "",
      "[Removed Lines]",
      "300:         read: [",
      "301:             Permission.CurrentUser,",
      "302:             Permission.ProjectAdmin,",
      "303:             Permission.ProjectOwner,",
      "304:         ],",
      "",
      "[Added Lines]",
      "280:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "309:         isDefaultValueColumn: true,",
      "310:         required: true,",
      "311:         type: TableColumnType.Boolean,",
      "312:     })",
      "313:     @Column({",
      "314:         type: ColumnType.Boolean,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "288:         canReadOnRelationQuery: true,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "425:     @ColumnAccessControl({",
      "426:         create: [],",
      "433:         update: [Permission.CurrentUser],",
      "434:     })",
      "",
      "[Removed Lines]",
      "427:         read: [",
      "428:             Permission.CurrentUser,",
      "429:             Permission.ProjectAdmin,",
      "430:             Permission.ProjectOwner,",
      "431:         ],",
      "",
      "[Added Lines]",
      "404:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "544:     @ColumnAccessControl({",
      "545:         create: [],",
      "552:         update: [Permission.CurrentUser],",
      "553:     })",
      "",
      "[Removed Lines]",
      "546:         read: [",
      "547:             Permission.CurrentUser,",
      "548:             Permission.ProjectAdmin,",
      "549:             Permission.ProjectOwner,",
      "550:         ],",
      "",
      "[Added Lines]",
      "519:         read: [Permission.CurrentUser],",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ca18bebd57e6c9a77dd92ba5e4838a88d868728",
      "candidate_info": {
        "commit_hash": "0ca18bebd57e6c9a77dd92ba5e4838a88d868728",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/0ca18bebd57e6c9a77dd92ba5e4838a88d868728",
        "files": [
          "Ingestor/Utils/Criteria/APIRequestCriteria.ts",
          "Ingestor/Utils/Criteria/CompareCriteria.ts",
          "Ingestor/Utils/Criteria/EvaluateOverTime.ts",
          "Ingestor/Utils/Criteria/ServerMonitorCriteria.ts"
        ],
        "message": "Refactor server and API request criteria classes",
        "before_after_code_files": [
          "Ingestor/Utils/Criteria/APIRequestCriteria.ts||Ingestor/Utils/Criteria/APIRequestCriteria.ts",
          "Ingestor/Utils/Criteria/CompareCriteria.ts||Ingestor/Utils/Criteria/CompareCriteria.ts",
          "Ingestor/Utils/Criteria/EvaluateOverTime.ts||Ingestor/Utils/Criteria/EvaluateOverTime.ts",
          "Ingestor/Utils/Criteria/ServerMonitorCriteria.ts||Ingestor/Utils/Criteria/ServerMonitorCriteria.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Ingestor/Utils/Criteria/APIRequestCriteria.ts||Ingestor/Utils/Criteria/APIRequestCriteria.ts": [
          "File: Ingestor/Utils/Criteria/APIRequestCriteria.ts -> Ingestor/Utils/Criteria/APIRequestCriteria.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:     }): Promise<string | null> {",
          "23:         let overTimeValue: Array<number> | number | undefined = undefined;",
          "27:             overTimeValue = await EvaluateOverTime.getValueOverTime({",
          "28:                 monitorId: input.dataToProcess.monitorId!,",
          "30:                 metricType: input.criteriaFilter.checkOn,",
          "32:             });",
          "34:             if (Array.isArray(overTimeValue) && overTimeValue.length === 0) {",
          "",
          "[Removed Lines]",
          "20:         let threshold: number | string | undefined | null = input.criteriaFilter.value;",
          "26:         if (input.criteriaFilter.eveluateOverTime && input.criteriaFilter.evaluateOverTimeOptions) {",
          "29:                 evaluateOverTimeOptions: input.criteriaFilter.evaluateOverTimeOptions,",
          "31:                 miscData: input.criteriaFilter.serverMonitorOptions as JSONObject",
          "",
          "[Added Lines]",
          "20:         let threshold: number | string | undefined | null =",
          "21:             input.criteriaFilter.value;",
          "25:         if (",
          "26:             input.criteriaFilter.eveluateOverTime &&",
          "27:             input.criteriaFilter.evaluateOverTimeOptions",
          "28:         ) {",
          "31:                 evaluateOverTimeOptions:",
          "32:                     input.criteriaFilter.evaluateOverTimeOptions,",
          "34:                 miscData: input.criteriaFilter",
          "35:                     .serverMonitorOptions as JSONObject,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:         if (input.criteriaFilter.checkOn === CheckOn.ResponseTime) {",
          "45:             threshold = CompareCriteria.convertThresholdToNumber(threshold);",
          "50:             return CompareCriteria.compareCriteriaNumbers({",
          "51:                 value: value,",
          "",
          "[Removed Lines]",
          "47:             let value: Array<number> | number = overTimeValue || (input.dataToProcess as ProbeMonitorResponse)",
          "48:                 .responseTimeInMs!;",
          "",
          "[Added Lines]",
          "51:             const value: Array<number> | number =",
          "52:                 overTimeValue ||",
          "53:                 (input.dataToProcess as ProbeMonitorResponse).responseTimeInMs!;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:         if (input.criteriaFilter.checkOn === CheckOn.ResponseStatusCode) {",
          "59:             threshold = CompareCriteria.convertThresholdToNumber(threshold);",
          "64:             return CompareCriteria.compareCriteriaNumbers({",
          "65:                 value: value,",
          "",
          "[Removed Lines]",
          "61:             let value: Array<number> | number = overTimeValue || (input.dataToProcess as ProbeMonitorResponse)",
          "62:                 .responseCode!;",
          "",
          "[Added Lines]",
          "66:             const value: Array<number> | number =",
          "67:                 overTimeValue ||",
          "68:                 (input.dataToProcess as ProbeMonitorResponse).responseCode!;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:         if (input.criteriaFilter.checkOn === CheckOn.ResponseHeader) {",
          "109:             const headerKeys: Array<string> = Object.keys(",
          "110:                 (input.dataToProcess as ProbeMonitorResponse).responseHeaders ||",
          "112:             ).map((key: string) => {",
          "113:                 return key.toLowerCase();",
          "114:             });",
          "",
          "[Removed Lines]",
          "111:                 {}",
          "",
          "[Added Lines]",
          "117:                     {}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "140:         if (input.criteriaFilter.checkOn === CheckOn.ResponseHeaderValue) {",
          "141:             const headerValues: Array<string> = Object.values(",
          "142:                 (input.dataToProcess as ProbeMonitorResponse).responseHeaders ||",
          "144:             ).map((key: string) => {",
          "145:                 return key.toLowerCase();",
          "146:             });",
          "",
          "[Removed Lines]",
          "143:                 {}",
          "",
          "[Added Lines]",
          "149:                     {}",
          "",
          "---------------"
        ],
        "Ingestor/Utils/Criteria/CompareCriteria.ts||Ingestor/Utils/Criteria/CompareCriteria.ts": [
          "File: Ingestor/Utils/Criteria/CompareCriteria.ts -> Ingestor/Utils/Criteria/CompareCriteria.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: export default class CompareCriteria {",
          "7:     public static greaterThan(data: {",
          "11:     }): boolean {",
          "12:         if (Array.isArray(data.value)) {",
          "13:             if (data.evaluationType === EvaluateOverTimeType.AnyValue) {",
          "17:             }",
          "18:         }",
          "20:         return data.value > data.threshold;",
          "21:     }",
          "23:     public static lessThan(data: {",
          "27:     }): boolean {",
          "28:         if (Array.isArray(data.value)) {",
          "29:             if (data.evaluationType === EvaluateOverTimeType.AnyValue) {",
          "33:             }",
          "34:         }",
          "36:         return data.value < data.threshold;",
          "37:     }",
          "39:     public static greaterThanOrEqual(data: {",
          "43:     }): boolean {",
          "44:         if (Array.isArray(data.value)) {",
          "45:             if (data.evaluationType === EvaluateOverTimeType.AnyValue) {",
          "49:             }",
          "50:         }",
          "52:         return data.value >= data.threshold;",
          "53:     }",
          "56:     public static lessThanOrEqual(data: {",
          "60:     }): boolean {",
          "61:         if (Array.isArray(data.value)) {",
          "62:             if (data.evaluationType === EvaluateOverTimeType.AnyValue) {",
          "66:             }",
          "67:         }",
          "69:         return data.value <= data.threshold;",
          "70:     }",
          "72:     public static equalTo(data: {",
          "76:     }): boolean {",
          "77:         if (Array.isArray(data.value)) {",
          "78:             if (data.evaluationType === EvaluateOverTimeType.AnyValue) {",
          "82:             }",
          "83:         }",
          "85:         return data.value === data.threshold;",
          "86:     }",
          "88:     public static notEqualTo(data: {",
          "92:     }): boolean {",
          "93:         if (Array.isArray(data.value)) {",
          "94:             if (data.evaluationType === EvaluateOverTimeType.AnyValue) {",
          "98:             }",
          "99:         }",
          "101:         return data.value !== data.threshold;",
          "102:     }",
          "105:         if (!threshold) {",
          "106:             return null;",
          "107:         }",
          "",
          "[Removed Lines]",
          "1: import { CheckOn, CriteriaFilter, EvaluateOverTimeOptions, EvaluateOverTimeType, FilterType } from \"Common/Types/Monitor/CriteriaFilter\";",
          "2: import Typeof from \"Common/Types/Typeof\";",
          "3: import logger from \"CommonServer/Utils/Logger\";",
          "8:         value: number | Array<number>,",
          "9:         evaluationType?: EvaluateOverTimeType | undefined,",
          "10:         threshold: number",
          "14:                 return data.value.some((value: number) => value > data.threshold);",
          "15:             } else {",
          "16:                 return data.value.every((value: number) => value > data.threshold);",
          "24:         value: number | Array<number>,",
          "25:         evaluationType?: EvaluateOverTimeType | undefined,",
          "26:         threshold: number",
          "30:                 return data.value.some((value: number) => value < data.threshold);",
          "31:             } else {",
          "32:                 return data.value.every((value: number) => value < data.threshold);",
          "40:         value: number | Array<number>,",
          "41:         evaluationType?: EvaluateOverTimeType | undefined,",
          "42:         threshold: number",
          "46:                 return data.value.some((value: number) => value >= data.threshold);",
          "47:             } else {",
          "48:                 return data.value.every((value: number) => value >= data.threshold);",
          "57:         value: number | Array<number>,",
          "58:         evaluationType?: EvaluateOverTimeType | undefined,",
          "59:         threshold: number",
          "63:                 return data.value.some((value: number) => value <= data.threshold);",
          "64:             } else {",
          "65:                 return data.value.every((value: number) => value <= data.threshold);",
          "73:         value: number | Array<number>,",
          "74:         evaluationType?: EvaluateOverTimeType | undefined,",
          "75:         threshold: number",
          "79:                 return data.value.some((value: number) => value === data.threshold);",
          "80:             } else {",
          "81:                 return data.value.every((value: number) => value === data.threshold);",
          "89:         value: number | Array<number>,",
          "90:         evaluationType?: EvaluateOverTimeType | undefined,",
          "91:         threshold: number",
          "95:                 return data.value.some((value: number) => value !== data.threshold);",
          "96:             } else {",
          "97:                 return data.value.every((value: number) => value !== data.threshold);",
          "104:     public static convertThresholdToNumber(threshold: string | number | undefined): number | null {",
          "",
          "[Added Lines]",
          "1: import {",
          "2:     CheckOn,",
          "3:     CriteriaFilter,",
          "4:     EvaluateOverTimeType,",
          "5:     FilterType,",
          "6: } from 'Common/Types/Monitor/CriteriaFilter';",
          "7: import Typeof from 'Common/Types/Typeof';",
          "8: import logger from 'CommonServer/Utils/Logger';",
          "12:         value: number | Array<number>;",
          "13:         evaluationType?: EvaluateOverTimeType | undefined;",
          "14:         threshold: number;",
          "18:                 return data.value.some((value: number) => {",
          "19:                     return value > data.threshold;",
          "20:                 });",
          "22:             return data.value.every((value: number) => {",
          "23:                 return value > data.threshold;",
          "24:             });",
          "31:         value: number | Array<number>;",
          "32:         evaluationType?: EvaluateOverTimeType | undefined;",
          "33:         threshold: number;",
          "37:                 return data.value.some((value: number) => {",
          "38:                     return value < data.threshold;",
          "39:                 });",
          "41:             return data.value.every((value: number) => {",
          "42:                 return value < data.threshold;",
          "43:             });",
          "50:         value: number | Array<number>;",
          "51:         evaluationType?: EvaluateOverTimeType | undefined;",
          "52:         threshold: number;",
          "56:                 return data.value.some((value: number) => {",
          "57:                     return value >= data.threshold;",
          "58:                 });",
          "60:             return data.value.every((value: number) => {",
          "61:                 return value >= data.threshold;",
          "62:             });",
          "69:         value: number | Array<number>;",
          "70:         evaluationType?: EvaluateOverTimeType | undefined;",
          "71:         threshold: number;",
          "75:                 return data.value.some((value: number) => {",
          "76:                     return value <= data.threshold;",
          "77:                 });",
          "79:             return data.value.every((value: number) => {",
          "80:                 return value <= data.threshold;",
          "81:             });",
          "88:         value: number | Array<number>;",
          "89:         evaluationType?: EvaluateOverTimeType | undefined;",
          "90:         threshold: number;",
          "94:                 return data.value.some((value: number) => {",
          "95:                     return value === data.threshold;",
          "96:                 });",
          "98:             return data.value.every((value: number) => {",
          "99:                 return value === data.threshold;",
          "100:             });",
          "107:         value: number | Array<number>;",
          "108:         evaluationType?: EvaluateOverTimeType | undefined;",
          "109:         threshold: number;",
          "113:                 return data.value.some((value: number) => {",
          "114:                     return value !== data.threshold;",
          "115:                 });",
          "117:             return data.value.every((value: number) => {",
          "118:                 return value !== data.threshold;",
          "119:             });",
          "125:     public static convertThresholdToNumber(",
          "126:         threshold: string | number | undefined",
          "127:     ): number | null {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:     }",
          "125:     public static compareCriteriaNumbers(data: {",
          "129:     }): string | null {",
          "130:         if (data.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "136:                 return CompareCriteria.getCompareMessage({",
          "137:                     values: data.value,",
          "138:                     threshold: data.threshold as number,",
          "140:                 });",
          "141:             }",
          "",
          "[Removed Lines]",
          "126:         value: Array<number> | number,",
          "127:         threshold: number,",
          "128:         criteriaFilter: CriteriaFilter",
          "131:             if (CompareCriteria.greaterThan({",
          "132:                 threshold: data.threshold as number,",
          "133:                 value: data.value,",
          "134:                 evaluationType: data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "135:             })) {",
          "139:                     criteriaFilter: data.criteriaFilter",
          "",
          "[Added Lines]",
          "149:         value: Array<number> | number;",
          "150:         threshold: number;",
          "151:         criteriaFilter: CriteriaFilter;",
          "154:             if (",
          "155:                 CompareCriteria.greaterThan({",
          "156:                     threshold: data.threshold as number,",
          "157:                     value: data.value,",
          "158:                     evaluationType:",
          "159:                         data.criteriaFilter.evaluateOverTimeOptions",
          "160:                             ?.evaluateOverTimeType,",
          "161:                 })",
          "162:             ) {",
          "166:                     criteriaFilter: data.criteriaFilter,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "144:         }",
          "146:         if (data.criteriaFilter.filterType === FilterType.LessThan) {",
          "152:                 return CompareCriteria.getCompareMessage({",
          "154:                     values: data.value,",
          "155:                     threshold: data.threshold as number,",
          "158:                 });",
          "159:             }",
          "",
          "[Removed Lines]",
          "147:             if (CompareCriteria.lessThan({",
          "148:                 threshold: data.threshold as number,",
          "149:                 value: data.value,",
          "150:                 evaluationType: data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "151:             })) {",
          "156:                     criteriaFilter: data.criteriaFilter",
          "",
          "[Added Lines]",
          "174:             if (",
          "175:                 CompareCriteria.lessThan({",
          "176:                     threshold: data.threshold as number,",
          "177:                     value: data.value,",
          "178:                     evaluationType:",
          "179:                         data.criteriaFilter.evaluateOverTimeOptions",
          "180:                             ?.evaluateOverTimeType,",
          "181:                 })",
          "182:             ) {",
          "186:                     criteriaFilter: data.criteriaFilter,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:         }",
          "164:         if (data.criteriaFilter.filterType === FilterType.EqualTo) {",
          "170:                 return CompareCriteria.getCompareMessage({",
          "172:                     values: data.value,",
          "173:                     threshold: data.threshold as number,",
          "176:                 });",
          "177:             }",
          "",
          "[Removed Lines]",
          "165:             if (CompareCriteria.equalTo({",
          "166:                 threshold: data.threshold as number,",
          "167:                 value: data.value,",
          "168:                 evaluationType: data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "169:             })) {",
          "174:                     criteriaFilter: data.criteriaFilter",
          "",
          "[Added Lines]",
          "194:             if (",
          "195:                 CompareCriteria.equalTo({",
          "196:                     threshold: data.threshold as number,",
          "197:                     value: data.value,",
          "198:                     evaluationType:",
          "199:                         data.criteriaFilter.evaluateOverTimeOptions",
          "200:                             ?.evaluateOverTimeType,",
          "201:                 })",
          "202:             ) {",
          "206:                     criteriaFilter: data.criteriaFilter,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "180:         }",
          "182:         if (data.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "188:                 return CompareCriteria.getCompareMessage({",
          "190:                     values: data.value,",
          "191:                     threshold: data.threshold as number,",
          "194:                 });",
          "195:             }",
          "",
          "[Removed Lines]",
          "183:             if (CompareCriteria.notEqualTo({",
          "184:                 threshold: data.threshold as number,",
          "185:                 value: data.value,",
          "186:                 evaluationType: data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "187:             })) {",
          "192:                     criteriaFilter: data.criteriaFilter",
          "",
          "[Added Lines]",
          "214:             if (",
          "215:                 CompareCriteria.notEqualTo({",
          "216:                     threshold: data.threshold as number,",
          "217:                     value: data.value,",
          "218:                     evaluationType:",
          "219:                         data.criteriaFilter.evaluateOverTimeOptions",
          "220:                             ?.evaluateOverTimeType,",
          "221:                 })",
          "222:             ) {",
          "226:                     criteriaFilter: data.criteriaFilter,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "198:         }",
          "200:         if (",
          "203:         ) {",
          "209:                 return CompareCriteria.getCompareMessage({",
          "211:                     values: data.value,",
          "212:                     threshold: data.threshold as number,",
          "215:                 });",
          "216:             }",
          "218:             return null;",
          "219:         }",
          "229:                 return CompareCriteria.getCompareMessage({",
          "231:                     values: data.value,",
          "232:                     threshold: data.threshold as number,",
          "235:                 });",
          "236:             }",
          "",
          "[Removed Lines]",
          "201:             data.criteriaFilter.filterType ===",
          "202:             FilterType.GreaterThanOrEqualTo",
          "204:             if (CompareCriteria.greaterThanOrEqual({",
          "205:                 threshold: data.threshold as number,",
          "206:                 value: data.value,",
          "207:                 evaluationType: data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "208:             })) {",
          "213:                     criteriaFilter: data.criteriaFilter",
          "221:         if (",
          "222:             data.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "223:         ) {",
          "224:             if (CompareCriteria.lessThanOrEqual({",
          "225:                 threshold: data.threshold as number,",
          "226:                 value: data.value,",
          "227:                 evaluationType: data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "228:             })) {",
          "233:                     criteriaFilter: data.criteriaFilter",
          "",
          "[Added Lines]",
          "234:             data.criteriaFilter.filterType === FilterType.GreaterThanOrEqualTo",
          "236:             if (",
          "237:                 CompareCriteria.greaterThanOrEqual({",
          "238:                     threshold: data.threshold as number,",
          "239:                     value: data.value,",
          "240:                     evaluationType:",
          "241:                         data.criteriaFilter.evaluateOverTimeOptions",
          "242:                             ?.evaluateOverTimeType,",
          "243:                 })",
          "244:             ) {",
          "248:                     criteriaFilter: data.criteriaFilter,",
          "255:         if (data.criteriaFilter.filterType === FilterType.LessThanOrEqualTo) {",
          "256:             if (",
          "257:                 CompareCriteria.lessThanOrEqual({",
          "258:                     threshold: data.threshold as number,",
          "259:                     value: data.value,",
          "260:                     evaluationType:",
          "261:                         data.criteriaFilter.evaluateOverTimeOptions",
          "262:                             ?.evaluateOverTimeType,",
          "263:                 })",
          "264:             ) {",
          "268:                     criteriaFilter: data.criteriaFilter,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "242:     }",
          "244:     public static getCompareMessage(data: {",
          "248:     }): string {",
          "254:             message += 'Any value of';",
          "255:         }",
          "258:             message += 'All values of';",
          "259:         }",
          "261:         message += ` ${data.criteriaFilter.checkOn}`;",
          "263:         if (data.criteriaFilter.checkOn === CheckOn.DiskUsagePercent) {",
          "265:             const diskPath: string =",
          "266:                 data.criteriaFilter.serverMonitorOptions?.diskPath || '/';",
          "",
          "[Removed Lines]",
          "245:         values: Array<number> | number,",
          "246:         threshold: number,",
          "247:         criteriaFilter: CriteriaFilter,",
          "251:         let message = '';",
          "253:         if (data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType === EvaluateOverTimeType.AnyValue) {",
          "257:         if (data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType === EvaluateOverTimeType.AllValues) {",
          "",
          "[Added Lines]",
          "279:         values: Array<number> | number;",
          "280:         threshold: number;",
          "281:         criteriaFilter: CriteriaFilter;",
          "284:         let message: string = '';",
          "286:         if (",
          "287:             data.criteriaFilter.evaluateOverTimeOptions",
          "288:                 ?.evaluateOverTimeType === EvaluateOverTimeType.AnyValue",
          "289:         ) {",
          "293:         if (",
          "294:             data.criteriaFilter.evaluateOverTimeOptions",
          "295:                 ?.evaluateOverTimeType === EvaluateOverTimeType.AllValues",
          "296:         ) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278:             message += ` is ${data.values}`;",
          "279:         }",
          "283:         switch (data.criteriaFilter.filterType) {",
          "284:             case FilterType.EqualTo:",
          "",
          "[Removed Lines]",
          "281:         message += ' which is'",
          "",
          "[Added Lines]",
          "319:         message += ' which is';",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "299:         }",
          "301:         return message.trim();",
          "304:     }",
          "",
          "[Removed Lines]",
          "306: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Ingestor/Utils/Criteria/EvaluateOverTime.ts||Ingestor/Utils/Criteria/EvaluateOverTime.ts": [
          "File: Ingestor/Utils/Criteria/EvaluateOverTime.ts -> Ingestor/Utils/Criteria/EvaluateOverTime.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     public static async getValueOverTime(data: {",
          "17:     }): Promise<number | Array<number>> {",
          "24:             createdAt: new GreaterThanOrEqual(lastMinutesDate),",
          "25:             monitorId: data.monitorId,",
          "26:             metricType: data.metricType,",
          "27:         };",
          "31:             query.miscData = data.miscData;",
          "32:         }",
          "50:             return values;",
          "51:         }",
          "53:         return this.getValueByEvaluationType({",
          "54:             values: values,",
          "56:         });",
          "58:     }",
          "60:     private static getValueByEvaluationType(data: {",
          "63:     }): number {",
          "64:         switch (data.evaluateOverTimeType) {",
          "65:             case EvaluateOverTimeType.Average:",
          "",
          "[Removed Lines]",
          "1: import GreaterThanOrEqual from \"Common/Types/BaseDatabase/GreaterThanOrEqual\";",
          "2: import { LIMIT_PER_PROJECT } from \"Common/Types/Database/LimitMax\";",
          "3: import OneUptimeDate from \"Common/Types/Date\";",
          "4: import { JSONObject } from \"Common/Types/JSON\";",
          "5: import { CheckOn, EvaluateOverTimeOptions, EvaluateOverTimeType } from \"Common/Types/Monitor/CriteriaFilter\";",
          "6: import ObjectID from \"Common/Types/ObjectID\";",
          "7: import MonitorMetricsByMinuteService from \"CommonServer/Services/MonitorMetricsByMinuteService\";",
          "8: import Query from \"CommonServer/Types/AnalyticsDatabase/Query\";",
          "9: import MonitorMetricsByMinute from \"Model/AnalyticsModels/MonitorMetricsByMinute\";",
          "11: export default class EvaluateOverTime {",
          "13:         monitorId: ObjectID,",
          "14:         evaluateOverTimeOptions: EvaluateOverTimeOptions,",
          "15:         metricType: CheckOn,",
          "16:         miscData?: JSONObject | undefined,",
          "19:         const lastMinutesDate = OneUptimeDate.getSomeMinutesAgo(data.evaluateOverTimeOptions.timeValueInMinutes!);",
          "23:         const query: Query<MonitorMetricsByMinute>  = {",
          "30:         if(data.miscData){",
          "34:         const monitorMetricsItems: Array<MonitorMetricsByMinute> = await MonitorMetricsByMinuteService.findBy({",
          "35:             query: query,",
          "36:             limit: LIMIT_PER_PROJECT,",
          "37:             skip: 0,",
          "38:             props: {",
          "39:                 isRoot: true",
          "40:             },",
          "41:             select: {",
          "42:                 metricValue: true",
          "43:             }",
          "44:         })",
          "46:         const values: Array<number> = monitorMetricsItems.map((item: MonitorMetricsByMinute) => item.metricValue).filter((value: number | undefined) => value !== undefined) as Array<number>;",
          "48:         if(data.evaluateOverTimeOptions.evaluateOverTimeType === EvaluateOverTimeType.AnyValue || data.evaluateOverTimeOptions.evaluateOverTimeType === EvaluateOverTimeType.AllValues) {",
          "55:             evaluateOverTimeType: data.evaluateOverTimeOptions.evaluateOverTimeType!",
          "61:         values: Array<number>,",
          "62:         evaluateOverTimeType: EvaluateOverTimeType,",
          "",
          "[Added Lines]",
          "1: import GreaterThanOrEqual from 'Common/Types/BaseDatabase/GreaterThanOrEqual';",
          "2: import { LIMIT_PER_PROJECT } from 'Common/Types/Database/LimitMax';",
          "3: import OneUptimeDate from 'Common/Types/Date';",
          "4: import { JSONObject } from 'Common/Types/JSON';",
          "5: import {",
          "6:     CheckOn,",
          "7:     EvaluateOverTimeOptions,",
          "8:     EvaluateOverTimeType,",
          "9: } from 'Common/Types/Monitor/CriteriaFilter';",
          "10: import ObjectID from 'Common/Types/ObjectID';",
          "11: import MonitorMetricsByMinuteService from 'CommonServer/Services/MonitorMetricsByMinuteService';",
          "12: import Query from 'CommonServer/Types/AnalyticsDatabase/Query';",
          "13: import MonitorMetricsByMinute from 'Model/AnalyticsModels/MonitorMetricsByMinute';",
          "15: export default class EvaluateOverTime {",
          "17:         monitorId: ObjectID;",
          "18:         evaluateOverTimeOptions: EvaluateOverTimeOptions;",
          "19:         metricType: CheckOn;",
          "20:         miscData?: JSONObject | undefined;",
          "23:         const lastMinutesDate: Date = OneUptimeDate.getSomeMinutesAgo(",
          "24:             data.evaluateOverTimeOptions.timeValueInMinutes!",
          "25:         );",
          "29:         const query: Query<MonitorMetricsByMinute> = {",
          "35:         if (data.miscData) {",
          "39:         const monitorMetricsItems: Array<MonitorMetricsByMinute> =",
          "40:             await MonitorMetricsByMinuteService.findBy({",
          "41:                 query: query,",
          "42:                 limit: LIMIT_PER_PROJECT,",
          "43:                 skip: 0,",
          "44:                 props: {",
          "45:                     isRoot: true,",
          "46:                 },",
          "47:                 select: {",
          "48:                     metricValue: true,",
          "49:                 },",
          "50:             });",
          "52:         const values: Array<number> = monitorMetricsItems",
          "53:             .map((item: MonitorMetricsByMinute) => {",
          "54:                 return item.metricValue;",
          "55:             })",
          "56:             .filter((value: number | undefined) => {",
          "57:                 return value !== undefined;",
          "58:             }) as Array<number>;",
          "60:         if (",
          "61:             data.evaluateOverTimeOptions.evaluateOverTimeType ===",
          "62:                 EvaluateOverTimeType.AnyValue ||",
          "63:             data.evaluateOverTimeOptions.evaluateOverTimeType ===",
          "64:                 EvaluateOverTimeType.AllValues",
          "65:         ) {",
          "72:             evaluateOverTimeType:",
          "73:                 data.evaluateOverTimeOptions.evaluateOverTimeType!,",
          "78:         values: Array<number>;",
          "79:         evaluateOverTimeType: EvaluateOverTimeType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     private static getSum(values: number[]): number {",
          "81:     }",
          "83:     private static getMin(values: number[]): number {",
          "85:         return Math.min(...values);",
          "86:     }",
          "88:     private static getMax(values: number[]): number {",
          "90:         return Math.max(...values);",
          "",
          "[Removed Lines]",
          "80:         return values.reduce((a, b) => a + b, 0);",
          "",
          "[Added Lines]",
          "97:         return values.reduce((a: number, b: number) => {",
          "98:             return a + b;",
          "99:         }, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:         return this.getSum(values) / values.length;",
          "96:     }",
          "",
          "[Removed Lines]",
          "97: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Ingestor/Utils/Criteria/ServerMonitorCriteria.ts||Ingestor/Utils/Criteria/ServerMonitorCriteria.ts": [
          "File: Ingestor/Utils/Criteria/ServerMonitorCriteria.ts -> Ingestor/Utils/Criteria/ServerMonitorCriteria.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     }): Promise<string | null> {",
          "23:         let overTimeValue: Array<number> | number | undefined = undefined;",
          "27:             overTimeValue = await EvaluateOverTime.getValueOverTime({",
          "28:                 monitorId: input.dataToProcess.monitorId!,",
          "30:                 metricType: input.criteriaFilter.checkOn,",
          "32:             });",
          "34:             if (Array.isArray(overTimeValue) && overTimeValue.length === 0) {",
          "",
          "[Removed Lines]",
          "22:         let threshold: number | string | undefined | null = input.criteriaFilter.value;",
          "26:         if (input.criteriaFilter.eveluateOverTime && input.criteriaFilter.evaluateOverTimeOptions) {",
          "29:                 evaluateOverTimeOptions: input.criteriaFilter.evaluateOverTimeOptions,",
          "31:                 miscData: input.criteriaFilter.serverMonitorOptions as JSONObject",
          "",
          "[Added Lines]",
          "22:         let threshold: number | string | undefined | null =",
          "23:             input.criteriaFilter.value;",
          "26:         if (",
          "27:             input.criteriaFilter.eveluateOverTime &&",
          "28:             input.criteriaFilter.evaluateOverTimeOptions",
          "29:         ) {",
          "32:                 evaluateOverTimeOptions:",
          "33:                     input.criteriaFilter.evaluateOverTimeOptions,",
          "35:                 miscData: input.criteriaFilter",
          "36:                     .serverMonitorOptions as JSONObject,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:         ) {",
          "89:             threshold = CompareCriteria.convertThresholdToNumber(threshold);",
          "94:             return CompareCriteria.compareCriteriaNumbers({",
          "95:                 value: currentCpuPercent,",
          "",
          "[Removed Lines]",
          "91:             const currentCpuPercent: number | Array<number> = overTimeValue || (input.dataToProcess as ServerMonitorResponse)",
          "92:                 .basicInfrastructureMetrics?.cpuMetrics.percentUsed || 0;",
          "",
          "[Added Lines]",
          "95:             const currentCpuPercent: number | Array<number> =",
          "96:                 overTimeValue ||",
          "97:                 (input.dataToProcess as ServerMonitorResponse)",
          "98:                     .basicInfrastructureMetrics?.cpuMetrics.percentUsed ||",
          "99:                 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:         ) {",
          "106:             threshold = CompareCriteria.convertThresholdToNumber(threshold);",
          "111:             return CompareCriteria.compareCriteriaNumbers({",
          "112:                 value: memoryPercent,",
          "113:                 threshold: threshold as number,",
          "115:             });",
          "116:         }",
          "",
          "[Removed Lines]",
          "108:             const memoryPercent: number | Array<number> = overTimeValue || (input.dataToProcess as ServerMonitorResponse)",
          "109:                 .basicInfrastructureMetrics?.memoryMetrics.percentUsed || 0;",
          "114:                 criteriaFilter: input.criteriaFilter",
          "",
          "[Added Lines]",
          "115:             const memoryPercent: number | Array<number> =",
          "116:                 overTimeValue ||",
          "117:                 (input.dataToProcess as ServerMonitorResponse)",
          "118:                     .basicInfrastructureMetrics?.memoryMetrics.percentUsed ||",
          "119:                 0;",
          "124:                 criteriaFilter: input.criteriaFilter,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4451b5343d04dd3de402107d91ef03b8253ba531",
      "candidate_info": {
        "commit_hash": "4451b5343d04dd3de402107d91ef03b8253ba531",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/4451b5343d04dd3de402107d91ef03b8253ba531",
        "files": [
          "Dashboard/src/Routes/OnCallDutyRoutes.tsx"
        ],
        "message": "Fix OnCallDutyRoutes rendering issue",
        "before_after_code_files": [
          "Dashboard/src/Routes/OnCallDutyRoutes.tsx||Dashboard/src/Routes/OnCallDutyRoutes.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Dashboard/src/Routes/OnCallDutyRoutes.tsx||Dashboard/src/Routes/OnCallDutyRoutes.tsx": [
          "File: Dashboard/src/Routes/OnCallDutyRoutes.tsx -> Dashboard/src/Routes/OnCallDutyRoutes.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:                 <PageRoute",
          "282:                     path={RouteUtil.getLastPathForKey(",
          "284:                     )}",
          "285:                     element={",
          "287:                             <OnCallDutyPolicyViewLogsView",
          "288:                                 {...props}",
          "289:                                 pageRoute={",
          "",
          "[Removed Lines]",
          "283:                         PageMap.ON_CALL_DUTY_POLICY_VIEW_EXECUTION_LOG_VIEW",
          "286:                         <Suspense fallback={Loader}>",
          "",
          "[Added Lines]",
          "283:                         PageMap.ON_CALL_DUTY_POLICY_VIEW_EXECUTION_LOG_VIEW, 2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293:                                     ] as Route",
          "294:                                 }",
          "295:                             />",
          "297:                     }",
          "298:                 />",
          "299:             </PageRoute>",
          "",
          "[Removed Lines]",
          "296:                         </Suspense>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98c3581022dd51b07d5242aeea775309649fff52",
      "candidate_info": {
        "commit_hash": "98c3581022dd51b07d5242aeea775309649fff52",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/98c3581022dd51b07d5242aeea775309649fff52",
        "files": [
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ],
        "message": "Add support for milliseconds in CriteriaFilterUtil",
        "before_after_code_files": [
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts": [
          "File: Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts -> Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:             criteriaFilter?.checkOn === CheckOn.DiskUsagePercent ||",
          "37:             criteriaFilter?.checkOn === CheckOn.MemoryUsagePercent;",
          "40:         if (",
          "41:             criteriaFilter?.eveluateOverTime &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:         const isMilliseconds: boolean =",
          "40:             criteriaFilter?.checkOn === CheckOn.ResponseTime;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:                 text +=",
          "106:                     'in the past ' +",
          "107:                     criteriaFilter.evaluateOverTimeOptions?.timeValueInMinutes +",
          "109:             }",
          "",
          "[Removed Lines]",
          "108:                     ' minutes is ';",
          "",
          "[Added Lines]",
          "111:                     ' minutes ';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:             if (criteriaFilter?.value !== undefined) {",
          "134:             }",
          "135:         }",
          "",
          "[Removed Lines]",
          "133:                 text += criteriaFilter?.value.toString() + ' ';",
          "",
          "[Added Lines]",
          "136:                 text += `${criteriaFilter?.value.toString()}${isPercentage ? '%':''}${isMilliseconds ? 'ms': ''} `",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d060e335d4c5c687ded2a1167f97a1f0569aa59",
      "candidate_info": {
        "commit_hash": "2d060e335d4c5c687ded2a1167f97a1f0569aa59",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/2d060e335d4c5c687ded2a1167f97a1f0569aa59",
        "files": [
          "Model/AnalyticsModels/MonitorMetricsByMinute.ts"
        ],
        "message": "Update MonitorMetricsByMinute model to use CheckOn type for metricType",
        "before_after_code_files": [
          "Model/AnalyticsModels/MonitorMetricsByMinute.ts||Model/AnalyticsModels/MonitorMetricsByMinute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Model/AnalyticsModels/MonitorMetricsByMinute.ts||Model/AnalyticsModels/MonitorMetricsByMinute.ts": [
          "File: Model/AnalyticsModels/MonitorMetricsByMinute.ts -> Model/AnalyticsModels/MonitorMetricsByMinute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import Route from 'Common/Types/API/Route';",
          "7: import Permission from 'Common/Types/Permission';",
          "8: import { JSONObject } from 'Common/Types/JSON';",
          "10: export default class MonitorMetricsByMinute extends AnalyticsBaseModel {",
          "11:     public constructor() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import { CheckOn } from 'Common/Types/Monitor/CriteriaFilter';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:         this.setColumnValue('monitorId', v);",
          "159:     }",
          "163:     }",
          "166:         this.setColumnValue('metricType', v);",
          "167:     }",
          "",
          "[Removed Lines]",
          "161:     public get metricType(): string | undefined {",
          "162:         return this.getColumnValue('metricType') as string | undefined;",
          "165:     public set metricType(v: string | undefined) {",
          "",
          "[Added Lines]",
          "162:     public get metricType(): CheckOn | undefined {",
          "163:         return this.getColumnValue('metricType') as CheckOn | undefined;",
          "166:     public set metricType(v: CheckOn | undefined) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1056123d316210782a1c85d54647a1d2cc0dcd05",
      "candidate_info": {
        "commit_hash": "1056123d316210782a1c85d54647a1d2cc0dcd05",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/1056123d316210782a1c85d54647a1d2cc0dcd05",
        "files": [
          "InfrastructureAgent/Utils/BasicMetrics.ts"
        ],
        "message": "Fix typo in BasicMetrics.ts",
        "before_after_code_files": [
          "InfrastructureAgent/Utils/BasicMetrics.ts||InfrastructureAgent/Utils/BasicMetrics.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "InfrastructureAgent/Utils/BasicMetrics.ts||InfrastructureAgent/Utils/BasicMetrics.ts": [
          "File: InfrastructureAgent/Utils/BasicMetrics.ts -> InfrastructureAgent/Utils/BasicMetrics.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         const cpuUsage: number | undefined = os.loadavg()[0]; // Returns an array containing the 1, 5, and 15 minute load averages.",
          "56:         return {",
          "58:         };",
          "59:     }",
          "60: }",
          "",
          "[Removed Lines]",
          "57:             percentUsed: cpuUsage || 0,",
          "",
          "[Added Lines]",
          "57:             percentUsage: cpuUsage || 0,",
          "",
          "---------------"
        ]
      }
    }
  ]
}