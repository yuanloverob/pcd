{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b891a398fddc64e6a24ea1106b840c037f5c5a01",
      "candidate_info": {
        "commit_hash": "b891a398fddc64e6a24ea1106b840c037f5c5a01",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/b891a398fddc64e6a24ea1106b840c037f5c5a01",
        "files": [
          "backend/open_webui/config.py",
          "src/routes/+layout.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/config.py||backend/open_webui/config.py",
          "src/routes/+layout.svelte||src/routes/+layout.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/config.py||backend/open_webui/config.py": [
          "File: backend/open_webui/config.py -> backend/open_webui/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1324: 1. **Code Interpreter**: `<code_interpreter type=\"code\" lang=\"python\"></code_interpreter>`",
          "1325:    - You have access to a Python shell that runs directly in the user's browser, enabling fast execution of code for analysis, calculations, or problem-solving.  Use it in this response.",
          "1326:    - The Python code you write can incorporate a wide array of libraries, handle data manipulation or visualization, perform API calls for web-related tasks, or tackle virtually any computational challenge. Use this flexibility to **think outside the box, craft elegant solutions, and harness Python's full potential**.",
          "1328:    - When coding, **always aim to print meaningful outputs** (e.g., results, tables, summaries, or visuals) to better interpret and verify the findings. Avoid relying on implicit outputs; prioritize explicit and clear print statements so the results are effectively communicated to the user.",
          "1329:    - After obtaining the printed output, **always provide a concise analysis, interpretation, or next steps to help the user understand the findings or refine the outcome further.**",
          "1330:    - If the results are unclear, unexpected, or require validation, refine the code and execute it again as needed. Always aim to deliver meaningful insights from the results, iterating if necessary.",
          "",
          "[Removed Lines]",
          "1327:    - To use it, **you must enclose your code within `<code_interpreter type=\"code\" lang=\"python\">` tags** and stop right away. If you don't, the code won't execute. Do NOT use triple backticks.",
          "",
          "[Added Lines]",
          "1327:    - To use it, **you must enclose your code within `<code_interpreter type=\"code\" lang=\"python\">` XML tags** and stop right away. If you don't, the code won't execute. Do NOT use triple backticks.",
          "",
          "---------------"
        ],
        "src/routes/+layout.svelte||src/routes/+layout.svelte": [
          "File: src/routes/+layout.svelte -> src/routes/+layout.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:    code.includes('bs4') ? 'beautifulsoup4' : null,",
          "113:    code.includes('numpy') ? 'numpy' : null,",
          "114:    code.includes('pandas') ? 'pandas' : null,",
          "115:    code.includes('sklearn') ? 'scikit-learn' : null,",
          "116:    code.includes('scipy') ? 'scipy' : null,",
          "117:    code.includes('re') ? 'regex' : null,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:    code.includes('matplotlib') ? 'matplotlib' : null,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "acb3eef6195e49326ffc219d75379db4c430ca3b",
      "candidate_info": {
        "commit_hash": "acb3eef6195e49326ffc219d75379db4c430ca3b",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/acb3eef6195e49326ffc219d75379db4c430ca3b",
        "files": [
          "backend/open_webui/routers/tasks.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/tasks.py||backend/open_webui/routers/tasks.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/tasks.py||backend/open_webui/routers/tasks.py": [
          "File: backend/open_webui/routers/tasks.py -> backend/open_webui/routers/tasks.py"
        ]
      }
    },
    {
      "candidate_hash": "5af926bac80aa3da621b83f0060a67e9bf7f9156",
      "candidate_info": {
        "commit_hash": "5af926bac80aa3da621b83f0060a67e9bf7f9156",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/5af926bac80aa3da621b83f0060a67e9bf7f9156",
        "files": [
          "backend/open_webui/static/loader.js",
          "src/app.html",
          "static/static/loader.js"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/app.html||src/app.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/app.html||src/app.html": [
          "File: src/app.html -> src/app.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:    title=\"Open WebUI\"",
          "22:    href=\"/opensearch.xml\"",
          "23:   />",
          "25:   <script>",
          "26:    function resizeIframe(obj) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24:   <script src=\"/static/loader.js\" defer></script>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b998420fe0733e7c1c9b31664e09f33744802e6",
      "candidate_info": {
        "commit_hash": "8b998420fe0733e7c1c9b31664e09f33744802e6",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/8b998420fe0733e7c1c9b31664e09f33744802e6",
        "files": [
          "src/lib/components/chat/Chat.svelte",
          "src/lib/utils/index.ts"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte",
          "src/lib/utils/index.ts||src/lib/utils/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   extractSentencesForAudio,",
          "45:   promptTemplate,",
          "46:   splitStream,",
          "48:  } from '$lib/utils';",
          "50:  import { generateChatCompletion } from '$lib/apis/ollama';",
          "",
          "[Removed Lines]",
          "47:   sleep",
          "",
          "[Added Lines]",
          "47:   sleep,",
          "48:   removeDetailsWithReasoning",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1486:    params?.stream_response ??",
          "1487:    true;",
          "1493:   const messages = [",
          "1494:    params?.system || $settings.system || (responseMessage?.userContext ?? null)",
          "1495:     ? {",
          "",
          "[Removed Lines]",
          "1489:   const removeDetailsWithReasoning = (content) => {",
          "1490:    return content.replace(/<details\\s+type=\"reasoning\"[^>]*>.*?<\\/details>/gis, '').trim();",
          "1491:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/utils/index.ts||src/lib/utils/index.ts": [
          "File: src/lib/utils/index.ts -> src/lib/utils/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "666:  return removeFormattings(removeEmojis(content.trim()));",
          "667: };",
          "670: const codeBlockRegex = /```[\\s\\S]*?```/g;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "669: export const removeDetailsWithReasoning = (content) => {",
          "670:  return content.replace(/<details\\s+type=\"reasoning\"[^>]*>.*?<\\/details>/gis, '').trim();",
          "671: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "735: };",
          "737: export const getMessageContentParts = (content: string, split_on: string = 'punctuation') => {",
          "738:  const messageContentParts: string[] = [];",
          "740:  switch (split_on) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:  content = removeDetailsWithReasoning(content);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63a5ee3adb9885f3f7404fcc2eccd2d7407cfc26",
      "candidate_info": {
        "commit_hash": "63a5ee3adb9885f3f7404fcc2eccd2d7407cfc26",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/63a5ee3adb9885f3f7404fcc2eccd2d7407cfc26",
        "files": [
          "backend/open_webui/utils/payload.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/payload.py||backend/open_webui/utils/payload.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/payload.py||backend/open_webui/utils/payload.py": [
          "File: backend/open_webui/utils/payload.py -> backend/open_webui/utils/payload.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     if not system:",
          "15:         return form_data",
          "17:     # Legacy (API Usage)",
          "18:     if user:",
          "19:         template_params = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:     # Metadata (WebUI Usage)",
          "18:     if metadata:",
          "19:         variables = metadata.get(\"variables\", {})",
          "20:         if variables:",
          "21:             system = prompt_variables_template(system, variables)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     system = prompt_template(system, **template_params)",
          "34:     form_data[\"messages\"] = add_or_update_system_message(",
          "35:         system, form_data.get(\"messages\", [])",
          "36:     )",
          "",
          "[Removed Lines]",
          "28:     # Metadata (WebUI Usage)",
          "29:     if metadata:",
          "30:         variables = metadata.get(\"variables\", {})",
          "31:         if variables:",
          "32:             system = prompt_variables_template(system, variables)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}