{
  "cve_id": "CVE-2024-1455",
  "cve_desc": "A vulnerability in the langchain-ai/langchain repository allows for a Billion Laughs Attack, a type of XML External Entity (XXE) exploitation. By nesting multiple layers of entities within an XML document, an attacker can cause the XML parser to consume excessive CPU and memory resources, leading to a denial of service (DoS). ",
  "repo": "langchain-ai/langchain",
  "patch_hash": "727d5023ce88e18e3074ef620a98137d26ff92a3",
  "patch_info": {
    "commit_hash": "727d5023ce88e18e3074ef620a98137d26ff92a3",
    "repo": "langchain-ai/langchain",
    "commit_url": "https://github.com/langchain-ai/langchain/commit/727d5023ce88e18e3074ef620a98137d26ff92a3",
    "files": [
      "libs/core/langchain_core/output_parsers/xml.py",
      "libs/core/poetry.lock",
      "libs/core/pyproject.toml",
      "libs/core/tests/unit_tests/output_parsers/test_xml_parser.py"
    ],
    "message": "core[patch]: Use defusedxml in XMLOutputParser (#19526)\n\nThis mitigates a security concern for users still using older versions of libexpat that causes an attacker to compromise the availability of the system if an attacker manages to surface malicious payload to this XMLParser.",
    "before_after_code_files": [
      "libs/core/langchain_core/output_parsers/xml.py||libs/core/langchain_core/output_parsers/xml.py",
      "libs/core/poetry.lock||libs/core/poetry.lock",
      "libs/core/tests/unit_tests/output_parsers/test_xml_parser.py||libs/core/tests/unit_tests/output_parsers/test_xml_parser.py"
    ]
  },
  "patch_diff": {
    "libs/core/langchain_core/output_parsers/xml.py||libs/core/langchain_core/output_parsers/xml.py": [
      "File: libs/core/langchain_core/output_parsers/xml.py -> libs/core/langchain_core/output_parsers/xml.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import re",
      "3: from typing import Any, AsyncIterator, Dict, Iterator, List, Optional, Union",
      "5: from langchain_core.exceptions import OutputParserException",
      "6: from langchain_core.messages import BaseMessage",
      "",
      "[Removed Lines]",
      "2: import xml.etree.ElementTree as ET",
      "",
      "[Added Lines]",
      "3: from xml.etree import ElementTree as ET",
      "4: from xml.etree.ElementTree import TreeBuilder",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35:         return XML_FORMAT_INSTRUCTIONS.format(tags=self.tags)",
      "37:     def parse(self, text: str) -> Dict[str, List[Any]]:",
      "38:         # Try to find XML string within triple backticks",
      "39:         match = re.search(r\"```(xml)?(.*)```\", text, re.DOTALL)",
      "40:         if match is not None:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39:         # Imports are temporarily placed here to avoid issue with caching on CI",
      "40:         # likely if you're reading this you can move them to the top of the file",
      "41:         from defusedxml import ElementTree as DET  # type: ignore[import]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "47:         text = text.strip()",
      "48:         try:",
      "50:             return self._root_to_dict(root)",
      "53:             msg = f\"Failed to parse XML format from completion {text}. Got: {e}\"",
      "54:             raise OutputParserException(msg, llm_output=text) from e",
      "56:     def _transform(",
      "57:         self, input: Iterator[Union[str, BaseMessage]]",
      "58:     ) -> Iterator[AddableDict]:",
      "59:         xml_start_re = re.compile(r\"<[a-zA-Z:_]\")",
      "61:         xml_started = False",
      "62:         current_path: List[str] = []",
      "63:         current_path_has_children = False",
      "",
      "[Removed Lines]",
      "49:             root = ET.fromstring(text)",
      "52:         except ET.ParseError as e:",
      "60:         parser = ET.XMLPullParser([\"start\", \"end\"])",
      "",
      "[Added Lines]",
      "54:             root = DET.fromstring(text)",
      "57:         except (DET.ParseError, DET.EntitiesForbidden) as e:",
      "64:         # Imports are temporarily placed here to avoid issue with caching on CI",
      "65:         # likely if you're reading this you can move them to the top of the file",
      "66:         from defusedxml.ElementTree import DefusedXMLParser  # type: ignore[import]",
      "68:         parser = ET.XMLPullParser(",
      "69:             [\"start\", \"end\"], _parser=DefusedXMLParser(target=TreeBuilder())",
      "70:         )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:     async def _atransform(",
      "106:         self, input: AsyncIterator[Union[str, BaseMessage]]",
      "107:     ) -> AsyncIterator[AddableDict]:",
      "109:         current_path: List[str] = []",
      "110:         current_path_has_children = False",
      "111:         async for chunk in input:",
      "112:             if isinstance(chunk, BaseMessage):",
      "113:                 # extract text",
      "",
      "[Removed Lines]",
      "108:         parser = ET.XMLPullParser([\"start\", \"end\"])",
      "",
      "[Added Lines]",
      "120:         # Imports are temporarily placed here to avoid issue with caching on CI",
      "121:         # likely if you're reading this you can move them to the top of the file",
      "122:         from defusedxml.ElementTree import DefusedXMLParser  # type: ignore[import]",
      "124:         _parser = DefusedXMLParser(target=TreeBuilder())",
      "125:         parser = ET.XMLPullParser([\"start\", \"end\"], _parser=_parser)",
      "126:         xml_start_re = re.compile(r\"<[a-zA-Z:_]\")",
      "127:         xml_started = False",
      "130:         buffer = \"\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "115:                 if not isinstance(chunk_content, str):",
      "116:                     continue",
      "117:                 chunk = chunk_content",
      "120:             # yield all events",
      "121:             for event, elem in parser.read_events():",
      "122:                 if event == \"start\":",
      "",
      "[Removed Lines]",
      "118:             # pass chunk to parser",
      "119:             parser.feed(chunk)",
      "",
      "[Added Lines]",
      "138:             # add chunk to buffer of unprocessed text",
      "139:             buffer += chunk",
      "140:             # if xml string hasn't started yet, continue to next chunk",
      "141:             if not xml_started:",
      "142:                 if match := xml_start_re.search(buffer):",
      "143:                     # if xml string has started, remove all text before it",
      "144:                     buffer = buffer[match.start() :]",
      "145:                     xml_started = True",
      "146:                 else:",
      "147:                     continue",
      "148:             # feed buffer to parser",
      "149:             parser.feed(buffer)",
      "150:             buffer = \"\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "130:                     if not current_path_has_children:",
      "131:                         yield nested_element(current_path, elem)",
      "132:                     # prevent yielding of parent element",
      "134:         # close parser",
      "135:         parser.close()",
      "",
      "[Removed Lines]",
      "133:                     current_path_has_children = True",
      "",
      "[Added Lines]",
      "164:                     if current_path:",
      "165:                         current_path_has_children = True",
      "166:                     else:",
      "167:                         xml_started = False",
      "",
      "---------------"
    ],
    "libs/core/poetry.lock||libs/core/poetry.lock": [
      "File: libs/core/poetry.lock -> libs/core/poetry.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "661: [[package]]",
      "662: name = \"importlib-metadata\"",
      "664: description = \"Read metadata from Python packages\"",
      "665: optional = false",
      "666: python-versions = \">=3.8\"",
      "667: files = [",
      "670: ]",
      "672: [package.dependencies]",
      "",
      "[Removed Lines]",
      "663: version = \"7.0.2\"",
      "668:     {file = \"importlib_metadata-7.0.2-py3-none-any.whl\", hash = \"sha256:f4bc4c0c070c490abf4ce96d715f68e95923320370efb66143df00199bb6c100\"},",
      "669:     {file = \"importlib_metadata-7.0.2.tar.gz\", hash = \"sha256:198f568f3230878cb1b44fbd7975f87906c22336dba2e4a7f05278c281fbd792\"},",
      "",
      "[Added Lines]",
      "663: version = \"7.1.0\"",
      "668:     {file = \"importlib_metadata-7.1.0-py3-none-any.whl\", hash = \"sha256:30962b96c0c223483ed6cc7280e7f0199feb01a0e40cfae4d4450fc6fab1f570\"},",
      "669:     {file = \"importlib_metadata-7.1.0.tar.gz\", hash = \"sha256:b78938b926ee8d5f020fc4772d487045805a55ddbad2ecf21c6d60938dc7fcd2\"},",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "675: [package.extras]",
      "676: docs = [\"furo\", \"jaraco.packaging (>=9.3)\", \"jaraco.tidelift (>=1.4)\", \"rst.linker (>=1.9)\", \"sphinx (>=3.5)\", \"sphinx-lint\"]",
      "677: perf = [\"ipython\"]",
      "680: [[package]]",
      "681: name = \"importlib-resources\"",
      "683: description = \"Read resources from Python packages\"",
      "684: optional = false",
      "685: python-versions = \">=3.8\"",
      "686: files = [",
      "689: ]",
      "691: [package.dependencies]",
      "",
      "[Removed Lines]",
      "678: testing = [\"flufl.flake8\", \"importlib-resources (>=1.3)\", \"packaging\", \"pyfakefs\", \"pytest (>=6)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-mypy\", \"pytest-perf (>=0.9.2)\", \"pytest-ruff (>=0.2.1)\"]",
      "682: version = \"6.3.1\"",
      "687:     {file = \"importlib_resources-6.3.1-py3-none-any.whl\", hash = \"sha256:4811639ca7fa830abdb8e9ca0a104dc6ad13de691d9fe0d3173a71304f068159\"},",
      "688:     {file = \"importlib_resources-6.3.1.tar.gz\", hash = \"sha256:29a3d16556e330c3c8fb8202118c5ff41241cc34cbfb25989bbad226d99b7995\"},",
      "",
      "[Added Lines]",
      "678: testing = [\"flufl.flake8\", \"importlib-resources (>=1.3)\", \"jaraco.test (>=5.4)\", \"packaging\", \"pyfakefs\", \"pytest (>=6)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-mypy\", \"pytest-perf (>=0.9.2)\", \"pytest-ruff (>=0.2.1)\"]",
      "682: version = \"6.4.0\"",
      "687:     {file = \"importlib_resources-6.4.0-py3-none-any.whl\", hash = \"sha256:50d10f043df931902d4194ea07ec57960f66a80449ff867bfe782b4c486ba78c\"},",
      "688:     {file = \"importlib_resources-6.4.0.tar.gz\", hash = \"sha256:cdb2b453b8046ca4e3798eb1d84f3cce1446a0e8e7b5ef4efb600f19fc398145\"},",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "694: [package.extras]",
      "695: docs = [\"furo\", \"jaraco.packaging (>=9.3)\", \"jaraco.tidelift (>=1.4)\", \"rst.linker (>=1.9)\", \"sphinx (<7.2.5)\", \"sphinx (>=3.5)\", \"sphinx-lint\"]",
      "698: [[package]]",
      "699: name = \"iniconfig\"",
      "",
      "[Removed Lines]",
      "696: testing = [\"jaraco.collections\", \"pytest (>=6)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-mypy\", \"pytest-ruff (>=0.2.1)\", \"zipp (>=3.17)\"]",
      "",
      "[Added Lines]",
      "696: testing = [\"jaraco.test (>=5.4)\", \"pytest (>=6)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-mypy\", \"pytest-ruff (>=0.2.1)\", \"zipp (>=3.17)\"]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1021: [[package]]",
      "1022: name = \"jupyter-events\"",
      "1024: description = \"Jupyter Event System library\"",
      "1025: optional = false",
      "1026: python-versions = \">=3.8\"",
      "1027: files = [",
      "1030: ]",
      "1032: [package.dependencies]",
      "",
      "[Removed Lines]",
      "1023: version = \"0.9.1\"",
      "1028:     {file = \"jupyter_events-0.9.1-py3-none-any.whl\", hash = \"sha256:e51f43d2c25c2ddf02d7f7a5045f71fc1d5cb5ad04ef6db20da961c077654b9b\"},",
      "1029:     {file = \"jupyter_events-0.9.1.tar.gz\", hash = \"sha256:a52e86f59eb317ee71ff2d7500c94b963b8a24f0b7a1517e2e653e24258e15c7\"},",
      "",
      "[Added Lines]",
      "1023: version = \"0.10.0\"",
      "1028:     {file = \"jupyter_events-0.10.0-py3-none-any.whl\", hash = \"sha256:4b72130875e59d57716d327ea70d3ebc3af1944d3717e5a498b8a06c6c159960\"},",
      "1029:     {file = \"jupyter_events-0.10.0.tar.gz\", hash = \"sha256:670b8229d3cc882ec782144ed22e0d29e1c2d639263f92ca8383e66682845e22\"},",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1217: [[package]]",
      "1218: name = \"langsmith\"",
      "1220: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
      "1221: optional = false",
      "1223: files = [",
      "1226: ]",
      "1228: [package.dependencies]",
      "",
      "[Removed Lines]",
      "1219: version = \"0.1.27\"",
      "1222: python-versions = \">=3.8.1,<4.0\"",
      "1224:     {file = \"langsmith-0.1.27-py3-none-any.whl\", hash = \"sha256:d223176952b1525c958189ab1b894f5bd9891ec9177222f7a978aeee4bf1cc95\"},",
      "1225:     {file = \"langsmith-0.1.27.tar.gz\", hash = \"sha256:e0a339d976362051adf3fdbc43fcc7c00bb4615a401321ad7e556bd2dab556c0\"},",
      "",
      "[Added Lines]",
      "1219: version = \"0.1.31\"",
      "1222: python-versions = \"<4.0,>=3.8.1\"",
      "1224:     {file = \"langsmith-0.1.31-py3-none-any.whl\", hash = \"sha256:5211a9dc00831db307eb843485a97096484b697b5d2cd1efaac34228e97ca087\"},",
      "1225:     {file = \"langsmith-0.1.31.tar.gz\", hash = \"sha256:efd54ccd44be7fda911bfdc0ead340473df2fdd07345c7252901834d0c4aa37e\"},",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1407: [[package]]",
      "1408: name = \"nbconvert\"",
      "1410: description = \"Converting Jupyter Notebooks (.ipynb files) to other formats.  Output formats include asciidoc, html, latex, markdown, pdf, py, rst, script.  nbconvert can be used both as a Python library (`import nbconvert`) or as a command line tool (invoked as `jupyter nbconvert ...`).\"",
      "1411: optional = false",
      "1412: python-versions = \">=3.8\"",
      "1413: files = [",
      "1416: ]",
      "1418: [package.dependencies]",
      "",
      "[Removed Lines]",
      "1409: version = \"7.16.2\"",
      "1414:     {file = \"nbconvert-7.16.2-py3-none-any.whl\", hash = \"sha256:0c01c23981a8de0220255706822c40b751438e32467d6a686e26be08ba784382\"},",
      "1415:     {file = \"nbconvert-7.16.2.tar.gz\", hash = \"sha256:8310edd41e1c43947e4ecf16614c61469ebc024898eb808cce0999860fc9fb16\"},",
      "",
      "[Added Lines]",
      "1409: version = \"7.16.3\"",
      "1414:     {file = \"nbconvert-7.16.3-py3-none-any.whl\", hash = \"sha256:ddeff14beeeedf3dd0bc506623e41e4507e551736de59df69a91f86700292b3b\"},",
      "1415:     {file = \"nbconvert-7.16.3.tar.gz\", hash = \"sha256:a6733b78ce3d47c3f85e504998495b07e6ea9cf9bf6ec1c98dda63ec6ad19142\"},",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1439: qtpdf = [\"nbconvert[qtpng]\"]",
      "1440: qtpng = [\"pyqtwebengine (>=5.15)\"]",
      "1441: serve = [\"tornado (>=6.1)\"]",
      "1443: webpdf = [\"playwright\"]",
      "1445: [[package]]",
      "",
      "[Removed Lines]",
      "1442: test = [\"flaky\", \"ipykernel\", \"ipywidgets (>=7.5)\", \"pytest\"]",
      "",
      "[Added Lines]",
      "1442: test = [\"flaky\", \"ipykernel\", \"ipywidgets (>=7.5)\", \"pytest (>=7)\"]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1998: [[package]]",
      "1999: name = \"pytest-mock\"",
      "2001: description = \"Thin-wrapper around the mock package for easier use with pytest\"",
      "2002: optional = false",
      "2003: python-versions = \">=3.8\"",
      "2004: files = [",
      "2007: ]",
      "2009: [package.dependencies]",
      "2012: [package.extras]",
      "2013: dev = [\"pre-commit\", \"pytest-asyncio\", \"tox\"]",
      "",
      "[Removed Lines]",
      "2000: version = \"3.12.0\"",
      "2005:     {file = \"pytest-mock-3.12.0.tar.gz\", hash = \"sha256:31a40f038c22cad32287bb43932054451ff5583ff094bca6f675df2f8bc1a6e9\"},",
      "2006:     {file = \"pytest_mock-3.12.0-py3-none-any.whl\", hash = \"sha256:0972719a7263072da3a21c7f4773069bcc7486027d7e8e1f81d98a47e701bc4f\"},",
      "2010: pytest = \">=5.0\"",
      "",
      "[Added Lines]",
      "2000: version = \"3.14.0\"",
      "2005:     {file = \"pytest-mock-3.14.0.tar.gz\", hash = \"sha256:2719255a1efeceadbc056d6bf3df3d1c5015530fb40cf347c0f9afac88410bd0\"},",
      "2006:     {file = \"pytest_mock-3.14.0-py3-none-any.whl\", hash = \"sha256:0b72c38033392a5f4621342fe11e9219ac11ec9d375f8e2a0c164539e0d70f6f\"},",
      "2010: pytest = \">=6.2.5\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2966: [metadata]",
      "2967: lock-version = \"2.0\"",
      "2968: python-versions = \">=3.8.1,<4.0\"",
      "",
      "[Removed Lines]",
      "2969: content-hash = \"ca611429e3dd84ce6dac7ef69d7d9b4da78bf467356946e37016b821e5fe752e\"",
      "",
      "[Added Lines]",
      "2969: content-hash = \"a13a0a8454b242106bb681fa74e1f1320a0198f2e07b35d29d985b03a310cf67\"",
      "",
      "---------------"
    ],
    "libs/core/tests/unit_tests/output_parsers/test_xml_parser.py||libs/core/tests/unit_tests/output_parsers/test_xml_parser.py": [
      "File: libs/core/tests/unit_tests/output_parsers/test_xml_parser.py -> libs/core/tests/unit_tests/output_parsers/test_xml_parser.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: \"\"\"Test XMLOutputParser\"\"\"",
      "2: import pytest",
      "4: from langchain_core.exceptions import OutputParserException",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: from typing import AsyncIterator",
      "3: from xml.etree.ElementTree import ParseError",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40: \"\"\",",
      "41:     ],",
      "42: )",
      "44:     \"\"\"Test XMLOutputParser.\"\"\"",
      "46:     xml_parser = XMLOutputParser()",
      "50:     assert list(xml_parser.transform(iter(result))) == [",
      "51:         {\"foo\": [{\"bar\": [{\"baz\": None}]}]},",
      "52:         {\"foo\": [{\"bar\": [{\"baz\": \"slim.shady\"}]}]},",
      "53:         {\"foo\": [{\"baz\": \"tag\"}]},",
      "54:     ]",
      "57: @pytest.mark.parametrize(\"result\", [\"foo></foo>\", \"<foo></foo\", \"foo></foo\", \"foofoo\"])",
      "58: def test_xml_output_parser_fail(result: str) -> None:",
      "",
      "[Removed Lines]",
      "43: def test_xml_output_parser(result: str) -> None:",
      "48:     xml_result = xml_parser.parse(result)",
      "49:     assert DEF_RESULT_EXPECTED == xml_result",
      "",
      "[Added Lines]",
      "46: async def test_xml_output_parser(result: str) -> None:",
      "50:     assert DEF_RESULT_EXPECTED == xml_parser.parse(result)",
      "51:     assert DEF_RESULT_EXPECTED == (await xml_parser.aparse(result))",
      "58:     async def _as_iter(string: str) -> AsyncIterator[str]:",
      "59:         for c in string:",
      "60:             yield c",
      "62:     chunks = [chunk async for chunk in xml_parser.atransform(_as_iter(result))]",
      "63:     assert chunks == [",
      "64:         {\"foo\": [{\"bar\": [{\"baz\": None}]}]},",
      "65:         {\"foo\": [{\"bar\": [{\"baz\": \"slim.shady\"}]}]},",
      "66:         {\"foo\": [{\"baz\": \"tag\"}]},",
      "67:     ]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "63:     with pytest.raises(OutputParserException) as e:",
      "64:         xml_parser.parse(result)",
      "65:     assert \"Failed to parse\" in str(e)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "81: MALICIOUS_XML = \"\"\"<?xml version=\"1.0\"?>",
      "82: <!DOCTYPE lolz [<!ENTITY lol \"lol\"><!ELEMENT lolz (#PCDATA)>",
      "83:  <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">",
      "84:  <!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">",
      "85:  <!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">",
      "86:  <!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">",
      "87:  <!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">",
      "88:  <!ENTITY lol6 \"&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\">",
      "89:  <!ENTITY lol7 \"&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\">",
      "90:  <!ENTITY lol8 \"&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\">",
      "91:  <!ENTITY lol9 \"&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\">",
      "92: ]>",
      "93: <lolz>&lol9;</lolz>\"\"\"",
      "96: async def tests_billion_laughs_attack() -> None:",
      "97:     parser = XMLOutputParser()",
      "98:     with pytest.raises(OutputParserException):",
      "99:         parser.parse(MALICIOUS_XML)",
      "101:     with pytest.raises(OutputParserException):",
      "102:         await parser.aparse(MALICIOUS_XML)",
      "104:     with pytest.raises(ParseError):",
      "105:         # Right now raises undefined entity error",
      "106:         assert list(parser.transform(iter(MALICIOUS_XML))) == [",
      "107:             {\"foo\": [{\"bar\": [{\"baz\": None}]}]}",
      "108:         ]",
      "110:     async def _as_iter(string: str) -> AsyncIterator[str]:",
      "111:         for c in string:",
      "112:             yield c",
      "114:     with pytest.raises(ParseError):",
      "115:         chunks = [chunk async for chunk in parser.atransform(_as_iter(MALICIOUS_XML))]",
      "116:         assert chunks == [{\"foo\": [{\"bar\": [{\"baz\": None}]}]}]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "be75c749e8e7dce9fc3ebc17621270a18c5fb018",
      "candidate_info": {
        "commit_hash": "be75c749e8e7dce9fc3ebc17621270a18c5fb018",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/be75c749e8e7dce9fc3ebc17621270a18c5fb018",
        "files": [
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml"
        ],
        "message": "core[patch]: bump langsmith (#22476)\n\nNoticing errors logged in some situations when tracing with Langsmith:\n```python\nfrom langchain_core.pydantic_v1 import BaseModel\nfrom langchain_anthropic import ChatAnthropic\n\n\nclass AnswerWithJustification(BaseModel):\n    \"\"\"An answer to the user question along with justification for the answer.\"\"\"\n    answer: str\n    justification: str\n\n\nllm = ChatAnthropic(model=\"claude-3-haiku-20240307\")\nstructured_llm = llm.with_structured_output(AnswerWithJustification)\n\nlist(structured_llm.stream(\"What weighs more a pound of bricks or a pound of feathers\"))\n```\n```\nError in LangChainTracer.on_chain_end callback: AttributeError(\"'NoneType' object has no attribute 'append'\")\n[AnswerWithJustification(answer='A pound of bricks and a pound of feathers weigh the same amount.', justification='This is because a pound is a unit of mass, not volume. By definition, a pound of any material, whether bricks or feathers, will weigh the same - one pound. The physical size or volume of the materials does not matter when measuring by mass. So a pound of bricks and a pound of feathers both weigh exactly one pound.')]\n```",
        "before_after_code_files": [
          "libs/core/poetry.lock||libs/core/poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "882: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*\"",
          "883: files = [",
          "884:     {file = \"jsonpointer-2.4-py2.py3-none-any.whl\", hash = \"sha256:15d51bba20eea3165644553647711d150376234112651b4f1811022aecad7d7a\"},",
          "885: ]",
          "887: [[package]]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885:     {file = \"jsonpointer-2.4.tar.gz\", hash = \"sha256:585cee82b70211fa9e6043b7bb89db6e1aa49524340dde8ad6b63206ea689d88\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1217: [[package]]",
          "1218: name = \"langsmith\"",
          "1220: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "1221: optional = false",
          "1222: python-versions = \"<4.0,>=3.8.1\"",
          "1223: files = [",
          "1226: ]",
          "1228: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1219: version = \"0.1.65\"",
          "1224:     {file = \"langsmith-0.1.65-py3-none-any.whl\", hash = \"sha256:ab4487029240e69cca30da1065f1e9138e5a7ca2bbe8c697f0bd7d5839f71cf7\"},",
          "1225:     {file = \"langsmith-0.1.65.tar.gz\", hash = \"sha256:d3c2eb2391478bd79989f02652cf66e29a7959d677614b6993a47cef43f7f43b\"},",
          "",
          "[Added Lines]",
          "1220: version = \"0.1.69\"",
          "1225:     {file = \"langsmith-0.1.69-py3-none-any.whl\", hash = \"sha256:3d7bd6fadb0852fc4cd2e7cf8a1593306046900052da3970bb2b48ed21cc73d8\"},",
          "1226:     {file = \"langsmith-0.1.69.tar.gz\", hash = \"sha256:0146764904a8e479620b7e73efcba1cf172b621799564dd7e7342859c05c264a\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2128:     {file = \"PyYAML-6.0.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:69b023b2b4daa7548bcfbd4aa3da05b3a74b772db9e23b982788168117739938\"},",
          "2129:     {file = \"PyYAML-6.0.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:81e0b275a9ecc9c0c0c07b4b90ba548307583c125f54d5b6946cfee6360c733d\"},",
          "2130:     {file = \"PyYAML-6.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ba336e390cd8e4d1739f42dfe9bb83a3cc2e80f567d8805e11b46f4a943f5515\"},",
          "2131:     {file = \"PyYAML-6.0.1-cp310-cp310-win32.whl\", hash = \"sha256:bd4af7373a854424dabd882decdc5579653d7868b8fb26dc7d0e99f823aa5924\"},",
          "2132:     {file = \"PyYAML-6.0.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:fd1592b3fdf65fff2ad0004b5e363300ef59ced41c2e6b3a99d4089fa8c5435d\"},",
          "2133:     {file = \"PyYAML-6.0.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:6965a7bc3cf88e5a1c3bd2e0b5c22f8d677dc88a455344035f03399034eb3007\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2132:     {file = \"PyYAML-6.0.1-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:326c013efe8048858a6d312ddd31d56e468118ad4cdeda36c719bf5bb6192290\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2135:     {file = \"PyYAML-6.0.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:42f8152b8dbc4fe7d96729ec2b99c7097d656dc1213a3229ca5383f973a5ed6d\"},",
          "2136:     {file = \"PyYAML-6.0.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc\"},",
          "2137:     {file = \"PyYAML-6.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d2b04aac4d386b172d5b9692e2d2da8de7bfb6c387fa4f801fbf6fb2e6ba4673\"},",
          "2138:     {file = \"PyYAML-6.0.1-cp311-cp311-win32.whl\", hash = \"sha256:1635fd110e8d85d55237ab316b5b011de701ea0f29d07611174a1b42f1444741\"},",
          "2139:     {file = \"PyYAML-6.0.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:bf07ee2fef7014951eeb99f56f39c9bb4af143d8aa3c21b1677805985307da34\"},",
          "2140:     {file = \"PyYAML-6.0.1-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:50550eb667afee136e9a77d6dc71ae76a44df8b3e51e41b77f6de2932bfe0f47\"},",
          "2141:     {file = \"PyYAML-6.0.1-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1fe35611261b29bd1de0070f0b2f47cb6ff71fa6595c077e42bd0c419fa27b98\"},",
          "2142:     {file = \"PyYAML-6.0.1-cp36-cp36m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:704219a11b772aea0d8ecd7058d0082713c3562b4e271b849ad7dc4a5c90c13c\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2140:     {file = \"PyYAML-6.0.1-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:e7d73685e87afe9f3b36c799222440d6cf362062f78be1013661b00c5c6f678b\"},",
          "2143:     {file = \"PyYAML-6.0.1-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:855fb52b0dc35af121542a76b9a84f8d1cd886ea97c84703eaa6d88e37a2ad28\"},",
          "2144:     {file = \"PyYAML-6.0.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:40df9b996c2b73138957fe23a16a4f0ba614f4c0efce1e9406a184b6d07fa3a9\"},",
          "2145:     {file = \"PyYAML-6.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a08c6f0fe150303c1c6b71ebcd7213c2858041a7e01975da3a99aed1e7a378ef\"},",
          "2146:     {file = \"PyYAML-6.0.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6c22bec3fbe2524cde73d7ada88f6566758a8f7227bfbf93a408a9d86bcc12a0\"},",
          "2147:     {file = \"PyYAML-6.0.1-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:8d4e9c88387b0f5c7d5f281e55304de64cf7f9c0021a3525bd3b1c542da3b0e4\"},",
          "2148:     {file = \"PyYAML-6.0.1-cp312-cp312-win32.whl\", hash = \"sha256:d483d2cdf104e7c9fa60c544d92981f12ad66a457afae824d146093b8c294c54\"},",
          "2149:     {file = \"PyYAML-6.0.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2153:     {file = \"PyYAML-6.0.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a0cd17c15d3bb3fa06978b4e8958dcdc6e0174ccea823003a106c7d4d7899ac5\"},",
          "2154:     {file = \"PyYAML-6.0.1-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:28c119d996beec18c05208a8bd78cbe4007878c6dd15091efb73a30e90539696\"},",
          "2155:     {file = \"PyYAML-6.0.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7e07cbde391ba96ab58e532ff4803f79c4129397514e1413a7dc761ccd755735\"},",
          "2156:     {file = \"PyYAML-6.0.1-cp38-cp38-win32.whl\", hash = \"sha256:184c5108a2aca3c5b3d3bf9395d50893a7ab82a38004c8f61c258d4428e80206\"},",
          "2157:     {file = \"PyYAML-6.0.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:1e2722cc9fbb45d9b87631ac70924c11d3a401b2d7f410cc0e3bbf249f2dca62\"},",
          "2158:     {file = \"PyYAML-6.0.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:9eb6caa9a297fc2c2fb8862bc5370d0303ddba53ba97e71f08023b6cd73d16a8\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2166:     {file = \"PyYAML-6.0.1-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:49a183be227561de579b4a36efbb21b3eab9651dd81b1858589f796549873dd6\"},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2160:     {file = \"PyYAML-6.0.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5773183b6446b2c99bb77e77595dd486303b4faab2b086e7b17bc6bef28865f6\"},",
          "2161:     {file = \"PyYAML-6.0.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:b786eecbdf8499b9ca1d697215862083bd6d2a99965554781d0d8d1ad31e13a0\"},",
          "2162:     {file = \"PyYAML-6.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bc1bf2925a1ecd43da378f4db9e4f799775d6367bdb94671027b73b393a7c42c\"},",
          "2163:     {file = \"PyYAML-6.0.1-cp39-cp39-win32.whl\", hash = \"sha256:faca3bdcf85b2fc05d06ff3fbc1f83e1391b3e724afa3feba7d13eeab355484c\"},",
          "2164:     {file = \"PyYAML-6.0.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:510c9deebc5c0225e8c96813043e62b680ba2f9c50a08d3724c7f28a747d1486\"},",
          "2165:     {file = \"PyYAML-6.0.1.tar.gz\", hash = \"sha256:bfdf460b1736c775f2ba9f6a92bca30bc2095067b8a9d77876d1fad6cc3b4a43\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2174:     {file = \"PyYAML-6.0.1-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5\"},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2951: [metadata]",
          "2952: lock-version = \"2.0\"",
          "2953: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "2954: content-hash = \"4feba718f092ba77ab3263f6002898eddf6661fcfdae8b29b607936abb7e33c9\"",
          "",
          "[Added Lines]",
          "2966: content-hash = \"40745c3aae8f648b7bc63bff85e26e5658567dec39f57149a7b1ba7637c93751\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bc5cdccee85f385ab79629ad9db31e02bf53b19",
      "candidate_info": {
        "commit_hash": "8bc5cdccee85f385ab79629ad9db31e02bf53b19",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/8bc5cdccee85f385ab79629ad9db31e02bf53b19",
        "files": [
          "libs/core/langchain_core/output_parsers/xml.py",
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml",
          "libs/core/tests/unit_tests/output_parsers/test_xml_parser.py"
        ],
        "message": "core[patch]: Reverting changes with defusedXML (#19604)\n\nDefusedXML is causing parsing errors on previously functional code with\nthe 0.7.x versions. These do not seem to support newer version of python\nwell. 0.8.x has only been released as rc, so we're not going to to use\nit in the core package",
        "before_after_code_files": [
          "libs/core/langchain_core/output_parsers/xml.py||libs/core/langchain_core/output_parsers/xml.py",
          "libs/core/poetry.lock||libs/core/poetry.lock",
          "libs/core/tests/unit_tests/output_parsers/test_xml_parser.py||libs/core/tests/unit_tests/output_parsers/test_xml_parser.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/langchain_core/output_parsers/xml.py||libs/core/langchain_core/output_parsers/xml.py",
            "libs/core/poetry.lock||libs/core/poetry.lock",
            "libs/core/tests/unit_tests/output_parsers/test_xml_parser.py||libs/core/tests/unit_tests/output_parsers/test_xml_parser.py"
          ],
          "candidate": [
            "libs/core/langchain_core/output_parsers/xml.py||libs/core/langchain_core/output_parsers/xml.py",
            "libs/core/poetry.lock||libs/core/poetry.lock",
            "libs/core/tests/unit_tests/output_parsers/test_xml_parser.py||libs/core/tests/unit_tests/output_parsers/test_xml_parser.py"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/langchain_core/output_parsers/xml.py||libs/core/langchain_core/output_parsers/xml.py": [
          "File: libs/core/langchain_core/output_parsers/xml.py -> libs/core/langchain_core/output_parsers/xml.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import re",
          "2: from typing import Any, AsyncIterator, Dict, Iterator, List, Optional, Union",
          "5: from langchain_core.exceptions import OutputParserException",
          "6: from langchain_core.messages import BaseMessage",
          "",
          "[Removed Lines]",
          "3: from xml.etree import ElementTree as ET",
          "",
          "[Added Lines]",
          "2: import xml.etree.ElementTree as ET",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:         return XML_FORMAT_INSTRUCTIONS.format(tags=self.tags)",
          "37:     def parse(self, text: str) -> Dict[str, List[Any]]:",
          "42:         # Try to find XML string within triple backticks",
          "43:         match = re.search(r\"```(xml)?(.*)```\", text, re.DOTALL)",
          "44:         if match is not None:",
          "",
          "[Removed Lines]",
          "38:         # Imports are temporarily placed here to avoid issue with caching on CI",
          "39:         # likely if you're reading this you can move them to the top of the file",
          "40:         from defusedxml import ElementTree as DET  # type: ignore[import]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:         text = text.strip()",
          "52:         try:",
          "54:             return self._root_to_dict(root)",
          "57:             msg = f\"Failed to parse XML format from completion {text}. Got: {e}\"",
          "58:             raise OutputParserException(msg, llm_output=text) from e",
          "60:     def _transform(",
          "61:         self, input: Iterator[Union[str, BaseMessage]]",
          "62:     ) -> Iterator[AddableDict]:",
          "64:         xml_start_re = re.compile(r\"<[a-zA-Z:_]\")",
          "65:         xml_started = False",
          "66:         current_path: List[str] = []",
          "67:         current_path_has_children = False",
          "",
          "[Removed Lines]",
          "53:             root = DET.fromstring(text)",
          "56:         except (DET.ParseError, DET.EntitiesForbidden) as e:",
          "63:         parser = ET.XMLPullParser([\"start\", \"end\"])",
          "",
          "[Added Lines]",
          "49:             root = ET.fromstring(text)",
          "52:         except ET.ParseError as e:",
          "60:         parser = ET.XMLPullParser([\"start\", \"end\"])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:         self, input: AsyncIterator[Union[str, BaseMessage]]",
          "112:     ) -> AsyncIterator[AddableDict]:",
          "113:         parser = ET.XMLPullParser([\"start\", \"end\"])",
          "116:         current_path: List[str] = []",
          "117:         current_path_has_children = False",
          "119:         async for chunk in input:",
          "120:             if isinstance(chunk, BaseMessage):",
          "121:                 # extract text",
          "",
          "[Removed Lines]",
          "114:         xml_start_re = re.compile(r\"<[a-zA-Z:_]\")",
          "115:         xml_started = False",
          "118:         buffer = \"\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "123:                 if not isinstance(chunk_content, str):",
          "124:                     continue",
          "125:                 chunk = chunk_content",
          "139:             # yield all events",
          "140:             for event, elem in parser.read_events():",
          "141:                 if event == \"start\":",
          "",
          "[Removed Lines]",
          "126:             # add chunk to buffer of unprocessed text",
          "127:             buffer += chunk",
          "128:             # if xml string hasn't started yet, continue to next chunk",
          "129:             if not xml_started:",
          "130:                 if match := xml_start_re.search(buffer):",
          "131:                     # if xml string has started, remove all text before it",
          "132:                     buffer = buffer[match.start() :]",
          "133:                     xml_started = True",
          "134:                 else:",
          "135:                     continue",
          "136:             # feed buffer to parser",
          "137:             parser.feed(buffer)",
          "138:             buffer = \"\"",
          "",
          "[Added Lines]",
          "118:             # pass chunk to parser",
          "119:             parser.feed(chunk)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "149:                     if not current_path_has_children:",
          "150:                         yield nested_element(current_path, elem)",
          "151:                     # prevent yielding of parent element",
          "156:         # close parser",
          "157:         parser.close()",
          "",
          "[Removed Lines]",
          "152:                     if current_path:",
          "153:                         current_path_has_children = True",
          "154:                     else:",
          "155:                         xml_started = False",
          "",
          "[Added Lines]",
          "133:                     current_path_has_children = True",
          "",
          "---------------"
        ],
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "2966: [metadata]",
          "2967: lock-version = \"2.0\"",
          "2968: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "2969: content-hash = \"2f61e22c118e13c40a1b7980afe06a37a6349ee239c948b9c49e8b1dc06facc1\"",
          "",
          "[Added Lines]",
          "2969: content-hash = \"203d96b330412ce9defad6739381e4031fc9e995c2d9e0a61a905fc79fff11dd\"",
          "",
          "---------------"
        ],
        "libs/core/tests/unit_tests/output_parsers/test_xml_parser.py||libs/core/tests/unit_tests/output_parsers/test_xml_parser.py": [
          "File: libs/core/tests/unit_tests/output_parsers/test_xml_parser.py -> libs/core/tests/unit_tests/output_parsers/test_xml_parser.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \"\"\"Test XMLOutputParser\"\"\"",
          "4: import pytest",
          "6: from langchain_core.exceptions import OutputParserException",
          "",
          "[Removed Lines]",
          "2: from typing import AsyncIterator",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: \"\"\",",
          "43:     ],",
          "44: )",
          "46:     \"\"\"Test XMLOutputParser.\"\"\"",
          "48:     xml_parser = XMLOutputParser()",
          "63:         {\"foo\": [{\"bar\": [{\"baz\": None}]}]},",
          "64:         {\"foo\": [{\"bar\": [{\"baz\": \"slim.shady\"}]}]},",
          "65:         {\"foo\": [{\"baz\": \"tag\"}]},",
          "",
          "[Removed Lines]",
          "45: async def test_xml_output_parser(result: str) -> None:",
          "49:     assert DEF_RESULT_EXPECTED == xml_parser.parse(result)",
          "50:     assert DEF_RESULT_EXPECTED == (await xml_parser.aparse(result))",
          "51:     assert list(xml_parser.transform(iter(result))) == [",
          "52:         {\"foo\": [{\"bar\": [{\"baz\": None}]}]},",
          "53:         {\"foo\": [{\"bar\": [{\"baz\": \"slim.shady\"}]}]},",
          "54:         {\"foo\": [{\"baz\": \"tag\"}]},",
          "55:     ]",
          "57:     async def _as_iter(string: str) -> AsyncIterator[str]:",
          "58:         for c in string:",
          "59:             yield c",
          "61:     chunks = [chunk async for chunk in xml_parser.atransform(_as_iter(result))]",
          "62:     assert chunks == [",
          "",
          "[Added Lines]",
          "43: def test_xml_output_parser(result: str) -> None:",
          "48:     xml_result = xml_parser.parse(result)",
          "49:     assert DEF_RESULT_EXPECTED == xml_result",
          "50:     assert list(xml_parser.transform(iter(result))) == [",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:     with pytest.raises(OutputParserException) as e:",
          "76:         xml_parser.parse(result)",
          "77:     assert \"Failed to parse\" in str(e)",
          "",
          "[Removed Lines]",
          "80: MALICIOUS_XML = \"\"\"<?xml version=\"1.0\"?>",
          "81: <!DOCTYPE lolz [<!ENTITY lol \"lol\"><!ELEMENT lolz (#PCDATA)>",
          "82:  <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">",
          "83:  <!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">",
          "84:  <!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">",
          "85:  <!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">",
          "86:  <!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">",
          "87:  <!ENTITY lol6 \"&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\">",
          "88:  <!ENTITY lol7 \"&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\">",
          "89:  <!ENTITY lol8 \"&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\">",
          "90:  <!ENTITY lol9 \"&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\">",
          "91: ]>",
          "92: <lolz>&lol9;</lolz>\"\"\"",
          "95: async def tests_billion_laughs_attack() -> None:",
          "96:     parser = XMLOutputParser()",
          "97:     with pytest.raises(OutputParserException):",
          "98:         parser.parse(MALICIOUS_XML)",
          "100:     with pytest.raises(OutputParserException):",
          "101:         await parser.aparse(MALICIOUS_XML)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d2004ee7d9d2d7a33989d546536473b979d60b7",
      "candidate_info": {
        "commit_hash": "6d2004ee7d9d2d7a33989d546536473b979d60b7",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/6d2004ee7d9d2d7a33989d546536473b979d60b7",
        "files": [
          "libs/community/poetry.lock",
          "libs/community/pyproject.toml",
          "libs/community/tests/unit_tests/test_dependencies.py",
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml",
          "libs/langchain/poetry.lock",
          "libs/langchain/pyproject.toml",
          "libs/langchain/tests/unit_tests/test_dependencies.py",
          "libs/partners/anthropic/poetry.lock",
          "libs/partners/anthropic/pyproject.toml",
          "libs/partners/fireworks/poetry.lock",
          "libs/partners/fireworks/pyproject.toml",
          "libs/partners/groq/poetry.lock",
          "libs/partners/groq/pyproject.toml",
          "libs/partners/huggingface/poetry.lock",
          "libs/partners/huggingface/pyproject.toml",
          "libs/partners/mistralai/poetry.lock",
          "libs/partners/mistralai/pyproject.toml",
          "libs/partners/ollama/poetry.lock",
          "libs/partners/ollama/pyproject.toml",
          "libs/partners/openai/poetry.lock",
          "libs/partners/openai/pyproject.toml",
          "libs/partners/xai/poetry.lock",
          "libs/partners/xai/pyproject.toml",
          "libs/standard-tests/Makefile",
          "libs/standard-tests/README.md",
          "libs/standard-tests/langchain_standard_tests/unit_tests/chat_models.py",
          "libs/standard-tests/langchain_standard_tests/unit_tests/embeddings.py",
          "libs/standard-tests/langchain_standard_tests/unit_tests/tools.py",
          "libs/standard-tests/poetry.lock",
          "libs/standard-tests/pyproject.toml"
        ],
        "message": "multiple: langchain-standard-tests -> langchain-tests (#28139)",
        "before_after_code_files": [
          "libs/community/poetry.lock||libs/community/poetry.lock",
          "libs/community/tests/unit_tests/test_dependencies.py||libs/community/tests/unit_tests/test_dependencies.py",
          "libs/core/poetry.lock||libs/core/poetry.lock",
          "libs/langchain/poetry.lock||libs/langchain/poetry.lock",
          "libs/langchain/tests/unit_tests/test_dependencies.py||libs/langchain/tests/unit_tests/test_dependencies.py",
          "libs/partners/anthropic/poetry.lock||libs/partners/anthropic/poetry.lock",
          "libs/partners/fireworks/poetry.lock||libs/partners/fireworks/poetry.lock",
          "libs/partners/groq/poetry.lock||libs/partners/groq/poetry.lock",
          "libs/partners/huggingface/poetry.lock||libs/partners/huggingface/poetry.lock",
          "libs/partners/mistralai/poetry.lock||libs/partners/mistralai/poetry.lock",
          "libs/partners/ollama/poetry.lock||libs/partners/ollama/poetry.lock",
          "libs/partners/openai/poetry.lock||libs/partners/openai/poetry.lock",
          "libs/partners/xai/poetry.lock||libs/partners/xai/poetry.lock",
          "libs/standard-tests/langchain_standard_tests/unit_tests/chat_models.py||libs/standard-tests/langchain_standard_tests/unit_tests/chat_models.py",
          "libs/standard-tests/langchain_standard_tests/unit_tests/embeddings.py||libs/standard-tests/langchain_standard_tests/unit_tests/embeddings.py",
          "libs/standard-tests/langchain_standard_tests/unit_tests/tools.py||libs/standard-tests/langchain_standard_tests/unit_tests/tools.py",
          "libs/standard-tests/poetry.lock||libs/standard-tests/poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/community/poetry.lock||libs/community/poetry.lock": [
          "File: libs/community/poetry.lock -> libs/community/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1863: [[package]]",
          "1864: name = \"langchain-core\"",
          "1866: description = \"Building applications with LLMs through composability\"",
          "1867: optional = false",
          "1868: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1865: version = \"0.3.17\"",
          "",
          "[Added Lines]",
          "1865: version = \"0.3.19\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1886: url = \"../core\"",
          "1888: [[package]]",
          "1891: description = \"Standard tests for LangChain implementations\"",
          "1892: optional = false",
          "1893: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1889: name = \"langchain-standard-tests\"",
          "1890: version = \"0.3.0\"",
          "",
          "[Added Lines]",
          "1889: name = \"langchain-tests\"",
          "1890: version = \"0.3.1\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2532:     {file = \"pandas-2.2.3-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:381175499d3802cde0eabbaf6324cce0c4f5d52ca6f8c377c29ad442f50f6348\"},",
          "2533:     {file = \"pandas-2.2.3-cp310-cp310-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\", hash = \"sha256:d9c45366def9a3dd85a6454c0e7908f2b3b8e9c138f5dc38fed7ce720d8453ed\"},",
          "2534:     {file = \"pandas-2.2.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:86976a1c5b25ae3f8ccae3a5306e443569ee3c3faf444dfd0f41cda24667ad57\"},",
          "2535:     {file = \"pandas-2.2.3-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:37e0aced3e8f539eccf2e099f65cdb9c8aa85109b0be6e93e2baff94264bdc6f\"},",
          "2536:     {file = \"pandas-2.2.3-cp310-cp310-win_amd64.whl\", hash = \"sha256:56534ce0746a58afaf7942ba4863e0ef81c9c50d3f0ae93e9497d6a41a057645\"},",
          "2537:     {file = \"pandas-2.2.3-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:66108071e1b935240e74525006034333f98bcdb87ea116de573a6a0dccb6c039\"},",
          "2538:     {file = \"pandas-2.2.3-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:7c2875855b0ff77b2a64a0365e24455d9990730d6431b9e0ee18ad8acee13dbd\"},",
          "2539:     {file = \"pandas-2.2.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c124333816c3a9b03fbeef3a9f230ba9a737e9e5bb4060aa2107a86cc0a497fc\"},",
          "2540:     {file = \"pandas-2.2.3-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:29401dbfa9ad77319367d36940cd8a0b3a11aba16063e39632d98b0e931ddf32\"},",
          "2541:     {file = \"pandas-2.2.3-cp311-cp311-win_amd64.whl\", hash = \"sha256:3fc6873a41186404dad67245896a6e440baacc92f5b716ccd1bc9ed2995ab2c5\"},",
          "2542:     {file = \"pandas-2.2.3-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:b1d432e8d08679a40e2a6d8b2f9770a5c21793a6f9f47fdd52c5ce1948a5a8a9\"},",
          "2543:     {file = \"pandas-2.2.3-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:a5a1595fe639f5988ba6a8e5bc9649af3baf26df3998a0abe56c02609392e0a4\"},",
          "2544:     {file = \"pandas-2.2.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fffb8ae78d8af97f849404f21411c95062db1496aeb3e56f146f0355c9989319\"},",
          "2545:     {file = \"pandas-2.2.3-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:062309c1b9ea12a50e8ce661145c6aab431b1e99530d3cd60640e255778bd43a\"},",
          "2546:     {file = \"pandas-2.2.3-cp312-cp312-win_amd64.whl\", hash = \"sha256:59ef3764d0fe818125a5097d2ae867ca3fa64df032331b7e0917cf5d7bf66b13\"},",
          "2547:     {file = \"pandas-2.2.3-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:f00d1345d84d8c86a63e476bb4955e46458b304b9575dcf71102b5c705320015\"},",
          "2548:     {file = \"pandas-2.2.3-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:3508d914817e153ad359d7e069d752cdd736a247c322d932eb89e6bc84217f28\"},",
          "2549:     {file = \"pandas-2.2.3-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f3a255b2c19987fbbe62a9dfd6cff7ff2aa9ccab3fc75218fd4b7530f01efa24\"},",
          "2550:     {file = \"pandas-2.2.3-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:6374c452ff3ec675a8f46fd9ab25c4ad0ba590b71cf0656f8b6daa5202bca3fb\"},",
          "2551:     {file = \"pandas-2.2.3-cp313-cp313-win_amd64.whl\", hash = \"sha256:61c5ad4043f791b61dd4752191d9f07f0ae412515d59ba8f005832a532f8736d\"},",
          "2552:     {file = \"pandas-2.2.3-cp313-cp313t-macosx_10_13_x86_64.whl\", hash = \"sha256:3b71f27954685ee685317063bf13c7709a7ba74fc996b84fc6821c59b0f06468\"},",
          "2553:     {file = \"pandas-2.2.3-cp313-cp313t-macosx_11_0_arm64.whl\", hash = \"sha256:38cf8125c40dae9d5acc10fa66af8ea6fdf760b2714ee482ca691fc66e6fcb18\"},",
          "2554:     {file = \"pandas-2.2.3-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1db71525a1538b30142094edb9adc10be3f3e176748cd7acc2240c2f2e5aa3a4\"},",
          "2555:     {file = \"pandas-2.2.3-cp313-cp313t-musllinux_1_2_x86_64.whl\", hash = \"sha256:ad5b65698ab28ed8d7f18790a0dc58005c7629f227be9ecc1072aa74c0c1d43a\"},",
          "2556:     {file = \"pandas-2.2.3-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:bc6b93f9b966093cb0fd62ff1a7e4c09e6d546ad7c1de191767baffc57628f39\"},",
          "2557:     {file = \"pandas-2.2.3-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:5dbca4c1acd72e8eeef4753eeca07de9b1db4f398669d5994086f788a5d7cc30\"},",
          "2558:     {file = \"pandas-2.2.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:99df71520d25fade9db7c1076ac94eb994f4d2673ef2aa2e86ee039b6746d20c\"},",
          "2559:     {file = \"pandas-2.2.3-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:7eee9e7cea6adf3e3d24e304ac6b8300646e2a5d1cd3a3c2abed9101b0846761\"},",
          "2560:     {file = \"pandas-2.2.3-cp39-cp39-win_amd64.whl\", hash = \"sha256:4850ba03528b6dd51d6c5d273c46f183f39a9baf3f0143e566b89450965b105e\"},",
          "2561:     {file = \"pandas-2.2.3.tar.gz\", hash = \"sha256:4f18ba62b61d7e192368b84517265a99b4d7ee8912f8708660fb4a366cc82667\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2535:     {file = \"pandas-2.2.3-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:b8661b0238a69d7aafe156b7fa86c44b881387509653fdf857bebc5e4008ad42\"},",
          "2540:     {file = \"pandas-2.2.3-cp311-cp311-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\", hash = \"sha256:cd8d0c3be0515c12fed0bdbae072551c8b54b7192c7b1fda0ba56059a0179698\"},",
          "2542:     {file = \"pandas-2.2.3-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:63cc132e40a2e084cf01adf0775b15ac515ba905d7dcca47e9a251819c575ef3\"},",
          "2547:     {file = \"pandas-2.2.3-cp312-cp312-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\", hash = \"sha256:5de54125a92bb4d1c051c0659e6fcb75256bf799a732a87184e5ea503965bce3\"},",
          "2549:     {file = \"pandas-2.2.3-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:6dfcb5ee8d4d50c06a51c2fffa6cff6272098ad6540aed1a76d15fb9318194d8\"},",
          "2554:     {file = \"pandas-2.2.3-cp313-cp313-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\", hash = \"sha256:22a9d949bfc9a502d320aa04e5d02feab689d61da4e7764b62c30b991c42c5f0\"},",
          "2556:     {file = \"pandas-2.2.3-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:800250ecdadb6d9c78eae4990da62743b857b470883fa27f652db8bdde7f6659\"},",
          "2561:     {file = \"pandas-2.2.3-cp313-cp313t-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\", hash = \"sha256:ba96630bc17c875161df3818780af30e43be9b166ce51c9a18c1feae342906c2\"},",
          "2563:     {file = \"pandas-2.2.3-cp313-cp313t-musllinux_1_2_aarch64.whl\", hash = \"sha256:15c0e1e02e93116177d29ff83e8b1619c93ddc9c49083f237d4312337a61165d\"},",
          "2567:     {file = \"pandas-2.2.3-cp39-cp39-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\", hash = \"sha256:8cd6d7cc958a3910f934ea8dbdf17b2364827bb4dafc38ce6eef6bb3d65ff09c\"},",
          "2569:     {file = \"pandas-2.2.3-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:31d0ced62d4ea3e231a9f228366919a5ea0b07440d9d4dac345376fd8e1477ea\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3766: files = [",
          "3767:     {file = \"SQLAlchemy-2.0.35-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:67219632be22f14750f0d1c70e62f204ba69d28f62fd6432ba05ab295853de9b\"},",
          "3768:     {file = \"SQLAlchemy-2.0.35-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:4668bd8faf7e5b71c0319407b608f278f279668f358857dbfd10ef1954ac9f90\"},",
          "3769:     {file = \"SQLAlchemy-2.0.35-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f552023710d4b93d8fb29a91fadf97de89c5926c6bd758897875435f2a939f33\"},",
          "3770:     {file = \"SQLAlchemy-2.0.35-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:7befc148de64b6060937231cbff8d01ccf0bfd75aa26383ffdf8d82b12ec04ff\"},",
          "3771:     {file = \"SQLAlchemy-2.0.35-cp310-cp310-win32.whl\", hash = \"sha256:22b83aed390e3099584b839b93f80a0f4a95ee7f48270c97c90acd40ee646f0b\"},",
          "3772:     {file = \"SQLAlchemy-2.0.35-cp310-cp310-win_amd64.whl\", hash = \"sha256:a29762cd3d116585278ffb2e5b8cc311fb095ea278b96feef28d0b423154858e\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3780:     {file = \"SQLAlchemy-2.0.35-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:cb8bea573863762bbf45d1e13f87c2d2fd32cee2dbd50d050f83f87429c9e1ea\"},",
          "3782:     {file = \"SQLAlchemy-2.0.35-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:016b2e665f778f13d3c438651dd4de244214b527a275e0acf1d44c05bc6026a9\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3787:     {file = \"SQLAlchemy-2.0.35-cp312-cp312-win32.whl\", hash = \"sha256:0f9f3f9a3763b9c4deb8c5d09c4cc52ffe49f9876af41cc1b2ad0138878453cf\"},",
          "3788:     {file = \"SQLAlchemy-2.0.35-cp312-cp312-win_amd64.whl\", hash = \"sha256:25b0f63e7fcc2a6290cb5f7f5b4fc4047843504983a28856ce9b35d8f7de03cc\"},",
          "3789:     {file = \"SQLAlchemy-2.0.35-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:f021d334f2ca692523aaf7bbf7592ceff70c8594fad853416a81d66b35e3abf9\"},",
          "3790:     {file = \"SQLAlchemy-2.0.35-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:032d979ce77a6c2432653322ba4cbeabf5a6837f704d16fa38b5a05d8e21fa00\"},",
          "3791:     {file = \"SQLAlchemy-2.0.35-cp37-cp37m-musllinux_1_2_x86_64.whl\", hash = \"sha256:cc32b2990fc34380ec2f6195f33a76b6cdaa9eecf09f0c9404b74fc120aef36f\"},",
          "3792:     {file = \"SQLAlchemy-2.0.35-cp37-cp37m-win32.whl\", hash = \"sha256:9509c4123491d0e63fb5e16199e09f8e262066e58903e84615c301dde8fa2e87\"},",
          "3793:     {file = \"SQLAlchemy-2.0.35-cp37-cp37m-win_amd64.whl\", hash = \"sha256:3655af10ebcc0f1e4e06c5900bb33e080d6a1fa4228f502121f28a3b1753cde5\"},",
          "3794:     {file = \"SQLAlchemy-2.0.35-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:4c31943b61ed8fdd63dfd12ccc919f2bf95eefca133767db6fbbd15da62078ec\"},",
          "3795:     {file = \"SQLAlchemy-2.0.35-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:a62dd5d7cc8626a3634208df458c5fe4f21200d96a74d122c83bc2015b333bc1\"},",
          "3796:     {file = \"SQLAlchemy-2.0.35-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8d625eddf7efeba2abfd9c014a22c0f6b3796e0ffb48f5d5ab106568ef01ff5a\"},",
          "3797:     {file = \"SQLAlchemy-2.0.35-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:c41411e192f8d3ea39ea70e0fae48762cd11a2244e03751a98bd3c0ca9a4e936\"},",
          "3798:     {file = \"SQLAlchemy-2.0.35-cp38-cp38-win32.whl\", hash = \"sha256:d299797d75cd747e7797b1b41817111406b8b10a4f88b6e8fe5b5e59598b43b0\"},",
          "3799:     {file = \"SQLAlchemy-2.0.35-cp38-cp38-win_amd64.whl\", hash = \"sha256:0375a141e1c0878103eb3d719eb6d5aa444b490c96f3fedab8471c7f6ffe70ee\"},",
          "3800:     {file = \"SQLAlchemy-2.0.35-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:ccae5de2a0140d8be6838c331604f91d6fafd0735dbdcee1ac78fc8fbaba76b4\"},",
          "3801:     {file = \"SQLAlchemy-2.0.35-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:2a275a806f73e849e1c309ac11108ea1a14cd7058577aba962cd7190e27c9e3c\"},",
          "3802:     {file = \"SQLAlchemy-2.0.35-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:890da8cd1941fa3dab28c5bac3b9da8502e7e366f895b3b8e500896f12f94d11\"},",
          "3803:     {file = \"SQLAlchemy-2.0.35-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:b76d63495b0508ab9fc23f8152bac63205d2a704cd009a2b0722f4c8e0cba8e0\"},",
          "3804:     {file = \"SQLAlchemy-2.0.35-cp39-cp39-win32.whl\", hash = \"sha256:69683e02e8a9de37f17985905a5eca18ad651bf592314b4d3d799029797d0eb3\"},",
          "3805:     {file = \"SQLAlchemy-2.0.35-cp39-cp39-win_amd64.whl\", hash = \"sha256:aee110e4ef3c528f3abbc3c2018c121e708938adeeff9006428dd7c8555e9b3f\"},",
          "3806:     {file = \"sqlalchemy-2.0.35.tar.gz\", hash = \"sha256:e11d7ea4d24f0a262bccf9a7cd6284c976c5369dac21db237cff59586045ab9f\"},",
          "3807: ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3803:     {file = \"SQLAlchemy-2.0.35-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:05c3f58cf91683102f2f0265c0db3bd3892e9eedabe059720492dbaa4f922da1\"},",
          "3805:     {file = \"SQLAlchemy-2.0.35-cp37-cp37m-musllinux_1_2_aarch64.whl\", hash = \"sha256:2e795c2f7d7249b75bb5f479b432a51b59041580d20599d4e112b5f2046437a3\"},",
          "3811:     {file = \"SQLAlchemy-2.0.35-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0630774b0977804fba4b6bbea6852ab56c14965a2b0c7fc7282c5f7d90a1ae72\"},",
          "3813:     {file = \"SQLAlchemy-2.0.35-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:ada603db10bb865bbe591939de854faf2c60f43c9b763e90f653224138f910d9\"},",
          "3819:     {file = \"SQLAlchemy-2.0.35-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:732e026240cdd1c1b2e3ac515c7a23820430ed94292ce33806a95869c46bd139\"},",
          "3821:     {file = \"SQLAlchemy-2.0.35-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:c0d8326269dbf944b9201911b0d9f3dc524d64779a07518199a58384c3d37a44\"},",
          "3825:     {file = \"SQLAlchemy-2.0.35-py3-none-any.whl\", hash = \"sha256:2ab3f0336c0387662ce6221ad30ab3a5e6499aab01b9790879b6578fd9b8faa1\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4545: [metadata]",
          "4546: lock-version = \"2.0\"",
          "4547: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "4548: content-hash = \"19d0e7026b0f8b3f829ac928a80325ee1b07cd8788707f1df8ab9496712814a1\"",
          "",
          "[Added Lines]",
          "4568: content-hash = \"b369e0441d1066761e311c967981f172881e87fc9f2f5b96b9891667bd336404\"",
          "",
          "---------------"
        ],
        "libs/community/tests/unit_tests/test_dependencies.py||libs/community/tests/unit_tests/test_dependencies.py": [
          "File: libs/community/tests/unit_tests/test_dependencies.py -> libs/community/tests/unit_tests/test_dependencies.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:             \"duckdb-engine\",",
          "81:             \"freezegun\",",
          "82:             \"langchain-core\",",
          "84:             \"langchain\",",
          "85:             \"lark\",",
          "86:             \"pandas\",",
          "",
          "[Removed Lines]",
          "83:             \"langchain-standard-tests\",",
          "",
          "[Added Lines]",
          "83:             \"langchain-tests\",",
          "",
          "---------------"
        ],
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1189: ]",
          "1191: [[package]]",
          "1194: description = \"Standard tests for LangChain implementations\"",
          "1195: optional = false",
          "1196: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1192: name = \"langchain-standard-tests\"",
          "1193: version = \"0.3.0\"",
          "",
          "[Added Lines]",
          "1192: name = \"langchain-tests\"",
          "1193: version = \"0.3.1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3025: [metadata]",
          "3026: lock-version = \"2.0\"",
          "3027: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "3028: content-hash = \"ecd401dada54abf4af9ad698a1d4c6fedc67937ee5413994c72e7a51886ccb1b\"",
          "",
          "[Added Lines]",
          "3028: content-hash = \"02bfef4d884d17f83dde79a4076a3d07f94a1b3dbf2414f07379dab64a78e183\"",
          "",
          "---------------"
        ],
        "libs/langchain/poetry.lock||libs/langchain/poetry.lock": [
          "File: libs/langchain/poetry.lock -> libs/langchain/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1989: [[package]]",
          "1990: name = \"langchain-core\"",
          "1992: description = \"Building applications with LLMs through composability\"",
          "1993: optional = false",
          "1994: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1991: version = \"0.3.17\"",
          "",
          "[Added Lines]",
          "1991: version = \"0.3.19\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2030: url = \"../partners/openai\"",
          "2032: [[package]]",
          "2035: description = \"Standard tests for LangChain implementations\"",
          "2036: optional = false",
          "2037: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "2033: name = \"langchain-standard-tests\"",
          "2034: version = \"0.3.0\"",
          "",
          "[Added Lines]",
          "2033: name = \"langchain-tests\"",
          "2034: version = \"0.3.1\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2697:     {file = \"pandas-2.2.3-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:381175499d3802cde0eabbaf6324cce0c4f5d52ca6f8c377c29ad442f50f6348\"},",
          "2698:     {file = \"pandas-2.2.3-cp310-cp310-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\", hash = \"sha256:d9c45366def9a3dd85a6454c0e7908f2b3b8e9c138f5dc38fed7ce720d8453ed\"},",
          "2699:     {file = \"pandas-2.2.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:86976a1c5b25ae3f8ccae3a5306e443569ee3c3faf444dfd0f41cda24667ad57\"},",
          "2700:     {file = \"pandas-2.2.3-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:37e0aced3e8f539eccf2e099f65cdb9c8aa85109b0be6e93e2baff94264bdc6f\"},",
          "2701:     {file = \"pandas-2.2.3-cp310-cp310-win_amd64.whl\", hash = \"sha256:56534ce0746a58afaf7942ba4863e0ef81c9c50d3f0ae93e9497d6a41a057645\"},",
          "2702:     {file = \"pandas-2.2.3-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:66108071e1b935240e74525006034333f98bcdb87ea116de573a6a0dccb6c039\"},",
          "2703:     {file = \"pandas-2.2.3-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:7c2875855b0ff77b2a64a0365e24455d9990730d6431b9e0ee18ad8acee13dbd\"},",
          "2704:     {file = \"pandas-2.2.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c124333816c3a9b03fbeef3a9f230ba9a737e9e5bb4060aa2107a86cc0a497fc\"},",
          "2705:     {file = \"pandas-2.2.3-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:29401dbfa9ad77319367d36940cd8a0b3a11aba16063e39632d98b0e931ddf32\"},",
          "2706:     {file = \"pandas-2.2.3-cp311-cp311-win_amd64.whl\", hash = \"sha256:3fc6873a41186404dad67245896a6e440baacc92f5b716ccd1bc9ed2995ab2c5\"},",
          "2707:     {file = \"pandas-2.2.3-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:b1d432e8d08679a40e2a6d8b2f9770a5c21793a6f9f47fdd52c5ce1948a5a8a9\"},",
          "2708:     {file = \"pandas-2.2.3-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:a5a1595fe639f5988ba6a8e5bc9649af3baf26df3998a0abe56c02609392e0a4\"},",
          "2709:     {file = \"pandas-2.2.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fffb8ae78d8af97f849404f21411c95062db1496aeb3e56f146f0355c9989319\"},",
          "2710:     {file = \"pandas-2.2.3-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:062309c1b9ea12a50e8ce661145c6aab431b1e99530d3cd60640e255778bd43a\"},",
          "2711:     {file = \"pandas-2.2.3-cp312-cp312-win_amd64.whl\", hash = \"sha256:59ef3764d0fe818125a5097d2ae867ca3fa64df032331b7e0917cf5d7bf66b13\"},",
          "2712:     {file = \"pandas-2.2.3-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:f00d1345d84d8c86a63e476bb4955e46458b304b9575dcf71102b5c705320015\"},",
          "2713:     {file = \"pandas-2.2.3-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:3508d914817e153ad359d7e069d752cdd736a247c322d932eb89e6bc84217f28\"},",
          "2714:     {file = \"pandas-2.2.3-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f3a255b2c19987fbbe62a9dfd6cff7ff2aa9ccab3fc75218fd4b7530f01efa24\"},",
          "2715:     {file = \"pandas-2.2.3-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:6374c452ff3ec675a8f46fd9ab25c4ad0ba590b71cf0656f8b6daa5202bca3fb\"},",
          "2716:     {file = \"pandas-2.2.3-cp313-cp313-win_amd64.whl\", hash = \"sha256:61c5ad4043f791b61dd4752191d9f07f0ae412515d59ba8f005832a532f8736d\"},",
          "2717:     {file = \"pandas-2.2.3-cp313-cp313t-macosx_10_13_x86_64.whl\", hash = \"sha256:3b71f27954685ee685317063bf13c7709a7ba74fc996b84fc6821c59b0f06468\"},",
          "2718:     {file = \"pandas-2.2.3-cp313-cp313t-macosx_11_0_arm64.whl\", hash = \"sha256:38cf8125c40dae9d5acc10fa66af8ea6fdf760b2714ee482ca691fc66e6fcb18\"},",
          "2719:     {file = \"pandas-2.2.3-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1db71525a1538b30142094edb9adc10be3f3e176748cd7acc2240c2f2e5aa3a4\"},",
          "2720:     {file = \"pandas-2.2.3-cp313-cp313t-musllinux_1_2_x86_64.whl\", hash = \"sha256:ad5b65698ab28ed8d7f18790a0dc58005c7629f227be9ecc1072aa74c0c1d43a\"},",
          "2721:     {file = \"pandas-2.2.3-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:bc6b93f9b966093cb0fd62ff1a7e4c09e6d546ad7c1de191767baffc57628f39\"},",
          "2722:     {file = \"pandas-2.2.3-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:5dbca4c1acd72e8eeef4753eeca07de9b1db4f398669d5994086f788a5d7cc30\"},",
          "2723:     {file = \"pandas-2.2.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:99df71520d25fade9db7c1076ac94eb994f4d2673ef2aa2e86ee039b6746d20c\"},",
          "2724:     {file = \"pandas-2.2.3-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:7eee9e7cea6adf3e3d24e304ac6b8300646e2a5d1cd3a3c2abed9101b0846761\"},",
          "2725:     {file = \"pandas-2.2.3-cp39-cp39-win_amd64.whl\", hash = \"sha256:4850ba03528b6dd51d6c5d273c46f183f39a9baf3f0143e566b89450965b105e\"},",
          "2726:     {file = \"pandas-2.2.3.tar.gz\", hash = \"sha256:4f18ba62b61d7e192368b84517265a99b4d7ee8912f8708660fb4a366cc82667\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2700:     {file = \"pandas-2.2.3-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:b8661b0238a69d7aafe156b7fa86c44b881387509653fdf857bebc5e4008ad42\"},",
          "2705:     {file = \"pandas-2.2.3-cp311-cp311-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\", hash = \"sha256:cd8d0c3be0515c12fed0bdbae072551c8b54b7192c7b1fda0ba56059a0179698\"},",
          "2707:     {file = \"pandas-2.2.3-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:63cc132e40a2e084cf01adf0775b15ac515ba905d7dcca47e9a251819c575ef3\"},",
          "2712:     {file = \"pandas-2.2.3-cp312-cp312-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\", hash = \"sha256:5de54125a92bb4d1c051c0659e6fcb75256bf799a732a87184e5ea503965bce3\"},",
          "2714:     {file = \"pandas-2.2.3-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:6dfcb5ee8d4d50c06a51c2fffa6cff6272098ad6540aed1a76d15fb9318194d8\"},",
          "2719:     {file = \"pandas-2.2.3-cp313-cp313-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\", hash = \"sha256:22a9d949bfc9a502d320aa04e5d02feab689d61da4e7764b62c30b991c42c5f0\"},",
          "2721:     {file = \"pandas-2.2.3-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:800250ecdadb6d9c78eae4990da62743b857b470883fa27f652db8bdde7f6659\"},",
          "2726:     {file = \"pandas-2.2.3-cp313-cp313t-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\", hash = \"sha256:ba96630bc17c875161df3818780af30e43be9b166ce51c9a18c1feae342906c2\"},",
          "2728:     {file = \"pandas-2.2.3-cp313-cp313t-musllinux_1_2_aarch64.whl\", hash = \"sha256:15c0e1e02e93116177d29ff83e8b1619c93ddc9c49083f237d4312337a61165d\"},",
          "2732:     {file = \"pandas-2.2.3-cp39-cp39-manylinux2014_aarch64.manylinux_2_17_aarch64.whl\", hash = \"sha256:8cd6d7cc958a3910f934ea8dbdf17b2364827bb4dafc38ce6eef6bb3d65ff09c\"},",
          "2734:     {file = \"pandas-2.2.3-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:31d0ced62d4ea3e231a9f228366919a5ea0b07440d9d4dac345376fd8e1477ea\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4062: optional = false",
          "4063: python-versions = \">=3.7\"",
          "4064: files = [",
          "4068:     {file = \"SQLAlchemy-2.0.36-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c245b1fbade9c35e5bd3b64270ab49ce990369018289ecfde3f9c318411aaa07\"},",
          "4070:     {file = \"SQLAlchemy-2.0.36-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:f9511d8dd4a6e9271d07d150fb2f81874a3c8c95e11ff9af3a2dfc35fe42ee44\"},",
          "4071:     {file = \"SQLAlchemy-2.0.36-cp310-cp310-win32.whl\", hash = \"sha256:c3f3631693003d8e585d4200730616b78fafd5a01ef8b698f6967da5c605b3fa\"},",
          "4072:     {file = \"SQLAlchemy-2.0.36-cp310-cp310-win_amd64.whl\", hash = \"sha256:a86bfab2ef46d63300c0f06936bd6e6c0105faa11d509083ba8f2f9d237fb5b5\"},",
          "4076:     {file = \"SQLAlchemy-2.0.36-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:2519f3a5d0517fc159afab1015e54bb81b4406c278749779be57a569d8d1bb0d\"},",
          "4078:     {file = \"SQLAlchemy-2.0.36-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:39769a115f730d683b0eb7b694db9789267bcd027326cccc3125e862eb03bfd8\"},",
          "4079:     {file = \"SQLAlchemy-2.0.36-cp311-cp311-win32.whl\", hash = \"sha256:66bffbad8d6271bb1cc2f9a4ea4f86f80fe5e2e3e501a5ae2a3dc6a76e604e6f\"},",
          "4080:     {file = \"SQLAlchemy-2.0.36-cp311-cp311-win_amd64.whl\", hash = \"sha256:23623166bfefe1487d81b698c423f8678e80df8b54614c2bf4b4cfcd7c711959\"},",
          "4120:     {file = \"SQLAlchemy-2.0.36-py3-none-any.whl\", hash = \"sha256:fddbe92b4760c6f5d48162aef14824add991aeda8ddadb3c31d56eb15ca69f8e\"},",
          "4121:     {file = \"sqlalchemy-2.0.36.tar.gz\", hash = \"sha256:7f2767680b6d2398aea7082e45a774b2b0767b5c8d8ffb9c8b683088ea9b29c5\"},",
          "4122: ]",
          "",
          "[Removed Lines]",
          "4065:     {file = \"SQLAlchemy-2.0.36-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:59b8f3adb3971929a3e660337f5dacc5942c2cdb760afcabb2614ffbda9f9f72\"},",
          "4066:     {file = \"SQLAlchemy-2.0.36-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:37350015056a553e442ff672c2d20e6f4b6d0b2495691fa239d8aa18bb3bc908\"},",
          "4067:     {file = \"SQLAlchemy-2.0.36-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:8318f4776c85abc3f40ab185e388bee7a6ea99e7fa3a30686580b209eaa35c08\"},",
          "4069:     {file = \"SQLAlchemy-2.0.36-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:69f93723edbca7342624d09f6704e7126b152eaed3cdbb634cb657a54332a3c5\"},",
          "4073:     {file = \"SQLAlchemy-2.0.36-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:fd3a55deef00f689ce931d4d1b23fa9f04c880a48ee97af488fd215cf24e2a6c\"},",
          "4074:     {file = \"SQLAlchemy-2.0.36-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:4f5e9cd989b45b73bd359f693b935364f7e1f79486e29015813c338450aa5a71\"},",
          "4075:     {file = \"SQLAlchemy-2.0.36-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d0ddd9db6e59c44875211bc4c7953a9f6638b937b0a88ae6d09eb46cced54eff\"},",
          "4077:     {file = \"SQLAlchemy-2.0.36-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:59b1ee96617135f6e1d6f275bbe988f419c5178016f3d41d3c0abb0c819f75bb\"},",
          "4081:     {file = \"SQLAlchemy-2.0.36-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:f7b64e6ec3f02c35647be6b4851008b26cff592a95ecb13b6788a54ef80bbdd4\"},",
          "4082:     {file = \"SQLAlchemy-2.0.36-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:46331b00096a6db1fdc052d55b101dbbfc99155a548e20a0e4a8e5e4d1362855\"},",
          "4083:     {file = \"SQLAlchemy-2.0.36-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:fdf3386a801ea5aba17c6410dd1dc8d39cf454ca2565541b5ac42a84e1e28f53\"},",
          "4084:     {file = \"SQLAlchemy-2.0.36-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ac9dfa18ff2a67b09b372d5db8743c27966abf0e5344c555d86cc7199f7ad83a\"},",
          "4085:     {file = \"SQLAlchemy-2.0.36-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:90812a8933df713fdf748b355527e3af257a11e415b613dd794512461eb8a686\"},",
          "4086:     {file = \"SQLAlchemy-2.0.36-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:1bc330d9d29c7f06f003ab10e1eaced295e87940405afe1b110f2eb93a233588\"},",
          "4087:     {file = \"SQLAlchemy-2.0.36-cp312-cp312-win32.whl\", hash = \"sha256:79d2e78abc26d871875b419e1fd3c0bca31a1cb0043277d0d850014599626c2e\"},",
          "4088:     {file = \"SQLAlchemy-2.0.36-cp312-cp312-win_amd64.whl\", hash = \"sha256:b544ad1935a8541d177cb402948b94e871067656b3a0b9e91dbec136b06a2ff5\"},",
          "4089:     {file = \"SQLAlchemy-2.0.36-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:b5cc79df7f4bc3d11e4b542596c03826063092611e481fcf1c9dfee3c94355ef\"},",
          "4090:     {file = \"SQLAlchemy-2.0.36-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:3c01117dd36800f2ecaa238c65365b7b16497adc1522bf84906e5710ee9ba0e8\"},",
          "4091:     {file = \"SQLAlchemy-2.0.36-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:9bc633f4ee4b4c46e7adcb3a9b5ec083bf1d9a97c1d3854b92749d935de40b9b\"},",
          "4092:     {file = \"SQLAlchemy-2.0.36-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:9e46ed38affdfc95d2c958de328d037d87801cfcbea6d421000859e9789e61c2\"},",
          "4093:     {file = \"SQLAlchemy-2.0.36-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:b2985c0b06e989c043f1dc09d4fe89e1616aadd35392aea2844f0458a989eacf\"},",
          "4094:     {file = \"SQLAlchemy-2.0.36-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:4a121d62ebe7d26fec9155f83f8be5189ef1405f5973ea4874a26fab9f1e262c\"},",
          "4095:     {file = \"SQLAlchemy-2.0.36-cp313-cp313-win32.whl\", hash = \"sha256:0572f4bd6f94752167adfd7c1bed84f4b240ee6203a95e05d1e208d488d0d436\"},",
          "4096:     {file = \"SQLAlchemy-2.0.36-cp313-cp313-win_amd64.whl\", hash = \"sha256:8c78ac40bde930c60e0f78b3cd184c580f89456dd87fc08f9e3ee3ce8765ce88\"},",
          "4097:     {file = \"SQLAlchemy-2.0.36-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:be9812b766cad94a25bc63bec11f88c4ad3629a0cec1cd5d4ba48dc23860486b\"},",
          "4098:     {file = \"SQLAlchemy-2.0.36-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:50aae840ebbd6cdd41af1c14590e5741665e5272d2fee999306673a1bb1fdb4d\"},",
          "4099:     {file = \"SQLAlchemy-2.0.36-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4557e1f11c5f653ebfdd924f3f9d5ebfc718283b0b9beebaa5dd6b77ec290971\"},",
          "4100:     {file = \"SQLAlchemy-2.0.36-cp37-cp37m-musllinux_1_2_aarch64.whl\", hash = \"sha256:07b441f7d03b9a66299ce7ccf3ef2900abc81c0db434f42a5694a37bd73870f2\"},",
          "4101:     {file = \"SQLAlchemy-2.0.36-cp37-cp37m-musllinux_1_2_x86_64.whl\", hash = \"sha256:28120ef39c92c2dd60f2721af9328479516844c6b550b077ca450c7d7dc68575\"},",
          "4102:     {file = \"SQLAlchemy-2.0.36-cp37-cp37m-win32.whl\", hash = \"sha256:b81ee3d84803fd42d0b154cb6892ae57ea6b7c55d8359a02379965706c7efe6c\"},",
          "4103:     {file = \"SQLAlchemy-2.0.36-cp37-cp37m-win_amd64.whl\", hash = \"sha256:f942a799516184c855e1a32fbc7b29d7e571b52612647866d4ec1c3242578fcb\"},",
          "4104:     {file = \"SQLAlchemy-2.0.36-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:3d6718667da04294d7df1670d70eeddd414f313738d20a6f1d1f379e3139a545\"},",
          "4105:     {file = \"SQLAlchemy-2.0.36-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:72c28b84b174ce8af8504ca28ae9347d317f9dba3999e5981a3cd441f3712e24\"},",
          "4106:     {file = \"SQLAlchemy-2.0.36-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b11d0cfdd2b095e7b0686cf5fabeb9c67fae5b06d265d8180715b8cfa86522e3\"},",
          "4107:     {file = \"SQLAlchemy-2.0.36-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e32092c47011d113dc01ab3e1d3ce9f006a47223b18422c5c0d150af13a00687\"},",
          "4108:     {file = \"SQLAlchemy-2.0.36-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:6a440293d802d3011028e14e4226da1434b373cbaf4a4bbb63f845761a708346\"},",
          "4109:     {file = \"SQLAlchemy-2.0.36-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:c54a1e53a0c308a8e8a7dffb59097bff7facda27c70c286f005327f21b2bd6b1\"},",
          "4110:     {file = \"SQLAlchemy-2.0.36-cp38-cp38-win32.whl\", hash = \"sha256:1e0d612a17581b6616ff03c8e3d5eff7452f34655c901f75d62bd86449d9750e\"},",
          "4111:     {file = \"SQLAlchemy-2.0.36-cp38-cp38-win_amd64.whl\", hash = \"sha256:8958b10490125124463095bbdadda5aa22ec799f91958e410438ad6c97a7b793\"},",
          "4112:     {file = \"SQLAlchemy-2.0.36-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:dc022184d3e5cacc9579e41805a681187650e170eb2fd70e28b86192a479dcaa\"},",
          "4113:     {file = \"SQLAlchemy-2.0.36-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:b817d41d692bf286abc181f8af476c4fbef3fd05e798777492618378448ee689\"},",
          "4114:     {file = \"SQLAlchemy-2.0.36-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a4e46a888b54be23d03a89be510f24a7652fe6ff660787b96cd0e57a4ebcb46d\"},",
          "4115:     {file = \"SQLAlchemy-2.0.36-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c4ae3005ed83f5967f961fd091f2f8c5329161f69ce8480aa8168b2d7fe37f06\"},",
          "4116:     {file = \"SQLAlchemy-2.0.36-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:03e08af7a5f9386a43919eda9de33ffda16b44eb11f3b313e6822243770e9763\"},",
          "4117:     {file = \"SQLAlchemy-2.0.36-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:3dbb986bad3ed5ceaf090200eba750b5245150bd97d3e67343a3cfed06feecf7\"},",
          "4118:     {file = \"SQLAlchemy-2.0.36-cp39-cp39-win32.whl\", hash = \"sha256:9fe53b404f24789b5ea9003fc25b9a3988feddebd7e7b369c8fac27ad6f52f28\"},",
          "4119:     {file = \"SQLAlchemy-2.0.36-cp39-cp39-win_amd64.whl\", hash = \"sha256:af148a33ff0349f53512a049c6406923e4e02bf2f26c5fb285f143faf4f0e46a\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4889: [metadata]",
          "4890: lock-version = \"2.0\"",
          "4891: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "4892: content-hash = \"ddb83a185d3085f621e322466f84f4ec1f819db04978c843b083f46b008b53d7\"",
          "",
          "[Added Lines]",
          "4856: content-hash = \"e0b37255a15bdc97b4f164a1c0af09bc89b812aebff988e0ff9728038a09a4b3\"",
          "",
          "---------------"
        ],
        "libs/langchain/tests/unit_tests/test_dependencies.py||libs/langchain/tests/unit_tests/test_dependencies.py": [
          "File: libs/langchain/tests/unit_tests/test_dependencies.py -> libs/langchain/tests/unit_tests/test_dependencies.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:             \"duckdb-engine\",",
          "80:             \"freezegun\",",
          "81:             \"langchain-core\",",
          "83:             \"langchain-text-splitters\",",
          "84:             \"langchain-openai\",",
          "85:             \"lark\",",
          "",
          "[Removed Lines]",
          "82:             \"langchain-standard-tests\",",
          "",
          "[Added Lines]",
          "82:             \"langchain-tests\",",
          "",
          "---------------"
        ],
        "libs/partners/anthropic/poetry.lock||libs/partners/anthropic/poetry.lock": [
          "File: libs/partners/anthropic/poetry.lock -> libs/partners/anthropic/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452: [[package]]",
          "453: name = \"langchain-core\"",
          "455: description = \"Building applications with LLMs through composability\"",
          "456: optional = false",
          "457: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "454: version = \"0.3.17\"",
          "",
          "[Added Lines]",
          "454: version = \"0.3.19\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "475: url = \"../../core\"",
          "477: [[package]]",
          "480: description = \"Standard tests for LangChain implementations\"",
          "481: optional = false",
          "482: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "478: name = \"langchain-standard-tests\"",
          "479: version = \"0.3.0\"",
          "",
          "[Added Lines]",
          "478: name = \"langchain-tests\"",
          "479: version = \"0.3.1\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1140: [metadata]",
          "1141: lock-version = \"2.0\"",
          "1142: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1143: content-hash = \"c646c08244b1b08c334f6ba7baca5e6fa78d801eae4f957f2770a190c3b9f2ac\"",
          "",
          "[Added Lines]",
          "1143: content-hash = \"ee4aaa06307b4dc7f7913147bf58f3f36245193c9d4a79c43aba07641f7b6ab9\"",
          "",
          "---------------"
        ],
        "libs/partners/fireworks/poetry.lock||libs/partners/fireworks/poetry.lock": [
          "File: libs/partners/fireworks/poetry.lock -> libs/partners/fireworks/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"aiohappyeyeballs\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "671: [[package]]",
          "672: name = \"langchain-core\"",
          "674: description = \"Building applications with LLMs through composability\"",
          "675: optional = false",
          "676: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "673: version = \"0.3.15\"",
          "",
          "[Added Lines]",
          "673: version = \"0.3.19\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "694: url = \"../../core\"",
          "696: [[package]]",
          "699: description = \"Standard tests for LangChain implementations\"",
          "700: optional = false",
          "701: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "697: name = \"langchain-standard-tests\"",
          "698: version = \"0.1.1\"",
          "",
          "[Added Lines]",
          "697: name = \"langchain-tests\"",
          "698: version = \"0.3.1\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "705: [package.dependencies]",
          "706: httpx = \"^0.27.0\"",
          "708: pytest = \">=7,<9\"",
          "709: syrupy = \"^4\"",
          "",
          "[Removed Lines]",
          "707: langchain-core = \"^0.3.0\"",
          "",
          "[Added Lines]",
          "707: langchain-core = \"^0.3.15\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1716: [metadata]",
          "1717: lock-version = \"2.0\"",
          "1718: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1719: content-hash = \"9664344ff6792f26b7b2067fd85cfe111d31cf6ba40842297f0c8b36431a9028\"",
          "",
          "[Added Lines]",
          "1719: content-hash = \"40e27b8e7c09a02e0ce22d7134796a59586693612c784be8d17cea70d639f3d2\"",
          "",
          "---------------"
        ],
        "libs/partners/groq/poetry.lock||libs/partners/groq/poetry.lock": [
          "File: libs/partners/groq/poetry.lock -> libs/partners/groq/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340: [[package]]",
          "341: name = \"langchain-core\"",
          "343: description = \"Building applications with LLMs through composability\"",
          "344: optional = false",
          "345: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "342: version = \"0.3.15\"",
          "",
          "[Added Lines]",
          "342: version = \"0.3.19\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "363: url = \"../../core\"",
          "365: [[package]]",
          "368: description = \"Standard tests for LangChain implementations\"",
          "369: optional = false",
          "370: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "366: name = \"langchain-standard-tests\"",
          "367: version = \"0.1.1\"",
          "",
          "[Added Lines]",
          "366: name = \"langchain-tests\"",
          "367: version = \"0.3.1\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "374: [package.dependencies]",
          "375: httpx = \"^0.27.0\"",
          "377: pytest = \">=7,<9\"",
          "378: syrupy = \"^4\"",
          "",
          "[Removed Lines]",
          "376: langchain-core = \"^0.3.0\"",
          "",
          "[Added Lines]",
          "376: langchain-core = \"^0.3.15\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1003: [metadata]",
          "1004: lock-version = \"2.0\"",
          "1005: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1006: content-hash = \"23a501c80ee0d64d676e493060f0cb6a3679d50a5f72e353b32a003c2c996260\"",
          "",
          "[Added Lines]",
          "1006: content-hash = \"a990f45be00407eb6dcb11b1db4852dad61f9c8999f402b9a18f6029f905c9f3\"",
          "",
          "---------------"
        ],
        "libs/partners/huggingface/poetry.lock||libs/partners/huggingface/poetry.lock": [
          "File: libs/partners/huggingface/poetry.lock -> libs/partners/huggingface/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"aiohappyeyeballs\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1147: [[package]]",
          "1148: name = \"langchain\"",
          "1150: description = \"Building applications with LLMs through composability\"",
          "1151: optional = false",
          "1152: python-versions = \"<4.0,>=3.9\"",
          "1153: files = [",
          "1156: ]",
          "1158: [package.dependencies]",
          "1159: aiohttp = \">=3.8.3,<4.0.0\"",
          "1160: async-timeout = {version = \">=4.0.0,<5.0.0\", markers = \"python_version < \\\"3.11\\\"\"}",
          "1162: langchain-text-splitters = \">=0.3.0,<0.4.0\"",
          "1163: langsmith = \">=0.1.17,<0.2.0\"",
          "1164: numpy = [",
          "",
          "[Removed Lines]",
          "1149: version = \"0.3.6\"",
          "1154:     {file = \"langchain-0.3.6-py3-none-any.whl\", hash = \"sha256:6e453f6c26dfd8f800ba5eb3ecbd21d283d5b6ccad422179b2933a962c1a6563\"},",
          "1155:     {file = \"langchain-0.3.6.tar.gz\", hash = \"sha256:0b0e2dc3be7b49eb3ca2aa21341bb204ed74450e34b3041345820454e21bcdc8\"},",
          "1161: langchain-core = \">=0.3.14,<0.4.0\"",
          "",
          "[Added Lines]",
          "1149: version = \"0.3.7\"",
          "1154:     {file = \"langchain-0.3.7-py3-none-any.whl\", hash = \"sha256:cf4af1d5751dacdc278df3de1ff3cbbd8ca7eb55d39deadccdd7fb3d3ee02ac0\"},",
          "1155:     {file = \"langchain-0.3.7.tar.gz\", hash = \"sha256:2e4f83bf794ba38562f7ba0ede8171d7e28a583c0cec6f8595cfe72147d336b2\"},",
          "1161: langchain-core = \">=0.3.15,<0.4.0\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1174: [[package]]",
          "1175: name = \"langchain-community\"",
          "1177: description = \"Community contributed LangChain integrations.\"",
          "1178: optional = false",
          "1179: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1176: version = \"0.3.4\"",
          "",
          "[Added Lines]",
          "1176: version = \"0.3.7\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1184: aiohttp = \"^3.8.3\"",
          "1185: dataclasses-json = \">= 0.5.7, < 0.7\"",
          "1186: httpx-sse = \"^0.4.0\"",
          "1189: langsmith = \"^0.1.125\"",
          "1190: numpy = [",
          "1193: ]",
          "1194: pydantic-settings = \"^2.4.0\"",
          "1195: PyYAML = \">=5.3\"",
          "",
          "[Removed Lines]",
          "1187: langchain = \"^0.3.6\"",
          "1188: langchain-core = \"^0.3.14\"",
          "1191:     {version = \">=1,<2\", markers = \"python_version < \\\"3.12\\\"\"},",
          "1192:     {version = \">=1.26.0,<2.0.0\", markers = \"python_version >= \\\"3.12\\\"\"},",
          "",
          "[Added Lines]",
          "1187: langchain = \"^0.3.7\"",
          "1188: langchain-core = \"^0.3.17\"",
          "1191:     {version = \">=1.22.4,<2\", markers = \"python_version < \\\"3.12\\\"\"},",
          "1192:     {version = \">=1.26.2,<2\", markers = \"python_version >= \\\"3.12\\\"\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1204: [[package]]",
          "1205: name = \"langchain-core\"",
          "1207: description = \"Building applications with LLMs through composability\"",
          "1208: optional = false",
          "1209: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1206: version = \"0.3.15\"",
          "",
          "[Added Lines]",
          "1206: version = \"0.3.19\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1227: url = \"../../core\"",
          "1229: [[package]]",
          "1232: description = \"Standard tests for LangChain implementations\"",
          "1233: optional = false",
          "1234: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1230: name = \"langchain-standard-tests\"",
          "1231: version = \"0.1.1\"",
          "",
          "[Added Lines]",
          "1230: name = \"langchain-tests\"",
          "1231: version = \"0.3.1\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1238: [package.dependencies]",
          "1239: httpx = \"^0.27.0\"",
          "1241: pytest = \">=7,<9\"",
          "1242: syrupy = \"^4\"",
          "",
          "[Removed Lines]",
          "1240: langchain-core = \"^0.3.0\"",
          "",
          "[Added Lines]",
          "1240: langchain-core = \"^0.3.15\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1780: optional = false",
          "1781: python-versions = \">=3\"",
          "1782: files = [",
          "1784:     {file = \"nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl\", hash = \"sha256:06b3b9b25bf3f8af351d664978ca26a16d2c5127dbd53c0497e28d1fb9611d57\"},",
          "1785:     {file = \"nvidia_nvjitlink_cu12-12.4.127-py3-none-win_amd64.whl\", hash = \"sha256:fd9020c501d27d135f983c6d3e244b197a7ccad769e34df53a42e276b0e25fa1\"},",
          "1786: ]",
          "",
          "[Removed Lines]",
          "1783:     {file = \"nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_aarch64.whl\", hash = \"sha256:4abe7fef64914ccfa909bc2ba39739670ecc9e820c83ccc7a6ed414122599b83\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2984:     {file = \"scikit_learn-1.5.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f60021ec1574e56632be2a36b946f8143bf4e5e6af4a06d85281adc22938e0dd\"},",
          "2985:     {file = \"scikit_learn-1.5.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:394397841449853c2290a32050382edaec3da89e35b3e03d6cc966aebc6a8ae6\"},",
          "2986:     {file = \"scikit_learn-1.5.2-cp312-cp312-win_amd64.whl\", hash = \"sha256:57cc1786cfd6bd118220a92ede80270132aa353647684efa385a74244a41e3b1\"},",
          "2987:     {file = \"scikit_learn-1.5.2-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:757c7d514ddb00ae249832fe87100d9c73c6ea91423802872d9e74970a0e40b9\"},",
          "2988:     {file = \"scikit_learn-1.5.2-cp39-cp39-macosx_12_0_arm64.whl\", hash = \"sha256:52788f48b5d8bca5c0736c175fa6bdaab2ef00a8f536cda698db61bd89c551c1\"},",
          "2989:     {file = \"scikit_learn-1.5.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:643964678f4b5fbdc95cbf8aec638acc7aa70f5f79ee2cdad1eec3df4ba6ead8\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2986:     {file = \"scikit_learn-1.5.2-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:e9a702e2de732bbb20d3bad29ebd77fc05a6b427dc49964300340e4c9328b3f5\"},",
          "2987:     {file = \"scikit_learn-1.5.2-cp313-cp313-macosx_12_0_arm64.whl\", hash = \"sha256:b0768ad641981f5d3a198430a1d31c3e044ed2e8a6f22166b4d546a5116d7908\"},",
          "2988:     {file = \"scikit_learn-1.5.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:178ddd0a5cb0044464fc1bfc4cca5b1833bfc7bb022d70b05db8530da4bb3dd3\"},",
          "2989:     {file = \"scikit_learn-1.5.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f7284ade780084d94505632241bf78c44ab3b6f1e8ccab3d2af58e0e950f9c12\"},",
          "2990:     {file = \"scikit_learn-1.5.2-cp313-cp313-win_amd64.whl\", hash = \"sha256:b7b0f9a0b1040830d38c39b91b3a44e1b643f4b36e36567b80b7c6bd2202a27f\"},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3871: [metadata]",
          "3872: lock-version = \"2.0\"",
          "3873: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "3874: content-hash = \"f1f436e0e520800571d8861bca1da02f1ae5dd67b449f680e46a2c3e5ee70933\"",
          "",
          "[Added Lines]",
          "3878: content-hash = \"2d468da765374084b6ad008d1b3e6d4d12f3c1d696cea84f2245f49012691272\"",
          "",
          "---------------"
        ],
        "libs/partners/mistralai/poetry.lock||libs/partners/mistralai/poetry.lock": [
          "File: libs/partners/mistralai/poetry.lock -> libs/partners/mistralai/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "410: [[package]]",
          "411: name = \"langchain-core\"",
          "413: description = \"Building applications with LLMs through composability\"",
          "414: optional = false",
          "415: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "412: version = \"0.3.15\"",
          "",
          "[Added Lines]",
          "412: version = \"0.3.19\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "433: url = \"../../core\"",
          "435: [[package]]",
          "438: description = \"Standard tests for LangChain implementations\"",
          "439: optional = false",
          "440: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "436: name = \"langchain-standard-tests\"",
          "437: version = \"0.1.1\"",
          "",
          "[Added Lines]",
          "436: name = \"langchain-tests\"",
          "437: version = \"0.3.1\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "444: [package.dependencies]",
          "445: httpx = \"^0.27.0\"",
          "447: pytest = \">=7,<9\"",
          "448: syrupy = \"^4\"",
          "",
          "[Removed Lines]",
          "446: langchain-core = \"^0.3.0\"",
          "",
          "[Added Lines]",
          "446: langchain-core = \"^0.3.15\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1193: [metadata]",
          "1194: lock-version = \"2.0\"",
          "1195: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1196: content-hash = \"7501ae59586e8c4ed95ec24121170926ff9ab5580665a80a7b7ae2efcbff5f18\"",
          "",
          "[Added Lines]",
          "1196: content-hash = \"4a86b5a8d678aa583d949272e47d16b9a1ecde22ce590d903bcb1a386dc4ecdf\"",
          "",
          "---------------"
        ],
        "libs/partners/ollama/poetry.lock||libs/partners/ollama/poetry.lock": [
          "File: libs/partners/ollama/poetry.lock -> libs/partners/ollama/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310: [[package]]",
          "311: name = \"langchain-core\"",
          "313: description = \"Building applications with LLMs through composability\"",
          "314: optional = false",
          "315: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "312: version = \"0.3.15\"",
          "",
          "[Added Lines]",
          "312: version = \"0.3.19\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "333: url = \"../../core\"",
          "335: [[package]]",
          "338: description = \"Standard tests for LangChain implementations\"",
          "339: optional = false",
          "340: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "336: name = \"langchain-standard-tests\"",
          "337: version = \"0.1.1\"",
          "",
          "[Added Lines]",
          "336: name = \"langchain-tests\"",
          "337: version = \"0.3.1\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "344: [package.dependencies]",
          "345: httpx = \"^0.27.0\"",
          "347: pytest = \">=7,<9\"",
          "348: syrupy = \"^4\"",
          "",
          "[Removed Lines]",
          "346: langchain-core = \"^0.3.0\"",
          "",
          "[Added Lines]",
          "346: langchain-core = \"^0.3.15\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "983: [metadata]",
          "984: lock-version = \"2.0\"",
          "985: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "986: content-hash = \"ca6805780e6e50b39b5cf93779982517d384e6acb5445d75008b5fc4f469a9fc\"",
          "",
          "[Added Lines]",
          "986: content-hash = \"a5c369fbd4c7e6fea27200bec1537de641ac19b5ede12eaefec73d3461a440c7\"",
          "",
          "---------------"
        ],
        "libs/partners/openai/poetry.lock||libs/partners/openai/poetry.lock": [
          "File: libs/partners/openai/poetry.lock -> libs/partners/openai/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "494: [[package]]",
          "495: name = \"langchain-core\"",
          "497: description = \"Building applications with LLMs through composability\"",
          "498: optional = false",
          "499: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "496: version = \"0.3.17\"",
          "",
          "[Added Lines]",
          "496: version = \"0.3.19\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517: url = \"../../core\"",
          "519: [[package]]",
          "522: description = \"Standard tests for LangChain implementations\"",
          "523: optional = false",
          "524: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "520: name = \"langchain-standard-tests\"",
          "521: version = \"0.3.0\"",
          "",
          "[Added Lines]",
          "520: name = \"langchain-tests\"",
          "521: version = \"0.3.1\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1562: [metadata]",
          "1563: lock-version = \"2.0\"",
          "1564: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1565: content-hash = \"193b209048042991c70a06289c41e67d44cc104c970a70857beacc8a51f0459b\"",
          "",
          "[Added Lines]",
          "1565: content-hash = \"79ff1e8bd2a97aefd574186299e51f9e2487ee51bcde1e199d6e786c3fdde8ea\"",
          "",
          "---------------"
        ],
        "libs/partners/xai/poetry.lock||libs/partners/xai/poetry.lock": [
          "File: libs/partners/xai/poetry.lock -> libs/partners/xai/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "721: [[package]]",
          "722: name = \"langchain-core\"",
          "724: description = \"Building applications with LLMs through composability\"",
          "725: optional = false",
          "726: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "723: version = \"0.3.18\"",
          "",
          "[Added Lines]",
          "723: version = \"0.3.19\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "762: url = \"../openai\"",
          "764: [[package]]",
          "767: description = \"Standard tests for LangChain implementations\"",
          "768: optional = false",
          "769: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "765: name = \"langchain-standard-tests\"",
          "766: version = \"0.3.0\"",
          "",
          "[Added Lines]",
          "765: name = \"langchain-tests\"",
          "766: version = \"0.3.1\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2071: [metadata]",
          "2072: lock-version = \"2.0\"",
          "2073: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "2074: content-hash = \"1f77714ec9420ce148ab90de835585ddf87ce68f2d28240f63fcea47c9bccf6c\"",
          "",
          "[Added Lines]",
          "2074: content-hash = \"df184c08b8561a31c587e9fd643cd80fa9b9fee422dfe73e0243bafe6e0e6964\"",
          "",
          "---------------"
        ],
        "libs/standard-tests/langchain_standard_tests/unit_tests/chat_models.py||libs/standard-tests/langchain_standard_tests/unit_tests/chat_models.py": [
          "File: libs/standard-tests/langchain_standard_tests/unit_tests/chat_models.py -> libs/standard-tests/langchain_standard_tests/unit_tests/chat_models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: class ChatModelTests(BaseStandardTests):",
          "80:     @property",
          "81:     @abstractmethod",
          "85:     @property",
          "86:     def chat_model_params(self) -> dict:",
          "",
          "[Removed Lines]",
          "82:     def chat_model_class(self) -> Type[BaseChatModel]:",
          "83:         ...",
          "",
          "[Added Lines]",
          "82:     def chat_model_class(self) -> Type[BaseChatModel]: ...",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "245:         ls_params = model._get_ls_params()",
          "246:         try:",
          "248:         except ValidationErrorV1 as e:",
          "249:             pytest.fail(f\"Validation error: {e}\")",
          "251:         # Test optional params",
          "252:         model = self.chat_model_class(",
          "254:         )",
          "255:         ls_params = model._get_ls_params()",
          "256:         try:",
          "258:         except ValidationErrorV1 as e:",
          "259:             pytest.fail(f\"Validation error: {e}\")",
          "",
          "[Removed Lines]",
          "247:             ExpectedParams(**ls_params)",
          "253:             max_tokens=10, stop=[\"test\"], **self.chat_model_params",
          "257:             ExpectedParams(**ls_params)",
          "",
          "[Added Lines]",
          "246:             ExpectedParams(**ls_params)  # type: ignore",
          "252:             max_tokens=10,",
          "253:             stop=[\"test\"],",
          "258:             ExpectedParams(**ls_params)  # type: ignore",
          "",
          "---------------"
        ],
        "libs/standard-tests/langchain_standard_tests/unit_tests/embeddings.py||libs/standard-tests/langchain_standard_tests/unit_tests/embeddings.py": [
          "File: libs/standard-tests/langchain_standard_tests/unit_tests/embeddings.py -> libs/standard-tests/langchain_standard_tests/unit_tests/embeddings.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: class EmbeddingsTests(BaseStandardTests):",
          "14:     @property",
          "15:     @abstractmethod",
          "19:     @property",
          "20:     def embedding_model_params(self) -> dict:",
          "",
          "[Removed Lines]",
          "16:     def embeddings_class(self) -> Type[Embeddings]:",
          "17:         ...",
          "",
          "[Added Lines]",
          "16:     def embeddings_class(self) -> Type[Embeddings]: ...",
          "",
          "---------------"
        ],
        "libs/standard-tests/langchain_standard_tests/unit_tests/tools.py||libs/standard-tests/langchain_standard_tests/unit_tests/tools.py": [
          "File: libs/standard-tests/langchain_standard_tests/unit_tests/tools.py -> libs/standard-tests/langchain_standard_tests/unit_tests/tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: class ToolsTests(BaseStandardTests):",
          "14:     @property",
          "15:     @abstractmethod",
          "19:     @property",
          "20:     def tool_constructor_params(self) -> dict:",
          "",
          "[Removed Lines]",
          "16:     def tool_constructor(self) -> Union[Type[BaseTool], Callable]:",
          "17:         ...",
          "",
          "[Added Lines]",
          "16:     def tool_constructor(self) -> Union[Type[BaseTool], Callable]: ...",
          "",
          "---------------"
        ],
        "libs/standard-tests/poetry.lock||libs/standard-tests/poetry.lock": [
          "File: libs/standard-tests/poetry.lock -> libs/standard-tests/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "214: [[package]]",
          "215: name = \"httpcore\"",
          "217: description = \"A minimal low-level HTTP client.\"",
          "218: optional = false",
          "219: python-versions = \">=3.8\"",
          "220: files = [",
          "223: ]",
          "225: [package.dependencies]",
          "",
          "[Removed Lines]",
          "216: version = \"1.0.6\"",
          "221:     {file = \"httpcore-1.0.6-py3-none-any.whl\", hash = \"sha256:27b59625743b85577a8c0e10e55b50b5368a4f2cfe8cc7bcfa9cf00829c2682f\"},",
          "222:     {file = \"httpcore-1.0.6.tar.gz\", hash = \"sha256:73f6dbd6eb8c21bbf7ef8efad555481853f5f6acdeaff1edb0694289269ee17f\"},",
          "",
          "[Added Lines]",
          "216: version = \"1.0.7\"",
          "221:     {file = \"httpcore-1.0.7-py3-none-any.whl\", hash = \"sha256:a3fff8f43dc260d5bd363d9f9cf1830fa3a458b332856f34282de498ed420edd\"},",
          "222:     {file = \"httpcore-1.0.7.tar.gz\", hash = \"sha256:8551cb62a169ec7162ac7be8d4817d561f60e08eaa485234898414bb5a8a0b4c\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "310: [[package]]",
          "311: name = \"langchain-core\"",
          "313: description = \"Building applications with LLMs through composability\"",
          "314: optional = false",
          "315: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "312: version = \"0.3.15\"",
          "",
          "[Added Lines]",
          "312: version = \"0.3.19\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "335: [[package]]",
          "336: name = \"langsmith\"",
          "338: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "339: optional = false",
          "340: python-versions = \"<4.0,>=3.8.1\"",
          "341: files = [",
          "344: ]",
          "346: [package.dependencies]",
          "",
          "[Removed Lines]",
          "337: version = \"0.1.139\"",
          "342:     {file = \"langsmith-0.1.139-py3-none-any.whl\", hash = \"sha256:2a4a541bfbd0a9727255df28a60048c85bc8c4c6a276975923785c3fd82dc879\"},",
          "343:     {file = \"langsmith-0.1.139.tar.gz\", hash = \"sha256:2f9e4d32fef3ad7ef42c8506448cce3a31ad6b78bb4f3310db04ddaa1e9d744d\"},",
          "",
          "[Added Lines]",
          "337: version = \"0.1.143\"",
          "342:     {file = \"langsmith-0.1.143-py3-none-any.whl\", hash = \"sha256:ba0d827269e9b03a90fababe41fa3e4e3f833300b95add10184f7e67167dde6f\"},",
          "343:     {file = \"langsmith-0.1.143.tar.gz\", hash = \"sha256:4c5159e5cd84b3f8499433009e72d2076dd2daf6c044ac8a3611b30d0d0161c5\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "356: [[package]]",
          "357: name = \"mypy\"",
          "359: description = \"Optional static typing for Python\"",
          "360: optional = false",
          "362: files = [",
          "393: ]",
          "395: [package.dependencies]",
          "397: tomli = {version = \">=1.1.0\", markers = \"python_version < \\\"3.11\\\"\"}",
          "400: [package.extras]",
          "401: dmypy = [\"psutil (>=4.0)\"]",
          "402: install-types = [\"pip\"]",
          "404: reports = [\"lxml\"]",
          "406: [[package]]",
          "",
          "[Removed Lines]",
          "358: version = \"0.991\"",
          "361: python-versions = \">=3.7\"",
          "363:     {file = \"mypy-0.991-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:7d17e0a9707d0772f4a7b878f04b4fd11f6f5bcb9b3813975a9b13c9332153ab\"},",
          "364:     {file = \"mypy-0.991-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:0714258640194d75677e86c786e80ccf294972cc76885d3ebbb560f11db0003d\"},",
          "365:     {file = \"mypy-0.991-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:0c8f3be99e8a8bd403caa8c03be619544bc2c77a7093685dcf308c6b109426c6\"},",
          "366:     {file = \"mypy-0.991-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bc9ec663ed6c8f15f4ae9d3c04c989b744436c16d26580eaa760ae9dd5d662eb\"},",
          "367:     {file = \"mypy-0.991-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:4307270436fd7694b41f913eb09210faff27ea4979ecbcd849e57d2da2f65305\"},",
          "368:     {file = \"mypy-0.991-cp310-cp310-win_amd64.whl\", hash = \"sha256:901c2c269c616e6cb0998b33d4adbb4a6af0ac4ce5cd078afd7bc95830e62c1c\"},",
          "369:     {file = \"mypy-0.991-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:d13674f3fb73805ba0c45eb6c0c3053d218aa1f7abead6e446d474529aafc372\"},",
          "370:     {file = \"mypy-0.991-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:1c8cd4fb70e8584ca1ed5805cbc7c017a3d1a29fb450621089ffed3e99d1857f\"},",
          "371:     {file = \"mypy-0.991-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:209ee89fbb0deed518605edddd234af80506aec932ad28d73c08f1400ef80a33\"},",
          "372:     {file = \"mypy-0.991-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:37bd02ebf9d10e05b00d71302d2c2e6ca333e6c2a8584a98c00e038db8121f05\"},",
          "373:     {file = \"mypy-0.991-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:26efb2fcc6b67e4d5a55561f39176821d2adf88f2745ddc72751b7890f3194ad\"},",
          "374:     {file = \"mypy-0.991-cp311-cp311-win_amd64.whl\", hash = \"sha256:3a700330b567114b673cf8ee7388e949f843b356a73b5ab22dd7cff4742a5297\"},",
          "375:     {file = \"mypy-0.991-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:1f7d1a520373e2272b10796c3ff721ea1a0712288cafaa95931e66aa15798813\"},",
          "376:     {file = \"mypy-0.991-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:641411733b127c3e0dab94c45af15fea99e4468f99ac88b39efb1ad677da5711\"},",
          "377:     {file = \"mypy-0.991-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:3d80e36b7d7a9259b740be6d8d906221789b0d836201af4234093cae89ced0cd\"},",
          "378:     {file = \"mypy-0.991-cp37-cp37m-win_amd64.whl\", hash = \"sha256:e62ebaad93be3ad1a828a11e90f0e76f15449371ffeecca4a0a0b9adc99abcef\"},",
          "379:     {file = \"mypy-0.991-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:b86ce2c1866a748c0f6faca5232059f881cda6dda2a893b9a8373353cfe3715a\"},",
          "380:     {file = \"mypy-0.991-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:ac6e503823143464538efda0e8e356d871557ef60ccd38f8824a4257acc18d93\"},",
          "381:     {file = \"mypy-0.991-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:0cca5adf694af539aeaa6ac633a7afe9bbd760df9d31be55ab780b77ab5ae8bf\"},",
          "382:     {file = \"mypy-0.991-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a12c56bf73cdab116df96e4ff39610b92a348cc99a1307e1da3c3768bbb5b135\"},",
          "383:     {file = \"mypy-0.991-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:652b651d42f155033a1967739788c436491b577b6a44e4c39fb340d0ee7f0d70\"},",
          "384:     {file = \"mypy-0.991-cp38-cp38-win_amd64.whl\", hash = \"sha256:4175593dc25d9da12f7de8de873a33f9b2b8bdb4e827a7cae952e5b1a342e243\"},",
          "385:     {file = \"mypy-0.991-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:98e781cd35c0acf33eb0295e8b9c55cdbef64fcb35f6d3aa2186f289bed6e80d\"},",
          "386:     {file = \"mypy-0.991-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:6d7464bac72a85cb3491c7e92b5b62f3dcccb8af26826257760a552a5e244aa5\"},",
          "387:     {file = \"mypy-0.991-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:c9166b3f81a10cdf9b49f2d594b21b31adadb3d5e9db9b834866c3258b695be3\"},",
          "388:     {file = \"mypy-0.991-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b8472f736a5bfb159a5e36740847808f6f5b659960115ff29c7cecec1741c648\"},",
          "389:     {file = \"mypy-0.991-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:5e80e758243b97b618cdf22004beb09e8a2de1af481382e4d84bc52152d1c476\"},",
          "390:     {file = \"mypy-0.991-cp39-cp39-win_amd64.whl\", hash = \"sha256:74e259b5c19f70d35fcc1ad3d56499065c601dfe94ff67ae48b85596b9ec1461\"},",
          "391:     {file = \"mypy-0.991-py3-none-any.whl\", hash = \"sha256:de32edc9b0a7e67c2775e574cb061a537660e51210fbf6006b0b36ea695ae9bb\"},",
          "392:     {file = \"mypy-0.991.tar.gz\", hash = \"sha256:3c0165ba8f354a6d9881809ef29f1a9318a236a6d81c690094c5df32107bde06\"},",
          "396: mypy-extensions = \">=0.4.3\"",
          "398: typing-extensions = \">=3.10\"",
          "403: python2 = [\"typed-ast (>=1.4.0,<2)\"]",
          "",
          "[Added Lines]",
          "358: version = \"1.13.0\"",
          "361: python-versions = \">=3.8\"",
          "363:     {file = \"mypy-1.13.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:6607e0f1dd1fb7f0aca14d936d13fd19eba5e17e1cd2a14f808fa5f8f6d8f60a\"},",
          "364:     {file = \"mypy-1.13.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:8a21be69bd26fa81b1f80a61ee7ab05b076c674d9b18fb56239d72e21d9f4c80\"},",
          "365:     {file = \"mypy-1.13.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:7b2353a44d2179846a096e25691d54d59904559f4232519d420d64da6828a3a7\"},",
          "366:     {file = \"mypy-1.13.0-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:0730d1c6a2739d4511dc4253f8274cdd140c55c32dfb0a4cf8b7a43f40abfa6f\"},",
          "367:     {file = \"mypy-1.13.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:c5fc54dbb712ff5e5a0fca797e6e0aa25726c7e72c6a5850cfd2adbc1eb0a372\"},",
          "368:     {file = \"mypy-1.13.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:581665e6f3a8a9078f28d5502f4c334c0c8d802ef55ea0e7276a6e409bc0d82d\"},",
          "369:     {file = \"mypy-1.13.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:3ddb5b9bf82e05cc9a627e84707b528e5c7caaa1c55c69e175abb15a761cec2d\"},",
          "370:     {file = \"mypy-1.13.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:20c7ee0bc0d5a9595c46f38beb04201f2620065a93755704e141fcac9f59db2b\"},",
          "371:     {file = \"mypy-1.13.0-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:3790ded76f0b34bc9c8ba4def8f919dd6a46db0f5a6610fb994fe8efdd447f73\"},",
          "372:     {file = \"mypy-1.13.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:51f869f4b6b538229c1d1bcc1dd7d119817206e2bc54e8e374b3dfa202defcca\"},",
          "373:     {file = \"mypy-1.13.0-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:5c7051a3461ae84dfb5dd15eff5094640c61c5f22257c8b766794e6dd85e72d5\"},",
          "374:     {file = \"mypy-1.13.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:39bb21c69a5d6342f4ce526e4584bc5c197fd20a60d14a8624d8743fffb9472e\"},",
          "375:     {file = \"mypy-1.13.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:164f28cb9d6367439031f4c81e84d3ccaa1e19232d9d05d37cb0bd880d3f93c2\"},",
          "376:     {file = \"mypy-1.13.0-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:a4c1bfcdbce96ff5d96fc9b08e3831acb30dc44ab02671eca5953eadad07d6d0\"},",
          "377:     {file = \"mypy-1.13.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:a0affb3a79a256b4183ba09811e3577c5163ed06685e4d4b46429a271ba174d2\"},",
          "378:     {file = \"mypy-1.13.0-cp313-cp313-macosx_10_13_x86_64.whl\", hash = \"sha256:a7b44178c9760ce1a43f544e595d35ed61ac2c3de306599fa59b38a6048e1aa7\"},",
          "379:     {file = \"mypy-1.13.0-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:5d5092efb8516d08440e36626f0153b5006d4088c1d663d88bf79625af3d1d62\"},",
          "380:     {file = \"mypy-1.13.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:de2904956dac40ced10931ac967ae63c5089bd498542194b436eb097a9f77bc8\"},",
          "381:     {file = \"mypy-1.13.0-cp313-cp313-musllinux_1_1_x86_64.whl\", hash = \"sha256:7bfd8836970d33c2105562650656b6846149374dc8ed77d98424b40b09340ba7\"},",
          "382:     {file = \"mypy-1.13.0-cp313-cp313-win_amd64.whl\", hash = \"sha256:9f73dba9ec77acb86457a8fc04b5239822df0c14a082564737833d2963677dbc\"},",
          "383:     {file = \"mypy-1.13.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:100fac22ce82925f676a734af0db922ecfea991e1d7ec0ceb1e115ebe501301a\"},",
          "384:     {file = \"mypy-1.13.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:7bcb0bb7f42a978bb323a7c88f1081d1b5dee77ca86f4100735a6f541299d8fb\"},",
          "385:     {file = \"mypy-1.13.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:bde31fc887c213e223bbfc34328070996061b0833b0a4cfec53745ed61f3519b\"},",
          "386:     {file = \"mypy-1.13.0-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:07de989f89786f62b937851295ed62e51774722e5444a27cecca993fc3f9cd74\"},",
          "387:     {file = \"mypy-1.13.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:4bde84334fbe19bad704b3f5b78c4abd35ff1026f8ba72b29de70dda0916beb6\"},",
          "388:     {file = \"mypy-1.13.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:0246bcb1b5de7f08f2826451abd947bf656945209b140d16ed317f65a17dc7dc\"},",
          "389:     {file = \"mypy-1.13.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:7f5b7deae912cf8b77e990b9280f170381fdfbddf61b4ef80927edd813163732\"},",
          "390:     {file = \"mypy-1.13.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl\", hash = \"sha256:7029881ec6ffb8bc233a4fa364736789582c738217b133f1b55967115288a2bc\"},",
          "391:     {file = \"mypy-1.13.0-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:3e38b980e5681f28f033f3be86b099a247b13c491f14bb8b1e1e134d23bb599d\"},",
          "392:     {file = \"mypy-1.13.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:a6789be98a2017c912ae6ccb77ea553bbaf13d27605d2ca20a76dfbced631b24\"},",
          "393:     {file = \"mypy-1.13.0-py3-none-any.whl\", hash = \"sha256:9c250883f9fd81d212e0952c92dbfcc96fc237f4b7c92f56ac81fd48460b3e5a\"},",
          "394:     {file = \"mypy-1.13.0.tar.gz\", hash = \"sha256:0291a61b6fbf3e6673e3405cfcc0e7650bebc7939659fdca2702958038bd835e\"},",
          "398: mypy-extensions = \">=1.0.0\"",
          "400: typing-extensions = \">=4.6.0\"",
          "404: faster-cache = [\"orjson\"]",
          "406: mypyc = [\"setuptools (>=50)\"]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "529: [[package]]",
          "530: name = \"packaging\"",
          "532: description = \"Core utilities for Python packages\"",
          "533: optional = false",
          "534: python-versions = \">=3.8\"",
          "535: files = [",
          "538: ]",
          "540: [[package]]",
          "",
          "[Removed Lines]",
          "531: version = \"24.1\"",
          "536:     {file = \"packaging-24.1-py3-none-any.whl\", hash = \"sha256:5b8f2217dbdbd2f7f384c41c628544e6d52f2d0f53c6d0c3ea61aa5d1d7ff124\"},",
          "537:     {file = \"packaging-24.1.tar.gz\", hash = \"sha256:026ed72c8ed3fcce5bf8950572258698927fd1dbda10a5e981cdf0ac37f4f002\"},",
          "",
          "[Added Lines]",
          "534: version = \"24.2\"",
          "539:     {file = \"packaging-24.2-py3-none-any.whl\", hash = \"sha256:09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759\"},",
          "540:     {file = \"packaging-24.2.tar.gz\", hash = \"sha256:c228a6dc5e932d346bc5739379109d49e8853dd8223571c7c5b55260edc0b97f\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "816: [[package]]",
          "817: name = \"ruff\"",
          "819: description = \"An extremely fast Python linter and code formatter, written in Rust.\"",
          "820: optional = false",
          "821: python-versions = \">=3.7\"",
          "822: files = [",
          "840: ]",
          "842: [[package]]",
          "",
          "[Removed Lines]",
          "818: version = \"0.1.15\"",
          "823:     {file = \"ruff-0.1.15-py3-none-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl\", hash = \"sha256:5fe8d54df166ecc24106db7dd6a68d44852d14eb0729ea4672bb4d96c320b7df\"},",
          "824:     {file = \"ruff-0.1.15-py3-none-macosx_10_12_x86_64.whl\", hash = \"sha256:6f0bfbb53c4b4de117ac4d6ddfd33aa5fc31beeaa21d23c45c6dd249faf9126f\"},",
          "825:     {file = \"ruff-0.1.15-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e0d432aec35bfc0d800d4f70eba26e23a352386be3a6cf157083d18f6f5881c8\"},",
          "826:     {file = \"ruff-0.1.15-py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:9405fa9ac0e97f35aaddf185a1be194a589424b8713e3b97b762336ec79ff807\"},",
          "827:     {file = \"ruff-0.1.15-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c66ec24fe36841636e814b8f90f572a8c0cb0e54d8b5c2d0e300d28a0d7bffec\"},",
          "828:     {file = \"ruff-0.1.15-py3-none-manylinux_2_17_ppc64.manylinux2014_ppc64.whl\", hash = \"sha256:6f8ad828f01e8dd32cc58bc28375150171d198491fc901f6f98d2a39ba8e3ff5\"},",
          "829:     {file = \"ruff-0.1.15-py3-none-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:86811954eec63e9ea162af0ffa9f8d09088bab51b7438e8b6488b9401863c25e\"},",
          "830:     {file = \"ruff-0.1.15-py3-none-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:fd4025ac5e87d9b80e1f300207eb2fd099ff8200fa2320d7dc066a3f4622dc6b\"},",
          "831:     {file = \"ruff-0.1.15-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b17b93c02cdb6aeb696effecea1095ac93f3884a49a554a9afa76bb125c114c1\"},",
          "832:     {file = \"ruff-0.1.15-py3-none-musllinux_1_2_aarch64.whl\", hash = \"sha256:ddb87643be40f034e97e97f5bc2ef7ce39de20e34608f3f829db727a93fb82c5\"},",
          "833:     {file = \"ruff-0.1.15-py3-none-musllinux_1_2_armv7l.whl\", hash = \"sha256:abf4822129ed3a5ce54383d5f0e964e7fef74a41e48eb1dfad404151efc130a2\"},",
          "834:     {file = \"ruff-0.1.15-py3-none-musllinux_1_2_i686.whl\", hash = \"sha256:6c629cf64bacfd136c07c78ac10a54578ec9d1bd2a9d395efbee0935868bf852\"},",
          "835:     {file = \"ruff-0.1.15-py3-none-musllinux_1_2_x86_64.whl\", hash = \"sha256:1bab866aafb53da39c2cadfb8e1c4550ac5340bb40300083eb8967ba25481447\"},",
          "836:     {file = \"ruff-0.1.15-py3-none-win32.whl\", hash = \"sha256:2417e1cb6e2068389b07e6fa74c306b2810fe3ee3476d5b8a96616633f40d14f\"},",
          "837:     {file = \"ruff-0.1.15-py3-none-win_amd64.whl\", hash = \"sha256:3837ac73d869efc4182d9036b1405ef4c73d9b1f88da2413875e34e0d6919587\"},",
          "838:     {file = \"ruff-0.1.15-py3-none-win_arm64.whl\", hash = \"sha256:9a933dfb1c14ec7a33cceb1e49ec4a16b51ce3c20fd42663198746efc0427360\"},",
          "839:     {file = \"ruff-0.1.15.tar.gz\", hash = \"sha256:f6dfa8c1b21c913c326919056c390966648b680966febcb796cc9d1aaab8564e\"},",
          "",
          "[Added Lines]",
          "821: version = \"0.7.4\"",
          "826:     {file = \"ruff-0.7.4-py3-none-linux_armv6l.whl\", hash = \"sha256:a4919925e7684a3f18e18243cd6bea7cfb8e968a6eaa8437971f681b7ec51478\"},",
          "827:     {file = \"ruff-0.7.4-py3-none-macosx_10_12_x86_64.whl\", hash = \"sha256:cfb365c135b830778dda8c04fb7d4280ed0b984e1aec27f574445231e20d6c63\"},",
          "828:     {file = \"ruff-0.7.4-py3-none-macosx_11_0_arm64.whl\", hash = \"sha256:63a569b36bc66fbadec5beaa539dd81e0527cb258b94e29e0531ce41bacc1f20\"},",
          "829:     {file = \"ruff-0.7.4-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0d06218747d361d06fd2fdac734e7fa92df36df93035db3dc2ad7aa9852cb109\"},",
          "830:     {file = \"ruff-0.7.4-py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:e0cea28d0944f74ebc33e9f934238f15c758841f9f5edd180b5315c203293452\"},",
          "831:     {file = \"ruff-0.7.4-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:80094ecd4793c68b2571b128f91754d60f692d64bc0d7272ec9197fdd09bf9ea\"},",
          "832:     {file = \"ruff-0.7.4-py3-none-manylinux_2_17_ppc64.manylinux2014_ppc64.whl\", hash = \"sha256:997512325c6620d1c4c2b15db49ef59543ef9cd0f4aa8065ec2ae5103cedc7e7\"},",
          "833:     {file = \"ruff-0.7.4-py3-none-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:00b4cf3a6b5fad6d1a66e7574d78956bbd09abfd6c8a997798f01f5da3d46a05\"},",
          "834:     {file = \"ruff-0.7.4-py3-none-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:7dbdc7d8274e1422722933d1edddfdc65b4336abf0b16dfcb9dedd6e6a517d06\"},",
          "835:     {file = \"ruff-0.7.4-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0e92dfb5f00eaedb1501b2f906ccabfd67b2355bdf117fea9719fc99ac2145bc\"},",
          "836:     {file = \"ruff-0.7.4-py3-none-musllinux_1_2_aarch64.whl\", hash = \"sha256:3bd726099f277d735dc38900b6a8d6cf070f80828877941983a57bca1cd92172\"},",
          "837:     {file = \"ruff-0.7.4-py3-none-musllinux_1_2_armv7l.whl\", hash = \"sha256:2e32829c429dd081ee5ba39aef436603e5b22335c3d3fff013cd585806a6486a\"},",
          "838:     {file = \"ruff-0.7.4-py3-none-musllinux_1_2_i686.whl\", hash = \"sha256:662a63b4971807623f6f90c1fb664613f67cc182dc4d991471c23c541fee62dd\"},",
          "839:     {file = \"ruff-0.7.4-py3-none-musllinux_1_2_x86_64.whl\", hash = \"sha256:876f5e09eaae3eb76814c1d3b68879891d6fde4824c015d48e7a7da4cf066a3a\"},",
          "840:     {file = \"ruff-0.7.4-py3-none-win32.whl\", hash = \"sha256:75c53f54904be42dd52a548728a5b572344b50d9b2873d13a3f8c5e3b91f5cac\"},",
          "841:     {file = \"ruff-0.7.4-py3-none-win_amd64.whl\", hash = \"sha256:745775c7b39f914238ed1f1b0bebed0b9155a17cd8bc0b08d3c87e4703b990d6\"},",
          "842:     {file = \"ruff-0.7.4-py3-none-win_arm64.whl\", hash = \"sha256:11bff065102c3ae9d3ea4dc9ecdfe5a5171349cdd0787c1fc64761212fc9cf1f\"},",
          "843:     {file = \"ruff-0.7.4.tar.gz\", hash = \"sha256:cd12e35031f5af6b9b93715d8c4f40360070b2041f81273d0527683d5708fce2\"},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "882: [[package]]",
          "883: name = \"tomli\"",
          "885: description = \"A lil' TOML parser\"",
          "886: optional = false",
          "887: python-versions = \">=3.8\"",
          "888: files = [",
          "891: ]",
          "893: [[package]]",
          "",
          "[Removed Lines]",
          "884: version = \"2.0.2\"",
          "889:     {file = \"tomli-2.0.2-py3-none-any.whl\", hash = \"sha256:2ebe24485c53d303f690b0ec092806a085f07af5a5aa1464f3931eec36caaa38\"},",
          "890:     {file = \"tomli-2.0.2.tar.gz\", hash = \"sha256:d46d457a85337051c36524bc5349dd91b1877838e2979ac5ced3e710ed8a60ed\"},",
          "",
          "[Added Lines]",
          "888: version = \"2.1.0\"",
          "893:     {file = \"tomli-2.1.0-py3-none-any.whl\", hash = \"sha256:a5c57c3d1c56f5ccdf89f6523458f60ef716e210fc47c4cfb188c5ba473e0391\"},",
          "894:     {file = \"tomli-2.1.0.tar.gz\", hash = \"sha256:3f646cae2aec94e17d04973e4249548320197cfabdf130015d023de4b74d8ab8\"},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "921: [metadata]",
          "922: lock-version = \"2.0\"",
          "923: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "924: content-hash = \"4f6715617fbad64e03a1675f2edb9f77912dc156a79c8cef58eb145392efe21a\"",
          "",
          "[Added Lines]",
          "928: content-hash = \"9fa695cd9ce51479cc586c89b14577cf53a166bf74b590cee6b2d8c30e3663a9\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7264fb254ca1100afd6bfd2dfb83027159379643",
      "candidate_info": {
        "commit_hash": "7264fb254ca1100afd6bfd2dfb83027159379643",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/7264fb254ca1100afd6bfd2dfb83027159379643",
        "files": [
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml",
          "libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr"
        ],
        "message": "core: release 0.3.10 (#27209)",
        "before_after_code_files": [
          "libs/core/poetry.lock||libs/core/poetry.lock",
          "libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr||libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.6.1 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "903: [[package]]",
          "904: name = \"jsonschema-specifications\"",
          "906: description = \"The JSON Schema meta-schemas and vocabularies, exposed as a Registry\"",
          "907: optional = false",
          "909: files = [",
          "912: ]",
          "914: [package.dependencies]",
          "",
          "[Removed Lines]",
          "905: version = \"2023.12.1\"",
          "908: python-versions = \">=3.8\"",
          "910:     {file = \"jsonschema_specifications-2023.12.1-py3-none-any.whl\", hash = \"sha256:87e4fdf3a94858b8a2ba2778d9ba57d8a9cafca7c7489c46ba0d30a8bc6a9c3c\"},",
          "911:     {file = \"jsonschema_specifications-2023.12.1.tar.gz\", hash = \"sha256:48a76787b3e70f5ed53f1160d2b81f586e4ca6d1548c5de7085d1682674764cc\"},",
          "",
          "[Added Lines]",
          "905: version = \"2024.10.1\"",
          "908: python-versions = \">=3.9\"",
          "910:     {file = \"jsonschema_specifications-2024.10.1-py3-none-any.whl\", hash = \"sha256:a09a0680616357d9a0ecf05c12ad234479f549239d0f5b55f3deea67475da9bf\"},",
          "911:     {file = \"jsonschema_specifications-2024.10.1.tar.gz\", hash = \"sha256:0f38b83639958ce1152d02a7f062902c41c8fd20d558b0c34344292d417ae272\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1216: [[package]]",
          "1217: name = \"langsmith\"",
          "1219: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "1220: optional = false",
          "1221: python-versions = \"<4.0,>=3.8.1\"",
          "1222: files = [",
          "1225: ]",
          "1227: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1218: version = \"0.1.129\"",
          "1223:     {file = \"langsmith-0.1.129-py3-none-any.whl\", hash = \"sha256:31393fbbb17d6be5b99b9b22d530450094fab23c6c37281a6a6efb2143d05347\"},",
          "1224:     {file = \"langsmith-0.1.129.tar.gz\", hash = \"sha256:6c3ba66471bef41b9f87da247cc0b493268b3f54656f73648a256a205261b6a0\"},",
          "",
          "[Added Lines]",
          "1218: version = \"0.1.132\"",
          "1223:     {file = \"langsmith-0.1.132-py3-none-any.whl\", hash = \"sha256:2320894203675c1c292b818cbecf68b69e47a9f7814d4e950237d1faaafd5dee\"},",
          "1224:     {file = \"langsmith-0.1.132.tar.gz\", hash = \"sha256:007b8fac469138abdba89db931900a26c5d316640e27ff4660d28c92a766aae1\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1232:     {version = \">=2.7.4,<3.0.0\", markers = \"python_full_version >= \\\"3.12.4\\\"\"},",
          "1233: ]",
          "1234: requests = \">=2,<3\"",
          "1236: [[package]]",
          "1237: name = \"markupsafe\"",
          "1239: description = \"Safely add untrusted strings to HTML/XML markup.\"",
          "1240: optional = false",
          "1242: files = [",
          "1303: ]",
          "1305: [[package]]",
          "",
          "[Removed Lines]",
          "1238: version = \"2.1.5\"",
          "1241: python-versions = \">=3.7\"",
          "1243:     {file = \"MarkupSafe-2.1.5-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:a17a92de5231666cfbe003f0e4b9b3a7ae3afb1ec2845aadc2bacc93ff85febc\"},",
          "1244:     {file = \"MarkupSafe-2.1.5-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:72b6be590cc35924b02c78ef34b467da4ba07e4e0f0454a2c5907f473fc50ce5\"},",
          "1245:     {file = \"MarkupSafe-2.1.5-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e61659ba32cf2cf1481e575d0462554625196a1f2fc06a1c777d3f48e8865d46\"},",
          "1246:     {file = \"MarkupSafe-2.1.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:2174c595a0d73a3080ca3257b40096db99799265e1c27cc5a610743acd86d62f\"},",
          "1247:     {file = \"MarkupSafe-2.1.5-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ae2ad8ae6ebee9d2d94b17fb62763125f3f374c25618198f40cbb8b525411900\"},",
          "1248:     {file = \"MarkupSafe-2.1.5-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:075202fa5b72c86ad32dc7d0b56024ebdbcf2048c0ba09f1cde31bfdd57bcfff\"},",
          "1249:     {file = \"MarkupSafe-2.1.5-cp310-cp310-musllinux_1_1_i686.whl\", hash = \"sha256:598e3276b64aff0e7b3451b72e94fa3c238d452e7ddcd893c3ab324717456bad\"},",
          "1250:     {file = \"MarkupSafe-2.1.5-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:fce659a462a1be54d2ffcacea5e3ba2d74daa74f30f5f143fe0c58636e355fdd\"},",
          "1251:     {file = \"MarkupSafe-2.1.5-cp310-cp310-win32.whl\", hash = \"sha256:d9fad5155d72433c921b782e58892377c44bd6252b5af2f67f16b194987338a4\"},",
          "1252:     {file = \"MarkupSafe-2.1.5-cp310-cp310-win_amd64.whl\", hash = \"sha256:bf50cd79a75d181c9181df03572cdce0fbb75cc353bc350712073108cba98de5\"},",
          "1253:     {file = \"MarkupSafe-2.1.5-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:629ddd2ca402ae6dbedfceeba9c46d5f7b2a61d9749597d4307f943ef198fc1f\"},",
          "1254:     {file = \"MarkupSafe-2.1.5-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:5b7b716f97b52c5a14bffdf688f971b2d5ef4029127f1ad7a513973cfd818df2\"},",
          "1255:     {file = \"MarkupSafe-2.1.5-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6ec585f69cec0aa07d945b20805be741395e28ac1627333b1c5b0105962ffced\"},",
          "1256:     {file = \"MarkupSafe-2.1.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b91c037585eba9095565a3556f611e3cbfaa42ca1e865f7b8015fe5c7336d5a5\"},",
          "1257:     {file = \"MarkupSafe-2.1.5-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:7502934a33b54030eaf1194c21c692a534196063db72176b0c4028e140f8f32c\"},",
          "1258:     {file = \"MarkupSafe-2.1.5-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:0e397ac966fdf721b2c528cf028494e86172b4feba51d65f81ffd65c63798f3f\"},",
          "1259:     {file = \"MarkupSafe-2.1.5-cp311-cp311-musllinux_1_1_i686.whl\", hash = \"sha256:c061bb86a71b42465156a3ee7bd58c8c2ceacdbeb95d05a99893e08b8467359a\"},",
          "1260:     {file = \"MarkupSafe-2.1.5-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:3a57fdd7ce31c7ff06cdfbf31dafa96cc533c21e443d57f5b1ecc6cdc668ec7f\"},",
          "1261:     {file = \"MarkupSafe-2.1.5-cp311-cp311-win32.whl\", hash = \"sha256:397081c1a0bfb5124355710fe79478cdbeb39626492b15d399526ae53422b906\"},",
          "1262:     {file = \"MarkupSafe-2.1.5-cp311-cp311-win_amd64.whl\", hash = \"sha256:2b7c57a4dfc4f16f7142221afe5ba4e093e09e728ca65c51f5620c9aaeb9a617\"},",
          "1263:     {file = \"MarkupSafe-2.1.5-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:8dec4936e9c3100156f8a2dc89c4b88d5c435175ff03413b443469c7c8c5f4d1\"},",
          "1264:     {file = \"MarkupSafe-2.1.5-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:3c6b973f22eb18a789b1460b4b91bf04ae3f0c4234a0a6aa6b0a92f6f7b951d4\"},",
          "1265:     {file = \"MarkupSafe-2.1.5-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ac07bad82163452a6884fe8fa0963fb98c2346ba78d779ec06bd7a6262132aee\"},",
          "1266:     {file = \"MarkupSafe-2.1.5-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f5dfb42c4604dddc8e4305050aa6deb084540643ed5804d7455b5df8fe16f5e5\"},",
          "1267:     {file = \"MarkupSafe-2.1.5-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ea3d8a3d18833cf4304cd2fc9cbb1efe188ca9b5efef2bdac7adc20594a0e46b\"},",
          "1268:     {file = \"MarkupSafe-2.1.5-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:d050b3361367a06d752db6ead6e7edeb0009be66bc3bae0ee9d97fb326badc2a\"},",
          "1269:     {file = \"MarkupSafe-2.1.5-cp312-cp312-musllinux_1_1_i686.whl\", hash = \"sha256:bec0a414d016ac1a18862a519e54b2fd0fc8bbfd6890376898a6c0891dd82e9f\"},",
          "1270:     {file = \"MarkupSafe-2.1.5-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:58c98fee265677f63a4385256a6d7683ab1832f3ddd1e66fe948d5880c21a169\"},",
          "1271:     {file = \"MarkupSafe-2.1.5-cp312-cp312-win32.whl\", hash = \"sha256:8590b4ae07a35970728874632fed7bd57b26b0102df2d2b233b6d9d82f6c62ad\"},",
          "1272:     {file = \"MarkupSafe-2.1.5-cp312-cp312-win_amd64.whl\", hash = \"sha256:823b65d8706e32ad2df51ed89496147a42a2a6e01c13cfb6ffb8b1e92bc910bb\"},",
          "1273:     {file = \"MarkupSafe-2.1.5-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:c8b29db45f8fe46ad280a7294f5c3ec36dbac9491f2d1c17345be8e69cc5928f\"},",
          "1274:     {file = \"MarkupSafe-2.1.5-cp37-cp37m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ec6a563cff360b50eed26f13adc43e61bc0c04d94b8be985e6fb24b81f6dcfdf\"},",
          "1275:     {file = \"MarkupSafe-2.1.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a549b9c31bec33820e885335b451286e2969a2d9e24879f83fe904a5ce59d70a\"},",
          "1276:     {file = \"MarkupSafe-2.1.5-cp37-cp37m-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4f11aa001c540f62c6166c7726f71f7573b52c68c31f014c25cc7901deea0b52\"},",
          "1277:     {file = \"MarkupSafe-2.1.5-cp37-cp37m-musllinux_1_1_aarch64.whl\", hash = \"sha256:7b2e5a267c855eea6b4283940daa6e88a285f5f2a67f2220203786dfa59b37e9\"},",
          "1278:     {file = \"MarkupSafe-2.1.5-cp37-cp37m-musllinux_1_1_i686.whl\", hash = \"sha256:2d2d793e36e230fd32babe143b04cec8a8b3eb8a3122d2aceb4a371e6b09b8df\"},",
          "1279:     {file = \"MarkupSafe-2.1.5-cp37-cp37m-musllinux_1_1_x86_64.whl\", hash = \"sha256:ce409136744f6521e39fd8e2a24c53fa18ad67aa5bc7c2cf83645cce5b5c4e50\"},",
          "1280:     {file = \"MarkupSafe-2.1.5-cp37-cp37m-win32.whl\", hash = \"sha256:4096e9de5c6fdf43fb4f04c26fb114f61ef0bf2e5604b6ee3019d51b69e8c371\"},",
          "1281:     {file = \"MarkupSafe-2.1.5-cp37-cp37m-win_amd64.whl\", hash = \"sha256:4275d846e41ecefa46e2015117a9f491e57a71ddd59bbead77e904dc02b1bed2\"},",
          "1282:     {file = \"MarkupSafe-2.1.5-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:656f7526c69fac7f600bd1f400991cc282b417d17539a1b228617081106feb4a\"},",
          "1283:     {file = \"MarkupSafe-2.1.5-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:97cafb1f3cbcd3fd2b6fbfb99ae11cdb14deea0736fc2b0952ee177f2b813a46\"},",
          "1284:     {file = \"MarkupSafe-2.1.5-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1f3fbcb7ef1f16e48246f704ab79d79da8a46891e2da03f8783a5b6fa41a9532\"},",
          "1285:     {file = \"MarkupSafe-2.1.5-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:fa9db3f79de01457b03d4f01b34cf91bc0048eb2c3846ff26f66687c2f6d16ab\"},",
          "1286:     {file = \"MarkupSafe-2.1.5-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:ffee1f21e5ef0d712f9033568f8344d5da8cc2869dbd08d87c84656e6a2d2f68\"},",
          "1287:     {file = \"MarkupSafe-2.1.5-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:5dedb4db619ba5a2787a94d877bc8ffc0566f92a01c0ef214865e54ecc9ee5e0\"},",
          "1288:     {file = \"MarkupSafe-2.1.5-cp38-cp38-musllinux_1_1_i686.whl\", hash = \"sha256:30b600cf0a7ac9234b2638fbc0fb6158ba5bdcdf46aeb631ead21248b9affbc4\"},",
          "1289:     {file = \"MarkupSafe-2.1.5-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:8dd717634f5a044f860435c1d8c16a270ddf0ef8588d4887037c5028b859b0c3\"},",
          "1290:     {file = \"MarkupSafe-2.1.5-cp38-cp38-win32.whl\", hash = \"sha256:daa4ee5a243f0f20d528d939d06670a298dd39b1ad5f8a72a4275124a7819eff\"},",
          "1291:     {file = \"MarkupSafe-2.1.5-cp38-cp38-win_amd64.whl\", hash = \"sha256:619bc166c4f2de5caa5a633b8b7326fbe98e0ccbfacabd87268a2b15ff73a029\"},",
          "1292:     {file = \"MarkupSafe-2.1.5-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:7a68b554d356a91cce1236aa7682dc01df0edba8d043fd1ce607c49dd3c1edcf\"},",
          "1293:     {file = \"MarkupSafe-2.1.5-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:db0b55e0f3cc0be60c1f19efdde9a637c32740486004f20d1cff53c3c0ece4d2\"},",
          "1294:     {file = \"MarkupSafe-2.1.5-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3e53af139f8579a6d5f7b76549125f0d94d7e630761a2111bc431fd820e163b8\"},",
          "1295:     {file = \"MarkupSafe-2.1.5-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:17b950fccb810b3293638215058e432159d2b71005c74371d784862b7e4683f3\"},",
          "1296:     {file = \"MarkupSafe-2.1.5-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:4c31f53cdae6ecfa91a77820e8b151dba54ab528ba65dfd235c80b086d68a465\"},",
          "1297:     {file = \"MarkupSafe-2.1.5-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:bff1b4290a66b490a2f4719358c0cdcd9bafb6b8f061e45c7a2460866bf50c2e\"},",
          "1298:     {file = \"MarkupSafe-2.1.5-cp39-cp39-musllinux_1_1_i686.whl\", hash = \"sha256:bc1667f8b83f48511b94671e0e441401371dfd0f0a795c7daa4a3cd1dde55bea\"},",
          "1299:     {file = \"MarkupSafe-2.1.5-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:5049256f536511ee3f7e1b3f87d1d1209d327e818e6ae1365e8653d7e3abb6a6\"},",
          "1300:     {file = \"MarkupSafe-2.1.5-cp39-cp39-win32.whl\", hash = \"sha256:00e046b6dd71aa03a41079792f8473dc494d564611a8f89bbbd7cb93295ebdcf\"},",
          "1301:     {file = \"MarkupSafe-2.1.5-cp39-cp39-win_amd64.whl\", hash = \"sha256:fa173ec60341d6bb97a89f5ea19c85c5643c1e7dedebc22f5181eb73573142c5\"},",
          "1302:     {file = \"MarkupSafe-2.1.5.tar.gz\", hash = \"sha256:d283d37a890ba4c1ae73ffadf8046435c76e7bc2247bbb63c00bd1a709c6544b\"},",
          "",
          "[Added Lines]",
          "1235: requests-toolbelt = \">=1.0.0,<2.0.0\"",
          "1239: version = \"3.0.1\"",
          "1242: python-versions = \">=3.9\"",
          "1244:     {file = \"MarkupSafe-3.0.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:db842712984e91707437461930e6011e60b39136c7331e971952bb30465bc1a1\"},",
          "1245:     {file = \"MarkupSafe-3.0.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:3ffb4a8e7d46ed96ae48805746755fadd0909fea2306f93d5d8233ba23dda12a\"},",
          "1246:     {file = \"MarkupSafe-3.0.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:67c519635a4f64e495c50e3107d9b4075aec33634272b5db1cde839e07367589\"},",
          "1247:     {file = \"MarkupSafe-3.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:48488d999ed50ba8d38c581d67e496f955821dc183883550a6fbc7f1aefdc170\"},",
          "1248:     {file = \"MarkupSafe-3.0.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f31ae06f1328595d762c9a2bf29dafd8621c7d3adc130cbb46278079758779ca\"},",
          "1249:     {file = \"MarkupSafe-3.0.1-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:80fcbf3add8790caddfab6764bde258b5d09aefbe9169c183f88a7410f0f6dea\"},",
          "1250:     {file = \"MarkupSafe-3.0.1-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:3341c043c37d78cc5ae6e3e305e988532b072329639007fd408a476642a89fd6\"},",
          "1251:     {file = \"MarkupSafe-3.0.1-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:cb53e2a99df28eee3b5f4fea166020d3ef9116fdc5764bc5117486e6d1211b25\"},",
          "1252:     {file = \"MarkupSafe-3.0.1-cp310-cp310-win32.whl\", hash = \"sha256:db15ce28e1e127a0013dfb8ac243a8e392db8c61eae113337536edb28bdc1f97\"},",
          "1253:     {file = \"MarkupSafe-3.0.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:4ffaaac913c3f7345579db4f33b0020db693f302ca5137f106060316761beea9\"},",
          "1254:     {file = \"MarkupSafe-3.0.1-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:26627785a54a947f6d7336ce5963569b5d75614619e75193bdb4e06e21d447ad\"},",
          "1255:     {file = \"MarkupSafe-3.0.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:b954093679d5750495725ea6f88409946d69cfb25ea7b4c846eef5044194f583\"},",
          "1256:     {file = \"MarkupSafe-3.0.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:973a371a55ce9ed333a3a0f8e0bcfae9e0d637711534bcb11e130af2ab9334e7\"},",
          "1257:     {file = \"MarkupSafe-3.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:244dbe463d5fb6d7ce161301a03a6fe744dac9072328ba9fc82289238582697b\"},",
          "1258:     {file = \"MarkupSafe-3.0.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d98e66a24497637dd31ccab090b34392dddb1f2f811c4b4cd80c230205c074a3\"},",
          "1259:     {file = \"MarkupSafe-3.0.1-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:ad91738f14eb8da0ff82f2acd0098b6257621410dcbd4df20aaa5b4233d75a50\"},",
          "1260:     {file = \"MarkupSafe-3.0.1-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:7044312a928a66a4c2a22644147bc61a199c1709712069a344a3fb5cfcf16915\"},",
          "1261:     {file = \"MarkupSafe-3.0.1-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:a4792d3b3a6dfafefdf8e937f14906a51bd27025a36f4b188728a73382231d91\"},",
          "1262:     {file = \"MarkupSafe-3.0.1-cp311-cp311-win32.whl\", hash = \"sha256:fa7d686ed9883f3d664d39d5a8e74d3c5f63e603c2e3ff0abcba23eac6542635\"},",
          "1263:     {file = \"MarkupSafe-3.0.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:9ba25a71ebf05b9bb0e2ae99f8bc08a07ee8e98c612175087112656ca0f5c8bf\"},",
          "1264:     {file = \"MarkupSafe-3.0.1-cp312-cp312-macosx_10_13_universal2.whl\", hash = \"sha256:8ae369e84466aa70f3154ee23c1451fda10a8ee1b63923ce76667e3077f2b0c4\"},",
          "1265:     {file = \"MarkupSafe-3.0.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:40f1e10d51c92859765522cbd79c5c8989f40f0419614bcdc5015e7b6bf97fc5\"},",
          "1266:     {file = \"MarkupSafe-3.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5a4cb365cb49b750bdb60b846b0c0bc49ed62e59a76635095a179d440540c346\"},",
          "1267:     {file = \"MarkupSafe-3.0.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ee3941769bd2522fe39222206f6dd97ae83c442a94c90f2b7a25d847d40f4729\"},",
          "1268:     {file = \"MarkupSafe-3.0.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:62fada2c942702ef8952754abfc1a9f7658a4d5460fabe95ac7ec2cbe0d02abc\"},",
          "1269:     {file = \"MarkupSafe-3.0.1-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:4c2d64fdba74ad16138300815cfdc6ab2f4647e23ced81f59e940d7d4a1469d9\"},",
          "1270:     {file = \"MarkupSafe-3.0.1-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:fb532dd9900381d2e8f48172ddc5a59db4c445a11b9fab40b3b786da40d3b56b\"},",
          "1271:     {file = \"MarkupSafe-3.0.1-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:0f84af7e813784feb4d5e4ff7db633aba6c8ca64a833f61d8e4eade234ef0c38\"},",
          "1272:     {file = \"MarkupSafe-3.0.1-cp312-cp312-win32.whl\", hash = \"sha256:cbf445eb5628981a80f54087f9acdbf84f9b7d862756110d172993b9a5ae81aa\"},",
          "1273:     {file = \"MarkupSafe-3.0.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:a10860e00ded1dd0a65b83e717af28845bb7bd16d8ace40fe5531491de76b79f\"},",
          "1274:     {file = \"MarkupSafe-3.0.1-cp313-cp313-macosx_10_13_universal2.whl\", hash = \"sha256:e81c52638315ff4ac1b533d427f50bc0afc746deb949210bc85f05d4f15fd772\"},",
          "1275:     {file = \"MarkupSafe-3.0.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:312387403cd40699ab91d50735ea7a507b788091c416dd007eac54434aee51da\"},",
          "1276:     {file = \"MarkupSafe-3.0.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:2ae99f31f47d849758a687102afdd05bd3d3ff7dbab0a8f1587981b58a76152a\"},",
          "1277:     {file = \"MarkupSafe-3.0.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c97ff7fedf56d86bae92fa0a646ce1a0ec7509a7578e1ed238731ba13aabcd1c\"},",
          "1278:     {file = \"MarkupSafe-3.0.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a7420ceda262dbb4b8d839a4ec63d61c261e4e77677ed7c66c99f4e7cb5030dd\"},",
          "1279:     {file = \"MarkupSafe-3.0.1-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:45d42d132cff577c92bfba536aefcfea7e26efb975bd455db4e6602f5c9f45e7\"},",
          "1280:     {file = \"MarkupSafe-3.0.1-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:4c8817557d0de9349109acb38b9dd570b03cc5014e8aabf1cbddc6e81005becd\"},",
          "1281:     {file = \"MarkupSafe-3.0.1-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:6a54c43d3ec4cf2a39f4387ad044221c66a376e58c0d0e971d47c475ba79c6b5\"},",
          "1282:     {file = \"MarkupSafe-3.0.1-cp313-cp313-win32.whl\", hash = \"sha256:c91b394f7601438ff79a4b93d16be92f216adb57d813a78be4446fe0f6bc2d8c\"},",
          "1283:     {file = \"MarkupSafe-3.0.1-cp313-cp313-win_amd64.whl\", hash = \"sha256:fe32482b37b4b00c7a52a07211b479653b7fe4f22b2e481b9a9b099d8a430f2f\"},",
          "1284:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-macosx_10_13_universal2.whl\", hash = \"sha256:17b2aea42a7280db02ac644db1d634ad47dcc96faf38ab304fe26ba2680d359a\"},",
          "1285:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-macosx_11_0_arm64.whl\", hash = \"sha256:852dc840f6d7c985603e60b5deaae1d89c56cb038b577f6b5b8c808c97580f1d\"},",
          "1286:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0778de17cff1acaeccc3ff30cd99a3fd5c50fc58ad3d6c0e0c4c58092b859396\"},",
          "1287:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:800100d45176652ded796134277ecb13640c1a537cad3b8b53da45aa96330453\"},",
          "1288:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d06b24c686a34c86c8c1fba923181eae6b10565e4d80bdd7bc1c8e2f11247aa4\"},",
          "1289:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-musllinux_1_2_aarch64.whl\", hash = \"sha256:33d1c36b90e570ba7785dacd1faaf091203d9942bc036118fab8110a401eb1a8\"},",
          "1290:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-musllinux_1_2_i686.whl\", hash = \"sha256:beeebf760a9c1f4c07ef6a53465e8cfa776ea6a2021eda0d0417ec41043fe984\"},",
          "1291:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-musllinux_1_2_x86_64.whl\", hash = \"sha256:bbde71a705f8e9e4c3e9e33db69341d040c827c7afa6789b14c6e16776074f5a\"},",
          "1292:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-win32.whl\", hash = \"sha256:82b5dba6eb1bcc29cc305a18a3c5365d2af06ee71b123216416f7e20d2a84e5b\"},",
          "1293:     {file = \"MarkupSafe-3.0.1-cp313-cp313t-win_amd64.whl\", hash = \"sha256:730d86af59e0e43ce277bb83970530dd223bf7f2a838e086b50affa6ec5f9295\"},",
          "1294:     {file = \"MarkupSafe-3.0.1-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:4935dd7883f1d50e2ffecca0aa33dc1946a94c8f3fdafb8df5c330e48f71b132\"},",
          "1295:     {file = \"MarkupSafe-3.0.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:e9393357f19954248b00bed7c56f29a25c930593a77630c719653d51e7669c2a\"},",
          "1296:     {file = \"MarkupSafe-3.0.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:40621d60d0e58aa573b68ac5e2d6b20d44392878e0bfc159012a5787c4e35bc8\"},",
          "1297:     {file = \"MarkupSafe-3.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f94190df587738280d544971500b9cafc9b950d32efcb1fba9ac10d84e6aa4e6\"},",
          "1298:     {file = \"MarkupSafe-3.0.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:b6a387d61fe41cdf7ea95b38e9af11cfb1a63499af2759444b99185c4ab33f5b\"},",
          "1299:     {file = \"MarkupSafe-3.0.1-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:8ad4ad1429cd4f315f32ef263c1342166695fad76c100c5d979c45d5570ed58b\"},",
          "1300:     {file = \"MarkupSafe-3.0.1-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:e24bfe89c6ac4c31792793ad9f861b8f6dc4546ac6dc8f1c9083c7c4f2b335cd\"},",
          "1301:     {file = \"MarkupSafe-3.0.1-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:2a4b34a8d14649315c4bc26bbfa352663eb51d146e35eef231dd739d54a5430a\"},",
          "1302:     {file = \"MarkupSafe-3.0.1-cp39-cp39-win32.whl\", hash = \"sha256:242d6860f1fd9191aef5fae22b51c5c19767f93fb9ead4d21924e0bcb17619d8\"},",
          "1303:     {file = \"MarkupSafe-3.0.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:93e8248d650e7e9d49e8251f883eed60ecbc0e8ffd6349e18550925e31bd029b\"},",
          "1304:     {file = \"markupsafe-3.0.1.tar.gz\", hash = \"sha256:3e683ee4f5d0fa2dde4db77ed8dd8a876686e3fc417655c2ece9a90576905344\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2085: [[package]]",
          "2086: name = \"pywin32\"",
          "2088: description = \"Python for Window Extensions\"",
          "2089: optional = false",
          "2090: python-versions = \"*\"",
          "2091: files = [",
          "2106: ]",
          "2108: [[package]]",
          "",
          "[Removed Lines]",
          "2087: version = \"306\"",
          "2092:     {file = \"pywin32-306-cp310-cp310-win32.whl\", hash = \"sha256:06d3420a5155ba65f0b72f2699b5bacf3109f36acbe8923765c22938a69dfc8d\"},",
          "2093:     {file = \"pywin32-306-cp310-cp310-win_amd64.whl\", hash = \"sha256:84f4471dbca1887ea3803d8848a1616429ac94a4a8d05f4bc9c5dcfd42ca99c8\"},",
          "2094:     {file = \"pywin32-306-cp311-cp311-win32.whl\", hash = \"sha256:e65028133d15b64d2ed8f06dd9fbc268352478d4f9289e69c190ecd6818b6407\"},",
          "2095:     {file = \"pywin32-306-cp311-cp311-win_amd64.whl\", hash = \"sha256:a7639f51c184c0272e93f244eb24dafca9b1855707d94c192d4a0b4c01e1100e\"},",
          "2096:     {file = \"pywin32-306-cp311-cp311-win_arm64.whl\", hash = \"sha256:70dba0c913d19f942a2db25217d9a1b726c278f483a919f1abfed79c9cf64d3a\"},",
          "2097:     {file = \"pywin32-306-cp312-cp312-win32.whl\", hash = \"sha256:383229d515657f4e3ed1343da8be101000562bf514591ff383ae940cad65458b\"},",
          "2098:     {file = \"pywin32-306-cp312-cp312-win_amd64.whl\", hash = \"sha256:37257794c1ad39ee9be652da0462dc2e394c8159dfd913a8a4e8eb6fd346da0e\"},",
          "2099:     {file = \"pywin32-306-cp312-cp312-win_arm64.whl\", hash = \"sha256:5821ec52f6d321aa59e2db7e0a35b997de60c201943557d108af9d4ae1ec7040\"},",
          "2100:     {file = \"pywin32-306-cp37-cp37m-win32.whl\", hash = \"sha256:1c73ea9a0d2283d889001998059f5eaaba3b6238f767c9cf2833b13e6a685f65\"},",
          "2101:     {file = \"pywin32-306-cp37-cp37m-win_amd64.whl\", hash = \"sha256:72c5f621542d7bdd4fdb716227be0dd3f8565c11b280be6315b06ace35487d36\"},",
          "2102:     {file = \"pywin32-306-cp38-cp38-win32.whl\", hash = \"sha256:e4c092e2589b5cf0d365849e73e02c391c1349958c5ac3e9d5ccb9a28e017b3a\"},",
          "2103:     {file = \"pywin32-306-cp38-cp38-win_amd64.whl\", hash = \"sha256:e8ac1ae3601bee6ca9f7cb4b5363bf1c0badb935ef243c4733ff9a393b1690c0\"},",
          "2104:     {file = \"pywin32-306-cp39-cp39-win32.whl\", hash = \"sha256:e25fd5b485b55ac9c057f67d94bc203f3f6595078d1fb3b458c9c28b7153a802\"},",
          "2105:     {file = \"pywin32-306-cp39-cp39-win_amd64.whl\", hash = \"sha256:39b61c15272833b5c329a2989999dcae836b1eed650252ab1b7bfbe1d59f30f4\"},",
          "",
          "[Added Lines]",
          "2089: version = \"307\"",
          "2094:     {file = \"pywin32-307-cp310-cp310-win32.whl\", hash = \"sha256:f8f25d893c1e1ce2d685ef6d0a481e87c6f510d0f3f117932781f412e0eba31b\"},",
          "2095:     {file = \"pywin32-307-cp310-cp310-win_amd64.whl\", hash = \"sha256:36e650c5e5e6b29b5d317385b02d20803ddbac5d1031e1f88d20d76676dd103d\"},",
          "2096:     {file = \"pywin32-307-cp310-cp310-win_arm64.whl\", hash = \"sha256:0c12d61e0274e0c62acee79e3e503c312426ddd0e8d4899c626cddc1cafe0ff4\"},",
          "2097:     {file = \"pywin32-307-cp311-cp311-win32.whl\", hash = \"sha256:fec5d27cc893178fab299de911b8e4d12c5954e1baf83e8a664311e56a272b75\"},",
          "2098:     {file = \"pywin32-307-cp311-cp311-win_amd64.whl\", hash = \"sha256:987a86971753ed7fdd52a7fb5747aba955b2c7fbbc3d8b76ec850358c1cc28c3\"},",
          "2099:     {file = \"pywin32-307-cp311-cp311-win_arm64.whl\", hash = \"sha256:fd436897c186a2e693cd0437386ed79f989f4d13d6f353f8787ecbb0ae719398\"},",
          "2100:     {file = \"pywin32-307-cp312-cp312-win32.whl\", hash = \"sha256:07649ec6b01712f36debf39fc94f3d696a46579e852f60157a729ac039df0815\"},",
          "2101:     {file = \"pywin32-307-cp312-cp312-win_amd64.whl\", hash = \"sha256:00d047992bb5dcf79f8b9b7c81f72e0130f9fe4b22df613f755ab1cc021d8347\"},",
          "2102:     {file = \"pywin32-307-cp312-cp312-win_arm64.whl\", hash = \"sha256:b53658acbfc6a8241d72cc09e9d1d666be4e6c99376bc59e26cdb6223c4554d2\"},",
          "2103:     {file = \"pywin32-307-cp313-cp313-win32.whl\", hash = \"sha256:ea4d56e48dc1ab2aa0a5e3c0741ad6e926529510516db7a3b6981a1ae74405e5\"},",
          "2104:     {file = \"pywin32-307-cp313-cp313-win_amd64.whl\", hash = \"sha256:576d09813eaf4c8168d0bfd66fb7cb3b15a61041cf41598c2db4a4583bf832d2\"},",
          "2105:     {file = \"pywin32-307-cp313-cp313-win_arm64.whl\", hash = \"sha256:b30c9bdbffda6a260beb2919f918daced23d32c79109412c2085cbc513338a0a\"},",
          "2106:     {file = \"pywin32-307-cp37-cp37m-win32.whl\", hash = \"sha256:5101472f5180c647d4525a0ed289ec723a26231550dbfd369ec19d5faf60e511\"},",
          "2107:     {file = \"pywin32-307-cp37-cp37m-win_amd64.whl\", hash = \"sha256:05de55a7c110478dc4b202230e98af5e0720855360d2b31a44bb4e296d795fba\"},",
          "2108:     {file = \"pywin32-307-cp38-cp38-win32.whl\", hash = \"sha256:13d059fb7f10792542082f5731d5d3d9645320fc38814759313e5ee97c3fac01\"},",
          "2109:     {file = \"pywin32-307-cp38-cp38-win_amd64.whl\", hash = \"sha256:7e0b2f93769d450a98ac7a31a087e07b126b6d571e8b4386a5762eb85325270b\"},",
          "2110:     {file = \"pywin32-307-cp39-cp39-win32.whl\", hash = \"sha256:55ee87f2f8c294e72ad9d4261ca423022310a6e79fb314a8ca76ab3f493854c6\"},",
          "2111:     {file = \"pywin32-307-cp39-cp39-win_amd64.whl\", hash = \"sha256:e9d5202922e74985b037c9ef46778335c102b74b95cec70f629453dbe7235d87\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2339: socks = [\"PySocks (>=1.5.6,!=1.5.7)\"]",
          "2340: use-chardet-on-py3 = [\"chardet (>=3.0.2,<6)\"]",
          "2342: [[package]]",
          "2343: name = \"responses\"",
          "2344: version = \"0.25.3\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2348: [[package]]",
          "2349: name = \"requests-toolbelt\"",
          "2350: version = \"1.0.0\"",
          "2351: description = \"A utility belt for advanced users of python-requests\"",
          "2352: optional = false",
          "2353: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*\"",
          "2354: files = [",
          "2355:     {file = \"requests-toolbelt-1.0.0.tar.gz\", hash = \"sha256:7681a0a3d047012b5bdc0ee37d7f8f07ebe76ab08caeccfc3921ce23c88d5bc6\"},",
          "2356:     {file = \"requests_toolbelt-1.0.0-py2.py3-none-any.whl\", hash = \"sha256:cccfdd665f0a24fcf4726e690f65639d272bb0637b9b92dfd91a5568ccf6bd06\"},",
          "2357: ]",
          "2359: [package.dependencies]",
          "2360: requests = \">=2.0.1,<3.0.0\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2557: [[package]]",
          "2558: name = \"simsimd\"",
          "2560: description = \"Fastest SIMD-Accelerated Vector Similarity Functions for x86 and Arm\"",
          "2561: optional = false",
          "2562: python-versions = \"*\"",
          "2563: files = [",
          "2657: ]",
          "2659: [[package]]",
          "",
          "[Removed Lines]",
          "2559: version = \"5.4.3\"",
          "2564:     {file = \"simsimd-5.4.3-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:83baefb29993842e6877f1df11d70d8524ab0da2a50214c9e804279b3a82330e\"},",
          "2565:     {file = \"simsimd-5.4.3-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:deacf8310437e18d83d5fc1e6b0212060f65d1a76f6941978637724ac0b4195e\"},",
          "2566:     {file = \"simsimd-5.4.3-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:a369099fef78322e2ff11cff127d91e0a1a406807f1c68d5354cf53b22a5693a\"},",
          "2567:     {file = \"simsimd-5.4.3-cp310-cp310-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:0881ce6f96c118567cf110648e93380c1046551be0603634aa31a6e80e28365a\"},",
          "2568:     {file = \"simsimd-5.4.3-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:96ba2e86a1904d2fdc63a60c19054d65fecf753f0464311be3aa5de06dea99f1\"},",
          "2569:     {file = \"simsimd-5.4.3-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:434e0a35d7e9485c058faf15a99c8ff108ccae94c4d7831be9aaf772cc2d6e8a\"},",
          "2570:     {file = \"simsimd-5.4.3-cp310-cp310-manylinux_2_28_aarch64.whl\", hash = \"sha256:f9460bafcef2d6c484f9971fbcdefa0eed60db3c5f41631ca6125518e0aabd66\"},",
          "2571:     {file = \"simsimd-5.4.3-cp310-cp310-manylinux_2_28_x86_64.whl\", hash = \"sha256:a068f6d30143262646d31f6e7573acf89601ca9f3583a9e4bca2d732057481d9\"},",
          "2572:     {file = \"simsimd-5.4.3-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:5ca7b165ee928acb19ff129b6d3776a2cb983e31d62fb5480a209e1aa45065be\"},",
          "2573:     {file = \"simsimd-5.4.3-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:269c7d32ce9bbc8f99dc63ef1c87faf4d454cbf4aa569d77a4dbbb8fc4542bfb\"},",
          "2574:     {file = \"simsimd-5.4.3-cp310-cp310-musllinux_1_2_ppc64le.whl\", hash = \"sha256:d9bc53af558a7a33046091275e760f16421963870b779be1e243bf192793bf63\"},",
          "2575:     {file = \"simsimd-5.4.3-cp310-cp310-musllinux_1_2_s390x.whl\", hash = \"sha256:d6f5e2f53f932e7ddf5a81aeb6bcbb5e8f7a3b46dc0cd5de6c91265859100f54\"},",
          "2576:     {file = \"simsimd-5.4.3-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:b4dc2736276a5ada456a052828e7e4ba4db9bfb6dfb7c9b16ba5f33160876377\"},",
          "2577:     {file = \"simsimd-5.4.3-cp310-cp310-win32.whl\", hash = \"sha256:fc2c8b1f92d9ab0a73a57282eea3fd8dac79f50517ac76d81a4646e9037b1ffa\"},",
          "2578:     {file = \"simsimd-5.4.3-cp310-cp310-win_amd64.whl\", hash = \"sha256:d744be6222edd143d777b40fa55de23889c281ae505a3c8d650a19e4266c0518\"},",
          "2579:     {file = \"simsimd-5.4.3-cp310-cp310-win_arm64.whl\", hash = \"sha256:804f37fd965115cd0a960551c305f68d8fada6bb27b33a67038306bae6d3bc6a\"},",
          "2580:     {file = \"simsimd-5.4.3-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:32f6d6336c1cca6129ea7907d64f4fb91eab64fce8bdfa224098003953801ab5\"},",
          "2581:     {file = \"simsimd-5.4.3-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:470aa4fbc03d49a6f021985f0bc18a772f9a55f44cb1328052dbbd027412db1e\"},",
          "2582:     {file = \"simsimd-5.4.3-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:01d4c36f38f925555a1b85b16aa688b69d5df7a8be91b6c81ea1675486cf8242\"},",
          "2583:     {file = \"simsimd-5.4.3-cp311-cp311-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:d4b8130b4d82c2eb02c40a05f00e277a5dca290332777a3b011cb9adc6512439\"},",
          "2584:     {file = \"simsimd-5.4.3-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:ddd05002f204da0f25d1e5b0c5e3dfa550a8742c272b09db8ecf7799ec21d67d\"},",
          "2585:     {file = \"simsimd-5.4.3-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d674cd79d64e87fa772693275c49ce38f9893bf0b4d9fb08e45952ae54ba707b\"},",
          "2586:     {file = \"simsimd-5.4.3-cp311-cp311-manylinux_2_28_aarch64.whl\", hash = \"sha256:c7d00820f4dfca80eb86cd3c70997bf6590f54557a92bee7ff868844a88376e3\"},",
          "2587:     {file = \"simsimd-5.4.3-cp311-cp311-manylinux_2_28_x86_64.whl\", hash = \"sha256:e960d14f77818e18f7629258f8debd08b5ad3cd62dab2ae53fb5ff5b54f7c08c\"},",
          "2588:     {file = \"simsimd-5.4.3-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:f8af17e36af232014286c854473ad78758616ed7bcb7cf5a5762b8a5b1b074e5\"},",
          "2589:     {file = \"simsimd-5.4.3-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:436a17bd78372e86f7d01ecfff16f75c573a44f1037b5e4199f7a2ecc1a31de9\"},",
          "2590:     {file = \"simsimd-5.4.3-cp311-cp311-musllinux_1_2_ppc64le.whl\", hash = \"sha256:75f8f0fd937c2935e96da41fe4380f3705e1eec0f3433a643ac9384ed689eb9c\"},",
          "2591:     {file = \"simsimd-5.4.3-cp311-cp311-musllinux_1_2_s390x.whl\", hash = \"sha256:1c098aa69fd29a53a350a5a06e0da7ff25258bc76d0deccdf87ba3c862e35fe0\"},",
          "2592:     {file = \"simsimd-5.4.3-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:0bbdb970f64cce2496c7bc54463610c9ddaa43615aa73b6fb1bc1f0df5863565\"},",
          "2593:     {file = \"simsimd-5.4.3-cp311-cp311-win32.whl\", hash = \"sha256:aa58035f67b2c7083cc05a4c49b06b57a0aa15dfbb9608ed1e83ab59b965768f\"},",
          "2594:     {file = \"simsimd-5.4.3-cp311-cp311-win_amd64.whl\", hash = \"sha256:de14931d37087ccfbd1cc6321ad22ce76fef51fc75c98264ff2537170062d361\"},",
          "2595:     {file = \"simsimd-5.4.3-cp311-cp311-win_arm64.whl\", hash = \"sha256:d5474b49d97546b55940c27fcd63fce159f5f939cc53983f91bae56cea34dd52\"},",
          "2596:     {file = \"simsimd-5.4.3-cp312-cp312-macosx_10_13_universal2.whl\", hash = \"sha256:31b1fd618dab62c49cca99fd78e4876b511273ead272584b34aeaca5e5ded532\"},",
          "2597:     {file = \"simsimd-5.4.3-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:43487d7f9756d5f8de6f778910b0fd8aa236716612ccd3afe50e8d8c50f1c20b\"},",
          "2598:     {file = \"simsimd-5.4.3-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:ccd196db72fd716664441c6c0f3077f5d0d5ae6c15454a39c23b7fd729fae5d0\"},",
          "2599:     {file = \"simsimd-5.4.3-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:1ea3e3dcb0471d9fb2dd8d09a84826e859d84f55fc01ec0b89df4c7b9bc67d96\"},",
          "2600:     {file = \"simsimd-5.4.3-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:db4b4fb06397d9689e2fab06b822a6432b85da99c92e060836b532ad94be0dea\"},",
          "2601:     {file = \"simsimd-5.4.3-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:576ebb0bcfeca4086d12925ab3130167ea2b89021d19c09f9b14cccc0e22c739\"},",
          "2602:     {file = \"simsimd-5.4.3-cp312-cp312-manylinux_2_28_aarch64.whl\", hash = \"sha256:87c6bffa7275e250ac2d4605cccb66b0652ad033b734d2a7539eabc3eedbd882\"},",
          "2603:     {file = \"simsimd-5.4.3-cp312-cp312-manylinux_2_28_x86_64.whl\", hash = \"sha256:b48ab95d9a4bc8fd9ce9ce137b36e125e64a114fdd352f2f7a057e92dfbe4571\"},",
          "2604:     {file = \"simsimd-5.4.3-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:f10dca118c1e7a9a89ccf32eb76f8eb09eb963817ee8817379e73ac1c11d55b3\"},",
          "2605:     {file = \"simsimd-5.4.3-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:5ba1472565cb786a4f537877fb15cdaaac139369d6eda14d4bfce6f4cf794b72\"},",
          "2606:     {file = \"simsimd-5.4.3-cp312-cp312-musllinux_1_2_ppc64le.whl\", hash = \"sha256:ef92e699883da0f42b2513f4e923480516595a8da883aeae90980c02d8c40958\"},",
          "2607:     {file = \"simsimd-5.4.3-cp312-cp312-musllinux_1_2_s390x.whl\", hash = \"sha256:adc121c840b306a9b84506a02b00dab8f1e3db152b38fb1f72e5796be7d977b2\"},",
          "2608:     {file = \"simsimd-5.4.3-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:04381217e516e597ebc9d68e37341e2b32677d8de847041e94654834ec6fc366\"},",
          "2609:     {file = \"simsimd-5.4.3-cp312-cp312-win32.whl\", hash = \"sha256:b087189a27f925f348b40c34b7e11aaae9161e764a6376614620fb993f41d9fd\"},",
          "2610:     {file = \"simsimd-5.4.3-cp312-cp312-win_amd64.whl\", hash = \"sha256:f409ce2dc0b6bac7240432b6e7d7f44c9234a60bf7369bced16d2275dcb8afa1\"},",
          "2611:     {file = \"simsimd-5.4.3-cp312-cp312-win_arm64.whl\", hash = \"sha256:77cfe8260aa86a1fb27f884dc13d1ebb25e423a470e71020ea2037ea8d54c14d\"},",
          "2612:     {file = \"simsimd-5.4.3-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:38d21af2860d2effb8bb1af344ca64645ec3e2251497b79a2c80ea5582ae6983\"},",
          "2613:     {file = \"simsimd-5.4.3-cp37-cp37m-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:3ee8e2ef9856e10e36fda82d13275870bd2d73c0a67f90a3120ecfb03c5448ba\"},",
          "2614:     {file = \"simsimd-5.4.3-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:f3f7b6abe31ebdc7044787db91cf3deb8c9612620895af95474cc8a1f146e071\"},",
          "2615:     {file = \"simsimd-5.4.3-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:c4ec0e3df45f5c130fe92e4df91ded84ffc251f8fa802c62ffdbeef46a8d9a17\"},",
          "2616:     {file = \"simsimd-5.4.3-cp37-cp37m-manylinux_2_28_aarch64.whl\", hash = \"sha256:186a5f4bece780a3c6a161867548b35317c20247e5a07cacd33df7254d2baab9\"},",
          "2617:     {file = \"simsimd-5.4.3-cp37-cp37m-manylinux_2_28_x86_64.whl\", hash = \"sha256:82aea3431f2fc025148ed776c290f5b88a16a5c5c857b92a2a9d44e35097b811\"},",
          "2618:     {file = \"simsimd-5.4.3-cp37-cp37m-musllinux_1_2_aarch64.whl\", hash = \"sha256:698b62fd3dddd54e05dcb4989d3805cfa22f8112260855f6dcfd8a9272a938d9\"},",
          "2619:     {file = \"simsimd-5.4.3-cp37-cp37m-musllinux_1_2_i686.whl\", hash = \"sha256:2f1b19db892fcc3ef3fd21e474a819e63f6f1ac5ba3fb916d0776f5cbdae4b16\"},",
          "2620:     {file = \"simsimd-5.4.3-cp37-cp37m-musllinux_1_2_ppc64le.whl\", hash = \"sha256:b24ab704c3aaac0fe1538b4fac69b3402847206d6735b5d9d476549712c65ec3\"},",
          "2621:     {file = \"simsimd-5.4.3-cp37-cp37m-musllinux_1_2_s390x.whl\", hash = \"sha256:2592574bfa52a5e951568927a518ab873d6e1328c27cbddc8cf656f9d2ac4079\"},",
          "2622:     {file = \"simsimd-5.4.3-cp37-cp37m-musllinux_1_2_x86_64.whl\", hash = \"sha256:8b7e9495aa97f28f0ac727d23bd469c756583cc9b3288c8673170c83ea2e4195\"},",
          "2623:     {file = \"simsimd-5.4.3-cp37-cp37m-win32.whl\", hash = \"sha256:f4a5fff030bf1528e3667b257f477a6a8f4e098372b89b24b6e12b7cca863a39\"},",
          "2624:     {file = \"simsimd-5.4.3-cp37-cp37m-win_amd64.whl\", hash = \"sha256:57eab9d511b72ebf3f86f9d639d54a8876a1794047621e1b64adaeb4e5f24d10\"},",
          "2625:     {file = \"simsimd-5.4.3-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:82487401d13f08553a0bf5206a723779530581d4e7801fe7091a53389581d36f\"},",
          "2626:     {file = \"simsimd-5.4.3-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:a57e07fb8c67339c4e34ae760d998e75876952fcada803250772c974b9cd54bc\"},",
          "2627:     {file = \"simsimd-5.4.3-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:433c6fcb8fdcfba3c7c81e568e32335768b0f0cae9b5f4aa8805e621ab6ac871\"},",
          "2628:     {file = \"simsimd-5.4.3-cp38-cp38-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:b1289252bd2be60fe1d030d33eb3b73459efb34cdd63685e04c37c5e3e963d4a\"},",
          "2629:     {file = \"simsimd-5.4.3-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:d83e58500f5b4eb1e182054c94a91872bf69471bc963355ab13e7f7d5a3d36ae\"},",
          "2630:     {file = \"simsimd-5.4.3-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:95970e5a268eee6eacb9220ed19d60aa8e1751d01af1e76adf0bf614ec58962d\"},",
          "2631:     {file = \"simsimd-5.4.3-cp38-cp38-manylinux_2_28_aarch64.whl\", hash = \"sha256:0c334a0ded63acf1aa0a9ea720cae9a186c81eb5354c4b2b09ed57d8cc652215\"},",
          "2632:     {file = \"simsimd-5.4.3-cp38-cp38-manylinux_2_28_x86_64.whl\", hash = \"sha256:29f0a8a8cc3a867dbeab39203572077db23d338fb01fd48ac8e6c48ab3bf8b38\"},",
          "2633:     {file = \"simsimd-5.4.3-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:ac7c0fb5b70e5fdd13a6b2d08477f302674af7ae53c627e0413273d9afe5a245\"},",
          "2634:     {file = \"simsimd-5.4.3-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:8d9688a122c8dcb8e22f27676a76377625e3a3b607a2172559cb0d85453364d9\"},",
          "2635:     {file = \"simsimd-5.4.3-cp38-cp38-musllinux_1_2_ppc64le.whl\", hash = \"sha256:aeb450216526ca05d200f7cc59147233f039e24afbc42ab805adb9e540de9852\"},",
          "2636:     {file = \"simsimd-5.4.3-cp38-cp38-musllinux_1_2_s390x.whl\", hash = \"sha256:8209f3c1583a3ce1a6503d389383476a51bfe8990ecf81d7d679276d52eb40d4\"},",
          "2637:     {file = \"simsimd-5.4.3-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:a03e984b0941b7555c0f62968b5d5e7b8132bffbb17b6dfb7219876cd95fc6c4\"},",
          "2638:     {file = \"simsimd-5.4.3-cp38-cp38-win32.whl\", hash = \"sha256:24c5be9c34d85a8e728e2e322884dc39169fddbbccbe47e970a3c2b872d1efee\"},",
          "2639:     {file = \"simsimd-5.4.3-cp38-cp38-win_amd64.whl\", hash = \"sha256:7d751d4f85a9c3ab6d62b417c5aa6e5972ca6e13425658a01f14632b916d2327\"},",
          "2640:     {file = \"simsimd-5.4.3-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:ba4ec918b19c578e1039266e1b3fc5792fce3e3e64c8a3afc6cef11c6f6abe4c\"},",
          "2641:     {file = \"simsimd-5.4.3-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:37b1f392bbe0fecfb9da301ff36dd0b7915e244b2433e822216171d5ee9b53f8\"},",
          "2642:     {file = \"simsimd-5.4.3-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:ac97eb8a2ba3771e905a28bffb5894516d15b775af22d8b9b55eae3fe3d6673e\"},",
          "2643:     {file = \"simsimd-5.4.3-cp39-cp39-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:a6ac311333239d03b7b6726ebba8025a409ecb7e0eca9301f967fb88c9ec1055\"},",
          "2644:     {file = \"simsimd-5.4.3-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:44de5372968851de5c972faab9574a9667312dfedc69c626bd47dc1a0d730bf3\"},",
          "2645:     {file = \"simsimd-5.4.3-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:64bab8107a19ac05067a143039cc03c14b4bd9ee95973fc7f7bae7e34e857eff\"},",
          "2646:     {file = \"simsimd-5.4.3-cp39-cp39-manylinux_2_28_aarch64.whl\", hash = \"sha256:31f11b649448fb68061b0ff131c93215940b6dff24357ec9763abe80406db133\"},",
          "2647:     {file = \"simsimd-5.4.3-cp39-cp39-manylinux_2_28_x86_64.whl\", hash = \"sha256:9d6ad1ed348779a07410b37baa0057dbc402c6d5785f86ad8a784cec6c642f36\"},",
          "2648:     {file = \"simsimd-5.4.3-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:b848f4f7da3c2d9fc654dd4815b7be99161c954d88af4f948f65f6df3c671671\"},",
          "2649:     {file = \"simsimd-5.4.3-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:44c731383c92cb165b907fd88c2c3f6b5a13102358cae4eb881950b4faf2f207\"},",
          "2650:     {file = \"simsimd-5.4.3-cp39-cp39-musllinux_1_2_ppc64le.whl\", hash = \"sha256:adc0b4df3e2739590f1e8e4d2cc12fedb57e8d015430dd6014e7fe5aab0c4bdd\"},",
          "2651:     {file = \"simsimd-5.4.3-cp39-cp39-musllinux_1_2_s390x.whl\", hash = \"sha256:ffaef86f0c7d93e40d19773d3c1c23a5facc68ea1e094db98a6541458cb49aef\"},",
          "2652:     {file = \"simsimd-5.4.3-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:d4774e00d72babac1f7685b9b0e2ff721da312301e8656687e89071d7e4d4b8b\"},",
          "2653:     {file = \"simsimd-5.4.3-cp39-cp39-win32.whl\", hash = \"sha256:d582b3eff101cc8e920407ef08c97e34e1738e829bc58816c0d402bcb5674183\"},",
          "2654:     {file = \"simsimd-5.4.3-cp39-cp39-win_amd64.whl\", hash = \"sha256:777809b143ec9f3ff18bd20eb140367a62717c948b907846f9389e6ae3d1b88c\"},",
          "2655:     {file = \"simsimd-5.4.3-cp39-cp39-win_arm64.whl\", hash = \"sha256:0637cfb2e99f3d8b78eb3d84d3a63b47a413a3a1702314d74ed28b861b0c0e7c\"},",
          "2656:     {file = \"simsimd-5.4.3.tar.gz\", hash = \"sha256:dc75ae8bc0bff160439f669eb664cf47cc24d1a450c93b6bb53d8eee68794956\"},",
          "",
          "[Added Lines]",
          "2579: version = \"5.6.0\"",
          "2584:     {file = \"simsimd-5.6.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:f8d33b464c417f2c589bd773c58499f6ee0460600e5e98494859dbcfa492d94b\"},",
          "2585:     {file = \"simsimd-5.6.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:c3f544ecc9a9efafcad312a66983c06aa8caeab9032e6f8dd1ce09b09536cfd3\"},",
          "2586:     {file = \"simsimd-5.6.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:5e7dd541fe429a9af17e46b254305e8be2128cb6171ff6518b78328466d2618a\"},",
          "2587:     {file = \"simsimd-5.6.0-cp310-cp310-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:572b761b6ccd1eb0c800c82aefc286ad334d4d2a7d27f28a3b39083135b66e70\"},",
          "2588:     {file = \"simsimd-5.6.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:0b644b12aa0705298f4ece17519cbd338a90ae90a8a8bdeb999dc82beaba5c0f\"},",
          "2589:     {file = \"simsimd-5.6.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:c90f9272dec482331b9c25cdf64bda36b15aada64628eec7b5b424362ef5d48f\"},",
          "2590:     {file = \"simsimd-5.6.0-cp310-cp310-manylinux_2_28_aarch64.whl\", hash = \"sha256:c17d535a59b0cf81256ff7acc05445e0616c0878945421bf2b5f1225b1c95401\"},",
          "2591:     {file = \"simsimd-5.6.0-cp310-cp310-manylinux_2_28_x86_64.whl\", hash = \"sha256:190af5a63ed12d9ba543cb9db48fcd05cac20fc1ce543fcfdc8d18e0eae3e220\"},",
          "2592:     {file = \"simsimd-5.6.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:5ebe799537d472b9a7711c040b2ad9fbd6774f7eb796114560124312f798246f\"},",
          "2593:     {file = \"simsimd-5.6.0-cp310-cp310-musllinux_1_2_armv7l.whl\", hash = \"sha256:62ad65dcbaf13664f1b1d56b1de55d8246e0102464257908cb5357dd87975eb9\"},",
          "2594:     {file = \"simsimd-5.6.0-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:eaaa6530de3b53bb43dae58603d0bbfcf55a7e0a97a40dda5d995fab9f836473\"},",
          "2595:     {file = \"simsimd-5.6.0-cp310-cp310-musllinux_1_2_ppc64le.whl\", hash = \"sha256:3e9ef5eba301b9c98e580c144630c787de64a880c669d47661710b9dfe611d40\"},",
          "2596:     {file = \"simsimd-5.6.0-cp310-cp310-musllinux_1_2_s390x.whl\", hash = \"sha256:621cfa718146fdda3f9a0288b441d7397128fea32953944c9de856a2c041b790\"},",
          "2597:     {file = \"simsimd-5.6.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:3850c0b4eafa0077a0d409c82b9ce205590826fc2d0e6046b12e32ae87037f52\"},",
          "2598:     {file = \"simsimd-5.6.0-cp310-cp310-win32.whl\", hash = \"sha256:f29a482b446518425ed1543c7891a5c2f50bfd2a5022f35d8ff1d777c101d877\"},",
          "2599:     {file = \"simsimd-5.6.0-cp310-cp310-win_amd64.whl\", hash = \"sha256:147733e90d2a76f01d4f13ef4ba39e727a1d78272fee87c816d6ddc9101812b0\"},",
          "2600:     {file = \"simsimd-5.6.0-cp310-cp310-win_arm64.whl\", hash = \"sha256:e5916b329d2f3063829f9010feb6288fb4f787ec7597edeb2bcb6243cae1f243\"},",
          "2601:     {file = \"simsimd-5.6.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:5bd0148a9ee640d19e58a89c9bee3008e5858059fe29dd51a1351cc1e675dc9c\"},",
          "2602:     {file = \"simsimd-5.6.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:1924fc803fc9765ed00fa4b5d600d924ef3a47b0c1e74511366f581627be3b4e\"},",
          "2603:     {file = \"simsimd-5.6.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:b3a35bc907ebd00e446428c8906315043c6906c9c1f09ae73249eb3304799132\"},",
          "2604:     {file = \"simsimd-5.6.0-cp311-cp311-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:fb876608cc0df37143558c4e88f62c11d356b7c60379d442ec5e436cc20523ff\"},",
          "2605:     {file = \"simsimd-5.6.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:bec8872d1fa55aa8aeb795447d8c56bb21fa271f6ec3156c42efce7f823e6345\"},",
          "2606:     {file = \"simsimd-5.6.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:cbe179e6c76b7a0f6ba2ea6a716a7eb81ca3d4b147abe3552b442bdec23fcd18\"},",
          "2607:     {file = \"simsimd-5.6.0-cp311-cp311-manylinux_2_28_aarch64.whl\", hash = \"sha256:9de9e24797818cf954b89ff466f737487a45ea41a778109eeb3093ba402d0840\"},",
          "2608:     {file = \"simsimd-5.6.0-cp311-cp311-manylinux_2_28_x86_64.whl\", hash = \"sha256:a02577614d1e70fbaf026d837d26ab663e70ffbf1fe76d56cef32494a495d803\"},",
          "2609:     {file = \"simsimd-5.6.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:d14e953a6a0b85940044689a1cabf4bc6b79cc0647d625ae5ea17265051a4773\"},",
          "2610:     {file = \"simsimd-5.6.0-cp311-cp311-musllinux_1_2_armv7l.whl\", hash = \"sha256:b46031cbb79777ca3e7c83c148fba7203f79e4da96550ffa64ac5e0dac06c2f1\"},",
          "2611:     {file = \"simsimd-5.6.0-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:3a006db5ccce07f1434f71353a62590c70375dd9118d95f8f5bf957520e5e5e4\"},",
          "2612:     {file = \"simsimd-5.6.0-cp311-cp311-musllinux_1_2_ppc64le.whl\", hash = \"sha256:b726dcf2bad0ac3d402fefb0633261ad23f5e11cf0e74298d6fc0efac067234b\"},",
          "2613:     {file = \"simsimd-5.6.0-cp311-cp311-musllinux_1_2_s390x.whl\", hash = \"sha256:f96c492ba79cf152aa4328e1db847ac4de855838c9ba72d60c9d08ff5a7dd038\"},",
          "2614:     {file = \"simsimd-5.6.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:7ff56e35b80ffdb224e54f2dfb22a34ba04271d3f4185b7af688e38f695e87c9\"},",
          "2615:     {file = \"simsimd-5.6.0-cp311-cp311-win32.whl\", hash = \"sha256:d715d1556e994883c88d76a1aa857b46930d03581b6a4d7dadc24eb0cb71851f\"},",
          "2616:     {file = \"simsimd-5.6.0-cp311-cp311-win_amd64.whl\", hash = \"sha256:7269a7e01454972e5bf51c66b9984489a8629208ce15ef9baa6ca7c7c0e0b5fe\"},",
          "2617:     {file = \"simsimd-5.6.0-cp311-cp311-win_arm64.whl\", hash = \"sha256:330d8ab961d6a7c2b363340a39a19436a0239c5cea8b86b664fc0d2d65971619\"},",
          "2618:     {file = \"simsimd-5.6.0-cp312-cp312-macosx_10_13_universal2.whl\", hash = \"sha256:0530a75c5646219fe96c5a5873abfe8f9c160be407b5621cfdb5aeedfaa143a8\"},",
          "2619:     {file = \"simsimd-5.6.0-cp312-cp312-macosx_10_13_x86_64.whl\", hash = \"sha256:67b58cbb6d2da4c2e5239cf9e2e66f5707c0a337561cca778b70a3d4dc8b62b0\"},",
          "2620:     {file = \"simsimd-5.6.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:7a8fe31d558145ec777733e80194ea5b03b3b7f278c243567457fdcc5ee89aeb\"},",
          "2621:     {file = \"simsimd-5.6.0-cp312-cp312-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:e3012816771203692eb020530dd28a571515d8241d9f9d73a1e2065f642baed1\"},",
          "2622:     {file = \"simsimd-5.6.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:18bf024f0a2bc0afe6d20c97921d9c07415b9dd27604f28cf2638773faf8b804\"},",
          "2623:     {file = \"simsimd-5.6.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:637779de503b56043ab78aec5476525ab6741ca2990453a658f8f9b3d3e28fba\"},",
          "2624:     {file = \"simsimd-5.6.0-cp312-cp312-manylinux_2_28_aarch64.whl\", hash = \"sha256:e6c549a33fb373a43c2f669242dad016b5e3bf11c2e94de17ada78efcaa5d6a7\"},",
          "2625:     {file = \"simsimd-5.6.0-cp312-cp312-manylinux_2_28_x86_64.whl\", hash = \"sha256:e8b24711cdeae5ecdd188fb7347b2367a6446a1576fad0ae5da90dafb0b0aefb\"},",
          "2626:     {file = \"simsimd-5.6.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:6e435b99a260f25e922620821ea1ec84901c553e72564c05d9e6f214f128caa9\"},",
          "2627:     {file = \"simsimd-5.6.0-cp312-cp312-musllinux_1_2_armv7l.whl\", hash = \"sha256:57f75e7ff13485c22fa5bbae82845c309e19d395a904f22c73f2bf9ece2dc88c\"},",
          "2628:     {file = \"simsimd-5.6.0-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:cee9039134f161ead6727f59bea43b3af32049fa8486340d41e5cbcaae5bdd80\"},",
          "2629:     {file = \"simsimd-5.6.0-cp312-cp312-musllinux_1_2_ppc64le.whl\", hash = \"sha256:9644b50913c2300001e74a67d63ba09efdbd4730e11f8c423c17b7c7695f36dd\"},",
          "2630:     {file = \"simsimd-5.6.0-cp312-cp312-musllinux_1_2_s390x.whl\", hash = \"sha256:a510b69fceb87b16592dd7b3f03f428591a3f78a4ce65831f63eb893dfc3231b\"},",
          "2631:     {file = \"simsimd-5.6.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:5cecf017159157f8eca5b7f232268e93f8d48f312c7f856630a3563bc3389fa9\"},",
          "2632:     {file = \"simsimd-5.6.0-cp312-cp312-win32.whl\", hash = \"sha256:bf137a84f97a3be3f776ba7049d9f3c0b49679c0aa9035655eb9aa44af8019da\"},",
          "2633:     {file = \"simsimd-5.6.0-cp312-cp312-win_amd64.whl\", hash = \"sha256:03202498adb8a87ca6e1398d9fbfaf0b34d17cf36dd8724b39ad4cae7cda85b5\"},",
          "2634:     {file = \"simsimd-5.6.0-cp312-cp312-win_arm64.whl\", hash = \"sha256:e641a7904ffd9f185ae0c7c827c6621348742a5cd885e1778ced337cd8866023\"},",
          "2635:     {file = \"simsimd-5.6.0-cp37-cp37m-macosx_10_9_x86_64.whl\", hash = \"sha256:d43f22e9206a4a85b2e85e3345cd1221e5979cd3fc3cf2724bded231574f92ff\"},",
          "2636:     {file = \"simsimd-5.6.0-cp37-cp37m-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:5efd8344a3a9f8782ff183d0c985d0860079264d866c01d72802b81c893d377a\"},",
          "2637:     {file = \"simsimd-5.6.0-cp37-cp37m-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:5a322263ffd99ddb7f92c9be4dca9b01ef66515e61759048d7d172a5f062507d\"},",
          "2638:     {file = \"simsimd-5.6.0-cp37-cp37m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:55618e1a096fb911cf131fb0191d20c3f146c2cfd69e00cc1aab8909ed34ebcc\"},",
          "2639:     {file = \"simsimd-5.6.0-cp37-cp37m-manylinux_2_28_aarch64.whl\", hash = \"sha256:4051f778da068e2ee2a401d51b16d96470eb5e6b2a33f2c5a874a263ccec93b9\"},",
          "2640:     {file = \"simsimd-5.6.0-cp37-cp37m-manylinux_2_28_x86_64.whl\", hash = \"sha256:7c3e40be8554125feb0c7cd6aed9483d0278859925aab4b05ba7f5c8790ba8ea\"},",
          "2641:     {file = \"simsimd-5.6.0-cp37-cp37m-musllinux_1_2_aarch64.whl\", hash = \"sha256:fcd59471f39eac654ef26bdde64d8efc229c84e93b5517d2021b2497e939571e\"},",
          "2642:     {file = \"simsimd-5.6.0-cp37-cp37m-musllinux_1_2_armv7l.whl\", hash = \"sha256:d9e4c3783cc04e9456c8218c2cfaebe36def57497d13d3356b59770beb8074ce\"},",
          "2643:     {file = \"simsimd-5.6.0-cp37-cp37m-musllinux_1_2_i686.whl\", hash = \"sha256:7e816b1411b54fbbf517864abde257c02814ab1c7701e9810544f63f76bb2b29\"},",
          "2644:     {file = \"simsimd-5.6.0-cp37-cp37m-musllinux_1_2_ppc64le.whl\", hash = \"sha256:9ecbc9c5c0744b87d3d6c222bf99c87cefc2494f82ce9d22deea1aff706fc1a0\"},",
          "2645:     {file = \"simsimd-5.6.0-cp37-cp37m-musllinux_1_2_s390x.whl\", hash = \"sha256:48c2877eec2e6ed1b5b915356279ad05b60da3ff23c5ec620fe988c3187ba0e1\"},",
          "2646:     {file = \"simsimd-5.6.0-cp37-cp37m-musllinux_1_2_x86_64.whl\", hash = \"sha256:7e273b438be401bffcca2968347937a40485826015615a344a74f364e28649ce\"},",
          "2647:     {file = \"simsimd-5.6.0-cp37-cp37m-win32.whl\", hash = \"sha256:f1be0f3e257fdf0e36435ba1e4fd76a256521eee075dfd502172c9aca9e1d00b\"},",
          "2648:     {file = \"simsimd-5.6.0-cp37-cp37m-win_amd64.whl\", hash = \"sha256:5d9fe4ed43e432c2fe77e89008a68b617b7ab4d2c570a5be96a892df107a7d41\"},",
          "2649:     {file = \"simsimd-5.6.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:f82ef97bea5ba13cbbd09d96197bbeac8e2d86a228393f7a0cdcdcd862fdaeda\"},",
          "2650:     {file = \"simsimd-5.6.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:3e7ab834fdf111c3c3a080ec73f37fd532f5e3d56e36431b64ccf24594b698d2\"},",
          "2651:     {file = \"simsimd-5.6.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:3e554138c4019a19a4716f94b2432f4f11e6073c55cdbb41bdd3a86b4709c0e6\"},",
          "2652:     {file = \"simsimd-5.6.0-cp38-cp38-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:c39a75d1b693fd510ad44a8b4f998164e17d3dff4deffb8af0d0006c0029b9c6\"},",
          "2653:     {file = \"simsimd-5.6.0-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:727b14f5be78843be759ef01c68b83e2505fe4f8181e8faedba2675d0850857c\"},",
          "2654:     {file = \"simsimd-5.6.0-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:38a62ffde6fee42ebeaa4f9200c4b4f1578b29672e506240df4b1ea286d6a983\"},",
          "2655:     {file = \"simsimd-5.6.0-cp38-cp38-manylinux_2_28_aarch64.whl\", hash = \"sha256:293d3b6ceafb3ce68a64f04134399973acb9533ec888910292fe109fda5affdb\"},",
          "2656:     {file = \"simsimd-5.6.0-cp38-cp38-manylinux_2_28_x86_64.whl\", hash = \"sha256:d5a7aabe15515ffb697dcc7c186537b5feb14b0eb8701f6314a00a0ec4985408\"},",
          "2657:     {file = \"simsimd-5.6.0-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:ab79b8898a5bfaa9b9e7b7e529c153940f1a0ec36e1c2bfe737c1ef09ca4adcd\"},",
          "2658:     {file = \"simsimd-5.6.0-cp38-cp38-musllinux_1_2_armv7l.whl\", hash = \"sha256:b237f95c6bc934b3f3f5cf7327d449969e75657d47b38ebd6a753fc3ea6f2088\"},",
          "2659:     {file = \"simsimd-5.6.0-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:4acec868a46a2d1014741515c723f9b8151e33daab9d1160b697ef56402630fe\"},",
          "2660:     {file = \"simsimd-5.6.0-cp38-cp38-musllinux_1_2_ppc64le.whl\", hash = \"sha256:461671e29d1b4ac3994aae2618a7816899a26450d934d73201ee3af217b85a68\"},",
          "2661:     {file = \"simsimd-5.6.0-cp38-cp38-musllinux_1_2_s390x.whl\", hash = \"sha256:603230e85e547dea941fc46ed44db087e0f46d3b8800e3f02e149b98c7c1c0d6\"},",
          "2662:     {file = \"simsimd-5.6.0-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:6df8ffdcd2b5dcb1b160d03a2e8a4d0aca9b8d0906dc091a8d4b94cc0d30d065\"},",
          "2663:     {file = \"simsimd-5.6.0-cp38-cp38-win32.whl\", hash = \"sha256:6b484af6c1676ba87335a55b4b16a909c50c352b122255031823b3e7da0998ad\"},",
          "2664:     {file = \"simsimd-5.6.0-cp38-cp38-win_amd64.whl\", hash = \"sha256:e43c4d08076e7c554e7ef23237af31f2c3163fd47f5d5ff198b88268ecc97add\"},",
          "2665:     {file = \"simsimd-5.6.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:466684eec92f02014d9fe28e2ab106f4dda0ca0875c9f433b4ccc5fcea28ebda\"},",
          "2666:     {file = \"simsimd-5.6.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:be671a7564b8ff214fc38afe54e0eac21d1624ffe7b1da2419cde9c83ff925ad\"},",
          "2667:     {file = \"simsimd-5.6.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:c9fd9cc87de436d6338f93f0783c38b3aea9caa61461a7091bc9d0d9cdd746cb\"},",
          "2668:     {file = \"simsimd-5.6.0-cp39-cp39-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:72b0c84db6e90210861756e894c66c83371db4a12421f68dd3824303d0e4c56b\"},",
          "2669:     {file = \"simsimd-5.6.0-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:0cd00384da1108fae1f4bbe09c96f799973ef645b99d7a275815ae80b79c82d6\"},",
          "2670:     {file = \"simsimd-5.6.0-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:253688e8e87d2940e483dbc6274c13a9ede081d09092587ed7e505ddec605594\"},",
          "2671:     {file = \"simsimd-5.6.0-cp39-cp39-manylinux_2_28_aarch64.whl\", hash = \"sha256:32d4209bb9416006cebb32579a3bde96828002f6e859cf90101c7c68b23f0cb8\"},",
          "2672:     {file = \"simsimd-5.6.0-cp39-cp39-manylinux_2_28_x86_64.whl\", hash = \"sha256:ae913aa3066fd29bbde9528d4659dd3ee1c5584580abbc5e9a0eb581adab1dc6\"},",
          "2673:     {file = \"simsimd-5.6.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:d8d0dff06cd8fda55d9e1a33980ad5c1bde56ce607e7f0978117bea79ff346bf\"},",
          "2674:     {file = \"simsimd-5.6.0-cp39-cp39-musllinux_1_2_armv7l.whl\", hash = \"sha256:9febb6d142815f3bee30b8ab3a66712e69ce327962e30637ca398fa5ce38c909\"},",
          "2675:     {file = \"simsimd-5.6.0-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:96a26317343101fea838130736412d83ec63ad229c5627cbc8a21135f2226aae\"},",
          "2676:     {file = \"simsimd-5.6.0-cp39-cp39-musllinux_1_2_ppc64le.whl\", hash = \"sha256:a6ca3aaaceb60d4afb8f8a5b0f0b2ea1b5286631d80bb4adaaf2648a8eebcb29\"},",
          "2677:     {file = \"simsimd-5.6.0-cp39-cp39-musllinux_1_2_s390x.whl\", hash = \"sha256:2bf4300f5e84398c7684694bcede78934df42adfb0362c8ac0183082e48085cf\"},",
          "2678:     {file = \"simsimd-5.6.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:9bd8c63cc96fef6bc22e3193290f4dbbd8f073e07572eb2429a8098f33c0320b\"},",
          "2679:     {file = \"simsimd-5.6.0-cp39-cp39-win32.whl\", hash = \"sha256:eb7937610fe1ec1614533d4d8f0ce621007884e98fc40d38cb404fa3bf0f0e8c\"},",
          "2680:     {file = \"simsimd-5.6.0-cp39-cp39-win_amd64.whl\", hash = \"sha256:7aab7923937364ce0a3c49a5ffca548f82f768caebbcc0e2a8eacdf18be44302\"},",
          "2681:     {file = \"simsimd-5.6.0-cp39-cp39-win_arm64.whl\", hash = \"sha256:5b179383b35e35807bdd73328f4b145db6610901c93c4f3d7d0659971fd6ad93\"},",
          "2682:     {file = \"simsimd-5.6.0.tar.gz\", hash = \"sha256:bb0ecb7d6626cac8153b5c1a1197d77697d70bc8753d763e2503a8fcf0090ef2\"},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2711: [[package]]",
          "2712: name = \"syrupy\"",
          "2714: description = \"Pytest Snapshot Test Utility\"",
          "2715: optional = false",
          "2716: python-versions = \">=3.8.1\"",
          "2717: files = [",
          "2720: ]",
          "2722: [package.dependencies]",
          "",
          "[Removed Lines]",
          "2713: version = \"4.7.1\"",
          "2718:     {file = \"syrupy-4.7.1-py3-none-any.whl\", hash = \"sha256:be002267a512a4bedddfae2e026c93df1ea928ae10baadc09640516923376d41\"},",
          "2719:     {file = \"syrupy-4.7.1.tar.gz\", hash = \"sha256:f9d4485f3f27d0e5df6ed299cac6fa32eb40a441915d988e82be5a4bdda335c8\"},",
          "",
          "[Added Lines]",
          "2739: version = \"4.7.2\"",
          "2744:     {file = \"syrupy-4.7.2-py3-none-any.whl\", hash = \"sha256:eae7ba6be5aed190237caa93be288e97ca1eec5ca58760e4818972a10c4acc64\"},",
          "2745:     {file = \"syrupy-4.7.2.tar.gz\", hash = \"sha256:ea45e099f242de1bb53018c238f408a5bb6c82007bc687aefcbeaa0e1c2e935a\"},",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2850: [[package]]",
          "2851: name = \"types-python-dateutil\"",
          "2853: description = \"Typing stubs for python-dateutil\"",
          "2854: optional = false",
          "2855: python-versions = \">=3.8\"",
          "2856: files = [",
          "2859: ]",
          "2861: [[package]]",
          "",
          "[Removed Lines]",
          "2852: version = \"2.9.0.20240906\"",
          "2857:     {file = \"types-python-dateutil-2.9.0.20240906.tar.gz\", hash = \"sha256:9706c3b68284c25adffc47319ecc7947e5bb86b3773f843c73906fd598bc176e\"},",
          "2858:     {file = \"types_python_dateutil-2.9.0.20240906-py3-none-any.whl\", hash = \"sha256:27c8cc2d058ccb14946eebcaaa503088f4f6dbc4fb6093d3d456a49aef2753f6\"},",
          "",
          "[Added Lines]",
          "2878: version = \"2.9.0.20241003\"",
          "2883:     {file = \"types-python-dateutil-2.9.0.20241003.tar.gz\", hash = \"sha256:58cb85449b2a56d6684e41aeefb4c4280631246a0da1a719bdbe6f3fb0317446\"},",
          "2884:     {file = \"types_python_dateutil-2.9.0.20241003-py3-none-any.whl\", hash = \"sha256:250e1d8e80e7bbc3a6c99b907762711d1a1cdd00e978ad39cb5940f6f0a87f3d\"},",
          "",
          "---------------"
        ],
        "libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr||libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr": [
          "File: libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr -> libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr",
          "--- Hunk 1 ---",
          "[Context before]",
          "480: # ---",
          "481: # name: test_combining_sequences.3",
          "482:   list([",
          "484:   ])",
          "485: # ---",
          "486: # name: test_configurable_fields[schema2]",
          "",
          "[Removed Lines]",
          "483:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ['baz', 'qux']}, reference_example_id=None, parent_run_id=None, tags=[], child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo, bar'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['foo, bar'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo, bar', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'foo, bar', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000002-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': AIMessage(content='foo, bar', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000004')}, outputs={'output': ['foo', 'bar']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000005'), name='RunnableLambda', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': ['foo', 'bar']}, outputs={'question': 'foobar'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:4'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000005', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000006'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nicer assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'foobar'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nicer assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='foobar', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:5'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000006', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000007'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['baz, qux'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['baz, qux'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nicer assistant.\\nHuman: foobar']}, outputs={'generations': [[{'text': 'baz, qux', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'baz, qux', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000006-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:6'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000007', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000008'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': AIMessage(content='baz, qux', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000009')}, outputs={'output': ['baz', 'qux']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:7'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000008', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "[Added Lines]",
          "483:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ['baz', 'qux']}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo, bar'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['foo, bar'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo, bar', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'foo, bar', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000002-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': AIMessage(content='foo, bar', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000004')}, outputs={'output': ['foo', 'bar']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000005'), name='RunnableLambda', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': ['foo', 'bar']}, outputs={'question': 'foobar'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:4'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000005', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000006'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nicer assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'foobar'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nicer assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='foobar', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:5'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000006', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000007'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['baz, qux'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['baz, qux'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nicer assistant.\\nHuman: foobar']}, outputs={'generations': [[{'text': 'baz, qux', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'baz, qux', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000006-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:6'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000007', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000008'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': AIMessage(content='baz, qux', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000009')}, outputs={'output': ['baz', 'qux']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:7'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000008', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1119: # ---",
          "1120: # name: test_prompt_with_chat_model.2",
          "1121:   list([",
          "1123:   ])",
          "1124: # ---",
          "1125: # name: test_prompt_with_chat_model_and_parser",
          "",
          "[Removed Lines]",
          "1122:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': AIMessage(content='foo', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000003')}, reference_example_id=None, parent_run_id=None, tags=[], child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['foo'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'foo', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000002-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "[Added Lines]",
          "1122:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': AIMessage(content='foo', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000003')}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['foo'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'foo', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000002-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1243: # ---",
          "1244: # name: test_prompt_with_chat_model_and_parser.1",
          "1245:   list([",
          "1247:   ])",
          "1248: # ---",
          "1249: # name: test_prompt_with_chat_model_async",
          "",
          "[Removed Lines]",
          "1246:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ['foo', 'bar']}, reference_example_id=None, parent_run_id=None, tags=[], child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo, bar'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['foo, bar'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo, bar', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'foo, bar', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000002-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': AIMessage(content='foo, bar', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000004')}, outputs={'output': ['foo', 'bar']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "[Added Lines]",
          "1246:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ['foo', 'bar']}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo, bar'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['foo, bar'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo, bar', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'foo, bar', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000002-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': AIMessage(content='foo, bar', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000004')}, outputs={'output': ['foo', 'bar']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1359: # ---",
          "1360: # name: test_prompt_with_chat_model_async.2",
          "1361:   list([",
          "1363:   ])",
          "1364: # ---",
          "1365: # name: test_prompt_with_llm",
          "",
          "[Removed Lines]",
          "1362:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': AIMessage(content='foo', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000003')}, reference_example_id=None, parent_run_id=None, tags=[], child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['foo'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'foo', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000002-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "[Added Lines]",
          "1362:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': AIMessage(content='foo', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000003')}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['foo'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'foo', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000002-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1469: # ---",
          "1470: # name: test_prompt_with_llm.1",
          "1471:   list([",
          "1473:   ])",
          "1474: # ---",
          "1475: # name: test_prompt_with_llm.2",
          "1476:   list([",
          "1479:   ])",
          "1480: # ---",
          "1481: # name: test_prompt_with_llm_and_async_lambda",
          "",
          "[Removed Lines]",
          "1472:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': 'foo'}, reference_example_id=None, parent_run_id=None, tags=[], child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo', 'bar'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeListLLM'], 'repr': \"FakeListLLM(responses=['foo', 'bar'])\", 'name': 'FakeListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "1477:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': 'bar'}, reference_example_id=None, parent_run_id=None, tags=[], child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo', 'bar'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 2, 'metadata': {'ls_provider': 'fakelist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeListLLM'], 'repr': \"FakeListLLM(responses=['foo', 'bar'])\", 'name': 'FakeListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'bar', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "1478:     RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your favorite color?'}, outputs={'output': 'foo'}, reference_example_id=None, parent_run_id=None, tags=[], child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000004'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your favorite color?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your favorite color?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000003'), tags=['seq:step:1'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000003.20230101T000000000000Z00000000-0000-4000-8000-000000000004', trace_id=UUID('00000000-0000-4000-8000-000000000003')), RunTree(id=UUID('00000000-0000-4000-8000-000000000005'), name='FakeListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo', 'bar'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 2, 'metadata': {'ls_provider': 'fakelist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeListLLM'], 'repr': \"FakeListLLM(responses=['foo', 'bar'])\", 'name': 'FakeListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your favorite color?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000003'), tags=['seq:step:2'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000003.20230101T000000000000Z00000000-0000-4000-8000-000000000005', trace_id=UUID('00000000-0000-4000-8000-000000000003'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000003')),",
          "",
          "[Added Lines]",
          "1472:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': 'foo'}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo', 'bar'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeListLLM'], 'repr': \"FakeListLLM(responses=['foo', 'bar'])\", 'name': 'FakeListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "1477:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': 'bar'}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo', 'bar'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 2, 'metadata': {'ls_provider': 'fakelist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeListLLM'], 'repr': \"FakeListLLM(responses=['foo', 'bar'])\", 'name': 'FakeListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'bar', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "1478:     RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your favorite color?'}, outputs={'output': 'foo'}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000004'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your favorite color?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your favorite color?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000003'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000003.20230101T000000000000Z00000000-0000-4000-8000-000000000004', trace_id=UUID('00000000-0000-4000-8000-000000000003')), RunTree(id=UUID('00000000-0000-4000-8000-000000000005'), name='FakeListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo', 'bar'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 2, 'metadata': {'ls_provider': 'fakelist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeListLLM'], 'repr': \"FakeListLLM(responses=['foo', 'bar'])\", 'name': 'FakeListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your favorite color?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000003'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000003.20230101T000000000000Z00000000-0000-4000-8000-000000000005', trace_id=UUID('00000000-0000-4000-8000-000000000003'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000003')),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1598: # ---",
          "1599: # name: test_prompt_with_llm_and_async_lambda.1",
          "1600:   list([",
          "1602:   ])",
          "1603: # ---",
          "1604: # name: test_prompt_with_llm_parser",
          "",
          "[Removed Lines]",
          "1601:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': 'foo'}, reference_example_id=None, parent_run_id=None, tags=[], child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo', 'bar'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeListLLM'], 'repr': \"FakeListLLM(responses=['foo', 'bar'])\", 'name': 'FakeListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='passthrough', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': 'foo'}, outputs={'output': 'foo'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "[Added Lines]",
          "1601:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': 'foo'}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo', 'bar'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeListLLM'], 'repr': \"FakeListLLM(responses=['foo', 'bar'])\", 'name': 'FakeListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='passthrough', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': 'foo'}, outputs={'output': 'foo'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1722: # ---",
          "1723: # name: test_prompt_with_llm_parser.1",
          "1724:   list([",
          "1726:   ])",
          "1727: # ---",
          "1728: # name: test_prompt_with_llm_parser.2",
          "1729:   list([",
          "1732:   ])",
          "1733: # ---",
          "1734: # name: test_router_runnable",
          "",
          "[Removed Lines]",
          "1725:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ['bear', 'dog', 'cat']}, reference_example_id=None, parent_run_id=None, tags=[], child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeStreamingListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['bear, dog, cat', 'tomato, lettuce, onion'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakestreaminglist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeStreamingListLLM'], 'repr': \"FakeStreamingListLLM(responses=['bear, dog, cat', 'tomato, lettuce, onion'])\", 'name': 'FakeStreamingListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'bear, dog, cat', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': 'bear, dog, cat'}, outputs={'output': ['bear', 'dog', 'cat']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "1730:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ['tomato', 'lettuce', 'onion']}, reference_example_id=None, parent_run_id=None, tags=[], child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeStreamingListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['bear, dog, cat', 'tomato, lettuce, onion'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 2, 'metadata': {'ls_provider': 'fakestreaminglist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeStreamingListLLM'], 'repr': \"FakeStreamingListLLM(responses=['bear, dog, cat', 'tomato, lettuce, onion'])\", 'name': 'FakeStreamingListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'tomato, lettuce, onion', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': 'tomato, lettuce, onion'}, outputs={'output': ['tomato', 'lettuce', 'onion']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "1731:     RunTree(id=UUID('00000000-0000-4000-8000-000000000004'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your favorite color?'}, outputs={'output': ['bear', 'dog', 'cat']}, reference_example_id=None, parent_run_id=None, tags=[], child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000005'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your favorite color?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your favorite color?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000004'), tags=['seq:step:1'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000004.20230101T000000000000Z00000000-0000-4000-8000-000000000005', trace_id=UUID('00000000-0000-4000-8000-000000000004')), RunTree(id=UUID('00000000-0000-4000-8000-000000000006'), name='FakeStreamingListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['bear, dog, cat', 'tomato, lettuce, onion'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 2, 'metadata': {'ls_provider': 'fakestreaminglist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeStreamingListLLM'], 'repr': \"FakeStreamingListLLM(responses=['bear, dog, cat', 'tomato, lettuce, onion'])\", 'name': 'FakeStreamingListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your favorite color?']}, outputs={'generations': [[{'text': 'bear, dog, cat', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000004'), tags=['seq:step:2'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000004.20230101T000000000000Z00000000-0000-4000-8000-000000000006', trace_id=UUID('00000000-0000-4000-8000-000000000004')), RunTree(id=UUID('00000000-0000-4000-8000-000000000007'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': 'bear, dog, cat'}, outputs={'output': ['bear', 'dog', 'cat']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000004'), tags=['seq:step:3'], child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000004.20230101T000000000000Z00000000-0000-4000-8000-000000000007', trace_id=UUID('00000000-0000-4000-8000-000000000004'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000004', trace_id=UUID('00000000-0000-4000-8000-000000000004')),",
          "",
          "[Added Lines]",
          "1725:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ['bear', 'dog', 'cat']}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeStreamingListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['bear, dog, cat', 'tomato, lettuce, onion'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakestreaminglist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeStreamingListLLM'], 'repr': \"FakeStreamingListLLM(responses=['bear, dog, cat', 'tomato, lettuce, onion'])\", 'name': 'FakeStreamingListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'bear, dog, cat', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': 'bear, dog, cat'}, outputs={'output': ['bear', 'dog', 'cat']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "1730:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ['tomato', 'lettuce', 'onion']}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeStreamingListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['bear, dog, cat', 'tomato, lettuce, onion'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 2, 'metadata': {'ls_provider': 'fakestreaminglist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeStreamingListLLM'], 'repr': \"FakeStreamingListLLM(responses=['bear, dog, cat', 'tomato, lettuce, onion'])\", 'name': 'FakeStreamingListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'tomato, lettuce, onion', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': 'tomato, lettuce, onion'}, outputs={'output': ['tomato', 'lettuce', 'onion']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "1731:     RunTree(id=UUID('00000000-0000-4000-8000-000000000004'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your favorite color?'}, outputs={'output': ['bear', 'dog', 'cat']}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000005'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your favorite color?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your favorite color?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000004'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000004.20230101T000000000000Z00000000-0000-4000-8000-000000000005', trace_id=UUID('00000000-0000-4000-8000-000000000004')), RunTree(id=UUID('00000000-0000-4000-8000-000000000006'), name='FakeStreamingListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['bear, dog, cat', 'tomato, lettuce, onion'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 2, 'metadata': {'ls_provider': 'fakestreaminglist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeStreamingListLLM'], 'repr': \"FakeStreamingListLLM(responses=['bear, dog, cat', 'tomato, lettuce, onion'])\", 'name': 'FakeStreamingListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your favorite color?']}, outputs={'generations': [[{'text': 'bear, dog, cat', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000004'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000004.20230101T000000000000Z00000000-0000-4000-8000-000000000006', trace_id=UUID('00000000-0000-4000-8000-000000000004')), RunTree(id=UUID('00000000-0000-4000-8000-000000000007'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': 'bear, dog, cat'}, outputs={'output': ['bear', 'dog', 'cat']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000004'), tags=['seq:step:3'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000004.20230101T000000000000Z00000000-0000-4000-8000-000000000007', trace_id=UUID('00000000-0000-4000-8000-000000000004'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000004', trace_id=UUID('00000000-0000-4000-8000-000000000004')),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "764e020a8eee4043614bc43ec67f9166bae055d9",
      "candidate_info": {
        "commit_hash": "764e020a8eee4043614bc43ec67f9166bae055d9",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/764e020a8eee4043614bc43ec67f9166bae055d9",
        "files": [
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml",
          "libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr"
        ],
        "message": "core: bump langsmith sdk version, run ci",
        "before_after_code_files": [
          "libs/core/poetry.lock||libs/core/poetry.lock",
          "libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr||libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1208: [[package]]",
          "1209: name = \"langchain-text-splitters\"",
          "1211: description = \"LangChain text splitting utilities\"",
          "1212: optional = false",
          "1213: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "1210: version = \"0.3.0\"",
          "",
          "[Added Lines]",
          "1210: version = \"0.3.1\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1215: develop = true",
          "1217: [package.dependencies]",
          "1220: [package.source]",
          "1221: type = \"directory\"",
          "",
          "[Removed Lines]",
          "1218: langchain-core = \"^0.3.0\"",
          "",
          "[Added Lines]",
          "1218: langchain-core = \"^0.3.13\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1224: [[package]]",
          "1225: name = \"langsmith\"",
          "1227: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "1228: optional = false",
          "1229: python-versions = \"<4.0,>=3.8.1\"",
          "1230: files = [",
          "1233: ]",
          "1235: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1226: version = \"0.1.137\"",
          "1231:     {file = \"langsmith-0.1.137-py3-none-any.whl\", hash = \"sha256:4256d5c61133749890f7b5c88321dbb133ce0f440c621ea28e76513285859b81\"},",
          "1232:     {file = \"langsmith-0.1.137.tar.gz\", hash = \"sha256:56cdfcc6c74cb20a3f437d5bd144feb5bf93f54c5a2918d1e568cbd084a372d4\"},",
          "",
          "[Added Lines]",
          "1226: version = \"0.1.139rc1\"",
          "1231:     {file = \"langsmith-0.1.139rc1-py3-none-any.whl\", hash = \"sha256:539144338fbe4a32d0cc11e69f967b53fe567cb698f7b9b66abb97048489e923\"},",
          "1232:     {file = \"langsmith-0.1.139rc1.tar.gz\", hash = \"sha256:efada0a96f335446128606ecc4fa42bba8b15dfbd84f16d1ae00b95ba560d5d2\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2976: [metadata]",
          "2977: lock-version = \"2.0\"",
          "2978: python-versions = \">=3.9,<4.0\"",
          "",
          "[Removed Lines]",
          "2979: content-hash = \"3c680384ebb62b873c70201979927665c8fcce32dbf1df7457d12e83fba15ac2\"",
          "",
          "[Added Lines]",
          "2979: content-hash = \"249cdc5215b1d6cb1337a6d91ae748a3321673a8fe4444ee19d667e9f058a12f\"",
          "",
          "---------------"
        ],
        "libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr||libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr": [
          "File: libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr -> libs/core/tests/unit_tests/runnables/__snapshots__/test_runnable.ambr",
          "--- Hunk 1 ---",
          "[Context before]",
          "480: # ---",
          "481: # name: test_combining_sequences.3",
          "482:   list([",
          "484:   ])",
          "485: # ---",
          "486: # name: test_configurable_fields[schema2]",
          "",
          "[Removed Lines]",
          "483:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ['baz', 'qux']}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo, bar'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['foo, bar'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo, bar', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'foo, bar', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000002-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': AIMessage(content='foo, bar', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000004')}, outputs={'output': ['foo', 'bar']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000005'), name='RunnableLambda', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': ['foo', 'bar']}, outputs={'question': 'foobar'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:4'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000005', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000006'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nicer assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'foobar'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nicer assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='foobar', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:5'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000006', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000007'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['baz, qux'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['baz, qux'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nicer assistant.\\nHuman: foobar']}, outputs={'generations': [[{'text': 'baz, qux', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'baz, qux', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000006-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:6'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000007', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000008'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': AIMessage(content='baz, qux', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000009')}, outputs={'output': ['baz', 'qux']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:7'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000008', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "[Added Lines]",
          "483:     RunTree(id=00000000-0000-4000-8000-000000000000, name='RunnableSequence', run_type='chain', dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1119: # ---",
          "1120: # name: test_prompt_with_chat_model.2",
          "1121:   list([",
          "1123:   ])",
          "1124: # ---",
          "1125: # name: test_prompt_with_chat_model_and_parser",
          "",
          "[Removed Lines]",
          "1122:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': AIMessage(content='foo', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000003')}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['foo'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'foo', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000002-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "[Added Lines]",
          "1122:     RunTree(id=00000000-0000-4000-8000-000000000000, name='RunnableSequence', run_type='chain', dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000'),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1243: # ---",
          "1244: # name: test_prompt_with_chat_model_and_parser.1",
          "1245:   list([",
          "1247:   ])",
          "1248: # ---",
          "1249: # name: test_prompt_with_chat_model_async",
          "",
          "[Removed Lines]",
          "1246:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ['foo', 'bar']}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo, bar'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['foo, bar'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo, bar', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'foo, bar', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000002-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': AIMessage(content='foo, bar', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000004')}, outputs={'output': ['foo', 'bar']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "[Added Lines]",
          "1246:     RunTree(id=00000000-0000-4000-8000-000000000000, name='RunnableSequence', run_type='chain', dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000'),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1359: # ---",
          "1360: # name: test_prompt_with_chat_model_async.2",
          "1361:   list([",
          "1363:   ])",
          "1364: # ---",
          "1365: # name: test_prompt_with_llm",
          "",
          "[Removed Lines]",
          "1362:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': AIMessage(content='foo', additional_kwargs={}, response_metadata={}, id='00000000-0000-4000-8000-000000000003')}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListChatModel', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo'], '_type': 'fake-list-chat-model', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelistchatmodel', 'ls_model_type': 'chat'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake_chat_models', 'FakeListChatModel'], 'repr': \"FakeListChatModel(responses=['foo'])\", 'name': 'FakeListChatModel'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'ChatGeneration', 'message': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'schema', 'messages', 'AIMessage'], 'kwargs': {'content': 'foo', 'type': 'ai', 'id': 'run-00000000-0000-4000-8000-000000000002-0', 'tool_calls': [], 'invalid_tool_calls': []}}}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "[Added Lines]",
          "1362:     RunTree(id=00000000-0000-4000-8000-000000000000, name='RunnableSequence', run_type='chain', dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000'),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1469: # ---",
          "1470: # name: test_prompt_with_llm.1",
          "1471:   list([",
          "1473:   ])",
          "1474: # ---",
          "1475: # name: test_prompt_with_llm.2",
          "1476:   list([",
          "1479:   ])",
          "1480: # ---",
          "1481: # name: test_prompt_with_llm_and_async_lambda",
          "",
          "[Removed Lines]",
          "1472:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': 'foo'}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo', 'bar'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeListLLM'], 'repr': \"FakeListLLM(responses=['foo', 'bar'])\", 'name': 'FakeListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "1477:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': 'bar'}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo', 'bar'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 2, 'metadata': {'ls_provider': 'fakelist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeListLLM'], 'repr': \"FakeListLLM(responses=['foo', 'bar'])\", 'name': 'FakeListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'bar', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "1478:     RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your favorite color?'}, outputs={'output': 'foo'}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000004'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your favorite color?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your favorite color?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000003'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000003.20230101T000000000000Z00000000-0000-4000-8000-000000000004', trace_id=UUID('00000000-0000-4000-8000-000000000003')), RunTree(id=UUID('00000000-0000-4000-8000-000000000005'), name='FakeListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo', 'bar'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 2, 'metadata': {'ls_provider': 'fakelist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeListLLM'], 'repr': \"FakeListLLM(responses=['foo', 'bar'])\", 'name': 'FakeListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your favorite color?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000003'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000003.20230101T000000000000Z00000000-0000-4000-8000-000000000005', trace_id=UUID('00000000-0000-4000-8000-000000000003'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000003')),",
          "",
          "[Added Lines]",
          "1472:     RunTree(id=00000000-0000-4000-8000-000000000000, name='RunnableSequence', run_type='chain', dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000'),",
          "1477:     RunTree(id=00000000-0000-4000-8000-000000000000, name='RunnableSequence', run_type='chain', dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000'),",
          "1478:     RunTree(id=00000000-0000-4000-8000-000000000003, name='RunnableSequence', run_type='chain', dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000003'),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1598: # ---",
          "1599: # name: test_prompt_with_llm_and_async_lambda.1",
          "1600:   list([",
          "1602:   ])",
          "1603: # ---",
          "1604: # name: test_prompt_with_llm_parser",
          "",
          "[Removed Lines]",
          "1601:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': 'foo'}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['foo', 'bar'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakelist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeListLLM'], 'repr': \"FakeListLLM(responses=['foo', 'bar'])\", 'name': 'FakeListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'foo', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='passthrough', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': 'foo'}, outputs={'output': 'foo'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "[Added Lines]",
          "1601:     RunTree(id=00000000-0000-4000-8000-000000000000, name='RunnableSequence', run_type='chain', dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000'),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1722: # ---",
          "1723: # name: test_prompt_with_llm_parser.1",
          "1724:   list([",
          "1726:   ])",
          "1727: # ---",
          "1728: # name: test_router_runnable",
          "",
          "[Removed Lines]",
          "1725:     RunTree(id=UUID('00000000-0000-4000-8000-000000000000'), name='RunnableSequence', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='chain', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ['bear', 'dog', 'cat']}, reference_example_id=None, parent_run_id=None, tags=[], attachments={}, child_runs=[RunTree(id=UUID('00000000-0000-4000-8000-000000000001'), name='ChatPromptTemplate', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='prompt', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized={'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'ChatPromptTemplate'], 'kwargs': {'input_variables': ['question'], 'messages': [{'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'SystemMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': [], 'template': 'You are a nice assistant.', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}, {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'chat', 'HumanMessagePromptTemplate'], 'kwargs': {'prompt': {'lc': 1, 'type': 'constructor', 'id': ['langchain', 'prompts', 'prompt', 'PromptTemplate'], 'kwargs': {'input_variables': ['question'], 'template': '{question}', 'template_format': 'f-string'}, 'name': 'PromptTemplate'}}}]}, 'name': 'ChatPromptTemplate'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'question': 'What is your name?'}, outputs={'output': ChatPromptValue(messages=[SystemMessage(content='You are a nice assistant.', additional_kwargs={}, response_metadata={}), HumanMessage(content='What is your name?', additional_kwargs={}, response_metadata={})])}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:1'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000001', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000002'), name='FakeStreamingListLLM', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='llm', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={'invocation_params': {'responses': ['bear, dog, cat', 'tomato, lettuce, onion'], '_type': 'fake-list', 'stop': None}, 'options': {'stop': None}, 'batch_size': 1, 'metadata': {'ls_provider': 'fakestreaminglist', 'ls_model_type': 'llm'}}, error=None, serialized={'lc': 1, 'type': 'not_implemented', 'id': ['langchain_core', 'language_models', 'fake', 'FakeStreamingListLLM'], 'repr': \"FakeStreamingListLLM(responses=['bear, dog, cat', 'tomato, lettuce, onion'])\", 'name': 'FakeStreamingListLLM'}, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'prompts': ['System: You are a nice assistant.\\nHuman: What is your name?']}, outputs={'generations': [[{'text': 'bear, dog, cat', 'generation_info': None, 'type': 'Generation'}]], 'llm_output': None, 'run': None, 'type': 'LLMResult'}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:2'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000002', trace_id=UUID('00000000-0000-4000-8000-000000000000')), RunTree(id=UUID('00000000-0000-4000-8000-000000000003'), name='CommaSeparatedListOutputParser', start_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), run_type='parser', end_time=FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), extra={}, error=None, serialized=None, events=[{'name': 'start', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}, {'name': 'end', 'time': FakeDatetime(2023, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)}], inputs={'input': 'bear, dog, cat'}, outputs={'output': ['bear', 'dog', 'cat']}, reference_example_id=None, parent_run_id=UUID('00000000-0000-4000-8000-000000000000'), tags=['seq:step:3'], attachments={}, child_runs=[], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000.20230101T000000000000Z00000000-0000-4000-8000-000000000003', trace_id=UUID('00000000-0000-4000-8000-000000000000'))], session_name='default', session_id=None, dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000', trace_id=UUID('00000000-0000-4000-8000-000000000000')),",
          "",
          "[Added Lines]",
          "1725:     RunTree(id=00000000-0000-4000-8000-000000000000, name='RunnableSequence', run_type='chain', dotted_order='20230101T000000000000Z00000000-0000-4000-8000-000000000000'),",
          "",
          "---------------"
        ]
      }
    }
  ]
}