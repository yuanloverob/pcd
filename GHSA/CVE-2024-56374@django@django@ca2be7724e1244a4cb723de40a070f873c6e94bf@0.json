{
  "cve_id": "CVE-2024-56374",
  "cve_desc": "An issue was discovered in Django 5.1 before 5.1.5, 5.0 before 5.0.11, and 4.2 before 4.2.18. Lack of upper-bound limit enforcement in strings passed when performing IPv6 validation could lead to a potential denial-of-service attack. The undocumented and private functions clean_ipv6_address and is_valid_ipv6_address are vulnerable, as is the django.forms.GenericIPAddressField form field. (The django.db.models.GenericIPAddressField model field is not affected.)",
  "repo": "django/django",
  "patch_hash": "ca2be7724e1244a4cb723de40a070f873c6e94bf",
  "patch_info": {
    "commit_hash": "ca2be7724e1244a4cb723de40a070f873c6e94bf",
    "repo": "django/django",
    "commit_url": "https://github.com/django/django/commit/ca2be7724e1244a4cb723de40a070f873c6e94bf",
    "files": [
      "django/db/models/fields/__init__.py",
      "django/forms/fields.py",
      "django/utils/ipv6.py",
      "docs/ref/forms/fields.txt",
      "docs/releases/4.2.18.txt",
      "docs/releases/5.0.11.txt",
      "docs/releases/5.1.5.txt",
      "tests/forms_tests/field_tests/test_genericipaddressfield.py",
      "tests/utils_tests/test_ipv6.py"
    ],
    "message": "Fixed CVE-2024-56374 -- Mitigated potential DoS in IPv6 validation.\n\nThanks Saravana Kumar for the report, and Sarah Boyce and Mariusz\nFelisiak for the reviews.\n\nCo-authored-by: Natalia <124304+nessita@users.noreply.github.com>",
    "before_after_code_files": [
      "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py",
      "django/forms/fields.py||django/forms/fields.py",
      "django/utils/ipv6.py||django/utils/ipv6.py",
      "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py",
      "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py"
    ]
  },
  "patch_diff": {
    "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py": [
      "File: django/db/models/fields/__init__.py -> django/db/models/fields/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: )",
      "33: from django.utils.duration import duration_microseconds, duration_string",
      "34: from django.utils.functional import Promise, cached_property",
      "36: from django.utils.text import capfirst",
      "37: from django.utils.translation import gettext_lazy as _",
      "",
      "[Removed Lines]",
      "35: from django.utils.ipv6 import clean_ipv6_address",
      "",
      "[Added Lines]",
      "35: from django.utils.ipv6 import MAX_IPV6_ADDRESS_LENGTH, clean_ipv6_address",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2233:         self.default_validators = validators.ip_address_validators(",
      "2234:             protocol, unpack_ipv4",
      "2235:         )",
      "2237:         super().__init__(verbose_name, name, *args, **kwargs)",
      "2239:     def check(self, **kwargs):",
      "",
      "[Removed Lines]",
      "2236:         kwargs[\"max_length\"] = 39",
      "",
      "[Added Lines]",
      "2236:         kwargs[\"max_length\"] = MAX_IPV6_ADDRESS_LENGTH",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2260:             kwargs[\"unpack_ipv4\"] = self.unpack_ipv4",
      "2261:         if self.protocol != \"both\":",
      "2262:             kwargs[\"protocol\"] = self.protocol",
      "2264:             del kwargs[\"max_length\"]",
      "2265:         return name, path, args, kwargs",
      "",
      "[Removed Lines]",
      "2263:         if kwargs.get(\"max_length\") == 39:",
      "",
      "[Added Lines]",
      "2263:         if kwargs.get(\"max_length\") == self.max_length:",
      "",
      "---------------"
    ],
    "django/forms/fields.py||django/forms/fields.py": [
      "File: django/forms/fields.py -> django/forms/fields.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "46: from django.utils.dateparse import parse_datetime, parse_duration",
      "47: from django.utils.deprecation import RemovedInDjango60Warning",
      "48: from django.utils.duration import duration_string",
      "50: from django.utils.regex_helper import _lazy_re_compile",
      "51: from django.utils.translation import gettext_lazy as _",
      "52: from django.utils.translation import ngettext_lazy",
      "",
      "[Removed Lines]",
      "49: from django.utils.ipv6 import clean_ipv6_address",
      "",
      "[Added Lines]",
      "49: from django.utils.ipv6 import MAX_IPV6_ADDRESS_LENGTH, clean_ipv6_address",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1303:         self.default_validators = validators.ip_address_validators(",
      "1304:             protocol, unpack_ipv4",
      "1305:         )",
      "1306:         super().__init__(**kwargs)",
      "1308:     def to_python(self, value):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1306:         kwargs.setdefault(\"max_length\", MAX_IPV6_ADDRESS_LENGTH)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1310:             return \"\"",
      "1311:         value = value.strip()",
      "1312:         if value and \":\" in value:",
      "1314:         return value",
      "",
      "[Removed Lines]",
      "1313:             return clean_ipv6_address(value, self.unpack_ipv4)",
      "",
      "[Added Lines]",
      "1314:             return clean_ipv6_address(",
      "1315:                 value, self.unpack_ipv4, max_length=self.max_length",
      "1316:             )",
      "",
      "---------------"
    ],
    "django/utils/ipv6.py||django/utils/ipv6.py": [
      "File: django/utils/ipv6.py -> django/utils/ipv6.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: from django.core.exceptions import ValidationError",
      "4: from django.utils.translation import gettext_lazy as _",
      "7: def clean_ipv6_address(",
      "9: ):",
      "10:     \"\"\"",
      "11:     Clean an IPv6 address string.",
      "",
      "[Removed Lines]",
      "8:     ip_str, unpack_ipv4=False, error_message=_(\"This is not a valid IPv6 address.\")",
      "",
      "[Added Lines]",
      "6: MAX_IPV6_ADDRESS_LENGTH = 39",
      "9: def _ipv6_address_from_str(ip_str, max_length=MAX_IPV6_ADDRESS_LENGTH):",
      "10:     if len(ip_str) > max_length:",
      "11:         raise ValueError(",
      "12:             f\"Unable to convert {ip_str} to an IPv6 address (value too long).\"",
      "13:         )",
      "14:     return ipaddress.IPv6Address(int(ipaddress.IPv6Address(ip_str)))",
      "18:     ip_str,",
      "19:     unpack_ipv4=False,",
      "20:     error_message=_(\"This is not a valid IPv6 address.\"),",
      "21:     max_length=MAX_IPV6_ADDRESS_LENGTH,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "24:     Return a compressed IPv6 address or the same value.",
      "25:     \"\"\"",
      "26:     try:",
      "28:     except ValueError:",
      "29:         raise ValidationError(",
      "30:             error_message, code=\"invalid\", params={\"protocol\": _(\"IPv6\")}",
      "",
      "[Removed Lines]",
      "27:         addr = ipaddress.IPv6Address(int(ipaddress.IPv6Address(ip_str)))",
      "",
      "[Added Lines]",
      "40:         addr = _ipv6_address_from_str(ip_str, max_length)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "43:     Return whether or not the `ip_str` string is a valid IPv6 address.",
      "44:     \"\"\"",
      "45:     try:",
      "47:     except ValueError:",
      "48:         return False",
      "49:     return True",
      "",
      "[Removed Lines]",
      "46:         ipaddress.IPv6Address(ip_str)",
      "",
      "[Added Lines]",
      "59:         _ipv6_address_from_str(ip_str)",
      "",
      "---------------"
    ],
    "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py": [
      "File: tests/forms_tests/field_tests/test_genericipaddressfield.py -> tests/forms_tests/field_tests/test_genericipaddressfield.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: from django.core.exceptions import ValidationError",
      "2: from django.forms import GenericIPAddressField",
      "3: from django.test import SimpleTestCase",
      "6: class GenericIPAddressFieldTest(SimpleTestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: from django.utils.ipv6 import MAX_IPV6_ADDRESS_LENGTH",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "125:         ):",
      "126:             f.clean(\"1:2\")",
      "128:     def test_generic_ipaddress_as_generic_not_required(self):",
      "129:         f = GenericIPAddressField(required=False)",
      "130:         self.assertEqual(f.clean(\"\"), \"\")",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "129:     def test_generic_ipaddress_max_length_custom(self):",
      "130:         # Valid IPv4-mapped IPv6 address, len 45.",
      "131:         addr = \"0000:0000:0000:0000:0000:ffff:192.168.100.228\"",
      "132:         f = GenericIPAddressField(max_length=len(addr))",
      "133:         f.clean(addr)",
      "135:     def test_generic_ipaddress_max_length_validation_error(self):",
      "136:         # Valid IPv4-mapped IPv6 address, len 45.",
      "137:         addr = \"0000:0000:0000:0000:0000:ffff:192.168.100.228\"",
      "139:         cases = [",
      "140:             ({}, MAX_IPV6_ADDRESS_LENGTH),  # Default value.",
      "141:             ({\"max_length\": len(addr) - 1}, len(addr) - 1),",
      "142:         ]",
      "143:         for kwargs, max_length in cases:",
      "144:             max_length_plus_one = max_length + 1",
      "145:             msg = (",
      "146:                 f\"Ensure this value has at most {max_length} characters (it has \"",
      "147:                 f\"{max_length_plus_one}).'\"",
      "148:             )",
      "149:             with self.subTest(max_length=max_length):",
      "150:                 f = GenericIPAddressField(**kwargs)",
      "151:                 with self.assertRaisesMessage(ValidationError, msg):",
      "152:                     f.clean(\"x\" * max_length_plus_one)",
      "153:                 with self.assertRaisesMessage(",
      "154:                     ValidationError, \"This is not a valid IPv6 address.\"",
      "155:                 ):",
      "156:                     f.clean(addr)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "150:             f.clean(\" fe80::223:6cff:fe8a:2e8a \"), \"fe80::223:6cff:fe8a:2e8a\"",
      "151:         )",
      "152:         self.assertEqual(",
      "154:         )",
      "155:         with self.assertRaisesMessage(",
      "156:             ValidationError, \"'This is not a valid IPv6 address.'\"",
      "",
      "[Removed Lines]",
      "153:             f.clean(\" 2a02::223:6cff:fe8a:2e8a \"), \"2a02::223:6cff:fe8a:2e8a\"",
      "",
      "[Added Lines]",
      "183:             f.clean(\" \" * MAX_IPV6_ADDRESS_LENGTH + \" 2a02::223:6cff:fe8a:2e8a \"),",
      "184:             \"2a02::223:6cff:fe8a:2e8a\",",
      "",
      "---------------"
    ],
    "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py": [
      "File: tests/utils_tests/test_ipv6.py -> tests/utils_tests/test_ipv6.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:     def test_validates_correct_plain_address(self):",
      "8:         self.assertTrue(is_valid_ipv6_address(\"fe80::223:6cff:fe8a:2e8a\"))",
      "9:         self.assertTrue(is_valid_ipv6_address(\"2a02::223:6cff:fe8a:2e8a\"))",
      "",
      "[Removed Lines]",
      "1: import unittest",
      "3: from django.utils.ipv6 import clean_ipv6_address, is_valid_ipv6_address",
      "6: class TestUtilsIPv6(unittest.TestCase):",
      "",
      "[Added Lines]",
      "1: import traceback",
      "2: from io import StringIO",
      "4: from django.core.exceptions import ValidationError",
      "5: from django.test import SimpleTestCase",
      "6: from django.utils.ipv6 import (",
      "7:     MAX_IPV6_ADDRESS_LENGTH,",
      "8:     clean_ipv6_address,",
      "9:     is_valid_ipv6_address,",
      "10: )",
      "13: class TestUtilsIPv6(SimpleTestCase):",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "64:         self.assertEqual(",
      "65:             clean_ipv6_address(\"::ffff:18.52.18.52\", unpack_ipv4=True), \"18.52.18.52\"",
      "66:         )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "75:     def test_address_too_long(self):",
      "76:         addresses = [",
      "77:             \"0000:0000:0000:0000:0000:ffff:192.168.100.228\",  # IPv4-mapped IPv6 address",
      "78:             \"0000:0000:0000:0000:0000:ffff:192.168.100.228%123456\",  # % scope/zone",
      "79:             \"fe80::223:6cff:fe8a:2e8a:1234:5678:00000\",  # MAX_IPV6_ADDRESS_LENGTH + 1",
      "80:         ]",
      "81:         msg = \"This is the error message.\"",
      "82:         value_error_msg = \"Unable to convert %s to an IPv6 address (value too long).\"",
      "83:         for addr in addresses:",
      "84:             with self.subTest(addr=addr):",
      "85:                 self.assertGreater(len(addr), MAX_IPV6_ADDRESS_LENGTH)",
      "86:                 self.assertEqual(is_valid_ipv6_address(addr), False)",
      "87:                 with self.assertRaisesMessage(ValidationError, msg) as ctx:",
      "88:                     clean_ipv6_address(addr, error_message=msg)",
      "89:                 exception_traceback = StringIO()",
      "90:                 traceback.print_exception(ctx.exception, file=exception_traceback)",
      "91:                 self.assertIn(value_error_msg % addr, exception_traceback.getvalue())",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b3c5830769d8a5dbf2f974da7116fe503c9454d9",
      "candidate_info": {
        "commit_hash": "b3c5830769d8a5dbf2f974da7116fe503c9454d9",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/b3c5830769d8a5dbf2f974da7116fe503c9454d9",
        "files": [
          "django/utils/ipv6.py",
          "docs/releases/4.2.19.txt",
          "docs/releases/5.0.12.txt",
          "docs/releases/5.1.6.txt",
          "docs/releases/index.txt",
          "tests/utils_tests/test_ipv6.py",
          "tests/validators/tests.py"
        ],
        "message": "Fixed #36098 -- Fixed validate_ipv6_address()/validate_ipv46_address() crash for non-string values.\n\nRegression in ca2be7724e1244a4cb723de40a070f873c6e94bf.",
        "before_after_code_files": [
          "django/utils/ipv6.py||django/utils/ipv6.py",
          "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py",
          "tests/validators/tests.py||tests/validators/tests.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "django/utils/ipv6.py||django/utils/ipv6.py",
            "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py"
          ],
          "candidate": [
            "django/utils/ipv6.py||django/utils/ipv6.py",
            "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py"
          ]
        }
      },
      "candidate_diff": {
        "django/utils/ipv6.py||django/utils/ipv6.py": [
          "File: django/utils/ipv6.py -> django/utils/ipv6.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     return str(addr)",
          "55:     \"\"\"",
          "57:     \"\"\"",
          "58:     try:",
          "61:         return False",
          "62:     return True",
          "",
          "[Removed Lines]",
          "54: def is_valid_ipv6_address(ip_str):",
          "56:     Return whether or not the `ip_str` string is a valid IPv6 address.",
          "59:         _ipv6_address_from_str(ip_str)",
          "60:     except ValueError:",
          "",
          "[Added Lines]",
          "54: def is_valid_ipv6_address(ip_addr):",
          "56:     Return whether the `ip_addr` object is a valid IPv6 address.",
          "58:     if isinstance(ip_addr, ipaddress.IPv6Address):",
          "59:         return True",
          "61:         _ipv6_address_from_str(ip_addr)",
          "62:     except (TypeError, ValueError):",
          "",
          "---------------"
        ],
        "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py": [
          "File: tests/utils_tests/test_ipv6.py -> tests/utils_tests/test_ipv6.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import traceback",
          "2: from io import StringIO",
          "4: from django.core.exceptions import ValidationError",
          "5: from django.test import SimpleTestCase",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: from decimal import Decimal",
          "4: from ipaddress import IPv6Address",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:         self.assertTrue(is_valid_ipv6_address(\"::ffff:254.42.16.14\"))",
          "24:         self.assertTrue(is_valid_ipv6_address(\"::ffff:0a0a:0a0a\"))",
          "26:     def test_validates_incorrect_plain_address(self):",
          "27:         self.assertFalse(is_valid_ipv6_address(\"foo\"))",
          "28:         self.assertFalse(is_valid_ipv6_address(\"127.0.0.1\"))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:     def test_validates_correct_with_ipv6_instance(self):",
          "29:         cases = [",
          "30:             IPv6Address(\"::ffff:2.125.160.216\"),",
          "31:             IPv6Address(\"fe80::1\"),",
          "32:             IPv6Address(\"::\"),",
          "33:         ]",
          "34:         for case in cases:",
          "35:             with self.subTest(case=case):",
          "36:                 self.assertIs(is_valid_ipv6_address(case), True)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:         self.assertFalse(is_valid_ipv6_address(\"::999.42.16.14\"))",
          "46:         self.assertFalse(is_valid_ipv6_address(\"::zzzz:0a0a\"))",
          "48:     def test_cleans_plain_address(self):",
          "49:         self.assertEqual(clean_ipv6_address(\"DEAD::0:BEEF\"), \"dead::beef\")",
          "50:         self.assertEqual(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     def test_validates_incorrect_with_non_string(self):",
          "61:         cases = [None, [], {}, (), Decimal(\"2.46\"), 192.168, 42]",
          "62:         for case in cases:",
          "63:             with self.subTest(case=case):",
          "64:                 self.assertIs(is_valid_ipv6_address(case), False)",
          "",
          "---------------"
        ],
        "tests/validators/tests.py||tests/validators/tests.py": [
          "File: tests/validators/tests.py -> tests/validators/tests.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import re",
          "2: import types",
          "3: from datetime import datetime, timedelta",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import ipaddress",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:     (validate_ipv6_address, \"fe80::1\", None),",
          "399:     (validate_ipv6_address, \"::1\", None),",
          "400:     (validate_ipv6_address, \"1:2:3:4:5:6:7:8\", None),",
          "401:     (validate_ipv6_address, \"1:2\", ValidationError),",
          "402:     (validate_ipv6_address, \"::zzz\", ValidationError),",
          "403:     (validate_ipv6_address, \"12345::\", ValidationError),",
          "404:     (validate_ipv46_address, \"1.1.1.1\", None),",
          "405:     (validate_ipv46_address, \"255.0.0.0\", None),",
          "406:     (validate_ipv46_address, \"0.0.0.0\", None),",
          "407:     (validate_ipv46_address, \"fe80::1\", None),",
          "408:     (validate_ipv46_address, \"::1\", None),",
          "409:     (validate_ipv46_address, \"1:2:3:4:5:6:7:8\", None),",
          "410:     (validate_ipv46_address, \"256.1.1.1\", ValidationError),",
          "411:     (validate_ipv46_address, \"25.1.1.\", ValidationError),",
          "412:     (validate_ipv46_address, \"25,1,1,1\", ValidationError),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402:     (validate_ipv6_address, ipaddress.IPv6Address(\"::ffff:2.125.160.216\"), None),",
          "403:     (validate_ipv6_address, ipaddress.IPv6Address(\"fe80::1\"), None),",
          "404:     (validate_ipv6_address, Decimal(\"33.1\"), ValidationError),",
          "405:     (validate_ipv6_address, 9.22, ValidationError),",
          "412:     (validate_ipv46_address, ipaddress.IPv4Address(\"1.1.1.1\"), None),",
          "413:     (validate_ipv46_address, ipaddress.IPv4Address(\"255.0.0.0\"), None),",
          "417:     (validate_ipv46_address, ipaddress.IPv6Address(\"::ffff:2.125.160.216\"), None),",
          "418:     (validate_ipv46_address, ipaddress.IPv6Address(\"fe80::1\"), None),",
          "419:     (validate_ipv46_address, Decimal(\"33.1\"), ValidationError),",
          "420:     (validate_ipv46_address, 9.22, ValidationError),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4806731e58f3e8700a3c802e77899d54ac6021fe",
      "candidate_info": {
        "commit_hash": "4806731e58f3e8700a3c802e77899d54ac6021fe",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/4806731e58f3e8700a3c802e77899d54ac6021fe",
        "files": [
          "django/db/models/fields/__init__.py",
          "django/forms/fields.py",
          "django/utils/ipv6.py",
          "docs/ref/forms/fields.txt",
          "docs/releases/4.2.18.txt",
          "docs/releases/5.0.11.txt",
          "docs/releases/5.1.5.txt",
          "tests/forms_tests/field_tests/test_genericipaddressfield.py",
          "tests/utils_tests/test_ipv6.py"
        ],
        "message": "[5.1.x] Fixed CVE-2024-56374 -- Mitigated potential DoS in IPv6 validation.\n\nThanks Saravana Kumar for the report, and Sarah Boyce and Mariusz\nFelisiak for the reviews.\n\nCo-authored-by: Natalia <124304+nessita@users.noreply.github.com>",
        "before_after_code_files": [
          "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py",
          "django/forms/fields.py||django/forms/fields.py",
          "django/utils/ipv6.py||django/utils/ipv6.py",
          "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py",
          "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py",
            "django/forms/fields.py||django/forms/fields.py",
            "django/utils/ipv6.py||django/utils/ipv6.py",
            "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py",
            "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py"
          ],
          "candidate": [
            "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py",
            "django/forms/fields.py||django/forms/fields.py",
            "django/utils/ipv6.py||django/utils/ipv6.py",
            "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py",
            "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py"
          ]
        }
      },
      "candidate_diff": {
        "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py": [
          "File: django/db/models/fields/__init__.py -> django/db/models/fields/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: )",
          "33: from django.utils.duration import duration_microseconds, duration_string",
          "34: from django.utils.functional import Promise, cached_property",
          "36: from django.utils.text import capfirst",
          "37: from django.utils.translation import gettext_lazy as _",
          "",
          "[Removed Lines]",
          "35: from django.utils.ipv6 import clean_ipv6_address",
          "",
          "[Added Lines]",
          "35: from django.utils.ipv6 import MAX_IPV6_ADDRESS_LENGTH, clean_ipv6_address",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2228:         self.default_validators = validators.ip_address_validators(",
          "2229:             protocol, unpack_ipv4",
          "2230:         )",
          "2232:         super().__init__(verbose_name, name, *args, **kwargs)",
          "2234:     def check(self, **kwargs):",
          "",
          "[Removed Lines]",
          "2231:         kwargs[\"max_length\"] = 39",
          "",
          "[Added Lines]",
          "2231:         kwargs[\"max_length\"] = MAX_IPV6_ADDRESS_LENGTH",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2255:             kwargs[\"unpack_ipv4\"] = self.unpack_ipv4",
          "2256:         if self.protocol != \"both\":",
          "2257:             kwargs[\"protocol\"] = self.protocol",
          "2259:             del kwargs[\"max_length\"]",
          "2260:         return name, path, args, kwargs",
          "",
          "[Removed Lines]",
          "2258:         if kwargs.get(\"max_length\") == 39:",
          "",
          "[Added Lines]",
          "2258:         if kwargs.get(\"max_length\") == self.max_length:",
          "",
          "---------------"
        ],
        "django/forms/fields.py||django/forms/fields.py": [
          "File: django/forms/fields.py -> django/forms/fields.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: from django.utils.dateparse import parse_datetime, parse_duration",
          "47: from django.utils.deprecation import RemovedInDjango60Warning",
          "48: from django.utils.duration import duration_string",
          "50: from django.utils.regex_helper import _lazy_re_compile",
          "51: from django.utils.translation import gettext_lazy as _",
          "52: from django.utils.translation import ngettext_lazy",
          "",
          "[Removed Lines]",
          "49: from django.utils.ipv6 import clean_ipv6_address",
          "",
          "[Added Lines]",
          "49: from django.utils.ipv6 import MAX_IPV6_ADDRESS_LENGTH, clean_ipv6_address",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1303:         self.default_validators = validators.ip_address_validators(",
          "1304:             protocol, unpack_ipv4",
          "1305:         )",
          "1306:         super().__init__(**kwargs)",
          "1308:     def to_python(self, value):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1306:         kwargs.setdefault(\"max_length\", MAX_IPV6_ADDRESS_LENGTH)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1310:             return \"\"",
          "1311:         value = value.strip()",
          "1312:         if value and \":\" in value:",
          "1314:         return value",
          "",
          "[Removed Lines]",
          "1313:             return clean_ipv6_address(value, self.unpack_ipv4)",
          "",
          "[Added Lines]",
          "1314:             return clean_ipv6_address(",
          "1315:                 value, self.unpack_ipv4, max_length=self.max_length",
          "1316:             )",
          "",
          "---------------"
        ],
        "django/utils/ipv6.py||django/utils/ipv6.py": [
          "File: django/utils/ipv6.py -> django/utils/ipv6.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from django.core.exceptions import ValidationError",
          "4: from django.utils.translation import gettext_lazy as _",
          "7: def clean_ipv6_address(",
          "9: ):",
          "10:     \"\"\"",
          "11:     Clean an IPv6 address string.",
          "",
          "[Removed Lines]",
          "8:     ip_str, unpack_ipv4=False, error_message=_(\"This is not a valid IPv6 address.\")",
          "",
          "[Added Lines]",
          "6: MAX_IPV6_ADDRESS_LENGTH = 39",
          "9: def _ipv6_address_from_str(ip_str, max_length=MAX_IPV6_ADDRESS_LENGTH):",
          "10:     if len(ip_str) > max_length:",
          "11:         raise ValueError(",
          "12:             f\"Unable to convert {ip_str} to an IPv6 address (value too long).\"",
          "13:         )",
          "14:     return ipaddress.IPv6Address(int(ipaddress.IPv6Address(ip_str)))",
          "18:     ip_str,",
          "19:     unpack_ipv4=False,",
          "20:     error_message=_(\"This is not a valid IPv6 address.\"),",
          "21:     max_length=MAX_IPV6_ADDRESS_LENGTH,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     Return a compressed IPv6 address or the same value.",
          "25:     \"\"\"",
          "26:     try:",
          "28:     except ValueError:",
          "29:         raise ValidationError(",
          "30:             error_message, code=\"invalid\", params={\"protocol\": _(\"IPv6\")}",
          "",
          "[Removed Lines]",
          "27:         addr = ipaddress.IPv6Address(int(ipaddress.IPv6Address(ip_str)))",
          "",
          "[Added Lines]",
          "40:         addr = _ipv6_address_from_str(ip_str, max_length)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:     Return whether or not the `ip_str` string is a valid IPv6 address.",
          "44:     \"\"\"",
          "45:     try:",
          "47:     except ValueError:",
          "48:         return False",
          "49:     return True",
          "",
          "[Removed Lines]",
          "46:         ipaddress.IPv6Address(ip_str)",
          "",
          "[Added Lines]",
          "59:         _ipv6_address_from_str(ip_str)",
          "",
          "---------------"
        ],
        "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py": [
          "File: tests/forms_tests/field_tests/test_genericipaddressfield.py -> tests/forms_tests/field_tests/test_genericipaddressfield.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from django.core.exceptions import ValidationError",
          "2: from django.forms import GenericIPAddressField",
          "3: from django.test import SimpleTestCase",
          "6: class GenericIPAddressFieldTest(SimpleTestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: from django.utils.ipv6 import MAX_IPV6_ADDRESS_LENGTH",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:         ):",
          "126:             f.clean(\"1:2\")",
          "128:     def test_generic_ipaddress_as_generic_not_required(self):",
          "129:         f = GenericIPAddressField(required=False)",
          "130:         self.assertEqual(f.clean(\"\"), \"\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     def test_generic_ipaddress_max_length_custom(self):",
          "130:         # Valid IPv4-mapped IPv6 address, len 45.",
          "131:         addr = \"0000:0000:0000:0000:0000:ffff:192.168.100.228\"",
          "132:         f = GenericIPAddressField(max_length=len(addr))",
          "133:         f.clean(addr)",
          "135:     def test_generic_ipaddress_max_length_validation_error(self):",
          "136:         # Valid IPv4-mapped IPv6 address, len 45.",
          "137:         addr = \"0000:0000:0000:0000:0000:ffff:192.168.100.228\"",
          "139:         cases = [",
          "140:             ({}, MAX_IPV6_ADDRESS_LENGTH),  # Default value.",
          "141:             ({\"max_length\": len(addr) - 1}, len(addr) - 1),",
          "142:         ]",
          "143:         for kwargs, max_length in cases:",
          "144:             max_length_plus_one = max_length + 1",
          "145:             msg = (",
          "146:                 f\"Ensure this value has at most {max_length} characters (it has \"",
          "147:                 f\"{max_length_plus_one}).'\"",
          "148:             )",
          "149:             with self.subTest(max_length=max_length):",
          "150:                 f = GenericIPAddressField(**kwargs)",
          "151:                 with self.assertRaisesMessage(ValidationError, msg):",
          "152:                     f.clean(\"x\" * max_length_plus_one)",
          "153:                 with self.assertRaisesMessage(",
          "154:                     ValidationError, \"This is not a valid IPv6 address.\"",
          "155:                 ):",
          "156:                     f.clean(addr)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:             f.clean(\" fe80::223:6cff:fe8a:2e8a \"), \"fe80::223:6cff:fe8a:2e8a\"",
          "151:         )",
          "152:         self.assertEqual(",
          "154:         )",
          "155:         with self.assertRaisesMessage(",
          "156:             ValidationError, \"'This is not a valid IPv6 address.'\"",
          "",
          "[Removed Lines]",
          "153:             f.clean(\" 2a02::223:6cff:fe8a:2e8a \"), \"2a02::223:6cff:fe8a:2e8a\"",
          "",
          "[Added Lines]",
          "183:             f.clean(\" \" * MAX_IPV6_ADDRESS_LENGTH + \" 2a02::223:6cff:fe8a:2e8a \"),",
          "184:             \"2a02::223:6cff:fe8a:2e8a\",",
          "",
          "---------------"
        ],
        "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py": [
          "File: tests/utils_tests/test_ipv6.py -> tests/utils_tests/test_ipv6.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     def test_validates_correct_plain_address(self):",
          "8:         self.assertTrue(is_valid_ipv6_address(\"fe80::223:6cff:fe8a:2e8a\"))",
          "9:         self.assertTrue(is_valid_ipv6_address(\"2a02::223:6cff:fe8a:2e8a\"))",
          "",
          "[Removed Lines]",
          "1: import unittest",
          "3: from django.utils.ipv6 import clean_ipv6_address, is_valid_ipv6_address",
          "6: class TestUtilsIPv6(unittest.TestCase):",
          "",
          "[Added Lines]",
          "1: import traceback",
          "2: from io import StringIO",
          "4: from django.core.exceptions import ValidationError",
          "5: from django.test import SimpleTestCase",
          "6: from django.utils.ipv6 import (",
          "7:     MAX_IPV6_ADDRESS_LENGTH,",
          "8:     clean_ipv6_address,",
          "9:     is_valid_ipv6_address,",
          "10: )",
          "13: class TestUtilsIPv6(SimpleTestCase):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         self.assertEqual(",
          "65:             clean_ipv6_address(\"::ffff:18.52.18.52\", unpack_ipv4=True), \"18.52.18.52\"",
          "66:         )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     def test_address_too_long(self):",
          "76:         addresses = [",
          "77:             \"0000:0000:0000:0000:0000:ffff:192.168.100.228\",  # IPv4-mapped IPv6 address",
          "78:             \"0000:0000:0000:0000:0000:ffff:192.168.100.228%123456\",  # % scope/zone",
          "79:             \"fe80::223:6cff:fe8a:2e8a:1234:5678:00000\",  # MAX_IPV6_ADDRESS_LENGTH + 1",
          "80:         ]",
          "81:         msg = \"This is the error message.\"",
          "82:         value_error_msg = \"Unable to convert %s to an IPv6 address (value too long).\"",
          "83:         for addr in addresses:",
          "84:             with self.subTest(addr=addr):",
          "85:                 self.assertGreater(len(addr), MAX_IPV6_ADDRESS_LENGTH)",
          "86:                 self.assertEqual(is_valid_ipv6_address(addr), False)",
          "87:                 with self.assertRaisesMessage(ValidationError, msg) as ctx:",
          "88:                     clean_ipv6_address(addr, error_message=msg)",
          "89:                 exception_traceback = StringIO()",
          "90:                 traceback.print_exception(ctx.exception, file=exception_traceback)",
          "91:                 self.assertIn(value_error_msg % addr, exception_traceback.getvalue())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad866a1ca3e7d60da888d25d27e46a8adb2ed36e",
      "candidate_info": {
        "commit_hash": "ad866a1ca3e7d60da888d25d27e46a8adb2ed36e",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/ad866a1ca3e7d60da888d25d27e46a8adb2ed36e",
        "files": [
          "django/db/models/fields/__init__.py",
          "django/forms/fields.py",
          "django/utils/ipv6.py",
          "docs/ref/forms/fields.txt",
          "docs/releases/4.2.18.txt",
          "tests/forms_tests/field_tests/test_genericipaddressfield.py",
          "tests/utils_tests/test_ipv6.py"
        ],
        "message": "[4.2.x] Fixed CVE-2024-56374 -- Mitigated potential DoS in IPv6 validation.\n\nThanks Saravana Kumar for the report, and Sarah Boyce and Mariusz\nFelisiak for the reviews.\n\nCo-authored-by: Natalia <124304+nessita@users.noreply.github.com>",
        "before_after_code_files": [
          "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py",
          "django/forms/fields.py||django/forms/fields.py",
          "django/utils/ipv6.py||django/utils/ipv6.py",
          "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py",
          "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py",
            "django/forms/fields.py||django/forms/fields.py",
            "django/utils/ipv6.py||django/utils/ipv6.py",
            "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py",
            "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py"
          ],
          "candidate": [
            "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py",
            "django/forms/fields.py||django/forms/fields.py",
            "django/utils/ipv6.py||django/utils/ipv6.py",
            "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py",
            "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py"
          ]
        }
      },
      "candidate_diff": {
        "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py": [
          "File: django/db/models/fields/__init__.py -> django/db/models/fields/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: )",
          "26: from django.utils.duration import duration_microseconds, duration_string",
          "27: from django.utils.functional import Promise, cached_property",
          "29: from django.utils.itercompat import is_iterable",
          "30: from django.utils.text import capfirst",
          "31: from django.utils.translation import gettext_lazy as _",
          "",
          "[Removed Lines]",
          "28: from django.utils.ipv6 import clean_ipv6_address",
          "",
          "[Added Lines]",
          "28: from django.utils.ipv6 import MAX_IPV6_ADDRESS_LENGTH, clean_ipv6_address",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2160:             invalid_error_message,",
          "2161:         ) = validators.ip_address_validators(protocol, unpack_ipv4)",
          "2162:         self.default_error_messages[\"invalid\"] = invalid_error_message",
          "2164:         super().__init__(verbose_name, name, *args, **kwargs)",
          "2166:     def check(self, **kwargs):",
          "",
          "[Removed Lines]",
          "2163:         kwargs[\"max_length\"] = 39",
          "",
          "[Added Lines]",
          "2163:         kwargs[\"max_length\"] = MAX_IPV6_ADDRESS_LENGTH",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2187:             kwargs[\"unpack_ipv4\"] = self.unpack_ipv4",
          "2188:         if self.protocol != \"both\":",
          "2189:             kwargs[\"protocol\"] = self.protocol",
          "2191:             del kwargs[\"max_length\"]",
          "2192:         return name, path, args, kwargs",
          "",
          "[Removed Lines]",
          "2190:         if kwargs.get(\"max_length\") == 39:",
          "",
          "[Added Lines]",
          "2190:         if kwargs.get(\"max_length\") == self.max_length:",
          "",
          "---------------"
        ],
        "django/forms/fields.py||django/forms/fields.py": [
          "File: django/forms/fields.py -> django/forms/fields.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: from django.utils import formats",
          "43: from django.utils.dateparse import parse_datetime, parse_duration",
          "44: from django.utils.duration import duration_string",
          "46: from django.utils.regex_helper import _lazy_re_compile",
          "47: from django.utils.translation import gettext_lazy as _",
          "48: from django.utils.translation import ngettext_lazy",
          "",
          "[Removed Lines]",
          "45: from django.utils.ipv6 import clean_ipv6_address",
          "",
          "[Added Lines]",
          "45: from django.utils.ipv6 import MAX_IPV6_ADDRESS_LENGTH, clean_ipv6_address",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1284:         self.default_validators = validators.ip_address_validators(",
          "1285:             protocol, unpack_ipv4",
          "1286:         )[0]",
          "1287:         super().__init__(**kwargs)",
          "1289:     def to_python(self, value):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1287:         kwargs.setdefault(\"max_length\", MAX_IPV6_ADDRESS_LENGTH)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1291:             return \"\"",
          "1292:         value = value.strip()",
          "1293:         if value and \":\" in value:",
          "1295:         return value",
          "",
          "[Removed Lines]",
          "1294:             return clean_ipv6_address(value, self.unpack_ipv4)",
          "",
          "[Added Lines]",
          "1295:             return clean_ipv6_address(",
          "1296:                 value, self.unpack_ipv4, max_length=self.max_length",
          "1297:             )",
          "",
          "---------------"
        ],
        "django/utils/ipv6.py||django/utils/ipv6.py": [
          "File: django/utils/ipv6.py -> django/utils/ipv6.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from django.core.exceptions import ValidationError",
          "4: from django.utils.translation import gettext_lazy as _",
          "7: def clean_ipv6_address(",
          "9: ):",
          "10:     \"\"\"",
          "11:     Clean an IPv6 address string.",
          "",
          "[Removed Lines]",
          "8:     ip_str, unpack_ipv4=False, error_message=_(\"This is not a valid IPv6 address.\")",
          "",
          "[Added Lines]",
          "6: MAX_IPV6_ADDRESS_LENGTH = 39",
          "9: def _ipv6_address_from_str(ip_str, max_length=MAX_IPV6_ADDRESS_LENGTH):",
          "10:     if len(ip_str) > max_length:",
          "11:         raise ValueError(",
          "12:             f\"Unable to convert {ip_str} to an IPv6 address (value too long).\"",
          "13:         )",
          "14:     return ipaddress.IPv6Address(int(ipaddress.IPv6Address(ip_str)))",
          "18:     ip_str,",
          "19:     unpack_ipv4=False,",
          "20:     error_message=_(\"This is not a valid IPv6 address.\"),",
          "21:     max_length=MAX_IPV6_ADDRESS_LENGTH,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     Return a compressed IPv6 address or the same value.",
          "25:     \"\"\"",
          "26:     try:",
          "28:     except ValueError:",
          "29:         raise ValidationError(error_message, code=\"invalid\")",
          "",
          "[Removed Lines]",
          "27:         addr = ipaddress.IPv6Address(int(ipaddress.IPv6Address(ip_str)))",
          "",
          "[Added Lines]",
          "40:         addr = _ipv6_address_from_str(ip_str, max_length)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     Return whether or not the `ip_str` string is a valid IPv6 address.",
          "42:     \"\"\"",
          "43:     try:",
          "45:     except ValueError:",
          "46:         return False",
          "47:     return True",
          "",
          "[Removed Lines]",
          "44:         ipaddress.IPv6Address(ip_str)",
          "",
          "[Added Lines]",
          "57:         _ipv6_address_from_str(ip_str)",
          "",
          "---------------"
        ],
        "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py": [
          "File: tests/forms_tests/field_tests/test_genericipaddressfield.py -> tests/forms_tests/field_tests/test_genericipaddressfield.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from django.core.exceptions import ValidationError",
          "2: from django.forms import GenericIPAddressField",
          "3: from django.test import SimpleTestCase",
          "6: class GenericIPAddressFieldTest(SimpleTestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: from django.utils.ipv6 import MAX_IPV6_ADDRESS_LENGTH",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:         ):",
          "126:             f.clean(\"1:2\")",
          "128:     def test_generic_ipaddress_as_generic_not_required(self):",
          "129:         f = GenericIPAddressField(required=False)",
          "130:         self.assertEqual(f.clean(\"\"), \"\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     def test_generic_ipaddress_max_length_custom(self):",
          "130:         # Valid IPv4-mapped IPv6 address, len 45.",
          "131:         addr = \"0000:0000:0000:0000:0000:ffff:192.168.100.228\"",
          "132:         f = GenericIPAddressField(max_length=len(addr))",
          "133:         f.clean(addr)",
          "135:     def test_generic_ipaddress_max_length_validation_error(self):",
          "136:         # Valid IPv4-mapped IPv6 address, len 45.",
          "137:         addr = \"0000:0000:0000:0000:0000:ffff:192.168.100.228\"",
          "139:         cases = [",
          "140:             ({}, MAX_IPV6_ADDRESS_LENGTH),  # Default value.",
          "141:             ({\"max_length\": len(addr) - 1}, len(addr) - 1),",
          "142:         ]",
          "143:         for kwargs, max_length in cases:",
          "144:             max_length_plus_one = max_length + 1",
          "145:             msg = (",
          "146:                 f\"Ensure this value has at most {max_length} characters (it has \"",
          "147:                 f\"{max_length_plus_one}).'\"",
          "148:             )",
          "149:             with self.subTest(max_length=max_length):",
          "150:                 f = GenericIPAddressField(**kwargs)",
          "151:                 with self.assertRaisesMessage(ValidationError, msg):",
          "152:                     f.clean(\"x\" * max_length_plus_one)",
          "153:                 with self.assertRaisesMessage(",
          "154:                     ValidationError, \"This is not a valid IPv6 address.\"",
          "155:                 ):",
          "156:                     f.clean(addr)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:             f.clean(\" fe80::223:6cff:fe8a:2e8a \"), \"fe80::223:6cff:fe8a:2e8a\"",
          "151:         )",
          "152:         self.assertEqual(",
          "154:         )",
          "155:         with self.assertRaisesMessage(",
          "156:             ValidationError, \"'This is not a valid IPv6 address.'\"",
          "",
          "[Removed Lines]",
          "153:             f.clean(\" 2a02::223:6cff:fe8a:2e8a \"), \"2a02::223:6cff:fe8a:2e8a\"",
          "",
          "[Added Lines]",
          "183:             f.clean(\" \" * MAX_IPV6_ADDRESS_LENGTH + \" 2a02::223:6cff:fe8a:2e8a \"),",
          "184:             \"2a02::223:6cff:fe8a:2e8a\",",
          "",
          "---------------"
        ],
        "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py": [
          "File: tests/utils_tests/test_ipv6.py -> tests/utils_tests/test_ipv6.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     def test_validates_correct_plain_address(self):",
          "8:         self.assertTrue(is_valid_ipv6_address(\"fe80::223:6cff:fe8a:2e8a\"))",
          "9:         self.assertTrue(is_valid_ipv6_address(\"2a02::223:6cff:fe8a:2e8a\"))",
          "",
          "[Removed Lines]",
          "1: import unittest",
          "3: from django.utils.ipv6 import clean_ipv6_address, is_valid_ipv6_address",
          "6: class TestUtilsIPv6(unittest.TestCase):",
          "",
          "[Added Lines]",
          "1: import traceback",
          "2: from io import StringIO",
          "4: from django.core.exceptions import ValidationError",
          "5: from django.test import SimpleTestCase",
          "6: from django.utils.ipv6 import (",
          "7:     MAX_IPV6_ADDRESS_LENGTH,",
          "8:     clean_ipv6_address,",
          "9:     is_valid_ipv6_address,",
          "10: )",
          "11: from django.utils.version import PY310",
          "14: class TestUtilsIPv6(SimpleTestCase):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         self.assertEqual(",
          "65:             clean_ipv6_address(\"::ffff:18.52.18.52\", unpack_ipv4=True), \"18.52.18.52\"",
          "66:         )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     def test_address_too_long(self):",
          "77:         addresses = [",
          "78:             \"0000:0000:0000:0000:0000:ffff:192.168.100.228\",  # IPv4-mapped IPv6 address",
          "79:             \"0000:0000:0000:0000:0000:ffff:192.168.100.228%123456\",  # % scope/zone",
          "80:             \"fe80::223:6cff:fe8a:2e8a:1234:5678:00000\",  # MAX_IPV6_ADDRESS_LENGTH + 1",
          "81:         ]",
          "82:         msg = \"This is the error message.\"",
          "83:         value_error_msg = \"Unable to convert %s to an IPv6 address (value too long).\"",
          "84:         for addr in addresses:",
          "85:             with self.subTest(addr=addr):",
          "86:                 self.assertGreater(len(addr), MAX_IPV6_ADDRESS_LENGTH)",
          "87:                 self.assertEqual(is_valid_ipv6_address(addr), False)",
          "88:                 with self.assertRaisesMessage(ValidationError, msg) as ctx:",
          "89:                     clean_ipv6_address(addr, error_message=msg)",
          "90:                 exception_traceback = StringIO()",
          "91:                 if PY310:",
          "92:                     traceback.print_exception(ctx.exception, file=exception_traceback)",
          "93:                 else:",
          "94:                     traceback.print_exception(",
          "95:                         type(ctx.exception),",
          "96:                         value=ctx.exception,",
          "97:                         tb=ctx.exception.__traceback__,",
          "98:                         file=exception_traceback,",
          "99:                     )",
          "100:                 self.assertIn(value_error_msg % addr, exception_traceback.getvalue())",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8d4a2005955dcf962193600b53bf461b190b455",
      "candidate_info": {
        "commit_hash": "e8d4a2005955dcf962193600b53bf461b190b455",
        "repo": "django/django",
        "commit_url": "https://github.com/django/django/commit/e8d4a2005955dcf962193600b53bf461b190b455",
        "files": [
          "django/db/models/fields/__init__.py",
          "django/forms/fields.py",
          "django/utils/ipv6.py",
          "docs/ref/forms/fields.txt",
          "docs/releases/4.2.18.txt",
          "docs/releases/5.0.11.txt",
          "tests/forms_tests/field_tests/test_genericipaddressfield.py",
          "tests/utils_tests/test_ipv6.py"
        ],
        "message": "[5.0.x] Fixed CVE-2024-56374 -- Mitigated potential DoS in IPv6 validation.\n\nThanks Saravana Kumar for the report, and Sarah Boyce and Mariusz\nFelisiak for the reviews.\n\nCo-authored-by: Natalia <124304+nessita@users.noreply.github.com>",
        "before_after_code_files": [
          "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py",
          "django/forms/fields.py||django/forms/fields.py",
          "django/utils/ipv6.py||django/utils/ipv6.py",
          "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py",
          "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py",
            "django/forms/fields.py||django/forms/fields.py",
            "django/utils/ipv6.py||django/utils/ipv6.py",
            "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py",
            "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py"
          ],
          "candidate": [
            "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py",
            "django/forms/fields.py||django/forms/fields.py",
            "django/utils/ipv6.py||django/utils/ipv6.py",
            "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py",
            "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py"
          ]
        }
      },
      "candidate_diff": {
        "django/db/models/fields/__init__.py||django/db/models/fields/__init__.py": [
          "File: django/db/models/fields/__init__.py -> django/db/models/fields/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: )",
          "31: from django.utils.duration import duration_microseconds, duration_string",
          "32: from django.utils.functional import Promise, cached_property",
          "34: from django.utils.itercompat import is_iterable",
          "35: from django.utils.text import capfirst",
          "36: from django.utils.translation import gettext_lazy as _",
          "",
          "[Removed Lines]",
          "33: from django.utils.ipv6 import clean_ipv6_address",
          "",
          "[Added Lines]",
          "33: from django.utils.ipv6 import MAX_IPV6_ADDRESS_LENGTH, clean_ipv6_address",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2220:             invalid_error_message,",
          "2221:         ) = validators.ip_address_validators(protocol, unpack_ipv4)",
          "2222:         self.default_error_messages[\"invalid\"] = invalid_error_message",
          "2224:         super().__init__(verbose_name, name, *args, **kwargs)",
          "2226:     def check(self, **kwargs):",
          "",
          "[Removed Lines]",
          "2223:         kwargs[\"max_length\"] = 39",
          "",
          "[Added Lines]",
          "2223:         kwargs[\"max_length\"] = MAX_IPV6_ADDRESS_LENGTH",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2247:             kwargs[\"unpack_ipv4\"] = self.unpack_ipv4",
          "2248:         if self.protocol != \"both\":",
          "2249:             kwargs[\"protocol\"] = self.protocol",
          "2251:             del kwargs[\"max_length\"]",
          "2252:         return name, path, args, kwargs",
          "",
          "[Removed Lines]",
          "2250:         if kwargs.get(\"max_length\") == 39:",
          "",
          "[Added Lines]",
          "2250:         if kwargs.get(\"max_length\") == self.max_length:",
          "",
          "---------------"
        ],
        "django/forms/fields.py||django/forms/fields.py": [
          "File: django/forms/fields.py -> django/forms/fields.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: from django.utils.dateparse import parse_datetime, parse_duration",
          "47: from django.utils.deprecation import RemovedInDjango60Warning",
          "48: from django.utils.duration import duration_string",
          "50: from django.utils.regex_helper import _lazy_re_compile",
          "51: from django.utils.translation import gettext_lazy as _",
          "52: from django.utils.translation import ngettext_lazy",
          "",
          "[Removed Lines]",
          "49: from django.utils.ipv6 import clean_ipv6_address",
          "",
          "[Added Lines]",
          "49: from django.utils.ipv6 import MAX_IPV6_ADDRESS_LENGTH, clean_ipv6_address",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1295:         self.default_validators = validators.ip_address_validators(",
          "1296:             protocol, unpack_ipv4",
          "1297:         )[0]",
          "1298:         super().__init__(**kwargs)",
          "1300:     def to_python(self, value):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1298:         kwargs.setdefault(\"max_length\", MAX_IPV6_ADDRESS_LENGTH)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1302:             return \"\"",
          "1303:         value = value.strip()",
          "1304:         if value and \":\" in value:",
          "1306:         return value",
          "",
          "[Removed Lines]",
          "1305:             return clean_ipv6_address(value, self.unpack_ipv4)",
          "",
          "[Added Lines]",
          "1306:             return clean_ipv6_address(",
          "1307:                 value, self.unpack_ipv4, max_length=self.max_length",
          "1308:             )",
          "",
          "---------------"
        ],
        "django/utils/ipv6.py||django/utils/ipv6.py": [
          "File: django/utils/ipv6.py -> django/utils/ipv6.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from django.core.exceptions import ValidationError",
          "4: from django.utils.translation import gettext_lazy as _",
          "7: def clean_ipv6_address(",
          "9: ):",
          "10:     \"\"\"",
          "11:     Clean an IPv6 address string.",
          "",
          "[Removed Lines]",
          "8:     ip_str, unpack_ipv4=False, error_message=_(\"This is not a valid IPv6 address.\")",
          "",
          "[Added Lines]",
          "6: MAX_IPV6_ADDRESS_LENGTH = 39",
          "9: def _ipv6_address_from_str(ip_str, max_length=MAX_IPV6_ADDRESS_LENGTH):",
          "10:     if len(ip_str) > max_length:",
          "11:         raise ValueError(",
          "12:             f\"Unable to convert {ip_str} to an IPv6 address (value too long).\"",
          "13:         )",
          "14:     return ipaddress.IPv6Address(int(ipaddress.IPv6Address(ip_str)))",
          "18:     ip_str,",
          "19:     unpack_ipv4=False,",
          "20:     error_message=_(\"This is not a valid IPv6 address.\"),",
          "21:     max_length=MAX_IPV6_ADDRESS_LENGTH,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:     Return a compressed IPv6 address or the same value.",
          "25:     \"\"\"",
          "26:     try:",
          "28:     except ValueError:",
          "29:         raise ValidationError(error_message, code=\"invalid\")",
          "",
          "[Removed Lines]",
          "27:         addr = ipaddress.IPv6Address(int(ipaddress.IPv6Address(ip_str)))",
          "",
          "[Added Lines]",
          "40:         addr = _ipv6_address_from_str(ip_str, max_length)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:     Return whether or not the `ip_str` string is a valid IPv6 address.",
          "42:     \"\"\"",
          "43:     try:",
          "45:     except ValueError:",
          "46:         return False",
          "47:     return True",
          "",
          "[Removed Lines]",
          "44:         ipaddress.IPv6Address(ip_str)",
          "",
          "[Added Lines]",
          "57:         _ipv6_address_from_str(ip_str)",
          "",
          "---------------"
        ],
        "tests/forms_tests/field_tests/test_genericipaddressfield.py||tests/forms_tests/field_tests/test_genericipaddressfield.py": [
          "File: tests/forms_tests/field_tests/test_genericipaddressfield.py -> tests/forms_tests/field_tests/test_genericipaddressfield.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: from django.core.exceptions import ValidationError",
          "2: from django.forms import GenericIPAddressField",
          "3: from django.test import SimpleTestCase",
          "6: class GenericIPAddressFieldTest(SimpleTestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: from django.utils.ipv6 import MAX_IPV6_ADDRESS_LENGTH",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:         ):",
          "126:             f.clean(\"1:2\")",
          "128:     def test_generic_ipaddress_as_generic_not_required(self):",
          "129:         f = GenericIPAddressField(required=False)",
          "130:         self.assertEqual(f.clean(\"\"), \"\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     def test_generic_ipaddress_max_length_custom(self):",
          "130:         # Valid IPv4-mapped IPv6 address, len 45.",
          "131:         addr = \"0000:0000:0000:0000:0000:ffff:192.168.100.228\"",
          "132:         f = GenericIPAddressField(max_length=len(addr))",
          "133:         f.clean(addr)",
          "135:     def test_generic_ipaddress_max_length_validation_error(self):",
          "136:         # Valid IPv4-mapped IPv6 address, len 45.",
          "137:         addr = \"0000:0000:0000:0000:0000:ffff:192.168.100.228\"",
          "139:         cases = [",
          "140:             ({}, MAX_IPV6_ADDRESS_LENGTH),  # Default value.",
          "141:             ({\"max_length\": len(addr) - 1}, len(addr) - 1),",
          "142:         ]",
          "143:         for kwargs, max_length in cases:",
          "144:             max_length_plus_one = max_length + 1",
          "145:             msg = (",
          "146:                 f\"Ensure this value has at most {max_length} characters (it has \"",
          "147:                 f\"{max_length_plus_one}).'\"",
          "148:             )",
          "149:             with self.subTest(max_length=max_length):",
          "150:                 f = GenericIPAddressField(**kwargs)",
          "151:                 with self.assertRaisesMessage(ValidationError, msg):",
          "152:                     f.clean(\"x\" * max_length_plus_one)",
          "153:                 with self.assertRaisesMessage(",
          "154:                     ValidationError, \"This is not a valid IPv6 address.\"",
          "155:                 ):",
          "156:                     f.clean(addr)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:             f.clean(\" fe80::223:6cff:fe8a:2e8a \"), \"fe80::223:6cff:fe8a:2e8a\"",
          "151:         )",
          "152:         self.assertEqual(",
          "154:         )",
          "155:         with self.assertRaisesMessage(",
          "156:             ValidationError, \"'This is not a valid IPv6 address.'\"",
          "",
          "[Removed Lines]",
          "153:             f.clean(\" 2a02::223:6cff:fe8a:2e8a \"), \"2a02::223:6cff:fe8a:2e8a\"",
          "",
          "[Added Lines]",
          "183:             f.clean(\" \" * MAX_IPV6_ADDRESS_LENGTH + \" 2a02::223:6cff:fe8a:2e8a \"),",
          "184:             \"2a02::223:6cff:fe8a:2e8a\",",
          "",
          "---------------"
        ],
        "tests/utils_tests/test_ipv6.py||tests/utils_tests/test_ipv6.py": [
          "File: tests/utils_tests/test_ipv6.py -> tests/utils_tests/test_ipv6.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     def test_validates_correct_plain_address(self):",
          "8:         self.assertTrue(is_valid_ipv6_address(\"fe80::223:6cff:fe8a:2e8a\"))",
          "9:         self.assertTrue(is_valid_ipv6_address(\"2a02::223:6cff:fe8a:2e8a\"))",
          "",
          "[Removed Lines]",
          "1: import unittest",
          "3: from django.utils.ipv6 import clean_ipv6_address, is_valid_ipv6_address",
          "6: class TestUtilsIPv6(unittest.TestCase):",
          "",
          "[Added Lines]",
          "1: import traceback",
          "2: from io import StringIO",
          "4: from django.core.exceptions import ValidationError",
          "5: from django.test import SimpleTestCase",
          "6: from django.utils.ipv6 import (",
          "7:     MAX_IPV6_ADDRESS_LENGTH,",
          "8:     clean_ipv6_address,",
          "9:     is_valid_ipv6_address,",
          "10: )",
          "13: class TestUtilsIPv6(SimpleTestCase):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:         self.assertEqual(",
          "65:             clean_ipv6_address(\"::ffff:18.52.18.52\", unpack_ipv4=True), \"18.52.18.52\"",
          "66:         )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:     def test_address_too_long(self):",
          "76:         addresses = [",
          "77:             \"0000:0000:0000:0000:0000:ffff:192.168.100.228\",  # IPv4-mapped IPv6 address",
          "78:             \"0000:0000:0000:0000:0000:ffff:192.168.100.228%123456\",  # % scope/zone",
          "79:             \"fe80::223:6cff:fe8a:2e8a:1234:5678:00000\",  # MAX_IPV6_ADDRESS_LENGTH + 1",
          "80:         ]",
          "81:         msg = \"This is the error message.\"",
          "82:         value_error_msg = \"Unable to convert %s to an IPv6 address (value too long).\"",
          "83:         for addr in addresses:",
          "84:             with self.subTest(addr=addr):",
          "85:                 self.assertGreater(len(addr), MAX_IPV6_ADDRESS_LENGTH)",
          "86:                 self.assertEqual(is_valid_ipv6_address(addr), False)",
          "87:                 with self.assertRaisesMessage(ValidationError, msg) as ctx:",
          "88:                     clean_ipv6_address(addr, error_message=msg)",
          "89:                 exception_traceback = StringIO()",
          "90:                 traceback.print_exception(ctx.exception, file=exception_traceback)",
          "91:                 self.assertIn(value_error_msg % addr, exception_traceback.getvalue())",
          "",
          "---------------"
        ]
      }
    }
  ]
}