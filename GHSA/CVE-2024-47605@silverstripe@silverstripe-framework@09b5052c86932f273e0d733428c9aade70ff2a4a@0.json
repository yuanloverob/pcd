{
  "cve_id": "CVE-2024-47605",
  "cve_desc": "silverstripe-asset-admin is a silverstripe assets gallery for asset management. When using the \"insert media\" functionality, the linked oEmbed JSON includes an HTML attribute which will replace the embed shortcode. The HTML is not sanitized before replacing the shortcode, allowing a script payload to be executed on both the CMS and the front-end of the website. This issue has been addressed in silverstripe/framework version 5.3.8 and users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "silverstripe/silverstripe-framework",
  "patch_hash": "09b5052c86932f273e0d733428c9aade70ff2a4a",
  "patch_info": {
    "commit_hash": "09b5052c86932f273e0d733428c9aade70ff2a4a",
    "repo": "silverstripe/silverstripe-framework",
    "commit_url": "https://github.com/silverstripe/silverstripe-framework/commit/09b5052c86932f273e0d733428c9aade70ff2a4a",
    "files": [
      "src/View/Shortcodes/EmbedShortcodeProvider.php",
      "tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php"
    ],
    "message": "[CVE-2024-47605] Wrap embeds containing script or style tags in an iframe (#11554)\n\nCo-authored-by: Steve Boyd <emteknetnz@gmail.com>",
    "before_after_code_files": [
      "src/View/Shortcodes/EmbedShortcodeProvider.php||src/View/Shortcodes/EmbedShortcodeProvider.php",
      "tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php||tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php"
    ]
  },
  "patch_diff": {
    "src/View/Shortcodes/EmbedShortcodeProvider.php||src/View/Shortcodes/EmbedShortcodeProvider.php": [
      "File: src/View/Shortcodes/EmbedShortcodeProvider.php -> src/View/Shortcodes/EmbedShortcodeProvider.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: use Embed\\Http\\RequestException;",
      "7: use Psr\\SimpleCache\\CacheInterface;",
      "8: use Psr\\SimpleCache\\InvalidArgumentException;",
      "9: use SilverStripe\\Core\\Convert;",
      "10: use SilverStripe\\Core\\Injector\\Injector;",
      "11: use SilverStripe\\ORM\\ArrayList;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9: use RuntimeException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "28: {",
      "29:     use Configurable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "38:     private static array $domains_excluded_from_sandboxing = [];",
      "46:     private static array $sandboxed_iframe_attributes = [];",
      "55:     private static string $extractorUrl = '';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "140:             return '';",
      "141:         }",
      "142:         $extractor = $embeddable->getExtractor();",
      "143:         $type = $embeddable->getType();",
      "144:         if ($type === 'video' || $type === 'rich') {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "169:         EmbedShortcodeProvider::$extractorUrl = (string) $extractor->url;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "194:             ]));",
      "195:         }",
      "197:         $data = [",
      "198:             'Arguments' => $arguments,",
      "199:             'Attributes' => $attributes,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "224:         $content = EmbedShortcodeProvider::sandboxHtml($content, $arguments);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "342:     {",
      "343:         return preg_replace('/[^a-zA-Z0-9\\-]/', '', $str ?? '');",
      "344:     }",
      "345: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:     private static function sandboxHtml(string $html, array $arguments)",
      "380:     {",
      "382:         if (EmbedShortcodeProvider::domainIsExcludedFromSandboxing()) {",
      "383:             return $html;",
      "384:         }",
      "386:         if (preg_match('#^<iframe[^>]*>#', $html) && preg_match('#</iframe\\s*>$#', $html)) {",
      "390:             if (substr_count($html, '<') <= 2) {",
      "391:                 return $html;",
      "392:             }",
      "393:         }",
      "395:         $style = '';",
      "396:         if (!empty($arguments['width'])) {",
      "397:             $style .= 'width:' . intval($arguments['width']) . 'px;';",
      "398:         }",
      "399:         if (!empty($arguments['height'])) {",
      "400:             $style .= 'height:' . intval($arguments['height']) . 'px;';",
      "401:         }",
      "402:         $attrs = array_merge([",
      "403:             'frameborder' => '0',",
      "404:         ], static::config()->get('sandboxed_iframe_attributes'));",
      "405:         $attrs['src'] = 'data:text/html;charset=utf-8,' . rawurlencode($html);",
      "406:         if (array_key_exists('style', $attrs)) {",
      "407:             $attrs['style'] .= \";$style\";",
      "408:             $attrs['style'] = ltrim($attrs['style'], ';');",
      "409:         } else {",
      "410:             $attrs['style'] = $style;",
      "411:         }",
      "412:         $html = HTML::createTag('iframe', $attrs);",
      "413:         return $html;",
      "414:     }",
      "419:     private static function domainIsExcludedFromSandboxing(): bool",
      "420:     {",
      "421:         $domain = (string) parse_url(EmbedShortcodeProvider::$extractorUrl, PHP_URL_HOST);",
      "422:         $config = static::config()->get('domains_excluded_from_sandboxing');",
      "423:         foreach ($config as $excluded) {",
      "424:             if (!is_string($excluded)) {",
      "425:                 throw new RuntimeException('domains_excluded_from_sandboxing must be an array of strings');",
      "426:             }",
      "427:             $excludedDomain = parse_url($excluded, PHP_URL_HOST);",
      "428:             if (!$excludedDomain) {",
      "430:                 $excludedDomain = parse_url('http://' . $excluded, PHP_URL_HOST);",
      "431:             }",
      "432:             if (!$excludedDomain) {",
      "433:                 throw new RuntimeException('Not a valid domain: ' . $excluded);",
      "434:             }",
      "435:             if (str_ends_with($domain, $excludedDomain)) {",
      "436:                 return true;",
      "437:             }",
      "438:         }",
      "439:         return false;",
      "440:     }",
      "",
      "---------------"
    ],
    "tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php||tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php": [
      "File: tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php -> tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: namespace SilverStripe\\View\\Tests\\Shortcodes;",
      "5: use Psr\\SimpleCache\\CacheInterface;",
      "6: use SilverStripe\\Core\\Config\\Config;",
      "7: use SilverStripe\\View\\Parsers\\ShortcodeParser;",
      "8: use SilverStripe\\View\\Shortcodes\\EmbedShortcodeProvider;",
      "9: use SilverStripe\\Dev\\SapphireTest;",
      "10: use SilverStripe\\View\\Tests\\Embed\\EmbedUnitTest;",
      "12: class EmbedShortcodeProviderTest extends EmbedUnitTest",
      "13: {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5: use Embed\\Extractor;",
      "12: use SilverStripe\\View\\Embed\\EmbedContainer;",
      "13: use stdClass;",
      "14: use RuntimeException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "126:         );",
      "127:         $this->assertEqualIgnoringWhitespace(",
      "128:             <<<EOT",
      "130:             EOT,",
      "131:             $html",
      "132:         );",
      "",
      "[Removed Lines]",
      "129:             <div style=\"width:1024px;\"><a data-flickr-embed=\"true\" href=\"https://www.flickr.com/photos/philocycler/32119532132/\" title=\"birdbyPhilocycler,onFlickr\"><img src=\"https://live.staticflickr.com/759/32119532132_50c3f7933f_b.jpg\" width=\"1024\" height=\"742\" alt=\"bird\"></a><script asyncsrc=\"https://embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script><p class=\"caption\">Birdy</p></div>",
      "",
      "[Added Lines]",
      "133:             <div style=\"width:1024px;\"><iframe frameborder=\"0\"src=\"data:text/html;charset=utf-8,%3Ca%20data-flickr-embed%3D%22true%22%20href%3D%22https%3A%2F%2Fwww.flickr.com%2Fphotos%2Fphilocycler%2F32119532132%2F%22%20title%3D%22bird%20by%20Philocycler%2C%20on%20Flickr%22%3E%3Cimg%20src%3D%22https%3A%2F%2Flive.staticflickr.com%2F759%2F32119532132_50c3f7933f_b.jpg%22%20width%3D%221024%22%20height%3D%22742%22%20alt%3D%22bird%22%3E%3C%2Fa%3E%3Cscript%20async%20src%3D%22https%3A%2F%2Fembedr.flickr.com%2Fassets%2Fclient-code.js%22%20charset%3D%22utf-8%22%3E%3C%2Fscript%3E\" style=\"width:1024px;height:742px;\"></iframe><p class=\"caption\">Birdy</p></div>",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "217:             $html",
      "218:         );",
      "219:     }",
      "220: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "225:     public function provideSandboxHtml(): array",
      "226:     {",
      "227:         return [",
      "228:             'normal' => [",
      "229:                 'url' => 'http://example.com/embed',",
      "230:                 'excluded' => [],",
      "231:                 'html' => 'Some content',",
      "232:                 'attrs' => [],",
      "233:                 'exception' => false,",
      "234:                 'expected' => '<divstyle=\"width:100px;\"><iframe frameborder=\"0\"src=\"data:text/html;'",
      "235:                 . 'charset=utf-8,Some%20content\"style=\"width:100px;\"></iframe></div>',",
      "236:             ],",
      "237:             'normal-with-attrs' => [",
      "238:                 'url' => 'http://example.com/embed',",
      "239:                 'excluded' => [],",
      "240:                 'html' => 'Some content',",
      "241:                 'attrs' => [",
      "242:                     'frameborder' => '1',",
      "243:                     'style' => 'width:200px;height:200px',",
      "244:                     'data-something' => 'lorem'",
      "245:                 ],",
      "246:                 'exception' => false,",
      "247:                 'expected' => '<div style=\"width:100px;\"><iframe frameborder=\"1\"style=\"width:200px;'",
      "248:                 . 'height:200px;width:100px;\" data-something=\"lorem\" src=\"data:text/html;charset=utf-8,'",
      "249:                 . 'Some%20content\"></iframe></div>',",
      "250:             ],",
      "251:             'excluded' => [",
      "252:                 'url' => 'http://example.com/embed',",
      "253:                 'excluded' => ['example.com'],",
      "254:                 'html' => 'Some content',",
      "255:                 'attrs' => [],",
      "256:                 'exception' => false,",
      "257:                 'expected' => '<div style=\"width:100px;\">Some content</div>',",
      "258:             ],",
      "259:             'subdomain-excluded' => [",
      "260:                 'url' => 'http://sub.example.com/embed',",
      "261:                 'excluded' => ['example.com'],",
      "262:                 'html' => 'Some content',",
      "263:                 'attrs' => [],",
      "264:                 'exception' => false,",
      "265:                 'expected' => '<div style=\"width:100px;\">Some content</div>',",
      "266:             ],",
      "267:             'config-includes-protocol' => [",
      "268:                 'url' => 'http://example.com/embed',",
      "269:                 'excluded' => ['http://example.com'],",
      "270:                 'html' => 'Some content',",
      "271:                 'attrs' => [],",
      "272:                 'exception' => false,",
      "273:                 'expected' => '<div style=\"width:100px;\">Some content</div>',",
      "274:             ],",
      "275:             'config-includes-wrong-protocol' => [",
      "276:                 'url' => 'https://example.com/embed',",
      "277:                 'excluded' => ['http://example.com'],",
      "278:                 'html' => 'Some content',",
      "279:                 'attrs' => [],",
      "280:                 'exception' => false,",
      "281:                 'expected' => '<div style=\"width:100px;\">Some content</div>',",
      "282:             ],",
      "283:             'umatched-config' => [",
      "284:                 'url' => 'https://example.com/embed',",
      "285:                 'excluded' => ['somewhere.com'],",
      "286:                 'html' => 'Some content',",
      "287:                 'attrs' => [],",
      "288:                 'exception' => false,",
      "289:                 'expected' => '<div style=\"width:100px;\"><iframe frameborder=\"0\" src=\"data:text/html;'",
      "290:                 . 'charset=utf-8,Some%20content\"style=\"width:100px;\"></iframe></div>',",
      "291:             ],",
      "292:             'invalid-config' => [",
      "293:                 'url' => 'https://example.com/embed',",
      "294:                 'excluded' => [123],",
      "295:                 'html' => 'Some content',",
      "296:                 'attrs' => [],",
      "297:                 'exception' => true,",
      "298:                 'expected' => '',",
      "299:             ],",
      "300:             'iframe' => [",
      "301:                 'url' => 'http://example.com/embed',",
      "302:                 'excluded' => [],",
      "303:                 'html' => '<iframe src=\"https://example.com/content\"></iframe>',",
      "304:                 'attrs' => [],",
      "305:                 'exception' => false,",
      "306:                 'expected' => '<div style=\"width:100px;\"><iframe src=\"https://example.com/content\"></iframe></div>',",
      "307:             ],",
      "308:             'iframe-short' => [",
      "309:                 'url' => 'http://example.com/embed',",
      "310:                 'excluded' => [],",
      "311:                 'html' => '<iframe src=\"https://example.com/content\"/>',",
      "312:                 'attrs' => [],",
      "313:                 'exception' => false,",
      "314:                 'expected' => '<div style=\"width:100px;\"><iframe frameborder=\"0\" src=\"data:text/html;charset=utf-8,'",
      "315:                 . '%3Ciframe%20src%3D%22https%3A%2F%2Fexample.com%2Fcontent%22%2F%3E\" style=\"width:100px;\">'",
      "316:                 . '</iframe></div>',",
      "317:             ],",
      "318:             'iframe-whitespace-in-tags' => [",
      "319:                 'url' => 'http://example.com/embed',",
      "320:                 'excluded' => [],",
      "321:                 'html' => '<iframe   src=\"https://example.com/content\"  ></iframe   >',",
      "322:                 'attrs' => [],",
      "323:                 'exception' => false,",
      "324:                 'expected' => '<div style=\"width:100px;\"><iframe src=\"https://example.com/content\"></iframe></div>',",
      "325:             ],",
      "326:             'iframe-with-content-inside' => [",
      "327:                 'url' => 'http://example.com/embed',",
      "328:                 'excluded' => [],",
      "329:                 'html' => '<iframe><div>something</div></iframe>',",
      "330:                 'attrs' => [],",
      "331:                 'exception' => false,",
      "332:                 'expected' => '<divstyle=\"width:100px;\"><iframe frameborder=\"0\"src=\"data:text/html;charset=utf-8,'",
      "333:                 . '%3Ciframe%3E%3Cdiv%3Esomething%3C%2Fdiv%3E%3C%2Fiframe%3E\"style=\"width:100px;\"></iframe></div>',",
      "334:             ],",
      "335:             'closed-iframe' => [",
      "336:                 'url' => 'http://example.com/embed',",
      "337:                 'excluded' => [],",
      "338:                 'html' => '</iframe>',",
      "339:                 'attrs' => [],",
      "340:                 'exception' => false,",
      "341:                 'expected' => '<div style=\"width:100px;\"><iframe frameborder=\"0\"src=\"data:text/html;'",
      "342:                 . 'charset=utf-8,%3C%2Fiframe%3E\"style=\"width:100px;\"></iframe></div>',",
      "343:             ],",
      "344:             'malicious-iframe-1' => [",
      "345:                 'url' => 'https://example.com/embed',",
      "346:                 'excluded' => [],",
      "347:                 'html' => '<iframe></iframe>bad<iframe></iframe>',",
      "348:                 'attrs' => [],",
      "349:                 'exception' => false,",
      "350:                 'expected' => '<divstyle=\"width:100px;\"><iframe frameborder=\"0\"src=\"data:text/html;'",
      "351:                 . 'charset=utf-8,%3Ciframe%3E%3C%2Fiframe%3Ebad%3Ciframe%3E%3C%2Fiframe%3E\"'",
      "352:                 . 'style=\"width:100px;\"></iframe></div>',",
      "353:             ],",
      "354:             'malicious-iframe-2' => [",
      "355:                 'url' => 'https://example.com/embed',",
      "356:                 'excluded' => [],",
      "357:                 'html' => '<iframe src=\"http://example.com/thing\"></iframe>bad<iframe src=\"http://example.com/thing\"></iframe>',",
      "358:                 'attrs' => [],",
      "359:                 'exception' => false,",
      "360:                 'expected' => '<div style=\"width:100px;\"><iframe frameborder=\"0\"src=\"data:text/html;'",
      "361:                 . 'charset=utf-8,%3Ciframe%20src%3D%22http%3A%2F%2Fexample.com%2Fthing%22%3E%3C%2F'",
      "362:                 . 'iframe%3Ebad%3Ciframe%20src%3D%22http%3A%2F%2Fexample.com%2Fthing%22%3E%3C'",
      "363:                 . '%2Fiframe%3E\"style=\"width:100px;\"></iframe></div>',",
      "364:             ],",
      "365:         ];",
      "366:     }",
      "371:     public function testSandboxHtml(",
      "372:         string $url,",
      "373:         array $excluded,",
      "374:         string $html,",
      "375:         array $attrs,",
      "376:         bool $exception,",
      "377:         string $expected",
      "378:     ): void {",
      "379:         if ($exception) {",
      "380:             $this->expectException(RuntimeException::class);",
      "381:         }",
      "382:         $embeddable = $this->getEmbeddable($url, $html);",
      "383:         $attributes = ['width' => 100];",
      "384:         EmbedShortcodeProvider::config()->set('domains_excluded_from_sandboxing', $excluded);",
      "385:         EmbedShortcodeProvider::config()->set('sandboxed_iframe_attributes', $attrs);",
      "386:         $actual = EmbedShortcodeProvider::embeddableToHtml($embeddable, $attributes);",
      "387:         if (!$exception) {",
      "388:             $this->assertEqualIgnoringWhitespace($expected, $actual);",
      "389:         }",
      "390:     }",
      "392:     private function getEmbeddable(string $url, string $html)",
      "393:     {",
      "394:         return new class($url, $html) extends EmbedContainer {",
      "395:             private $_url;",
      "396:             private $_html;",
      "397:             public function __construct($url, $html)",
      "398:             {",
      "399:                 $this->_url = $url;",
      "400:                 $this->_html = $html;",
      "401:                 parent::__construct($url);",
      "402:             }",
      "403:             public function getType()",
      "404:             {",
      "405:                 return 'rich';",
      "406:             }",
      "407:             public function getExtractor(): Extractor",
      "408:             {",
      "409:                 return new class($this->_url, $this->_html) extends Extractor {",
      "410:                     protected $_url;",
      "411:                     private $_html;",
      "412:                     public function __construct($url, $html)",
      "413:                     {",
      "414:                         $this->_url = $url;",
      "415:                         $this->_html = $html;",
      "416:                     }",
      "417:                     public function __get($name)",
      "418:                     {",
      "419:                         $code = new stdClass;",
      "420:                         $code->html = $this->_html;",
      "421:                         return match ($name) {",
      "422:                             'code' => $code,",
      "423:                             'url' => $this->_url,",
      "424:                             default => null,",
      "425:                         };",
      "426:                     }",
      "427:                 };",
      "428:             }",
      "429:         };",
      "430:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c307ecc623ce3e8920a0652f2b880ffe6c1aa3e3",
      "candidate_info": {
        "commit_hash": "c307ecc623ce3e8920a0652f2b880ffe6c1aa3e3",
        "repo": "silverstripe/silverstripe-framework",
        "commit_url": "https://github.com/silverstripe/silverstripe-framework/commit/c307ecc623ce3e8920a0652f2b880ffe6c1aa3e3",
        "files": [
          "tests/php/Core/XssSanitiserTest.php",
          "tests/php/Forms/FormMessageTest.php",
          "tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php"
        ],
        "message": "MNT Make data providers static",
        "before_after_code_files": [
          "tests/php/Core/XssSanitiserTest.php||tests/php/Core/XssSanitiserTest.php",
          "tests/php/Forms/FormMessageTest.php||tests/php/Forms/FormMessageTest.php",
          "tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php||tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php||tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php"
          ],
          "candidate": [
            "tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php||tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php"
          ]
        }
      },
      "candidate_diff": {
        "tests/php/Core/XssSanitiserTest.php||tests/php/Core/XssSanitiserTest.php": [
          "File: tests/php/Core/XssSanitiserTest.php -> tests/php/Core/XssSanitiserTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use SilverStripe\\Core\\XssSanitiser;",
          "7: use SilverStripe\\Dev\\SapphireTest;",
          "8: use SilverStripe\\View\\Parsers\\HTMLValue;",
          "10: class XssSanitiserTest extends SapphireTest",
          "11: {",
          "12:     protected $usesDatabase = false;",
          "15:     {",
          "17:         return [",
          "",
          "[Removed Lines]",
          "14:     public function provideSanitise(): array",
          "",
          "[Added Lines]",
          "9: use PHPUnit\\Framework\\Attributes\\DataProvider;",
          "15:     public static function provideSanitise(): array",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "305:         ];",
          "306:     }",
          "311:     public function testSanitiseString(string $input, string $expected): void",
          "312:     {",
          "313:         $sanitiser = new XssSanitiser();",
          "314:         $this->assertSame($expected, $sanitiser->sanitiseString($input));",
          "315:     }",
          "320:     public function testSanitiseHtmlValue(string $input, string $expected): void",
          "321:     {",
          "322:         $sanitiser = new XssSanitiser();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:     #[DataProvider('provideSanitise')]",
          "316:     #[DataProvider('provideSanitise')]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "325:         $this->assertSame($expected, $htmlValue->getContent());",
          "326:     }",
          "331:     public function testSanitiseElement(string $input, string $expected): void",
          "332:     {",
          "333:         $sanitiser = new XssSanitiser();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "325:     #[DataProvider('provideSanitise')]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:         $this->assertSame($expected, $htmlValue->getContent());",
          "342:     }",
          "345:     {",
          "346:         return [",
          "347:             'disallow these by default' => [",
          "",
          "[Removed Lines]",
          "344:     public function provideSanitiseElementsAllowed(): array",
          "",
          "[Added Lines]",
          "339:     public static function provideSanitiseElementsAllowed(): array",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362:         ];",
          "363:     }",
          "368:     public function testSanitiseElementsAllowed(string $input, ?array $removeElements, string $expected): void",
          "369:     {",
          "370:         $sanitiser = new XssSanitiser();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360:     #[DataProvider('provideSanitiseElementsAllowed')]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "374:         $this->assertSame($expected, $sanitiser->sanitiseString($input));",
          "375:     }",
          "378:     {",
          "379:         return [",
          "380:             'disallow these by default' => [",
          "",
          "[Removed Lines]",
          "377:     public function provideSanitiseAttributesAllowed(): array",
          "",
          "[Added Lines]",
          "370:     public static function provideSanitiseAttributesAllowed(): array",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "413:         ];",
          "414:     }",
          "419:     public function testSanitiseAttributesAllowed(string $input, ?array $removeAttributes, string $expected): void",
          "420:     {",
          "421:         $sanitiser = new XssSanitiser();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409:     #[DataProvider('provideSanitiseAttributesAllowed')]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "425:         $this->assertSame($expected, $sanitiser->sanitiseString($input));",
          "426:     }",
          "429:     {",
          "430:         return [",
          "431:             'keeps inner html' => [",
          "",
          "[Removed Lines]",
          "428:     public function provideSanitiseNoKeepInnerHtml(): array",
          "",
          "[Added Lines]",
          "419:     public static function provideSanitiseNoKeepInnerHtml(): array",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "451:         ];",
          "452:     }",
          "457:     public function testSanitiseNoKeepInnerHtml(string $input, bool $keepInnerHtml, string $expected): void",
          "458:     {",
          "459:         $sanitiser = new XssSanitiser();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445:     #[DataProvider('provideSanitiseNoKeepInnerHtml')]",
          "",
          "---------------"
        ],
        "tests/php/Forms/FormMessageTest.php||tests/php/Forms/FormMessageTest.php": [
          "File: tests/php/Forms/FormMessageTest.php -> tests/php/Forms/FormMessageTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: use SilverStripe\\Core\\XssSanitiser;",
          "7: use SilverStripe\\Dev\\SapphireTest;",
          "8: use SilverStripe\\Forms\\Tests\\FormMessageTest\\TestFormMessage;",
          "11: class FormMessageTest extends SapphireTest",
          "12: {",
          "13:     protected $usesDatabase = false;",
          "16:     {",
          "17:         return [",
          "18:             'empty HTML' => [",
          "",
          "[Removed Lines]",
          "9: use SilverStripe\\ORM\\ValidationResult;",
          "15:     public function provideGetMessage(): array",
          "",
          "[Added Lines]",
          "9: use SilverStripe\\Core\\Validation\\ValidationResult;",
          "10: use PHPUnit\\Framework\\Attributes\\DataProvider;",
          "16:     public static function provideGetMessage(): array",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:     public function testGetMessage(string $message, string $type, string $casting, string $expected): void",
          "75:     {",
          "76:         $mockSanitiserClass = get_class(new class extends XssSanitiser {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:     #[DataProvider('provideGetMessage')]",
          "",
          "---------------"
        ],
        "tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php||tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php": [
          "File: tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php -> tests/php/View/Shortcodes/EmbedShortcodeProviderTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: use SilverStripe\\View\\Embed\\EmbedContainer;",
          "13: use stdClass;",
          "14: use RuntimeException;",
          "16: class EmbedShortcodeProviderTest extends EmbedUnitTest",
          "17: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: use PHPUnit\\Framework\\Attributes\\DataProvider;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:         );",
          "223:     }",
          "226:     {",
          "227:         return [",
          "228:             'normal' => [",
          "",
          "[Removed Lines]",
          "225:     public function provideSandboxHtml(): array",
          "",
          "[Added Lines]",
          "226:     public static function provideSandboxHtml(): array",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "365:         ];",
          "366:     }",
          "371:     public function testSandboxHtml(",
          "372:         string $url,",
          "373:         array $excluded,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:     #[DataProvider('provideSandboxHtml')]",
          "",
          "---------------"
        ]
      }
    }
  ]
}