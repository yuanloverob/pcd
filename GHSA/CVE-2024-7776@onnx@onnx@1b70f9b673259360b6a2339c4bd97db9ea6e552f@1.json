{
  "cve_id": "CVE-2024-7776",
  "cve_desc": "A vulnerability in the `download_model` function of the onnx/onnx framework, before and including version 1.16.1, allows for arbitrary file overwrite due to inadequate prevention of path traversal attacks in malicious tar files. This vulnerability can be exploited by an attacker to overwrite files in the user's directory, potentially leading to remote command execution.",
  "repo": "onnx/onnx",
  "patch_hash": "1b70f9b673259360b6a2339c4bd97db9ea6e552f",
  "patch_info": {
    "commit_hash": "1b70f9b673259360b6a2339c4bd97db9ea6e552f",
    "repo": "onnx/onnx",
    "commit_url": "https://github.com/onnx/onnx/commit/1b70f9b673259360b6a2339c4bd97db9ea6e552f",
    "files": [
      "onnx/backend/test/runner/__init__.py",
      "onnx/hub.py",
      "onnx/utils.py"
    ],
    "message": "Refactor safe extract method to fix issue 6215 (#6222)\n\n### Description\n#6215\n\n---------\n\nSigned-off-by: liqunfu <liqun.fu@microsoft.com>\nSigned-off-by: liqun Fu <liqun.fu@microsoft.com>\nCo-authored-by: G. Ramalingam <grama@microsoft.com>\nCo-authored-by: Justin Chu <justinchuby@users.noreply.github.com>",
    "before_after_code_files": [
      "onnx/backend/test/runner/__init__.py||onnx/backend/test/runner/__init__.py",
      "onnx/hub.py||onnx/hub.py",
      "onnx/utils.py||onnx/utils.py"
    ]
  },
  "patch_diff": {
    "onnx/backend/test/runner/__init__.py||onnx/backend/test/runner/__init__.py": [
      "File: onnx/backend/test/runner/__init__.py -> onnx/backend/test/runner/__init__.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: import re",
      "11: import shutil",
      "12: import sys",
      "14: import tempfile",
      "15: import time",
      "16: import unittest",
      "",
      "[Removed Lines]",
      "13: import tarfile",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "242:             )",
      "243:             urlretrieve(model_test.url, download_file.name)",
      "244:             print(\"Done\")",
      "247:         except Exception as e:",
      "248:             print(f\"Failed to prepare data for model {model_test.model_name}: {e}\")",
      "249:             raise",
      "",
      "[Removed Lines]",
      "245:             with tarfile.open(download_file.name) as t:",
      "246:                 t.extractall(models_dir)",
      "",
      "[Added Lines]",
      "244:             onnx.utils._extract_model_safe(download_file.name, models_dir)",
      "",
      "---------------"
    ],
    "onnx/hub.py||onnx/hub.py": [
      "File: onnx/hub.py -> onnx/hub.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "11: import json",
      "12: import os",
      "13: import sys",
      "15: from io import BytesIO",
      "16: from os.path import join",
      "17: from typing import IO, Any, Dict, List, cast",
      "",
      "[Removed Lines]",
      "14: import tarfile",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "290:     return onnx.load(cast(IO[bytes], BytesIO(model_bytes)))",
      "322: def download_model_with_test_data(",
      "323:     model: str,",
      "324:     repo: str = \"onnx/models:main\",",
      "",
      "[Removed Lines]",
      "293: def _tar_members_filter(tar: tarfile.TarFile, base: str) -> list[tarfile.TarInfo]:",
      "294:     \"\"\"Check that the content of ``tar`` will be extracted safely",
      "296:     Args:",
      "297:         tar: The tarball file",
      "298:         base: The directory where the tarball will be extracted",
      "300:     Returns:",
      "301:         list of tarball members",
      "302:     \"\"\"",
      "303:     result = []",
      "304:     for member in tar:",
      "305:         member_path = os.path.join(base, member.name)",
      "306:         abs_base = os.path.abspath(base)",
      "307:         abs_member = os.path.abspath(member_path)",
      "308:         if not abs_member.startswith(abs_base):",
      "309:             raise RuntimeError(",
      "310:                 f\"The tarball member {member_path} in downloading model contains \"",
      "311:                 f\"directory traversal sequence which may contain harmful payload.\"",
      "312:             )",
      "313:         elif member.issym() or member.islnk():",
      "314:             raise RuntimeError(",
      "315:                 f\"The tarball member {member_path} in downloading model contains \"",
      "316:                 f\"symbolic links which may contain harmful payload.\"",
      "317:             )",
      "318:         result.append(member)",
      "319:     return result",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "393:                 \"download the model from the model hub.\"",
      "394:             )",
      "413:     model_with_data_path = (",
      "414:         local_model_with_data_dir_path",
      "415:         + \"/\"",
      "",
      "[Removed Lines]",
      "396:     with tarfile.open(local_model_with_data_path) as model_with_data_zipped:",
      "397:         # FIXME: Avoid index manipulation with magic numbers",
      "398:         local_model_with_data_dir_path = local_model_with_data_path[",
      "399:             0 : len(local_model_with_data_path) - 7",
      "400:         ]",
      "401:         # Mitigate tarball directory traversal risks",
      "402:         if hasattr(tarfile, \"data_filter\"):",
      "403:             model_with_data_zipped.extractall(",
      "404:                 path=local_model_with_data_dir_path, filter=\"data\"",
      "405:             )",
      "406:         else:",
      "407:             model_with_data_zipped.extractall(",
      "408:                 path=local_model_with_data_dir_path,",
      "409:                 members=_tar_members_filter(",
      "410:                     model_with_data_zipped, local_model_with_data_dir_path",
      "411:                 ),",
      "412:             )",
      "",
      "[Added Lines]",
      "366:     # FIXME: Avoid index manipulation with magic numbers,",
      "367:     # remove \".tar.gz\"",
      "368:     local_model_with_data_dir_path = local_model_with_data_path[",
      "369:         0 : len(local_model_with_data_path) - 7",
      "370:     ]",
      "371:     onnx.utils._extract_model_safe(",
      "372:         local_model_with_data_path, local_model_with_data_dir_path",
      "373:     )",
      "",
      "---------------"
    ],
    "onnx/utils.py||onnx/utils.py": [
      "File: onnx/utils.py -> onnx/utils.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: from __future__ import annotations",
      "6: import os",
      "8: import onnx.checker",
      "9: import onnx.helper",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: import tarfile",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "232:     onnx.save(extracted, output_path)",
      "233:     if check_model:",
      "234:         onnx.checker.check_model(output_path)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "238: def _tar_members_filter(",
      "239:     tar: tarfile.TarFile, base: str | os.PathLike",
      "240: ) -> list[tarfile.TarInfo]:",
      "241:     \"\"\"Check that the content of ``tar`` will be extracted safely",
      "243:     Args:",
      "244:         tar: The tarball file",
      "245:         base: The directory where the tarball will be extracted",
      "247:     Returns:",
      "248:         list of tarball members",
      "249:     \"\"\"",
      "250:     result = []",
      "251:     for member in tar:",
      "252:         member_path = os.path.join(base, member.name)",
      "253:         abs_base = os.path.abspath(base)",
      "254:         abs_member = os.path.abspath(member_path)",
      "255:         if not abs_member.startswith(abs_base):",
      "256:             raise RuntimeError(",
      "257:                 f\"The tarball member {member_path} in downloading model contains \"",
      "258:                 f\"directory traversal sequence which may contain harmful payload.\"",
      "259:             )",
      "260:         elif member.issym() or member.islnk():",
      "261:             raise RuntimeError(",
      "262:                 f\"The tarball member {member_path} in downloading model contains \"",
      "263:                 f\"symbolic links which may contain harmful payload.\"",
      "264:             )",
      "265:         result.append(member)",
      "266:     return result",
      "269: def _extract_model_safe(",
      "270:     model_tar_path: str | os.PathLike, local_model_with_data_dir_path: str | os.PathLike",
      "271: ) -> None:",
      "272:     \"\"\"Safely extracts a tar file to a specified directory.",
      "274:     This function ensures that the extraction process mitigates against",
      "275:     directory traversal vulnerabilities by validating or sanitizing paths",
      "276:     within the tar file. It also provides compatibility for different versions",
      "277:     of the tarfile module by checking for the availability of certain attributes",
      "278:     or methods before invoking them.",
      "280:     Args:",
      "281:         model_tar_path: The path to the tar file to be extracted.",
      "282:         local_model_with_data_dir_path: The directory path where the tar file",
      "283:       contents will be extracted to.",
      "284:     \"\"\"",
      "285:     with tarfile.open(model_tar_path) as model_with_data_zipped:",
      "286:         # Mitigate tarball directory traversal risks",
      "287:         if hasattr(tarfile, \"data_filter\"):",
      "288:             model_with_data_zipped.extractall(",
      "289:                 path=local_model_with_data_dir_path, filter=\"data\"",
      "290:             )",
      "291:         else:",
      "292:             model_with_data_zipped.extractall(",
      "293:                 path=local_model_with_data_dir_path,",
      "294:                 members=_tar_members_filter(",
      "295:                     model_with_data_zipped, local_model_with_data_dir_path",
      "296:                 ),",
      "297:             )",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3fc3845edb048df559aa2a839e39e95503a0ee34",
      "candidate_info": {
        "commit_hash": "3fc3845edb048df559aa2a839e39e95503a0ee34",
        "repo": "onnx/onnx",
        "commit_url": "https://github.com/onnx/onnx/commit/3fc3845edb048df559aa2a839e39e95503a0ee34",
        "files": [
          "onnx/hub.py"
        ],
        "message": "Mitigate tarball directory traversal risks (#6164)\n\nHi, this pr is cleaner version than #6145\n\nSigned-off-by: sunriseXu <15927176697@163.com>\nCo-authored-by: sunriseXu <15927176697@163.com>\nCo-authored-by: Justin Chu <justinchuby@users.noreply.github.com>",
        "before_after_code_files": [
          "onnx/hub.py||onnx/hub.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "onnx/hub.py||onnx/hub.py"
          ],
          "candidate": [
            "onnx/hub.py||onnx/hub.py"
          ]
        }
      },
      "candidate_diff": {
        "onnx/hub.py||onnx/hub.py": [
          "File: onnx/hub.py -> onnx/hub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:     return onnx.load(cast(IO[bytes], BytesIO(model_bytes)))",
          "293: def download_model_with_test_data(",
          "294:     model: str,",
          "295:     repo: str = \"onnx/models:main\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293: def _tar_members_filter(tar: tarfile.TarFile, base: str) -> list[tarfile.TarInfo]:",
          "294:     \"\"\"Check that the content of ``tar`` will be extracted safely",
          "296:     Args:",
          "297:         tar: The tarball file",
          "298:         base: The directory where the tarball will be extracted",
          "300:     Returns:",
          "301:         list of tarball members",
          "302:     \"\"\"",
          "303:     result = []",
          "304:     for member in tar:",
          "305:         member_path = os.path.join(base, member.name)",
          "306:         abs_base = os.path.abspath(base)",
          "307:         abs_member = os.path.abspath(member_path)",
          "308:         if not abs_member.startswith(abs_base):",
          "309:             raise RuntimeError(",
          "310:                 f\"The tarball member {member_path} in downloading model contains \"",
          "311:                 f\"directory traversal sequence which may contain harmful payload.\"",
          "312:             )",
          "313:         elif member.issym() or member.islnk():",
          "314:             raise RuntimeError(",
          "315:                 f\"The tarball member {member_path} in downloading model contains \"",
          "316:                 f\"symbolic links which may contain harmful payload.\"",
          "317:             )",
          "318:         result.append(member)",
          "319:     return result",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298:     silent: bool = False,",
          "299: ) -> str | None:",
          "300:     \"\"\"Downloads a model along with test data by name from the onnx model hub and returns the directory to which the files have been extracted.",
          "302:     Args:",
          "303:         model: The name of the onnx model in the manifest. This field is",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:     Users are responsible for making sure the model comes from a trusted source, and the data is safe to be extracted.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:         local_model_with_data_dir_path = local_model_with_data_path[",
          "369:             0 : len(local_model_with_data_path) - 7",
          "370:         ]",
          "372:     model_with_data_path = (",
          "373:         local_model_with_data_dir_path",
          "374:         + \"/\"",
          "",
          "[Removed Lines]",
          "371:         model_with_data_zipped.extractall(local_model_with_data_dir_path)",
          "",
          "[Added Lines]",
          "401:         # Mitigate tarball directory traversal risks",
          "402:         if hasattr(tarfile, \"data_filter\"):",
          "403:             model_with_data_zipped.extractall(",
          "404:                 path=local_model_with_data_dir_path, filter=\"data\"",
          "405:             )",
          "406:         else:",
          "407:             model_with_data_zipped.extractall(",
          "408:                 path=local_model_with_data_dir_path,",
          "409:                 members=_tar_members_filter(",
          "410:                     model_with_data_zipped, local_model_with_data_dir_path",
          "411:                 ),",
          "412:             )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84051888d0943883a0edbf683f68c05ca3b28c40",
      "candidate_info": {
        "commit_hash": "84051888d0943883a0edbf683f68c05ca3b28c40",
        "repo": "onnx/onnx",
        "commit_url": "https://github.com/onnx/onnx/commit/84051888d0943883a0edbf683f68c05ca3b28c40",
        "files": [
          "docs/Changelog.md",
          "onnx/backend/test/runner/__init__.py",
          "onnx/common/version.h",
          "onnx/defs/math/old.cc",
          "onnx/defs/tensor/old.cc",
          "onnx/hub.py",
          "onnx/tools/net_drawer.py",
          "onnx/utils.py"
        ],
        "message": "1.16.2 cherry picks  (#6238)\n\n### Description\nCheck-pick commits from `main` into `rel-1.16.2` branch\n\n### Motivation and Context\nFix 1.16.1 issues and enabled 1.16.2 builds by cherry-picking the\nfollowing PRs from `main` into the `1.16.2` branch\n\n* Fixes since 1.16.0 release\n  * https://github.com/onnx/onnx/pull/6164\n  * https://github.com/onnx/onnx/pull/6222\n  * https://github.com/onnx/onnx/pull/6217\n  * https://github.com/onnx/onnx/pull/6255\n  * https://github.com/onnx/onnx/pull/6254\n\n---------\n\nCo-authored-by: sunflowersxu <166728538+sunflowersxu@users.noreply.github.com>\nCo-authored-by: liqun Fu <liqfu@microsoft.com>\nCo-authored-by: G. Ramalingam <grama@microsoft.com>",
        "before_after_code_files": [
          "onnx/backend/test/runner/__init__.py||onnx/backend/test/runner/__init__.py",
          "onnx/common/version.h||onnx/common/version.h",
          "onnx/defs/math/old.cc||onnx/defs/math/old.cc",
          "onnx/defs/tensor/old.cc||onnx/defs/tensor/old.cc",
          "onnx/hub.py||onnx/hub.py",
          "onnx/tools/net_drawer.py||onnx/tools/net_drawer.py",
          "onnx/utils.py||onnx/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "onnx/backend/test/runner/__init__.py||onnx/backend/test/runner/__init__.py",
            "onnx/hub.py||onnx/hub.py",
            "onnx/utils.py||onnx/utils.py"
          ],
          "candidate": [
            "onnx/backend/test/runner/__init__.py||onnx/backend/test/runner/__init__.py",
            "onnx/hub.py||onnx/hub.py",
            "onnx/utils.py||onnx/utils.py"
          ]
        }
      },
      "candidate_diff": {
        "onnx/backend/test/runner/__init__.py||onnx/backend/test/runner/__init__.py": [
          "File: onnx/backend/test/runner/__init__.py -> onnx/backend/test/runner/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import re",
          "11: import shutil",
          "12: import sys",
          "14: import tempfile",
          "15: import time",
          "16: import unittest",
          "",
          "[Removed Lines]",
          "13: import tarfile",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238:             )",
          "239:             urlretrieve(model_test.url, download_file.name)",
          "240:             print(\"Done\")",
          "243:         except Exception as e:",
          "244:             print(f\"Failed to prepare data for model {model_test.model_name}: {e}\")",
          "245:             raise",
          "",
          "[Removed Lines]",
          "241:             with tarfile.open(download_file.name) as t:",
          "242:                 t.extractall(models_dir)",
          "",
          "[Added Lines]",
          "240:             onnx.utils._extract_model_safe(download_file.name, models_dir)",
          "",
          "---------------"
        ],
        "onnx/common/version.h||onnx/common/version.h": [
          "File: onnx/common/version.h -> onnx/common/version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: namespace ONNX_NAMESPACE {",
          "14: } // namespace ONNX_NAMESPACE",
          "",
          "[Removed Lines]",
          "12: constexpr const char* LAST_RELEASE_VERSION = \"1.16.1\";",
          "",
          "[Added Lines]",
          "12: constexpr const char* LAST_RELEASE_VERSION = \"1.16.2\";",
          "",
          "---------------"
        ],
        "onnx/defs/math/old.cc||onnx/defs/math/old.cc": [
          "File: onnx/defs/math/old.cc -> onnx/defs/math/old.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2322:             auto transBAttr = ctx.getAttribute(\"transB\");",
          "2323:             bool transB = transBAttr ? static_cast<int>(transBAttr->i()) != 0 : false;",
          "2329:           } else if (",
          "2330:               hasInputShape(ctx, 2) &&",
          "2331:               (!ctx.getAttribute(\"broadcast\") || static_cast<int>(ctx.getAttribute(\"broadcast\")->i()) == 0)) {",
          "",
          "[Removed Lines]",
          "2326:                 ctx.getInputType(0)->tensor_type().shape().dim(transA ? 1 : 0);",
          "2328:                 ctx.getInputType(1)->tensor_type().shape().dim(transB ? 0 : 1);",
          "",
          "[Added Lines]",
          "2325:             checkInputRank(ctx, 0, 2);",
          "2326:             checkInputRank(ctx, 1, 2);",
          "2328:             auto& first_input_shape = getInputShape(ctx, 0);",
          "2329:             auto& second_input_shape = getInputShape(ctx, 1);",
          "2331:                 first_input_shape.dim(transA ? 1 : 0);",
          "2333:                 second_input_shape.dim(transB ? 0 : 1);",
          "",
          "---------------"
        ],
        "onnx/defs/tensor/old.cc||onnx/defs/tensor/old.cc": [
          "File: onnx/defs/tensor/old.cc -> onnx/defs/tensor/old.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1381: static const char* Slice_ver11_doc = R\"DOC(",
          "1382: Produces a slice of the input tensor along multiple axes. Similar to numpy:",
          "1384: Slices uses `starts`, `ends`, `axes` and `steps` inputs to specify the start and end",
          "1385: dimension and step for each axis in the list of axes, it uses this information to",
          "1386: slice the input `data` tensor. If a negative value is passed for any of the",
          "",
          "[Removed Lines]",
          "1383: https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html",
          "",
          "[Added Lines]",
          "1383: https://numpy.org/doc/stable/reference/routines.indexing.html",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4444: static const char* Slice_ver1_doc = R\"DOC(",
          "4445: Produces a slice of the input tensor along multiple axes. Similar to numpy:",
          "4447: Slices uses `axes`, `starts` and `ends` attributes to specify the start and end",
          "4448: dimension for each axis in the list of axes, it uses this information to",
          "4449: slice the input `data` tensor. If a negative value is passed for any of the",
          "",
          "[Removed Lines]",
          "4446: https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html",
          "",
          "[Added Lines]",
          "4446: https://numpy.org/doc/stable/reference/routines.indexing.html",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4560: static const char* Slice_ver10_doc = R\"DOC(",
          "4561: Produces a slice of the input tensor along multiple axes. Similar to numpy:",
          "4563: Slices uses `starts`, `ends`, `axes` and `steps` inputs to specify the start and end",
          "4564: dimension and step for each axis in the list of axes, it uses this information to",
          "4565: slice the input `data` tensor. If a negative value is passed for any of the",
          "",
          "[Removed Lines]",
          "4562: https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html",
          "",
          "[Added Lines]",
          "4562: https://numpy.org/doc/stable/reference/routines.indexing.html",
          "",
          "---------------"
        ],
        "onnx/hub.py||onnx/hub.py": [
          "File: onnx/hub.py -> onnx/hub.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import json",
          "10: import os",
          "11: import sys",
          "13: from io import BytesIO",
          "14: from os.path import join",
          "15: from typing import IO, Any, Dict, List, Optional, Set, Tuple, cast",
          "",
          "[Removed Lines]",
          "12: import tarfile",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:     silent: bool = False,",
          "297: ) -> Optional[str]:",
          "298:     \"\"\"Downloads a model along with test data by name from the onnx model hub and returns the directory to which the files have been extracted.",
          "300:     Args:",
          "301:         model: The name of the onnx model in the manifest. This field is",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "298:     Users are responsible for making sure the model comes from a trusted source, and the data is safe to be extracted.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "361:                 \"download the model from the model hub.\"",
          "362:             )",
          "370:     model_with_data_path = (",
          "371:         local_model_with_data_dir_path",
          "372:         + \"/\"",
          "",
          "[Removed Lines]",
          "364:     with tarfile.open(local_model_with_data_path) as model_with_data_zipped:",
          "365:         # FIXME: Avoid index manipulation with magic numbers",
          "366:         local_model_with_data_dir_path = local_model_with_data_path[",
          "367:             0 : len(local_model_with_data_path) - 7",
          "368:         ]",
          "369:         model_with_data_zipped.extractall(local_model_with_data_dir_path)",
          "",
          "[Added Lines]",
          "364:     # FIXME: Avoid index manipulation with magic numbers,",
          "365:     # remove \".tar.gz\"",
          "366:     local_model_with_data_dir_path = local_model_with_data_path[",
          "367:         0 : len(local_model_with_data_path) - 7",
          "368:     ]",
          "369:     onnx.utils._extract_model_safe(",
          "370:         local_model_with_data_path, local_model_with_data_dir_path",
          "371:     )",
          "",
          "---------------"
        ],
        "onnx/tools/net_drawer.py||onnx/tools/net_drawer.py": [
          "File: onnx/tools/net_drawer.py -> onnx/tools/net_drawer.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # SPDX-License-Identifier: Apache-2.0",
          "4: # A library and utility for drawing ONNX nets. Most of this implementation has",
          "5: # been borrowed from the caffe2 implementation",
          "7: #",
          "8: # The script takes two required arguments:",
          "9: #   -input: a path to a serialized ModelProto .pb file.",
          "",
          "[Removed Lines]",
          "6: # https://github.com/pytorch/pytorch/blob/master/caffe2/python/net_drawer.py",
          "",
          "[Added Lines]",
          "6: # https://github.com/pytorch/pytorch/blob/v2.3.1/caffe2/python/net_drawer.py",
          "",
          "---------------"
        ],
        "onnx/utils.py||onnx/utils.py": [
          "File: onnx/utils.py -> onnx/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from __future__ import annotations",
          "6: import os",
          "8: import onnx.checker",
          "9: import onnx.helper",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import tarfile",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:     onnx.save(extracted, output_path)",
          "213:     if check_model:",
          "214:         onnx.checker.check_model(output_path)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218: def _tar_members_filter(",
          "219:     tar: tarfile.TarFile, base: str | os.PathLike",
          "220: ) -> list[tarfile.TarInfo]:",
          "221:     \"\"\"Check that the content of ``tar`` will be extracted safely",
          "223:     Args:",
          "224:         tar: The tarball file",
          "225:         base: The directory where the tarball will be extracted",
          "227:     Returns:",
          "228:         list of tarball members",
          "229:     \"\"\"",
          "230:     result = []",
          "231:     for member in tar:",
          "232:         member_path = os.path.join(base, member.name)",
          "233:         abs_base = os.path.abspath(base)",
          "234:         abs_member = os.path.abspath(member_path)",
          "235:         if not abs_member.startswith(abs_base):",
          "236:             raise RuntimeError(",
          "237:                 f\"The tarball member {member_path} in downloading model contains \"",
          "238:                 f\"directory traversal sequence which may contain harmful payload.\"",
          "239:             )",
          "240:         elif member.issym() or member.islnk():",
          "241:             raise RuntimeError(",
          "242:                 f\"The tarball member {member_path} in downloading model contains \"",
          "243:                 f\"symbolic links which may contain harmful payload.\"",
          "244:             )",
          "245:         result.append(member)",
          "246:     return result",
          "249: def _extract_model_safe(",
          "250:     model_tar_path: str | os.PathLike, local_model_with_data_dir_path: str | os.PathLike",
          "251: ) -> None:",
          "252:     \"\"\"Safely extracts a tar file to a specified directory.",
          "254:     This function ensures that the extraction process mitigates against",
          "255:     directory traversal vulnerabilities by validating or sanitizing paths",
          "256:     within the tar file. It also provides compatibility for different versions",
          "257:     of the tarfile module by checking for the availability of certain attributes",
          "258:     or methods before invoking them.",
          "260:     Args:",
          "261:         model_tar_path: The path to the tar file to be extracted.",
          "262:         local_model_with_data_dir_path: The directory path where the tar file",
          "263:       contents will be extracted to.",
          "264:     \"\"\"",
          "265:     with tarfile.open(model_tar_path) as model_with_data_zipped:",
          "266:         # Mitigate tarball directory traversal risks",
          "267:         if hasattr(tarfile, \"data_filter\"):",
          "268:             model_with_data_zipped.extractall(",
          "269:                 path=local_model_with_data_dir_path, filter=\"data\"",
          "270:             )",
          "271:         else:",
          "272:             model_with_data_zipped.extractall(",
          "273:                 path=local_model_with_data_dir_path,",
          "274:                 members=_tar_members_filter(",
          "275:                     model_with_data_zipped, local_model_with_data_dir_path",
          "276:                 ),",
          "277:             )",
          "",
          "---------------"
        ]
      }
    }
  ]
}