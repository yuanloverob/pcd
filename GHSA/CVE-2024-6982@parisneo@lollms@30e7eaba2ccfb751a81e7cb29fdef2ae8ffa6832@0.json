{
  "cve_id": "CVE-2024-6982",
  "cve_desc": "A remote code execution vulnerability exists in the Calculate function of parisneo/lollms version 9.8. The vulnerability arises from the use of Python's `eval()` function to evaluate mathematical expressions within a Python sandbox that disables `__builtins__` and only allows functions from the `math` module. This sandbox can be bypassed by loading the `os` module using the `_frozen_importlib.BuiltinImporter` class, allowing an attacker to execute arbitrary commands on the server. The issue is fixed in version 9.10.",
  "repo": "parisneo/lollms",
  "patch_hash": "30e7eaba2ccfb751a81e7cb29fdef2ae8ffa6832",
  "patch_info": {
    "commit_hash": "30e7eaba2ccfb751a81e7cb29fdef2ae8ffa6832",
    "repo": "parisneo/lollms",
    "commit_url": "https://github.com/parisneo/lollms/commit/30e7eaba2ccfb751a81e7cb29fdef2ae8ffa6832",
    "files": [
      "lollms/functions/calculator.py"
    ],
    "message": "Fixed calculator exploit problem",
    "before_after_code_files": [
      "lollms/functions/calculator.py||lollms/functions/calculator.py"
    ]
  },
  "patch_diff": {
    "lollms/functions/calculator.py||lollms/functions/calculator.py": [
      "File: lollms/functions/calculator.py -> lollms/functions/calculator.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import math",
      "2: from functools import partial",
      "4: def calculate(expression: str) -> float:",
      "5:     try:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3: import sympy as sp",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19:         \"function\": calculate,",
      "20:         \"function_description\": \"Whenever you need to perform mathematic computations, you can call this function with the math expression and you will get the answer.\",",
      "21:         \"function_parameters\": [{\"name\": \"expression\", \"type\": \"str\"}]",
      "",
      "[Removed Lines]",
      "22:     }",
      "",
      "[Added Lines]",
      "26: if __name__ == \"__main__\":",
      "27:     # Test cases",
      "28:     test_cases = [",
      "29:         (\"2 + 2\", 4),",
      "30:         (\"cos(0)\", 1.0),",
      "31:         (\"sin(pi / 2)\", 1.0),",
      "32:         (\"sqrt(4)\", 2.0),",
      "33:         (\"degrees(pi)\", 180.0),",
      "34:         (\"radians(180)\", 3.14159),  # Approximately \u03c0",
      "35:         (\"2 + 2 and ().__class__.__base__.__subclasses__()[108].load_module('os').system('echo a > AAA')\", \"An error occurred while evaluating the expression.\"),",
      "36:         (\"1 / 0\", \"An error occurred while evaluating the expression.\"),  # Division by zero",
      "37:         (\"2 ** 3\", 8),  # Exponentiation",
      "38:         (\"log(1)\", 0),  # Logarithm base e",
      "39:         (\"exp(0)\", 1),  # Exponential function",
      "40:         (\"pi\", round(float(sp.pi), 5)),  # Pi constant rounded to 5 decimal places",
      "41:     ]",
      "42:     for expression, expected in test_cases:",
      "43:         print(f\"Testing expression: {expression}\")",
      "44:         result = calculate(expression)",
      "45:         print(f\"Result: {result} | Expected: {expected}\")",
      "46:         # Check if both are strings and equal",
      "47:         if isinstance(result, str) and isinstance(expected, str):",
      "48:             print(\"Test Passed!\" if result == expected else \"Test Failed!\")",
      "49:         # Check if both are floats and compare rounded values",
      "50:         elif isinstance(result, float) and isinstance(expected, (float, int)):",
      "51:             print(\"Test Passed!\" if round(result, 5) == round(expected, 5) else \"Test Failed!\")",
      "52:         else:",
      "53:             print(\"Test Failed!\")",
      "54:         print()",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e60a753c2297167c951fc32cef7daaa3618aa7b",
      "candidate_info": {
        "commit_hash": "5e60a753c2297167c951fc32cef7daaa3618aa7b",
        "repo": "parisneo/lollms",
        "commit_url": "https://github.com/parisneo/lollms/commit/5e60a753c2297167c951fc32cef7daaa3618aa7b",
        "files": [
          "lollms/functions/calculator.py",
          "lollms/functions/take_a_photo.py",
          "lollms/functions/take_screen_shot.py",
          "lollms/media.py",
          "lollms/personality.py",
          "lollms/services/open_ai_tts/lollms_openai_tts.py",
          "lollms/services/xtts/lollms_xtts.py",
          "lollms/tts.py"
        ],
        "message": "upgraded functions",
        "before_after_code_files": [
          "lollms/functions/calculator.py||lollms/functions/calculator.py",
          "lollms/functions/take_a_photo.py||lollms/functions/take_a_photo.py",
          "lollms/functions/take_screen_shot.py||lollms/functions/take_screen_shot.py",
          "lollms/media.py||lollms/media.py",
          "lollms/personality.py||lollms/personality.py",
          "lollms/services/open_ai_tts/lollms_openai_tts.py||lollms/services/open_ai_tts/lollms_openai_tts.py",
          "lollms/services/xtts/lollms_xtts.py||lollms/services/xtts/lollms_xtts.py",
          "lollms/tts.py||lollms/tts.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lollms/functions/calculator.py||lollms/functions/calculator.py"
          ],
          "candidate": [
            "lollms/functions/calculator.py||lollms/functions/calculator.py"
          ]
        }
      },
      "candidate_diff": {
        "lollms/functions/calculator.py||lollms/functions/calculator.py": [
          "File: lollms/functions/calculator.py -> lollms/functions/calculator.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import math",
          "2: from functools import partial",
          "4: def calculate(expression: str) -> float:",
          "5:     try:",
          "6:         # Add the math module functions to the local namespace",
          "7:         allowed_names = {k: v for k, v in math.__dict__.items() if not k.startswith(\"__\")}",
          "9:         # Evaluate the expression safely using the allowed names",
          "10:         result = eval(expression, {\"__builtins__\": None}, allowed_names)",
          "11:         return result",
          "12:     except Exception as e:",
          "13:         return str(e)",
          "16: def calculate_function(processor, client):",
          "17:     return {",
          "18:         \"function_name\": \"calculate\",",
          "19:         \"function\": calculate,",
          "20:         \"function_description\": \"Whenever you need to perform mathematic computations, you can call this function with the math expression and you will get the answer.\",",
          "21:         \"function_parameters\": [{\"name\": \"expression\", \"type\": \"str\"}]",
          "22:     }",
          "",
          "---------------"
        ],
        "lollms/functions/take_a_photo.py||lollms/functions/take_a_photo.py": [
          "File: lollms/functions/take_a_photo.py -> lollms/functions/take_a_photo.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:         self.cap.release()",
          "73:         event.accept()",
          "76:     if use_ui:",
          "77:         def run_app():",
          "78:             app = QtWidgets.QApplication(sys.argv)",
          "",
          "[Removed Lines]",
          "75: def take_photo(processor, client, use_ui=False):",
          "",
          "[Added Lines]",
          "75: def take_photo(processor, client, use_ui=False, use_a_single_photo_at_a_time=True):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:     fn = image/f\"screen_shot_{index}.png\"",
          "114:     cv2.imwrite(str(fn), frame)",
          "115:     client.discussion.image_files.append(fn)",
          "116:     processor.full(f'<img src=\"{discussion_path_to_url(fn_view)}\" width=\"80%\"></img>')",
          "117:     processor.new_message(\"\")",
          "118:     return \"Image shot successful\"",
          "122:     return {",
          "123:             \"function_name\": \"take_photo\",",
          "125:             \"function_description\": \"Uses the webcam to take a photo, displays it so that you can take a look.\",",
          "126:             \"function_parameters\": []",
          "127:         }",
          "",
          "[Removed Lines]",
          "121: def take_a_photo_function(processor, client, use_ui = False):",
          "124:             \"function\": partial(take_photo, processor=processor, client=client, use_ui = use_ui),",
          "",
          "[Added Lines]",
          "116:     if use_a_single_photo_at_a_time:",
          "117:         client.discussion.image_files = [client.discussion.image_files[-1]]",
          "123: def take_a_photo_function(processor, client, use_ui = False, use_a_single_photo_at_a_time=True):",
          "126:             \"function\": partial(take_photo, processor=processor, client=client, use_ui = use_ui, use_a_single_photo_at_a_time = use_a_single_photo_at_a_time),",
          "",
          "---------------"
        ],
        "lollms/functions/take_screen_shot.py||lollms/functions/take_screen_shot.py": [
          "File: lollms/functions/take_screen_shot.py -> lollms/functions/take_screen_shot.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: class ScreenshotWindow(QtWidgets.QWidget):",
          "18:         super().__init__()",
          "19:         self.client = client",
          "20:         self.screenshot = screenshot",
          "21:         self.fn_view = fn_view",
          "22:         self.fn = fn",
          "24:         self.initUI()",
          "",
          "[Removed Lines]",
          "17:     def __init__(self, client, screenshot, fn_view, fn):",
          "",
          "[Added Lines]",
          "17:     def __init__(self, client, screenshot, fn_view, fn, use_a_single_photo_at_a_time= True):",
          "23:         self.use_a_single_photo_at_a_time = use_a_single_photo_at_a_time",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:         self.screenshot.save(self.fn_view)",
          "43:         self.screenshot.save(self.fn)",
          "44:         self.client.discussion.image_files.append(self.fn)",
          "45:         self.close()",
          "49:     screenshot = pyautogui.screenshot()",
          "50:     view_image = client.discussion.discussion_folder / \"view_images\"",
          "51:     image = client.discussion.discussion_folder / \"images\"",
          "",
          "[Removed Lines]",
          "48: def take_screenshot(self, client: Client, use_ui: bool = False):",
          "",
          "[Added Lines]",
          "46:         if self.use_a_single_photo_at_a_time:",
          "47:             self.client.discussion.image_files = [self.client.discussion.image_files[-1]]",
          "52: def take_screenshot(self, client: Client, use_ui: bool = False, use_a_single_photo_at_a_time= True):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:     if use_ui:",
          "57:         app = QtWidgets.QApplication(sys.argv)",
          "59:         window.show()",
          "60:         app.exec_()",
          "61:         return f'<img src=\"{discussion_path_to_url(fn_view)}\" width=\"80%\"></img>'",
          "",
          "[Removed Lines]",
          "58:         window = ScreenshotWindow(client, screenshot, fn_view, fn)",
          "",
          "[Added Lines]",
          "62:         window = ScreenshotWindow(client, screenshot, fn_view, fn, use_a_single_photo_at_a_time)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "63:         screenshot.save(fn_view)",
          "64:         screenshot.save(fn)",
          "65:         client.discussion.image_files.append(fn)",
          "66:         return f'<img src=\"{discussion_path_to_url(fn_view)}\" width=\"80%\"></img>'",
          "69:     return {",
          "70:             \"function_name\": \"take_screenshot\",",
          "77:         }",
          "",
          "[Removed Lines]",
          "68: def take_screenshot_function(client):",
          "71:             \"function\": partial(take_screenshot, client=client),",
          "72:             \"function_description\": \"Takes a screenshot of the current screen. Optionally allows user interface for image cropping and saving.\",",
          "73:             \"function_parameters\": [",
          "74:                 {\"name\": \"client\", \"type\": \"Client\", \"description\": \"The client object managing the discussion and images.\"},",
          "75:                 {\"name\": \"use_ui\", \"type\": \"bool\", \"default\": False, \"description\": \"Flag to determine if a user interface should be used for editing the screenshot.\"}",
          "76:             ]",
          "",
          "[Added Lines]",
          "70:         if use_a_single_photo_at_a_time:",
          "71:             client.discussion.image_files = [client.discussion.image_files[-1]]",
          "75: def take_screenshot_function(client, use_ui=True, use_a_single_photo_at_a_time= True):",
          "78:             \"function\": partial(take_screenshot, client=client, use_ui = use_ui, use_a_single_photo_at_a_time= use_a_single_photo_at_a_time),",
          "79:             \"function_description\": \"Takes a screenshot of the current screen.\",",
          "80:             \"function_parameters\": []",
          "",
          "---------------"
        ],
        "lollms/media.py||lollms/media.py": [
          "File: lollms/media.py -> lollms/media.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         self.snd_input_device = snd_input_device",
          "150:         self.snd_output_device = snd_output_device",
          "153:         self.frames = []",
          "154:         self.silence_counter = 0",
          "",
          "[Removed Lines]",
          "151:         self.logs_folder = logs_folder",
          "",
          "[Added Lines]",
          "151:         self.logs_folder = Path(logs_folder)",
          "153:         self.logs_folder.mkdir(exist_ok=True, parents=True)",
          "",
          "---------------"
        ],
        "lollms/personality.py||lollms/personality.py": [
          "File: lollms/personality.py -> lollms/personality.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3435:         return function_calls",
          "3439:         if len(self.personality.image_files)>0:",
          "3440:             out, function_calls = self.generate_with_function_calls_and_images(prompt, self.personality.image_files, function_definitions, callback=callback)",
          "3441:         else:",
          "3442:             out, function_calls = self.generate_with_function_calls(prompt, function_definitions, callback=callback)",
          "3443:         if len(function_calls)>0:",
          "3444:             outputs = self.execute_function_calls(function_calls,function_definitions)",
          "3445:             out += \"\\n!@>function calls results:\\n\" + \"\\n\".join([str(o) for o in outputs])",
          "3446:             if prompt_after_execution:",
          "",
          "[Removed Lines]",
          "3438:     def interact_with_function_call(self, prompt, function_definitions, prompt_after_execution=True, callback = None):",
          "",
          "[Added Lines]",
          "3438:     def interact_with_function_call(self, prompt, function_definitions, prompt_after_execution=True, callback = None, hide_function_call=False):",
          "3444:             if hide_function_call:",
          "3445:                 self.full(\"\") #Hide function call",
          "",
          "---------------"
        ],
        "lollms/services/open_ai_tts/lollms_openai_tts.py||lollms/services/open_ai_tts/lollms_openai_tts.py": [
          "File: lollms/services/open_ai_tts/lollms_openai_tts.py -> lollms/services/open_ai_tts/lollms_openai_tts.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:     def tts_file(self, text, speaker=None, file_name_or_path:Path|str=None, language=\"en\", use_threading=False):",
          "111:         speech_file_path = file_name_or_path",
          "112:         response = self.client.audio.speech.create(",
          "113:         model=self.model,",
          "114:         voice=self.voice,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:         text = self.clean_text(text)",
          "",
          "---------------"
        ],
        "lollms/services/xtts/lollms_xtts.py||lollms/services/xtts/lollms_xtts.py": [
          "File: lollms/services/xtts/lollms_xtts.py -> lollms/services/xtts/lollms_xtts.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "260:             return False",
          "262:     def tts_file(self, text, file_name_or_path, speaker=None, language=\"en\")->str:",
          "263:         url = f\"{self.xtts_base_url}/tts_to_file\"",
          "265:         # Define the request body",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:         text = self.clean_text(text)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316:             return {\"status\":False,\"error\":f\"{ex}\"}",
          "318:     def xtts_audio(self, text, speaker, file_name_or_path:Path|str=None, language=\"en\", use_threading=True):",
          "327:         def tts2_audio_th(thread_uid=None):",
          "328:             url = f\"{self.xtts_base_url}/tts_to_audio\"",
          "",
          "[Removed Lines]",
          "319:         # Remove HTML tags",
          "320:         text = re.sub(r'<.*?>', '', text)",
          "321:         # Remove code blocks (assuming they're enclosed in backticks or similar markers)",
          "322:         text = re.sub(r'```.*?```', '', text, flags=re.DOTALL)",
          "323:         text = re.sub(r'`.*?`', '', text)",
          "324:         # Remove any remaining code-like patterns (this can be adjusted as needed)",
          "325:         text = re.sub(r'[\\{\\}\\[\\]\\(\\)<>]', '', text)",
          "326:         text = text.replace(\"\\\\\",\"\")",
          "",
          "[Added Lines]",
          "320:         text = self.clean_text(text)",
          "",
          "---------------"
        ],
        "lollms/tts.py||lollms/tts.py": [
          "File: lollms/tts.py -> lollms/tts.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: from lollms.utilities import PackageManager",
          "11: from pathlib import Path",
          "12: from ascii_colors import ASCIIColors",
          "13: try:",
          "14:     if not PackageManager.check_package_installed(\"sounddevice\"):",
          "15:         # os.system(\"sudo apt-get install portaudio19-dev\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import re",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         return {",
          "148:             \"status\": True,",
          "149:             \"device_names\": [device['name'] for device in devices if device[\"max_output_channels\"]>0]",
          "",
          "[Removed Lines]",
          "150:         }",
          "",
          "[Added Lines]",
          "153:     @staticmethod",
          "154:     def clean_text(text):",
          "155:         # Remove HTML tags",
          "156:         text = re.sub(r'<.*?>', '', text)",
          "157:         # Remove code blocks (assuming they're enclosed in backticks or similar markers)",
          "158:         text = re.sub(r'```.*?```', '', text, flags=re.DOTALL)",
          "159:         text = re.sub(r'`.*?`', '', text)",
          "160:         # Remove any remaining code-like patterns (this can be adjusted as needed)",
          "161:         text = re.sub(r'[\\{\\}\\[\\]\\(\\)<>]', '', text)",
          "162:         text = text.replace(\"\\\\\",\"\")",
          "163:         return text",
          "",
          "---------------"
        ]
      }
    }
  ]
}