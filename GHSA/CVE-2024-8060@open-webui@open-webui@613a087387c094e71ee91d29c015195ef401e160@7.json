{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ad93341b74455a35beec628cd76cc38e38aa2d7b",
      "candidate_info": {
        "commit_hash": "ad93341b74455a35beec628cd76cc38e38aa2d7b",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/ad93341b74455a35beec628cd76cc38e38aa2d7b",
        "files": [
          "backend/open_webui/__init__.py",
          "backend/requirements.txt",
          "pyproject.toml"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/__init__.py||backend/open_webui/__init__.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/__init__.py||backend/open_webui/__init__.py": [
          "File: backend/open_webui/__init__.py -> backend/open_webui/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import typer",
          "7: import uvicorn",
          "9: app = typer.Typer()",
          "11: KEY_FILE = Path.cwd() / \".webui_secret_key\"",
          "14: @app.command()",
          "15: def serve(",
          "16:     host: str = \"0.0.0.0\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: from typing import Optional",
          "9: from typing_extensions import Annotated",
          "16: def version_callback(value: bool):",
          "17:     if value:",
          "18:         from open_webui.env import VERSION",
          "20:         typer.echo(f\"Open WebUI version: {VERSION}\")",
          "21:         raise typer.Exit()",
          "24: @app.command()",
          "25: def main(",
          "26:     version: Annotated[",
          "27:         Optional[bool], typer.Option(\"--version\", callback=version_callback)",
          "28:     ] = None,",
          "29: ):",
          "30:     pass",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d905202afbd12d57ba368df1f7c79ccc2ff496fe",
      "candidate_info": {
        "commit_hash": "d905202afbd12d57ba368df1f7c79ccc2ff496fe",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/d905202afbd12d57ba368df1f7c79ccc2ff496fe",
        "files": [
          "backend/open_webui/models/messages.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/models/messages.py||backend/open_webui/models/messages.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/models/messages.py||backend/open_webui/models/messages.py": [
          "File: backend/open_webui/models/messages.py -> backend/open_webui/models/messages.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:             db.commit()",
          "252:             return True",
          "254:     def delete_message_by_id(self, id: str) -> bool:",
          "255:         with get_db() as db:",
          "256:             db.query(Message).filter_by(id=id).delete()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:     def delete_reactions_by_id(self, id: str) -> bool:",
          "255:         with get_db() as db:",
          "256:             db.query(MessageReaction).filter_by(message_id=id).delete()",
          "257:             db.commit()",
          "258:             return True",
          "260:     def delete_replies_by_id(self, id: str) -> bool:",
          "261:         with get_db() as db:",
          "262:             db.query(Message).filter_by(parent_id=id).delete()",
          "263:             db.commit()",
          "264:             return True",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:             # Delete all reactions to this message",
          "259:             db.query(MessageReaction).filter_by(message_id=id).delete()",
          "261:             db.commit()",
          "262:             return True",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273:             # List all replies to this message",
          "274:             replies = db.query(Message).filter_by(parent_id=id).all()",
          "276:             # Delete all reactions to each reply",
          "277:             for reply in replies:",
          "278:                 db.query(MessageReaction).filter_by(message_id=reply.id).delete()",
          "280:             # Delete all replies to this message",
          "281:             db.query(Message).filter_by(parent_id=id).delete()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c2b520066347f36ef3a168770e3ec990e5482ac9",
      "candidate_info": {
        "commit_hash": "c2b520066347f36ef3a168770e3ec990e5482ac9",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/c2b520066347f36ef3a168770e3ec990e5482ac9",
        "files": [
          "src/lib/stores/index.ts",
          "src/routes/+layout.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/stores/index.ts||src/lib/stores/index.ts",
          "src/routes/+layout.svelte||src/routes/+layout.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/stores/index.ts||src/lib/stores/index.ts": [
          "File: src/lib/stores/index.ts -> src/lib/stores/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: export const isApp = writable(false);",
          "16: export const appInfo = writable(null);",
          "19: export const MODEL_DOWNLOAD_POOL = writable({});",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: export const appData = writable(null);",
          "",
          "---------------"
        ],
        "src/routes/+layout.svelte||src/routes/+layout.svelte": [
          "File: src/routes/+layout.svelte -> src/routes/+layout.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:  onMount(async () => {",
          "204:   if (window?.electronAPI) {",
          "207:    });",
          "210:     isApp.set(true);",
          "213:    }",
          "214:   }",
          "",
          "[Removed Lines]",
          "205:    const res = await window.electronAPI.send({",
          "206:     type: 'info'",
          "209:    if (res) {",
          "211:     appInfo.set(res);",
          "212:     console.log(res);",
          "",
          "[Added Lines]",
          "205:    const info = await window.electronAPI.send({",
          "206:     type: 'app:info'",
          "209:    if (info) {",
          "211:     appInfo.set(info);",
          "213:     const data = await window.electronAPI.send({",
          "214:      type: 'app:data'",
          "215:     });",
          "217:     if (data) {",
          "218:      appData.set(data);",
          "219:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d23f757c1f8b4ce9e6ebcebcbbd48d2f9e1ed842",
      "candidate_info": {
        "commit_hash": "d23f757c1f8b4ce9e6ebcebcbbd48d2f9e1ed842",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/d23f757c1f8b4ce9e6ebcebcbbd48d2f9e1ed842",
        "files": [
          "src/lib/components/AddServerModal.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/AddServerModal.svelte||src/lib/components/AddServerModal.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/AddServerModal.svelte||src/lib/components/AddServerModal.svelte": [
          "File: src/lib/components/AddServerModal.svelte -> src/lib/components/AddServerModal.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:         <div class=\"flex gap-2\">",
          "252:          <div class=\"flex-shrink-0 self-start\">",
          "253:           <select",
          "255:            bind:value={auth_type}",
          "256:           >",
          "257:            <option value=\"bearer\">Bearer</option>",
          "",
          "[Removed Lines]",
          "254:            class=\"w-full text-sm bg-transparent placeholder:text-gray-300 dark:placeholder:text-gray-700 outline-hidden pr-5\"",
          "",
          "[Added Lines]",
          "254:            class=\"w-full text-sm bg-transparent dark:bg-gray-900 placeholder:text-gray-300 dark:placeholder:text-gray-700 outline-hidden pr-5\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7e971f9dd18ca91c6016630c7a5095d5afd79eed",
      "candidate_info": {
        "commit_hash": "7e971f9dd18ca91c6016630c7a5095d5afd79eed",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/7e971f9dd18ca91c6016630c7a5095d5afd79eed",
        "files": [
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1266:   }",
          "1268:   prompt = '';",
          "1272:   const chatInputElement = document.getElementById('chat-input');",
          "",
          "[Removed Lines]",
          "1269:   await tick();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1308:    history.messages[messages.at(-1).id].childrenIds.push(userMessageId);",
          "1309:   }",
          "1315:   const chatInput = document.getElementById('chat-input');",
          "1316:   chatInput?.focus();",
          "",
          "[Removed Lines]",
          "1312:   await tick();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}