{
  "cve_id": "CVE-2024-48944",
  "cve_desc": "Server-Side Request Forgery (SSRF) vulnerability in Apache Kylin. Through a kylin server, an attacker may forge a request to invoke \"/kylin/api/xxx/diag\" api on another internal host and possibly get leaked information. There are two preconditions: 1) The attacker has got admin access to a kylin server; 2) Another internal host has the \"/kylin/api/xxx/diag\" api\n\nendpoint open for service.\n\n\nThis issue affects Apache Kylin: from 5.0.0 \nthrough \n\n5.0.1.\n\nUsers are recommended to upgrade to version 5.0.2, which fixes the issue.",
  "repo": "apache/kylin",
  "patch_hash": "4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
  "patch_info": {
    "commit_hash": "4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
    "files": [
      "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java"
    ],
    "message": "KYLIN-5644 fix diag api security, encryption changed from base64 to AES\n\nCo-authored-by: liang.hua <liang.hua@kyligence.io>",
    "before_after_code_files": [
      "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java||src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java||src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java"
    ]
  },
  "patch_diff": {
    "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java||src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java": [
      "File: src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java -> src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "81: import org.apache.kylin.common.msg.Message;",
      "82: import org.apache.kylin.common.msg.MsgPicker;",
      "83: import org.apache.kylin.common.persistence.transaction.TransactionException;",
      "84: import org.apache.kylin.common.util.JsonUtil;",
      "85: import org.apache.kylin.common.util.Pair;",
      "86: import org.apache.kylin.job.constant.JobStatusEnum;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84: import org.apache.kylin.common.util.EncryptUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "643:             if (StringUtils.isBlank(host) || host.startsWith(\"http://\")) {",
      "644:                 return host;",
      "645:             }",
      "647:         } catch (Exception e) {",
      "648:             logger.error(\"Failed to decode host, will use the original host name\");",
      "649:         }",
      "",
      "[Removed Lines]",
      "646:             return new String(Base64.decodeBase64(host), Charset.defaultCharset());",
      "",
      "[Added Lines]",
      "647:             String decryptValue = EncryptUtil.decrypt(new String(Base64.decodeBase64(host), Charset.defaultCharset()));",
      "648:             return StringUtils.isBlank(decryptValue) ? host : decryptValue;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "659:             if (!host.toLowerCase().startsWith(\"http\")) {",
      "660:                 host = \"http://\" + host;",
      "661:             }",
      "663:         } catch (Exception e) {",
      "664:             logger.error(\"Failed to encode host, will use the original host name\");",
      "665:         }",
      "",
      "[Removed Lines]",
      "662:             return Base64.encodeBase64String(host.getBytes(Charset.defaultCharset()));",
      "",
      "[Added Lines]",
      "664:             return Base64.encodeBase64String(EncryptUtil.encrypt(host).getBytes(Charset.defaultCharset()));",
      "",
      "---------------"
    ],
    "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java||src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java": [
      "File: src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java -> src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "311:         }",
      "312:         Assert.assertEquals(3, mockDataResponse.get(\"size\"));",
      "313:     }",
      "315: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "315:     @Test",
      "316:     public void testEncodeAndDecodeHost() {",
      "317:         Assert.assertTrue(nBasicController.encodeHost(\"\").isEmpty());",
      "318:         String host = \"localhost:7070\";",
      "319:         String encodeHost = nBasicController.encodeHost(host);",
      "320:         Assert.assertNotNull(encodeHost);",
      "321:         Assert.assertNotEquals(host, encodeHost);",
      "322:         String decodeHost = nBasicController.decodeHost(encodeHost);",
      "323:         Assert.assertEquals(\"http://\" + host, decodeHost);",
      "324:         Assert.assertEquals(\"ip\", nBasicController.decodeHost(\"ip\"));",
      "325:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4bda83a3388a0ac79a8989160068a790919d43fe",
      "candidate_info": {
        "commit_hash": "4bda83a3388a0ac79a8989160068a790919d43fe",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/4bda83a3388a0ac79a8989160068a790919d43fe",
        "files": [
          "src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "src/core-common/src/main/java/org/apache/kylin/common/QueryContext.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLookupCandidate.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/VacantIndexPruningRule.java",
          "src/query-service/src/main/java/org/apache/kylin/rest/response/SQLResponse.java",
          "src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
          "src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/CandidateTestUtils.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java",
          "src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala"
        ],
        "message": "KYLIN-5633 optimize the pruning process of heterogeneous segments",
        "before_after_code_files": [
          "src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "src/core-common/src/main/java/org/apache/kylin/common/QueryContext.java||src/core-common/src/main/java/org/apache/kylin/common/QueryContext.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLookupCandidate.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLookupCandidate.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java||src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/VacantIndexPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/VacantIndexPruningRule.java",
          "src/query-service/src/main/java/org/apache/kylin/rest/response/SQLResponse.java||src/query-service/src/main/java/org/apache/kylin/rest/response/SQLResponse.java",
          "src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java||src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
          "src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java||src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java||src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/CandidateTestUtils.java||src/query/src/test/java/org/apache/kylin/query/routing/CandidateTestUtils.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java||src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java||src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java",
          "src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala||src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "2308:                         \"org.apache.kylin.query.util.SparkSQLFunctionConverter\" });",
          "2309:     }",
          "2311:     @ThirdPartyDependencies({",
          "2312:             @ThirdPartyDependencies.ThirdPartyDependent(repository = \"static-user-manager\", classes = {",
          "2313:                     \"StaticAuthenticationProvider\", \"StaticUserGroupService\", \"StaticUserService\" }) })",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2311:     public static final String USE_VACANT_INDEXES = \"use-vacant-indexes\";",
          "2312:     public static final String USE_TABLE_INDEX_ANSWER_SELECT_STAR = \"use-table-index-answer-select-star\";",
          "2314:     public String getQueryIndexMatchRules() {",
          "2315:         return getOptional(\"kylin.query.index-match-rules\", \"\");",
          "2316:     }",
          "2318:     private Set<String> getPruningRules() {",
          "2319:         String queryIndexMatchRules = getQueryIndexMatchRules();",
          "2320:         String[] splitRules = queryIndexMatchRules.split(\",\");",
          "2321:         Set<String> configRules = Sets.newHashSet();",
          "2322:         for (String splitRule : splitRules) {",
          "2323:             if (StringUtils.isNotBlank(splitRule)) {",
          "2324:                 configRules.add(StringUtils.lowerCase(splitRule));",
          "2325:             }",
          "2326:         }",
          "2327:         return configRules;",
          "2328:     }",
          "2330:     public boolean isVacantIndexPruningEnabled() {",
          "2331:         return getPruningRules().contains(KylinConfigBase.USE_VACANT_INDEXES);",
          "2332:     }",
          "2334:     public boolean useTableIndexAnswerSelectStarEnabled() {",
          "2335:         return getPruningRules().contains(KylinConfigBase.USE_TABLE_INDEX_ANSWER_SELECT_STAR)",
          "2336:                 || Boolean.parseBoolean(getOptional(\"kylin.query.use-tableindex-answer-select-star.enabled\", FALSE));",
          "2337:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3761:         return Boolean.parseBoolean(getOptional(\"kylin.build.resource.skip-resource-check\", FALSE));",
          "3762:     }",
          "3768:     public int getSecondStorageSkippingIndexGranularity() {",
          "3769:         int granularity = Integer.parseInt(getOptional(\"kylin.second-storage.skipping-index.granularity\", \"3\"));",
          "3770:         return granularity <= 0 ? 3 : granularity;",
          "",
          "[Removed Lines]",
          "3764:     public boolean useTableIndexAnswerSelectStarEnabled() {",
          "3765:         return Boolean.parseBoolean(getOptional(\"kylin.query.use-tableindex-answer-select-star.enabled\", FALSE));",
          "3766:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core-common/src/main/java/org/apache/kylin/common/QueryContext.java||src/core-common/src/main/java/org/apache/kylin/common/QueryContext.java": [
          "File: src/core-common/src/main/java/org/apache/kylin/common/QueryContext.java -> src/core-common/src/main/java/org/apache/kylin/common/QueryContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import java.util.concurrent.atomic.AtomicLong;",
          "32: import org.apache.kylin.common.util.RandomUtil;",
          "34: import com.alibaba.ttl.TransmittableThreadLocal;",
          "37: import lombok.AllArgsConstructor;",
          "38: import lombok.Getter;",
          "",
          "[Removed Lines]",
          "35: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "[Added Lines]",
          "33: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:         private String separator;",
          "362:         private boolean isRefused;",
          "363:         private boolean includeHeader;",
          "364:     }",
          "366:     @Getter",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "364:         private boolean isVacant;",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     final Map<Integer, TableExtDesc.ColumnStats> columnStatMap = Maps.newHashMap();",
          "58:     final KylinConfig kylinConfig;",
          "60:     AggIndexMatcher aggIndexMatcher;",
          "61:     TableIndexMatcher tableIndexMatcher;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     SQLDigest sqlDigest;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:     public ChooserContext(SQLDigest sqlDigest, NDataflow dataflow) {",
          "81:         this(dataflow.getModel());",
          "82:         prepareIndexMatchers(sqlDigest, dataflow);",
          "83:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:         this.sqlDigest = sqlDigest;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:     public boolean isIndexMatchersInvalid() {",
          "110:     }",
          "112:     public TableExtDesc.ColumnStats getColumnStats(TblColRef ref) {",
          "",
          "[Removed Lines]",
          "109:         return !getAggIndexMatcher().isValid() && !getTableIndexMatcher().isValid();",
          "",
          "[Added Lines]",
          "110:         boolean invalid = !getAggIndexMatcher().isValid() && !getTableIndexMatcher().isValid();",
          "111:         if (invalid) {",
          "112:             log.warn(\"Unfortunately, the fast check has failed. \"",
          "113:                     + \"It's possible that the queried columns contain null values, \"",
          "114:                     + \"which could be due to the computed column not being present in the model.\");",
          "115:         }",
          "116:         return invalid;",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.kylin.metadata.cube.cuboid;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "24: import java.util.Set;",
          "28: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "30: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "31: import org.apache.kylin.metadata.model.DeriveInfo;",
          "33: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "34: import org.apache.kylin.metadata.realization.IRealizationCandidate;",
          "36: import lombok.Getter;",
          "37: import lombok.Setter;",
          "39: public class NLayoutCandidate implements IRealizationCandidate {",
          "48:     public static final NLayoutCandidate EMPTY = new NLayoutCandidate(new LayoutEntity(), Double.MAX_VALUE,",
          "49:             new CapabilityResult());",
          "59:         this.layoutEntity = layoutEntity;",
          "60:     }",
          "64:         this.cost = cost;",
          "65:         this.capabilityResult = result;",
          "66:     }",
          "",
          "[Removed Lines]",
          "20: import java.util.ArrayList;",
          "21: import java.util.HashSet;",
          "26: import javax.annotation.Nonnull;",
          "32: import org.apache.kylin.metadata.model.JoinDesc;",
          "40:     private @Nonnull LayoutEntity layoutEntity;",
          "41:     @Setter",
          "42:     private double cost;",
          "44:     @Setter",
          "45:     @Getter",
          "46:     private CapabilityResult capabilityResult;",
          "52:     private @Nonnull Map<Integer, DeriveInfo> derivedToHostMap = Maps.newHashMap();",
          "54:     @Getter",
          "55:     @Setter",
          "56:     Set<String> derivedTableSnapshots = new HashSet<>();",
          "58:     public NLayoutCandidate(@Nonnull LayoutEntity layoutEntity) {",
          "62:     public NLayoutCandidate(@Nonnull LayoutEntity layoutEntity, double cost, CapabilityResult result) {",
          "63:         this.layoutEntity = layoutEntity;",
          "",
          "[Added Lines]",
          "24: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "27: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "36: @Getter",
          "37: @Setter",
          "43:     private LayoutEntity layoutEntity;",
          "44:     private double cost;",
          "45:     private CapabilityResult capabilityResult;",
          "46:     private long range;",
          "47:     private long maxSegEnd;",
          "48:     private Map<Integer, DeriveInfo> derivedToHostMap = Maps.newHashMap();",
          "49:     Set<String> derivedTableSnapshots = Sets.newHashSet();",
          "51:     public NLayoutCandidate(LayoutEntity layoutEntity) {",
          "52:         Preconditions.checkNotNull(layoutEntity);",
          "56:     public NLayoutCandidate(LayoutEntity layoutEntity, double cost, CapabilityResult result) {",
          "57:         this(layoutEntity);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:         return this.getLayoutEntity().getIndex() == null;",
          "70:     }",
          "90:     public Map<List<Integer>, List<DeriveInfo>> makeHostToDerivedMap() {",
          "91:         Map<List<Integer>, List<DeriveInfo>> hostToDerivedMap = Maps.newHashMap();",
          "116:             }",
          "121:         return hostToDerivedMap;",
          "122:     }",
          "127:     }",
          "129:     @Override",
          "130:     public String toString() {",
          "133:     }",
          "134: }",
          "",
          "[Removed Lines]",
          "72:     @Nonnull",
          "73:     public LayoutEntity getLayoutEntity() {",
          "74:         return layoutEntity;",
          "75:     }",
          "77:     public void setLayoutEntity(@Nonnull LayoutEntity cuboidLayout) {",
          "78:         this.layoutEntity = cuboidLayout;",
          "79:     }",
          "81:     @Nonnull",
          "82:     public Map<Integer, DeriveInfo> getDerivedToHostMap() {",
          "83:         return derivedToHostMap;",
          "84:     }",
          "86:     public void setDerivedToHostMap(@Nonnull Map<Integer, DeriveInfo> derivedToHostMap) {",
          "87:         this.derivedToHostMap = derivedToHostMap;",
          "88:     }",
          "93:         for (Map.Entry<Integer, DeriveInfo> entry : derivedToHostMap.entrySet()) {",
          "95:             Integer derCol = entry.getKey();",
          "96:             List<Integer> hostCols = entry.getValue().columns;",
          "97:             DeriveInfo.DeriveType type = entry.getValue().type;",
          "98:             JoinDesc join = entry.getValue().join;",
          "100:             List<DeriveInfo> infoList = hostToDerivedMap.computeIfAbsent(hostCols, k -> new ArrayList<>());",
          "103:             boolean merged = false;",
          "104:             for (DeriveInfo existing : infoList) {",
          "105:                 if (existing.type == type && existing.join.getPKSide().equals(join.getPKSide())) {",
          "106:                     if (existing.columns.contains(derCol)) {",
          "107:                         merged = true;",
          "108:                         break;",
          "109:                     }",
          "110:                     if (type == DeriveInfo.DeriveType.LOOKUP || type == DeriveInfo.DeriveType.LOOKUP_NON_EQUI) {",
          "111:                         existing.columns.add(derCol);",
          "112:                         merged = true;",
          "113:                         break;",
          "114:                     }",
          "115:                 }",
          "117:             if (!merged)",
          "118:                 infoList.add(new DeriveInfo(type, join, Lists.newArrayList(derCol), false));",
          "119:         }",
          "124:     @Override",
          "125:     public double getCost() {",
          "126:         return this.cost;",
          "131:         return \"LayoutCandidate{\" + \"cuboidLayout=\" + layoutEntity + \", indexEntity=\" + layoutEntity.getIndex()",
          "132:                 + \", cost=\" + cost + '}';",
          "",
          "[Added Lines]",
          "68:         derivedToHostMap.forEach((derivedColId, deriveInfo) -> {",
          "69:             DeriveInfo.DeriveType type = deriveInfo.type;",
          "70:             List<Integer> columns = deriveInfo.columns;",
          "71:             List<DeriveInfo> infoList = hostToDerivedMap.computeIfAbsent(columns, k -> Lists.newArrayList());",
          "72:             if (!isMerged(derivedColId, deriveInfo, infoList)) {",
          "73:                 infoList.add(new DeriveInfo(type, deriveInfo.join, Lists.newArrayList(derivedColId), false));",
          "75:         });",
          "80:     private static boolean isMerged(Integer derCol, DeriveInfo deriveInfo, List<DeriveInfo> infoList) {",
          "81:         DeriveInfo.DeriveType type = deriveInfo.type;",
          "82:         boolean merged = false;",
          "83:         for (DeriveInfo existing : infoList) {",
          "84:             if (existing.type == type && existing.join.getPKSide().equals(deriveInfo.join.getPKSide())) {",
          "85:                 if (existing.columns.contains(derCol)) {",
          "86:                     merged = true;",
          "87:                 }",
          "88:                 if (type == DeriveInfo.DeriveType.LOOKUP || type == DeriveInfo.DeriveType.LOOKUP_NON_EQUI) {",
          "89:                     existing.columns.add(derCol);",
          "90:                     merged = true;",
          "91:                 }",
          "92:             }",
          "93:             if (merged) {",
          "94:                 break;",
          "95:             }",
          "96:         }",
          "97:         return merged;",
          "102:         String type = \"\";",
          "103:         if (layoutEntity.isManual()) {",
          "104:             type += \"manual\";",
          "105:         } else if (layoutEntity.isAuto()) {",
          "106:             type += \"auto\";",
          "107:         }",
          "108:         if (layoutEntity.isBase()) {",
          "109:             type += type.isEmpty() ? \"base\" : \",base\";",
          "110:         }",
          "111:         if (type.isEmpty()) {",
          "112:             type = \"unknown\";",
          "113:         }",
          "114:         return \"LayoutCandidate{\" + \"layout=\" + layoutEntity //",
          "115:                 + \", type=\" + type //",
          "116:                 + \", cost=\" + cost //",
          "117:                 + \"}\";",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLookupCandidate.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLookupCandidate.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLookupCandidate.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLookupCandidate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: public class NLookupCandidate implements IRealizationCandidate {",
          "26:     @Getter",
          "29:     @Getter",
          "32:     public NLookupCandidate(String tableRef, boolean isUsingSnapShot) {",
          "33:         this.tableRef = tableRef;",
          "",
          "[Removed Lines]",
          "27:     private String tableRef;",
          "30:     private boolean isUsingSnapShot;",
          "",
          "[Added Lines]",
          "27:     private final String tableRef;",
          "30:     private final boolean isUsingSnapShot;",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:         Map<Long, List<NDataLayout>> commonLayoutsMap = commonLayouts.stream()",
          "96:                 .collect(Collectors.toMap(NDataLayout::getLayoutId, Lists::newArrayList));",
          "97:         List<NLayoutCandidate> candidates = collectAllLayoutCandidates(dataflow, chooserContext, commonLayoutsMap);",
          "109:     }",
          "111:     public static List<NLayoutCandidate> collectAllLayoutCandidates(NDataflow dataflow, ChooserContext chooserContext,",
          "113:         List<NLayoutCandidate> candidates = Lists.newArrayList();",
          "115:             LayoutEntity layout = dataflow.getIndexPlan().getLayoutEntity(entry.getKey());",
          "116:             log.trace(\"Matching index: id = {}\", entry.getKey());",
          "117:             IndexMatcher.MatchResult matchResult = chooserContext.getTableIndexMatcher().match(layout);",
          "",
          "[Removed Lines]",
          "99:         QueryInterruptChecker.checkThreadInterrupted(\"Interrupted exception occurs.\",",
          "100:                 \"Current step involves gathering all the layouts that \"",
          "101:                         + \"can potentially provide a response to this query.\");",
          "103:         if (candidates.isEmpty()) {",
          "104:             return null;",
          "105:         }",
          "106:         log.info(\"Matched candidates num : {}\", candidates.size());",
          "107:         sortCandidates(candidates, chooserContext, sqlDigest);",
          "108:         return candidates.get(0);",
          "112:             Map<Long, List<NDataLayout>> commonLayoutsMap) {",
          "114:         for (Map.Entry<Long, List<NDataLayout>> entry : commonLayoutsMap.entrySet()) {",
          "",
          "[Added Lines]",
          "98:         return chooseBestLayoutCandidate(dataflow, sqlDigest, chooserContext, candidates, \"selectLayoutCandidate\");",
          "102:             Map<Long, List<NDataLayout>> dataLayoutMap) {",
          "104:         for (Map.Entry<Long, List<NDataLayout>> entry : dataLayoutMap.entrySet()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:             }",
          "122:             if (!matchResult.isMatched()) {",
          "124:                 continue;",
          "125:             }",
          "",
          "[Removed Lines]",
          "123:                 log.trace(\"Matching failed\");",
          "",
          "[Added Lines]",
          "113:                 log.trace(\"The [{}] cannot match with the {}\", chooserContext.sqlDigest.toString(), layout);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:                 candidate.setDerivedTableSnapshots(candidate.getDerivedToHostMap().keySet().stream()",
          "132:                         .map(i -> chooserContext.convertToRef(i).getTable()).collect(Collectors.toSet()));",
          "133:             }",
          "135:             candidate.setCost(allRows * (tempResult.influences.size() + matchResult.getInfluenceFactor()));",
          "136:             candidate.setCapabilityResult(tempResult);",
          "137:             candidates.add(candidate);",
          "138:         }",
          "139:         return candidates;",
          "140:     }",
          "142:     private static Collection<NDataLayout> getCommonLayouts(List<NDataSegment> segments, NDataflow dataflow,",
          "143:             Map<String, Set<Long>> chSegmentToLayoutsMap) {",
          "144:         KylinConfig projectConfig = NProjectManager.getProjectConfig(dataflow.getProject());",
          "",
          "[Removed Lines]",
          "134:             long allRows = entry.getValue().stream().mapToLong(NDataLayout::getRows).sum();",
          "",
          "[Added Lines]",
          "124:             List<NDataLayout> dataLayouts = entry.getValue();",
          "125:             long allRows = dataLayouts.stream().mapToLong(NDataLayout::getRows).sum();",
          "129:             long[] rangeAndLatest = calcSegRangeAndMaxEnd(chooserContext, dataflow, dataLayouts);",
          "130:             candidate.setRange(rangeAndLatest[0]);",
          "131:             candidate.setMaxSegEnd(rangeAndLatest[1]);",
          "137:     private static long[] calcSegRangeAndMaxEnd(ChooserContext chooserContext, NDataflow df,",
          "138:             List<NDataLayout> dataLayouts) {",
          "139:         long[] rangeAndLatest = new long[2];",
          "140:         if (!chooserContext.getKylinConfig().isVacantIndexPruningEnabled()) {",
          "141:             return rangeAndLatest;",
          "142:         }",
          "143:         List<String> segmentNameList = Lists.newArrayList();",
          "144:         for (NDataLayout dataLayout : dataLayouts) {",
          "145:             NDataSegment segment = df.getSegment(dataLayout.getSegDetails().getId());",
          "146:             Long end = (Long) segment.getSegRange().getEnd();",
          "147:             Long start = (Long) segment.getSegRange().getStart();",
          "148:             rangeAndLatest[0] += (end - start);",
          "149:             rangeAndLatest[1] = Math.max(rangeAndLatest[1], end);",
          "150:             segmentNameList.add(segment.getName());",
          "151:         }",
          "152:         log.trace(\"All available segments are: {}\", segmentNameList);",
          "153:         return rangeAndLatest;",
          "154:     }",
          "156:     public static NLayoutCandidate selectHighIntegrityCandidate(NDataflow dataflow, List<NDataSegment> prunedSegments,",
          "157:             SQLDigest digest) {",
          "158:         if (!NProjectManager.getProjectConfig(dataflow.getProject()).isVacantIndexPruningEnabled()) {",
          "159:             return null;",
          "160:         }",
          "161:         if (CollectionUtils.isEmpty(prunedSegments)) {",
          "162:             log.info(\"There is no segment to answer sql\");",
          "163:             return NLayoutCandidate.EMPTY;",
          "164:         }",
          "166:         ChooserContext chooserContext = new ChooserContext(digest, dataflow);",
          "167:         if (chooserContext.isIndexMatchersInvalid()) {",
          "168:             return null;",
          "169:         }",
          "171:         Map<Long, List<NDataLayout>> idToDataLayoutsMap = Maps.newHashMap();",
          "172:         for (NDataSegment segment : prunedSegments) {",
          "173:             segment.getLayoutsMap().forEach((id, dataLayout) -> {",
          "174:                 idToDataLayoutsMap.putIfAbsent(id, Lists.newArrayList());",
          "175:                 idToDataLayoutsMap.get(id).add(dataLayout);",
          "176:             });",
          "177:         }",
          "179:         List<NLayoutCandidate> allLayoutCandidates = NQueryLayoutChooser.collectAllLayoutCandidates(dataflow,",
          "180:                 chooserContext, idToDataLayoutsMap);",
          "181:         return chooseBestLayoutCandidate(dataflow, digest, chooserContext, allLayoutCandidates,",
          "182:                 \"selectHighIntegrityCandidate\");",
          "183:     }",
          "185:     private static NLayoutCandidate chooseBestLayoutCandidate(NDataflow dataflow, SQLDigest digest,",
          "186:             ChooserContext chooserContext, List<NLayoutCandidate> allLayoutCandidates, String invokedByMethod) {",
          "187:         QueryInterruptChecker.checkThreadInterrupted(\"Interrupted exception occurs.\",",
          "188:                 \"Current step involves gathering all the layouts that \"",
          "189:                         + \"can potentially provide a response to this query.\");",
          "191:         if (allLayoutCandidates.isEmpty()) {",
          "192:             log.info(\"There is no layouts can match with the [{}]\", digest.toString());",
          "193:             return null;",
          "194:         }",
          "195:         sortCandidates(allLayoutCandidates, chooserContext, digest);",
          "196:         log.debug(\"Invoked by method {}. Successfully matched {} candidates within the model ({}/{}), \" //",
          "197:                 + \"and {} has been selected.\", invokedByMethod, allLayoutCandidates.size(), dataflow.getProject(),",
          "198:                 dataflow.getId(), allLayoutCandidates.get(0).toString());",
          "199:         return allLayoutCandidates.get(0);",
          "200:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "174:         return commonLayouts.values();",
          "175:     }",
          "178:             SQLDigest sqlDigest) {",
          "196:                 .compound(derivedLayoutComparator()) //",
          "197:                 .compound(rowSizeComparator()) // L1 comparator, compare cuboid rows",
          "198:                 .compound(filterColumnComparator(filterColIds)) // L2 comparator, order filter columns",
          "199:                 .compound(dimensionSizeComparator()) // the lower dimension the best",
          "200:                 .compound(measureSizeComparator()) // L3 comparator, order size of cuboid columns",
          "203:     }",
          "206:         return (layoutCandidate1, layoutCandidate2) -> {",
          "207:             if (!KylinConfig.getInstanceFromEnv().isPreferAggIndex()) {",
          "208:                 return 0;",
          "",
          "[Removed Lines]",
          "177:     private static void sortCandidates(List<NLayoutCandidate> candidates, ChooserContext chooserContext,",
          "179:         final Set<TblColRef> filterColSet = ImmutableSet.copyOf(sqlDigest.filterColumns);",
          "180:         final List<TblColRef> filterCols = Lists.newArrayList(filterColSet);",
          "181:         val filterColIds = filterCols.stream().sorted(ComparatorUtils.filterColComparator(chooserContext))",
          "182:                 .map(col -> chooserContext.getTblColMap().get(col)).collect(Collectors.toList());",
          "184:         final Set<TblColRef> nonFilterColSet = sqlDigest.isRawQuery ? sqlDigest.allColumns.stream()",
          "185:                 .filter(colRef -> colRef.getFilterLevel() == TblColRef.FilterColEnum.NONE).collect(Collectors.toSet())",
          "186:                 : sqlDigest.groupbyColumns.stream()",
          "187:                         .filter(colRef -> colRef.getFilterLevel() == TblColRef.FilterColEnum.NONE)",
          "188:                         .collect(Collectors.toSet());",
          "189:         final List<TblColRef> nonFilterColumns = Lists.newArrayList(nonFilterColSet);",
          "190:         nonFilterColumns.sort(ComparatorUtils.nonFilterColComparator());",
          "191:         val nonFilterColIds = nonFilterColumns.stream().map(col -> chooserContext.getTblColMap().get(col))",
          "192:                 .collect(Collectors.toList());",
          "194:         Ordering<NLayoutCandidate> ordering = Ordering //",
          "195:                 .from(priorityLayoutComparator()) //",
          "201:                 .compound(nonFilterColumnComparator(nonFilterColIds)); // L4 comparator, order non-filter columns",
          "202:         candidates.sort(ordering);",
          "205:     private static Comparator<NLayoutCandidate> priorityLayoutComparator() {",
          "",
          "[Added Lines]",
          "237:     public static void sortCandidates(List<NLayoutCandidate> candidates, ChooserContext chooserContext,",
          "239:         List<Integer> filterColIds = getFilterColIds(chooserContext, sqlDigest);",
          "240:         List<Integer> nonFilterColIds = getNonFilterColIds(chooserContext, sqlDigest);",
          "241:         Ordering<NLayoutCandidate> ordering = chooserContext.getKylinConfig().isVacantIndexPruningEnabled()",
          "242:                 ? getEnhancedSorter(filterColIds, nonFilterColIds)",
          "243:                 : getDefaultSorter(filterColIds, nonFilterColIds);",
          "244:         candidates.sort(ordering);",
          "245:     }",
          "247:     private static Ordering<NLayoutCandidate> getEnhancedSorter(List<Integer> filterColIds,",
          "248:             List<Integer> nonFilterColIds) {",
          "249:         return Ordering.from(segmentRangeComparator()) // high data integrity",
          "250:                 .compound(preferAggComparator()) //",
          "251:                 .compound(derivedLayoutComparator()) //",
          "252:                 .compound(rowSizeComparator()) // lower cost",
          "253:                 .compound(filterColumnComparator(filterColIds)) //",
          "254:                 .compound(dimensionSizeComparator()) //",
          "255:                 .compound(measureSizeComparator()) //",
          "256:                 .compound(nonFilterColumnComparator(nonFilterColIds)) //",
          "257:                 .compound(segmentEffectivenessComparator()); // the latest segment",
          "258:     }",
          "260:     private static Ordering<NLayoutCandidate> getDefaultSorter(List<Integer> filterColIds,",
          "261:             List<Integer> nonFilterColIds) {",
          "262:         return Ordering //",
          "263:                 .from(preferAggComparator()) //",
          "269:                 .compound(nonFilterColumnComparator(nonFilterColIds));",
          "270:     }",
          "272:     private static List<Integer> getFilterColIds(ChooserContext chooserContext, SQLDigest sqlDigest) {",
          "273:         Set<TblColRef> filterColSet = ImmutableSet.copyOf(sqlDigest.filterColumns);",
          "274:         List<TblColRef> filterCols = Lists.newArrayList(filterColSet);",
          "275:         return filterCols.stream().sorted(ComparatorUtils.filterColComparator(chooserContext))",
          "276:                 .map(col -> chooserContext.getTblColMap().get(col)).collect(Collectors.toList());",
          "277:     }",
          "279:     private static List<Integer> getNonFilterColIds(ChooserContext chooserContext, SQLDigest sqlDigest) {",
          "281:         Set<TblColRef> nonFilterColSet;",
          "282:         if (sqlDigest.isRawQuery) {",
          "283:             nonFilterColSet = sqlDigest.allColumns.stream()",
          "284:                     .filter(colRef -> colRef.getFilterLevel() == TblColRef.FilterColEnum.NONE)",
          "285:                     .collect(Collectors.toSet());",
          "286:         } else {",
          "287:             nonFilterColSet = sqlDigest.groupbyColumns.stream()",
          "288:                     .filter(colRef -> colRef.getFilterLevel() == TblColRef.FilterColEnum.NONE)",
          "289:                     .collect(Collectors.toSet());",
          "290:         }",
          "291:         List<TblColRef> nonFilterColumns = Lists.newArrayList(nonFilterColSet);",
          "292:         nonFilterColumns.sort(ComparatorUtils.nonFilterColComparator());",
          "293:         return nonFilterColumns.stream().map(col -> chooserContext.getTblColMap().get(col))",
          "294:                 .collect(Collectors.toList());",
          "295:     }",
          "297:     public static Comparator<NLayoutCandidate> segmentRangeComparator() {",
          "298:         return (c1, c2) -> Long.compare(c2.getRange(), c1.getRange());",
          "299:     }",
          "301:     public static Comparator<NLayoutCandidate> segmentEffectivenessComparator() {",
          "302:         return (c1, c2) -> Long.compare(c2.getMaxSegEnd(), c1.getMaxSegEnd());",
          "305:     public static Comparator<NLayoutCandidate> preferAggComparator() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "218:         };",
          "219:     }",
          "222:         return (candidate1, candidate2) -> {",
          "223:             int result = 0;",
          "224:             if (candidate1.getDerivedToHostMap().isEmpty() && !candidate2.getDerivedToHostMap().isEmpty()) {",
          "",
          "[Removed Lines]",
          "221:     private static Comparator<NLayoutCandidate> derivedLayoutComparator() {",
          "",
          "[Added Lines]",
          "321:     public static Comparator<NLayoutCandidate> derivedLayoutComparator() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "236:         };",
          "237:     }",
          "240:         return Comparator.comparingDouble(NLayoutCandidate::getCost);",
          "241:     }",
          "244:         return Comparator.comparingInt(candidate -> candidate.getLayoutEntity().getOrderedDimensions().size());",
          "245:     }",
          "248:         return Comparator.comparingInt(candidate -> candidate.getLayoutEntity().getOrderedMeasures().size());",
          "249:     }",
          "",
          "[Removed Lines]",
          "239:     private static Comparator<NLayoutCandidate> rowSizeComparator() {",
          "243:     private static Comparator<NLayoutCandidate> dimensionSizeComparator() {",
          "247:     private static Comparator<NLayoutCandidate> measureSizeComparator() {",
          "",
          "[Added Lines]",
          "339:     public static Comparator<NLayoutCandidate> rowSizeComparator() {",
          "343:     public static Comparator<NLayoutCandidate> dimensionSizeComparator() {",
          "347:     public static Comparator<NLayoutCandidate> measureSizeComparator() {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257:         return Ordering.from(shardByComparator(sortedFilters)).compound(colComparator(sortedFilters));",
          "258:     }",
          "261:         return colComparator(sortedNonFilters);",
          "262:     }",
          "268:         return (layoutCandidate1, layoutCandidate2) -> {",
          "269:             List<Integer> position1 = getColumnsPos(layoutCandidate1, sortedCols);",
          "270:             List<Integer> position2 = getColumnsPos(layoutCandidate2, sortedCols);",
          "",
          "[Removed Lines]",
          "256:     private static Comparator<NLayoutCandidate> filterColumnComparator(List<Integer> sortedFilters) {",
          "260:     private static Comparator<NLayoutCandidate> nonFilterColumnComparator(List<Integer> sortedNonFilters) {",
          "267:     private static Comparator<NLayoutCandidate> colComparator(List<Integer> sortedCols) {",
          "",
          "[Added Lines]",
          "356:     public static Comparator<NLayoutCandidate> filterColumnComparator(List<Integer> sortedFilters) {",
          "360:     public static Comparator<NLayoutCandidate> nonFilterColumnComparator(List<Integer> sortedNonFilters) {",
          "367:     public static Comparator<NLayoutCandidate> colComparator(List<Integer> sortedCols) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "293:         return (candidate1, candidate2) -> {",
          "294:             int shardByCol1Idx = getShardByColIndex(candidate1, columns);",
          "295:             int shardByCol2Idx = getShardByColIndex(candidate2, columns);",
          "",
          "[Removed Lines]",
          "292:     private static Comparator<NLayoutCandidate> shardByComparator(List<Integer> columns) {",
          "",
          "[Added Lines]",
          "392:     public static Comparator<NLayoutCandidate> shardByComparator(List<Integer> columns) {",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:         } else {",
          "75:             logger.trace(\"Normal dataflow matching\");",
          "77:             NLayoutCandidate candidateAndInfluence = NQueryLayoutChooser.selectLayoutCandidate(dataflow, prunedSegments,",
          "78:                     digest, secondStorageSegmentLayoutMap);",
          "80:                 logger.trace(\"Partial dataflow matching\");",
          "81:                 candidateAndInfluence = NQueryLayoutChooser.selectPartialLayoutCandidate(dataflow, prunedSegments,",
          "82:                         digest, secondStorageSegmentLayoutMap);",
          "83:             }",
          "84:             if (candidateAndInfluence != null) {",
          "85:                 chosenCandidate = candidateAndInfluence;",
          "",
          "[Removed Lines]",
          "76:             boolean partialMatchIndex = QueryContext.current().isPartialMatchIndex();",
          "79:             if (partialMatchIndex && candidateAndInfluence == null) {",
          "",
          "[Added Lines]",
          "78:             if (candidateAndInfluence == null && QueryContext.current().isPartialMatchIndex()) {",
          "83:             } else if (candidateAndInfluence == null) {",
          "84:                 logger.debug(\"select the layout candidate with high data integrity.\");",
          "85:                 candidateAndInfluence = NQueryLayoutChooser.selectHighIntegrityCandidate(dataflow, prunedSegments,",
          "86:                         digest);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:             } else {",
          "95:                 result.setSelectedCandidate(chosenCandidate);",
          "96:             }",
          "98:         } else {",
          "99:             result.setCapable(false);",
          "100:         }",
          "",
          "[Removed Lines]",
          "97:             result.cost = (int) chosenCandidate.getCost();",
          "",
          "[Added Lines]",
          "101:             result.setCost(chosenCandidate.getCost());",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import lombok.NoArgsConstructor;",
          "32: import lombok.Setter;",
          "34: @NoArgsConstructor",
          "35: public class CapabilityResult {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: @Getter",
          "35: @Setter",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:     private boolean capable = false;",
          "55:     private IRealizationCandidate selectedCandidate;",
          "59:     private IRealizationCandidate selectedStreamingCandidate;",
          "63:     private int layoutUnmatchedColsSize;",
          "73:     public IncapableCause incapableCause;",
          "",
          "[Removed Lines]",
          "46:     @Getter",
          "47:     @Setter",
          "53:     @Getter",
          "54:     @Setter",
          "57:     @Getter",
          "58:     @Setter",
          "61:     @Getter",
          "62:     @Setter",
          "68:     public int cost = Integer.MAX_VALUE;",
          "",
          "[Added Lines]",
          "62:     private double cost = Integer.MAX_VALUE;",
          "72:     private boolean isVacant;",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:                 child = realization.isCapable(digest, queryableSeg.getStreamingSegments(), Maps.newHashMap());",
          "139:                 result.setSelectedStreamingCandidate(child.getSelectedStreamingCandidate());",
          "140:                 if (child.isCapable()) {",
          "142:                 }",
          "143:             } else {",
          "144:                 child = realization.isCapable(digest, queryableSeg.getBatchSegments(),",
          "145:                         queryableSeg.getChSegToLayoutsMap());",
          "146:                 result.setSelectedCandidate(child.getSelectedCandidate());",
          "147:                 if (child.isCapable()) {",
          "149:                 }",
          "150:             }",
          "151:             if (child.isCapable()) {",
          "",
          "[Removed Lines]",
          "141:                     result.cost = Math.min(result.cost, (int) child.getSelectedStreamingCandidate().getCost());",
          "148:                     result.cost = Math.min(result.cost, (int) child.getSelectedCandidate().getCost());",
          "",
          "[Added Lines]",
          "141:                     result.setCost(Math.min(result.getCost(), child.getSelectedStreamingCandidate().getCost()));",
          "148:                     result.setCost(Math.min(result.getCost(), child.getSelectedCandidate().getCost()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:             }",
          "157:         }",
          "161:         return result;",
          "162:     }",
          "",
          "[Removed Lines]",
          "159:         result.cost--; // let hybrid win its children",
          "",
          "[Added Lines]",
          "159:         result.setCost(result.getCost() - 1); // let hybrid win its children",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.apache.calcite.rex.RexNode;",
          "27: import org.apache.calcite.sql.parser.SqlParseException;",
          "28: import org.apache.kylin.common.KylinConfig;",
          "29: import org.apache.kylin.common.util.DateFormat;",
          "30: import org.apache.kylin.common.util.Pair;",
          "31: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "32: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "33: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "34: import org.apache.kylin.metadata.cube.model.LayoutPartition;",
          "35: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "36: import org.apache.kylin.metadata.cube.model.NDataflowUpdate;",
          "37: import org.apache.kylin.metadata.model.NDataModelManager;",
          "38: import org.apache.kylin.metadata.realization.NoRealizationFoundException;",
          "39: import org.apache.kylin.query.engine.QueryExec;",
          "40: import org.apache.kylin.query.relnode.OLAPContext;",
          "41: import org.apache.kylin.util.OlapContextUtil;",
          "42: import org.junit.Assert;",
          "43: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.kylin.common.KylinConfigBase;",
          "30: import org.apache.kylin.common.QueryContext;",
          "37: import org.apache.kylin.metadata.cube.model.NDataLayout;",
          "38: import org.apache.kylin.metadata.cube.model.NDataSegDetails;",
          "39: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "40: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "44: import org.apache.kylin.metadata.model.Segments;",
          "45: import org.apache.kylin.metadata.project.EnhancedUnitOfWork;",
          "49: import org.apache.kylin.storage.StorageContext;",
          "50: import org.apache.kylin.util.MetadataTestUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "389:         { // composite filters",
          "390:             val sqlFilter = sql + \"select * from T1\\n\"",
          "391:                     + \"where (cal_dt = DATE'2012-01-01' or (cast(cal_dt as date) = '2012-01-02' or cal_dt = '2012-01-03')) and (cal_dt is not null or cal_dt in ('2012-01-01', '2012-01-02'))\";",
          "393:             assertFiltersAndLayout(context, null,",
          "394:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),\"",
          "395:                             + \"OR(=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01), =(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02), =(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)),\"",
          "",
          "[Removed Lines]",
          "392:             val context = getMatchedContexts(project, sqlFilter).get(0);",
          "",
          "[Added Lines]",
          "402:             val context = OlapContextUtil.getOlapContexts(project, sqlFilter).get(0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "399:         { // invalid filters with or",
          "400:             val sqlFilter = sql + \"select * from T1\\n\"",
          "401:                     + \"where trans_id = 123  or trans_id + 1 = 123 or (trans_id + 2 = 234 and trans_id = 345)\";",
          "403:             assertFiltersAndLayout(context, null,",
          "404:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\");",
          "405:         }",
          "",
          "[Removed Lines]",
          "402:             val context = getMatchedContexts(project, sqlFilter).get(0);",
          "",
          "[Added Lines]",
          "412:             val context = OlapContextUtil.getOlapContexts(project, sqlFilter).get(0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "407:         { // invalid filters with and",
          "408:             val sqlFilter = sql + \"select * from T1\\n\"",
          "409:                     + \"where trans_id = 123 and (trans_id + 2 = 234 or trans_id = 345)\";",
          "411:             assertFiltersAndLayout(context, null,",
          "412:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),\"",
          "413:                             + \"=(DEFAULT.TEST_KYLIN_FACT.TRANS_ID, 123)\");",
          "",
          "[Removed Lines]",
          "410:             val context = getMatchedContexts(project, sqlFilter).get(0);",
          "",
          "[Added Lines]",
          "420:             val context = OlapContextUtil.getOlapContexts(project, sqlFilter).get(0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "416:         { // invalid filters with not",
          "417:             val sqlFilter = sql + \"select * from T1\\n\"",
          "418:                     + \"where trans_id = 123 and (not(trans_id = 234) or trans_id = 345) and (not(trans_id + 1 = 132))\";",
          "420:             assertFiltersAndLayout(context, null,",
          "421:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),\"",
          "422:                             + \"=(DEFAULT.TEST_KYLIN_FACT.TRANS_ID, 123),OR(<>(DEFAULT.TEST_KYLIN_FACT.TRANS_ID, 234), =(DEFAULT.TEST_KYLIN_FACT.TRANS_ID, 345))\");",
          "",
          "[Removed Lines]",
          "419:             val context = getMatchedContexts(project, sqlFilter).get(0);",
          "",
          "[Added Lines]",
          "429:             val context = OlapContextUtil.getOlapContexts(project, sqlFilter).get(0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "455:         { // inner join",
          "456:             val sqlInnerJoin = sql + \" select * from T1 inner join T2 on T1.cal_dt = T2.cal_dt \\n\"",
          "457:                     + \" where T1.cal_dt = '2012-01-01' and T2.cal_dt = DATE '2012-01-02'\";",
          "459:             assertFiltersAndLayout(contexts.get(0), seg1Id,",
          "460:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01)\");",
          "461:             assertFiltersAndLayout(contexts.get(1), seg2Id,",
          "",
          "[Removed Lines]",
          "458:             val contexts = getMatchedContexts(project, sqlInnerJoin);",
          "",
          "[Added Lines]",
          "468:             val contexts = OlapContextUtil.getOlapContexts(project, sqlInnerJoin);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "465:         { // left join",
          "466:             val sqlLeftJoin = sql + \" select * from T1 left join T2 on T1.cal_dt = T2.cal_dt \\n\"",
          "467:                     + \" where T1.cal_dt = DATE '2012-01-01' and T2.cal_dt = DATE '2012-01-02'\";",
          "469:             assertFiltersAndLayout(contexts.get(0), seg1Id,",
          "470:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01)\");",
          "471:             assertFiltersAndLayout(contexts.get(1), null,",
          "",
          "[Removed Lines]",
          "468:             val contexts = getMatchedContexts(project, sqlLeftJoin);",
          "",
          "[Added Lines]",
          "478:             val contexts = OlapContextUtil.getOlapContexts(project, sqlLeftJoin);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "475:         { // right join",
          "476:             val sqlRightJoin = sql + \" select * from T1 right join T2 on T1.cal_dt = T2.cal_dt \\n\"",
          "477:                     + \" where T1.cal_dt = DATE '2012-01-01' and T2.cal_dt = DATE '2012-01-02'\";",
          "479:             assertFiltersAndLayout(contexts.get(0), seg2Id,",
          "480:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02),=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02)\");",
          "481:             assertFiltersAndLayout(contexts.get(1), null,",
          "",
          "[Removed Lines]",
          "478:             val contexts = getMatchedContexts(project, sqlRightJoin);",
          "",
          "[Added Lines]",
          "488:             val contexts = OlapContextUtil.getOlapContexts(project, sqlRightJoin);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "485:         { // full join",
          "486:             val sqlFullJoin = sql + \" select * from T1 full join T2 on T1.cal_dt = T2.cal_dt \\n\"",
          "487:                     + \" where T1.cal_dt = DATE '2012-01-01' and T2.cal_dt = DATE '2012-01-02'\";",
          "489:             assertFiltersAndLayout(contexts.get(0), null,",
          "490:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\");",
          "491:             assertFiltersAndLayout(contexts.get(1), null,",
          "",
          "[Removed Lines]",
          "488:             val contexts = getMatchedContexts(project, sqlFullJoin);",
          "",
          "[Added Lines]",
          "498:             val contexts = OlapContextUtil.getOlapContexts(project, sqlFullJoin);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "529:                     + \"(cal_dt='2012-01-01' and trans_id = 15) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 16) or\\n\"",
          "530:                     + \"(cal_dt='2012-01-01' and trans_id = 17) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 18) or\\n\"",
          "531:                     + \"(cal_dt='2012-01-01' and trans_id = 19) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 20)\";",
          "533:             Assert.assertEquals(",
          "534:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\",",
          "535:                     contexts.get(0).getExpandedFilterConditions().stream().map(RexNode::toString)",
          "",
          "[Removed Lines]",
          "532:             val contexts = getMatchedContexts(project, sqlWithTooManyOrs);",
          "",
          "[Added Lines]",
          "542:             val contexts = OlapContextUtil.getOlapContexts(project, sqlWithTooManyOrs);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "543:                     + \"(cal_dt='2012-01-01' and trans_id = 6) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 7) or\\n\"",
          "544:                     + \"(cal_dt='2012-01-01' and trans_id = 8) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 9) or\\n\"",
          "545:                     + \"(cal_dt='2012-01-01' and trans_id = 10)\";",
          "547:             Assert.assertNotEquals(",
          "548:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\",",
          "549:                     contexts.get(0).getExpandedFilterConditions().stream().map(RexNode::toString)",
          "",
          "[Removed Lines]",
          "546:             val contexts = getMatchedContexts(project, sqlWithFilter);",
          "",
          "[Added Lines]",
          "556:             val contexts = OlapContextUtil.getOlapContexts(project, sqlWithFilter);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "553:     }",
          "557:     }",
          "559:     private void assertFiltersAndLayout(OLAPContext context, String segId, String expectedFilterCond) {",
          "",
          "[Removed Lines]",
          "555:     private List<OLAPContext> getMatchedContexts(String project, String sql) throws SqlParseException {",
          "556:         return OlapContextUtil.getOlapContexts(project, sql);",
          "",
          "[Added Lines]",
          "565:     @Test",
          "566:     public void testQueryWithEmptySegment() throws SqlParseException {",
          "578:         val project = \"heterogeneous_segment\";",
          "579:         val dfId = \"747f864b-9721-4b97-acde-0aa8e8656cba\";",
          "582:         val seg3Id = \"54eaf96d-6146-45d2-b94e-d5d187f89919\"; // [20120103000000_20120104000000]",
          "586:         EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {",
          "587:             NDataflowManager dfMgr = NDataflowManager.getInstance(getTestConfig(), project);",
          "588:             NDataflow dataflow = dfMgr.getDataflow(dfId);",
          "589:             NDataSegment latestReadySegment = dataflow.getSegment(seg3Id);",
          "590:             if (latestReadySegment != null) {",
          "591:                 NDataSegDetails segDetails = latestReadySegment.getSegDetails();",
          "592:                 List<NDataLayout> allLayouts = segDetails.getAllLayouts();",
          "595:                 NDataflowUpdate dataflowUpdate = new NDataflowUpdate(dfId);",
          "596:                 NDataLayout[] toRemoveLayouts = allLayouts.stream()",
          "597:                         .filter(dataLayout -> dataLayout.getLayoutId() == 20001).toArray(NDataLayout[]::new);",
          "598:                 dataflowUpdate.setToRemoveLayouts(toRemoveLayouts);",
          "599:                 dfMgr.updateDataflow(dataflowUpdate);",
          "600:             }",
          "601:             return null;",
          "602:         }, project);",
          "604:         val sql = \"select cal_dt, sum(price), count(*) from test_kylin_fact inner join test_account \\n\"",
          "605:                 + \"on test_kylin_fact.seller_id = test_account.account_id \\n\"",
          "606:                 + \"where cal_dt between date'2012-01-01' and date'2012-01-03'\\n\" //",
          "607:                 + \"group by cal_dt\\n\";",
          "609:         {",
          "610:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(project, sql).get(0);",
          "611:             StorageContext storageContext = olapContext.storageContext;",
          "612:             Assert.assertEquals(-1L, storageContext.getLayoutId().longValue());",
          "613:         }",
          "615:         {",
          "616:             MetadataTestUtils.updateProjectConfig(project, \"kylin.query.index-match-rules\",",
          "617:                     KylinConfigBase.USE_VACANT_INDEXES);",
          "618:             try (QueryContext queryContext = QueryContext.current()) {",
          "619:                 OLAPContext olapContext = OlapContextUtil.getOlapContexts(project, sql).get(0);",
          "620:                 StorageContext storageContext = olapContext.storageContext;",
          "621:                 Assert.assertEquals(10001L, storageContext.getLayoutId().longValue());",
          "622:                 Assert.assertFalse(queryContext.getQueryTagInfo().isVacant());",
          "623:             }",
          "624:         }",
          "625:     }",
          "627:     @Test",
          "628:     public void testQueryWithAllSegmentsAreEmpty() throws SqlParseException {",
          "640:         val project = \"heterogeneous_segment\";",
          "641:         val dfId = \"747f864b-9721-4b97-acde-0aa8e8656cba\";",
          "648:         EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {",
          "649:             NDataflowManager dfMgr = NDataflowManager.getInstance(getTestConfig(), project);",
          "650:             NDataflow dataflow = dfMgr.getDataflow(dfId);",
          "651:             Segments<NDataSegment> segments = dataflow.getSegments();",
          "653:             NDataflowUpdate dataflowUpdate = new NDataflowUpdate(dfId);",
          "654:             dataflowUpdate.setToRemoveSegs(segments.toArray(new NDataSegment[0]));",
          "655:             dfMgr.updateDataflow(dataflowUpdate);",
          "656:             return null;",
          "657:         }, project);",
          "659:         val sql = \"select cal_dt, sum(price), count(*) from test_kylin_fact inner join test_account \\n\"",
          "660:                 + \"on test_kylin_fact.seller_id = test_account.account_id \\n\"",
          "661:                 + \"where cal_dt between date'2012-01-01' and date'2012-01-03'\\n\" //",
          "662:                 + \"group by cal_dt\\n\";",
          "664:         MetadataTestUtils.updateProjectConfig(project, \"kylin.query.index-match-rules\",",
          "665:                 KylinConfigBase.USE_VACANT_INDEXES);",
          "666:         try (QueryContext queryContext = QueryContext.current()) {",
          "667:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(project, sql).get(0);",
          "668:             StorageContext storageContext = olapContext.storageContext;",
          "669:             Assert.assertEquals(-1L, storageContext.getLayoutId().longValue());",
          "670:             Assert.assertFalse(queryContext.getQueryTagInfo().isVacant());",
          "671:         }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "567:     }",
          "569:     private void assertNoRealizationFound(String project, String sql) throws SqlParseException {",
          "571:         Assert.assertNull(context.realization);",
          "572:     }",
          "",
          "[Removed Lines]",
          "570:         val context = getMatchedContexts(project, sql).get(0);",
          "",
          "[Added Lines]",
          "685:         val context = OlapContextUtil.getOlapContexts(project, sql).get(0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "580:     private void assertPrunedSegmentsRange(String project, String sql, String dfId,",
          "581:             List<Pair<String, String>> expectedRanges, long expectedLayoutId,",
          "582:             Map<String, List<Long>> expectedPartitions, String expectedFilterCond) throws SqlParseException {",
          "585:         if (expectedLayoutId == -1L) {",
          "586:             Assert.assertTrue(context.storageContext.isEmptyLayout());",
          "",
          "[Removed Lines]",
          "583:         val context = getMatchedContexts(project, sql).get(0);",
          "",
          "[Added Lines]",
          "698:         val context = OlapContextUtil.getOlapContexts(project, sql).get(0);",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:         CapabilityResult result = NDataflowCapabilityChecker.check(dataflow, dataflow.getQueryableSegments(),",
          "50:                 olapContext.getSQLDigest(), null);",
          "51:         Assert.assertNotNull(result);",
          "53:     }",
          "55:     @Test",
          "",
          "[Removed Lines]",
          "52:         Assert.assertEquals((int) result.getSelectedCandidate().getCost(), result.cost);",
          "",
          "[Added Lines]",
          "52:         Assert.assertEquals(result.getSelectedCandidate().getCost(), result.getCost(), 0.001);",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.List;",
          "22: import java.util.Map;",
          "24: import org.apache.calcite.sql.parser.SqlParseException;",
          "25: import org.apache.kylin.common.KylinConfigBase;",
          "26: import org.apache.kylin.common.QueryContext;",
          "27: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "28: import org.apache.kylin.junit.annotation.MetadataInfo;",
          "29: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "30: import org.apache.kylin.metadata.cube.model.NDataLayout;",
          "31: import org.apache.kylin.metadata.cube.model.NDataSegDetails;",
          "32: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "33: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "34: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "35: import org.apache.kylin.metadata.cube.model.NDataflowUpdate;",
          "36: import org.apache.kylin.metadata.model.NDataModel;",
          "37: import org.apache.kylin.metadata.model.NDataModelManager;",
          "38: import org.apache.kylin.metadata.project.EnhancedUnitOfWork;",
          "39: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "40: import org.apache.kylin.query.relnode.OLAPContext;",
          "41: import org.apache.kylin.storage.StorageContext;",
          "42: import org.apache.kylin.util.MetadataTestUtils;",
          "43: import org.apache.kylin.util.OlapContextUtil;",
          "44: import org.junit.jupiter.api.AfterEach;",
          "45: import org.junit.jupiter.api.Assertions;",
          "46: import org.junit.jupiter.api.BeforeEach;",
          "47: import org.junit.jupiter.api.Test;",
          "49: @MetadataInfo",
          "50: class VacantIndexPruningRuleTest extends NLocalWithSparkSessionTest {",
          "52:     @BeforeEach",
          "53:     public void setUp() throws Exception {",
          "54:         super.setUp();",
          "55:     }",
          "57:     @AfterEach",
          "58:     public void teardown() throws Exception {",
          "59:         super.tearDown();",
          "60:     }",
          "62:     @Override",
          "63:     public String getProject() {",
          "64:         return \"default\";",
          "65:     }",
          "67:     @Test",
          "68:     void testWithIndexMatchRulesUseVacantIndexes() throws SqlParseException {",
          "69:         NDataModelManager modelMgr = NDataModelManager.getInstance(getTestConfig(), getProject());",
          "70:         modelMgr.listAllModels().stream().filter(model -> !model.isBroken())",
          "71:                 .forEach(model -> cleanAlreadyExistingLayoutsInSegments(model.getId()));",
          "73:         MetadataTestUtils.updateProjectConfig(getProject(), \"kylin.query.index-match-rules\",",
          "74:                 KylinConfigBase.USE_VACANT_INDEXES);",
          "75:         try (QueryContext queryContext = QueryContext.current()) {",
          "76:             String sql = \"select max(LO_ORDERDATE) from ssb.lineorder\";",
          "77:             List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "78:             OLAPContext olapContext = olapContexts.get(0);",
          "79:             StorageContext storageContext = olapContext.storageContext;",
          "80:             Assertions.assertTrue(storageContext.isEmptyLayout());",
          "81:             Assertions.assertTrue(queryContext.getQueryTagInfo().isVacant());",
          "82:         }",
          "83:     }",
          "85:     @Test",
          "86:     void testUnmatchedWithNullResult() throws SqlParseException {",
          "87:         String modelId = \"d67bf0e4-30f4-9248-2528-52daa80be91a\";",
          "88:         String sql = \"select max(LO_ORDERPRIOTITY) from ssb.lineorder\";",
          "89:         List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "90:         OLAPContext olapContext = olapContexts.get(0);",
          "91:         NDataflow df = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "92:         Map<String, String> matchedJoinGraphAliasMap = OlapContextUtil.matchJoins(df.getModel(), olapContext);",
          "93:         olapContext.fixModel(df.getModel(), matchedJoinGraphAliasMap);",
          "95:         Candidate candidate = new Candidate(df, olapContext, matchedJoinGraphAliasMap);",
          "96:         VacantIndexPruningRule vacantIndexPruningRule = new VacantIndexPruningRule();",
          "97:         vacantIndexPruningRule.apply(candidate);",
          "98:         Assertions.assertNull(candidate.getCapability());",
          "99:     }",
          "101:     @Test",
          "102:     void testUnmatchedWithRealizationIsStreaming() throws SqlParseException {",
          "103:         String modelId = \"d67bf0e4-30f4-9248-2528-52daa80be91a\";",
          "104:         String sql = \"select max(LO_ORDERDATE) from ssb.lineorder\";",
          "105:         NDataModelManager modelMgr = NDataModelManager.getInstance(getTestConfig(), getProject());",
          "106:         modelMgr.listAllModels().stream().filter(model -> !model.isBroken())",
          "107:                 .forEach(model -> cleanAlreadyExistingLayoutsInSegments(model.getId()));",
          "108:         List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "109:         OLAPContext olapContext = olapContexts.get(0);",
          "110:         NDataflow df = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "111:         Map<String, String> matchedJoinGraphAliasMap = OlapContextUtil.matchJoins(df.getModel(), olapContext);",
          "112:         olapContext.fixModel(df.getModel(), matchedJoinGraphAliasMap);",
          "114:         Candidate candidate = new Candidate(df, olapContext, matchedJoinGraphAliasMap);",
          "115:         {",
          "116:             df.getModel().setModelType(NDataModel.ModelType.STREAMING);",
          "117:             candidate.setCapability(new CapabilityResult());",
          "118:             VacantIndexPruningRule vacantIndexPruningRule = new VacantIndexPruningRule();",
          "119:             vacantIndexPruningRule.apply(candidate);",
          "120:             Assertions.assertFalse(candidate.getCapability().isCapable());",
          "121:         }",
          "123:         {",
          "124:             df.getModel().setModelType(NDataModel.ModelType.HYBRID);",
          "125:             candidate.setCapability(new CapabilityResult());",
          "126:             VacantIndexPruningRule vacantIndexPruningRule = new VacantIndexPruningRule();",
          "127:             vacantIndexPruningRule.apply(candidate);",
          "128:             Assertions.assertFalse(candidate.getCapability().isCapable());",
          "129:         }",
          "130:     }",
          "132:     @Test",
          "133:     void testUnmatchedAggIndex() throws SqlParseException {",
          "134:         String modelId = \"d67bf0e4-30f4-9248-2528-52daa80be91a\";",
          "135:         String sql = \"select max(LO_ORDERPRIOTITY) from ssb.lineorder\";",
          "136:         List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "137:         OLAPContext olapContext = olapContexts.get(0);",
          "138:         NDataflow df = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "139:         Map<String, String> matchedJoinGraphAliasMap = OlapContextUtil.matchJoins(df.getModel(), olapContext);",
          "140:         olapContext.fixModel(df.getModel(), matchedJoinGraphAliasMap);",
          "142:         Candidate candidate = new Candidate(df, olapContext, matchedJoinGraphAliasMap);",
          "143:         candidate.setCapability(new CapabilityResult());",
          "144:         VacantIndexPruningRule vacantIndexPruningRule = new VacantIndexPruningRule();",
          "145:         vacantIndexPruningRule.apply(candidate);",
          "146:         Assertions.assertFalse(candidate.getCapability().isCapable());",
          "147:     }",
          "149:     @Test",
          "150:     void testMatchedTableIndex() throws SqlParseException {",
          "151:         String modelId = \"d67bf0e4-30f4-9248-2528-52daa80be91a\";",
          "152:         String sql = \"select LO_QUANTITY from ssb.lineorder\";",
          "153:         NDataModelManager modelMgr = NDataModelManager.getInstance(getTestConfig(), getProject());",
          "154:         modelMgr.listAllModels().stream().filter(model -> !model.isBroken())",
          "155:                 .forEach(model -> cleanAlreadyExistingLayoutsInSegments(model.getId()));",
          "156:         List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "157:         OLAPContext olapContext = olapContexts.get(0);",
          "158:         NDataflow df = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "159:         Map<String, String> matchedJoinGraphAliasMap = OlapContextUtil.matchJoins(df.getModel(), olapContext);",
          "160:         olapContext.fixModel(df.getModel(), matchedJoinGraphAliasMap);",
          "162:         Candidate candidate = new Candidate(df, olapContext, matchedJoinGraphAliasMap);",
          "163:         candidate.setCapability(new CapabilityResult());",
          "164:         VacantIndexPruningRule vacantIndexPruningRule = new VacantIndexPruningRule();",
          "165:         vacantIndexPruningRule.apply(candidate);",
          "166:         Assertions.assertTrue(candidate.getCapability().isCapable());",
          "167:         Assertions.assertTrue(candidate.getCapability().isVacant());",
          "168:         NLayoutCandidate selectedCandidate = (NLayoutCandidate) candidate.getCapability().getSelectedCandidate();",
          "169:         Assertions.assertEquals(20000000001L, selectedCandidate.getLayoutEntity().getId());",
          "170:     }",
          "172:     @Test",
          "173:     void testMatchedAggIndex() throws SqlParseException {",
          "174:         String modelId = \"d67bf0e4-30f4-9248-2528-52daa80be91a\";",
          "175:         String sql = \"select max(LO_ORDERDATE) from ssb.lineorder\";",
          "176:         NDataModelManager modelMgr = NDataModelManager.getInstance(getTestConfig(), getProject());",
          "177:         modelMgr.listAllModels().stream().filter(model -> !model.isBroken())",
          "178:                 .forEach(model -> cleanAlreadyExistingLayoutsInSegments(model.getId()));",
          "179:         List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "180:         OLAPContext olapContext = olapContexts.get(0);",
          "181:         NDataflow df = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "182:         Map<String, String> matchedJoinGraphAliasMap = OlapContextUtil.matchJoins(df.getModel(), olapContext);",
          "183:         olapContext.fixModel(df.getModel(), matchedJoinGraphAliasMap);",
          "185:         Candidate candidate = new Candidate(df, olapContext, matchedJoinGraphAliasMap);",
          "186:         candidate.setCapability(new CapabilityResult());",
          "187:         VacantIndexPruningRule vacantIndexPruningRule = new VacantIndexPruningRule();",
          "188:         vacantIndexPruningRule.apply(candidate);",
          "189:         Assertions.assertTrue(candidate.getCapability().isCapable());",
          "190:         Assertions.assertTrue(candidate.getCapability().isVacant());",
          "191:         NLayoutCandidate selectedCandidate = (NLayoutCandidate) candidate.getCapability().getSelectedCandidate();",
          "192:         Assertions.assertEquals(1L, selectedCandidate.getLayoutEntity().getId());",
          "193:     }",
          "195:     private void cleanAlreadyExistingLayoutsInSegments(String modelId) {",
          "196:         EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {",
          "197:             NDataflowManager dfMgr = NDataflowManager.getInstance(getTestConfig(), getProject());",
          "198:             NDataflow dataflow = dfMgr.getDataflow(modelId);",
          "199:             NDataSegment latestReadySegment = dataflow.getLatestReadySegment();",
          "200:             if (latestReadySegment != null) {",
          "201:                 NDataSegDetails segDetails = latestReadySegment.getSegDetails();",
          "202:                 List<NDataLayout> allLayouts = segDetails.getAllLayouts();",
          "205:                 NDataflowUpdate dataflowUpdate = new NDataflowUpdate(modelId);",
          "206:                 dataflowUpdate.setToRemoveLayouts(allLayouts.toArray(new NDataLayout[0]));",
          "207:                 dfMgr.updateDataflow(dataflowUpdate);",
          "208:             }",
          "209:             return null;",
          "210:         }, getProject());",
          "211:     }",
          "212: }",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java||src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:         this.matchedJoinsGraphAliasMap = matchedJoinsGraphAliasMap;",
          "91:     }",
          "97:     @Override",
          "98:     public String toString() {",
          "99:         return realization.toString();",
          "",
          "[Removed Lines]",
          "94:     Candidate() {",
          "95:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:     }",
          "127:     public static Comparator<Candidate> realizationCapabilityCostSorter() {",
          "129:     }",
          "131:     public static Comparator<Candidate> modelUuidSorter() {",
          "",
          "[Removed Lines]",
          "128:         return Comparator.comparingDouble(c -> c.getCapability().cost);",
          "",
          "[Added Lines]",
          "124:         return Comparator.comparingDouble(c -> c.getCapability().getCost());",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "26: import org.apache.kylin.guava30.shaded.common.collect.Ordering;",
          "27: import org.apache.kylin.metadata.project.NProjectManager;",
          "30: import lombok.Getter;",
          "",
          "[Removed Lines]",
          "28: import org.apache.kylin.query.relnode.OLAPContext;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     }",
          "37:     public static void applyRules(Candidate candidate) {",
          "39:         for (PruningRule r : pruningStrategy.getRules()) {",
          "40:             r.apply(candidate);",
          "41:         }",
          "42:     }",
          "46:         candidates.sort(strategy.getSorter());",
          "47:     }",
          "53:     }",
          "55:     public static class Strategy {",
          "56:         private static final PruningRule SEGMENT_PRUNING = new SegmentPruningRule();",
          "57:         private static final PruningRule PARTITION_PRUNING = new PartitionPruningRule();",
          "58:         private static final PruningRule REMOVE_INCAPABLE_REALIZATIONS = new RemoveIncapableRealizationsRule();",
          "60:         @Getter",
          "61:         List<PruningRule> rules = Lists.newArrayList();",
          "",
          "[Removed Lines]",
          "38:         Strategy pruningStrategy = getStrategy(candidate.getCtx());",
          "44:     public static void sortCandidates(OLAPContext context, List<Candidate> candidates) {",
          "45:         Strategy strategy = getStrategy(context);",
          "49:     private static Strategy getStrategy(OLAPContext context) {",
          "50:         String project = context.olapSchema.getProjectName();",
          "51:         KylinConfig projectConfig = NProjectManager.getProjectConfig(project);",
          "52:         return new Strategy(projectConfig);",
          "",
          "[Added Lines]",
          "37:         Strategy pruningStrategy = getStrategy(candidate.getCtx().olapSchema.getProjectName());",
          "43:     public static void sortCandidates(String project, List<Candidate> candidates) {",
          "44:         Strategy strategy = getStrategy(project);",
          "48:     private static Strategy getStrategy(String project) {",
          "49:         return new Strategy(NProjectManager.getProjectConfig(project));",
          "56:         private static final PruningRule VACANT_INDEX_PRUNING = new VacantIndexPruningRule();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:             rules.add(SEGMENT_PRUNING);",
          "73:             rules.add(PARTITION_PRUNING);",
          "74:             rules.add(REMOVE_INCAPABLE_REALIZATIONS);",
          "77:             if (config.useTableIndexAnswerSelectStarEnabled()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:             if (config.isVacantIndexPruningEnabled()) {",
          "74:                 rules.add(VACANT_INDEX_PRUNING);",
          "75:             }",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:         }",
          "231:         logger.trace(\"Cost Sorted Realizations {}\", candidates);",
          "232:         Candidate candidate = candidates.get(0);",
          "233:         restoreOLAPContextProps(context, candidate.getRewrittenCtx());",
          "",
          "[Removed Lines]",
          "230:         QueryRouter.sortCandidates(context, candidates);",
          "",
          "[Added Lines]",
          "230:         QueryRouter.sortCandidates(context.olapSchema.getProjectName(), candidates);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:         adjustForCapabilityInfluence(candidate, context);",
          "237:         context.realization = candidate.realization;",
          "238:         if (candidate.capability.getSelectedCandidate() instanceof NLookupCandidate) {",
          "239:             boolean useSnapshot = context.isFirstTableLookupTableInModel(context.realization.getModel());",
          "240:             context.storageContext.setUseSnapshot(useSnapshot);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:         if (candidate.getCapability().isVacant()) {",
          "239:             QueryContext.current().getQueryTagInfo().setVacant(true);",
          "240:             NLayoutCandidate layoutCandidate = (NLayoutCandidate) candidate.capability.getSelectedCandidate();",
          "241:             context.storageContext.setCandidate(layoutCandidate);",
          "242:             context.storageContext.setLayoutId(layoutCandidate.getLayoutEntity().getId());",
          "243:             context.storageContext.setEmptyLayout(true);",
          "244:             return;",
          "245:         }",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/VacantIndexPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/VacantIndexPruningRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/VacantIndexPruningRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/VacantIndexPruningRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.List;",
          "23: import org.apache.commons.collections.CollectionUtils;",
          "24: import org.apache.kylin.common.KylinConfig;",
          "25: import org.apache.kylin.metadata.cube.cuboid.AggIndexMatcher;",
          "26: import org.apache.kylin.metadata.cube.cuboid.ChooserContext;",
          "27: import org.apache.kylin.metadata.cube.cuboid.IndexMatcher;",
          "28: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "29: import org.apache.kylin.metadata.cube.cuboid.TableIndexMatcher;",
          "30: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "31: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "32: import org.apache.kylin.metadata.model.AntiFlatChecker;",
          "33: import org.apache.kylin.metadata.model.ColExcludedChecker;",
          "34: import org.apache.kylin.metadata.model.NDataModel;",
          "35: import org.apache.kylin.metadata.project.NProjectManager;",
          "36: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "37: import org.apache.kylin.metadata.realization.HybridRealization;",
          "38: import org.apache.kylin.metadata.realization.IRealization;",
          "39: import org.apache.kylin.metadata.realization.SQLDigest;",
          "40: import org.apache.kylin.query.util.QueryInterruptChecker;",
          "42: import lombok.extern.slf4j.Slf4j;",
          "44: @Slf4j",
          "45: public class VacantIndexPruningRule extends PruningRule {",
          "46:     @Override",
          "47:     public void apply(Candidate candidate) {",
          "48:         if (nonBatchRealizationSkipEmptySegments(candidate)) {",
          "49:             log.info(\"{}({}/{}): only batch model support this feature, but the type of this model is {}\",",
          "50:                     this.getClass().getName(), candidate.getRealization().getProject(),",
          "51:                     candidate.getRealization().getCanonicalName(),",
          "52:                     candidate.getRealization().getModel().getModelType());",
          "53:             return;",
          "54:         }",
          "56:         if (candidate.getCapability() == null || candidate.getCapability().isCapable()) {",
          "57:             log.debug(\"skip the rule of {}.\", this.getClass().getName());",
          "58:             return;",
          "59:         }",
          "61:         List<IRealization> realizations = candidate.getRealization().getRealizations();",
          "62:         if (CollectionUtils.isEmpty(realizations)) {",
          "63:             log.warn(\"It seems that unlikely things happened when matching indexes haven't built. \"",
          "64:                     + \"Expected size of realizations(models) is 1.\");",
          "65:             return;",
          "66:         }",
          "67:         NDataflow dataflow = (NDataflow) realizations.get(0);",
          "68:         CapabilityResult capabilityResult = match(dataflow, candidate.getCtx().getSQLDigest());",
          "69:         candidate.setCapability(capabilityResult);",
          "70:     }",
          "72:     private CapabilityResult match(NDataflow dataflow, SQLDigest digest) {",
          "73:         CapabilityResult result = new CapabilityResult();",
          "74:         log.info(\"Try matching no built indexes from model.\");",
          "76:         NLayoutCandidate layoutCandidate = selectLayoutCandidate(dataflow, digest);",
          "77:         if (layoutCandidate != null) {",
          "78:             result.influences.addAll(layoutCandidate.getCapabilityResult().influences);",
          "79:             result.setLayoutUnmatchedColsSize(layoutCandidate.getCapabilityResult().getLayoutUnmatchedColsSize());",
          "80:             result.setSelectedCandidate(layoutCandidate);",
          "81:             log.info(\"Matched layout {} snapshot in dataflow {} \", layoutCandidate, dataflow);",
          "82:             result.setCapable(true);",
          "83:             result.setVacant(true);",
          "84:         } else {",
          "85:             result.setCapable(false);",
          "86:         }",
          "88:         return result;",
          "89:     }",
          "91:     private NLayoutCandidate selectLayoutCandidate(NDataflow dataflow, SQLDigest sqlDigest) {",
          "94:         String project = dataflow.getProject();",
          "95:         NDataModel model = dataflow.getModel();",
          "96:         KylinConfig projectConfig = NProjectManager.getProjectConfig(project);",
          "97:         ChooserContext chooserContext = new ChooserContext(sqlDigest, dataflow);",
          "98:         ColExcludedChecker excludedChecker = new ColExcludedChecker(projectConfig, project, model);",
          "99:         AntiFlatChecker antiFlatChecker = new AntiFlatChecker(model.getJoinTables(), model);",
          "100:         AggIndexMatcher aggIndexMatcher = new AggIndexMatcher(sqlDigest, chooserContext, dataflow, excludedChecker,",
          "101:                 antiFlatChecker);",
          "102:         TableIndexMatcher tableIndexMatcher = new TableIndexMatcher(sqlDigest, chooserContext, dataflow,",
          "103:                 excludedChecker, antiFlatChecker);",
          "105:         if (chooserContext.isIndexMatchersInvalid()) {",
          "106:             return null;",
          "107:         }",
          "110:         NLayoutCandidate candidate = findCandidate(dataflow, aggIndexMatcher, tableIndexMatcher);",
          "111:         QueryInterruptChecker.checkThreadInterrupted(\"Interrupted exception occurs.\",",
          "112:                 \"Current step were matching indexes haven't built \");",
          "113:         return candidate;",
          "114:     }",
          "116:     private static NLayoutCandidate findCandidate(NDataflow dataflow, AggIndexMatcher aggIndexMatcher,",
          "117:             TableIndexMatcher tableIndexMatcher) {",
          "118:         List<LayoutEntity> allLayouts = dataflow.getIndexPlan().getAllLayouts();",
          "119:         for (LayoutEntity layout : allLayouts) {",
          "120:             NLayoutCandidate candidate = new NLayoutCandidate(layout);",
          "121:             IndexMatcher.MatchResult matchResult = tableIndexMatcher.match(layout);",
          "122:             if (!matchResult.isMatched()) {",
          "123:                 matchResult = aggIndexMatcher.match(layout);",
          "124:             }",
          "126:             if (!matchResult.isMatched()) {",
          "127:                 continue;",
          "128:             }",
          "130:             CapabilityResult tempResult = new CapabilityResult();",
          "131:             tempResult.setSelectedCandidate(candidate);",
          "132:             candidate.setCapabilityResult(tempResult);",
          "133:             return candidate;",
          "134:         }",
          "135:         return null;",
          "136:     }",
          "138:     private boolean nonBatchRealizationSkipEmptySegments(Candidate candidate) {",
          "139:         IRealization realization = candidate.getRealization();",
          "140:         return realization instanceof HybridRealization || realization.isStreaming();",
          "141:     }",
          "142: }",
          "",
          "---------------"
        ],
        "src/query-service/src/main/java/org/apache/kylin/rest/response/SQLResponse.java||src/query-service/src/main/java/org/apache/kylin/rest/response/SQLResponse.java": [
          "File: src/query-service/src/main/java/org/apache/kylin/rest/response/SQLResponse.java -> src/query-service/src/main/java/org/apache/kylin/rest/response/SQLResponse.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.apache.kylin.common.QueryContext;",
          "27: import org.apache.kylin.common.debug.BackdoorToggles;",
          "28: import org.apache.kylin.metadata.query.NativeQueryRealization;",
          "29: import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;",
          "30: import org.slf4j.Logger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import com.fasterxml.jackson.annotation.JsonIgnore;",
          "34: import com.fasterxml.jackson.annotation.JsonProperty;",
          "38: import lombok.Getter;",
          "39: import lombok.Setter;",
          "",
          "[Removed Lines]",
          "35: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "36: import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:     protected boolean isPartial = false;",
          "71:     private List<Long> scanRows;",
          "73:     private List<Long> scanBytes;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     @JsonProperty(\"vacant\")",
          "72:     private boolean isVacant;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "148:         }",
          "149:     }",
          "154:         this.columnMetas = columnMetas;",
          "155:         this.results = results;",
          "156:         this.affectedRowCount = affectedRowCount;",
          "",
          "[Removed Lines]",
          "151:     public SQLResponse(List<SelectedColumnMeta> columnMetas, List<List<String>> results,",
          "152:             int affectedRowCount, boolean isException, String exceptionMessage,",
          "153:             boolean isPartial, boolean isPushDown) {",
          "",
          "[Added Lines]",
          "154:     public SQLResponse(List<SelectedColumnMeta> columnMetas, List<List<String>> results, int affectedRowCount,",
          "155:             boolean isException, String exceptionMessage, boolean isPartial, boolean isPushDown) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "165:     }",
          "167:     public SQLResponse(List<SelectedColumnMeta> columnMetas, Iterable<List<String>> results, int resultSize,",
          "170:         this.columnMetas = columnMetas;",
          "171:         this.results = results;",
          "172:         this.affectedRowCount = affectedRowCount;",
          "",
          "[Removed Lines]",
          "168:             int affectedRowCount, boolean isException, String exceptionMessage,",
          "169:             boolean isPartial, boolean isPushDown) {",
          "",
          "[Added Lines]",
          "170:             int affectedRowCount, boolean isException, String exceptionMessage, boolean isPartial, boolean isPushDown) {",
          "",
          "---------------"
        ],
        "src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java||src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java": [
          "File: src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java -> src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: import org.apache.kylin.common.util.Pair;",
          "82: import org.apache.kylin.common.util.SetThreadName;",
          "83: import org.apache.kylin.engine.spark.filter.BloomFilterSkipCollector;",
          "84: import org.apache.kylin.job.execution.ExecuteResult;",
          "85: import org.apache.kylin.metadata.MetadataConstants;",
          "86: import org.apache.kylin.metadata.acl.AclTCR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: import org.apache.kylin.guava30.shaded.common.annotations.VisibleForTesting;",
          "85: import org.apache.kylin.guava30.shaded.common.base.Joiner;",
          "86: import org.apache.kylin.guava30.shaded.common.collect.Collections2;",
          "87: import org.apache.kylin.guava30.shaded.common.collect.HashMultimap;",
          "88: import org.apache.kylin.guava30.shaded.common.collect.ImmutableMap;",
          "89: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "90: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "91: import org.apache.kylin.guava30.shaded.common.collect.SetMultimap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "163: import com.fasterxml.jackson.annotation.JsonProperty;",
          "164: import com.fasterxml.jackson.core.JsonProcessingException;",
          "173: import com.google.gson.Gson;",
          "175: import lombok.AllArgsConstructor;",
          "",
          "[Removed Lines]",
          "165: import org.apache.kylin.guava30.shaded.common.annotations.VisibleForTesting;",
          "166: import org.apache.kylin.guava30.shaded.common.base.Joiner;",
          "167: import org.apache.kylin.guava30.shaded.common.collect.Collections2;",
          "168: import org.apache.kylin.guava30.shaded.common.collect.HashMultimap;",
          "169: import org.apache.kylin.guava30.shaded.common.collect.ImmutableMap;",
          "170: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "171: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "172: import org.apache.kylin.guava30.shaded.common.collect.SetMultimap;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1365:         response.setNativeRealizations(OLAPContext.getNativeRealizations());",
          "1369:         if (isPushDown) {",
          "1370:             response.setNativeRealizations(Lists.newArrayList());",
          "",
          "[Removed Lines]",
          "1367:         setAppMaterURL(response);",
          "",
          "[Added Lines]",
          "1367:         if (!queryContext.getQueryTagInfo().isVacant()) {",
          "1368:             setAppMaterURL(response);",
          "1369:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1382:         response.setEngineType(QueryHistory.EngineType.NATIVE.name());",
          "1383:         response.setSignature(QueryCacheSignatureUtil.createCacheSignature(response, project));",
          "1385:         if (QueryContext.current().getMetrics().getQueryExecutedPlan() != null) {",
          "1386:             response.setExecutedPlan(QueryContext.current().getMetrics().getQueryExecutedPlan());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1386:         response.setVacant(QueryContext.current().getQueryTagInfo().isVacant());",
          "",
          "---------------"
        ],
        "src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java||src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java": [
          "File: src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java -> src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:             }",
          "83:         }",
          "90:     }",
          "92:     private static List<OLAPContext> collectContextInfoAndSelectRealization(RelNode queryRoot) {",
          "",
          "[Removed Lines]",
          "85:         ContextUtil.dumpCalcitePlan(",
          "86:                 \"cannot find proper realizations After re-cut \" + MAX_RETRY_TIMES_OF_CONTEXT_CUT + \" times\", root, log);",
          "87:         log.error(\"too many unmatched join in this query, please check it or create correspond realization\");",
          "88:         throw new NoRealizationFoundException(",
          "89:                 \"too many unmatched join in this query, please check it or create correspond realization\");",
          "",
          "[Added Lines]",
          "85:         String errorMsg = \"too many unmatched joins in this query, please check it or create corresponding realization.\";",
          "86:         ContextUtil.dumpCalcitePlan(\"cannot find proper realizations After re-cut \" + MAX_RETRY_TIMES_OF_CONTEXT_CUT",
          "87:                 + \" times. \\nError: \" + errorMsg, root, log);",
          "88:         throw new NoRealizationFoundException(errorMsg);",
          "",
          "---------------"
        ],
        "src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java||src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java": [
          "File: src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java -> src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing;",
          "22: import java.util.Comparator;",
          "23: import java.util.List;",
          "28: import org.apache.kylin.common.QueryContext;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "48:     @Test",
          "50:         try (QueryContext queryContext = QueryContext.current()) {",
          "51:             {",
          "56:             }",
          "58:             {",
          "63:             }",
          "65:             {",
          "70:             }",
          "72:             {",
          "78:             }",
          "79:         }",
          "80:     }",
          "82:     @Test",
          "152:     }",
          "162:     }",
          "172:     }",
          "184:     }",
          "194:     }",
          "304: }",
          "",
          "[Removed Lines]",
          "21: import java.util.Arrays;",
          "24: import java.util.Map;",
          "25: import java.util.Set;",
          "27: import org.apache.kylin.common.KylinConfig;",
          "30: import org.apache.kylin.guava30.shaded.common.collect.Ordering;",
          "31: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "32: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "33: import org.apache.kylin.metadata.model.FunctionDesc;",
          "34: import org.apache.kylin.metadata.model.MeasureDesc;",
          "35: import org.apache.kylin.metadata.model.NDataModel;",
          "36: import org.apache.kylin.metadata.model.TblColRef;",
          "37: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "38: import org.apache.kylin.metadata.realization.IRealization;",
          "39: import org.apache.kylin.metadata.realization.QueryableSeg;",
          "40: import org.apache.kylin.metadata.realization.SQLDigest;",
          "41: import org.junit.Assert;",
          "42: import org.junit.Test;",
          "44: import lombok.val;",
          "46: public class CandidateSortTest {",
          "49:     public void testModelHintCandidateSort() {",
          "52:                 queryContext.setModelPriorities(new String[] {});",
          "53:                 val model1 = mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "54:                 val model2 = mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "55:                 sort(model1, model2).assertFirst(model1);",
          "59:                 queryContext.setModelPriorities(new String[] { \"MODELB\" });",
          "60:                 val model1 = mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "61:                 val model2 = mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "62:                 sort(model1, model2).assertFirst(model2);",
          "66:                 queryContext.setModelPriorities(new String[] { \"MODELB\", \"MODELA\" });",
          "67:                 val model1 = mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "68:                 val model2 = mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "69:                 sort(model1, model2).assertFirst(model2);",
          "73:                 queryContext.setModelPriorities(new String[] { \"MODELC\", \"MODELA\" });",
          "74:                 val model1 = mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "75:                 val model2 = mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "76:                 val model3 = mockCandidate(\"model0003\", \"modelC\", 4, 4);",
          "77:                 sort(model1, model2, model3).assertFirst(model3);",
          "83:     public void testSort() {",
          "84:         {",
          "85:             val model1 = mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "86:             val model2 = mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "87:             sort(model1, model2).assertFirst(model1);",
          "88:         }",
          "90:         {",
          "91:             val model1 = mockCandidate(\"model0001\", \"modelA\", 2, 1);",
          "92:             val model2 = mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "93:             sort(model1, model2).assertFirst(model1);",
          "94:         }",
          "96:         {",
          "97:             val model1 = mockCandidate(\"model0001\", \"modelA\", 2, 2);",
          "98:             val model2 = mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "99:             sort(model1, model2).assertFirst(model1);",
          "100:         }",
          "102:         {",
          "103:             val model1 = mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "104:             val model2 = mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "105:             val model3 = mockCandidate(\"model0003\", \"modelC\", 4, 4);",
          "106:             sort(model1, model2, model3).assertFirst(model1);",
          "107:         }",
          "109:         {",
          "110:             val model1 = mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "111:             val model2 = mockEmptyCandidate(\"model0002\", \"modelB\", 1);",
          "112:             sort(model1, model2).assertFirst(model1);",
          "113:         }",
          "115:         {",
          "116:             val model1 = mockStreamingCandidate(\"model0001\", \"modelA\", 1, 1);",
          "117:             val model2 = mockEmptyCandidate(\"model0002\", \"modelB\", 1);",
          "118:             sort(model1, model2).assertFirst(model1);",
          "119:         }",
          "121:         {",
          "122:             val model1 = mockHybridCandidate(\"model0001\", \"modelA\", 1, 1, 2);",
          "123:             val model2 = mockEmptyCandidate(\"model0002\", \"modelB\", 1);",
          "124:             sort(model1, model2).assertFirst(model1);",
          "125:         }",
          "127:         {",
          "128:             val model1 = mockCandidate(\"model0001\", \"modelA\", 1, 3);",
          "129:             val model2 = mockStreamingCandidate(\"model0002\", \"modelB\", 1, 2);",
          "130:             val model3 = mockHybridCandidate(\"model0003\", \"modelC\", 1, 4, 2);",
          "131:             sort(model1, model2, model3).assertFirst(model2);",
          "132:         }",
          "133:     }",
          "135:     private interface SortedCandidate {",
          "137:         void assertFirst(Candidate candidate);",
          "138:     }",
          "140:     private SortedCandidate sort(Candidate... candidates) {",
          "141:         List<Comparator<Candidate>> sorters = Lists.newArrayList();",
          "142:         sorters.add(Candidate.modelPrioritySorter());",
          "143:         sorters.add(Candidate.realizationCostSorter());",
          "144:         sorters.add(Candidate.realizationCapabilityCostSorter());",
          "145:         sorters.add(Candidate.modelUuidSorter());",
          "147:         return candidate -> {",
          "148:             Arrays.sort(candidates, Ordering.compound(sorters));",
          "149:             Assert.assertEquals(candidate.getRealization().getModel().getAlias(),",
          "150:                     candidates[0].getRealization().getModel().getAlias());",
          "151:         };",
          "154:     private Candidate mockCandidate(String modelId, String modelName, int modelCost, double candidateCost) {",
          "155:         val candidate = new Candidate();",
          "156:         candidate.realization = mockRealization(modelId, modelName, modelCost);",
          "157:         val cap = new CapabilityResult();",
          "158:         cap.setSelectedCandidate(() -> candidateCost);",
          "159:         cap.cost = (int) cap.getSelectedCandidate().getCost();",
          "160:         candidate.setCapability(cap);",
          "161:         return candidate;",
          "164:     private Candidate mockStreamingCandidate(String modelId, String modelName, int modelCost, double candidateCost) {",
          "165:         val candidate = new Candidate();",
          "166:         candidate.realization = mockRealization(modelId, modelName, modelCost);",
          "167:         val cap = new CapabilityResult();",
          "168:         cap.setSelectedStreamingCandidate(() -> candidateCost);",
          "169:         cap.cost = (int) cap.getSelectedStreamingCandidate().getCost();",
          "170:         candidate.setCapability(cap);",
          "171:         return candidate;",
          "174:     private Candidate mockHybridCandidate(String modelId, String modelName, int modelCost, double candidateCost,",
          "175:             double streamingCandidateCost) {",
          "176:         val candidate = new Candidate();",
          "177:         candidate.realization = mockRealization(modelId, modelName, modelCost);",
          "178:         val cap = new CapabilityResult();",
          "179:         cap.setSelectedCandidate(() -> candidateCost);",
          "180:         cap.setSelectedStreamingCandidate(() -> streamingCandidateCost);",
          "181:         cap.cost = (int) Math.min(cap.getSelectedCandidate().getCost(), cap.getSelectedStreamingCandidate().getCost());",
          "182:         candidate.setCapability(cap);",
          "183:         return candidate;",
          "186:     private Candidate mockEmptyCandidate(String modelId, String modelName, int modelCost) {",
          "187:         val candidate = new Candidate();",
          "188:         candidate.realization = mockRealization(modelId, modelName, modelCost);",
          "189:         val cap = new CapabilityResult();",
          "190:         cap.setSelectedCandidate(NLayoutCandidate.EMPTY);",
          "191:         cap.setSelectedStreamingCandidate(NLayoutCandidate.EMPTY);",
          "192:         candidate.setCapability(cap);",
          "193:         return candidate;",
          "196:     private IRealization mockRealization(String modelId, String modelName, int cost) {",
          "197:         return new IRealization() {",
          "198:             @Override",
          "199:             public CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,",
          "200:                     Map<String, Set<Long>> chSegToLayoutsMap) {",
          "201:                 return null;",
          "202:             }",
          "204:             @Override",
          "205:             public CapabilityResult isCapable(SQLDigest digest, QueryableSeg queryableSeg) {",
          "206:                 return null;",
          "207:             }",
          "209:             @Override",
          "210:             public String getType() {",
          "211:                 return null;",
          "212:             }",
          "214:             @Override",
          "215:             public KylinConfig getConfig() {",
          "216:                 return null;",
          "217:             }",
          "219:             @Override",
          "220:             public NDataModel getModel() {",
          "221:                 val model = new NDataModel();",
          "222:                 model.setAlias(modelName);",
          "223:                 model.setUuid(modelId);",
          "224:                 return model;",
          "225:             }",
          "227:             @Override",
          "228:             public Set<TblColRef> getAllColumns() {",
          "229:                 return null;",
          "230:             }",
          "232:             @Override",
          "233:             public List<TblColRef> getAllDimensions() {",
          "234:                 return null;",
          "235:             }",
          "237:             @Override",
          "238:             public List<MeasureDesc> getMeasures() {",
          "239:                 return null;",
          "240:             }",
          "242:             @Override",
          "243:             public List<IRealization> getRealizations() {",
          "244:                 return null;",
          "245:             }",
          "247:             @Override",
          "248:             public FunctionDesc findAggrFunc(FunctionDesc aggrFunc) {",
          "249:                 return null;",
          "250:             }",
          "252:             @Override",
          "253:             public boolean isOnline() {",
          "254:                 return true;",
          "255:             }",
          "257:             @Override",
          "258:             public String getUuid() {",
          "259:                 return null;",
          "260:             }",
          "262:             @Override",
          "263:             public String getCanonicalName() {",
          "264:                 return null;",
          "265:             }",
          "267:             @Override",
          "268:             public long getDateRangeStart() {",
          "269:                 return 0;",
          "270:             }",
          "272:             @Override",
          "273:             public long getDateRangeEnd() {",
          "274:                 return 0;",
          "275:             }",
          "277:             @Override",
          "278:             public int getCost() {",
          "279:                 return cost;",
          "280:             }",
          "282:             @Override",
          "283:             public boolean hasPrecalculatedFields() {",
          "284:                 return false;",
          "285:             }",
          "287:             @Override",
          "288:             public int getStorageType() {",
          "289:                 return 0;",
          "290:             }",
          "292:             @Override",
          "293:             public boolean isStreaming() {",
          "294:                 return false;",
          "295:             }",
          "297:             @Override",
          "298:             public String getProject() {",
          "299:                 return null;",
          "300:             }",
          "301:         };",
          "302:     }",
          "",
          "[Added Lines]",
          "26: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "27: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "28: import org.apache.kylin.query.relnode.OLAPContext;",
          "29: import org.junit.jupiter.api.Assertions;",
          "30: import org.junit.jupiter.api.Test;",
          "31: import org.mockito.Mockito;",
          "33: class CandidateSortTest {",
          "36:     void testModelPrioritySorter() {",
          "38:             Comparator<Candidate> sorter = Candidate.modelPrioritySorter();",
          "42:                 String[] modelPriorities = CandidateTestUtils",
          "43:                         .mockModelPriorityValues(new String[] { \"modelA\", \"modelB\" });",
          "44:                 queryContext.setModelPriorities(modelPriorities);",
          "45:                 Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "46:                 Candidate c2 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelB\", 1, 1);",
          "48:                 Assertions.assertEquals(-1, sorter.compare(c1, c2));",
          "49:                 Assertions.assertEquals(1, sorter.compare(c2, c1));",
          "50:                 assertSortResult(c1, sorter, Lists.newArrayList(c1, c2));",
          "55:                 queryContext.setModelPriorities(new String[] {});",
          "56:                 Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "57:                 Candidate c2 = CandidateTestUtils.mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "58:                 assertSortResult(c1, sorter, Lists.newArrayList(c1, c2));",
          "62:                 queryContext.setModelPriorities(CandidateTestUtils.mockModelPriorityValues(new String[] { \"modelB\" }));",
          "63:                 Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "64:                 Candidate c2 = CandidateTestUtils.mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "65:                 Assertions.assertEquals(Integer.MAX_VALUE, sorter.compare(c1, c2));",
          "66:                 assertSortResult(c2, sorter, Lists.newArrayList(c1, c2));",
          "70:                 queryContext.setModelPriorities(new String[] { \"MODELB\", \"MODELA\" });",
          "71:                 Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "72:                 Candidate c2 = CandidateTestUtils.mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "73:                 Assertions.assertEquals(1, sorter.compare(c1, c2));",
          "74:                 assertSortResult(c2, sorter, Lists.newArrayList(c1, c2));",
          "80:     void realizationCostSorterTest() {",
          "81:         Comparator<Candidate> comparator = Candidate.realizationCostSorter();",
          "82:         NDataflow df1 = Mockito.mock(NDataflow.class);",
          "83:         NDataflow df2 = Mockito.mock(NDataflow.class);",
          "84:         OLAPContext olapContext = Mockito.mock(OLAPContext.class);",
          "85:         Candidate c1 = new Candidate(df1, olapContext, Maps.newHashMap());",
          "86:         Candidate c2 = new Candidate(df2, olapContext, Maps.newHashMap());",
          "87:         Mockito.when(c1.getRealization().getCost()).thenReturn(1);",
          "88:         Mockito.when(c2.getRealization().getCost()).thenReturn(2);",
          "91:         assertSortResult(c1, comparator, Lists.newArrayList(c1, c2));",
          "94:     @Test",
          "95:     void realizationCapabilityCostSorter() {",
          "96:         Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "97:         Candidate c2 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 2);",
          "98:         Candidate c3 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 2);",
          "99:         Comparator<Candidate> comparator = Candidate.realizationCapabilityCostSorter();",
          "100:         assertSortResult(c1, comparator, Lists.newArrayList(c1, c2));",
          "101:         assertSortResult(c2, comparator, Lists.newArrayList(c2, c3));",
          "104:     @Test",
          "105:     void testModelUuidSorter() {",
          "106:         Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "107:         Candidate c2 = CandidateTestUtils.mockCandidate(\"model0002\", \"modelB\", 1, 1);",
          "108:         Comparator<Candidate> comparator = Candidate.modelUuidSorter();",
          "109:         assertSortResult(c1, comparator, Lists.newArrayList(c1, c2));",
          "112:     @Test",
          "113:     void testTableIndexUnmatchedColSizeComparator() {",
          "114:         Comparator<Candidate> comparator = Candidate.tableIndexUnmatchedColSizeSorter();",
          "115:         Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 1, 1);",
          "116:         Candidate c2 = CandidateTestUtils.mockCandidate(\"model0002\", \"modelB\", 1, 2, 2);",
          "117:         assertSortResult(c1, comparator, Lists.newArrayList(c2, c1));",
          "120:     private void assertSortResult(Candidate expected, Comparator<Candidate> comparator, List<Candidate> candidates) {",
          "121:         candidates.sort(comparator);",
          "122:         Assertions.assertEquals(expected, candidates.get(0));",
          "",
          "---------------"
        ],
        "src/query/src/test/java/org/apache/kylin/query/routing/CandidateTestUtils.java||src/query/src/test/java/org/apache/kylin/query/routing/CandidateTestUtils.java": [
          "File: src/query/src/test/java/org/apache/kylin/query/routing/CandidateTestUtils.java -> src/query/src/test/java/org/apache/kylin/query/routing/CandidateTestUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.Arrays;",
          "23: import org.apache.commons.lang3.StringUtils;",
          "24: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "25: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "26: import org.apache.kylin.metadata.model.NDataModel;",
          "27: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "28: import org.apache.kylin.metadata.realization.IRealization;",
          "29: import org.apache.kylin.query.relnode.OLAPContext;",
          "31: import lombok.val;",
          "33: public class CandidateTestUtils {",
          "35:     static Candidate mockCandidate(String modelId, String modelName, int realizationCost, double candidateCost) {",
          "36:         return mockCandidate(modelId, modelName, realizationCost, candidateCost, 0);",
          "37:     }",
          "39:     static Candidate mockCandidate(String modelId, String modelName, int realizationCost, double candidateCost,",
          "40:             int unmatchedColSize) {",
          "41:         IRealization realization = mockRealization(modelId, modelName, realizationCost);",
          "42:         OLAPContext olapContext = mockOlapContext();",
          "43:         val candidate = new Candidate(realization, olapContext, Maps.newHashMap());",
          "44:         val cap = new CapabilityResult();",
          "45:         cap.setSelectedCandidate(() -> candidateCost);",
          "46:         cap.setCost(cap.getSelectedCandidate().getCost());",
          "47:         cap.setLayoutUnmatchedColsSize(unmatchedColSize);",
          "48:         candidate.setCapability(cap);",
          "49:         return candidate;",
          "50:     }",
          "52:     static OLAPContext mockOlapContext() {",
          "53:         return new OLAPContext(-1);",
          "54:     }",
          "56:     static IRealization mockRealization(String modelId, String modelName, int cost) {",
          "57:         return new NDataflow() {",
          "58:             @Override",
          "59:             public NDataModel getModel() {",
          "60:                 val model = new NDataModel();",
          "61:                 model.setAlias(modelName);",
          "62:                 model.setUuid(modelId);",
          "63:                 return model;",
          "64:             }",
          "66:             @Override",
          "67:             public boolean isOnline() {",
          "68:                 return true;",
          "69:             }",
          "71:             @Override",
          "72:             public int getCost() {",
          "73:                 return cost;",
          "74:             }",
          "75:         };",
          "76:     }",
          "78:     static String[] mockModelPriorityValues(String[] arr) {",
          "79:         return Arrays.stream(arr).map(StringUtils::upperCase).toArray(String[]::new);",
          "80:     }",
          "81: }",
          "",
          "---------------"
        ],
        "src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java||src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java": [
          "File: src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java -> src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.Comparator;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "24: import java.util.stream.Collectors;",
          "26: import org.apache.kylin.common.KylinConfig;",
          "27: import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;",
          "28: import org.apache.kylin.guava30.shaded.common.collect.ImmutableMap;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "30: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "31: import org.apache.kylin.junit.annotation.MetadataInfo;",
          "32: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "33: import org.apache.kylin.metadata.cube.cuboid.NQueryLayoutChooser;",
          "34: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "35: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "36: import org.apache.kylin.metadata.cube.model.NIndexPlanManager;",
          "37: import org.apache.kylin.metadata.cube.model.RuleBasedIndex;",
          "38: import org.apache.kylin.metadata.model.DeriveInfo;",
          "39: import org.apache.kylin.metadata.model.NDataModel;",
          "40: import org.apache.kylin.metadata.model.NDataModelManager;",
          "41: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "42: import org.apache.kylin.util.MetadataTestUtils;",
          "43: import org.junit.jupiter.api.Assertions;",
          "44: import org.junit.jupiter.api.Test;",
          "45: import org.mockito.Mockito;",
          "47: @MetadataInfo",
          "48: class LayoutCandidateSortTest {",
          "50:     @Test",
          "51:     void testPreferAggComparator() {",
          "52:         MockEntity mock1 = new MockEntity(IndexEntity.TABLE_INDEX_START_ID + 1, ImmutableList.of(1), 2);",
          "53:         MockEntity mock2 = new MockEntity(1L, ImmutableList.of(1), 3);",
          "54:         assertSortedResult(1L, NQueryLayoutChooser.preferAggComparator(), mock1, mock2);",
          "55:     }",
          "57:     @Test",
          "58:     void testSegmentRangeComparator() {",
          "59:         MockEntity mock1 = new MockEntity(IndexEntity.TABLE_INDEX_START_ID + 1, ImmutableList.of(1, 2), 5000, 2000);",
          "60:         MockEntity mock2 = new MockEntity(IndexEntity.TABLE_INDEX_START_ID + IndexEntity.INDEX_ID_STEP + 1,",
          "61:                 ImmutableList.of(1, 3), 2000, 2000);",
          "62:         assertSortedResult(IndexEntity.TABLE_INDEX_START_ID + 1, NQueryLayoutChooser.segmentRangeComparator(), mock1,",
          "63:                 mock2);",
          "64:     }",
          "66:     @Test",
          "67:     void testSegmentEffectivenessComparator() {",
          "68:         MockEntity mock1 = new MockEntity(IndexEntity.TABLE_INDEX_START_ID + 1, ImmutableList.of(1, 2), 1000, 3000);",
          "69:         MockEntity mock2 = new MockEntity(IndexEntity.TABLE_INDEX_START_ID + IndexEntity.INDEX_ID_STEP + 1,",
          "70:                 ImmutableList.of(1, 3), 1000, 2000);",
          "71:         assertSortedResult(IndexEntity.TABLE_INDEX_START_ID + 1, NQueryLayoutChooser.segmentEffectivenessComparator(),",
          "72:                 mock1, mock2);",
          "73:     }",
          "75:     @Test",
          "76:     void testRowSizeComparator() {",
          "77:         MockEntity mock1 = new MockEntity(1L, ImmutableList.of(1, 2), 90);",
          "78:         MockEntity mock2 = new MockEntity(IndexEntity.INDEX_ID_STEP + 1L, ImmutableList.of(1, 4), 30);",
          "79:         MockEntity mock3 = new MockEntity(2 * IndexEntity.INDEX_ID_STEP + 1L, ImmutableList.of(1, 5), 10);",
          "80:         assertSortedResult(2 * IndexEntity.INDEX_ID_STEP + 1L, NQueryLayoutChooser.rowSizeComparator(), mock1, mock2,",
          "81:                 mock3);",
          "82:     }",
          "84:     @Test",
          "85:     void testDerivedLayoutComparator() {",
          "86:         DeriveInfo mockDeriveInfo = Mockito.mock(DeriveInfo.class);",
          "87:         MockEntity mock1 = new MockEntity(1L, ImmutableList.of(1, 2), ImmutableMap.of(5, mockDeriveInfo));",
          "88:         MockEntity mock2 = new MockEntity(2 * IndexEntity.INDEX_ID_STEP + 1L, ImmutableList.of(1, 4),",
          "89:                 ImmutableMap.of(3, mockDeriveInfo));",
          "90:         MockEntity mock3 = new MockEntity(IndexEntity.INDEX_ID_STEP + 1L, ImmutableList.of(1, 3), ImmutableMap.of());",
          "92:         Comparator<NLayoutCandidate> comparator = NQueryLayoutChooser.derivedLayoutComparator();",
          "95:         assertSortedResult(1L, comparator, mock1, mock2);",
          "98:         assertSortedResult(IndexEntity.INDEX_ID_STEP + 1, comparator, mock1, mock3);",
          "101:         MetadataTestUtils.updateProjectConfig(\"default\", \"kylin.metadata.table-exclusion-enabled\", \"true\");",
          "102:         MetadataTestUtils.updateProjectConfig(\"default\", \"kylin.query.snapshot-preferred-for-table-exclusion\", \"false\");",
          "103:         assertSortedResult(IndexEntity.INDEX_ID_STEP + 1, comparator, mock1, mock3);",
          "106:         MetadataTestUtils.updateProjectConfig(\"default\", \"kylin.metadata.table-exclusion-enabled\", \"true\");",
          "107:         MetadataTestUtils.updateProjectConfig(\"default\", \"kylin.query.snapshot-preferred-for-table-exclusion\", \"true\");",
          "108:         assertSortedResult(1L, comparator, mock1, mock3);",
          "109:     }",
          "111:     @Test",
          "112:     void testShardByComparator() {",
          "114:         {",
          "115:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(0, 1, 2), ImmutableList.of(), ImmutableList.of(0));",
          "116:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 0, 2), ImmutableList.of(), ImmutableList.of(1));",
          "119:             List<Integer> sortedFilters = Lists.newArrayList(2, 1, 0);",
          "120:             assertSortedResult(2L, NQueryLayoutChooser.shardByComparator(sortedFilters), mock1, mock2);",
          "122:             sortedFilters = Lists.newArrayList(2, 0, 1);",
          "123:             assertSortedResult(1L, NQueryLayoutChooser.shardByComparator(sortedFilters), mock1, mock2);",
          "124:         }",
          "126:         {",
          "128:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(0, 1, 2), ImmutableList.of(), ImmutableList.of());",
          "129:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 0, 2), ImmutableList.of(), ImmutableList.of(1));",
          "131:             List<Integer> sortedFilters = Lists.newArrayList(2, 1, 0);",
          "132:             assertSortedResult(2L, NQueryLayoutChooser.shardByComparator(sortedFilters), mock1, mock2);",
          "133:         }",
          "135:         {",
          "137:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(0, 1, 2), ImmutableList.of(), ImmutableList.of(0));",
          "138:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 0, 2), ImmutableList.of(), ImmutableList.of());",
          "140:             List<Integer> sortedFilters = Lists.newArrayList(2, 1, 0);",
          "141:             assertSortedResult(1L, NQueryLayoutChooser.shardByComparator(sortedFilters), mock1, mock2);",
          "142:         }",
          "143:     }",
          "145:     @Test",
          "146:     void testFilterColumnComparator() {",
          "147:         {",
          "149:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(1, 2, 3), ImmutableList.of(), ImmutableList.of(1));",
          "150:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(2, 1, 3), ImmutableList.of(), ImmutableList.of(2));",
          "151:             List<Integer> sortedFilters = Lists.newArrayList(1, 2, 3);",
          "152:             assertSortedResult(1L, NQueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "154:             sortedFilters = Lists.newArrayList(3, 2, 1);",
          "155:             assertSortedResult(2L, NQueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "156:         }",
          "158:         {",
          "160:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(2, 1, 3), ImmutableList.of(), ImmutableList.of());",
          "161:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 2, 3), ImmutableList.of(), ImmutableList.of(1));",
          "162:             List<Integer> sortedFilters = Lists.newArrayList(1, 2, 3);",
          "163:             assertSortedResult(2L, NQueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "164:         }",
          "166:         {",
          "168:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(2, 1, 3), ImmutableList.of(), ImmutableList.of(2));",
          "169:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 2, 3), ImmutableList.of(), ImmutableList.of());",
          "170:             List<Integer> sortedFilters = Lists.newArrayList(1, 2, 3);",
          "171:             assertSortedResult(1L, NQueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "172:         }",
          "174:         {",
          "176:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(2, 1, 3), ImmutableMap.of());",
          "177:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 2, 3), ImmutableMap.of());",
          "178:             List<Integer> sortedFilters = Lists.newArrayList(1, 2, 3);",
          "179:             assertSortedResult(2L, NQueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "180:         }",
          "181:     }",
          "183:     @Test",
          "184:     void testNonFilterColumnComparator() {",
          "185:         {",
          "186:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(2, 1, 3), ImmutableMap.of());",
          "187:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 2, 3), ImmutableMap.of());",
          "188:             List<Integer> sortedFilters = Lists.newArrayList(1, 2, 3);",
          "189:             assertSortedResult(2L, NQueryLayoutChooser.nonFilterColumnComparator(sortedFilters), mock1, mock2);",
          "190:         }",
          "192:         {",
          "193:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(2, 1, 3), ImmutableMap.of());",
          "194:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 2, 3), ImmutableMap.of());",
          "195:             List<Integer> sortedFilters = Lists.newArrayList(2, 1, 3);",
          "196:             assertSortedResult(1L, NQueryLayoutChooser.nonFilterColumnComparator(sortedFilters), mock1, mock2);",
          "197:         }",
          "198:     }",
          "200:     @Test",
          "201:     void testMeasureSizeComparator() {",
          "202:         MockEntity mock1 = new MockEntity(1L, ImmutableList.of(0), ImmutableList.of(100_000, 100_001));",
          "203:         MockEntity mock2 = new MockEntity(10_001, ImmutableList.of(0), ImmutableList.of(100_000));",
          "204:         List<NLayoutCandidate> layoutCandidates = mockLayouts(mock1, mock2);",
          "205:         layoutCandidates.sort(NQueryLayoutChooser.measureSizeComparator());",
          "206:         Assertions.assertEquals(10_001L, layoutCandidates.get(0).getLayoutEntity().getId());",
          "207:     }",
          "209:     @Test",
          "210:     void testDimensionSizeComparator() {",
          "211:         MockEntity mock1 = new MockEntity(1L, ImmutableList.of(0, 1, 2), ImmutableList.of());",
          "212:         MockEntity mock2 = new MockEntity(10_001L, ImmutableList.of(0, 1, 2, 3), ImmutableList.of());",
          "213:         List<NLayoutCandidate> layoutCandidates = mockLayouts(mock1, mock2);",
          "214:         layoutCandidates.sort(NQueryLayoutChooser.dimensionSizeComparator());",
          "215:         Assertions.assertEquals(1L, layoutCandidates.get(0).getLayoutEntity().getId());",
          "216:     }",
          "218:     private void assertSortedResult(long expectedId, Comparator<NLayoutCandidate> comparator,",
          "219:             MockEntity... mockEntities) {",
          "220:         List<NLayoutCandidate> layoutCandidates = mockLayouts(mockEntities);",
          "221:         layoutCandidates.sort(comparator);",
          "222:         Assertions.assertEquals(expectedId, layoutCandidates.get(0).getLayoutEntity().getId());",
          "223:     }",
          "225:     static class MockEntity {",
          "226:         long id;",
          "227:         List<Integer> dimensions;",
          "228:         List<Integer> measures;",
          "229:         List<Integer> shardByCols;",
          "230:         Map<Integer, DeriveInfo> deriveInfoMap;",
          "231:         long segRange;",
          "232:         long maxSegEnd;",
          "233:         double rowCost;",
          "235:         MockEntity(long id, List<Integer> dimensions, Map<Integer, DeriveInfo> deriveInfoMap) {",
          "236:             this(id, dimensions, Lists.newArrayList(100_000), Lists.newArrayList());",
          "237:             this.deriveInfoMap = deriveInfoMap;",
          "238:         }",
          "240:         MockEntity(long id, List<Integer> dimensions, double rowCost) {",
          "241:             this(id, dimensions, Lists.newArrayList(100_000), Lists.newArrayList());",
          "242:             this.rowCost = rowCost;",
          "243:         }",
          "245:         MockEntity(long id, List<Integer> dimensions, long segRange, long maxSegEnd) {",
          "246:             this(id, dimensions, Lists.newArrayList(100_000), Lists.newArrayList());",
          "247:             this.segRange = segRange;",
          "248:             this.maxSegEnd = maxSegEnd;",
          "249:         }",
          "251:         MockEntity(long id, List<Integer> dimensions, List<Integer> measures) {",
          "252:             this(id, dimensions, measures, Lists.newArrayList());",
          "253:         }",
          "255:         MockEntity(long id, List<Integer> dimensions, List<Integer> measures, List<Integer> shardByCols) {",
          "256:             this.shardByCols = shardByCols;",
          "257:             this.id = id;",
          "258:             this.dimensions = dimensions;",
          "259:             this.measures = id < IndexEntity.TABLE_INDEX_START_ID ? measures : Lists.newArrayList();",
          "260:         }",
          "261:     }",
          "263:     private List<NLayoutCandidate> mockLayouts(MockEntity... entities) {",
          "264:         String project = \"default\";",
          "265:         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();",
          "266:         String modelId = \"82fa7671-a935-45f5-8779-85703601f49a\";",
          "267:         NDataModelManager modelMgr = NDataModelManager.getInstance(kylinConfig, project);",
          "268:         modelMgr.updateDataModel(modelId, copyForWrite -> {",
          "269:             List<NDataModel.NamedColumn> allNamedColumns = copyForWrite.getAllNamedColumns();",
          "270:             for (NDataModel.NamedColumn column : allNamedColumns) {",
          "271:                 if (column.isExist()) {",
          "272:                     column.setStatus(NDataModel.ColumnStatus.DIMENSION);",
          "273:                 }",
          "274:             }",
          "275:         });",
          "276:         Map<Long, MockEntity> idToMockEntityMap = Maps.newHashMap();",
          "277:         NIndexPlanManager indexMgr = NIndexPlanManager.getInstance(kylinConfig, project);",
          "278:         indexMgr.updateIndexPlan(modelId, copyForWrite -> {",
          "280:             copyForWrite.setRuleBasedIndex(new RuleBasedIndex());",
          "281:             copyForWrite.getIndexes().clear();",
          "282:             Map<Long, IndexEntity> indexMap = Maps.newHashMap();",
          "283:             for (MockEntity entity : entities) {",
          "284:                 idToMockEntityMap.put(entity.id, entity);",
          "285:                 long indexId = entity.id - entity.id % IndexEntity.INDEX_ID_STEP;",
          "286:                 IndexEntity index = indexMap.get(indexId);",
          "287:                 if (index == null) {",
          "288:                     index = new IndexEntity();",
          "289:                     index.setId(indexId);",
          "290:                     index.setDimensions(entity.dimensions);",
          "291:                     index.setMeasures(entity.measures);",
          "292:                 }",
          "294:                 LayoutEntity layout = new LayoutEntity();",
          "295:                 List<Integer> colOrder = Lists.newArrayList();",
          "296:                 colOrder.addAll(entity.dimensions);",
          "297:                 colOrder.addAll(entity.measures);",
          "298:                 layout.setIndex(index);",
          "299:                 layout.setAuto(true);",
          "300:                 layout.setColOrder(colOrder);",
          "301:                 layout.setShardByColumns(entity.shardByCols);",
          "302:                 layout.setId(entity.id);",
          "303:                 index.addLayout(layout);",
          "304:                 indexMap.put(index.getId(), index);",
          "305:             }",
          "306:             copyForWrite.updateNextId();",
          "307:             copyForWrite.getIndexes().addAll(indexMap.values());",
          "308:         });",
          "309:         List<LayoutEntity> allLayouts = indexMgr.getIndexPlan(modelId).getAllLayouts();",
          "310:         return allLayouts.stream().map(layout -> {",
          "311:             NLayoutCandidate layoutCandidate = new NLayoutCandidate(layout, 0, new CapabilityResult());",
          "312:             MockEntity mockEntity = idToMockEntityMap.get(layout.getId());",
          "313:             layoutCandidate.setRange(mockEntity.segRange);",
          "314:             layoutCandidate.setMaxSegEnd(mockEntity.maxSegEnd);",
          "315:             layoutCandidate.setCost(mockEntity.rowCost);",
          "316:             layoutCandidate.setDerivedToHostMap(mockEntity.deriveInfoMap);",
          "317:             return layoutCandidate;",
          "318:         }).collect(Collectors.toList());",
          "319:     }",
          "320: }",
          "",
          "---------------"
        ],
        "src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java||src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java": [
          "File: src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java -> src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.List;",
          "23: import org.apache.kylin.common.KylinConfigBase;",
          "24: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "25: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "26: import org.apache.kylin.junit.annotation.MetadataInfo;",
          "27: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "28: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "29: import org.apache.kylin.metadata.realization.IRealization;",
          "30: import org.apache.kylin.query.relnode.OLAPContext;",
          "31: import org.apache.kylin.util.MetadataTestUtils;",
          "32: import org.junit.jupiter.api.Assertions;",
          "33: import org.junit.jupiter.api.Test;",
          "35: import lombok.val;",
          "37: @MetadataInfo",
          "38: class QueryRouterTest {",
          "39:     @Test",
          "40:     void testSort() {",
          "41:         {",
          "42:             Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "43:             Candidate c2 = CandidateTestUtils.mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "44:             assertSortedResults(c1, Lists.newArrayList(c1, c2));",
          "45:         }",
          "47:         {",
          "48:             Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 2, 1);",
          "49:             Candidate c2 = CandidateTestUtils.mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "50:             List<Candidate> candidates = Lists.newArrayList(c1, c2);",
          "51:             QueryRouter.sortCandidates(\"default\", candidates);",
          "52:             Assertions.assertEquals(c1, candidates.get(0));",
          "53:         }",
          "55:         {",
          "56:             Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 2, 2);",
          "57:             Candidate c2 = CandidateTestUtils.mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "58:             List<Candidate> candidates = Lists.newArrayList(c1, c2);",
          "59:             QueryRouter.sortCandidates(\"default\", candidates);",
          "60:             Assertions.assertEquals(c1, candidates.get(0));",
          "61:         }",
          "63:         {",
          "64:             Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "65:             Candidate c2 = CandidateTestUtils.mockCandidate(\"model0002\", \"modelB\", 2, 2);",
          "66:             Candidate c3 = CandidateTestUtils.mockCandidate(\"model0003\", \"modelC\", 4, 4);",
          "67:             List<Candidate> candidates = Lists.newArrayList(c1, c2, c3);",
          "68:             QueryRouter.sortCandidates(\"default\", candidates);",
          "69:             Assertions.assertEquals(c1, candidates.get(0));",
          "70:         }",
          "72:         {",
          "73:             Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 1);",
          "74:             Candidate c2 = mockEmptyCandidate(\"model0003\", \"modelC\", 1);",
          "75:             List<Candidate> candidates = Lists.newArrayList(c1, c2);",
          "76:             QueryRouter.sortCandidates(\"default\", candidates);",
          "77:             Assertions.assertEquals(c1, candidates.get(0));",
          "78:         }",
          "80:         {",
          "81:             Candidate c1 = mockStreamingCandidate(\"model0001\", \"modelA\", 2, 1);",
          "82:             Candidate c2 = mockEmptyCandidate(\"model0002\", \"modelB\", 2);",
          "83:             List<Candidate> candidates = Lists.newArrayList(c1, c2);",
          "84:             QueryRouter.sortCandidates(\"default\", candidates);",
          "85:             Assertions.assertEquals(c1, candidates.get(0));",
          "86:         }",
          "88:         {",
          "89:             Candidate c1 = mockHybridCandidate(\"model0001\", \"modelA\", 3, 1, 2);",
          "90:             Candidate c2 = mockEmptyCandidate(\"model0002\", \"modelB\", 3);",
          "92:             assertSortedResults(c1, Lists.newArrayList(c1, c2));",
          "93:         }",
          "95:         {",
          "96:             Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 1, 3);",
          "97:             Candidate c2 = mockStreamingCandidate(\"model0002\", \"modelB\", 1, 2);",
          "98:             Candidate c3 = mockHybridCandidate(\"model0003\", \"modelC\", 1, 4, 2.5);",
          "99:             List<Candidate> candidates = Lists.newArrayList(c1, c2, c3);",
          "100:             QueryRouter.sortCandidates(\"default\", candidates);",
          "101:             Assertions.assertEquals(c2, candidates.get(0));",
          "102:         }",
          "103:     }",
          "105:     @Test",
          "106:     void testSortWithVacantPruningRule() {",
          "108:         MetadataTestUtils.updateProjectConfig(\"default\", \"kylin.query.index-match-rules\",",
          "109:                 KylinConfigBase.USE_VACANT_INDEXES);",
          "110:         testSort();",
          "111:     }",
          "113:     @Test",
          "114:     void testTableIndexAnswerSelectStar() {",
          "115:         MetadataTestUtils.updateProjectConfig(\"default\", \"kylin.query.index-match-rules\",",
          "116:                 KylinConfigBase.USE_TABLE_INDEX_ANSWER_SELECT_STAR);",
          "117:         Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 2, 1, 1);",
          "118:         Candidate c2 = CandidateTestUtils.mockCandidate(\"model0002\", \"modelB\", 1, 1, 2);",
          "119:         assertSortedResults(c1, Lists.newArrayList(c1, c2));",
          "121:         MetadataTestUtils.updateProjectConfig(\"default\", \"kylin.query.index-match-rules\", \"\");",
          "122:         assertSortedResults(c2, Lists.newArrayList(c1, c2));",
          "123:     }",
          "125:     private void assertSortedResults(Candidate expectCandidate, List<Candidate> candidates) {",
          "126:         QueryRouter.sortCandidates(\"default\", candidates);",
          "127:         Assertions.assertEquals(expectCandidate, candidates.get(0));",
          "128:     }",
          "130:     private Candidate mockStreamingCandidate(String modelId, String modelName, int realizationCost,",
          "131:             double candidateCost) {",
          "132:         IRealization realization = CandidateTestUtils.mockRealization(modelId, modelName, realizationCost);",
          "133:         OLAPContext olapContext = CandidateTestUtils.mockOlapContext();",
          "134:         val candidate = new Candidate(realization, olapContext, Maps.newHashMap());",
          "135:         val cap = new CapabilityResult();",
          "136:         cap.setSelectedStreamingCandidate(() -> candidateCost);",
          "137:         cap.setCost(cap.getSelectedStreamingCandidate().getCost());",
          "138:         candidate.setCapability(cap);",
          "139:         return candidate;",
          "140:     }",
          "142:     private Candidate mockHybridCandidate(String modelId, String modelName, int realizationCost, double candidateCost,",
          "143:             double streamingCandidateCost) {",
          "144:         IRealization realization = CandidateTestUtils.mockRealization(modelId, modelName, realizationCost);",
          "145:         OLAPContext olapContext = CandidateTestUtils.mockOlapContext();",
          "146:         val candidate = new Candidate(realization, olapContext, Maps.newHashMap());",
          "147:         val cap = new CapabilityResult();",
          "148:         cap.setSelectedCandidate(() -> candidateCost);",
          "149:         cap.setSelectedStreamingCandidate(() -> streamingCandidateCost);",
          "150:         cap.setCost(",
          "151:                 (int) Math.min(cap.getSelectedCandidate().getCost(), cap.getSelectedStreamingCandidate().getCost()));",
          "152:         candidate.setCapability(cap);",
          "153:         return candidate;",
          "154:     }",
          "156:     private Candidate mockEmptyCandidate(String modelId, String modelName, int realizationCost) {",
          "157:         IRealization realization = CandidateTestUtils.mockRealization(modelId, modelName, realizationCost);",
          "158:         OLAPContext olapContext = CandidateTestUtils.mockOlapContext();",
          "159:         val candidate = new Candidate(realization, olapContext, Maps.newHashMap());",
          "160:         candidate.realization = CandidateTestUtils.mockRealization(modelId, modelName, realizationCost);",
          "161:         val cap = new CapabilityResult();",
          "162:         cap.setSelectedCandidate(NLayoutCandidate.EMPTY);",
          "163:         cap.setSelectedStreamingCandidate(NLayoutCandidate.EMPTY);",
          "164:         candidate.setCapability(cap);",
          "165:         return candidate;",
          "166:     }",
          "167: }",
          "",
          "---------------"
        ],
        "src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala||src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala": [
          "File: src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala -> src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/FilePruner.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:     QueryContext.current().getMetrics.setFileCount(totalFileCount)",
          "293:     val totalFileSize = selected.flatMap(partition => partition.files).map(_.getLen).sum",
          "294:     val sourceRows = selected.map(seg => {",
          "296:       logInfo(s\"Source scan rows: Query Id: ${QueryContext.current().getQueryId}, Segment Id: ${seg.segmentID}, \" +",
          "297:         s\"Layout Id: ${layout.getId}, rows: $layoutRows.\")",
          "298:       layoutRows",
          "",
          "[Removed Lines]",
          "295:       val layoutRows = dataflow.getSegment(seg.segmentID).getLayout(layout.getId).getRows",
          "",
          "[Added Lines]",
          "295:       val segment = dataflow.getSegment(seg.segmentID)",
          "296:       val dataLayout = segment.getLayout(layout.getId)",
          "297:       val layoutRows = if (dataLayout == null) 0 else dataLayout.getRows",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:   private def pruneEmptySegments(segDirs: Seq[SegmentDirectory]): Seq[SegmentDirectory] = {",
          "363:     segDirs.filter(seg => {",
          "365:         logDebug(s\"pruning empty segment: segment ${seg.segmentID} ${layout.getId} is empty.\")",
          "366:         false",
          "367:       } else {",
          "",
          "[Removed Lines]",
          "364:       if (dataflow.getSegment(seg.segmentID).getLayout(layout.getId).isEmpty) {",
          "",
          "[Added Lines]",
          "366:       val segment = dataflow.getSegment(seg.segmentID)",
          "367:       val dataLayout = segment.getLayout(layout.getId)",
          "368:       if (dataLayout == null || dataLayout.isEmpty) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd46387c394a94391525d18c85cbf9bdabfc6b23",
      "candidate_info": {
        "commit_hash": "dd46387c394a94391525d18c85cbf9bdabfc6b23",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/dd46387c394a94391525d18c85cbf9bdabfc6b23",
        "files": [
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/IndexMatcher.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/TableIndexMatcher.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java"
        ],
        "message": "KYLIN-5632 move index matchers to ChooserContext",
        "before_after_code_files": [
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/IndexMatcher.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/IndexMatcher.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/TableIndexMatcher.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/TableIndexMatcher.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/ChooserContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.apache.commons.collections.CollectionUtils;",
          "27: import org.apache.kylin.common.KylinConfig;",
          "28: import org.apache.kylin.metadata.model.NDataModel;",
          "29: import org.apache.kylin.metadata.model.NDataModelManager;",
          "30: import org.apache.kylin.metadata.model.NTableMetadataManager;",
          "31: import org.apache.kylin.metadata.model.TableExtDesc;",
          "32: import org.apache.kylin.metadata.model.TblColRef;",
          "38: import lombok.Getter;",
          "39: import lombok.val;",
          "41: @Getter",
          "42: public class ChooserContext {",
          "",
          "[Removed Lines]",
          "34: import org.apache.kylin.guava30.shaded.common.collect.ImmutableMultimap;",
          "35: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "36: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "[Added Lines]",
          "28: import org.apache.kylin.guava30.shaded.common.collect.ImmutableMultimap;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "30: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "31: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "32: import org.apache.kylin.metadata.model.AntiFlatChecker;",
          "33: import org.apache.kylin.metadata.model.ColExcludedChecker;",
          "39: import org.apache.kylin.metadata.project.NProjectManager;",
          "40: import org.apache.kylin.metadata.realization.SQLDigest;",
          "44: import lombok.extern.slf4j.Slf4j;",
          "46: @Slf4j",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:     final Map<String, List<Integer>> foreignKeyColumnIds = Maps.newHashMap();",
          "50:     final Map<Integer, TableExtDesc.ColumnStats> columnStatMap = Maps.newHashMap();",
          "52:     public ChooserContext(NDataModel model) {",
          "53:         this.model = model;",
          "55:         ImmutableMultimap.Builder<Integer, Integer> fk2PkBuilder = ImmutableMultimap.builder();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:     final KylinConfig kylinConfig;",
          "60:     AggIndexMatcher aggIndexMatcher;",
          "61:     TableIndexMatcher tableIndexMatcher;",
          "65:         this.kylinConfig = NProjectManager.getProjectConfig(model.getProject());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:         }",
          "65:         this.fk2Pk = fk2PkBuilder.build();",
          "67:     }",
          "69:     public TableExtDesc.ColumnStats getColumnStats(TblColRef ref) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:     }",
          "80:     public ChooserContext(SQLDigest sqlDigest, NDataflow dataflow) {",
          "81:         this(dataflow.getModel());",
          "82:         prepareIndexMatchers(sqlDigest, dataflow);",
          "83:     }",
          "85:     private void prepareIndexMatchers(SQLDigest sqlDigest, NDataflow dataflow) {",
          "86:         String project = dataflow.getProject();",
          "87:         ColExcludedChecker excludedChecker = new ColExcludedChecker(kylinConfig, project, model);",
          "88:         if (log.isDebugEnabled()) {",
          "89:             log.debug(\"When matching layouts, all deduced excluded columns are: {}\",",
          "90:                     excludedChecker.getExcludedColNames());",
          "91:         }",
          "92:         AntiFlatChecker antiFlatChecker = new AntiFlatChecker(model.getJoinTables(), model);",
          "93:         if (log.isDebugEnabled()) {",
          "94:             log.debug(\"When matching layouts, all deduced anti-flatten lookup tables are: {}\",",
          "95:                     antiFlatChecker.getAntiFlattenLookups());",
          "96:         }",
          "98:         aggIndexMatcher = new AggIndexMatcher(sqlDigest, this, dataflow, excludedChecker, antiFlatChecker);",
          "99:         tableIndexMatcher = new TableIndexMatcher(sqlDigest, this, dataflow, excludedChecker, antiFlatChecker);",
          "100:     }",
          "108:     public boolean isIndexMatchersInvalid() {",
          "109:         return !getAggIndexMatcher().isValid() && !getTableIndexMatcher().isValid();",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/IndexMatcher.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/IndexMatcher.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/IndexMatcher.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/IndexMatcher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.apache.commons.collections.CollectionUtils;",
          "29: import org.apache.commons.lang3.StringUtils;",
          "30: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "31: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "32: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "31: import org.apache.kylin.guava30.shaded.common.collect.ImmutableCollection;",
          "32: import org.apache.kylin.guava30.shaded.common.collect.ImmutableMultimap;",
          "33: import org.apache.kylin.guava30.shaded.common.collect.Iterables;",
          "34: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "35: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "36: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "42: import org.apache.kylin.metadata.realization.SQLDigest;",
          "53: import lombok.Getter;",
          "54: import lombok.RequiredArgsConstructor;",
          "55: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "44: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "45: import org.apache.kylin.guava30.shaded.common.collect.ImmutableCollection;",
          "46: import org.apache.kylin.guava30.shaded.common.collect.ImmutableMultimap;",
          "47: import org.apache.kylin.guava30.shaded.common.collect.Iterables;",
          "48: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "49: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "50: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "52: import lombok.AllArgsConstructor;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235:     }",
          "237:     @Getter",
          "239:     @RequiredArgsConstructor",
          "240:     public static class MatchResult {",
          "",
          "[Removed Lines]",
          "238:     @AllArgsConstructor",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "244:         Map<Integer, DeriveInfo> needDerive = Maps.newHashMap();",
          "248:         public List<CapabilityResult.CapabilityInfluence> influences = Lists.newArrayList();",
          "251:             this.isMatched = isMatched;",
          "252:             this.needDerive = needDerive;",
          "253:         }",
          "254:     }",
          "255: }",
          "",
          "[Removed Lines]",
          "246:         CapabilityResult.IncapableCause cases;",
          "250:         public MatchResult(boolean isMatched, Map<Integer, DeriveInfo> needDerive) {",
          "",
          "[Added Lines]",
          "243:         CapabilityResult.IncapableCause incapableCause;",
          "245:         private int penalty = 0;",
          "247:         private double influenceFactor = 1.0;",
          "251:         public MatchResult(boolean isMatched, int penalty, Map<Integer, DeriveInfo> needDerive) {",
          "252:             this.isMatched = isMatched;",
          "253:             this.needDerive = needDerive;",
          "254:             this.penalty = penalty;",
          "255:             this.influenceFactor += penalty;",
          "256:         }",
          "258:         public MatchResult(boolean isMatched, Map<Integer, DeriveInfo> needDerive,",
          "259:                 CapabilityResult.IncapableCause reason, List<CapabilityResult.CapabilityInfluence> influences) {",
          "262:             this.incapableCause = reason;",
          "263:             this.influences = influences;",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NLayoutCandidate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import javax.annotation.Nonnull;",
          "28: import org.apache.kylin.metadata.model.DeriveInfo;",
          "29: import org.apache.kylin.metadata.model.JoinDesc;",
          "30: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "31: import org.apache.kylin.metadata.realization.IRealizationCandidate;",
          "37: import lombok.Getter;",
          "38: import lombok.Setter;",
          "",
          "[Removed Lines]",
          "32: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "34: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "35: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "[Added Lines]",
          "28: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "30: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     @Setter",
          "43:     private double cost;",
          "49:     @Setter",
          "50:     @Getter",
          "51:     private CapabilityResult capabilityResult;",
          "",
          "[Removed Lines]",
          "45:     @Getter",
          "46:     @Setter",
          "47:     private int layoutUnmatchedColsSize;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.metadata.cube.cuboid;",
          "22: import java.util.Collection;",
          "23: import java.util.Comparator;",
          "24: import java.util.Iterator;",
          "",
          "[Removed Lines]",
          "21: import java.util.ArrayList;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import org.apache.commons.collections.MapUtils;",
          "32: import org.apache.kylin.common.KylinConfig;",
          "33: import org.apache.kylin.common.SegmentOnlineMode;",
          "36: import org.apache.kylin.metadata.cube.model.IndexPlan;",
          "37: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "38: import org.apache.kylin.metadata.cube.model.NDataLayout;",
          "39: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "40: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "43: import org.apache.kylin.metadata.model.DeriveInfo;",
          "45: import org.apache.kylin.metadata.model.TblColRef;",
          "46: import org.apache.kylin.metadata.project.NProjectManager;",
          "47: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "48: import org.apache.kylin.metadata.realization.SQLDigest;",
          "56: import lombok.val;",
          "57: import lombok.var;",
          "58: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "34: import org.apache.kylin.common.exception.KylinTimeoutException;",
          "35: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "41: import org.apache.kylin.metadata.model.AntiFlatChecker;",
          "42: import org.apache.kylin.metadata.model.ColExcludedChecker;",
          "44: import org.apache.kylin.metadata.model.NDataModel;",
          "50: import org.apache.kylin.guava30.shaded.common.collect.ImmutableSet;",
          "51: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "52: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "53: import org.apache.kylin.guava30.shaded.common.collect.Ordering;",
          "55: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "[Added Lines]",
          "33: import org.apache.kylin.guava30.shaded.common.collect.ImmutableSet;",
          "34: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "35: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "36: import org.apache.kylin.guava30.shaded.common.collect.Ordering;",
          "37: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "48: import org.apache.kylin.query.util.QueryInterruptChecker;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:             return NLayoutCandidate.EMPTY;",
          "92:         }",
          "120:             return null;",
          "121:         }",
          "126:         log.info(\"Matching dataflow with seg num: {} layout num: {}\", prunedSegments.size(), commonLayouts.size());",
          "136:             if (!matchResult.isMatched()) {",
          "141:             }",
          "142:             if (!matchResult.isMatched()) {",
          "143:                 log.trace(\"Matching failed\");",
          "144:                 continue;",
          "145:             }",
          "150:             if (!matchResult.getNeedDerive().isEmpty()) {",
          "151:                 candidate.setDerivedToHostMap(matchResult.getNeedDerive());",
          "152:                 candidate.setDerivedTableSnapshots(candidate.getDerivedToHostMap().keySet().stream()",
          "153:                         .map(i -> chooserContext.convertToRef(i).getTable()).collect(Collectors.toSet()));",
          "154:             }",
          "155:             candidate.setCapabilityResult(tempResult);",
          "156:             candidates.add(candidate);",
          "157:         }",
          "170:     }",
          "173:             Map<String, Set<Long>> chSegmentToLayoutsMap) {",
          "174:         KylinConfig projectConfig = NProjectManager.getProjectConfig(dataflow.getProject());",
          "175:         if (!projectConfig.isHeterogeneousSegmentEnabled()) {",
          "",
          "[Removed Lines]",
          "94:         String project = dataflow.getProject();",
          "95:         NDataModel model = dataflow.getModel();",
          "96:         KylinConfig projectConfig = NProjectManager.getProjectConfig(project);",
          "97:         ChooserContext chooserContext = new ChooserContext(model);",
          "98:         ColExcludedChecker excludedChecker = new ColExcludedChecker(projectConfig, project, model);",
          "99:         if (log.isDebugEnabled()) {",
          "100:             log.debug(\"When matching layouts, all deduced excluded columns are: {}\",",
          "101:                     excludedChecker.getExcludedColNames());",
          "102:         }",
          "103:         AntiFlatChecker antiFlatChecker = new AntiFlatChecker(model.getJoinTables(), model);",
          "104:         if (log.isDebugEnabled()) {",
          "105:             log.debug(\"When matching layouts, all deduced anti-flatten lookup tables are: {}\",",
          "106:                     antiFlatChecker.getAntiFlattenLookups());",
          "107:         }",
          "109:         AggIndexMatcher aggIndexMatcher = new AggIndexMatcher(sqlDigest, chooserContext, dataflow, excludedChecker,",
          "110:                 antiFlatChecker);",
          "111:         TableIndexMatcher tableIndexMatcher = new TableIndexMatcher(sqlDigest, chooserContext, dataflow,",
          "112:                 excludedChecker, antiFlatChecker);",
          "119:         if (!aggIndexMatcher.isValid() && !tableIndexMatcher.isValid()) {",
          "123:         IndexPlan indexPlan = dataflow.getIndexPlan();",
          "124:         List<NLayoutCandidate> candidates = new ArrayList<>();",
          "125:         Collection<NDataLayout> commonLayouts = getLayoutsFromSegments(prunedSegments, dataflow, chSegmentToLayoutsMap);",
          "127:         for (NDataLayout dataLayout : commonLayouts) {",
          "128:             log.trace(\"Matching layout {}\", dataLayout);",
          "129:             IndexEntity indexEntity = indexPlan.getIndexEntity(dataLayout.getIndexId());",
          "130:             log.trace(\"Matching indexEntity {}\", indexEntity);",
          "132:             LayoutEntity layout = indexPlan.getLayoutEntity(dataLayout.getLayoutId());",
          "133:             NLayoutCandidate candidate = new NLayoutCandidate(layout);",
          "134:             IndexMatcher.MatchResult matchResult = tableIndexMatcher.match(layout);",
          "135:             double influenceFactor = 1.0;",
          "137:                 matchResult = aggIndexMatcher.match(layout);",
          "138:             } else if (projectConfig.useTableIndexAnswerSelectStarEnabled()) {",
          "139:                 influenceFactor += tableIndexMatcher.getLayoutUnmatchedColsSize();",
          "140:                 candidate.setLayoutUnmatchedColsSize(tableIndexMatcher.getLayoutUnmatchedColsSize());",
          "147:             CapabilityResult tempResult = new CapabilityResult();",
          "148:             tempResult.influences = matchResult.getInfluences();",
          "149:             candidate.setCost(dataLayout.getRows() * (tempResult.influences.size() + influenceFactor));",
          "159:         if (Thread.interrupted()) {",
          "160:             throw new KylinTimeoutException(\"The query exceeds the set time limit of \"",
          "161:                     + KylinConfig.getInstanceFromEnv().getQueryTimeoutSeconds() + \"s. Current step: Layout chooser. \");",
          "162:         }",
          "164:         log.info(\"Matched candidates num : {}\", candidates.size());",
          "165:         if (candidates.isEmpty()) {",
          "166:             return null;",
          "167:         }",
          "168:         sortCandidates(candidates, chooserContext, sqlDigest);",
          "169:         return candidates.get(0);",
          "172:     private static Collection<NDataLayout> getLayoutsFromSegments(List<NDataSegment> segments, NDataflow dataflow,",
          "",
          "[Added Lines]",
          "88:         ChooserContext chooserContext = new ChooserContext(sqlDigest, dataflow);",
          "89:         if (chooserContext.isIndexMatchersInvalid()) {",
          "93:         Collection<NDataLayout> commonLayouts = getCommonLayouts(prunedSegments, dataflow, chSegmentToLayoutsMap);",
          "95:         Map<Long, List<NDataLayout>> commonLayoutsMap = commonLayouts.stream()",
          "96:                 .collect(Collectors.toMap(NDataLayout::getLayoutId, Lists::newArrayList));",
          "97:         List<NLayoutCandidate> candidates = collectAllLayoutCandidates(dataflow, chooserContext, commonLayoutsMap);",
          "99:         QueryInterruptChecker.checkThreadInterrupted(\"Interrupted exception occurs.\",",
          "100:                 \"Current step involves gathering all the layouts that \"",
          "101:                         + \"can potentially provide a response to this query.\");",
          "103:         if (candidates.isEmpty()) {",
          "104:             return null;",
          "105:         }",
          "106:         log.info(\"Matched candidates num : {}\", candidates.size());",
          "107:         sortCandidates(candidates, chooserContext, sqlDigest);",
          "108:         return candidates.get(0);",
          "109:     }",
          "111:     public static List<NLayoutCandidate> collectAllLayoutCandidates(NDataflow dataflow, ChooserContext chooserContext,",
          "112:             Map<Long, List<NDataLayout>> commonLayoutsMap) {",
          "113:         List<NLayoutCandidate> candidates = Lists.newArrayList();",
          "114:         for (Map.Entry<Long, List<NDataLayout>> entry : commonLayoutsMap.entrySet()) {",
          "115:             LayoutEntity layout = dataflow.getIndexPlan().getLayoutEntity(entry.getKey());",
          "116:             log.trace(\"Matching index: id = {}\", entry.getKey());",
          "117:             IndexMatcher.MatchResult matchResult = chooserContext.getTableIndexMatcher().match(layout);",
          "119:                 matchResult = chooserContext.getAggIndexMatcher().match(layout);",
          "127:             NLayoutCandidate candidate = new NLayoutCandidate(layout);",
          "128:             CapabilityResult tempResult = new CapabilityResult(matchResult);",
          "134:             long allRows = entry.getValue().stream().mapToLong(NDataLayout::getRows).sum();",
          "135:             candidate.setCost(allRows * (tempResult.influences.size() + matchResult.getInfluenceFactor()));",
          "139:         return candidates;",
          "142:     private static Collection<NDataLayout> getCommonLayouts(List<NDataSegment> segments, NDataflow dataflow,",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/TableIndexMatcher.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/TableIndexMatcher.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/TableIndexMatcher.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/TableIndexMatcher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import java.util.Set;",
          "24: import java.util.stream.Collectors;",
          "26: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "27: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "28: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "27: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "34: import org.apache.kylin.metadata.realization.SQLDigest;",
          "39: import lombok.extern.slf4j.Slf4j;",
          "41: @Slf4j",
          "42: public class TableIndexMatcher extends IndexMatcher {",
          "46:     public TableIndexMatcher(SQLDigest sqlDigest, ChooserContext chooserContext, NDataflow dataflow,",
          "47:             ColExcludedChecker excludedChecker, AntiFlatChecker antiFlatChecker) {",
          "48:         super(sqlDigest, chooserContext, dataflow, excludedChecker, antiFlatChecker);",
          "50:         this.valid = fastValidCheckBeforeMatch();",
          "51:     }",
          "",
          "[Removed Lines]",
          "36: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "37: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "44:     private int layoutUnmatchedColsSize;",
          "49:         this.layoutUnmatchedColsSize = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:         log.trace(\"Matching table index\");",
          "67:         final Map<Integer, DeriveInfo> needDerive = Maps.newHashMap();",
          "68:         Set<Integer> unmatchedCols = initUnmatchedColumnIds(layout);",
          "69:         if (NProjectManager.getProjectConfig(project).useTableIndexAnswerSelectStarEnabled()) {",
          "71:             unmatchedCols.removeAll(dataflow.getAllColumnsIndex());",
          "72:         }",
          "73:         goThruDerivedDims(layout.getIndex(), needDerive, unmatchedCols);",
          "",
          "[Removed Lines]",
          "70:             layoutUnmatchedColsSize = unmatchedCols.size();",
          "",
          "[Added Lines]",
          "65:         int penaltyFactor = 0;",
          "67:             penaltyFactor = unmatchedCols.size();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "85:                     CapabilityResult.IncapableCause.create(CapabilityResult.IncapableType.TABLE_INDEX_MISSING_COLS),",
          "86:                     Lists.newArrayList());",
          "87:         }",
          "89:     }",
          "91:     @Override",
          "",
          "[Removed Lines]",
          "88:         return new MatchResult(true, needDerive);",
          "",
          "[Added Lines]",
          "85:         return new MatchResult(true, penaltyFactor, needDerive);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "94:                 && !nonSupportFunTableIndex(sqlDigest.aggregations);",
          "95:         return !index.isTableIndex() || (!sqlDigest.isRawQuery && !isUseTableIndex);",
          "96:     }",
          "101: }",
          "",
          "[Removed Lines]",
          "98:     public int getLayoutUnmatchedColsSize() {",
          "99:         return layoutUnmatchedColsSize;",
          "100:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:             if (candidateAndInfluence != null) {",
          "85:                 chosenCandidate = candidateAndInfluence;",
          "86:                 result.influences.addAll(candidateAndInfluence.getCapabilityResult().influences);",
          "88:                 logger.info(\"Matched layout {} snapshot in dataflow {} \", chosenCandidate, dataflow);",
          "89:             }",
          "90:         }",
          "",
          "[Removed Lines]",
          "87:                 result.setLayoutUnmatchedColsSize(candidateAndInfluence.getLayoutUnmatchedColsSize());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.List;",
          "24: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "25: import org.apache.kylin.metadata.model.FunctionDesc;",
          "26: import org.apache.kylin.metadata.model.MeasureDesc;",
          "27: import org.apache.kylin.metadata.model.TblColRef;",
          "29: import lombok.Getter;",
          "30: import lombok.Setter;",
          "32: public class CapabilityResult {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import org.apache.kylin.metadata.cube.cuboid.IndexMatcher;",
          "31: import lombok.NoArgsConstructor;",
          "34: @NoArgsConstructor",
          "37:     public CapabilityResult(IndexMatcher.MatchResult matchResult) {",
          "38:         this.layoutUnmatchedColsSize = matchResult.getPenalty();",
          "39:         this.influences = matchResult.getInfluences();",
          "40:         this.capable = matchResult.isMatched();",
          "41:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f648977f2eaf42f7bccc1a499f0b9e7e613ad33",
      "candidate_info": {
        "commit_hash": "7f648977f2eaf42f7bccc1a499f0b9e7e613ad33",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/7f648977f2eaf42f7bccc1a499f0b9e7e613ad33",
        "files": [
          "pom.xml",
          "src/common-server/pom.xml",
          "src/common-service/pom.xml",
          "src/core-common/pom.xml",
          "src/core-job/pom.xml",
          "src/core-storage/pom.xml",
          "src/job-service/pom.xml",
          "src/kylin-it/pom.xml",
          "src/kylin-it/src/test/java/org/apache/kylin/newten/TimeZoneQueryTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/server/NQueryControllerTest.java",
          "src/kylin-server-it/pom.xml",
          "src/kylin-server-it/src/test/java/org/apache/kylin/event/HAMetadataTest.java",
          "src/kylin-server-it/src/test/java/org/apache/kylin/event/ITStorageCleanerTest.java",
          "src/kylin-server-it/src/test/java/org/apache/kylin/event/ModelSemanticTest.java",
          "src/kylin-server-it/src/test/java/org/apache/kylin/event/SchemaChangeTest.java",
          "src/kylin-server-it/src/test/java/org/apache/kylin/rest/broadcaster/BroadcasterTest.java",
          "src/kylin-server-it/src/test/java/org/apache/kylin/rest/controller/NBuildAndQueryMetricsTest.java",
          "src/kylin-server-it/src/test/java/org/apache/kylin/rest/controller/NModelControllerTest.java",
          "src/kylin-server-it/src/test/java/org/apache/kylin/rest/controller/NProjectControllerTest.java",
          "src/kylin-server-it/src/test/java/org/apache/kylin/rest/controller/NQueryControllerTest.java",
          "src/kylin-server-it/src/test/java/org/apache/kylin/rest/controller/NUserControllerTest.java",
          "src/kylin-server-it/src/test/java/org/apache/kylin/server/AbstractMVCIntegrationTestCase.java",
          "src/kylin-server-it/src/test/java/org/apache/kylin/server/IntegrationConfig.java",
          "src/kylin-server-it/src/test/java/org/apache/kylin/server/NModelControllerWithRealServiceTest.java",
          "src/kylin-server-it/src/test/resources/query/sql_pushdown.sql",
          "src/kylin-server-it/src/test/resources/springframework/conf/applicationContext.xml",
          "src/kylin-server-it/src/test/resources/springframework/conf/kylinSecurity.xml",
          "src/metadata-server/pom.xml",
          "src/modeling-service/pom.xml",
          "src/modeling-service/src/main/java/org/apache/kylin/rest/service/IndexPlanService.java",
          "src/query-server/pom.xml",
          "src/query-service/pom.xml",
          "src/query-service/src/main/java/org/apache/kylin/rest/service/DashboardService.java",
          "src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
          "src/query-service/src/main/java/org/apache/kylin/rest/util/QueryUtils.java",
          "src/query/src/main/java/org/apache/kylin/query/util/PrepareSQLUtils.java",
          "src/query/src/test/java/org/apache/kylin/query/util/PrepareSQLUtilsTest.java",
          "src/second-storage/clickhouse-it/pom.xml",
          "src/server/pom.xml",
          "src/spark-project/engine-build-sdk/pom.xml",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java",
          "src/spark-project/source-jdbc/pom.xml",
          "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala",
          "src/spark-project/spark-common/pom.xml",
          "src/streaming-service/pom.xml",
          "src/tool/pom.xml",
          "src/tool/src/main/java/org/apache/kylin/helper/HelperConstants.java",
          "src/tool/src/main/java/org/apache/kylin/helper/MetadataToolHelper.java",
          "src/tool/src/main/java/org/apache/kylin/helper/RoutineToolHelper.java",
          "src/tool/src/main/java/org/apache/kylin/helper/UpdateUserAclToolHelper.java",
          "src/tool/src/main/java/org/apache/kylin/tool/HDFSMetadataTool.java",
          "src/tool/src/main/java/org/apache/kylin/tool/constant/DiagTypeEnum.java",
          "src/tool/src/main/java/org/apache/kylin/tool/constant/StageEnum.java",
          "src/tool/src/main/java/org/apache/kylin/tool/daemon/CheckResult.java",
          "src/tool/src/main/java/org/apache/kylin/tool/daemon/CheckStateEnum.java",
          "src/tool/src/main/java/org/apache/kylin/tool/daemon/HealthChecker.java",
          "src/tool/src/main/java/org/apache/kylin/tool/daemon/KapGuardianHATask.java",
          "src/tool/src/main/java/org/apache/kylin/tool/daemon/ServiceOpLevelEnum.java",
          "src/tool/src/main/java/org/apache/kylin/tool/daemon/Worker.java",
          "src/tool/src/main/java/org/apache/kylin/tool/daemon/checker/AbstractHealthChecker.java",
          "src/tool/src/main/java/org/apache/kylin/tool/daemon/checker/FullGCDurationChecker.java",
          "src/tool/src/main/java/org/apache/kylin/tool/daemon/checker/KEProcessChecker.java",
          "src/tool/src/main/java/org/apache/kylin/tool/daemon/checker/KEStatusChecker.java",
          "src/tool/src/main/java/org/apache/kylin/tool/garbage/ExecutableCleaner.java",
          "src/tool/src/main/java/org/apache/kylin/tool/garbage/GarbageCleaner.java",
          "src/tool/src/main/java/org/apache/kylin/tool/garbage/IndexCleaner.java",
          "src/tool/src/main/java/org/apache/kylin/tool/garbage/MetadataCleaner.java",
          "src/tool/src/main/java/org/apache/kylin/tool/garbage/SnapshotCleaner.java",
          "src/tool/src/main/java/org/apache/kylin/tool/garbage/SourceUsageCleaner.java",
          "src/tool/src/main/java/org/apache/kylin/tool/garbage/StorageCleaner.java",
          "src/tool/src/main/java/org/apache/kylin/tool/kerberos/DelegationTokenManager.java",
          "src/tool/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java",
          "src/tool/src/main/java/org/apache/kylin/tool/util/LdapUtils.java",
          "src/tool/src/main/java/org/apache/kylin/tool/util/ProjectTemporaryTableCleanerHelper.java",
          "src/tool/src/main/java/org/apache/kylin/tool/util/ToolUtil.java",
          "src/tool/src/test/java/org/apache/kylin/tool/util/ProjectTemporaryTableCleanerHelperTest.java",
          "src/tool/src/test/java/org/apache/kylin/tool/util/ToolUtilTest.java"
        ],
        "message": "KYLIN-5639 Refine kylin-it dependency",
        "before_after_code_files": [
          "src/kylin-it/src/test/java/org/apache/kylin/newten/TimeZoneQueryTest.java||src/kylin-it/src/test/java/org/apache/kylin/newten/TimeZoneQueryTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/server/NQueryControllerTest.java||src/kylin-it/src/test/java/org/apache/kylin/server/NQueryControllerTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/rest/broadcaster/BroadcasterTest.java||src/kylin-server-it/src/test/java/org/apache/kylin/rest/broadcaster/BroadcasterTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/rest/controller/NQueryControllerTest.java||src/kylin-server-it/src/test/java/org/apache/kylin/rest/controller/NQueryControllerTest.java",
          "src/kylin-server-it/src/test/resources/query/sql_pushdown.sql||src/kylin-server-it/src/test/resources/query/sql_pushdown.sql",
          "src/modeling-service/src/main/java/org/apache/kylin/rest/service/IndexPlanService.java||src/modeling-service/src/main/java/org/apache/kylin/rest/service/IndexPlanService.java",
          "src/query-service/src/main/java/org/apache/kylin/rest/service/DashboardService.java||src/query-service/src/main/java/org/apache/kylin/rest/service/DashboardService.java",
          "src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java||src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
          "src/query-service/src/main/java/org/apache/kylin/rest/util/QueryUtils.java||src/query-service/src/main/java/org/apache/kylin/rest/util/QueryUtils.java",
          "src/query-service/src/main/java/org/apache/kylin/rest/util/PrepareSQLUtils.java||src/query/src/main/java/org/apache/kylin/query/util/PrepareSQLUtils.java",
          "src/query/src/test/java/org/apache/kylin/query/util/PrepareSQLUtilsTest.java||src/query/src/test/java/org/apache/kylin/query/util/PrepareSQLUtilsTest.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java",
          "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala||src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala",
          "src/common-service/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java||src/tool/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/kylin-it/src/test/java/org/apache/kylin/newten/TimeZoneQueryTest.java||src/kylin-it/src/test/java/org/apache/kylin/newten/TimeZoneQueryTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/newten/TimeZoneQueryTest.java -> src/kylin-it/src/test/java/org/apache/kylin/newten/TimeZoneQueryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: import org.apache.kylin.metadata.model.SegmentRange;",
          "45: import org.apache.kylin.query.engine.PrepareSqlStateParam;",
          "46: import org.apache.kylin.query.pushdown.SparkSqlClient;",
          "48: import org.apache.kylin.util.ExecAndComp;",
          "49: import org.apache.spark.SparkConf;",
          "50: import org.apache.spark.sql.Row;",
          "",
          "[Removed Lines]",
          "47: import org.apache.kylin.rest.util.PrepareSQLUtils;",
          "",
          "[Added Lines]",
          "47: import org.apache.kylin.query.util.PrepareSQLUtils;",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.lang.reflect.Field;",
          "22: import java.util.Map;",
          "23: import java.util.Set;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.HashMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.apache.kylin.common.util.TempMetadataBuilder;",
          "30: import org.apache.kylin.common.util.Unsafe;",
          "31: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "34: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "35: import org.apache.kylin.metadata.cube.model.NDataLayout;",
          "36: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "37: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "38: import org.apache.kylin.metadata.cube.model.NDataflowUpdate;",
          "39: import org.apache.kylin.metadata.model.ComputedColumnDesc;",
          "40: import org.apache.kylin.metadata.model.NDataModel;",
          "41: import org.apache.kylin.metadata.model.NDataModelManager;",
          "",
          "[Removed Lines]",
          "32: import org.apache.kylin.job.engine.JobEngineConfig;",
          "33: import org.apache.kylin.job.impl.threadpool.NDefaultScheduler;",
          "",
          "[Added Lines]",
          "33: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "34: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "36: import org.apache.kylin.metadata.cube.model.IndexPlan;",
          "37: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "42: import org.apache.kylin.metadata.cube.model.NIndexPlanManager;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43: import org.apache.kylin.metadata.realization.RealizationStatusEnum;",
          "44: import org.apache.kylin.query.engine.SchemaMetaData;",
          "45: import org.apache.kylin.query.relnode.OLAPContext;",
          "52: import org.apache.kylin.util.OlapContextUtil;",
          "53: import org.apache.spark.SparkConf;",
          "54: import org.apache.spark.sql.SparderEnv;",
          "",
          "[Removed Lines]",
          "46: import org.apache.kylin.rest.constant.Constant;",
          "47: import org.apache.kylin.rest.request.CreateBaseIndexRequest;",
          "48: import org.apache.kylin.rest.service.IndexPlanService;",
          "49: import org.apache.kylin.rest.service.ModelService;",
          "50: import org.apache.kylin.rest.util.AclEvaluate;",
          "51: import org.apache.kylin.rest.util.AclUtil;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "59: import org.junit.Before;",
          "60: import org.junit.BeforeClass;",
          "61: import org.junit.Test;",
          "69: public class TableIndexAnswerSelectStarTest extends NLocalWithSparkSessionTest {",
          "83:     @BeforeClass",
          "84:     public static void initSpark() {",
          "85:         if (Shell.MAC)",
          "",
          "[Removed Lines]",
          "62: import org.mockito.InjectMocks;",
          "63: import org.mockito.Mock;",
          "64: import org.mockito.Mockito;",
          "65: import org.springframework.security.authentication.TestingAuthenticationToken;",
          "66: import org.springframework.security.core.context.SecurityContextHolder;",
          "67: import org.springframework.test.util.ReflectionTestUtils;",
          "71:     @InjectMocks",
          "72:     private final IndexPlanService indexPlanService = Mockito.spy(new IndexPlanService());",
          "74:     @Mock",
          "75:     private AclEvaluate aclEvaluate = Mockito.spy(AclEvaluate.class);",
          "77:     @Mock",
          "78:     private AclUtil aclUtil = Mockito.spy(AclUtil.class);",
          "80:     @InjectMocks",
          "81:     private final ModelService modelService = Mockito.spy(new ModelService());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "108:     public void setup() throws Exception {",
          "109:         overwriteSystemProp(\"kylin.job.scheduler.poll-interval-second\", \"1\");",
          "110:         this.createTestMetadata(\"src/test/resources/ut_meta/tableindex_answer_selectstart\");",
          "121:     }",
          "123:     @After",
          "124:     public void after() throws Exception {",
          "126:         cleanupTestMetadata();",
          "127:     }",
          "",
          "[Removed Lines]",
          "111:         ReflectionTestUtils.setField(aclEvaluate, \"aclUtil\", aclUtil);",
          "112:         ReflectionTestUtils.setField(indexPlanService, \"aclEvaluate\", aclEvaluate);",
          "113:         ReflectionTestUtils.setField(modelService, \"aclEvaluate\", aclEvaluate);",
          "114:         TestingAuthenticationToken auth = new TestingAuthenticationToken(\"ADMIN\", \"ADMIN\", Constant.ROLE_ADMIN);",
          "115:         SecurityContextHolder.getContext().setAuthentication(auth);",
          "116:         NDefaultScheduler scheduler = NDefaultScheduler.getInstance(getProject());",
          "117:         scheduler.init(new JobEngineConfig(KylinConfig.getInstanceFromEnv()));",
          "118:         if (!scheduler.hasStarted()) {",
          "119:             throw new RuntimeException(\"scheduler has not been started\");",
          "120:         }",
          "125:         NDefaultScheduler.destroyInstance();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186:             copyForWrite.getAllNamedColumns().add(newCol);",
          "187:         });",
          "193:         NDataflow dataflow = dataflowManager.getDataflow(modelId);",
          "194:         String segId = \"87d65498-b922-225c-1db7-13de001beba8\";",
          "195:         NDataLayout baseAggLayout = dataflow.getSegment(segId).getLayout(1L);",
          "",
          "[Removed Lines]",
          "189:         CreateBaseIndexRequest request = new CreateBaseIndexRequest();",
          "190:         request.setProject(getProject());",
          "191:         request.setModelId(modelId);",
          "192:         indexPlanService.updateBaseIndex(getProject(), request, false, false, false);",
          "",
          "[Added Lines]",
          "158:         NIndexPlanManager indexPlanManager = NIndexPlanManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject());",
          "159:         IndexPlan indexPlan = indexPlanManager.getIndexPlan(modelId);",
          "160:         Long oldBaseAggLayout = indexPlan.getBaseAggLayoutId();",
          "161:         indexPlanManager.updateIndexPlan(indexPlan.getUuid(), copyForWrite -> copyForWrite",
          "162:                 .markWhiteIndexToBeDelete(indexPlan.getUuid(), Sets.newHashSet(oldBaseAggLayout), new HashMap<>()));",
          "163:         NDataModel model = modelManager.getDataModelDesc(modelId);",
          "164:         LayoutEntity newBaseAggLayout = indexPlan.createBaseAggIndex(model);",
          "165:         indexPlanManager.updateIndexPlan(indexPlan.getUuid(),",
          "166:                 copyForWrite -> copyForWrite.createAndAddBaseIndex(Lists.newArrayList(newBaseAggLayout)));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "224:         return \"tableindex_answer_selectstart\";",
          "225:     }",
          "",
          "[Removed Lines]",
          "227: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/server/NQueryControllerTest.java||src/kylin-it/src/test/java/org/apache/kylin/server/NQueryControllerTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/server/NQueryControllerTest.java -> src/kylin-it/src/test/java/org/apache/kylin/server/NQueryControllerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/rest/broadcaster/BroadcasterTest.java||src/kylin-server-it/src/test/java/org/apache/kylin/rest/broadcaster/BroadcasterTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/rest/broadcaster/BroadcasterTest.java -> src/kylin-server-it/src/test/java/org/apache/kylin/rest/broadcaster/BroadcasterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:     void testBroadcastAddS3Conf() throws Exception {",
          "116:         BroadcastListener broadcastListener = new BroadcastListener();",
          "117:         broadcastListener.handle(new AddS3CredentialToSparkBroadcastEventNotifier(\"aa\", \"bb\", \"cc\"));",
          "119:     }",
          "121:     @Test",
          "",
          "[Removed Lines]",
          "118:         assert SparderEnv.getSparkSession().conf().contains(String.format(\"fs.s3a.bucket.%s.assumed.role.arn\", \"aa\"));",
          "",
          "[Added Lines]",
          "118:         Assert.assertTrue(SparderEnv.getSparkSession().conf().contains(String.format(\"fs.s3a.bucket.%s.assumed.role.arn\", \"aa\")));",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/rest/controller/NQueryControllerTest.java||src/kylin-server-it/src/test/java/org/apache/kylin/rest/controller/NQueryControllerTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/rest/controller/NQueryControllerTest.java -> src/kylin-server-it/src/test/java/org/apache/kylin/rest/controller/NQueryControllerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     public void testQuery() throws Exception {",
          "77:         final PrepareSqlRequest sqlRequest = new PrepareSqlRequest();",
          "78:         sqlRequest.setProject(\"DEFAULT\");",
          "80:         overwriteSystemProp(\"kylin.query.pushdown-enabled\", \"false\");",
          "82:         final MvcResult result = mockMvc",
          "",
          "[Removed Lines]",
          "79:         sqlRequest.setSql(\"SELECT * FROM TEST_KYLIN_FACT\");",
          "",
          "[Added Lines]",
          "79:         sqlRequest.setSql(\"-- This is comment\" + '\\n' + \"SELECT * FROM TEST_KYLIN_FACT\");",
          "80:         sqlRequest.setUser_defined_tag(\"user_tag\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:         final PrepareSqlRequest sqlRequest = new PrepareSqlRequest();",
          "118:         sqlRequest.setProject(\"Default\");",
          "121:         File sqlFile = new File(queryFileName);",
          "122:         String sql = KylinTestBase.getTextFromFile(sqlFile);",
          "123:         sqlRequest.setSql(sql);",
          "",
          "[Removed Lines]",
          "120:         String queryFileName = \"src/test/resources/query/sql_pushdown/query04.sql\";",
          "",
          "[Added Lines]",
          "121:         String queryFileName = \"src/test/resources/query/sql_pushdown.sql\";",
          "",
          "---------------"
        ],
        "src/kylin-server-it/src/test/resources/query/sql_pushdown.sql||src/kylin-server-it/src/test/resources/query/sql_pushdown.sql": [
          "File: src/kylin-server-it/src/test/resources/query/sql_pushdown.sql -> src/kylin-server-it/src/test/resources/query/sql_pushdown.sql",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --",
          "2: -- Licensed to the Apache Software Foundation (ASF) under one",
          "3: -- or more contributor license agreements.  See the NOTICE file",
          "4: -- distributed with this work for additional information",
          "5: -- regarding copyright ownership.  The ASF licenses this file",
          "6: -- to you under the Apache License, Version 2.0 (the",
          "7: -- \"License\"); you may not use this file except in compliance",
          "8: -- with the License.  You may obtain a copy of the License at",
          "9: --",
          "10: --     http://www.apache.org/licenses/LICENSE-2.0",
          "11: --",
          "12: -- Unless required by applicable law or agreed to in writing, software",
          "13: -- distributed under the License is distributed on an \"AS IS\" BASIS,",
          "14: -- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "15: -- See the License for the specific language governing permissions and",
          "16: -- limitations under the License.",
          "17: --",
          "19: select meta_categ_name, count(1) as cnt, sum(price) as GMV",
          "21:  from test_kylin_fact",
          "22:  inner JOIN edw.test_cal_dt as test_cal_dt",
          "23:  ON test_kylin_fact.cal_dt = test_cal_dt.cal_dt",
          "24:  left JOIN test_category_groupings",
          "25:  ON test_kylin_fact.leaf_categ_id = test_category_groupings.leaf_categ_id",
          "26:  left JOIN edw.test_sites as test_sites",
          "27:  ON test_kylin_fact.lstg_site_id = test_sites.site_id",
          "29:  where not ( meta_categ_name not in ('', 'a','Computers') or meta_categ_name not in ('Crafts','Computers'))",
          "30:  group by meta_categ_name",
          "",
          "---------------"
        ],
        "src/modeling-service/src/main/java/org/apache/kylin/rest/service/IndexPlanService.java||src/modeling-service/src/main/java/org/apache/kylin/rest/service/IndexPlanService.java": [
          "File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/IndexPlanService.java -> src/modeling-service/src/main/java/org/apache/kylin/rest/service/IndexPlanService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1109:     @Transaction(project = 0)",
          "1110:     public BuildBaseIndexResponse updateBaseIndex(String project, CreateBaseIndexRequest request,",
          "1112:         aclEvaluate.checkProjectOperationDesignPermission(project);",
          "1115:         List<LayoutEntity> needRetainAggLayout = getNeedRetainAggLayout(project, request, needDelete);",
          "1116:         deleteOrMarkTobeDelete(project, request.getModelId(), needDelete);",
          "1117:         removeFromBlackList(project, request, needDelete, needRetainAggLayout);",
          "",
          "[Removed Lines]",
          "1111:             boolean createIfNotExistTableLayout, boolean createIfNotExistAggLayout, boolean isAuo) {",
          "1114:         Set<Long> needDelete = checkNeedUpdateBaseIndex(project, request, isAuo);",
          "",
          "[Added Lines]",
          "1111:             boolean createIfNotExistTableLayout, boolean createIfNotExistAggLayout, boolean isAuto) {",
          "1114:         Set<Long> needDelete = checkNeedUpdateBaseIndex(project, request, isAuto);",
          "",
          "---------------"
        ],
        "src/query-service/src/main/java/org/apache/kylin/rest/service/DashboardService.java||src/query-service/src/main/java/org/apache/kylin/rest/service/DashboardService.java": [
          "File: src/query-service/src/main/java/org/apache/kylin/rest/service/DashboardService.java -> src/query-service/src/main/java/org/apache/kylin/rest/service/DashboardService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import lombok.extern.slf4j.Slf4j;",
          "22: import org.apache.kylin.common.response.MetricsResponse;",
          "24: import org.apache.kylin.metadata.project.ProjectInstance;",
          "25: import org.apache.kylin.query.exception.UnsupportedQueryException;",
          "26: import org.apache.kylin.rest.constant.Constant;",
          "",
          "[Removed Lines]",
          "23: import org.apache.kylin.metadata.cube.realization.HybridRealization;",
          "",
          "[Added Lines]",
          "23: import org.apache.kylin.metadata.realization.HybridRealization;",
          "",
          "---------------"
        ],
        "src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java||src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java": [
          "File: src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java -> src/query-service/src/main/java/org/apache/kylin/rest/service/QueryService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: import org.apache.kylin.rest.security.MutableAclRecord;",
          "154: import org.apache.kylin.rest.util.AclEvaluate;",
          "155: import org.apache.kylin.rest.util.AclPermissionUtil;",
          "157: import org.apache.kylin.rest.util.QueryCacheSignatureUtil;",
          "158: import org.apache.kylin.rest.util.QueryRequestLimits;",
          "159: import org.apache.kylin.rest.util.QueryUtils;",
          "",
          "[Removed Lines]",
          "156: import org.apache.kylin.rest.util.PrepareSQLUtils;",
          "",
          "[Added Lines]",
          "156: import org.apache.kylin.query.util.PrepareSQLUtils;",
          "",
          "---------------"
        ],
        "src/query-service/src/main/java/org/apache/kylin/rest/util/QueryUtils.java||src/query-service/src/main/java/org/apache/kylin/rest/util/QueryUtils.java": [
          "File: src/query-service/src/main/java/org/apache/kylin/rest/util/QueryUtils.java -> src/query-service/src/main/java/org/apache/kylin/rest/util/QueryUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.kylin.metadata.project.NProjectManager;",
          "26: import org.apache.kylin.query.engine.PrepareSqlStateParam;",
          "27: import org.apache.kylin.query.engine.QueryExec;",
          "28: import org.apache.kylin.query.util.QueryParams;",
          "29: import org.apache.kylin.query.util.QueryUtil;",
          "30: import org.apache.kylin.query.util.TempStatementUtil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.kylin.query.util.PrepareSQLUtils;",
          "",
          "---------------"
        ],
        "src/query-service/src/main/java/org/apache/kylin/rest/util/PrepareSQLUtils.java||src/query/src/main/java/org/apache/kylin/query/util/PrepareSQLUtils.java": [
          "File: src/query-service/src/main/java/org/apache/kylin/rest/util/PrepareSQLUtils.java -> src/query/src/main/java/org/apache/kylin/query/util/PrepareSQLUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.math.BigDecimal;",
          "22: import java.sql.Date;",
          "",
          "[Removed Lines]",
          "19: package org.apache.kylin.rest.util;",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.util;",
          "",
          "---------------"
        ],
        "src/query/src/test/java/org/apache/kylin/query/util/PrepareSQLUtilsTest.java||src/query/src/test/java/org/apache/kylin/query/util/PrepareSQLUtilsTest.java": [
          "File: src/query/src/test/java/org/apache/kylin/query/util/PrepareSQLUtilsTest.java -> src/query/src/test/java/org/apache/kylin/query/util/PrepareSQLUtilsTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.util;",
          "21: import org.apache.kylin.common.util.NLocalFileMetadataTestCase;",
          "22: import org.apache.kylin.query.engine.PrepareSqlStateParam;",
          "23: import org.junit.After;",
          "24: import org.junit.Assert;",
          "25: import org.junit.Before;",
          "26: import org.junit.Test;",
          "28: public class PrepareSQLUtilsTest extends NLocalFileMetadataTestCase {",
          "30:     @Before",
          "31:     public void setUp() throws Exception {",
          "32:         this.createTestMetadata();",
          "33:     }",
          "35:     @After",
          "36:     public void after() throws Exception {",
          "37:         this.cleanupTestMetadata();",
          "38:     }",
          "40:     @Test",
          "41:     public void testFillInParams() {",
          "42:         testCase(String.class, \"value1\", \"\\'value1\\'\");",
          "43:         testCase(Integer.class, \"1\", \"1\");",
          "44:         testCase(Short.class, \"1\", \"1\");",
          "45:         testCase(Long.class, \"1\", \"1\");",
          "46:         testCase(Double.class, \"1\", \"1.0\");",
          "47:         testCase(Float.class, \"1\", \"1.0\");",
          "48:         testCase(Boolean.class, \"true\", \"true\");",
          "49:         testCase(Byte.class, \"1\", \"1\");",
          "50:         testCase(java.util.Date.class, \"2023-04-19\", \"date\\'2023-04-19\\'\");",
          "51:         testCase(java.sql.Date.class, \"2023-04-19\", \"date\\'2023-04-19\\'\");",
          "52:         testCase(java.sql.Time.class, \"01:02:03\", \"01:02:03\"); // it's a bug, fix it later",
          "53:         testCase(java.sql.Timestamp.class, \"2023-04-19 01:02:03\", \"timestamp\\'2023-04-19 01:02:03.000\\'\");",
          "54:     }",
          "56:     @Test",
          "57:     public void testFillInEmptyParams() {",
          "58:         testCase(String.class, \"\", \"\\'\\'\");",
          "59:         testCase(Integer.class, \"\", \"0\");",
          "60:         testCase(Short.class, \"\", \"0\");",
          "61:         testCase(Long.class, \"\", \"0\");",
          "62:         testCase(Double.class, \"\", \"0.0\");",
          "63:         testCase(Float.class, \"\", \"0.0\");",
          "64:         testCase(Boolean.class, \"\", \"false\");",
          "65:         testCase(Byte.class, \"\", \"0\");",
          "66:         testCase(java.util.Date.class, \"\", \"NULL\");",
          "67:         testCase(java.sql.Date.class, \"\", \"NULL\");",
          "68:         testCase(java.sql.Time.class, \"\", \"NULL\");",
          "69:         testCase(java.sql.Timestamp.class, \"\", \"NULL\");",
          "70:     }",
          "72:     @Test",
          "73:     public void testFillInNullParams() {",
          "74:         testCase(String.class, null, \"NULL\");",
          "75:         testCase(Integer.class, null, \"0\");",
          "76:         testCase(Short.class, null, \"0\");",
          "77:         testCase(Long.class, null, \"0\");",
          "78:         testCase(Double.class, null, \"0.0\");",
          "79:         testCase(Float.class, null, \"0.0\");",
          "80:         testCase(Boolean.class, null, \"false\");",
          "81:         testCase(Byte.class, null, \"0\");",
          "82:         testCase(java.util.Date.class, null, \"NULL\");",
          "83:         testCase(java.sql.Date.class, null, \"NULL\");",
          "84:         testCase(java.sql.Time.class, null, \"NULL\");",
          "85:         testCase(java.sql.Timestamp.class, null, \"NULL\");",
          "86:     }",
          "88:     private static final String SQL_PATTERN = \"select * from mock_table where filter_value = \";",
          "89:     private static final String PLACE_HOLDER = \"?\";",
          "91:     private void testCase(Class typeClass, String value, String expected) {",
          "92:         String originalSql = SQL_PATTERN + PLACE_HOLDER;",
          "93:         String expectedSql = SQL_PATTERN + expected;",
          "94:         PrepareSqlStateParam param = new PrepareSqlStateParam(typeClass.getCanonicalName(), value);",
          "95:         String preparedSql = PrepareSQLUtils.fillInParams(originalSql, new PrepareSqlStateParam[] {param});",
          "96:         Assert.assertEquals(expectedSql, preparedSql);",
          "97:     }",
          "98: }",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java": [
          "File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java -> src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: import org.apache.kylin.engine.spark.job.ParamsConstants;",
          "69: import org.apache.kylin.engine.spark.job.ResourceDetect;",
          "70: import org.apache.kylin.engine.spark.job.RestfulJobProgressReport;",
          "71: import org.apache.kylin.engine.spark.job.SparkJobConstants;",
          "72: import org.apache.kylin.engine.spark.job.UdfManager;",
          "73: import org.apache.kylin.engine.spark.scheduler.ClusterMonitor;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: import org.apache.kylin.engine.spark.job.SegmentBuildJob;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: import org.slf4j.Logger;",
          "106: import org.slf4j.LoggerFactory;",
          "112: import lombok.val;",
          "113: import scala.runtime.AbstractFunction1;",
          "114: import scala.runtime.BoxedUnit;",
          "",
          "[Removed Lines]",
          "108: import org.apache.kylin.guava30.shaded.common.annotations.VisibleForTesting;",
          "109: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "111: import org.apache.kylin.engine.spark.job.SegmentBuildJob;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala||src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala": [
          "File: src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala -> src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate",
          "28: import org.apache.kylin.metadata.cube.gridtable.NLayoutToGridTableMapping",
          "29: import org.apache.kylin.metadata.cube.model.{LayoutEntity, NDataSegment, NDataflow}",
          "31: import org.apache.kylin.metadata.realization.{HybridRealization, IRealization}",
          "32: import org.apache.kylin.metadata.tuple.TupleInfo",
          "33: import org.apache.kylin.query.implicits.sessionToQueryContext",
          "34: import org.apache.kylin.query.relnode.{KapRel, OLAPContext}",
          "35: import org.apache.kylin.query.util.{RuntimeHelper, SparderDerivedUtil}",
          "37: import org.apache.spark.sql.execution.utils.SchemaProcessor",
          "38: import org.apache.spark.sql.functions.col",
          "39: import org.apache.spark.sql.manager.SparderLookupManager",
          "41: import org.apache.spark.sql.util.SparderTypeUtil",
          "43: import scala.collection.JavaConverters._",
          "",
          "[Removed Lines]",
          "30: import org.apache.kylin.metadata.model._",
          "36: import org.apache.spark.sql._",
          "40: import org.apache.spark.sql.types._",
          "",
          "[Added Lines]",
          "30: import org.apache.kylin.metadata.model.{DeriveInfo, FunctionDesc, NTableMetadataManager, ParameterDesc, TblColRef}",
          "36: import org.apache.spark.sql.{Column, DataFrame, Row, SparderEnv, SparkOperation, SparkSession}",
          "40: import org.apache.spark.sql.types.{ArrayType, DataTypes, DoubleType, StringType, StructField, StructType}",
          "",
          "---------------"
        ],
        "src/common-service/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java||src/tool/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java": [
          "File: src/common-service/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java -> src/tool/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.apache.hadoop.security.UserGroupInformation;",
          "35: import org.apache.hadoop.security.authentication.util.KerberosUtil;",
          "36: import org.apache.kylin.common.util.Unsafe;",
          "37: import org.apache.log4j.Logger;",
          "39: import sun.security.krb5.internal.ktab.KeyTab;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:     }",
          "204:     public static void setJaasConf(String loginContextName, String principal, String keytabFile) throws IOException {",
          "220:         File userKeytabFile = new File(keytabFile);",
          "221:         if (!userKeytabFile.exists()) {",
          "",
          "[Removed Lines]",
          "205:         if ((loginContextName == null) || (loginContextName.length() <= 0)) {",
          "206:             LOG.error(\"input loginContextName is invalid.\");",
          "207:             throw new IOException(\"input loginContextName is invalid.\");",
          "208:         }",
          "210:         if ((principal == null) || (principal.length() <= 0)) {",
          "211:             LOG.error(\"input principal is invalid.\");",
          "212:             throw new IOException(\"input principal is invalid.\");",
          "213:         }",
          "215:         if ((keytabFile == null) || (keytabFile.length() <= 0)) {",
          "216:             LOG.error(\"input keytabFile is invalid.\");",
          "217:             throw new IOException(\"input keytabFile is invalid.\");",
          "218:         }",
          "",
          "[Added Lines]",
          "206:         Preconditions.checkArgument((loginContextName == null) || (loginContextName.length() <= 0),",
          "207:                 \"input loginContextName is invalid.\");",
          "208:         Preconditions.checkArgument((principal == null) || (principal.length() <= 0),",
          "209:                 \"input principal is invalid.\");",
          "210:         Preconditions.checkArgument((keytabFile == null) || (keytabFile.length() <= 0),",
          "211:                 \"input keytabFile is invalid.\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "84a6afb3892ac98f6a5fdfc1f07d39f6d3af4760",
      "candidate_info": {
        "commit_hash": "84a6afb3892ac98f6a5fdfc1f07d39f6d3af4760",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/84a6afb3892ac98f6a5fdfc1f07d39f6d3af4760",
        "files": [
          "src/tool/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java",
          "src/tool/src/test/java/org/apache/kylin/tool/kerberos/KerberosLoginUtilTest.java"
        ],
        "message": "KYLIN-5639 fix FI start error",
        "before_after_code_files": [
          "src/tool/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java||src/tool/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java",
          "src/tool/src/test/java/org/apache/kylin/tool/kerberos/KerberosLoginUtilTest.java||src/tool/src/test/java/org/apache/kylin/tool/kerberos/KerberosLoginUtilTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/tool/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java||src/tool/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java": [
          "File: src/tool/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java -> src/tool/src/main/java/org/apache/kylin/tool/kerberos/KerberosLoginUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import javax.security.auth.login.AppConfigurationEntry;",
          "33: import org.apache.hadoop.conf.Configuration;",
          "34: import org.apache.hadoop.security.UserGroupInformation;",
          "35: import org.apache.hadoop.security.authentication.util.KerberosUtil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: import org.apache.commons.lang3.StringUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "203:     }",
          "205:     public static void setJaasConf(String loginContextName, String principal, String keytabFile) throws IOException {",
          "213:         File userKeytabFile = new File(keytabFile);",
          "214:         if (!userKeytabFile.exists()) {",
          "",
          "[Removed Lines]",
          "206:         Preconditions.checkArgument((loginContextName == null) || (loginContextName.length() <= 0),",
          "207:                 \"input loginContextName is invalid.\");",
          "208:         Preconditions.checkArgument((principal == null) || (principal.length() <= 0),",
          "209:                 \"input principal is invalid.\");",
          "210:         Preconditions.checkArgument((keytabFile == null) || (keytabFile.length() <= 0),",
          "211:                 \"input keytabFile is invalid.\");",
          "",
          "[Added Lines]",
          "207:         Preconditions.checkArgument(StringUtils.isNotEmpty(loginContextName), \"input loginContextName is invalid.\");",
          "208:         Preconditions.checkArgument(StringUtils.isNotEmpty(principal), \"input principal is invalid.\");",
          "209:         Preconditions.checkArgument(StringUtils.isNotEmpty(keytabFile), \"input keytabFile is invalid.\");",
          "",
          "---------------"
        ],
        "src/tool/src/test/java/org/apache/kylin/tool/kerberos/KerberosLoginUtilTest.java||src/tool/src/test/java/org/apache/kylin/tool/kerberos/KerberosLoginUtilTest.java": [
          "File: src/tool/src/test/java/org/apache/kylin/tool/kerberos/KerberosLoginUtilTest.java -> src/tool/src/test/java/org/apache/kylin/tool/kerberos/KerberosLoginUtilTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.kylin.tool.kerberos;",
          "20: import org.junit.Assert;",
          "21: import org.junit.Test;",
          "23: public class KerberosLoginUtilTest {",
          "27:     @Test",
          "28:     public void checkKeyTabIsValid() {",
          "",
          "[Removed Lines]",
          "24:     private String validKeyTab = \"src/test/resources/kerberos/valid.keytab\";",
          "25:     private String invalidKeyTab = \"src/test/resources/kerberos/invalid.keytab\";",
          "",
          "[Added Lines]",
          "20: import static org.junit.Assert.fail;",
          "26:     private static final String validKeyTab = \"src/test/resources/kerberos/valid.keytab\";",
          "27:     private static final String invalidKeyTab = \"src/test/resources/kerberos/invalid.keytab\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     @Test",
          "33:     public void checkKeyTabIsInvalid() {",
          "35:     }",
          "37:     @Test",
          "",
          "[Removed Lines]",
          "34:         Assert.assertTrue(!KerberosLoginUtil.checkKeyTabIsValid(invalidKeyTab));",
          "",
          "[Added Lines]",
          "36:         Assert.assertFalse(KerberosLoginUtil.checkKeyTabIsValid(invalidKeyTab));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:     @Test",
          "43:     public void checkKeyTabIsMissing() {",
          "45:     }",
          "46: }",
          "",
          "[Removed Lines]",
          "44:         Assert.assertTrue(!KerberosLoginUtil.checkKeyTabIsExist(invalidKeyTab + \"x\"));",
          "",
          "[Added Lines]",
          "46:         Assert.assertFalse(KerberosLoginUtil.checkKeyTabIsExist(invalidKeyTab + \"x\"));",
          "47:     }",
          "49:     @Test",
          "50:     public void testSetJaasConfCheck() {",
          "51:         testSetJaasConfCheck(null, null, null, \"input loginContextName is invalid.\");",
          "52:         testSetJaasConfCheck(\"\", null, null, \"input loginContextName is invalid.\");",
          "53:         testSetJaasConfCheck(\"Client\", null, null, \"input principal is invalid.\");",
          "54:         testSetJaasConfCheck(\"Client\", \"\", null, \"input principal is invalid.\");",
          "55:         testSetJaasConfCheck(\"Client\", \"test\", null, \"input keytabFile is invalid.\");",
          "56:         testSetJaasConfCheck(\"Client\", \"test\", \"\", \"input keytabFile is invalid.\");",
          "57:     }",
          "59:     void testSetJaasConfCheck(String loginContextName, String principal, String keytabFile, String message) {",
          "60:         try {",
          "61:             KerberosLoginUtil.setJaasConf(loginContextName, principal, keytabFile);",
          "62:             fail();",
          "63:         } catch (Exception e) {",
          "64:             Assert.assertTrue(e instanceof IllegalArgumentException);",
          "65:             Assert.assertEquals(String.valueOf(message), e.getMessage());",
          "66:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc9a26b4e1dee5bbcd280c86d91ff795b6eba005",
      "candidate_info": {
        "commit_hash": "cc9a26b4e1dee5bbcd280c86d91ff795b6eba005",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/cc9a26b4e1dee5bbcd280c86d91ff795b6eba005",
        "files": [
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/project/NProjectLoader.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealizationFilter.java",
          "src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/PartitionPruningRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/SegmentPruningRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveBlackoutRealizationsRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/util/ICutContextStrategy.java",
          "src/query/src/main/java/org/apache/kylin/query/util/ContextInitialCutStrategy.java",
          "src/query/src/main/java/org/apache/kylin/query/util/ContextReCutStrategy.java",
          "src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java",
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/SegmentBuildJob.java",
          "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala"
        ],
        "message": "KYLIN-5632 Rename, move package or drop some useless class",
        "before_after_code_files": [
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/project/NProjectLoader.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/project/NProjectLoader.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/realization/HybridRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealizationFilter.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealizationFilter.java",
          "src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java||src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/PartitionPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/PartitionPruningRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveUncapableRealizationsRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/SegmentPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/SegmentPruningRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveBlackoutRealizationsRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveBlackoutRealizationsRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/util/ICutContextStrategy.java||src/query-common/src/main/java/org/apache/kylin/query/util/ICutContextStrategy.java",
          "src/query/src/main/java/org/apache/kylin/query/util/FirstRoundContextCutStrategy.java||src/query/src/main/java/org/apache/kylin/query/util/ContextInitialCutStrategy.java",
          "src/query/src/main/java/org/apache/kylin/query/util/QueryReCutContextStrategy.java||src/query/src/main/java/org/apache/kylin/query/util/ContextReCutStrategy.java",
          "src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java||src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java",
          "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/SegmentBuildJob.java||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/SegmentBuildJob.java",
          "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala||src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:     }",
          "303:     @Override",
          "305:         return getStatus() == RealizationStatusEnum.ONLINE;",
          "306:     }",
          "",
          "[Removed Lines]",
          "304:     public boolean isReady() {",
          "",
          "[Added Lines]",
          "304:     public boolean isOnline() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "579:     }",
          "581:     public boolean hasReadySegments() {",
          "583:     }",
          "585:     public void initAllSegLayoutInfo() {",
          "",
          "[Removed Lines]",
          "582:         return isReady() && CollectionUtils.isNotEmpty(getQueryableSegments());",
          "",
          "[Added Lines]",
          "582:         return isOnline() && CollectionUtils.isNotEmpty(getQueryableSegments());",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/model/Segments.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.kylin.common.KylinConfig;",
          "33: import org.apache.kylin.common.util.ClassUtil;",
          "34: import org.apache.kylin.common.util.Pair;",
          "39: import org.apache.kylin.guava30.shaded.common.annotations.VisibleForTesting;",
          "40: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "41: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "43: import lombok.val;",
          "44: import lombok.var;",
          "",
          "[Removed Lines]",
          "35: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "36: import org.slf4j.Logger;",
          "37: import org.slf4j.LoggerFactory;",
          "",
          "[Added Lines]",
          "38: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "39: import org.slf4j.Logger;",
          "40: import org.slf4j.LoggerFactory;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:     public Segments<T> getBuildingSegments() {",
          "248:         Segments<T> buildingSegments = new Segments();",
          "254:             }",
          "255:         }",
          "256:         return buildingSegments;",
          "",
          "[Removed Lines]",
          "249:         if (null != this) {",
          "250:             for (T segment : this) {",
          "251:                 if (SegmentStatusEnum.NEW == segment.getStatus()) {",
          "252:                     buildingSegments.add(segment);",
          "253:                 }",
          "",
          "[Added Lines]",
          "248:         for (T segment : this) {",
          "249:             if (SegmentStatusEnum.NEW == segment.getStatus()) {",
          "250:                 buildingSegments.add(segment);",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/project/NProjectLoader.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/project/NProjectLoader.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/project/NProjectLoader.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/project/NProjectLoader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.commons.lang3.StringUtils;",
          "31: import org.apache.kylin.common.KylinConfig;",
          "32: import org.apache.kylin.metadata.model.ColumnDesc;",
          "33: import org.apache.kylin.metadata.model.FunctionDesc;",
          "34: import org.apache.kylin.metadata.model.MeasureDesc;",
          "35: import org.apache.kylin.metadata.model.TableDesc;",
          "36: import org.apache.kylin.metadata.model.TableRef;",
          "37: import org.apache.kylin.metadata.model.TblColRef;",
          "38: import org.apache.kylin.metadata.realization.IRealization;",
          "39: import org.apache.kylin.metadata.realization.NRealizationRegistry;",
          "54: import lombok.val;",
          "55: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "40: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "41: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "42: import org.apache.kylin.metadata.cube.realization.HybridRealization;",
          "43: import org.apache.kylin.metadata.model.FusionModel;",
          "44: import org.apache.kylin.metadata.model.FusionModelManager;",
          "45: import org.apache.kylin.metadata.model.NDataModel;",
          "46: import org.apache.kylin.metadata.model.NDataModelManager;",
          "47: import org.apache.kylin.metadata.model.NTableMetadataManager;",
          "48: import org.slf4j.Logger;",
          "49: import org.slf4j.LoggerFactory;",
          "51: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "52: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "[Added Lines]",
          "32: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "33: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "34: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "35: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "38: import org.apache.kylin.metadata.model.FusionModel;",
          "39: import org.apache.kylin.metadata.model.FusionModelManager;",
          "41: import org.apache.kylin.metadata.model.NDataModel;",
          "42: import org.apache.kylin.metadata.model.NDataModelManager;",
          "43: import org.apache.kylin.metadata.model.NTableMetadataManager;",
          "47: import org.apache.kylin.metadata.realization.HybridRealization;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:         List<IRealization> existingRealizations = realizations.stream().filter(r -> modelIds.contains(r.getUuid()))",
          "107:                 .collect(Collectors.toList());",
          "108:         for (IRealization r : existingRealizations) {",
          "110:                 continue;",
          "111:             NDataModel model = r.getModel();",
          "112:             for (MeasureDesc m : r.getMeasures()) {",
          "",
          "[Removed Lines]",
          "109:             if (!r.isReady())",
          "",
          "[Added Lines]",
          "106:             if (!r.isOnline())",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Collection;",
          "22: import java.util.List;",
          "24: import org.apache.kylin.metadata.model.FunctionDesc;",
          "25: import org.apache.kylin.metadata.model.MeasureDesc;",
          "26: import org.apache.kylin.metadata.model.TblColRef;",
          "30: import lombok.Getter;",
          "31: import lombok.Setter;",
          "",
          "[Removed Lines]",
          "28: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "[Added Lines]",
          "24: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "38:     public boolean capable = false;",
          "",
          "[Added Lines]",
          "37:     @Getter",
          "38:     @Setter",
          "39:     private boolean capable = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:     public List<CapabilityInfluence> influences = Lists.newArrayListWithCapacity(1);",
          "",
          "[Removed Lines]",
          "71:     public static interface CapabilityInfluence {",
          "",
          "[Added Lines]",
          "72:     public interface CapabilityInfluence {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "100:         }",
          "101:     }",
          "105:     }",
          "107:     public static class IncapableCause {",
          "108:         private IncapableType incapableType;",
          "109:         private Collection<TblColRef> unmatchedDimensions;",
          "110:         private Collection<FunctionDesc> unmatchedAggregations;",
          "",
          "[Removed Lines]",
          "103:     public static enum IncapableType {",
          "104:         UNMATCHED_DIMENSION, UNMATCHED_AGGREGATION, UNSUPPORT_MASSIN, UNSUPPORT_RAWQUERY, LIMIT_PRECEDE_AGGR, II_UNMATCHED_FACT_TABLE, TABLE_INDEX_MISSING_COLS, NOT_EXIST_SNAPSHOT",
          "",
          "[Added Lines]",
          "104:     public enum IncapableType {",
          "105:         UNMATCHED_DIMENSION,",
          "107:         LIMIT_PRECEDE_AGGR,",
          "109:         TABLE_INDEX_MISSING_COLS,",
          "111:         NOT_EXIST_SNAPSHOT",
          "114:     @Getter",
          "115:     @Setter",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "116:             return incapableCause;",
          "117:         }",
          "126:         public static IncapableCause create(IncapableType incapableType) {",
          "127:             IncapableCause incapableCause = new IncapableCause();",
          "128:             incapableCause.setIncapableType(incapableType);",
          "129:             return incapableCause;",
          "130:         }",
          "155:     }",
          "156: }",
          "",
          "[Removed Lines]",
          "119:         public static IncapableCause unmatchedAggregations(Collection<FunctionDesc> unmatchedAggregations) {",
          "120:             IncapableCause incapableCause = new IncapableCause();",
          "121:             incapableCause.setIncapableType(IncapableType.UNMATCHED_AGGREGATION);",
          "122:             incapableCause.setUnmatchedAggregations(unmatchedAggregations);",
          "123:             return incapableCause;",
          "124:         }",
          "132:         public IncapableType getIncapableType() {",
          "133:             return incapableType;",
          "134:         }",
          "136:         public void setIncapableType(IncapableType incapableType) {",
          "137:             this.incapableType = incapableType;",
          "138:         }",
          "140:         public Collection<TblColRef> getUnmatchedDimensions() {",
          "141:             return unmatchedDimensions;",
          "142:         }",
          "144:         public void setUnmatchedDimensions(Collection<TblColRef> unmatchedDimensions) {",
          "145:             this.unmatchedDimensions = unmatchedDimensions;",
          "146:         }",
          "148:         public Collection<FunctionDesc> getUnmatchedAggregations() {",
          "149:             return unmatchedAggregations;",
          "150:         }",
          "152:         public void setUnmatchedAggregations(Collection<FunctionDesc> unmatchedAggregations) {",
          "153:             this.unmatchedAggregations = unmatchedAggregations;",
          "154:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/realization/HybridRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/realization/HybridRealization.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.ArrayList;",
          "22: import java.util.LinkedHashSet;",
          "",
          "[Removed Lines]",
          "19: package org.apache.kylin.metadata.cube.realization;",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.metadata.realization;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: import org.apache.kylin.metadata.model.NDataModelManager;",
          "38: import org.apache.kylin.metadata.model.SegmentRange;",
          "39: import org.apache.kylin.metadata.model.TblColRef;",
          "45: import lombok.Getter;",
          "46: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "40: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "41: import org.apache.kylin.metadata.realization.IRealization;",
          "42: import org.apache.kylin.metadata.realization.QueryableSeg;",
          "43: import org.apache.kylin.metadata.realization.SQLDigest;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:             columns.addAll(realization.getAllColumns());",
          "87:             dimensions.addAll(realization.getAllDimensions());",
          "88:             allMeasures.addAll(realization.getMeasures());",
          "90:                 isReady = true;",
          "92:             if (dateRangeStart == 0 || realization.getDateRangeStart() < dateRangeStart)",
          "",
          "[Removed Lines]",
          "89:             if (realization.isReady())",
          "",
          "[Added Lines]",
          "85:             if (realization.isOnline())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:     }",
          "255:     @Override",
          "257:         return isReady;",
          "258:     }",
          "",
          "[Removed Lines]",
          "256:     public boolean isReady() {",
          "",
          "[Added Lines]",
          "252:     public boolean isOnline() {",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     String getProject();",
          "66:     String getUuid();",
          "",
          "[Removed Lines]",
          "64:     boolean isReady();",
          "",
          "[Added Lines]",
          "64:     boolean isOnline();",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealizationFilter.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealizationFilter.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealizationFilter.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealizationFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java||src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java -> src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: import org.apache.kylin.metadata.cube.model.DimensionRangeInfo;",
          "48: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "49: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "51: import org.apache.kylin.metadata.model.FunctionDesc;",
          "52: import org.apache.kylin.metadata.model.JoinDesc;",
          "53: import org.apache.kylin.metadata.model.MeasureDesc;",
          "",
          "[Removed Lines]",
          "50: import org.apache.kylin.metadata.cube.realization.HybridRealization;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: import org.apache.kylin.metadata.model.graph.JoinsGraph;",
          "59: import org.apache.kylin.metadata.query.NativeQueryRealization;",
          "60: import org.apache.kylin.metadata.query.QueryMetrics;",
          "61: import org.apache.kylin.metadata.realization.IRealization;",
          "62: import org.apache.kylin.metadata.realization.SQLDigest;",
          "63: import org.apache.kylin.metadata.tuple.Tuple;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: import org.apache.kylin.metadata.realization.HybridRealization;",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/PartitionPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/PartitionPruningRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/rules/PartitionPruningRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/PartitionPruningRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Collection;",
          "22: import java.util.Collections;",
          "",
          "[Removed Lines]",
          "19: package org.apache.kylin.query.routing.rules;",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "50: import org.apache.kylin.query.relnode.OLAPContext;",
          "51: import org.apache.kylin.query.relnode.OLAPTableScan;",
          "54: import org.apache.kylin.query.util.RexUtils;",
          "56: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "52: import org.apache.kylin.query.routing.Candidate;",
          "53: import org.apache.kylin.query.routing.RoutingRule;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.List;",
          "23: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "[Removed Lines]",
          "24: import org.apache.kylin.query.routing.rules.PartitionPruningRule;",
          "25: import org.apache.kylin.query.routing.rules.RemoveUncapableRealizationsRule;",
          "26: import org.apache.kylin.query.routing.rules.SegmentPruningRule;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     static {",
          "39:         LAYOUT_CHOOSING_RULES.add(new SegmentPruningRule());",
          "40:         LAYOUT_CHOOSING_RULES.add(new PartitionPruningRule());",
          "42:     }",
          "44:     public static void applyRules(Candidate candidate) {",
          "",
          "[Removed Lines]",
          "41:         LAYOUT_CHOOSING_RULES.add(new RemoveUncapableRealizationsRule());",
          "",
          "[Added Lines]",
          "38:         LAYOUT_CHOOSING_RULES.add(new RemoveIncapableRealizationsRule());",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "79: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "80: import org.apache.kylin.metadata.cube.model.NIndexPlanManager;",
          "82: import org.apache.kylin.metadata.model.FunctionDesc;",
          "83: import org.apache.kylin.metadata.model.FusionModelManager;",
          "84: import org.apache.kylin.metadata.model.ISourceAware;",
          "",
          "[Removed Lines]",
          "81: import org.apache.kylin.metadata.cube.realization.HybridRealization;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: import org.apache.kylin.metadata.project.NProjectLoader;",
          "97: import org.apache.kylin.metadata.project.NProjectManager;",
          "98: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "99: import org.apache.kylin.metadata.realization.IRealization;",
          "100: import org.apache.kylin.metadata.realization.NoRealizationFoundException;",
          "101: import org.apache.kylin.metadata.realization.NoStreamingRealizationFoundException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: import org.apache.kylin.metadata.realization.HybridRealization;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "336:     public static Candidate selectRealization(OLAPContext olapContext, IRealization realization,",
          "337:             Map<String, String> matchedJoinGraphAliasMap) {",
          "339:             logger.warn(\"Realization {} is not ready\", realization);",
          "340:             return null;",
          "341:         }",
          "",
          "[Removed Lines]",
          "338:         if (!realization.isReady()) {",
          "",
          "[Added Lines]",
          "338:         if (!realization.isOnline()) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "732:         boolean streamingEnabled = kylinConfig.streamingEnabled();",
          "733:         for (IRealization real : realizations) {",
          "734:             boolean skip = false;",
          "736:                 skip = true;",
          "737:                 logger.warn(\"Offline model({}/{}) with fact table {} cannot be queried.\", project, real, factTable);",
          "738:             } else if (isModelViewBounded(context, real)) {",
          "",
          "[Removed Lines]",
          "735:             if (!real.isReady()) {",
          "",
          "[Added Lines]",
          "735:             if (!real.isOnline()) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "765:     private static boolean omitFusionModel(boolean turnOnStreaming, IRealization real) {",
          "766:         return !turnOnStreaming && real.getModel().isFusionModel();",
          "767:     }",
          "775: }",
          "",
          "[Removed Lines]",
          "769:     public static Map<String, String> matchJoins(NDataModel model, OLAPContext ctx) {",
          "770:         KylinConfig projectConfig = NProjectManager.getProjectConfig(ctx.olapSchema.getProjectName());",
          "771:         boolean isPartialInnerJoin = projectConfig.isQueryMatchPartialInnerJoinModel();",
          "772:         boolean isPartialNonEquiJoin = projectConfig.partialMatchNonEquiJoins();",
          "773:         return matchJoins(model, ctx, isPartialInnerJoin, isPartialNonEquiJoin);",
          "774:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveUncapableRealizationsRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveUncapableRealizationsRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.kylin.guava30.shaded.common.collect.BiMap;",
          "22: import org.apache.kylin.guava30.shaded.common.collect.HashBiMap;",
          "23: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "26: import org.apache.kylin.query.util.ComputedColumnRewriter;",
          "27: import org.apache.kylin.query.util.QueryAliasMatchInfo;",
          "",
          "[Removed Lines]",
          "19: package org.apache.kylin.query.routing.rules;",
          "24: import org.apache.kylin.query.routing.Candidate;",
          "25: import org.apache.kylin.query.routing.RoutingRule;",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: @Slf4j",
          "35:     @Override",
          "36:     public void apply(Candidate candidate) {",
          "37:         if (candidate.getCapability() != null) {",
          "",
          "[Removed Lines]",
          "34: public class RemoveUncapableRealizationsRule extends RoutingRule {",
          "",
          "[Added Lines]",
          "32: public class RemoveIncapableRealizationsRule extends RoutingRule {",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/SegmentPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/SegmentPruningRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/rules/SegmentPruningRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/SegmentPruningRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.ArrayList;",
          "22: import java.util.Calendar;",
          "",
          "[Removed Lines]",
          "19: package org.apache.kylin.query.routing.rules;",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "68: import org.apache.kylin.metadata.realization.IRealization;",
          "69: import org.apache.kylin.query.relnode.OLAPContext;",
          "72: import org.apache.kylin.query.util.RexUtils;",
          "74: import lombok.val;",
          "",
          "[Removed Lines]",
          "70: import org.apache.kylin.query.routing.Candidate;",
          "71: import org.apache.kylin.query.routing.RoutingRule;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RealizationSortRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveBlackoutRealizationsRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveBlackoutRealizationsRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveBlackoutRealizationsRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveBlackoutRealizationsRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/util/ICutContextStrategy.java||src/query-common/src/main/java/org/apache/kylin/query/util/ICutContextStrategy.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/util/ICutContextStrategy.java -> src/query-common/src/main/java/org/apache/kylin/query/util/ICutContextStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.List;",
          "23: import org.apache.calcite.rel.RelNode;",
          "24: import org.apache.kylin.query.relnode.OLAPContext;",
          "25: import org.apache.kylin.query.relnode.OLAPRel;",
          "28: public interface ICutContextStrategy {",
          "",
          "[Removed Lines]",
          "26: import org.apache.kylin.query.relnode.KapRel;",
          "",
          "[Added Lines]",
          "24: import org.apache.kylin.query.relnode.KapRel;",
          "",
          "---------------"
        ],
        "src/query/src/main/java/org/apache/kylin/query/util/FirstRoundContextCutStrategy.java||src/query/src/main/java/org/apache/kylin/query/util/ContextInitialCutStrategy.java": [
          "File: src/query/src/main/java/org/apache/kylin/query/util/FirstRoundContextCutStrategy.java -> src/query/src/main/java/org/apache/kylin/query/util/ContextInitialCutStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import lombok.extern.slf4j.Slf4j;",
          "32: @Slf4j",
          "35:     @Override",
          "36:     public List<OLAPRel> cutOffContext(OLAPRel rootRel, RelNode parentOfRoot) {",
          "",
          "[Removed Lines]",
          "33: public class FirstRoundContextCutStrategy implements ICutContextStrategy {",
          "",
          "[Added Lines]",
          "33: public class ContextInitialCutStrategy implements ICutContextStrategy {",
          "",
          "---------------"
        ],
        "src/query/src/main/java/org/apache/kylin/query/util/QueryReCutContextStrategy.java||src/query/src/main/java/org/apache/kylin/query/util/ContextReCutStrategy.java": [
          "File: src/query/src/main/java/org/apache/kylin/query/util/QueryReCutContextStrategy.java -> src/query/src/main/java/org/apache/kylin/query/util/ContextReCutStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: @Getter",
          "35: @Setter",
          "38:     private CutContextImplementor reCutter;",
          "",
          "[Removed Lines]",
          "36: public class QueryReCutContextStrategy implements ICutContextStrategy {",
          "",
          "[Added Lines]",
          "36: public class ContextReCutStrategy implements ICutContextStrategy {",
          "",
          "---------------"
        ],
        "src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java||src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java": [
          "File: src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java -> src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     public static List<OLAPContext> selectRealization(RelNode root, boolean isReCutBanned) {",
          "61:         QueryContextCutter.cutContext(firstRoundStrategy, (KapRel) root.getInput(0), root);",
          "62:         int retryCutTimes = 0;",
          "",
          "[Removed Lines]",
          "58:         FirstRoundContextCutStrategy firstRoundStrategy = new FirstRoundContextCutStrategy();",
          "59:         QueryReCutContextStrategy reCutStrategy = new QueryReCutContextStrategy();",
          "",
          "[Added Lines]",
          "58:         ContextInitialCutStrategy firstRoundStrategy = new ContextInitialCutStrategy();",
          "59:         ContextReCutStrategy reCutStrategy = new ContextReCutStrategy();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:         if (strategy.needCutOff(rootOfSubCtxTree)) {",
          "121:             strategy.cutOffContext(rootOfSubCtxTree, queryRoot);",
          "122:         }",
          "124:             ContextUtil.dumpCalcitePlan(\"EXECUTION PLAN AFTER OLAPCONTEXT IS SET IN FIRST ROUND\", queryRoot, log);",
          "125:         } else {",
          "126:             ContextUtil.dumpCalcitePlan(\"EXECUTION PLAN AFTER OLAPCONTEXT IS RE-CUT OFF \", queryRoot, log);",
          "",
          "[Removed Lines]",
          "123:         if (strategy instanceof FirstRoundContextCutStrategy) {",
          "",
          "[Added Lines]",
          "123:         if (strategy instanceof ContextInitialCutStrategy) {",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/SegmentBuildJob.java||src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/SegmentBuildJob.java": [
          "File: src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/SegmentBuildJob.java -> src/spark-project/engine-spark/src/main/scala/org/apache/kylin/engine/spark/job/SegmentBuildJob.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.engine.spark.job;",
          "23: import lombok.extern.slf4j.Slf4j;",
          "24: import lombok.val;",
          "25: import org.apache.commons.lang3.StringUtils;",
          "",
          "[Removed Lines]",
          "21: import org.apache.kylin.guava30.shaded.common.base.Throwables;",
          "22: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.apache.kylin.common.persistence.transaction.UnitOfWork;",
          "30: import org.apache.kylin.common.util.HadoopUtil;",
          "31: import org.apache.kylin.engine.spark.builder.SnapshotBuilder;",
          "35: import org.apache.kylin.engine.spark.job.exec.BuildExec;",
          "36: import org.apache.kylin.engine.spark.job.stage.BuildParam;",
          "37: import org.apache.kylin.engine.spark.job.stage.StageExec;",
          "39: import org.apache.kylin.job.execution.ExecutableState;",
          "40: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "41: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "42: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "",
          "[Removed Lines]",
          "32: import org.apache.kylin.engine.spark.job.LogJobInfoUtils;",
          "33: import org.apache.kylin.engine.spark.job.SegmentJob;",
          "34: import org.apache.kylin.engine.spark.job.SparkJobConstants;",
          "38: import org.apache.kylin.metadata.cube.model.NBatchConstants;",
          "",
          "[Added Lines]",
          "33: import org.apache.kylin.guava30.shaded.common.base.Throwables;",
          "34: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "36: import org.apache.kylin.metadata.cube.model.NBatchConstants;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49: import java.util.List;",
          "50: import java.util.Map;",
          "51: import java.util.Objects;",
          "53: import java.util.stream.Stream;",
          "55: import static org.apache.kylin.engine.spark.job.StageType.BUILD_DICT;",
          "",
          "[Removed Lines]",
          "52: import java.util.concurrent.atomic.AtomicLong;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala||src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala": [
          "File: src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala -> src/spark-project/sparder/src/main/scala/org/apache/kylin/query/runtime/plan/TableScanPlan.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.kylin.query.runtime.plan",
          "20: import org.apache.kylin.common.{KapConfig, KylinConfig, QueryContext}",
          "21: import org.apache.kylin.engine.spark.utils.{LogEx, LogUtils}",
          "22: import org.apache.kylin.guava30.shaded.common.base.Joiner",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import java.util.concurrent.ConcurrentHashMap",
          "21: import java.{lang, util}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate",
          "25: import org.apache.kylin.metadata.cube.gridtable.NLayoutToGridTableMapping",
          "26: import org.apache.kylin.metadata.cube.model.{LayoutEntity, NDataSegment, NDataflow}",
          "28: import org.apache.kylin.metadata.model._",
          "30: import org.apache.kylin.metadata.tuple.TupleInfo",
          "31: import org.apache.kylin.query.implicits.sessionToQueryContext",
          "32: import org.apache.kylin.query.relnode.{KapRel, OLAPContext}",
          "33: import org.apache.kylin.query.util.{RuntimeHelper, SparderDerivedUtil}",
          "35: import org.apache.spark.sql.execution.utils.SchemaProcessor",
          "36: import org.apache.spark.sql.functions.col",
          "37: import org.apache.spark.sql.manager.SparderLookupManager",
          "39: import org.apache.spark.sql.util.SparderTypeUtil",
          "43: import scala.collection.JavaConverters._",
          "",
          "[Removed Lines]",
          "27: import org.apache.kylin.metadata.cube.realization.HybridRealization",
          "29: import org.apache.kylin.metadata.realization.IRealization",
          "34: import org.apache.spark.sql.{Column, DataFrame, Row, SparderEnv, SparkOperation, SparkSession}",
          "38: import org.apache.spark.sql.types.{ArrayType, DataTypes, DoubleType, StringType, StructField, StructType}",
          "41: import java.util.concurrent.ConcurrentHashMap",
          "42: import java.{lang, util}",
          "",
          "[Added Lines]",
          "31: import org.apache.kylin.metadata.realization.{HybridRealization, IRealization}",
          "36: import org.apache.spark.sql._",
          "40: import org.apache.spark.sql.types._",
          "",
          "---------------"
        ]
      }
    }
  ]
}