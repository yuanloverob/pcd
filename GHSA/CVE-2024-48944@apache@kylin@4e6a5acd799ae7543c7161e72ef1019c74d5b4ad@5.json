{
  "cve_id": "CVE-2024-48944",
  "cve_desc": "Server-Side Request Forgery (SSRF) vulnerability in Apache Kylin. Through a kylin server, an attacker may forge a request to invoke \"/kylin/api/xxx/diag\" api on another internal host and possibly get leaked information. There are two preconditions: 1) The attacker has got admin access to a kylin server; 2) Another internal host has the \"/kylin/api/xxx/diag\" api\n\nendpoint open for service.\n\n\nThis issue affects Apache Kylin: from 5.0.0 \nthrough \n\n5.0.1.\n\nUsers are recommended to upgrade to version 5.0.2, which fixes the issue.",
  "repo": "apache/kylin",
  "patch_hash": "4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
  "patch_info": {
    "commit_hash": "4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
    "files": [
      "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java"
    ],
    "message": "KYLIN-5644 fix diag api security, encryption changed from base64 to AES\n\nCo-authored-by: liang.hua <liang.hua@kyligence.io>",
    "before_after_code_files": [
      "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java||src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java||src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java"
    ]
  },
  "patch_diff": {
    "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java||src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java": [
      "File: src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java -> src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "81: import org.apache.kylin.common.msg.Message;",
      "82: import org.apache.kylin.common.msg.MsgPicker;",
      "83: import org.apache.kylin.common.persistence.transaction.TransactionException;",
      "84: import org.apache.kylin.common.util.JsonUtil;",
      "85: import org.apache.kylin.common.util.Pair;",
      "86: import org.apache.kylin.job.constant.JobStatusEnum;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84: import org.apache.kylin.common.util.EncryptUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "643:             if (StringUtils.isBlank(host) || host.startsWith(\"http://\")) {",
      "644:                 return host;",
      "645:             }",
      "647:         } catch (Exception e) {",
      "648:             logger.error(\"Failed to decode host, will use the original host name\");",
      "649:         }",
      "",
      "[Removed Lines]",
      "646:             return new String(Base64.decodeBase64(host), Charset.defaultCharset());",
      "",
      "[Added Lines]",
      "647:             String decryptValue = EncryptUtil.decrypt(new String(Base64.decodeBase64(host), Charset.defaultCharset()));",
      "648:             return StringUtils.isBlank(decryptValue) ? host : decryptValue;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "659:             if (!host.toLowerCase().startsWith(\"http\")) {",
      "660:                 host = \"http://\" + host;",
      "661:             }",
      "663:         } catch (Exception e) {",
      "664:             logger.error(\"Failed to encode host, will use the original host name\");",
      "665:         }",
      "",
      "[Removed Lines]",
      "662:             return Base64.encodeBase64String(host.getBytes(Charset.defaultCharset()));",
      "",
      "[Added Lines]",
      "664:             return Base64.encodeBase64String(EncryptUtil.encrypt(host).getBytes(Charset.defaultCharset()));",
      "",
      "---------------"
    ],
    "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java||src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java": [
      "File: src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java -> src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "311:         }",
      "312:         Assert.assertEquals(3, mockDataResponse.get(\"size\"));",
      "313:     }",
      "315: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "315:     @Test",
      "316:     public void testEncodeAndDecodeHost() {",
      "317:         Assert.assertTrue(nBasicController.encodeHost(\"\").isEmpty());",
      "318:         String host = \"localhost:7070\";",
      "319:         String encodeHost = nBasicController.encodeHost(host);",
      "320:         Assert.assertNotNull(encodeHost);",
      "321:         Assert.assertNotEquals(host, encodeHost);",
      "322:         String decodeHost = nBasicController.decodeHost(encodeHost);",
      "323:         Assert.assertEquals(\"http://\" + host, decodeHost);",
      "324:         Assert.assertEquals(\"ip\", nBasicController.decodeHost(\"ip\"));",
      "325:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fea906f2327141492bc96f16251c13813975a521",
      "candidate_info": {
        "commit_hash": "fea906f2327141492bc96f16251c13813975a521",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/fea906f2327141492bc96f16251c13813975a521",
        "files": [
          "src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala"
        ],
        "message": "KYLIN-5648 add log for sparder init user (#30347)\n\nCo-authored-by: liang.hua <liang.hua@kyligence.io>",
        "before_after_code_files": [
          "src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala||src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala||src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala": [
          "File: src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala -> src/spark-project/sparder/src/main/scala/org/apache/spark/sql/SparderEnv.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:       SparkSession.clearActiveSession",
          "219:       val hostInfoFetcher = new DefaultHostInfoFetcher",
          "220:       val appName = \"sparder-\" + UserGroupInformation.getCurrentUser.getShortUserName + \"-\" + hostInfoFetcher.getHostname",
          "222:       val isLocalMode = KylinConfig.getInstanceFromEnv.isJobNodeOnly ||",
          "223:         \"true\".equals(System.getenv(\"SPARK_LOCAL\")) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:       logInfo(s\"sparder init user:${UserGroupInformation.getCurrentUser.getUserName}\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee8ac2cb017a97c898829d2b3d64d6246447a00f",
      "candidate_info": {
        "commit_hash": "ee8ac2cb017a97c898829d2b3d64d6246447a00f",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/ee8ac2cb017a97c898829d2b3d64d6246447a00f",
        "files": [
          "src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java",
          "src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java"
        ],
        "message": "KYLIN-5643 add public api for batch delete index, fix response message\n\nCo-authored-by: liang.hua <liang.hua@kyligence.io>",
        "before_after_code_files": [
          "src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java||src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java",
          "src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java||src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java||src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java": [
          "File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java -> src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.rest.controller.open;",
          "21: import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON;",
          "23: import static org.apache.kylin.common.exception.code.ErrorCodeServer.MODEL_NOT_EXIST;",
          "25: import java.util.Set;",
          "28: import org.apache.kylin.common.KylinConfig;",
          "29: import org.apache.kylin.common.exception.KylinException;",
          "30: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "",
          "[Removed Lines]",
          "22: import static org.apache.kylin.common.exception.code.ErrorCodeServer.LAYOUT_LIST_EMPTY;",
          "27: import org.apache.commons.collections.CollectionUtils;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92:             @RequestParam(value = \"index_range\", required = false) IndexEntity.Range indexRange) {",
          "93:         checkProjectName(project);",
          "94:         checkRequiredArg(MODEL_NAME, modelName);",
          "95:         if (null == indexRange) {",
          "96:             indexRange = IndexEntity.Range.BATCH;",
          "97:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:         checkCollectionRequiredArg(\"index_ids\", layoutIds);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:         if (null == dataModel) {",
          "101:             throw new KylinException(MODEL_NOT_EXIST);",
          "102:         }",
          "106:         fusionIndexService.batchRemoveIndex(project, dataModel.getUuid(), layoutIds, indexRange);",
          "107:         return new EnvelopeResponse<>(KylinException.CODE_SUCCESS, \"\", \"\");",
          "108:     }",
          "",
          "[Removed Lines]",
          "103:         if (CollectionUtils.isEmpty(layoutIds)) {",
          "104:             throw new KylinException(LAYOUT_LIST_EMPTY);",
          "105:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java||src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java": [
          "File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java -> src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:                         .param(\"project\", project).param(\"model_name\", modelName).param(\"index_ids\", \"\")",
          "183:                         .accept(MediaType.parseMediaType(HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON)))",
          "184:                 .andExpect(MockMvcResultMatchers.status().is5xxServerError()).andReturn();",
          "186:     }",
          "187: }",
          "",
          "[Removed Lines]",
          "185:         Assert.assertTrue(mvcResult.getResponse().getContentAsString().contains(\"KE-010043212\"));",
          "",
          "[Added Lines]",
          "185:         Assert.assertTrue(mvcResult.getResponse().getContentAsString().contains(\"KE-010043201\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2859b0f6deab08fd6304387a9a864f82a8a75f0",
      "candidate_info": {
        "commit_hash": "b2859b0f6deab08fd6304387a9a864f82a8a75f0",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/b2859b0f6deab08fd6304387a9a864f82a8a75f0",
        "files": [
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/AggIndexMatcher.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/PartitionPruningRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/PruningRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/SegmentPruningRule.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java"
        ],
        "message": "KYLIN-5632 Move candidate sorting method to the QueryRouter",
        "before_after_code_files": [
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/AggIndexMatcher.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/AggIndexMatcher.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java||src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/PartitionPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/PartitionPruningRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RoutingRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/PruningRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/SegmentPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/SegmentPruningRule.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java||src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/AggIndexMatcher.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/AggIndexMatcher.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/AggIndexMatcher.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/AggIndexMatcher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.commons.collections.CollectionUtils;",
          "31: import org.apache.commons.lang3.StringUtils;",
          "32: import org.apache.kylin.measure.MeasureType;",
          "33: import org.apache.kylin.measure.basic.BasicMeasureType;",
          "34: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "33: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "34: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "46: import org.apache.kylin.metadata.realization.SQLDigest;",
          "52: import lombok.extern.slf4j.Slf4j;",
          "54: @Slf4j",
          "",
          "[Removed Lines]",
          "48: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "49: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "50: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:     }",
          "87:     @Override",
          "89:         if (canSkipIndexMatch(layout.getIndex()) || !isValid()) {",
          "90:             return new MatchResult();",
          "91:         }",
          "",
          "[Removed Lines]",
          "88:     MatchResult match(LayoutEntity layout) {",
          "",
          "[Added Lines]",
          "87:     public MatchResult match(LayoutEntity layout) {",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java||src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: @Getter",
          "45: public class Candidate {",
          "52:     IRealization realization;",
          "",
          "[Removed Lines]",
          "47:     public static final CandidateComparator COMPARATOR = new CandidateComparator();",
          "48:     public static final CandidateTableIndexComparator COMPARATOR_TABLE_INDEX = new CandidateTableIndexComparator();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:         return realization.toString();",
          "103:     }",
          "111:     }",
          "121:             }",
          "132:             Map<String, Integer> priorities = new HashMap<>();",
          "133:             for (int i = 0; i < QueryContext.current().getModelPriorities().length; i++) {",
          "134:                 priorities.put(QueryContext.current().getModelPriorities()[i], i);",
          "135:             }",
          "155:     }",
          "156: }",
          "",
          "[Removed Lines]",
          "105:     public static class CandidateComparator implements Comparator<Candidate> {",
          "107:         @Override",
          "108:         public int compare(Candidate c1, Candidate c2) {",
          "109:             return compareCandidate(c1, c2);",
          "110:         }",
          "113:     public static class CandidateTableIndexComparator implements Comparator<Candidate> {",
          "115:         @Override",
          "116:         public int compare(Candidate c1, Candidate c2) {",
          "117:             CapabilityResult capabilityResult1 = c1.getCapability();",
          "118:             CapabilityResult capabilityResult2 = c2.getCapability();",
          "119:             if (capabilityResult1.getLayoutUnmatchedColsSize() != capabilityResult2.getLayoutUnmatchedColsSize()) {",
          "120:                 return capabilityResult1.getLayoutUnmatchedColsSize() - capabilityResult2.getLayoutUnmatchedColsSize();",
          "122:             return compareCandidate(c1, c2);",
          "123:         }",
          "124:     }",
          "126:     private static int compareCandidate(Candidate c1, Candidate c2) {",
          "127:         IRealization real1 = c1.getRealization();",
          "128:         IRealization real2 = c2.getRealization();",
          "130:         if (QueryContext.current().getModelPriorities().length > 0) {",
          "137:             int comp = priorities.getOrDefault(StringUtils.upperCase(real1.getModel().getAlias()), Integer.MAX_VALUE)",
          "138:                     - priorities.getOrDefault(StringUtils.upperCase(real2.getModel().getAlias()), Integer.MAX_VALUE);",
          "139:             if (comp != 0) {",
          "140:                 return comp;",
          "141:             }",
          "142:         }",
          "144:         int comp = real1.getCost() - real2.getCost();",
          "145:         if (comp != 0) {",
          "146:             return comp;",
          "147:         }",
          "149:         comp = Double.compare(c1.capability.cost, c2.capability.cost);",
          "150:         if (comp != 0) {",
          "151:             return comp;",
          "152:         }",
          "154:         return real1.getModel().getId().compareTo(real2.getModel().getId());",
          "",
          "[Added Lines]",
          "102:     public static Comparator<Candidate> tableIndexUnmatchedColSizeSorter() {",
          "103:         return Comparator.comparingInt(c -> c.getCapability().getLayoutUnmatchedColsSize());",
          "106:     public static Comparator<Candidate> modelPrioritySorter() {",
          "107:         return (c1, c2) -> {",
          "108:             if (QueryContext.current().getModelPriorities().length == 0) {",
          "109:                 return 0;",
          "116:             String modelAlias1 = StringUtils.upperCase(c1.getRealization().getModel().getAlias());",
          "117:             String modelAlias2 = StringUtils.upperCase(c2.getRealization().getModel().getAlias());",
          "118:             return priorities.getOrDefault(modelAlias1, Integer.MAX_VALUE)",
          "119:                     - priorities.getOrDefault(modelAlias2, Integer.MAX_VALUE);",
          "120:         };",
          "121:     }",
          "123:     public static Comparator<Candidate> realizationCostSorter() {",
          "124:         return Comparator.comparingInt(c -> c.getRealization().getCost());",
          "125:     }",
          "127:     public static Comparator<Candidate> realizationCapabilityCostSorter() {",
          "128:         return Comparator.comparingDouble(c -> c.getCapability().cost);",
          "129:     }",
          "131:     public static Comparator<Candidate> modelUuidSorter() {",
          "132:         return Comparator.comparing(c -> c.getRealization().getModel().getId());",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/PartitionPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/PartitionPruningRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/PartitionPruningRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/PartitionPruningRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: import lombok.extern.slf4j.Slf4j;",
          "56: @Slf4j",
          "59:     private static final String NEED_PUSH_DOWN = \"NULL\";",
          "",
          "[Removed Lines]",
          "57: public class PartitionPruningRule extends RoutingRule {",
          "",
          "[Added Lines]",
          "57: public class PartitionPruningRule extends PruningRule {",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/RoutingRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/PruningRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/RoutingRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/PruningRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing;",
          "25:     @Override",
          "26:     public String toString() {",
          "28:     }",
          "30:     public abstract void apply(Candidate candidate);",
          "",
          "[Removed Lines]",
          "23: public abstract class RoutingRule {",
          "27:         return this.getClass().toString();",
          "",
          "[Added Lines]",
          "26: public abstract class PruningRule {",
          "30:         return this.getClass().getName();",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.List;",
          "23: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "28: public class QueryRouter {",
          "30:     private QueryRouter() {",
          "31:     }",
          "39:     }",
          "45:     }",
          "47: }",
          "",
          "[Removed Lines]",
          "33:     private static final List<RoutingRule> LAYOUT_CHOOSING_RULES = Lists.newLinkedList();",
          "35:     static {",
          "36:         LAYOUT_CHOOSING_RULES.add(new SegmentPruningRule());",
          "37:         LAYOUT_CHOOSING_RULES.add(new PartitionPruningRule());",
          "38:         LAYOUT_CHOOSING_RULES.add(new RemoveIncapableRealizationsRule());",
          "41:     public static void applyRules(Candidate candidate) {",
          "42:         for (RoutingRule rule : LAYOUT_CHOOSING_RULES) {",
          "43:             rule.apply(candidate);",
          "44:         }",
          "",
          "[Added Lines]",
          "21: import java.util.Comparator;",
          "24: import org.apache.kylin.common.KylinConfig;",
          "26: import org.apache.kylin.guava30.shaded.common.collect.Ordering;",
          "27: import org.apache.kylin.metadata.project.NProjectManager;",
          "28: import org.apache.kylin.query.relnode.OLAPContext;",
          "30: import lombok.Getter;",
          "37:     public static void applyRules(Candidate candidate) {",
          "38:         Strategy pruningStrategy = getStrategy(candidate.getCtx());",
          "39:         for (PruningRule r : pruningStrategy.getRules()) {",
          "40:             r.apply(candidate);",
          "41:         }",
          "42:     }",
          "44:     public static void sortCandidates(OLAPContext context, List<Candidate> candidates) {",
          "45:         Strategy strategy = getStrategy(context);",
          "46:         candidates.sort(strategy.getSorter());",
          "49:     private static Strategy getStrategy(OLAPContext context) {",
          "50:         String project = context.olapSchema.getProjectName();",
          "51:         KylinConfig projectConfig = NProjectManager.getProjectConfig(project);",
          "52:         return new Strategy(projectConfig);",
          "55:     public static class Strategy {",
          "56:         private static final PruningRule SEGMENT_PRUNING = new SegmentPruningRule();",
          "57:         private static final PruningRule PARTITION_PRUNING = new PartitionPruningRule();",
          "58:         private static final PruningRule REMOVE_INCAPABLE_REALIZATIONS = new RemoveIncapableRealizationsRule();",
          "60:         @Getter",
          "61:         List<PruningRule> rules = Lists.newArrayList();",
          "63:         private final List<Comparator<Candidate>> sorters = Lists.newArrayList();",
          "65:         public Comparator<Candidate> getSorter() {",
          "66:             return Ordering.compound(sorters);",
          "67:         }",
          "69:         public Strategy(KylinConfig config) {",
          "72:             rules.add(SEGMENT_PRUNING);",
          "73:             rules.add(PARTITION_PRUNING);",
          "74:             rules.add(REMOVE_INCAPABLE_REALIZATIONS);",
          "77:             if (config.useTableIndexAnswerSelectStarEnabled()) {",
          "78:                 sorters.add(Candidate.tableIndexUnmatchedColSizeSorter());",
          "79:             }",
          "80:             sorters.add(Candidate.modelPrioritySorter());",
          "81:             sorters.add(Candidate.realizationCostSorter());",
          "82:             sorters.add(Candidate.realizationCapabilityCostSorter());",
          "83:             sorters.add(Candidate.modelUuidSorter());",
          "84:         }",
          "85:     }",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:         }",
          "231:         logger.trace(\"Cost Sorted Realizations {}\", candidates);",
          "232:         Candidate candidate = candidates.get(0);",
          "233:         restoreOLAPContextProps(context, candidate.getRewrittenCtx());",
          "",
          "[Removed Lines]",
          "230:         sortCandidate(context, candidates);",
          "",
          "[Added Lines]",
          "230:         QueryRouter.sortCandidates(context, candidates);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "286:         return candidates;",
          "287:     }",
          "298:     private static void checkNoRealizationWithStreaming(OLAPContext context) {",
          "299:         String projectName = context.olapSchema.getProjectName();",
          "300:         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();",
          "",
          "[Removed Lines]",
          "289:     private static void sortCandidate(OLAPContext context, List<Candidate> candidates) {",
          "290:         KylinConfig projectConfig = NProjectManager.getProjectConfig(context.olapSchema.getProjectName());",
          "291:         if (projectConfig.useTableIndexAnswerSelectStarEnabled() && context.getSQLDigest().isRawQuery) {",
          "292:             candidates.sort(Candidate.COMPARATOR_TABLE_INDEX);",
          "293:         } else {",
          "294:             candidates.sort(Candidate.COMPARATOR);",
          "295:         }",
          "296:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: @Slf4j",
          "33:     @Override",
          "34:     public void apply(Candidate candidate) {",
          "35:         if (candidate.getCapability() != null) {",
          "",
          "[Removed Lines]",
          "32: public class RemoveIncapableRealizationsRule extends RoutingRule {",
          "",
          "[Added Lines]",
          "32: public class RemoveIncapableRealizationsRule extends PruningRule {",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/SegmentPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/SegmentPruningRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/SegmentPruningRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/SegmentPruningRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "74: import lombok.extern.slf4j.Slf4j;",
          "76: @Slf4j",
          "79:     private static final TimeZone UTC_ZONE = TimeZone.getTimeZone(\"UTC\");",
          "",
          "[Removed Lines]",
          "77: public class SegmentPruningRule extends RoutingRule {",
          "",
          "[Added Lines]",
          "77: public class SegmentPruningRule extends PruningRule {",
          "",
          "---------------"
        ],
        "src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java||src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java": [
          "File: src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java -> src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.Arrays;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "24: import java.util.Set;",
          "26: import org.apache.kylin.common.KylinConfig;",
          "27: import org.apache.kylin.common.QueryContext;",
          "28: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "29: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "30: import org.apache.kylin.metadata.model.FunctionDesc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.Comparator;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "30: import org.apache.kylin.guava30.shaded.common.collect.Ordering;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:     }",
          "137:     private SortedCandidate sort(Candidate... candidates) {",
          "138:         return candidate -> {",
          "140:             Assert.assertEquals(candidate.getRealization().getModel().getAlias(),",
          "141:                     candidates[0].getRealization().getModel().getAlias());",
          "142:         };",
          "",
          "[Removed Lines]",
          "139:             Arrays.sort(candidates, Candidate.COMPARATOR);",
          "",
          "[Added Lines]",
          "141:         List<Comparator<Candidate>> sorters = Lists.newArrayList();",
          "142:         sorters.add(Candidate.modelPrioritySorter());",
          "143:         sorters.add(Candidate.realizationCostSorter());",
          "144:         sorters.add(Candidate.realizationCapabilityCostSorter());",
          "145:         sorters.add(Candidate.modelUuidSorter());",
          "148:             Arrays.sort(candidates, Ordering.compound(sorters));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "00a739080f7b85f9d5b0950fee7a91d415c96293",
      "candidate_info": {
        "commit_hash": "00a739080f7b85f9d5b0950fee7a91d415c96293",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/00a739080f7b85f9d5b0950fee7a91d415c96293",
        "files": [
          "src/spark-project/spark-it/src/test/scala/org/apache/kylin/it/TestTPCHQuery.scala"
        ],
        "message": "KYLIN-5649 rm unused import",
        "before_after_code_files": [
          "src/spark-project/spark-it/src/test/scala/org/apache/kylin/it/TestTPCHQuery.scala||src/spark-project/spark-it/src/test/scala/org/apache/kylin/it/TestTPCHQuery.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/spark-project/spark-it/src/test/scala/org/apache/kylin/it/TestTPCHQuery.scala||src/spark-project/spark-it/src/test/scala/org/apache/kylin/it/TestTPCHQuery.scala": [
          "File: src/spark-project/spark-it/src/test/scala/org/apache/kylin/it/TestTPCHQuery.scala -> src/spark-project/spark-it/src/test/scala/org/apache/kylin/it/TestTPCHQuery.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import scala.collection.JavaConverters._",
          "33: class TestTPCHQuery",
          "34:   extends SparderBaseFunSuite",
          "35:     with LocalMetadata",
          "",
          "[Removed Lines]",
          "30: import io.kyligence.kap.common.{JobSupport, QuerySupport}",
          "31: import io.kyligence.kap.query.{QueryConstants, QueryFetcher}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd87fe92fe48d09b5b362b7566dd0686d3777605",
      "candidate_info": {
        "commit_hash": "fd87fe92fe48d09b5b362b7566dd0686d3777605",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/fd87fe92fe48d09b5b362b7566dd0686d3777605",
        "files": [
          "src/common-service/src/main/java/org/apache/kylin/rest/response/PreReloadTableResponse.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/schema/ReloadTableContext.java",
          "src/datasource-service/src/main/java/org/apache/kylin/rest/service/TableService.java",
          "src/modeling-service/src/test/java/org/apache/kylin/rest/service/TableReloadServiceTest.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMeta.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaBuilder.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java",
          "src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorerTest.scala"
        ],
        "message": "KYLIN-5651 supports obtaining table comment from Hive",
        "before_after_code_files": [
          "src/common-service/src/main/java/org/apache/kylin/rest/response/PreReloadTableResponse.java||src/common-service/src/main/java/org/apache/kylin/rest/response/PreReloadTableResponse.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/schema/ReloadTableContext.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/model/schema/ReloadTableContext.java",
          "src/datasource-service/src/main/java/org/apache/kylin/rest/service/TableService.java||src/datasource-service/src/main/java/org/apache/kylin/rest/service/TableService.java",
          "src/modeling-service/src/test/java/org/apache/kylin/rest/service/TableReloadServiceTest.java||src/modeling-service/src/test/java/org/apache/kylin/rest/service/TableReloadServiceTest.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMeta.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMeta.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaBuilder.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaBuilder.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java",
          "src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorerTest.scala||src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorerTest.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/common-service/src/main/java/org/apache/kylin/rest/response/PreReloadTableResponse.java||src/common-service/src/main/java/org/apache/kylin/rest/response/PreReloadTableResponse.java": [
          "File: src/common-service/src/main/java/org/apache/kylin/rest/response/PreReloadTableResponse.java -> src/common-service/src/main/java/org/apache/kylin/rest/response/PreReloadTableResponse.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:     @JsonProperty(\"snapshot_deleted\")",
          "62:     private boolean snapshotDeleted = false;",
          "64:     @JsonProperty(\"update_base_index_count\")",
          "65:     private int updateBaseIndexCount;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     @JsonProperty(\"table_comment_changed\")",
          "65:     private boolean tableCommentChanged = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         this.addLayoutsCount = otherResponse.addLayoutsCount;",
          "82:         this.refreshLayoutsCount = otherResponse.refreshLayoutsCount;",
          "83:         this.snapshotDeleted = otherResponse.snapshotDeleted;",
          "84:         this.details = otherResponse.details;",
          "85:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:         this.tableCommentChanged = otherResponse.tableCommentChanged;",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:     @JsonProperty(\"partition_desc\")",
          "200:     private PartitionDesc partitionDesc;",
          "202:     public TableDesc() {",
          "203:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "202:     @Getter",
          "203:     @Setter",
          "204:     @JsonProperty(\"table_comment\")",
          "205:     private String tableComment;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:         this.isTransactional = other.isTransactional;",
          "235:         this.isRangePartition = other.isRangePartition;",
          "236:         this.partitionDesc = other.partitionDesc;",
          "237:         setMvcc(other.getMvcc());",
          "238:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:         this.tableComment = other.tableComment;",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/schema/ReloadTableContext.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/model/schema/ReloadTableContext.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/schema/ReloadTableContext.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/model/schema/ReloadTableContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     private Set<String> effectedJobs = Sets.newHashSet();",
          "57:     private TableDesc tableDesc;",
          "59:     private TableExtDesc tableExtDesc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57:     private boolean isTableCommentChanged = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "101:     public boolean isNeedProcess() {",
          "102:         return CollectionUtils.isNotEmpty(addColumns) || CollectionUtils.isNotEmpty(removeColumns)",
          "104:     }",
          "105: }",
          "",
          "[Removed Lines]",
          "103:                 || CollectionUtils.isNotEmpty(changeTypeColumns);",
          "",
          "[Added Lines]",
          "105:                 || CollectionUtils.isNotEmpty(changeTypeColumns) || isTableCommentChanged;",
          "",
          "---------------"
        ],
        "src/datasource-service/src/main/java/org/apache/kylin/rest/service/TableService.java||src/datasource-service/src/main/java/org/apache/kylin/rest/service/TableService.java": [
          "File: src/datasource-service/src/main/java/org/apache/kylin/rest/service/TableService.java -> src/datasource-service/src/main/java/org/apache/kylin/rest/service/TableService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:                 nTableDesc.setUuid(origTable.getUuid());",
          "307:                 nTableDesc.setLastModified(origTable.getLastModified());",
          "308:                 nTableDesc.setIncrementLoading(origTable.isIncrementLoading());",
          "309:             }",
          "311:             tableMetaMgr.saveSourceTable(nTableDesc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309:                 nTableDesc.setTableComment(tableDesc.getTableComment());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1125:         result.setRemoveDimCount(context.getRemoveAffectedModels().values().stream()",
          "1126:                 .map(AffectedModelContext::getDimensions).mapToLong(Set::size).sum());",
          "1127:         result.setDataTypeChangeColumnCount(context.getChangeTypeColumns().size());",
          "1129:         val schemaChanged = result.getAddColumnCount() > 0 || result.getRemoveColumnCount() > 0",
          "1130:                 || result.getDataTypeChangeColumnCount() > 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1129:         result.setTableCommentChanged(context.isTableCommentChanged());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1605:         context.setAddColumns(diff.entriesOnlyOnLeft().keySet());",
          "1606:         context.setRemoveColumns(diff.entriesOnlyOnRight().keySet());",
          "1607:         context.setChangeTypeColumns(diff.entriesDiffering().keySet());",
          "1608:         if (!context.isNeedProcess()) {",
          "1609:             return context;",
          "1610:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1610:         context.setTableCommentChanged(!Objects.equals(originTableDesc.getTableComment(), newTableDesc.getTableComment()));",
          "",
          "---------------"
        ],
        "src/modeling-service/src/test/java/org/apache/kylin/rest/service/TableReloadServiceTest.java||src/modeling-service/src/test/java/org/apache/kylin/rest/service/TableReloadServiceTest.java": [
          "File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/TableReloadServiceTest.java -> src/modeling-service/src/test/java/org/apache/kylin/rest/service/TableReloadServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1206:                 () -> tableService.preProcessBeforeReloadWithFailFast(PROJECT, tableIdentity));",
          "1207:     }",
          "1209:     @Test",
          "1210:     public void testReloadChangeColumn() throws Exception {",
          "1211:         removeColumn(\"EDW.TEST_CAL_DT\", \"CAL_DT_UPD_USER\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1209:     @Test",
          "1210:     public void testReloadAddTableComment() throws Exception {",
          "1211:         val tableManager = NTableMetadataManager.getInstance(getTestConfig(), PROJECT);",
          "1212:         val tableDesc = tableManager.getTableDesc(\"EDW.TEST_CAL_DT\");",
          "1213:         Assert.assertNull(tableDesc.getTableComment());",
          "1215:         String resPath = KylinConfig.getInstanceFromEnv().getMetadataUrl().getIdentifier();",
          "1216:         String tablePath = resPath + \"/../data/tableDesc/\" + \"EDW.TEST_CAL_DT\" + \".json\";",
          "1217:         val tableMeta = JsonUtil.readValue(new File(tablePath), TableDesc.class);",
          "1218:         tableMeta.setTableComment(\"Table Comment\");",
          "1219:         JsonUtil.writeValueIndent(new FileOutputStream(tablePath), tableMeta);",
          "1221:         tableService.innerReloadTable(PROJECT, \"EDW.TEST_CAL_DT\", true, null);",
          "1222:         val newTableDesc = tableManager.getTableDesc(\"EDW.TEST_CAL_DT\");",
          "1223:         Assert.assertEquals(\"Table Comment\", newTableDesc.getTableComment());",
          "1224:     }",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java": [
          "File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java -> src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:         tableDesc.setSourceType(ISourceAware.ID_SPARK);",
          "252:         tableDesc.setTransactional(tableMeta.isTransactional);",
          "253:         tableDesc.setRangePartition(tableMeta.isRangePartition);",
          "255:         Set<String> partColumnSet = Optional.ofNullable(tableMeta.partitionColumns) //",
          "256:                 .orElseGet(Collections::emptyList).stream().map(field -> field.name) //",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:         tableDesc.setTableComment(tableMeta.tableComment);",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMeta.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMeta.java": [
          "File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMeta.java -> src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMeta.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     boolean isRangePartition;",
          "69:     String s3Role;",
          "70:     String s3Endpoint;",
          "72:     public List<SparkTableColumnMeta> getAllColumns() {",
          "73:         return allColumns;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     String tableComment;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:             String owner, String provider, String tableType, String createTime, String lastAccessTime, long fileSize,",
          "78:             long fileNum, boolean isNative, List<SparkTableColumnMeta> allColumns,",
          "79:             List<SparkTableColumnMeta> partitionColumns, boolean isTransactional, boolean isRangePartition,",
          "81:         this.tableName = tableName;",
          "82:         this.sdLocation = sdLocation;",
          "83:         this.sdInputFormat = sdInputFormat;",
          "",
          "[Removed Lines]",
          "80:             String s3Role, String s3Endpoint) {",
          "",
          "[Added Lines]",
          "81:             String s3Role, String s3Endpoint, String tableComment) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:         this.isRangePartition = isRangePartition;",
          "97:         this.s3Role = s3Role;",
          "98:         this.s3Endpoint = s3Endpoint;",
          "99:     }",
          "101:     @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100:         this.tableComment = tableComment;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:                 + \", createTime='\" + createTime + '\\'' + \", lastAccessTime=\" + lastAccessTime + \", fileSize=\" + fileSize",
          "107:                 + \", fileNum=\" + fileNum + \", isNative=\" + isNative + \", allColumns=\" + allColumns",
          "108:                 + \", partitionColumns=\" + partitionColumns + \", isTransactional=\" + isTransactional",
          "110:     }",
          "111: }",
          "",
          "[Removed Lines]",
          "109:                 + \", isRangePartition=\" + isRangePartition + \", s3Role=\" + s3Role + \", s3Endpoint=\" + s3Endpoint + '}';",
          "",
          "[Added Lines]",
          "111:                 + \", isRangePartition=\" + isRangePartition + \", s3Role=\" + s3Role + \", s3Endpoint=\" + s3Endpoint + \", tableComment=\" + tableComment + '}';",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaBuilder.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaBuilder.java": [
          "File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaBuilder.java -> src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaBuilder.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     private boolean isRangePartition = false;",
          "42:     private String s3Role;",
          "43:     private String s3Endpoint;",
          "45:     public NSparkTableMetaBuilder setTableName(String tableName) {",
          "46:         this.tableName = tableName;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44:     private String tableComment;",
          "46:     public NSparkTableMetaBuilder setTableComment(String tableComment) {",
          "47:         this.tableComment = tableComment;",
          "48:         return this;",
          "49:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:     public NSparkTableMeta createSparkTableMeta() {",
          "136:         return new NSparkTableMeta(tableName, sdLocation, sdInputFormat, sdOutputFormat, owner, provider, tableType,",
          "137:                 createTime, lastAccessTime, fileSize, fileNum, isNative, allColumns, partitionColumns, isTransactional,",
          "139:     }",
          "",
          "[Removed Lines]",
          "138:                 isRangePartition, s3Role, s3Endpoint);",
          "140: }",
          "",
          "[Added Lines]",
          "144:                 isRangePartition, s3Role, s3Endpoint, tableComment);",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java": [
          "File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java -> src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:         builder.setTableType(tableMetadata.tableType().name());",
          "123:         builder.setPartitionColumns(getColumns(tableMetadata, tableMetadata.partitionSchema()));",
          "124:         builder.setIsRangePartition(isRangePartition(tableMetadata));",
          "125:         if (tableMetadata.storage().inputFormat().isDefined()) {",
          "126:             builder.setSdInputFormat(tableMetadata.storage().inputFormat().get());",
          "127:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:         if (tableMetadata.comment().isDefined()) {",
          "127:             builder.setTableComment(tableMetadata.comment().get());",
          "128:         }",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorerTest.scala||src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorerTest.scala": [
          "File: src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorerTest.scala -> src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorerTest.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:     importUnsupportedCol(BinaryType)",
          "161:   }",
          "163:   def createTmpCatalog(st: StructType): CatalogTable = {",
          "164:     CatalogTable(",
          "165:       identifier = TableIdentifier(\"hive_table_types\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:   test(\"Test load hive table and get table comment\") {",
          "165:     SparderEnv.setSparkSession(spark)",
          "167:     val view = CatalogTable(",
          "168:       identifier = TableIdentifier(\"hive_table_comment\"),",
          "169:       comment = Option(\"Table Comment\"),",
          "170:       tableType = CatalogTableType.MANAGED,",
          "171:       storage = CatalogStorageFormat.empty,",
          "172:       schema = new StructType()",
          "173:         .add(\"a\", \"string\", nullable = true, new MetadataBuilder().putString(\"__CHAR_VARCHAR_TYPE_STRING\", \"char(10)\").build())",
          "174:         .add(\"b\", \"string\", nullable = true, new MetadataBuilder().putString(\"__CHAR_VARCHAR_TYPE_STRING\", \"varchar(33)\").build())",
          "175:         .add(\"c\", \"int\"),",
          "176:       properties = Map()",
          "177:     )",
          "178:     spark.sessionState.catalog.createTable(view, ignoreIfExists = false, false)",
          "180:     withTable(\"hive_table_comment\") {",
          "181:       val meta = new NSparkTableMetaExplorer().getSparkTableMeta(\"\", \"hive_table_comment\")",
          "182:       assert(meta.tableComment.equals(\"Table Comment\"))",
          "183:     }",
          "185:     val view2 = CatalogTable(",
          "186:       identifier = TableIdentifier(\"hive_no_table_comment\"),",
          "187:       tableType = CatalogTableType.MANAGED,",
          "188:       storage = CatalogStorageFormat.empty,",
          "189:       schema = new StructType()",
          "190:         .add(\"a\", \"string\", nullable = true, new MetadataBuilder().putString(\"__CHAR_VARCHAR_TYPE_STRING\", \"char(10)\").build())",
          "191:         .add(\"b\", \"string\", nullable = true, new MetadataBuilder().putString(\"__CHAR_VARCHAR_TYPE_STRING\", \"varchar(33)\").build())",
          "192:         .add(\"c\", \"int\"),",
          "193:       properties = Map()",
          "194:     )",
          "195:     spark.sessionState.catalog.createTable(view2, ignoreIfExists = false, false)",
          "197:     withTable(\"hive_no_table_comment\") {",
          "198:       val meta = new NSparkTableMetaExplorer().getSparkTableMeta(\"\", \"hive_no_table_comment\")",
          "199:       assert(meta.tableComment == null)",
          "200:     }",
          "201:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}