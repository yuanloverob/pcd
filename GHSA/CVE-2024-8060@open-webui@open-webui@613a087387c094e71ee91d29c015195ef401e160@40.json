{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "78853a67e4ccdf18124dd63a74b0db083a2228d2",
      "candidate_info": {
        "commit_hash": "78853a67e4ccdf18124dd63a74b0db083a2228d2",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/78853a67e4ccdf18124dd63a74b0db083a2228d2",
        "files": [
          "backend/open_webui/utils/middleware.py",
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "src/routes/+layout.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "src/routes/+layout.svelte||src/routes/+layout.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1104:                     elif block[\"type\"] == \"code_interpreter\":",
          "1105:                         attributes = block.get(\"attributes\", {})",
          "1106:                         lang = attributes.get(\"lang\", \"\")",
          "1110:                     else:",
          "1111:                         block_content = str(block[\"content\"]).strip()",
          "1112:                         content = f\"{content}{block['type']}: {block_content}\\n\"",
          "",
          "[Removed Lines]",
          "1107:                         attribute_type = attributes.get(\"type\", \"\")",
          "1109:                         content = f\"{content}```{lang if lang else attribute_type}\\n{block['content']}\\n```\\n\"",
          "",
          "[Added Lines]",
          "1106:                         output = block.get(\"output\", {})",
          "1110:                         if output:",
          "1111:                             content = f'{content}<details type=\"code_interpreter\" done=\"true\">\\n<summary>Analyzed</summary>\\n```{lang}\\n{block[\"content\"]}\\n```\\n```output\\n{output}\\n```\\n</details>\\n'",
          "1112:                         else:",
          "1113:                             content = f'{content}<details type=\"code_interpreter\" done=\"false\">\\n<summary>Analyzing...</summary>\\n```{lang}\\n{block[\"content\"]}\\n```\\n</details>\\n'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1205:             DETECT_CODE_INTERPRETER = True",
          "1207:             reasoning_tags = [\"think\", \"reason\", \"reasoning\", \"thought\", \"Thought\"]",
          "1210:             try:",
          "1211:                 for event in events:",
          "",
          "[Removed Lines]",
          "1208:             code_interpreter_tags = [\"oi::code_interpreter\"]",
          "",
          "[Added Lines]",
          "1213:             code_interpreter_tags = [\"code_interpreter\"]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1339:                     and retries < MAX_RETRIES",
          "1340:                 ):",
          "1341:                     retries += 1",
          "1343:                     try:",
          "1344:                         if content_blocks[-1][\"attributes\"].get(\"type\") == \"code\":",
          "1345:                             output = await event_caller(",
          "1346:                                 {",
          "1348:                                     \"data\": {",
          "1349:                                         \"id\": str(uuid4()),",
          "1350:                                         \"code\": content_blocks[-1][\"content\"],",
          "",
          "[Removed Lines]",
          "1347:                                     \"type\": \"execute:pyodide\",",
          "",
          "[Added Lines]",
          "1347:                     log.debug(f\"Retrying code interpreter block: {retries}\")",
          "1353:                                     \"type\": \"execute:python\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1354:                     except Exception as e:",
          "1355:                         output = str(e)",
          "1357:                     content_blocks.append(",
          "1358:                         {",
          "1364:                         }",
          "1365:                     )",
          "1367:                         {",
          "1370:                         }",
          "1371:                     )",
          "",
          "[Removed Lines]",
          "1359:                             \"type\": \"code_interpreter\",",
          "1360:                             \"attributes\": {",
          "1361:                                 \"type\": \"output\",",
          "1362:                             },",
          "1363:                             \"content\": output,",
          "1366:                     content_blocks.append(",
          "1368:                             \"type\": \"text\",",
          "1369:                             \"content\": \"\",",
          "",
          "[Added Lines]",
          "1363:                     content_blocks[-1][\"output\"] = output",
          "1366:                             \"type\": \"text\",",
          "1367:                             \"content\": \"\",",
          "1371:                     await event_emitter(",
          "1373:                             \"type\": \"chat:completion\",",
          "1374:                             \"data\": {",
          "1375:                                 \"content\": serialize_content_blocks(content_blocks),",
          "1376:                             },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1397:                         log.debug(e)",
          "1398:                         break",
          "1409:                 title = Chats.get_chat_title_by_id(metadata[\"chat_id\"])",
          "1410:                 data = {",
          "1411:                     \"done\": True,",
          "",
          "[Removed Lines]",
          "1400:                     await event_emitter(",
          "1401:                         {",
          "1402:                             \"type\": \"chat:completion\",",
          "1403:                             \"data\": {",
          "1404:                                 \"content\": serialize_content_blocks(content_blocks),",
          "1405:                             },",
          "1406:                         }",
          "1407:                     )",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte": [
          "File: src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte -> src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:    </ul>",
          "196:   {/if}",
          "197:  {:else if token.type === 'details'}",
          "199:    <div class=\" mb-1.5\" slot=\"content\">",
          "200:     <svelte:self id={`${id}-${tokenIdx}-d`} tokens={marked.lexer(token.text)} />",
          "201:    </div>",
          "",
          "[Removed Lines]",
          "198:   <Collapsible title={token.summary} attributes={token?.attributes} className=\"w-fit space-y-1\">",
          "",
          "[Added Lines]",
          "198:   <Collapsible title={token.summary} attributes={token?.attributes} className=\"w-full space-y-1\">",
          "",
          "---------------"
        ],
        "src/routes/+layout.svelte||src/routes/+layout.svelte": [
          "File: src/routes/+layout.svelte -> src/routes/+layout.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:     tags.set(await getAllTags(localStorage.token));",
          "249:    }",
          "250:   } else {",
          "253:     executePythonAsWorker(data.id, data.code, cb);",
          "254:    }",
          "255:   }",
          "",
          "[Removed Lines]",
          "251:    if (type === 'execute:pyodide') {",
          "252:     console.log('execute:pyodide', data);",
          "",
          "[Added Lines]",
          "251:    if (type === 'execute:python') {",
          "252:     console.log('execute:python', data);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e5bb0f014acf570d032e42a9c2d9d8eecc629887",
      "candidate_info": {
        "commit_hash": "e5bb0f014acf570d032e42a9c2d9d8eecc629887",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/e5bb0f014acf570d032e42a9c2d9d8eecc629887",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1388:                     retries += 1",
          "1389:                     log.debug(f\"Attempt count: {retries}\")",
          "1391:                     try:",
          "1392:                         if content_blocks[-1][\"attributes\"].get(\"type\") == \"code\":",
          "1393:                             output = await event_caller(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1391:                     output = \"\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d542881ee4083d61262cac3d8211ad9fb04135e0",
      "candidate_info": {
        "commit_hash": "d542881ee4083d61262cac3d8211ad9fb04135e0",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/d542881ee4083d61262cac3d8211ad9fb04135e0",
        "files": [
          "backend/open_webui/routers/retrieval.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py": [
          "File: backend/open_webui/routers/retrieval.py -> backend/open_webui/routers/retrieval.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:     RAG_RERANKING_MODEL_TRUST_REMOTE_CODE,",
          "83:     UPLOAD_DIR,",
          "84:     DEFAULT_LOCALE,",
          "87: )",
          "88: from open_webui.env import (",
          "89:     SRC_LOG_LEVELS,",
          "",
          "[Removed Lines]",
          "85:     RAG_EMBEDDING_PASSAGE_PREFIX,",
          "86:     RAG_EMBEDDING_QUERY_PREFIX",
          "",
          "[Added Lines]",
          "85:     RAG_EMBEDDING_CONTENT_PREFIX,",
          "86:     RAG_EMBEDDING_QUERY_PREFIX,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "892:         )",
          "894:         embeddings = embedding_function(",
          "896:         )",
          "898:         items = [",
          "",
          "[Removed Lines]",
          "895:             list(map(lambda x: x.replace(\"\\n\", \" \"), texts)), prefix=RAG_EMBEDDING_PASSAGE_PREFIX, user=user",
          "",
          "[Added Lines]",
          "895:             list(map(lambda x: x.replace(\"\\n\", \" \"), texts)),",
          "896:             prefix=RAG_EMBEDDING_CONTENT_PREFIX,",
          "897:             user=user,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1664:     @router.get(\"/ef/{text}\")",
          "1665:     async def get_embeddings(request: Request, text: Optional[str] = \"Hello World!\"):",
          "1669: class BatchProcessFilesForm(BaseModel):",
          "",
          "[Removed Lines]",
          "1666:         return {\"result\": request.app.state.EMBEDDING_FUNCTION(text, RAG_EMBEDDING_QUERY_PREFIX)}",
          "",
          "[Added Lines]",
          "1667:         return {",
          "1668:             \"result\": request.app.state.EMBEDDING_FUNCTION(",
          "1669:                 text, RAG_EMBEDDING_QUERY_PREFIX",
          "1670:             )",
          "1671:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c8cdc6377bc7ed408a58c2dfc086d9b7844978ca",
      "candidate_info": {
        "commit_hash": "c8cdc6377bc7ed408a58c2dfc086d9b7844978ca",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/c8cdc6377bc7ed408a58c2dfc086d9b7844978ca",
        "files": [
          "src/lib/components/channel/Thread.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/channel/Thread.svelte||src/lib/components/channel/Thread.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/channel/Thread.svelte||src/lib/components/channel/Thread.svelte": [
          "File: src/lib/components/channel/Thread.svelte -> src/lib/components/channel/Thread.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  let typingUsers = [];",
          "23:  let typingUsersTimeout = {};",
          "25:  $: if (threadId) {",
          "26:   initHandler();",
          "27:  }",
          "29:  const initHandler = async () => {",
          "30:   messages = null;",
          "31:   top = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:  let messagesContainerElement = null;",
          "31:  const scrollToBottom = () => {",
          "32:   messagesContainerElement.scrollTop = messagesContainerElement.scrollHeight;",
          "33:  };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:    if (messages.length < 50) {",
          "40:     top = true;",
          "41:    }",
          "42:   } else {",
          "43:    goto('/');",
          "44:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:    await tick();",
          "50:    scrollToBottom();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152:    </div>",
          "153:   </div>",
          "156:    <Messages",
          "157:     id={threadId}",
          "158:     {channel}",
          "",
          "[Removed Lines]",
          "155:   <div class=\" max-h-full w-full overflow-y-auto\">",
          "",
          "[Added Lines]",
          "164:   <div class=\" max-h-full w-full overflow-y-auto\" bind:this={messagesContainerElement}>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0b93791dc82ff614a22995345d5f8db4d82972a",
      "candidate_info": {
        "commit_hash": "c0b93791dc82ff614a22995345d5f8db4d82972a",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/c0b93791dc82ff614a22995345d5f8db4d82972a",
        "files": [
          "src/lib/components/NotificationToast.svelte",
          "src/lib/stores/index.ts"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/NotificationToast.svelte||src/lib/components/NotificationToast.svelte",
          "src/lib/stores/index.ts||src/lib/stores/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/NotificationToast.svelte||src/lib/components/NotificationToast.svelte": [
          "File: src/lib/components/NotificationToast.svelte -> src/lib/components/NotificationToast.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <script lang=\"ts\">",
          "3:  import DOMPurify from 'dompurify';",
          "5:  import { marked } from 'marked';",
          "",
          "[Removed Lines]",
          "2:  import { settings } from '$lib/stores';",
          "",
          "[Added Lines]",
          "2:  import { settings, playingNotificationSound } from '$lib/stores';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:   }",
          "19:   if ($settings?.notificationSound ?? true) {",
          "22:   }",
          "23:  });",
          "24: </script>",
          "",
          "[Removed Lines]",
          "20:    const audio = new Audio(`/audio/notification.mp3`);",
          "21:    audio.play();",
          "",
          "[Added Lines]",
          "20:    if (!$playingNotificationSound) {",
          "21:     playingNotificationSound.set(true);",
          "23:     const audio = new Audio(`/audio/notification.mp3`);",
          "24:     audio.play().finally(() => {",
          "26:      playingNotificationSound.set(false);",
          "27:     });",
          "28:    }",
          "",
          "---------------"
        ],
        "src/lib/stores/index.ts||src/lib/stores/index.ts": [
          "File: src/lib/stores/index.ts -> src/lib/stores/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: export const scrollPaginationEnabled = writable(false);",
          "70: export const currentChatPage = writable(1);",
          "72: export type Model = OpenAIModel | OllamaModel;",
          "74: type BaseModel = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: export const playingNotificationSound = writable(false);",
          "",
          "---------------"
        ]
      }
    }
  ]
}