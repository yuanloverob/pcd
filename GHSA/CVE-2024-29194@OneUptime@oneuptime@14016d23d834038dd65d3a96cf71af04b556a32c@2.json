{
  "cve_id": "CVE-2024-29194",
  "cve_desc": "OneUptime is a solution for monitoring and managing online services. The vulnerability lies in the improper validation of client-side stored data within the web application. Specifically, the is_master_admin key, stored in the local storage of the browser, can be manipulated by an attacker. By changing this key from false to true, the application grants administrative privileges to the user, without proper server-side validation.  This has been patched in 7.0.1815.",
  "repo": "OneUptime/oneuptime",
  "patch_hash": "14016d23d834038dd65d3a96cf71af04b556a32c",
  "patch_info": {
    "commit_hash": "14016d23d834038dd65d3a96cf71af04b556a32c",
    "repo": "OneUptime/oneuptime",
    "commit_url": "https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c",
    "files": [
      "CommonServer/Types/Database/ModelPermission.ts",
      "Model/Models/BillingInvoice.ts",
      "Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "Model/Models/OnCallDutyPolicyExecutionLog.ts",
      "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "Model/Models/OnCallDutyPolicySchedule.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayer.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts",
      "Model/Models/User.ts"
    ],
    "message": "Add deletedByUserId property to several models",
    "before_after_code_files": [
      "CommonServer/Types/Database/ModelPermission.ts||CommonServer/Types/Database/ModelPermission.ts",
      "Model/Models/BillingInvoice.ts||Model/Models/BillingInvoice.ts",
      "Model/Models/OnCallDutyPolicyEscalationRule.ts||Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts||Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts||Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts||Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "Model/Models/OnCallDutyPolicyExecutionLog.ts||Model/Models/OnCallDutyPolicyExecutionLog.ts",
      "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts||Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "Model/Models/OnCallDutyPolicySchedule.ts||Model/Models/OnCallDutyPolicySchedule.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayer.ts||Model/Models/OnCallDutyPolicyScheduleLayer.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts||Model/Models/OnCallDutyPolicyScheduleLayerUser.ts",
      "Model/Models/User.ts||Model/Models/User.ts"
    ]
  },
  "patch_diff": {
    "CommonServer/Types/Database/ModelPermission.ts||CommonServer/Types/Database/ModelPermission.ts": [
      "File: CommonServer/Types/Database/ModelPermission.ts -> CommonServer/Types/Database/ModelPermission.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: import ColumnBillingAccessControl from 'Common/Types/BaseDatabase/ColumnBillingAccessControl';",
      "40: import DatabaseCommonInteractionPropsUtil from 'Common/Types/BaseDatabase/DatabaseCommonInteractionPropsUtil';",
      "41: import Includes from 'Common/Types/BaseDatabase/Includes';",
      "43: export interface CheckReadPermissionType<TBaseModel extends BaseModel> {",
      "44:     query: Query<TBaseModel>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: import UserModel from 'Common/Models/UserModel';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:                 props",
      "296:             );",
      "298:             if (!props.isMultiTenantRequest) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "301:             query = await this.addUserScopeToQuery(modelType, query, props);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "854:         return query;",
      "855:     }",
      "857:     private static async addTenantScopeToQuery<TBaseModel extends BaseModel>(",
      "858:         modelType: { new (): TBaseModel },",
      "859:         query: Query<TBaseModel>,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "862:     private static async addUserScopeToQuery<TBaseModel extends BaseModel>(",
      "863:         modelType: { new (): TBaseModel },",
      "864:         query: Query<TBaseModel>,",
      "865:         props: DatabaseCommonInteractionProps",
      "866:     ): Promise<Query<TBaseModel>> {",
      "867:         const model: BaseModel = new modelType();",
      "869:         if (model instanceof UserModel) {",
      "870:             if (props.userId) {",
      "871:                 (query as any)['_id'] = props.userId;",
      "872:             } else if (!props.isRoot && !props.isMasterAdmin) {",
      "873:                 throw new NotAuthorizedException(",
      "874:                     `You do not have permissions to query on - ${model.singularName}.`",
      "875:                 );",
      "876:             }",
      "877:         }",
      "879:         return query;",
      "880:     }",
      "",
      "---------------"
    ],
    "Model/Models/BillingInvoice.ts||Model/Models/BillingInvoice.ts": [
      "File: Model/Models/BillingInvoice.ts -> Model/Models/BillingInvoice.ts"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRule.ts||Model/Models/OnCallDutyPolicyEscalationRule.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRule.ts -> Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "355:     @JoinColumn({ name: 'deletedByUserId' })",
      "356:     public deletedByUser?: User = undefined;",
      "358:     @ColumnAccessControl({",
      "359:         create: [",
      "360:             Permission.ProjectOwner,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "358:     @ColumnAccessControl({",
      "359:         create: [],",
      "360:         read: [],",
      "361:         update: [],",
      "362:     })",
      "363:     @TableColumn({",
      "364:         type: TableColumnType.ObjectID,",
      "365:         title: 'Deleted by User ID',",
      "366:         description:",
      "367:             'User ID who deleted this object (if this object was deleted by a User)',",
      "368:     })",
      "369:     @Column({",
      "370:         type: ColumnType.ObjectID,",
      "371:         nullable: true,",
      "372:         transformer: ObjectID.getDatabaseTransformer(),",
      "373:     })",
      "374:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts||Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts -> Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "420:     )",
      "421:     @JoinColumn({ name: 'deletedByUserId' })",
      "422:     public deletedByUser?: User = undefined;",
      "423: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "425:     @ColumnAccessControl({",
      "426:         create: [],",
      "427:         read: [],",
      "428:         update: [],",
      "429:     })",
      "430:     @TableColumn({",
      "431:         type: TableColumnType.ObjectID,",
      "432:         title: 'Deleted by User ID',",
      "433:         description:",
      "434:             'User ID who deleted this object (if this object was deleted by a User)',",
      "435:     })",
      "436:     @Column({",
      "437:         type: ColumnType.ObjectID,",
      "438:         nullable: true,",
      "439:         transformer: ObjectID.getDatabaseTransformer(),",
      "440:     })",
      "441:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts||Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts -> Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "418:     )",
      "419:     @JoinColumn({ name: 'deletedByUserId' })",
      "420:     public deletedByUser?: User = undefined;",
      "421: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "422:     @ColumnAccessControl({",
      "423:         create: [],",
      "424:         read: [],",
      "425:         update: [],",
      "426:     })",
      "427:     @TableColumn({",
      "428:         type: TableColumnType.ObjectID,",
      "429:         title: 'Deleted by User ID',",
      "430:         description:",
      "431:             'User ID who deleted this object (if this object was deleted by a User)',",
      "432:     })",
      "433:     @Column({",
      "434:         type: ColumnType.ObjectID,",
      "435:         nullable: true,",
      "436:         transformer: ObjectID.getDatabaseTransformer(),",
      "437:     })",
      "438:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts||Model/Models/OnCallDutyPolicyEscalationRuleUser.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleUser.ts -> Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "417:     )",
      "418:     @JoinColumn({ name: 'deletedByUserId' })",
      "419:     public deletedByUser?: User = undefined;",
      "420: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "421:     @ColumnAccessControl({",
      "422:         create: [],",
      "423:         read: [],",
      "424:         update: [],",
      "425:     })",
      "426:     @TableColumn({",
      "427:         type: TableColumnType.ObjectID,",
      "428:         title: 'Deleted by User ID',",
      "429:         description:",
      "430:             'User ID who deleted this object (if this object was deleted by a User)',",
      "431:     })",
      "432:     @Column({",
      "433:         type: ColumnType.ObjectID,",
      "434:         nullable: true,",
      "435:         transformer: ObjectID.getDatabaseTransformer(),",
      "436:     })",
      "437:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyExecutionLog.ts||Model/Models/OnCallDutyPolicyExecutionLog.ts": [
      "File: Model/Models/OnCallDutyPolicyExecutionLog.ts -> Model/Models/OnCallDutyPolicyExecutionLog.ts"
    ],
    "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts||Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts": [
      "File: Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts -> Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "708:         unique: false,",
      "709:     })",
      "710:     public acknowledgedAt?: Date = undefined;",
      "711: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "712:     @ColumnAccessControl({",
      "713:         create: [],",
      "714:         read: [],",
      "715:         update: [],",
      "716:     })",
      "717:     @TableColumn({",
      "718:         type: TableColumnType.ObjectID,",
      "719:         title: 'Deleted by User ID',",
      "720:         description:",
      "721:             'User ID who deleted this object (if this object was deleted by a User)',",
      "722:     })",
      "723:     @Column({",
      "724:         type: ColumnType.ObjectID,",
      "725:         nullable: true,",
      "726:         transformer: ObjectID.getDatabaseTransformer(),",
      "727:     })",
      "728:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicySchedule.ts||Model/Models/OnCallDutyPolicySchedule.ts": [
      "File: Model/Models/OnCallDutyPolicySchedule.ts -> Model/Models/OnCallDutyPolicySchedule.ts"
    ],
    "Model/Models/OnCallDutyPolicyScheduleLayer.ts||Model/Models/OnCallDutyPolicyScheduleLayer.ts": [
      "File: Model/Models/OnCallDutyPolicyScheduleLayer.ts -> Model/Models/OnCallDutyPolicyScheduleLayer.ts"
    ],
    "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts||Model/Models/OnCallDutyPolicyScheduleLayerUser.ts": [
      "File: Model/Models/OnCallDutyPolicyScheduleLayerUser.ts -> Model/Models/OnCallDutyPolicyScheduleLayerUser.ts"
    ],
    "Model/Models/User.ts||Model/Models/User.ts": [
      "File: Model/Models/User.ts -> Model/Models/User.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: @AllowAccessIfSubscriptionIsUnpaid()",
      "33: @TableAccessControl({",
      "34:     create: [Permission.Public],",
      "40:     delete: [Permission.CurrentUser],",
      "41:     update: [Permission.CurrentUser],",
      "42: })",
      "",
      "[Removed Lines]",
      "35:     read: [",
      "36:         Permission.CurrentUser,",
      "37:         Permission.ProjectAdmin,",
      "38:         Permission.ProjectOwner,",
      "39:     ],",
      "",
      "[Added Lines]",
      "35:     read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: class User extends UserModel {",
      "57:     @ColumnAccessControl({",
      "58:         create: [Permission.Public],",
      "64:         update: [Permission.CurrentUser],",
      "65:     })",
      "66:     @TableColumn({ type: TableColumnType.Name, canReadOnRelationQuery: true })",
      "",
      "[Removed Lines]",
      "59:         read: [",
      "60:             Permission.CurrentUser,",
      "61:             Permission.ProjectAdmin,",
      "62:             Permission.ProjectOwner,",
      "63:         ],",
      "",
      "[Added Lines]",
      "55:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76:     @ColumnAccessControl({",
      "77:         create: [Permission.Public],",
      "84:         update: [Permission.CurrentUser],",
      "85:     })",
      "",
      "[Removed Lines]",
      "78:         read: [",
      "79:             Permission.CurrentUser,",
      "80:             Permission.ProjectAdmin,",
      "81:             Permission.ProjectOwner,",
      "82:         ],",
      "",
      "[Added Lines]",
      "70:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     @ColumnAccessControl({",
      "249:         create: [],",
      "256:         update: [Permission.CurrentUser],",
      "257:     })",
      "",
      "[Removed Lines]",
      "250:         read: [",
      "251:             Permission.CurrentUser,",
      "252:             Permission.ProjectAdmin,",
      "253:             Permission.ProjectOwner,",
      "254:         ],",
      "",
      "[Added Lines]",
      "238:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "277:     @ColumnAccessControl({",
      "278:         create: [],",
      "285:         update: [Permission.CurrentUser],",
      "286:     })",
      "",
      "[Removed Lines]",
      "279:         read: [",
      "280:             Permission.CurrentUser,",
      "281:             Permission.ProjectAdmin,",
      "282:             Permission.ProjectOwner,",
      "283:         ],",
      "",
      "[Added Lines]",
      "263:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "298:     @ColumnAccessControl({",
      "299:         create: [],",
      "306:         update: [Permission.CurrentUser],",
      "307:     })",
      "",
      "[Removed Lines]",
      "300:         read: [",
      "301:             Permission.CurrentUser,",
      "302:             Permission.ProjectAdmin,",
      "303:             Permission.ProjectOwner,",
      "304:         ],",
      "",
      "[Added Lines]",
      "280:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "309:         isDefaultValueColumn: true,",
      "310:         required: true,",
      "311:         type: TableColumnType.Boolean,",
      "312:     })",
      "313:     @Column({",
      "314:         type: ColumnType.Boolean,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "288:         canReadOnRelationQuery: true,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "425:     @ColumnAccessControl({",
      "426:         create: [],",
      "433:         update: [Permission.CurrentUser],",
      "434:     })",
      "",
      "[Removed Lines]",
      "427:         read: [",
      "428:             Permission.CurrentUser,",
      "429:             Permission.ProjectAdmin,",
      "430:             Permission.ProjectOwner,",
      "431:         ],",
      "",
      "[Added Lines]",
      "404:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "544:     @ColumnAccessControl({",
      "545:         create: [],",
      "552:         update: [Permission.CurrentUser],",
      "553:     })",
      "",
      "[Removed Lines]",
      "546:         read: [",
      "547:             Permission.CurrentUser,",
      "548:             Permission.ProjectAdmin,",
      "549:             Permission.ProjectOwner,",
      "550:         ],",
      "",
      "[Added Lines]",
      "519:         read: [Permission.CurrentUser],",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5895f515a0432329bf41594636c772fec5cdef7b",
      "candidate_info": {
        "commit_hash": "5895f515a0432329bf41594636c772fec5cdef7b",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/5895f515a0432329bf41594636c772fec5cdef7b",
        "files": [
          "App/FeatureSet/Workers/Index.ts",
          "App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts",
          "CommonServer/Services/Index.ts",
          "CommonServer/Services/MonitorMetricsByMinuteService.ts",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts",
          "Model/AnalyticsModels/Index.ts",
          "Model/AnalyticsModels/MonitorMetricsByMinute.ts"
        ],
        "message": "Fix formatting and add missing commas",
        "before_after_code_files": [
          "App/FeatureSet/Workers/Index.ts||App/FeatureSet/Workers/Index.ts",
          "App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts||App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts",
          "CommonServer/Services/Index.ts||CommonServer/Services/Index.ts",
          "CommonServer/Services/MonitorMetricsByMinuteService.ts||CommonServer/Services/MonitorMetricsByMinuteService.ts",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts",
          "Model/AnalyticsModels/Index.ts||Model/AnalyticsModels/Index.ts",
          "Model/AnalyticsModels/MonitorMetricsByMinute.ts||Model/AnalyticsModels/MonitorMetricsByMinute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "App/FeatureSet/Workers/Index.ts||App/FeatureSet/Workers/Index.ts": [
          "File: App/FeatureSet/Workers/Index.ts -> App/FeatureSet/Workers/Index.ts"
        ],
        "App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts||App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts": [
          "File: App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts -> App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:         await MonitorMetricsByMinuteService.deleteBy({",
          "16:             query: {",
          "18:             },",
          "19:             props: {",
          "20:                 isRoot: true,",
          "22:         });",
          "23:     }",
          "",
          "[Removed Lines]",
          "17:                 createdAt: new LessThan(oneHourAgo)",
          "21:             }",
          "24: );",
          "",
          "[Added Lines]",
          "17:                 createdAt: new LessThan(oneHourAgo),",
          "21:             },",
          "",
          "---------------"
        ],
        "CommonServer/Services/Index.ts||CommonServer/Services/Index.ts": [
          "File: CommonServer/Services/Index.ts -> CommonServer/Services/Index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "276:     MetricSumService,",
          "277:     MetricHistogramService,",
          "278:     MetricGaugeService,",
          "280: ];",
          "282: export default services;",
          "",
          "[Removed Lines]",
          "279:     MonitorMetricsByMinuteService",
          "",
          "[Added Lines]",
          "279:     MonitorMetricsByMinuteService,",
          "",
          "---------------"
        ],
        "CommonServer/Services/MonitorMetricsByMinuteService.ts||CommonServer/Services/MonitorMetricsByMinuteService.ts": [
          "File: CommonServer/Services/MonitorMetricsByMinuteService.ts -> CommonServer/Services/MonitorMetricsByMinuteService.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: export class MonitorMetricsByMinuteService extends AnalyticsDatabaseService<MonitorMetricsByMinute> {",
          "6:     public constructor(clickhouseDatabase?: ClickhouseDatabase | undefined) {",
          "8:     }",
          "9: }",
          "",
          "[Removed Lines]",
          "7:         super({ modelType: MonitorMetricsByMinute, database: clickhouseDatabase });",
          "",
          "[Added Lines]",
          "7:         super({",
          "8:             modelType: MonitorMetricsByMinute,",
          "9:             database: clickhouseDatabase,",
          "10:         });",
          "",
          "---------------"
        ],
        "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts": [
          "File: Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts -> Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:             if (criteriaFilter?.value !== undefined) {",
          "137:             }",
          "138:         }",
          "",
          "[Removed Lines]",
          "136:                 text += `${criteriaFilter?.value.toString()}${isPercentage ? '%':''}${isMilliseconds ? 'ms': ''} `",
          "",
          "[Added Lines]",
          "136:                 text += `${criteriaFilter?.value.toString()}${",
          "137:                     isPercentage ? '%' : ''",
          "138:                 }${isMilliseconds ? 'ms' : ''} `;",
          "",
          "---------------"
        ],
        "Model/AnalyticsModels/Index.ts||Model/AnalyticsModels/Index.ts": [
          "File: Model/AnalyticsModels/Index.ts -> Model/AnalyticsModels/Index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:     MetricHistogram,",
          "13:     MetricSum,",
          "14:     MetricGauge,",
          "16: ];",
          "18: export default AnalyticsModels;",
          "",
          "[Removed Lines]",
          "15:     MonitorMetricsByMinute",
          "",
          "[Added Lines]",
          "15:     MonitorMetricsByMinute,",
          "",
          "---------------"
        ],
        "Model/AnalyticsModels/MonitorMetricsByMinute.ts||Model/AnalyticsModels/MonitorMetricsByMinute.ts": [
          "File: Model/AnalyticsModels/MonitorMetricsByMinute.ts -> Model/AnalyticsModels/MonitorMetricsByMinute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:                     Permission.ProjectMember,",
          "22:                     Permission.CanReadProjectMonitor,",
          "23:                 ],",
          "33:             },",
          "34:             pluralName: 'Monitor Metrics By Minutes',",
          "35:             crudApiPath: new Route('/monitor-metrics-by-minute'),",
          "",
          "[Removed Lines]",
          "24:                 create: [",
          "26:                 ],",
          "27:                 update: [",
          "29:                 ],",
          "30:                 delete: [",
          "32:                 ],",
          "",
          "[Added Lines]",
          "24:                 create: [],",
          "25:                 update: [],",
          "26:                 delete: [],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:                             Permission.ProjectMember,",
          "49:                             Permission.CanReadProjectMonitor,",
          "50:                         ],",
          "54:                         update: [],",
          "55:                     },",
          "56:                 }),",
          "",
          "[Removed Lines]",
          "51:                         create: [",
          "53:                         ],",
          "",
          "[Added Lines]",
          "45:                         create: [],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:                 new AnalyticsTableColumn({",
          "59:                     key: 'monitorId',",
          "60:                     title: 'Monitor ID',",
          "62:                     required: true,",
          "63:                     type: TableColumnType.ObjectID,",
          "64:                     accessControl: {",
          "",
          "[Removed Lines]",
          "61:                     description: 'ID of the Monitor which this metric belongs to',",
          "",
          "[Added Lines]",
          "53:                     description:",
          "54:                         'ID of the Monitor which this metric belongs to',",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:                             Permission.ProjectMember,",
          "69:                             Permission.CanReadProjectMonitor,",
          "70:                         ],",
          "74:                         update: [],",
          "75:                     },",
          "76:                 }),",
          "",
          "[Removed Lines]",
          "71:                         create: [",
          "73:                         ],",
          "",
          "[Added Lines]",
          "64:                         create: [],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "88:                             Permission.ProjectMember,",
          "89:                             Permission.CanReadProjectMonitor,",
          "90:                         ],",
          "94:                         update: [],",
          "95:                     },",
          "96:                 }),",
          "99:                 new AnalyticsTableColumn({",
          "100:                     key: 'metricValue',",
          "101:                     title: 'Metric Value',",
          "",
          "[Removed Lines]",
          "91:                         create: [",
          "93:                         ],",
          "",
          "[Added Lines]",
          "82:                         create: [],",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "109:                             Permission.ProjectMember,",
          "110:                             Permission.CanReadProjectMonitor,",
          "111:                         ],",
          "115:                         update: [],",
          "116:                     },",
          "117:                 }),",
          "120:                 new AnalyticsTableColumn({",
          "121:                     key: 'miscData',",
          "122:                     title: 'Misc Data',",
          "",
          "[Removed Lines]",
          "112:                         create: [",
          "114:                         ],",
          "",
          "[Added Lines]",
          "100:                         create: [],",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "130:                             Permission.ProjectMember,",
          "131:                             Permission.CanReadProjectMonitor,",
          "132:                         ],",
          "136:                         update: [],",
          "137:                     },",
          "138:                 }),",
          "141:             ],",
          "142:             primaryKeys: ['projectId', 'monitorId', 'createdAt'],",
          "143:         });",
          "",
          "[Removed Lines]",
          "133:                         create: [",
          "135:                         ],",
          "",
          "[Added Lines]",
          "118:                         create: [],",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "182:     public set miscData(v: JSONObject | undefined) {",
          "183:         this.setColumnValue('miscData', v);",
          "184:     }",
          "",
          "[Removed Lines]",
          "185: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81ab8d135ff55244f7d2d832d21fd07a654636c3",
      "candidate_info": {
        "commit_hash": "81ab8d135ff55244f7d2d832d21fd07a654636c3",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/81ab8d135ff55244f7d2d832d21fd07a654636c3",
        "files": [
          "CommonUI/src/Components/Dropdown/Dropdown.tsx",
          "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ],
        "message": "Refactor dropdown component and criteria filter",
        "before_after_code_files": [
          "CommonUI/src/Components/Dropdown/Dropdown.tsx||CommonUI/src/Components/Dropdown/Dropdown.tsx",
          "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx||Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "CommonUI/src/Components/Dropdown/Dropdown.tsx||CommonUI/src/Components/Dropdown/Dropdown.tsx": [
          "File: CommonUI/src/Components/Dropdown/Dropdown.tsx -> CommonUI/src/Components/Dropdown/Dropdown.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     placeholder?: undefined | string;",
          "21:     className?: undefined | string;",
          "22:     onChange?:",
          "25:     value?: DropdownOption | undefined;",
          "26:     onFocus?: (() => void) | undefined;",
          "27:     onBlur?: (() => void) | undefined;",
          "",
          "[Removed Lines]",
          "23:     | undefined",
          "24:     | ((value: DropdownValue | Array<DropdownValue> | null) => void);",
          "",
          "[Added Lines]",
          "23:         | undefined",
          "24:         | ((value: DropdownValue | Array<DropdownValue> | null) => void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     const getDropdownOptionFromValue: GetDropdownOptionFromValueFunction = (",
          "48:         value: GetDropdownOptionFromValueFunctionProps",
          "49:     ): DropdownOption | Array<DropdownOption> | undefined => {",
          "52:             return undefined;",
          "53:         }",
          "",
          "[Removed Lines]",
          "51:         if(value === undefined) {",
          "",
          "[Added Lines]",
          "50:         if (value === undefined) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:                         | DropdownOption",
          "77:                         | undefined",
          "78:                         | Array<DropdownOption> = props.options.find(",
          "84:                     if (option) {",
          "85:                         options.push(option as DropdownOption);",
          "",
          "[Removed Lines]",
          "79:                             (option: DropdownOption) => {",
          "80:                                 return option.value === item;",
          "81:                             }",
          "82:                         ) as DropdownOption | Array<DropdownOption>;",
          "",
          "[Added Lines]",
          "78:                         (option: DropdownOption) => {",
          "79:                             return option.value === item;",
          "80:                         }",
          "81:                     ) as DropdownOption | Array<DropdownOption>;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "107:     >(getDropdownOptionFromValue(props.initialValue));",
          "109:     useEffect(() => {",
          "111:         const value: DropdownOption | Array<DropdownOption> | undefined =",
          "120:     }, [props.value]);",
          "122:     return (",
          "123:         <div",
          "125:                 'relative mt-2 mb-1 rounded-md w-full overflow-visible'",
          "127:             onClick={() => {",
          "128:                 props.onClick && props.onClick();",
          "129:                 props.onFocus && props.onFocus();",
          "",
          "[Removed Lines]",
          "112:         getDropdownOptionFromValue(",
          "113:             props.value ? props.value : undefined",
          "114:         )",
          "116:         setValue(",
          "117:             value",
          "118:         );",
          "124:             className={`${props.className ||",
          "126:                 }`}",
          "",
          "[Added Lines]",
          "110:             getDropdownOptionFromValue(props.value ? props.value : undefined);",
          "112:         setValue(value);",
          "117:             className={`${",
          "118:                 props.className ||",
          "120:             }`}",
          "",
          "---------------"
        ],
        "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx||Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx": [
          "File: Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx -> Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         return <></>;",
          "89:     }",
          "120:         );",
          "123:     return (",
          "124:         <div>",
          "",
          "[Removed Lines]",
          "92:     const filterConditionValue: DropdownOption | undefined = filterTypeOptions.find(",
          "93:         (i: DropdownOption) => {",
          "94:             return (",
          "95:                 i.value ===",
          "96:                 criteriaFilter?.filterType",
          "97:             );",
          "98:         }",
          "99:     );",
          "102:     const evaluateOverTimeMinutesValue: DropdownOption | undefined = CriteriaFilterUiUtil.getEvaluateOverTimeMinutesOptions().find(",
          "103:         (item: DropdownOption) => {",
          "104:             return (",
          "105:                 item.value ===",
          "106:                 criteriaFilter?.evaluateOverTimeOptions",
          "107:                     ?.timeValueInMinutes",
          "108:             );",
          "109:         }",
          "110:     );",
          "113:     const evaluateOverTimeTypeValue: DropdownOption | undefined = DropdownUtil.getDropdownOptionsFromEnum(",
          "114:         EvaluateOverTimeType",
          "115:     ).find((item: DropdownOption) => {",
          "116:         return (",
          "117:             item.value ===",
          "118:             criteriaFilter?.evaluateOverTimeOptions",
          "119:                 ?.evaluateOverTimeType",
          "121:     });",
          "",
          "[Added Lines]",
          "91:     const filterConditionValue: DropdownOption | undefined =",
          "92:         filterTypeOptions.find((i: DropdownOption) => {",
          "93:             return i.value === criteriaFilter?.filterType;",
          "94:         });",
          "96:     const evaluateOverTimeMinutesValue: DropdownOption | undefined =",
          "97:         CriteriaFilterUiUtil.getEvaluateOverTimeMinutesOptions().find(",
          "98:             (item: DropdownOption) => {",
          "99:                 return (",
          "100:                     item.value ===",
          "101:                     criteriaFilter?.evaluateOverTimeOptions?.timeValueInMinutes",
          "102:                 );",
          "103:             }",
          "104:         );",
          "106:     const evaluateOverTimeTypeValue: DropdownOption | undefined =",
          "107:         DropdownUtil.getDropdownOptionsFromEnum(EvaluateOverTimeType).find(",
          "108:             (item: DropdownOption) => {",
          "109:                 return (",
          "110:                     item.value ===",
          "111:                     criteriaFilter?.evaluateOverTimeOptions",
          "112:                         ?.evaluateOverTimeType",
          "113:                 );",
          "114:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:                 <div className=\"\">",
          "127:                     <FieldLabelElement title=\"Filter Type\" />",
          "128:                     <Dropdown",
          "134:                         options={checkOnOptions}",
          "135:                         onChange={(",
          "136:                             value: DropdownValue | Array<DropdownValue> | null",
          "",
          "[Removed Lines]",
          "129:                         value={checkOnOptions.find(",
          "130:                             (i: DropdownOption) => {",
          "131:                                 return i.value === criteriaFilter?.checkOn;",
          "132:                             }",
          "133:                         )}",
          "",
          "[Added Lines]",
          "123:                         value={checkOnOptions.find((i: DropdownOption) => {",
          "124:                             return i.value === criteriaFilter?.checkOn;",
          "125:                         })}",
          "",
          "---------------"
        ],
        "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts": [
          "File: Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts -> Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: } from 'Common/Types/Monitor/CriteriaFilter';",
          "10: export default class CriteriaFilterUtil {",
          "12:     public static getEvaluateOverTimeMinutesOptions(): Array<DropdownOption> {",
          "13:         const keys: Array<string> = Object.keys(EvaluateOverTimeMinutes);",
          "21:     }",
          "23:     public static getCheckOnOptionsByMonitorType(",
          "",
          "[Removed Lines]",
          "14:         return keys",
          "15:             .map((key: string) => {",
          "16:                 return {",
          "17:                     label: `${(EvaluateOverTimeMinutes as any)[key].toString()} Minutes`,",
          "18:                     value: (EvaluateOverTimeMinutes as any)[key]!.toString(),",
          "19:                 };",
          "20:             });",
          "",
          "[Added Lines]",
          "13:         return keys.map((key: string) => {",
          "14:             return {",
          "15:                 label: `${(EvaluateOverTimeMinutes as any)[",
          "16:                     key",
          "17:                 ].toString()} Minutes`,",
          "18:                 value: (EvaluateOverTimeMinutes as any)[key]!.toString(),",
          "19:             };",
          "20:         });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6067babb9fa6fd9bb3c5fb8264e040102e2d9f83",
      "candidate_info": {
        "commit_hash": "6067babb9fa6fd9bb3c5fb8264e040102e2d9f83",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/6067babb9fa6fd9bb3c5fb8264e040102e2d9f83",
        "files": [
          "Dashboard/src/Routes/OnCallDutyRoutes.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ],
        "message": "Refactor OnCallDutyRoutes and CriteriaFilterUtil classes",
        "before_after_code_files": [
          "Dashboard/src/Routes/OnCallDutyRoutes.tsx||Dashboard/src/Routes/OnCallDutyRoutes.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Dashboard/src/Routes/OnCallDutyRoutes.tsx||Dashboard/src/Routes/OnCallDutyRoutes.tsx": [
          "File: Dashboard/src/Routes/OnCallDutyRoutes.tsx -> Dashboard/src/Routes/OnCallDutyRoutes.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:                 <PageRoute",
          "282:                     path={RouteUtil.getLastPathForKey(",
          "284:                     )}",
          "285:                     element={",
          "297:                     }",
          "298:                 />",
          "299:             </PageRoute>",
          "",
          "[Removed Lines]",
          "283:                         PageMap.ON_CALL_DUTY_POLICY_VIEW_EXECUTION_LOG_VIEW, 2",
          "287:                             <OnCallDutyPolicyViewLogsView",
          "288:                                 {...props}",
          "289:                                 pageRoute={",
          "290:                                     RouteMap[",
          "291:                                         PageMap",
          "292:                                             .ON_CALL_DUTY_POLICY_VIEW_EXECUTION_LOG_VIEW",
          "293:                                     ] as Route",
          "294:                                 }",
          "295:                             />",
          "",
          "[Added Lines]",
          "283:                         PageMap.ON_CALL_DUTY_POLICY_VIEW_EXECUTION_LOG_VIEW,",
          "284:                         2",
          "287:                         <OnCallDutyPolicyViewLogsView",
          "288:                             {...props}",
          "289:                             pageRoute={",
          "290:                                 RouteMap[",
          "291:                                     PageMap",
          "292:                                         .ON_CALL_DUTY_POLICY_VIEW_EXECUTION_LOG_VIEW",
          "293:                                 ] as Route",
          "294:                             }",
          "295:                         />",
          "",
          "---------------"
        ],
        "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts": [
          "File: Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts -> Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:         if (",
          "",
          "[Removed Lines]",
          "34:         const isPercentage: boolean = criteriaFilter?.checkOn === CheckOn.CPUUsagePercent || criteriaFilter?.checkOn === CheckOn.DiskUsagePercent || criteriaFilter?.checkOn === CheckOn.MemoryUsagePercent;",
          "",
          "[Added Lines]",
          "34:         const isPercentage: boolean =",
          "35:             criteriaFilter?.checkOn === CheckOn.CPUUsagePercent ||",
          "36:             criteriaFilter?.checkOn === CheckOn.DiskUsagePercent ||",
          "37:             criteriaFilter?.checkOn === CheckOn.MemoryUsagePercent;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "68:                 EvaluateOverTimeType.Sum",
          "69:             ) {",
          "71:             }",
          "75:         }",
          "77:         if (criteriaFilter?.checkOn === CheckOn.JavaScriptExpression) {",
          "",
          "[Removed Lines]",
          "70:                 text += `sum of all ${isPercentage ? 'percentage ' : ''}values `;",
          "",
          "[Added Lines]",
          "73:                 text += `sum of all ${",
          "74:                     isPercentage ? 'percentage ' : ''",
          "75:                 }values `;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efbdc85ade3177c793f5865f6f1c225da01ede6b",
      "candidate_info": {
        "commit_hash": "efbdc85ade3177c793f5865f6f1c225da01ede6b",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/efbdc85ade3177c793f5865f6f1c225da01ede6b",
        "files": [
          "AdminDashboard/src/Components/Header/ProjectPicker.tsx",
          "AdminDashboard/src/Pages/Projects/Index.tsx",
          "CommonUI/src/Components/TextArea/TextArea.tsx",
          "CommonUI/src/Components/Toggle/Toggle.tsx",
          "Dashboard/src/Components/Form/Monitor/MonitorCriteriaIncidentForm.tsx",
          "Dashboard/src/Components/Form/Monitor/MonitorCriteriaInstance.tsx",
          "Dashboard/src/Components/Header/ProjectPicker.tsx",
          "Dashboard/src/Components/Header/Upgrade.tsx",
          "Dashboard/src/Pages/Settings/Billing.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ],
        "message": "Update Toggle component props",
        "before_after_code_files": [
          "AdminDashboard/src/Components/Header/ProjectPicker.tsx||AdminDashboard/src/Components/Header/ProjectPicker.tsx",
          "AdminDashboard/src/Pages/Projects/Index.tsx||AdminDashboard/src/Pages/Projects/Index.tsx",
          "CommonUI/src/Components/TextArea/TextArea.tsx||CommonUI/src/Components/TextArea/TextArea.tsx",
          "CommonUI/src/Components/Toggle/Toggle.tsx||CommonUI/src/Components/Toggle/Toggle.tsx",
          "Dashboard/src/Components/Form/Monitor/MonitorCriteriaIncidentForm.tsx||Dashboard/src/Components/Form/Monitor/MonitorCriteriaIncidentForm.tsx",
          "Dashboard/src/Components/Form/Monitor/MonitorCriteriaInstance.tsx||Dashboard/src/Components/Form/Monitor/MonitorCriteriaInstance.tsx",
          "Dashboard/src/Components/Header/ProjectPicker.tsx||Dashboard/src/Components/Header/ProjectPicker.tsx",
          "Dashboard/src/Components/Header/Upgrade.tsx||Dashboard/src/Components/Header/Upgrade.tsx",
          "Dashboard/src/Pages/Settings/Billing.tsx||Dashboard/src/Pages/Settings/Billing.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "AdminDashboard/src/Components/Header/ProjectPicker.tsx||AdminDashboard/src/Components/Header/ProjectPicker.tsx": [
          "File: AdminDashboard/src/Components/Header/ProjectPicker.tsx -> AdminDashboard/src/Components/Header/ProjectPicker.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         return (",
          "42:             <Toggle",
          "43:                 title=\"Yearly Plan\"",
          "45:                 description=\"(Save 20%)\"",
          "46:                 onChange={(value: boolean) => {",
          "47:                     setIsSubscriptionPlanYearly(value);",
          "",
          "[Removed Lines]",
          "44:                 initialValue={isSubscriptionPlanYearly}",
          "",
          "[Added Lines]",
          "44:                 value={isSubscriptionPlanYearly}",
          "",
          "---------------"
        ],
        "AdminDashboard/src/Pages/Projects/Index.tsx||AdminDashboard/src/Pages/Projects/Index.tsx": [
          "File: AdminDashboard/src/Pages/Projects/Index.tsx -> AdminDashboard/src/Pages/Projects/Index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:         return (",
          "165:             <Toggle",
          "166:                 title=\"Yearly Plan\"",
          "168:                 description=\"(Save 20%)\"",
          "169:                 onChange={(value: boolean) => {",
          "170:                     setIsSubscriptionPlanYearly(value);",
          "",
          "[Removed Lines]",
          "167:                 initialValue={isSubscriptionPlanYearly}",
          "",
          "[Added Lines]",
          "167:                 value={isSubscriptionPlanYearly}",
          "",
          "---------------"
        ],
        "CommonUI/src/Components/TextArea/TextArea.tsx||CommonUI/src/Components/TextArea/TextArea.tsx": [
          "File: CommonUI/src/Components/TextArea/TextArea.tsx -> CommonUI/src/Components/TextArea/TextArea.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: export interface ComponentProps {",
          "11:     onChange?: undefined | ((value: string) => void);",
          "13:     placeholder?: undefined | string;",
          "14:     onFocus?: () => void;",
          "15:     onBlur?: () => void;",
          "",
          "[Removed Lines]",
          "12:     initialValue: string;",
          "",
          "[Added Lines]",
          "12:     initialValue?: string | undefined;",
          "13:     value?: string | undefined;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22: const TextArea: FunctionComponent<ComponentProps> = (",
          "23:     props: ComponentProps",
          "24: ): ReactElement => {",
          "27:     let className: string = '';",
          "",
          "[Removed Lines]",
          "25:     const [text, setText] = useState<string>('');",
          "",
          "[Added Lines]",
          "26:     const [text, setText] = useState<string>(props.initialValue || '');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "39:     }",
          "41:     useEffect(() => {",
          "44:         }",
          "47:     type HandleChangeFunction = (content: string) => void;",
          "",
          "[Removed Lines]",
          "42:         if (props.initialValue) {",
          "43:             setText(props.initialValue.toString());",
          "45:     }, [props.initialValue]);",
          "",
          "[Added Lines]",
          "43:         if (props.value) {",
          "44:             setText(props.value.toString());",
          "46:     }, [props.value]);",
          "",
          "---------------"
        ],
        "CommonUI/src/Components/Toggle/Toggle.tsx||CommonUI/src/Components/Toggle/Toggle.tsx": [
          "File: CommonUI/src/Components/Toggle/Toggle.tsx -> CommonUI/src/Components/Toggle/Toggle.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: export interface ComponentProps {",
          "9:     onChange: (value: boolean) => void;",
          "11:     onFocus?: () => void;",
          "12:     onBlur?: () => void;",
          "13:     tabIndex?: number | undefined;",
          "",
          "[Removed Lines]",
          "10:     initialValue: boolean;",
          "",
          "[Added Lines]",
          "10:     initialValue?: boolean | undefined;",
          "11:     value?: boolean | undefined;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: const Toggle: FunctionComponent<ComponentProps> = (",
          "20:     props: ComponentProps",
          "21: ): ReactElement => {",
          "24:     useEffect(() => {",
          "25:         if (props !== undefined) {",
          "27:                 setIsChecked(true);",
          "28:             } else {",
          "29:                 setIsChecked(false);",
          "30:             }",
          "31:         }",
          "34:     type HandleChangeFunction = (content: boolean) => void;",
          "",
          "[Removed Lines]",
          "22:     const [isChecked, setIsChecked] = useState<boolean>(false);",
          "26:             if (props.initialValue) {",
          "32:     }, [props.initialValue]);",
          "",
          "[Added Lines]",
          "23:     const [isChecked, setIsChecked] = useState<boolean>(props.initialValue || false);",
          "27:             if (props.value) {",
          "33:     }, [props.value]);",
          "",
          "---------------"
        ],
        "Dashboard/src/Components/Form/Monitor/MonitorCriteriaIncidentForm.tsx||Dashboard/src/Components/Form/Monitor/MonitorCriteriaIncidentForm.tsx": [
          "File: Dashboard/src/Components/Form/Monitor/MonitorCriteriaIncidentForm.tsx -> Dashboard/src/Components/Form/Monitor/MonitorCriteriaIncidentForm.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:                 hideSubmitButton={true}",
          "26:                 initialValues={",
          "27:                     props.initialValue",
          "41:                 }",
          "42:                 onChange={(values: FormValues<CriteriaIncident>) => {",
          "43:                     props.onChange &&",
          "",
          "[Removed Lines]",
          "28:                         ? {",
          "29:                               ...props.initialValue,",
          "30:                               incidentSeverityId:",
          "31:                                   props.incidentSeverityDropdownOptions.find(",
          "32:                                       (i: DropdownOption) => {",
          "33:                                           return (",
          "34:                                               i.value.toString() ===",
          "35:                                               props.initialValue?.incidentSeverityId?.toString()",
          "36:                                           );",
          "37:                                       }",
          "38:                                   ),",
          "39:                           }",
          "40:                         : {}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Dashboard/src/Components/Form/Monitor/MonitorCriteriaInstance.tsx||Dashboard/src/Components/Form/Monitor/MonitorCriteriaInstance.tsx": [
          "File: Dashboard/src/Components/Form/Monitor/MonitorCriteriaInstance.tsx -> Dashboard/src/Components/Form/Monitor/MonitorCriteriaInstance.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:                     required={true}",
          "102:                 />",
          "103:                 <Input",
          "105:                         monitorCriteriaInstance?.data?.name?.toString() || ''",
          "106:                     }",
          "107:                     onBlur={() => {",
          "",
          "[Removed Lines]",
          "104:                     initialValue={",
          "",
          "[Added Lines]",
          "104:                     value={",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:                     required={true}",
          "160:                 />",
          "161:                 <TextArea",
          "163:                         monitorCriteriaInstance?.data?.description?.toString() ||",
          "164:                         ''",
          "165:                     }",
          "",
          "[Removed Lines]",
          "162:                     initialValue={",
          "",
          "[Added Lines]",
          "162:                     value={",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:                     required={true}",
          "216:                 />",
          "217:                 <Radio",
          "219:                         (i: DropdownOption) => {",
          "220:                             return (",
          "221:                                 i.value ===",
          "",
          "[Removed Lines]",
          "218:                     initialValue={filterConditionOptions.find(",
          "",
          "[Added Lines]",
          "218:                     value={filterConditionOptions.find(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:             <div className=\"mt-4\">",
          "264:                 <Toggle",
          "266:                     title=\"When filters match, change monitor status.\"",
          "267:                     onChange={(value: boolean) => {",
          "268:                         setShowMonitorStatusChangeControl(value);",
          "",
          "[Removed Lines]",
          "265:                     initialValue={Boolean(showMonitorStatusChangeControl)}",
          "",
          "[Added Lines]",
          "265:                     value={Boolean(showMonitorStatusChangeControl)}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290:                         description=\"What would like the monitor status to be when the criteria is met?\"",
          "291:                     />",
          "292:                     <Dropdown",
          "294:                             (i: DropdownOption) => {",
          "295:                                 return (",
          "296:                                     i.value ===",
          "",
          "[Removed Lines]",
          "293:                         initialValue={props.monitorStatusDropdownOptions.find(",
          "",
          "[Added Lines]",
          "293:                         value={props.monitorStatusDropdownOptions.find(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "321:             <div className=\"mt-4\">",
          "322:                 <Toggle",
          "324:                     title=\"When filters match, create an incident.\"",
          "325:                     onChange={(value: boolean) => {",
          "326:                         setShowIncidentControl(value);",
          "",
          "[Removed Lines]",
          "323:                     initialValue={showIncidentControl}",
          "",
          "[Added Lines]",
          "323:                     value={showIncidentControl}",
          "",
          "---------------"
        ],
        "Dashboard/src/Components/Header/ProjectPicker.tsx||Dashboard/src/Components/Header/ProjectPicker.tsx": [
          "File: Dashboard/src/Components/Header/ProjectPicker.tsx -> Dashboard/src/Components/Header/ProjectPicker.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         return (",
          "62:             <Toggle",
          "63:                 title=\"Yearly Plan\"",
          "65:                 description=\"(Save 20%)\"",
          "66:                 onChange={(value: boolean) => {",
          "67:                     setIsSubscriptionPlanYearly(value);",
          "",
          "[Removed Lines]",
          "64:                 initialValue={isSubscriptionPlanYearly}",
          "",
          "[Added Lines]",
          "64:                 value={isSubscriptionPlanYearly}",
          "",
          "---------------"
        ],
        "Dashboard/src/Components/Header/Upgrade.tsx||Dashboard/src/Components/Header/Upgrade.tsx": [
          "File: Dashboard/src/Components/Header/Upgrade.tsx -> Dashboard/src/Components/Header/Upgrade.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:         return (",
          "27:             <Toggle",
          "28:                 title=\"Yearly Plan\"",
          "30:                 description=\"(Save 20%)\"",
          "31:                 onChange={(value: boolean) => {",
          "32:                     setIsSubscriptionPlanYearly(value);",
          "",
          "[Removed Lines]",
          "29:                 initialValue={isSubscriptionPlanYearly}",
          "",
          "[Added Lines]",
          "29:                 value={isSubscriptionPlanYearly}",
          "",
          "---------------"
        ],
        "Dashboard/src/Pages/Settings/Billing.tsx||Dashboard/src/Pages/Settings/Billing.tsx": [
          "File: Dashboard/src/Pages/Settings/Billing.tsx -> Dashboard/src/Pages/Settings/Billing.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         return (",
          "150:             <Toggle",
          "151:                 title=\"Yearly Plan\"",
          "153:                 description=\"(Save 20%)\"",
          "154:                 onChange={(value: boolean) => {",
          "155:                     setIsSubscriptionPlanYearly(value);",
          "",
          "[Removed Lines]",
          "152:                 initialValue={isSubscriptionPlanYearly}",
          "",
          "[Added Lines]",
          "152:                 value={isSubscriptionPlanYearly}",
          "",
          "---------------"
        ],
        "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts": [
          "File: Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts -> Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:                 ' - evaluates to true.';",
          "84:         } else if (criteriaFilter?.checkOn === CheckOn.IsOnline) {",
          "85:             if (criteriaFilter?.filterType === FilterType.True) {",
          "87:             } else {",
          "89:             }",
          "90:         } else {",
          "91:             text += criteriaFilter?.checkOn.toString().toLowerCase() + ' ';",
          "",
          "[Removed Lines]",
          "86:                 text += ' is online ';",
          "88:                 text += ' is offline ';",
          "",
          "[Added Lines]",
          "86:                 text += 'the resource is online ';",
          "88:                 text += 'the resource is offline ';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec0dafb7a6b765f5319eac2c5effdfa47e3f5e75",
      "candidate_info": {
        "commit_hash": "ec0dafb7a6b765f5319eac2c5effdfa47e3f5e75",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/ec0dafb7a6b765f5319eac2c5effdfa47e3f5e75",
        "files": [
          "Ingestor/API/Probe.ts",
          "Ingestor/Types/DataToProcess.ts",
          "Ingestor/Utils/Criteria/APIRequestCriteria.ts",
          "Ingestor/Utils/Criteria/IncomingRequestCriteria.ts",
          "Ingestor/Utils/Criteria/ServerMonitorCriteria.ts",
          "Ingestor/Utils/ProbeMonitorResponse.ts"
        ],
        "message": "Fix import path in Probe.ts",
        "before_after_code_files": [
          "Ingestor/API/Probe.ts||Ingestor/API/Probe.ts",
          "Ingestor/Types/DataToProcess.ts||Ingestor/Types/DataToProcess.ts",
          "Ingestor/Utils/Criteria/APIRequestCriteria.ts||Ingestor/Utils/Criteria/APIRequestCriteria.ts",
          "Ingestor/Utils/Criteria/IncomingRequestCriteria.ts||Ingestor/Utils/Criteria/IncomingRequestCriteria.ts",
          "Ingestor/Utils/Criteria/ServerMonitorCriteria.ts||Ingestor/Utils/Criteria/ServerMonitorCriteria.ts",
          "CommonServer/Utils/Probe/ProbeMonitorResponse.ts||Ingestor/Utils/ProbeMonitorResponse.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Ingestor/API/Probe.ts||Ingestor/API/Probe.ts": [
          "File: Ingestor/API/Probe.ts -> Ingestor/API/Probe.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import ProbeMonitorResponse from 'Common/Types/Probe/ProbeMonitorResponse';",
          "10: import ProbeApiIngestResponse from 'Common/Types/Probe/ProbeApiIngestResponse';",
          "11: import BadDataException from 'Common/Types/Exception/BadDataException';",
          "13: import JSONFunctions from 'Common/Types/JSONFunctions';",
          "14: import { DisableAutomaticIncidentCreation } from 'CommonServer/EnvironmentConfig';",
          "",
          "[Removed Lines]",
          "12: import ProbeMonitorResponseService from 'CommonServer/Utils/Probe/ProbeMonitorResponse';",
          "",
          "[Added Lines]",
          "12: import ProbeMonitorResponseService from '../Utils/ProbeMonitorResponse';",
          "",
          "---------------"
        ],
        "Ingestor/Types/DataToProcess.ts||Ingestor/Types/DataToProcess.ts": [
          "File: Ingestor/Types/DataToProcess.ts -> Ingestor/Types/DataToProcess.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import IncomingMonitorRequest from 'Common/Types/Monitor/IncomingMonitor/IncomingMonitorRequest';",
          "2: import ServerMonitorResponse from 'Common/Types/Monitor/ServerMonitor/ServerMonitorResponse';",
          "3: import ProbeMonitorResponse from 'Common/Types/Probe/ProbeMonitorResponse';",
          "5: type DataToProcess =",
          "6:     | ProbeMonitorResponse",
          "7:     | IncomingMonitorRequest",
          "8:     | ServerMonitorResponse;",
          "10: export default DataToProcess;",
          "",
          "---------------"
        ],
        "Ingestor/Utils/Criteria/APIRequestCriteria.ts||Ingestor/Utils/Criteria/APIRequestCriteria.ts": [
          "File: Ingestor/Utils/Criteria/APIRequestCriteria.ts -> Ingestor/Utils/Criteria/APIRequestCriteria.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import DataToProcess from '../../Types/DataToProcess';",
          "2: import {",
          "3:     CheckOn,",
          "4:     CriteriaFilter,",
          "5:     FilterType,",
          "6: } from 'Common/Types/Monitor/CriteriaFilter';",
          "7: import logger from 'CommonServer/Utils/Logger';",
          "8: import Typeof from 'Common/Types/Typeof';",
          "9: import { JSONObject } from 'Common/Types/JSON';",
          "10: import ProbeMonitorResponse from 'Common/Types/Probe/ProbeMonitorResponse';",
          "12: export default class APIRequestCriteria {",
          "13:     public static async isMonitorInstanceCriteriaFilterMet(input: {",
          "14:         dataToProcess: DataToProcess;",
          "15:         criteriaFilter: CriteriaFilter;",
          "16:     }): Promise<string | null> {",
          "19:         let value: number | string | undefined = input.criteriaFilter.value;",
          "22:         if (input.criteriaFilter.checkOn === CheckOn.ResponseTime) {",
          "23:             if (!value) {",
          "24:                 return null;",
          "25:             }",
          "27:             if (typeof value === Typeof.String) {",
          "28:                 try {",
          "29:                     value = parseInt(value as string);",
          "30:                 } catch (err) {",
          "31:                     logger.error(err);",
          "32:                     return null;",
          "33:                 }",
          "34:             }",
          "36:             if (typeof value !== Typeof.Number) {",
          "37:                 return null;",
          "38:             }",
          "40:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "41:                 if (",
          "42:                     (input.dataToProcess as ProbeMonitorResponse)",
          "43:                         .responseTimeInMs &&",
          "44:                     (input.dataToProcess as ProbeMonitorResponse)",
          "45:                         .responseTimeInMs! > (value as number)",
          "46:                 ) {",
          "47:                     return `Response time is ${",
          "48:                         (input.dataToProcess as ProbeMonitorResponse)",
          "49:                             .responseTimeInMs",
          "50:                     } ms which is greater than the criteria value of ${value} ms.`;",
          "51:                 }",
          "52:                 return null;",
          "53:             }",
          "55:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "56:                 if (",
          "57:                     (input.dataToProcess as ProbeMonitorResponse)",
          "58:                         .responseTimeInMs &&",
          "59:                     (input.dataToProcess as ProbeMonitorResponse)",
          "60:                         .responseTimeInMs! < (value as number)",
          "61:                 ) {",
          "62:                     return `Response time is ${",
          "63:                         (input.dataToProcess as ProbeMonitorResponse)",
          "64:                             .responseTimeInMs",
          "65:                     } ms which is less than the criteria value of ${value} ms.`;",
          "66:                 }",
          "67:                 return null;",
          "68:             }",
          "70:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "71:                 if (",
          "72:                     (input.dataToProcess as ProbeMonitorResponse)",
          "73:                         .responseTimeInMs &&",
          "74:                     (input.dataToProcess as ProbeMonitorResponse)",
          "75:                         .responseTimeInMs === (value as number)",
          "76:                 ) {",
          "77:                     return `Response time is ${",
          "78:                         (input.dataToProcess as ProbeMonitorResponse)",
          "79:                             .responseTimeInMs",
          "80:                     } ms.`;",
          "81:                 }",
          "82:                 return null;",
          "83:             }",
          "85:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "86:                 if (",
          "87:                     (input.dataToProcess as ProbeMonitorResponse)",
          "88:                         .responseTimeInMs &&",
          "89:                     (input.dataToProcess as ProbeMonitorResponse)",
          "90:                         .responseTimeInMs !== (value as number)",
          "91:                 ) {",
          "92:                     return `Response time is ${",
          "93:                         (input.dataToProcess as ProbeMonitorResponse)",
          "94:                             .responseTimeInMs",
          "95:                     } ms which is not equal to the criteria value of ${value} ms.`;",
          "96:                 }",
          "97:                 return null;",
          "98:             }",
          "100:             if (",
          "101:                 input.criteriaFilter.filterType ===",
          "102:                 FilterType.GreaterThanOrEqualTo",
          "103:             ) {",
          "104:                 if (",
          "105:                     (input.dataToProcess as ProbeMonitorResponse)",
          "106:                         .responseTimeInMs &&",
          "107:                     (input.dataToProcess as ProbeMonitorResponse)",
          "108:                         .responseTimeInMs! >= (value as number)",
          "109:                 ) {",
          "110:                     return `Response time is ${",
          "111:                         (input.dataToProcess as ProbeMonitorResponse)",
          "112:                             .responseTimeInMs",
          "113:                     } ms which is greater than or equal to the criteria value of ${value} ms.`;",
          "114:                 }",
          "115:                 return null;",
          "116:             }",
          "118:             if (",
          "119:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "120:             ) {",
          "121:                 if (",
          "122:                     (input.dataToProcess as ProbeMonitorResponse)",
          "123:                         .responseTimeInMs &&",
          "124:                     (input.dataToProcess as ProbeMonitorResponse)",
          "125:                         .responseTimeInMs! <= (value as number)",
          "126:                 ) {",
          "127:                     return `Response time is ${",
          "128:                         (input.dataToProcess as ProbeMonitorResponse)",
          "129:                             .responseTimeInMs",
          "130:                     } ms which is less than or equal to the criteria value of ${value} ms.`;",
          "131:                 }",
          "132:                 return null;",
          "133:             }",
          "134:         }",
          "137:         if (input.criteriaFilter.checkOn === CheckOn.ResponseStatusCode) {",
          "138:             if (!value) {",
          "139:                 return null;",
          "140:             }",
          "142:             if (typeof value === Typeof.String) {",
          "143:                 try {",
          "144:                     value = parseInt(value as string);",
          "145:                 } catch (err) {",
          "146:                     logger.error(err);",
          "147:                     return null;",
          "148:                 }",
          "149:             }",
          "151:             if (typeof value !== Typeof.Number) {",
          "152:                 return null;",
          "153:             }",
          "155:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "156:                 if (",
          "157:                     (input.dataToProcess as ProbeMonitorResponse)",
          "158:                         .responseCode &&",
          "159:                     (input.dataToProcess as ProbeMonitorResponse)",
          "160:                         .responseCode! > (value as number)",
          "161:                 ) {",
          "162:                     return `Response status code is ${",
          "163:                         (input.dataToProcess as ProbeMonitorResponse)",
          "164:                             .responseCode",
          "165:                     } which is greater than the criteria value of ${value}.`;",
          "166:                 }",
          "167:                 return null;",
          "168:             }",
          "170:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "171:                 if (",
          "172:                     (input.dataToProcess as ProbeMonitorResponse)",
          "173:                         .responseCode &&",
          "174:                     (input.dataToProcess as ProbeMonitorResponse)",
          "175:                         .responseCode! < (value as number)",
          "176:                 ) {",
          "177:                     return `Response status code is ${",
          "178:                         (input.dataToProcess as ProbeMonitorResponse)",
          "179:                             .responseCode",
          "180:                     } which is less than the criteria value of ${value}.`;",
          "181:                 }",
          "182:                 return null;",
          "183:             }",
          "185:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "186:                 if (",
          "187:                     (input.dataToProcess as ProbeMonitorResponse)",
          "188:                         .responseCode &&",
          "189:                     (input.dataToProcess as ProbeMonitorResponse)",
          "190:                         .responseCode === (value as number)",
          "191:                 ) {",
          "192:                     return `Response status code is ${",
          "193:                         (input.dataToProcess as ProbeMonitorResponse)",
          "194:                             .responseCode",
          "195:                     }.`;",
          "196:                 }",
          "197:                 return null;",
          "198:             }",
          "200:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "201:                 if (",
          "202:                     (input.dataToProcess as ProbeMonitorResponse)",
          "203:                         .responseCode &&",
          "204:                     (input.dataToProcess as ProbeMonitorResponse)",
          "205:                         .responseCode !== (value as number)",
          "206:                 ) {",
          "207:                     return `Response status code is ${",
          "208:                         (input.dataToProcess as ProbeMonitorResponse)",
          "209:                             .responseCode",
          "210:                     } which is not equal to the criteria value of ${value}.`;",
          "211:                 }",
          "212:                 return null;",
          "213:             }",
          "215:             if (",
          "216:                 input.criteriaFilter.filterType ===",
          "217:                 FilterType.GreaterThanOrEqualTo",
          "218:             ) {",
          "219:                 if (",
          "220:                     (input.dataToProcess as ProbeMonitorResponse)",
          "221:                         .responseCode &&",
          "222:                     (input.dataToProcess as ProbeMonitorResponse)",
          "223:                         .responseCode! >= (value as number)",
          "224:                 ) {",
          "225:                     return `Response status code is ${",
          "226:                         (input.dataToProcess as ProbeMonitorResponse)",
          "227:                             .responseCode",
          "228:                     } which is greater than or equal to the criteria value of ${value}.`;",
          "229:                 }",
          "230:                 return null;",
          "231:             }",
          "233:             if (",
          "234:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "235:             ) {",
          "236:                 if (",
          "237:                     (input.dataToProcess as ProbeMonitorResponse)",
          "238:                         .responseCode &&",
          "239:                     (input.dataToProcess as ProbeMonitorResponse)",
          "240:                         .responseCode! <= (value as number)",
          "241:                 ) {",
          "242:                     return `Response status code is ${",
          "243:                         (input.dataToProcess as ProbeMonitorResponse)",
          "244:                             .responseCode",
          "245:                     } which is less than or equal to the criteria value of ${value}.`;",
          "246:                 }",
          "247:                 return null;",
          "248:             }",
          "249:         }",
          "251:         if (input.criteriaFilter.checkOn === CheckOn.ResponseBody) {",
          "252:             let responseBody: string | JSONObject | undefined = (",
          "253:                 input.dataToProcess as ProbeMonitorResponse",
          "254:             ).responseBody;",
          "256:             if (responseBody && typeof responseBody === Typeof.Object) {",
          "257:                 responseBody = JSON.stringify(responseBody);",
          "258:             }",
          "260:             if (!responseBody) {",
          "261:                 return null;",
          "262:             }",
          "265:             if (input.criteriaFilter.filterType === FilterType.Contains) {",
          "266:                 if (",
          "267:                     value &&",
          "268:                     responseBody &&",
          "269:                     (responseBody as string).includes(value as string)",
          "270:                 ) {",
          "271:                     return `Response body contains ${value}.`;",
          "272:                 }",
          "273:                 return null;",
          "274:             }",
          "276:             if (input.criteriaFilter.filterType === FilterType.NotContains) {",
          "277:                 if (",
          "278:                     value &&",
          "279:                     responseBody &&",
          "280:                     !(responseBody as string).includes(value as string)",
          "281:                 ) {",
          "282:                     return `Response body does not contain ${value}.`;",
          "283:                 }",
          "284:                 return null;",
          "285:             }",
          "286:         }",
          "288:         if (input.criteriaFilter.checkOn === CheckOn.ResponseHeader) {",
          "289:             const headerKeys: Array<string> = Object.keys(",
          "290:                 (input.dataToProcess as ProbeMonitorResponse).responseHeaders ||",
          "291:                     {}",
          "292:             ).map((key: string) => {",
          "293:                 return key.toLowerCase();",
          "294:             });",
          "297:             if (input.criteriaFilter.filterType === FilterType.Contains) {",
          "298:                 if (",
          "299:                     value &&",
          "300:                     headerKeys &&",
          "301:                     headerKeys.includes(value as string)",
          "302:                 ) {",
          "303:                     return `Response header contains ${value}.`;",
          "304:                 }",
          "305:                 return null;",
          "306:             }",
          "308:             if (input.criteriaFilter.filterType === FilterType.NotContains) {",
          "309:                 if (",
          "310:                     value &&",
          "311:                     headerKeys &&",
          "312:                     !headerKeys.includes(value as string)",
          "313:                 ) {",
          "314:                     return `Response header does not contain ${value}.`;",
          "315:                 }",
          "316:                 return null;",
          "317:             }",
          "318:         }",
          "320:         if (input.criteriaFilter.checkOn === CheckOn.ResponseHeaderValue) {",
          "321:             const headerValues: Array<string> = Object.values(",
          "322:                 (input.dataToProcess as ProbeMonitorResponse).responseHeaders ||",
          "323:                     {}",
          "324:             ).map((key: string) => {",
          "325:                 return key.toLowerCase();",
          "326:             });",
          "329:             if (input.criteriaFilter.filterType === FilterType.Contains) {",
          "330:                 if (",
          "331:                     value &&",
          "332:                     headerValues &&",
          "333:                     headerValues.includes(value as string)",
          "334:                 ) {",
          "335:                     return `Response header value contains ${value}.`;",
          "336:                 }",
          "337:                 return null;",
          "338:             }",
          "340:             if (input.criteriaFilter.filterType === FilterType.NotContains) {",
          "341:                 if (",
          "342:                     value &&",
          "343:                     headerValues &&",
          "344:                     !headerValues.includes(value as string)",
          "345:                 ) {",
          "346:                     return `Response header value does not contain ${value}.`;",
          "347:                 }",
          "348:                 return null;",
          "349:             }",
          "350:         }",
          "352:         return null;",
          "353:     }",
          "354: }",
          "",
          "---------------"
        ],
        "Ingestor/Utils/Criteria/IncomingRequestCriteria.ts||Ingestor/Utils/Criteria/IncomingRequestCriteria.ts": [
          "File: Ingestor/Utils/Criteria/IncomingRequestCriteria.ts -> Ingestor/Utils/Criteria/IncomingRequestCriteria.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import DataToProcess from '../../Types/DataToProcess';",
          "2: import {",
          "3:     CheckOn,",
          "4:     CriteriaFilter,",
          "5:     FilterType,",
          "6: } from 'Common/Types/Monitor/CriteriaFilter';",
          "7: import logger from 'CommonServer/Utils/Logger';",
          "8: import Typeof from 'Common/Types/Typeof';",
          "9: import IncomingMonitorRequest from 'Common/Types/Monitor/IncomingMonitor/IncomingMonitorRequest';",
          "10: import { JSONObject } from 'Common/Types/JSON';",
          "11: import OneUptimeDate from 'Common/Types/Date';",
          "13: export default class IncomingRequestCriteria {",
          "14:     public static async isMonitorInstanceCriteriaFilterMet(input: {",
          "15:         dataToProcess: DataToProcess;",
          "16:         criteriaFilter: CriteriaFilter;",
          "17:     }): Promise<string | null> {",
          "20:         let value: number | string | undefined = input.criteriaFilter.value;",
          "24:         if (input.criteriaFilter.checkOn === CheckOn.IncomingRequest) {",
          "25:             const lastCheckTime: Date = (",
          "26:                 input.dataToProcess as IncomingMonitorRequest",
          "27:             ).incomingRequestReceivedAt;",
          "29:             const differenceInMinutes: number =",
          "30:                 OneUptimeDate.getDifferenceInMinutes(",
          "31:                     lastCheckTime,",
          "32:                     OneUptimeDate.getCurrentDate()",
          "33:                 );",
          "35:             if (!value) {",
          "36:                 return null;",
          "37:             }",
          "39:             if (typeof value === Typeof.String) {",
          "40:                 try {",
          "41:                     value = parseInt(value as string);",
          "42:                 } catch (err) {",
          "43:                     logger.error(err);",
          "44:                     return null;",
          "45:                 }",
          "46:             }",
          "48:             if (typeof value !== Typeof.Number) {",
          "49:                 return null;",
          "50:             }",
          "52:             if (",
          "53:                 input.criteriaFilter.filterType === FilterType.RecievedInMinutes",
          "54:             ) {",
          "55:                 if (value && differenceInMinutes <= (value as number)) {",
          "56:                     return `Incoming request / heartbeat received in ${value} minutes.`;",
          "57:                 }",
          "58:                 return null;",
          "59:             }",
          "61:             if (",
          "62:                 input.criteriaFilter.filterType ===",
          "63:                 FilterType.NotRecievedInMinutes",
          "64:             ) {",
          "65:                 if (value && differenceInMinutes > (value as number)) {",
          "66:                     return `Incoming request / heartbeat not received in ${value} minutes.`;",
          "67:                 }",
          "68:                 return null;",
          "69:             }",
          "70:         }",
          "72:         if (",
          "73:             input.criteriaFilter.checkOn === CheckOn.RequestBody &&",
          "74:             !(input.dataToProcess as IncomingMonitorRequest)",
          "75:                 .onlyCheckForIncomingRequestReceivedAt",
          "76:         ) {",
          "77:             let responseBody: string | JSONObject | undefined = (",
          "78:                 input.dataToProcess as IncomingMonitorRequest",
          "79:             ).requestBody;",
          "81:             if (responseBody && typeof responseBody === Typeof.Object) {",
          "82:                 responseBody = JSON.stringify(responseBody);",
          "83:             }",
          "85:             if (!responseBody) {",
          "86:                 return null;",
          "87:             }",
          "90:             if (input.criteriaFilter.filterType === FilterType.Contains) {",
          "91:                 if (",
          "92:                     value &&",
          "93:                     responseBody &&",
          "94:                     (responseBody as string).includes(value as string)",
          "95:                 ) {",
          "96:                     return `Request body contains ${value}.`;",
          "97:                 }",
          "98:                 return null;",
          "99:             }",
          "101:             if (input.criteriaFilter.filterType === FilterType.NotContains) {",
          "102:                 if (",
          "103:                     value &&",
          "104:                     responseBody &&",
          "105:                     !(responseBody as string).includes(value as string)",
          "106:                 ) {",
          "107:                     return `Request body does not contain ${value}.`;",
          "108:                 }",
          "109:                 return null;",
          "110:             }",
          "111:         }",
          "113:         if (",
          "114:             input.criteriaFilter.checkOn === CheckOn.RequestHeader &&",
          "115:             !(input.dataToProcess as IncomingMonitorRequest)",
          "116:                 .onlyCheckForIncomingRequestReceivedAt",
          "117:         ) {",
          "118:             const headerKeys: Array<string> = Object.keys(",
          "119:                 (input.dataToProcess as IncomingMonitorRequest)",
          "120:                     .requestHeaders || {}",
          "121:             ).map((key: string) => {",
          "122:                 return key.toLowerCase();",
          "123:             });",
          "126:             if (input.criteriaFilter.filterType === FilterType.Contains) {",
          "127:                 if (",
          "128:                     value &&",
          "129:                     headerKeys &&",
          "130:                     headerKeys.includes(value as string)",
          "131:                 ) {",
          "132:                     return `Request header contains ${value}.`;",
          "133:                 }",
          "134:                 return null;",
          "135:             }",
          "137:             if (input.criteriaFilter.filterType === FilterType.NotContains) {",
          "138:                 if (",
          "139:                     value &&",
          "140:                     headerKeys &&",
          "141:                     !headerKeys.includes(value as string)",
          "142:                 ) {",
          "143:                     return `Request header does not contain ${value}.`;",
          "144:                 }",
          "145:                 return null;",
          "146:             }",
          "147:         }",
          "149:         if (",
          "150:             input.criteriaFilter.checkOn === CheckOn.RequestHeaderValue &&",
          "151:             !(input.dataToProcess as IncomingMonitorRequest)",
          "152:                 .onlyCheckForIncomingRequestReceivedAt",
          "153:         ) {",
          "154:             const headerValues: Array<string> = Object.values(",
          "155:                 (input.dataToProcess as IncomingMonitorRequest)",
          "156:                     .requestHeaders || {}",
          "157:             ).map((key: string) => {",
          "158:                 return key.toLowerCase();",
          "159:             });",
          "162:             if (input.criteriaFilter.filterType === FilterType.Contains) {",
          "163:                 if (",
          "164:                     value &&",
          "165:                     headerValues &&",
          "166:                     headerValues.includes(value as string)",
          "167:                 ) {",
          "168:                     return `Request header value contains ${value}.`;",
          "169:                 }",
          "170:                 return null;",
          "171:             }",
          "173:             if (input.criteriaFilter.filterType === FilterType.NotContains) {",
          "174:                 if (",
          "175:                     value &&",
          "176:                     headerValues &&",
          "177:                     !headerValues.includes(value as string)",
          "178:                 ) {",
          "179:                     return `Request header value does not contain ${value}.`;",
          "180:                 }",
          "181:                 return null;",
          "182:             }",
          "183:         }",
          "185:         return null;",
          "186:     }",
          "187: }",
          "",
          "---------------"
        ],
        "Ingestor/Utils/Criteria/ServerMonitorCriteria.ts||Ingestor/Utils/Criteria/ServerMonitorCriteria.ts": [
          "File: Ingestor/Utils/Criteria/ServerMonitorCriteria.ts -> Ingestor/Utils/Criteria/ServerMonitorCriteria.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import DataToProcess from '../../Types/DataToProcess';",
          "2: import {",
          "3:     CheckOn,",
          "4:     CriteriaFilter,",
          "5:     FilterType,",
          "6: } from 'Common/Types/Monitor/CriteriaFilter';",
          "7: import { BasicDiskMetrics } from 'Common/Types/Infrastructure/BasicMetrics';",
          "8: import ServerMonitorResponse from 'Common/Types/Monitor/ServerMonitor/ServerMonitorResponse';",
          "9: import logger from 'CommonServer/Utils/Logger';",
          "10: import Typeof from 'Common/Types/Typeof';",
          "11: import OneUptimeDate from 'Common/Types/Date';",
          "12: import ProbeMonitorResponse from 'Common/Types/Probe/ProbeMonitorResponse';",
          "14: export default class ServerMonitorCriteria {",
          "15:     public static async isMonitorInstanceCriteriaFilterMet(input: {",
          "16:         dataToProcess: DataToProcess;",
          "17:         criteriaFilter: CriteriaFilter;",
          "18:     }): Promise<string | null> {",
          "21:         let value: number | string | undefined = input.criteriaFilter.value;",
          "23:         if (",
          "24:             (input.dataToProcess as ServerMonitorResponse)",
          "25:                 .onlyCheckRequestReceivedAt",
          "26:         ) {",
          "27:             const lastCheckTime: Date = (",
          "28:                 input.dataToProcess as ServerMonitorResponse",
          "29:             ).requestReceivedAt;",
          "31:             const differenceInMinutes: number =",
          "32:                 OneUptimeDate.getDifferenceInMinutes(",
          "33:                     lastCheckTime,",
          "34:                     OneUptimeDate.getCurrentDate()",
          "35:                 );",
          "37:             const offlineIfNotCheckedInMinutes: number = 2;",
          "39:             if (",
          "40:                 input.criteriaFilter.checkOn === CheckOn.IsOnline &&",
          "41:                 input.criteriaFilter.filterType === FilterType.True &&",
          "42:                 differenceInMinutes <= offlineIfNotCheckedInMinutes",
          "43:             ) {",
          "44:                 if ((input.dataToProcess as ProbeMonitorResponse).isOnline) {",
          "45:                     return 'Monitor is online.';",
          "46:                 }",
          "48:                 return null;",
          "49:             }",
          "51:             if (",
          "52:                 input.criteriaFilter.checkOn === CheckOn.IsOnline &&",
          "53:                 input.criteriaFilter.filterType === FilterType.False &&",
          "54:                 differenceInMinutes > offlineIfNotCheckedInMinutes",
          "55:             ) {",
          "56:                 if (!(input.dataToProcess as ProbeMonitorResponse).isOnline) {",
          "57:                     return 'Monitor is offline.';",
          "58:                 }",
          "59:                 return null;",
          "60:             }",
          "61:         }",
          "63:         if (",
          "64:             input.criteriaFilter.checkOn === CheckOn.CPUUsagePercent &&",
          "65:             !(input.dataToProcess as ServerMonitorResponse)",
          "66:                 .onlyCheckRequestReceivedAt",
          "67:         ) {",
          "68:             if (!value) {",
          "69:                 return null;",
          "70:             }",
          "72:             if (typeof value === Typeof.String) {",
          "73:                 try {",
          "74:                     value = parseInt(value as string);",
          "75:                 } catch (err) {",
          "76:                     logger.error(err);",
          "77:                     return null;",
          "78:                 }",
          "79:             }",
          "81:             if (typeof value !== Typeof.Number) {",
          "82:                 return null;",
          "83:             }",
          "85:             const currentCpuPercent: number =",
          "86:                 (input.dataToProcess as ServerMonitorResponse)",
          "87:                     .basicInfrastructureMetrics?.cpuMetrics.percentUsed || 0;",
          "89:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "90:                 if (currentCpuPercent > (value as number)) {",
          "91:                     return `CPU Percent is ${currentCpuPercent}% which is greater than the criteria value of ${value}%.`;",
          "92:                 }",
          "94:                 return null;",
          "95:             }",
          "97:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "98:                 if (currentCpuPercent < (value as number)) {",
          "99:                     return `CPU Percent is ${currentCpuPercent}% which is less than than the criteria value of ${value}%.`;",
          "100:                 }",
          "102:                 return null;",
          "103:             }",
          "105:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "106:                 if (currentCpuPercent === (value as number)) {",
          "107:                     return `CPU Percent is ${currentCpuPercent}% which is equal to the criteria value of ${value}%.`;",
          "108:                 }",
          "110:                 return null;",
          "111:             }",
          "113:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "114:                 if (currentCpuPercent !== (value as number)) {",
          "115:                     return `CPU Percent is ${currentCpuPercent}% which is not equal to the criteria value of ${value}%.`;",
          "116:                 }",
          "118:                 return null;",
          "119:             }",
          "121:             if (",
          "122:                 input.criteriaFilter.filterType ===",
          "123:                 FilterType.GreaterThanOrEqualTo",
          "124:             ) {",
          "125:                 if (currentCpuPercent >= (value as number)) {",
          "126:                     return `CPU Percent is ${currentCpuPercent}% which is greater than or equal to the criteria value of ${value}%.`;",
          "127:                 }",
          "129:                 return null;",
          "130:             }",
          "132:             if (",
          "133:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "134:             ) {",
          "135:                 if (currentCpuPercent <= (value as number)) {",
          "136:                     return `CPU Percent is ${currentCpuPercent}% which is less than or equal to the criteria value of ${value}%.`;",
          "137:                 }",
          "139:                 return null;",
          "140:             }",
          "141:         }",
          "143:         if (",
          "144:             input.criteriaFilter.checkOn === CheckOn.MemoryUsagePercent &&",
          "145:             !(input.dataToProcess as ServerMonitorResponse)",
          "146:                 .onlyCheckRequestReceivedAt",
          "147:         ) {",
          "148:             if (!value) {",
          "149:                 return null;",
          "150:             }",
          "152:             if (typeof value === Typeof.String) {",
          "153:                 try {",
          "154:                     value = parseInt(value as string);",
          "155:                 } catch (err) {",
          "156:                     logger.error(err);",
          "157:                     return null;",
          "158:                 }",
          "159:             }",
          "161:             if (typeof value !== Typeof.Number) {",
          "162:                 return null;",
          "163:             }",
          "165:             const memoryPercent: number =",
          "166:                 (input.dataToProcess as ServerMonitorResponse)",
          "167:                     .basicInfrastructureMetrics?.memoryMetrics.percentFree || 0;",
          "169:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "170:                 if (memoryPercent > (value as number)) {",
          "171:                     return `Memory Percent is ${memoryPercent}% which is greater than the criteria value of ${value}%.`;",
          "172:                 }",
          "174:                 return null;",
          "175:             }",
          "177:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "178:                 if (memoryPercent < (value as number)) {",
          "179:                     return `Memory Percent is ${memoryPercent}% which is less than than the criteria value of ${value}%.`;",
          "180:                 }",
          "182:                 return null;",
          "183:             }",
          "185:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "186:                 if (memoryPercent === (value as number)) {",
          "187:                     return `Memory Percent is ${memoryPercent}% which is equal to the criteria value of ${value}%.`;",
          "188:                 }",
          "190:                 return null;",
          "191:             }",
          "193:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "194:                 if (memoryPercent !== (value as number)) {",
          "195:                     return `Memory Percent is ${memoryPercent}% which is not equal to the criteria value of ${value}%.`;",
          "196:                 }",
          "198:                 return null;",
          "199:             }",
          "201:             if (",
          "202:                 input.criteriaFilter.filterType ===",
          "203:                 FilterType.GreaterThanOrEqualTo",
          "204:             ) {",
          "205:                 if (memoryPercent >= (value as number)) {",
          "206:                     return `Memory Percent is ${memoryPercent}% which is greater than or equal to the criteria value of ${value}%.`;",
          "207:                 }",
          "209:                 return null;",
          "210:             }",
          "212:             if (",
          "213:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "214:             ) {",
          "215:                 if (memoryPercent <= (value as number)) {",
          "216:                     return `Memory Percent is ${memoryPercent}% which is less than or equal to the criteria value of ${value}%.`;",
          "217:                 }",
          "219:                 return null;",
          "220:             }",
          "221:         }",
          "223:         if (",
          "224:             input.criteriaFilter.checkOn === CheckOn.DiskUsagePercent &&",
          "225:             !(input.dataToProcess as ServerMonitorResponse)",
          "226:                 .onlyCheckRequestReceivedAt",
          "227:         ) {",
          "228:             if (!value) {",
          "229:                 return null;",
          "230:             }",
          "232:             if (typeof value === Typeof.String) {",
          "233:                 try {",
          "234:                     value = parseInt(value as string);",
          "235:                 } catch (err) {",
          "236:                     logger.error(err);",
          "237:                     return null;",
          "238:                 }",
          "239:             }",
          "241:             if (typeof value !== Typeof.Number) {",
          "242:                 return null;",
          "243:             }",
          "245:             const diskPath: string =",
          "246:                 input.criteriaFilter.serverMonitorOptions?.diskPath || '/';",
          "248:             const diskPercent: number =",
          "249:                 (",
          "250:                     input.dataToProcess as ServerMonitorResponse",
          "251:                 ).basicInfrastructureMetrics?.diskMetrics.filter(",
          "252:                     (item: BasicDiskMetrics) => {",
          "253:                         return (",
          "254:                             item.diskPath.trim().toLowerCase() ===",
          "255:                             diskPath.trim().toLowerCase()",
          "256:                         );",
          "257:                     }",
          "258:                 )[0]?.percentFree || 0;",
          "260:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "261:                 if (diskPercent > (value as number)) {",
          "262:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is greater than the criteria value of ${value}%.`;",
          "263:                 }",
          "265:                 return null;",
          "266:             }",
          "268:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "269:                 if (diskPercent < (value as number)) {",
          "270:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is less than than the criteria value of ${value}%.`;",
          "271:                 }",
          "273:                 return null;",
          "274:             }",
          "276:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "277:                 if (diskPercent === (value as number)) {",
          "278:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is equal to the criteria value of ${value}%.`;",
          "279:                 }",
          "281:                 return null;",
          "282:             }",
          "284:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "285:                 if (diskPercent !== (value as number)) {",
          "286:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is not equal to the criteria value of ${value}%.`;",
          "287:                 }",
          "289:                 return null;",
          "290:             }",
          "292:             if (",
          "293:                 input.criteriaFilter.filterType ===",
          "294:                 FilterType.GreaterThanOrEqualTo",
          "295:             ) {",
          "296:                 if (diskPercent >= (value as number)) {",
          "297:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is greater than or equal to the criteria value of ${value}%.`;",
          "298:                 }",
          "300:                 return null;",
          "301:             }",
          "303:             if (",
          "304:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "305:             ) {",
          "306:                 if (diskPercent <= (value as number)) {",
          "307:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is less than or equal to the criteria value of ${value}%.`;",
          "308:                 }",
          "310:                 return null;",
          "311:             }",
          "312:         }",
          "314:         return null;",
          "315:     }",
          "316: }",
          "",
          "---------------"
        ],
        "CommonServer/Utils/Probe/ProbeMonitorResponse.ts||Ingestor/Utils/ProbeMonitorResponse.ts": [
          "File: CommonServer/Utils/Probe/ProbeMonitorResponse.ts -> Ingestor/Utils/ProbeMonitorResponse.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import ProbeApiIngestResponse from 'Common/Types/Probe/ProbeApiIngestResponse';",
          "13: import ProbeMonitorResponse from 'Common/Types/Probe/ProbeMonitorResponse';",
          "14: import Typeof from 'Common/Types/Typeof';",
          "19: import Incident from 'Model/Models/Incident';",
          "20: import Monitor from 'Model/Models/Monitor';",
          "21: import MonitorStatusTimeline from 'Model/Models/MonitorStatusTimeline';",
          "22: import ObjectID from 'Common/Types/ObjectID';",
          "23: import { JSONObject } from 'Common/Types/JSON';",
          "25: import OneUptimeDate from 'Common/Types/Date';",
          "26: import MonitorProbe from 'Model/Models/MonitorProbe';",
          "27: import IncidentStateTimeline from 'Model/Models/IncidentStateTimeline';",
          "29: import { LIMIT_PER_PROJECT } from 'Common/Types/Database/LimitMax';",
          "30: import Dictionary from 'Common/Types/Dictionary';",
          "31: import IncidentSeverity from 'Model/Models/IncidentSeverity';",
          "33: import SortOrder from 'Common/Types/BaseDatabase/SortOrder';",
          "34: import OnCallDutyPolicy from 'Model/Models/OnCallDutyPolicy';",
          "35: import IncomingMonitorRequest from 'Common/Types/Monitor/IncomingMonitor/IncomingMonitorRequest';",
          "36: import MonitorType from 'Common/Types/Monitor/MonitorType';",
          "38: import ServerMonitorResponse from 'Common/Types/Monitor/ServerMonitor/ServerMonitorResponse';",
          "42: import MonitorMetricsByMinute from 'Model/AnalyticsModels/MonitorMetricsByMinute';",
          "50: export default class ProbeMonitorResponseService {",
          "51:     public static async processProbeResponse(",
          "",
          "[Removed Lines]",
          "15: import MonitorService from '../../Services/MonitorService';",
          "16: import MonitorStatusTimelineService from '../../Services/MonitorStatusTimelineService';",
          "17: import IncidentService from '../../Services/IncidentService';",
          "18: import logger from '../../Utils/Logger';",
          "24: import MonitorProbeService from '../../Services/MonitorProbeService';",
          "28: import IncidentStateTimelineService from '../../Services/IncidentStateTimelineService';",
          "32: import IncidentSeverityService from '../../Services/IncidentSeverityService';",
          "37: import VMUtil from '../VM';",
          "39: import BasicInfrastructureMetrics, {",
          "40:     BasicDiskMetrics,",
          "41: } from 'Common/Types/Infrastructure/BasicMetrics';",
          "43: import MonitorMetricsByMinuteService from '../../Services/MonitorMetricsByMinuteService';",
          "45: type DataToProcess =",
          "46:     | ProbeMonitorResponse",
          "47:     | IncomingMonitorRequest",
          "48:     | ServerMonitorResponse;",
          "",
          "[Added Lines]",
          "15: import MonitorService from 'CommonServer/Services/MonitorService';",
          "16: import MonitorStatusTimelineService from 'CommonServer/Services/MonitorStatusTimelineService';",
          "17: import IncidentService from 'CommonServer/Services/IncidentService';",
          "18: import logger from 'CommonServer/Utils/Logger';",
          "24: import MonitorProbeService from 'CommonServer/Services/MonitorProbeService';",
          "28: import IncidentStateTimelineService from 'CommonServer/Services/IncidentStateTimelineService';",
          "32: import IncidentSeverityService from 'CommonServer/Services/IncidentSeverityService';",
          "37: import VMUtil from 'CommonServer/Utils/VM';",
          "39: import BasicInfrastructureMetrics from 'Common/Types/Infrastructure/BasicMetrics';",
          "41: import MonitorMetricsByMinuteService from 'CommonServer/Services/MonitorMetricsByMinuteService';",
          "42: import DataToProcess from '../Types/DataToProcess';",
          "43: import ServerMonitorCriteria from './Criteria/ServerMonitorCriteria';",
          "44: import IncomingRequestCriteria from './Criteria/IncomingRequestCriteria';",
          "45: import APIRequestCriteria from './Criteria/APIRequestCriteria';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "940:     }): Promise<string | null> {",
          "946:         if (input.criteriaFilter.checkOn === CheckOn.JavaScriptExpression) {",
          "947:             let storageMap: JSONObject = {};",
          "",
          "[Removed Lines]",
          "943:         let value: number | string | undefined = input.criteriaFilter.value;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1027:         }",
          "1029:         if (",
          "1033:         ) {",
          "1056:             }",
          "1067:             }",
          "1068:         }",
          "",
          "[Removed Lines]",
          "1030:             input.monitor.monitorType === MonitorType.Server &&",
          "1031:             (input.dataToProcess as ServerMonitorResponse)",
          "1032:                 .onlyCheckRequestReceivedAt",
          "1034:             const lastCheckTime: Date = (",
          "1035:                 input.dataToProcess as ServerMonitorResponse",
          "1036:             ).requestReceivedAt;",
          "1038:             const differenceInMinutes: number =",
          "1039:                 OneUptimeDate.getDifferenceInMinutes(",
          "1040:                     lastCheckTime,",
          "1041:                     OneUptimeDate.getCurrentDate()",
          "1042:                 );",
          "1044:             const offlineIfNotCheckedInMinutes: number = 2;",
          "1046:             if (",
          "1047:                 input.criteriaFilter.checkOn === CheckOn.IsOnline &&",
          "1048:                 input.criteriaFilter.filterType === FilterType.True &&",
          "1049:                 differenceInMinutes <= offlineIfNotCheckedInMinutes",
          "1050:             ) {",
          "1051:                 if ((input.dataToProcess as ProbeMonitorResponse).isOnline) {",
          "1052:                     return 'Monitor is online.';",
          "1053:                 }",
          "1055:                 return null;",
          "1058:             if (",
          "1059:                 input.criteriaFilter.checkOn === CheckOn.IsOnline &&",
          "1060:                 input.criteriaFilter.filterType === FilterType.False &&",
          "1061:                 differenceInMinutes > offlineIfNotCheckedInMinutes",
          "1062:             ) {",
          "1063:                 if (!(input.dataToProcess as ProbeMonitorResponse).isOnline) {",
          "1064:                     return 'Monitor is offline.';",
          "1065:                 }",
          "1066:                 return null;",
          "",
          "[Added Lines]",
          "1025:             input.monitor.monitorType === MonitorType.API ||",
          "1026:             input.monitor.monitorType === MonitorType.Website ||",
          "1027:             input.monitor.monitorType === MonitorType.IP ||",
          "1028:             input.monitor.monitorType === MonitorType.Ping ||",
          "1029:             input.monitor.monitorType === MonitorType.Port",
          "1031:             const apiRequestCriteriaResult: string | null =",
          "1032:                 await APIRequestCriteria.isMonitorInstanceCriteriaFilterMet({",
          "1033:                     dataToProcess: input.dataToProcess,",
          "1034:                     criteriaFilter: input.criteriaFilter,",
          "1035:                 });",
          "1037:             if (apiRequestCriteriaResult) {",
          "1038:                 return apiRequestCriteriaResult;",
          "1039:             }",
          "1040:         }",
          "1042:         if (input.monitor.monitorType === MonitorType.IncomingRequest) {",
          "1044:             const incomingRequestResult: string | null =",
          "1045:                 await IncomingRequestCriteria.isMonitorInstanceCriteriaFilterMet(",
          "1046:                     {",
          "1047:                         dataToProcess: input.dataToProcess,",
          "1048:                         criteriaFilter: input.criteriaFilter,",
          "1049:                     }",
          "1050:                 );",
          "1052:             if (incomingRequestResult) {",
          "1053:                 return incomingRequestResult;",
          "1055:         }",
          "1057:         if (input.monitor.monitorType === MonitorType.Server) {",
          "1059:             const serverMonitorResult =",
          "1060:                 await ServerMonitorCriteria.isMonitorInstanceCriteriaFilterMet({",
          "1061:                     dataToProcess: input.dataToProcess,",
          "1062:                     criteriaFilter: input.criteriaFilter,",
          "1063:                 });",
          "1065:             if (serverMonitorResult) {",
          "1066:                 return serverMonitorResult;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1089:             }",
          "1090:         }",
          "1839:         return null;",
          "1840:     }",
          "1841: }",
          "",
          "[Removed Lines]",
          "1093:         if (input.criteriaFilter.checkOn === CheckOn.ResponseTime) {",
          "1094:             if (!value) {",
          "1095:                 return null;",
          "1096:             }",
          "1098:             if (typeof value === Typeof.String) {",
          "1099:                 try {",
          "1100:                     value = parseInt(value as string);",
          "1101:                 } catch (err) {",
          "1102:                     logger.error(err);",
          "1103:                     return null;",
          "1104:                 }",
          "1105:             }",
          "1107:             if (typeof value !== Typeof.Number) {",
          "1108:                 return null;",
          "1109:             }",
          "1111:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "1112:                 if (",
          "1113:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1114:                         .responseTimeInMs &&",
          "1115:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1116:                         .responseTimeInMs! > (value as number)",
          "1117:                 ) {",
          "1118:                     return `Response time is ${",
          "1119:                         (input.dataToProcess as ProbeMonitorResponse)",
          "1120:                             .responseTimeInMs",
          "1121:                     } ms which is greater than the criteria value of ${value} ms.`;",
          "1122:                 }",
          "1123:                 return null;",
          "1124:             }",
          "1126:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "1127:                 if (",
          "1128:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1129:                         .responseTimeInMs &&",
          "1130:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1131:                         .responseTimeInMs! < (value as number)",
          "1132:                 ) {",
          "1133:                     return `Response time is ${",
          "1134:                         (input.dataToProcess as ProbeMonitorResponse)",
          "1135:                             .responseTimeInMs",
          "1136:                     } ms which is less than the criteria value of ${value} ms.`;",
          "1137:                 }",
          "1138:                 return null;",
          "1139:             }",
          "1141:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "1142:                 if (",
          "1143:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1144:                         .responseTimeInMs &&",
          "1145:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1146:                         .responseTimeInMs === (value as number)",
          "1147:                 ) {",
          "1148:                     return `Response time is ${",
          "1149:                         (input.dataToProcess as ProbeMonitorResponse)",
          "1150:                             .responseTimeInMs",
          "1151:                     } ms.`;",
          "1152:                 }",
          "1153:                 return null;",
          "1154:             }",
          "1156:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "1157:                 if (",
          "1158:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1159:                         .responseTimeInMs &&",
          "1160:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1161:                         .responseTimeInMs !== (value as number)",
          "1162:                 ) {",
          "1163:                     return `Response time is ${",
          "1164:                         (input.dataToProcess as ProbeMonitorResponse)",
          "1165:                             .responseTimeInMs",
          "1166:                     } ms which is not equal to the criteria value of ${value} ms.`;",
          "1167:                 }",
          "1168:                 return null;",
          "1169:             }",
          "1171:             if (",
          "1172:                 input.criteriaFilter.filterType ===",
          "1173:                 FilterType.GreaterThanOrEqualTo",
          "1174:             ) {",
          "1175:                 if (",
          "1176:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1177:                         .responseTimeInMs &&",
          "1178:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1179:                         .responseTimeInMs! >= (value as number)",
          "1180:                 ) {",
          "1181:                     return `Response time is ${",
          "1182:                         (input.dataToProcess as ProbeMonitorResponse)",
          "1183:                             .responseTimeInMs",
          "1184:                     } ms which is greater than or equal to the criteria value of ${value} ms.`;",
          "1185:                 }",
          "1186:                 return null;",
          "1187:             }",
          "1189:             if (",
          "1190:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "1191:             ) {",
          "1192:                 if (",
          "1193:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1194:                         .responseTimeInMs &&",
          "1195:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1196:                         .responseTimeInMs! <= (value as number)",
          "1197:                 ) {",
          "1198:                     return `Response time is ${",
          "1199:                         (input.dataToProcess as ProbeMonitorResponse)",
          "1200:                             .responseTimeInMs",
          "1201:                     } ms which is less than or equal to the criteria value of ${value} ms.`;",
          "1202:                 }",
          "1203:                 return null;",
          "1204:             }",
          "1205:         }",
          "1208:         if (input.criteriaFilter.checkOn === CheckOn.ResponseStatusCode) {",
          "1209:             if (!value) {",
          "1210:                 return null;",
          "1211:             }",
          "1213:             if (typeof value === Typeof.String) {",
          "1214:                 try {",
          "1215:                     value = parseInt(value as string);",
          "1216:                 } catch (err) {",
          "1217:                     logger.error(err);",
          "1218:                     return null;",
          "1219:                 }",
          "1220:             }",
          "1222:             if (typeof value !== Typeof.Number) {",
          "1223:                 return null;",
          "1224:             }",
          "1226:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "1227:                 if (",
          "1228:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1229:                         .responseCode &&",
          "1230:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1231:                         .responseCode! > (value as number)",
          "1232:                 ) {",
          "1233:                     return `Response status code is ${",
          "1234:                         (input.dataToProcess as ProbeMonitorResponse)",
          "1235:                             .responseCode",
          "1236:                     } which is greater than the criteria value of ${value}.`;",
          "1237:                 }",
          "1238:                 return null;",
          "1239:             }",
          "1241:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "1242:                 if (",
          "1243:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1244:                         .responseCode &&",
          "1245:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1246:                         .responseCode! < (value as number)",
          "1247:                 ) {",
          "1248:                     return `Response status code is ${",
          "1249:                         (input.dataToProcess as ProbeMonitorResponse)",
          "1250:                             .responseCode",
          "1251:                     } which is less than the criteria value of ${value}.`;",
          "1252:                 }",
          "1253:                 return null;",
          "1254:             }",
          "1256:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "1257:                 if (",
          "1258:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1259:                         .responseCode &&",
          "1260:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1261:                         .responseCode === (value as number)",
          "1262:                 ) {",
          "1263:                     return `Response status code is ${",
          "1264:                         (input.dataToProcess as ProbeMonitorResponse)",
          "1265:                             .responseCode",
          "1266:                     }.`;",
          "1267:                 }",
          "1268:                 return null;",
          "1269:             }",
          "1271:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "1272:                 if (",
          "1273:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1274:                         .responseCode &&",
          "1275:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1276:                         .responseCode !== (value as number)",
          "1277:                 ) {",
          "1278:                     return `Response status code is ${",
          "1279:                         (input.dataToProcess as ProbeMonitorResponse)",
          "1280:                             .responseCode",
          "1281:                     } which is not equal to the criteria value of ${value}.`;",
          "1282:                 }",
          "1283:                 return null;",
          "1284:             }",
          "1286:             if (",
          "1287:                 input.criteriaFilter.filterType ===",
          "1288:                 FilterType.GreaterThanOrEqualTo",
          "1289:             ) {",
          "1290:                 if (",
          "1291:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1292:                         .responseCode &&",
          "1293:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1294:                         .responseCode! >= (value as number)",
          "1295:                 ) {",
          "1296:                     return `Response status code is ${",
          "1297:                         (input.dataToProcess as ProbeMonitorResponse)",
          "1298:                             .responseCode",
          "1299:                     } which is greater than or equal to the criteria value of ${value}.`;",
          "1300:                 }",
          "1301:                 return null;",
          "1302:             }",
          "1304:             if (",
          "1305:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "1306:             ) {",
          "1307:                 if (",
          "1308:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1309:                         .responseCode &&",
          "1310:                     (input.dataToProcess as ProbeMonitorResponse)",
          "1311:                         .responseCode! <= (value as number)",
          "1312:                 ) {",
          "1313:                     return `Response status code is ${",
          "1314:                         (input.dataToProcess as ProbeMonitorResponse)",
          "1315:                             .responseCode",
          "1316:                     } which is less than or equal to the criteria value of ${value}.`;",
          "1317:                 }",
          "1318:                 return null;",
          "1319:             }",
          "1320:         }",
          "1322:         if (input.criteriaFilter.checkOn === CheckOn.ResponseBody) {",
          "1323:             let responseBody: string | JSONObject | undefined = (",
          "1324:                 input.dataToProcess as ProbeMonitorResponse",
          "1325:             ).responseBody;",
          "1327:             if (responseBody && typeof responseBody === Typeof.Object) {",
          "1328:                 responseBody = JSON.stringify(responseBody);",
          "1329:             }",
          "1331:             if (!responseBody) {",
          "1332:                 return null;",
          "1333:             }",
          "1336:             if (input.criteriaFilter.filterType === FilterType.Contains) {",
          "1337:                 if (",
          "1338:                     value &&",
          "1339:                     responseBody &&",
          "1340:                     (responseBody as string).includes(value as string)",
          "1341:                 ) {",
          "1342:                     return `Response body contains ${value}.`;",
          "1343:                 }",
          "1344:                 return null;",
          "1345:             }",
          "1347:             if (input.criteriaFilter.filterType === FilterType.NotContains) {",
          "1348:                 if (",
          "1349:                     value &&",
          "1350:                     responseBody &&",
          "1351:                     !(responseBody as string).includes(value as string)",
          "1352:                 ) {",
          "1353:                     return `Response body does not contain ${value}.`;",
          "1354:                 }",
          "1355:                 return null;",
          "1356:             }",
          "1357:         }",
          "1359:         if (input.criteriaFilter.checkOn === CheckOn.ResponseHeader) {",
          "1360:             const headerKeys: Array<string> = Object.keys(",
          "1361:                 (input.dataToProcess as ProbeMonitorResponse).responseHeaders ||",
          "1362:                     {}",
          "1363:             ).map((key: string) => {",
          "1364:                 return key.toLowerCase();",
          "1365:             });",
          "1368:             if (input.criteriaFilter.filterType === FilterType.Contains) {",
          "1369:                 if (",
          "1370:                     value &&",
          "1371:                     headerKeys &&",
          "1372:                     headerKeys.includes(value as string)",
          "1373:                 ) {",
          "1374:                     return `Response header contains ${value}.`;",
          "1375:                 }",
          "1376:                 return null;",
          "1377:             }",
          "1379:             if (input.criteriaFilter.filterType === FilterType.NotContains) {",
          "1380:                 if (",
          "1381:                     value &&",
          "1382:                     headerKeys &&",
          "1383:                     !headerKeys.includes(value as string)",
          "1384:                 ) {",
          "1385:                     return `Response header does not contain ${value}.`;",
          "1386:                 }",
          "1387:                 return null;",
          "1388:             }",
          "1389:         }",
          "1391:         if (input.criteriaFilter.checkOn === CheckOn.ResponseHeaderValue) {",
          "1392:             const headerValues: Array<string> = Object.values(",
          "1393:                 (input.dataToProcess as ProbeMonitorResponse).responseHeaders ||",
          "1394:                     {}",
          "1395:             ).map((key: string) => {",
          "1396:                 return key.toLowerCase();",
          "1397:             });",
          "1400:             if (input.criteriaFilter.filterType === FilterType.Contains) {",
          "1401:                 if (",
          "1402:                     value &&",
          "1403:                     headerValues &&",
          "1404:                     headerValues.includes(value as string)",
          "1405:                 ) {",
          "1406:                     return `Response header value contains ${value}.`;",
          "1407:                 }",
          "1408:                 return null;",
          "1409:             }",
          "1411:             if (input.criteriaFilter.filterType === FilterType.NotContains) {",
          "1412:                 if (",
          "1413:                     value &&",
          "1414:                     headerValues &&",
          "1415:                     !headerValues.includes(value as string)",
          "1416:                 ) {",
          "1417:                     return `Response header value does not contain ${value}.`;",
          "1418:                 }",
          "1419:                 return null;",
          "1420:             }",
          "1421:         }",
          "1425:         if (input.criteriaFilter.checkOn === CheckOn.IncomingRequest) {",
          "1426:             const lastCheckTime: Date = (",
          "1427:                 input.dataToProcess as IncomingMonitorRequest",
          "1428:             ).incomingRequestReceivedAt;",
          "1430:             const differenceInMinutes: number =",
          "1431:                 OneUptimeDate.getDifferenceInMinutes(",
          "1432:                     lastCheckTime,",
          "1433:                     OneUptimeDate.getCurrentDate()",
          "1434:                 );",
          "1436:             if (!value) {",
          "1437:                 return null;",
          "1438:             }",
          "1440:             if (typeof value === Typeof.String) {",
          "1441:                 try {",
          "1442:                     value = parseInt(value as string);",
          "1443:                 } catch (err) {",
          "1444:                     logger.error(err);",
          "1445:                     return null;",
          "1446:                 }",
          "1447:             }",
          "1449:             if (typeof value !== Typeof.Number) {",
          "1450:                 return null;",
          "1451:             }",
          "1453:             if (",
          "1454:                 input.criteriaFilter.filterType === FilterType.RecievedInMinutes",
          "1455:             ) {",
          "1456:                 if (value && differenceInMinutes <= (value as number)) {",
          "1457:                     return `Incoming request / heartbeat received in ${value} minutes.`;",
          "1458:                 }",
          "1459:                 return null;",
          "1460:             }",
          "1462:             if (",
          "1463:                 input.criteriaFilter.filterType ===",
          "1464:                 FilterType.NotRecievedInMinutes",
          "1465:             ) {",
          "1466:                 if (value && differenceInMinutes > (value as number)) {",
          "1467:                     return `Incoming request / heartbeat not received in ${value} minutes.`;",
          "1468:                 }",
          "1469:                 return null;",
          "1470:             }",
          "1471:         }",
          "1473:         if (",
          "1474:             input.criteriaFilter.checkOn === CheckOn.RequestBody &&",
          "1475:             !(input.dataToProcess as IncomingMonitorRequest)",
          "1476:                 .onlyCheckForIncomingRequestReceivedAt",
          "1477:         ) {",
          "1478:             let responseBody: string | JSONObject | undefined = (",
          "1479:                 input.dataToProcess as IncomingMonitorRequest",
          "1480:             ).requestBody;",
          "1482:             if (responseBody && typeof responseBody === Typeof.Object) {",
          "1483:                 responseBody = JSON.stringify(responseBody);",
          "1484:             }",
          "1486:             if (!responseBody) {",
          "1487:                 return null;",
          "1488:             }",
          "1491:             if (input.criteriaFilter.filterType === FilterType.Contains) {",
          "1492:                 if (",
          "1493:                     value &&",
          "1494:                     responseBody &&",
          "1495:                     (responseBody as string).includes(value as string)",
          "1496:                 ) {",
          "1497:                     return `Request body contains ${value}.`;",
          "1498:                 }",
          "1499:                 return null;",
          "1500:             }",
          "1502:             if (input.criteriaFilter.filterType === FilterType.NotContains) {",
          "1503:                 if (",
          "1504:                     value &&",
          "1505:                     responseBody &&",
          "1506:                     !(responseBody as string).includes(value as string)",
          "1507:                 ) {",
          "1508:                     return `Request body does not contain ${value}.`;",
          "1509:                 }",
          "1510:                 return null;",
          "1511:             }",
          "1512:         }",
          "1514:         if (",
          "1515:             input.criteriaFilter.checkOn === CheckOn.RequestHeader &&",
          "1516:             !(input.dataToProcess as IncomingMonitorRequest)",
          "1517:                 .onlyCheckForIncomingRequestReceivedAt",
          "1518:         ) {",
          "1519:             const headerKeys: Array<string> = Object.keys(",
          "1520:                 (input.dataToProcess as IncomingMonitorRequest)",
          "1521:                     .requestHeaders || {}",
          "1522:             ).map((key: string) => {",
          "1523:                 return key.toLowerCase();",
          "1524:             });",
          "1527:             if (input.criteriaFilter.filterType === FilterType.Contains) {",
          "1528:                 if (",
          "1529:                     value &&",
          "1530:                     headerKeys &&",
          "1531:                     headerKeys.includes(value as string)",
          "1532:                 ) {",
          "1533:                     return `Request header contains ${value}.`;",
          "1534:                 }",
          "1535:                 return null;",
          "1536:             }",
          "1538:             if (input.criteriaFilter.filterType === FilterType.NotContains) {",
          "1539:                 if (",
          "1540:                     value &&",
          "1541:                     headerKeys &&",
          "1542:                     !headerKeys.includes(value as string)",
          "1543:                 ) {",
          "1544:                     return `Request header does not contain ${value}.`;",
          "1545:                 }",
          "1546:                 return null;",
          "1547:             }",
          "1548:         }",
          "1550:         if (",
          "1551:             input.criteriaFilter.checkOn === CheckOn.RequestHeaderValue &&",
          "1552:             !(input.dataToProcess as IncomingMonitorRequest)",
          "1553:                 .onlyCheckForIncomingRequestReceivedAt",
          "1554:         ) {",
          "1555:             const headerValues: Array<string> = Object.values(",
          "1556:                 (input.dataToProcess as IncomingMonitorRequest)",
          "1557:                     .requestHeaders || {}",
          "1558:             ).map((key: string) => {",
          "1559:                 return key.toLowerCase();",
          "1560:             });",
          "1563:             if (input.criteriaFilter.filterType === FilterType.Contains) {",
          "1564:                 if (",
          "1565:                     value &&",
          "1566:                     headerValues &&",
          "1567:                     headerValues.includes(value as string)",
          "1568:                 ) {",
          "1569:                     return `Request header value contains ${value}.`;",
          "1570:                 }",
          "1571:                 return null;",
          "1572:             }",
          "1574:             if (input.criteriaFilter.filterType === FilterType.NotContains) {",
          "1575:                 if (",
          "1576:                     value &&",
          "1577:                     headerValues &&",
          "1578:                     !headerValues.includes(value as string)",
          "1579:                 ) {",
          "1580:                     return `Request header value does not contain ${value}.`;",
          "1581:                 }",
          "1582:                 return null;",
          "1583:             }",
          "1584:         }",
          "1588:         if (",
          "1589:             input.criteriaFilter.checkOn === CheckOn.CPUUsagePercent &&",
          "1590:             !(input.dataToProcess as ServerMonitorResponse)",
          "1591:                 .onlyCheckRequestReceivedAt",
          "1592:         ) {",
          "1593:             if (!value) {",
          "1594:                 return null;",
          "1595:             }",
          "1597:             if (typeof value === Typeof.String) {",
          "1598:                 try {",
          "1599:                     value = parseInt(value as string);",
          "1600:                 } catch (err) {",
          "1601:                     logger.error(err);",
          "1602:                     return null;",
          "1603:                 }",
          "1604:             }",
          "1606:             if (typeof value !== Typeof.Number) {",
          "1607:                 return null;",
          "1608:             }",
          "1610:             const currentCpuPercent: number =",
          "1611:                 (input.dataToProcess as ServerMonitorResponse)",
          "1612:                     .basicInfrastructureMetrics?.cpuMetrics.percentUsage || 0;",
          "1614:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "1615:                 if (currentCpuPercent > (value as number)) {",
          "1616:                     return `CPU Percent is ${currentCpuPercent}% which is greater than the criteria value of ${value}%.`;",
          "1617:                 }",
          "1619:                 return null;",
          "1620:             }",
          "1622:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "1623:                 if (currentCpuPercent < (value as number)) {",
          "1624:                     return `CPU Percent is ${currentCpuPercent}% which is less than than the criteria value of ${value}%.`;",
          "1625:                 }",
          "1627:                 return null;",
          "1628:             }",
          "1630:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "1631:                 if (currentCpuPercent === (value as number)) {",
          "1632:                     return `CPU Percent is ${currentCpuPercent}% which is equal to the criteria value of ${value}%.`;",
          "1633:                 }",
          "1635:                 return null;",
          "1636:             }",
          "1638:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "1639:                 if (currentCpuPercent !== (value as number)) {",
          "1640:                     return `CPU Percent is ${currentCpuPercent}% which is not equal to the criteria value of ${value}%.`;",
          "1641:                 }",
          "1643:                 return null;",
          "1644:             }",
          "1646:             if (",
          "1647:                 input.criteriaFilter.filterType ===",
          "1648:                 FilterType.GreaterThanOrEqualTo",
          "1649:             ) {",
          "1650:                 if (currentCpuPercent >= (value as number)) {",
          "1651:                     return `CPU Percent is ${currentCpuPercent}% which is greater than or equal to the criteria value of ${value}%.`;",
          "1652:                 }",
          "1654:                 return null;",
          "1655:             }",
          "1657:             if (",
          "1658:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "1659:             ) {",
          "1660:                 if (currentCpuPercent <= (value as number)) {",
          "1661:                     return `CPU Percent is ${currentCpuPercent}% which is less than or equal to the criteria value of ${value}%.`;",
          "1662:                 }",
          "1664:                 return null;",
          "1665:             }",
          "1666:         }",
          "1668:         if (",
          "1669:             input.criteriaFilter.checkOn === CheckOn.MemoryUsagePercent &&",
          "1670:             !(input.dataToProcess as ServerMonitorResponse)",
          "1671:                 .onlyCheckRequestReceivedAt",
          "1672:         ) {",
          "1673:             if (!value) {",
          "1674:                 return null;",
          "1675:             }",
          "1677:             if (typeof value === Typeof.String) {",
          "1678:                 try {",
          "1679:                     value = parseInt(value as string);",
          "1680:                 } catch (err) {",
          "1681:                     logger.error(err);",
          "1682:                     return null;",
          "1683:                 }",
          "1684:             }",
          "1686:             if (typeof value !== Typeof.Number) {",
          "1687:                 return null;",
          "1688:             }",
          "1690:             const memoryPercent: number =",
          "1691:                 (input.dataToProcess as ServerMonitorResponse)",
          "1692:                     .basicInfrastructureMetrics?.memoryMetrics.percentFree || 0;",
          "1694:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "1695:                 if (memoryPercent > (value as number)) {",
          "1696:                     return `Memory Percent is ${memoryPercent}% which is greater than the criteria value of ${value}%.`;",
          "1697:                 }",
          "1699:                 return null;",
          "1700:             }",
          "1702:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "1703:                 if (memoryPercent < (value as number)) {",
          "1704:                     return `Memory Percent is ${memoryPercent}% which is less than than the criteria value of ${value}%.`;",
          "1705:                 }",
          "1707:                 return null;",
          "1708:             }",
          "1710:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "1711:                 if (memoryPercent === (value as number)) {",
          "1712:                     return `Memory Percent is ${memoryPercent}% which is equal to the criteria value of ${value}%.`;",
          "1713:                 }",
          "1715:                 return null;",
          "1716:             }",
          "1718:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "1719:                 if (memoryPercent !== (value as number)) {",
          "1720:                     return `Memory Percent is ${memoryPercent}% which is not equal to the criteria value of ${value}%.`;",
          "1721:                 }",
          "1723:                 return null;",
          "1724:             }",
          "1726:             if (",
          "1727:                 input.criteriaFilter.filterType ===",
          "1728:                 FilterType.GreaterThanOrEqualTo",
          "1729:             ) {",
          "1730:                 if (memoryPercent >= (value as number)) {",
          "1731:                     return `Memory Percent is ${memoryPercent}% which is greater than or equal to the criteria value of ${value}%.`;",
          "1732:                 }",
          "1734:                 return null;",
          "1735:             }",
          "1737:             if (",
          "1738:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "1739:             ) {",
          "1740:                 if (memoryPercent <= (value as number)) {",
          "1741:                     return `Memory Percent is ${memoryPercent}% which is less than or equal to the criteria value of ${value}%.`;",
          "1742:                 }",
          "1744:                 return null;",
          "1745:             }",
          "1746:         }",
          "1748:         if (",
          "1749:             input.criteriaFilter.checkOn === CheckOn.DiskUsagePercent &&",
          "1750:             !(input.dataToProcess as ServerMonitorResponse)",
          "1751:                 .onlyCheckRequestReceivedAt",
          "1752:         ) {",
          "1753:             if (!value) {",
          "1754:                 return null;",
          "1755:             }",
          "1757:             if (typeof value === Typeof.String) {",
          "1758:                 try {",
          "1759:                     value = parseInt(value as string);",
          "1760:                 } catch (err) {",
          "1761:                     logger.error(err);",
          "1762:                     return null;",
          "1763:                 }",
          "1764:             }",
          "1766:             if (typeof value !== Typeof.Number) {",
          "1767:                 return null;",
          "1768:             }",
          "1770:             const diskPath: string =",
          "1771:                 input.criteriaFilter.serverMonitorOptions?.diskPath || '/';",
          "1773:             const diskPercent: number =",
          "1774:                 (",
          "1775:                     input.dataToProcess as ServerMonitorResponse",
          "1776:                 ).basicInfrastructureMetrics?.diskMetrics.filter(",
          "1777:                     (item: BasicDiskMetrics) => {",
          "1778:                         return (",
          "1779:                             item.diskPath.trim().toLowerCase() ===",
          "1780:                             diskPath.trim().toLowerCase()",
          "1781:                         );",
          "1782:                     }",
          "1783:                 )[0]?.percentFree || 0;",
          "1785:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "1786:                 if (diskPercent > (value as number)) {",
          "1787:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is greater than the criteria value of ${value}%.`;",
          "1788:                 }",
          "1790:                 return null;",
          "1791:             }",
          "1793:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "1794:                 if (diskPercent < (value as number)) {",
          "1795:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is less than than the criteria value of ${value}%.`;",
          "1796:                 }",
          "1798:                 return null;",
          "1799:             }",
          "1801:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "1802:                 if (diskPercent === (value as number)) {",
          "1803:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is equal to the criteria value of ${value}%.`;",
          "1804:                 }",
          "1806:                 return null;",
          "1807:             }",
          "1809:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "1810:                 if (diskPercent !== (value as number)) {",
          "1811:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is not equal to the criteria value of ${value}%.`;",
          "1812:                 }",
          "1814:                 return null;",
          "1815:             }",
          "1817:             if (",
          "1818:                 input.criteriaFilter.filterType ===",
          "1819:                 FilterType.GreaterThanOrEqualTo",
          "1820:             ) {",
          "1821:                 if (diskPercent >= (value as number)) {",
          "1822:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is greater than or equal to the criteria value of ${value}%.`;",
          "1823:                 }",
          "1825:                 return null;",
          "1826:             }",
          "1828:             if (",
          "1829:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "1830:             ) {",
          "1831:                 if (diskPercent <= (value as number)) {",
          "1832:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is less than or equal to the criteria value of ${value}%.`;",
          "1833:                 }",
          "1835:                 return null;",
          "1836:             }",
          "1837:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}