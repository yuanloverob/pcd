{
  "cve_id": "CVE-2024-56408",
  "cve_desc": "PhpSpreadsheet is a PHP library for reading and writing spreadsheet files. Versions prior to 3.7.0, 2.3.5, 2.1.6, and 1.29.7 have no sanitization in the `/vendor/phpoffice/phpspreadsheet/samples/Engineering/Convert-Online.php` file, which leads to the possibility of a cross-site scripting attack. Versions 3.7.0, 2.3.5, 2.1.6, and 1.29.7 contain a patch for the issue.",
  "repo": "PHPOffice/PhpSpreadsheet",
  "patch_hash": "700a80346be269af668914172bc6f4521982d0b4",
  "patch_info": {
    "commit_hash": "700a80346be269af668914172bc6f4521982d0b4",
    "repo": "PHPOffice/PhpSpreadsheet",
    "commit_url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/700a80346be269af668914172bc6f4521982d0b4",
    "files": [
      "samples/Engineering/Convert-Online.php",
      "samples/Wizards/NumberFormat/Accounting.php",
      "samples/Wizards/NumberFormat/Currency.php",
      "src/PhpSpreadsheet/Helper/Downloader.php",
      "src/PhpSpreadsheet/Style/NumberFormat/Formatter.php",
      "src/PhpSpreadsheet/Writer/Html.php"
    ],
    "message": "Merge commit from fork\n\n* Validate Post Item in Convert-Online.php\n\n* Correct Samples - Currency, Accounting, and Downloader\n\n* Smarter Color Formatting for Currency\n\n* Use helper->log Rather than echo in Convert-Online\n\nResponding to comment from @PowerKiki about use of echo for error messages. I do not believe that an exception is warranted, but other scripts use helper->log for error messages, and now so will this one.",
    "before_after_code_files": [
      "samples/Engineering/Convert-Online.php||samples/Engineering/Convert-Online.php",
      "samples/Wizards/NumberFormat/Accounting.php||samples/Wizards/NumberFormat/Accounting.php",
      "samples/Wizards/NumberFormat/Currency.php||samples/Wizards/NumberFormat/Currency.php",
      "src/PhpSpreadsheet/Helper/Downloader.php||src/PhpSpreadsheet/Helper/Downloader.php",
      "src/PhpSpreadsheet/Style/NumberFormat/Formatter.php||src/PhpSpreadsheet/Style/NumberFormat/Formatter.php",
      "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php"
    ]
  },
  "patch_diff": {
    "samples/Engineering/Convert-Online.php||samples/Engineering/Convert-Online.php": [
      "File: samples/Engineering/Convert-Online.php -> samples/Engineering/Convert-Online.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "78:     $quantity = $_POST['quantity'];",
      "79:     $fromUnit = $_POST['fromUnit'];",
      "80:     $toUnit = $_POST['toUnit'];",
      "83:         $result = ConvertUOM::CONVERT($quantity, $fromUnit, $toUnit);",
      "86:     } else {",
      "88:     }",
      "89: } else {",
      "91: }",
      "",
      "[Removed Lines]",
      "81:     if (isset($units[$_POST['category']][$fromUnit], $units[$_POST['category']][$toUnit])) {",
      "85:         echo \"{$quantity} {$units[$_POST['category']][$fromUnit]} is {$result} {$units[$_POST['category']][$toUnit]}\", PHP_EOL;",
      "87:         echo 'Please enter quantity and select From Unit and To Unit', PHP_EOL;",
      "90:     echo 'Please enter quantity and select From Unit and To Unit', PHP_EOL;",
      "",
      "[Added Lines]",
      "81:     if (!is_numeric($quantity)) {",
      "82:         $helper->log('Quantity is not numeric');",
      "83:     } elseif (isset($units[$_POST['category']][$fromUnit], $units[$_POST['category']][$toUnit])) {",
      "87:         $helper->log(\"{$quantity} {$units[$_POST['category']][$fromUnit]} is {$result} {$units[$_POST['category']][$toUnit]}\");",
      "89:         $helper->log('Please enter quantity and select From Unit and To Unit');",
      "92:     $helper->log('Please enter quantity and select From Unit and To Unit');",
      "",
      "---------------"
    ],
    "samples/Wizards/NumberFormat/Accounting.php||samples/Wizards/NumberFormat/Accounting.php": [
      "File: samples/Wizards/NumberFormat/Accounting.php -> samples/Wizards/NumberFormat/Accounting.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "64:                 <input name=\"position\" type=\"radio\" value=\"0\" <?php echo (isset($_POST['position']) && $_POST['position'] === '0') ? 'checked' : ''; ?>>Trailing",
      "65:             </div>",
      "66:         </div>",
      "74:         <div class=\"mb-3 row\">",
      "75:             <div class=\"col-sm-10\">",
      "76:                 <input  class=\"btn btn-primary\" name=\"submit\" type=\"submit\" value=\"Display Mask\"><br />",
      "",
      "[Removed Lines]",
      "67:         <div class=\"mb-3 row\">",
      "68:             <label for=\"spacing\" class=\"col-sm-2 col-form-label\">Currency Spacing</label>",
      "69:             <div class=\"col-sm-10\">",
      "70:                 <input name=\"spacing\" type=\"radio\" value=\"1\" <?php echo (isset($_POST['spacing']) && $_POST['spacing'] === '1') ? 'checked' : ''; ?>>Yes",
      "71:                 <input name=\"spacing\" type=\"radio\" value=\"0\" <?php echo ((isset($_POST['spacing']) === false) || (isset($_POST['spacing']) && $_POST['spacing'] === '0')) ? 'checked' : ''; ?>>No",
      "72:             </div>",
      "73:         </div>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:         $helper->log('The Sample Number Value must be numeric');",
      "86:     } elseif (!is_numeric($_POST['decimals']) || str_contains((string) $_POST['decimals'], '.') || (int) $_POST['decimals'] < 0) {",
      "87:         $helper->log('The Decimal Places value must be positive integer');",
      "88:     } else {",
      "89:         try {",
      "91:             $mask = $wizard->format();",
      "92:             $example = (string) NumberFormat::toFormattedString((float) $_POST['number'], $mask);",
      "93:             $helper->log('<hr /><b>Code:</b><br />');",
      "94:             $helper->log('use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard;');",
      "95:             $helper->log(",
      "97:                 . (isset($_POST['thousands']) ? 'WITH_THOUSANDS_SEPARATOR' : 'WITHOUT_THOUSANDS_SEPARATOR')",
      "98:                 . ', Wizard\\Currency::' . (((bool) $_POST['position']) ? 'LEADING_SYMBOL' : 'TRAILING_SYMBOL')",
      "101:             );",
      "103:             $helper->log('<hr /><b>Mask:</b><br />');",
      "104:             $helper->log($mask . '<br />');",
      "105:             $helper->log('<br /><b>Example:</b><br />');",
      "",
      "[Removed Lines]",
      "90:             $wizard = new Wizard\\Accounting($_POST['currency'], (int) $_POST['decimals'], isset($_POST['thousands']), (bool) $_POST['position'], (bool) $_POST['spacing']);",
      "96:                 \"\\$mask = Wizard\\\\Accounting('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"",
      "99:                 . ', Wizard\\Currency::' . (((bool) $_POST['spacing']) ? 'SYMBOL_WITH_SPACING' : 'SYMBOL_WITHOUT_SPACING')",
      "100:                 . ');<br />'",
      "102:             $helper->log('echo (string) $mask;');",
      "",
      "[Added Lines]",
      "81:     } elseif (!in_array($_POST['currency'], array_keys($currencies), true)) {",
      "82:         $helper->log('Unrecognized currency symbol');",
      "85:             $wizard = new Wizard\\Accounting($_POST['currency'], (int) $_POST['decimals'], isset($_POST['thousands']), (bool) $_POST['position']);",
      "91:                 \"\\$wizard = new Wizard\\\\Accounting('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"",
      "94:                 . ');'",
      "96:             $helper->log('$mask = $wizard->format();');",
      "97:             $helper->log('<br />echo (string) $mask;');",
      "",
      "---------------"
    ],
    "samples/Wizards/NumberFormat/Currency.php||samples/Wizards/NumberFormat/Currency.php": [
      "File: samples/Wizards/NumberFormat/Currency.php -> samples/Wizards/NumberFormat/Currency.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: use PhpOffice\\PhpSpreadsheet\\Settings;",
      "6: use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat;",
      "7: use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard;",
      "9: require __DIR__ . '/../Header.php';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "8: use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard\\CurrencyNegative;",
      "9: use PhpOffice\\PhpSpreadsheet\\Writer\\Html as HtmlWriter;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15:     return;",
      "16: }",
      "18: $currencies = [",
      "19:     '$' => 'US Dollars ($)',",
      "20:     '\u20ac' => 'Euro (\u20ac)',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: $negatives = [",
      "21:     CurrencyNegative::minus,",
      "22:     CurrencyNegative::redMinus,",
      "23:     CurrencyNegative::parentheses,",
      "24:     CurrencyNegative::redParentheses,",
      "25: ];",
      "26: $negativesString = [",
      "27:     'CurrencyNegative::minus',",
      "28:     'CurrencyNegative::redMinus',",
      "29:     'CurrencyNegative::parentheses',",
      "30:     'CurrencyNegative::redParentheses',",
      "31: ];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "65:             </div>",
      "66:         </div>",
      "67:         <div class=\"mb-3 row\">",
      "69:             <div class=\"col-sm-10\">",
      "72:             </div>",
      "73:         </div>",
      "74:         <div class=\"mb-3 row\">",
      "",
      "[Removed Lines]",
      "68:             <label for=\"spacing\" class=\"col-sm-2 col-form-label\">Currency Spacing</label>",
      "70:                 <input name=\"spacing\" type=\"radio\" value=\"1\" <?php echo (isset($_POST['spacing']) && $_POST['spacing'] === '1') ? 'checked' : ''; ?>>Yes",
      "71:                 <input name=\"spacing\" type=\"radio\" value=\"0\" <?php echo ((isset($_POST['spacing']) === false) || (isset($_POST['spacing']) && $_POST['spacing'] === '0')) ? 'checked' : ''; ?>>No",
      "",
      "[Added Lines]",
      "83:             <label for=\"negative\" class=\"col-sm-2 col-form-label\">Negative Numbers</label>",
      "85:                 <input name=\"negative\" type=\"radio\" value=\"0\"  <?php echo (!isset($_POST['negative']) || $_POST['negative'] === '0') ? 'checked' : ''; ?>>Minus Sign",
      "86:                 <input name=\"negative\" type=\"radio\" value=\"1\"  <?php echo (isset($_POST['negative']) && $_POST['negative'] === '1') ? 'checked' : ''; ?>>Red Minus Sign",
      "87:                 <input name=\"negative\" type=\"radio\" value=\"2\"  <?php echo (isset($_POST['negative']) && $_POST['negative'] === '2') ? 'checked' : ''; ?>>Parentheses",
      "88:                 <input name=\"negative\" type=\"radio\" value=\"3\"  <?php echo (isset($_POST['negative']) && $_POST['negative'] === '3') ? 'checked' : ''; ?>>Red Parentheses",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "85:         $helper->log('The Sample Number Value must be numeric');",
      "86:     } elseif (!is_numeric($_POST['decimals']) || str_contains((string) $_POST['decimals'], '.') || (int) $_POST['decimals'] < 0) {",
      "87:         $helper->log('The Decimal Places value must be positive integer');",
      "88:     } else {",
      "89:         try {",
      "91:             $mask = $wizard->format();",
      "93:             $helper->log('<hr /><b>Code:</b><br />');",
      "94:             $helper->log('use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard;');",
      "95:             $helper->log(",
      "97:                 . (isset($_POST['thousands']) ? 'WITH_THOUSANDS_SEPARATOR' : 'WITHOUT_THOUSANDS_SEPARATOR')",
      "98:                 . ', Wizard\\Currency::' . (((bool) $_POST['position']) ? 'LEADING_SYMBOL' : 'TRAILING_SYMBOL')",
      "101:             );",
      "103:             $helper->log('<hr /><b>Mask:</b><br />');",
      "104:             $helper->log($mask . '<br />');",
      "105:             $helper->log('<br /><b>Example:</b><br />');",
      "",
      "[Removed Lines]",
      "90:             $wizard = new Wizard\\Currency($_POST['currency'], (int) $_POST['decimals'], isset($_POST['thousands']), (bool) $_POST['position'], (bool) $_POST['spacing']);",
      "92:             $example = (string) NumberFormat::toFormattedString((float) $_POST['number'], $mask);",
      "96:                 \"\\$mask = Wizard\\\\Currency('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"",
      "99:                 . ', Wizard\\Currency::' . (((bool) $_POST['spacing']) ? 'SYMBOL_WITH_SPACING' : 'SYMBOL_WITHOUT_SPACING')",
      "100:                 . ');<br />'",
      "102:             $helper->log('echo (string) $mask;');",
      "",
      "[Added Lines]",
      "105:     } elseif (!in_array($_POST['currency'], array_keys($currencies), true)) {",
      "106:         $helper->log('Unrecognized currency symbol');",
      "109:             $negative = $negatives[$_POST['negative']] ?? CurrencyNegative::minus;",
      "110:             $wizard = new Wizard\\Currency($_POST['currency'], (int) $_POST['decimals'], isset($_POST['thousands']), (bool) $_POST['position']);",
      "111:             $wizard->setNegative($negative);",
      "113:             $example = (string) NumberFormat::toFormattedString((float) $_POST['number'], $mask, [HtmlWriter::class, 'formatColorStatic']);",
      "116:             $helper->log('use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\CurrencyNegative;');",
      "118:                 \"\\$wizard = new  Wizard\\\\Currency('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"",
      "121:                 . ');'",
      "123:             $helper->log('$wizard->setNegative(' . $negativesString[$_POST['negative']] . ');');",
      "124:             $helper->log('$mask = $wizard->format();');",
      "125:             $helper->log('<br />echo (string) $mask;');",
      "",
      "---------------"
    ],
    "src/PhpSpreadsheet/Helper/Downloader.php||src/PhpSpreadsheet/Helper/Downloader.php": [
      "File: src/PhpSpreadsheet/Helper/Downloader.php -> src/PhpSpreadsheet/Helper/Downloader.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:     public function __construct(string $folder, string $filename, ?string $filetype = null)",
      "31:     {",
      "32:         if ((is_dir($folder) === false) || (is_readable($folder) === false)) {",
      "34:         }",
      "35:         $filepath = \"{$folder}/{$filename}\";",
      "36:         $this->filepath = (string) realpath($filepath);",
      "37:         $this->filename = basename($filepath);",
      "38:         if ((file_exists($this->filepath) === false) || (is_readable($this->filepath) === false)) {",
      "40:         }",
      "42:         $filetype ??= pathinfo($filename, PATHINFO_EXTENSION);",
      "43:         if (array_key_exists(strtolower($filetype), self::CONTENT_TYPES) === false) {",
      "45:         }",
      "46:         $this->filetype = strtolower($filetype);",
      "47:     }",
      "",
      "[Removed Lines]",
      "33:             throw new Exception(\"Folder {$folder} is not accessable\");",
      "39:             throw new Exception(\"{$this->filename} not found, or cannot be read\");",
      "44:             throw new Exception(\"Invalid filetype: {$filetype} cannot be downloaded\");",
      "",
      "[Added Lines]",
      "33:             throw new Exception('Folder is not accessible');",
      "39:             throw new Exception('File not found, or cannot be read');",
      "44:             throw new Exception('Invalid filetype: file cannot be downloaded');",
      "",
      "---------------"
    ],
    "src/PhpSpreadsheet/Style/NumberFormat/Formatter.php||src/PhpSpreadsheet/Style/NumberFormat/Formatter.php": [
      "File: src/PhpSpreadsheet/Style/NumberFormat/Formatter.php -> src/PhpSpreadsheet/Style/NumberFormat/Formatter.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "120:     {",
      "121:         while (is_array($value)) {",
      "122:             $value = array_shift($value);",
      "",
      "[Removed Lines]",
      "119:     public static function toFormattedString($value, string $format, ?array $callBack = null): string",
      "",
      "[Added Lines]",
      "119:     public static function toFormattedString($value, string $format, null|array|callable $callBack = null): string",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "200:         }",
      "206:         }",
      "208:         return str_replace(chr(0x00), '.', $value);",
      "",
      "[Removed Lines]",
      "203:         if ($callBack !== null) {",
      "204:             [$writerInstance, $function] = $callBack;",
      "205:             $value = $writerInstance->$function($value, $colors);",
      "",
      "[Added Lines]",
      "203:         if (is_callable($callBack)) {",
      "204:             $value = $callBack($value, $colors);",
      "",
      "---------------"
    ],
    "src/PhpSpreadsheet/Writer/Html.php||src/PhpSpreadsheet/Writer/Html.php": [
      "File: src/PhpSpreadsheet/Writer/Html.php -> src/PhpSpreadsheet/Writer/Html.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "1722:     public function formatColor(string $value, string $format): string",
      "1723:     {",
      "1725:         $color = null; // initialize",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1723:     {",
      "1724:         return self::formatColorStatic($value, $format);",
      "1725:     }",
      "1733:     public static function formatColorStatic(string $value, string $format): string",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9b9a55c7154daa7cd4095f618933c240508ba3c1",
      "candidate_info": {
        "commit_hash": "9b9a55c7154daa7cd4095f618933c240508ba3c1",
        "repo": "PHPOffice/PhpSpreadsheet",
        "commit_url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/9b9a55c7154daa7cd4095f618933c240508ba3c1",
        "files": [
          ".github/workflows/main.yml",
          "CHANGELOG.md",
          "samples/Engineering/Convert-Online.php",
          "samples/Wizards/NumberFormat/Accounting.php",
          "samples/Wizards/NumberFormat/Currency.php",
          "src/PhpSpreadsheet/Helper/Downloader.php"
        ],
        "message": "Backport Security Patches for Samples",
        "before_after_code_files": [
          "samples/Engineering/Convert-Online.php||samples/Engineering/Convert-Online.php",
          "samples/Wizards/NumberFormat/Accounting.php||samples/Wizards/NumberFormat/Accounting.php",
          "samples/Wizards/NumberFormat/Currency.php||samples/Wizards/NumberFormat/Currency.php",
          "src/PhpSpreadsheet/Helper/Downloader.php||src/PhpSpreadsheet/Helper/Downloader.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "samples/Engineering/Convert-Online.php||samples/Engineering/Convert-Online.php",
            "samples/Wizards/NumberFormat/Accounting.php||samples/Wizards/NumberFormat/Accounting.php",
            "samples/Wizards/NumberFormat/Currency.php||samples/Wizards/NumberFormat/Currency.php",
            "src/PhpSpreadsheet/Helper/Downloader.php||src/PhpSpreadsheet/Helper/Downloader.php"
          ],
          "candidate": [
            "samples/Engineering/Convert-Online.php||samples/Engineering/Convert-Online.php",
            "samples/Wizards/NumberFormat/Accounting.php||samples/Wizards/NumberFormat/Accounting.php",
            "samples/Wizards/NumberFormat/Currency.php||samples/Wizards/NumberFormat/Currency.php",
            "src/PhpSpreadsheet/Helper/Downloader.php||src/PhpSpreadsheet/Helper/Downloader.php"
          ]
        }
      },
      "candidate_diff": {
        "samples/Engineering/Convert-Online.php||samples/Engineering/Convert-Online.php": [
          "File: samples/Engineering/Convert-Online.php -> samples/Engineering/Convert-Online.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     $quantity = $_POST['quantity'];",
          "79:     $fromUnit = $_POST['fromUnit'];",
          "80:     $toUnit = $_POST['toUnit'];",
          "83:         $result = ConvertUOM::CONVERT($quantity, $fromUnit, $toUnit);",
          "86:     } else {",
          "88:     }",
          "89: } else {",
          "91: }",
          "",
          "[Removed Lines]",
          "81:     if (isset($units[$_POST['category']][$fromUnit], $units[$_POST['category']][$toUnit])) {",
          "85:         echo \"{$quantity} {$units[$_POST['category']][$fromUnit]} is {$result} {$units[$_POST['category']][$toUnit]}\", PHP_EOL;",
          "87:         echo 'Please enter quantity and select From Unit and To Unit', PHP_EOL;",
          "90:     echo 'Please enter quantity and select From Unit and To Unit', PHP_EOL;",
          "",
          "[Added Lines]",
          "81:     if (!is_numeric($quantity)) {",
          "82:         $helper->log('Quantity is not numeric');",
          "83:     } elseif (isset($units[$_POST['category']][$fromUnit], $units[$_POST['category']][$toUnit])) {",
          "87:         $helper->log(\"{$quantity} {$units[$_POST['category']][$fromUnit]} is {$result} {$units[$_POST['category']][$toUnit]}\");",
          "89:         $helper->log('Please enter quantity and select From Unit and To Unit');",
          "92:     $helper->log('Please enter quantity and select From Unit and To Unit');",
          "",
          "---------------"
        ],
        "samples/Wizards/NumberFormat/Accounting.php||samples/Wizards/NumberFormat/Accounting.php": [
          "File: samples/Wizards/NumberFormat/Accounting.php -> samples/Wizards/NumberFormat/Accounting.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         $helper->log('The Sample Number Value must be numeric');",
          "86:     } elseif (!is_numeric($_POST['decimals']) || str_contains((string) $_POST['decimals'], '.') || (int) $_POST['decimals'] < 0) {",
          "87:         $helper->log('The Decimal Places value must be positive integer');",
          "88:     } else {",
          "89:         try {",
          "90:             $wizard = new Wizard\\Accounting($_POST['currency'], (int) $_POST['decimals'], isset($_POST['thousands']), (bool) $_POST['position'], (bool) $_POST['spacing']);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     } elseif (!in_array($_POST['currency'], array_keys($currencies), true)) {",
          "89:         $helper->log('Unrecognized currency symbol');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:             $helper->log('<hr /><b>Code:</b><br />');",
          "94:             $helper->log('use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard;');",
          "95:             $helper->log(",
          "97:                 . (isset($_POST['thousands']) ? 'WITH_THOUSANDS_SEPARATOR' : 'WITHOUT_THOUSANDS_SEPARATOR')",
          "98:                 . ', Wizard\\Currency::' . (((bool) $_POST['position']) ? 'LEADING_SYMBOL' : 'TRAILING_SYMBOL')",
          "99:                 . ', Wizard\\Currency::' . (((bool) $_POST['spacing']) ? 'SYMBOL_WITH_SPACING' : 'SYMBOL_WITHOUT_SPACING')",
          "101:             );",
          "102:             $helper->log('echo (string) $mask;');",
          "103:             $helper->log('<hr /><b>Mask:</b><br />');",
          "104:             $helper->log($mask . '<br />');",
          "",
          "[Removed Lines]",
          "96:                 \"\\$mask = Wizard\\\\Accounting('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"",
          "100:                 . ');<br />'",
          "",
          "[Added Lines]",
          "98:                 \"\\$wizard = new Wizard\\\\Accounting('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"",
          "102:                 . ');'",
          "104:             $helper->log('$mask = $wizard->format();');",
          "105:             $helper->log('<br />');",
          "",
          "---------------"
        ],
        "samples/Wizards/NumberFormat/Currency.php||samples/Wizards/NumberFormat/Currency.php": [
          "File: samples/Wizards/NumberFormat/Currency.php -> samples/Wizards/NumberFormat/Currency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         $helper->log('The Sample Number Value must be numeric');",
          "86:     } elseif (!is_numeric($_POST['decimals']) || str_contains((string) $_POST['decimals'], '.') || (int) $_POST['decimals'] < 0) {",
          "87:         $helper->log('The Decimal Places value must be positive integer');",
          "88:     } else {",
          "89:         try {",
          "90:             $wizard = new Wizard\\Currency($_POST['currency'], (int) $_POST['decimals'], isset($_POST['thousands']), (bool) $_POST['position'], (bool) $_POST['spacing']);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     } elseif (!in_array($_POST['currency'], array_keys($currencies), true)) {",
          "89:         $helper->log('Unrecognized currency symbol');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:             $helper->log('<hr /><b>Code:</b><br />');",
          "94:             $helper->log('use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard;');",
          "95:             $helper->log(",
          "97:                 . (isset($_POST['thousands']) ? 'WITH_THOUSANDS_SEPARATOR' : 'WITHOUT_THOUSANDS_SEPARATOR')",
          "98:                 . ', Wizard\\Currency::' . (((bool) $_POST['position']) ? 'LEADING_SYMBOL' : 'TRAILING_SYMBOL')",
          "99:                 . ', Wizard\\Currency::' . (((bool) $_POST['spacing']) ? 'SYMBOL_WITH_SPACING' : 'SYMBOL_WITHOUT_SPACING')",
          "101:             );",
          "102:             $helper->log('echo (string) $mask;');",
          "103:             $helper->log('<hr /><b>Mask:</b><br />');",
          "104:             $helper->log($mask . '<br />');",
          "",
          "[Removed Lines]",
          "96:                 \"\\$mask = Wizard\\\\Currency('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"",
          "100:                 . ');<br />'",
          "",
          "[Added Lines]",
          "98:                 \"\\$wizard = new Wizard\\\\Currency('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"",
          "102:                 . ');'",
          "104:             $helper->log('$mask = $wizard->format();');",
          "105:             $helper->log('<br />');",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Helper/Downloader.php||src/PhpSpreadsheet/Helper/Downloader.php": [
          "File: src/PhpSpreadsheet/Helper/Downloader.php -> src/PhpSpreadsheet/Helper/Downloader.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     public function __construct(string $folder, string $filename, ?string $filetype = null)",
          "31:     {",
          "32:         if ((is_dir($folder) === false) || (is_readable($folder) === false)) {",
          "34:         }",
          "35:         $filepath = \"{$folder}/{$filename}\";",
          "36:         $this->filepath = (string) realpath($filepath);",
          "37:         $this->filename = basename($filepath);",
          "38:         if ((file_exists($this->filepath) === false) || (is_readable($this->filepath) === false)) {",
          "40:         }",
          "42:         $filetype ??= pathinfo($filename, PATHINFO_EXTENSION);",
          "43:         if (array_key_exists(strtolower($filetype), self::CONTENT_TYPES) === false) {",
          "45:         }",
          "46:         $this->filetype = strtolower($filetype);",
          "47:     }",
          "",
          "[Removed Lines]",
          "33:             throw new Exception(\"Folder {$folder} is not accessable\");",
          "39:             throw new Exception(\"{$this->filename} not found, or cannot be read\");",
          "44:             throw new Exception(\"Invalid filetype: {$filetype} cannot be downloaded\");",
          "",
          "[Added Lines]",
          "33:             throw new Exception('Folder is not accessible');",
          "39:             throw new Exception('File not found, or cannot be read');",
          "44:             throw new Exception('Invalid filetype: cannot be downloaded');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8fac55aa5cb7a3d514c7308378bb37bb711b25e",
      "candidate_info": {
        "commit_hash": "b8fac55aa5cb7a3d514c7308378bb37bb711b25e",
        "repo": "PHPOffice/PhpSpreadsheet",
        "commit_url": "https://github.com/PHPOffice/PhpSpreadsheet/commit/b8fac55aa5cb7a3d514c7308378bb37bb711b25e",
        "files": [
          ".github/workflows/main.yml",
          "CHANGELOG.md",
          "samples/Engineering/Convert-Online.php",
          "samples/Wizards/NumberFormat/Accounting.php",
          "samples/Wizards/NumberFormat/Currency.php",
          "src/PhpSpreadsheet/Helper/Downloader.php"
        ],
        "message": "Backport Security Patches for Samples",
        "before_after_code_files": [
          "samples/Engineering/Convert-Online.php||samples/Engineering/Convert-Online.php",
          "samples/Wizards/NumberFormat/Accounting.php||samples/Wizards/NumberFormat/Accounting.php",
          "samples/Wizards/NumberFormat/Currency.php||samples/Wizards/NumberFormat/Currency.php",
          "src/PhpSpreadsheet/Helper/Downloader.php||src/PhpSpreadsheet/Helper/Downloader.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "samples/Engineering/Convert-Online.php||samples/Engineering/Convert-Online.php",
            "samples/Wizards/NumberFormat/Accounting.php||samples/Wizards/NumberFormat/Accounting.php",
            "samples/Wizards/NumberFormat/Currency.php||samples/Wizards/NumberFormat/Currency.php",
            "src/PhpSpreadsheet/Helper/Downloader.php||src/PhpSpreadsheet/Helper/Downloader.php"
          ],
          "candidate": [
            "samples/Engineering/Convert-Online.php||samples/Engineering/Convert-Online.php",
            "samples/Wizards/NumberFormat/Accounting.php||samples/Wizards/NumberFormat/Accounting.php",
            "samples/Wizards/NumberFormat/Currency.php||samples/Wizards/NumberFormat/Currency.php",
            "src/PhpSpreadsheet/Helper/Downloader.php||src/PhpSpreadsheet/Helper/Downloader.php"
          ]
        }
      },
      "candidate_diff": {
        "samples/Engineering/Convert-Online.php||samples/Engineering/Convert-Online.php": [
          "File: samples/Engineering/Convert-Online.php -> samples/Engineering/Convert-Online.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     $quantity = $_POST['quantity'];",
          "79:     $fromUnit = $_POST['fromUnit'];",
          "80:     $toUnit = $_POST['toUnit'];",
          "83:         $result = ConvertUOM::CONVERT($quantity, $fromUnit, $toUnit);",
          "86:     } else {",
          "88:     }",
          "89: } else {",
          "91: }",
          "",
          "[Removed Lines]",
          "81:     if (isset($units[$_POST['category']][$fromUnit], $units[$_POST['category']][$toUnit])) {",
          "85:         echo \"{$quantity} {$units[$_POST['category']][$fromUnit]} is {$result} {$units[$_POST['category']][$toUnit]}\", PHP_EOL;",
          "87:         echo 'Please enter quantity and select From Unit and To Unit', PHP_EOL;",
          "90:     echo 'Please enter quantity and select From Unit and To Unit', PHP_EOL;",
          "",
          "[Added Lines]",
          "81:     if (!is_numeric($quantity)) {",
          "82:         $helper->log('Quantity is not numeric');",
          "83:     } elseif (isset($units[$_POST['category']][$fromUnit], $units[$_POST['category']][$toUnit])) {",
          "87:         $helper->log(\"{$quantity} {$units[$_POST['category']][$fromUnit]} is {$result} {$units[$_POST['category']][$toUnit]}\");",
          "89:         $helper->log('Please enter quantity and select From Unit and To Unit');",
          "92:     $helper->log('Please enter quantity and select From Unit and To Unit');",
          "",
          "---------------"
        ],
        "samples/Wizards/NumberFormat/Accounting.php||samples/Wizards/NumberFormat/Accounting.php": [
          "File: samples/Wizards/NumberFormat/Accounting.php -> samples/Wizards/NumberFormat/Accounting.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         $helper->log('The Sample Number Value must be numeric');",
          "86:     } elseif (!is_numeric($_POST['decimals']) || str_contains((string) $_POST['decimals'], '.') || (int) $_POST['decimals'] < 0) {",
          "87:         $helper->log('The Decimal Places value must be positive integer');",
          "88:     } else {",
          "89:         try {",
          "90:             $wizard = new Wizard\\Accounting($_POST['currency'], (int) $_POST['decimals'], isset($_POST['thousands']), (bool) $_POST['position'], (bool) $_POST['spacing']);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     } elseif (!in_array($_POST['currency'], array_keys($currencies), true)) {",
          "89:         $helper->log('Unrecognized currency symbol');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:             $helper->log('<hr /><b>Code:</b><br />');",
          "94:             $helper->log('use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard;');",
          "95:             $helper->log(",
          "97:                 . (isset($_POST['thousands']) ? 'WITH_THOUSANDS_SEPARATOR' : 'WITHOUT_THOUSANDS_SEPARATOR')",
          "98:                 . ', Wizard\\Currency::' . (((bool) $_POST['position']) ? 'LEADING_SYMBOL' : 'TRAILING_SYMBOL')",
          "99:                 . ', Wizard\\Currency::' . (((bool) $_POST['spacing']) ? 'SYMBOL_WITH_SPACING' : 'SYMBOL_WITHOUT_SPACING')",
          "101:             );",
          "103:             $helper->log('<hr /><b>Mask:</b><br />');",
          "104:             $helper->log($mask . '<br />');",
          "105:             $helper->log('<br /><b>Example:</b><br />');",
          "",
          "[Removed Lines]",
          "96:                 \"\\$mask = Wizard\\\\Accounting('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"",
          "100:                 . ');<br />'",
          "102:             $helper->log('echo (string) $mask;');",
          "",
          "[Added Lines]",
          "98:                 \"\\$wizard = new Wizard\\\\Accounting('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"",
          "102:                 . ');'",
          "104:             $helper->log('$mask = $wizard->format();');",
          "105:             $helper->log('<br />echo (string) $mask;');",
          "",
          "---------------"
        ],
        "samples/Wizards/NumberFormat/Currency.php||samples/Wizards/NumberFormat/Currency.php": [
          "File: samples/Wizards/NumberFormat/Currency.php -> samples/Wizards/NumberFormat/Currency.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:         $helper->log('The Sample Number Value must be numeric');",
          "86:     } elseif (!is_numeric($_POST['decimals']) || str_contains((string) $_POST['decimals'], '.') || (int) $_POST['decimals'] < 0) {",
          "87:         $helper->log('The Decimal Places value must be positive integer');",
          "88:     } else {",
          "89:         try {",
          "90:             $wizard = new Wizard\\Currency($_POST['currency'], (int) $_POST['decimals'], isset($_POST['thousands']), (bool) $_POST['position'], (bool) $_POST['spacing']);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     } elseif (!in_array($_POST['currency'], array_keys($currencies), true)) {",
          "89:         $helper->log('Unrecognized currency symbol');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:             $helper->log('<hr /><b>Code:</b><br />');",
          "94:             $helper->log('use PhpOffice\\PhpSpreadsheet\\Style\\NumberFormat\\Wizard;');",
          "95:             $helper->log(",
          "97:                 . (isset($_POST['thousands']) ? 'WITH_THOUSANDS_SEPARATOR' : 'WITHOUT_THOUSANDS_SEPARATOR')",
          "98:                 . ', Wizard\\Currency::' . (((bool) $_POST['position']) ? 'LEADING_SYMBOL' : 'TRAILING_SYMBOL')",
          "99:                 . ', Wizard\\Currency::' . (((bool) $_POST['spacing']) ? 'SYMBOL_WITH_SPACING' : 'SYMBOL_WITHOUT_SPACING')",
          "101:             );",
          "103:             $helper->log('<hr /><b>Mask:</b><br />');",
          "104:             $helper->log($mask . '<br />');",
          "105:             $helper->log('<br /><b>Example:</b><br />');",
          "",
          "[Removed Lines]",
          "96:                 \"\\$mask = Wizard\\\\Currency('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"",
          "100:                 . ');<br />'",
          "102:             $helper->log('echo (string) $mask;');",
          "",
          "[Added Lines]",
          "98:                 \"\\$wizard = new Wizard\\\\Currency('{$_POST['currency']}', {$_POST['decimals']}, Wizard\\\\Number::\"",
          "102:                 . ');'",
          "104:             $helper->log('$mask = $wizard->format();');",
          "105:             $helper->log('<br />echo (string) $mask;');",
          "",
          "---------------"
        ],
        "src/PhpSpreadsheet/Helper/Downloader.php||src/PhpSpreadsheet/Helper/Downloader.php": [
          "File: src/PhpSpreadsheet/Helper/Downloader.php -> src/PhpSpreadsheet/Helper/Downloader.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     public function __construct(string $folder, string $filename, ?string $filetype = null)",
          "31:     {",
          "32:         if ((is_dir($folder) === false) || (is_readable($folder) === false)) {",
          "34:         }",
          "35:         $filepath = \"{$folder}/{$filename}\";",
          "36:         $this->filepath = (string) realpath($filepath);",
          "37:         $this->filename = basename($filepath);",
          "38:         if ((file_exists($this->filepath) === false) || (is_readable($this->filepath) === false)) {",
          "40:         }",
          "42:         $filetype ??= pathinfo($filename, PATHINFO_EXTENSION);",
          "43:         if (array_key_exists(strtolower($filetype), self::CONTENT_TYPES) === false) {",
          "45:         }",
          "46:         $this->filetype = strtolower($filetype);",
          "47:     }",
          "",
          "[Removed Lines]",
          "33:             throw new Exception(\"Folder {$folder} is not accessable\");",
          "39:             throw new Exception(\"{$this->filename} not found, or cannot be read\");",
          "44:             throw new Exception(\"Invalid filetype: {$filetype} cannot be downloaded\");",
          "",
          "[Added Lines]",
          "33:             throw new Exception('Folder is not accessible');",
          "39:             throw new Exception('File not found, or cannot be read');",
          "44:             throw new Exception('Invalid filetype: cannot be downloaded');",
          "",
          "---------------"
        ]
      }
    }
  ]
}