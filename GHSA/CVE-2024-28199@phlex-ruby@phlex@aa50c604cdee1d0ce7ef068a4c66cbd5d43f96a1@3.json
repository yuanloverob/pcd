{
  "cve_id": "CVE-2024-28199",
  "cve_desc": "phlex is an open source framework for building object-oriented views in Ruby. There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks. If you render an `<a>` tag with an `href` attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user. If you splat user-provided attributes when rendering any HTML tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user. Patches are available on RubyGems for all 1.x minor versions. Users are advised to upgrade. Users unable to upgrade should consider configuring a content security policy that does not allow `unsafe-inline`.",
  "repo": "phlex-ruby/phlex",
  "patch_hash": "aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1",
  "patch_info": {
    "commit_hash": "aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1",
    "repo": "phlex-ruby/phlex",
    "commit_url": "https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1",
    "files": [
      "lib/phlex/sgml.rb",
      "test/phlex/view/naughty_business.rb"
    ],
    "message": "Fix improper case-sensitivity\n\nSee https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g",
    "before_after_code_files": [
      "lib/phlex/sgml.rb||lib/phlex/sgml.rb",
      "test/phlex/view/naughty_business.rb||test/phlex/view/naughty_business.rb"
    ]
  },
  "patch_diff": {
    "lib/phlex/sgml.rb||lib/phlex/sgml.rb": [
      "File: lib/phlex/sgml.rb -> lib/phlex/sgml.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "393:     attributes = process_attributes(**attributes)",
      "394:    end",
      "404:    buffer = +\"\"",
      "405:    __build_attributes__(attributes, buffer: buffer)",
      "",
      "[Removed Lines]",
      "396:    if attributes[:href]&.start_with?(/\\s*javascript:/)",
      "397:     attributes.delete(:href)",
      "398:    end",
      "400:    if attributes[\"href\"]&.start_with?(/\\s*javascript:/)",
      "401:     attributes.delete(\"href\")",
      "402:    end",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "418:      else raise ArgumentError, \"Attribute keys should be Strings or Symbols.\"",
      "419:     end",
      "421:     # Detect unsafe attribute names. Attribute names are considered unsafe if they match an event attribute or include unsafe characters.",
      "423:      raise ArgumentError, \"Unsafe attribute name detected: #{k}.\"",
      "424:     end",
      "",
      "[Removed Lines]",
      "422:     if HTML::EVENT_ATTRIBUTES[name] || name.match?(/[<>&\"']/)",
      "",
      "[Added Lines]",
      "413:     lower_name = name.downcase",
      "414:     next if lower_name == \"href\" && v.start_with?(/\\s*javascript:/i)",
      "417:     if HTML::EVENT_ATTRIBUTES[lower_name] || name.match?(/[<>&\"']/)",
      "",
      "---------------"
    ],
    "test/phlex/view/naughty_business.rb||test/phlex/view/naughty_business.rb": [
      "File: test/phlex/view/naughty_business.rb -> test/phlex/view/naughty_business.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: describe Phlex::HTML do",
      "4:  extend ViewHelper",
      "6:  with \"naughty text\" do",
      "7:   view do",
      "8:    def view_template",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6:  with \"naughty javascript links\" do",
      "7:   view do",
      "8:    def template",
      "9:     a(href: \"javascript:alert(1)\") { \"a\" }",
      "10:     a(href: \"JAVASCRIPT:alert(1)\") { \"b\" }",
      "11:     a(href: :\"JAVASCRIPT:alert(1)\") { \"c\" }",
      "12:     a(HREF: \"javascript:alert(1)\") { \"d\" }",
      "13:    end",
      "14:   end",
      "16:   it \"removes the href attributes\" do",
      "17:    expect(output).to be == \"<a>a</a><a>b</a><a>c</a><a>d</a>\"",
      "18:   end",
      "19:  end",
      "21:  with \"naughty uppercase event tag\" do",
      "22:   view do",
      "23:    def template",
      "24:     button ONCLICK: \"ALERT(1)\" do",
      "25:      \"naughty button\"",
      "26:     end",
      "27:    end",
      "28:   end",
      "30:   it \"raises\" do",
      "31:    expect { output }.to raise_exception ArgumentError,",
      "32:     message: be == \"Unsafe attribute name detected: ONCLICK.\"",
      "33:   end",
      "34:  end",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "38d7f7f4c397fad753b10eb262d4795b15b9b3a7",
      "candidate_info": {
        "commit_hash": "38d7f7f4c397fad753b10eb262d4795b15b9b3a7",
        "repo": "phlex-ruby/phlex",
        "commit_url": "https://github.com/phlex-ruby/phlex/commit/38d7f7f4c397fad753b10eb262d4795b15b9b3a7",
        "files": [
          "fixtures/components/say_hi.rb",
          "lib/phlex/csv.rb",
          "lib/phlex/sgml.rb",
          "test/phlex/kit.rb",
          "test/phlex/view/legacy_template_method.rb",
          "test/phlex/view/naughty_business.rb"
        ],
        "message": "Remove legacy template method",
        "before_after_code_files": [
          "fixtures/components/say_hi.rb||fixtures/components/say_hi.rb",
          "lib/phlex/csv.rb||lib/phlex/csv.rb",
          "lib/phlex/sgml.rb||lib/phlex/sgml.rb",
          "test/phlex/kit.rb||test/phlex/kit.rb",
          "test/phlex/view/legacy_template_method.rb||test/phlex/view/legacy_template_method.rb",
          "test/phlex/view/naughty_business.rb||test/phlex/view/naughty_business.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/phlex/sgml.rb||lib/phlex/sgml.rb",
            "test/phlex/view/naughty_business.rb||test/phlex/view/naughty_business.rb"
          ],
          "candidate": [
            "lib/phlex/sgml.rb||lib/phlex/sgml.rb",
            "test/phlex/view/naughty_business.rb||test/phlex/view/naughty_business.rb"
          ]
        }
      },
      "candidate_diff": {
        "fixtures/components/say_hi.rb||fixtures/components/say_hi.rb": [
          "File: fixtures/components/say_hi.rb -> fixtures/components/say_hi.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:   @times = times",
          "7:  end",
          "10:   article {",
          "11:    @times.times { h1 { \"Hi #{@name}\" } }",
          "12:    yield",
          "",
          "[Removed Lines]",
          "9:  def template",
          "",
          "[Added Lines]",
          "9:  def view_template",
          "",
          "---------------"
        ],
        "lib/phlex/csv.rb||lib/phlex/csv.rb": [
          "File: lib/phlex/csv.rb -> lib/phlex/csv.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   yield(record)",
          "93:  end",
          "99:  # Override and set to `false` to disable rendering headers.",
          "100:  def render_headers?",
          "101:   true",
          "",
          "[Removed Lines]",
          "95:  def template(...)",
          "96:   nil",
          "97:  end",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/phlex/sgml.rb||lib/phlex/sgml.rb": [
          "File: lib/phlex/sgml.rb -> lib/phlex/sgml.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   #  def view_template(&block)",
          "66:   #   article(class: \"card\", &block)",
          "67:   #  end",
          "80:   end",
          "82:   def await(task)",
          "",
          "[Removed Lines]",
          "68:   def template",
          "69:    yield",
          "70:   end",
          "72:   def self.method_added(method_name)",
          "73:    if method_name == :template",
          "74:     Kernel.warn \"\u26a0\ufe0f [DEPRECATION] Defining the `template` method on a Phlex component will not be supported in Phlex 2.0. Please rename the method to `view_template` instead.\"",
          "75:    end",
          "76:   end",
          "78:   def view_template(&block)",
          "79:    template(&block)",
          "",
          "[Added Lines]",
          "68:   def view_template",
          "69:    yield if block_given?",
          "",
          "---------------"
        ],
        "test/phlex/kit.rb||test/phlex/kit.rb": [
          "File: test/phlex/kit.rb -> test/phlex/kit.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: class Example < Phlex::HTML",
          "6:  include Components",
          "9:   SayHi(\"Joel\", times: 2) { \"Inside\" }",
          "10:   Components::SayHi(\"Will\", times: 1) { \"Inside\" }",
          "11:  end",
          "",
          "[Removed Lines]",
          "8:  def template",
          "",
          "[Added Lines]",
          "8:  def view_template",
          "",
          "---------------"
        ],
        "test/phlex/view/legacy_template_method.rb||test/phlex/view/legacy_template_method.rb": [
          "File: test/phlex/view/legacy_template_method.rb -> test/phlex/view/legacy_template_method.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/phlex/view/naughty_business.rb||test/phlex/view/naughty_business.rb": [
          "File: test/phlex/view/naughty_business.rb -> test/phlex/view/naughty_business.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  with \"naughty javascript links\" do",
          "7:   view do",
          "9:     a(href: \"javascript:alert(1)\") { \"a\" }",
          "10:     a(href: \"JAVASCRIPT:alert(1)\") { \"b\" }",
          "11:     a(href: :\"JAVASCRIPT:alert(1)\") { \"c\" }",
          "",
          "[Removed Lines]",
          "8:    def template",
          "",
          "[Added Lines]",
          "8:    def view_template",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:  with \"naughty uppercase event tag\" do",
          "22:   view do",
          "24:     button ONCLICK: \"ALERT(1)\" do",
          "25:      \"naughty button\"",
          "26:     end",
          "",
          "[Removed Lines]",
          "23:    def template",
          "",
          "[Added Lines]",
          "23:    def view_template",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "262f00666e92dc72354332df0ab22369ea89838f",
      "candidate_info": {
        "commit_hash": "262f00666e92dc72354332df0ab22369ea89838f",
        "repo": "phlex-ruby/phlex",
        "commit_url": "https://github.com/phlex-ruby/phlex/commit/262f00666e92dc72354332df0ab22369ea89838f",
        "files": [
          "lib/phlex/fifo.rb",
          "lib/phlex/html.rb",
          "lib/phlex/sgml.rb",
          "lib/phlex/svg.rb"
        ],
        "message": "More consistent namespacing style",
        "before_after_code_files": [
          "lib/phlex/fifo.rb||lib/phlex/fifo.rb",
          "lib/phlex/html.rb||lib/phlex/html.rb",
          "lib/phlex/sgml.rb||lib/phlex/sgml.rb",
          "lib/phlex/svg.rb||lib/phlex/svg.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/phlex/sgml.rb||lib/phlex/sgml.rb"
          ],
          "candidate": [
            "lib/phlex/sgml.rb||lib/phlex/sgml.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/phlex/fifo.rb||lib/phlex/fifo.rb": [
          "File: lib/phlex/fifo.rb -> lib/phlex/fifo.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:    # Check the key definitely doesn't exist now we have the lock",
          "34:    return if @hash[hash]",
          "36:    while @bytesize > @max_bytesize",
          "37:     k, v = @hash.shift",
          "38:     @bytesize -= v[1].bytesize",
          "39:    end",
          "43:   end",
          "44:  end",
          "",
          "[Removed Lines]",
          "41:    @hash[hash] = [key, value]",
          "42:    @bytesize += value.bytesize",
          "",
          "[Added Lines]",
          "36:    @hash[hash] = [key, value]",
          "37:    @bytesize += value.bytesize",
          "",
          "---------------"
        ],
        "lib/phlex/html.rb||lib/phlex/html.rb": [
          "File: lib/phlex/html.rb -> lib/phlex/html.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # frozen_string_literal: true",
          "33:     end",
          "36:    end",
          "37:   end",
          "49:  end",
          "50: end",
          "",
          "[Removed Lines]",
          "3: module Phlex",
          "4:  # @abstract Subclass and define {#template} to create an HTML component class.",
          "5:  class HTML < SGML",
          "6:   autoload :StandardElements, \"phlex/html/standard_elements\"",
          "7:   autoload :VoidElements, \"phlex/html/void_elements\"",
          "9:   # A list of HTML attributes that have the potential to execute unsafe JavaScript.",
          "10:   EVENT_ATTRIBUTES = Set.new(%w[onabort onafterprint onbeforeprint onbeforeunload onblur oncanplay oncanplaythrough onchange onclick oncontextmenu oncopy oncuechange oncut ondblclick ondrag ondragend ondragenter ondragleave ondragover ondragstart ondrop ondurationchange onemptied onended onerror onfocus onhashchange oninput oninvalid onkeydown onkeypress onkeyup onload onloadeddata onloadedmetadata onloadstart onmessage onmousedown onmousemove onmouseout onmouseover onmouseup onmousewheel onoffline ononline onpagehide onpageshow onpaste onpause onplay onplaying onpopstate onprogress onratechange onreset onresize onscroll onsearch onseeked onseeking onselect onstalled onstorage onsubmit onsuspend ontimeupdate ontoggle onunload onvolumechange onwaiting onwheel]).freeze",
          "12:   extend Elements",
          "13:   include VoidElements, StandardElements",
          "15:   # Output an HTML doctype.",
          "16:   def doctype",
          "17:    context = @_context",
          "18:    return if context.fragments && !context.in_target_fragment",
          "20:    context.buffer << \"<!DOCTYPE html>\"",
          "21:    nil",
          "22:   end",
          "24:   # Outputs an `<svg>` tag",
          "25:   # @return [nil]",
          "26:   # @see https://developer.mozilla.org/docs/Web/SVG/Element/svg",
          "27:   def svg(...)",
          "28:    if block_given?",
          "29:     super do",
          "30:      render Phlex::SVG.new do |svg|",
          "31:       yield(svg)",
          "32:      end",
          "34:    else",
          "35:     super",
          "39:   def filename",
          "40:    nil",
          "41:   end",
          "43:   def content_type",
          "44:    \"text/html\"",
          "45:   end",
          "47:   # This should be extended after all method definitions",
          "48:   extend ElementClobberingGuard",
          "",
          "[Added Lines]",
          "3: class Phlex::HTML < Phlex::SGML",
          "4:  autoload :StandardElements, \"phlex/html/standard_elements\"",
          "5:  autoload :VoidElements, \"phlex/html/void_elements\"",
          "7:  # A list of HTML attributes that have the potential to execute unsafe JavaScript.",
          "8:  EVENT_ATTRIBUTES = Set.new(%w[onabort onafterprint onbeforeprint onbeforeunload onblur oncanplay oncanplaythrough onchange onclick oncontextmenu oncopy oncuechange oncut ondblclick ondrag ondragend ondragenter ondragleave ondragover ondragstart ondrop ondurationchange onemptied onended onerror onfocus onhashchange oninput oninvalid onkeydown onkeypress onkeyup onload onloadeddata onloadedmetadata onloadstart onmessage onmousedown onmousemove onmouseout onmouseover onmouseup onmousewheel onoffline ononline onpagehide onpageshow onpaste onpause onplay onplaying onpopstate onprogress onratechange onreset onresize onscroll onsearch onseeked onseeking onselect onstalled onstorage onsubmit onsuspend ontimeupdate ontoggle onunload onvolumechange onwaiting onwheel]).freeze",
          "10:  extend Phlex::Elements",
          "11:  include VoidElements, StandardElements",
          "13:  # Output an HTML doctype.",
          "14:  def doctype",
          "15:   context = @_context",
          "16:   return if context.fragments && !context.in_target_fragment",
          "18:   context.buffer << \"<!DOCTYPE html>\"",
          "19:   nil",
          "20:  end",
          "22:  # Outputs an `<svg>` tag",
          "23:  # @return [nil]",
          "24:  # @see https://developer.mozilla.org/docs/Web/SVG/Element/svg",
          "25:  def svg(...)",
          "26:   if block_given?",
          "27:    super do",
          "28:     render Phlex::SVG.new do |svg|",
          "29:      yield(svg)",
          "32:   else",
          "33:    super",
          "35:  end",
          "37:  def filename",
          "38:   nil",
          "39:  end",
          "41:  def content_type",
          "42:   \"text/html\"",
          "45:  # This should be extended after all method definitions",
          "46:  extend Phlex::ElementClobberingGuard",
          "",
          "---------------"
        ],
        "lib/phlex/sgml.rb||lib/phlex/sgml.rb": [
          "File: lib/phlex/sgml.rb -> lib/phlex/sgml.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # frozen_string_literal: true",
          "24:    end",
          "36:     else",
          "37:      false",
          "38:     end",
          "39:    end",
          "40:   end",
          "70:   end",
          "83:   end",
          "121:        end",
          "122:       end",
          "125:      end",
          "126:     end",
          "127:    end",
          "135:   end",
          "141:   end",
          "153:   end",
          "172:   end",
          "213:   end",
          "231:   end",
          "245:   end",
          "292:    else",
          "294:    end",
          "297:   end",
          "335:   end",
          "406:    else",
          "412:    end",
          "415:   end",
          "471:     else",
          "481:     end",
          "499:     end",
          "516:     else",
          "525:     end",
          "528:    end",
          "529:   end",
          "555:     else",
          "561:     end",
          "564:    end",
          "567:    buffer",
          "568:   end",
          "573:    when String",
          "575:    when Symbol",
          "590:    else",
          "595:     else",
          "597:     end",
          "598:    end",
          "626:     end",
          "630:    else",
          "638:    end",
          "641:   end",
          "642:  end",
          "643: end",
          "",
          "[Removed Lines]",
          "3: module Phlex",
          "4:  # **Standard Generalized Markup Language** for behaviour common to {HTML} and {SVG}.",
          "5:  class SGML",
          "6:   include Helpers",
          "8:   class << self",
          "9:    # Render the view to a String. Arguments are delegated to {.new}.",
          "10:    def call(...)",
          "11:     new(...).call",
          "12:    end",
          "14:    # Create a new instance of the component.",
          "15:    # @note The block will not be delegated {#initialize}. Instead, it will be sent to {#template} when rendering.",
          "16:    def new(*, **, &block)",
          "17:     if block",
          "18:      object = super(*, **, &nil)",
          "19:      object.instance_exec { @_content_block = block }",
          "20:      object",
          "21:     else",
          "22:      super",
          "23:     end",
          "26:    # @api private",
          "27:    def __element_method__?(method_name)",
          "28:     if instance_methods.include?(method_name)",
          "29:      owner = instance_method(method_name).owner",
          "31:      if Phlex::Elements === owner && owner.registered_elements[method_name]",
          "32:       true",
          "33:      else",
          "34:       false",
          "35:      end",
          "42:   # @!method initialize",
          "43:   # @abstract Override to define an initializer for your component.",
          "44:   # @note Your initializer will not receive a block passed to {.new}. Instead, this block will be sent to {#template} when rendering.",
          "45:   # @example",
          "46:   #  def initialize(articles:)",
          "47:   #   @articles = articles",
          "48:   #  end",
          "50:   # @abstract Override to define a template for your component.",
          "51:   # @example",
          "52:   #  def view_template",
          "53:   #   h1 { \"\ud83d\udc4b Hello World!\" }",
          "54:   #  end",
          "55:   # @example Your template may yield a content block.",
          "56:   #  def view_template",
          "57:   #   main {",
          "58:   #    h1 { \"Hello World\" }",
          "59:   #    yield",
          "60:   #   }",
          "61:   #  end",
          "62:   # @example Alternatively, you can delegate the content block to an element.",
          "63:   #  def view_template(&block)",
          "64:   #   article(class: \"card\", &block)",
          "65:   #  end",
          "66:   def view_template",
          "67:    if block_given?",
          "68:     yield",
          "69:    end",
          "72:   def await(task)",
          "73:    case task",
          "74:    when defined?(Concurrent::IVar) && Concurrent::IVar",
          "75:     flush if task.pending?",
          "76:     task.wait.value",
          "77:    when defined?(Async::Task) && Async::Task",
          "78:     flush if task.running?",
          "79:     task.wait",
          "80:    else",
          "81:     raise ArgumentError.new(\"Expected an asynchronous task / promise.\")",
          "82:    end",
          "85:   # Renders the view and returns the buffer. The default buffer is a mutable String.",
          "86:   def call(buffer = +\"\", context: Phlex::Context.new, view_context: nil, parent: nil, fragments: nil, &block)",
          "87:    @_buffer = buffer",
          "88:    @_context = context",
          "89:    @_view_context = view_context",
          "90:    @_parent = parent",
          "92:    raise Phlex::DoubleRenderError.new(\"You can't render a #{self.class.name} more than once.\") if @_rendered",
          "93:    @_rendered = true",
          "95:    if fragments",
          "96:     @_context.target_fragments(fragments)",
          "97:    end",
          "99:    block ||= @_content_block",
          "101:    return \"\" unless render?",
          "103:    if !parent && Phlex::SUPPORTS_FIBER_STORAGE",
          "104:     original_fiber_storage = Fiber[:__phlex_component__]",
          "105:     Fiber[:__phlex_component__] = self",
          "106:    end",
          "108:    @_context.around_render do",
          "109:     around_template do",
          "110:      if block",
          "111:       if DeferredRender === self",
          "112:        vanish(self, &block)",
          "113:        view_template",
          "114:       else",
          "115:        view_template do |*args|",
          "116:         if args.length > 0",
          "117:          yield_content_with_args(*args, &block)",
          "118:         else",
          "119:          yield_content(&block)",
          "120:         end",
          "123:      else",
          "124:       view_template",
          "129:    unless parent",
          "130:     if Phlex::SUPPORTS_FIBER_STORAGE",
          "131:      Fiber[:__phlex_component__] = original_fiber_storage",
          "132:     end",
          "133:     buffer << context.buffer",
          "134:    end",
          "137:   # Access the current render context data",
          "138:   # @return the supplied context object, by default a Hash",
          "139:   def context",
          "140:    @_context.user_context",
          "143:   # Output text content. The text will be HTML-escaped.",
          "144:   # @param content [String, Symbol, Integer, void] the content to be output on the buffer. Strings, Symbols, and Integers are handled by `plain` directly, but any object can be handled by overriding `format_object`",
          "145:   # @return [nil]",
          "146:   # @see #format_object",
          "147:   def plain(content)",
          "148:    unless __text__(content)",
          "149:     raise ArgumentError.new(\"You've passed an object to plain that is not handled by format_object. See https://rubydoc.info/gems/phlex/Phlex/SGML#format_object-instance_method for more information\")",
          "150:    end",
          "152:    nil",
          "155:   # Output a whitespace character. This is useful for getting inline elements to wrap. If you pass a block, a whitespace will be output before and after yielding the block.",
          "156:   # @return [nil]",
          "157:   # @yield If a block is given, it yields the block with no arguments.",
          "158:   def whitespace(&)",
          "159:    context = @_context",
          "160:    return if context.fragments && !context.in_target_fragment",
          "162:    buffer = context.buffer",
          "164:    buffer << \" \"",
          "166:    if block_given?",
          "167:     yield_content(&)",
          "168:     buffer << \" \"",
          "169:    end",
          "171:    nil",
          "174:   # Output an HTML comment.",
          "175:   # @return [nil]",
          "176:   def comment(&)",
          "177:    context = @_context",
          "178:    return if context.fragments && !context.in_target_fragment",
          "180:    buffer = context.buffer",
          "182:    buffer << \"<!-- \"",
          "183:    yield_content(&)",
          "184:    buffer << \" -->\"",
          "186:    nil",
          "187:   end",
          "189:   # This method is very dangerous and should usually be avoided. It will output the given String without any HTML safety. You should never use this method to output unsafe user input.",
          "190:   # @param content [String|nil]",
          "191:   # @return [nil]",
          "192:   def unsafe_raw(content = nil)",
          "193:    return nil unless content",
          "195:    context = @_context",
          "196:    return if context.fragments && !context.in_target_fragment",
          "198:    context.buffer << content",
          "199:    nil",
          "200:   end",
          "202:   # Capture a block of output as a String.",
          "203:   # @note This only works if the block's receiver is the current component or the block returns a String.",
          "204:   # @return [String]",
          "205:   def capture(*args, &block)",
          "206:    return \"\" unless block",
          "208:    if args.length > 0",
          "209:     @_context.capturing_into(+\"\") { yield_content_with_args(*args, &block) }",
          "210:    else",
          "211:     @_context.capturing_into(+\"\") { yield_content(&block) }",
          "212:    end",
          "215:   def tag(name, ...)",
          "216:    normalized_name = case name",
          "217:     when Symbol then name.name.downcase",
          "218:     when String then name.downcase",
          "219:     else raise ArgumentError.new(\"Expected the tag name as a Symbol or String.\")",
          "220:    end",
          "222:    if normalized_name == \"script\"",
          "223:     raise ArgumentError.new(\"You can\u2019t use the `<script>` tag from the `tag` method. Use `unsafe_tag` instead, but be careful if using user input.\")",
          "224:    end",
          "226:    if registered_elements[normalized_name]",
          "227:     public_send(normalized_name, ...)",
          "228:    else",
          "229:     raise ArgumentError.new(\"Unknown tag: #{normalized_name}\")",
          "230:    end",
          "233:   def unsafe_tag(name, ...)",
          "234:    normalized_name = case name",
          "235:     when Symbol then name.name.downcase",
          "236:     when String then name.downcase",
          "237:     else raise ArgumentError.new(\"Expected the tag name as a Symbol or String.\")",
          "238:    end",
          "240:    if registered_elements[normalized_name]",
          "241:     public_send(normalized_name, ...)",
          "242:    else",
          "243:     raise ArgumentError.new(\"Unknown tag: #{normalized_name}\")",
          "244:    end",
          "247:   private",
          "249:   # @api private",
          "250:   def flush",
          "251:    return if @_context.capturing",
          "253:    buffer = @_context.buffer",
          "254:    @_buffer << buffer.dup",
          "255:    buffer.clear",
          "256:   end",
          "258:   # Render another component, block or enumerable",
          "259:   # @return [nil]",
          "260:   # @overload render(component, &block)",
          "261:   #  Renders the component.",
          "262:   #  @param component [Phlex::SGML]",
          "263:   # @overload render(component_class, &block)",
          "264:   #  Renders a new instance of the component class. This is useful for component classes that take no arguments.",
          "265:   #  @param component_class [Class<Phlex::SGML>]",
          "266:   # @overload render(proc)",
          "267:   #  Renders the proc with {#yield_content}.",
          "268:   #  @param proc [Proc]",
          "269:   # @overload render(enumerable)",
          "270:   #  Renders each item of the enumerable.",
          "271:   #  @param enumerable [Enumerable]",
          "272:   #  @example",
          "273:   #   render @items",
          "274:   def render(renderable, &)",
          "275:    case renderable",
          "276:    when Phlex::SGML",
          "277:     renderable.call(@_buffer, context: @_context, view_context: @_view_context, parent: self, &)",
          "278:    when Class",
          "279:     if renderable < Phlex::SGML",
          "280:      renderable.new.call(@_buffer, context: @_context, view_context: @_view_context, parent: self, &)",
          "281:     end",
          "282:    when Enumerable",
          "283:     renderable.each { |r| render(r, &) }",
          "284:    when Proc, Method",
          "285:     if renderable.arity == 0",
          "286:      yield_content_with_no_args(&renderable)",
          "287:     else",
          "288:      yield_content(&renderable)",
          "289:     end",
          "290:    when String",
          "291:     plain(renderable)",
          "293:     raise ArgumentError.new(\"You can't render a #{renderable.inspect}.\")",
          "296:    nil",
          "299:   # Like {#capture} but the output is vanished into a BlackHole buffer.",
          "300:   # Because the BlackHole does nothing with the output, this should be faster.",
          "301:   # @return [nil]",
          "302:   def vanish(*args)",
          "303:    return unless block_given?",
          "305:    @_context.capturing_into(BlackHole) { yield(*args) }",
          "307:    nil",
          "308:   end",
          "310:   # Determines if the component should render. By default, it returns `true`.",
          "311:   # @abstract Override to define your own predicate to prevent rendering.",
          "312:   # @return [Boolean]",
          "313:   def render?",
          "314:    true",
          "315:   end",
          "317:   # Format the object for output",
          "318:   # @abstract Override to define your own format handling for different object types. Please remember to call `super` in the case that the passed object doesn't match, so that object formatting can be added at different layers of the inheritance tree.",
          "319:   # @return [String]",
          "320:   def format_object(object)",
          "321:    case object",
          "322:    when Float, Integer",
          "323:     object.to_s",
          "324:    end",
          "325:   end",
          "327:   # @abstract Override this method to hook in around a template render. You can do things before and after calling `super` to render the template. You should always call `super` so that callbacks can be added at different layers of the inheritance tree.",
          "328:   # @return [nil]",
          "329:   def around_template",
          "330:    before_template",
          "331:    yield",
          "332:    after_template",
          "334:    nil",
          "337:   # @abstract Override this method to hook in right before a template is rendered. Please remember to call `super` so that callbacks can be added at different layers of the inheritance tree.",
          "338:   # @return [nil]",
          "339:   def before_template",
          "340:    nil",
          "341:   end",
          "343:   # @abstract Override this method to hook in right after a template is rendered. Please remember to call `super` so that callbacks can be added at different layers of the inheritance tree.",
          "344:   # @return [nil]",
          "345:   def after_template",
          "346:    nil",
          "347:   end",
          "349:   # Yields the block and checks if it buffered anything. If nothing was buffered, the return value is treated as text. The text is always HTML-escaped.",
          "350:   # @yieldparam component [self]",
          "351:   # @return [nil]",
          "352:   def yield_content",
          "353:    return unless block_given?",
          "355:    buffer = @_context.buffer",
          "357:    original_length = buffer.bytesize",
          "358:    content = yield(self)",
          "359:    __text__(content) if original_length == buffer.bytesize",
          "361:    nil",
          "362:   end",
          "364:   # Same as {#yield_content} but yields no arguments.",
          "365:   # @yield Yields the block with no arguments.",
          "366:   def yield_content_with_no_args",
          "367:    return unless block_given?",
          "369:    buffer = @_context.buffer",
          "371:    original_length = buffer.bytesize",
          "372:    content = yield",
          "373:    __text__(content) if original_length == buffer.bytesize",
          "375:    nil",
          "376:   end",
          "378:   # Same as {#yield_content} but accepts a splat of arguments to yield. This is slightly slower than {#yield_content}.",
          "379:   # @yield [*args] Yields the given arguments.",
          "380:   # @return [nil]",
          "381:   def yield_content_with_args(*)",
          "382:    return unless block_given?",
          "384:    buffer = @_context.buffer",
          "386:    original_length = buffer.bytesize",
          "387:    content = yield(*)",
          "388:    __text__(content) if original_length == buffer.bytesize",
          "390:    nil",
          "391:   end",
          "393:   # Performs the same task as the public method #plain, but does not raise an error if an unformattable object is passed",
          "394:   # @api private",
          "395:   def __text__(content)",
          "396:    context = @_context",
          "397:    return true if context.fragments && !context.in_target_fragment",
          "399:    case content",
          "400:    when String",
          "401:     @_context.buffer << Phlex::Escape.html_escape(content)",
          "402:    when Symbol",
          "403:     @_context.buffer << Phlex::Escape.html_escape(content.name)",
          "404:    when nil",
          "405:     nil",
          "407:     if (formatted_object = format_object(content))",
          "408:      @_context.buffer << Phlex::Escape.html_escape(formatted_object)",
          "409:     else",
          "410:      return false",
          "411:     end",
          "414:    true",
          "417:   # @api private",
          "418:   def __attributes__(attributes, buffer = +\"\")",
          "419:    attributes.each do |k, v|",
          "420:     next unless v",
          "422:     name = case k",
          "423:      when String then k",
          "424:      when Symbol then k.name.tr(\"_\", \"-\")",
          "425:      else raise ArgumentError.new(\"Attribute keys should be Strings or Symbols.\")",
          "426:     end",
          "428:     lower_name = name.downcase",
          "429:     next if lower_name == \"href\" && v.to_s.downcase.delete(\"^a-z:\").start_with?(\"javascript:\")",
          "431:     # Detect unsafe attribute names. Attribute names are considered unsafe if they match an event attribute or include unsafe characters.",
          "432:     if HTML::EVENT_ATTRIBUTES.include?(lower_name.delete(\"^a-z-\")) || name.match?(/[<>&\"']/)",
          "433:      raise ArgumentError.new(\"Unsafe attribute name detected: #{k}.\")",
          "434:     end",
          "436:     if lower_name.to_sym == :id && k != :id",
          "437:      raise ArgumentError.new(\":id attribute should only be passed as a lowercase symbol.\")",
          "438:     end",
          "440:     case v",
          "441:     when true",
          "442:      buffer << \" \" << name",
          "443:     when String",
          "444:      buffer << \" \" << name << '=\"' << v.gsub('\"', \"&quot;\") << '\"'",
          "445:     when Symbol",
          "446:      buffer << \" \" << name << '=\"' << v.name.gsub('\"', \"&quot;\") << '\"'",
          "447:     when Integer, Float",
          "448:      buffer << \" \" << name << '=\"' << v.to_s << '\"'",
          "449:     when Hash",
          "450:      case k",
          "451:      when :class",
          "452:       buffer << \" \" << name << '=\"' << __classes__(v).gsub('\"', \"&quot;\") << '\"'",
          "453:      when :style",
          "454:       buffer << \" \" << name << '=\"' << __styles__(v).gsub('\"', \"&quot;\") << '\"'",
          "455:      else",
          "456:       __nested_attributes__(v, \"#{name}-\", buffer)",
          "457:      end",
          "458:     when Array",
          "459:      value = case k",
          "460:      when :class",
          "461:       __classes__(v)",
          "462:      when :style",
          "463:       __styles__(v)",
          "464:      else",
          "465:       __nested_tokens__(v)",
          "466:      end",
          "468:      buffer << \" \" << name << '=\"' << value.gsub('\"', \"&quot;\") << '\"'",
          "469:     when Set",
          "470:      buffer << \" \" << name << '=\"' << __nested_tokens__(v.to_a) << '\"'",
          "472:      value = if v.respond_to?(:to_phlex_attribute_value)",
          "473:       v.to_phlex_attribute_value",
          "474:      elsif v.respond_to?(:to_str)",
          "475:       v.to_str",
          "476:      else",
          "477:       v.to_s",
          "478:      end",
          "480:      buffer << \" \" << name << '=\"' << value.gsub('\"', \"&quot;\") << '\"'",
          "482:    end",
          "484:    buffer",
          "485:   end",
          "487:   # @api private",
          "488:   #",
          "489:   # Provides the nested-attributes case for serializing out attributes.",
          "490:   # This allows us to skip many of the checks the `__attributes__` method must perform.",
          "491:   def __nested_attributes__(attributes, base_name, buffer = +\"\")",
          "492:    attributes.each do |k, v|",
          "493:     next unless v",
          "495:     name = case k",
          "496:      when String then k",
          "497:      when Symbol then k.name.tr(\"_\", \"-\")",
          "498:      else raise ArgumentError.new(\"Attribute keys should be Strings or Symbols\")",
          "501:     case v",
          "502:     when true",
          "503:      buffer << \" \" << base_name << name",
          "504:     when String",
          "505:      buffer << \" \" << base_name << name << '=\"' << v.gsub('\"', \"&quot;\") << '\"'",
          "506:     when Symbol",
          "507:      buffer << \" \" << base_name << name << '=\"' << v.name.gsub('\"', \"&quot;\") << '\"'",
          "508:     when Integer, Float",
          "509:      buffer << \" \" << base_name << name << '=\"' << v.to_s << '\"'",
          "510:     when Hash",
          "511:      __nested_attributes__(v, \"#{base_name}-#{name}-\", buffer)",
          "512:     when Array",
          "513:      buffer << \" \" << base_name << name << '=\"' << __nested_tokens__(v) << '\"'",
          "514:     when Set",
          "515:      buffer << \" \" << base_name << name << '=\"' << __nested_tokens__(v.to_a) << '\"'",
          "517:      value = if v.respond_to?(:to_phlex_attribute_value)",
          "518:       v.to_phlex_attribute_value",
          "519:      elsif v.respond_to?(:to_str)",
          "520:       v.to_str",
          "521:      else",
          "522:       v.to_s",
          "523:      end",
          "524:      buffer << \" \" << base_name << name << '=\"' << value.gsub('\"', \"&quot;\") << '\"'",
          "527:     buffer",
          "531:   # @api private",
          "532:   def __nested_tokens__(tokens)",
          "533:    buffer = +\"\"",
          "535:    i, length = 0, tokens.length",
          "537:    while i < length",
          "538:     token = tokens[i]",
          "540:     case token",
          "541:     when String",
          "542:      if i > 0",
          "543:       buffer << \" \" << token",
          "544:      else",
          "545:       buffer << token",
          "546:      end",
          "547:     when Symbol",
          "548:      if i > 0",
          "549:       buffer << \" \" << token.name",
          "550:      else",
          "551:       buffer << token.name",
          "552:      end",
          "553:     when nil",
          "554:      # Do nothing",
          "556:      if i > 0",
          "557:       buffer << \" \" << token.to_s",
          "558:      else",
          "559:       buffer << token.to_s",
          "560:      end",
          "563:     i += 1",
          "566:    buffer.gsub!('\"', \"&quot;\")",
          "570:   # @api private",
          "571:   def __classes__(c)",
          "572:    case c",
          "574:     c",
          "576:     c.name",
          "577:    when Array, Set",
          "578:     c.filter_map { |c| __classes__(c) }.join(\" \")",
          "579:    when Hash",
          "580:     c.filter_map { |c, add|",
          "581:      next unless add",
          "582:      case c",
          "583:       when String then c",
          "584:       when Symbol then c.name.tr(\"_\", \"-\").delete_suffix(\"?\")",
          "585:       else raise ArgumentError.new(\"Class keys should be Strings or Symbols.\")",
          "586:      end",
          "587:     }.join(\" \")",
          "588:    when nil, false",
          "589:     nil",
          "591:     if c.respond_to?(:to_phlex_attribute_value)",
          "592:      c.to_phlex_attribute_value",
          "593:     elsif c.respond_to?(:to_str)",
          "594:      c.to_str",
          "596:      c.to_s",
          "599:   end",
          "601:   # @api private",
          "602:   def __styles__(s)",
          "603:    style = case s",
          "604:    when String",
          "605:     s",
          "606:    when Symbol",
          "607:     s.name",
          "608:    when Integer, Float",
          "609:     s.to_s",
          "610:    when Array, Set",
          "611:     s.filter_map { |s| __styles__(s) }.join",
          "612:    when Hash",
          "613:     buffer = +\"\"",
          "614:     s.each do |k, v|",
          "615:      prop = case k",
          "616:       when String then k",
          "617:       when Symbol then k.name.tr(\"_\", \"-\")",
          "618:       else raise ArgumentError.new(\"Style keys should be Strings or Symbols.\")",
          "619:      end",
          "621:      value = __styles__(v)",
          "623:      if value",
          "624:       buffer << prop << \":\" << value",
          "625:      end",
          "627:     buffer",
          "628:    when nil, false",
          "629:     return nil",
          "631:     if s.respond_to?(:to_phlex_attribute_value)",
          "632:      s.to_phlex_attribute_value",
          "633:     elsif s.respond_to?(:to_str)",
          "634:      s.to_str",
          "635:     else",
          "636:      s.to_s",
          "637:     end",
          "640:    style.end_with?(\";\") ? style : \"#{style};\"",
          "",
          "[Added Lines]",
          "3: # **Standard Generalized Markup Language** for behaviour common to {HTML} and {SVG}.",
          "4: class Phlex::SGML",
          "5:  include Phlex::Helpers",
          "7:  class << self",
          "8:   # Render the view to a String. Arguments are delegated to {.new}.",
          "9:   def call(...)",
          "10:    new(...).call",
          "11:   end",
          "13:   # Create a new instance of the component.",
          "14:   # @note The block will not be delegated {#initialize}. Instead, it will be sent to {#template} when rendering.",
          "15:   def new(*, **, &block)",
          "16:    if block",
          "17:     object = super(*, **, &nil)",
          "18:     object.instance_exec { @_content_block = block }",
          "19:     object",
          "20:    else",
          "21:     super",
          "23:   end",
          "25:   # @api private",
          "26:   def __element_method__?(method_name)",
          "27:    if instance_methods.include?(method_name)",
          "28:     owner = instance_method(method_name).owner",
          "30:     if Phlex::Elements === owner && owner.registered_elements[method_name]",
          "31:      true",
          "35:    else",
          "36:     false",
          "39:  end",
          "41:  # @!method initialize",
          "42:  # @abstract Override to define an initializer for your component.",
          "43:  # @note Your initializer will not receive a block passed to {.new}. Instead, this block will be sent to {#template} when rendering.",
          "44:  # @example",
          "45:  #  def initialize(articles:)",
          "46:  #   @articles = articles",
          "47:  #  end",
          "49:  # @abstract Override to define a template for your component.",
          "50:  # @example",
          "51:  #  def view_template",
          "52:  #   h1 { \"\ud83d\udc4b Hello World!\" }",
          "53:  #  end",
          "54:  # @example Your template may yield a content block.",
          "55:  #  def view_template",
          "56:  #   main {",
          "57:  #    h1 { \"Hello World\" }",
          "58:  #    yield",
          "59:  #   }",
          "60:  #  end",
          "61:  # @example Alternatively, you can delegate the content block to an element.",
          "62:  #  def view_template(&block)",
          "63:  #   article(class: \"card\", &block)",
          "64:  #  end",
          "65:  def view_template",
          "66:   if block_given?",
          "67:    yield",
          "69:  end",
          "71:  def await(task)",
          "72:   case task",
          "73:   when defined?(Concurrent::IVar) && Concurrent::IVar",
          "74:    flush if task.pending?",
          "75:    task.wait.value",
          "76:   when defined?(Async::Task) && Async::Task",
          "77:    flush if task.running?",
          "78:    task.wait",
          "79:   else",
          "80:    raise Phlex::ArgumentError.new(\"Expected an asynchronous task / promise.\")",
          "82:  end",
          "84:  # Renders the view and returns the buffer. The default buffer is a mutable String.",
          "85:  def call(buffer = +\"\", context: Phlex::Context.new, view_context: nil, parent: nil, fragments: nil, &block)",
          "86:   @_buffer = buffer",
          "87:   @_context = context",
          "88:   @_view_context = view_context",
          "89:   @_parent = parent",
          "91:   raise Phlex::DoubleRenderError.new(\"You can't render a #{self.class.name} more than once.\") if @_rendered",
          "92:   @_rendered = true",
          "94:   if fragments",
          "95:    @_context.target_fragments(fragments)",
          "96:   end",
          "98:   block ||= @_content_block",
          "100:   return \"\" unless render?",
          "102:   if !parent && Phlex::SUPPORTS_FIBER_STORAGE",
          "103:    original_fiber_storage = Fiber[:__phlex_component__]",
          "104:    Fiber[:__phlex_component__] = self",
          "105:   end",
          "107:   @_context.around_render do",
          "108:    around_template do",
          "109:     if block",
          "110:      if Phlex::DeferredRender === self",
          "111:       vanish(self, &block)",
          "112:       view_template",
          "113:      else",
          "114:       view_template do |*args|",
          "115:        if args.length > 0",
          "116:         yield_content_with_args(*args, &block)",
          "117:        else",
          "118:         yield_content(&block)",
          "122:     else",
          "123:      view_template",
          "128:   unless parent",
          "129:    if Phlex::SUPPORTS_FIBER_STORAGE",
          "130:     Fiber[:__phlex_component__] = original_fiber_storage",
          "131:    end",
          "132:    buffer << context.buffer",
          "134:  end",
          "136:  # Access the current render context data",
          "137:  # @return the supplied context object, by default a Hash",
          "138:  def context",
          "139:   @_context.user_context",
          "140:  end",
          "142:  # Output text content. The text will be HTML-escaped.",
          "143:  # @param content [String, Symbol, Integer, void] the content to be output on the buffer. Strings, Symbols, and Integers are handled by `plain` directly, but any object can be handled by overriding `format_object`",
          "144:  # @return [nil]",
          "145:  # @see #format_object",
          "146:  def plain(content)",
          "147:   unless __text__(content)",
          "148:    raise Phlex::ArgumentError.new(\"You've passed an object to plain that is not handled by format_object. See https://rubydoc.info/gems/phlex/Phlex/SGML#format_object-instance_method for more information\")",
          "151:   nil",
          "152:  end",
          "154:  # Output a whitespace character. This is useful for getting inline elements to wrap. If you pass a block, a whitespace will be output before and after yielding the block.",
          "155:  # @return [nil]",
          "156:  # @yield If a block is given, it yields the block with no arguments.",
          "157:  def whitespace(&)",
          "158:   context = @_context",
          "159:   return if context.fragments && !context.in_target_fragment",
          "161:   buffer = context.buffer",
          "163:   buffer << \" \"",
          "165:   if block_given?",
          "166:    yield_content(&)",
          "167:    buffer << \" \"",
          "170:   nil",
          "171:  end",
          "173:  # Output an HTML comment.",
          "174:  # @return [nil]",
          "175:  def comment(&)",
          "176:   context = @_context",
          "177:   return if context.fragments && !context.in_target_fragment",
          "179:   buffer = context.buffer",
          "181:   buffer << \"<!-- \"",
          "182:   yield_content(&)",
          "183:   buffer << \" -->\"",
          "185:   nil",
          "186:  end",
          "188:  # This method is very dangerous and should usually be avoided. It will output the given String without any HTML safety. You should never use this method to output unsafe user input.",
          "189:  # @param content [String|nil]",
          "190:  # @return [nil]",
          "191:  def unsafe_raw(content = nil)",
          "192:   return nil unless content",
          "194:   context = @_context",
          "195:   return if context.fragments && !context.in_target_fragment",
          "197:   context.buffer << content",
          "198:   nil",
          "199:  end",
          "201:  # Capture a block of output as a String.",
          "202:  # @note This only works if the block's receiver is the current component or the block returns a String.",
          "203:  # @return [String]",
          "204:  def capture(*args, &block)",
          "205:   return \"\" unless block",
          "207:   if args.length > 0",
          "208:    @_context.capturing_into(+\"\") { yield_content_with_args(*args, &block) }",
          "209:   else",
          "210:    @_context.capturing_into(+\"\") { yield_content(&block) }",
          "212:  end",
          "214:  def tag(name, ...)",
          "215:   normalized_name = case name",
          "216:    when Symbol then name.name.downcase",
          "217:    when String then name.downcase",
          "218:    else raise Phlex::ArgumentError.new(\"Expected the tag name as a Symbol or String.\")",
          "219:   end",
          "221:   if normalized_name == \"script\"",
          "222:    raise Phlex::ArgumentError.new(\"You can\u2019t use the `<script>` tag from the `tag` method. Use `unsafe_tag` instead, but be careful if using user input.\")",
          "223:   end",
          "225:   if registered_elements[normalized_name]",
          "226:    public_send(normalized_name, ...)",
          "227:   else",
          "228:    raise Phlex::ArgumentError.new(\"Unknown tag: #{normalized_name}\")",
          "230:  end",
          "232:  def unsafe_tag(name, ...)",
          "233:   normalized_name = case name",
          "234:    when Symbol then name.name.downcase",
          "235:    when String then name.downcase",
          "236:    else raise Phlex::ArgumentError.new(\"Expected the tag name as a Symbol or String.\")",
          "237:   end",
          "239:   if registered_elements[normalized_name]",
          "240:    public_send(normalized_name, ...)",
          "241:   else",
          "242:    raise Phlex::ArgumentError.new(\"Unknown tag: #{normalized_name}\")",
          "244:  end",
          "246:  private",
          "248:  # @api private",
          "249:  def flush",
          "250:   return if @_context.capturing",
          "252:   buffer = @_context.buffer",
          "253:   @_buffer << buffer.dup",
          "254:   buffer.clear",
          "255:  end",
          "257:  # Render another component, block or enumerable",
          "258:  # @return [nil]",
          "259:  # @overload render(component, &block)",
          "260:  #  Renders the component.",
          "261:  #  @param component [Phlex::SGML]",
          "262:  # @overload render(component_class, &block)",
          "263:  #  Renders a new instance of the component class. This is useful for component classes that take no arguments.",
          "264:  #  @param component_class [Class<Phlex::SGML>]",
          "265:  # @overload render(proc)",
          "266:  #  Renders the proc with {#yield_content}.",
          "267:  #  @param proc [Proc]",
          "268:  # @overload render(enumerable)",
          "269:  #  Renders each item of the enumerable.",
          "270:  #  @param enumerable [Enumerable]",
          "271:  #  @example",
          "272:  #   render @items",
          "273:  def render(renderable, &)",
          "274:   case renderable",
          "275:   when Phlex::SGML",
          "276:    renderable.call(@_buffer, context: @_context, view_context: @_view_context, parent: self, &)",
          "277:   when Class",
          "278:    if renderable < Phlex::SGML",
          "279:     renderable.new.call(@_buffer, context: @_context, view_context: @_view_context, parent: self, &)",
          "280:    end",
          "281:   when Enumerable",
          "282:    renderable.each { |r| render(r, &) }",
          "283:   when Proc, Method",
          "284:    if renderable.arity == 0",
          "285:     yield_content_with_no_args(&renderable)",
          "287:     yield_content(&renderable)",
          "289:   when String",
          "290:    plain(renderable)",
          "291:   else",
          "292:    raise Phlex::ArgumentError.new(\"You can't render a #{renderable.inspect}.\")",
          "295:   nil",
          "296:  end",
          "298:  # Like {#capture} but the output is vanished into a BlackHole buffer.",
          "299:  # Because the BlackHole does nothing with the output, this should be faster.",
          "300:  # @return [nil]",
          "301:  def vanish(*args)",
          "302:   return unless block_given?",
          "304:   @_context.capturing_into(BlackHole) { yield(*args) }",
          "306:   nil",
          "307:  end",
          "309:  # Determines if the component should render. By default, it returns `true`.",
          "310:  # @abstract Override to define your own predicate to prevent rendering.",
          "311:  # @return [Boolean]",
          "312:  def render?",
          "313:   true",
          "314:  end",
          "316:  # Format the object for output",
          "317:  # @abstract Override to define your own format handling for different object types. Please remember to call `super` in the case that the passed object doesn't match, so that object formatting can be added at different layers of the inheritance tree.",
          "318:  # @return [String]",
          "319:  def format_object(object)",
          "320:   case object",
          "321:   when Float, Integer",
          "322:    object.to_s",
          "324:  end",
          "326:  # @abstract Override this method to hook in around a template render. You can do things before and after calling `super` to render the template. You should always call `super` so that callbacks can be added at different layers of the inheritance tree.",
          "327:  # @return [nil]",
          "328:  def around_template",
          "329:   before_template",
          "330:   yield",
          "331:   after_template",
          "333:   nil",
          "334:  end",
          "336:  # @abstract Override this method to hook in right before a template is rendered. Please remember to call `super` so that callbacks can be added at different layers of the inheritance tree.",
          "337:  # @return [nil]",
          "338:  def before_template",
          "339:   nil",
          "340:  end",
          "342:  # @abstract Override this method to hook in right after a template is rendered. Please remember to call `super` so that callbacks can be added at different layers of the inheritance tree.",
          "343:  # @return [nil]",
          "344:  def after_template",
          "345:   nil",
          "346:  end",
          "348:  # Yields the block and checks if it buffered anything. If nothing was buffered, the return value is treated as text. The text is always HTML-escaped.",
          "349:  # @yieldparam component [self]",
          "350:  # @return [nil]",
          "351:  def yield_content",
          "352:   return unless block_given?",
          "354:   buffer = @_context.buffer",
          "356:   original_length = buffer.bytesize",
          "357:   content = yield(self)",
          "358:   __text__(content) if original_length == buffer.bytesize",
          "360:   nil",
          "361:  end",
          "363:  # Same as {#yield_content} but yields no arguments.",
          "364:  # @yield Yields the block with no arguments.",
          "365:  def yield_content_with_no_args",
          "366:   return unless block_given?",
          "368:   buffer = @_context.buffer",
          "370:   original_length = buffer.bytesize",
          "371:   content = yield",
          "372:   __text__(content) if original_length == buffer.bytesize",
          "374:   nil",
          "375:  end",
          "377:  # Same as {#yield_content} but accepts a splat of arguments to yield. This is slightly slower than {#yield_content}.",
          "378:  # @yield [*args] Yields the given arguments.",
          "379:  # @return [nil]",
          "380:  def yield_content_with_args(*)",
          "381:   return unless block_given?",
          "383:   buffer = @_context.buffer",
          "385:   original_length = buffer.bytesize",
          "386:   content = yield(*)",
          "387:   __text__(content) if original_length == buffer.bytesize",
          "389:   nil",
          "390:  end",
          "392:  # Performs the same task as the public method #plain, but does not raise an error if an unformattable object is passed",
          "393:  # @api private",
          "394:  def __text__(content)",
          "395:   context = @_context",
          "396:   return true if context.fragments && !context.in_target_fragment",
          "398:   case content",
          "399:   when String",
          "400:    @_context.buffer << Phlex::Escape.html_escape(content)",
          "401:   when Symbol",
          "402:    @_context.buffer << Phlex::Escape.html_escape(content.name)",
          "403:   when nil",
          "404:    nil",
          "405:   else",
          "406:    if (formatted_object = format_object(content))",
          "407:     @_context.buffer << Phlex::Escape.html_escape(formatted_object)",
          "409:     return false",
          "413:   true",
          "414:  end",
          "416:  # @api private",
          "417:  def __attributes__(attributes, buffer = +\"\")",
          "418:   attributes.each do |k, v|",
          "419:    next unless v",
          "421:    name = case k",
          "422:     when String then k",
          "423:     when Symbol then k.name.tr(\"_\", \"-\")",
          "424:     else raise Phlex::ArgumentError.new(\"Attribute keys should be Strings or Symbols.\")",
          "425:    end",
          "427:    lower_name = name.downcase",
          "428:    next if lower_name == \"href\" && v.to_s.downcase.delete(\"^a-z:\").start_with?(\"javascript:\")",
          "430:    # Detect unsafe attribute names. Attribute names are considered unsafe if they match an event attribute or include unsafe characters.",
          "431:    if Phlex::HTML::EVENT_ATTRIBUTES.include?(lower_name.delete(\"^a-z-\")) || name.match?(/[<>&\"']/)",
          "432:     raise Phlex::ArgumentError.new(\"Unsafe attribute name detected: #{k}.\")",
          "433:    end",
          "435:    if lower_name.to_sym == :id && k != :id",
          "436:     raise Phlex::ArgumentError.new(\":id attribute should only be passed as a lowercase symbol.\")",
          "437:    end",
          "439:    case v",
          "440:    when true",
          "441:     buffer << \" \" << name",
          "442:    when String",
          "443:     buffer << \" \" << name << '=\"' << v.gsub('\"', \"&quot;\") << '\"'",
          "444:    when Symbol",
          "445:     buffer << \" \" << name << '=\"' << v.name.gsub('\"', \"&quot;\") << '\"'",
          "446:    when Integer, Float",
          "447:     buffer << \" \" << name << '=\"' << v.to_s << '\"'",
          "448:    when Hash",
          "449:     case k",
          "450:     when :class",
          "451:      buffer << \" \" << name << '=\"' << __classes__(v).gsub('\"', \"&quot;\") << '\"'",
          "452:     when :style",
          "453:      buffer << \" \" << name << '=\"' << __styles__(v).gsub('\"', \"&quot;\") << '\"'",
          "455:      __nested_attributes__(v, \"#{name}-\", buffer)",
          "457:    when Array",
          "458:     value = case k",
          "459:     when :class",
          "460:      __classes__(v)",
          "461:     when :style",
          "462:      __styles__(v)",
          "463:     else",
          "464:      __nested_tokens__(v)",
          "467:     buffer << \" \" << name << '=\"' << value.gsub('\"', \"&quot;\") << '\"'",
          "468:    when Set",
          "469:     buffer << \" \" << name << '=\"' << __nested_tokens__(v.to_a) << '\"'",
          "470:    else",
          "471:     value = if v.respond_to?(:to_phlex_attribute_value)",
          "472:      v.to_phlex_attribute_value",
          "473:     elsif v.respond_to?(:to_str)",
          "474:      v.to_str",
          "476:      v.to_s",
          "479:     buffer << \" \" << name << '=\"' << value.gsub('\"', \"&quot;\") << '\"'",
          "483:   buffer",
          "484:  end",
          "486:  # @api private",
          "487:  #",
          "488:  # Provides the nested-attributes case for serializing out attributes.",
          "489:  # This allows us to skip many of the checks the `__attributes__` method must perform.",
          "490:  def __nested_attributes__(attributes, base_name, buffer = +\"\")",
          "491:   attributes.each do |k, v|",
          "492:    next unless v",
          "494:    name = case k",
          "495:     when String then k",
          "496:     when Symbol then k.name.tr(\"_\", \"-\")",
          "497:     else raise Phlex::ArgumentError.new(\"Attribute keys should be Strings or Symbols\")",
          "498:    end",
          "500:    case v",
          "501:    when true",
          "502:     buffer << \" \" << base_name << name",
          "503:    when String",
          "504:     buffer << \" \" << base_name << name << '=\"' << v.gsub('\"', \"&quot;\") << '\"'",
          "505:    when Symbol",
          "506:     buffer << \" \" << base_name << name << '=\"' << v.name.gsub('\"', \"&quot;\") << '\"'",
          "507:    when Integer, Float",
          "508:     buffer << \" \" << base_name << name << '=\"' << v.to_s << '\"'",
          "509:    when Hash",
          "510:     __nested_attributes__(v, \"#{base_name}-#{name}-\", buffer)",
          "511:    when Array",
          "512:     buffer << \" \" << base_name << name << '=\"' << __nested_tokens__(v) << '\"'",
          "513:    when Set",
          "514:     buffer << \" \" << base_name << name << '=\"' << __nested_tokens__(v.to_a) << '\"'",
          "515:    else",
          "516:     value = if v.respond_to?(:to_phlex_attribute_value)",
          "517:      v.to_phlex_attribute_value",
          "518:     elsif v.respond_to?(:to_str)",
          "519:      v.to_str",
          "521:      v.to_s",
          "523:     buffer << \" \" << base_name << name << '=\"' << value.gsub('\"', \"&quot;\") << '\"'",
          "528:  end",
          "530:  # @api private",
          "531:  def __nested_tokens__(tokens)",
          "532:   buffer = +\"\"",
          "534:   i, length = 0, tokens.length",
          "536:   while i < length",
          "537:    token = tokens[i]",
          "539:    case token",
          "541:     if i > 0",
          "542:      buffer << \" \" << token",
          "543:     else",
          "544:      buffer << token",
          "545:     end",
          "547:     if i > 0",
          "548:      buffer << \" \" << token.name",
          "549:     else",
          "550:      buffer << token.name",
          "551:     end",
          "552:    when nil",
          "553:     # Do nothing",
          "555:     if i > 0",
          "556:      buffer << \" \" << token.to_s",
          "558:      buffer << token.to_s",
          "562:    i += 1",
          "563:   end",
          "565:   buffer.gsub!('\"', \"&quot;\")",
          "566:   buffer",
          "567:  end",
          "569:  # @api private",
          "570:  def __classes__(c)",
          "571:   case c",
          "572:   when String",
          "573:    c",
          "574:   when Symbol",
          "575:    c.name",
          "576:   when Array, Set",
          "577:    c.filter_map { |c| __classes__(c) }.join(\" \")",
          "578:   when Hash",
          "579:    c.filter_map { |c, add|",
          "580:     next unless add",
          "581:     case c",
          "582:      when String then c",
          "583:      when Symbol then c.name.tr(\"_\", \"-\").delete_suffix(\"?\")",
          "584:      else raise Phlex::ArgumentError.new(\"Class keys should be Strings or Symbols.\")",
          "586:    }.join(\" \")",
          "587:   when nil, false",
          "588:    nil",
          "589:   else",
          "590:    if c.respond_to?(:to_phlex_attribute_value)",
          "591:     c.to_phlex_attribute_value",
          "592:    elsif c.respond_to?(:to_str)",
          "593:     c.to_str",
          "595:     c.to_s",
          "597:   end",
          "598:  end",
          "600:  # @api private",
          "601:  def __styles__(s)",
          "602:   style = case s",
          "603:   when String",
          "604:    s",
          "605:   when Symbol",
          "606:    s.name",
          "607:   when Integer, Float",
          "608:    s.to_s",
          "609:   when Array, Set",
          "610:    s.filter_map { |s| __styles__(s) }.join",
          "611:   when Hash",
          "612:    buffer = +\"\"",
          "613:    s.each do |k, v|",
          "614:     prop = case k",
          "615:      when String then k",
          "616:      when Symbol then k.name.tr(\"_\", \"-\")",
          "617:      else raise Phlex::ArgumentError.new(\"Style keys should be Strings or Symbols.\")",
          "618:     end",
          "620:     value = __styles__(v)",
          "622:     if value",
          "623:      buffer << prop << \":\" << value",
          "624:     end",
          "625:    end",
          "626:    buffer",
          "627:   when nil, false",
          "628:    return nil",
          "629:   else",
          "630:    if s.respond_to?(:to_phlex_attribute_value)",
          "631:     s.to_phlex_attribute_value",
          "632:    elsif s.respond_to?(:to_str)",
          "633:     s.to_str",
          "634:    else",
          "635:     s.to_s",
          "636:    end",
          "639:   style.end_with?(\";\") ? style : \"#{style};\"",
          "",
          "---------------"
        ],
        "lib/phlex/svg.rb||lib/phlex/svg.rb": [
          "File: lib/phlex/svg.rb -> lib/phlex/svg.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # frozen_string_literal: true",
          "19:  end",
          "20: end",
          "",
          "[Removed Lines]",
          "3: module Phlex",
          "4:  class SVG < SGML",
          "5:   autoload :StandardElements, \"phlex/svg/standard_elements\"",
          "7:   include StandardElements",
          "9:   # This should be extended after all method definitions",
          "10:   extend ElementClobberingGuard",
          "12:   def content_type",
          "13:    \"image/svg+xml\"",
          "14:   end",
          "16:   def filename",
          "17:    nil",
          "18:   end",
          "",
          "[Added Lines]",
          "3: class Phlex::SVG < Phlex::SGML",
          "4:  autoload :StandardElements, \"phlex/svg/standard_elements\"",
          "6:  include StandardElements",
          "8:  # This should be extended after all method definitions",
          "9:  extend Phlex::ElementClobberingGuard",
          "11:  def content_type",
          "12:   \"image/svg+xml\"",
          "13:  end",
          "15:  def filename",
          "16:   nil",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61c03034c8c8f3e03a719b1783ee0d298442f232",
      "candidate_info": {
        "commit_hash": "61c03034c8c8f3e03a719b1783ee0d298442f232",
        "repo": "phlex-ruby/phlex",
        "commit_url": "https://github.com/phlex-ruby/phlex/commit/61c03034c8c8f3e03a719b1783ee0d298442f232",
        "files": [
          "lib/phlex/sgml.rb",
          "lib/phlex/version.rb",
          "test/phlex/view/naughty_business.rb"
        ],
        "message": "1.10.1",
        "before_after_code_files": [
          "lib/phlex/sgml.rb||lib/phlex/sgml.rb",
          "lib/phlex/version.rb||lib/phlex/version.rb",
          "test/phlex/view/naughty_business.rb||test/phlex/view/naughty_business.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/phlex/sgml.rb||lib/phlex/sgml.rb",
            "test/phlex/view/naughty_business.rb||test/phlex/view/naughty_business.rb"
          ],
          "candidate": [
            "lib/phlex/sgml.rb||lib/phlex/sgml.rb",
            "test/phlex/view/naughty_business.rb||test/phlex/view/naughty_business.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/phlex/sgml.rb||lib/phlex/sgml.rb": [
          "File: lib/phlex/sgml.rb -> lib/phlex/sgml.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "424:     end",
          "426:     lower_name = name.downcase",
          "429:     # Detect unsafe attribute names. Attribute names are considered unsafe if they match an event attribute or include unsafe characters.",
          "430:     if HTML::EVENT_ATTRIBUTES[lower_name] || name.match?(/[<>&\"']/)",
          "",
          "[Removed Lines]",
          "427:     next if lower_name == \"href\" && v.start_with?(/\\s*javascript:/i)",
          "",
          "[Added Lines]",
          "427:     next if lower_name == \"href\" && v.to_s.downcase.tr(\"\\t \\n\", \"\").start_with?(\"javascript:\")",
          "",
          "---------------"
        ],
        "lib/phlex/version.rb||lib/phlex/version.rb": [
          "File: lib/phlex/version.rb -> lib/phlex/version.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # frozen_string_literal: true",
          "3: module Phlex",
          "5: end",
          "",
          "[Removed Lines]",
          "4:  VERSION = \"1.10.0\"",
          "",
          "[Added Lines]",
          "4:  VERSION = \"1.10.1\"",
          "",
          "---------------"
        ],
        "test/phlex/view/naughty_business.rb||test/phlex/view/naughty_business.rb": [
          "File: test/phlex/view/naughty_business.rb -> test/phlex/view/naughty_business.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   end",
          "86:  end",
          "88:  Phlex::HTML::EVENT_ATTRIBUTES.each_key do |event_attribute|",
          "89:   with \"with naughty #{event_attribute} attribute\" do",
          "90:    naughty_attributes = { event_attribute => \"alert(1);\" }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:  with \"naughty javascript link protocol with a hidden tab character\" do",
          "89:   view do",
          "90:    def view_template",
          "91:     a(href: \"\\tjavascript:alert(1)\") { \"XSS\" }",
          "92:     a(href: \"j\\tavascript:alert(1)\") { \"XSS\" }",
          "93:     a(href: \"ja\\tvascript:alert(1)\") { \"XSS\" }",
          "94:     a(href: \"jav\\tascript:alert(1)\") { \"XSS\" }",
          "95:     a(href: \"java\\tscript:alert(1)\") { \"XSS\" }",
          "96:     a(href: \"javas\\tcript:alert(1)\") { \"XSS\" }",
          "97:     a(href: \"javasc\\tript:alert(1)\") { \"XSS\" }",
          "98:     a(href: \"javascr\\tipt:alert(1)\") { \"XSS\" }",
          "99:     a(href: \"javascri\\tpt:alert(1)\") { \"XSS\" }",
          "100:     a(href: \"javascrip\\tt:alert(1)\") { \"XSS\" }",
          "101:     a(href: \"javascript\\t:alert(1)\") { \"XSS\" }",
          "102:     a(href: \"javascript:\\talert(1)\") { \"XSS\" }",
          "103:    end",
          "104:   end",
          "106:   it \"strips the javascript protocol\" do",
          "107:    expect(output.scan(\"<a>\").size).to be == 12",
          "108:    expect(output.scan(\"href\").size).to be == 0",
          "109:   end",
          "110:  end",
          "112:  with \"naughty javascript link protocol with a hidden newline character\" do",
          "113:   view do",
          "114:    def view_template",
          "115:     a(href: \"\\njavascript:alert(1)\") { \"XSS\" }",
          "116:     a(href: \"j\\navascript:alert(1)\") { \"XSS\" }",
          "117:     a(href: \"ja\\nvascript:alert(1)\") { \"XSS\" }",
          "118:     a(href: \"jav\\nascript:alert(1)\") { \"XSS\" }",
          "119:     a(href: \"java\\nscript:alert(1)\") { \"XSS\" }",
          "120:     a(href: \"javas\\ncript:alert(1)\") { \"XSS\" }",
          "121:     a(href: \"javasc\\nript:alert(1)\") { \"XSS\" }",
          "122:     a(href: \"javascr\\nipt:alert(1)\") { \"XSS\" }",
          "123:     a(href: \"javascri\\npt:alert(1)\") { \"XSS\" }",
          "124:     a(href: \"javascrip\\nt:alert(1)\") { \"XSS\" }",
          "125:     a(href: \"javascript\\n:alert(1)\") { \"XSS\" }",
          "126:     a(href: \"javascript:\\nalert(1)\") { \"XSS\" }",
          "127:    end",
          "128:   end",
          "130:   it \"strips the javascript protocol\" do",
          "131:    expect(output.scan(\"<a>\").size).to be == 12",
          "132:    expect(output.scan(\"href\").size).to be == 0",
          "133:   end",
          "134:  end",
          "136:  with \"naughty javascript link protocol with a hidden whitespace character\" do",
          "137:   view do",
          "138:    def view_template",
          "139:     a(href: \" javascript:alert(1)\") { \"XSS\" }",
          "140:     a(href: \"j avascript:alert(1)\") { \"XSS\" }",
          "141:     a(href: \"ja vascript:alert(1)\") { \"XSS\" }",
          "142:     a(href: \"jav ascript:alert(1)\") { \"XSS\" }",
          "143:     a(href: \"java script:alert(1)\") { \"XSS\" }",
          "144:     a(href: \"javas cript:alert(1)\") { \"XSS\" }",
          "145:     a(href: \"javasc ript:alert(1)\") { \"XSS\" }",
          "146:     a(href: \"javascr ipt:alert(1)\") { \"XSS\" }",
          "147:     a(href: \"javascri pt:alert(1)\") { \"XSS\" }",
          "148:     a(href: \"javascrip t:alert(1)\") { \"XSS\" }",
          "149:     a(href: \"javascript :alert(1)\") { \"XSS\" }",
          "150:     a(href: \"javascript: alert(1)\") { \"XSS\" }",
          "151:    end",
          "152:   end",
          "154:   it \"strips the javascript protocol\" do",
          "155:    expect(output.scan(\"<a>\").size).to be == 12",
          "156:    expect(output.scan(\"href\").size).to be == 0",
          "157:   end",
          "158:  end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a692f8ab64138b589d5b08af917e16dd9b378270",
      "candidate_info": {
        "commit_hash": "a692f8ab64138b589d5b08af917e16dd9b378270",
        "repo": "phlex-ruby/phlex",
        "commit_url": "https://github.com/phlex-ruby/phlex/commit/a692f8ab64138b589d5b08af917e16dd9b378270",
        "files": [
          "lib/phlex/sgml.rb"
        ],
        "message": "Optimize nested tokens",
        "before_after_code_files": [
          "lib/phlex/sgml.rb||lib/phlex/sgml.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/phlex/sgml.rb||lib/phlex/sgml.rb"
          ],
          "candidate": [
            "lib/phlex/sgml.rb||lib/phlex/sgml.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/phlex/sgml.rb||lib/phlex/sgml.rb": [
          "File: lib/phlex/sgml.rb -> lib/phlex/sgml.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "425:      when :style",
          "426:       __styles__(v)",
          "427:      else",
          "429:      end",
          "431:      buffer << \" \" << name << '=\"' << value.gsub('\"', \"&quot;\") << '\"'",
          "432:     when Set",
          "434:     else",
          "435:      value = if v.respond_to?(:to_phlex_attribute_value)",
          "436:       v.to_phlex_attribute_value",
          "",
          "[Removed Lines]",
          "428:       v.compact.join(\" \")",
          "433:      buffer << \" \" << name << '=\"' << v.to_a.compact.join(\" \").gsub('\"', \"&quot;\") << '\"'",
          "",
          "[Added Lines]",
          "428:       __nested_tokens__(v)",
          "433:      buffer << \" \" << name << '=\"' << __nested_tokens__(v.to_a) << '\"'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:     next unless v",
          "458:     name = case k",
          "462:     end",
          "464:     case v",
          "",
          "[Removed Lines]",
          "459:            when String then k",
          "460:            when Symbol then k.name.tr(\"_\", \"-\")",
          "461:            else raise ArgumentError.new(\"Attribute keys should be Strings or Symbols\")",
          "",
          "[Added Lines]",
          "459:      when String then k",
          "460:      when Symbol then k.name.tr(\"_\", \"-\")",
          "461:      else raise ArgumentError.new(\"Attribute keys should be Strings or Symbols\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "473:     when Hash",
          "474:      __nested_attributes__(v, \"#{base_name}-#{name}-\", buffer)",
          "475:     when Array",
          "477:     when Set",
          "479:     else",
          "480:      value = if v.respond_to?(:to_phlex_attribute_value)",
          "481:       v.to_phlex_attribute_value",
          "",
          "[Removed Lines]",
          "476:      buffer << \" \" << base_name << name << '=\"' << v.compact.join(\" \").gsub('\"', \"&quot;\") << '\"'",
          "478:      buffer << \" \" << base_name << name << '=\"' << v.to_a.compact.join(\" \").gsub('\"', \"&quot;\") << '\"'",
          "",
          "[Added Lines]",
          "476:      buffer << \" \" << base_name << name << '=\"' << __nested_tokens__(v) << '\"'",
          "478:      buffer << \" \" << base_name << name << '=\"' << __nested_tokens__(v.to_a) << '\"'",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "491:    end",
          "492:   end",
          "494:   # @api private",
          "495:   def __classes__(c)",
          "496:    case c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494:   # @api private",
          "495:   def __nested_tokens__(tokens)",
          "496:    buffer = +\"\"",
          "498:    i, length = 0, tokens.length",
          "500:    while i < length",
          "501:     token = tokens[i]",
          "503:     case token",
          "504:     when nil",
          "505:      next",
          "506:     when String",
          "507:      if i > 0",
          "508:       buffer << \" \" << token",
          "509:      else",
          "510:       buffer << token",
          "511:      end",
          "512:     when Symbol",
          "513:      if i > 0",
          "514:       buffer << \" \" << token.name",
          "515:      else",
          "516:       buffer << token.name",
          "517:      end",
          "518:     else",
          "519:      if i > 0",
          "520:       buffer << \" \" << token.to_s",
          "521:      else",
          "522:       buffer << token.to_s",
          "523:      end",
          "524:     end",
          "526:     i += 1",
          "527:    end",
          "529:    buffer.gsub!('\"', \"&quot;\")",
          "530:    buffer",
          "531:   end",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0716e233c881eaec533f141008cad8dbdcb2d5c3",
      "candidate_info": {
        "commit_hash": "0716e233c881eaec533f141008cad8dbdcb2d5c3",
        "repo": "phlex-ruby/phlex",
        "commit_url": "https://github.com/phlex-ruby/phlex/commit/0716e233c881eaec533f141008cad8dbdcb2d5c3",
        "files": [
          "lib/phlex/sgml.rb",
          "quickdraw/sgml/attributes.test.rb"
        ],
        "message": "feat: add Hash support for `class` and `style` attributes",
        "before_after_code_files": [
          "lib/phlex/sgml.rb||lib/phlex/sgml.rb",
          "quickdraw/sgml/attributes.test.rb||quickdraw/sgml/attributes.test.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/phlex/sgml.rb||lib/phlex/sgml.rb"
          ],
          "candidate": [
            "lib/phlex/sgml.rb||lib/phlex/sgml.rb"
          ]
        }
      },
      "candidate_diff": {
        "lib/phlex/sgml.rb||lib/phlex/sgml.rb": [
          "File: lib/phlex/sgml.rb -> lib/phlex/sgml.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:     when Integer, Float",
          "407:      buffer << \" \" << name << '=\"' << v.to_s << '\"'",
          "408:     when Hash",
          "417:     when Array",
          "419:     when Set",
          "420:      buffer << \" \" << name << '=\"' << v.to_a.compact.join(\" \").gsub('\"', \"&quot;\") << '\"'",
          "421:     else",
          "",
          "[Removed Lines]",
          "409:      __attributes__(",
          "410:       v.transform_keys { |subkey|",
          "411:        case subkey",
          "412:         when Symbol then\"#{name}-#{subkey.name.tr('_', '-')}\"",
          "413:         else \"#{name}-#{subkey}\"",
          "414:        end",
          "415:       }, buffer",
          "416:      )",
          "418:      buffer << \" \" << name << '=\"' << v.compact.join(\" \").gsub('\"', \"&quot;\") << '\"'",
          "",
          "[Added Lines]",
          "409:        case k",
          "410:      when :class",
          "411:       buffer << \" \" << name << '=\"' << __classes__(v).gsub('\"', \"&quot;\") << '\"'",
          "412:      when :style",
          "413:        buffer << \" \" << name << '=\"' << __styles__(v).gsub('\"', \"&quot;\") << '\"'",
          "414:      else",
          "415:       __attributes__(",
          "416:        v.transform_keys { |subkey|",
          "417:         case subkey",
          "418:          when Symbol then\"#{name}-#{subkey.name.tr('_', '-')}\"",
          "419:          else \"#{name}-#{subkey}\"",
          "420:         end",
          "421:        }, buffer",
          "422:       )",
          "423:      end",
          "425:        value = case k",
          "426:      when :class",
          "427:       __classes__(v)",
          "428:      when :style",
          "429:        __styles__(v)",
          "430:      else",
          "431:       v.compact.join(\" \")",
          "432:      end",
          "434:      buffer << \" \" << name << '=\"' << value.gsub('\"', \"&quot;\") << '\"'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434:    buffer",
          "435:   end",
          "436:  end",
          "437: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:   # @api private",
          "454:   def __classes__(c)",
          "455:    case c",
          "456:    when String",
          "457:     c",
          "458:    when Symbol",
          "459:     c.name",
          "460:    when Array, Set",
          "461:     c.filter_map { |c| __classes__(c) }.join(\" \")",
          "462:    when Hash",
          "463:     c.filter_map { |c, add|",
          "464:      next unless add",
          "465:      case c",
          "466:       when String then c",
          "467:       when Symbol then c.name.tr(\"_\", \"-\").delete_suffix(\"?\")",
          "468:       else raise ArgumentError, \"Class keys should be Strings or Symbols.\"",
          "469:      end",
          "470:     }.join(\" \")",
          "471:    when nil, false",
          "472:     nil",
          "473:    else",
          "474:     buffer << if c.respond_to?(:to_phlex_attribute_value)",
          "475:      c.to_phlex_attribute_value",
          "476:     elsif c.respond_to?(:to_str)",
          "477:      c.to_str",
          "478:     else",
          "479:      c.to_s",
          "480:     end",
          "481:    end",
          "482:   end",
          "484:   # @api private",
          "485:   def __styles__(s)",
          "486:    style = case s",
          "487:    when String",
          "488:     s",
          "489:    when Symbol",
          "490:     s.name",
          "491:    when Integer, Float",
          "492:     s.to_s",
          "493:    when Array, Set",
          "494:     s.filter_map { |s| __styles__(s) }.join",
          "495:    when Hash",
          "496:     buffer = +\"\"",
          "497:     s.each do |k, v|",
          "498:      prop = case k",
          "499:       when String then k",
          "500:       when Symbol then k.name.tr(\"_\", \"-\")",
          "501:       else raise ArgumentError, \"Style keys should be Strings or Symbols.\"",
          "502:      end",
          "504:      value = __styles__(v)",
          "506:      if value",
          "507:       buffer << prop << \":\" << value",
          "508:      end",
          "509:     end",
          "510:     buffer",
          "511:    when nil, false",
          "512:     return nil",
          "513:    else",
          "514:     if s.respond_to?(:to_phlex_attribute_value)",
          "515:      s.to_phlex_attribute_value",
          "516:     elsif s.respond_to?(:to_str)",
          "517:      s.to_str",
          "518:     else",
          "519:      s.to_s",
          "520:     end",
          "521:    end",
          "523:    style[-1] == \";\" ? style : style + \";\"",
          "524:   end",
          "",
          "---------------"
        ],
        "quickdraw/sgml/attributes.test.rb||quickdraw/sgml/attributes.test.rb": [
          "File: quickdraw/sgml/attributes.test.rb -> quickdraw/sgml/attributes.test.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # frozen_string_literal: true",
          "3: {div: \"div\"}.each do |method_name, tag|",
          "4:  describe \"<#{tag}> with class array attribute\" do",
          "5:   example = Class.new(Phlex::HTML) do",
          "6:    define_method :view_template do",
          "7:     send(method_name, class: [\"class\", nil, inactive: false, truthy: 1]) { \"content\" }",
          "8:    end",
          "9:   end",
          "11:   test \"produces the correct output\" do",
          "12:    expect(example.call) == %(<#{tag} class=\"class truthy\">content</#{tag}>)",
          "13:   end",
          "14:  end",
          "16:  describe \"<#{tag}> with class hash attribute\" do",
          "17:   example = Class.new(Phlex::HTML) do",
          "18:    define_method :view_template do",
          "19:     send(method_name, class: {class: true, inactive: false, truthy: 1}) { \"content\" }",
          "20:    end",
          "21:   end",
          "23:   test \"produces the correct output\" do",
          "24:    expect(example.call) == %(<#{tag} class=\"class truthy\">content</#{tag}>)",
          "25:   end",
          "26:  end",
          "28:  describe \"<#{tag}> with style array attribute\" do",
          "29:   example = Class.new(Phlex::HTML) do",
          "30:    define_method :view_template do",
          "31:     send(method_name, style: [\"color: red\", nil, font_weight: \"bold\", opacity: 0]) { \"content\" }",
          "32:    end",
          "33:   end",
          "35:   test \"produces the correct output\" do",
          "36:    expect(example.call) == %(<#{tag} style=\"color: red;font-weight:bold;opacity:0;\">content</#{tag}>)",
          "37:   end",
          "38:  end",
          "40:  describe \"<#{tag}> with style hash attribute\" do",
          "41:   example = Class.new(Phlex::HTML) do",
          "42:    define_method :view_template do",
          "43:     send(method_name, style: {color: \"red\", word_break: nil, font_weight: \"bold\"}) { \"content\" }",
          "44:    end",
          "45:   end",
          "47:   test \"produces the correct output\" do",
          "48:    expect(example.call) == %(<#{tag} style=\"color:red;font-weight:bold;\">content</#{tag}>)",
          "49:   end",
          "50:  end",
          "51: end",
          "",
          "---------------"
        ]
      }
    }
  ]
}