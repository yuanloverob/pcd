{
  "cve_id": "CVE-2024-47053",
  "cve_desc": "This advisory addresses an authorization vulnerability in Mautic's HTTP Basic Authentication implementation. This flaw could allow unauthorized access to sensitive report data.\n\n  *  Improper Authorization:\u00a0An authorization flaw exists in Mautic's API Authorization implementation. Any authenticated user, regardless of assigned roles or permissions, can access all reports and their associated data via the API. This bypasses the intended access controls governed by the \"Reporting Permissions > View Own\" and \"Reporting Permissions > View Others\" permissions, which should restrict access to non-System Reports.",
  "repo": "mautic/mautic",
  "patch_hash": "9d7ee57c92502ef77cddb091011c5ffef14b11ee",
  "patch_info": {
    "commit_hash": "9d7ee57c92502ef77cddb091011c5ffef14b11ee",
    "repo": "mautic/mautic",
    "commit_url": "https://github.com/mautic/mautic/commit/9d7ee57c92502ef77cddb091011c5ffef14b11ee",
    "files": [
      "app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
      "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
    ],
    "message": "Merge pull request from GHSA-8xv7-g2q3-fqgc",
    "before_after_code_files": [
      "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
      "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
    ]
  },
  "patch_diff": {
    "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php": [
      "File: app/bundles/ReportBundle/Controller/Api/ReportApiController.php -> app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: use Mautic\\CoreBundle\\Factory\\ModelFactory;",
      "10: use Mautic\\CoreBundle\\Helper\\AppVersion;",
      "11: use Mautic\\CoreBundle\\Helper\\CoreParametersHelper;",
      "12: use Mautic\\CoreBundle\\Security\\Permissions\\CorePermissions;",
      "13: use Mautic\\CoreBundle\\Translation\\Translator;",
      "14: use Mautic\\ReportBundle\\Entity\\Report;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: use Mautic\\CoreBundle\\Helper\\UserHelper;",
      "13: use Mautic\\CoreBundle\\Security\\Exception\\PermissionException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     protected $model;",
      "34:     {",
      "35:         $reportModel = $modelFactory->getModel('report');",
      "36:         \\assert($reportModel instanceof ReportModel);",
      "",
      "[Removed Lines]",
      "33:     public function __construct(CorePermissions $security, Translator $translator, EntityResultHelper $entityResultHelper, RouterInterface $router, FormFactoryInterface $formFactory, AppVersion $appVersion, RequestStack $requestStack, ManagerRegistry $doctrine, ModelFactory $modelFactory, EventDispatcherInterface $dispatcher, CoreParametersHelper $coreParametersHelper, MauticFactory $factory)",
      "",
      "[Added Lines]",
      "35:     public function __construct(CorePermissions $security, Translator $translator, EntityResultHelper $entityResultHelper, RouterInterface $router, FormFactoryInterface $formFactory, AppVersion $appVersion, RequestStack $requestStack, ManagerRegistry $doctrine, ModelFactory $modelFactory, EventDispatcherInterface $dispatcher, CoreParametersHelper $coreParametersHelper, MauticFactory $factory, protected UserHelper $userHelper)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55:     {",
      "58:         if (!$entity instanceof $this->entityClass) {",
      "59:             return $this->notFound();",
      "60:         }",
      "62:         $reportData = $this->model->getReportData($entity, $this->formFactory, $this->getOptionsFromRequest($request));",
      "",
      "[Removed Lines]",
      "54:     public function getEntityAction(Request $request, $id)",
      "56:         $entity = $this->model->getEntity($id);",
      "",
      "[Added Lines]",
      "54:     public function getEntityAction(Request $request, $id): Response",
      "56:         try {",
      "57:             if (!$this->security->isGranted($this->permissionBase.':view')) {",
      "58:                 return $this->accessDenied();",
      "59:             }",
      "60:         } catch (PermissionException $e) {",
      "61:             return $this->accessDenied($e->getMessage());",
      "62:         }",
      "64:         $entity        = $this->model->getEntity($id);",
      "70:         if (",
      "71:             $this->security->checkPermissionExists($this->permissionBase.':viewother')",
      "72:             && !$this->security->isGranted($this->permissionBase.':viewother')",
      "73:             && $entity->getCreatedBy() !== $this->userHelper->getUser()->getId()",
      "74:         ) {",
      "75:             return $this->accessDenied();",
      "76:         }",
      "",
      "---------------"
    ],
    "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php": [
      "File: app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php -> app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: namespace Mautic\\ReportBundle\\Tests\\Controller\\Api;",
      "5: use Mautic\\CoreBundle\\Test\\MauticMysqlTestCase;",
      "6: use Symfony\\Component\\HttpFoundation\\Response;",
      "9: {",
      "10:     protected $useCleanupRollback = false;",
      "16:     {",
      "74:     }",
      "75: }",
      "",
      "[Removed Lines]",
      "8: final class ReportApiControllerTest extends MauticMysqlTestCase",
      "15:     public function testPostGetPatchPutDeleteEndPoints(): void",
      "18:         $data = json_decode(file_get_contents(__DIR__.'/data/post.json'), true);",
      "19:         $this->client->request('POST', '/api/reports/new', $data);",
      "20:         $response     = $this->client->getResponse();",
      "21:         $responseData = json_decode($response->getContent(), true);",
      "22:         $this->assertSame(Response::HTTP_CREATED, $response->getStatusCode());",
      "23:         $this->assertTrue(isset($responseData['report']));",
      "24:         $this->assertEquals($data['name'], $responseData['report']['name']);",
      "25:         $id     = $responseData['report']['id'];",
      "26:         $source = $data['source'];",
      "29:         $this->client->restart();",
      "30:         $this->client->request('GET', sprintf('/api/reports/%s', $id));",
      "31:         $response = $this->client->getResponse();",
      "32:         $this->assertSame(Response::HTTP_OK, $response->getStatusCode());",
      "33:         $responseData = json_decode($response->getContent(), true);",
      "34:         $this->assertTrue(isset($responseData['data']));",
      "35:         $this->assertTrue(isset($responseData['dataColumns']));",
      "36:         $this->assertTrue(isset($responseData['report']));",
      "37:         $this->assertEquals($data['name'], $responseData['report']['name']);",
      "40:         $data = json_decode(file_get_contents(__DIR__.'/data/patch.json'), true);",
      "41:         $this->client->request('PATCH', sprintf('/api/reports/%s/edit', $id), $data);",
      "42:         $response = $this->client->getResponse();",
      "43:         $this->assertSame(Response::HTTP_OK, $response->getStatusCode());",
      "44:         $responseData = json_decode($response->getContent(), true);",
      "45:         $this->assertTrue(isset($responseData['report']));",
      "46:         $this->assertEquals($source, $responseData['report']['source']);",
      "47:         $this->assertEquals($data['scheduleUnit'], $responseData['report']['scheduleUnit']);",
      "48:         $this->assertEquals($data['toAddress'], $responseData['report']['toAddress']);",
      "49:         $this->assertEquals($data['scheduleDay'], $responseData['report']['scheduleDay']);",
      "52:         $data = json_decode(file_get_contents(__DIR__.'/data/put.json'), true);",
      "53:         $this->client->request('PUT', sprintf('/api/reports/%s/edit', $id), $data);",
      "54:         $response = $this->client->getResponse();",
      "55:         $this->assertSame(Response::HTTP_OK, $response->getStatusCode());",
      "56:         $responseData = json_decode($response->getContent(), true);",
      "57:         $this->assertTrue(isset($responseData['report']));",
      "58:         $this->assertEquals($data['name'], $responseData['report']['name']);",
      "59:         $this->assertEquals($data['source'], $responseData['report']['source']);",
      "60:         $this->assertEquals($data['scheduleUnit'], $responseData['report']['scheduleUnit']);",
      "61:         $this->assertEquals($data['toAddress'], $responseData['report']['toAddress']);",
      "62:         $this->assertEquals($data['scheduleDay'], $responseData['report']['scheduleDay']);",
      "63:         $this->assertEmpty($responseData['report']['filters']);",
      "66:         $this->client->request('DELETE', sprintf('/api/reports/%s/delete', $id), $data);",
      "67:         $response = $this->client->getResponse();",
      "68:         $this->assertSame(Response::HTTP_OK, $response->getStatusCode());",
      "69:         $this->assertTrue(isset($responseData['report']));",
      "70:         $this->assertEquals($data['name'], $responseData['report']['name']);",
      "71:         $this->client->request('GET', sprintf('/api/reports/%s', $id), $data);",
      "72:         $response = $this->client->getResponse();",
      "73:         $this->assertSame(Response::HTTP_NOT_FOUND, $response->getStatusCode());",
      "",
      "[Added Lines]",
      "6: use Mautic\\ReportBundle\\Entity\\Report;",
      "7: use Mautic\\UserBundle\\Entity\\Permission;",
      "8: use Mautic\\UserBundle\\Entity\\Role;",
      "9: use Mautic\\UserBundle\\Entity\\User;",
      "10: use Mautic\\UserBundle\\Model\\RoleModel;",
      "13: class ReportApiControllerTest extends MauticMysqlTestCase",
      "17:     public function testGetReportFailByNoCorrectAccessRoleEmpty(): void",
      "18:     {",
      "19:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', []);",
      "20:         $this->client->request('GET', '/api/reports/'.$reportId);",
      "21:         $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());",
      "22:     }",
      "24:     public function testGetReportSuccessByCorrectAccessIsAdmin(): void",
      "25:     {",
      "26:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', [], false, true);",
      "27:         $this->client->request('GET', '/api/reports/'.$reportId);",
      "28:         $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());",
      "29:     }",
      "31:     public function testGetReportSuccessByNoCorrectAccessToViewOther(): void",
      "32:     {",
      "33:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', ['report:reports'=>['viewother']]);",
      "34:         $this->client->request('GET', '/api/reports/'.$reportId);",
      "35:         $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());",
      "36:     }",
      "38:     public function testReportFailByNoCorrectAccessToViewOwn(): void",
      "39:     {",
      "40:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', ['report:reports'=>['viewown']]);",
      "41:         $this->client->request('GET', '/api/reports/'.$reportId);",
      "42:         $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());",
      "43:     }",
      "45:     public function testReportSuccessViewOwnBySameUser(): void",
      "46:     {",
      "47:         $reportId = $this->createReportStructure('Maut1cR0cks!!!!!', ['report:reports'=>['viewown']], true);",
      "48:         $this->client->request('GET', '/api/reports/'.$reportId);",
      "49:         $this->assertSame(Response::HTTP_OK, $this->client->getResponse()->getStatusCode());",
      "50:     }",
      "55:     private function createReportStructure(string $password, array $permissions, bool $createBy = false, bool $userIsAdmin = false): int",
      "57:         $role           = $this->createRole($userIsAdmin);",
      "58:         $user           = $this->createUser($role, $password);",
      "59:         $createByIdUser = 0;",
      "60:         if (!empty($createBy)) {",
      "61:             $createByIdUser = $user->getId();",
      "62:         }",
      "63:         $report   = $this->createReportData($createByIdUser);",
      "65:         if ($permissions) {",
      "66:             $this->setPermission($user, $permissions);",
      "67:         }",
      "69:         $this->clientServer = [];",
      "70:         $this->setUpSymfony($this->configParams);",
      "71:         $this->loginUser($user->getUserIdentifier());",
      "72:         $this->client->setServerParameter('PHP_AUTH_USER', $user->getUserIdentifier());",
      "73:         $this->client->setServerParameter('PHP_AUTH_PW', $password);",
      "75:         return $report->getId();",
      "76:     }",
      "81:     private function setPermission(User $user, array $permissions): Role",
      "82:     {",
      "83:         $role = $user->getRole();",
      "85:         $this->em->createQueryBuilder()",
      "86:             ->delete(Permission::class, 'p')",
      "87:             ->where('p.bundle = :bundle')",
      "88:             ->andWhere('p.role = :role_id')",
      "89:             ->setParameters(['bundle' => 'report', 'role_id' => $role->getId()])",
      "90:             ->getQuery()",
      "91:             ->execute();",
      "94:         $role->setIsAdmin(false);",
      "95:         $roleModel = static::getContainer()->get('mautic.user.model.role');",
      "96:         \\assert($roleModel instanceof RoleModel);",
      "97:         $roleModel->setRolePermissions($role, $permissions);",
      "98:         $this->em->persist($role);",
      "99:         $this->em->flush();",
      "101:         return $role;",
      "102:     }",
      "104:     private function createUser(Role $role, string $password='mautic'): User",
      "105:     {",
      "106:         $user = new User();",
      "107:         $user->setFirstName('John');",
      "108:         $user->setLastName('Doe');",
      "109:         $user->setUsername('john.doe');",
      "110:         $user->setEmail('john.doe@email.com');",
      "111:         $encoder = static::getContainer()->get('security.encoder_factory')->getEncoder($user);",
      "112:         $user->setPassword($encoder->encodePassword($password, null));",
      "113:         $user->setRole($role);",
      "115:         $this->em->persist($user);",
      "116:         $this->em->flush();",
      "118:         return $user;",
      "119:     }",
      "121:     private function createRole(bool $isAdmin = false): Role",
      "122:     {",
      "123:         $role = new Role();",
      "124:         $role->setName('Role');",
      "125:         $role->setIsAdmin($isAdmin);",
      "127:         $this->em->persist($role);",
      "128:         $this->em->flush();",
      "130:         return $role;",
      "131:     }",
      "133:     private function createReportData(int $createBy = 0): Report",
      "134:     {",
      "135:         $report = new Report();",
      "136:         $report->setName('Contact report');",
      "137:         $report->setDescription('<b>This is allowed HTML</b>');",
      "138:         $report->setSource('leads');",
      "139:         $coulmns = [",
      "140:             'l.firstname',",
      "141:             'l.lastname',",
      "142:             'l.email',",
      "143:             'l.date_added',",
      "144:         ];",
      "145:         $report->setColumns($coulmns);",
      "146:         if (!empty($createBy)) {",
      "147:             $report->setCreatedBy($createBy);",
      "148:             $report->setCreatedByUser($createBy);",
      "149:         }",
      "151:         $this->getContainer()->get('mautic.report.model.report')->saveEntity($report);",
      "153:         return $report;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fdaaa7c0fc11ebbab4a9b53bbb5858beb695abbf",
      "candidate_info": {
        "commit_hash": "fdaaa7c0fc11ebbab4a9b53bbb5858beb695abbf",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/fdaaa7c0fc11ebbab4a9b53bbb5858beb695abbf",
        "files": [
          "app/bundles/DashboardBundle/Tests/Controller/DashboardControllerFunctionalTest.php",
          "app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php",
          "app/bundles/FormBundle/Tests/Controller/FormControllerFunctionalTest.php",
          "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
        ],
        "message": "More test fixes",
        "before_after_code_files": [
          "app/bundles/DashboardBundle/Tests/Controller/DashboardControllerFunctionalTest.php||app/bundles/DashboardBundle/Tests/Controller/DashboardControllerFunctionalTest.php",
          "app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php||app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php",
          "app/bundles/FormBundle/Tests/Controller/FormControllerFunctionalTest.php||app/bundles/FormBundle/Tests/Controller/FormControllerFunctionalTest.php",
          "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [
            "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
          ],
          "candidate": [
            "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
          ]
        }
      },
      "candidate_diff": {
        "app/bundles/DashboardBundle/Tests/Controller/DashboardControllerFunctionalTest.php||app/bundles/DashboardBundle/Tests/Controller/DashboardControllerFunctionalTest.php": [
          "File: app/bundles/DashboardBundle/Tests/Controller/DashboardControllerFunctionalTest.php -> app/bundles/DashboardBundle/Tests/Controller/DashboardControllerFunctionalTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: use Mautic\\UserBundle\\Entity\\User;",
          "14: use PHPUnit\\Framework\\Assert;",
          "15: use Symfony\\Component\\DomCrawler\\Crawler;",
          "17: class DashboardControllerFunctionalTest extends MauticMysqlTestCase",
          "18: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: use Symfony\\Component\\HttpFoundation\\Request;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:         $contactModel->saveEntity($contact);",
          "160:         $contactModel->deleteEntity($contact);",
          "161:         $this->em->clear();",
          "163:         $this->assertResponseIsSuccessful();",
          "164:         $printResponse = fn () => print_r(json_decode($this->client->getResponse()->getContent(), true), true);",
          "165:         Assert::assertStringContainsString('created', $printResponse());",
          "",
          "[Removed Lines]",
          "162:         $this->client->request('GET', \"/s/dashboard/widget/{$widget->getId()}\", [], [], $this->createAjaxHeaders());",
          "",
          "[Added Lines]",
          "163:         $this->client->xmlHttpRequest(Request::METHOD_GET, \"/s/dashboard/widget/{$widget->getId()}\");",
          "",
          "---------------"
        ],
        "app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php||app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php": [
          "File: app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php -> app/bundles/EmailBundle/Tests/Helper/MailHelperTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1136:         $transport     = new SmtpTransport();",
          "1137:         $symfonyMailer = new Mailer($transport);",
          "1140:         $longName = 'This is a very long name that exceeds the length limit';",
          "1141:         $email    = 'test@example.com';",
          "",
          "[Removed Lines]",
          "1138:         $mailer        = new MailHelper($this->mockFactory, $symfonyMailer, $this->fromEmailHelper, $this->coreParametersHelper, $this->mailbox, $this->logger, $this->mailHashHelper, $this->router);",
          "",
          "[Added Lines]",
          "1138:         $mailer        = new MailHelper($this->mockFactory, $symfonyMailer, $this->fromEmailHelper, $this->coreParametersHelper, $this->mailbox, $this->logger, $this->mailHashHelper, $this->router, $this->twig, $this->themeHelper, $this->createMock(PathsHelper::class), $this->createMock(EventDispatcherInterface::class), $this->requestStack);",
          "",
          "---------------"
        ],
        "app/bundles/FormBundle/Tests/Controller/FormControllerFunctionalTest.php||app/bundles/FormBundle/Tests/Controller/FormControllerFunctionalTest.php": [
          "File: app/bundles/FormBundle/Tests/Controller/FormControllerFunctionalTest.php -> app/bundles/FormBundle/Tests/Controller/FormControllerFunctionalTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: use Mautic\\FormBundle\\Entity\\Action;",
          "11: use Mautic\\FormBundle\\Entity\\Field;",
          "12: use Mautic\\FormBundle\\Entity\\Form;",
          "14: use Mautic\\LeadBundle\\Entity\\LeadField;",
          "15: use Symfony\\Component\\DomCrawler\\Crawler;",
          "16: use Symfony\\Component\\Filesystem\\Filesystem;",
          "17: use Symfony\\Component\\HttpFoundation\\Request;",
          "",
          "[Removed Lines]",
          "13: use Mautic\\LeadBundle\\Entity\\LeadList;",
          "",
          "[Added Lines]",
          "14: use Mautic\\LeadBundle\\Entity\\LeadList;",
          "",
          "---------------"
        ],
        "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php": [
          "File: app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php -> app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: use Mautic\\UserBundle\\Entity\\User;",
          "10: use Mautic\\UserBundle\\Model\\RoleModel;",
          "11: use Symfony\\Component\\HttpFoundation\\Response;",
          "13: class ReportApiControllerTest extends MauticMysqlTestCase",
          "14: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: use Symfony\\Component\\PasswordHasher\\PasswordHasherInterface;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:         $user->setLastName('Doe');",
          "109:         $user->setUsername('john.doe');",
          "110:         $user->setEmail('john.doe@email.com');",
          "113:         $user->setRole($role);",
          "115:         $this->em->persist($user);",
          "",
          "[Removed Lines]",
          "111:         $encoder = static::getContainer()->get('security.password_hasher_factory')->getEncoder($user);",
          "112:         $user->setPassword($encoder->encodePassword($password, null));",
          "",
          "[Added Lines]",
          "112:         $hasher = self::getContainer()->get('security.password_hasher_factory')->getPasswordHasher($user);",
          "113:         \\assert($hasher instanceof PasswordHasherInterface);",
          "114:         $user->setPassword($hasher->hash($password));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "96285f1ee6905f72fac87fa1b69a667a30440cad",
      "candidate_info": {
        "commit_hash": "96285f1ee6905f72fac87fa1b69a667a30440cad",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/96285f1ee6905f72fac87fa1b69a667a30440cad",
        "files": [
          "app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php"
        ],
        "message": "- add validation by extension and mimetype",
        "before_after_code_files": [
          "app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php||app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php||app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php": [
          "File: app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php -> app/bundles/AssetBundle/Tests/Controller/UploadControllerFunctionalTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: namespace Mautic\\AssetBundle\\Tests\\Controller;",
          "5: use Mautic\\AssetBundle\\Tests\\Asset\\AbstractAssetTest;",
          "6: use Symfony\\Component\\HttpFoundation\\File\\UploadedFile;",
          "7: use Symfony\\Component\\HttpFoundation\\Request;",
          "8: use Symfony\\Component\\HttpFoundation\\Response;",
          "10: class UploadControllerFunctionalTest extends AbstractAssetTest",
          "11: {",
          "12:     public function testUploadWithWrongMimetype(): void",
          "13:     {",
          "15:         $assetsPath = $this->client->getKernel()->getContainer()->getParameter('mautic.upload_dir');",
          "17:         $fileName = 'image2.png';",
          "18:         $filePath = $assetsPath.'/'.$fileName;",
          "20:         if (file_exists($filePath)) {",
          "21:             unlink($filePath);",
          "22:         }",
          "24:         copy('index.php', $filePath);",
          "26:         $binaryFile = new UploadedFile($filePath, $fileName, 'application/x-httpd-php', null, true);",
          "28:         $tmpId = 'tempId_'.time();",
          "30:         $this->client->request(",
          "31:             Request::METHOD_POST,",
          "32:             '/s/_uploader/asset/upload',",
          "33:             [",
          "34:                 'tempId' => $tmpId,",
          "35:             ],",
          "36:             [",
          "37:                 'file' => $binaryFile,",
          "38:             ]",
          "39:         );",
          "41:         $response = $this->client->getResponse();",
          "42:         $this->assertStringContainsString('Upload failed as the file mimetype', $response->getContent());",
          "43:         $this->assertStringContainsString('text\\/x-php is not allowed', $response->getContent());",
          "44:         unlink($filePath);",
          "45:     }",
          "47:     public function testSuccessUploadWithPng(): void",
          "48:     {",
          "51:         $assetsPath     = $this->client->getKernel()->getContainer()->getParameter('mautic.upload_dir');",
          "52:         $assetsPathFrom = $this->client->getKernel()->getContainer()->getParameter('mautic.application_dir').'/app/assets/images/mautic_logo_db64.png';",
          "54:         $fileName = 'image3.png';",
          "55:         $filePath = $assetsPath.'/'.$fileName;",
          "57:         copy($assetsPathFrom, $filePath);",
          "59:         $uploadedFile = new UploadedFile($filePath, $fileName, 'image/png', null, true);",
          "61:         $tmpId = 'tempId_'.time();",
          "63:         $this->client->request(",
          "64:             'POST',",
          "65:             '/s/_uploader/asset/upload',",
          "66:             ['tempId' => $tmpId],",
          "67:             ['file'   => $uploadedFile]",
          "68:         );",
          "69:         $this->assertResponseStatusCodeSame(Response::HTTP_OK);",
          "70:         $this->assertStringContainsString('state\":1', $this->client->getResponse()->getContent());",
          "71:         if (file_exists($filePath)) {",
          "72:             unlink($filePath);",
          "73:         }",
          "74:         $data = json_decode($this->client->getResponse()->getContent(), true);",
          "75:         unlink($assetsPath.'/tmp/'.$tmpId.'/'.$data['tmpFileName']);",
          "76:         rmdir($assetsPath.'/tmp/'.$tmpId);",
          "77:     }",
          "79:     public function testUploadWithWrongExtension(): void",
          "80:     {",
          "82:         $assetsPath     = $this->client->getKernel()->getContainer()->getParameter('mautic.upload_dir');",
          "83:         $assetsPathFrom = $this->client->getKernel()->getContainer()->getParameter('mautic.application_dir').'/app/assets/images/mautic_logo_db64.png';",
          "85:         $fileName = 'image2.php';",
          "86:         $filePath = $assetsPath.'/'.$fileName;",
          "88:         if (file_exists($filePath)) {",
          "89:             unlink($filePath);",
          "90:         }",
          "92:         copy($assetsPathFrom, $filePath);",
          "94:         $binaryFile = new UploadedFile($filePath, $fileName, 'image/png', null, true);",
          "96:         $tmpId = 'tempId_'.time();",
          "98:         $this->client->request(",
          "99:             Request::METHOD_POST,",
          "100:             '/s/_uploader/asset/upload',",
          "101:             [",
          "102:                 'tempId' => $tmpId,",
          "103:             ],",
          "104:             [",
          "105:                 'file' => $binaryFile,",
          "106:             ]",
          "107:         );",
          "109:         $response = $this->client->getResponse();",
          "110:         $this->assertStringContainsString('Upload failed as the file extension', $response->getContent());",
          "111:         $this->assertStringContainsString('Upload failed as the file extension, php,', $response->getContent());",
          "112:         unlink($filePath);",
          "113:     }",
          "114: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "77857401dffd7c4f59c3dba121df28fffb0cd55f",
      "candidate_info": {
        "commit_hash": "77857401dffd7c4f59c3dba121df28fffb0cd55f",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/77857401dffd7c4f59c3dba121df28fffb0cd55f",
        "files": [
          "app/bundles/AssetBundle/EventListener/UploadSubscriber.php"
        ],
        "message": "Remove duplicate arg after merge conflict resolution",
        "before_after_code_files": [
          "app/bundles/AssetBundle/EventListener/UploadSubscriber.php||app/bundles/AssetBundle/EventListener/UploadSubscriber.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "app/bundles/AssetBundle/EventListener/UploadSubscriber.php||app/bundles/AssetBundle/EventListener/UploadSubscriber.php": [
          "File: app/bundles/AssetBundle/EventListener/UploadSubscriber.php -> app/bundles/AssetBundle/EventListener/UploadSubscriber.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:     public function __construct(",
          "19:         private CoreParametersHelper $coreParametersHelper,",
          "20:         private AssetModel $assetModel,",
          "22:         protected Translator $translator,",
          "23:         private FileUploadValidator $fileUploadValidator,",
          "24:     ) {",
          "",
          "[Removed Lines]",
          "21:         private FileUploadValidator $fileUploadValidator,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5fcd7a50da0dee2c0e59fb1faf02b7c22b626025",
      "candidate_info": {
        "commit_hash": "5fcd7a50da0dee2c0e59fb1faf02b7c22b626025",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/5fcd7a50da0dee2c0e59fb1faf02b7c22b626025",
        "files": [
          "app/bundles/AssetBundle/Config/config.php",
          "app/bundles/AssetBundle/Translations/en_US/messages.ini",
          "app/bundles/AssetBundle/Translations/en_US/validators.ini"
        ],
        "message": "- add translations - update config file",
        "before_after_code_files": [
          "app/bundles/AssetBundle/Config/config.php||app/bundles/AssetBundle/Config/config.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "app/bundles/AssetBundle/Config/config.php||app/bundles/AssetBundle/Config/config.php": [
          "File: app/bundles/AssetBundle/Config/config.php -> app/bundles/AssetBundle/Config/config.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:                 'arguments' => 'mautic.factory',",
          "68:             ],",
          "71:         ],",
          "72:         'fixtures' => [",
          "73:             'mautic.asset.fixture.asset' => [",
          "",
          "[Removed Lines]",
          "70:             'oneup_uploader.controller.dropzone.class' => Mautic\\AssetBundle\\Controller\\UploadController::class,",
          "",
          "[Added Lines]",
          "70:             'oneup_uploader.controller.dropzone.class' => [",
          "71:                 'class'     => Mautic\\AssetBundle\\Controller\\UploadController::class,",
          "72:             ],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:         'max_size'            => '6',",
          "83:         'allowed_extensions'  => ['csv', 'doc', 'docx', 'epub', 'gif', 'jpg', 'jpeg', 'mpg', 'mpeg', 'mp3', 'odt', 'odp', 'ods', 'pdf', 'png', 'ppt', 'pptx', 'tif', 'tiff', 'txt', 'xls', 'xlsx', 'wav'],",
          "84:         'streamed_extensions' => ['gif', 'jpg', 'jpeg', 'mpg', 'mpeg', 'mp3', 'pdf', 'png', 'wav'],",
          "85:     ],",
          "86: ];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:         'allowed_mimetypes'   => [",
          "88:             'csv'  => 'text/csv',",
          "89:             'doc'  => 'application/msword',",
          "90:             'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',",
          "91:             'epub' => 'application/epub+zip',",
          "92:             'gif'  => 'image/gif',",
          "93:             'jpg'  => 'image/jpeg',",
          "94:             'jpeg' => 'image/jpeg',",
          "95:             'mpg'  => 'video/mpeg',",
          "96:             'mpeg' => 'video/mpeg',",
          "97:             'mp3'  => 'audio/mpeg',",
          "98:             'odt'  => 'application/vnd.oasis.opendocument.text',",
          "99:             'odp'  => 'application/vnd.oasis.opendocument.presentation',",
          "100:             'ods'  => 'application/vnd.oasis.opendocument.spreadsheet',",
          "101:             'pdf'  => 'application/pdf',",
          "102:             'png'  => 'image/png',",
          "103:             'ppt'  => 'application/vnd.ms-powerpoint',",
          "104:             'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation',",
          "105:             'tif'  => 'image/tiff',",
          "106:             'tiff' => 'image/tiff',",
          "107:             'txt'  => 'text/plain',",
          "108:             'xls'  => 'application/vnd.ms-excel',",
          "109:             'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',",
          "110:             'wav'  => 'audio/wav',",
          "111:         ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9bd953e36c34ffc2f1d2d294ca274be23119e490",
      "candidate_info": {
        "commit_hash": "9bd953e36c34ffc2f1d2d294ca274be23119e490",
        "repo": "mautic/mautic",
        "commit_url": "https://github.com/mautic/mautic/commit/9bd953e36c34ffc2f1d2d294ca274be23119e490",
        "files": [
          "app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
          "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
        ],
        "message": "- mst-83 - add viewother permissions",
        "before_after_code_files": [
          "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
          "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/mautic/mautic/pull/14647"
        ],
        "olp_code_files": {
          "patch": [
            "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
            "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
          ],
          "candidate": [
            "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
            "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php"
          ]
        }
      },
      "candidate_diff": {
        "app/bundles/ReportBundle/Controller/Api/ReportApiController.php||app/bundles/ReportBundle/Controller/Api/ReportApiController.php": [
          "File: app/bundles/ReportBundle/Controller/Api/ReportApiController.php -> app/bundles/ReportBundle/Controller/Api/ReportApiController.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     public function getEntityAction(Request $request, $id): Response",
          "55:     {",
          "63:         try {",
          "64:             if (!$this->security->isGranted($this->permissionBase.':view')) {",
          "65:                 return $this->accessDenied();",
          "",
          "[Removed Lines]",
          "56:         $entity        = $this->model->getEntity($id);",
          "57:         $tableAlias    = $this->model->getRepository()->getTableAlias();",
          "59:         if (!$entity instanceof $this->entityClass) {",
          "60:             return $this->notFound();",
          "61:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:             return $this->accessDenied($e->getMessage());",
          "69:         }",
          "72:             && !$this->security->isGranted($this->permissionBase.':viewother')",
          "74:         ) {",
          "80:         }",
          "82:         $reportData = $this->model->getReportData($entity, $this->formFactory, $this->getOptionsFromRequest($request));",
          "",
          "[Removed Lines]",
          "71:         if ($this->security->checkPermissionExists($this->permissionBase.':viewother')",
          "73:             && null !== $user = $this->userHelper->getUser()",
          "75:             $this->listFilters[] = [",
          "76:                 'column' => $tableAlias.'.createdBy',",
          "77:                 'expr'   => 'eq',",
          "78:                 'value'  => $user->getId(),",
          "79:             ];",
          "",
          "[Added Lines]",
          "64:         $entity        = $this->model->getEntity($id);",
          "66:         if (!$entity instanceof $this->entityClass) {",
          "67:             return $this->notFound();",
          "68:         }",
          "70:         if (",
          "71:             $this->security->checkPermissionExists($this->permissionBase.':viewother')",
          "73:             && $entity->getCreatedBy() !== $this->userHelper->getUser()->getId()",
          "75:             return $this->accessDenied();",
          "",
          "---------------"
        ],
        "app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php||app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php": [
          "File: app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php -> app/bundles/ReportBundle/Tests/Controller/Api/ReportApiControllerTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: namespace Mautic\\ReportBundle\\Tests\\Controller\\Api;",
          "5: use Mautic\\CoreBundle\\Test\\MauticMysqlTestCase;",
          "6: use Mautic\\UserBundle\\Entity\\Role;",
          "7: use Mautic\\UserBundle\\Entity\\User;",
          "8: use Symfony\\Component\\HttpFoundation\\Response;",
          "10: final class ReportApiControllerTest extends MauticMysqlTestCase",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: use Mautic\\UserBundle\\Entity\\Permission;",
          "9: use Mautic\\UserBundle\\Model\\RoleModel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:         $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());",
          "94:     }",
          "96:     private function createUser(Role $role, string $password='mautic'): User",
          "97:     {",
          "98:         $user = new User();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98:     public function testGetReportFailByNoCorrectAccessToViewOther(): void",
          "99:     {",
          "100:         $password   = 'Maut1cR0cks!!!!!';",
          "101:         $idReport   = $this->createReportData();",
          "102:         $permission = ['report:reports'=>['viewother']];",
          "103:         $role       = $this->createRole(false);",
          "104:         $user       = $this->createUser($role, $password);",
          "105:         $this->em->flush();",
          "106:         $this->em->detach($role);",
          "107:         $this->setPermission($user, $permission);",
          "109:         $this->clientServer = [];",
          "110:         $this->setUpSymfony($this->configParams);",
          "111:         $user = $this->loginUser($user->getUserIdentifier());",
          "112:         $this->client->setServerParameter('PHP_AUTH_USER', $user->getUserIdentifier());",
          "113:         $this->client->setServerParameter('PHP_AUTH_PW', $password);",
          "114:         $this->client->request('GET', '/api/reports/'.$idReport);",
          "115:         $this->assertSame(Response::HTTP_FORBIDDEN, $this->client->getResponse()->getStatusCode());",
          "116:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:         return $role;",
          "121:     }",
          "123:     private function createReportData(): int",
          "124:     {",
          "125:         $data = json_decode(file_get_contents(__DIR__.'/data/post.json'), true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:     private function setPermission(User $user, array $permissions): void",
          "149:     {",
          "150:         $role = $user->getRole();",
          "153:         $this->em->createQueryBuilder()",
          "154:             ->delete(Permission::class, 'p')",
          "155:             ->where('p.bundle = :bundle')",
          "156:             ->andWhere('p.role = :role_id')",
          "157:             ->setParameters(['bundle' => 'report', 'role_id' => $role->getId()])",
          "158:             ->getQuery()",
          "159:             ->execute();",
          "162:         $role->setIsAdmin(false);",
          "163:         $roleModel = static::getContainer()->get('mautic.user.model.role');",
          "164:         \\assert($roleModel instanceof RoleModel);",
          "165:         $roleModel->setRolePermissions($role, $permissions);",
          "166:         $this->em->persist($role);",
          "167:         $this->em->flush();",
          "168:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}