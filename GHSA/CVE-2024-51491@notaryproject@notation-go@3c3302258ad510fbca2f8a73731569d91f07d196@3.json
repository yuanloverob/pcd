{
  "cve_id": "CVE-2024-51491",
  "cve_desc": "notion-go is a collection of libraries for supporting sign and verify OCI artifacts. Based on Notary Project specifications. The issue was identified during Quarkslab's security audit on the Certificate Revocation List (CRL) based revocation check feature.\nAfter retrieving the CRL, notation-go attempts to update the CRL cache using the os.Rename method. However, this operation may fail due to operating system-specific limitations, particularly when the source and destination paths are on different mount points. This failure could lead to an unexpected program termination. In method `crl.(*FileCache).Set`, a temporary file is created in the OS dedicated area (like /tmp for, usually, Linux/Unix). The file is written and then it is tried to move it to the dedicated `notation` cache directory thanks `os.Rename`. As specified in Go documentation, OS specific restriction may apply. When used with Linux OS, it is relying on rename syscall from the libc and as per the documentation, moving a file to a different mountpoint raises an EXDEV error, interpreted as Cross device link not permitted error. Some Linux distribution, like RedHat use a dedicated filesystem (tmpfs), mounted on a specific mountpoint (usually /tmp) for temporary files. When using such OS, revocation check based on CRL will repeatedly crash notation. As a result the signature verification process is aborted as process crashes. This issue has been addressed in version 1.3.0-rc.2 and all users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "notaryproject/notation-go",
  "patch_hash": "3c3302258ad510fbca2f8a73731569d91f07d196",
  "patch_info": {
    "commit_hash": "3c3302258ad510fbca2f8a73731569d91f07d196",
    "repo": "notaryproject/notation-go",
    "commit_url": "https://github.com/notaryproject/notation-go/commit/3c3302258ad510fbca2f8a73731569d91f07d196",
    "files": [
      "internal/file/file.go",
      "internal/file/file_test.go",
      "verifier/crl/crl.go"
    ],
    "message": "fix: OS error when setting CRL cache leads to denial of signature verification\n\nSigned-off-by: Junjie Gao <junjiegao@microsoft.com>\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
    "before_after_code_files": [
      "internal/file/file.go||internal/file/file.go",
      "internal/file/file_test.go||internal/file/file_test.go",
      "verifier/crl/crl.go||verifier/crl/crl.go"
    ]
  },
  "patch_diff": {
    "internal/file/file.go||internal/file/file.go": [
      "File: internal/file/file.go -> internal/file/file.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:  if err != nil {",
      "125:   return fmt.Errorf(\"failed to create temp file: %w\", err)",
      "126:  }",
      "",
      "[Removed Lines]",
      "122: func WriteFile(path string, content []byte) (writeErr error) {",
      "123:  tempFile, err := os.CreateTemp(\"\", tempFileNamePrefix)",
      "",
      "[Added Lines]",
      "129: func WriteFile(tempDir, path string, content []byte) (writeErr error) {",
      "130:  tempFile, err := os.CreateTemp(tempDir, tempFileNamePrefix)",
      "",
      "---------------"
    ],
    "internal/file/file_test.go||internal/file/file_test.go": [
      "File: internal/file/file_test.go -> internal/file/file_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "31:    t.Fatal(err)",
      "32:   }",
      "34:    t.Fatal(err)",
      "35:   }",
      "",
      "[Removed Lines]",
      "33:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "33:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "53:    t.Fatal(err)",
      "54:   }",
      "56:    t.Fatal(err)",
      "57:   }",
      "",
      "[Removed Lines]",
      "55:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "55:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "88:    t.Fatal(err)",
      "89:   }",
      "91:    t.Fatal(err)",
      "92:   }",
      "",
      "[Removed Lines]",
      "90:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "90:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "113:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "114:    t.Fatal(err)",
      "115:   }",
      "117:    t.Fatal(err)",
      "118:   }",
      "",
      "[Removed Lines]",
      "116:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "116:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "139:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "140:    t.Fatal(err)",
      "141:   }",
      "143:    t.Fatal(err)",
      "144:   }",
      "",
      "[Removed Lines]",
      "142:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "142:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "159:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "160:    t.Fatal(err)",
      "161:   }",
      "163:    t.Fatal(err)",
      "164:   }",
      "",
      "[Removed Lines]",
      "162:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "162:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "192:   if err != nil {",
      "193:    t.Fatal(err)",
      "194:   }",
      "196:   if err == nil || !strings.Contains(err.Error(), \"permission denied\") {",
      "197:    t.Fatalf(\"expected permission denied error, but got %s\", err)",
      "198:   }",
      "",
      "[Removed Lines]",
      "195:   err = WriteFile(filepath.Join(tempDir, \"testFile\"), content)",
      "",
      "[Added Lines]",
      "195:   err = WriteFile(tempDir, filepath.Join(tempDir, \"testFile\"), content)",
      "",
      "---------------"
    ],
    "verifier/crl/crl.go||verifier/crl/crl.go": [
      "File: verifier/crl/crl.go -> verifier/crl/crl.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "144:  if err != nil {",
      "145:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
      "146:  }",
      "148:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
      "149:  }",
      "150:  return nil",
      "",
      "[Removed Lines]",
      "147:  if err := file.WriteFile(filepath.Join(c.root, c.fileName(url)), contentBytes); err != nil {",
      "",
      "[Added Lines]",
      "147:  if err := file.WriteFile(c.root, filepath.Join(c.root, c.fileName(url)), contentBytes); err != nil {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "84c2ec076201697ad05e5315444812f824dad56b",
      "candidate_info": {
        "commit_hash": "84c2ec076201697ad05e5315444812f824dad56b",
        "repo": "notaryproject/notation-go",
        "commit_url": "https://github.com/notaryproject/notation-go/commit/84c2ec076201697ad05e5315444812f824dad56b",
        "files": [
          "dir/fs.go",
          "dir/fs_test.go",
          "dir/path.go",
          "dir/path_test.go",
          "go.mod",
          "go.sum",
          "internal/file/file.go",
          "internal/file/file_test.go",
          "verifier/crl/crl.go",
          "verifier/crl/crl_test.go",
          "verifier/verifier.go"
        ],
        "message": "feat: crl cache (#462)\n\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
        "before_after_code_files": [
          "dir/fs.go||dir/fs.go",
          "dir/fs_test.go||dir/fs_test.go",
          "dir/path.go||dir/path.go",
          "dir/path_test.go||dir/path_test.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "internal/file/file.go||internal/file/file.go",
          "internal/file/file_test.go||internal/file/file_test.go",
          "verifier/crl/crl.go||verifier/crl/crl.go",
          "verifier/crl/crl_test.go||verifier/crl/crl_test.go",
          "verifier/verifier.go||verifier/verifier.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "internal/file/file.go||internal/file/file.go",
            "internal/file/file_test.go||internal/file/file_test.go",
            "verifier/crl/crl.go||verifier/crl/crl.go"
          ],
          "candidate": [
            "internal/file/file.go||internal/file/file.go",
            "internal/file/file_test.go||internal/file/file_test.go",
            "verifier/crl/crl.go||verifier/crl/crl.go"
          ]
        }
      },
      "candidate_diff": {
        "dir/fs.go||dir/fs.go": [
          "File: dir/fs.go -> dir/fs.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: func PluginFS() SysFS {",
          "59:  return NewSysFS(filepath.Join(userLibexecDirPath(), PathPlugins))",
          "60: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: func CacheFS() SysFS {",
          "66:  return NewSysFS(userCacheDirPath())",
          "67: }",
          "",
          "---------------"
        ],
        "dir/fs_test.go||dir/fs_test.go": [
          "File: dir/fs_test.go -> dir/fs_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   t.Fatalf(`SysPath() failed. got: %q, want: %q`, path, filepath.Join(userLibexecDirPath(), PathPlugins, \"plugin\"))",
          "72:  }",
          "73: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: func TestCRLFileCacheFS(t *testing.T) {",
          "76:  cacheFS := CacheFS()",
          "77:  path, err := cacheFS.SysPath(PathCRLCache)",
          "78:  if err != nil {",
          "79:   t.Fatalf(\"SysPath() failed. err = %v\", err)",
          "80:  }",
          "81:  if path != filepath.Join(UserCacheDir, PathCRLCache) {",
          "82:   t.Fatalf(`SysPath() failed. got: %q, want: %q`, path, UserConfigDir)",
          "83:  }",
          "84: }",
          "",
          "---------------"
        ],
        "dir/path.go||dir/path.go": [
          "File: dir/path.go -> dir/path.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: var (",
          "45:  UserConfigDir  string // Absolute path of user level {NOTATION_CONFIG}",
          "46:  UserLibexecDir string // Absolute path of user level {NOTATION_LIBEXEC}",
          "47: )",
          "49: const (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:  UserCacheDir   string // Absolute path of user level {NOTATION_CACHE}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:  PathOCITrustPolicy = \"trustpolicy.oci.json\"",
          "67:  PathBlobTrustPolicy = \"trustpolicy.blob.json\"",
          "71:  LocalKeysDir = \"localkeys\"",
          "",
          "[Removed Lines]",
          "69:  PathPlugins = \"plugins\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:  TrustStoreDir = \"truststore\"",
          "78: )",
          "83: func userConfigDirPath() string {",
          "",
          "[Removed Lines]",
          "80: var userConfigDir = os.UserConfigDir // for unit test",
          "",
          "[Added Lines]",
          "80: const (",
          "82:  PathPlugins = \"plugins\"",
          "83: )",
          "86: const (",
          "88:  PathCRLCache = \"crl\"",
          "89: )",
          "92: var (",
          "93:  userConfigDir = os.UserConfigDir",
          "95:  userCacheDir = os.UserCacheDir",
          "96: )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:  return UserLibexecDir",
          "104: }",
          "107: func LocalKeyPath(name string) (keyPath, certPath string) {",
          "108:  basePath := path.Join(LocalKeysDir, name)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123: func userCacheDirPath() string {",
          "124:  if UserCacheDir == \"\" {",
          "125:   userDir, err := userCacheDir()",
          "126:   if err != nil {",
          "128:    UserCacheDir = filepath.Join(\".\"+notation, \"cache\")",
          "129:    return UserCacheDir",
          "130:   }",
          "132:   UserCacheDir = filepath.Join(userDir, notation)",
          "133:  }",
          "134:  return UserCacheDir",
          "135: }",
          "",
          "---------------"
        ],
        "dir/path_test.go||dir/path_test.go": [
          "File: dir/path_test.go -> dir/path_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import (",
          "17:  \"os\"",
          "18:  \"testing\"",
          "19: )",
          "22:  return \"/path/\", nil",
          "23: }",
          "25: func setup() {",
          "26:  UserConfigDir = \"\"",
          "27:  UserLibexecDir = \"\"",
          "28: }",
          "30: func Test_UserConfigDirPath(t *testing.T) {",
          "32:  setup()",
          "33:  got := userConfigDirPath()",
          "34:  if got != \"/path/notation\" {",
          "",
          "[Removed Lines]",
          "21: func mockGetUserConfig() (string, error) {",
          "31:  userConfigDir = mockGetUserConfig",
          "",
          "[Added Lines]",
          "18:  \"path/filepath\"",
          "22: func mockUserPath() (string, error) {",
          "29:  UserCacheDir = \"\"",
          "33:  userConfigDir = mockUserPath",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: func Test_NoHomeVariable(t *testing.T) {",
          "40:  t.Setenv(\"HOME\", \"\")",
          "41:  t.Setenv(\"XDG_CONFIG_HOME\", \"\")",
          "42:  setup()",
          "43:  userConfigDir = os.UserConfigDir",
          "44:  got := userConfigDirPath()",
          "45:  if got != \".notation\" {",
          "47:  }",
          "48: }",
          "50: func Test_UserLibexecDirPath(t *testing.T) {",
          "52:  setup()",
          "53:  got := userLibexecDirPath()",
          "54:  if got != \"/path/notation\" {",
          "",
          "[Removed Lines]",
          "46:   t.Fatalf(`UserConfigDirPath() = %q, want \".notation\"`, UserConfigDir)",
          "51:  userConfigDir = mockGetUserConfig",
          "",
          "[Added Lines]",
          "44:  t.Setenv(\"XDG_CACHE_HOME\", \"\")",
          "49:   t.Fatalf(`userConfigDirPath() = %q, want \".notation\"`, got)",
          "50:  }",
          "51:  got = userCacheDirPath()",
          "52:  want := filepath.Join(\".\"+notation, \"cache\")",
          "53:  if got != want {",
          "54:   t.Fatalf(`userCacheDirPath() = %q, want %q`, got, want)",
          "59:  userConfigDir = mockUserPath",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:  }",
          "57: }",
          "59: func TestLocalKeyPath(t *testing.T) {",
          "61:  setup()",
          "62:  _ = userConfigDirPath()",
          "63:  _ = userLibexecDirPath()",
          "",
          "[Removed Lines]",
          "60:  userConfigDir = mockGetUserConfig",
          "",
          "[Added Lines]",
          "67: func Test_UserCacheDirPath(t *testing.T) {",
          "68:  userCacheDir = mockUserPath",
          "69:  setup()",
          "70:  got := userCacheDirPath()",
          "71:  if got != \"/path/notation\" {",
          "72:   t.Fatalf(`UserCacheDirPath() = %q, want \"/path/notation\"`, got)",
          "73:  }",
          "74: }",
          "77:  userConfigDir = mockUserPath",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71: }",
          "73: func TestX509TrustStoreDir(t *testing.T) {",
          "75:  setup()",
          "76:  _ = userConfigDirPath()",
          "77:  _ = userLibexecDirPath()",
          "",
          "[Removed Lines]",
          "74:  userConfigDir = mockGetUserConfig",
          "",
          "[Added Lines]",
          "91:  userConfigDir = mockUserPath",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: require (",
          "6:  github.com/go-ldap/ldap/v3 v3.4.8",
          "8:  github.com/notaryproject/notation-plugin-framework-go v1.0.0",
          "9:  github.com/notaryproject/tspclient-go v0.2.0",
          "10:  github.com/opencontainers/go-digest v1.0.0",
          "",
          "[Removed Lines]",
          "7:  github.com/notaryproject/notation-core-go v1.1.1-0.20240918011623-695ea0c1ad1f",
          "",
          "[Added Lines]",
          "7:  github.com/notaryproject/notation-core-go v1.1.1-0.20240920045731-0786f51de737",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: github.com/jcmturner/gokrb5/v8 v8.4.4/go.mod h1:1btQEpgT6k+unzCwX1KdWMEwPPkkgBtP+F6aCACiMrs=",
          "33: github.com/jcmturner/rpc/v2 v2.0.3 h1:7FXXj8Ti1IaVFpSAziCZWNzbNuZmnvw/i6CqLNdWfZY=",
          "34: github.com/jcmturner/rpc/v2 v2.0.3/go.mod h1:VUJYCIDm3PVOEHw8sgt091/20OJjskO/YJki3ELg/Hc=",
          "37: github.com/notaryproject/notation-plugin-framework-go v1.0.0 h1:6Qzr7DGXoCgXEQN+1gTZWuJAZvxh3p8Lryjn5FaLzi4=",
          "38: github.com/notaryproject/notation-plugin-framework-go v1.0.0/go.mod h1:RqWSrTOtEASCrGOEffq0n8pSg2KOgKYiWqFWczRSics=",
          "39: github.com/notaryproject/tspclient-go v0.2.0 h1:g/KpQGmyk/h7j60irIRG1mfWnibNOzJ8WhLqAzuiQAQ=",
          "",
          "[Removed Lines]",
          "35: github.com/notaryproject/notation-core-go v1.1.1-0.20240918011623-695ea0c1ad1f h1:TmwJtM3AZ7iQ1LJEbHRPAMRw4hA52/AbVrllSVjCNP0=",
          "36: github.com/notaryproject/notation-core-go v1.1.1-0.20240918011623-695ea0c1ad1f/go.mod h1:+6AOh41JPrnVLbW/19SJqdhVHwKgIINBO/np0e7nXJA=",
          "",
          "[Added Lines]",
          "35: github.com/notaryproject/notation-core-go v1.1.1-0.20240920045731-0786f51de737 h1:Hp93KBCABE29+6zdS0GTg0T1SXj6qGatJyN1JMvTQqk=",
          "36: github.com/notaryproject/notation-core-go v1.1.1-0.20240920045731-0786f51de737/go.mod h1:b/70rA4OgOHlg0A7pb8zTWKJadFO6781zS3a37KHEJQ=",
          "",
          "---------------"
        ],
        "internal/file/file.go||internal/file/file.go": [
          "File: internal/file/file.go -> internal/file/file.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: import (",
          "17:  \"errors\"",
          "18:  \"io\"",
          "19:  \"io/fs\"",
          "20:  \"os\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  \"fmt\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:  \"strings\"",
          "24: )",
          "27: var ErrNotRegularFile = errors.New(\"not regular file\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: const (",
          "29:  tempFileNamePrefix = \"notation-*\"",
          "30: )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "110: func TrimFileExtension(fileName string) string {",
          "111:  return strings.TrimSuffix(fileName, filepath.Ext(fileName))",
          "112: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: func WriteFile(path string, content []byte) (writeErr error) {",
          "123:  tempFile, err := os.CreateTemp(\"\", tempFileNamePrefix)",
          "124:  if err != nil {",
          "125:   return fmt.Errorf(\"failed to create temp file: %w\", err)",
          "126:  }",
          "127:  defer func() {",
          "129:   if writeErr != nil {",
          "130:    tempFile.Close()",
          "131:    os.Remove(tempFile.Name())",
          "132:   }",
          "133:  }()",
          "135:  if _, err := tempFile.Write(content); err != nil {",
          "136:   return fmt.Errorf(\"failed to write content to temp file: %w\", err)",
          "137:  }",
          "140:  if err := tempFile.Close(); err != nil {",
          "141:   return fmt.Errorf(\"failed to close temp file: %w\", err)",
          "142:  }",
          "145:  return os.Rename(tempFile.Name(), path)",
          "146: }",
          "",
          "---------------"
        ],
        "internal/file/file_test.go||internal/file/file_test.go": [
          "File: internal/file/file_test.go -> internal/file/file_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  \"os\"",
          "19:  \"path/filepath\"",
          "20:  \"runtime\"",
          "21:  \"testing\"",
          "22: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  \"strings\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:   tempDir := t.TempDir()",
          "27:   data := []byte(\"data\")",
          "28:   filename := filepath.Join(tempDir, \"a\", \"file.txt\")",
          "30:    t.Fatal(err)",
          "31:   }",
          "",
          "[Removed Lines]",
          "29:   if err := writeFile(filename, data); err != nil {",
          "",
          "[Added Lines]",
          "30:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
          "31:    t.Fatal(err)",
          "32:   }",
          "33:   if err := WriteFile(filename, data); err != nil {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:   destDir := t.TempDir()",
          "46:   data := []byte(\"data\")",
          "47:   filename := filepath.Join(tempDir, \"a\", \"file.txt\")",
          "49:    t.Fatal(err)",
          "50:   }",
          "",
          "[Removed Lines]",
          "48:   if err := writeFile(filename, data); err != nil {",
          "",
          "[Added Lines]",
          "52:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
          "53:    t.Fatal(err)",
          "54:   }",
          "55:   if err := WriteFile(filename, data); err != nil {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:   data := []byte(\"data\")",
          "79:   filename := filepath.Join(tempDir, \"a\", \"file.txt\")",
          "81:    t.Fatal(err)",
          "82:   }",
          "",
          "[Removed Lines]",
          "80:   if err := writeFile(filename, data); err != nil {",
          "",
          "[Added Lines]",
          "87:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
          "88:    t.Fatal(err)",
          "89:   }",
          "90:   if err := WriteFile(filename, data); err != nil {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:   data := []byte(\"data\")",
          "102:   filename := filepath.Join(tempDir, \"a\", \"file.txt\")",
          "104:    t.Fatal(err)",
          "105:   }",
          "",
          "[Removed Lines]",
          "103:   if err := writeFile(filename, data); err != nil {",
          "",
          "[Added Lines]",
          "113:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
          "114:    t.Fatal(err)",
          "115:   }",
          "116:   if err := WriteFile(filename, data); err != nil {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "123:   data := []byte(\"data\")",
          "125:   filename := filepath.Join(tempDir, \"a\", \"file.txt\")",
          "127:    t.Fatal(err)",
          "128:   }",
          "",
          "[Removed Lines]",
          "126:   if err := writeFile(filename, data); err != nil {",
          "",
          "[Added Lines]",
          "139:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
          "140:    t.Fatal(err)",
          "141:   }",
          "142:   if err := WriteFile(filename, data); err != nil {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "140:   tempDir := t.TempDir()",
          "141:   data := []byte(\"data\")",
          "142:   filename := filepath.Join(tempDir, \"a\", \"file.txt\")",
          "144:    t.Fatal(err)",
          "145:   }",
          "",
          "[Removed Lines]",
          "143:   if err := writeFile(filename, data); err != nil {",
          "",
          "[Added Lines]",
          "159:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
          "160:    t.Fatal(err)",
          "161:   }",
          "162:   if err := WriteFile(filename, data); err != nil {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "161:  }",
          "162: }",
          "164: func validFileContent(t *testing.T, filename string, content []byte) {",
          "165:  b, err := os.ReadFile(filename)",
          "166:  if err != nil {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183: func TestWriteFile(t *testing.T) {",
          "184:  tempDir := t.TempDir()",
          "185:  content := []byte(\"test WriteFile\")",
          "187:  t.Run(\"permission denied\", func(t *testing.T) {",
          "188:   if runtime.GOOS == \"windows\" {",
          "189:    t.Skip(\"skipping test on Windows\")",
          "190:   }",
          "191:   err := os.Chmod(tempDir, 0)",
          "192:   if err != nil {",
          "193:    t.Fatal(err)",
          "194:   }",
          "195:   err = WriteFile(filepath.Join(tempDir, \"testFile\"), content)",
          "196:   if err == nil || !strings.Contains(err.Error(), \"permission denied\") {",
          "197:    t.Fatalf(\"expected permission denied error, but got %s\", err)",
          "198:   }",
          "199:   err = os.Chmod(tempDir, 0700)",
          "200:   if err != nil {",
          "201:    t.Fatal(err)",
          "202:   }",
          "203:  })",
          "204: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "170:   t.Fatal(\"file content is not correct\")",
          "171:  }",
          "172: }",
          "",
          "[Removed Lines]",
          "174: func writeFile(path string, data []byte) error {",
          "175:  if err := os.MkdirAll(filepath.Dir(path), 0700); err != nil {",
          "176:   return err",
          "177:  }",
          "178:  return os.WriteFile(path, data, 0600)",
          "179: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "verifier/crl/crl.go||verifier/crl/crl.go": [
          "File: verifier/crl/crl.go -> verifier/crl/crl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: package crl",
          "17: import (",
          "18:  \"context\"",
          "19:  \"crypto/sha256\"",
          "20:  \"crypto/x509\"",
          "21:  \"encoding/hex\"",
          "22:  \"encoding/json\"",
          "23:  \"errors\"",
          "24:  \"fmt\"",
          "25:  \"io/fs\"",
          "26:  \"os\"",
          "27:  \"path/filepath\"",
          "28:  \"time\"",
          "30:  corecrl \"github.com/notaryproject/notation-core-go/revocation/crl\"",
          "31:  \"github.com/notaryproject/notation-go/internal/file\"",
          "32:  \"github.com/notaryproject/notation-go/log\"",
          "33: )",
          "52: type FileCache struct {",
          "54:  root string",
          "55: }",
          "58: type fileCacheContent struct {",
          "60:  BaseCRL []byte `json:\"baseCRL\"`",
          "63:  DeltaCRL []byte `json:\"deltaCRL,omitempty\"`",
          "64: }",
          "69: func NewFileCache(root string) (*FileCache, error) {",
          "70:  if err := os.MkdirAll(root, 0700); err != nil {",
          "71:   return nil, fmt.Errorf(\"failed to create crl file cache: %w\", err)",
          "72:  }",
          "73:  return &FileCache{",
          "74:   root: root,",
          "75:  }, nil",
          "76: }",
          "80: func (c *FileCache) Get(ctx context.Context, url string) (*corecrl.Bundle, error) {",
          "81:  logger := log.GetLogger(ctx)",
          "82:  logger.Debugf(\"Retrieving crl bundle from file cache with key %q ...\", url)",
          "85:  contentBytes, err := os.ReadFile(filepath.Join(c.root, c.fileName(url)))",
          "86:  if err != nil {",
          "87:   if errors.Is(err, fs.ErrNotExist) {",
          "88:    logger.Debugf(\"CRL file cache miss. Key %q does not exist\", url)",
          "89:    return nil, corecrl.ErrCacheMiss",
          "90:   }",
          "91:   return nil, fmt.Errorf(\"failed to get crl bundle from file cache with key %q: %w\", url, err)",
          "92:  }",
          "95:  var content fileCacheContent",
          "96:  if err := json.Unmarshal(contentBytes, &content); err != nil {",
          "97:   return nil, fmt.Errorf(\"failed to decode file retrieved from file cache: %w\", err)",
          "98:  }",
          "99:  var bundle corecrl.Bundle",
          "100:  bundle.BaseCRL, err = x509.ParseRevocationList(content.BaseCRL)",
          "101:  if err != nil {",
          "102:   return nil, fmt.Errorf(\"failed to parse base CRL of file retrieved from file cache: %w\", err)",
          "103:  }",
          "104:  if content.DeltaCRL != nil {",
          "105:   bundle.DeltaCRL, err = x509.ParseRevocationList(content.DeltaCRL)",
          "106:   if err != nil {",
          "107:    return nil, fmt.Errorf(\"failed to parse delta CRL of file retrieved from file cache: %w\", err)",
          "108:   }",
          "109:  }",
          "112:  if err := checkExpiry(ctx, bundle.BaseCRL.NextUpdate); err != nil {",
          "113:   return nil, err",
          "114:  }",
          "115:  if bundle.DeltaCRL != nil {",
          "116:   if err := checkExpiry(ctx, bundle.DeltaCRL.NextUpdate); err != nil {",
          "117:    return nil, err",
          "118:   }",
          "119:  }",
          "121:  return &bundle, nil",
          "122: }",
          "125: func (c *FileCache) Set(ctx context.Context, url string, bundle *corecrl.Bundle) error {",
          "126:  logger := log.GetLogger(ctx)",
          "127:  logger.Debugf(\"Storing crl bundle to file cache with key %q ...\", url)",
          "129:  if bundle == nil {",
          "130:   return errors.New(\"failed to store crl bundle in file cache: bundle cannot be nil\")",
          "131:  }",
          "132:  if bundle.BaseCRL == nil {",
          "133:   return errors.New(\"failed to store crl bundle in file cache: bundle BaseCRL cannot be nil\")",
          "134:  }",
          "137:  content := fileCacheContent{",
          "138:   BaseCRL: bundle.BaseCRL.Raw,",
          "139:  }",
          "140:  if bundle.DeltaCRL != nil {",
          "141:   content.DeltaCRL = bundle.DeltaCRL.Raw",
          "142:  }",
          "143:  contentBytes, err := json.Marshal(content)",
          "144:  if err != nil {",
          "145:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
          "146:  }",
          "147:  if err := file.WriteFile(filepath.Join(c.root, c.fileName(url)), contentBytes); err != nil {",
          "148:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
          "149:  }",
          "150:  return nil",
          "151: }",
          "154: func (c *FileCache) fileName(url string) string {",
          "155:  hash := sha256.Sum256([]byte(url))",
          "156:  return hex.EncodeToString(hash[:])",
          "157: }",
          "160: func checkExpiry(ctx context.Context, nextUpdate time.Time) error {",
          "161:  logger := log.GetLogger(ctx)",
          "163:  if nextUpdate.IsZero() {",
          "164:   return errors.New(\"crl bundle retrieved from file cache does not contain valid NextUpdate\")",
          "165:  }",
          "166:  if time.Now().After(nextUpdate) {",
          "167:   logger.Debugf(\"CRL bundle retrieved from file cache has expired at %s\", nextUpdate)",
          "168:   return corecrl.ErrCacheMiss",
          "169:  }",
          "170:  return nil",
          "171: }",
          "",
          "---------------"
        ],
        "verifier/crl/crl_test.go||verifier/crl/crl_test.go": [
          "File: verifier/crl/crl_test.go -> verifier/crl/crl_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: package crl",
          "16: import (",
          "17:  \"context\"",
          "18:  \"crypto/rand\"",
          "19:  \"crypto/x509\"",
          "20:  \"encoding/json\"",
          "21:  \"errors\"",
          "22:  \"math/big\"",
          "23:  \"os\"",
          "24:  \"path/filepath\"",
          "25:  \"reflect\"",
          "26:  \"runtime\"",
          "27:  \"strings\"",
          "28:  \"testing\"",
          "29:  \"time\"",
          "31:  corecrl \"github.com/notaryproject/notation-core-go/revocation/crl\"",
          "32:  \"github.com/notaryproject/notation-core-go/testhelper\"",
          "33: )",
          "35: func TestCache(t *testing.T) {",
          "36:  t.Run(\"file cache implement Cache interface\", func(t *testing.T) {",
          "37:   root := t.TempDir()",
          "38:   var coreCache corecrl.Cache",
          "39:   var err error",
          "40:   coreCache, err = NewFileCache(root)",
          "41:   if err != nil {",
          "42:    t.Fatal(err)",
          "43:   }",
          "44:   if _, ok := coreCache.(*FileCache); !ok {",
          "45:    t.Fatal(\"FileCache does not implement coreCache\")",
          "46:   }",
          "47:  })",
          "48: }",
          "50: func TestFileCache(t *testing.T) {",
          "51:  now := time.Now()",
          "52:  certChain := testhelper.GetRevokableRSAChainWithRevocations(2, false, true)",
          "53:  crlBytes, err := x509.CreateRevocationList(rand.Reader, &x509.RevocationList{",
          "54:   Number:     big.NewInt(1),",
          "55:   NextUpdate: now.Add(time.Hour),",
          "56:  }, certChain[1].Cert, certChain[1].PrivateKey)",
          "57:  if err != nil {",
          "58:   t.Fatal(err)",
          "59:  }",
          "60:  baseCRL, err := x509.ParseRevocationList(crlBytes)",
          "61:  if err != nil {",
          "62:   t.Fatal(err)",
          "63:  }",
          "65:  ctx := context.Background()",
          "66:  root := t.TempDir()",
          "67:  cache, err := NewFileCache(root)",
          "68:  t.Run(\"NewFileCache\", func(t *testing.T) {",
          "69:   if err != nil {",
          "70:    t.Fatalf(\"expected no error, but got %v\", err)",
          "71:   }",
          "72:   if cache.root != root {",
          "73:    t.Fatalf(\"expected root %v, but got %v\", root, cache.root)",
          "74:   }",
          "75:  })",
          "77:  key := \"http://example.com\"",
          "78:  t.Run(\"comformance\", func(t *testing.T) {",
          "79:   bundle := &corecrl.Bundle{BaseCRL: baseCRL}",
          "80:   if err := cache.Set(ctx, key, bundle); err != nil {",
          "81:    t.Fatal(err)",
          "82:   }",
          "83:   retrievedBundle, err := cache.Get(ctx, key)",
          "84:   if err != nil {",
          "85:    t.Fatal(err)",
          "86:   }",
          "88:   if !reflect.DeepEqual(retrievedBundle.BaseCRL, bundle.BaseCRL) {",
          "89:    t.Fatalf(\"expected BaseCRL %+v, but got %+v\", bundle.BaseCRL, retrievedBundle.BaseCRL)",
          "90:   }",
          "92:   if bundle.DeltaCRL != nil {",
          "93:    t.Fatalf(\"expected DeltaCRL to be nil, but got %+v\", retrievedBundle.DeltaCRL)",
          "94:   }",
          "95:  })",
          "97:  t.Run(\"comformance with delta crl\", func(t *testing.T) {",
          "98:   crlBytes, err := x509.CreateRevocationList(rand.Reader, &x509.RevocationList{",
          "99:    Number:     big.NewInt(2),",
          "100:    NextUpdate: now.Add(time.Hour),",
          "101:   }, certChain[1].Cert, certChain[1].PrivateKey)",
          "102:   if err != nil {",
          "103:    t.Fatal(err)",
          "104:   }",
          "105:   deltaCRL, err := x509.ParseRevocationList(crlBytes)",
          "106:   if err != nil {",
          "107:    t.Fatal(err)",
          "108:   }",
          "109:   bundle := &corecrl.Bundle{BaseCRL: baseCRL, DeltaCRL: deltaCRL}",
          "110:   if err := cache.Set(ctx, key, bundle); err != nil {",
          "111:    t.Fatal(err)",
          "112:   }",
          "113:   retrievedBundle, err := cache.Get(ctx, key)",
          "114:   if err != nil {",
          "115:    t.Fatal(err)",
          "116:   }",
          "118:   if !reflect.DeepEqual(retrievedBundle.BaseCRL, bundle.BaseCRL) {",
          "119:    t.Fatalf(\"expected BaseCRL %+v, but got %+v\", bundle.BaseCRL, retrievedBundle.BaseCRL)",
          "120:   }",
          "122:   if !reflect.DeepEqual(retrievedBundle.DeltaCRL, bundle.DeltaCRL) {",
          "123:    t.Fatalf(\"expected DeltaCRL %+v, but got %+v\", bundle.DeltaCRL, retrievedBundle.DeltaCRL)",
          "124:   }",
          "125:  })",
          "126: }",
          "128: func TestNewFileCacheFailed(t *testing.T) {",
          "129:  tempDir := t.TempDir()",
          "130:  t.Run(\"without permission to create cache directory\", func(t *testing.T) {",
          "131:   if runtime.GOOS == \"windows\" {",
          "132:    t.Skip(\"skipping test on Windows\")",
          "133:   }",
          "135:   if err := os.Chmod(tempDir, 0); err != nil {",
          "136:    t.Fatal(err)",
          "137:   }",
          "138:   root := filepath.Join(tempDir, \"test\")",
          "139:   _, err := NewFileCache(root)",
          "140:   if !strings.Contains(err.Error(), \"permission denied\") {",
          "141:    t.Fatalf(\"expected permission denied error, but got %v\", err)",
          "142:   }",
          "144:   if err := os.Chmod(tempDir, 0755); err != nil {",
          "145:    t.Fatalf(\"failed to change permission: %v\", err)",
          "146:   }",
          "147:  })",
          "148: }",
          "150: func TestGetFailed(t *testing.T) {",
          "151:  tempDir := t.TempDir()",
          "152:  cache, err := NewFileCache(tempDir)",
          "153:  if err != nil {",
          "154:   t.Fatal(err)",
          "155:  }",
          "157:  t.Run(\"key does not exist\", func(t *testing.T) {",
          "158:   _, err := cache.Get(context.Background(), \"nonExistKey\")",
          "159:   if !errors.Is(err, corecrl.ErrCacheMiss) {",
          "160:    t.Fatalf(\"expected ErrCacheMiss, but got %v\", err)",
          "161:   }",
          "162:  })",
          "164:  invalidFile := filepath.Join(tempDir, cache.fileName(\"invalid\"))",
          "165:  if err := os.WriteFile(invalidFile, []byte(\"invalid\"), 0644); err != nil {",
          "166:   t.Fatalf(\"failed to write file: %v\", err)",
          "167:  }",
          "169:  t.Run(\"no permission to read file\", func(t *testing.T) {",
          "170:   if runtime.GOOS == \"windows\" {",
          "171:    t.Skip(\"skipping test on Windows\")",
          "172:   }",
          "174:   if err := os.Chmod(invalidFile, 0); err != nil {",
          "175:    t.Fatal(err)",
          "176:   }",
          "177:   _, err := cache.Get(context.Background(), \"invalid\")",
          "178:   if err == nil || !strings.Contains(err.Error(), \"permission denied\") {",
          "179:    t.Fatalf(\"expected permission denied error, but got %v\", err)",
          "180:   }",
          "182:   if err := os.Chmod(invalidFile, 0755); err != nil {",
          "183:    t.Fatal(err)",
          "184:   }",
          "185:  })",
          "187:  t.Run(\"invalid content\", func(t *testing.T) {",
          "188:   _, err := cache.Get(context.Background(), \"invalid\")",
          "189:   expectedErrMsg := \"failed to decode file retrieved from file cache: invalid character 'i' looking for beginning of value\"",
          "190:   if err == nil || err.Error() != expectedErrMsg {",
          "191:    t.Fatalf(\"expected %s, but got %v\", expectedErrMsg, err)",
          "192:   }",
          "193:  })",
          "195:  now := time.Now()",
          "196:  certChain := testhelper.GetRevokableRSAChainWithRevocations(2, false, true)",
          "197:  crlBytes, err := x509.CreateRevocationList(rand.Reader, &x509.RevocationList{",
          "198:   Number: big.NewInt(1),",
          "199:  }, certChain[1].Cert, certChain[1].PrivateKey)",
          "200:  if err != nil {",
          "201:   t.Fatalf(\"failed to create base CRL: %v\", err)",
          "202:  }",
          "203:  baseCRL, err := x509.ParseRevocationList(crlBytes)",
          "204:  if err != nil {",
          "205:   t.Fatalf(\"failed to parse base CRL: %v\", err)",
          "206:  }",
          "208:  t.Run(\"empty RawBaseCRL of content\", func(t *testing.T) {",
          "209:   content := fileCacheContent{",
          "210:    BaseCRL: []byte{},",
          "211:   }",
          "212:   b, err := json.Marshal(content)",
          "213:   if err != nil {",
          "214:    t.Fatal(err)",
          "215:   }",
          "216:   invalidBundleFile := filepath.Join(tempDir, cache.fileName(\"invalidBundle\"))",
          "217:   if err := os.WriteFile(invalidBundleFile, b, 0644); err != nil {",
          "218:    t.Fatalf(\"failed to write file: %v\", err)",
          "219:   }",
          "220:   _, err = cache.Get(context.Background(), \"invalidBundle\")",
          "221:   expectedErrMsg := \"failed to parse base CRL of file retrieved from file cache: x509: malformed crl\"",
          "222:   if err == nil || err.Error() != expectedErrMsg {",
          "223:    t.Fatalf(\"expected %s, but got %v\", expectedErrMsg, err)",
          "224:   }",
          "225:  })",
          "227:  t.Run(\"invalid RawBaseCRL of content\", func(t *testing.T) {",
          "228:   content := fileCacheContent{",
          "229:    BaseCRL: []byte(\"invalid\"),",
          "230:   }",
          "231:   b, err := json.Marshal(content)",
          "232:   if err != nil {",
          "233:    t.Fatal(err)",
          "234:   }",
          "235:   invalidBundleFile := filepath.Join(tempDir, cache.fileName(\"invalidBundle\"))",
          "236:   if err := os.WriteFile(invalidBundleFile, b, 0644); err != nil {",
          "237:    t.Fatalf(\"failed to write file: %v\", err)",
          "238:   }",
          "239:   _, err = cache.Get(context.Background(), \"invalidBundle\")",
          "240:   expectedErrMsg := \"failed to parse base CRL of file retrieved from file cache: x509: malformed crl\"",
          "241:   if err == nil || err.Error() != expectedErrMsg {",
          "242:    t.Fatalf(\"expected %s, but got %v\", expectedErrMsg, err)",
          "243:   }",
          "244:  })",
          "246:  t.Run(\"invalid RawDeltaCRL of content\", func(t *testing.T) {",
          "247:   content := fileCacheContent{",
          "248:    BaseCRL:  baseCRL.Raw,",
          "249:    DeltaCRL: []byte(\"invalid\"),",
          "250:   }",
          "251:   b, err := json.Marshal(content)",
          "252:   if err != nil {",
          "253:    t.Fatal(err)",
          "254:   }",
          "255:   invalidBundleFile := filepath.Join(tempDir, cache.fileName(\"invalidBundle\"))",
          "256:   if err := os.WriteFile(invalidBundleFile, b, 0644); err != nil {",
          "257:    t.Fatalf(\"failed to write file: %v\", err)",
          "258:   }",
          "259:   _, err = cache.Get(context.Background(), \"invalidBundle\")",
          "260:   expectedErrMsg := \"failed to parse delta CRL of file retrieved from file cache: x509: malformed crl\"",
          "261:   if err == nil || err.Error() != expectedErrMsg {",
          "262:    t.Fatalf(\"expected %s, but got %v\", expectedErrMsg, err)",
          "263:   }",
          "264:  })",
          "266:  t.Run(\"bundle with invalid NextUpdate\", func(t *testing.T) {",
          "267:   ctx := context.Background()",
          "268:   expiredBundle := &corecrl.Bundle{BaseCRL: baseCRL}",
          "269:   if err := cache.Set(ctx, \"expiredKey\", expiredBundle); err != nil {",
          "270:    t.Fatal(err)",
          "271:   }",
          "272:   _, err = cache.Get(ctx, \"expiredKey\")",
          "273:   expectedErrMsg := \"crl bundle retrieved from file cache does not contain valid NextUpdate\"",
          "274:   if err == nil || err.Error() != expectedErrMsg {",
          "275:    t.Fatalf(\"expected %s, but got %v\", expectedErrMsg, err)",
          "276:   }",
          "277:  })",
          "279:  crlBytes, err = x509.CreateRevocationList(rand.Reader, &x509.RevocationList{",
          "280:   Number:     big.NewInt(1),",
          "281:   NextUpdate: now.Add(-time.Hour),",
          "282:  }, certChain[1].Cert, certChain[1].PrivateKey)",
          "283:  if err != nil {",
          "284:   t.Fatalf(\"failed to create base CRL: %v\", err)",
          "285:  }",
          "286:  expiredBaseCRL, err := x509.ParseRevocationList(crlBytes)",
          "287:  if err != nil {",
          "288:   t.Fatalf(\"failed to parse base CRL: %v\", err)",
          "289:  }",
          "290:  t.Run(\"base crl in cache has expired\", func(t *testing.T) {",
          "291:   ctx := context.Background()",
          "292:   expiredBundle := &corecrl.Bundle{BaseCRL: expiredBaseCRL}",
          "293:   if err := cache.Set(ctx, \"expiredKey\", expiredBundle); err != nil {",
          "294:    t.Fatal(err)",
          "295:   }",
          "296:   _, err = cache.Get(ctx, \"expiredKey\")",
          "297:   if !errors.Is(err, corecrl.ErrCacheMiss) {",
          "298:    t.Fatalf(\"expected ErrCacheMiss, but got %v\", err)",
          "299:   }",
          "300:  })",
          "302:  t.Run(\"delta crl in cache has expired\", func(t *testing.T) {",
          "303:   ctx := context.Background()",
          "304:   crlBytes, err := x509.CreateRevocationList(rand.Reader, &x509.RevocationList{",
          "305:    Number:     big.NewInt(1),",
          "306:    NextUpdate: now.Add(time.Hour),",
          "307:   }, certChain[1].Cert, certChain[1].PrivateKey)",
          "308:   if err != nil {",
          "309:    t.Fatalf(\"failed to create base CRL: %v\", err)",
          "310:   }",
          "311:   baseCRL, err := x509.ParseRevocationList(crlBytes)",
          "312:   if err != nil {",
          "313:    t.Fatalf(\"failed to parse base CRL: %v\", err)",
          "314:   }",
          "315:   crlBytes, err = x509.CreateRevocationList(rand.Reader, &x509.RevocationList{",
          "316:    Number:     big.NewInt(1),",
          "317:    NextUpdate: now.Add(-time.Hour),",
          "318:   }, certChain[1].Cert, certChain[1].PrivateKey)",
          "319:   if err != nil {",
          "320:    t.Fatalf(\"failed to create base CRL: %v\", err)",
          "321:   }",
          "322:   expiredDeltaCRL, err := x509.ParseRevocationList(crlBytes)",
          "323:   if err != nil {",
          "324:    t.Fatalf(\"failed to parse base CRL: %v\", err)",
          "325:   }",
          "326:   expiredBundle := &corecrl.Bundle{BaseCRL: baseCRL, DeltaCRL: expiredDeltaCRL}",
          "327:   if err := cache.Set(ctx, \"expiredKey\", expiredBundle); err != nil {",
          "328:    t.Fatal(err)",
          "329:   }",
          "330:   _, err = cache.Get(ctx, \"expiredKey\")",
          "331:   if !errors.Is(err, corecrl.ErrCacheMiss) {",
          "332:    t.Fatalf(\"expected ErrCacheMiss, but got %v\", err)",
          "333:   }",
          "334:  })",
          "335: }",
          "337: func TestSetFailed(t *testing.T) {",
          "338:  tempDir := t.TempDir()",
          "339:  cache, err := NewFileCache(tempDir)",
          "340:  if err != nil {",
          "341:   t.Fatal(err)",
          "342:  }",
          "344:  now := time.Now()",
          "345:  certChain := testhelper.GetRevokableRSAChainWithRevocations(2, false, true)",
          "346:  crlBytes, err := x509.CreateRevocationList(rand.Reader, &x509.RevocationList{",
          "347:   Number:     big.NewInt(1),",
          "348:   NextUpdate: now.Add(time.Hour),",
          "349:  }, certChain[1].Cert, certChain[1].PrivateKey)",
          "350:  if err != nil {",
          "351:   t.Fatal(err)",
          "352:  }",
          "353:  baseCRL, err := x509.ParseRevocationList(crlBytes)",
          "354:  if err != nil {",
          "355:   t.Fatal(err)",
          "356:  }",
          "357:  ctx := context.Background()",
          "358:  key := \"testKey\"",
          "360:  t.Run(\"nil bundle\", func(t *testing.T) {",
          "361:   err := cache.Set(ctx, key, nil)",
          "362:   expectedErrMsg := \"failed to store crl bundle in file cache: bundle cannot be nil\"",
          "363:   if err == nil || err.Error() != expectedErrMsg {",
          "364:    t.Fatalf(\"expected %s, but got %v\", expectedErrMsg, err)",
          "365:   }",
          "366:  })",
          "368:  t.Run(\"nil bundle BaseCRL\", func(t *testing.T) {",
          "369:   bundle := &corecrl.Bundle{}",
          "370:   err := cache.Set(ctx, key, bundle)",
          "371:   expectedErrMsg := \"failed to store crl bundle in file cache: bundle BaseCRL cannot be nil\"",
          "372:   if err == nil || err.Error() != expectedErrMsg {",
          "373:    t.Fatalf(\"expected %s, but got %v\", expectedErrMsg, err)",
          "374:   }",
          "375:  })",
          "377:  t.Run(\"failed to write into cache due to permission denied\", func(t *testing.T) {",
          "378:   if runtime.GOOS == \"windows\" {",
          "379:    t.Skip(\"skipping test on Windows\")",
          "380:   }",
          "382:   if err := os.Chmod(tempDir, 0); err != nil {",
          "383:    t.Fatal(err)",
          "384:   }",
          "385:   bundle := &corecrl.Bundle{BaseCRL: baseCRL}",
          "386:   err := cache.Set(ctx, key, bundle)",
          "387:   if err == nil || !strings.Contains(err.Error(), \"permission denied\") {",
          "388:    t.Fatalf(\"expected permission denied error, but got %v\", err)",
          "389:   }",
          "391:   if err := os.Chmod(tempDir, 0755); err != nil {",
          "392:    t.Fatalf(\"failed to change permission: %v\", err)",
          "393:   }",
          "394:  })",
          "395: }",
          "",
          "---------------"
        ],
        "verifier/verifier.go||verifier/verifier.go": [
          "File: verifier/verifier.go -> verifier/verifier.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "816:   }",
          "817:   for _, serverResult := range certResult.ServerResults {",
          "818:    if serverResult.Error != nil {",
          "820:     logger.Errorf(\"Certificate #%d in chain with subject %v encountered an error for revocation method %s at URL %q: %v\", (i + 1), cert.Subject.String(), serverResult.RevocationMethod, serverResult.Server, serverResult.Error)",
          "821:    }",
          "822:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "820:     if certResult.RevocationMethod == revocationresult.RevocationMethodOCSPFallbackCRL && serverResult.RevocationMethod == revocationresult.RevocationMethodOCSP {",
          "824:      logger.Debugf(\"Certificate #%d in chain with subject %v encountered an error for revocation method %s at URL %q: %v\", (i + 1), cert.Subject.String(), revocationresult.RevocationMethodOCSP, serverResult.Server, serverResult.Error)",
          "825:      continue",
          "826:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d11fa234693dcb50f4adb72a4c0e0111876d28c",
      "candidate_info": {
        "commit_hash": "7d11fa234693dcb50f4adb72a4c0e0111876d28c",
        "repo": "notaryproject/notation-go",
        "commit_url": "https://github.com/notaryproject/notation-go/commit/7d11fa234693dcb50f4adb72a4c0e0111876d28c",
        "files": [
          "internal/file/file.go",
          "internal/file/file_test.go",
          "verifier/crl/crl.go"
        ],
        "message": "fix: OS error when setting CRL cache leads to denial of signature verification\n\nSigned-off-by: Junjie Gao <junjiegao@microsoft.com>",
        "before_after_code_files": [
          "internal/file/file.go||internal/file/file.go",
          "internal/file/file_test.go||internal/file/file_test.go",
          "verifier/crl/crl.go||verifier/crl/crl.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "internal/file/file.go||internal/file/file.go",
            "internal/file/file_test.go||internal/file/file_test.go",
            "verifier/crl/crl.go||verifier/crl/crl.go"
          ],
          "candidate": [
            "internal/file/file.go||internal/file/file.go",
            "internal/file/file_test.go||internal/file/file_test.go",
            "verifier/crl/crl.go||verifier/crl/crl.go"
          ]
        }
      },
      "candidate_diff": {
        "internal/file/file.go||internal/file/file.go": [
          "File: internal/file/file.go -> internal/file/file.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:  if err != nil {",
          "125:   return fmt.Errorf(\"failed to create temp file: %w\", err)",
          "126:  }",
          "",
          "[Removed Lines]",
          "122: func WriteFile(path string, content []byte) (writeErr error) {",
          "123:  tempFile, err := os.CreateTemp(\"\", tempFileNamePrefix)",
          "",
          "[Added Lines]",
          "129: func WriteFile(tempDir, path string, content []byte) (writeErr error) {",
          "130:  tempFile, err := os.CreateTemp(tempDir, tempFileNamePrefix)",
          "",
          "---------------"
        ],
        "internal/file/file_test.go||internal/file/file_test.go": [
          "File: internal/file/file_test.go -> internal/file/file_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
          "31:    t.Fatal(err)",
          "32:   }",
          "34:    t.Fatal(err)",
          "35:   }",
          "",
          "[Removed Lines]",
          "33:   if err := WriteFile(filename, data); err != nil {",
          "",
          "[Added Lines]",
          "33:   if err := WriteFile(tempDir, filename, data); err != nil {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "52:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
          "53:    t.Fatal(err)",
          "54:   }",
          "56:    t.Fatal(err)",
          "57:   }",
          "",
          "[Removed Lines]",
          "55:   if err := WriteFile(filename, data); err != nil {",
          "",
          "[Added Lines]",
          "55:   if err := WriteFile(tempDir, filename, data); err != nil {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
          "88:    t.Fatal(err)",
          "89:   }",
          "91:    t.Fatal(err)",
          "92:   }",
          "",
          "[Removed Lines]",
          "90:   if err := WriteFile(filename, data); err != nil {",
          "",
          "[Added Lines]",
          "90:   if err := WriteFile(tempDir, filename, data); err != nil {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
          "114:    t.Fatal(err)",
          "115:   }",
          "117:    t.Fatal(err)",
          "118:   }",
          "",
          "[Removed Lines]",
          "116:   if err := WriteFile(filename, data); err != nil {",
          "",
          "[Added Lines]",
          "116:   if err := WriteFile(tempDir, filename, data); err != nil {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
          "140:    t.Fatal(err)",
          "141:   }",
          "143:    t.Fatal(err)",
          "144:   }",
          "",
          "[Removed Lines]",
          "142:   if err := WriteFile(filename, data); err != nil {",
          "",
          "[Added Lines]",
          "142:   if err := WriteFile(tempDir, filename, data); err != nil {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "159:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
          "160:    t.Fatal(err)",
          "161:   }",
          "163:    t.Fatal(err)",
          "164:   }",
          "",
          "[Removed Lines]",
          "162:   if err := WriteFile(filename, data); err != nil {",
          "",
          "[Added Lines]",
          "162:   if err := WriteFile(tempDir, filename, data); err != nil {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "192:   if err != nil {",
          "193:    t.Fatal(err)",
          "194:   }",
          "196:   if err == nil || !strings.Contains(err.Error(), \"permission denied\") {",
          "197:    t.Fatalf(\"expected permission denied error, but got %s\", err)",
          "198:   }",
          "",
          "[Removed Lines]",
          "195:   err = WriteFile(filepath.Join(tempDir, \"testFile\"), content)",
          "",
          "[Added Lines]",
          "195:   err = WriteFile(tempDir, filepath.Join(tempDir, \"testFile\"), content)",
          "",
          "---------------"
        ],
        "verifier/crl/crl.go||verifier/crl/crl.go": [
          "File: verifier/crl/crl.go -> verifier/crl/crl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:  if err != nil {",
          "145:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
          "146:  }",
          "148:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
          "149:  }",
          "150:  return nil",
          "",
          "[Removed Lines]",
          "147:  if err := file.WriteFile(filepath.Join(c.root, c.fileName(url)), contentBytes); err != nil {",
          "",
          "[Added Lines]",
          "147:  if err := file.WriteFile(c.root, filepath.Join(c.root, c.fileName(url)), contentBytes); err != nil {",
          "",
          "---------------"
        ]
      }
    }
  ]
}