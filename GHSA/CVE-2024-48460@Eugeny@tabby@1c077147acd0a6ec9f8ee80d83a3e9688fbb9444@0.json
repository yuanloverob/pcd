{
  "cve_id": "CVE-2024-48460",
  "cve_desc": "An issue in Eugeny Tabby 1.0.213 allows a remote attacker to obtain sensitive information via the server and sends the SSH username and password even when the host key verification fails.",
  "repo": "Eugeny/tabby",
  "patch_hash": "1c077147acd0a6ec9f8ee80d83a3e9688fbb9444",
  "patch_info": {
    "commit_hash": "1c077147acd0a6ec9f8ee80d83a3e9688fbb9444",
    "repo": "Eugeny/tabby",
    "commit_url": "https://github.com/Eugeny/tabby/commit/1c077147acd0a6ec9f8ee80d83a3e9688fbb9444",
    "files": [
      "tabby-ssh/src/session/ssh.ts"
    ],
    "message": "fixed #9955 - host key checking race",
    "before_after_code_files": [
      "tabby-ssh/src/session/ssh.ts||tabby-ssh/src/session/ssh.ts"
    ]
  },
  "patch_diff": {
    "tabby-ssh/src/session/ssh.ts||tabby-ssh/src/session/ssh.ts": [
      "File: tabby-ssh/src/session/ssh.ts -> tabby-ssh/src/session/ssh.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "333:                 algorithms,",
      "334:                 authHandler: (methodsLeft, partialSuccess, callback) => {",
      "335:                     this.zone.run(async () => {",
      "336:                         callback(await this.handleAuth(methodsLeft))",
      "337:                     })",
      "338:                 },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "336:                         await hostVerifiedPromise",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aab7e285a901da63ad662a5686a64c5fd72a2711",
      "candidate_info": {
        "commit_hash": "aab7e285a901da63ad662a5686a64c5fd72a2711",
        "repo": "Eugeny/tabby",
        "commit_url": "https://github.com/Eugeny/tabby/commit/aab7e285a901da63ad662a5686a64c5fd72a2711",
        "files": [
          ".github/workflows/build.yml",
          ".gitignore",
          "app/package.json",
          "app/yarn.lock",
          "package.json",
          "patches/ssh2+1.11.0.patch",
          "tabby-core/src/api/platform.ts",
          "tabby-core/src/services/vault.service.ts",
          "tabby-electron/src/services/platform.service.ts",
          "tabby-electron/src/sftpContextMenu.ts",
          "tabby-settings/src/components/vaultSettingsTab.component.ts",
          "tabby-ssh/package.json",
          "tabby-ssh/src/algorithms.ts",
          "tabby-ssh/src/api/index.ts",
          "tabby-ssh/src/api/interfaces.ts",
          "tabby-ssh/src/api/proxyStream.ts",
          "tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.pug",
          "tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.ts",
          "tabby-ssh/src/components/sshTab.component.pug",
          "tabby-ssh/src/components/sshTab.component.ts",
          "tabby-ssh/src/index.ts",
          "tabby-ssh/src/polyfills.ts",
          "tabby-ssh/src/profiles.ts",
          "tabby-ssh/src/services/ssh.service.ts",
          "tabby-ssh/src/session/sftp.ts",
          "tabby-ssh/src/session/shell.ts",
          "tabby-ssh/src/session/ssh.ts",
          "tabby-ssh/webpack.config.mjs",
          "tabby-ssh/yarn.lock",
          "tabby-web/src/platform.ts",
          "webpack.plugin.config.mjs",
          "yarn.lock"
        ],
        "message": "replace ssh2 with russh",
        "before_after_code_files": [
          "app/yarn.lock||app/yarn.lock",
          "tabby-core/src/api/platform.ts||tabby-core/src/api/platform.ts",
          "tabby-core/src/services/vault.service.ts||tabby-core/src/services/vault.service.ts",
          "tabby-electron/src/services/platform.service.ts||tabby-electron/src/services/platform.service.ts",
          "tabby-electron/src/sftpContextMenu.ts||tabby-electron/src/sftpContextMenu.ts",
          "tabby-settings/src/components/vaultSettingsTab.component.ts||tabby-settings/src/components/vaultSettingsTab.component.ts",
          "tabby-ssh/src/algorithms.ts||tabby-ssh/src/algorithms.ts",
          "tabby-ssh/src/api/index.ts||tabby-ssh/src/api/index.ts",
          "tabby-ssh/src/api/interfaces.ts||tabby-ssh/src/api/interfaces.ts",
          "tabby-ssh/src/api/proxyStream.ts||tabby-ssh/src/api/proxyStream.ts",
          "tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.pug||tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.pug",
          "tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.ts||tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.ts",
          "tabby-ssh/src/components/sshTab.component.pug||tabby-ssh/src/components/sshTab.component.pug",
          "tabby-ssh/src/components/sshTab.component.ts||tabby-ssh/src/components/sshTab.component.ts",
          "tabby-ssh/src/index.ts||tabby-ssh/src/index.ts",
          "tabby-ssh/src/polyfills.ts||tabby-ssh/src/polyfills.ts",
          "tabby-ssh/src/profiles.ts||tabby-ssh/src/profiles.ts",
          "tabby-ssh/src/services/ssh.service.ts||tabby-ssh/src/services/ssh.service.ts",
          "tabby-ssh/src/session/sftp.ts||tabby-ssh/src/session/sftp.ts",
          "tabby-ssh/src/session/shell.ts||tabby-ssh/src/session/shell.ts",
          "tabby-ssh/src/session/ssh.ts||tabby-ssh/src/session/ssh.ts",
          "tabby-ssh/webpack.config.mjs||tabby-ssh/webpack.config.mjs",
          "tabby-ssh/yarn.lock||tabby-ssh/yarn.lock",
          "tabby-web/src/platform.ts||tabby-web/src/platform.ts",
          "webpack.plugin.config.mjs||webpack.plugin.config.mjs",
          "yarn.lock||yarn.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tabby-ssh/src/session/ssh.ts||tabby-ssh/src/session/ssh.ts"
          ],
          "candidate": [
            "tabby-ssh/src/session/ssh.ts||tabby-ssh/src/session/ssh.ts"
          ]
        }
      },
      "candidate_diff": {
        "app/yarn.lock||app/yarn.lock": [
          "File: app/yarn.lock -> app/yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     wrap-ansi \"^8.1.0\"",
          "29:     wrap-ansi-cjs \"npm:wrap-ansi@^7.0.0\"",
          "31: \"@ngx-translate/core@^14.0.0\":",
          "32:   version \"14.0.0\"",
          "33:   resolved \"https://registry.yarnpkg.com/@ngx-translate/core/-/core-14.0.0.tgz#af421d0e1a28376843f0fed375cd2fae7630a5ff\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: \"@napi-rs/cli@^2.18.3\":",
          "32:   version \"2.18.4\"",
          "33:   resolved \"https://registry.yarnpkg.com/@napi-rs/cli/-/cli-2.18.4.tgz#12bebfb7995902fa7ab43cc0b155a7f5a2caa873\"",
          "34:   integrity sha512-SgJeA4df9DE2iAEpr3M2H0OKl/yjtg1BnRI5/JyowS71tUWhrfSu2LT0V3vlHET+g1hBVlrO60PmEXwUEKp8Mg==",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1490:     x11 \"^2.3.0\"",
          "1492: glob@^10.2.2, glob@^10.3.10:",
          "1496:   dependencies:",
          "1497:     foreground-child \"^3.1.0\"",
          "1503: glob@^7.1.1, glob@^7.1.3, glob@^7.1.4, glob@^7.1.6:",
          "1507:   dependencies:",
          "1508:     fs.realpath \"^1.0.0\"",
          "1509:     inflight \"^1.0.4\"",
          "1510:     inherits \"2\"",
          "1512:     once \"^1.3.0\"",
          "1513:     path-is-absolute \"^1.0.0\"",
          "",
          "[Removed Lines]",
          "1493:   version \"10.3.10\"",
          "1494:   resolved \"https://registry.yarnpkg.com/glob/-/glob-10.3.10.tgz#0351ebb809fd187fe421ab96af83d3a70715df4b\"",
          "1495:   integrity sha512-fa46+tv1Ak0UPK1TOy/pZrIybNNt4HCv7SDzwyfiOZkvZLEbjsZkJBPtDHVshZjbecAoAGSC20MjLDG/qr679g==",
          "1498:     jackspeak \"^2.3.5\"",
          "1499:     minimatch \"^9.0.1\"",
          "1500:     minipass \"^5.0.0 || ^6.0.2 || ^7.0.0\"",
          "1501:     path-scurry \"^1.10.1\"",
          "1504:   version \"7.1.6\"",
          "1505:   resolved \"https://registry.npmjs.org/glob/-/glob-7.1.6.tgz\"",
          "1506:   integrity sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==",
          "1511:     minimatch \"^3.0.4\"",
          "",
          "[Added Lines]",
          "1498:   version \"10.4.5\"",
          "1499:   resolved \"https://registry.yarnpkg.com/glob/-/glob-10.4.5.tgz#f4d9f0b90ffdbab09c9d77f5f29b4262517b0956\"",
          "1500:   integrity sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
          "1503:     jackspeak \"^3.1.2\"",
          "1504:     minimatch \"^9.0.4\"",
          "1505:     minipass \"^7.1.2\"",
          "1506:     package-json-from-dist \"^1.0.0\"",
          "1507:     path-scurry \"^1.11.1\"",
          "1510:   version \"7.2.3\"",
          "1511:   resolved \"https://registry.yarnpkg.com/glob/-/glob-7.2.3.tgz#b8df0fb802bbfa8e89bd1d938b4e16578ed44f2b\"",
          "1512:   integrity sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
          "1517:     minimatch \"^3.1.1\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1931:   resolved \"https://registry.yarnpkg.com/isstream/-/isstream-0.1.2.tgz\"",
          "1932:   integrity sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=",
          "1938:   dependencies:",
          "1939:     \"@isaacs/cliui\" \"^8.0.2\"",
          "1940:   optionalDependencies:",
          "",
          "[Removed Lines]",
          "1934: jackspeak@^2.3.5:",
          "1935:   version \"2.3.6\"",
          "1936:   resolved \"https://registry.yarnpkg.com/jackspeak/-/jackspeak-2.3.6.tgz#647ecc472238aee4b06ac0e461acc21a8c505ca8\"",
          "1937:   integrity sha512-N3yCS/NegsOBokc8GAdM8UcmfsKiSS8cipheD/nivzr700H+nsMOxJjQnvwOcRYVuFkdH0wGUvW2WbXGmrZGbQ==",
          "",
          "[Added Lines]",
          "1940: jackspeak@^3.1.2:",
          "1941:   version \"3.4.3\"",
          "1942:   resolved \"https://registry.yarnpkg.com/jackspeak/-/jackspeak-3.4.3.tgz#8833a9d89ab4acde6188942bd1c53b6390ed5a8a\"",
          "1943:   integrity sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2286:   resolved \"https://registry.yarnpkg.com/lowercase-keys/-/lowercase-keys-1.0.1.tgz#6f9e30b47084d971a7c820ff15a6c5167b74c26f\"",
          "2287:   integrity sha512-G2Lj61tXDnVFFOi8VZds+SoQjtQC3dgokKdDG2mTm1tx4m50NUHBOZSBwQQHyy0V12A0JTG4icfZQH+xPyh8VA==",
          "2290:   version \"10.0.2\"",
          "2291:   resolved \"https://registry.yarnpkg.com/lru-cache/-/lru-cache-10.0.2.tgz#34504678cc3266b09b8dfd6fab4e1515258271b7\"",
          "2292:   integrity sha512-Yj9mA8fPiVgOUpByoTZO5pNrcl5Yk37FcSHsUINpAsaBIEZIuqcCclDZJCVxqQShDsmYX8QG63svJiTbOATZwg==",
          "2293:   dependencies:",
          "2294:     semver \"^7.3.5\"",
          "2296: lru-cache@^4.0.1:",
          "2297:   version \"4.1.5\"",
          "2298:   resolved \"https://registry.yarnpkg.com/lru-cache/-/lru-cache-4.1.5.tgz#8bbe50ea85bed59bc9e33dcab8235ee9bcf443cd\"",
          "",
          "[Removed Lines]",
          "2289: lru-cache@^10.0.1, \"lru-cache@^9.1.1 || ^10.0.0\":",
          "",
          "[Added Lines]",
          "2295: lru-cache@^10.0.1:",
          "2302: lru-cache@^10.2.0:",
          "2303:   version \"10.4.3\"",
          "2304:   resolved \"https://registry.yarnpkg.com/lru-cache/-/lru-cache-10.4.3.tgz#410fc8a17b70e598013df257c2446b7f3383f119\"",
          "2305:   integrity sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2412:   dependencies:",
          "2413:     brace-expansion \"^1.1.7\"",
          "2419:   dependencies:",
          "2420:     brace-expansion \"^2.0.1\"",
          "",
          "[Removed Lines]",
          "2415: minimatch@^9.0.1:",
          "2416:   version \"9.0.3\"",
          "2417:   resolved \"https://registry.yarnpkg.com/minimatch/-/minimatch-9.0.3.tgz#a6e00c3de44c3a542bfaae70abfc22420a6da825\"",
          "2418:   integrity sha512-RHiac9mvaRw0x3AYRgDC1CxAP7HTcNrrECeA8YYJeWnpo+2Q5CegtZjaotWTWxDG3UeGA1coE05iH1mPjT/2mg==",
          "",
          "[Added Lines]",
          "2426: minimatch@^3.1.1:",
          "2427:   version \"3.1.2\"",
          "2428:   resolved \"https://registry.yarnpkg.com/minimatch/-/minimatch-3.1.2.tgz#19cd194bfd3e428f049a70817c038d89ab4be35b\"",
          "2429:   integrity sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
          "2430:   dependencies:",
          "2431:     brace-expansion \"^1.1.7\"",
          "2433: minimatch@^9.0.4:",
          "2434:   version \"9.0.5\"",
          "2435:   resolved \"https://registry.yarnpkg.com/minimatch/-/minimatch-9.0.5.tgz#d74f9dd6b57d83d8e98cfb82133b03978bc929e5\"",
          "2436:   integrity sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2488:   resolved \"https://registry.yarnpkg.com/minipass/-/minipass-7.0.4.tgz#dbce03740f50a4786ba994c1fb908844d27b038c\"",
          "2489:   integrity sha512-jYofLM5Dam9279rdkWzqHozUo4ybjdZmCsDHePy5V/PbBcVMiSZR97gmAy45aqi8CK1lG2ECd356FU86avfwUQ==",
          "2491: minizlib@^1.3.3:",
          "2492:   version \"1.3.3\"",
          "2493:   resolved \"https://registry.yarnpkg.com/minizlib/-/minizlib-1.3.3.tgz#2290de96818a34c29551c8a8d301216bd65a861d\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2509: minipass@^7.1.2:",
          "2510:   version \"7.1.2\"",
          "2511:   resolved \"https://registry.yarnpkg.com/minipass/-/minipass-7.1.2.tgz#93a9626ce5e5e66bd4db86849e7515e92340a707\"",
          "2512:   integrity sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2640:   resolved \"https://registry.yarnpkg.com/node-addon-api/-/node-addon-api-4.3.0.tgz#52a1a0b475193e0928e98e0426a0d1254782b77f\"",
          "2641:   integrity sha512-73sE9+3UaLYYFmDsFZnqCInzPyh3MqIwZO9cw58yIqAZhONrrabrYyYe3TuIqtIiOuTXVhsGau8hcrhhwSsDIQ==",
          "2643: node-fetch-npm@^2.0.2:",
          "2644:   version \"2.0.4\"",
          "2645:   resolved \"https://registry.yarnpkg.com/node-fetch-npm/-/node-fetch-npm-2.0.4.tgz#6507d0e17a9ec0be3bec516958a497cec54bf5a4\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2666: node-addon-api@^7.1.0:",
          "2667:   version \"7.1.1\"",
          "2668:   resolved \"https://registry.yarnpkg.com/node-addon-api/-/node-addon-api-7.1.1.tgz#1aba6693b0f255258a049d621329329322aad558\"",
          "2669:   integrity sha512-5m3bsyrjFWE1xf7nz7YXdN4udnVtXK6/Yfgn5qnahL6bCkf2yKt4k3nuTKAtT4r3IG8JNR2ncsIMdZuAzJjHQQ==",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2670:     tar \"^6.1.2\"",
          "2671:     which \"^4.0.0\"",
          "2677:   dependencies:",
          "2680: nopt@^4.0.3:",
          "2681:   version \"4.0.3\"",
          "",
          "[Removed Lines]",
          "2673: node-pty@^1.0:",
          "2674:   version \"1.0.0\"",
          "2675:   resolved \"https://registry.yarnpkg.com/node-pty/-/node-pty-1.0.0.tgz#7daafc0aca1c4ca3de15c61330373af4af5861fd\"",
          "2676:   integrity sha512-wtBMWWS7dFZm/VgqElrTvtfMq4GzJ6+edFI0Y0zyzygUSZMgZdraDUMUhCIvkjhJjme15qWmbyJbtAx4ot4uZA==",
          "2678:     nan \"^2.17.0\"",
          "",
          "[Added Lines]",
          "2701: node-pty@^1.1.0-beta.14:",
          "2702:   version \"1.1.0-beta9\"",
          "2703:   resolved \"https://registry.yarnpkg.com/node-pty/-/node-pty-1.1.0-beta9.tgz#ed643cb3b398d031b4e31c216e8f3b0042435f1d\"",
          "2704:   integrity sha512-/Ue38pvXJdgRZ3+me1FgfglLd301GhJN0NStiotdt61tm43N5htUyR/IXOUzOKuNaFmCwIhy6nwb77Ky41LMbw==",
          "2706:     node-addon-api \"^7.1.0\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3097:   resolved \"https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz\"",
          "3098:   integrity sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
          "3100: package-json@^4.0.0:",
          "3101:   version \"4.0.1\"",
          "3102:   resolved \"https://registry.yarnpkg.com/package-json/-/package-json-4.0.1.tgz#8869a0401253661c4c4ca3da6c2121ed555f5eed\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3128: package-json-from-dist@^1.0.0:",
          "3129:   version \"1.0.0\"",
          "3130:   resolved \"https://registry.yarnpkg.com/package-json-from-dist/-/package-json-from-dist-1.0.0.tgz#e501cd3094b278495eb4258d4c9f6d5ac3019f00\"",
          "3131:   integrity sha512-dATvCeZN/8wQsGywez1mzHtTlP22H8OEfPrVMLNr4/eGa+ijtLn/6M5f0dY8UKNrC2O9UCU6SSoG3qRKnt7STw==",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3209:   resolved \"https://registry.yarnpkg.com/path-parse/-/path-parse-1.0.7.tgz#fbc114b60ca42b30d9daf5858e4bd68bbedb6735\"",
          "3210:   integrity sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
          "3216:   dependencies:",
          "3218:     minipass \"^5.0.0 || ^6.0.2 || ^7.0.0\"",
          "3220: path-type@^2.0.0:",
          "",
          "[Removed Lines]",
          "3212: path-scurry@^1.10.1:",
          "3213:   version \"1.10.1\"",
          "3214:   resolved \"https://registry.yarnpkg.com/path-scurry/-/path-scurry-1.10.1.tgz#9ba6bf5aa8500fe9fd67df4f0d9483b2b0bfc698\"",
          "3215:   integrity sha512-MkhCqzzBEpPvxxQ71Md0b1Kk51W01lrYvlMzSUaIzNsODdd7mqhiimSZlr+VegAz5Z6Vzt9Xg2ttE//XBhH3EQ==",
          "3217:     lru-cache \"^9.1.1 || ^10.0.0\"",
          "",
          "[Added Lines]",
          "3245: path-scurry@^1.11.1:",
          "3246:   version \"1.11.1\"",
          "3247:   resolved \"https://registry.yarnpkg.com/path-scurry/-/path-scurry-1.11.1.tgz#7960a668888594a0720b12a911d1a742ab9f11d2\"",
          "3248:   integrity sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
          "3250:     lru-cache \"^10.2.0\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3603:   dependencies:",
          "3604:     aproba \"^1.1.1\"",
          "3606: rxjs@^7.5.2, rxjs@^7.5.7:",
          "3607:   version \"7.5.7\"",
          "3608:   resolved \"https://registry.yarnpkg.com/rxjs/-/rxjs-7.5.7.tgz#2ec0d57fdc89ece220d2e702730ae8f1e49def39\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3639: russh@0.0.3:",
          "3640:   version \"0.0.3\"",
          "3641:   resolved \"https://registry.yarnpkg.com/russh/-/russh-0.0.3.tgz#bcb53d2efbe2b216857171bc5ca2131001ddfa46\"",
          "3642:   integrity sha512-iTW4M5W856zYjbjQYjlDFaSFSQ6pLBy+zsCYFwhivYuj8U5mZ7kF7TeGOUat9t4l25HVxAS36ivCt5l79p9lcQ==",
          "3643:   dependencies:",
          "3644:     \"@napi-rs/cli\" \"^2.18.3\"",
          "",
          "---------------"
        ],
        "tabby-core/src/api/platform.ts||tabby-core/src/api/platform.ts": [
          "File: tabby-core/src/api/platform.ts -> tabby-core/src/api/platform.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: }",
          "65: export abstract class FileDownload extends FileTransfer {",
          "67: }",
          "69: export abstract class FileUpload extends FileTransfer {",
          "74:         while (true) {",
          "75:             const buf = await this.read()",
          "76:             if (!buf.length) {",
          "77:                 break",
          "78:             }",
          "80:         }",
          "82:     }",
          "83: }",
          "",
          "[Removed Lines]",
          "66:     abstract write (buffer: Buffer): Promise<void>",
          "70:     abstract read (): Promise<Buffer>",
          "72:     async readAll (): Promise<Buffer> {",
          "73:         const buffers: Buffer[] = []",
          "79:             buffers.push(Buffer.from(buf))",
          "81:         return Buffer.concat(buffers)",
          "",
          "[Added Lines]",
          "66:     abstract write (buffer: Uint8Array): Promise<void>",
          "70:     abstract read (): Promise<Uint8Array>",
          "72:     async readAll (): Promise<Uint8Array> {",
          "73:         const result = new Uint8Array(this.getSize())",
          "74:         let pos = 0",
          "80:             result.set(buf, pos)",
          "81:             pos += buf.length",
          "83:         return result",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:         return this.file.size",
          "262:     }",
          "265:         const result: any = await this.reader.read()",
          "266:         if (result.done || !result.value) {",
          "268:         }",
          "270:         this.increaseProgress(chunk.length)",
          "271:         return chunk",
          "272:     }",
          "",
          "[Removed Lines]",
          "264:     async read (): Promise<Buffer> {",
          "267:             return Buffer.from('')",
          "269:         const chunk = Buffer.from(result.value)",
          "",
          "[Added Lines]",
          "266:     async read (): Promise<Uint8Array> {",
          "269:             return new Uint8Array(0)",
          "271:         const chunk = new Uint8Array(result.value)",
          "",
          "---------------"
        ],
        "tabby-core/src/services/vault.service.ts||tabby-core/src/services/vault.service.ts": [
          "File: tabby-core/src/services/vault.service.ts -> tabby-core/src/services/vault.service.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:                 id,",
          "307:                 description: `${description} (${transfer.getName()})`,",
          "308:             },",
          "310:         })",
          "311:         return `${this.prefix}${id}`",
          "312:     }",
          "",
          "[Removed Lines]",
          "309:             value: (await transfer.readAll()).toString('base64'),",
          "",
          "[Added Lines]",
          "309:             value: Buffer.from(await transfer.readAll()).toString('base64'),",
          "",
          "---------------"
        ],
        "tabby-electron/src/services/platform.service.ts||tabby-electron/src/services/platform.service.ts": [
          "File: tabby-electron/src/services/platform.service.ts -> tabby-electron/src/services/platform.service.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:     private size: number",
          "301:     private mode: number",
          "302:     private file: fs.FileHandle",
          "304:     private powerSaveBlocker = 0",
          "306:     constructor (private filePath: string, private electron: ElectronService) {",
          "307:         super()",
          "309:         this.powerSaveBlocker = electron.powerSaveBlocker.start('prevent-app-suspension')",
          "310:     }",
          "",
          "[Removed Lines]",
          "303:     private buffer: Buffer",
          "308:         this.buffer = Buffer.alloc(256 * 1024)",
          "",
          "[Added Lines]",
          "303:     private buffer: Uint8Array",
          "308:         this.buffer = new Uint8Array(256 * 1024)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:         return this.size",
          "329:     }",
          "332:         const result = await this.file.read(this.buffer, 0, this.buffer.length, null)",
          "333:         this.increaseProgress(result.bytesRead)",
          "334:         return this.buffer.slice(0, result.bytesRead)",
          "",
          "[Removed Lines]",
          "331:     async read (): Promise<Buffer> {",
          "",
          "[Added Lines]",
          "331:     async read (): Promise<Uint8Array> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "370:         return this.size",
          "371:     }",
          "374:         let pos = 0",
          "375:         while (pos < buffer.length) {",
          "376:             const result = await this.file.write(buffer, pos, buffer.length - pos, null)",
          "",
          "[Removed Lines]",
          "373:     async write (buffer: Buffer): Promise<void> {",
          "",
          "[Added Lines]",
          "373:     async write (buffer: Uint8Array): Promise<void> {",
          "",
          "---------------"
        ],
        "tabby-electron/src/sftpContextMenu.ts||tabby-electron/src/sftpContextMenu.ts": [
          "File: tabby-electron/src/sftpContextMenu.ts -> tabby-electron/src/sftpContextMenu.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:         this.platform.openPath(tempPath)",
          "51:         const events = new Subject<string>()",
          "66:     }",
          "67: }",
          "",
          "[Removed Lines]",
          "52:         const watcher = fs.watch(tempPath, event => events.next(event))",
          "53:         events.pipe(debounceTime(1000), debounce(async event => {",
          "54:             if (event === 'rename') {",
          "55:                 watcher.close()",
          "56:             }",
          "57:             const upload = await this.platform.startUpload({ multiple: false }, [tempPath])",
          "58:             if (!upload.length) {",
          "59:                 return",
          "60:             }",
          "61:             await sftp.upload(item.fullPath, upload[0])",
          "62:             await sftp.chmod(item.fullPath, item.mode)",
          "63:         })).subscribe()",
          "64:         watcher.on('close', () => events.complete())",
          "65:         sftp.closed$.subscribe(() => watcher.close())",
          "",
          "[Added Lines]",
          "52:         fs.chmodSync(tempPath, 0o700)",
          "55:         setTimeout(() => {",
          "56:             const watcher = fs.watch(tempPath, event => events.next(event))",
          "57:             events.pipe(debounceTime(1000), debounce(async event => {",
          "58:                 if (event === 'rename') {",
          "59:                     watcher.close()",
          "60:                 }",
          "61:                 const upload = await this.platform.startUpload({ multiple: false }, [tempPath])",
          "62:                 if (!upload.length) {",
          "63:                     return",
          "64:                 }",
          "65:                 await sftp.upload(item.fullPath, upload[0])",
          "66:                 await sftp.chmod(item.fullPath, item.mode)",
          "67:             })).subscribe()",
          "68:             watcher.on('close', () => events.complete())",
          "69:             sftp.closed$.subscribe(() => watcher.close())",
          "70:         }, 1000)",
          "",
          "---------------"
        ],
        "tabby-settings/src/components/vaultSettingsTab.component.ts||tabby-settings/src/components/vaultSettingsTab.component.ts": [
          "File: tabby-settings/src/components/vaultSettingsTab.component.ts -> tabby-settings/src/components/vaultSettingsTab.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         }",
          "124:         await this.vault.updateSecret(secret, {",
          "125:             ...secret,",
          "127:         })",
          "128:         this.loadVault()",
          "129:     }",
          "",
          "[Removed Lines]",
          "126:             value: (await transfers[0].readAll()).toString('base64'),",
          "",
          "[Added Lines]",
          "126:             value: Buffer.from(await transfers[0].readAll()).toString('base64'),",
          "",
          "---------------"
        ],
        "tabby-ssh/src/algorithms.ts||tabby-ssh/src/algorithms.ts": [
          "File: tabby-ssh/src/algorithms.ts -> tabby-ssh/src/algorithms.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: }",
          "",
          "[Removed Lines]",
          "1: import * as ALGORITHMS from 'ssh2/lib/protocol/constants'",
          "2: import { ALGORITHM_BLACKLIST, SSHAlgorithmType } from './api'",
          "5: ALGORITHMS.DEFAULT_CIPHER.push('aes128-gcm')",
          "6: ALGORITHMS.DEFAULT_CIPHER.push('aes256-gcm')",
          "7: ALGORITHMS.SUPPORTED_CIPHER.push('aes128-gcm')",
          "8: ALGORITHMS.SUPPORTED_CIPHER.push('aes256-gcm')",
          "10: export const supportedAlgorithms: Record<string, string> = {}",
          "12: for (const k of Object.values(SSHAlgorithmType)) {",
          "13:     const supportedAlg = {",
          "14:         [SSHAlgorithmType.KEX]: 'SUPPORTED_KEX',",
          "15:         [SSHAlgorithmType.HOSTKEY]: 'SUPPORTED_SERVER_HOST_KEY',",
          "16:         [SSHAlgorithmType.CIPHER]: 'SUPPORTED_CIPHER',",
          "17:         [SSHAlgorithmType.HMAC]: 'SUPPORTED_MAC',",
          "18:     }[k]",
          "19:     supportedAlgorithms[k] = ALGORITHMS[supportedAlg].filter(x => !ALGORITHM_BLACKLIST.includes(x)).sort()",
          "",
          "[Added Lines]",
          "1: import * as russh from 'russh'",
          "2: import { SSHAlgorithmType } from './api'",
          "4: export const supportedAlgorithms = {",
          "5:     [SSHAlgorithmType.KEX]: russh.getSupportedKexAlgorithms().filter(x => x !== 'none'),",
          "6:     [SSHAlgorithmType.HOSTKEY]: russh.getSupportedKeyTypes().filter(x => x !== 'none'),",
          "7:     [SSHAlgorithmType.CIPHER]: russh.getSupportedCiphers().filter(x => x !== 'clear'),",
          "8:     [SSHAlgorithmType.HMAC]: russh.getSupportedMACs().filter(x => x !== 'none'),",
          "9: }",
          "11: export const defaultAlgorithms = {",
          "12:     [SSHAlgorithmType.KEX]: [",
          "13:         'curve25519-sha256',",
          "14:         'curve25519-sha256@libssh.org',",
          "15:         'diffie-hellman-group16-sha512',",
          "16:         'diffie-hellman-group14-sha256',",
          "17:         'ext-info-c',",
          "18:         'ext-info-s',",
          "19:         'kex-strict-c-v00@openssh.com',",
          "20:         'kex-strict-s-v00@openssh.com',",
          "21:     ],",
          "22:     [SSHAlgorithmType.HOSTKEY]: [",
          "23:         'ssh-ed25519',",
          "24:         'ecdsa-sha2-nistp256',",
          "25:         'ecdsa-sha2-nistp521',",
          "26:         'rsa-sha2-256',",
          "27:         'rsa-sha2-512',",
          "28:         'ssh-rsa',",
          "29:     ],",
          "30:     [SSHAlgorithmType.CIPHER]: [",
          "31:         'chacha20-poly1305@openssh.com',",
          "32:         'aes256-gcm@openssh.com',",
          "33:         'aes256-ctr',",
          "34:         'aes192-ctr',",
          "35:         'aes128-ctr',",
          "36:     ],",
          "37:     [SSHAlgorithmType.HMAC]: [",
          "38:         'hmac-sha2-512-etm@openssh.com',",
          "39:         'hmac-sha2-256-etm@openssh.com',",
          "40:         'hmac-sha2-512',",
          "41:         'hmac-sha2-256',",
          "42:         'hmac-sha1-etm@openssh.com',",
          "43:         'hmac-sha1',",
          "44:     ],",
          "",
          "---------------"
        ],
        "tabby-ssh/src/api/index.ts||tabby-ssh/src/api/index.ts": [
          "File: tabby-ssh/src/api/index.ts -> tabby-ssh/src/api/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export * from './contextMenu'",
          "2: export * from './interfaces'",
          "3: export * from './importer'",
          "5: export { SSHMultiplexerService } from '../services/sshMultiplexer.service'",
          "",
          "[Removed Lines]",
          "4: export * from './proxyStream'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tabby-ssh/src/api/interfaces.ts||tabby-ssh/src/api/interfaces.ts": [
          "File: tabby-ssh/src/api/interfaces.ts -> tabby-ssh/src/api/interfaces.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     targetPort: number",
          "52:     description: string",
          "53: }",
          "",
          "[Removed Lines]",
          "55: export let ALGORITHM_BLACKLIST = [",
          "57:     'diffie-hellman-group-exchange-sha256',",
          "58:     'diffie-hellman-group-exchange-sha1',",
          "59: ]",
          "61: if (!process.env.TABBY_ENABLE_SSH_ALG_BLACKLIST) {",
          "62:     ALGORITHM_BLACKLIST = []",
          "63: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tabby-ssh/src/api/proxyStream.ts||tabby-ssh/src/api/proxyStream.ts": [
          "File: tabby-ssh/src/api/proxyStream.ts -> tabby-ssh/src/api/proxyStream.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.pug||tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.pug": [
          "File: tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.pug -> tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.pug",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: )",
          "16: .d-flex.mt-3",
          "19:         (click)='previous()'",
          "20:     )",
          "22:     button.btn.btn-primary(",
          "23:         (click)='next()'",
          "24:     )",
          "",
          "[Removed Lines]",
          "17:     button.btn.btn-secondary(",
          "21:     .ms-auto",
          "",
          "[Added Lines]",
          "17:     checkbox(",
          "19:         [(ngModel)]='remember',",
          "20:         [text]='\"Save password\"|translate'",
          "21:     )",
          "23:     .ms-auto",
          "25:     button.btn.btn-secondary.me-3(",
          "",
          "---------------"
        ],
        "tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.ts||tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.ts": [
          "File: tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.ts -> tabby-ssh/src/components/keyboardInteractiveAuthPanel.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, ChangeDetectionStrategy } from '@angular/core'",
          "2: import { KeyboardInteractivePrompt } from '../session/ssh'",
          "5: @Component({",
          "6:     selector: 'keyboard-interactive-auth-panel',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import { SSHProfile } from '../api'",
          "4: import { PasswordStorageService } from '../services/passwordStorage.service'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9:     changeDetection: ChangeDetectionStrategy.OnPush,",
          "10: })",
          "11: export class KeyboardInteractiveAuthComponent {",
          "12:     @Input() prompt: KeyboardInteractivePrompt",
          "13:     @Input() step = 0",
          "14:     @Output() done = new EventEmitter()",
          "15:     @ViewChild('input') input: ElementRef",
          "17:     isPassword (): boolean {",
          "19:     }",
          "21:     previous (): void {",
          "",
          "[Removed Lines]",
          "18:         return this.prompt.prompts[this.step].prompt.toLowerCase().includes('password') || !this.prompt.prompts[this.step].echo",
          "",
          "[Added Lines]",
          "13:     @Input() profile: SSHProfile",
          "18:     remember = false",
          "20:     constructor (private passwordStorage: PasswordStorageService) {}",
          "23:         return this.prompt.isAPasswordPrompt(this.step)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "26:     }",
          "28:     next (): void {",
          "29:         if (this.step === this.prompt.prompts.length - 1) {",
          "30:             this.prompt.respond()",
          "31:             this.done.emit()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:         if (this.isPassword() && this.remember) {",
          "35:             this.passwordStorage.savePassword(this.profile, this.prompt.responses[this.step])",
          "36:         }",
          "",
          "---------------"
        ],
        "tabby-ssh/src/components/sshTab.component.pug||tabby-ssh/src/components/sshTab.component.pug": [
          "File: tabby-ssh/src/components/sshTab.component.pug -> tabby-ssh/src/components/sshTab.component.pug",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: keyboard-interactive-auth-panel.bg-dark(",
          "53:     [prompt]='activeKIPrompt',",
          "54:     (click)='$event.stopPropagation()',",
          "55:     (done)='activeKIPrompt = null; frontend?.focus()'",
          "56: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54:     [profile]='profile',",
          "",
          "---------------"
        ],
        "tabby-ssh/src/components/sshTab.component.ts||tabby-ssh/src/components/sshTab.component.ts": [
          "File: tabby-ssh/src/components/sshTab.component.ts -> tabby-ssh/src/components/sshTab.component.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker'",
          "2: import colors from 'ansi-colors'",
          "3: import { Component, Injector, HostListener } from '@angular/core'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import * as russh from 'russh'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94:                     }",
          "95:                 })",
          "108:             }",
          "109:         }",
          "",
          "[Removed Lines]",
          "97:                 session.jumpStream = await new Promise((resolve, reject) => jumpSession.ssh.forwardOut(",
          "98:                     '127.0.0.1', 0, profile.options.host, profile.options.port ?? 22,",
          "99:                     (err, stream) => {",
          "100:                         if (err) {",
          "101:                             jumpSession.emitServiceMessage(colors.bgRed.black(' X ') + ` Could not set up port forward on ${jumpConnection.name}`)",
          "102:                             reject(err)",
          "103:                             return",
          "104:                         }",
          "105:                         resolve(stream)",
          "106:                     },",
          "107:                 ))",
          "",
          "[Added Lines]",
          "98:                 if (!(jumpSession.ssh instanceof russh.AuthenticatedSSHClient)) {",
          "99:                     throw new Error('Jump session is not authenticated yet somehow')",
          "100:                 }",
          "102:                 try {",
          "103:                     session.jumpChannel = await jumpSession.ssh.openTCPForwardChannel({",
          "104:                         addressToConnectTo: profile.options.host,",
          "105:                         portToConnectTo: profile.options.port ?? 22,",
          "106:                         originatorAddress: '127.0.0.1',",
          "107:                         originatorPort: 0,",
          "108:                     })",
          "109:                 } catch (err) {",
          "110:                     jumpSession.emitServiceMessage(colors.bgRed.black(' X ') + ` Could not set up port forward on ${jumpConnection.name}`)",
          "111:                     throw err",
          "112:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:         })",
          "127:         if (!session.open) {",
          "130:             this.startSpinner(this.translate.instant(_('Connecting')))",
          "",
          "[Removed Lines]",
          "128:             this.write('\\r\\n' + colors.black.bgWhite(' SSH ') + ` Connecting to ${session.profile.options.host}\\r\\n`)",
          "",
          "[Added Lines]",
          "133:             this.write('\\r\\n' + colors.black.bgWhite(' SSH ') + ` Connecting to ${session.profile.name}\\r\\n`)",
          "",
          "---------------"
        ],
        "tabby-ssh/src/index.ts||tabby-ssh/src/index.ts": [
          "File: tabby-ssh/src/index.ts -> tabby-ssh/src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { NgModule } from '@angular/core'",
          "4: import { CommonModule } from '@angular/common'",
          "5: import { FormsModule } from '@angular/forms'",
          "",
          "[Removed Lines]",
          "1: import './polyfills'",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tabby-ssh/src/polyfills.ts||tabby-ssh/src/polyfills.ts": [
          "File: tabby-ssh/src/polyfills.ts -> tabby-ssh/src/polyfills.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tabby-ssh/src/profiles.ts||tabby-ssh/src/profiles.ts": [
          "File: tabby-ssh/src/profiles.ts -> tabby-ssh/src/profiles.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { Injectable, InjectFlags, Injector } from '@angular/core'",
          "2: import { NewTabParameters, PartialProfile, TranslateService, QuickConnectProfileProvider } from 'tabby-core'",
          "4: import { SSHProfileSettingsComponent } from './components/sshProfileSettings.component'",
          "5: import { SSHTabComponent } from './components/sshTab.component'",
          "6: import { PasswordStorageService } from './services/passwordStorage.service'",
          "8: import { SSHProfileImporter } from './api/importer'",
          "10: @Injectable({ providedIn: 'root' })",
          "11: export class SSHProfilesService extends QuickConnectProfileProvider<SSHProfile> {",
          "",
          "[Removed Lines]",
          "3: import * as ALGORITHMS from 'ssh2/lib/protocol/constants'",
          "7: import { ALGORITHM_BLACKLIST, SSHAlgorithmType, SSHProfile } from './api'",
          "",
          "[Added Lines]",
          "6: import { SSHAlgorithmType, SSHProfile } from './api'",
          "8: import { defaultAlgorithms } from './algorithms'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:             agentForward: false,",
          "30:             warnOnClose: null,",
          "31:             algorithms: {",
          "36:             },",
          "37:             proxyCommand: null,",
          "38:             forwardedPorts: [],",
          "",
          "[Removed Lines]",
          "32:                 hmac: [],",
          "33:                 kex: [],",
          "34:                 cipher: [],",
          "35:                 serverHostKey: [],",
          "",
          "[Added Lines]",
          "32:                 hmac: [] as string[],",
          "33:                 kex: [] as string[],",
          "34:                 cipher: [] as string[],",
          "35:                 serverHostKey: [] as string[],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54:     ) {",
          "55:         super()",
          "56:         for (const k of Object.values(SSHAlgorithmType)) {",
          "64:             this.configDefaults.options.algorithms[k].sort()",
          "65:         }",
          "66:     }",
          "",
          "[Removed Lines]",
          "57:             const defaultAlg = {",
          "58:                 [SSHAlgorithmType.KEX]: 'DEFAULT_KEX',",
          "59:                 [SSHAlgorithmType.HOSTKEY]: 'DEFAULT_SERVER_HOST_KEY',",
          "60:                 [SSHAlgorithmType.CIPHER]: 'DEFAULT_CIPHER',",
          "61:                 [SSHAlgorithmType.HMAC]: 'DEFAULT_MAC',",
          "62:             }[k]",
          "63:             this.configDefaults.options.algorithms[k] = ALGORITHMS[defaultAlg].filter(x => !ALGORITHM_BLACKLIST.includes(x))",
          "",
          "[Added Lines]",
          "57:             this.configDefaults.options.algorithms[k] = [...defaultAlgorithms[k]]",
          "",
          "---------------"
        ],
        "tabby-ssh/src/services/ssh.service.ts||tabby-ssh/src/services/ssh.service.ts": [
          "File: tabby-ssh/src/services/ssh.service.ts -> tabby-ssh/src/services/ssh.service.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import * as tmp from 'tmp-promise'",
          "7: import { Injectable } from '@angular/core'",
          "10: import { ConfigService, HostAppService, Platform, PlatformService } from 'tabby-core'",
          "11: import { SSHSession } from '../session/ssh'",
          "13: import { PasswordStorageService } from './passwordStorage.service'",
          "15: @Injectable({ providedIn: 'root' })",
          "",
          "[Removed Lines]",
          "1: import * as shellQuote from 'shell-quote'",
          "2: import * as net from 'net'",
          "3: import * as fs from 'fs/promises'",
          "5: import socksv5 from '@luminati-io/socksv5'",
          "6: import { Duplex } from 'stream'",
          "8: import { spawn } from 'child_process'",
          "9: import { ChildProcess } from 'node:child_process'",
          "12: import { SSHProfile, SSHProxyStream, SSHProxyStreamSocket } from '../api'",
          "",
          "[Added Lines]",
          "6: import { SSHProfile } from '../api'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         let tmpFile: tmp.FileResult|null = null",
          "56:         if (session.activePrivateKey) {",
          "57:             tmpFile = await tmp.file()",
          "59:             const winSCPcom = path.slice(0, -3) + 'com'",
          "60:             await this.platform.exec(winSCPcom, ['/keygen', tmpFile.path, `/output=${tmpFile.path}`])",
          "61:             args.push(`/privatekey=${tmpFile.path}`)",
          "",
          "[Removed Lines]",
          "58:             await fs.writeFile(tmpFile.path, session.activePrivateKey)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "64:         tmpFile?.cleanup()",
          "65:     }",
          "66: }",
          "",
          "[Removed Lines]",
          "68: export class ProxyCommandStream extends SSHProxyStream {",
          "69:     private process: ChildProcess|null",
          "71:     constructor (private command: string) {",
          "72:         super()",
          "73:     }",
          "75:     async start (): Promise<SSHProxyStreamSocket> {",
          "76:         const argv = shellQuote.parse(this.command)",
          "77:         this.process = spawn(argv[0], argv.slice(1), {",
          "78:             windowsHide: true,",
          "79:             stdio: ['pipe', 'pipe', 'pipe'],",
          "80:         })",
          "81:         this.process.on('error', error => {",
          "82:             this.stop(new Error(`Proxy command has failed to start: ${error.message}`))",
          "83:         })",
          "84:         this.process.on('exit', code => {",
          "85:             this.stop(new Error(`Proxy command has exited with code ${code}`))",
          "86:         })",
          "87:         this.process.stdout?.on('data', data => {",
          "88:             this.emitOutput(data)",
          "89:         })",
          "90:         this.process.stdout?.on('error', (err) => {",
          "91:             this.stop(err)",
          "92:         })",
          "93:         this.process.stderr?.on('data', data => {",
          "94:             this.emitMessage(data.toString())",
          "95:         })",
          "96:         return super.start()",
          "97:     }",
          "99:     requestData (size: number): void {",
          "100:         this.process?.stdout?.read(size)",
          "101:     }",
          "103:     async consumeInput (data: Buffer): Promise<void> {",
          "104:         const process = this.process",
          "105:         if (process) {",
          "106:             await new Promise(resolve => process.stdin?.write(data, resolve))",
          "107:         }",
          "108:     }",
          "110:     async stop (error?: Error): Promise<void> {",
          "111:         this.process?.kill()",
          "112:         super.stop(error)",
          "113:     }",
          "114: }",
          "116: export class SocksProxyStream extends SSHProxyStream {",
          "117:     private client: Duplex|null",
          "118:     private header: Buffer|null",
          "120:     constructor (private profile: SSHProfile) {",
          "121:         super()",
          "122:     }",
          "124:     async start (): Promise<SSHProxyStreamSocket> {",
          "125:         this.client = await new Promise((resolve, reject) => {",
          "126:             const connector = socksv5.connect({",
          "127:                 host: this.profile.options.host,",
          "128:                 port: this.profile.options.port,",
          "129:                 proxyHost: this.profile.options.socksProxyHost ?? '127.0.0.1',",
          "130:                 proxyPort: this.profile.options.socksProxyPort ?? 5000,",
          "131:                 auths: [socksv5.auth.None()],",
          "132:                 strictLocalDNS: false,",
          "133:             }, s => {",
          "134:                 resolve(s)",
          "135:                 this.header = s.read()",
          "136:                 if (this.header) {",
          "137:                     this.emitOutput(this.header)",
          "138:                 }",
          "139:             })",
          "140:             connector.on('error', (err) => {",
          "141:                 reject(err)",
          "142:                 this.stop(new Error(`SOCKS connection failed: ${err.message}`))",
          "143:             })",
          "144:         })",
          "145:         this.client?.on('data', data => {",
          "146:             if (!this.header || data !== this.header) {",
          "148:                 this.emitOutput(data)",
          "149:                 this.header = null",
          "150:             }",
          "151:         })",
          "152:         this.client?.on('close', error => {",
          "153:             this.stop(error)",
          "154:         })",
          "156:         return super.start()",
          "157:     }",
          "159:     requestData (size: number): void {",
          "160:         this.client?.read(size)",
          "161:     }",
          "163:     async consumeInput (data: Buffer): Promise<void> {",
          "164:         return new Promise((resolve, reject) => {",
          "165:             this.client?.write(data, undefined, err => err ? reject(err) : resolve())",
          "166:         })",
          "167:     }",
          "169:     async stop (error?: Error): Promise<void> {",
          "170:         this.client?.destroy()",
          "171:         super.stop(error)",
          "172:     }",
          "173: }",
          "175: export class HTTPProxyStream extends SSHProxyStream {",
          "176:     private client: Duplex|null",
          "177:     private connected = false",
          "179:     constructor (private profile: SSHProfile) {",
          "180:         super()",
          "181:     }",
          "183:     async start (): Promise<SSHProxyStreamSocket> {",
          "184:         this.client = await new Promise((resolve, reject) => {",
          "185:             const connector = net.createConnection({",
          "186:                 host: this.profile.options.httpProxyHost!,",
          "187:                 port: this.profile.options.httpProxyPort!,",
          "188:             }, () => resolve(connector))",
          "189:             connector.on('error', error => {",
          "190:                 reject(error)",
          "191:                 this.stop(new Error(`Proxy connection failed: ${error.message}`))",
          "192:             })",
          "193:         })",
          "194:         this.client?.write(Buffer.from(`CONNECT ${this.profile.options.host}:${this.profile.options.port} HTTP/1.1\\r\\n\\r\\n`))",
          "195:         this.client?.on('data', (data: Buffer) => {",
          "196:             if (this.connected) {",
          "197:                 this.emitOutput(data)",
          "198:             } else {",
          "199:                 if (data.slice(0, 5).equals(Buffer.from('HTTP/'))) {",
          "200:                     const idx = data.indexOf('\\n\\n')",
          "201:                     const headers = data.slice(0, idx).toString()",
          "202:                     const code = parseInt(headers.split(' ')[1])",
          "203:                     if (code >= 200 && code < 300) {",
          "204:                         this.emitMessage('Connected')",
          "205:                         this.emitOutput(data.slice(idx + 2))",
          "206:                         this.connected = true",
          "207:                     } else {",
          "208:                         this.stop(new Error(`Connection failed, code ${code}`))",
          "209:                     }",
          "210:                 }",
          "211:             }",
          "212:         })",
          "213:         this.client?.on('close', error => {",
          "214:             this.stop(error)",
          "215:         })",
          "217:         return super.start()",
          "218:     }",
          "220:     requestData (size: number): void {",
          "221:         this.client?.read(size)",
          "222:     }",
          "224:     async consumeInput (data: Buffer): Promise<void> {",
          "225:         return new Promise((resolve, reject) => {",
          "226:             this.client?.write(data, undefined, err => err ? reject(err) : resolve())",
          "227:         })",
          "228:     }",
          "230:     async stop (error?: Error): Promise<void> {",
          "231:         this.client?.destroy()",
          "232:         super.stop(error)",
          "233:     }",
          "234: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tabby-ssh/src/session/sftp.ts||tabby-ssh/src/session/sftp.ts": [
          "File: tabby-ssh/src/session/sftp.ts -> tabby-ssh/src/session/sftp.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { Subject, Observable } from 'rxjs'",
          "3: import { posix as posixPath } from 'path'",
          "11: export interface SFTPFile {",
          "12:     name: string",
          "",
          "[Removed Lines]",
          "1: import * as C from 'constants'",
          "4: import { Injector, NgZone } from '@angular/core'",
          "5: import { FileDownload, FileUpload, Logger, LogService, wrapPromise } from 'tabby-core'",
          "6: import { SFTPWrapper } from 'ssh2'",
          "7: import { promisify } from 'util'",
          "9: import type { FileEntry, Stats } from 'ssh2-streams'",
          "",
          "[Added Lines]",
          "4: import { Injector } from '@angular/core'",
          "5: import { FileDownload, FileUpload, Logger, LogService } from 'tabby-core'",
          "6: import * as russh from 'russh'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     position = 0",
          "24:     constructor (",
          "28:     ) { }",
          "47:     }",
          "65:     }",
          "69:     }",
          "70: }",
          "72: export class SFTPSession {",
          "73:     get closed$ (): Observable<void> { return this.closed }",
          "74:     private closed = new Subject<void>()",
          "76:     private logger: Logger",
          "80:         this.logger = injector.get(LogService).create('sftp')",
          "82:             this.closed.next()",
          "83:             this.closed.complete()",
          "84:         })",
          "",
          "[Removed Lines]",
          "25:         private sftp: SFTPWrapper,",
          "26:         private handle: Buffer,",
          "27:         private zone: NgZone,",
          "30:     read (): Promise<Buffer> {",
          "31:         const buffer = Buffer.alloc(256 * 1024)",
          "32:         return wrapPromise(this.zone, new Promise((resolve, reject) => {",
          "33:             while (true) {",
          "34:                 const wait = this.sftp.read(this.handle, buffer, 0, buffer.length, this.position, (err, read) => {",
          "35:                     if (err) {",
          "36:                         reject(err)",
          "37:                         return",
          "38:                     }",
          "39:                     this.position += read",
          "40:                     resolve(buffer.slice(0, read))",
          "41:                 })",
          "42:                 if (!wait) {",
          "43:                     break",
          "44:                 }",
          "45:             }",
          "46:         }))",
          "49:     write (chunk: Buffer): Promise<void> {",
          "50:         return wrapPromise(this.zone, new Promise<void>((resolve, reject) => {",
          "51:             while (true) {",
          "52:                 const wait = this.sftp.write(this.handle, chunk, 0, chunk.length, this.position, err => {",
          "53:                     if (err) {",
          "54:                         reject(err)",
          "55:                         return",
          "56:                     }",
          "57:                     this.position += chunk.length",
          "58:                     resolve()",
          "59:                 })",
          "60:                 if (!wait) {",
          "61:                     break",
          "62:                 }",
          "63:             }",
          "64:         }))",
          "67:     close (): Promise<void> {",
          "68:         return wrapPromise(this.zone, promisify(this.sftp.close.bind(this.sftp))(this.handle))",
          "75:     private zone: NgZone",
          "78:     constructor (private sftp: SFTPWrapper, injector: Injector) {",
          "79:         this.zone = injector.get(NgZone)",
          "81:         sftp.on('close', () => {",
          "",
          "[Added Lines]",
          "22:         private inner: russh.SFTPFile|null,",
          "25:     async read (): Promise<Uint8Array> {",
          "26:         if (!this.inner) {",
          "27:             return Promise.resolve(new Uint8Array(0))",
          "28:         }",
          "29:         return this.inner.read(256 * 1024)",
          "32:     async write (chunk: Uint8Array): Promise<void> {",
          "33:         if (!this.inner) {",
          "34:             throw new Error('File handle is closed')",
          "35:         }",
          "36:         await this.inner.writeAll(chunk)",
          "39:     async close (): Promise<void> {",
          "40:         await this.inner?.shutdown()",
          "41:         this.inner = null",
          "50:     constructor (private sftp: russh.SFTP, injector: Injector) {",
          "52:         sftp.closed$.subscribe(() => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87:     async readdir (p: string): Promise<SFTPFile[]> {",
          "88:         this.logger.debug('readdir', p)",
          "90:         return entries.map(entry => this._makeFile(",
          "92:         ))",
          "93:     }",
          "95:     readlink (p: string): Promise<string> {",
          "96:         this.logger.debug('readlink', p)",
          "98:     }",
          "100:     async stat (p: string): Promise<SFTPFile> {",
          "101:         this.logger.debug('stat', p)",
          "103:         return {",
          "104:             name: posixPath.basename(p),",
          "105:             fullPath: p,",
          "109:             size: stats.size,",
          "111:         }",
          "112:     }",
          "118:     }",
          "120:     async rmdir (p: string): Promise<void> {",
          "123:     }",
          "125:     async mkdir (p: string): Promise<void> {",
          "128:     }",
          "130:     async rename (oldPath: string, newPath: string): Promise<void> {",
          "131:         this.logger.debug('rename', oldPath, newPath)",
          "133:     }",
          "135:     async unlink (p: string): Promise<void> {",
          "138:     }",
          "140:     async chmod (p: string, mode: string|number): Promise<void> {",
          "141:         this.logger.debug('chmod', p, mode)",
          "143:     }",
          "145:     async upload (path: string, transfer: FileUpload): Promise<void> {",
          "146:         this.logger.info('Uploading into', path)",
          "147:         const tempPath = path + '.tabby-upload'",
          "148:         try {",
          "150:             while (true) {",
          "151:                 const chunk = await transfer.read()",
          "152:                 if (!chunk.length) {",
          "",
          "[Removed Lines]",
          "89:         const entries = await wrapPromise(this.zone, promisify<FileEntry[]>(f => this.sftp.readdir(p, f))())",
          "91:             posixPath.join(p, entry.filename), entry,",
          "97:         return wrapPromise(this.zone, promisify<string>(f => this.sftp.readlink(p, f))())",
          "102:         const stats = await wrapPromise(this.zone, promisify<Stats>(f => this.sftp.stat(p, f))())",
          "106:             isDirectory: stats.isDirectory(),",
          "107:             isSymlink: stats.isSymbolicLink(),",
          "108:             mode: stats.mode,",
          "110:             modified: new Date(stats.mtime * 1000),",
          "114:     async open (p: string, mode: string): Promise<SFTPFileHandle> {",
          "115:         this.logger.debug('open', p)",
          "116:         const handle = await wrapPromise(this.zone, promisify<Buffer>(f => this.sftp.open(p, mode, f))())",
          "117:         return new SFTPFileHandle(this.sftp, handle, this.zone)",
          "121:         this.logger.debug('rmdir', p)",
          "122:         await promisify((f: any) => this.sftp.rmdir(p, f))()",
          "126:         this.logger.debug('mkdir', p)",
          "127:         await promisify((f: any) => this.sftp.mkdir(p, f))()",
          "132:         await promisify((f: any) => this.sftp.rename(oldPath, newPath, f))()",
          "136:         this.logger.debug('unlink', p)",
          "137:         await promisify((f: any) => this.sftp.unlink(p, f))()",
          "142:         await promisify((f: any) => this.sftp.chmod(p, mode, f))()",
          "149:             const handle = await this.open(tempPath, 'w')",
          "",
          "[Added Lines]",
          "60:         const entries = await this.sftp.readDirectory(p)",
          "62:             posixPath.join(p, entry.name), entry,",
          "68:         return this.sftp.readlink(p)",
          "73:         const stats = await this.sftp.stat(p)",
          "77:             isDirectory: stats.type === russh.SFTPFileType.Directory,",
          "78:             isSymlink: stats.type === russh.SFTPFileType.Symlink,",
          "79:             mode: stats.permissions ?? 0,",
          "81:             modified: new Date((stats.mtime ?? 0) * 1000),",
          "85:     async open (p: string, mode: number): Promise<SFTPFileHandle> {",
          "86:         this.logger.debug('open', p, mode)",
          "87:         const handle = await this.sftp.open(p, mode)",
          "88:         return new SFTPFileHandle(handle)",
          "92:         await this.sftp.removeDirectory(p)",
          "96:         await this.sftp.createDirectory(p)",
          "101:         await this.sftp.rename(oldPath, newPath)",
          "105:         await this.sftp.removeFile(p)",
          "110:         await this.sftp.chmod(p, mode)",
          "117:             const handle = await this.open(tempPath, russh.OPEN_WRITE | russh.OPEN_CREATE)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:                 }",
          "155:                 await handle.write(chunk)",
          "156:             }",
          "161:             await this.rename(tempPath, path)",
          "162:             transfer.close()",
          "163:         } catch (e) {",
          "164:             transfer.cancel()",
          "166:             throw e",
          "167:         }",
          "168:     }",
          "",
          "[Removed Lines]",
          "157:             handle.close()",
          "158:             try {",
          "159:                 await this.unlink(path)",
          "160:             } catch { }",
          "165:             this.unlink(tempPath)",
          "",
          "[Added Lines]",
          "125:             await handle.close()",
          "126:             await this.unlink(path).catch(() => null)",
          "131:             this.unlink(tempPath).catch(() => null)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "170:     async download (path: string, transfer: FileDownload): Promise<void> {",
          "171:         this.logger.info('Downloading', path)",
          "172:         try {",
          "174:             while (true) {",
          "175:                 const chunk = await handle.read()",
          "176:                 if (!chunk.length) {",
          "",
          "[Removed Lines]",
          "173:             const handle = await this.open(path, 'r')",
          "",
          "[Added Lines]",
          "139:             const handle = await this.open(path, russh.OPEN_READ)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "186:         }",
          "187:     }",
          "190:         return {",
          "191:             fullPath: p,",
          "192:             name: posixPath.basename(p),",
          "198:         }",
          "199:     }",
          "200: }",
          "",
          "[Removed Lines]",
          "189:     private _makeFile (p: string, entry: FileEntry): SFTPFile {",
          "193:             isDirectory: (entry.attrs.mode & C.S_IFDIR) === C.S_IFDIR,",
          "194:             isSymlink: (entry.attrs.mode & C.S_IFLNK) === C.S_IFLNK,",
          "195:             mode: entry.attrs.mode,",
          "196:             size: entry.attrs.size,",
          "197:             modified: new Date(entry.attrs.mtime * 1000),",
          "",
          "[Added Lines]",
          "155:     private _makeFile (p: string, entry: russh.SFTPDirectoryEntry): SFTPFile {",
          "159:             isDirectory: entry.metadata.type === russh.SFTPFileType.Directory,",
          "160:             isSymlink: entry.metadata.type === russh.SFTPFileType.Symlink,",
          "161:             mode: entry.metadata.permissions ?? 0,",
          "162:             size: entry.metadata.size,",
          "163:             modified: new Date((entry.metadata.mtime ?? 0) * 1000),",
          "",
          "---------------"
        ],
        "tabby-ssh/src/session/shell.ts||tabby-ssh/src/session/shell.ts": [
          "File: tabby-ssh/src/session/shell.ts -> tabby-ssh/src/session/shell.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { Observable, Subject } from 'rxjs'",
          "2: import stripAnsi from 'strip-ansi'",
          "4: import { Injector } from '@angular/core'",
          "5: import { LogService } from 'tabby-core'",
          "6: import { BaseSession, UTF8SplitterMiddleware, InputProcessor } from 'tabby-terminal'",
          "7: import { SSHSession } from './ssh'",
          "8: import { SSHProfile } from '../api'",
          "11: export class SSHShellSession extends BaseSession {",
          "13:     get serviceMessage$ (): Observable<string> { return this.serviceMessage }",
          "14:     private serviceMessage = new Subject<string>()",
          "15:     private ssh: SSHSession|null",
          "",
          "[Removed Lines]",
          "3: import { ClientChannel } from 'ssh2'",
          "12:     shell?: ClientChannel",
          "",
          "[Added Lines]",
          "8: import * as russh from 'russh'",
          "12:     shell?: russh.Channel",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:         this.loginScriptProcessor?.executeUnconditionalScripts()",
          "58:         })",
          "69:             this.logger.info('Shell session ended')",
          "70:             if (this.open) {",
          "71:                 this.destroy()",
          "",
          "[Removed Lines]",
          "56:         this.shell.on('greeting', greeting => {",
          "57:             this.emitServiceMessage(`Shell greeting: ${greeting}`)",
          "60:         this.shell.on('banner', banner => {",
          "61:             this.emitServiceMessage(`Shell banner: ${banner}`)",
          "62:         })",
          "64:         this.shell.on('data', data => {",
          "65:             this.emitOutput(data)",
          "66:         })",
          "68:         this.shell.on('end', () => {",
          "",
          "[Added Lines]",
          "56:         this.shell.data$.subscribe(data => {",
          "57:             this.emitOutput(Buffer.from(data))",
          "60:         this.shell.eof$.subscribe(() => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:     }",
          "81:     resize (columns: number, rows: number): void {",
          "85:     }",
          "87:     write (data: Buffer): void {",
          "88:         if (this.shell) {",
          "90:         }",
          "91:     }",
          "95:     }",
          "97:     async destroy (): Promise<void> {",
          "",
          "[Removed Lines]",
          "82:         if (this.shell) {",
          "83:             this.shell.setWindow(rows, columns, rows, columns)",
          "84:         }",
          "89:             this.shell.write(data)",
          "93:     kill (signal?: string): void {",
          "94:         this.shell?.signal(signal ?? 'TERM')",
          "",
          "[Added Lines]",
          "74:         this.shell?.resizePTY({",
          "75:             columns,",
          "76:             rows,",
          "77:             pixHeight: 0,",
          "78:             pixWidth: 0,",
          "79:         })",
          "84:             this.shell.write(new Uint8Array(data))",
          "88:     kill (_signal?: string): void {",
          "",
          "---------------"
        ],
        "tabby-ssh/src/session/ssh.ts||tabby-ssh/src/session/ssh.ts": [
          "File: tabby-ssh/src/session/ssh.ts -> tabby-ssh/src/session/ssh.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import * as fs from 'mz/fs'",
          "2: import * as crypto from 'crypto'",
          "4: import colors from 'ansi-colors'",
          "5: import stripAnsi from 'strip-ansi'",
          "7: import { NgbModal } from '@ng-bootstrap/ng-bootstrap'",
          "9: import { Socket } from 'net'",
          "11: import { Subject, Observable } from 'rxjs'",
          "12: import { HostKeyPromptModalComponent } from '../components/hostKeyPromptModal.component'",
          "14: import { PasswordStorageService } from '../services/passwordStorage.service'",
          "15: import { SSHKnownHostsService } from '../services/sshKnownHosts.service'",
          "17: import { SFTPSession } from './sftp'",
          "19: import { ForwardedPort } from './forwards'",
          "20: import { X11Socket } from './x11'",
          "21: import { supportedAlgorithms } from '../algorithms'",
          "23: const WINDOWS_OPENSSH_AGENT_PIPE = '\\\\\\\\.\\\\pipe\\\\openssh-ssh-agent'",
          "",
          "[Removed Lines]",
          "3: import * as sshpk from 'sshpk'",
          "6: import { Injector, NgZone } from '@angular/core'",
          "8: import { ConfigService, FileProvidersService, HostAppService, NotificationsService, Platform, PlatformService, wrapPromise, PromptModalComponent, LogService, Logger, TranslateService } from 'tabby-core'",
          "10: import { Client, ClientChannel, SFTPWrapper } from 'ssh2'",
          "13: import { HTTPProxyStream, ProxyCommandStream, SocksProxyStream } from '../services/ssh.service'",
          "16: import { promisify } from 'util'",
          "18: import { SSHAlgorithmType, PortForwardType, SSHProfile, SSHProxyStream, AutoPrivateKeyLocator } from '../api'",
          "",
          "[Added Lines]",
          "5: import * as shellQuote from 'shell-quote'",
          "6: import { Injector } from '@angular/core'",
          "8: import { ConfigService, FileProvidersService, NotificationsService, PromptModalComponent, LogService, Logger, TranslateService, Platform, HostAppService } from 'tabby-core'",
          "15: import { SSHAlgorithmType, SSHProfile, AutoPrivateKeyLocator, PortForwardType } from '../api'",
          "19: import * as russh from 'russh'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:     echo?: boolean",
          "28: }",
          "39: }",
          "41: export class KeyboardInteractivePrompt {",
          "44:     constructor (",
          "45:         public name: string,",
          "46:         public instruction: string,",
          "47:         public prompts: Prompt[],",
          "49:     ) {",
          "50:         this.responses = new Array(this.prompts.length).fill('')",
          "51:     }",
          "53:     respond (): void {",
          "55:     }",
          "56: }",
          "58: export class SSHSession {",
          "62:     forwardedPorts: ForwardedPort[] = []",
          "65:     savedPassword?: string",
          "66:     get serviceMessage$ (): Observable<string> { return this.serviceMessage }",
          "67:     get keyboardInteractivePrompt$ (): Observable<KeyboardInteractivePrompt> { return this.keyboardInteractivePrompt }",
          "68:     get willDestroy$ (): Observable<void> { return this.willDestroy }",
          "72:     authUsername: string|null = null",
          "74:     open = false",
          "",
          "[Removed Lines]",
          "30: interface AuthMethod {",
          "31:     type: 'none'|'publickey'|'agent'|'password'|'keyboard-interactive'|'hostbased'",
          "32:     name?: string",
          "33:     contents?: Buffer",
          "34: }",
          "36: interface Handshake {",
          "37:     kex: string",
          "38:     serverHostKey: string",
          "42:     responses: string[] = []",
          "48:         private callback: (_: string[]) => void,",
          "54:         this.callback(this.responses)",
          "59:     shell?: ClientChannel",
          "60:     ssh: Client",
          "61:     sftp?: SFTPWrapper",
          "63:     jumpStream: any",
          "64:     proxyCommandStream: SSHProxyStream|null = null",
          "70:     agentPath?: string",
          "71:     activePrivateKey: string|null = null",
          "",
          "[Added Lines]",
          "28: type AuthMethod = {",
          "29:     type: 'none'|'prompt-password'|'hostbased'",
          "30: } | {",
          "31:     type: 'keyboard-interactive',",
          "32:     savedPassword?: string",
          "33: } | {",
          "34:     type: 'saved-password',",
          "35:     password: string",
          "36: } | {",
          "37:     type: 'publickey'",
          "38:     name: string",
          "39:     contents: Buffer",
          "40: } | {",
          "41:     type: 'agent',",
          "42:     kind: 'unix-socket',",
          "43:     path: string",
          "44: } | {",
          "45:     type: 'agent',",
          "46:     kind: 'named-pipe',",
          "47:     path: string",
          "48: } | {",
          "49:     type: 'agent',",
          "50:     kind: 'pageant',",
          "54:     readonly responses: string[] = []",
          "56:     private _resolve: (value: string[]) => void",
          "57:     private _reject: (reason: any) => void",
          "58:     readonly promise = new Promise<string[]>((resolve, reject) => {",
          "59:         this._resolve = resolve",
          "60:         this._reject = reject",
          "61:     })",
          "71:     isAPasswordPrompt (index: number): boolean {",
          "72:         return this.prompts[index].prompt.toLowerCase().includes('password') && !this.prompts[index].echo",
          "73:     }",
          "76:         this._resolve(this.responses)",
          "77:     }",
          "79:     reject (): void {",
          "80:         this._reject(new Error('Keyboard-interactive auth rejected'))",
          "85:     shell?: russh.Channel",
          "86:     ssh: russh.SSHClient|russh.AuthenticatedSSHClient",
          "87:     sftp?: russh.SFTP",
          "89:     jumpChannel: russh.Channel|null = null",
          "95:     activePrivateKey: russh.KeyPair|null = null",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:     private serviceMessage = new Subject<string>()",
          "80:     private keyboardInteractivePrompt = new Subject<KeyboardInteractivePrompt>()",
          "81:     private willDestroy = new Subject<void>()",
          "85:     private passwordStorage: PasswordStorageService",
          "86:     private ngbModal: NgbModal",
          "87:     private hostApp: HostAppService",
          "89:     private notifications: NotificationsService",
          "91:     private fileProviders: FileProvidersService",
          "92:     private config: ConfigService",
          "93:     private translate: TranslateService",
          "",
          "[Removed Lines]",
          "82:     private keychainPasswordUsed = false",
          "83:     private hostKeyDigest = ''",
          "88:     private platform: PlatformService",
          "90:     private zone: NgZone",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:         this.passwordStorage = injector.get(PasswordStorageService)",
          "104:         this.ngbModal = injector.get(NgbModal)",
          "105:         this.hostApp = injector.get(HostAppService)",
          "107:         this.notifications = injector.get(NotificationsService)",
          "109:         this.fileProviders = injector.get(FileProvidersService)",
          "110:         this.config = injector.get(ConfigService)",
          "111:         this.translate = injector.get(TranslateService)",
          "",
          "[Removed Lines]",
          "106:         this.platform = injector.get(PlatformService)",
          "108:         this.zone = injector.get(NgZone)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:     }",
          "122:     async init (): Promise<void> {",
          "144:         this.remainingAuthMethods = [{ type: 'none' }]",
          "145:         if (!this.profile.options.auth || this.profile.options.auth === 'publicKey') {",
          "146:             if (this.profile.options.privateKeys?.length) {",
          "",
          "[Removed Lines]",
          "123:         if (this.hostApp.platform === Platform.Windows) {",
          "124:             if (this.config.store.ssh.agentType === 'auto') {",
          "125:                 if (await fs.exists(WINDOWS_OPENSSH_AGENT_PIPE)) {",
          "126:                     this.agentPath = WINDOWS_OPENSSH_AGENT_PIPE",
          "127:                 } else {",
          "128:                     if (",
          "129:                         await this.platform.isProcessRunning('pageant.exe') ||",
          "130:                         await this.platform.isProcessRunning('gpg-agent.exe')",
          "131:                     ) {",
          "132:                         this.agentPath = 'pageant'",
          "133:                     }",
          "134:                 }",
          "135:             } else if (this.config.store.ssh.agentType === 'pageant') {",
          "136:                 this.agentPath = 'pageant'",
          "137:             } else {",
          "138:                 this.agentPath = this.config.store.ssh.agentPath || WINDOWS_OPENSSH_AGENT_PIPE",
          "139:             }",
          "140:         } else {",
          "141:             this.agentPath = process.env.SSH_AUTH_SOCK!",
          "142:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "167:                 }",
          "168:             }",
          "169:         }",
          "170:         if (!this.profile.options.auth || this.profile.options.auth === 'agent') {",
          "173:             } else {",
          "175:             }",
          "176:         }",
          "177:         if (!this.profile.options.auth || this.profile.options.auth === 'password') {",
          "179:         }",
          "180:         if (!this.profile.options.auth || this.profile.options.auth === 'keyboardInteractive') {",
          "181:             this.remainingAuthMethods.push({ type: 'keyboard-interactive' })",
          "182:         }",
          "183:         this.remainingAuthMethods.push({ type: 'hostbased' })",
          "184:     }",
          "186:     async openSFTP (): Promise<SFTPSession> {",
          "187:         if (!this.sftp) {",
          "189:         }",
          "190:         return new SFTPSession(this.sftp, this.injector)",
          "191:     }",
          "194:     async start (): Promise<void> {",
          "199:         await this.init()",
          "202:         const algorithms = {}",
          "203:         for (const key of Object.values(SSHAlgorithmType)) {",
          "204:             algorithms[key] = this.profile.options.algorithms![key].filter(x => supportedAlgorithms[key].includes(x))",
          "205:         }",
          "260:                 }",
          "268:         })",
          "278:             }",
          "296:             }",
          "316:             }",
          "344:         }",
          "349:         for (const fw of this.profile.options.forwardedPorts ?? []) {",
          "350:             this.addPortForward(Object.assign(new ForwardedPort(), fw))",
          "",
          "[Removed Lines]",
          "171:             if (!this.agentPath) {",
          "172:                 this.emitServiceMessage(colors.bgYellow.yellow.black(' ! ') + ` Agent auth selected, but no running agent is detected`)",
          "174:                 this.remainingAuthMethods.push({ type: 'agent' })",
          "178:             this.remainingAuthMethods.push({ type: 'password' })",
          "188:             this.sftp = await wrapPromise(this.zone, promisify<SFTPWrapper>(f => this.ssh.sftp(f))())",
          "195:         const log = (s: any) => this.emitServiceMessage(s)",
          "197:         const ssh = new Client()",
          "198:         this.ssh = ssh",
          "201:         let connected = false",
          "207:         const hostVerifiedPromise: Promise<void> = new Promise((resolve, reject) => {",
          "208:             ssh.on('handshake', async handshake => {",
          "209:                 if (!await this.verifyHostKey(handshake)) {",
          "210:                     this.ssh.end()",
          "211:                     reject(new Error('Host key verification failed'))",
          "212:                 }",
          "213:                 this.logger.info('Handshake complete:', handshake)",
          "214:                 resolve()",
          "215:             })",
          "216:         })",
          "218:         const resultPromise: Promise<void> = new Promise(async (resolve, reject) => {",
          "219:             ssh.on('ready', () => {",
          "220:                 connected = true",
          "222:                 ssh.setNoDelay(true)",
          "223:                 if (this.savedPassword) {",
          "224:                     this.passwordStorage.savePassword(this.profile, this.savedPassword)",
          "225:                 }",
          "227:                 this.zone.run(resolve)",
          "228:             })",
          "229:             ssh.on('error', error => {",
          "230:                 if (error.message === 'All configured authentication methods failed') {",
          "231:                     this.passwordStorage.deletePassword(this.profile)",
          "232:                 }",
          "233:                 this.zone.run(() => {",
          "234:                     if (connected) {",
          "236:                         this.notifications.error(error.toString())",
          "237:                     } else {",
          "238:                         reject(error)",
          "239:                     }",
          "240:                 })",
          "241:             })",
          "242:             ssh.on('close', () => {",
          "243:                 if (this.open) {",
          "244:                     this.destroy()",
          "245:                 }",
          "246:             })",
          "248:             ssh.on('keyboard-interactive', (name, instructions, instructionsLang, prompts, finish) => this.zone.run(async () => {",
          "249:                 this.emitKeyboardInteractivePrompt(new KeyboardInteractivePrompt(",
          "250:                     name,",
          "251:                     instructions,",
          "252:                     prompts,",
          "253:                     finish,",
          "254:                 ))",
          "255:             }))",
          "257:             ssh.on('greeting', greeting => {",
          "258:                 if (!this.profile.options.skipBanner) {",
          "259:                     log('Greeting: ' + greeting)",
          "261:             })",
          "263:             ssh.on('banner', banner => {",
          "264:                 if (!this.profile.options.skipBanner) {",
          "265:                     log(banner)",
          "266:                 }",
          "267:             })",
          "270:         try {",
          "271:             if (this.profile.options.socksProxyHost) {",
          "272:                 this.emitServiceMessage(colors.bgBlue.black(' Proxy ') + ` Using ${this.profile.options.socksProxyHost}:${this.profile.options.socksProxyPort}`)",
          "273:                 this.proxyCommandStream = new SocksProxyStream(this.profile)",
          "274:             }",
          "275:             if (this.profile.options.httpProxyHost) {",
          "276:                 this.emitServiceMessage(colors.bgBlue.black(' Proxy ') + ` Using ${this.profile.options.httpProxyHost}:${this.profile.options.httpProxyPort}`)",
          "277:                 this.proxyCommandStream = new HTTPProxyStream(this.profile)",
          "279:             if (this.profile.options.proxyCommand) {",
          "280:                 this.emitServiceMessage(colors.bgBlue.black(' Proxy command ') + ` Using ${this.profile.options.proxyCommand}`)",
          "281:                 this.proxyCommandStream = new ProxyCommandStream(this.profile.options.proxyCommand)",
          "282:             }",
          "283:             if (this.proxyCommandStream) {",
          "284:                 this.proxyCommandStream.destroyed$.subscribe(err => {",
          "285:                     if (err) {",
          "286:                         this.emitServiceMessage(colors.bgRed.black(' X ') + ` ${err.message}`)",
          "287:                         this.destroy()",
          "288:                     }",
          "289:                 })",
          "291:                 this.proxyCommandStream.message$.subscribe(message => {",
          "292:                     this.emitServiceMessage(colors.bgBlue.black(' Proxy ') + ' ' + message.trim())",
          "293:                 })",
          "295:                 await this.proxyCommandStream.start()",
          "298:             this.authUsername ??= this.profile.options.user",
          "299:             if (!this.authUsername) {",
          "300:                 const modal = this.ngbModal.open(PromptModalComponent)",
          "301:                 modal.componentInstance.prompt = `Username for ${this.profile.options.host}`",
          "302:                 try {",
          "303:                     const result = await modal.result.catch(() => null)",
          "304:                     this.authUsername = result?.value ?? null",
          "305:                 } catch {",
          "306:                     this.authUsername = 'root'",
          "307:                 }",
          "308:             }",
          "309:             if (this.authUsername?.startsWith('$')) {",
          "310:                 try {",
          "311:                     const result = process.env[this.authUsername.slice(1)]",
          "312:                     this.authUsername = result ?? this.authUsername",
          "313:                 } catch {",
          "314:                     this.authUsername = 'root'",
          "315:                 }",
          "318:             ssh.connect({",
          "319:                 host: this.profile.options.host.trim(),",
          "320:                 port: this.profile.options.port ?? 22,",
          "321:                 sock: this.proxyCommandStream?.socket ?? this.jumpStream,",
          "322:                 username: this.authUsername ?? undefined,",
          "323:                 tryKeyboard: true,",
          "324:                 agent: this.agentPath,",
          "325:                 agentForward: this.profile.options.agentForward && !!this.agentPath,",
          "326:                 keepaliveInterval: this.profile.options.keepaliveInterval ?? 15000,",
          "327:                 keepaliveCountMax: this.profile.options.keepaliveCountMax,",
          "328:                 readyTimeout: this.profile.options.readyTimeout,",
          "329:                 hostVerifier: (key: any) => {",
          "330:                     this.hostKeyDigest = crypto.createHash('sha256').update(key).digest('base64')",
          "331:                     return true",
          "332:                 },",
          "333:                 algorithms,",
          "334:                 authHandler: (methodsLeft, partialSuccess, callback) => {",
          "335:                     this.zone.run(async () => {",
          "336:                         await hostVerifiedPromise",
          "337:                         callback(await this.handleAuth(methodsLeft))",
          "338:                     })",
          "339:                 },",
          "340:             })",
          "341:         } catch (e) {",
          "342:             this.notifications.error(e.message)",
          "343:             throw e",
          "346:         await resultPromise",
          "347:         await hostVerifiedPromise",
          "",
          "[Added Lines]",
          "169:             const spec = await this.getAgentConnectionSpec()",
          "170:             if (!spec) {",
          "171:                 this.emitServiceMessage(colors.bgYellow.yellow.black(' ! ') + ` Agent auth selected, but no running Agent process is found`)",
          "173:                 this.remainingAuthMethods.push({",
          "174:                     type: 'agent',",
          "175:                     ...spec,",
          "176:                 })",
          "180:             if (this.profile.options.password) {",
          "181:                 this.remainingAuthMethods.push({ type: 'saved-password', password: this.profile.options.password })",
          "182:             }",
          "183:             const password = await this.passwordStorage.loadPassword(this.profile)",
          "184:             if (password) {",
          "185:                 this.remainingAuthMethods.push({ type: 'saved-password', password })",
          "186:             }",
          "187:             this.remainingAuthMethods.push({ type: 'prompt-password' })",
          "190:             const savedPassword = this.profile.options.password ?? await this.passwordStorage.loadPassword(this.profile)",
          "191:             if (savedPassword) {",
          "192:                 this.remainingAuthMethods.push({ type: 'keyboard-interactive', savedPassword })",
          "193:             }",
          "199:     private async getAgentConnectionSpec (): Promise<russh.AgentConnectionSpec|null> {",
          "200:         if (this.hostApp.platform === Platform.Windows) {",
          "201:             if (this.config.store.ssh.agentType === 'auto') {",
          "202:                 if (await fs.exists(WINDOWS_OPENSSH_AGENT_PIPE)) {",
          "203:                     return {",
          "204:                         kind: 'named-pipe',",
          "205:                         path: WINDOWS_OPENSSH_AGENT_PIPE,",
          "206:                     }",
          "207:                 } else if (russh.isPageantRunning()) {",
          "208:                     return {",
          "209:                         kind: 'pageant',",
          "210:                     }",
          "211:                 } else {",
          "212:                     this.emitServiceMessage(colors.bgYellow.yellow.black(' ! ') + ` Agent auth selected, but no running Agent process is found`)",
          "213:                 }",
          "214:             } else if (this.config.store.ssh.agentType === 'pageant') {",
          "215:                 return {",
          "216:                     kind: 'pageant',",
          "217:                 }",
          "218:             } else {",
          "219:                 return {",
          "220:                     kind: 'named-pipe',",
          "221:                     path: this.config.store.ssh.agentPath || WINDOWS_OPENSSH_AGENT_PIPE,",
          "222:                 }",
          "223:             }",
          "224:         } else {",
          "225:             return {",
          "226:                 kind: 'unix-socket',",
          "227:                 path: process.env.SSH_AUTH_SOCK!,",
          "228:             }",
          "229:         }",
          "230:         return null",
          "231:     }",
          "234:         if (!(this.ssh instanceof russh.AuthenticatedSSHClient)) {",
          "235:             throw new Error('Cannot open SFTP session before auth')",
          "236:         }",
          "238:             this.sftp = await this.ssh.openSFTPChannel()",
          "252:         let transport: russh.SshTransport",
          "253:         if (this.profile.options.proxyCommand) {",
          "254:             this.emitServiceMessage(colors.bgBlue.black(' Proxy command ') + ` Using ${this.profile.options.proxyCommand}`)",
          "256:             const argv = shellQuote.parse(this.profile.options.proxyCommand)",
          "257:             transport = await russh.SshTransport.newCommand(argv[0], argv.slice(1))",
          "258:         } else if (this.jumpChannel) {",
          "259:             transport = await russh.SshTransport.newSshChannel(await this.jumpChannel.take())",
          "260:             this.jumpChannel = null",
          "261:         } else if (this.profile.options.socksProxyHost) {",
          "262:             this.emitServiceMessage(colors.bgBlue.black(' Proxy ') + ` Using ${this.profile.options.socksProxyHost}:${this.profile.options.socksProxyPort}`)",
          "263:             transport = await russh.SshTransport.newSocksProxy(",
          "264:                 this.profile.options.socksProxyHost,",
          "265:                 this.profile.options.socksProxyPort ?? 1080,",
          "266:                 this.profile.options.host,",
          "267:                 this.profile.options.port ?? 22,",
          "268:             )",
          "269:         } else if (this.profile.options.httpProxyHost) {",
          "270:             this.emitServiceMessage(colors.bgBlue.black(' Proxy ') + ` Using ${this.profile.options.httpProxyHost}:${this.profile.options.httpProxyPort}`)",
          "271:             transport = await russh.SshTransport.newHttpProxy(",
          "272:                 this.profile.options.httpProxyHost,",
          "273:                 this.profile.options.httpProxyPort ?? 8080,",
          "274:                 this.profile.options.host,",
          "275:                 this.profile.options.port ?? 22,",
          "276:             )",
          "277:         } else {",
          "278:             transport = await russh.SshTransport.newSocket(`${this.profile.options.host.trim()}:${this.profile.options.port ?? 22}`)",
          "279:         }",
          "281:         this.ssh = await russh.SSHClient.connect(",
          "282:             transport,",
          "283:             async key => {",
          "284:                 if (!await this.verifyHostKey(key)) {",
          "285:                     return false",
          "287:                 this.logger.info('Host key verified')",
          "288:                 return true",
          "289:             },",
          "290:             {",
          "291:                 preferred: {",
          "292:                     ciphers: this.profile.options.algorithms?.[SSHAlgorithmType.CIPHER]?.filter(x => supportedAlgorithms[SSHAlgorithmType.CIPHER].includes(x)),",
          "293:                     kex: this.profile.options.algorithms?.[SSHAlgorithmType.KEX]?.filter(x => supportedAlgorithms[SSHAlgorithmType.KEX].includes(x)),",
          "294:                     mac: this.profile.options.algorithms?.[SSHAlgorithmType.HMAC]?.filter(x => supportedAlgorithms[SSHAlgorithmType.HMAC].includes(x)),",
          "295:                     key: this.profile.options.algorithms?.[SSHAlgorithmType.HOSTKEY]?.filter(x => supportedAlgorithms[SSHAlgorithmType.HOSTKEY].includes(x)),",
          "296:                 },",
          "297:                 keepaliveIntervalSeconds: Math.round((this.profile.options.keepaliveInterval ?? 15000) / 1000),",
          "298:                 keepaliveCountMax: this.profile.options.keepaliveCountMax,",
          "299:                 connectionTimeoutSeconds: this.profile.options.readyTimeout ? Math.round(this.profile.options.readyTimeout / 1000) : undefined,",
          "300:             },",
          "301:         )",
          "303:         this.ssh.banner$.subscribe(banner => {",
          "304:             if (!this.profile.options.skipBanner) {",
          "305:                 this.emitServiceMessage(banner)",
          "306:             }",
          "309:         this.ssh.disconnect$.subscribe(() => {",
          "310:             if (this.open) {",
          "311:                 this.destroy()",
          "313:         })",
          "317:         this.authUsername ??= this.profile.options.user",
          "318:         if (!this.authUsername) {",
          "319:             const modal = this.ngbModal.open(PromptModalComponent)",
          "320:             modal.componentInstance.prompt = `Username for ${this.profile.options.host}`",
          "321:             try {",
          "322:                 const result = await modal.result.catch(() => null)",
          "323:                 this.authUsername = result?.value ?? null",
          "324:             } catch {",
          "325:                 this.authUsername = 'root'",
          "327:         }",
          "329:         if (this.authUsername?.startsWith('$')) {",
          "330:             try {",
          "331:                 const result = process.env[this.authUsername.slice(1)]",
          "332:                 this.authUsername = result ?? this.authUsername",
          "333:             } catch {",
          "334:                 this.authUsername = 'root'",
          "336:         }",
          "338:         const authenticatedClient = await this.handleAuth()",
          "339:         if (authenticatedClient) {",
          "340:             this.ssh = authenticatedClient",
          "341:         } else {",
          "342:             this.ssh.disconnect()",
          "343:             this.passwordStorage.deletePassword(this.profile)",
          "345:             throw new Error('Authentication rejected')",
          "350:         if (this.savedPassword) {",
          "351:             this.passwordStorage.savePassword(this.profile, this.savedPassword)",
          "352:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "353:         this.open = true",
          "358:             if (!forward) {",
          "361:                 return",
          "362:             }",
          "363:             const socket = new Socket()",
          "",
          "[Removed Lines]",
          "355:         this.ssh.on('tcp connection', (details, accept, reject) => {",
          "356:             this.logger.info(`Incoming forwarded connection: (remote) ${details.srcIP}:${details.srcPort} -> (local) ${details.destIP}:${details.destPort}`)",
          "357:             const forward = this.forwardedPorts.find(x => x.port === details.destPort)",
          "359:                 this.emitServiceMessage(colors.bgRed.black(' X ') + ` Rejected incoming forwarded connection for unrecognized port ${details.destPort}`)",
          "360:                 reject()",
          "",
          "[Added Lines]",
          "360:         this.ssh.tcpChannelOpen$.subscribe(async event => {",
          "361:             this.logger.info(`Incoming forwarded connection: ${event.clientAddress}:${event.clientPort} -> ${event.targetAddress}:${event.targetPort}`)",
          "362:             const forward = this.forwardedPorts.find(x => x.port === event.targetPort && x.host === event.targetAddress)",
          "364:                 this.emitServiceMessage(colors.bgRed.black(' X ') + ` Rejected incoming forwarded connection for unrecognized port ${event.targetAddress}:${event.targetPort}`)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "365:             socket.on('error', e => {",
          "367:                 this.emitServiceMessage(colors.bgRed.black(' X ') + ` Could not forward the remote connection to ${forward.targetAddress}:${forward.targetPort}: ${e}`)",
          "369:             })",
          "370:             socket.on('connect', () => {",
          "371:                 this.logger.info('Connection forwarded')",
          "381:             })",
          "382:         })",
          "386:             const displaySpec = (this.config.store.ssh.x11Display || process.env.DISPLAY) ?? 'localhost:0'",
          "387:             this.logger.debug(`Trying display ${displaySpec}`)",
          "",
          "[Removed Lines]",
          "368:                 reject()",
          "372:                 const stream = accept()",
          "373:                 stream.pipe(socket)",
          "374:                 socket.pipe(stream)",
          "375:                 stream.on('close', () => {",
          "376:                     socket.destroy()",
          "377:                 })",
          "378:                 socket.on('close', () => {",
          "379:                     stream.close()",
          "380:                 })",
          "384:         this.ssh.on('x11', async (details, accept, reject) => {",
          "385:             this.logger.info(`Incoming X11 connection from ${details.srcIP}:${details.srcPort}`)",
          "",
          "[Added Lines]",
          "372:                 event.channel.close()",
          "374:             event.channel.data$.subscribe(data => socket.write(data))",
          "375:             socket.on('data', data => event.channel.write(Uint8Array.from(data)))",
          "376:             event.channel.closed$.subscribe(() => socket.destroy())",
          "377:             socket.on('close', () => event.channel.close())",
          "383:         this.ssh.x11ChannelOpen$.subscribe(async event => {",
          "384:             this.logger.info(`Incoming X11 connection from ${event.clientAddress}:${event.clientPort}`)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "390:             try {",
          "391:                 const x11Stream = await socket.connect(displaySpec)",
          "392:                 this.logger.info('Connection forwarded')",
          "397:                     socket.destroy()",
          "398:                 })",
          "399:                 x11Stream.on('close', () => {",
          "401:                 })",
          "402:             } catch (e) {",
          "",
          "[Removed Lines]",
          "393:                 const stream = accept()",
          "394:                 stream.pipe(x11Stream)",
          "395:                 x11Stream.pipe(stream)",
          "396:                 stream.on('close', () => {",
          "400:                     stream.close()",
          "",
          "[Added Lines]",
          "393:                 event.channel.data$.subscribe(data => {",
          "394:                     x11Stream.write(data)",
          "395:                 })",
          "396:                 x11Stream.on('data', data => {",
          "397:                     event.channel.write(Uint8Array.from(data))",
          "398:                 })",
          "399:                 event.channel.closed$.subscribe(() => {",
          "403:                     event.channel.close()",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "408:                     this.emitServiceMessage('    * VcXsrv: https://sourceforge.net/projects/vcxsrv/')",
          "409:                     this.emitServiceMessage('    * Xming: https://sourceforge.net/projects/xming/')",
          "410:                 }",
          "412:             }",
          "413:         })",
          "414:     }",
          "417:         this.emitServiceMessage('Host key fingerprint:')",
          "419:         if (!this.config.store.ssh.verifyHostKeys) {",
          "420:             return true",
          "421:         }",
          "422:         const selector = {",
          "423:             host: this.profile.options.host,",
          "424:             port: this.profile.options.port ?? 22,",
          "426:         }",
          "427:         const knownHost = this.knownHosts.getFor(selector)",
          "429:             const modal = this.ngbModal.open(HostKeyPromptModalComponent)",
          "430:             modal.componentInstance.selector = selector",
          "432:             return modal.result.catch(() => false)",
          "433:         }",
          "434:         return true",
          "",
          "[Removed Lines]",
          "411:                 reject()",
          "416:     private async verifyHostKey (handshake: Handshake): Promise<boolean> {",
          "418:         this.emitServiceMessage(colors.white.bgBlack(` ${handshake.serverHostKey} `) + colors.bgBlackBright(' ' + this.hostKeyDigest + ' '))",
          "425:             type: handshake.serverHostKey,",
          "428:         if (!knownHost || knownHost.digest !== this.hostKeyDigest) {",
          "431:             modal.componentInstance.digest = this.hostKeyDigest",
          "",
          "[Added Lines]",
          "414:                 event.channel.close()",
          "418:         this.ssh.agentChannelOpen$.subscribe(async channel => {",
          "419:             const spec = await this.getAgentConnectionSpec()",
          "420:             if (!spec) {",
          "421:                 await channel.close()",
          "422:                 return",
          "423:             }",
          "425:             const agent = await russh.SSHAgentStream.connect(spec)",
          "426:             channel.data$.subscribe(data => agent.write(data))",
          "427:             agent.data$.subscribe(data => channel.write(data), undefined, () => channel.close())",
          "428:             channel.closed$.subscribe(() => agent.close())",
          "429:         })",
          "432:     private async verifyHostKey (key: russh.SshPublicKey): Promise<boolean> {",
          "434:         this.emitServiceMessage(colors.white.bgBlack(` ${key.algorithm()} `) + colors.bgBlackBright(' ' + key.fingerprint() + ' '))",
          "441:             type: key.algorithm(),",
          "444:         const keyDigest = crypto.createHash('sha256').update(key.bytes()).digest('base64')",
          "447:         if (!knownHost || knownHost.digest !== keyDigest) {",
          "450:             modal.componentInstance.digest = keyDigest",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "450:         this.keyboardInteractivePrompt.next(prompt)",
          "451:     }",
          "454:         this.activePrivateKey = null",
          "456:         while (true) {",
          "457:             const method = this.remainingAuthMethods.shift()",
          "458:             if (!method) {",
          "460:             }",
          "461:             if (methodsLeft && !methodsLeft.includes(method.type) && method.type !== 'agent') {",
          "463:                 this.logger.info('Server does not support auth method', method.type)",
          "464:                 continue",
          "465:             }",
          "474:                 }",
          "489:                 const modal = this.ngbModal.open(PromptModalComponent)",
          "490:                 modal.componentInstance.prompt = `Password for ${this.authUsername}@${this.profile.options.host}`",
          "491:                 modal.componentInstance.password = true",
          "492:                 modal.componentInstance.showRememberCheckbox = true",
          "494:                 try {",
          "499:                         }",
          "504:                         }",
          "505:                     } else {",
          "506:                         continue",
          "",
          "[Removed Lines]",
          "453:     async handleAuth (methodsLeft?: string[] | null): Promise<any> {",
          "459:                 return false",
          "466:             if (method.type === 'password') {",
          "467:                 if (this.profile.options.password) {",
          "468:                     this.emitServiceMessage(this.translate.instant('Using preset password'))",
          "469:                     return {",
          "470:                         type: 'password',",
          "471:                         username: this.authUsername,",
          "472:                         password: this.profile.options.password,",
          "473:                     }",
          "476:                 if (!this.keychainPasswordUsed && this.profile.options.user) {",
          "477:                     const password = await this.passwordStorage.loadPassword(this.profile)",
          "478:                     if (password) {",
          "479:                         this.emitServiceMessage(this.translate.instant('Trying saved password'))",
          "480:                         this.keychainPasswordUsed = true",
          "481:                         return {",
          "482:                             type: 'password',",
          "483:                             username: this.authUsername,",
          "484:                             password,",
          "485:                         }",
          "486:                     }",
          "487:                 }",
          "495:                     const result = await modal.result.catch(() => null)",
          "496:                     if (result) {",
          "497:                         if (result.remember) {",
          "498:                             this.savedPassword = result.value",
          "500:                         return {",
          "501:                             type: 'password',",
          "502:                             username: this.authUsername,",
          "503:                             password: result.value,",
          "",
          "[Added Lines]",
          "472:     async handleAuth (methodsLeft?: string[] | null): Promise<russh.AuthenticatedSSHClient|null> {",
          "475:         if (!(this.ssh instanceof russh.SSHClient)) {",
          "476:             throw new Error('Wrong state for auth handling')",
          "477:         }",
          "479:         if (!this.authUsername) {",
          "480:             throw new Error('No username')",
          "481:         }",
          "486:                 return null",
          "493:             if (method.type === 'saved-password') {",
          "494:                 this.emitServiceMessage(this.translate.instant('Using saved password'))",
          "495:                 const result = await this.ssh.authenticateWithPassword(this.authUsername, method.password)",
          "496:                 if (result) {",
          "497:                     return result",
          "499:             }",
          "500:             if (method.type === 'prompt-password') {",
          "507:                     const promptResult = await modal.result.catch(() => null)",
          "508:                     if (promptResult) {",
          "509:                         if (promptResult.remember) {",
          "510:                             this.savedPassword = promptResult.value",
          "512:                         const result = await this.ssh.authenticateWithPassword(this.authUsername, promptResult.value)",
          "513:                         if (result) {",
          "514:                             return result",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "509:                     continue",
          "510:                 }",
          "511:             }",
          "513:                 try {",
          "519:                     }",
          "520:                 } catch (e) {",
          "521:                     this.emitServiceMessage(colors.bgYellow.yellow.black(' ! ') + ` Failed to load private key ${method.name}: ${e}`)",
          "522:                     continue",
          "523:                 }",
          "524:             }",
          "526:         }",
          "527:     }",
          "529:     async addPortForward (fw: ForwardedPort): Promise<void> {",
          "530:         if (fw.type === PortForwardType.Local || fw.type === PortForwardType.Dynamic) {",
          "532:                 this.logger.info(`New connection on ${fw}`)",
          "556:             }).then(() => {",
          "557:                 this.emitServiceMessage(colors.bgGreen.black(' -> ') + ` Forwarded ${fw}`)",
          "558:                 this.forwardedPorts.push(fw)",
          "",
          "[Removed Lines]",
          "512:             if (method.type === 'publickey' && method.contents) {",
          "514:                     const key = await this.loadPrivateKey(method.name!, method.contents)",
          "515:                     return {",
          "516:                         type: 'publickey',",
          "517:                         username: this.authUsername,",
          "518:                         key,",
          "525:             return method.type",
          "531:             await fw.startLocalListener((accept, reject, sourceAddress, sourcePort, targetAddress, targetPort) => {",
          "533:                 this.ssh.forwardOut(",
          "534:                     sourceAddress ?? '127.0.0.1',",
          "535:                     sourcePort ?? 0,",
          "536:                     targetAddress,",
          "537:                     targetPort,",
          "538:                     (err, stream) => {",
          "539:                         if (err) {",
          "541:                             this.emitServiceMessage(colors.bgRed.black(' X ') + ` Remote has rejected the forwarded connection to ${targetAddress}:${targetPort} via ${fw}: ${err}`)",
          "542:                             reject()",
          "543:                             return",
          "544:                         }",
          "545:                         const socket = accept()",
          "546:                         stream.pipe(socket)",
          "547:                         socket.pipe(stream)",
          "548:                         stream.on('close', () => {",
          "549:                             socket.destroy()",
          "550:                         })",
          "551:                         socket.on('close', () => {",
          "552:                             stream.close()",
          "553:                         })",
          "554:                     },",
          "555:                 )",
          "",
          "[Added Lines]",
          "523:             if (method.type === 'publickey') {",
          "525:                     const key = await this.loadPrivateKey(method.name, method.contents)",
          "526:                     const result = await this.ssh.authenticateWithKeyPair(this.authUsername, key)",
          "527:                     if (result) {",
          "528:                         return result",
          "535:             if (method.type === 'keyboard-interactive') {",
          "536:                 let state: russh.AuthenticatedSSHClient|russh.KeyboardInteractiveAuthenticationState = await this.ssh.startKeyboardInteractiveAuthentication(this.authUsername)",
          "538:                 while (true) {",
          "539:                     if (state.state === 'failure') {",
          "540:                         break",
          "541:                     }",
          "543:                     const prompts = state.prompts()",
          "545:                     let responses: string[] = []",
          "548:                     if (prompts.length > 0) {",
          "549:                         const prompt = new KeyboardInteractivePrompt(",
          "550:                             state.name,",
          "551:                             state.instructions,",
          "552:                             state.prompts(),",
          "553:                         )",
          "555:                         if (method.savedPassword) {",
          "557:                             for (let i = 0; i < prompt.prompts.length; i++) {",
          "559:                                 if (prompt.isAPasswordPrompt(i)) {",
          "560:                                     prompt.responses[i] = method.savedPassword",
          "561:                                 }",
          "562:                             }",
          "563:                         }",
          "565:                         this.emitKeyboardInteractivePrompt(prompt)",
          "567:                         try {",
          "569:                             responses = await prompt.promise",
          "570:                         } catch {",
          "571:                             break // this loop",
          "572:                         }",
          "573:                     }",
          "575:                     state = await this.ssh .continueKeyboardInteractiveAuthentication(responses)",
          "577:                     if (state instanceof russh.AuthenticatedSSHClient) {",
          "578:                         return state",
          "579:                     }",
          "580:                 }",
          "581:             }",
          "582:             if (method.type === 'agent') {",
          "583:                 try {",
          "584:                     const result = await this.ssh.authenticateWithAgent(this.authUsername, method)",
          "585:                     if (result) {",
          "586:                         return result",
          "587:                     }",
          "588:                 } catch (e) {",
          "589:                     this.emitServiceMessage(colors.bgYellow.yellow.black(' ! ') + ` Failed to authenticate using agent: ${e}`)",
          "590:                     continue",
          "591:                 }",
          "592:             }",
          "594:         return null",
          "599:             await fw.startLocalListener(async (accept, reject, sourceAddress, sourcePort, targetAddress, targetPort) => {",
          "601:                 if (!(this.ssh instanceof russh.AuthenticatedSSHClient)) {",
          "602:                     this.logger.error(`Connection while unauthenticated on ${fw}`)",
          "603:                     reject()",
          "604:                     return",
          "605:                 }",
          "606:                 const channel = await this.ssh.openTCPForwardChannel({",
          "607:                     addressToConnectTo: targetAddress,",
          "608:                     portToConnectTo: targetPort,",
          "609:                     originatorAddress: sourceAddress ?? '127.0.0.1',",
          "610:                     originatorPort: sourcePort ?? 0,",
          "611:                 }).catch(err => {",
          "612:                     this.emitServiceMessage(colors.bgRed.black(' X ') + ` Remote has rejected the forwarded connection to ${targetAddress}:${targetPort} via ${fw}: ${err}`)",
          "613:                     reject()",
          "614:                     throw err",
          "615:                 })",
          "616:                 const socket = accept()",
          "617:                 channel.data$.subscribe(data => socket.write(data))",
          "618:                 socket.on('data', data => channel.write(Uint8Array.from(data)))",
          "619:                 channel.closed$.subscribe(() => socket.destroy())",
          "620:                 socket.on('close', () => channel.close())",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "562:             })",
          "563:         }",
          "564:         if (fw.type === PortForwardType.Remote) {",
          "576:             this.emitServiceMessage(colors.bgGreen.black(' <- ') + ` Forwarded ${fw}`)",
          "577:             this.forwardedPorts.push(fw)",
          "578:         }",
          "",
          "[Removed Lines]",
          "565:             await new Promise<void>((resolve, reject) => {",
          "566:                 this.ssh.forwardIn(fw.host, fw.port, err => {",
          "567:                     if (err) {",
          "569:                         this.emitServiceMessage(colors.bgRed.black(' X ') + ` Remote rejected port forwarding for ${fw}: ${err}`)",
          "570:                         reject(err)",
          "571:                         return",
          "572:                     }",
          "573:                     resolve()",
          "574:                 })",
          "575:             })",
          "",
          "[Added Lines]",
          "630:             if (!(this.ssh instanceof russh.AuthenticatedSSHClient)) {",
          "631:                 throw new Error('Cannot add remote port forward before auth')",
          "632:             }",
          "633:             try {",
          "634:                 await this.ssh.forwardTCPPort(fw.host, fw.port)",
          "635:             } catch (err) {",
          "637:                 this.emitServiceMessage(colors.bgRed.black(' X ') + ` Remote rejected port forwarding for ${fw}: ${err}`)",
          "638:                 return",
          "639:             }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "584:             this.forwardedPorts = this.forwardedPorts.filter(x => x !== fw)",
          "585:         }",
          "586:         if (fw.type === PortForwardType.Remote) {",
          "588:             this.forwardedPorts = this.forwardedPorts.filter(x => x !== fw)",
          "589:         }",
          "590:         this.emitServiceMessage(`Stopped forwarding ${fw}`)",
          "",
          "[Removed Lines]",
          "587:             this.ssh.unforwardIn(fw.host, fw.port)",
          "",
          "[Added Lines]",
          "651:             if (!(this.ssh instanceof russh.AuthenticatedSSHClient)) {",
          "652:                 throw new Error('Cannot remove remote port forward before auth')",
          "653:             }",
          "654:             this.ssh.stopForwardingTCPPort(fw.host, fw.port)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "595:         this.willDestroy.next()",
          "596:         this.willDestroy.complete()",
          "597:         this.serviceMessage.complete()",
          "600:     }",
          "611:         })",
          "612:     }",
          "615:         this.emitServiceMessage(`Loading private key: ${name}`)",
          "618:         return this.activePrivateKey",
          "619:     }",
          "622:         const keyHash = crypto.createHash('sha512').update(privateKey).digest('hex')",
          "623:         let triedSavedPassphrase = false",
          "624:         let passphrase: string|null = null",
          "625:         while (true) {",
          "626:             try {",
          "628:             } catch (e) {",
          "629:                 if (!triedSavedPassphrase) {",
          "630:                     passphrase = await this.passwordStorage.loadPrivateKeyPassword(keyHash)",
          "631:                     triedSavedPassphrase = true",
          "632:                     continue",
          "633:                 }",
          "635:                     await this.passwordStorage.deletePrivateKeyPassword(keyHash)",
          "637:                     const modal = this.ngbModal.open(PromptModalComponent)",
          "",
          "[Removed Lines]",
          "598:         this.proxyCommandStream?.stop()",
          "599:         this.ssh.end()",
          "602:     openShellChannel (options: { x11: boolean }): Promise<ClientChannel> {",
          "603:         return new Promise<ClientChannel>((resolve, reject) => {",
          "604:             this.ssh.shell({ term: 'xterm-256color' }, options, (err, shell) => {",
          "605:                 if (err) {",
          "606:                     reject(err)",
          "607:                 } else {",
          "608:                     resolve(shell)",
          "609:                 }",
          "610:             })",
          "614:     async loadPrivateKey (name: string, privateKeyContents: Buffer): Promise<string|null> {",
          "616:         const parsedKey = await this.parsePrivateKey(privateKeyContents.toString())",
          "617:         this.activePrivateKey = parsedKey.toString('openssh')",
          "621:     async parsePrivateKey (privateKey: string): Promise<any> {",
          "627:                 return sshpk.parsePrivateKey(privateKey, 'auto', { passphrase })",
          "634:                 if (e instanceof sshpk.KeyEncryptedError || e instanceof sshpk.KeyParseError) {",
          "",
          "[Added Lines]",
          "665:         this.ssh.disconnect()",
          "668:     async openShellChannel (options: { x11: boolean }): Promise<russh.Channel> {",
          "669:         if (!(this.ssh instanceof russh.AuthenticatedSSHClient)) {",
          "670:             throw new Error('Cannot open shell channel before auth')",
          "671:         }",
          "672:         const ch = await this.ssh.openSessionChannel()",
          "673:         await ch.requestPTY('xterm-256color', {",
          "674:             columns: 80,",
          "675:             rows: 24,",
          "676:             pixHeight: 0,",
          "677:             pixWidth: 0,",
          "679:         if (options.x11) {",
          "680:             await ch.requestX11Forwarding({",
          "681:                 singleConnection: false,",
          "682:                 authProtocol: 'MIT-MAGIC-COOKIE-1',",
          "683:                 authCookie: crypto.randomBytes(16).toString('hex'),",
          "684:                 screenNumber: 0,",
          "685:             })",
          "686:         }",
          "687:         if (this.profile.options.agentForward) {",
          "688:             await ch.requestAgentForwarding()",
          "689:         }",
          "690:         await ch.requestShell()",
          "691:         return ch",
          "694:     async loadPrivateKey (name: string, privateKeyContents: Buffer): Promise<russh.KeyPair> {",
          "696:         this.activePrivateKey = await this.loadPrivateKeyWithPassphraseMaybe(privateKeyContents.toString())",
          "700:     async loadPrivateKeyWithPassphraseMaybe (privateKey: string): Promise<russh.KeyPair> {",
          "706:                 return await russh.KeyPair.parse(privateKey, passphrase ?? undefined)",
          "713:                 if (e.toString() === 'Error: Keys(KeyIsEncrypted)' || e.toString() === 'Error: Keys(SshKey(Crypto))') {",
          "",
          "---------------"
        ],
        "tabby-ssh/webpack.config.mjs||tabby-ssh/webpack.config.mjs": [
          "File: tabby-ssh/webpack.config.mjs -> tabby-ssh/webpack.config.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: export default () => config({",
          "8:     name: 'ssh',",
          "9:     dirname: __dirname,",
          "15: })",
          "",
          "[Removed Lines]",
          "10:     alias: {",
          "11:         'cpu-features': false,",
          "12:         './crypto/build/Release/sshcrypto.node': false,",
          "13:         '../build/Release/cpufeatures.node': false,",
          "14:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tabby-ssh/yarn.lock||tabby-ssh/yarn.lock": [
          "File: tabby-ssh/yarn.lock -> tabby-ssh/yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:   dependencies:",
          "10:     ipv6 \"*\"",
          "19: \"@types/node@20.3.1\":",
          "20:   version \"20.3.1\"",
          "21:   resolved \"https://registry.yarnpkg.com/@types/node/-/node-20.3.1.tgz#e8a83f1aa8b649377bb1fb5d7bac5cb90e784dfe\"",
          "22:   integrity sha512-EhcH/wvidPy1WeML3TtYFGR83UzjxeWRen9V402T8aUGYsCHOmfoisV3ZSg03gAFIbLq8TnWOJ0f4cALtnSEUg==",
          "39: ansi-colors@^4.1.1:",
          "40:   version \"4.1.3\"",
          "41:   resolved \"https://registry.yarnpkg.com/ansi-colors/-/ansi-colors-4.1.3.tgz#37611340eb2243e70cc604cad35d63270d48781b\"",
          "",
          "[Removed Lines]",
          "12: \"@types/node@*\":",
          "13:   version \"22.1.0\"",
          "14:   resolved \"https://registry.yarnpkg.com/@types/node/-/node-22.1.0.tgz#6d6adc648b5e03f0e83c78dc788c2b037d0ad94b\"",
          "15:   integrity sha512-AOmuRF0R2/5j1knA3c6G3HOk523Ga+l+ZXltX8SF1+5oqcXijjfTd8fY3XRZqSihEu9XhtQnKYLmkFaoxgsJHw==",
          "16:   dependencies:",
          "17:     undici-types \"~6.13.0\"",
          "24: \"@types/ssh2-streams@*\":",
          "25:   version \"0.1.12\"",
          "26:   resolved \"https://registry.yarnpkg.com/@types/ssh2-streams/-/ssh2-streams-0.1.12.tgz#e68795ba2bf01c76b93f9c9809e1f42f0eaaec5f\"",
          "27:   integrity sha512-Sy8tpEmCce4Tq0oSOYdfqaBpA3hDM8SoxoFh5vzFsu2oL+znzGz8oVWW7xb4K920yYMUY+PIG31qZnFMfPWNCg==",
          "28:   dependencies:",
          "29:     \"@types/node\" \"*\"",
          "31: \"@types/ssh2@^0.5.46\":",
          "32:   version \"0.5.52\"",
          "33:   resolved \"https://registry.yarnpkg.com/@types/ssh2/-/ssh2-0.5.52.tgz#9dbd8084e2a976e551d5e5e70b978ed8b5965741\"",
          "34:   integrity sha512-lbLLlXxdCZOSJMCInKH2+9V/77ET2J6NPQHpFI0kda61Dd1KglJs+fPQBchizmzYSOJBgdTajhPqBO1xxLywvg==",
          "35:   dependencies:",
          "36:     \"@types/node\" \"*\"",
          "37:     \"@types/ssh2-streams\" \"*\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   resolved \"https://registry.yarnpkg.com/ansi-regex/-/ansi-regex-6.0.1.tgz#3183e38fae9a65d7cb5e53945cd5897d0260a06a\"",
          "47:   integrity sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
          "61: async@0.2.x:",
          "62:   version \"0.2.10\"",
          "63:   resolved \"https://registry.yarnpkg.com/async/-/async-0.2.10.tgz#b6bbe0b0674b9d719708ca38de8c237cb526c3d1\"",
          "66: balanced-match@^1.0.0:",
          "67:   version \"1.0.0\"",
          "68:   resolved \"https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.0.tgz#89b4d199ab2bee49de164ea02b89ce462d71b767\"",
          "69:   integrity sha1-ibTRmasr7kneFk6gK4nORi1xt2c=",
          "83: brace-expansion@^1.1.7:",
          "84:   version \"1.1.11\"",
          "85:   resolved \"https://registry.yarnpkg.com/brace-expansion/-/brace-expansion-1.1.11.tgz#3c7fcbf529d87226f3d2f52b966ff5271eb441dd\"",
          "",
          "[Removed Lines]",
          "49: asn1@~0.2.3:",
          "50:   version \"0.2.4\"",
          "51:   resolved \"https://registry.yarnpkg.com/asn1/-/asn1-0.2.4.tgz#8d2475dfab553bb33e77b54e59e880bb8ce23136\"",
          "52:   integrity sha512-jxwzQpLQjSmWXgwaCZE9Nz+glAG01yF1QnWgbhGwHI5A6FRIEY6IVqtHhIepHqI7/kyEyQEagBC5mBEFlIYvdg==",
          "53:   dependencies:",
          "54:     safer-buffer \"~2.1.0\"",
          "56: assert-plus@^1.0.0:",
          "57:   version \"1.0.0\"",
          "58:   resolved \"https://registry.yarnpkg.com/assert-plus/-/assert-plus-1.0.0.tgz#f12e0f3c5d77b0b1cdd9146942e4e96c1e4dd525\"",
          "59:   integrity sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=",
          "64:   integrity sha1-trvgsGdLnXGXCMo43owjfLUmw9E=",
          "71: bcrypt-pbkdf@^1.0.0:",
          "72:   version \"1.0.2\"",
          "73:   resolved \"https://registry.yarnpkg.com/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz#a4301d389b6a43f9b67ff3ca11a3f6637e360e9e\"",
          "74:   integrity sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=",
          "75:   dependencies:",
          "76:     tweetnacl \"^0.14.3\"",
          "78: bn.js@^4.0.0, bn.js@^4.1.0:",
          "79:   version \"4.12.0\"",
          "80:   resolved \"https://registry.yarnpkg.com/bn.js/-/bn.js-4.12.0.tgz#775b3f278efbb9718eec7361f483fb36fbbfea88\"",
          "81:   integrity sha512-c98Bf3tPniI+scsdk237ku1Dc3ujXQTSgyiPUDEOe7tRkhrqridvh8klBv0HCEso1OLOYcHuCv/cS6DNxKH+ZA==",
          "",
          "[Added Lines]",
          "30:   integrity sha512-eAkdoKxU6/LkKDBzLpT+t6Ff5EtfSF4wx1WfJiPEEV7WNLnDaRXk0oVysiEPm262roaachGexwUv94WhSgN5TQ==",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:     balanced-match \"^1.0.0\"",
          "89:     concat-map \"0.0.1\"",
          "96: cli@0.4.x:",
          "97:   version \"0.4.5\"",
          "98:   resolved \"https://registry.yarnpkg.com/cli/-/cli-0.4.5.tgz#78f9485cd161b566e9a6c72d7170c4270e81db61\"",
          "100:   dependencies:",
          "101:     glob \">= 3.1.4\"",
          "103: cliff@0.1.x:",
          "104:   version \"0.1.10\"",
          "105:   resolved \"https://registry.yarnpkg.com/cliff/-/cliff-0.1.10.tgz#53be33ea9f59bec85609ee300ac4207603e52013\"",
          "107:   dependencies:",
          "108:     colors \"~1.0.3\"",
          "109:     eyes \"~0.1.8\"",
          "",
          "[Removed Lines]",
          "91: brorand@^1.0.1:",
          "92:   version \"1.1.0\"",
          "93:   resolved \"https://registry.yarnpkg.com/brorand/-/brorand-1.1.0.tgz#12c25efe40a45e3c323eb8675a0a0ce57b22371f\"",
          "94:   integrity sha512-cKV8tMCEpQs4hK/ik71d6LrPOnpkpGBR0wzxqr68g2m/LB2GxVYQroAjMJZRVM1Y4BCjCKc3vAamxSzOY2RP+w==",
          "99:   integrity sha1-ePlIXNFhtWbppsctcXDEJw6B22E=",
          "106:   integrity sha1-U74z6p9ZvshWCe4wCsQgdgPlIBM=",
          "",
          "[Added Lines]",
          "48:   integrity sha512-dbn5HyeJWSOU58RwOEiF1VWrl7HRvDsKLpu0uiI/vExH6iNoyUzjB5Mr3IJY5DVUfnbpe9793xw4DFJVzC9nWQ==",
          "55:   integrity sha512-roZWcC2Cxo/kKjRXw7YUpVNtxJccbvcl7VzTjUYgLQk6Ot0R8bm2netbhSZYWWNrKlOO/7HD6GXHl8dtzE6SiQ==",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112: colors@0.6.x:",
          "113:   version \"0.6.2\"",
          "114:   resolved \"https://registry.yarnpkg.com/colors/-/colors-0.6.2.tgz#2423fe6678ac0c5dae8852e5d0e5be08c997abcc\"",
          "117: colors@~1.0.3:",
          "118:   version \"1.0.3\"",
          "119:   resolved \"https://registry.yarnpkg.com/colors/-/colors-1.0.3.tgz#0433f44d809680fdeb60ed260f1b0c262e82a40b\"",
          "122: concat-map@0.0.1:",
          "123:   version \"0.0.1\"",
          "",
          "[Removed Lines]",
          "115:   integrity sha1-JCP+ZnisDF2uiFLl0OW+CMmXq8w=",
          "120:   integrity sha1-BDP0TYCWgP3rYO0mDxsMJi6CpAs=",
          "",
          "[Added Lines]",
          "64:   integrity sha512-OsSVtHK8Ir8r3+Fxw/b4jS1ZLPXkV6ZxDRJQzeD7qo0SqMXWrHDM71DgYzPMHY8SFJ0Ao+nNU2p1MmwdzKqPrw==",
          "69:   integrity sha512-pFGrxThWcWQ2MsAz6RtgeWe4NK2kUE1WfsrvvlctdII745EW9I0yflqhe7++M5LEc7bV2c/9/5zc8sFcpL0Drw==",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127: cycle@1.0.x:",
          "128:   version \"1.0.3\"",
          "129:   resolved \"https://registry.yarnpkg.com/cycle/-/cycle-1.0.3.tgz#21e80b2be8580f98b468f379430662b046c34ad2\"",
          "156: eyes@0.1.x, eyes@~0.1.8:",
          "157:   version \"0.1.8\"",
          "158:   resolved \"https://registry.yarnpkg.com/eyes/-/eyes-0.1.8.tgz#62cf120234c683785d902348a800ef3e0cc20bc0\"",
          "161: fs.realpath@^1.0.0:",
          "162:   version \"1.0.0\"",
          "163:   resolved \"https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f\"",
          "164:   integrity sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
          "186:   version \"7.2.3\"",
          "187:   resolved \"https://registry.yarnpkg.com/glob/-/glob-7.2.3.tgz#b8df0fb802bbfa8e89bd1d938b4e16578ed44f2b\"",
          "188:   integrity sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
          "",
          "[Removed Lines]",
          "130:   integrity sha1-IegLK+hYD5i0aPN5QwZisEbDStI=",
          "132: dashdash@^1.12.0:",
          "133:   version \"1.14.1\"",
          "134:   resolved \"https://registry.yarnpkg.com/dashdash/-/dashdash-1.14.1.tgz#853cfa0f7cbe2fed5de20326b8dd581035f6e2f0\"",
          "135:   integrity sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
          "136:   dependencies:",
          "137:     assert-plus \"^1.0.0\"",
          "139: diffie-hellman@^5.0.3:",
          "140:   version \"5.0.3\"",
          "141:   resolved \"https://registry.yarnpkg.com/diffie-hellman/-/diffie-hellman-5.0.3.tgz#40e8ee98f55a2149607146921c63e1ae5f3d2875\"",
          "142:   integrity sha512-kqag/Nl+f3GwyK25fhUMYj81BUOrZ9IuJsjIcDE5icNM9FJHAVm3VcUDxdLPoQtTuUylWm6ZIknYJwwaPxsUzg==",
          "143:   dependencies:",
          "144:     bn.js \"^4.1.0\"",
          "145:     miller-rabin \"^4.0.0\"",
          "146:     randombytes \"^2.0.0\"",
          "148: ecc-jsbn@~0.1.1:",
          "149:   version \"0.1.2\"",
          "150:   resolved \"https://registry.yarnpkg.com/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz#3a83a904e54353287874c564b7549386849a98c9\"",
          "151:   integrity sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=",
          "152:   dependencies:",
          "153:     jsbn \"~0.1.0\"",
          "154:     safer-buffer \"^2.1.0\"",
          "159:   integrity sha1-Ys8SAjTGg3hdkCNIqADvPgzCC8A=",
          "166: getpass@^0.1.1:",
          "167:   version \"0.1.7\"",
          "168:   resolved \"https://registry.yarnpkg.com/getpass/-/getpass-0.1.7.tgz#5eff8e3e684d569ae4cb2b1282604e8ba62149fa\"",
          "169:   integrity sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
          "170:   dependencies:",
          "171:     assert-plus \"^1.0.0\"",
          "173: \"glob@>= 3.1.4\":",
          "174:   version \"7.1.6\"",
          "175:   resolved \"https://registry.yarnpkg.com/glob/-/glob-7.1.6.tgz#141f33b81a7c2492e125594307480c46679278a6\"",
          "176:   integrity sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==",
          "177:   dependencies:",
          "178:     fs.realpath \"^1.0.0\"",
          "179:     inflight \"^1.0.4\"",
          "180:     inherits \"2\"",
          "181:     minimatch \"^3.0.4\"",
          "182:     once \"^1.3.0\"",
          "183:     path-is-absolute \"^1.0.0\"",
          "185: glob@^7.1.3:",
          "",
          "[Added Lines]",
          "79:   integrity sha512-TVF6svNzeQCOpjCqsy0/CSy8VgObG3wXusJ73xW2GbG5rGx7lC8zxDSURicsXI2UsGdi2L0QNRCi745/wUDvsA==",
          "84:   integrity sha512-GipyPsXO1anza0AOZdy69Im7hGFCNB7Y/NGjDlZGJ3GJJLtwNSb2vrzYrTYJRrRloVx7pl+bhUaTB8yiccPvFQ==",
          "91: glob@7.2.3, \"glob@>= 3.1.4\", glob@^7.1.3:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "210: ipv6@*:",
          "211:   version \"3.1.3\"",
          "212:   resolved \"https://registry.yarnpkg.com/ipv6/-/ipv6-3.1.3.tgz#4d9064f9c2dafa0dd10b8b7d76ffca4aad31b3b9\"",
          "214:   dependencies:",
          "215:     cli \"0.4.x\"",
          "216:     cliff \"0.1.x\"",
          "",
          "[Removed Lines]",
          "213:   integrity sha1-TZBk+cLa+g3RC4t9dv/KSq0xs7k=",
          "",
          "[Added Lines]",
          "119:   integrity sha512-TmLbUIURMAZ161GZDddTtAAb3aceRNLn7PRmP8fANp8xDRCW9oIQva8eenA48bRvw347jBqSREXMI38DybbUiQ==",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "219: isstream@0.1.x:",
          "220:   version \"0.1.2\"",
          "221:   resolved \"https://registry.yarnpkg.com/isstream/-/isstream-0.1.2.tgz#47e63f7af55afa6f92e1500e690eb8b8529c099a\"",
          "244: minimatch@^3.1.1:",
          "245:   version \"3.1.2\"",
          "",
          "[Removed Lines]",
          "222:   integrity sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=",
          "224: jsbn@~0.1.0:",
          "225:   version \"0.1.1\"",
          "226:   resolved \"https://registry.yarnpkg.com/jsbn/-/jsbn-0.1.1.tgz#a5e654c2e5a2deb5f201d96cefbca80c0ef2f513\"",
          "227:   integrity sha1-peZUwuWi3rXyAdls77yoDA7y9RM=",
          "229: miller-rabin@^4.0.0:",
          "230:   version \"4.0.1\"",
          "231:   resolved \"https://registry.yarnpkg.com/miller-rabin/-/miller-rabin-4.0.1.tgz#f080351c865b0dc562a8462966daa53543c78a4d\"",
          "232:   integrity sha512-115fLhvZVqWwHPbClyntxEVfVDfl9DLLTuJvq3g2O/Oxi8AiNouAHvDSzHS0viUJc+V5vm3eq91Xwqn9dp4jRA==",
          "233:   dependencies:",
          "234:     bn.js \"^4.0.0\"",
          "235:     brorand \"^1.0.1\"",
          "237: minimatch@^3.0.4:",
          "238:   version \"3.0.4\"",
          "239:   resolved \"https://registry.yarnpkg.com/minimatch/-/minimatch-3.0.4.tgz#5166e286457f03306064be5497e8dbb0c3d32083\"",
          "240:   integrity sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
          "241:   dependencies:",
          "242:     brace-expansion \"^1.1.7\"",
          "",
          "[Added Lines]",
          "128:   integrity sha512-Yljz7ffyPbrLpLngrMtZ7NduUgVvi6wG9RJ9IUcyCd59YQ911PBJphODUcbOVbqYfxe1wuYf/LJ8PauMRwsM/g==",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "263: pkginfo@0.3.x:",
          "264:   version \"0.3.1\"",
          "265:   resolved \"https://registry.yarnpkg.com/pkginfo/-/pkginfo-0.3.1.tgz#5b29f6a81f70717142e09e765bbeab97b4f81e21\"",
          "275: rimraf@^3.0.0:",
          "276:   version \"3.0.2\"",
          "",
          "[Removed Lines]",
          "266:   integrity sha1-Wyn2qB9wcXFC4J52W76rl7T4HiE=",
          "268: randombytes@^2.0.0:",
          "269:   version \"2.1.0\"",
          "270:   resolved \"https://registry.yarnpkg.com/randombytes/-/randombytes-2.1.0.tgz#df6f84372f0270dc65cdf6291349ab7a473d4f2a\"",
          "271:   integrity sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==",
          "272:   dependencies:",
          "273:     safe-buffer \"^5.1.0\"",
          "",
          "[Added Lines]",
          "152:   integrity sha512-yO5feByMzAp96LtP58wvPKSbaKAi/1C4kV9XpTctr6EepnP6F33RBNOiVrdz9BrPA98U2BMFsTNHo44TWcbQ2A==",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "284:   resolved \"https://registry.yarnpkg.com/run-script-os/-/run-script-os-1.1.6.tgz#8b0177fb1b54c99a670f95c7fdc54f18b9c72347\"",
          "285:   integrity sha512-ql6P2LzhBTTDfzKts+Qo4H94VUKpxKDFz6QxxwaUZN0mwvi7L3lpOI7BqPCq7lgDh3XLl0dpeXwfcVIitlrYrw==",
          "297: sprintf@0.1.x:",
          "298:   version \"0.1.5\"",
          "299:   resolved \"https://registry.yarnpkg.com/sprintf/-/sprintf-0.1.5.tgz#8f83e39a9317c1a502cb7db8050e51c679f6edcf\"",
          "316: stack-trace@0.0.x:",
          "317:   version \"0.0.10\"",
          "318:   resolved \"https://registry.yarnpkg.com/stack-trace/-/stack-trace-0.0.10.tgz#547c70b347e8d32b4e108ea1a2a159e5fdde19c0\"",
          "321: strip-ansi@^7.0.0:",
          "322:   version \"7.1.0\"",
          "",
          "[Removed Lines]",
          "287: safe-buffer@^5.1.0:",
          "288:   version \"5.2.1\"",
          "289:   resolved \"https://registry.yarnpkg.com/safe-buffer/-/safe-buffer-5.2.1.tgz#1eaf9fa9bdb1fdd4ec75f58f9cdb4e6b7827eec6\"",
          "290:   integrity sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
          "292: safer-buffer@^2.0.2, safer-buffer@^2.1.0, safer-buffer@~2.1.0:",
          "293:   version \"2.1.2\"",
          "294:   resolved \"https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a\"",
          "295:   integrity sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
          "300:   integrity sha1-j4PjmpMXwaUCy324BQ5Rxnn27c8=",
          "302: sshpk@Eugeny/node-sshpk#c2b71d1243714d2daf0988f84c3323d180817136:",
          "303:   version \"1.18.0\"",
          "304:   resolved \"https://codeload.github.com/Eugeny/node-sshpk/tar.gz/c2b71d1243714d2daf0988f84c3323d180817136\"",
          "305:   dependencies:",
          "306:     asn1 \"~0.2.3\"",
          "307:     assert-plus \"^1.0.0\"",
          "308:     bcrypt-pbkdf \"^1.0.0\"",
          "309:     dashdash \"^1.12.0\"",
          "310:     ecc-jsbn \"~0.1.1\"",
          "311:     getpass \"^0.1.1\"",
          "312:     jsbn \"~0.1.0\"",
          "313:     safer-buffer \"^2.0.2\"",
          "314:     tweetnacl \"~0.14.0\"",
          "319:   integrity sha1-VHxws0fo0ytOEI6hoqFZ5f3eGcA=",
          "",
          "[Added Lines]",
          "169:   integrity sha512-4X5KsuXFQ7f+d7Y+bi4qSb6eI+YoifDTGr0MQJXRoYO7BO7evfRCjds6kk3z7l5CiJYxgDN1x5Er4WiyCt+zTQ==",
          "174:   integrity sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "339:   dependencies:",
          "340:     rimraf \"^3.0.0\"",
          "352: winston@0.8.x:",
          "353:   version \"0.8.3\"",
          "354:   resolved \"https://registry.yarnpkg.com/winston/-/winston-0.8.3.tgz#64b6abf4cd01adcaefd5009393b1d8e8bec19db0\"",
          "356:   dependencies:",
          "357:     async \"0.2.x\"",
          "358:     colors \"0.6.x\"",
          "",
          "[Removed Lines]",
          "342: tweetnacl@^0.14.3, tweetnacl@~0.14.0:",
          "343:   version \"0.14.5\"",
          "344:   resolved \"https://registry.yarnpkg.com/tweetnacl/-/tweetnacl-0.14.5.tgz#5ae68177f192d4456269d108afa93ff8743f4f64\"",
          "345:   integrity sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=",
          "347: undici-types@~6.13.0:",
          "348:   version \"6.13.0\"",
          "349:   resolved \"https://registry.yarnpkg.com/undici-types/-/undici-types-6.13.0.tgz#e3e79220ab8c81ed1496b5812471afd7cf075ea5\"",
          "350:   integrity sha512-xtFJHudx8S2DSoujjMd1WeWvn7KKWFRESZTMeL1RptAYERu29D6jphMjjY+vn96jvN3kVPDNxU/E13VTaXj6jg==",
          "355:   integrity sha1-ZLar9M0Brcrv1QCTk7HY6L7BnbA=",
          "",
          "[Added Lines]",
          "200:   integrity sha512-fPoamsHq8leJ62D1M9V/f15mjQ1UHe4+7j1wpAT3fqgA5JqhJkk4aIfPEjfMTI9x6ZTjaLOpMAjluLtmgO5b6g==",
          "",
          "---------------"
        ],
        "tabby-web/src/platform.ts||tabby-web/src/platform.ts": [
          "File: tabby-web/src/platform.ts -> tabby-web/src/platform.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: }",
          "151: class HTMLFileDownload extends FileDownload {",
          "154:     constructor (",
          "155:         private name: string,",
          "",
          "[Removed Lines]",
          "152:     private buffers: Buffer[] = []",
          "",
          "[Added Lines]",
          "152:     private buffers: Uint8Array[] = []",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:         return this.size",
          "172:     }",
          "176:         this.increaseProgress(buffer.length)",
          "177:         if (this.isComplete()) {",
          "178:             this.finish()",
          "",
          "[Removed Lines]",
          "174:     async write (buffer: Buffer): Promise<void> {",
          "175:         this.buffers.push(Buffer.from(buffer))",
          "",
          "[Added Lines]",
          "174:     async write (buffer: Uint8Array): Promise<void> {",
          "175:         this.buffers.push(Uint8Array.from(buffer))",
          "",
          "---------------"
        ],
        "webpack.plugin.config.mjs||webpack.plugin.config.mjs": [
          "File: webpack.plugin.config.mjs -> webpack.plugin.config.mjs",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:             'os',",
          "158:             'path',",
          "159:             'readline',",
          "160:             '@luminati-io/socksv5',",
          "161:             'stream',",
          "162:             'windows-native-registry',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:             'russh',",
          "",
          "---------------"
        ],
        "yarn.lock||yarn.lock": [
          "File: yarn.lock -> yarn.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "1553:     minimalistic-assert \"^1.0.0\"",
          "1554:     safer-buffer \"^2.1.0\"",
          "1563: asn1@~0.2.3:",
          "1564:   version \"0.2.4\"",
          "1565:   resolved \"https://registry.yarnpkg.com/asn1/-/asn1-0.2.4.tgz#8d2475dfab553bb33e77b54e59e880bb8ce23136\"",
          "",
          "[Removed Lines]",
          "1556: asn1@^0.2.6:",
          "1557:   version \"0.2.6\"",
          "1558:   resolved \"https://registry.yarnpkg.com/asn1/-/asn1-0.2.6.tgz#0d3a7bb6e64e02a90c0303b31f292868ea09a08d\"",
          "1559:   integrity sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
          "1560:   dependencies:",
          "1561:     safer-buffer \"~2.1.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1694:   resolved \"https://registry.yarnpkg.com/base64-js/-/base64-js-1.5.1.tgz#1b1b440160a5bf7ad40b650f095963481903930a\"",
          "1695:   integrity sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
          "1698:   version \"1.0.2\"",
          "1699:   resolved \"https://registry.yarnpkg.com/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz#a4301d389b6a43f9b67ff3ca11a3f6637e360e9e\"",
          "1700:   integrity sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=",
          "",
          "[Removed Lines]",
          "1697: bcrypt-pbkdf@^1.0.0, bcrypt-pbkdf@^1.0.2:",
          "",
          "[Added Lines]",
          "1690: bcrypt-pbkdf@^1.0.0:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1914:     base64-js \"^1.3.1\"",
          "1915:     ieee754 \"^1.1.13\"",
          "1922: builder-util-runtime@9.2.1:",
          "1923:   version \"9.2.1\"",
          "1924:   resolved \"https://registry.yarnpkg.com/builder-util-runtime/-/builder-util-runtime-9.2.1.tgz#3184dcdf7ed6c47afb8df733813224ced4f624fd\"",
          "",
          "[Removed Lines]",
          "1917: buildcheck@~0.0.6:",
          "1918:   version \"0.0.6\"",
          "1919:   resolved \"https://registry.yarnpkg.com/buildcheck/-/buildcheck-0.0.6.tgz#89aa6e417cfd1e2196e3f8fe915eb709d2fe4238\"",
          "1920:   integrity sha512-8f9ZJCUXyT1M35Jx7MkBgmBMo3oHTTBIPLiY9xyL0pl3T5RwcPEY8cUHr5LBNfu/fk6c2T4DJZuVM/8ZZT2D2A==",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2507:   resolved \"https://registry.yarnpkg.com/core-util-is/-/core-util-is-1.0.2.tgz#b5fd54220aa2bc5ab57aab7140c940754503c1a7\"",
          "2508:   integrity sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=",
          "2518: crc@^3.8.0:",
          "2519:   version \"3.8.0\"",
          "2520:   resolved \"https://registry.yarnpkg.com/crc/-/crc-3.8.0.tgz#ad60269c2c856f8c299e2c4cc0de4556914056c6\"",
          "",
          "[Removed Lines]",
          "2510: cpu-features@~0.0.9:",
          "2511:   version \"0.0.10\"",
          "2512:   resolved \"https://registry.yarnpkg.com/cpu-features/-/cpu-features-0.0.10.tgz#9aae536db2710c7254d7ed67cb3cbc7d29ad79c5\"",
          "2513:   integrity sha512-9IkYqtX3YHPCzoVg1Py+o9057a3i0fp7S530UWokCSaFVTc7CwXPRiOjRjBQQ18ZCNafx78YfnG+HALxtVmOGA==",
          "2514:   dependencies:",
          "2515:     buildcheck \"~0.0.6\"",
          "2516:     nan \"^2.19.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5985:   resolved \"https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.7.tgz\"",
          "5986:   integrity sha1-MHXOk7whuPq0PhvE2n6BFe0ee6s=",
          "5989:   version \"2.17.0\"",
          "5990:   resolved \"https://registry.yarnpkg.com/nan/-/nan-2.17.0.tgz#c0150a2368a182f033e9aa5195ec76ea41a199cb\"",
          "5991:   integrity sha512-2ZTgtl0nJsO0KQCjEpxcIr5D+Yv90plTitZt9JBfQvVJDS5seMl3FOvsh3+9CoYWXf/1l5OaZzzF6nDm4cagaQ==",
          "",
          "[Removed Lines]",
          "5988: nan@2.17.0, nan@^2.18.0, nan@^2.19.0:",
          "",
          "[Added Lines]",
          "5968: nan@2.17.0:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8220:   resolved \"https://registry.yarnpkg.com/sprintf-js/-/sprintf-js-1.0.3.tgz#04e6926f662895354f3dd015203633b857297e2c\"",
          "8221:   integrity sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=",
          "8234: sshpk@^1.7.0:",
          "8235:   version \"1.16.1\"",
          "8236:   resolved \"https://registry.yarnpkg.com/sshpk/-/sshpk-1.16.1.tgz#fb661c0bef29b39db40769ee39fa70093d6f6877\"",
          "",
          "[Removed Lines]",
          "8223: ssh2@^1.14.0:",
          "8224:   version \"1.15.0\"",
          "8225:   resolved \"https://registry.yarnpkg.com/ssh2/-/ssh2-1.15.0.tgz#2f998455036a7f89e0df5847efb5421748d9871b\"",
          "8226:   integrity sha512-C0PHgX4h6lBxYx7hcXwu3QWdh4tg6tZZsTfXcdvc5caW/EMxaB4H9dWsl7qk+F7LAW762hp8VbXOX7x4xUYvEw==",
          "8227:   dependencies:",
          "8228:     asn1 \"^0.2.6\"",
          "8229:     bcrypt-pbkdf \"^1.0.2\"",
          "8230:   optionalDependencies:",
          "8231:     cpu-features \"~0.0.9\"",
          "8232:     nan \"^2.18.0\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}