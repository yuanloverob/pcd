{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "402d32ccfdf5e1b8ca573dde186a393039b42de8",
      "candidate_info": {
        "commit_hash": "402d32ccfdf5e1b8ca573dde186a393039b42de8",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/402d32ccfdf5e1b8ca573dde186a393039b42de8",
        "files": [
          "src/lib/components/admin/Settings/Documents.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/admin/Settings/Documents.svelte||src/lib/components/admin/Settings/Documents.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Settings/Documents.svelte||src/lib/components/admin/Settings/Documents.svelte": [
          "File: src/lib/components/admin/Settings/Documents.svelte -> src/lib/components/admin/Settings/Documents.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "749:      {/if}",
          "750:     </div>",
          "774:        <div class=\"flex items-center relative\">",
          "775:         <input",
          "776:          class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "777:          type=\"number\"",
          "780:          autocomplete=\"off\"",
          "781:          min=\"0\"",
          "782:         />",
          "783:        </div>",
          "784:       </div>",
          "791:         <div class=\"flex items-center relative\">",
          "792:          <input",
          "793:           class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "794:           type=\"number\"",
          "798:           autocomplete=\"off\"",
          "801:          />",
          "802:         </div>",
          "803:        </div>",
          "808:        </div>",
          "823:           'Leave empty to use the default prompt, or enter a custom prompt'",
          "824:          )}",
          "827:       </div>",
          "828:      </div>",
          "830:    {/if}",
          "832:    <div class=\"mb-3\">",
          "",
          "[Removed Lines]",
          "752:     <div class=\"mb-3\">",
          "753:      <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Retrieval')}</div>",
          "755:      <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "757:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "758:       <div class=\" self-center text-xs font-medium\">{$i18n.t('Top K')}</div>",
          "759:       <div class=\"flex items-center relative\">",
          "760:        <input",
          "761:         class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "762:         type=\"number\"",
          "763:         placeholder={$i18n.t('Enter Top K')}",
          "764:         bind:value={querySettings.k}",
          "765:         autocomplete=\"off\"",
          "766:         min=\"0\"",
          "767:        />",
          "768:       </div>",
          "769:      </div>",
          "771:      {#if querySettings.hybrid === true}",
          "772:       <div class=\"mb-2.5 flex w-full justify-between\">",
          "773:        <div class=\"self-center text-xs font-medium\">{$i18n.t('Top K Reranker')}</div>",
          "778:          placeholder={$i18n.t('Enter Top K Reranker')}",
          "779:          bind:value={querySettings.k_reranker}",
          "785:      {/if}",
          "787:      {#if querySettings.hybrid === true}",
          "788:       <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "789:        <div class=\" flex w-full justify-between\">",
          "790:         <div class=\" self-center text-xs font-medium\">{$i18n.t('Minimum Score')}</div>",
          "795:           step=\"0.01\"",
          "796:           placeholder={$i18n.t('Enter Score')}",
          "797:           bind:value={querySettings.r}",
          "799:           min=\"0.0\"",
          "800:           title={$i18n.t('The score should be a value between 0.0 (0%) and 1.0 (100%).')}",
          "804:        <div class=\"mt-1 text-xs text-gray-400 dark:text-gray-500\">",
          "805:         {$i18n.t(",
          "806:          'Note: If you set a minimum score, the search will only return documents with a score greater than or equal to the minimum score.'",
          "807:         )}",
          "809:       </div>",
          "810:      {/if}",
          "812:      <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "813:       <div class=\" mb-1 text-xs font-medium\">{$i18n.t('RAG Template')}</div>",
          "814:       <div class=\"flex w-full items-center relative\">",
          "815:        <Tooltip",
          "816:         content={$i18n.t('Leave empty to use the default prompt, or enter a custom prompt')}",
          "817:         placement=\"top-start\"",
          "818:         className=\"w-full\"",
          "819:        >",
          "820:         <Textarea",
          "821:          bind:value={querySettings.template}",
          "822:          placeholder={$i18n.t(",
          "825:         />",
          "826:        </Tooltip>",
          "829:     </div>",
          "",
          "[Added Lines]",
          "752:     {#if !RAG_FULL_CONTEXT}",
          "753:      <div class=\"mb-3\">",
          "754:       <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Retrieval')}</div>",
          "756:       <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "758:       <div class=\"  mb-2.5 flex w-full justify-between\">",
          "759:        <div class=\" self-center text-xs font-medium\">{$i18n.t('Top K')}</div>",
          "764:          placeholder={$i18n.t('Enter Top K')}",
          "765:          bind:value={querySettings.k}",
          "772:       {#if querySettings.hybrid === true}",
          "773:        <div class=\"mb-2.5 flex w-full justify-between\">",
          "774:         <div class=\"self-center text-xs font-medium\">{$i18n.t('Top K Reranker')}</div>",
          "779:           placeholder={$i18n.t('Enter Top K Reranker')}",
          "780:           bind:value={querySettings.k_reranker}",
          "782:           min=\"0\"",
          "786:       {/if}",
          "788:       {#if querySettings.hybrid === true}",
          "789:        <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "790:         <div class=\" flex w-full justify-between\">",
          "791:          <div class=\" self-center text-xs font-medium\">{$i18n.t('Minimum Score')}</div>",
          "792:          <div class=\"flex items-center relative\">",
          "793:           <input",
          "794:            class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "795:            type=\"number\"",
          "796:            step=\"0.01\"",
          "797:            placeholder={$i18n.t('Enter Score')}",
          "798:            bind:value={querySettings.r}",
          "799:            autocomplete=\"off\"",
          "800:            min=\"0.0\"",
          "801:            title={$i18n.t(",
          "802:             'The score should be a value between 0.0 (0%) and 1.0 (100%).'",
          "803:            )}",
          "804:           />",
          "805:          </div>",
          "806:         </div>",
          "807:         <div class=\"mt-1 text-xs text-gray-400 dark:text-gray-500\">",
          "808:          {$i18n.t(",
          "809:           'Note: If you set a minimum score, the search will only return documents with a score greater than or equal to the minimum score.'",
          "810:          )}",
          "811:         </div>",
          "813:       {/if}",
          "815:       <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "816:        <div class=\" mb-1 text-xs font-medium\">{$i18n.t('RAG Template')}</div>",
          "817:        <div class=\"flex w-full items-center relative\">",
          "818:         <Tooltip",
          "819:          content={$i18n.t(",
          "822:          placement=\"top-start\"",
          "823:          className=\"w-full\"",
          "824:         >",
          "825:          <Textarea",
          "826:           bind:value={querySettings.template}",
          "827:           placeholder={$i18n.t(",
          "828:            'Leave empty to use the default prompt, or enter a custom prompt'",
          "829:           )}",
          "830:          />",
          "831:         </Tooltip>",
          "832:        </div>",
          "835:     {/if}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db0ff839ddd9ee0f1c3e46e2f6bc13302895e6cf",
      "candidate_info": {
        "commit_hash": "db0ff839ddd9ee0f1c3e46e2f6bc13302895e6cf",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/db0ff839ddd9ee0f1c3e46e2f6bc13302895e6cf",
        "files": [
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1402:      const messages = createMessagesList(parentId);",
          "1404:      const hasImages = messages.some((message) =>",
          "1406:      );",
          "1408:      if (hasImages && !(model.info?.meta?.capabilities?.vision ?? true)) {",
          "",
          "[Removed Lines]",
          "1405:       message.files?.some((file) => file.type === 'image')",
          "",
          "[Added Lines]",
          "1405:       message?.files?.some((file) => file.type === 'image')",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e67956db98ae9d9c7bc0f7635f1b35fddac0f79",
      "candidate_info": {
        "commit_hash": "1e67956db98ae9d9c7bc0f7635f1b35fddac0f79",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/1e67956db98ae9d9c7bc0f7635f1b35fddac0f79",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1205:                         block_content = str(block[\"content\"]).strip()",
          "1206:                         content = f\"{content}{block['type']}: {block_content}\\n\"",
          "1210:             def tag_content_handler(content_type, tags, content, content_blocks):",
          "1211:                 end_flag = False",
          "",
          "[Removed Lines]",
          "1208:                 return content",
          "",
          "[Added Lines]",
          "1208:                 return content.strip()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1234:                                 attr_content",
          "1235:                             )  # Extract attributes safely",
          "1237:                             # Remove the start tag from the currently handling text block",
          "1238:                             content_blocks[-1][\"content\"] = content_blocks[-1][",
          "1239:                                 \"content\"",
          "1240:                             ].replace(match.group(0), \"\")",
          "1242:                             if not content_blocks[-1][\"content\"]:",
          "1243:                                 content_blocks.pop()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1237:                             # Capture everything before and after the matched tag",
          "1238:                             before_tag = content[",
          "1239:                                 : match.start()",
          "1240:                             ]  # Content before opening tag",
          "1241:                             after_tag = content[",
          "1242:                                 match.end() :",
          "1243:                             ]  # Content after opening tag",
          "1250:                             if before_tag:",
          "1251:                                 content_blocks[-1][\"content\"] = before_tag",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1252:                                     \"started_at\": time.time(),",
          "1253:                                 }",
          "1254:                             )",
          "1255:                             break",
          "1256:                 elif content_blocks[-1][\"type\"] == content_type:",
          "1257:                     tag = content_blocks[-1][\"tag\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1267:                             if after_tag:",
          "1268:                                 content_blocks[-1][\"content\"] = after_tag",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1289:                                 content_blocks[-1][\"ended_at\"]",
          "1290:                                 - content_blocks[-1][\"started_at\"]",
          "1291:                             )",
          "1292:                             # Reset the content_blocks by appending a new text block",
          "1299:                         else:",
          "1300:                             # Remove the block if content is empty",
          "1301:                             content_blocks.pop()",
          "",
          "[Removed Lines]",
          "1293:                             content_blocks.append(",
          "1294:                                 {",
          "1295:                                     \"type\": \"text\",",
          "1296:                                     \"content\": leftover_content,",
          "1297:                                 }",
          "1298:                             )",
          "",
          "[Added Lines]",
          "1309:                             if content_type != \"code_interpreter\":",
          "1310:                                 if leftover_content:",
          "1312:                                     content_blocks.append(",
          "1313:                                         {",
          "1314:                                             \"type\": \"text\",",
          "1315:                                             \"content\": leftover_content,",
          "1316:                                         }",
          "1317:                                     )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79e4f8a7bcd57e02e881867d28c166783d5d4109",
      "candidate_info": {
        "commit_hash": "79e4f8a7bcd57e02e881867d28c166783d5d4109",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/79e4f8a7bcd57e02e881867d28c166783d5d4109",
        "files": [
          "src/lib/components/chat/Messages/Citations.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Messages/Citations.svelte||src/lib/components/chat/Messages/Citations.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Messages/Citations.svelte||src/lib/components/chat/Messages/Citations.svelte": [
          "File: src/lib/components/chat/Messages/Citations.svelte -> src/lib/components/chat/Messages/Citations.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:    <div class=\"flex text-xs font-medium flex-wrap\">",
          "103:     {#each citations as citation, idx}",
          "104:      <button",
          "106:       class=\"no-toggle outline-hidden flex dark:text-gray-300 p-1 bg-white dark:bg-gray-900 rounded-xl max-w-96\"",
          "107:       on:click={() => {",
          "108:        showCitationModal = true;",
          "",
          "[Removed Lines]",
          "105:       id={`source-${id}-${idx}`}",
          "",
          "[Added Lines]",
          "105:       id={`source-${id}-${idx + 1}`}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "181:      <div class=\"flex text-xs font-medium flex-wrap\">",
          "182:       {#each citations as citation, idx}",
          "183:        <button",
          "185:         class=\"no-toggle outline-hidden flex dark:text-gray-300 p-1 bg-gray-50 hover:bg-gray-100 dark:bg-gray-900 dark:hover:bg-gray-850 transition rounded-xl max-w-96\"",
          "186:         on:click={() => {",
          "187:          showCitationModal = true;",
          "",
          "[Removed Lines]",
          "184:         id={`source-${id}-${idx}`}",
          "",
          "[Added Lines]",
          "184:         id={`source-${id}-${idx + 1}`}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c778345e84fad1827f38a298d515ce5a42772fff",
      "candidate_info": {
        "commit_hash": "c778345e84fad1827f38a298d515ce5a42772fff",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/c778345e84fad1827f38a298d515ce5a42772fff",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import html",
          "13: import inspect",
          "14: import re",
          "16: from uuid import uuid4",
          "17: from concurrent.futures import ThreadPoolExecutor",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import ast",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1499:                     results = []",
          "1500:                     for tool_call in response_tool_calls:",
          "1501:                         tool_call_id = tool_call.get(\"id\", \"\")",
          "1502:                         tool_name = tool_call.get(\"function\", {}).get(\"name\", \"\")",
          "1504:                         tool_function_params = {}",
          "1505:                         try:",
          "1507:                                 tool_call.get(\"function\", {}).get(\"arguments\", \"{}\")",
          "1508:                             )",
          "1509:                         except Exception as e:",
          "",
          "[Removed Lines]",
          "1506:                             tool_function_params = json.loads(",
          "",
          "[Added Lines]",
          "1502:                         print(\"\\n\\n\" + str(tool_call) + \"\\n\\n\")",
          "1508:                             # json.loads cannot be used because some models do not produce valid JSON",
          "1509:                             tool_function_params = ast.literal_eval(",
          "",
          "---------------"
        ]
      }
    }
  ]
}