{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "99b50b39fe03eae9bd54486fe8a7efd201233a0d",
      "candidate_info": {
        "commit_hash": "99b50b39fe03eae9bd54486fe8a7efd201233a0d",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/99b50b39fe03eae9bd54486fe8a7efd201233a0d",
        "files": [
          "src/lib/components/chat/Messages/Markdown.svelte",
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Messages/Markdown.svelte||src/lib/components/chat/Messages/Markdown.svelte",
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Messages/Markdown.svelte||src/lib/components/chat/Messages/Markdown.svelte": [
          "File: src/lib/components/chat/Messages/Markdown.svelte -> src/lib/components/chat/Messages/Markdown.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  $: (async () => {",
          "34:   if (content) {",
          "35:    tokens = marked.lexer(",
          "40:    );",
          "41:   }",
          "42:  })();",
          "",
          "[Removed Lines]",
          "36:     replaceTokens(processResponseContent(content), sourceIds, model?.name, $user?.name),",
          "37:     {",
          "38:      gfm: true",
          "39:     }",
          "",
          "[Added Lines]",
          "36:     replaceTokens(processResponseContent(content), sourceIds, model?.name, $user?.name)",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte": [
          "File: src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte -> src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:     {/each}",
          "239:    </ul>",
          "240:   {/if}",
          "246:  {:else if token.type === 'details'}",
          "247:   <Collapsible title={token.summary} attributes={token?.attributes} className=\"w-full space-y-1\">",
          "248:    <div class=\" mb-1.5\" slot=\"content\">",
          "",
          "[Removed Lines]",
          "241:  {:else if token.type === 'list_item'}",
          "242:   {JSON.stringify(token)}",
          "243:   <p>",
          "244:    <MarkdownInlineTokens id={`${id}-${tokenIdx}-li`} tokens={token.tokens} {onSourceClick} />",
          "245:   </p>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "54d528125629c31d2e28f7c8fe713f6208f23009",
      "candidate_info": {
        "commit_hash": "54d528125629c31d2e28f7c8fe713f6208f23009",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/54d528125629c31d2e28f7c8fe713f6208f23009",
        "files": [
          "src/lib/components/chat/Messages/UserMessage.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Messages/UserMessage.svelte||src/lib/components/chat/Messages/UserMessage.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Messages/UserMessage.svelte||src/lib/components/chat/Messages/UserMessage.svelte": [
          "File: src/lib/components/chat/Messages/UserMessage.svelte -> src/lib/components/chat/Messages/UserMessage.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:         </button>",
          "348:        </Tooltip>",
          "351:         <Tooltip content={$i18n.t('Delete')} placement=\"bottom\">",
          "352:          <button",
          "353:           class=\"invisible group-hover:visible p-1 rounded-sm dark:hover:text-white hover:text-black transition\"",
          "",
          "[Removed Lines]",
          "350:        {#if !readOnly && siblings.length > 1}",
          "",
          "[Added Lines]",
          "350:        {#if !readOnly && (!isFirstMessage || siblings.length > 1)}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67958c02b4a48bef3bc3f22847fbb4fe1c486aac",
      "candidate_info": {
        "commit_hash": "67958c02b4a48bef3bc3f22847fbb4fe1c486aac",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/67958c02b4a48bef3bc3f22847fbb4fe1c486aac",
        "files": [
          "src/lib/components/admin/Settings/General.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/admin/Settings/General.svelte||src/lib/components/admin/Settings/General.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Settings/General.svelte||src/lib/components/admin/Settings/General.svelte": [
          "File: src/lib/components/admin/Settings/General.svelte -> src/lib/components/admin/Settings/General.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:        <div class=\"mt-2 text-xs text-gray-400 dark:text-gray-500\">",
          "145:         <!-- https://docs.openwebui.com/getting-started/advanced-topics/api-endpoints -->",
          "146:         <a",
          "148:          target=\"_blank\"",
          "149:          class=\" text-gray-300 font-medium underline\"",
          "150:         >",
          "",
          "[Removed Lines]",
          "147:          href=\"https://docs.openwebui.com/getting-started/advanced-topics/api-endpoints\"",
          "",
          "[Added Lines]",
          "147:          href=\"https://docs.openwebui.com/getting-started/api-endpoints\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b1bcca90b5e00124fd518a9d8030f3d077a71347",
      "candidate_info": {
        "commit_hash": "b1bcca90b5e00124fd518a9d8030f3d077a71347",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/b1bcca90b5e00124fd518a9d8030f3d077a71347",
        "files": [
          "backend/open_webui/utils/middleware.py",
          "src/lib/components/common/Tooltip.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "src/lib/components/common/Tooltip.svelte||src/lib/components/common/Tooltip.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:                     if not data.strip():",
          "967:                         continue",
          "971:                         continue",
          "973:                     # Remove the prefix",
          "976:                     try:",
          "977:                         data = json.loads(data)",
          "",
          "[Removed Lines]",
          "969:                     # \"data: \" is the prefix for each event",
          "970:                     if not data.startswith(\"data: \"):",
          "974:                     data = data[len(\"data: \") :]",
          "",
          "[Added Lines]",
          "969:                     # \"data:\" is the prefix for each event",
          "970:                     if not data.startswith(\"data:\"):",
          "974:                     data = data[len(\"data:\") :].strip()",
          "",
          "---------------"
        ],
        "src/lib/components/common/Tooltip.svelte||src/lib/components/common/Tooltip.svelte": [
          "File: src/lib/components/common/Tooltip.svelte -> src/lib/components/common/Tooltip.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  export let touch = true;",
          "13:  export let className = 'flex';",
          "14:  export let theme = '';",
          "15:  export let allowHTML = true;",
          "16:  export let tippyOptions = {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:  export let offset = [0, 4];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     touch: touch,",
          "30:     ...(theme !== '' ? { theme } : { theme: 'dark' }),",
          "31:     arrow: false,",
          "33:     ...tippyOptions",
          "34:    });",
          "35:   }",
          "",
          "[Removed Lines]",
          "32:     offset: [0, 4],",
          "",
          "[Added Lines]",
          "33:     offset: offset,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa92abce31c22644c5d5178a839d9b560edff73e",
      "candidate_info": {
        "commit_hash": "fa92abce31c22644c5d5178a839d9b560edff73e",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/fa92abce31c22644c5d5178a839d9b560edff73e",
        "files": [
          "src/lib/components/chat/Messages/ContentRenderer.svelte",
          "src/lib/components/chat/Messages/Markdown.svelte",
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "src/lib/components/chat/Messages/ResponseMessage.svelte",
          "src/lib/components/common/RichTextInput.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Messages/ContentRenderer.svelte||src/lib/components/chat/Messages/ContentRenderer.svelte",
          "src/lib/components/chat/Messages/Markdown.svelte||src/lib/components/chat/Messages/Markdown.svelte",
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "src/lib/components/chat/Messages/ResponseMessage.svelte||src/lib/components/chat/Messages/ResponseMessage.svelte",
          "src/lib/components/common/RichTextInput.svelte||src/lib/components/common/RichTextInput.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Messages/ContentRenderer.svelte||src/lib/components/chat/Messages/ContentRenderer.svelte": [
          "File: src/lib/components/chat/Messages/ContentRenderer.svelte -> src/lib/components/chat/Messages/ContentRenderer.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:  export let floatingButtons = true;",
          "20:  export let onSourceClick = () => {};",
          "21:  export let onAddMessages = () => {};",
          "23:  let contentContainerElement;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:  export let onTaskClick = () => {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:    return acc.filter((item, index) => acc.indexOf(item) === index);",
          "142:   }, [])}",
          "143:   {onSourceClick}",
          "144:   on:update={(e) => {",
          "145:    dispatch('update', e.detail);",
          "146:   }}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "146:   {onTaskClick}",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages/Markdown.svelte||src/lib/components/chat/Messages/Markdown.svelte": [
          "File: src/lib/components/chat/Messages/Markdown.svelte -> src/lib/components/chat/Messages/Markdown.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  export let save = false;",
          "19:  export let sourceIds = [];",
          "20:  export let onSourceClick = () => {};",
          "22:  let tokens = [];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  export let onTaskClick = () => {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:   {tokens}",
          "46:   {id}",
          "47:   {save}",
          "48:   {onSourceClick}",
          "49:   on:update={(e) => {",
          "50:    dispatch('update', e.detail);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:   {onTaskClick}",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte": [
          "File: src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte -> src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  export let attributes = {};",
          "28:  export let save = false;",
          "29:  export let onSourceClick: Function = () => {};",
          "31:  const headerComponent = (depth: number) => {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:  export let onTaskClick: Function = () => {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:   </div>",
          "169:  {:else if token.type === 'blockquote'}",
          "170:   <blockquote>",
          "172:   </blockquote>",
          "173:  {:else if token.type === 'list'}",
          "174:   {#if token.ordered}",
          "175:    <ol start={token.start || 1}>",
          "176:     {#each token.items as item, itemIdx}",
          "177:      <li>",
          "178:       <svelte:self",
          "179:        id={`${id}-${tokenIdx}-${itemIdx}`}",
          "180:        tokens={item.tokens}",
          "181:        top={token.loose}",
          "182:       />",
          "183:      </li>",
          "184:     {/each}",
          "",
          "[Removed Lines]",
          "171:    <svelte:self id={`${id}-${tokenIdx}`} tokens={token.tokens} />",
          "",
          "[Added Lines]",
          "173:    <svelte:self id={`${id}-${tokenIdx}`} tokens={token.tokens} {onTaskClick} {onSourceClick} />",
          "180:       {#if item?.task}",
          "181:        <input",
          "182:         class=\" translate-y-[1px] -translate-x-1\"",
          "183:         type=\"checkbox\"",
          "184:         checked={item.checked}",
          "185:         on:change={(e) => {",
          "186:          onTaskClick({",
          "187:           id: id,",
          "188:           token: token,",
          "189:           tokenIdx: tokenIdx,",
          "190:           item: item,",
          "191:           itemIdx: itemIdx,",
          "192:           checked: e.target.checked",
          "193:          });",
          "194:         }}",
          "195:        />",
          "196:       {/if}",
          "202:        {onTaskClick}",
          "203:        {onSourceClick}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:    <ul>",
          "188:     {#each token.items as item, itemIdx}",
          "189:      <li>",
          "190:       <svelte:self",
          "191:        id={`${id}-${tokenIdx}-${itemIdx}`}",
          "192:        tokens={item.tokens}",
          "193:        top={token.loose}",
          "194:       />",
          "195:      </li>",
          "196:     {/each}",
          "197:    </ul>",
          "198:   {/if}",
          "199:  {:else if token.type === 'details'}",
          "200:   <Collapsible title={token.summary} attributes={token?.attributes} className=\"w-full space-y-1\">",
          "201:    <div class=\" mb-1.5\" slot=\"content\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:       {#if item?.task}",
          "213:        <input",
          "214:         class=\" translate-y-[1px] -translate-x-1\"",
          "215:         type=\"checkbox\"",
          "216:         checked={item.checked}",
          "217:         on:change={(e) => {",
          "218:          onTaskClick({",
          "219:           id: id,",
          "220:           token: token,",
          "221:           tokenIdx: tokenIdx,",
          "222:           item: item,",
          "223:           itemIdx: itemIdx,",
          "224:           checked: e.target.checked",
          "225:          });",
          "226:         }}",
          "227:        />",
          "228:       {/if}",
          "234:        {onTaskClick}",
          "235:        {onSourceClick}",
          "241:  {:else if token.type === 'list_item'}",
          "242:   {JSON.stringify(token)}",
          "243:   <p>",
          "244:    <MarkdownInlineTokens id={`${id}-${tokenIdx}-li`} tokens={token.tokens} {onSourceClick} />",
          "245:   </p>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203:      id={`${id}-${tokenIdx}-d`}",
          "204:      tokens={marked.lexer(token.text)}",
          "205:      attributes={token?.attributes}",
          "206:     />",
          "207:    </div>",
          "208:   </Collapsible>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:      {onTaskClick}",
          "254:      {onSourceClick}",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages/ResponseMessage.svelte||src/lib/components/chat/Messages/ResponseMessage.svelte": [
          "File: src/lib/components/chat/Messages/ResponseMessage.svelte -> src/lib/components/chat/Messages/ResponseMessage.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "716:           floatingButtons={message?.done}",
          "717:           save={!readOnly}",
          "718:           {model}",
          "719:           onSourceClick={async (e) => {",
          "720:            console.log(e);",
          "721:            let sourceButton = document.getElementById(`source-${e}`);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719:           onTaskClick={async (e) => {",
          "720:            console.log(e);",
          "721:           }}",
          "",
          "---------------"
        ],
        "src/lib/components/common/RichTextInput.svelte||src/lib/components/common/RichTextInput.svelte": [
          "File: src/lib/components/common/RichTextInput.svelte -> src/lib/components/common/RichTextInput.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:  export let value = '';",
          "36:  export let id = '';",
          "38:  export let preserveBreaks = false;",
          "39:  export let generateAutoCompletion: Function = async () => null;",
          "40:  export let autocomplete = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:  export let raw = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:    });",
          "138:   }",
          "150:     }",
          "154:    }",
          "160:   editor = new Editor({",
          "161:    element: element,",
          "",
          "[Removed Lines]",
          "140:   async function tryParse(value, attempts = 3, interval = 100) {",
          "141:    try {",
          "143:     return marked.parse(value.replaceAll(`\\n<br/>`, `<br/>`), {",
          "144:      breaks: false",
          "145:     });",
          "146:    } catch (error) {",
          "148:     if (attempts <= 1) {",
          "149:      return value;",
          "152:     await new Promise((resolve) => setTimeout(resolve, interval));",
          "153:     return tryParse(value, attempts - 1, interval); // Recursive call",
          "155:   }",
          "158:   let content = await tryParse(value);",
          "",
          "[Added Lines]",
          "142:   let content = value;",
          "144:   if (!raw) {",
          "145:    async function tryParse(value, attempts = 3, interval = 100) {",
          "146:     try {",
          "148:      return marked.parse(value.replaceAll(`\\n<br/>`, `<br/>`), {",
          "149:       breaks: false",
          "150:      });",
          "151:     } catch (error) {",
          "153:      if (attempts <= 1) {",
          "154:       return value;",
          "155:      }",
          "157:      await new Promise((resolve) => setTimeout(resolve, interval));",
          "158:      return tryParse(value, attempts - 1, interval); // Recursive call",
          "163:    content = await tryParse(value);",
          "164:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:    onTransaction: () => {",
          "193:     editor = editor;",
          "214:       }",
          "215:      }",
          "216:     }",
          "217:    },",
          "218:    editorProps: {",
          "",
          "[Removed Lines]",
          "194:     let newValue = turndownService",
          "195:      .turndown(",
          "196:       editor",
          "197:        .getHTML()",
          "198:        .replace(/<p><\\/p>/g, '<br/>')",
          "199:        .replace(/ {2,}/g, (m) => m.replace(/ /g, '\\u00a0'))",
          "200:      )",
          "201:      .replace(/\\u00a0/g, ' ');",
          "203:     if (!preserveBreaks) {",
          "204:      newValue = newValue.replace(/<br\\/>/g, '');",
          "205:     }",
          "207:     if (value !== newValue) {",
          "208:      value = newValue;",
          "211:      if (editor.isActive('paragraph')) {",
          "212:       if (value === '') {",
          "213:        editor.commands.clearContent();",
          "",
          "[Added Lines]",
          "201:     if (!raw) {",
          "202:      let newValue = turndownService",
          "203:       .turndown(",
          "204:        editor",
          "205:         .getHTML()",
          "206:         .replace(/<p><\\/p>/g, '<br/>')",
          "207:         .replace(/ {2,}/g, (m) => m.replace(/ /g, '\\u00a0'))",
          "208:       )",
          "209:       .replace(/\\u00a0/g, ' ');",
          "211:      if (!preserveBreaks) {",
          "212:       newValue = newValue.replace(/<br\\/>/g, '');",
          "213:      }",
          "215:      if (value !== newValue) {",
          "216:       value = newValue;",
          "219:       if (editor.isActive('paragraph')) {",
          "220:        if (value === '') {",
          "221:         editor.commands.clearContent();",
          "222:        }",
          "225:     } else {",
          "226:      value = editor.getHTML();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "341:  $: if (",
          "342:   editor &&",
          "352:  ) {",
          "358:   selectTemplate();",
          "359:  }",
          "360: </script>",
          "",
          "[Removed Lines]",
          "343:   value !==",
          "344:    turndownService",
          "345:     .turndown(",
          "346:      (preserveBreaks",
          "347:       ? editor.getHTML().replace(/<p><\\/p>/g, '<br/>')",
          "348:       : editor.getHTML()",
          "349:      ).replace(/ {2,}/g, (m) => m.replace(/ /g, '\\u00a0'))",
          "350:     )",
          "351:     .replace(/\\u00a0/g, ' ')",
          "353:   editor.commands.setContent(",
          "354:    marked.parse(value.replaceAll(`\\n<br/>`, `<br/>`), {",
          "355:     breaks: false",
          "356:    })",
          "357:   ); // Update editor content",
          "",
          "[Added Lines]",
          "354:   (raw",
          "355:    ? value !== editor.getHTML()",
          "356:    : value !==",
          "357:     turndownService",
          "358:      .turndown(",
          "359:       (preserveBreaks",
          "360:        ? editor.getHTML().replace(/<p><\\/p>/g, '<br/>')",
          "361:        : editor.getHTML()",
          "362:       ).replace(/ {2,}/g, (m) => m.replace(/ /g, '\\u00a0'))",
          "363:      )",
          "364:      .replace(/\\u00a0/g, ' '))",
          "366:   if (raw) {",
          "367:    editor.commands.setContent(value);",
          "368:   } else {",
          "369:    preserveBreaks",
          "370:     ? editor.commands.setContent(value)",
          "371:     : editor.commands.setContent(",
          "372:       marked.parse(value.replaceAll(`\\n<br/>`, `<br/>`), {",
          "373:        breaks: false",
          "374:       })",
          "375:      ); // Update editor content",
          "376:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}