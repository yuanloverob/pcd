{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c5a9cfacf1db0e602d20b405abbac4738196c47a",
      "candidate_info": {
        "commit_hash": "c5a9cfacf1db0e602d20b405abbac4738196c47a",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/c5a9cfacf1db0e602d20b405abbac4738196c47a",
        "files": [
          "backend/open_webui/utils/middleware.py",
          "backend/open_webui/utils/tools.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "backend/open_webui/utils/tools.py||backend/open_webui/utils/tools.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "914: async def process_chat_response(",
          "915:     request, response, form_data, user, events, metadata, tasks",
          "916: ):",
          "920:     async def background_tasks_handler():",
          "921:         message_map = Chats.get_messages_by_chat_id(metadata[\"chat_id\"])",
          "922:         message = message_map.get(metadata[\"message_id\"]) if message_map else None",
          "",
          "[Removed Lines]",
          "918:     print(\"metadata\", metadata)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1129:                 for block in content_blocks:",
          "1130:                     if block[\"type\"] == \"text\":",
          "1131:                         content = f\"{content}{block['content'].strip()}\\n\"",
          "1132:                     elif block[\"type\"] == \"reasoning\":",
          "1133:                         reasoning_display_content = \"\\n\".join(",
          "1134:                             (f\"> {line}\" if not line.startswith(\">\") else line)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1129:                     elif block[\"type\"] == \"tool\":",
          "1130:                         pass",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1311:                         try:",
          "1312:                             data = json.loads(data)",
          "1314:                             if \"selected_model_id\" in data:",
          "1315:                                 model_id = data[\"selected_model_id\"]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1313:                             print(data)",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/tools.py||backend/open_webui/utils/tools.py": [
          "File: backend/open_webui/utils/tools.py -> backend/open_webui/utils/tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:             )",
          "63:         for spec in tools.specs:",
          "64:             # Remove internal parameters",
          "65:             spec[\"parameters\"][\"properties\"] = {",
          "66:                 key: val",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:             # TODO: Fix hack for OpenAI API",
          "65:             # Some times breaks OpenAI but others don't. Leaving the comment",
          "66:             for val in spec.get(\"parameters\", {}).get(\"properties\", {}).values():",
          "67:                 if val[\"type\"] == \"str\":",
          "68:                     val[\"type\"] = \"string\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae484e8edf9f77e021ab501861b0d21a565a663c",
      "candidate_info": {
        "commit_hash": "ae484e8edf9f77e021ab501861b0d21a565a663c",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/ae484e8edf9f77e021ab501861b0d21a565a663c",
        "files": [
          "backend/open_webui/utils/tools.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/tools.py||backend/open_webui/utils/tools.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/tools.py||backend/open_webui/utils/tools.py": [
          "File: backend/open_webui/utils/tools.py -> backend/open_webui/utils/tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:                     elif auth_type == \"session\":",
          "70:                         token = request.state.token.credentials",
          "81:                     callable = get_async_tool_function_and_apply_extra_params(",
          "82:                         tool_function,",
          "",
          "[Removed Lines]",
          "72:                     async def tool_function(**args):",
          "73:                         return await execute_tool_server(",
          "74:                             token=token,",
          "75:                             url=tool_server_data[\"url\"],",
          "76:                             name=function_name,",
          "77:                             params=args,",
          "78:                             server_data=tool_server_data,",
          "79:                         )",
          "",
          "[Added Lines]",
          "72:                     def make_tool_function(function_name, token, tool_server_data):",
          "73:                         async def tool_function(**kwargs):",
          "74:                             print(",
          "75:                                 f\"Executing tool function {function_name} with params: {kwargs}\"",
          "76:                             )",
          "77:                             return await execute_tool_server(",
          "78:                                 token=token,",
          "79:                                 url=tool_server_data[\"url\"],",
          "80:                                 name=function_name,",
          "81:                                 params=kwargs,",
          "82:                                 server_data=tool_server_data,",
          "83:                             )",
          "85:                         return tool_function",
          "87:                     tool_function = make_tool_function(",
          "88:                         function_name, token, tool_server_data",
          "89:                     )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c211e32b3c7184727f8a9c3f30998c911800287",
      "candidate_info": {
        "commit_hash": "1c211e32b3c7184727f8a9c3f30998c911800287",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/1c211e32b3c7184727f8a9c3f30998c911800287",
        "files": [
          "src/lib/components/chat/Controls/Controls.svelte",
          "src/lib/components/chat/ModelSelector/Selector.svelte",
          "src/lib/components/chat/Navbar.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Controls/Controls.svelte||src/lib/components/chat/Controls/Controls.svelte",
          "src/lib/components/chat/ModelSelector/Selector.svelte||src/lib/components/chat/ModelSelector/Selector.svelte",
          "src/lib/components/chat/Navbar.svelte||src/lib/components/chat/Navbar.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Controls/Controls.svelte||src/lib/components/chat/Controls/Controls.svelte": [
          "File: src/lib/components/chat/Controls/Controls.svelte -> src/lib/components/chat/Controls/Controls.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:   </button>",
          "31:  </div>",
          "68:     </div>",
          "69:    </Collapsible>",
          "71:    <hr class=\"my-2 border-gray-50 dark:border-gray-700/10\" />",
          "73:    <Collapsible title={$i18n.t('System Prompt')} open={true} buttonClassName=\"w-full\">",
          "74:     <div class=\"\" slot=\"content\">",
          "",
          "[Removed Lines]",
          "33:  {#if $user.role === 'admin' || $user?.permissions.chat?.controls}",
          "34:   <div class=\" dark:text-gray-200 text-sm font-primary py-0.5 px-0.5\">",
          "35:    {#if chatFiles.length > 0}",
          "36:     <Collapsible title={$i18n.t('Files')} open={true} buttonClassName=\"w-full\">",
          "37:      <div class=\"flex flex-col gap-1 mt-1.5\" slot=\"content\">",
          "38:       {#each chatFiles as file, fileIdx}",
          "39:        <FileItem",
          "40:         className=\"w-full\"",
          "41:         item={file}",
          "42:         edit={true}",
          "43:         url={file?.url ? file.url : null}",
          "44:         name={file.name}",
          "45:         type={file.type}",
          "46:         size={file?.size}",
          "47:         dismissible={true}",
          "48:         on:dismiss={() => {",
          "51:          chatFiles.splice(fileIdx, 1);",
          "52:          chatFiles = chatFiles;",
          "53:         }}",
          "54:         on:click={() => {",
          "55:          console.log(file);",
          "56:         }}",
          "57:        />",
          "58:       {/each}",
          "59:      </div>",
          "60:     </Collapsible>",
          "62:     <hr class=\"my-2 border-gray-50 dark:border-gray-700/10\" />",
          "63:    {/if}",
          "65:    <Collapsible bind:open={showValves} title={$i18n.t('Valves')} buttonClassName=\"w-full\">",
          "66:     <div class=\"text-sm\" slot=\"content\">",
          "67:      <Valves show={showValves} />",
          "",
          "[Added Lines]",
          "33:  <div class=\" dark:text-gray-200 text-sm font-primary py-0.5 px-0.5\">",
          "34:   {#if chatFiles.length > 0}",
          "35:    <Collapsible title={$i18n.t('Files')} open={true} buttonClassName=\"w-full\">",
          "36:     <div class=\"flex flex-col gap-1 mt-1.5\" slot=\"content\">",
          "37:      {#each chatFiles as file, fileIdx}",
          "38:       <FileItem",
          "39:        className=\"w-full\"",
          "40:        item={file}",
          "41:        edit={true}",
          "42:        url={file?.url ? file.url : null}",
          "43:        name={file.name}",
          "44:        type={file.type}",
          "45:        size={file?.size}",
          "46:        dismissible={true}",
          "47:        on:dismiss={() => {",
          "50:         chatFiles.splice(fileIdx, 1);",
          "51:         chatFiles = chatFiles;",
          "52:        }}",
          "53:        on:click={() => {",
          "54:         console.log(file);",
          "55:        }}",
          "56:       />",
          "57:      {/each}",
          "62:   {/if}",
          "64:   <Collapsible bind:open={showValves} title={$i18n.t('Valves')} buttonClassName=\"w-full\">",
          "65:    <div class=\"text-sm\" slot=\"content\">",
          "66:     <Valves show={showValves} />",
          "67:    </div>",
          "68:   </Collapsible>",
          "70:   {#if $user.role === 'admin' || $user?.permissions.chat?.controls}",
          "71:    <hr class=\"my-2 border-gray-50 dark:border-gray-700/10\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:      </div>",
          "91:     </div>",
          "92:    </Collapsible>",
          "99: </div>",
          "",
          "[Removed Lines]",
          "93:   </div>",
          "94:  {:else}",
          "95:   <div class=\"text-sm dark:text-gray-300 text-center py-2 px-10\">",
          "96:    {$i18n.t('You do not have permission to access this feature.')}",
          "97:   </div>",
          "98:  {/if}",
          "",
          "[Added Lines]",
          "93:   {/if}",
          "94:  </div>",
          "",
          "---------------"
        ],
        "src/lib/components/chat/ModelSelector/Selector.svelte||src/lib/components/chat/ModelSelector/Selector.svelte": [
          "File: src/lib/components/chat/ModelSelector/Selector.svelte -> src/lib/components/chat/ModelSelector/Selector.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:          selectedTag = '';",
          "351:         }}",
          "352:        >",
          "354:        </button>",
          "356:        <button",
          "",
          "[Removed Lines]",
          "353:         {$i18n.t('Ollama')}",
          "",
          "[Added Lines]",
          "353:         {$i18n.t('Local')}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "361:          selectedTag = '';",
          "362:         }}",
          "363:        >",
          "365:        </button>",
          "367:        {#each tags as tag}",
          "",
          "[Removed Lines]",
          "364:         {$i18n.t('OpenAI')}",
          "",
          "[Added Lines]",
          "364:         {$i18n.t('External')}",
          "365:        </button>",
          "367:        <button",
          "368:         class=\"min-w-fit outline-none p-1.5 {selectedTag === ''",
          "369:          ? ''",
          "370:          : 'text-gray-300 dark:text-gray-600 hover:text-gray-700 dark:hover:text-white'} transition capitalize\"",
          "371:         on:click={() => {",
          "372:          selectedTag = '';",
          "373:         }}",
          "374:        >",
          "375:         {$i18n.t('Direct')}",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Navbar.svelte||src/lib/components/chat/Navbar.svelte": [
          "File: src/lib/components/chat/Navbar.svelte -> src/lib/components/chat/Navbar.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:      </Tooltip>",
          "131:     {/if}",
          "149:     <Tooltip content={$i18n.t('New Chat')}>",
          "150:      <button",
          "",
          "[Removed Lines]",
          "133:     {#if !$mobile && ($user.role === 'admin' || $user?.permissions?.chat?.controls)}",
          "134:      <Tooltip content={$i18n.t('Controls')}>",
          "135:       <button",
          "136:        class=\" flex cursor-pointer px-2 py-2 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-850 transition\"",
          "137:        on:click={async () => {",
          "138:         await showControls.set(!$showControls);",
          "139:        }}",
          "140:        aria-label=\"Controls\"",
          "141:       >",
          "142:        <div class=\" m-auto self-center\">",
          "143:         <AdjustmentsHorizontal className=\" size-5\" strokeWidth=\"0.5\" />",
          "144:        </div>",
          "145:       </button>",
          "146:      </Tooltip>",
          "147:     {/if}",
          "",
          "[Added Lines]",
          "133:     <Tooltip content={$i18n.t('Controls')}>",
          "134:      <button",
          "135:       class=\" flex cursor-pointer px-2 py-2 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-850 transition\"",
          "136:       on:click={async () => {",
          "137:        await showControls.set(!$showControls);",
          "138:       }}",
          "139:       aria-label=\"Controls\"",
          "140:      >",
          "141:       <div class=\" m-auto self-center\">",
          "142:        <AdjustmentsHorizontal className=\" size-5\" strokeWidth=\"0.5\" />",
          "143:       </div>",
          "144:      </button>",
          "145:     </Tooltip>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1dc2664c28517d515226f83f2630c7b8873b5e8",
      "candidate_info": {
        "commit_hash": "a1dc2664c28517d515226f83f2630c7b8873b5e8",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/a1dc2664c28517d515226f83f2630c7b8873b5e8",
        "files": [
          "backend/open_webui/utils/chat.py",
          "backend/open_webui/utils/middleware.py",
          "src/routes/+layout.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/chat.py||backend/open_webui/utils/chat.py",
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "src/routes/+layout.svelte||src/routes/+layout.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/chat.py||backend/open_webui/utils/chat.py": [
          "File: backend/open_webui/utils/chat.py -> backend/open_webui/utils/chat.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     session_id = metadata.get(\"session_id\")",
          "75:     request_id = str(uuid.uuid4())  # Generate a unique request ID",
          "78:     event_caller = get_event_call(metadata)",
          "80:     channel = f\"{user_id}:{session_id}:{request_id}\"",
          "",
          "[Removed Lines]",
          "77:     event_emitter = get_event_emitter(metadata)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:         except Exception as e:",
          "192:             raise e",
          "195:         return await generate_direct_chat_completion(",
          "196:             request, form_data, user=user, models=models",
          "197:         )",
          "",
          "[Removed Lines]",
          "194:     if request.state.direct:",
          "",
          "[Added Lines]",
          "193:     if getattr(request.state, \"direct\", False):",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:             if \"document\" in source:",
          "780:                 for doc_idx, doc_context in enumerate(source[\"document\"]):",
          "793:         context_string = context_string.strip()",
          "794:         prompt = get_last_user_message(form_data[\"messages\"])",
          "",
          "[Removed Lines]",
          "781:                     doc_metadata = source.get(\"metadata\")",
          "782:                     doc_source_id = None",
          "784:                     if doc_metadata:",
          "785:                         doc_source_id = doc_metadata[doc_idx].get(\"source\", source_id)",
          "787:                     if source_id:",
          "788:                         context_string += f\"<source><source_id>{doc_source_id if doc_source_id is not None else source_id}</source_id><source_context>{doc_context}</source_context></source>\\n\"",
          "789:                     else:",
          "790:                         # If there is no source_id, then do not include the source_id tag",
          "791:                         context_string += f\"<source><source_context>{doc_context}</source_context></source>\\n\"",
          "",
          "[Added Lines]",
          "781:                     context_string += f\"<source><source_id>{doc_idx}</source_id><source_context>{doc_context}</source_context></source>\\n\"",
          "",
          "---------------"
        ],
        "src/routes/+layout.svelte||src/routes/+layout.svelte": [
          "File: src/routes/+layout.svelte -> src/routes/+layout.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:          cb({",
          "295:           status: true",
          "296:          });",
          "299:          const reader = res.body.getReader();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:          console.log({ status: true });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b15bf0dc7042609f9e4e22426a24aaadb4c7f08e",
      "candidate_info": {
        "commit_hash": "b15bf0dc7042609f9e4e22426a24aaadb4c7f08e",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/b15bf0dc7042609f9e4e22426a24aaadb4c7f08e",
        "files": [
          "src/lib/components/chat/Settings/Advanced/AdvancedParams.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Settings/Advanced/AdvancedParams.svelte||src/lib/components/chat/Settings/Advanced/AdvancedParams.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Settings/Advanced/AdvancedParams.svelte||src/lib/components/chat/Settings/Advanced/AdvancedParams.svelte": [
          "File: src/lib/components/chat/Settings/Advanced/AdvancedParams.svelte -> src/lib/components/chat/Settings/Advanced/AdvancedParams.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "789:  <div class=\" py-0.5 w-full justify-between\">",
          "790:   <Tooltip",
          "794:    placement=\"top-start\"",
          "795:    className=\"inline-tooltip\"",
          "796:   >",
          "797:    <div class=\"flex w-full justify-between\">",
          "798:     <div class=\" self-center text-xs font-medium\">",
          "800:     </div>",
          "802:     <button",
          "804:      type=\"button\"",
          "805:      on:click={() => {",
          "807:      }}",
          "808:     >",
          "810:       <span class=\"ml-2 self-center\">{$i18n.t('Default')}</span>",
          "811:      {:else}",
          "812:       <span class=\"ml-2 self-center\">{$i18n.t('Custom')}</span>",
          "",
          "[Removed Lines]",
          "791:    content={$i18n.t(",
          "792:     'Control the repetition of token sequences in the generated text. A higher value (e.g., 1.5) will penalize repetitions more strongly, while a lower value (e.g., 1.1) will be more lenient. At 1, it is disabled.'",
          "793:    )}",
          "799:      {$i18n.t('Repeat Penalty (Ollama)')}",
          "803:      class=\"p-1 px-3 text-xs flex rounded transition flex-shrink-0 outline-none\"",
          "806:       params.repeat_penalty = (params?.repeat_penalty ?? null) === null ? 1.1 : null;",
          "809:      {#if (params?.repeat_penalty ?? null) === null}",
          "",
          "[Added Lines]",
          "791:    content={$i18n.t('Sets how far back for the model to look back to prevent repetition.')}",
          "797:      {$i18n.t('Repeat Last N')}",
          "801:      class=\"p-1 px-3 text-xs flex rounded-sm transition shrink-0 outline-hidden\"",
          "804:       params.repeat_last_n = (params?.repeat_last_n ?? null) === null ? 64 : null;",
          "807:      {#if (params?.repeat_last_n ?? null) === null}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "815:    </div>",
          "816:   </Tooltip>",
          "819:    <div class=\"flex mt-0.5 space-x-2\">",
          "820:     <div class=\" flex-1\">",
          "821:      <input",
          "822:       id=\"steps-range\"",
          "823:       type=\"range\"",
          "828:       class=\"w-full h-2 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"",
          "829:      />",
          "830:     </div>",
          "831:     <div>",
          "832:      <input",
          "834:       type=\"number\"",
          "835:       class=\" bg-transparent text-center w-14\"",
          "839:      />",
          "840:     </div>",
          "841:    </div>",
          "",
          "[Removed Lines]",
          "818:   {#if (params?.repeat_penalty ?? null) !== null}",
          "824:       min=\"-2\"",
          "825:       max=\"2\"",
          "826:       step=\"0.05\"",
          "827:       bind:value={params.repeat_penalty}",
          "833:       bind:value={params.repeat_penalty}",
          "836:       min=\"-2\"",
          "837:       max=\"2\"",
          "838:       step=\"any\"",
          "",
          "[Added Lines]",
          "816:   {#if (params?.repeat_last_n ?? null) !== null}",
          "822:       min=\"-1\"",
          "823:       max=\"128\"",
          "824:       step=\"1\"",
          "825:       bind:value={params.repeat_last_n}",
          "831:       bind:value={params.repeat_last_n}",
          "834:       min=\"-1\"",
          "835:       max=\"128\"",
          "836:       step=\"1\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "845:  <div class=\" py-0.5 w-full justify-between\">",
          "846:   <Tooltip",
          "848:    placement=\"top-start\"",
          "849:    className=\"inline-tooltip\"",
          "850:   >",
          "851:    <div class=\"flex w-full justify-between\">",
          "852:     <div class=\" self-center text-xs font-medium\">",
          "854:     </div>",
          "856:     <button",
          "857:      class=\"p-1 px-3 text-xs flex rounded-sm transition shrink-0 outline-hidden\"",
          "858:      type=\"button\"",
          "859:      on:click={() => {",
          "861:      }}",
          "862:     >",
          "864:       <span class=\"ml-2 self-center\">{$i18n.t('Default')}</span>",
          "865:      {:else}",
          "866:       <span class=\"ml-2 self-center\">{$i18n.t('Custom')}</span>",
          "",
          "[Removed Lines]",
          "847:    content={$i18n.t('Sets how far back for the model to look back to prevent repetition.')}",
          "853:      {$i18n.t('Repeat Last N')}",
          "860:       params.repeat_last_n = (params?.repeat_last_n ?? null) === null ? 64 : null;",
          "863:      {#if (params?.repeat_last_n ?? null) === null}",
          "",
          "[Added Lines]",
          "845:    content={$i18n.t(",
          "846:     'Tail free sampling is used to reduce the impact of less probable tokens from the output. A higher value (e.g., 2.0) will reduce the impact more, while a value of 1.0 disables this setting.'",
          "847:    )}",
          "853:      {$i18n.t('Tfs Z')}",
          "860:       params.tfs_z = (params?.tfs_z ?? null) === null ? 1 : null;",
          "863:      {#if (params?.tfs_z ?? null) === null}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "869:    </div>",
          "870:   </Tooltip>",
          "873:    <div class=\"flex mt-0.5 space-x-2\">",
          "874:     <div class=\" flex-1\">",
          "875:      <input",
          "876:       id=\"steps-range\"",
          "877:       type=\"range\"",
          "882:       class=\"w-full h-2 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"",
          "883:      />",
          "884:     </div>",
          "885:     <div>",
          "886:      <input",
          "888:       type=\"number\"",
          "889:       class=\" bg-transparent text-center w-14\"",
          "893:      />",
          "894:     </div>",
          "895:    </div>",
          "",
          "[Removed Lines]",
          "872:   {#if (params?.repeat_last_n ?? null) !== null}",
          "878:       min=\"-1\"",
          "879:       max=\"128\"",
          "880:       step=\"1\"",
          "881:       bind:value={params.repeat_last_n}",
          "887:       bind:value={params.repeat_last_n}",
          "890:       min=\"-1\"",
          "891:       max=\"128\"",
          "892:       step=\"1\"",
          "",
          "[Added Lines]",
          "872:   {#if (params?.tfs_z ?? null) !== null}",
          "878:       min=\"0\"",
          "879:       max=\"2\"",
          "880:       step=\"0.05\"",
          "881:       bind:value={params.tfs_z}",
          "887:       bind:value={params.tfs_z}",
          "890:       min=\"0\"",
          "891:       max=\"2\"",
          "892:       step=\"any\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "899:  <div class=\" py-0.5 w-full justify-between\">",
          "900:   <Tooltip",
          "901:    content={$i18n.t(",
          "903:    )}",
          "904:    placement=\"top-start\"",
          "905:    className=\"inline-tooltip\"",
          "906:   >",
          "907:    <div class=\"flex w-full justify-between\">",
          "908:     <div class=\" self-center text-xs font-medium\">",
          "910:     </div>",
          "912:     <button",
          "913:      class=\"p-1 px-3 text-xs flex rounded-sm transition shrink-0 outline-hidden\"",
          "914:      type=\"button\"",
          "915:      on:click={() => {",
          "917:      }}",
          "918:     >",
          "920:       <span class=\"ml-2 self-center\">{$i18n.t('Default')}</span>",
          "921:      {:else}",
          "922:       <span class=\"ml-2 self-center\">{$i18n.t('Custom')}</span>",
          "",
          "[Removed Lines]",
          "902:     'Tail free sampling is used to reduce the impact of less probable tokens from the output. A higher value (e.g., 2.0) will reduce the impact more, while a value of 1.0 disables this setting.'",
          "909:      {$i18n.t('Tfs Z')}",
          "916:       params.tfs_z = (params?.tfs_z ?? null) === null ? 1 : null;",
          "919:      {#if (params?.tfs_z ?? null) === null}",
          "",
          "[Added Lines]",
          "902:     'This option controls how many tokens are preserved when refreshing the context. For example, if set to 2, the last 2 tokens of the conversation context will be retained. Preserving context can help maintain the continuity of a conversation, but it may reduce the ability to respond to new topics.'",
          "909:      {$i18n.t('Tokens To Keep On Context Refresh (num_keep)')}",
          "916:       params.num_keep = (params?.num_keep ?? null) === null ? 24 : null;",
          "919:      {#if (params?.num_keep ?? null) === null}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "925:    </div>",
          "926:   </Tooltip>",
          "929:    <div class=\"flex mt-0.5 space-x-2\">",
          "930:     <div class=\" flex-1\">",
          "931:      <input",
          "932:       id=\"steps-range\"",
          "933:       type=\"range\"",
          "938:       class=\"w-full h-2 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"",
          "939:      />",
          "940:     </div>",
          "942:      <input",
          "944:       type=\"number\"",
          "945:       class=\" bg-transparent text-center w-14\"",
          "949:      />",
          "950:     </div>",
          "951:    </div>",
          "",
          "[Removed Lines]",
          "928:   {#if (params?.tfs_z ?? null) !== null}",
          "934:       min=\"0\"",
          "935:       max=\"2\"",
          "936:       step=\"0.05\"",
          "937:       bind:value={params.tfs_z}",
          "941:     <div>",
          "943:       bind:value={params.tfs_z}",
          "946:       min=\"0\"",
          "947:       max=\"2\"",
          "948:       step=\"any\"",
          "",
          "[Added Lines]",
          "928:   {#if (params?.num_keep ?? null) !== null}",
          "934:       min=\"-1\"",
          "935:       max=\"10240000\"",
          "936:       step=\"1\"",
          "937:       bind:value={params.num_keep}",
          "941:     <div class=\"\">",
          "943:       bind:value={params.num_keep}",
          "946:       min=\"-1\"",
          "947:       step=\"1\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "955:  <div class=\" py-0.5 w-full justify-between\">",
          "956:   <Tooltip",
          "958:    placement=\"top-start\"",
          "959:    className=\"inline-tooltip\"",
          "960:   >",
          "961:    <div class=\"flex w-full justify-between\">",
          "962:     <div class=\" self-center text-xs font-medium\">",
          "965:     </div>",
          "967:     <button",
          "968:      class=\"p-1 px-3 text-xs flex rounded-sm transition shrink-0 outline-hidden\"",
          "969:      type=\"button\"",
          "970:      on:click={() => {",
          "972:      }}",
          "973:     >",
          "975:       <span class=\"ml-2 self-center\">{$i18n.t('Default')}</span>",
          "976:      {:else}",
          "977:       <span class=\"ml-2 self-center\">{$i18n.t('Custom')}</span>",
          "",
          "[Removed Lines]",
          "957:    content={$i18n.t('Sets the size of the context window used to generate the next token.')}",
          "963:      {$i18n.t('Context Length')}",
          "964:      {$i18n.t('(Ollama)')}",
          "971:       params.num_ctx = (params?.num_ctx ?? null) === null ? 2048 : null;",
          "974:      {#if (params?.num_ctx ?? null) === null}",
          "",
          "[Added Lines]",
          "956:    content={$i18n.t(",
          "957:     'This option sets the maximum number of tokens the model can generate in its response. Increasing this limit allows the model to provide longer answers, but it may also increase the likelihood of unhelpful or irrelevant content being generated.'",
          "958:    )}",
          "964:      {$i18n.t('Max Tokens (num_predict)')}",
          "971:       params.max_tokens = (params?.max_tokens ?? null) === null ? 128 : null;",
          "974:      {#if (params?.max_tokens ?? null) === null}",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "980:    </div>",
          "981:   </Tooltip>",
          "984:    <div class=\"flex mt-0.5 space-x-2\">",
          "985:     <div class=\" flex-1\">",
          "986:      <input",
          "987:       id=\"steps-range\"",
          "988:       type=\"range\"",
          "991:       step=\"1\"",
          "993:       class=\"w-full h-2 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"",
          "994:      />",
          "995:     </div>",
          "997:      <input",
          "999:       type=\"number\"",
          "1000:       class=\" bg-transparent text-center w-14\"",
          "1002:       step=\"1\"",
          "1003:      />",
          "1004:     </div>",
          "",
          "[Removed Lines]",
          "983:   {#if (params?.num_ctx ?? null) !== null}",
          "989:       min=\"-1\"",
          "990:       max=\"10240000\"",
          "992:       bind:value={params.num_ctx}",
          "996:     <div class=\"\">",
          "998:       bind:value={params.num_ctx}",
          "1001:       min=\"-1\"",
          "",
          "[Added Lines]",
          "983:   {#if (params?.max_tokens ?? null) !== null}",
          "989:       min=\"-2\"",
          "990:       max=\"131072\"",
          "992:       bind:value={params.max_tokens}",
          "996:     <div>",
          "998:       bind:value={params.max_tokens}",
          "1001:       min=\"-2\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1009:  <div class=\" py-0.5 w-full justify-between\">",
          "1010:   <Tooltip",
          "1011:    content={$i18n.t(",
          "1013:    )}",
          "1014:    placement=\"top-start\"",
          "1015:    className=\"inline-tooltip\"",
          "1016:   >",
          "1017:    <div class=\"flex w-full justify-between\">",
          "1018:     <div class=\" self-center text-xs font-medium\">",
          "1020:     </div>",
          "1022:     <button",
          "1024:      type=\"button\"",
          "1025:      on:click={() => {",
          "1027:      }}",
          "1028:     >",
          "1030:       <span class=\"ml-2 self-center\">{$i18n.t('Default')}</span>",
          "1031:      {:else}",
          "1032:       <span class=\"ml-2 self-center\">{$i18n.t('Custom')}</span>",
          "",
          "[Removed Lines]",
          "1012:     'The batch size determines how many text requests are processed together at once. A higher batch size can increase the performance and speed of the model, but it also requires more memory.'",
          "1019:      {$i18n.t('Batch Size (num_batch)')}",
          "1023:      class=\"p-1 px-3 text-xs flex rounded-sm transition shrink-0 outline-hidden\"",
          "1026:       params.num_batch = (params?.num_batch ?? null) === null ? 512 : null;",
          "1029:      {#if (params?.num_batch ?? null) === null}",
          "",
          "[Added Lines]",
          "1012:     'Control the repetition of token sequences in the generated text. A higher value (e.g., 1.5) will penalize repetitions more strongly, while a lower value (e.g., 1.1) will be more lenient. At 1, it is disabled.'",
          "1019:      {$i18n.t('Repeat Penalty (Ollama)')}",
          "1023:      class=\"p-1 px-3 text-xs flex rounded transition flex-shrink-0 outline-none\"",
          "1026:       params.repeat_penalty = (params?.repeat_penalty ?? null) === null ? 1.1 : null;",
          "1029:      {#if (params?.repeat_penalty ?? null) === null}",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1035:    </div>",
          "1036:   </Tooltip>",
          "1039:    <div class=\"flex mt-0.5 space-x-2\">",
          "1040:     <div class=\" flex-1\">",
          "1041:      <input",
          "1042:       id=\"steps-range\"",
          "1043:       type=\"range\"",
          "1048:       class=\"w-full h-2 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"",
          "1049:      />",
          "1050:     </div>",
          "1051:     <div>",
          "1052:      <input",
          "1054:       type=\"number\"",
          "1055:       class=\" bg-transparent text-center w-14\"",
          "1058:      />",
          "1059:     </div>",
          "1060:    </div>",
          "",
          "[Removed Lines]",
          "1038:   {#if (params?.num_batch ?? null) !== null}",
          "1044:       min=\"256\"",
          "1045:       max=\"8192\"",
          "1046:       step=\"256\"",
          "1047:       bind:value={params.num_batch}",
          "1053:       bind:value={params.num_batch}",
          "1056:       min=\"256\"",
          "1057:       step=\"256\"",
          "",
          "[Added Lines]",
          "1038:   {#if (params?.repeat_penalty ?? null) !== null}",
          "1044:       min=\"-2\"",
          "1045:       max=\"2\"",
          "1046:       step=\"0.05\"",
          "1047:       bind:value={params.repeat_penalty}",
          "1053:       bind:value={params.repeat_penalty}",
          "1056:       min=\"-2\"",
          "1057:       max=\"2\"",
          "1058:       step=\"any\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1064:  <div class=\" py-0.5 w-full justify-between\">",
          "1065:   <Tooltip",
          "1069:    placement=\"top-start\"",
          "1070:    className=\"inline-tooltip\"",
          "1071:   >",
          "1072:    <div class=\"flex w-full justify-between\">",
          "1073:     <div class=\" self-center text-xs font-medium\">",
          "1075:     </div>",
          "1077:     <button",
          "1078:      class=\"p-1 px-3 text-xs flex rounded-sm transition shrink-0 outline-hidden\"",
          "1079:      type=\"button\"",
          "1080:      on:click={() => {",
          "1082:      }}",
          "1083:     >",
          "1085:       <span class=\"ml-2 self-center\">{$i18n.t('Default')}</span>",
          "1086:      {:else}",
          "1087:       <span class=\"ml-2 self-center\">{$i18n.t('Custom')}</span>",
          "",
          "[Removed Lines]",
          "1066:    content={$i18n.t(",
          "1067:     'This option controls how many tokens are preserved when refreshing the context. For example, if set to 2, the last 2 tokens of the conversation context will be retained. Preserving context can help maintain the continuity of a conversation, but it may reduce the ability to respond to new topics.'",
          "1068:    )}",
          "1074:      {$i18n.t('Tokens To Keep On Context Refresh (num_keep)')}",
          "1081:       params.num_keep = (params?.num_keep ?? null) === null ? 24 : null;",
          "1084:      {#if (params?.num_keep ?? null) === null}",
          "",
          "[Added Lines]",
          "1067:    content={$i18n.t('Sets the size of the context window used to generate the next token.')}",
          "1073:      {$i18n.t('Context Length')}",
          "1074:      {$i18n.t('(Ollama)')}",
          "1081:       params.num_ctx = (params?.num_ctx ?? null) === null ? 2048 : null;",
          "1084:      {#if (params?.num_ctx ?? null) === null}",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1090:    </div>",
          "1091:   </Tooltip>",
          "1094:    <div class=\"flex mt-0.5 space-x-2\">",
          "1095:     <div class=\" flex-1\">",
          "1096:      <input",
          "",
          "[Removed Lines]",
          "1093:   {#if (params?.num_keep ?? null) !== null}",
          "",
          "[Added Lines]",
          "1093:   {#if (params?.num_ctx ?? null) !== null}",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1099:       min=\"-1\"",
          "1100:       max=\"10240000\"",
          "1101:       step=\"1\"",
          "1103:       class=\"w-full h-2 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"",
          "1104:      />",
          "1105:     </div>",
          "1106:     <div class=\"\">",
          "1107:      <input",
          "1109:       type=\"number\"",
          "1110:       class=\" bg-transparent text-center w-14\"",
          "1111:       min=\"-1\"",
          "",
          "[Removed Lines]",
          "1102:       bind:value={params.num_keep}",
          "1108:       bind:value={params.num_keep}",
          "",
          "[Added Lines]",
          "1102:       bind:value={params.num_ctx}",
          "1108:       bind:value={params.num_ctx}",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1119:  <div class=\" py-0.5 w-full justify-between\">",
          "1120:   <Tooltip",
          "1121:    content={$i18n.t(",
          "1123:    )}",
          "1124:    placement=\"top-start\"",
          "1125:    className=\"inline-tooltip\"",
          "1126:   >",
          "1127:    <div class=\"flex w-full justify-between\">",
          "1128:     <div class=\" self-center text-xs font-medium\">",
          "1130:     </div>",
          "1132:     <button",
          "1133:      class=\"p-1 px-3 text-xs flex rounded-sm transition shrink-0 outline-hidden\"",
          "1134:      type=\"button\"",
          "1135:      on:click={() => {",
          "1137:      }}",
          "1138:     >",
          "1140:       <span class=\"ml-2 self-center\">{$i18n.t('Default')}</span>",
          "1141:      {:else}",
          "1142:       <span class=\"ml-2 self-center\">{$i18n.t('Custom')}</span>",
          "",
          "[Removed Lines]",
          "1122:     'This option sets the maximum number of tokens the model can generate in its response. Increasing this limit allows the model to provide longer answers, but it may also increase the likelihood of unhelpful or irrelevant content being generated.'",
          "1129:      {$i18n.t('Max Tokens (num_predict)')}",
          "1136:       params.max_tokens = (params?.max_tokens ?? null) === null ? 128 : null;",
          "1139:      {#if (params?.max_tokens ?? null) === null}",
          "",
          "[Added Lines]",
          "1122:     'The batch size determines how many text requests are processed together at once. A higher batch size can increase the performance and speed of the model, but it also requires more memory.'",
          "1129:      {$i18n.t('Batch Size (num_batch)')}",
          "1136:       params.num_batch = (params?.num_batch ?? null) === null ? 512 : null;",
          "1139:      {#if (params?.num_batch ?? null) === null}",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1145:    </div>",
          "1146:   </Tooltip>",
          "1149:    <div class=\"flex mt-0.5 space-x-2\">",
          "1150:     <div class=\" flex-1\">",
          "1151:      <input",
          "1152:       id=\"steps-range\"",
          "1153:       type=\"range\"",
          "1158:       class=\"w-full h-2 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"",
          "1159:      />",
          "1160:     </div>",
          "1161:     <div>",
          "1162:      <input",
          "1164:       type=\"number\"",
          "1165:       class=\" bg-transparent text-center w-14\"",
          "1168:      />",
          "1169:     </div>",
          "1170:    </div>",
          "",
          "[Removed Lines]",
          "1148:   {#if (params?.max_tokens ?? null) !== null}",
          "1154:       min=\"-2\"",
          "1155:       max=\"131072\"",
          "1156:       step=\"1\"",
          "1157:       bind:value={params.max_tokens}",
          "1163:       bind:value={params.max_tokens}",
          "1166:       min=\"-2\"",
          "1167:       step=\"1\"",
          "",
          "[Added Lines]",
          "1148:   {#if (params?.num_batch ?? null) !== null}",
          "1154:       min=\"256\"",
          "1155:       max=\"8192\"",
          "1156:       step=\"256\"",
          "1157:       bind:value={params.num_batch}",
          "1163:       bind:value={params.num_batch}",
          "1166:       min=\"256\"",
          "1167:       step=\"256\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}