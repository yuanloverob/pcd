{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5d3249848ddad7ad2174acb00cc7a083517f1c28",
      "candidate_info": {
        "commit_hash": "5d3249848ddad7ad2174acb00cc7a083517f1c28",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/5d3249848ddad7ad2174acb00cc7a083517f1c28",
        "files": [
          "src/lib/components/chat/MessageInput.svelte"
        ],
        "message": "refac: allow image only message via enter",
        "before_after_code_files": [
          "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte": [
          "File: src/lib/components/chat/MessageInput.svelte -> src/lib/components/chat/MessageInput.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "828:                }",
          "832:                 dispatch('submit', prompt);",
          "833:                }",
          "834:               }",
          "",
          "[Removed Lines]",
          "831:                if (prompt !== '' && e.keyCode === 13 && !e.shiftKey) {",
          "",
          "[Added Lines]",
          "831:                if (",
          "832:                 (prompt !== '' || files.length > 0) &&",
          "833:                 e.keyCode === 13 &&",
          "834:                 !e.shiftKey",
          "835:                ) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "907:              }",
          "911:               dispatch('submit', prompt);",
          "912:              }",
          "913:             }",
          "",
          "[Removed Lines]",
          "910:              if (prompt !== '' && e.key === 'Enter' && !e.shiftKey) {",
          "",
          "[Added Lines]",
          "914:              if (",
          "915:               (prompt !== '' || files.length > 0) &&",
          "916:               e.key === 'Enter' &&",
          "917:               !e.shiftKey",
          "918:              ) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40ddd172e0312aaa8e327d6c7e05c927bc95dfe2",
      "candidate_info": {
        "commit_hash": "40ddd172e0312aaa8e327d6c7e05c927bc95dfe2",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/40ddd172e0312aaa8e327d6c7e05c927bc95dfe2",
        "files": [
          "src/lib/components/admin/Settings/WebSearch.svelte"
        ],
        "message": "refac: web search settings ui",
        "before_after_code_files": [
          "src/lib/components/admin/Settings/WebSearch.svelte||src/lib/components/admin/Settings/WebSearch.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Settings/WebSearch.svelte||src/lib/components/admin/Settings/WebSearch.svelte": [
          "File: src/lib/components/admin/Settings/WebSearch.svelte -> src/lib/components/admin/Settings/WebSearch.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: >",
          "86:  <div class=\" space-y-3 overflow-y-scroll scrollbar-hidden h-full\">",
          "87:   {#if webConfig}",
          "95:       <div class=\" self-center text-xs font-medium\">",
          "97:       </div>",
          "134:      </div>",
          "147:      </div>",
          "152:       {#if webConfig.search.engine === 'searxng'}",
          "167:          </div>",
          "168:         </div>",
          "169:        </div>",
          "170:       {:else if webConfig.search.engine === 'google_pse'}",
          "184:         </div>",
          "195:          </div>",
          "196:         </div>",
          "197:        </div>",
          "198:       {:else if webConfig.search.engine === 'brave'}",
          "208:        </div>",
          "209:       {:else if webConfig.search.engine === 'kagi'}",
          "219:        </div>",
          "220:       {:else if webConfig.search.engine === 'mojeek'}",
          "230:        </div>",
          "231:       {:else if webConfig.search.engine === 'bocha'}",
          "241:        </div>",
          "242:       {:else if webConfig.search.engine === 'serpstack'}",
          "252:        </div>",
          "253:       {:else if webConfig.search.engine === 'serper'}",
          "263:        </div>",
          "264:       {:else if webConfig.search.engine === 'serply'}",
          "274:        </div>",
          "275:       {:else if webConfig.search.engine === 'searchapi'}",
          "289:         </div>",
          "300:          </div>",
          "301:         </div>",
          "302:        </div>",
          "303:       {:else if webConfig.search.engine === 'serpapi'}",
          "317:         </div>",
          "328:          </div>",
          "329:         </div>",
          "330:        </div>",
          "331:       {:else if webConfig.search.engine === 'tavily'}",
          "341:        </div>",
          "342:       {:else if webConfig.search.engine === 'jina'}",
          "352:        </div>",
          "353:       {:else if webConfig.search.engine === 'exa'}",
          "363:        </div>",
          "364:       {:else if webConfig.search.engine === 'bing'}",
          "368:         </div>",
          "379:          </div>",
          "380:         </div>",
          "381:        </div>",
          "386:         </div>",
          "402:        </div>",
          "410:       </div>",
          "415:        </div>",
          "417:        <input",
          "418:         class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "422:        />",
          "423:       </div>",
          "429:       </div>",
          "438:      </div>",
          "451:       <div class=\" self-center text-xs font-medium\">",
          "452:        {$i18n.t('Bypass SSL verification for Websites')}",
          "453:       </div>",
          "470:      </div>",
          "481:        <input",
          "483:         type=\"text\"",
          "484:         placeholder={$i18n.t('Enter language codes')}",
          "485:         bind:value={youtubeLanguage}",
          "",
          "[Removed Lines]",
          "88:    <div>",
          "89:     <div class=\" mb-1 text-sm font-medium\">",
          "90:      {$i18n.t('Web Search')}",
          "91:     </div>",
          "93:     <div>",
          "94:      <div class=\" py-0.5 flex w-full justify-between\">",
          "96:        {$i18n.t('Enable Web Search')}",
          "99:       <Switch bind:state={webConfig.search.enabled} />",
          "100:      </div>",
          "101:     </div>",
          "103:     <div class=\" py-0.5 flex w-full justify-between\">",
          "104:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Web Search Engine')}</div>",
          "105:      <div class=\"flex items-center relative\">",
          "106:       <select",
          "107:        class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 p-1 text-xs bg-transparent outline-hidden text-right\"",
          "108:        bind:value={webConfig.search.engine}",
          "109:        placeholder={$i18n.t('Select a engine')}",
          "110:        required",
          "111:       >",
          "112:        <option disabled selected value=\"\">{$i18n.t('Select a engine')}</option>",
          "113:        {#each webSearchEngines as engine}",
          "114:         <option value={engine}>{engine}</option>",
          "115:        {/each}",
          "116:       </select>",
          "117:      </div>",
          "118:     </div>",
          "120:     <div class=\" py-0.5 flex w-full justify-between\">",
          "121:      <div class=\" self-center text-xs font-medium\">",
          "122:       <Tooltip content={$i18n.t('Full Context Mode')} placement=\"top-start\">",
          "123:        {$i18n.t('Bypass Embedding and Retrieval')}",
          "124:       </Tooltip>",
          "125:      </div>",
          "126:      <div class=\"flex items-center relative\">",
          "127:       <Tooltip",
          "128:        content={webConfig.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL",
          "129:         ? 'Inject the entire content as context for comprehensive processing, this is recommended for complex queries.'",
          "130:         : 'Default to segmented retrieval for focused and relevant content extraction, this is recommended for most cases.'}",
          "131:       >",
          "132:        <Switch bind:state={webConfig.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL} />",
          "133:       </Tooltip>",
          "135:     </div>",
          "137:     <div class=\" py-0.5 flex w-full justify-between\">",
          "138:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Trust Proxy Environment')}</div>",
          "139:      <div class=\"flex items-center relative\">",
          "140:       <Tooltip",
          "141:        content={webConfig.search.trust_env",
          "142:         ? 'Use proxy designated by http_proxy and https_proxy environment variables to fetch page contents'",
          "143:         : 'Use no proxy to fetch page contents.'}",
          "144:       >",
          "145:        <Switch bind:state={webConfig.search.trust_env} />",
          "146:       </Tooltip>",
          "148:     </div>",
          "150:     {#if webConfig.search.engine !== ''}",
          "151:      <div class=\"mt-1.5\">",
          "153:        <div>",
          "154:         <div class=\" self-center text-xs font-medium mb-1\">",
          "155:          {$i18n.t('Searxng Query URL')}",
          "156:         </div>",
          "158:         <div class=\"flex w-full\">",
          "159:          <div class=\"flex-1\">",
          "160:           <input",
          "161:            class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "162:            type=\"text\"",
          "163:            placeholder={$i18n.t('Enter Searxng Query URL')}",
          "164:            bind:value={webConfig.search.searxng_query_url}",
          "165:            autocomplete=\"off\"",
          "166:           />",
          "171:        <div>",
          "172:         <div class=\" self-center text-xs font-medium mb-1\">",
          "173:          {$i18n.t('Google PSE API Key')}",
          "174:         </div>",
          "176:         <SensitiveInput",
          "177:          placeholder={$i18n.t('Enter Google PSE API Key')}",
          "178:          bind:value={webConfig.search.google_pse_api_key}",
          "179:         />",
          "180:        </div>",
          "181:        <div class=\"mt-1.5\">",
          "182:         <div class=\" self-center text-xs font-medium mb-1\">",
          "183:          {$i18n.t('Google PSE Engine Id')}",
          "186:         <div class=\"flex w-full\">",
          "187:          <div class=\"flex-1\">",
          "188:           <input",
          "189:            class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "190:            type=\"text\"",
          "191:            placeholder={$i18n.t('Enter Google PSE Engine Id')}",
          "192:            bind:value={webConfig.search.google_pse_engine_id}",
          "193:            autocomplete=\"off\"",
          "194:           />",
          "199:        <div>",
          "200:         <div class=\" self-center text-xs font-medium mb-1\">",
          "201:          {$i18n.t('Brave Search API Key')}",
          "202:         </div>",
          "204:         <SensitiveInput",
          "205:          placeholder={$i18n.t('Enter Brave Search API Key')}",
          "206:          bind:value={webConfig.search.brave_search_api_key}",
          "207:         />",
          "210:        <div>",
          "211:         <div class=\" self-center text-xs font-medium mb-1\">",
          "212:          {$i18n.t('Kagi Search API Key')}",
          "213:         </div>",
          "215:         <SensitiveInput",
          "216:          placeholder={$i18n.t('Enter Kagi Search API Key')}",
          "217:          bind:value={webConfig.search.kagi_search_api_key}",
          "218:         />",
          "221:        <div>",
          "222:         <div class=\" self-center text-xs font-medium mb-1\">",
          "223:          {$i18n.t('Mojeek Search API Key')}",
          "224:         </div>",
          "226:         <SensitiveInput",
          "227:          placeholder={$i18n.t('Enter Mojeek Search API Key')}",
          "228:          bind:value={webConfig.search.mojeek_search_api_key}",
          "229:         />",
          "232:        <div>",
          "233:         <div class=\" self-center text-xs font-medium mb-1\">",
          "234:          {$i18n.t('Bocha Search API Key')}",
          "235:         </div>",
          "237:         <SensitiveInput",
          "238:          placeholder={$i18n.t('Enter Bocha Search API Key')}",
          "239:          bind:value={webConfig.search.bocha_search_api_key}",
          "240:         />",
          "243:        <div>",
          "244:         <div class=\" self-center text-xs font-medium mb-1\">",
          "245:          {$i18n.t('Serpstack API Key')}",
          "246:         </div>",
          "248:         <SensitiveInput",
          "249:          placeholder={$i18n.t('Enter Serpstack API Key')}",
          "250:          bind:value={webConfig.search.serpstack_api_key}",
          "251:         />",
          "254:        <div>",
          "255:         <div class=\" self-center text-xs font-medium mb-1\">",
          "256:          {$i18n.t('Serper API Key')}",
          "257:         </div>",
          "259:         <SensitiveInput",
          "260:          placeholder={$i18n.t('Enter Serper API Key')}",
          "261:          bind:value={webConfig.search.serper_api_key}",
          "262:         />",
          "265:        <div>",
          "266:         <div class=\" self-center text-xs font-medium mb-1\">",
          "267:          {$i18n.t('Serply API Key')}",
          "268:         </div>",
          "270:         <SensitiveInput",
          "271:          placeholder={$i18n.t('Enter Serply API Key')}",
          "272:          bind:value={webConfig.search.serply_api_key}",
          "273:         />",
          "276:        <div>",
          "277:         <div class=\" self-center text-xs font-medium mb-1\">",
          "278:          {$i18n.t('SearchApi API Key')}",
          "279:         </div>",
          "281:         <SensitiveInput",
          "282:          placeholder={$i18n.t('Enter SearchApi API Key')}",
          "283:          bind:value={webConfig.search.searchapi_api_key}",
          "284:         />",
          "285:        </div>",
          "286:        <div class=\"mt-1.5\">",
          "287:         <div class=\" self-center text-xs font-medium mb-1\">",
          "288:          {$i18n.t('SearchApi Engine')}",
          "291:         <div class=\"flex w-full\">",
          "292:          <div class=\"flex-1\">",
          "293:           <input",
          "294:            class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "295:            type=\"text\"",
          "296:            placeholder={$i18n.t('Enter SearchApi Engine')}",
          "297:            bind:value={webConfig.search.searchapi_engine}",
          "298:            autocomplete=\"off\"",
          "299:           />",
          "304:        <div>",
          "305:         <div class=\" self-center text-xs font-medium mb-1\">",
          "306:          {$i18n.t('SerpApi API Key')}",
          "307:         </div>",
          "309:         <SensitiveInput",
          "310:          placeholder={$i18n.t('Enter SerpApi API Key')}",
          "311:          bind:value={webConfig.search.serpapi_api_key}",
          "312:         />",
          "313:        </div>",
          "314:        <div class=\"mt-1.5\">",
          "315:         <div class=\" self-center text-xs font-medium mb-1\">",
          "316:          {$i18n.t('SerpApi Engine')}",
          "319:         <div class=\"flex w-full\">",
          "320:          <div class=\"flex-1\">",
          "321:           <input",
          "322:            class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "323:            type=\"text\"",
          "324:            placeholder={$i18n.t('Enter SerpApi Engine')}",
          "325:            bind:value={webConfig.search.serpapi_engine}",
          "326:            autocomplete=\"off\"",
          "327:           />",
          "332:        <div>",
          "333:         <div class=\" self-center text-xs font-medium mb-1\">",
          "334:          {$i18n.t('Tavily API Key')}",
          "335:         </div>",
          "337:         <SensitiveInput",
          "338:          placeholder={$i18n.t('Enter Tavily API Key')}",
          "339:          bind:value={webConfig.search.tavily_api_key}",
          "340:         />",
          "343:        <div>",
          "344:         <div class=\" self-center text-xs font-medium mb-1\">",
          "345:          {$i18n.t('Jina API Key')}",
          "346:         </div>",
          "348:         <SensitiveInput",
          "349:          placeholder={$i18n.t('Enter Jina API Key')}",
          "350:          bind:value={webConfig.search.jina_api_key}",
          "351:         />",
          "354:        <div>",
          "355:         <div class=\" self-center text-xs font-medium mb-1\">",
          "356:          {$i18n.t('Exa API Key')}",
          "357:         </div>",
          "359:         <SensitiveInput",
          "360:          placeholder={$i18n.t('Enter Exa API Key')}",
          "361:          bind:value={webConfig.search.exa_api_key}",
          "362:         />",
          "365:        <div>",
          "366:         <div class=\" self-center text-xs font-medium mb-1\">",
          "367:          {$i18n.t('Bing Search V7 Endpoint')}",
          "370:         <div class=\"flex w-full\">",
          "371:          <div class=\"flex-1\">",
          "372:           <input",
          "373:            class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "374:            type=\"text\"",
          "375:            placeholder={$i18n.t('Enter Bing Search V7 Endpoint')}",
          "376:            bind:value={webConfig.search.bing_search_v7_endpoint}",
          "377:            autocomplete=\"off\"",
          "378:           />",
          "383:        <div class=\"mt-2\">",
          "384:         <div class=\" self-center text-xs font-medium mb-1\">",
          "385:          {$i18n.t('Bing Search V7 Subscription Key')}",
          "388:         <SensitiveInput",
          "389:          placeholder={$i18n.t('Enter Bing Search V7 Subscription Key')}",
          "390:          bind:value={webConfig.search.bing_search_v7_subscription_key}",
          "391:         />",
          "392:        </div>",
          "393:       {/if}",
          "394:      </div>",
          "395:     {/if}",
          "397:     {#if webConfig.search.enabled}",
          "398:      <div class=\"mt-2 flex gap-2 mb-1\">",
          "399:       <div class=\"w-full\">",
          "400:        <div class=\" self-center text-xs font-medium mb-1\">",
          "401:         {$i18n.t('Search Result Count')}",
          "404:        <input",
          "405:         class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "406:         placeholder={$i18n.t('Search Result Count')}",
          "407:         bind:value={webConfig.search.result_count}",
          "408:         required",
          "409:        />",
          "412:       <div class=\"w-full\">",
          "413:        <div class=\" self-center text-xs font-medium mb-1\">",
          "414:         {$i18n.t('Concurrent Requests')}",
          "419:         placeholder={$i18n.t('Concurrent Requests')}",
          "420:         bind:value={webConfig.search.concurrent_requests}",
          "421:         required",
          "424:      </div>",
          "426:      <div class=\"mt-2\">",
          "427:       <div class=\" self-center text-xs font-medium mb-1\">",
          "428:        {$i18n.t('Domain Filter List')}",
          "431:       <input",
          "432:        class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "433:        placeholder={$i18n.t(",
          "434:         'Enter domains separated by commas (e.g., example.com,site.org)'",
          "435:        )}",
          "436:        bind:value={webConfig.search.domain_filter_list}",
          "437:       />",
          "439:     {/if}",
          "440:    </div>",
          "442:    <hr class=\"border-gray-100 dark:border-gray-850 my-2\" />",
          "444:    <div>",
          "445:     <div class=\" mb-1 text-sm font-medium\">",
          "446:      {$i18n.t('Web Loader Settings')}",
          "447:     </div>",
          "449:     <div>",
          "450:      <div class=\" py-0.5 flex w-full justify-between\">",
          "455:       <button",
          "456:        class=\"p-1 px-3 text-xs flex rounded-sm transition\"",
          "457:        on:click={() => {",
          "458:         webConfig.ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION =",
          "459:          !webConfig.ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION;",
          "460:         submitHandler();",
          "461:        }}",
          "462:        type=\"button\"",
          "463:       >",
          "464:        {#if webConfig.ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION === false}",
          "465:         <span class=\"ml-2 self-center\">{$i18n.t('On')}</span>",
          "466:        {:else}",
          "467:         <span class=\"ml-2 self-center\">{$i18n.t('Off')}</span>",
          "468:        {/if}",
          "469:       </button>",
          "471:     </div>",
          "473:     <div class=\" mt-2 mb-1 text-sm font-medium\">",
          "474:      {$i18n.t('Youtube Loader Settings')}",
          "475:     </div>",
          "477:     <div>",
          "478:      <div class=\" py-0.5 flex w-full justify-between\">",
          "479:       <div class=\" w-20 text-xs font-medium self-center\">{$i18n.t('Language')}</div>",
          "480:       <div class=\" flex-1 self-center\">",
          "482:         class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "",
          "[Added Lines]",
          "88:    <div class=\"\">",
          "89:     <div class=\"mb-3\">",
          "90:      <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('General')}</div>",
          "92:      <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "94:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "96:        {$i18n.t('Web Search')}",
          "97:       </div>",
          "98:       <div class=\"flex items-center relative\">",
          "99:        <Switch bind:state={webConfig.search.enabled} />",
          "103:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "104:       <div class=\" self-center text-xs font-medium\">",
          "105:        {$i18n.t('Web Search Engine')}",
          "106:       </div>",
          "107:       <div class=\"flex items-center relative\">",
          "108:        <select",
          "109:         class=\"dark:bg-gray-900 w-fit pr-8 rounded-sm px-2 p-1 text-xs bg-transparent outline-hidden text-right\"",
          "110:         bind:value={webConfig.search.engine}",
          "111:         placeholder={$i18n.t('Select a engine')}",
          "112:         required",
          "113:        >",
          "114:         <option disabled selected value=\"\">{$i18n.t('Select a engine')}</option>",
          "115:         {#each webSearchEngines as engine}",
          "116:          <option value={engine}>{engine}</option>",
          "117:         {/each}",
          "118:        </select>",
          "119:       </div>",
          "122:      {#if webConfig.search.engine !== ''}",
          "124:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "125:         <div>",
          "126:          <div class=\" self-center text-xs font-medium mb-1\">",
          "127:           {$i18n.t('Searxng Query URL')}",
          "128:          </div>",
          "130:          <div class=\"flex w-full\">",
          "131:           <div class=\"flex-1\">",
          "132:            <input",
          "133:             class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "134:             type=\"text\"",
          "135:             placeholder={$i18n.t('Enter Searxng Query URL')}",
          "136:             bind:value={webConfig.search.searxng_query_url}",
          "137:             autocomplete=\"off\"",
          "138:            />",
          "139:           </div>",
          "144:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "145:         <div>",
          "146:          <div class=\" self-center text-xs font-medium mb-1\">",
          "147:           {$i18n.t('Google PSE API Key')}",
          "148:          </div>",
          "150:          <SensitiveInput",
          "151:           placeholder={$i18n.t('Enter Google PSE API Key')}",
          "152:           bind:value={webConfig.search.google_pse_api_key}",
          "153:          />",
          "155:         <div class=\"mt-1.5\">",
          "156:          <div class=\" self-center text-xs font-medium mb-1\">",
          "157:           {$i18n.t('Google PSE Engine Id')}",
          "158:          </div>",
          "160:          <div class=\"flex w-full\">",
          "161:           <div class=\"flex-1\">",
          "162:            <input",
          "163:             class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "164:             type=\"text\"",
          "165:             placeholder={$i18n.t('Enter Google PSE Engine Id')}",
          "166:             bind:value={webConfig.search.google_pse_engine_id}",
          "167:             autocomplete=\"off\"",
          "168:            />",
          "169:           </div>",
          "174:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "175:         <div>",
          "176:          <div class=\" self-center text-xs font-medium mb-1\">",
          "177:           {$i18n.t('Brave Search API Key')}",
          "178:          </div>",
          "180:          <SensitiveInput",
          "181:           placeholder={$i18n.t('Enter Brave Search API Key')}",
          "182:           bind:value={webConfig.search.brave_search_api_key}",
          "183:          />",
          "184:         </div>",
          "187:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "188:         <div>",
          "189:          <div class=\" self-center text-xs font-medium mb-1\">",
          "190:           {$i18n.t('Kagi Search API Key')}",
          "191:          </div>",
          "193:          <SensitiveInput",
          "194:           placeholder={$i18n.t('Enter Kagi Search API Key')}",
          "195:           bind:value={webConfig.search.kagi_search_api_key}",
          "196:          />",
          "197:         </div>",
          "198:         .",
          "201:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "202:         <div>",
          "203:          <div class=\" self-center text-xs font-medium mb-1\">",
          "204:           {$i18n.t('Mojeek Search API Key')}",
          "205:          </div>",
          "207:          <SensitiveInput",
          "208:           placeholder={$i18n.t('Enter Mojeek Search API Key')}",
          "209:           bind:value={webConfig.search.mojeek_search_api_key}",
          "210:          />",
          "211:         </div>",
          "214:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "215:         <div>",
          "216:          <div class=\" self-center text-xs font-medium mb-1\">",
          "217:           {$i18n.t('Bocha Search API Key')}",
          "218:          </div>",
          "220:          <SensitiveInput",
          "221:           placeholder={$i18n.t('Enter Bocha Search API Key')}",
          "222:           bind:value={webConfig.search.bocha_search_api_key}",
          "223:          />",
          "224:         </div>",
          "227:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "228:         <div>",
          "229:          <div class=\" self-center text-xs font-medium mb-1\">",
          "230:           {$i18n.t('Serpstack API Key')}",
          "231:          </div>",
          "233:          <SensitiveInput",
          "234:           placeholder={$i18n.t('Enter Serpstack API Key')}",
          "235:           bind:value={webConfig.search.serpstack_api_key}",
          "236:          />",
          "237:         </div>",
          "240:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "241:         <div>",
          "242:          <div class=\" self-center text-xs font-medium mb-1\">",
          "243:           {$i18n.t('Serper API Key')}",
          "244:          </div>",
          "246:          <SensitiveInput",
          "247:           placeholder={$i18n.t('Enter Serper API Key')}",
          "248:           bind:value={webConfig.search.serper_api_key}",
          "249:          />",
          "250:         </div>",
          "253:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "254:         <div>",
          "255:          <div class=\" self-center text-xs font-medium mb-1\">",
          "256:           {$i18n.t('Serply API Key')}",
          "257:          </div>",
          "259:          <SensitiveInput",
          "260:           placeholder={$i18n.t('Enter Serply API Key')}",
          "261:           bind:value={webConfig.search.serply_api_key}",
          "262:          />",
          "263:         </div>",
          "266:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "267:         <div>",
          "268:          <div class=\" self-center text-xs font-medium mb-1\">",
          "269:           {$i18n.t('SearchApi API Key')}",
          "270:          </div>",
          "272:          <SensitiveInput",
          "273:           placeholder={$i18n.t('Enter SearchApi API Key')}",
          "274:           bind:value={webConfig.search.searchapi_api_key}",
          "275:          />",
          "277:         <div class=\"mt-1.5\">",
          "278:          <div class=\" self-center text-xs font-medium mb-1\">",
          "279:           {$i18n.t('SearchApi Engine')}",
          "280:          </div>",
          "282:          <div class=\"flex w-full\">",
          "283:           <div class=\"flex-1\">",
          "284:            <input",
          "285:             class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "286:             type=\"text\"",
          "287:             placeholder={$i18n.t('Enter SearchApi Engine')}",
          "288:             bind:value={webConfig.search.searchapi_engine}",
          "289:             autocomplete=\"off\"",
          "290:            />",
          "291:           </div>",
          "296:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "297:         <div>",
          "298:          <div class=\" self-center text-xs font-medium mb-1\">",
          "299:           {$i18n.t('SerpApi API Key')}",
          "300:          </div>",
          "302:          <SensitiveInput",
          "303:           placeholder={$i18n.t('Enter SerpApi API Key')}",
          "304:           bind:value={webConfig.search.serpapi_api_key}",
          "305:          />",
          "307:         <div class=\"mt-1.5\">",
          "308:          <div class=\" self-center text-xs font-medium mb-1\">",
          "309:           {$i18n.t('SerpApi Engine')}",
          "310:          </div>",
          "312:          <div class=\"flex w-full\">",
          "313:           <div class=\"flex-1\">",
          "314:            <input",
          "315:             class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "316:             type=\"text\"",
          "317:             placeholder={$i18n.t('Enter SerpApi Engine')}",
          "318:             bind:value={webConfig.search.serpapi_engine}",
          "319:             autocomplete=\"off\"",
          "320:            />",
          "321:           </div>",
          "326:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "327:         <div>",
          "328:          <div class=\" self-center text-xs font-medium mb-1\">",
          "329:           {$i18n.t('Tavily API Key')}",
          "330:          </div>",
          "332:          <SensitiveInput",
          "333:           placeholder={$i18n.t('Enter Tavily API Key')}",
          "334:           bind:value={webConfig.search.tavily_api_key}",
          "335:          />",
          "336:         </div>",
          "339:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "340:         <div>",
          "341:          <div class=\" self-center text-xs font-medium mb-1\">",
          "342:           {$i18n.t('Jina API Key')}",
          "343:          </div>",
          "345:          <SensitiveInput",
          "346:           placeholder={$i18n.t('Enter Jina API Key')}",
          "347:           bind:value={webConfig.search.jina_api_key}",
          "348:          />",
          "349:         </div>",
          "352:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "353:         <div>",
          "354:          <div class=\" self-center text-xs font-medium mb-1\">",
          "355:           {$i18n.t('Exa API Key')}",
          "356:          </div>",
          "358:          <SensitiveInput",
          "359:           placeholder={$i18n.t('Enter Exa API Key')}",
          "360:           bind:value={webConfig.search.exa_api_key}",
          "361:          />",
          "362:         </div>",
          "365:        <div class=\"mb-2.5 flex w-full flex-col\">",
          "366:         <div>",
          "367:          <div class=\" self-center text-xs font-medium mb-1\">",
          "368:           {$i18n.t('Bing Search V7 Endpoint')}",
          "369:          </div>",
          "371:          <div class=\"flex w-full\">",
          "372:           <div class=\"flex-1\">",
          "373:            <input",
          "374:             class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "375:             type=\"text\"",
          "376:             placeholder={$i18n.t('Enter Bing Search V7 Endpoint')}",
          "377:             bind:value={webConfig.search.bing_search_v7_endpoint}",
          "378:             autocomplete=\"off\"",
          "379:            />",
          "380:           </div>",
          "381:          </div>",
          "384:         <div class=\"mt-2\">",
          "385:          <div class=\" self-center text-xs font-medium mb-1\">",
          "386:           {$i18n.t('Bing Search V7 Subscription Key')}",
          "389:          <SensitiveInput",
          "390:           placeholder={$i18n.t('Enter Bing Search V7 Subscription Key')}",
          "391:           bind:value={webConfig.search.bing_search_v7_subscription_key}",
          "392:          />",
          "395:       {/if}",
          "396:      {/if}",
          "398:      {#if webConfig.search.enabled}",
          "399:       <div class=\"mb-2.5 flex w-full flex-col\">",
          "400:        <div class=\"flex gap-2\">",
          "401:         <div class=\"w-full\">",
          "402:          <div class=\" self-center text-xs font-medium mb-1\">",
          "403:           {$i18n.t('Search Result Count')}",
          "404:          </div>",
          "406:          <input",
          "407:           class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "408:           placeholder={$i18n.t('Search Result Count')}",
          "409:           bind:value={webConfig.search.result_count}",
          "410:           required",
          "411:          />",
          "414:         <div class=\"w-full\">",
          "415:          <div class=\" self-center text-xs font-medium mb-1\">",
          "416:           {$i18n.t('Concurrent Requests')}",
          "417:          </div>",
          "419:          <input",
          "420:           class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "421:           placeholder={$i18n.t('Concurrent Requests')}",
          "422:           bind:value={webConfig.search.concurrent_requests}",
          "423:           required",
          "424:          />",
          "425:         </div>",
          "429:       <div class=\"mb-2.5 flex w-full flex-col\">",
          "430:        <div class=\"  text-xs font-medium mb-1\">",
          "431:         {$i18n.t('Domain Filter List')}",
          "436:         placeholder={$i18n.t(",
          "437:          'Enter domains separated by commas (e.g., example.com,site.org)'",
          "438:         )}",
          "439:         bind:value={webConfig.search.domain_filter_list}",
          "442:      {/if}",
          "444:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "445:       <div class=\" self-center text-xs font-medium\">",
          "446:        <Tooltip content={$i18n.t('Full Context Mode')} placement=\"top-start\">",
          "447:         {$i18n.t('Bypass Embedding and Retrieval')}",
          "448:        </Tooltip>",
          "449:       </div>",
          "450:       <div class=\"flex items-center relative\">",
          "451:        <Tooltip",
          "452:         content={webConfig.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL",
          "453:          ? 'Inject the entire content as context for comprehensive processing, this is recommended for complex queries.'",
          "454:          : 'Default to segmented retrieval for focused and relevant content extraction, this is recommended for most cases.'}",
          "455:        >",
          "456:         <Switch bind:state={webConfig.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL} />",
          "457:        </Tooltip>",
          "459:      </div>",
          "461:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "462:       <div class=\" self-center text-xs font-medium\">",
          "463:        {$i18n.t('Trust Proxy Environment')}",
          "464:       </div>",
          "465:       <div class=\"flex items-center relative\">",
          "466:        <Tooltip",
          "467:         content={webConfig.search.trust_env",
          "468:          ? 'Use proxy designated by http_proxy and https_proxy environment variables to fetch page contents'",
          "469:          : 'Use no proxy to fetch page contents.'}",
          "470:        >",
          "471:         <Switch bind:state={webConfig.search.trust_env} />",
          "472:        </Tooltip>",
          "473:       </div>",
          "475:     </div>",
          "477:     <div class=\"mb-3\">",
          "478:      <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('Loader')}</div>",
          "480:      <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "482:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "486:       <div class=\"flex items-center relative\">",
          "487:        <Switch bind:state={webConfig.ENABLE_RAG_WEB_LOADER_SSL_VERIFICATION} />",
          "488:       </div>",
          "491:      <div class=\"  mb-2.5 flex w-full justify-between\">",
          "492:       <div class=\" self-center text-xs font-medium\">",
          "493:        {$i18n.t('Youtube Language')}",
          "494:       </div>",
          "495:       <div class=\"flex items-center relative\">",
          "497:         class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "487:        />",
          "488:       </div>",
          "489:      </div>",
          "496:        <input",
          "498:         type=\"text\"",
          "499:         placeholder={$i18n.t('Enter proxy URL (e.g. https://user:password@host:port)')}",
          "500:         bind:value={youtubeProxyUrl}",
          "",
          "[Removed Lines]",
          "490:     </div>",
          "492:     <div>",
          "493:      <div class=\" py-0.5 flex w-full justify-between\">",
          "494:       <div class=\" w-20 text-xs font-medium self-center\">{$i18n.t('Proxy URL')}</div>",
          "495:       <div class=\" flex-1 self-center\">",
          "497:         class=\"w-full rounded-lg py-2 px-4 text-sm bg-gray-50 dark:text-gray-300 dark:bg-gray-850 outline-hidden\"",
          "",
          "[Added Lines]",
          "506:      <div class=\"  mb-2.5 flex flex-col w-full justify-between\">",
          "507:       <div class=\" mb-1 text-xs font-medium\">",
          "508:        {$i18n.t('Youtube Proxy URL')}",
          "509:       </div>",
          "510:       <div class=\"flex items-center relative\">",
          "512:         class=\"flex-1 w-full rounded-lg text-sm bg-transparent outline-hidden\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46c4da48642ccb670c5a696c0d8c62572d8b2b4c",
      "candidate_info": {
        "commit_hash": "46c4da48642ccb670c5a696c0d8c62572d8b2b4c",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/46c4da48642ccb670c5a696c0d8c62572d8b2b4c",
        "files": [
          "backend/open_webui/utils/filter.py",
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "enh: \"stream\" hook",
        "before_after_code_files": [
          "backend/open_webui/utils/filter.py||backend/open_webui/utils/filter.py",
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/filter.py||backend/open_webui/utils/filter.py": [
          "File: backend/open_webui/utils/filter.py -> backend/open_webui/utils/filter.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         try:",
          "62:             # Prepare parameters",
          "63:             sig = inspect.signature(handler)",
          "65:                 k: v",
          "66:                 for k, v in {",
          "",
          "[Removed Lines]",
          "64:             params = {\"body\": form_data} | {",
          "",
          "[Added Lines]",
          "65:             params = {\"body\": form_data}",
          "66:             if filter_type == \"stream\":",
          "67:                 params = {\"event\": form_data}",
          "69:             params = params | {",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1048:     ):",
          "1049:         return response",
          "1051:     # Streaming response",
          "1052:     if event_emitter and event_caller:",
          "1053:         task_id = str(uuid4())  # Create a unique task ID.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1051:     extra_params = {",
          "1052:         \"__event_emitter__\": event_emitter,",
          "1053:         \"__event_call__\": event_caller,",
          "1054:         \"__user__\": {",
          "1055:             \"id\": user.id,",
          "1056:             \"email\": user.email,",
          "1057:             \"name\": user.name,",
          "1058:             \"role\": user.role,",
          "1059:         },",
          "1060:         \"__metadata__\": metadata,",
          "1061:         \"__request__\": request,",
          "1062:         \"__model__\": metadata.get(\"model\"),",
          "1063:     }",
          "1064:     filter_ids = get_sorted_filter_ids(form_data.get(\"model\"))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1402:                 (\"reasoning\", \"/reasoning\"),",
          "1403:                 (\"thought\", \"/thought\"),",
          "1404:                 (\"Thought\", \"/Thought\"),",
          "1406:             ]",
          "1416:             try:",
          "1417:                 for event in events:",
          "",
          "[Removed Lines]",
          "1405:                 (\"|begin_of_thought|\", \"|end_of_thought|\")",
          "1408:             code_interpreter_tags = [",
          "1409:                 (\"code_interpreter\", \"/code_interpreter\")",
          "1410:             ]",
          "1412:             solution_tags = [",
          "1413:                 (\"|begin_of_solution|\", \"|end_of_solution|\")",
          "1414:             ]",
          "",
          "[Added Lines]",
          "1420:                 (\"|begin_of_thought|\", \"|end_of_thought|\"),",
          "1423:             code_interpreter_tags = [(\"code_interpreter\", \"/code_interpreter\")]",
          "1425:             solution_tags = [(\"|begin_of_solution|\", \"|end_of_solution|\")]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1455:                         try:",
          "1456:                             data = json.loads(data)",
          "1458:                             if \"selected_model_id\" in data:",
          "1459:                                 model_id = data[\"selected_model_id\"]",
          "1460:                                 Chats.upsert_message_to_chat_by_id_and_message_id(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1469:                             data, _ = await process_filter_functions(",
          "1470:                                 request=request,",
          "1471:                                 filter_ids=filter_ids,",
          "1472:                                 filter_type=\"stream\",",
          "1473:                                 form_data=data,",
          "1474:                                 extra_params=extra_params,",
          "1475:                             )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1968:         return {\"status\": True, \"task_id\": task_id}",
          "1970:     else:",
          "1972:         # Fallback to the original response",
          "1973:         async def stream_wrapper(original_generator, events):",
          "1974:             def wrap_item(item):",
          "1975:                 return f\"data: {item}\\n\\n\"",
          "1977:             for event in events:",
          "1978:                 yield wrap_item(json.dumps(event))",
          "1980:             async for data in original_generator:",
          "1981:                 yield data",
          "1983:         return StreamingResponse(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1996:                 event, _ = await process_filter_functions(",
          "1997:                     request=request,",
          "1998:                     filter_ids=filter_ids,",
          "1999:                     filter_type=\"stream\",",
          "2000:                     form_data=event,",
          "2001:                     extra_params=extra_params,",
          "2002:                 )",
          "2006:                 data, _ = await process_filter_functions(",
          "2007:                     request=request,",
          "2008:                     filter_ids=filter_ids,",
          "2009:                     filter_type=\"stream\",",
          "2010:                     form_data=data,",
          "2011:                     extra_params=extra_params,",
          "2012:                 )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b14e75dd6cd4887202940bb99f649540ab3d7a1f",
      "candidate_info": {
        "commit_hash": "b14e75dd6cd4887202940bb99f649540ab3d7a1f",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/b14e75dd6cd4887202940bb99f649540ab3d7a1f",
        "files": [
          "backend/open_webui/routers/retrieval.py",
          "src/lib/components/admin/Settings/WebSearch.svelte"
        ],
        "message": "feat: added Trust Proxy Environment switch in Web Search admin settings tab.\n\nCo-Authored-By: harry zhou <67385896+harryzhou2000@users.noreply.github.com>",
        "before_after_code_files": [
          "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py",
          "src/lib/components/admin/Settings/WebSearch.svelte||src/lib/components/admin/Settings/WebSearch.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py": [
          "File: backend/open_webui/routers/retrieval.py -> backend/open_webui/routers/retrieval.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "403:                 \"bing_search_v7_subscription_key\": request.app.state.config.BING_SEARCH_V7_SUBSCRIPTION_KEY,",
          "404:                 \"exa_api_key\": request.app.state.config.EXA_API_KEY,",
          "405:                 \"result_count\": request.app.state.config.RAG_WEB_SEARCH_RESULT_COUNT,",
          "406:                 \"concurrent_requests\": request.app.state.config.RAG_WEB_SEARCH_CONCURRENT_REQUESTS,",
          "407:                 \"domain_filter_list\": request.app.state.config.RAG_WEB_SEARCH_DOMAIN_FILTER_LIST,",
          "408:             },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406:                 \"trust_env\": request.app.state.config.RAG_WEB_SEARCH_TRUST_ENV,",
          "",
          "---------------"
        ],
        "src/lib/components/admin/Settings/WebSearch.svelte||src/lib/components/admin/Settings/WebSearch.svelte": [
          "File: src/lib/components/admin/Settings/WebSearch.svelte -> src/lib/components/admin/Settings/WebSearch.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:      </div>",
          "131:     </div>",
          "133:     {#if webConfig.search.engine !== ''}",
          "134:      <div class=\"mt-1.5\">",
          "135:       {#if webConfig.search.engine === 'searxng'}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:     <div class=\" py-0.5 flex w-full justify-between\">",
          "134:      <div class=\" self-center text-xs font-medium\">{$i18n.t('Trust Proxy Environment')}</div>",
          "135:      <div class=\"flex items-center relative\">",
          "136:       <Tooltip",
          "137:        content={webConfig.search.trust_env",
          "138:         ? 'Use proxy designated by http_proxy and https_proxy environment variables to fetch page contents'",
          "139:         : 'Use no proxy to fetch page contents.'}",
          "140:       >",
          "141:        <Switch bind:state={webConfig.search.trust_env} />",
          "142:       </Tooltip>",
          "143:      </div>",
          "144:     </div>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce7cf62a5538c487230bf976cf32838febeaf048",
      "candidate_info": {
        "commit_hash": "ce7cf62a5538c487230bf976cf32838febeaf048",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/ce7cf62a5538c487230bf976cf32838febeaf048",
        "files": [
          "backend/open_webui/retrieval/utils.py"
        ],
        "message": "refac: dedup",
        "before_after_code_files": [
          "backend/open_webui/retrieval/utils.py||backend/open_webui/retrieval/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/open-webui/open-webui/pull/10469"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/retrieval/utils.py||backend/open_webui/retrieval/utils.py": [
          "File: backend/open_webui/retrieval/utils.py -> backend/open_webui/retrieval/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import asyncio",
          "7: import requests",
          "9: from huggingface_hub import snapshot_download",
          "10: from langchain.retrievers import ContextualCompressionRetriever, EnsembleRetriever",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import hashlib",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176: def merge_and_sort_query_results(",
          "177:     query_results: list[dict], k: int, reverse: bool = False",
          "179:     # Initialize lists to store combined data",
          "184:     for data in query_results:",
          "192:     # Sort the list based on distances",
          "193:     combined.sort(key=lambda x: x[0], reverse=reverse)",
          "214:     }",
          "219: def get_all_items_from_collections(collection_names: list[str]) -> dict:",
          "220:     results = []",
          "",
          "[Removed Lines]",
          "178: ) -> list[dict]:",
          "180:     combined_distances = []",
          "181:     combined_documents = []",
          "182:     combined_metadatas = []",
          "185:         combined_distances.extend(data[\"distances\"][0])",
          "186:         combined_documents.extend(data[\"documents\"][0])",
          "187:         combined_metadatas.extend(data[\"metadatas\"][0])",
          "189:     # Create a list of tuples (distance, document, metadata)",
          "190:     combined = list(zip(combined_distances, combined_documents, combined_metadatas))",
          "195:     # We don't have anything :-(",
          "196:     if not combined:",
          "197:         sorted_distances = []",
          "198:         sorted_documents = []",
          "199:         sorted_metadatas = []",
          "200:     else:",
          "201:         # Unzip the sorted list",
          "202:         sorted_distances, sorted_documents, sorted_metadatas = zip(*combined)",
          "204:         # Slicing the lists to include only k elements",
          "205:         sorted_distances = list(sorted_distances)[:k]",
          "206:         sorted_documents = list(sorted_documents)[:k]",
          "207:         sorted_metadatas = list(sorted_metadatas)[:k]",
          "209:     # Create the output dictionary",
          "210:     result = {",
          "211:         \"distances\": [sorted_distances],",
          "212:         \"documents\": [sorted_documents],",
          "213:         \"metadatas\": [sorted_metadatas],",
          "216:     return result",
          "",
          "[Added Lines]",
          "179: ) -> dict:",
          "181:     combined = []",
          "182:     seen_hashes = set()  # To store unique document hashes",
          "185:         distances = data[\"distances\"][0]",
          "186:         documents = data[\"documents\"][0]",
          "187:         metadatas = data[\"metadatas\"][0]",
          "189:         for distance, document, metadata in zip(distances, documents, metadatas):",
          "190:             if isinstance(document, str):",
          "191:                 doc_hash = hashlib.md5(",
          "192:                     document.encode()",
          "193:                 ).hexdigest()  # Compute a hash for uniqueness",
          "195:                 if doc_hash not in seen_hashes:",
          "196:                     seen_hashes.add(doc_hash)",
          "197:                     combined.append((distance, document, metadata))",
          "202:     # Slice to keep only the top k elements",
          "203:     sorted_distances, sorted_documents, sorted_metadatas = (",
          "204:         zip(*combined[:k]) if combined else ([], [], [])",
          "205:     )",
          "207:     # Create and return the output dictionary",
          "208:     return {",
          "209:         \"distances\": [list(sorted_distances)],",
          "210:         \"documents\": [list(sorted_documents)],",
          "211:         \"metadatas\": [list(sorted_metadatas)],",
          "",
          "---------------"
        ]
      }
    }
  ]
}