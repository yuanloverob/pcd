{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "edf94d732b983f2d1661fdc033c3a6ed024abfc1",
      "candidate_info": {
        "commit_hash": "edf94d732b983f2d1661fdc033c3a6ed024abfc1",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/edf94d732b983f2d1661fdc033c3a6ed024abfc1",
        "files": [
          "src/routes/+layout.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/routes/+layout.svelte||src/routes/+layout.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/routes/+layout.svelte||src/routes/+layout.svelte": [
          "File: src/routes/+layout.svelte -> src/routes/+layout.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:   if (!localStorage.locale) {",
          "481:    const languages = await getLanguages();",
          "482:    const browserLanguages = navigator.languages",
          "",
          "[Removed Lines]",
          "479:   initI18n();",
          "",
          "[Added Lines]",
          "479:   initI18n(localStorage?.locale);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cdb5eae43aaa8eadf50f59de86dbfa3a4f6c80d1",
      "candidate_info": {
        "commit_hash": "cdb5eae43aaa8eadf50f59de86dbfa3a4f6c80d1",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/cdb5eae43aaa8eadf50f59de86dbfa3a4f6c80d1",
        "files": [
          "src/lib/components/admin/Users/Groups/EditGroupModal.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/admin/Users/Groups/EditGroupModal.svelte||src/lib/components/admin/Users/Groups/EditGroupModal.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Users/Groups/EditGroupModal.svelte||src/lib/components/admin/Users/Groups/EditGroupModal.svelte": [
          "File: src/lib/components/admin/Users/Groups/EditGroupModal.svelte -> src/lib/components/admin/Users/Groups/EditGroupModal.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:        >",
          "285:         {$i18n.t('Delete')}",
          "286:        </button>",
          "287:       {/if}",
          "289:       <button",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287:       {:else}",
          "288:        <div></div>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd9641dcd11d1f7133e4d08d45d72934a1b1fe31",
      "candidate_info": {
        "commit_hash": "fd9641dcd11d1f7133e4d08d45d72934a1b1fe31",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/fd9641dcd11d1f7133e4d08d45d72934a1b1fe31",
        "files": [
          "backend/open_webui/utils/middleware.py",
          "src/lib/utils/index.ts"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "src/lib/utils/index.ts||src/lib/utils/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1548:                         try:",
          "1549:                             data = json.loads(data)",
          "1553:                             data, _ = await process_filter_functions(",
          "1554:                                 request=request,",
          "1555:                                 filter_functions=filter_functions,",
          "",
          "[Removed Lines]",
          "1551:                             print(data)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/utils/index.ts||src/lib/utils/index.ts": [
          "File: src/lib/utils/index.ts -> src/lib/utils/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:  return text ? text.split('\\n').length : 0;",
          "1072: };",
          "1074: export const convertOpenApiToToolPayload = (openApiSpec) => {",
          "1075:  const toolPayload = [];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1075: function resolveSchema(schemaRef, components, resolvedSchemas = new Set()) {",
          "1076:  if (!schemaRef) return {};",
          "1078:  if (schemaRef['$ref']) {",
          "1079:   const refPath = schemaRef['$ref'];",
          "1080:   const schemaName = refPath.split('/').pop();",
          "1082:   if (resolvedSchemas.has(schemaName)) {",
          "1084:    return {};",
          "1085:   }",
          "1086:   resolvedSchemas.add(schemaName);",
          "1087:   const referencedSchema = components.schemas[schemaName];",
          "1088:   return resolveSchema(referencedSchema, components, resolvedSchemas);",
          "1089:  }",
          "1091:  if (schemaRef.type) {",
          "1092:   const schemaObj = { type: schemaRef.type };",
          "1094:   if (schemaRef.description) {",
          "1095:    schemaObj.description = schemaRef.description;",
          "1096:   }",
          "1098:   switch (schemaRef.type) {",
          "1099:    case 'object':",
          "1100:     schemaObj.properties = {};",
          "1101:     schemaObj.required = schemaRef.required || [];",
          "1102:     for (const [propName, propSchema] of Object.entries(schemaRef.properties || {})) {",
          "1103:      schemaObj.properties[propName] = resolveSchema(propSchema, components);",
          "1104:     }",
          "1105:     break;",
          "1107:    case 'array':",
          "1108:     schemaObj.items = resolveSchema(schemaRef.items, components);",
          "1109:     break;",
          "1111:    default:",
          "1113:     break;",
          "1114:   }",
          "1115:   return schemaObj;",
          "1116:  }",
          "1119:  return {};",
          "1120: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1101:     });",
          "1102:    }",
          "1105:    if (operation.requestBody) {",
          "1117:       }",
          "1119:      }",
          "1120:     }",
          "1121:    }",
          "",
          "[Removed Lines]",
          "1106:     const ref = operation.requestBody.content['application/json'].schema['$ref'];",
          "1107:     if (ref) {",
          "1108:      const schemaName = ref.split('/').pop();",
          "1109:      const schemaDef = openApiSpec.components.schemas[schemaName];",
          "1111:      if (schemaDef && schemaDef.properties) {",
          "1112:       for (const [prop, details] of Object.entries(schemaDef.properties)) {",
          "1113:        tool.parameters.properties[prop] = {",
          "1114:         type: details.type,",
          "1115:         description: details.description || ''",
          "1116:        };",
          "1118:       tool.parameters.required = schemaDef.required || [];",
          "",
          "[Added Lines]",
          "1155:     const content = operation.requestBody.content;",
          "1156:     if (content && content['application/json']) {",
          "1157:      const requestSchema = content['application/json'].schema;",
          "1158:      const resolvedRequestSchema = resolveSchema(requestSchema, openApiSpec.components);",
          "1160:      if (resolvedRequestSchema.properties) {",
          "1161:       tool.parameters.properties = {",
          "1162:        ...tool.parameters.properties,",
          "1163:        ...resolvedRequestSchema.properties",
          "1164:       };",
          "1166:       if (resolvedRequestSchema.required) {",
          "1167:        tool.parameters.required = [",
          "1168:         ...new Set([...tool.parameters.required, ...resolvedRequestSchema.required])",
          "1169:        ];",
          "1171:      } else if (resolvedRequestSchema.type === 'array') {",
          "1172:       tool.parameters = resolvedRequestSchema; // special case when root schema is an array",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13c7d965158c92ed8888bfe8efb054f2935c1a40",
      "candidate_info": {
        "commit_hash": "13c7d965158c92ed8888bfe8efb054f2935c1a40",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/13c7d965158c92ed8888bfe8efb054f2935c1a40",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1252:                     end_tag_pattern = rf\"</{tag}>\"",
          "1254:                     if re.search(end_tag_pattern, content):",
          "1255:                         block_content = content_blocks[-1][\"content\"]",
          "1256:                         # Strip start and end tags from the content",
          "1257:                         start_tag_pattern = rf\"<{tag}(.*?)>\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1255:                         end_flag = True",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1276:                         print(f\"leftover_content: {leftover_content}\")",
          "1278:                         if block_content:",
          "1280:                             content_blocks[-1][\"content\"] = block_content",
          "1281:                             content_blocks[-1][\"ended_at\"] = time.time()",
          "1282:                             content_blocks[-1][\"duration\"] = int(",
          "",
          "[Removed Lines]",
          "1279:                             end_flag = True",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1290:                                     \"content\": leftover_content,",
          "1291:                                 }",
          "1292:                             )",
          "1294:                         else:",
          "1296:                             # Remove the block if content is empty",
          "1297:                             content_blocks.pop()",
          "",
          "[Removed Lines]",
          "1295:                             end_flag = True",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1378:                         try:",
          "1379:                             data = json.loads(data)",
          "1382:                             if \"selected_model_id\" in data:",
          "1383:                                 model_id = data[\"selected_model_id\"]",
          "",
          "[Removed Lines]",
          "1380:                             print(data)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3769c1073e3dffdd28228eadc044a7cf7e733b6",
      "candidate_info": {
        "commit_hash": "e3769c1073e3dffdd28228eadc044a7cf7e733b6",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/e3769c1073e3dffdd28228eadc044a7cf7e733b6",
        "files": [
          "backend/open_webui/main.py",
          "src/lib/components/OnBoarding.svelte",
          "src/routes/auth/+page.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/main.py||backend/open_webui/main.py",
          "src/lib/components/OnBoarding.svelte||src/lib/components/OnBoarding.svelte",
          "src/routes/auth/+page.svelte||src/routes/auth/+page.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "420: app.state.config = AppConfig()",
          "422: app.state.WEBUI_NAME = WEBUI_NAME",
          "425: ########################################",
          "426: #",
          "",
          "[Removed Lines]",
          "423: app.state.LICENSE_DATA = None",
          "",
          "[Added Lines]",
          "423: app.state.LICENSE_METADATA = None",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1218:                     {",
          "1219:                         \"record_count\": user_count,",
          "1220:                         \"active_entries\": app.state.USER_COUNT,",
          "1222:                     }",
          "1223:                     if user.role == \"admin\"",
          "1224:                     else {}",
          "",
          "[Removed Lines]",
          "1221:                         \"license_data\": app.state.LICENSE_DATA,",
          "",
          "[Added Lines]",
          "1221:                         \"license_metadata\": app.state.LICENSE_METADATA,",
          "",
          "---------------"
        ],
        "src/lib/components/OnBoarding.svelte||src/lib/components/OnBoarding.svelte": [
          "File: src/lib/components/OnBoarding.svelte -> src/lib/components/OnBoarding.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <script>",
          "3:  const i18n = getContext('i18n');",
          "5:  import { WEBUI_BASE_URL } from '$lib/constants';",
          "",
          "[Removed Lines]",
          "2:  import { getContext } from 'svelte';",
          "",
          "[Added Lines]",
          "2:  import { getContext, onMount } from 'svelte';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11:  export let show = true;",
          "12:  export let getStartedHandler = () => {};",
          "13: </script>",
          "15: {#if show}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:  function setLogoImage() {",
          "15:   const logo = document.getElementById('logo');",
          "17:   if (logo) {",
          "18:    const isDarkMode = document.documentElement.classList.contains('dark');",
          "20:    if (isDarkMode) {",
          "21:     const darkImage = new Image();",
          "22:     darkImage.src = '/static/favicon-dark.png';",
          "24:     darkImage.onload = () => {",
          "25:      logo.src = '/static/favicon-dark.png';",
          "26:      logo.style.filter = ''; // Ensure no inversion is applied if splash-dark.png exists",
          "27:     };",
          "29:     darkImage.onerror = () => {",
          "30:      logo.style.filter = 'invert(1)'; // Invert image if splash-dark.png is missing",
          "31:     };",
          "32:    }",
          "33:   }",
          "34:  }",
          "36:  $: if (show) {",
          "37:   setLogoImage();",
          "38:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "18:    <div class=\"flex space-x-2\">",
          "19:     <div class=\" self-center\">",
          "20:      <img",
          "21:       crossorigin=\"anonymous\"",
          "22:       src=\"{WEBUI_BASE_URL}/static/favicon.png\"",
          "23:       class=\" w-6 rounded-full\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:       id=\"logo\"",
          "",
          "---------------"
        ],
        "src/routes/auth/+page.svelte||src/routes/auth/+page.svelte": [
          "File: src/routes/auth/+page.svelte -> src/routes/auth/+page.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <script>",
          "2:  import { toast } from 'svelte-sonner';",
          "5:  import { goto } from '$app/navigation';",
          "6:  import { page } from '$app/stores';",
          "",
          "[Removed Lines]",
          "4:  import { onMount, getContext } from 'svelte';",
          "",
          "[Added Lines]",
          "4:  import { onMount, getContext, tick } from 'svelte';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116:  let onboarding = false;",
          "118:  onMount(async () => {",
          "119:   if ($user !== undefined) {",
          "120:    await goto('/');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:  async function setLogoImage() {",
          "119:   await tick();",
          "120:   const logo = document.getElementById('logo');",
          "122:   if (logo) {",
          "123:    const isDarkMode = document.documentElement.classList.contains('dark');",
          "125:    if (isDarkMode) {",
          "126:     const darkImage = new Image();",
          "127:     darkImage.src = '/static/favicon-dark.png';",
          "129:     darkImage.onload = () => {",
          "130:      logo.src = '/static/favicon-dark.png';",
          "131:      logo.style.filter = ''; // Ensure no inversion is applied if favicon-dark.png exists",
          "132:     };",
          "134:     darkImage.onerror = () => {",
          "135:      logo.style.filter = 'invert(1)'; // Invert image if favicon-dark.png is missing",
          "136:     };",
          "137:    }",
          "138:   }",
          "139:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:   await checkOauthCallback();",
          "124:   loaded = true;",
          "125:   if (($config?.features.auth_trusted_header ?? false) || $config?.features.auth === false) {",
          "126:    await signInHandler();",
          "127:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:   setLogoImage();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:    <div class=\"flex space-x-2\">",
          "155:     <div class=\" self-center\">",
          "156:      <img",
          "157:       crossorigin=\"anonymous\"",
          "158:       src=\"{WEBUI_BASE_URL}/static/splash.png\"",
          "160:       alt=\"logo\"",
          "161:      />",
          "162:     </div>",
          "",
          "[Removed Lines]",
          "159:       class=\" w-6 rounded-full dark:invert\"",
          "",
          "[Added Lines]",
          "182:       id=\"logo\"",
          "185:       class=\" w-6 rounded-full\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}