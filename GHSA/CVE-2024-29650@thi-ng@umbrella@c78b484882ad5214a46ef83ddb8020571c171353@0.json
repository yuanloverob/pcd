{
  "cve_id": "CVE-2024-29650",
  "cve_desc": "An issue in @thi.ng/paths v.5.1.62 and before allows a remote attacker to execute arbitrary code via the mutIn and mutInManyUnsafe components.",
  "repo": "thi-ng/umbrella",
  "patch_hash": "c78b484882ad5214a46ef83ddb8020571c171353",
  "patch_info": {
    "commit_hash": "c78b484882ad5214a46ef83ddb8020571c171353",
    "repo": "thi-ng/umbrella",
    "commit_url": "https://github.com/thi-ng/umbrella/commit/c78b484882ad5214a46ef83ddb8020571c171353",
    "files": [
      "packages/paths/src/mutator.ts",
      "packages/paths/src/path.ts",
      "packages/paths/test/main.test.ts"
    ],
    "message": "fix(paths): fix #445, update toPath(), disallowProtoPath()\n\n- update docs\n- add tests",
    "before_after_code_files": [
      "packages/paths/src/mutator.ts||packages/paths/src/mutator.ts",
      "packages/paths/src/path.ts||packages/paths/src/path.ts",
      "packages/paths/test/main.test.ts||packages/paths/test/main.test.ts"
    ]
  },
  "patch_diff": {
    "packages/paths/src/mutator.ts||packages/paths/src/mutator.ts": [
      "File: packages/paths/src/mutator.ts -> packages/paths/src/mutator.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "13:  Path8,",
      "14:  PathVal,",
      "15: } from \"@thi.ng/api\";",
      "",
      "[Removed Lines]",
      "16: import { disallowProtoPath, toPath } from \"./path.js\";",
      "",
      "[Added Lines]",
      "16: import { disallowProtoPath } from \"./path.js\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "72:  path: DeepPath<T, A, B, C, D, E, F, G, H>",
      "73: ): Fn2<T, any, any>;",
      "74: export function defMutator(path: Path): any {",
      "77:  let [a, b, c, d] = ks;",
      "78:  switch (ks.length) {",
      "79:   case 0:",
      "",
      "[Removed Lines]",
      "75:  const ks = toPath(path);",
      "76:  disallowProtoPath(ks);",
      "",
      "[Added Lines]",
      "75:  const ks = disallowProtoPath(path);",
      "",
      "---------------"
    ],
    "packages/paths/src/path.ts||packages/paths/src/path.ts": [
      "File: packages/paths/src/path.ts -> packages/paths/src/path.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import type { NumOrString, Path } from \"@thi.ng/api\";",
      "2: import { isArray } from \"@thi.ng/checks/is-array\";",
      "3: import { isProtoPath } from \"@thi.ng/checks/is-proto-path\";",
      "4: import { isString } from \"@thi.ng/checks/is-string\";",
      "",
      "[Removed Lines]",
      "5: import { assert } from \"@thi.ng/errors/assert\";",
      "",
      "[Added Lines]",
      "3: import { isNumber } from \"@thi.ng/checks/is-number\";",
      "6: import { illegalArgs } from \"@thi.ng/errors/illegal-arguments\";",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "23: export const toPath = (path: Path): readonly NumOrString[] =>",
      "24:  isArray(path)",
      "25:   ? <any[]>path",
      "26:   : isString(path)",
      "27:   ? path.length > 0",
      "28:    ? path.split(\".\")",
      "29:    : []",
      "30:   : path != null",
      "31:   ? [path]",
      "32:   : [];",
      "",
      "[Added Lines]",
      "31: export const toPath = (path: Path): readonly NumOrString[] => {",
      "32:  if (isArray(path)) {",
      "33:   if (!path.every((x) => isString(x) || isNumber(x))) __illegal(path);",
      "34:   return <any[]>path;",
      "35:  } else {",
      "36:   return isString(path)",
      "37:    ? path.length > 0",
      "38:     ? path.split(\".\")",
      "39:     : []",
      "40:    : path != null",
      "41:    ? <any[]>[path]",
      "42:    : [];",
      "43:  }",
      "44: };",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "76: export const disallowProtoPath = (path: Path) => (",
      "77:  assert(!isProtoPath(path), `unsafe path: '${path}'`), path",
      "78: );",
      "",
      "[Added Lines]",
      "89: export const disallowProtoPath = (path: Path): readonly NumOrString[] => {",
      "90:  const $path = toPath(path);",
      "91:  if (isProtoPath($path)) __illegal(path);",
      "92:  return $path;",
      "93: };",
      "96: const __illegal = (path: any) =>",
      "97:  illegalArgs(`illegal path: ${JSON.stringify(path)}`);",
      "",
      "---------------"
    ],
    "packages/paths/test/main.test.ts||packages/paths/test/main.test.ts": [
      "File: packages/paths/test/main.test.ts -> packages/paths/test/main.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "170: test(\"mutIn\", () => {",
      "171:  const a: any = {};",
      "172:  expect(() => mutIn(a, [\"__proto__\", \"polluted\"], true)).toThrow();",
      "173: });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "173:  expect(() => mutIn(a, <any>[[\"__proto__\"], \"polluted\"], true)).toThrow();",
      "174:  expect(() => mutIn(a, <any>[[[\"__proto__\"]], \"polluted\"], true)).toThrow();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "202ee9c7ebb748288a36771a6bf8ebd1c1145c00",
      "candidate_info": {
        "commit_hash": "202ee9c7ebb748288a36771a6bf8ebd1c1145c00",
        "repo": "thi-ng/umbrella",
        "commit_url": "https://github.com/thi-ng/umbrella/commit/202ee9c7ebb748288a36771a6bf8ebd1c1145c00",
        "files": [
          "packages/paths/src/path.ts"
        ],
        "message": "fix(path): update `toPath()` & docs\n\n- update `toPath()` to ensure converted string path is valid\n  - disallow empty-string path segments\n  - only top-level empty string (or array) is allowed\n- update doc strings to correct & clarify extended checking via `disallowProtoPath()`\n- add tests",
        "before_after_code_files": [
          "packages/paths/src/path.ts||packages/paths/src/path.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "packages/paths/src/path.ts||packages/paths/src/path.ts"
          ],
          "candidate": [
            "packages/paths/src/path.ts||packages/paths/src/path.ts"
          ]
        }
      },
      "candidate_diff": {
        "packages/paths/src/path.ts||packages/paths/src/path.ts": [
          "File: packages/paths/src/path.ts -> packages/paths/src/path.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: export const toPath = (path: Path): readonly NumOrString[] => {",
          "35:  if (isArray(path)) {",
          "37:   return <any[]>path;",
          "38:  } else {",
          "39:   return isString(path)",
          "40:    ? path.length > 0",
          "42:     : []",
          "43:    : path != null",
          "44:    ? <any[]>[path]",
          "",
          "[Removed Lines]",
          "36:   if (!path.every((x) => isString(x) || isNumber(x))) __illegal(path);",
          "41:     ? path.split(\".\")",
          "",
          "[Added Lines]",
          "38:   if (!path.every((x) => (isString(x) && x !== \"\") || isNumber(x)))",
          "39:    __illegal(path);",
          "44:     ? toPath(path.split(\".\"))",
          "",
          "---------------"
        ]
      }
    }
  ]
}