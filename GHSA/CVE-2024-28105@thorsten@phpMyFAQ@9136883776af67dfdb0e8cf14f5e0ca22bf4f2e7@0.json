{
  "cve_id": "CVE-2024-28105",
  "cve_desc": "phpMyFAQ is an open source FAQ web application for PHP 8.1+ and MySQL, PostgreSQL and other databases. The category image upload function in phpmyfaq is vulnerable to manipulation of the `Content-type` and `lang` parameters, allowing attackers to upload malicious files with a .php extension, potentially leading to remote code execution (RCE) on the system. This vulnerability is fixed in 3.2.6.",
  "repo": "thorsten/phpMyFAQ",
  "patch_hash": "9136883776af67dfdb0e8cf14f5e0ca22bf4f2e7",
  "patch_info": {
    "commit_hash": "9136883776af67dfdb0e8cf14f5e0ca22bf4f2e7",
    "repo": "thorsten/phpMyFAQ",
    "commit_url": "https://github.com/thorsten/phpMyFAQ/commit/9136883776af67dfdb0e8cf14f5e0ca22bf4f2e7",
    "files": [
      "phpmyfaq/admin/api/attachment.php",
      "phpmyfaq/src/phpMyFAQ/Attachment/File.php"
    ],
    "message": "fix: don't allow to upload arbitrary binary data",
    "before_after_code_files": [
      "phpmyfaq/admin/api/attachment.php||phpmyfaq/admin/api/attachment.php",
      "phpmyfaq/src/phpMyFAQ/Attachment/File.php||phpmyfaq/src/phpMyFAQ/Attachment/File.php"
    ]
  },
  "patch_diff": {
    "phpmyfaq/admin/api/attachment.php||phpmyfaq/admin/api/attachment.php": [
      "File: phpmyfaq/admin/api/attachment.php -> phpmyfaq/admin/api/attachment.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:             if (",
      "82:                 is_uploaded_file($file['tmp_name']) &&",
      "83:                 !($file['size'] > $faqConfig->get('records.maxAttachmentSize')) &&",
      "85:             ) {",
      "86:                 $attachment = AttachmentFactory::create();",
      "87:                 $attachment->setRecordId($recordId);",
      "",
      "[Removed Lines]",
      "84:                 $file['type'] !== \"text/html\"",
      "",
      "[Added Lines]",
      "84:                 $file['type'] !== 'text/html' && $file['type'] !== 'application/octet-stream'",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "101:                 ];",
      "102:             } else {",
      "103:                 $response->setStatusCode(Response::HTTP_BAD_REQUEST);",
      "105:                 $response->send();",
      "106:                 return;",
      "107:             }",
      "",
      "[Removed Lines]",
      "104:                 $response->setData('The image is too large.');",
      "",
      "[Added Lines]",
      "104:                 $response->setData('The file is too large or unsupported.');",
      "",
      "---------------"
    ],
    "phpmyfaq/src/phpMyFAQ/Attachment/File.php||phpmyfaq/src/phpMyFAQ/Attachment/File.php": [
      "File: phpmyfaq/src/phpMyFAQ/Attachment/File.php -> phpmyfaq/src/phpMyFAQ/Attachment/File.php"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "96c1a1f3ced0e8576579a345176e2a14ef1d35f4",
      "candidate_info": {
        "commit_hash": "96c1a1f3ced0e8576579a345176e2a14ef1d35f4",
        "repo": "thorsten/phpMyFAQ",
        "commit_url": "https://github.com/thorsten/phpMyFAQ/commit/96c1a1f3ced0e8576579a345176e2a14ef1d35f4",
        "files": [
          "phpmyfaq/admin/api/attachment.php",
          "phpmyfaq/admin/assets/src/content/attachments.js",
          "phpmyfaq/admin/assets/src/content/index.js",
          "phpmyfaq/admin/assets/src/index.js",
          "phpmyfaq/admin/attachments.php",
          "phpmyfaq/admin/record.edit.php",
          "phpmyfaq/src/phpMyFAQ/Utils.php",
          "tests/phpMyFAQ/UtilsTest.php"
        ],
        "message": "refactor: rewrote attachment deletion, added method to format Bytes",
        "before_after_code_files": [
          "phpmyfaq/admin/api/attachment.php||phpmyfaq/admin/api/attachment.php",
          "phpmyfaq/admin/assets/src/content/attachments.js||phpmyfaq/admin/assets/src/content/attachments.js",
          "phpmyfaq/admin/assets/src/content/index.js||phpmyfaq/admin/assets/src/content/index.js",
          "phpmyfaq/admin/assets/src/index.js||phpmyfaq/admin/assets/src/index.js",
          "phpmyfaq/admin/attachments.php||phpmyfaq/admin/attachments.php",
          "phpmyfaq/admin/record.edit.php||phpmyfaq/admin/record.edit.php",
          "phpmyfaq/src/phpMyFAQ/Utils.php||phpmyfaq/src/phpMyFAQ/Utils.php",
          "tests/phpMyFAQ/UtilsTest.php||tests/phpMyFAQ/UtilsTest.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "phpmyfaq/admin/api/attachment.php||phpmyfaq/admin/api/attachment.php"
          ],
          "candidate": [
            "phpmyfaq/admin/api/attachment.php||phpmyfaq/admin/api/attachment.php"
          ]
        }
      },
      "candidate_diff": {
        "phpmyfaq/admin/api/attachment.php||phpmyfaq/admin/api/attachment.php": [
          "File: phpmyfaq/admin/api/attachment.php -> phpmyfaq/admin/api/attachment.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: $recordLang = Filter::filterInput(INPUT_POST, 'record_lang', FILTER_SANITIZE_SPECIAL_CHARS);",
          "38: $csrfToken = Filter::filterInput(INPUT_GET, 'csrf', FILTER_SANITIZE_SPECIAL_CHARS);",
          "46:                 $http->setStatus(401);",
          "48:                 exit(1);",
          "49:             }",
          "51:             if ($attachment->delete()) {",
          "52:                 $http->setStatus(200);",
          "54:             } else {",
          "55:                 $http->setStatus(400);",
          "57:             }",
          "84:                     }",
          "95:                 }",
          "96:             }",
          "106: }",
          "",
          "[Removed Lines]",
          "40: try {",
          "41:     $attachment = AttachmentFactory::create($attId);",
          "43:     switch ($ajaxAction) {",
          "44:         case 'delete':",
          "45:             if (!Token::getInstance()->verifyToken('delete-attachment', $csrfToken)) {",
          "47:                 echo Translation::get('err_NotAuth');",
          "53:                 echo Translation::get('msgAttachmentsDeleted');",
          "56:                 echo Translation::get('ad_att_delfail');",
          "58:             break;",
          "60:         case 'upload':",
          "61:             if (!isset($_FILES['filesToUpload'])) {",
          "62:                 $http->setStatus(400);",
          "63:                 return;",
          "64:             }",
          "66:             $files = AttachmentFactory::rearrangeUploadedFiles($_FILES['filesToUpload']);",
          "67:             $uploadedFiles = [];",
          "69:             foreach ($files as $file) {",
          "70:                 if (",
          "71:                     is_uploaded_file($file['tmp_name']) &&",
          "72:                     !($file['size'] > $faqConfig->get('records.maxAttachmentSize')) &&",
          "73:                     $file['type'] !== \"text/html\"",
          "74:                 ) {",
          "75:                     $attachment = AttachmentFactory::create();",
          "76:                     $attachment->setRecordId($recordId);",
          "77:                     $attachment->setRecordLang($recordLang);",
          "78:                     try {",
          "79:                         if (!$attachment->save($file['tmp_name'], $file['name'])) {",
          "80:                             throw new AttachmentException();",
          "81:                         }",
          "82:                     } catch (AttachmentException $e) {",
          "83:                         $attachment->delete();",
          "85:                     $uploadedFiles[] = [",
          "86:                         'attachmentId' => $attachment->getId(),",
          "87:                         'fileName' => $attachment->getFilename(),",
          "88:                         'faqId' => $recordId,",
          "89:                         'faqLanguage' => $recordLang",
          "90:                     ];",
          "91:                 } else {",
          "92:                     $http->setStatus(400);",
          "93:                     $http->sendJsonWithHeaders('The image is too large.');",
          "94:                     return;",
          "98:             $http->setStatus(200);",
          "99:             $http->sendJsonWithHeaders($uploadedFiles);",
          "100:             break;",
          "101:     }",
          "102: } catch (AttachmentException $e) {",
          "104: } catch (JsonException $e) {",
          "",
          "[Added Lines]",
          "41: switch ($ajaxAction) {",
          "42:     case 'delete':",
          "43:         $deleteData = json_decode(file_get_contents('php://input', true));",
          "44:         try {",
          "45:             $attachment = AttachmentFactory::create($deleteData->attId);",
          "47:             if (!Token::getInstance()->verifyToken('delete-attachment', $deleteData->csrf)) {",
          "49:                 $result = ['error' => Translation::get('err_NotAuth')];",
          "55:                 $result = ['success' => Translation::get('msgAttachmentsDeleted')];",
          "58:                 $result = ['error' => Translation::get('ad_att_delfail')];",
          "60:             $http->sendJsonWithHeaders($result);",
          "61:         } catch (AttachmentException | JsonException $e) {",
          "62:             $http->setStatus(500);",
          "63:             $result = ['error' => $e->getMessage()];",
          "64:         }",
          "65:         break;",
          "67:     case 'upload':",
          "68:         if (!isset($_FILES['filesToUpload'])) {",
          "69:             $http->setStatus(400);",
          "70:             return;",
          "71:         }",
          "73:         $files = AttachmentFactory::rearrangeUploadedFiles($_FILES['filesToUpload']);",
          "74:         $uploadedFiles = [];",
          "76:         foreach ($files as $file) {",
          "77:             if (",
          "78:                 is_uploaded_file($file['tmp_name']) &&",
          "79:                 !($file['size'] > $faqConfig->get('records.maxAttachmentSize')) &&",
          "80:                 $file['type'] !== \"text/html\"",
          "81:             ) {",
          "82:                 $attachment = AttachmentFactory::create();",
          "83:                 $attachment->setRecordId($recordId);",
          "84:                 $attachment->setRecordLang($recordLang);",
          "85:                 try {",
          "86:                     if (!$attachment->save($file['tmp_name'], $file['name'])) {",
          "87:                         throw new AttachmentException();",
          "89:                 } catch (AttachmentException $e) {",
          "90:                     $attachment->delete();",
          "92:                 $uploadedFiles[] = [",
          "93:                     'attachmentId' => $attachment->getId(),",
          "94:                     'fileName' => $attachment->getFilename(),",
          "95:                     'faqId' => $recordId,",
          "96:                     'faqLanguage' => $recordLang",
          "97:                 ];",
          "98:             } else {",
          "99:                 $http->setStatus(400);",
          "100:                 $http->sendJsonWithHeaders('The image is too large.');",
          "101:                 return;",
          "103:         }",
          "105:         $http->setStatus(200);",
          "106:         $http->sendJsonWithHeaders($uploadedFiles);",
          "107:         break;",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/assets/src/content/attachments.js||phpmyfaq/admin/assets/src/content/attachments.js": [
          "File: phpmyfaq/admin/assets/src/content/attachments.js -> phpmyfaq/admin/assets/src/content/attachments.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:   const attachmentTable = document.getElementById('attachment-table');",
          "",
          "[Removed Lines]",
          "18: document.addEventListener('DOMContentLoaded', () => {",
          "21:   attachmentTable.addEventListener('click', (event) => {",
          "22:     event.preventDefault();",
          "23:     const isButton = event.target.nodeName === 'BUTTON';",
          "25:     if (isButton) {",
          "26:       const attachmentId = event.target.getAttribute('data-attachment-id');",
          "27:       const csrf = event.target.getAttribute('data-csrf');",
          "29:       $('#pmf-admin-saving-data-indicator').html(",
          "30:         '<i class=\"fa fa-cog fa-spin fa-fw\"></i><span class=\"sr-only\">Deleting ...</span>'",
          "31:       );",
          "32:       $.ajax({",
          "33:         type: 'GET',",
          "34:         url: 'index.php?action=ajax&ajax=att&ajaxaction=delete',",
          "35:         data: { attId: attachmentId, csrf: csrf },",
          "36:         success: function (msg) {",
          "37:           $('.att_' + attachmentId).fadeOut('slow');",
          "38:           $('#pmf-admin-saving-data-indicator').html('<p class=\"alert alert-success\">' + msg + '</p>');",
          "39:         },",
          "40:       });",
          "41:     }",
          "42:   });",
          "43: });",
          "",
          "[Added Lines]",
          "16: export const handleDeleteAttachments = () => {",
          "19:   if (attachmentTable) {",
          "20:     attachmentTable.addEventListener('click', (event) => {",
          "21:       event.preventDefault();",
          "23:       const isButton = event.target.className.includes('btn-delete-attachment');",
          "24:       if (isButton) {",
          "25:         const attachmentId = event.target.getAttribute('data-attachment-id');",
          "26:         const csrf = event.target.getAttribute('data-csrf');",
          "28:         fetch('index.php?action=ajax&ajax=att&ajaxaction=delete', {",
          "29:           method: 'DELETE',",
          "30:           headers: {",
          "31:             Accept: 'application/json, text/plain, */*',",
          "32:             'Content-Type': 'application/json',",
          "33:           },",
          "34:           body: JSON.stringify({ attId: attachmentId, csrf: csrf }),",
          "35:         })",
          "36:           .then(async (response) => {",
          "37:             if (response.ok) {",
          "38:               return response.json();",
          "39:             }",
          "40:             throw new Error('Network response was not ok: ', { cause: { response } });",
          "41:           })",
          "42:           .then((response) => {",
          "43:             const row = document.getElementById(`attachment_${attachmentId}`);",
          "44:             row.addEventListener('click', () => (row.style.opacity = '0'));",
          "45:             row.addEventListener('transitionend', () => row.remove());",
          "46:           })",
          "47:           .catch(async (error) => {",
          "48:             console.error(await error.cause.response.json());",
          "49:           });",
          "50:       }",
          "51:     });",
          "52:   }",
          "53: };",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/assets/src/content/index.js||phpmyfaq/admin/assets/src/content/index.js": [
          "File: phpmyfaq/admin/assets/src/content/index.js -> phpmyfaq/admin/assets/src/content/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: export * from './attachment-upload';",
          "2: export * from './category';",
          "3: export * from './editor';",
          "4: export * from './faqs';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: export * from './attachments';",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/assets/src/index.js||phpmyfaq/admin/assets/src/index.js": [
          "File: phpmyfaq/admin/assets/src/index.js -> phpmyfaq/admin/assets/src/index.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import {",
          "27:   handleAttachmentUploads,",
          "28:   handleCategories,",
          "29:   handleFaqForm,",
          "30:   handleFaqOverview,",
          "31:   handleMarkdownForm,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:   handleDeleteAttachments,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:   handleFaqForm();",
          "66:   handleMarkdownForm();",
          "67:   handleAttachmentUploads();",
          "68:   await handleFaqOverview();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:   handleDeleteAttachments();",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/attachments.php||phpmyfaq/admin/attachments.php": [
          "File: phpmyfaq/admin/attachments.php -> phpmyfaq/admin/attachments.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: use phpMyFAQ\\Pagination;",
          "21: use phpMyFAQ\\Session\\Token;",
          "22: use phpMyFAQ\\Translation;",
          "24: if (!defined('IS_VALID_PHPMYFAQ')) {",
          "25:     http_response_code(400);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: use phpMyFAQ\\Utils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:       </thead>",
          "65:       <tbody id=\"attachment-table\">",
          "66:       <?php foreach ($crumbs as $item) : ?>",
          "68:           <td><?= $item->id ?></td>",
          "69:           <td><?= $item->filename ?></td>",
          "70:           <td><?= $item->record_lang ?></td>",
          "72:           <td><?= $item->mime_type ?></td>",
          "73:           <td>",
          "74:             <button class=\"btn btn-danger btn-delete-attachment\" title=\"<?= Translation::get('ad_gen_delete') ?>\"",
          "75:                     data-attachment-id=\"<?= $item->id ?>\"",
          "76:                     data-csrf=\"<?= Token::getInstance()->getTokenString('delete-attachment') ?>\">",
          "78:             </button>",
          "79:           </td>",
          "80:           <td>",
          "",
          "[Removed Lines]",
          "67:         <tr class=\"att_<?= $item->id ?>\" title=\"<?= $item->thema ?>\">",
          "71:           <td><?= $item->filesize ?></td>",
          "77:               <i aria-hidden=\"true\" class=\"fa fa-trash\"></i>",
          "",
          "[Added Lines]",
          "68:         <tr id=\"attachment_<?= $item->id ?>\" title=\"<?= $item->thema ?>\">",
          "72:           <td><?= Utils::formatBytes($item->filesize) ?></td>",
          "78:               <i aria-hidden=\"true\" class=\"fa fa-trash btn-delete-attachment\" data-attachment-id=\"<?= $item->id ?>\"",
          "79:                     data-csrf=\"<?= Token::getInstance()->getTokenString('delete-attachment') ?>\"></i>",
          "",
          "---------------"
        ],
        "phpmyfaq/admin/record.edit.php||phpmyfaq/admin/record.edit.php": [
          "File: phpmyfaq/admin/record.edit.php -> phpmyfaq/admin/record.edit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: use phpMyFAQ\\Tags;",
          "38: use phpMyFAQ\\Translation;",
          "39: use phpMyFAQ\\User;",
          "41: if (!defined('IS_VALID_PHPMYFAQ')) {",
          "42:     http_response_code(400);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: use phpMyFAQ\\Utils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "860:         <div class=\"modal-header\">",
          "861:           <h5 class=\"modal-title\" id=\"attachmentModalLabel\">",
          "862:               <?= Translation::get('ad_att_addto') . ' ' . Translation::get('ad_att_addto_2') ?>",
          "864:           </h5>",
          "865:             <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>",
          "866:         </div>",
          "",
          "[Removed Lines]",
          "863:             (max <?= round($faqConfig->get('records.maxAttachmentSize') / 1024 ** 2, 2) ?> MB)",
          "",
          "[Added Lines]",
          "864:             (max <?= Utils::formatBytes($faqConfig->get('records.maxAttachmentSize')) ?>)",
          "",
          "---------------"
        ],
        "phpmyfaq/src/phpMyFAQ/Utils.php||phpmyfaq/src/phpMyFAQ/Utils.php": [
          "File: phpmyfaq/src/phpMyFAQ/Utils.php -> phpmyfaq/src/phpMyFAQ/Utils.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:         unset($array[$key]);",
          "251:         $array = $temp + $array;",
          "252:     }",
          "253: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:     public static function formatBytes(int $bytes, int $precision = 2): string",
          "261:     {",
          "262:         $units = array('B', 'KB', 'MB', 'GB', 'TB');",
          "264:         $bytes = max($bytes, 0);",
          "265:         $pow = floor(($bytes ? log($bytes) : 0) / log(1024));",
          "266:         $pow = min($pow, count($units) - 1);",
          "268:         $bytes /= (1 << (10 * $pow));",
          "270:         return round($bytes, $precision) . ' ' . $units[$pow];",
          "271:     }",
          "",
          "---------------"
        ],
        "tests/phpMyFAQ/UtilsTest.php||tests/phpMyFAQ/UtilsTest.php": [
          "File: tests/phpMyFAQ/UtilsTest.php -> tests/phpMyFAQ/UtilsTest.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:         $invalidDate = '%2022/03/01 23:59:59%';",
          "180:         $this->assertFalse(Utils::isLikeOnPMFDate($invalidDate));",
          "181:     }",
          "182: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:     public function testFormatBytes(): void",
          "184:     {",
          "186:         $this->assertEquals('500 B', Utils::formatBytes(500));",
          "187:         $this->assertEquals('1023 B', Utils::formatBytes(1023));",
          "190:         $this->assertEquals('1 KB', Utils::formatBytes(1024));",
          "191:         $this->assertEquals('2.5 KB', Utils::formatBytes(2560));",
          "192:         $this->assertEquals('1023 KB', Utils::formatBytes(1023 * 1024));",
          "195:         $this->assertEquals('1 MB', Utils::formatBytes(1024 * 1024));",
          "196:         $this->assertEquals('2.5 MB', Utils::formatBytes(2560 * 1024));",
          "197:         $this->assertEquals('1023 MB', Utils::formatBytes(1023 * 1024 * 1024));",
          "200:         $this->assertEquals('1 GB', Utils::formatBytes(1024 * 1024 * 1024));",
          "201:         $this->assertEquals('2.5 GB', Utils::formatBytes(2560 * 1024 * 1024));",
          "202:         $this->assertEquals('1023 GB', Utils::formatBytes(1023 * 1024 * 1024 * 1024));",
          "205:         $this->assertEquals('1 TB', Utils::formatBytes(1024 * 1024 * 1024 * 1024));",
          "206:         $this->assertEquals('2.5 TB', Utils::formatBytes(2560 * 1024 * 1024 * 1024));",
          "207:         $this->assertEquals('1023 TB', Utils::formatBytes(1023 * 1024 * 1024 * 1024 * 1024));",
          "208:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}