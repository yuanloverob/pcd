{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "63eab422082c6da8d762870c8dbd9a7971aa88f0",
      "candidate_info": {
        "commit_hash": "63eab422082c6da8d762870c8dbd9a7971aa88f0",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/63eab422082c6da8d762870c8dbd9a7971aa88f0",
        "files": [
          "src/lib/components/chat/ToolServersModal.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/ToolServersModal.svelte||src/lib/components/chat/ToolServersModal.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/ToolServersModal.svelte||src/lib/components/chat/ToolServersModal.svelte": [
          "File: src/lib/components/chat/ToolServersModal.svelte -> src/lib/components/chat/ToolServersModal.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:  let selectedTools = [];",
          "20:  const i18n = getContext('i18n');",
          "21: </script>",
          "",
          "[Removed Lines]",
          "18:  $: selectedTools = $tools.filter((tool) => selectedToolIds.includes(tool.id));",
          "",
          "[Added Lines]",
          "18:  $: selectedTools = ($tools ?? []).filter((tool) => selectedToolIds.includes(tool.id));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b0af33274d39d0ddaa927666bd119b4472d4a96",
      "candidate_info": {
        "commit_hash": "2b0af33274d39d0ddaa927666bd119b4472d4a96",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/2b0af33274d39d0ddaa927666bd119b4472d4a96",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1341:                         try:",
          "1342:                             data = json.loads(data)",
          "1345:                             if \"selected_model_id\" in data:",
          "1346:                                 model_id = data[\"selected_model_id\"]",
          "",
          "[Removed Lines]",
          "1343:                             print(data)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3da7ff172124fc89e649fb09a300dac8ba31838f",
      "candidate_info": {
        "commit_hash": "3da7ff172124fc89e649fb09a300dac8ba31838f",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/3da7ff172124fc89e649fb09a300dac8ba31838f",
        "files": [
          "src/lib/components/channel/Thread.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/channel/Thread.svelte||src/lib/components/channel/Thread.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/channel/Thread.svelte||src/lib/components/channel/Thread.svelte": [
          "File: src/lib/components/channel/Thread.svelte -> src/lib/components/channel/Thread.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:    if (type === 'message') {",
          "64:     if ((data?.parent_id ?? null) === threadId) {",
          "69:      }",
          "70:     }",
          "71:    } else if (type === 'message:update') {",
          "76:     }",
          "77:    } else if (type === 'message:delete') {",
          "79:    } else if (type.includes('message:reaction')) {",
          "83:     }",
          "84:    } else if (type === 'typing' && event.message_id === threadId) {",
          "85:     if (event.user.id === $user.id) {",
          "",
          "[Removed Lines]",
          "65:      messages = [data, ...messages];",
          "67:      if (typingUsers.find((user) => user.id === event.user.id)) {",
          "68:       typingUsers = typingUsers.filter((user) => user.id !== event.user.id);",
          "72:     const idx = messages.findIndex((message) => message.id === data.id);",
          "74:     if (idx !== -1) {",
          "75:      messages[idx] = data;",
          "78:     messages = messages.filter((message) => message.id !== data.id);",
          "80:     const idx = messages.findIndex((message) => message.id === data.id);",
          "81:     if (idx !== -1) {",
          "82:      messages[idx] = data;",
          "",
          "[Added Lines]",
          "65:      if (messages) {",
          "66:       messages = [data, ...messages];",
          "68:       if (typingUsers.find((user) => user.id === event.user.id)) {",
          "69:        typingUsers = typingUsers.filter((user) => user.id !== event.user.id);",
          "70:       }",
          "74:     if (messages) {",
          "75:      const idx = messages.findIndex((message) => message.id === data.id);",
          "77:      if (idx !== -1) {",
          "78:       messages[idx] = data;",
          "79:      }",
          "82:     if (messages) {",
          "83:      messages = messages.filter((message) => message.id !== data.id);",
          "84:     }",
          "86:     if (messages) {",
          "87:      const idx = messages.findIndex((message) => message.id === data.id);",
          "88:      if (idx !== -1) {",
          "89:       messages[idx] = data;",
          "90:      }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ef7aff66304f98c871ed88214162c22f1c682f4",
      "candidate_info": {
        "commit_hash": "4ef7aff66304f98c871ed88214162c22f1c682f4",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/4ef7aff66304f98c871ed88214162c22f1c682f4",
        "files": [
          "backend/open_webui/retrieval/utils.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/retrieval/utils.py||backend/open_webui/retrieval/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/retrieval/utils.py||backend/open_webui/retrieval/utils.py": [
          "File: backend/open_webui/retrieval/utils.py -> backend/open_webui/retrieval/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: def merge_and_sort_query_results(",
          "142: ) -> list[dict]:",
          "143:     # Initialize lists to store combined data",
          "144:     combined_distances = []",
          "",
          "[Removed Lines]",
          "141:         query_results: list[dict], k: int, reverse: bool = False",
          "",
          "[Added Lines]",
          "141:     query_results: list[dict], k: int, reverse: bool = False",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:         combined_documents.extend(data[\"documents\"][0])",
          "152:         combined_metadatas.extend(data[\"metadatas\"][0])",
          "153:         # DISTINCT(chunk_id,file_id) - in case if id (chunk_ids) become ordinals",
          "156:     # Create a list of tuples (distance, document, metadata, ids)",
          "159:     # Sort the list based on distances",
          "160:     combined.sort(key=lambda x: x[0], reverse=reverse)",
          "",
          "[Removed Lines]",
          "154:         combined_ids.extend([id + meta[\"file_id\"] for id, meta in zip(data[\"ids\"][0], data[\"metadatas\"][0])])",
          "157:     combined = list(zip(combined_distances, combined_documents, combined_metadatas, combined_ids))",
          "",
          "[Added Lines]",
          "154:         combined_ids.extend(",
          "155:             [",
          "156:                 f\"{id}-{meta['file_id']}\"",
          "157:                 for id, meta in zip(data[\"ids\"][0], data[\"metadatas\"][0])",
          "158:             ]",
          "159:         )",
          "162:     combined = list(",
          "163:         zip(combined_distances, combined_documents, combined_metadatas, combined_ids)",
          "164:     )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7de88cc4ebf7076f3c92ea0cfebcaddfc395be7d",
      "candidate_info": {
        "commit_hash": "7de88cc4ebf7076f3c92ea0cfebcaddfc395be7d",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/7de88cc4ebf7076f3c92ea0cfebcaddfc395be7d",
        "files": [
          "src/lib/components/layout/Navbar/Menu.svelte",
          "src/lib/components/layout/Sidebar/ChatMenu.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/layout/Navbar/Menu.svelte||src/lib/components/layout/Navbar/Menu.svelte",
          "src/lib/components/layout/Sidebar/ChatMenu.svelte||src/lib/components/layout/Sidebar/ChatMenu.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/layout/Navbar/Menu.svelte||src/lib/components/layout/Navbar/Menu.svelte": [
          "File: src/lib/components/layout/Navbar/Menu.svelte -> src/lib/components/layout/Navbar/Menu.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     const isDarkMode = $theme.includes('dark'); // Check theme mode",
          "71:     const canvas = await html2canvas(containerElement, {",
          "72:      backgroundColor: isDarkMode ? '#000' : '#fff', // Ensure proper background",
          "73:      scale: 2, // Enhance resolution",
          "74:      height: containerElement.scrollHeight,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:      useCORS: true,",
          "",
          "---------------"
        ],
        "src/lib/components/layout/Sidebar/ChatMenu.svelte||src/lib/components/layout/Sidebar/ChatMenu.svelte": [
          "File: src/lib/components/layout/Sidebar/ChatMenu.svelte -> src/lib/components/layout/Sidebar/ChatMenu.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:     const isDarkMode = $theme.includes('dark'); // Check theme mode",
          "89:     const canvas = await html2canvas(containerElement, {",
          "90:      backgroundColor: isDarkMode ? '#000' : '#fff', // Ensure proper background",
          "91:      scale: 2, // Enhance resolution",
          "92:      height: containerElement.scrollHeight,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90:      useCORS: true,",
          "",
          "---------------"
        ]
      }
    }
  ]
}