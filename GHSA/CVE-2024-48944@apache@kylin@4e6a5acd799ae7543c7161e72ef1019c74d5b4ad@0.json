{
  "cve_id": "CVE-2024-48944",
  "cve_desc": "Server-Side Request Forgery (SSRF) vulnerability in Apache Kylin. Through a kylin server, an attacker may forge a request to invoke \"/kylin/api/xxx/diag\" api on another internal host and possibly get leaked information. There are two preconditions: 1) The attacker has got admin access to a kylin server; 2) Another internal host has the \"/kylin/api/xxx/diag\" api\n\nendpoint open for service.\n\n\nThis issue affects Apache Kylin: from 5.0.0 \nthrough \n\n5.0.1.\n\nUsers are recommended to upgrade to version 5.0.2, which fixes the issue.",
  "repo": "apache/kylin",
  "patch_hash": "4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
  "patch_info": {
    "commit_hash": "4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
    "files": [
      "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java"
    ],
    "message": "KYLIN-5644 fix diag api security, encryption changed from base64 to AES\n\nCo-authored-by: liang.hua <liang.hua@kyligence.io>",
    "before_after_code_files": [
      "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java||src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java||src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java"
    ]
  },
  "patch_diff": {
    "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java||src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java": [
      "File: src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java -> src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "81: import org.apache.kylin.common.msg.Message;",
      "82: import org.apache.kylin.common.msg.MsgPicker;",
      "83: import org.apache.kylin.common.persistence.transaction.TransactionException;",
      "84: import org.apache.kylin.common.util.JsonUtil;",
      "85: import org.apache.kylin.common.util.Pair;",
      "86: import org.apache.kylin.job.constant.JobStatusEnum;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84: import org.apache.kylin.common.util.EncryptUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "643:             if (StringUtils.isBlank(host) || host.startsWith(\"http://\")) {",
      "644:                 return host;",
      "645:             }",
      "647:         } catch (Exception e) {",
      "648:             logger.error(\"Failed to decode host, will use the original host name\");",
      "649:         }",
      "",
      "[Removed Lines]",
      "646:             return new String(Base64.decodeBase64(host), Charset.defaultCharset());",
      "",
      "[Added Lines]",
      "647:             String decryptValue = EncryptUtil.decrypt(new String(Base64.decodeBase64(host), Charset.defaultCharset()));",
      "648:             return StringUtils.isBlank(decryptValue) ? host : decryptValue;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "659:             if (!host.toLowerCase().startsWith(\"http\")) {",
      "660:                 host = \"http://\" + host;",
      "661:             }",
      "663:         } catch (Exception e) {",
      "664:             logger.error(\"Failed to encode host, will use the original host name\");",
      "665:         }",
      "",
      "[Removed Lines]",
      "662:             return Base64.encodeBase64String(host.getBytes(Charset.defaultCharset()));",
      "",
      "[Added Lines]",
      "664:             return Base64.encodeBase64String(EncryptUtil.encrypt(host).getBytes(Charset.defaultCharset()));",
      "",
      "---------------"
    ],
    "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java||src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java": [
      "File: src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java -> src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "311:         }",
      "312:         Assert.assertEquals(3, mockDataResponse.get(\"size\"));",
      "313:     }",
      "315: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "315:     @Test",
      "316:     public void testEncodeAndDecodeHost() {",
      "317:         Assert.assertTrue(nBasicController.encodeHost(\"\").isEmpty());",
      "318:         String host = \"localhost:7070\";",
      "319:         String encodeHost = nBasicController.encodeHost(host);",
      "320:         Assert.assertNotNull(encodeHost);",
      "321:         Assert.assertNotEquals(host, encodeHost);",
      "322:         String decodeHost = nBasicController.decodeHost(encodeHost);",
      "323:         Assert.assertEquals(\"http://\" + host, decodeHost);",
      "324:         Assert.assertEquals(\"ip\", nBasicController.decodeHost(\"ip\"));",
      "325:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "eee97ea91b644ffbc43e317f95500586587f230e",
      "candidate_info": {
        "commit_hash": "eee97ea91b644ffbc43e317f95500586587f230e",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/eee97ea91b644ffbc43e317f95500586587f230e",
        "files": [
          "src/modeling-service/src/main/java/org/apache/kylin/rest/response/NDataModelResponse.java"
        ],
        "message": "KYLIN-5645 model list api add response params for frontend",
        "before_after_code_files": [
          "src/modeling-service/src/main/java/org/apache/kylin/rest/response/NDataModelResponse.java||src/modeling-service/src/main/java/org/apache/kylin/rest/response/NDataModelResponse.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/modeling-service/src/main/java/org/apache/kylin/rest/response/NDataModelResponse.java||src/modeling-service/src/main/java/org/apache/kylin/rest/response/NDataModelResponse.java": [
          "File: src/modeling-service/src/main/java/org/apache/kylin/rest/response/NDataModelResponse.java -> src/modeling-service/src/main/java/org/apache/kylin/rest/response/NDataModelResponse.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:                 .collect(Collectors.toList()));",
          "171:     }",
          "174:     public boolean isEmptyModel() {",
          "175:         List<SimplifiedMeasure> simplifiedMeasures = getSimplifiedMeasures();",
          "176:         return getNamedColumns().isEmpty() && simplifiedMeasures.size() == 1",
          "177:                 && \"COUNT_ALL\".equals(simplifiedMeasures.get(0).getName());",
          "178:     }",
          "181:     public boolean isPartitionColumnInDims() {",
          "182:         PartitionDesc partitionDesc = getPartitionDesc();",
          "183:         if (partitionDesc == null || partitionDesc.getPartitionDateColumn() == null) {",
          "",
          "[Removed Lines]",
          "173:     @JsonIgnore",
          "180:     @JsonIgnore",
          "",
          "[Added Lines]",
          "173:     @JsonProperty(\"empty_model\")",
          "180:     @JsonProperty(\"partition_column_in_dims\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "92d08f19282263f70140fd93bfa7ae5a4c0d652b",
      "candidate_info": {
        "commit_hash": "92d08f19282263f70140fd93bfa7ae5a4c0d652b",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/92d08f19282263f70140fd93bfa7ae5a4c0d652b",
        "files": [
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java",
          "src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/application/SparkApplicationTest.java"
        ],
        "message": "KYLIN-5638 KE create spark history dir auto in SparkApplication (#30295)",
        "before_after_code_files": [
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java",
          "src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/application/SparkApplicationTest.java||src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/application/SparkApplicationTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java": [
          "File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java -> src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/application/SparkApplication.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:         }",
          "591:     }",
          "594:         if (isJobOnCluster(sparkConf) && !(this instanceof ResourceDetect)) {",
          "595:             Map<String, String> baseSparkConf = getSparkConfigOverride(config);",
          "596:             if (!baseSparkConf.isEmpty()) {",
          "",
          "[Removed Lines]",
          "593:     private void exchangeSparkConf(SparkConf sparkConf) throws Exception {",
          "",
          "[Added Lines]",
          "593:     @VisibleForTesting",
          "594:     void exchangeSparkConf(SparkConf sparkConf) throws Exception {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "606:                     logger.warn(\"Auto set spark conf failed. Load spark conf from system properties\", e);",
          "607:                 }",
          "608:             }",
          "609:         }",
          "611:         atomicSparkConf.set(sparkConf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "611:         }",
          "612:         val eventLogEnabled = sparkConf.getBoolean(\"spark.eventLog.enabled\", false);",
          "613:         val logDir = sparkConf.get(\"spark.eventLog.dir\", \"\");",
          "614:         if (eventLogEnabled && !logDir.isEmpty()) {",
          "615:             val logPath = new Path(new URI(logDir).getPath());",
          "616:             val fs = HadoopUtil.getWorkingFileSystem();",
          "617:             if (!fs.exists(logPath)) {",
          "618:                 fs.mkdirs(logPath);",
          "619:             }",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/application/SparkApplicationTest.java||src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/application/SparkApplicationTest.java": [
          "File: src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/application/SparkApplicationTest.java -> src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/application/SparkApplicationTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import java.util.Set;",
          "26: import java.util.UUID;",
          "28: import org.apache.commons.io.FileUtils;",
          "29: import org.apache.hadoop.fs.Path;",
          "30: import org.apache.kylin.common.KylinConfig;",
          "31: import org.apache.kylin.common.util.JsonUtil;",
          "32: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "33: import org.apache.kylin.engine.spark.job.KylinBuildEnv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import lombok.val;",
          "32: import org.apache.kylin.common.util.HadoopUtil;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: import org.apache.kylin.metadata.model.TableDesc;",
          "44: import org.apache.kylin.metadata.model.TableRef;",
          "45: import org.apache.kylin.metadata.model.TblColRef;",
          "46: import org.apache.spark.sql.hive.utils.ResourceDetectUtils;",
          "47: import org.junit.After;",
          "48: import org.junit.Assert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: import org.apache.spark.SparkConf;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "204:         Assert.assertFalse(upload.exists());",
          "205:     }",
          "207: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210:     @Test",
          "211:     public void testMkHistoryEventLog() throws Exception {",
          "212:         KylinConfig config = getTestConfig();",
          "213:         SparkApplication application = new SparkApplication() {",
          "214:             @Override",
          "215:             protected void doExecute() {",
          "216:             }",
          "217:         };",
          "218:         application.config = config;",
          "219:         SparkConf sparkConf = new SparkConf();",
          "221:         Path existedLogDir = new Path(\"/tmp/ke/testMkHistoryEventLog-existed-\" + System.currentTimeMillis());",
          "222:         Path notExistedLogDir = new Path(\"/tmp/ke/testMkHistoryEventLog-not-existed-\" + System.currentTimeMillis());",
          "223:         val fs = HadoopUtil.getWorkingFileSystem();",
          "224:         if (!fs.exists(existedLogDir)) {",
          "225:             fs.mkdirs(existedLogDir);",
          "226:         }",
          "227:         if (fs.exists(notExistedLogDir)) {",
          "228:             fs.delete(existedLogDir);",
          "229:         }",
          "230:         sparkConf.set(\"spark.eventLog.enabled\", \"false\");",
          "231:         sparkConf.set(\"spark.eventLog.dir\", notExistedLogDir.toString());",
          "232:         application.exchangeSparkConf(sparkConf);",
          "233:         assert !fs.exists(notExistedLogDir);",
          "234:         sparkConf.set(\"spark.eventLog.enabled\", \"true\");",
          "235:         application.exchangeSparkConf(sparkConf);",
          "236:         assert fs.exists(notExistedLogDir);",
          "237:         sparkConf.set(\"spark.eventLog.dir\", existedLogDir.toString());",
          "238:         application.exchangeSparkConf(sparkConf);",
          "239:         assert fs.exists(existedLogDir);",
          "240:         sparkConf.set(\"spark.eventLog.dir\", \"\");",
          "241:         application.exchangeSparkConf(sparkConf);",
          "242:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24801c50f048b33aa99f5ef560ddc10ae83befcb",
      "candidate_info": {
        "commit_hash": "24801c50f048b33aa99f5ef560ddc10ae83befcb",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/24801c50f048b33aa99f5ef560ddc10ae83befcb",
        "files": [
          "pom.xml",
          "src/datasource-service/src/main/java/org/apache/kylin/rest/service/SparkSourceService.java",
          "src/datasource-service/src/test/java/org/apache/kylin/rest/service/SparkSourceServiceTest.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java",
          "src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala"
        ],
        "message": "KYLIN-5635 adapt for delta table",
        "before_after_code_files": [
          "src/datasource-service/src/main/java/org/apache/kylin/rest/service/SparkSourceService.java||src/datasource-service/src/main/java/org/apache/kylin/rest/service/SparkSourceService.java",
          "src/datasource-service/src/test/java/org/apache/kylin/rest/service/SparkSourceServiceTest.java||src/datasource-service/src/test/java/org/apache/kylin/rest/service/SparkSourceServiceTest.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java",
          "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java",
          "src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala||src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/datasource-service/src/main/java/org/apache/kylin/rest/service/SparkSourceService.java||src/datasource-service/src/main/java/org/apache/kylin/rest/service/SparkSourceService.java": [
          "File: src/datasource-service/src/main/java/org/apache/kylin/rest/service/SparkSourceService.java -> src/datasource-service/src/main/java/org/apache/kylin/rest/service/SparkSourceService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: import org.apache.kylin.common.msg.MsgPicker;",
          "36: import org.apache.kylin.common.util.HadoopUtil;",
          "37: import org.apache.kylin.common.util.StringHelper;",
          "38: import org.apache.kylin.metadata.model.NTableMetadataManager;",
          "39: import org.apache.kylin.metadata.project.NProjectManager;",
          "40: import org.apache.kylin.rest.request.DDLRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.kylin.guava30.shaded.common.base.Strings;",
          "39: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "40: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: import org.apache.spark.sql.catalog.Table;",
          "55: import org.apache.spark.sql.catalyst.TableIdentifier;",
          "56: import org.apache.spark.sql.catalyst.catalog.CatalogTable;",
          "57: import org.apache.spark.sql.types.Metadata;",
          "58: import org.apache.spark.sql.types.StructField;",
          "59: import org.springframework.stereotype.Service;",
          "61: import com.fasterxml.jackson.annotation.JsonProperty;",
          "66: import lombok.Data;",
          "67: import lombok.val;",
          "",
          "[Removed Lines]",
          "62: import org.apache.kylin.guava30.shaded.common.base.Strings;",
          "63: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "64: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "[Added Lines]",
          "60: import org.apache.spark.sql.delta.DeltaTableUtils;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:         CatalogTable catalogTable = sparkSession.sessionState().catalog()",
          "166:                 .getTempViewOrPermanentTableMetadata(new TableIdentifier(table, Option.apply(db)));",
          "167:         scala.collection.immutable.List<StructField> structFieldList = catalogTable.schema().toList();",
          "168:         Iterator<StructField> structFieldIterator = structFieldList.iterator();",
          "170:         List<ColumnModel> columnModels = Lists.newArrayList();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:         if (DeltaTableUtils.isDeltaTable(catalogTable)) {",
          "170:             structFieldList = sparkSession.table(catalogTable.identifier()).schema().toList();",
          "171:         }",
          "",
          "---------------"
        ],
        "src/datasource-service/src/test/java/org/apache/kylin/rest/service/SparkSourceServiceTest.java||src/datasource-service/src/test/java/org/apache/kylin/rest/service/SparkSourceServiceTest.java": [
          "File: src/datasource-service/src/test/java/org/apache/kylin/rest/service/SparkSourceServiceTest.java -> src/datasource-service/src/test/java/org/apache/kylin/rest/service/SparkSourceServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import org.apache.kylin.common.KylinConfig;",
          "32: import org.apache.kylin.common.exception.KylinException;",
          "33: import org.apache.kylin.common.util.NLocalFileMetadataTestCase;",
          "34: import org.apache.kylin.metadata.project.NProjectManager;",
          "35: import org.apache.kylin.metadata.project.ProjectInstance;",
          "36: import org.apache.kylin.rest.request.DDLRequest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import org.apache.spark.sql.SparderEnv;",
          "43: import org.apache.spark.sql.SparkSession;",
          "44: import org.apache.spark.sql.catalyst.TableIdentifier;",
          "45: import org.junit.After;",
          "46: import org.junit.Assert;",
          "47: import org.junit.Before;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import org.apache.spark.sql.catalyst.catalog.CatalogTable;",
          "47: import org.apache.spark.sql.execution.command.DDLUtils;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49: import org.mockito.InjectMocks;",
          "50: import org.mockito.Mockito;",
          "54: public class SparkSourceServiceTest extends NLocalFileMetadataTestCase {",
          "",
          "[Removed Lines]",
          "52: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "[Added Lines]",
          "55: import scala.Option;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "62:     @Before",
          "63:     public void setUp() throws Exception {",
          "64:         createTestMetadata();",
          "66:         ss.sparkContext().hadoopConfiguration().set(\"javax.jdo.option.ConnectionURL\",",
          "67:                 \"jdbc:derby:memory:db;create=true\");",
          "68:         SparderEnv.setSparkSession(ss);",
          "",
          "[Removed Lines]",
          "65:         ss = SparkSession.builder().appName(\"local\").master(\"local[1]\").enableHiveSupport().getOrCreate();",
          "",
          "[Added Lines]",
          "68:         ss = SparkSession.builder().appName(\"local\").master(\"local[1]\")",
          "69:                 .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\")",
          "70:                 .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\")",
          "71:                 .enableHiveSupport().getOrCreate();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "200:     @Test",
          "201:     public void testListColumns() {",
          "202:         Assert.assertEquals(4, sparkSourceService.listColumns(\"default\", \"COUNTRY\").size());",
          "204:     }",
          "206:     @Test",
          "209:         String expectedTableStructure = \"CREATE EXTERNAL TABLE `default`.`hive_bigints`(   `id` BIGINT) \"",
          "210:                 + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe' \"",
          "",
          "[Removed Lines]",
          "207:     public void testExportTables() {",
          "",
          "[Added Lines]",
          "209:         sparkSourceService.executeSQL(",
          "210:                 \"CREATE EXTERNAL TABLE delta_bigints_2(id bigint,str string) USING DELTA LOCATION '/tmp/delta_data_spark_2'\");",
          "211:         Assert.assertEquals(2, sparkSourceService.listColumns(\"default\", \"delta_bigints_2\").size());",
          "216:     public void testExportTables() throws Exception {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "218:                 .getTables().get(\"hive_bigints\");",
          "219:         Assert.assertEquals(actureTableStructure.substring(0, actureTableStructure.lastIndexOf(\"TBLPROPERTIES\")),",
          "220:                 expectedTableStructure);",
          "224:         sparkSourceService.executeSQL(",
          "225:                 \"CREATE EXTERNAL TABLE spark_bigints(id bigint) USING PARQUET LOCATION '/tmp/parquet_data_spark'\");",
          "227:         String sparkDDL = sparkSourceService.exportTables(\"default\", new String[] { \"spark_bigints\" }).getTables()",
          "228:                 .get(\"spark_bigints\");",
          "229:         Assert.assertFalse(sparkDDL.isEmpty());",
          "230:         Assert.assertTrue(StringUtils.containsIgnoreCase(sparkDDL, \"USING PARQUET\"));",
          "233:         sparkSourceService.executeSQL(\"CREATE VIEW view_bigints as select id from default.spark_bigints\");",
          "234:         String viewDDL = DdlOperation.collectDDL(TableIdentifier.apply(\"view_bigints\"),",
          "235:                 \"show create view default.view_bigints\");",
          "236:         Assert.assertFalse(StringUtils.isEmpty(viewDDL));",
          "237:     }",
          "239:     @Test",
          "",
          "[Removed Lines]",
          "221:         Assert.assertTrue(DdlOperation.isHiveTable(\"default\", \"hive_bigints\"));",
          "226:         Assert.assertFalse(DdlOperation.isHiveTable(\"default\", \"spark_bigints\"));",
          "",
          "[Added Lines]",
          "230:         CatalogTable tableMetadata = SparderEnv.getSparkSession().sessionState().catalog()",
          "231:                 .getTableRawMetadata(new TableIdentifier(\"hive_bigints\", Option.apply(\"default\")));",
          "232:         Assert.assertTrue(DDLUtils.isHiveTable(tableMetadata));",
          "237:         tableMetadata = SparderEnv.getSparkSession().sessionState().catalog()",
          "238:                 .getTableRawMetadata(new TableIdentifier(\"spark_bigints\", Option.apply(\"default\")));",
          "239:         Assert.assertFalse(DDLUtils.isHiveTable(tableMetadata));",
          "246:         sparkSourceService.executeSQL(",
          "247:                 \"CREATE EXTERNAL TABLE delta_bigints(id bigint) USING DELTA LOCATION '/tmp/delta_data_spark'\");",
          "248:         tableMetadata = SparderEnv.getSparkSession().sessionState().catalog()",
          "249:                 .getTableRawMetadata(new TableIdentifier(\"delta_bigints\", Option.apply(\"default\")));",
          "250:         Assert.assertFalse(DDLUtils.isHiveTable(tableMetadata));",
          "251:         String deltaDDL = sparkSourceService.exportTables(\"default\", new String[] { \"delta_bigints\" }).getTables()",
          "252:                 .get(\"delta_bigints\");",
          "253:         Assert.assertFalse(deltaDDL.isEmpty());",
          "254:         Assert.assertTrue(StringUtils.containsIgnoreCase(deltaDDL, \"USING DELTA\"));",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java": [
          "File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java -> src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkMetadataExplorer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import org.apache.kylin.common.util.HadoopUtil;",
          "42: import org.apache.kylin.common.util.Pair;",
          "43: import org.apache.kylin.common.util.RandomUtil;",
          "44: import org.apache.kylin.metadata.model.ColumnDesc;",
          "45: import org.apache.kylin.metadata.model.ISourceAware;",
          "46: import org.apache.kylin.metadata.model.NTableMetadataManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57: import org.apache.spark.sql.catalog.Database;",
          "58: import org.apache.spark.sql.catalyst.catalog.CatalogTableType;",
          "59: import org.apache.spark.sql.internal.SQLConf;",
          "61: import org.slf4j.Logger;",
          "62: import org.slf4j.LoggerFactory;",
          "64: import com.clearspring.analytics.util.Lists;",
          "67: import lombok.val;",
          "",
          "[Removed Lines]",
          "65: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:     @Override",
          "103:     public List<String> listDatabases() throws Exception {",
          "104:         Dataset<Row> dataset = SparderEnv.getSparkSession().sql(\"show databases\").select(\"namespace\");",
          "107:         if (KylinConfig.getInstanceFromEnv().isDDLLogicalViewEnabled()) {",
          "108:             String logicalViewDB = KylinConfig.getInstanceFromEnv().getDDLLogicalViewDB();",
          "109:             databases.forEach(db -> {",
          "110:                 if (db.equalsIgnoreCase(logicalViewDB)) {",
          "113:                 }",
          "114:             });",
          "115:             List<String> databasesWithLogicalDB = Lists.newArrayList();",
          "",
          "[Removed Lines]",
          "105:         List<String> databases =",
          "106:             dataset.collectAsList().stream().map(row -> row.getString(0)).collect(Collectors.toList());",
          "111:                     throw new KylinException(DDL_CHECK_ERROR, \"Logical view database should not be duplicated \"",
          "112:                         + \"with normal hive database!!!\");",
          "",
          "[Added Lines]",
          "103:         List<String> databases = dataset.collectAsList().stream().map(row -> row.getString(0))",
          "104:                 .collect(Collectors.toList());",
          "109:                     throw new KylinException(DDL_CHECK_ERROR,",
          "110:                             \"Logical view database should not be duplicated \" + \"with normal hive database!!!\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:             isAccess = false;",
          "202:             try {",
          "203:                 logger.error(\"Read hive database {} error:{}, ugi name: {}.\", database, e.getMessage(),",
          "205:             } catch (IOException ex) {",
          "206:                 logger.error(\"fetch user curr ugi info error.\", e);",
          "207:             }",
          "",
          "[Removed Lines]",
          "204:                     UserGroupInformation.getCurrentUser().getUserName());",
          "",
          "[Added Lines]",
          "202:                         UserGroupInformation.getCurrentUser().getUserName());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "318:     public boolean checkDatabaseAccess(String database) throws Exception {",
          "319:         boolean hiveDBAccessFilterEnable = KapConfig.getInstanceFromEnv().getDBAccessFilterEnable();",
          "320:         String viewDB = KylinConfig.getInstanceFromEnv().getDDLLogicalViewDB();",
          "322:             return true;",
          "323:         }",
          "324:         if (hiveDBAccessFilterEnable) {",
          "",
          "[Removed Lines]",
          "321:         if(viewDB.equalsIgnoreCase(database)){",
          "",
          "[Added Lines]",
          "319:         if (viewDB.equalsIgnoreCase(database)) {",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java||src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java": [
          "File: src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java -> src/spark-project/engine-spark/src/main/java/org/apache/kylin/engine/spark/source/NSparkTableMetaExplorer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.apache.commons.jnet.Installer;",
          "30: import org.apache.hadoop.fs.FsUrlStreamHandlerFactory;",
          "31: import org.apache.spark.sql.SparderEnv;",
          "32: import org.apache.spark.sql.catalyst.TableIdentifier;",
          "33: import org.apache.spark.sql.catalyst.catalog.CatalogTable;",
          "34: import org.apache.spark.sql.catalyst.catalog.CatalogTableType;",
          "35: import org.apache.spark.sql.catalyst.catalog.SessionCatalog;",
          "36: import org.apache.spark.sql.types.StructType;",
          "37: import org.slf4j.Logger;",
          "38: import org.slf4j.LoggerFactory;",
          "43: import scala.Option;",
          "44: import scala.collection.JavaConversions;",
          "",
          "[Removed Lines]",
          "40: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "41: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "[Added Lines]",
          "31: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "32: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "38: import org.apache.spark.sql.delta.DeltaTableUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:     private NSparkTableMeta getSparkTableMeta(String tableName, CatalogTable tableMetadata) {",
          "112:         NSparkTableMetaBuilder builder = new NSparkTableMetaBuilder();",
          "113:         builder.setTableName(tableName);",
          "115:         builder.setOwner(tableMetadata.owner());",
          "116:         builder.setCreateTime(tableMetadata.createTime() + \"\");",
          "117:         builder.setLastAccessTime(tableMetadata.lastAccessTime() + \"\");",
          "",
          "[Removed Lines]",
          "114:         builder.setAllColumns(getColumns(tableMetadata, tableMetadata.schema()));",
          "",
          "[Added Lines]",
          "114:         StructType allColSchema = tableMetadata.schema();",
          "115:         if (DeltaTableUtils.isDeltaTable(tableMetadata)) {",
          "116:             allColSchema = SparderEnv.getSparkSession().table(tableMetadata.identifier()).schema();",
          "117:         }",
          "118:         builder.setAllColumns(getColumns(tableMetadata, allColSchema));",
          "",
          "---------------"
        ],
        "src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala||src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala": [
          "File: src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala -> src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.apache.spark.sql.execution.command._",
          "27: import org.apache.spark.sql.execution.{CommandExecutionMode, CommandResultExec, QueryExecution, SparkPlan}",
          "28: import org.apache.spark.sql.types.StructField",
          "30: import java.lang.{String => JString}",
          "31: import java.util.{List => JList}",
          "32: import scala.collection.JavaConverters._",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.apache.spark.sql.delta.DeltaTableUtils",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:   def getTableDesc(database: String, table: String): String = {",
          "110:     var sql = s\"SHOW CREATE TABLE $database.$table\"",
          "112:     val logicalPlan = SparderEnv.getSparkSession.sessionState.sqlParser.parsePlan(sql)",
          "113:     val queryExecution: QueryExecution = SparderEnv.getSparkSession.sessionState.executePlan(logicalPlan,",
          "114:       CommandExecutionMode.SKIP)",
          "",
          "[Removed Lines]",
          "111:     sql = if (isHiveTable(database, table)) sql + \" AS SERDE\" else sql",
          "",
          "[Added Lines]",
          "113:     var tableMetadata = SparderEnv.getSparkSession.sessionState.catalog",
          "114:       .getTableRawMetadata(TableIdentifier(table, Some(database)))",
          "115:     if (DeltaTableUtils.isDeltaTable(tableMetadata)) {",
          "116:       return  new ShowCreateTableCommand(TableIdentifier(table, Some(database)), Seq.empty).",
          "117:         run(SparderEnv.getSparkSession).toList.take(1).head.getString(0);",
          "118:     }",
          "119:     sql = if (DDLUtils.isHiveTable(tableMetadata)) sql + \" AS SERDE\" else sql",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "118:     }",
          "119:   }",
          "127:   def collectDDL(tableIdentifier: TableIdentifier, sql: String): String = {",
          "128:     val catalog: SessionCatalog = SparderEnv.getSparkSession.sessionState.catalog",
          "",
          "[Removed Lines]",
          "121:   def isHiveTable(database: String, table: String): Boolean = {",
          "122:     val tableMetadata = SparderEnv.getSparkSession.sessionState.catalog",
          "123:       .getTableRawMetadata(TableIdentifier(table, Some(database)))",
          "124:     !DDLUtils.isDatasourceTable(tableMetadata)",
          "125:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2398b03b5f7e063f976a8d5e481c393321b557e2",
      "candidate_info": {
        "commit_hash": "2398b03b5f7e063f976a8d5e481c393321b557e2",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/2398b03b5f7e063f976a8d5e481c393321b557e2",
        "files": [
          "src/common-booter/src/main/resources/log4j2.xml",
          "src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java",
          "src/data-loading-booter/src/main/resources/log4j2.xml",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/DataflowCapabilityCheckerTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java",
          "src/query-booter/src/main/resources/log4j2.xml",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/DataflowCapabilityChecker.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryLayoutChooser.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/schema/OLAPTable.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java",
          "src/server/src/main/resources/log4j2.xml",
          "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/util/RuntimeHelper.scala"
        ],
        "message": "KYLIN-5633 move some layout choosing code to the module of query-common",
        "before_after_code_files": [
          "src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/DataflowCapabilityCheckerTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java||src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java||src/query-common/src/main/java/org/apache/kylin/query/routing/DataflowCapabilityChecker.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java||src/query-common/src/main/java/org/apache/kylin/query/routing/QueryLayoutChooser.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/schema/OLAPTable.java||src/query-common/src/main/java/org/apache/kylin/query/schema/OLAPTable.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java||src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java||src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java",
          "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/util/RuntimeHelper.scala||src/spark-project/sparder/src/main/scala/org/apache/kylin/query/util/RuntimeHelper.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1308:         return Boolean.parseBoolean(getOptional(\"kylin.source.name-case-sensitive-enabled\", FALSE));",
          "1309:     }",
          "",
          "[Removed Lines]",
          "1307:     public Boolean getSourceNameCaseSensitiveEnabled() {",
          "",
          "[Added Lines]",
          "1307:     public boolean getSourceNameCaseSensitiveEnabled() {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2308:                         \"org.apache.kylin.query.util.SparkSQLFunctionConverter\" });",
          "2309:     }",
          "2314:     public String getQueryIndexMatchRules() {",
          "2315:         return getOptional(\"kylin.query.index-match-rules\", \"\");",
          "2316:     }",
          "2334:     public boolean useTableIndexAnswerSelectStarEnabled() {",
          "2337:     }",
          "2339:     @ThirdPartyDependencies({",
          "",
          "[Removed Lines]",
          "2311:     public static final String USE_VACANT_INDEXES = \"use-vacant-indexes\";",
          "2312:     public static final String USE_TABLE_INDEX_ANSWER_SELECT_STAR = \"use-table-index-answer-select-star\";",
          "2318:     private Set<String> getPruningRules() {",
          "2319:         String queryIndexMatchRules = getQueryIndexMatchRules();",
          "2320:         String[] splitRules = queryIndexMatchRules.split(\",\");",
          "2321:         Set<String> configRules = Sets.newHashSet();",
          "2322:         for (String splitRule : splitRules) {",
          "2323:             if (StringUtils.isNotBlank(splitRule)) {",
          "2324:                 configRules.add(StringUtils.lowerCase(splitRule));",
          "2325:             }",
          "2326:         }",
          "2327:         return configRules;",
          "2328:     }",
          "2330:     public boolean isVacantIndexPruningEnabled() {",
          "2331:         return getPruningRules().contains(KylinConfigBase.USE_VACANT_INDEXES);",
          "2332:     }",
          "2335:         return getPruningRules().contains(KylinConfigBase.USE_TABLE_INDEX_ANSWER_SELECT_STAR)",
          "2336:                 || Boolean.parseBoolean(getOptional(\"kylin.query.use-tableindex-answer-select-star.enabled\", FALSE));",
          "",
          "[Added Lines]",
          "2316:         return Boolean.parseBoolean(getOptional(\"kylin.query.use-tableindex-answer-select-star.enabled\", FALSE));",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: import org.apache.kylin.metadata.model.Segments;",
          "52: import org.apache.kylin.metadata.model.TableRef;",
          "53: import org.apache.kylin.metadata.model.TblColRef;",
          "55: import org.apache.kylin.metadata.realization.IRealization;",
          "57: import org.apache.kylin.metadata.realization.RealizationStatusEnum;",
          "60: import com.fasterxml.jackson.annotation.JsonAutoDetect;",
          "61: import com.fasterxml.jackson.annotation.JsonIgnore;",
          "",
          "[Removed Lines]",
          "54: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "56: import org.apache.kylin.metadata.realization.QueryableSeg;",
          "58: import org.apache.kylin.metadata.realization.SQLDigest;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:         return NIndexPlanManager.getInstance(config, project).getIndexPlan(uuid);",
          "207:     }",
          "224:     @Override",
          "225:     public boolean isStreaming() {",
          "226:         return getModel().isStreaming();",
          "",
          "[Removed Lines]",
          "209:     @Override",
          "210:     public CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,",
          "211:             Map<String, Set<Long>> chSegToLayoutsMap) {",
          "212:         return NDataflowCapabilityChecker.check(this, prunedSegments, digest, chSegToLayoutsMap);",
          "213:     }",
          "215:     @Override",
          "216:     public CapabilityResult isCapable(SQLDigest digest, QueryableSeg queryableSeg) {",
          "217:         if (isStreaming()) {",
          "218:             return isCapable(digest, queryableSeg.getStreamingSegments(), Maps.newHashMap());",
          "219:         } else {",
          "220:             return isCapable(digest, queryableSeg.getBatchSegments(), queryableSeg.getChSegToLayoutsMap());",
          "221:         }",
          "222:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1496:         return getModelType() == ModelType.STREAMING || getModelType() == ModelType.HYBRID;",
          "1497:     }",
          "1499:     public boolean isAccessible(boolean turnOnStreaming) {",
          "1500:         return turnOnStreaming || !isStreaming();",
          "1501:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1502:     public String getQueryCompatibleFactTable(String factTableOfQuery) {",
          "1503:         String rootFactTable = this.getRootFactTableName();",
          "1504:         if (!rootFactTable.equals(factTableOfQuery) && this.isFusionModel() && !this.isStreaming()) {",
          "1505:             NDataModel streamingModel = NDataModelManager",
          "1506:                     .getInstance(KylinConfig.getInstanceFromEnv(), this.getProject())",
          "1507:                     .getDataModelDesc(this.getFusionId());",
          "1508:             rootFactTable = streamingModel.getRootFactTableName();",
          "1509:         }",
          "1510:         return rootFactTable;",
          "1511:     }",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/CapabilityResult.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     public List<CapabilityInfluence> influences = Lists.newArrayListWithCapacity(1);",
          "80:     public interface CapabilityInfluence {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     public double getCost(boolean isStreaming) {",
          "81:         return isStreaming ? selectedStreamingCandidate.getCost() : selectedCandidate.getCost();",
          "82:     }",
          "84:     public void setCandidate(boolean isStreaming, CapabilityResult result) {",
          "85:         if (isStreaming) {",
          "86:             setSelectedStreamingCandidate(result.getSelectedStreamingCandidate());",
          "87:         } else {",
          "88:             setSelectedCandidate(result.getSelectedCandidate());",
          "89:         }",
          "90:     }",
          "92:     public void setCandidate(boolean isStreaming, IRealizationCandidate candidate) {",
          "93:         if (isStreaming) {",
          "94:             setSelectedStreamingCandidate(candidate);",
          "95:         } else {",
          "96:             setSelectedCandidate(candidate);",
          "97:         }",
          "98:     }",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/HybridRealization.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.ArrayList;",
          "22: import java.util.LinkedHashSet;",
          "23: import java.util.List;",
          "25: import java.util.Set;",
          "27: import org.apache.kylin.common.KylinConfig;",
          "28: import org.apache.kylin.common.KylinConfigExt;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "33: import org.apache.kylin.metadata.model.FunctionDesc;",
          "34: import org.apache.kylin.metadata.model.IStorageAware;",
          "35: import org.apache.kylin.metadata.model.MeasureDesc;",
          "36: import org.apache.kylin.metadata.model.NDataModel;",
          "37: import org.apache.kylin.metadata.model.NDataModelManager;",
          "39: import org.apache.kylin.metadata.model.TblColRef;",
          "41: import lombok.Getter;",
          "",
          "[Removed Lines]",
          "24: import java.util.Map;",
          "30: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "31: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "32: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "38: import org.apache.kylin.metadata.model.SegmentRange;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: public class HybridRealization implements IRealization {",
          "47:     public static final String REALIZATION_TYPE = \"HYBRID\";",
          "51:     @Getter",
          "52:     private String uuid;",
          "",
          "[Removed Lines]",
          "48:     public static final String HYBRID_CAPABLE_ERROR_MSG = \"The fusion model can only execute this method separately \"",
          "49:             + \"for the batch model and the stream model it contains.\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:         });",
          "123:     }",
          "182:     @Override",
          "183:     public int getCost() {",
          "184:         int c = Integer.MAX_VALUE;",
          "",
          "[Removed Lines]",
          "125:     @Override",
          "126:     public CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,",
          "127:             Map<String, Set<Long>> chSegToLayoutsMap) {",
          "128:         throw new IllegalStateException(HYBRID_CAPABLE_ERROR_MSG);",
          "129:     }",
          "131:     public CapabilityResult isCapable(SQLDigest digest, QueryableSeg queryableSeg) {",
          "132:         CapabilityResult result = new CapabilityResult();",
          "134:         resolveSegmentsOverlap(queryableSeg.getStreamingSegments());",
          "135:         for (IRealization realization : getRealizations()) {",
          "136:             CapabilityResult child;",
          "137:             if (realization.isStreaming()) {",
          "138:                 child = realization.isCapable(digest, queryableSeg.getStreamingSegments(), Maps.newHashMap());",
          "139:                 result.setSelectedStreamingCandidate(child.getSelectedStreamingCandidate());",
          "140:                 if (child.isCapable()) {",
          "141:                     result.setCost(Math.min(result.getCost(), child.getSelectedStreamingCandidate().getCost()));",
          "142:                 }",
          "143:             } else {",
          "144:                 child = realization.isCapable(digest, queryableSeg.getBatchSegments(),",
          "145:                         queryableSeg.getChSegToLayoutsMap());",
          "146:                 result.setSelectedCandidate(child.getSelectedCandidate());",
          "147:                 if (child.isCapable()) {",
          "148:                     result.setCost(Math.min(result.getCost(), child.getSelectedCandidate().getCost()));",
          "149:                 }",
          "150:             }",
          "151:             if (child.isCapable()) {",
          "152:                 result.setCapable(true);",
          "153:                 result.influences.addAll(child.influences);",
          "154:             } else {",
          "155:                 result.incapableCause = child.incapableCause;",
          "156:             }",
          "157:         }",
          "159:         result.setCost(result.getCost() - 1); // let hybrid win its children",
          "161:         return result;",
          "162:     }",
          "168:     private void resolveSegmentsOverlap(List<NDataSegment> prunedStreamingSegments) {",
          "169:         long end = batchRealization.getDateRangeEnd();",
          "170:         if (end != Long.MIN_VALUE) {",
          "171:             String segments = prunedStreamingSegments.toString();",
          "172:             log.info(\"Before resolve segments overlap between batch and stream of fusion model: {}\", segments);",
          "173:             SegmentRange.BasicSegmentRange range = new SegmentRange.KafkaOffsetPartitionedSegmentRange(end,",
          "174:                     Long.MAX_VALUE);",
          "175:             List<NDataSegment> list = ((NDataflow) streamingRealization).getQueryableSegmentsByRange(range);",
          "176:             prunedStreamingSegments.removeIf(seg -> !list.contains(seg));",
          "177:             segments = prunedStreamingSegments.toString();",
          "178:             log.info(\"After resolve segments overlap between batch and stream of fusion model: {}\", segments);",
          "179:         }",
          "180:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.metadata.realization;",
          "21: import java.util.List;",
          "23: import java.util.Set;",
          "25: import org.apache.kylin.common.KylinConfig;",
          "27: import org.apache.kylin.metadata.model.FunctionDesc;",
          "28: import org.apache.kylin.metadata.model.IStorageAware;",
          "29: import org.apache.kylin.metadata.model.MeasureDesc;",
          "",
          "[Removed Lines]",
          "22: import java.util.Map;",
          "26: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "33: public interface IRealization extends IStorageAware {",
          "",
          "[Removed Lines]",
          "38:     CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,",
          "39:             Map<String, Set<Long>> chSegToLayoutsMap);",
          "41:     CapabilityResult isCapable(SQLDigest digest, QueryableSeg queryableSeg);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/DataflowCapabilityCheckerTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/DataflowCapabilityCheckerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import org.apache.calcite.sql.parser.SqlParseException;",
          "24: import org.apache.kylin.common.KylinConfig;",
          "25: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "26: import org.apache.kylin.metadata.cube.cuboid.NLookupCandidate;",
          "27: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "28: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "30: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "31: import org.apache.kylin.metadata.cube.model.NDataflowUpdate;",
          "32: import org.apache.kylin.metadata.model.NTableMetadataManager;",
          "",
          "[Removed Lines]",
          "29: import org.apache.kylin.metadata.cube.model.NDataflowCapabilityChecker;",
          "",
          "[Added Lines]",
          "26: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: import org.junit.Assert;",
          "37: import org.junit.Test;",
          "41:     @Test",
          "42:     public void testCapabilityResult() throws SqlParseException {",
          "",
          "[Removed Lines]",
          "39: public class NDataflowCapabilityCheckerTest extends NLocalWithSparkSessionTest {",
          "",
          "[Added Lines]",
          "39: public class DataflowCapabilityCheckerTest extends NLocalWithSparkSessionTest {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "47:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "48:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "51:         Assert.assertNotNull(result);",
          "52:         Assert.assertEquals(result.getSelectedCandidate().getCost(), result.getCost(), 0.001);",
          "53:     }",
          "",
          "[Removed Lines]",
          "49:         CapabilityResult result = NDataflowCapabilityChecker.check(dataflow, dataflow.getQueryableSegments(),",
          "50:                 olapContext.getSQLDigest(), null);",
          "",
          "[Added Lines]",
          "49:         Candidate candidate = new Candidate(dataflow, olapContext, sqlAlias2ModelNameMap);",
          "50:         CapabilityResult result = DataflowCapabilityChecker.check(dataflow, candidate, olapContext.getSQLDigest());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "67:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "68:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "69:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "72:             Assert.assertNotNull(result);",
          "73:             Assert.assertTrue(result.getSelectedCandidate() instanceof NLookupCandidate);",
          "74:             Assert.assertFalse(olapContext.getSQLDigest().allColumns.isEmpty());",
          "",
          "[Removed Lines]",
          "70:             CapabilityResult result = NDataflowCapabilityChecker.check(dataflow, dataflow.getQueryableSegments(),",
          "71:                     olapContext.getSQLDigest(), null);",
          "",
          "[Added Lines]",
          "70:             Candidate candidate = new Candidate(dataflow, olapContext, sqlAlias2ModelNameMap);",
          "71:             CapabilityResult result = DataflowCapabilityChecker.check(dataflow, candidate, olapContext.getSQLDigest());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "81:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "82:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "83:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "86:             Assert.assertNotNull(result);",
          "87:             Assert.assertTrue(result.getSelectedCandidate() instanceof NLookupCandidate);",
          "88:             Assert.assertFalse(olapContext.getSQLDigest().allColumns.isEmpty());",
          "",
          "[Removed Lines]",
          "84:             CapabilityResult result = NDataflowCapabilityChecker.check(dataflow, dataflow.getQueryableSegments(),",
          "85:                     olapContext.getSQLDigest(), null);",
          "",
          "[Added Lines]",
          "84:             Candidate candidate = new Candidate(dataflow, olapContext, sqlAlias2ModelNameMap);",
          "85:             CapabilityResult result = DataflowCapabilityChecker.check(dataflow, candidate, olapContext.getSQLDigest());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "96:             removeAllSegments(dataflow);",
          "97:             dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "98:                     .getDataflow(\"89af4ee2-2cdb-4b07-b39e-4c29856309aa\");",
          "101:             Assert.assertFalse(result.isCapable());",
          "102:         }",
          "103:     }",
          "",
          "[Removed Lines]",
          "99:             CapabilityResult result = NDataflowCapabilityChecker.check(dataflow, dataflow.getQueryableSegments(),",
          "100:                     olapContext.getSQLDigest(), null);",
          "",
          "[Added Lines]",
          "99:             Candidate candidate = new Candidate(dataflow, olapContext, Maps.newHashMap());",
          "100:             CapabilityResult result = DataflowCapabilityChecker.check(dataflow, candidate, olapContext.getSQLDigest());",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.apache.calcite.rex.RexNode;",
          "27: import org.apache.calcite.sql.parser.SqlParseException;",
          "28: import org.apache.kylin.common.KylinConfig;",
          "30: import org.apache.kylin.common.QueryContext;",
          "31: import org.apache.kylin.common.util.DateFormat;",
          "32: import org.apache.kylin.common.util.Pair;",
          "",
          "[Removed Lines]",
          "29: import org.apache.kylin.common.KylinConfigBase;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615:         {",
          "616:             MetadataTestUtils.updateProjectConfig(project, \"kylin.query.index-match-rules\",",
          "618:             try (QueryContext queryContext = QueryContext.current()) {",
          "619:                 OLAPContext olapContext = OlapContextUtil.getOlapContexts(project, sql).get(0);",
          "620:                 StorageContext storageContext = olapContext.storageContext;",
          "",
          "[Removed Lines]",
          "617:                     KylinConfigBase.USE_VACANT_INDEXES);",
          "",
          "[Added Lines]",
          "616:                     QueryRouter.USE_VACANT_INDEXES);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "661:                 + \"where cal_dt between date'2012-01-01' and date'2012-01-03'\\n\" //",
          "662:                 + \"group by cal_dt\\n\";",
          "666:         try (QueryContext queryContext = QueryContext.current()) {",
          "667:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(project, sql).get(0);",
          "668:             StorageContext storageContext = olapContext.storageContext;",
          "",
          "[Removed Lines]",
          "664:         MetadataTestUtils.updateProjectConfig(project, \"kylin.query.index-match-rules\",",
          "665:                 KylinConfigBase.USE_VACANT_INDEXES);",
          "",
          "[Added Lines]",
          "663:         MetadataTestUtils.updateProjectConfig(project, \"kylin.query.index-match-rules\", QueryRouter.USE_VACANT_INDEXES);",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "30: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "32: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "33: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "34: import org.apache.kylin.metadata.cube.model.NDataLayout;",
          "",
          "[Removed Lines]",
          "31: import org.apache.kylin.metadata.cube.cuboid.NQueryLayoutChooser;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:             String modelWithNoCCId = \"abe3bf1a-c4bc-458d-8278-7ea8b00f5e96\";",
          "83:             NDataflow dataflowNoCC = dataflowManager.getDataflow(modelWithNoCCId);",
          "85:                     dataflowNoCC.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "86:             Assert.assertNull(layoutCandidate);",
          "87:         }",
          "",
          "[Removed Lines]",
          "84:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflowNoCC,",
          "",
          "[Added Lines]",
          "83:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflowNoCC,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:             String modelWithNoCCId = \"abe3bf1a-c4bc-458d-8278-7ea8b00f5e96\";",
          "102:             NDataflow dataflowNoCC = dataflowManager.getDataflow(modelWithNoCCId);",
          "104:                     dataflowNoCC.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "105:             Assert.assertNull(layoutCandidate);",
          "106:         }",
          "",
          "[Removed Lines]",
          "103:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflowNoCC,",
          "",
          "[Added Lines]",
          "102:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflowNoCC,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "120:             String modelWithNoCCId = \"abe3bf1a-c4bc-458d-8278-7ea8b00f5e96\";",
          "121:             NDataflow dataflowNoCC = dataflowManager.getDataflow(modelWithNoCCId);",
          "123:                     dataflowNoCC.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "124:             Assert.assertNull(layoutCandidate);",
          "125:         }",
          "",
          "[Removed Lines]",
          "122:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflowNoCC,",
          "",
          "[Added Lines]",
          "121:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflowNoCC,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "151:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "152:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "154:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "155:             Assert.assertNotNull(layoutCandidate);",
          "156:             Assert.assertEquals(10001L, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "153:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "152:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "164:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "165:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "166:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "168:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "169:             Assert.assertNotNull(layoutCandidate);",
          "170:             Assert.assertTrue(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "",
          "[Removed Lines]",
          "167:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "166:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "188:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "189:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "190:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "192:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "193:             Assert.assertNotNull(layoutCandidate);",
          "194:             Assert.assertEquals(1010001, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "191:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "190:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "200:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "201:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "202:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "204:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "205:             Assert.assertNotNull(layoutCandidate);",
          "206:             Assert.assertEquals(1010002, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "203:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "202:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "214:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "215:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "216:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "218:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "219:             Assert.assertNotNull(layoutCandidate);",
          "220:             Assert.assertEquals(1010002, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "217:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "216:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "291:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "292:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "293:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "295:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "296:         Assert.assertNotNull(layoutCandidate);",
          "297:         Assert.assertEquals(1010001L, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "294:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "293:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "359:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "360:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "361:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "363:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "364:         Assert.assertNotNull(layoutCandidate);",
          "365:         Assert.assertEquals(20000000001L, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "362:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "361:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "387:         OLAPContext oneOlapContext = olapContexts.get(0);",
          "388:         Map<String, String> oneMap = OlapContextUtil.matchJoins(dataflow.getModel(), oneOlapContext);",
          "389:         oneOlapContext.fixModel(dataflow.getModel(), oneMap);",
          "391:                 dataflow.getQueryableSegments(), oneOlapContext.getSQLDigest(), null);",
          "392:         Assert.assertNotNull(layoutCandidate);",
          "393:         Assert.assertEquals(1L, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "390:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "389:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "396:         OLAPContext anotherOlapContext = olapContexts.get(1);",
          "397:         Map<String, String> anotherMap = OlapContextUtil.matchJoins(dataflow.getModel(), anotherOlapContext);",
          "398:         anotherOlapContext.fixModel(dataflow.getModel(), anotherMap);",
          "400:                 dataflow.getQueryableSegments(), anotherOlapContext.getSQLDigest(), null);",
          "401:         Assert.assertNotNull(anotherCandidate);",
          "402:         Assert.assertEquals(1L, anotherCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "399:         NLayoutCandidate anotherCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "398:         NLayoutCandidate anotherCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "425:         OLAPContext oneOlapContext = olapContexts.get(0);",
          "426:         Map<String, String> oneMap = OlapContextUtil.matchJoins(dataflow.getModel(), oneOlapContext);",
          "427:         oneOlapContext.fixModel(dataflow.getModel(), oneMap);",
          "429:                 dataflow.getQueryableSegments(), oneOlapContext.getSQLDigest(), null);",
          "430:         Assert.assertNotNull(layoutCandidate);",
          "431:         Assert.assertEquals(1L, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "428:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "427:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "434:         OLAPContext anotherOlapContext = olapContexts.get(1);",
          "435:         Map<String, String> anotherMap = OlapContextUtil.matchJoins(dataflow.getModel(), anotherOlapContext);",
          "436:         anotherOlapContext.fixModel(dataflow.getModel(), anotherMap);",
          "438:                 dataflow.getQueryableSegments(), anotherOlapContext.getSQLDigest(), null);",
          "439:         Assert.assertNotNull(anotherCandidate);",
          "440:         Assert.assertEquals(20000000001L, anotherCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "437:         NLayoutCandidate anotherCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "436:         NLayoutCandidate anotherCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "470:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "471:             Assert.assertNotNull(layoutCandidate);",
          "472:             Assert.assertEquals(1010002, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "469:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "468:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "478:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "479:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "480:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "482:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "483:             Assert.assertNotNull(layoutCandidate);",
          "484:             Assert.assertEquals(1010003, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "481:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "480:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "537:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "538:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "539:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "541:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "543:         Assert.assertNotNull(layoutCandidate);",
          "",
          "[Removed Lines]",
          "540:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "539:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "563:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "564:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "565:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "567:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "568:             Assert.assertNotNull(layoutCandidate);",
          "569:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "",
          "[Removed Lines]",
          "566:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "565:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "574:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "575:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "576:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "578:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "579:             Assert.assertNotNull(layoutCandidate);",
          "580:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "",
          "[Removed Lines]",
          "577:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "576:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "585:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "586:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "587:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "589:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "590:             Assert.assertNotNull(layoutCandidate);",
          "591:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "",
          "[Removed Lines]",
          "588:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "587:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "596:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "597:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "598:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "600:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "601:             Assert.assertNotNull(layoutCandidate);",
          "602:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "",
          "[Removed Lines]",
          "599:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "598:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "607:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "608:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "609:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "611:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "612:             Assert.assertNotNull(layoutCandidate);",
          "613:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "",
          "[Removed Lines]",
          "610:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "609:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "618:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "619:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "620:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "622:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "623:             Assert.assertNull(layoutCandidate);",
          "624:         }",
          "",
          "[Removed Lines]",
          "621:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "620:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "629:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "630:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "631:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "633:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "634:             Assert.assertNotNull(layoutCandidate);",
          "635:             Assert.assertTrue(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "",
          "[Removed Lines]",
          "632:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "631:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "665:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "666:             Map<String, String> tableAlias2ModelAliasMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "667:             olapContext.fixModel(dataflow.getModel(), tableAlias2ModelAliasMap);",
          "669:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "670:             Assert.assertNotNull(layoutCandidate);",
          "671:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "",
          "[Removed Lines]",
          "668:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "667:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "676:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "677:             Map<String, String> tableAlias2ModelAliasMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "678:             olapContext.fixModel(dataflow.getModel(), tableAlias2ModelAliasMap);",
          "680:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "681:             Assert.assertNotNull(layoutCandidate);",
          "682:             Assert.assertTrue(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "",
          "[Removed Lines]",
          "679:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "678:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "694:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), project).getDataflow(modelId);",
          "695:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "696:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "698:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "699:         Assert.assertNotNull(layoutCandidate);",
          "700:         Assert.assertTrue(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "",
          "[Removed Lines]",
          "697:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "696:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "718:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "719:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "721:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "722:         Assert.assertNotNull(layoutCandidate);",
          "723:         Assert.assertTrue(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "",
          "[Removed Lines]",
          "720:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "719:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "743:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "744:             Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "745:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "747:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "748:             Assert.assertNotNull(layoutCandidate);",
          "749:             Assert.assertEquals(20000010001L, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "746:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "745:             NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "780:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "781:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "782:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "784:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "785:         Assert.assertNotNull(layoutCandidate);",
          "786:         Assert.assertEquals(1L, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "783:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "782:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: import org.apache.kylin.job.engine.JobEngineConfig;",
          "33: import org.apache.kylin.job.impl.threadpool.NDefaultScheduler;",
          "34: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "36: import org.apache.kylin.metadata.cube.model.NDataLayout;",
          "37: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "38: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "",
          "[Removed Lines]",
          "35: import org.apache.kylin.metadata.cube.cuboid.NQueryLayoutChooser;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:         Assert.assertEquals(dataflow.getAllColumns().size(), context.allColumns.size());",
          "138:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), context);",
          "139:         context.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "141:                 dataflow.getQueryableSegments(), context.getSQLDigest(), null);",
          "142:         Assert.assertNotNull(layoutCandidate);",
          "143:         Assert.assertEquals(20000000001L, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "140:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "139:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "153:         Assert.assertEquals(dataflow.getAllColumns().size(), context.allColumns.size());",
          "154:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), context);",
          "155:         context.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "157:                 dataflow.getQueryableSegments(), context.getSQLDigest(), null);",
          "158:         Assert.assertNotNull(layoutCandidate);",
          "159:         Assert.assertEquals(20000010001L, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "156:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "155:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "215:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), context);",
          "216:         context.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "218:                 dataflow.getQueryableSegments(), context.getSQLDigest(), null);",
          "219:         Assert.assertNotNull(layoutCandidate);",
          "220:         Assert.assertEquals(20000010001L, layoutCandidate.getLayoutEntity().getId());",
          "",
          "[Removed Lines]",
          "217:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "[Added Lines]",
          "216:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/VacantIndexPruningRuleTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import java.util.Map;",
          "24: import org.apache.calcite.sql.parser.SqlParseException;",
          "26: import org.apache.kylin.common.QueryContext;",
          "27: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "28: import org.apache.kylin.junit.annotation.MetadataInfo;",
          "",
          "[Removed Lines]",
          "25: import org.apache.kylin.common.KylinConfigBase;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71:                 .forEach(model -> cleanAlreadyExistingLayoutsInSegments(model.getId()));",
          "73:         MetadataTestUtils.updateProjectConfig(getProject(), \"kylin.query.index-match-rules\",",
          "75:         try (QueryContext queryContext = QueryContext.current()) {",
          "76:             String sql = \"select max(LO_ORDERDATE) from ssb.lineorder\";",
          "77:             List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "",
          "[Removed Lines]",
          "74:                 KylinConfigBase.USE_VACANT_INDEXES);",
          "",
          "[Added Lines]",
          "73:                 QueryRouter.USE_VACANT_INDEXES);",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java||src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:     private final QueryableSeg queryableSeg = new QueryableSeg();",
          "64:     public void setPrunedSegments(Segments<NDataSegment> prunedSegments, NDataflow df) {",
          "65:         if (df.isStreaming()) {",
          "66:             queryableSeg.setStreamingSegments(prunedSegments);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:     public List<NDataSegment> getPrunedSegments(NDataflow df) {",
          "65:         if (df.isStreaming()) {",
          "66:             return queryableSeg.getStreamingSegments();",
          "67:         } else {",
          "68:             return queryableSeg.getBatchSegments();",
          "69:         }",
          "70:     }",
          "72:     public Map<String, Set<Long>> getChSegToLayoutsMap(NDataflow df) {",
          "73:         return df.isStreaming() ? Maps.newHashMap() : queryableSeg.getChSegToLayoutsMap();",
          "74:     }",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java||src/query-common/src/main/java/org/apache/kylin/query/routing/DataflowCapabilityChecker.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/DataflowCapabilityChecker.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Collection;",
          "22: import java.util.List;",
          "",
          "[Removed Lines]",
          "19: package org.apache.kylin.metadata.cube.model;",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "30: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "31: import org.apache.kylin.metadata.cube.cuboid.NLookupCandidate;",
          "33: import org.apache.kylin.metadata.model.NDataModel;",
          "34: import org.apache.kylin.metadata.model.NDataModelManager;",
          "35: import org.apache.kylin.metadata.model.NTableMetadataManager;",
          "36: import org.apache.kylin.metadata.model.TblColRef;",
          "37: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "38: import org.apache.kylin.metadata.realization.IRealizationCandidate;",
          "39: import org.apache.kylin.metadata.realization.SQLDigest;",
          "49:         CapabilityResult result = new CapabilityResult();",
          "50:         if (digest.limitPrecedesAggr) {",
          "52:             result.incapableCause = CapabilityResult.IncapableCause",
          "53:                     .create(CapabilityResult.IncapableType.LIMIT_PRECEDE_AGGR);",
          "54:             return result;",
          "55:         }",
          "66:         IRealizationCandidate chosenCandidate = null;",
          "69:             chosenCandidate = tryMatchLookup(dataflow, digest, result);",
          "70:             if (chosenCandidate != null) {",
          "72:             }",
          "73:         } else {",
          "77:                     digest, secondStorageSegmentLayoutMap);",
          "78:             if (candidateAndInfluence == null && QueryContext.current().isPartialMatchIndex()) {",
          "82:                         digest, secondStorageSegmentLayoutMap);",
          "83:             } else if (candidateAndInfluence == null) {",
          "86:                         digest);",
          "87:             }",
          "88:             if (candidateAndInfluence != null) {",
          "89:                 chosenCandidate = candidateAndInfluence;",
          "90:                 result.influences.addAll(candidateAndInfluence.getCapabilityResult().influences);",
          "92:             }",
          "93:         }",
          "94:         if (chosenCandidate != null) {",
          "95:             result.setCapable(true);",
          "101:             result.setCost(chosenCandidate.getCost());",
          "102:         } else {",
          "103:             result.setCapable(false);",
          "",
          "[Removed Lines]",
          "32: import org.apache.kylin.metadata.cube.cuboid.NQueryLayoutChooser;",
          "40: import org.slf4j.Logger;",
          "41: import org.slf4j.LoggerFactory;",
          "43: public class NDataflowCapabilityChecker {",
          "44:     private static final Logger logger = LoggerFactory.getLogger(NDataflowCapabilityChecker.class);",
          "46:     public static CapabilityResult check(NDataflow dataflow, List<NDataSegment> prunedSegments, SQLDigest digest,",
          "47:             Map<String, Set<Long>> secondStorageSegmentLayoutMap) {",
          "48:         logger.info(\"Matching Layout in dataflow {}, SQL digest {}\", dataflow, digest);",
          "51:             logger.info(\"Exclude NDataflow {} because there's limit preceding aggregation\", dataflow);",
          "58:         String rootFactTable = dataflow.getModel().getRootFactTableName();",
          "59:         NDataModel model = dataflow.getModel();",
          "60:         if (!rootFactTable.equals(digest.factTable) && model.isFusionModel() && !dataflow.isStreaming()) {",
          "61:             NDataModel streamingModel = NDataModelManager",
          "62:                     .getInstance(KylinConfig.getInstanceFromEnv(), dataflow.getProject())",
          "63:                     .getDataModelDesc(model.getFusionId());",
          "64:             rootFactTable = streamingModel.getRootFactTableName();",
          "65:         }",
          "67:         if (digest.joinDescs.isEmpty() && !rootFactTable.equals(digest.factTable)) {",
          "68:             logger.trace(\"Snapshot dataflow matching\");",
          "71:                 logger.info(\"Matched table {} snapshot in dataflow {} \", digest.factTable, dataflow);",
          "75:             logger.trace(\"Normal dataflow matching\");",
          "76:             NLayoutCandidate candidateAndInfluence = NQueryLayoutChooser.selectLayoutCandidate(dataflow, prunedSegments,",
          "80:                 logger.trace(\"Partial dataflow matching\");",
          "81:                 candidateAndInfluence = NQueryLayoutChooser.selectPartialLayoutCandidate(dataflow, prunedSegments,",
          "84:                 logger.debug(\"select the layout candidate with high data integrity.\");",
          "85:                 candidateAndInfluence = NQueryLayoutChooser.selectHighIntegrityCandidate(dataflow, prunedSegments,",
          "91:                 logger.info(\"Matched layout {} snapshot in dataflow {} \", chosenCandidate, dataflow);",
          "96:             if (dataflow.isStreaming()) {",
          "97:                 result.setSelectedStreamingCandidate(chosenCandidate);",
          "98:             } else {",
          "99:                 result.setSelectedCandidate(chosenCandidate);",
          "100:             }",
          "",
          "[Added Lines]",
          "32: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "33: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "37: import org.apache.kylin.metadata.model.SegmentRange;",
          "40: import org.apache.kylin.metadata.realization.HybridRealization;",
          "41: import org.apache.kylin.metadata.realization.IRealization;",
          "45: import lombok.extern.slf4j.Slf4j;",
          "47: @Slf4j",
          "48: public class DataflowCapabilityChecker {",
          "50:     private DataflowCapabilityChecker() {",
          "51:     }",
          "53:     public static CapabilityResult check(NDataflow dataflow, Candidate candidate, SQLDigest digest) {",
          "54:         log.info(\"Matching Layout in dataflow {}, SQL digest {}\", dataflow, digest);",
          "57:             log.info(\"Exclude NDataflow {} because there's limit preceding aggregation\", dataflow);",
          "64:         String factTableOfQuery = digest.factTable;",
          "65:         String modelFactTable = dataflow.getModel().getQueryCompatibleFactTable(factTableOfQuery);",
          "67:         if (digest.joinDescs.isEmpty() && !modelFactTable.equals(factTableOfQuery)) {",
          "68:             log.trace(\"Snapshot dataflow matching\");",
          "71:                 log.info(\"Matched table {} snapshot in dataflow {} \", factTableOfQuery, dataflow);",
          "75:             log.trace(\"Normal dataflow matching\");",
          "76:             List<NDataSegment> prunedSegments = candidate.getPrunedSegments(dataflow);",
          "77:             Map<String, Set<Long>> secondStorageSegmentLayoutMap = candidate.getChSegToLayoutsMap(dataflow);",
          "78:             NLayoutCandidate candidateAndInfluence = QueryLayoutChooser.selectLayoutCandidate(dataflow, prunedSegments,",
          "82:                 log.trace(\"Partial dataflow matching\");",
          "83:                 candidateAndInfluence = QueryLayoutChooser.selectPartialLayoutCandidate(dataflow, prunedSegments,",
          "86:                 log.debug(\"select the layout candidate with high data integrity.\");",
          "87:                 candidateAndInfluence = QueryLayoutChooser.selectHighIntegrityCandidate(dataflow, prunedSegments,",
          "93:                 log.info(\"Matched layout {} snapshot in dataflow {} \", chosenCandidate, dataflow);",
          "98:             result.setCandidate(dataflow.isStreaming(), chosenCandidate);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:             return null;",
          "115:         if (StringUtils.isEmpty(nTableMetadataManager.getTableDesc(digest.factTable).getLastSnapshotPath())) {",
          "117:             result.incapableCause = CapabilityResult.IncapableCause",
          "118:                     .create(CapabilityResult.IncapableType.NOT_EXIST_SNAPSHOT);",
          "119:             result.setCapable(false);",
          "",
          "[Removed Lines]",
          "116:             logger.info(\"Exclude NDataflow {} because snapshot of table {} does not exist\", dataflow, digest.factTable);",
          "",
          "[Added Lines]",
          "114:             log.info(\"Exclude NDataflow {} because snapshot of table {} does not exist\", dataflow, digest.factTable);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:         }",
          "135:         if (!unmatchedCols.isEmpty()) {",
          "137:             result.incapableCause = CapabilityResult.IncapableCause.unmatchedDimensions(unmatchedCols);",
          "138:             return null;",
          "139:         } else {",
          "140:             return new NLookupCandidate(digest.factTable, true);",
          "141:         }",
          "142:     }",
          "143: }",
          "",
          "[Removed Lines]",
          "136:             logger.info(\"Exclude NDataflow {} because unmatched dimensions [{}] in Snapshot\", dataflow, unmatchedCols);",
          "",
          "[Added Lines]",
          "134:             log.info(\"Exclude NDataflow {} because unmatched dimensions [{}] in Snapshot\", dataflow, unmatchedCols);",
          "142:     public static CapabilityResult hybridRealizationCheck(HybridRealization r, Candidate candidate, SQLDigest digest) {",
          "143:         CapabilityResult result = new CapabilityResult();",
          "145:         resolveSegmentsOverlap(r, candidate.getQueryableSeg().getStreamingSegments());",
          "146:         for (IRealization realization : r.getRealizations()) {",
          "147:             NDataflow df = (NDataflow) realization;",
          "148:             CapabilityResult child = DataflowCapabilityChecker.check(df, candidate, digest);",
          "149:             result.setCandidate(df.isStreaming(), child);",
          "150:             if (child.isCapable()) {",
          "151:                 result.setCost(Math.min(result.getCost(), child.getCost(df.isStreaming())));",
          "152:                 result.setCapable(true);",
          "153:                 result.influences.addAll(child.influences);",
          "154:             } else {",
          "155:                 result.incapableCause = child.incapableCause;",
          "156:             }",
          "157:         }",
          "159:         result.setCost(result.getCost() - 1); // let hybrid win its children",
          "161:         return result;",
          "162:     }",
          "168:     private static void resolveSegmentsOverlap(HybridRealization realization,",
          "169:             List<NDataSegment> prunedStreamingSegments) {",
          "170:         long end = realization.getBatchRealization().getDateRangeEnd();",
          "171:         if (end != Long.MIN_VALUE) {",
          "172:             String segments = prunedStreamingSegments.toString();",
          "173:             log.info(\"Before resolve segments overlap between batch and stream of fusion model: {}\", segments);",
          "174:             SegmentRange.BasicSegmentRange range = new SegmentRange.KafkaOffsetPartitionedSegmentRange(end,",
          "175:                     Long.MAX_VALUE);",
          "176:             List<NDataSegment> list = ((NDataflow) realization.getStreamingRealization())",
          "177:                     .getQueryableSegmentsByRange(range);",
          "178:             prunedStreamingSegments.removeIf(seg -> !list.contains(seg));",
          "179:             segments = prunedStreamingSegments.toString();",
          "180:             log.info(\"After resolve segments overlap between batch and stream of fusion model: {}\", segments);",
          "181:         }",
          "182:     }",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java||src/query-common/src/main/java/org/apache/kylin/query/routing/QueryLayoutChooser.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/cuboid/NQueryLayoutChooser.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/QueryLayoutChooser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Collection;",
          "22: import java.util.Comparator;",
          "",
          "[Removed Lines]",
          "19: package org.apache.kylin.metadata.cube.cuboid;",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "36: import org.apache.kylin.guava30.shaded.common.collect.Ordering;",
          "37: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "38: import org.apache.kylin.metadata.cube.model.IndexPlan;",
          "39: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "40: import org.apache.kylin.metadata.cube.model.NDataLayout;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38: import org.apache.kylin.metadata.cube.cuboid.ChooserContext;",
          "39: import org.apache.kylin.metadata.cube.cuboid.ComparatorUtils;",
          "40: import org.apache.kylin.metadata.cube.cuboid.IndexMatcher;",
          "41: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52: import lombok.extern.slf4j.Slf4j;",
          "54: @Slf4j",
          "58:     }",
          "60:     public static NLayoutCandidate selectPartialLayoutCandidate(NDataflow dataflow, List<NDataSegment> prunedSegments,",
          "",
          "[Removed Lines]",
          "55: public class NQueryLayoutChooser {",
          "57:     private NQueryLayoutChooser() {",
          "",
          "[Added Lines]",
          "59: public class QueryLayoutChooser {",
          "61:     private QueryLayoutChooser() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66:             if (candidate == null) {",
          "67:                 candidate = selectLayoutCandidate(dataflow, Lists.newArrayList(segment), sqlDigest,",
          "68:                         chSegmentToLayoutsMap);",
          "73:                 toRemovedSegments.add(segment);",
          "74:             }",
          "75:         }",
          "",
          "[Removed Lines]",
          "69:                 if (candidate == null) {",
          "70:                     toRemovedSegments.add(segment);",
          "71:                 }",
          "72:             } else if (segment.getSegDetails().getLayoutById(candidate.getLayoutEntity().getId()) == null) {",
          "",
          "[Added Lines]",
          "73:             }",
          "75:             long layoutId = candidate == null ? -1L : candidate.getLayoutEntity().getId();",
          "76:             if (segment.getSegDetails().getLayoutById(layoutId) == null) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "110:             }",
          "112:             if (!matchResult.isMatched()) {",
          "114:                 continue;",
          "115:             }",
          "",
          "[Removed Lines]",
          "113:                 log.trace(\"The [{}] cannot match with the {}\", chooserContext.sqlDigest.toString(), layout);",
          "",
          "[Added Lines]",
          "117:                 log.trace(\"The [{}] cannot match with the {}\", chooserContext.getSqlDigest().toString(), layout);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "137:     private static long[] calcSegRangeAndMaxEnd(ChooserContext chooserContext, NDataflow df,",
          "138:             List<NDataLayout> dataLayouts) {",
          "139:         long[] rangeAndLatest = new long[2];",
          "141:             return rangeAndLatest;",
          "142:         }",
          "143:         List<String> segmentNameList = Lists.newArrayList();",
          "",
          "[Removed Lines]",
          "140:         if (!chooserContext.getKylinConfig().isVacantIndexPruningEnabled()) {",
          "",
          "[Added Lines]",
          "144:         if (!QueryRouter.isVacantIndexPruningEnabled(chooserContext.getKylinConfig())) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "156:     public static NLayoutCandidate selectHighIntegrityCandidate(NDataflow dataflow, List<NDataSegment> prunedSegments,",
          "157:             SQLDigest digest) {",
          "159:             return null;",
          "160:         }",
          "161:         if (CollectionUtils.isEmpty(prunedSegments)) {",
          "",
          "[Removed Lines]",
          "158:         if (!NProjectManager.getProjectConfig(dataflow.getProject()).isVacantIndexPruningEnabled()) {",
          "",
          "[Added Lines]",
          "162:         if (!QueryRouter.isVacantIndexPruningEnabled(NProjectManager.getProjectConfig(dataflow.getProject()))) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "176:             });",
          "177:         }",
          "180:                 chooserContext, idToDataLayoutsMap);",
          "181:         return chooseBestLayoutCandidate(dataflow, digest, chooserContext, allLayoutCandidates,",
          "182:                 \"selectHighIntegrityCandidate\");",
          "",
          "[Removed Lines]",
          "179:         List<NLayoutCandidate> allLayoutCandidates = NQueryLayoutChooser.collectAllLayoutCandidates(dataflow,",
          "",
          "[Added Lines]",
          "183:         List<NLayoutCandidate> allLayoutCandidates = QueryLayoutChooser.collectAllLayoutCandidates(dataflow,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "238:             SQLDigest sqlDigest) {",
          "239:         List<Integer> filterColIds = getFilterColIds(chooserContext, sqlDigest);",
          "240:         List<Integer> nonFilterColIds = getNonFilterColIds(chooserContext, sqlDigest);",
          "242:                 ? getEnhancedSorter(filterColIds, nonFilterColIds)",
          "243:                 : getDefaultSorter(filterColIds, nonFilterColIds);",
          "244:         candidates.sort(ordering);",
          "",
          "[Removed Lines]",
          "241:         Ordering<NLayoutCandidate> ordering = chooserContext.getKylinConfig().isVacantIndexPruningEnabled()",
          "",
          "[Added Lines]",
          "245:         Ordering<NLayoutCandidate> ordering = QueryRouter.isVacantIndexPruningEnabled(chooserContext.getKylinConfig())",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Comparator;",
          "22: import java.util.List;",
          "24: import org.apache.kylin.common.KylinConfig;",
          "25: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "26: import org.apache.kylin.guava30.shaded.common.collect.Ordering;",
          "27: import org.apache.kylin.metadata.project.NProjectManager;",
          "29: import lombok.Getter;",
          "31: public class QueryRouter {",
          "33:     private QueryRouter() {",
          "34:     }",
          "36:     public static void applyRules(Candidate candidate) {",
          "37:         Strategy pruningStrategy = getStrategy(candidate.getCtx().olapSchema.getProjectName());",
          "38:         for (PruningRule r : pruningStrategy.getRules()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.Set;",
          "25: import org.apache.commons.lang3.StringUtils;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "36:     public static final String USE_VACANT_INDEXES = \"use-vacant-indexes\";",
          "41:     private static Set<String> getPruningRules(KylinConfig config) {",
          "42:         String queryIndexMatchRules = config.getQueryIndexMatchRules();",
          "43:         String[] splitRules = queryIndexMatchRules.split(\",\");",
          "44:         Set<String> configRules = Sets.newHashSet();",
          "45:         for (String splitRule : splitRules) {",
          "46:             if (StringUtils.isNotBlank(splitRule)) {",
          "47:                 configRules.add(StringUtils.lowerCase(splitRule.trim()));",
          "48:             }",
          "49:         }",
          "50:         return configRules;",
          "51:     }",
          "53:     public static boolean isVacantIndexPruningEnabled(KylinConfig config) {",
          "54:         return getPruningRules(config).contains(USE_VACANT_INDEXES);",
          "55:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:             rules.add(SEGMENT_PRUNING);",
          "71:             rules.add(PARTITION_PRUNING);",
          "72:             rules.add(REMOVE_INCAPABLE_REALIZATIONS);",
          "74:                 rules.add(VACANT_INDEX_PRUNING);",
          "75:             }",
          "",
          "[Removed Lines]",
          "73:             if (config.isVacantIndexPruningEnabled()) {",
          "",
          "[Added Lines]",
          "94:             if (QueryRouter.isVacantIndexPruningEnabled(config)) {",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import org.apache.kylin.guava30.shaded.common.collect.BiMap;",
          "22: import org.apache.kylin.guava30.shaded.common.collect.HashBiMap;",
          "23: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "24: import org.apache.kylin.query.util.ComputedColumnRewriter;",
          "25: import org.apache.kylin.query.util.QueryAliasMatchInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "25: import org.apache.kylin.metadata.realization.HybridRealization;",
          "26: import org.apache.kylin.metadata.realization.IRealization;",
          "27: import org.apache.kylin.metadata.realization.SQLDigest;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:             return;",
          "37:         }",
          "38:         candidate.getCtx().resetSQLDigest();",
          "43:             log.info(\"{}({}/{}): try rewrite computed column and then check whether the realization is capable.\",",
          "46:             BiMap<String, String> aliasMapping = HashBiMap.create();",
          "47:             aliasMapping.putAll(candidate.getMatchedJoinsGraphAliasMap());",
          "49:                     new QueryAliasMatchInfo(aliasMapping, null));",
          "50:             candidate.getCtx().resetSQLDigest();",
          "53:         }",
          "55:         candidate.setCapability(capability);",
          "56:     }",
          "58: }",
          "",
          "[Removed Lines]",
          "39:         CapabilityResult capability = candidate.getRealization().isCapable(candidate.getCtx().getSQLDigest(),",
          "40:                 candidate.getQueryableSeg());",
          "42:         if (!capability.isCapable() && !candidate.getRealization().getModel().getComputedColumnDescs().isEmpty()) {",
          "44:                     this.getClass().getName(), candidate.getRealization().getProject(),",
          "45:                     candidate.getRealization().getCanonicalName());",
          "48:             ComputedColumnRewriter.rewriteCcInnerCol(candidate.getCtx(), candidate.getRealization().getModel(),",
          "51:             capability = candidate.getRealization().isCapable(candidate.getCtx().getSQLDigest(),",
          "52:                     candidate.getQueryableSeg());",
          "",
          "[Added Lines]",
          "43:         CapabilityResult capability = getCapabilityResult(candidate);",
          "45:         IRealization realization = candidate.getRealization();",
          "46:         if (!capability.isCapable() && !realization.getModel().getComputedColumnDescs().isEmpty()) {",
          "48:                     this.getClass().getName(), realization.getProject(), realization.getCanonicalName());",
          "51:             ComputedColumnRewriter.rewriteCcInnerCol(candidate.getCtx(), realization.getModel(),",
          "54:             capability = getCapabilityResult(candidate);",
          "60:     private CapabilityResult getCapabilityResult(Candidate candidate) {",
          "61:         IRealization realization = candidate.getRealization();",
          "62:         SQLDigest sqlDigest = candidate.getCtx().getSQLDigest();",
          "63:         CapabilityResult capability;",
          "64:         if (realization instanceof HybridRealization) {",
          "65:             capability = DataflowCapabilityChecker.hybridRealizationCheck((HybridRealization) realization, candidate,",
          "66:                     sqlDigest);",
          "67:         } else {",
          "68:             capability = DataflowCapabilityChecker.check((NDataflow) realization, candidate, sqlDigest);",
          "69:         }",
          "70:         return capability;",
          "71:     }",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/schema/OLAPTable.java||src/query-common/src/main/java/org/apache/kylin/query/schema/OLAPTable.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/schema/OLAPTable.java -> src/query-common/src/main/java/org/apache/kylin/query/schema/OLAPTable.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: import org.apache.kylin.common.KylinConfig;",
          "56: import org.apache.kylin.common.QueryContext;",
          "57: import org.apache.kylin.common.util.CollectionUtil;",
          "58: import org.apache.kylin.measure.topn.TopNMeasureType;",
          "59: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "60: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: import org.apache.kylin.guava30.shaded.common.collect.Iterables;",
          "59: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: import org.apache.kylin.metadata.model.TableDesc;",
          "68: import org.apache.kylin.metadata.model.util.ComputedColumnUtil;",
          "69: import org.apache.kylin.metadata.project.NProjectManager;",
          "71: import org.apache.kylin.metadata.realization.RealizationStatusEnum;",
          "72: import org.apache.kylin.query.QueryExtension;",
          "73: import org.apache.kylin.query.enumerator.OLAPQuery;",
          "",
          "[Removed Lines]",
          "70: import org.apache.kylin.metadata.project.ProjectInstance;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76: import org.slf4j.Logger;",
          "77: import org.slf4j.LoggerFactory;",
          "82: import lombok.val;",
          "",
          "[Removed Lines]",
          "79: import org.apache.kylin.guava30.shaded.common.collect.Iterables;",
          "80: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "194:         return this.rowType;",
          "195:     }",
          "198:     private RelDataType deriveRowType(RelDataTypeFactory typeFactory) {",
          "200:         KylinRelDataTypeFactoryImpl kylinRelDataTypeFactory = new KylinRelDataTypeFactoryImpl(typeFactory);",
          "201:         List<String> fieldNameList = Lists.newArrayList();",
          "202:         List<RelDataType> typeList = Lists.newArrayList();",
          "203:         List<KylinRelDataTypeFieldImpl.ColumnType> colTypes = Lists.newArrayList();",
          "204:         for (ColumnDesc column : sourceColumns) {",
          "205:             RelDataType sqlType = createSqlType(kylinRelDataTypeFactory, column.getUpgradedType(), column.isNullable());",
          "206:             sqlType = SqlTypeUtil.addCharsetAndCollation(sqlType, kylinRelDataTypeFactory);",
          "207:             typeList.add(sqlType);",
          "216:             if (column.isComputedColumn()) {",
          "217:                 fieldNameList.add(columnName);",
          "218:                 colTypes.add(KylinRelDataTypeFieldImpl.ColumnType.CC_FIELD);",
          "",
          "[Removed Lines]",
          "197:     @SuppressWarnings(\"deprecation\")",
          "208:             String project = this.sourceTable != null ? this.sourceTable.getProject() : null;",
          "209:             KylinConfig projectKylinConfig = StringUtils.isNotEmpty(project)",
          "210:                     ? NProjectManager.getInstance(KylinConfig.getInstanceFromEnv()).getProject(project).getConfig()",
          "211:                     : KylinConfig.getInstanceFromEnv();",
          "212:             String columnName = projectKylinConfig.getSourceNameCaseSensitiveEnabled()",
          "213:                     ? StringUtils.isNotEmpty(column.getCaseSensitiveName()) ? column.getCaseSensitiveName()",
          "214:                             : column.getName()",
          "215:                     : column.getName();",
          "",
          "[Added Lines]",
          "200:         KylinConfig config = this.sourceTable != null //",
          "201:                 ? NProjectManager.getProjectConfig(this.sourceTable.getProject())",
          "202:                 : KylinConfig.getInstanceFromEnv();",
          "208:             String columnName = config.getSourceNameCaseSensitiveEnabled()",
          "209:                     && StringUtils.isNotBlank(column.getCaseSensitiveName()) //",
          "210:                             ? column.getCaseSensitiveName()",
          "211:                             : column.getName();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "260:             return allColumns;",
          "261:         }",
          "265:         NDataflowManager dataflowManager = NDataflowManager.getInstance(olapSchema.getConfig(),",
          "266:                 sourceTable.getProject());",
          "268:             Set<ColumnDesc> exposeColumnDescSet = new HashSet<>();",
          "269:             String tableName = sourceTable.getIdentity();",
          "270:             List<NDataModel> modelList = modelsMap.get(tableName);",
          "",
          "[Removed Lines]",
          "263:         ProjectInstance projectInstance = NProjectManager.getInstance(olapSchema.getConfig())",
          "264:                 .getProject(sourceTable.getProject());",
          "267:         if (projectInstance.getConfig().useTableIndexAnswerSelectStarEnabled()) {",
          "",
          "[Added Lines]",
          "259:         KylinConfig projectConfig = NProjectManager.getProjectConfig(sourceTable.getProject());",
          "262:         if (projectConfig.useTableIndexAnswerSelectStarEnabled()) {",
          "",
          "---------------"
        ],
        "src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java||src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java": [
          "File: src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java -> src/query/src/test/java/org/apache/kylin/query/routing/LayoutCandidateSortTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "31: import org.apache.kylin.junit.annotation.MetadataInfo;",
          "32: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "34: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "35: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "36: import org.apache.kylin.metadata.cube.model.NIndexPlanManager;",
          "",
          "[Removed Lines]",
          "33: import org.apache.kylin.metadata.cube.cuboid.NQueryLayoutChooser;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:     void testPreferAggComparator() {",
          "52:         MockEntity mock1 = new MockEntity(IndexEntity.TABLE_INDEX_START_ID + 1, ImmutableList.of(1), 2);",
          "53:         MockEntity mock2 = new MockEntity(1L, ImmutableList.of(1), 3);",
          "55:     }",
          "57:     @Test",
          "",
          "[Removed Lines]",
          "54:         assertSortedResult(1L, NQueryLayoutChooser.preferAggComparator(), mock1, mock2);",
          "",
          "[Added Lines]",
          "53:         assertSortedResult(1L, QueryLayoutChooser.preferAggComparator(), mock1, mock2);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         MockEntity mock1 = new MockEntity(IndexEntity.TABLE_INDEX_START_ID + 1, ImmutableList.of(1, 2), 5000, 2000);",
          "60:         MockEntity mock2 = new MockEntity(IndexEntity.TABLE_INDEX_START_ID + IndexEntity.INDEX_ID_STEP + 1,",
          "61:                 ImmutableList.of(1, 3), 2000, 2000);",
          "63:                 mock2);",
          "64:     }",
          "",
          "[Removed Lines]",
          "62:         assertSortedResult(IndexEntity.TABLE_INDEX_START_ID + 1, NQueryLayoutChooser.segmentRangeComparator(), mock1,",
          "",
          "[Added Lines]",
          "61:         assertSortedResult(IndexEntity.TABLE_INDEX_START_ID + 1, QueryLayoutChooser.segmentRangeComparator(), mock1,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "68:         MockEntity mock1 = new MockEntity(IndexEntity.TABLE_INDEX_START_ID + 1, ImmutableList.of(1, 2), 1000, 3000);",
          "69:         MockEntity mock2 = new MockEntity(IndexEntity.TABLE_INDEX_START_ID + IndexEntity.INDEX_ID_STEP + 1,",
          "70:                 ImmutableList.of(1, 3), 1000, 2000);",
          "72:                 mock1, mock2);",
          "73:     }",
          "",
          "[Removed Lines]",
          "71:         assertSortedResult(IndexEntity.TABLE_INDEX_START_ID + 1, NQueryLayoutChooser.segmentEffectivenessComparator(),",
          "",
          "[Added Lines]",
          "70:         assertSortedResult(IndexEntity.TABLE_INDEX_START_ID + 1, QueryLayoutChooser.segmentEffectivenessComparator(),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "77:         MockEntity mock1 = new MockEntity(1L, ImmutableList.of(1, 2), 90);",
          "78:         MockEntity mock2 = new MockEntity(IndexEntity.INDEX_ID_STEP + 1L, ImmutableList.of(1, 4), 30);",
          "79:         MockEntity mock3 = new MockEntity(2 * IndexEntity.INDEX_ID_STEP + 1L, ImmutableList.of(1, 5), 10);",
          "81:                 mock3);",
          "82:     }",
          "",
          "[Removed Lines]",
          "80:         assertSortedResult(2 * IndexEntity.INDEX_ID_STEP + 1L, NQueryLayoutChooser.rowSizeComparator(), mock1, mock2,",
          "",
          "[Added Lines]",
          "79:         assertSortedResult(2 * IndexEntity.INDEX_ID_STEP + 1L, QueryLayoutChooser.rowSizeComparator(), mock1, mock2,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "89:                 ImmutableMap.of(3, mockDeriveInfo));",
          "90:         MockEntity mock3 = new MockEntity(IndexEntity.INDEX_ID_STEP + 1L, ImmutableList.of(1, 3), ImmutableMap.of());",
          "95:         assertSortedResult(1L, comparator, mock1, mock2);",
          "",
          "[Removed Lines]",
          "92:         Comparator<NLayoutCandidate> comparator = NQueryLayoutChooser.derivedLayoutComparator();",
          "",
          "[Added Lines]",
          "91:         Comparator<NLayoutCandidate> comparator = QueryLayoutChooser.derivedLayoutComparator();",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "119:             List<Integer> sortedFilters = Lists.newArrayList(2, 1, 0);",
          "122:             sortedFilters = Lists.newArrayList(2, 0, 1);",
          "124:         }",
          "126:         {",
          "",
          "[Removed Lines]",
          "120:             assertSortedResult(2L, NQueryLayoutChooser.shardByComparator(sortedFilters), mock1, mock2);",
          "123:             assertSortedResult(1L, NQueryLayoutChooser.shardByComparator(sortedFilters), mock1, mock2);",
          "",
          "[Added Lines]",
          "119:             assertSortedResult(2L, QueryLayoutChooser.shardByComparator(sortedFilters), mock1, mock2);",
          "122:             assertSortedResult(1L, QueryLayoutChooser.shardByComparator(sortedFilters), mock1, mock2);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "129:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 0, 2), ImmutableList.of(), ImmutableList.of(1));",
          "131:             List<Integer> sortedFilters = Lists.newArrayList(2, 1, 0);",
          "133:         }",
          "135:         {",
          "",
          "[Removed Lines]",
          "132:             assertSortedResult(2L, NQueryLayoutChooser.shardByComparator(sortedFilters), mock1, mock2);",
          "",
          "[Added Lines]",
          "131:             assertSortedResult(2L, QueryLayoutChooser.shardByComparator(sortedFilters), mock1, mock2);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "138:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 0, 2), ImmutableList.of(), ImmutableList.of());",
          "140:             List<Integer> sortedFilters = Lists.newArrayList(2, 1, 0);",
          "142:         }",
          "143:     }",
          "",
          "[Removed Lines]",
          "141:             assertSortedResult(1L, NQueryLayoutChooser.shardByComparator(sortedFilters), mock1, mock2);",
          "",
          "[Added Lines]",
          "140:             assertSortedResult(1L, QueryLayoutChooser.shardByComparator(sortedFilters), mock1, mock2);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "149:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(1, 2, 3), ImmutableList.of(), ImmutableList.of(1));",
          "150:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(2, 1, 3), ImmutableList.of(), ImmutableList.of(2));",
          "151:             List<Integer> sortedFilters = Lists.newArrayList(1, 2, 3);",
          "154:             sortedFilters = Lists.newArrayList(3, 2, 1);",
          "156:         }",
          "158:         {",
          "",
          "[Removed Lines]",
          "152:             assertSortedResult(1L, NQueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "155:             assertSortedResult(2L, NQueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "",
          "[Added Lines]",
          "151:             assertSortedResult(1L, QueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "154:             assertSortedResult(2L, QueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "160:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(2, 1, 3), ImmutableList.of(), ImmutableList.of());",
          "161:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 2, 3), ImmutableList.of(), ImmutableList.of(1));",
          "162:             List<Integer> sortedFilters = Lists.newArrayList(1, 2, 3);",
          "164:         }",
          "166:         {",
          "",
          "[Removed Lines]",
          "163:             assertSortedResult(2L, NQueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "",
          "[Added Lines]",
          "162:             assertSortedResult(2L, QueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "168:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(2, 1, 3), ImmutableList.of(), ImmutableList.of(2));",
          "169:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 2, 3), ImmutableList.of(), ImmutableList.of());",
          "170:             List<Integer> sortedFilters = Lists.newArrayList(1, 2, 3);",
          "172:         }",
          "174:         {",
          "",
          "[Removed Lines]",
          "171:             assertSortedResult(1L, NQueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "",
          "[Added Lines]",
          "170:             assertSortedResult(1L, QueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "176:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(2, 1, 3), ImmutableMap.of());",
          "177:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 2, 3), ImmutableMap.of());",
          "178:             List<Integer> sortedFilters = Lists.newArrayList(1, 2, 3);",
          "180:         }",
          "181:     }",
          "",
          "[Removed Lines]",
          "179:             assertSortedResult(2L, NQueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "",
          "[Added Lines]",
          "178:             assertSortedResult(2L, QueryLayoutChooser.filterColumnComparator(sortedFilters), mock1, mock2);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "186:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(2, 1, 3), ImmutableMap.of());",
          "187:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 2, 3), ImmutableMap.of());",
          "188:             List<Integer> sortedFilters = Lists.newArrayList(1, 2, 3);",
          "190:         }",
          "192:         {",
          "193:             MockEntity mock1 = new MockEntity(1L, ImmutableList.of(2, 1, 3), ImmutableMap.of());",
          "194:             MockEntity mock2 = new MockEntity(2L, ImmutableList.of(1, 2, 3), ImmutableMap.of());",
          "195:             List<Integer> sortedFilters = Lists.newArrayList(2, 1, 3);",
          "197:         }",
          "198:     }",
          "",
          "[Removed Lines]",
          "189:             assertSortedResult(2L, NQueryLayoutChooser.nonFilterColumnComparator(sortedFilters), mock1, mock2);",
          "196:             assertSortedResult(1L, NQueryLayoutChooser.nonFilterColumnComparator(sortedFilters), mock1, mock2);",
          "",
          "[Added Lines]",
          "188:             assertSortedResult(2L, QueryLayoutChooser.nonFilterColumnComparator(sortedFilters), mock1, mock2);",
          "195:             assertSortedResult(1L, QueryLayoutChooser.nonFilterColumnComparator(sortedFilters), mock1, mock2);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "202:         MockEntity mock1 = new MockEntity(1L, ImmutableList.of(0), ImmutableList.of(100_000, 100_001));",
          "203:         MockEntity mock2 = new MockEntity(10_001, ImmutableList.of(0), ImmutableList.of(100_000));",
          "204:         List<NLayoutCandidate> layoutCandidates = mockLayouts(mock1, mock2);",
          "206:         Assertions.assertEquals(10_001L, layoutCandidates.get(0).getLayoutEntity().getId());",
          "207:     }",
          "",
          "[Removed Lines]",
          "205:         layoutCandidates.sort(NQueryLayoutChooser.measureSizeComparator());",
          "",
          "[Added Lines]",
          "204:         layoutCandidates.sort(QueryLayoutChooser.measureSizeComparator());",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "211:         MockEntity mock1 = new MockEntity(1L, ImmutableList.of(0, 1, 2), ImmutableList.of());",
          "212:         MockEntity mock2 = new MockEntity(10_001L, ImmutableList.of(0, 1, 2, 3), ImmutableList.of());",
          "213:         List<NLayoutCandidate> layoutCandidates = mockLayouts(mock1, mock2);",
          "215:         Assertions.assertEquals(1L, layoutCandidates.get(0).getLayoutEntity().getId());",
          "216:     }",
          "",
          "[Removed Lines]",
          "214:         layoutCandidates.sort(NQueryLayoutChooser.dimensionSizeComparator());",
          "",
          "[Added Lines]",
          "213:         layoutCandidates.sort(QueryLayoutChooser.dimensionSizeComparator());",
          "",
          "---------------"
        ],
        "src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java||src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java": [
          "File: src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java -> src/query/src/test/java/org/apache/kylin/query/routing/QueryRouterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.List;",
          "24: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "25: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "26: import org.apache.kylin.junit.annotation.MetadataInfo;",
          "",
          "[Removed Lines]",
          "23: import org.apache.kylin.common.KylinConfigBase;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     void testSortWithVacantPruningRule() {",
          "108:         MetadataTestUtils.updateProjectConfig(\"default\", \"kylin.query.index-match-rules\",",
          "110:         testSort();",
          "111:     }",
          "113:     @Test",
          "114:     void testTableIndexAnswerSelectStar() {",
          "117:         Candidate c1 = CandidateTestUtils.mockCandidate(\"model0001\", \"modelA\", 2, 1, 1);",
          "118:         Candidate c2 = CandidateTestUtils.mockCandidate(\"model0002\", \"modelB\", 1, 1, 2);",
          "119:         assertSortedResults(c1, Lists.newArrayList(c1, c2));",
          "122:         assertSortedResults(c2, Lists.newArrayList(c1, c2));",
          "123:     }",
          "",
          "[Removed Lines]",
          "109:                 KylinConfigBase.USE_VACANT_INDEXES);",
          "115:         MetadataTestUtils.updateProjectConfig(\"default\", \"kylin.query.index-match-rules\",",
          "116:                 KylinConfigBase.USE_TABLE_INDEX_ANSWER_SELECT_STAR);",
          "121:         MetadataTestUtils.updateProjectConfig(\"default\", \"kylin.query.index-match-rules\", \"\");",
          "",
          "[Added Lines]",
          "108:                 QueryRouter.USE_VACANT_INDEXES);",
          "114:         String useTableIndexAnswerSelectStar = \"kylin.query.use-tableindex-answer-select-star.enabled\";",
          "115:         MetadataTestUtils.updateProjectConfig(\"default\", useTableIndexAnswerSelectStar, \"true\");",
          "120:         MetadataTestUtils.updateProjectConfig(\"default\", useTableIndexAnswerSelectStar, \"false\");",
          "",
          "---------------"
        ],
        "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/util/RuntimeHelper.scala||src/spark-project/sparder/src/main/scala/org/apache/kylin/query/util/RuntimeHelper.scala": [
          "File: src/spark-project/sparder/src/main/scala/org/apache/kylin/query/util/RuntimeHelper.scala -> src/spark-project/sparder/src/main/scala/org/apache/kylin/query/util/RuntimeHelper.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.util",
          "22: import org.apache.kylin.common.util.ImmutableBitSet",
          "23: import org.apache.kylin.metadata.datatype.DataType",
          "24: import org.apache.kylin.metadata.model.DeriveInfo.DeriveType",
          "",
          "[Removed Lines]",
          "21: import org.apache.kylin.common.KylinConfig",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:       }.toMap",
          "98:     }",
          "103:     val topNIndexs = sourceSchema.fields.map(_.dataType).zipWithIndex.filter(_._1.isInstanceOf[ArrayType])",
          "104:     allColumns.indices",
          "",
          "[Removed Lines]",
          "100:     val projectInstance = NProjectManager.getInstance(KylinConfig.getInstanceFromEnv)",
          "101:       .getProject(derivedUtil.model.getProject)",
          "",
          "[Added Lines]",
          "99:     val projectConfig = NProjectManager.getProjectConfig(derivedUtil.model.getProject)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "120:               if (hasTopN && topNIndexs.map(_._2).contains(gTInfoIndex)) {",
          "122:                 literalOne.as(s\"${factTableName}_${columnName}\")",
          "125:                 if (column.getColumnDesc.getType.isNumberFamily) {",
          "126:                   literalZero.as(s\"${factTableName}_${columnName}\")",
          "127:                 } else {",
          "",
          "[Removed Lines]",
          "123:               } else if (projectInstance.getConfig.useTableIndexAnswerSelectStarEnabled()",
          "124:                 && gTInfoIndex < 0) {",
          "",
          "[Added Lines]",
          "121:               } else if (projectConfig.useTableIndexAnswerSelectStarEnabled() && gTInfoIndex < 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3436ae7b9b6e4f99ac7704775cb05be6ea058337",
      "candidate_info": {
        "commit_hash": "3436ae7b9b6e4f99ac7704775cb05be6ea058337",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/3436ae7b9b6e4f99ac7704775cb05be6ea058337",
        "files": [
          "src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala"
        ],
        "message": "KYLIN-5637 minor fix get delta table ddl (#30286)",
        "before_after_code_files": [
          "src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala||src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala||src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala": [
          "File: src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala -> src/spark-project/sparder/src/main/scala/org/apache/spark/sql/DdlOperation.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     var tableMetadata = SparderEnv.getSparkSession.sessionState.catalog",
          "114:       .getTableRawMetadata(TableIdentifier(table, Some(database)))",
          "115:     if (DeltaTableUtils.isDeltaTable(tableMetadata)) {",
          "118:     }",
          "119:     sql = if (DDLUtils.isHiveTable(tableMetadata)) sql + \" AS SERDE\" else sql",
          "120:     val logicalPlan = SparderEnv.getSparkSession.sessionState.sqlParser.parsePlan(sql)",
          "",
          "[Removed Lines]",
          "116:       return  new ShowCreateTableCommand(TableIdentifier(table, Some(database)), Seq.empty).",
          "117:         run(SparderEnv.getSparkSession).toList.take(1).head.getString(0);",
          "",
          "[Added Lines]",
          "116:       return generateDeltaTableDDL(tableMetadata);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126:     }",
          "127:   }",
          "130:   def collectDDL(tableIdentifier: TableIdentifier, sql: String): String = {",
          "131:     val catalog: SessionCatalog = SparderEnv.getSparkSession.sessionState.catalog",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:   def generateDeltaTableDDL(tableMetadata: CatalogTable): String = {",
          "129:     s\"CREATE TABLE ${tableMetadata.identifier.quotedString} USING delta LOCATION '${tableMetadata.location}'\"",
          "130:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}