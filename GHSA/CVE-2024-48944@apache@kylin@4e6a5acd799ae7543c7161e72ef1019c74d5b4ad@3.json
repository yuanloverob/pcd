{
  "cve_id": "CVE-2024-48944",
  "cve_desc": "Server-Side Request Forgery (SSRF) vulnerability in Apache Kylin. Through a kylin server, an attacker may forge a request to invoke \"/kylin/api/xxx/diag\" api on another internal host and possibly get leaked information. There are two preconditions: 1) The attacker has got admin access to a kylin server; 2) Another internal host has the \"/kylin/api/xxx/diag\" api\n\nendpoint open for service.\n\n\nThis issue affects Apache Kylin: from 5.0.0 \nthrough \n\n5.0.1.\n\nUsers are recommended to upgrade to version 5.0.2, which fixes the issue.",
  "repo": "apache/kylin",
  "patch_hash": "4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
  "patch_info": {
    "commit_hash": "4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
    "repo": "apache/kylin",
    "commit_url": "https://github.com/apache/kylin/commit/4e6a5acd799ae7543c7161e72ef1019c74d5b4ad",
    "files": [
      "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java"
    ],
    "message": "KYLIN-5644 fix diag api security, encryption changed from base64 to AES\n\nCo-authored-by: liang.hua <liang.hua@kyligence.io>",
    "before_after_code_files": [
      "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java||src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java||src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java"
    ]
  },
  "patch_diff": {
    "src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java||src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java": [
      "File: src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java -> src/common-server/src/main/java/org/apache/kylin/rest/controller/NBasicController.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "81: import org.apache.kylin.common.msg.Message;",
      "82: import org.apache.kylin.common.msg.MsgPicker;",
      "83: import org.apache.kylin.common.persistence.transaction.TransactionException;",
      "84: import org.apache.kylin.common.util.JsonUtil;",
      "85: import org.apache.kylin.common.util.Pair;",
      "86: import org.apache.kylin.job.constant.JobStatusEnum;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84: import org.apache.kylin.common.util.EncryptUtil;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "643:             if (StringUtils.isBlank(host) || host.startsWith(\"http://\")) {",
      "644:                 return host;",
      "645:             }",
      "647:         } catch (Exception e) {",
      "648:             logger.error(\"Failed to decode host, will use the original host name\");",
      "649:         }",
      "",
      "[Removed Lines]",
      "646:             return new String(Base64.decodeBase64(host), Charset.defaultCharset());",
      "",
      "[Added Lines]",
      "647:             String decryptValue = EncryptUtil.decrypt(new String(Base64.decodeBase64(host), Charset.defaultCharset()));",
      "648:             return StringUtils.isBlank(decryptValue) ? host : decryptValue;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "659:             if (!host.toLowerCase().startsWith(\"http\")) {",
      "660:                 host = \"http://\" + host;",
      "661:             }",
      "663:         } catch (Exception e) {",
      "664:             logger.error(\"Failed to encode host, will use the original host name\");",
      "665:         }",
      "",
      "[Removed Lines]",
      "662:             return Base64.encodeBase64String(host.getBytes(Charset.defaultCharset()));",
      "",
      "[Added Lines]",
      "664:             return Base64.encodeBase64String(EncryptUtil.encrypt(host).getBytes(Charset.defaultCharset()));",
      "",
      "---------------"
    ],
    "src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java||src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java": [
      "File: src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java -> src/common-server/src/test/java/org/apache/kylin/rest/controller/NBasicControllerTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "311:         }",
      "312:         Assert.assertEquals(3, mockDataResponse.get(\"size\"));",
      "313:     }",
      "315: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "315:     @Test",
      "316:     public void testEncodeAndDecodeHost() {",
      "317:         Assert.assertTrue(nBasicController.encodeHost(\"\").isEmpty());",
      "318:         String host = \"localhost:7070\";",
      "319:         String encodeHost = nBasicController.encodeHost(host);",
      "320:         Assert.assertNotNull(encodeHost);",
      "321:         Assert.assertNotEquals(host, encodeHost);",
      "322:         String decodeHost = nBasicController.decodeHost(encodeHost);",
      "323:         Assert.assertEquals(\"http://\" + host, decodeHost);",
      "324:         Assert.assertEquals(\"ip\", nBasicController.decodeHost(\"ip\"));",
      "325:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b0a6fa377109fe6d2b0dd2601d7aa7073b534ed9",
      "candidate_info": {
        "commit_hash": "b0a6fa377109fe6d2b0dd2601d7aa7073b534ed9",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/b0a6fa377109fe6d2b0dd2601d7aa7073b534ed9",
        "files": [
          "src/core-common/src/main/java/org/apache/kylin/common/exception/code/ErrorCodeServer.java",
          "src/core-common/src/main/resources/kylin_error_msg_conf_cn.properties",
          "src/core-common/src/main/resources/kylin_error_msg_conf_en.properties",
          "src/core-common/src/main/resources/kylin_error_suggestion_conf_cn.properties",
          "src/core-common/src/main/resources/kylin_error_suggestion_conf_en.properties",
          "src/core-common/src/main/resources/kylin_errorcode_conf.properties",
          "src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NIndexPlanController.java",
          "src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java",
          "src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java",
          "src/modeling-service/src/main/java/org/apache/kylin/rest/service/FusionIndexService.java",
          "src/modeling-service/src/test/java/org/apache/kylin/rest/service/FusionIndexServiceTest.java"
        ],
        "message": "KYLIN-5643 add public api for batch delete index\n\nCo-authored-by: liang.hua <liang.hua@kyligence.io>",
        "before_after_code_files": [
          "src/core-common/src/main/java/org/apache/kylin/common/exception/code/ErrorCodeServer.java||src/core-common/src/main/java/org/apache/kylin/common/exception/code/ErrorCodeServer.java",
          "src/core-common/src/main/resources/kylin_error_msg_conf_cn.properties||src/core-common/src/main/resources/kylin_error_msg_conf_cn.properties",
          "src/core-common/src/main/resources/kylin_error_msg_conf_en.properties||src/core-common/src/main/resources/kylin_error_msg_conf_en.properties",
          "src/core-common/src/main/resources/kylin_error_suggestion_conf_cn.properties||src/core-common/src/main/resources/kylin_error_suggestion_conf_cn.properties",
          "src/core-common/src/main/resources/kylin_error_suggestion_conf_en.properties||src/core-common/src/main/resources/kylin_error_suggestion_conf_en.properties",
          "src/core-common/src/main/resources/kylin_errorcode_conf.properties||src/core-common/src/main/resources/kylin_errorcode_conf.properties",
          "src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NIndexPlanController.java||src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NIndexPlanController.java",
          "src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java||src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java",
          "src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java||src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java",
          "src/modeling-service/src/main/java/org/apache/kylin/rest/service/FusionIndexService.java||src/modeling-service/src/main/java/org/apache/kylin/rest/service/FusionIndexService.java",
          "src/modeling-service/src/test/java/org/apache/kylin/rest/service/FusionIndexServiceTest.java||src/modeling-service/src/test/java/org/apache/kylin/rest/service/FusionIndexServiceTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/core-common/src/main/java/org/apache/kylin/common/exception/code/ErrorCodeServer.java||src/core-common/src/main/java/org/apache/kylin/common/exception/code/ErrorCodeServer.java": [
          "File: src/core-common/src/main/java/org/apache/kylin/common/exception/code/ErrorCodeServer.java -> src/core-common/src/main/java/org/apache/kylin/common/exception/code/ErrorCodeServer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:     HIERARCHY_NOT_IN_DIMENSION(\"KE-010012209\"),",
          "122:     JOINT_NOT_IN_DIMENSION(\"KE-010012210\"),",
          "123:     DIMENSION_ONLY_SET_ONCE(\"KE-010012211\"),",
          "126:     REQUEST_PARAMETER_EMPTY_OR_VALUE_EMPTY(\"KE-010043201\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:     BASE_TABLE_INDEX_DELETE_DISABLE(\"KE-010012212\"),",
          "",
          "---------------"
        ],
        "src/core-common/src/main/resources/kylin_error_msg_conf_cn.properties||src/core-common/src/main/resources/kylin_error_msg_conf_cn.properties": [
          "File: src/core-common/src/main/resources/kylin_error_msg_conf_cn.properties -> src/core-common/src/main/resources/kylin_error_msg_conf_cn.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "122: KE-010012209=\u5c42\u7ea7\u7ef4\u5ea6\u5fc5\u987b\u5728 'dimension' \u53c2\u6570\u4e2d\uff0c\u8bf7\u4fee\u6539\u540e\u91cd\u8bd5\u3002",
          "123: KE-010012210=\u8054\u5408\u7ef4\u5ea6\u5fc5\u987b\u5728 'dimension' \u53c2\u6570\u4e2d\uff0c\u8bf7\u4fee\u6539\u540e\u91cd\u8bd5\u3002",
          "124: KE-010012211=\u4efb\u4e00\u7ef4\u5ea6\u53ea\u80fd\u5728\u5fc5\u9700\u7ef4\u5ea6\u3001\u5c42\u7ea7\u7ef4\u5ea6\u6216\u8054\u5408\u7ef4\u5ea6\u4e2d\u8bbe\u7f6e\u4e00\u6b21\uff0c\u8bf7\u4fee\u6539\u540e\u91cd\u8bd5\u3002",
          "126: ## 10043XX parameter check",
          "127: KE-010043201=\u8bf7\u6c42\u53c2\u6570 \u201c%s\u201d \u4e3a\u7a7a\u6216\u503c\u4e3a\u7a7a\u3002\u8bf7\u68c0\u67e5\u8bf7\u6c42\u53c2\u6570\u662f\u5426\u6b63\u786e\u586b\u5199\u3002",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125: KE-010012212=\u5220\u9664\u57fa\u7840\u660e\u7ec6\u7d22\u5f15\uff0c\u8bf7\u5148\u5173\u95ed\u6a21\u578b\u7684\u5206\u5c42\u5b58\u50a8\u3002",
          "",
          "---------------"
        ],
        "src/core-common/src/main/resources/kylin_error_msg_conf_en.properties||src/core-common/src/main/resources/kylin_error_msg_conf_en.properties": [
          "File: src/core-common/src/main/resources/kylin_error_msg_conf_en.properties -> src/core-common/src/main/resources/kylin_error_msg_conf_en.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: KE-010012209=The hierarchy dimension must be included in the 'dimension' parameter. Please modify it and try again.",
          "122: KE-010012210=The joint dimension must be included in the 'dimension' parameter. Please modify it and try again.",
          "123: KE-010012211=Any dimension can only be set once in mandatory dimension, hierarchy dimension or joint dimension. Please modify and try again.",
          "125: ## 10043XX parameter check",
          "126: KE-010043201=Request parameter \"%s\" is empty or value is empty. Please check the request parameters.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124: KE-010012212=To delete the base table index, please turn off tiered storage for the model.",
          "",
          "---------------"
        ],
        "src/core-common/src/main/resources/kylin_error_suggestion_conf_cn.properties||src/core-common/src/main/resources/kylin_error_suggestion_conf_cn.properties": [
          "File: src/core-common/src/main/resources/kylin_error_suggestion_conf_cn.properties -> src/core-common/src/main/resources/kylin_error_suggestion_conf_cn.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: KE-010012201=",
          "110: KE-010012202=",
          "111: KE-010012203=",
          "113: ## 10043XX parameter check",
          "114: KE-010043201=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: KE-010012212=",
          "",
          "---------------"
        ],
        "src/core-common/src/main/resources/kylin_error_suggestion_conf_en.properties||src/core-common/src/main/resources/kylin_error_suggestion_conf_en.properties": [
          "File: src/core-common/src/main/resources/kylin_error_suggestion_conf_en.properties -> src/core-common/src/main/resources/kylin_error_suggestion_conf_en.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: KE-010012201=",
          "110: KE-010012202=",
          "111: KE-010012203=",
          "113: ## 10043XX parameter check",
          "114: KE-010043201=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: KE-010012212=",
          "",
          "---------------"
        ],
        "src/core-common/src/main/resources/kylin_errorcode_conf.properties||src/core-common/src/main/resources/kylin_errorcode_conf.properties": [
          "File: src/core-common/src/main/resources/kylin_errorcode_conf.properties -> src/core-common/src/main/resources/kylin_errorcode_conf.properties",
          "--- Hunk 1 ---",
          "[Context before]",
          "133: KE-010012209",
          "134: KE-010012210",
          "135: KE-010012211",
          "137: ## 10043XX parameter check",
          "138: KE-010043201",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: KE-010012212",
          "",
          "---------------"
        ],
        "src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NIndexPlanController.java||src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NIndexPlanController.java": [
          "File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NIndexPlanController.java -> src/metadata-server/src/main/java/org/apache/kylin/rest/controller/NIndexPlanController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:     }",
          "225:     @ApiOperation(value = \"batch deleteIndex\", tags = { \"AI\" })",
          "227:     public EnvelopeResponse<String> batchDeleteIndex(@RequestParam(value = \"layout_ids\") Set<Long> layoutIds,",
          "228:             @RequestParam(value = \"project\") String project, @RequestParam(value = \"model\") String modelId) {",
          "229:         checkProjectName(project);",
          "",
          "[Removed Lines]",
          "226:     @DeleteMapping(value = \"/index\")",
          "",
          "[Added Lines]",
          "226:     @DeleteMapping(value = \"/index\", produces = HTTP_VND_APACHE_KYLIN_JSON)",
          "",
          "---------------"
        ],
        "src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java||src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java": [
          "File: src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java -> src/metadata-server/src/main/java/org/apache/kylin/rest/controller/open/OpenIndexPlanController.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.rest.controller.open;",
          "21: import static org.apache.kylin.common.constant.HttpConstant.HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON;",
          "22: import static org.apache.kylin.common.exception.code.ErrorCodeServer.MODEL_NOT_EXIST;",
          "24: import org.apache.kylin.common.KylinConfig;",
          "25: import org.apache.kylin.common.exception.KylinException;",
          "26: import org.apache.kylin.metadata.model.NDataModel;",
          "27: import org.apache.kylin.metadata.model.NDataModelManager;",
          "28: import org.apache.kylin.rest.controller.NBasicController;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import static org.apache.kylin.common.exception.code.ErrorCodeServer.LAYOUT_LIST_EMPTY;",
          "25: import java.util.Set;",
          "27: import org.apache.commons.collections.CollectionUtils;",
          "30: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import org.apache.kylin.rest.service.FusionIndexService;",
          "36: import org.springframework.beans.factory.annotation.Autowired;",
          "37: import org.springframework.beans.factory.annotation.Qualifier;",
          "38: import org.springframework.web.bind.annotation.PutMapping;",
          "39: import org.springframework.web.bind.annotation.RequestBody;",
          "40: import org.springframework.web.bind.annotation.RequestMapping;",
          "41: import org.springframework.web.bind.annotation.RestController;",
          "43: import lombok.val;",
          "45: @RestController",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.springframework.web.bind.annotation.DeleteMapping;",
          "47: import org.springframework.web.bind.annotation.RequestParam;",
          "50: import io.swagger.annotations.ApiOperation;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:     private static final String MODEL_ALIAS = \"model\";",
          "51:     private static final String AGGREGATION_GROUPS = \"aggregation_groups\";",
          "53:     @Autowired",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59:     private static final String MODEL_NAME = \"model_name\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "75:         return convertResponse(response);",
          "76:     }",
          "78:     private EnvelopeResponse<OpenAddAggGroupResponse> convertResponse(",
          "79:             EnvelopeResponse<DiffRuleBasedIndexResponse> internal) {",
          "80:         if (internal != null && internal.getData() != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     @ApiOperation(value = \"batch deleteIndex\", tags = { \"AI\" })",
          "89:     @DeleteMapping(value = \"/index\")",
          "90:     public EnvelopeResponse<String> batchDeleteIndex(@RequestParam(value = \"index_ids\") Set<Long> layoutIds,",
          "91:             @RequestParam(value = \"project\") String project, @RequestParam(value = \"model_name\") String modelName,",
          "92:             @RequestParam(value = \"index_range\", required = false) IndexEntity.Range indexRange) {",
          "93:         checkProjectName(project);",
          "94:         checkRequiredArg(MODEL_NAME, modelName);",
          "95:         if (null == indexRange) {",
          "96:             indexRange = IndexEntity.Range.BATCH;",
          "97:         }",
          "98:         NDataModel dataModel = NDataModelManager.getInstance(KylinConfig.getInstanceFromEnv(), project)",
          "99:                 .getDataModelDescByAlias(modelName);",
          "100:         if (null == dataModel) {",
          "101:             throw new KylinException(MODEL_NOT_EXIST);",
          "102:         }",
          "103:         if (CollectionUtils.isEmpty(layoutIds)) {",
          "104:             throw new KylinException(LAYOUT_LIST_EMPTY);",
          "105:         }",
          "106:         fusionIndexService.batchRemoveIndex(project, dataModel.getUuid(), layoutIds, indexRange);",
          "107:         return new EnvelopeResponse<>(KylinException.CODE_SUCCESS, \"\", \"\");",
          "108:     }",
          "",
          "---------------"
        ],
        "src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java||src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java": [
          "File: src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java -> src/metadata-server/src/test/java/org/apache/kylin/rest/controller/open/OpenIndexPlanControllerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import org.apache.kylin.common.util.JsonUtil;",
          "30: import org.apache.kylin.common.util.NLocalFileMetadataTestCase;",
          "31: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "32: import org.apache.kylin.metadata.model.NDataModel;",
          "33: import org.apache.kylin.metadata.model.NDataModelManager;",
          "34: import org.apache.kylin.rest.constant.Constant;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:         Assert.assertTrue(mvcResult.getResponse().getContentAsString().contains(\"KE-010043201\"));",
          "157:         Mockito.verify(openIndexPlanController).updateRule(openRequest);",
          "158:     }",
          "159: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:     @Test",
          "162:     public void testBatchDeleteIndex() throws Exception {",
          "163:         String project = \"default\";",
          "164:         String modelName = \"nmodel_basic\";",
          "165:         mockMvc.perform(MockMvcRequestBuilders.delete(\"/api/index_plans/index\").contentType(MediaType.APPLICATION_JSON)",
          "166:                 .param(\"project\", project).param(\"model_name\", modelName).param(\"index_ids\", \"1,1001\")",
          "167:                 .accept(MediaType.parseMediaType(HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON)))",
          "168:                 .andExpect(MockMvcResultMatchers.status().isOk());",
          "169:         Mockito.doNothing().when(fusionIndexService).batchRemoveIndex(project, modelName, Sets.newHashSet(1L, 1001L),",
          "170:                 null);",
          "171:         Mockito.verify(openIndexPlanController).batchDeleteIndex(Sets.newHashSet(1L, 1001L), project, modelName, null);",
          "173:         MvcResult result = mockMvc",
          "174:                 .perform(MockMvcRequestBuilders.delete(\"/api/index_plans/index\").contentType(MediaType.APPLICATION_JSON)",
          "175:                         .param(\"project\", project).param(\"model_name\", \"no_exist_model\").param(\"index_ids\", \"1,1001\")",
          "176:                         .accept(MediaType.parseMediaType(HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON)))",
          "177:                 .andExpect(MockMvcResultMatchers.status().is5xxServerError()).andReturn();",
          "178:         Assert.assertTrue(result.getResponse().getContentAsString().contains(\"KE-010002201\"));",
          "180:         MvcResult mvcResult = mockMvc",
          "181:                 .perform(MockMvcRequestBuilders.delete(\"/api/index_plans/index\").contentType(MediaType.APPLICATION_JSON)",
          "182:                         .param(\"project\", project).param(\"model_name\", modelName).param(\"index_ids\", \"\")",
          "183:                         .accept(MediaType.parseMediaType(HTTP_VND_APACHE_KYLIN_V4_PUBLIC_JSON)))",
          "184:                 .andExpect(MockMvcResultMatchers.status().is5xxServerError()).andReturn();",
          "185:         Assert.assertTrue(mvcResult.getResponse().getContentAsString().contains(\"KE-010043212\"));",
          "186:     }",
          "",
          "---------------"
        ],
        "src/modeling-service/src/main/java/org/apache/kylin/rest/service/FusionIndexService.java||src/modeling-service/src/main/java/org/apache/kylin/rest/service/FusionIndexService.java": [
          "File: src/modeling-service/src/main/java/org/apache/kylin/rest/service/FusionIndexService.java -> src/modeling-service/src/main/java/org/apache/kylin/rest/service/FusionIndexService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: import java.util.List;",
          "30: import java.util.Locale;",
          "31: import java.util.Map;",
          "32: import java.util.Set;",
          "33: import java.util.function.Function;",
          "34: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78: import org.springframework.beans.factory.annotation.Autowired;",
          "79: import org.springframework.stereotype.Service;",
          "81: import lombok.val;",
          "82: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: import io.kyligence.kap.secondstorage.SecondStorageUtil;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "277:         checkStreamingIndexEnabled(project, modelDesc);",
          "279:         if (modelDesc.fusionModelStreamingPart()) {",
          "285:             FusionModel fusionModel = getManager(FusionModelManager.class, project).getFusionModel(model);",
          "286:             String batchId = fusionModel.getBatchModel().getUuid();",
          "287:             if (IndexEntity.Range.BATCH == indexRange) {",
          "288:                 indexPlanService.removeIndex(project, batchId, id);",
          "289:                 return;",
          "290:             } else if (IndexEntity.Range.HYBRID == indexRange) {",
          "292:             }",
          "293:         }",
          "294:         indexPlanService.removeIndex(project, model, id);",
          "",
          "[Removed Lines]",
          "280:             if (!indexChangeEnable(project, model, indexRange,",
          "281:                     Lists.newArrayList(IndexEntity.Range.HYBRID, Range.STREAMING, Range.EMPTY))) {",
          "282:                 throw new KylinException(ServerErrorCode.STREAMING_INDEX_UPDATE_DISABLE,",
          "283:                         String.format(Locale.ROOT, MsgPicker.getMsg().getStreamingIndexesDelete()));",
          "284:             }",
          "291:                 removeHybridIndex(project, batchId, id);",
          "",
          "[Added Lines]",
          "282:             checkStreamingIndexDeleteEnabledWithIndexRange(project, model, indexRange);",
          "289:                 removeHybridIndex(project, batchId, Sets.newHashSet(id));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305:         indexPlanService.removeIndexes(project, modelId, ids);",
          "306:     }",
          "312:         }",
          "313:     }",
          "315:     public AggIndexResponse calculateAggIndexCount(UpdateRuleBasedCuboidRequest request) {",
          "316:         if (isFusionModel(request.getProject(), request.getModelId())) {",
          "",
          "[Removed Lines]",
          "308:     private void removeHybridIndex(String project, String model, final long id) {",
          "309:         val indexPlan = getManager(NIndexPlanManager.class, project).getIndexPlan(model);",
          "310:         if (indexPlan.getLayoutEntity(id) != null) {",
          "311:             indexPlanService.removeIndex(project, model, id);",
          "",
          "[Added Lines]",
          "306:     @Transaction(project = 0)",
          "307:     public void batchRemoveIndex(String project, String modelId, Set<Long> ids, IndexEntity.Range indexRange) {",
          "308:         NDataModel modelDesc = getManager(NDataModelManager.class, project).getDataModelDesc(modelId);",
          "309:         checkSecondStorageBaseTableIndexEnabled(project, modelDesc, ids);",
          "310:         checkStreamingIndexEnabled(project, modelDesc);",
          "311:         if (!modelDesc.fusionModelStreamingPart()) {",
          "312:             indexPlanService.removeIndexes(project, modelId, ids);",
          "313:             return;",
          "314:         }",
          "315:         checkStreamingIndexDeleteEnabledWithIndexRange(project, modelId, indexRange);",
          "316:         FusionModel fusionModel = getManager(FusionModelManager.class, project).getFusionModel(modelId);",
          "317:         String batchId = fusionModel.getBatchModel().getUuid();",
          "318:         if (IndexEntity.Range.BATCH == indexRange) {",
          "319:             indexPlanService.removeIndexes(project, batchId, ids);",
          "320:             return;",
          "321:         }",
          "323:         indexPlanService.removeIndexes(project, modelId, ids);",
          "324:         if (IndexEntity.Range.HYBRID == indexRange) {",
          "325:             removeHybridIndex(project, batchId, ids);",
          "329:     private void checkStreamingIndexDeleteEnabledWithIndexRange(String project, String modelId,",
          "330:             IndexEntity.Range indexRange) {",
          "331:         if (!indexChangeEnable(project, modelId, indexRange,",
          "332:                 Lists.newArrayList(IndexEntity.Range.HYBRID, Range.STREAMING, Range.EMPTY))) {",
          "333:             throw new KylinException(ServerErrorCode.STREAMING_INDEX_UPDATE_DISABLE,",
          "334:                     String.format(Locale.ROOT, MsgPicker.getMsg().getStreamingIndexesDelete()));",
          "335:         }",
          "336:     }",
          "338:     private void removeHybridIndex(String project, String model, final Set<Long> ids) {",
          "339:         val indexPlan = getManager(NIndexPlanManager.class, project).getIndexPlan(model);",
          "340:         ids.stream().filter(id -> indexPlan.getLayoutEntity(id) != null)",
          "341:                 .forEach(id -> indexPlanService.removeIndex(project, model, id));",
          "342:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "593:         }",
          "594:     }",
          "596:     private static boolean indexChangeEnable(String project, String modelId, IndexEntity.Range range,",
          "597:             List<IndexEntity.Range> ranges) {",
          "598:         if (!ranges.contains(range)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "625:     private static void checkSecondStorageBaseTableIndexEnabled(String project, NDataModel model, Set<Long> ids)",
          "626:             throws KylinException {",
          "627:         IndexPlan indexPlan = NIndexPlanManager.getInstance(KylinConfig.getInstanceFromEnv(), project)",
          "628:                 .getIndexPlan(model.getUuid());",
          "629:         boolean checkCannotDeleteEnabled = SecondStorageUtil.isModelEnable(project, model.getUuid())",
          "630:                 && ids.stream().map(indexPlan::getLayoutEntity).filter(Objects::nonNull)",
          "631:                         .anyMatch(layout -> layout.isBase() && layout.getIndex().isTableIndex());",
          "632:         if (checkCannotDeleteEnabled) {",
          "633:             throw new KylinException(ErrorCodeServer.BASE_TABLE_INDEX_DELETE_DISABLE);",
          "634:         }",
          "635:     }",
          "",
          "---------------"
        ],
        "src/modeling-service/src/test/java/org/apache/kylin/rest/service/FusionIndexServiceTest.java||src/modeling-service/src/test/java/org/apache/kylin/rest/service/FusionIndexServiceTest.java": [
          "File: src/modeling-service/src/test/java/org/apache/kylin/rest/service/FusionIndexServiceTest.java -> src/modeling-service/src/test/java/org/apache/kylin/rest/service/FusionIndexServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.apache.kylin.common.util.RandomUtil;",
          "35: import org.apache.kylin.cube.model.SelectRule;",
          "36: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "37: import org.apache.kylin.metadata.cube.cuboid.NAggregationGroup;",
          "38: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "39: import org.apache.kylin.metadata.cube.model.IndexEntity.Range;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "43: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "44: import org.apache.kylin.metadata.cube.model.NIndexPlanManager;",
          "45: import org.apache.kylin.metadata.model.NDataModel;",
          "46: import org.apache.kylin.metadata.model.NDataModelManager;",
          "47: import org.apache.kylin.metadata.model.SegmentRange;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import org.apache.kylin.metadata.model.FusionModel;",
          "47: import org.apache.kylin.metadata.model.FusionModelManager;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "822:         Assert.assertEquals(0, indexPlanManager.getIndexPlan(batchId).getAllLayouts().size());",
          "823:     }",
          "825:     @Test",
          "826:     public void testRemoveIndexe() throws Exception {",
          "827:         val modelId = \"b05034a8-c037-416b-aa26-9e6b4a41ee40\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "828:     @Test",
          "829:     public void testBatchRemoveIndex() {",
          "830:         val project = \"streaming_test\";",
          "831:         val model = \"4965c827-fbb4-4ea1-a744-3f341a3b030d\";",
          "833:         val indexPlanManager = NIndexPlanManager.getInstance(KylinConfig.getInstanceFromEnv(), project);",
          "834:         val dfMgr = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), \"streaming_test\");",
          "835:         val df = dfMgr.getDataflow(model);",
          "836:         val segRange = new SegmentRange.KafkaOffsetPartitionedSegmentRange(10L, 100L,",
          "837:                 createKafkaPartitionOffset(0, 200L), createKafkaPartitionOffset(0, 400L));",
          "838:         dfMgr.appendSegmentForStreaming(df, segRange, RandomUtil.randomUUIDStr());",
          "839:         try {",
          "840:             fusionIndexService.batchRemoveIndex(\"streaming_test\", model,",
          "841:                     indexPlanManager.getIndexPlan(model).getAllLayoutIds(false), Range.STREAMING);",
          "842:         } catch (KylinException e) {",
          "843:             Assert.assertEquals(ServerErrorCode.STREAMING_INDEX_UPDATE_DISABLE.toErrorCode().getCodeString(),",
          "844:                     e.getErrorCode().getCodeString());",
          "845:         }",
          "847:         val modelId = \"b05034a8-c037-416b-aa26-9e6b4a41ee40\";",
          "848:         Assert.assertEquals(5, indexPlanManager.getIndexPlan(modelId).getAllLayouts().size());",
          "849:         fusionIndexService.batchRemoveIndex(project, modelId, Sets.newHashSet(20000040001L), Range.STREAMING);",
          "850:         FusionModel fusionModel = KylinConfig.getInstanceFromEnv()",
          "851:                 .getManager(\"streaming_test\", FusionModelManager.class).getFusionModel(modelId);",
          "852:         String batchId = fusionModel.getBatchModel().getUuid();",
          "853:         Assert.assertEquals(4, indexPlanManager.getIndexPlan(modelId).getAllLayouts().size());",
          "855:         Assert.assertEquals(3, indexPlanManager.getIndexPlan(batchId).getAllLayouts().size());",
          "856:         fusionIndexService.batchRemoveIndex(project, modelId, Sets.newHashSet(10001L), Range.BATCH);",
          "857:         Assert.assertEquals(4, indexPlanManager.getIndexPlan(modelId).getAllLayouts().size());",
          "858:         Assert.assertEquals(2, indexPlanManager.getIndexPlan(batchId).getAllLayouts().size());",
          "860:         fusionIndexService.batchRemoveIndex(project, batchId, Sets.newHashSet(1L), Range.BATCH);",
          "861:         Assert.assertEquals(1, indexPlanManager.getIndexPlan(batchId).getAllLayouts().size());",
          "863:         Assert.assertTrue(",
          "864:                 indexPlanManager.getIndexPlan(modelId).getAllLayouts().stream().anyMatch(e -> e.getId() == 20001L));",
          "865:         Assert.assertTrue(",
          "866:                 indexPlanManager.getIndexPlan(batchId).getAllLayouts().stream().anyMatch(e -> e.getId() == 20001L));",
          "867:         fusionIndexService.batchRemoveIndex(project, modelId, Sets.newHashSet(20001L), Range.HYBRID);",
          "868:         Assert.assertFalse(",
          "869:                 indexPlanManager.getIndexPlan(modelId).getAllLayouts().stream().anyMatch(e -> e.getId() == 20001L));",
          "870:         Assert.assertFalse(",
          "871:                 indexPlanManager.getIndexPlan(batchId).getAllLayouts().stream().anyMatch(e -> e.getId() == 20001L));",
          "872:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22616bdd363b7ff16ffc64485c17e367a608addc",
      "candidate_info": {
        "commit_hash": "22616bdd363b7ff16ffc64485c17e367a608addc",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/22616bdd363b7ff16ffc64485c17e367a608addc",
        "files": [
          "src/kylin-it/src/test/java/org/apache/kylin/newten/NAggIndexPriorityAnswerWithCCExprTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/util/ExecAndComp.java",
          "src/kylin-it/src/test/resources/ut_meta/aggindex_priority_answer_withccexpr/metadata/_global/project/aggindex_priority_answer_withccexpr.json",
          "src/kylin-it/src/test/resources/ut_meta/aggindex_priority_answer_withccexpr/metadata/aggindex_priority_answer_withccexpr/dataflow/8dc395fb-f201-310e-feaa-d4000a7e16cb.json",
          "src/kylin-it/src/test/resources/ut_meta/aggindex_priority_answer_withccexpr/metadata/aggindex_priority_answer_withccexpr/index_plan/8dc395fb-f201-310e-feaa-d4000a7e16cb.json",
          "src/kylin-it/src/test/resources/ut_meta/aggindex_priority_answer_withccexpr/metadata/aggindex_priority_answer_withccexpr/model_desc/8dc395fb-f201-310e-feaa-d4000a7e16cb.json",
          "src/kylin-it/src/test/resources/ut_meta/aggindex_priority_answer_withccexpr/metadata/aggindex_priority_answer_withccexpr/table/SSB.DATES.json",
          "src/query-common/src/main/java/org/apache/kylin/query/relnode/KapProjectRel.java",
          "src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java",
          "src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPProjectRel.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/secondstorage/tdvt/TDVTTest.java",
          "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala",
          "src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/SparderTypeUtil.scala",
          "src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/LayoutFileIndex.scala"
        ],
        "message": "KYLIN-5649 prefer AggIndex works when computed column appears in the index\n\nrewrite the projects of OlapProjectRel",
        "before_after_code_files": [
          "src/kylin-it/src/test/java/org/apache/kylin/newten/NAggIndexPriorityAnswerWithCCExprTest.java||src/kylin-it/src/test/java/org/apache/kylin/newten/NAggIndexPriorityAnswerWithCCExprTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/util/ExecAndComp.java||src/kylin-it/src/test/java/org/apache/kylin/util/ExecAndComp.java",
          "src/query-common/src/main/java/org/apache/kylin/query/relnode/KapProjectRel.java||src/query-common/src/main/java/org/apache/kylin/query/relnode/KapProjectRel.java",
          "src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java||src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java",
          "src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPProjectRel.java||src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPProjectRel.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java||src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java||src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/secondstorage/tdvt/TDVTTest.java||src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/secondstorage/tdvt/TDVTTest.java",
          "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala||src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala",
          "src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/SparderTypeUtil.scala||src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/SparderTypeUtil.scala",
          "src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/LayoutFileIndex.scala||src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/LayoutFileIndex.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/kylin-it/src/test/java/org/apache/kylin/newten/NAggIndexPriorityAnswerWithCCExprTest.java||src/kylin-it/src/test/java/org/apache/kylin/newten/NAggIndexPriorityAnswerWithCCExprTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/newten/NAggIndexPriorityAnswerWithCCExprTest.java -> src/kylin-it/src/test/java/org/apache/kylin/newten/NAggIndexPriorityAnswerWithCCExprTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.newten;",
          "21: import java.util.List;",
          "22: import java.util.Map;",
          "24: import org.apache.kylin.common.KylinConfig;",
          "25: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "26: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "27: import org.apache.kylin.job.engine.JobEngineConfig;",
          "28: import org.apache.kylin.job.impl.threadpool.NDefaultScheduler;",
          "29: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "30: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "31: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "32: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "33: import org.apache.kylin.metadata.cube.model.NIndexPlanManager;",
          "34: import org.apache.kylin.metadata.model.SegmentRange;",
          "35: import org.apache.kylin.query.relnode.OLAPContext;",
          "36: import org.apache.kylin.query.routing.Candidate;",
          "37: import org.apache.kylin.query.routing.QueryLayoutChooser;",
          "38: import org.apache.kylin.query.routing.RemoveIncapableRealizationsRule;",
          "39: import org.apache.kylin.util.OlapContextTestUtil;",
          "40: import org.apache.spark.sql.SparderEnv;",
          "41: import org.junit.After;",
          "42: import org.junit.Assert;",
          "43: import org.junit.Before;",
          "44: import org.junit.Test;",
          "46: public class NAggIndexPriorityAnswerWithCCExprTest extends NLocalWithSparkSessionTest {",
          "48:     @Override",
          "49:     public String getProject() {",
          "50:         return \"aggindex_priority_answer_withccexpr\";",
          "51:     }",
          "53:     @Before",
          "54:     public void setup() throws Exception {",
          "55:         overwriteSystemProp(\"kylin.query.use-tableindex-answer-non-raw-query\", \"true\");",
          "56:         overwriteSystemProp(\"kylin.query.layout.prefer-aggindex\", \"true\");",
          "57:         this.createTestMetadata(\"src/test/resources/ut_meta/aggindex_priority_answer_withccexpr\");",
          "59:         NDefaultScheduler scheduler = NDefaultScheduler.getInstance(getProject());",
          "60:         scheduler.init(new JobEngineConfig(KylinConfig.getInstanceFromEnv()));",
          "61:         if (!scheduler.hasStarted()) {",
          "62:             throw new RuntimeException(\"scheduler has not been started\");",
          "63:         }",
          "64:     }",
          "66:     @After",
          "67:     public void after() throws Exception {",
          "68:         NDefaultScheduler.destroyInstance();",
          "69:         cleanupTestMetadata();",
          "70:     }",
          "72:     @Test",
          "73:     public void testAggIndexPriorityAnswerWithCcExpr() throws Exception {",
          "74:         String modelId = \"8dc395fb-f201-310e-feaa-d4000a7e16cb\";",
          "75:         NIndexPlanManager indexMgr = NIndexPlanManager.getInstance(getTestConfig(), getProject());",
          "76:         List<LayoutEntity> layouts = indexMgr.getIndexPlan(modelId).getAllLayouts();",
          "77:         indexDataConstructor.buildIndex(modelId, SegmentRange.TimePartitionedSegmentRange.createInfinite(),",
          "78:                 Sets.newLinkedHashSet(layouts), true);",
          "79:         populateSSWithCSVData(getTestConfig(), getProject(), SparderEnv.getSparkSession());",
          "81:         String sql = \"select D_YEAR,count(CASE WHEN b IN ('1') THEN 1 ELSE NULL END) \"",
          "82:                 + \"from (select D_YEAR,D_DAYOFWEEK b from SSB.DATES) group by D_YEAR\";",
          "84:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "85:         OLAPContext context = OlapContextTestUtil.getOlapContexts(getProject(), sql).get(0);",
          "87:         Map<String, String> sqlAlias2ModelName = OlapContextTestUtil.matchJoins(dataflow.getModel(), context);",
          "88:         context.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "89:         NLayoutCandidate layoutCandidate = QueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "90:                 dataflow.getQueryableSegments(), context.getSQLDigest(), null);",
          "91:         assert layoutCandidate != null;",
          "92:         Assert.assertTrue(layoutCandidate.getCapabilityResult().isCapable());",
          "94:         RemoveIncapableRealizationsRule removeIncapableRealizationsRule = new RemoveIncapableRealizationsRule();",
          "95:         Candidate candidate = new Candidate(dataflow.getRealizations().get(0), context, sqlAlias2ModelName);",
          "96:         candidate.setPrunedSegments(dataflow.getQueryableSegments(), dataflow);",
          "97:         removeIncapableRealizationsRule.apply(candidate);",
          "98:         Assert.assertTrue(candidate.getCapability().isCapable());",
          "99:         NLayoutCandidate selectedCandidate = (NLayoutCandidate) candidate.getCapability().getSelectedCandidate();",
          "100:         Assert.assertNotNull(selectedCandidate.getLayoutEntity().getIndex().getLayout(50001));",
          "101:     }",
          "102: }",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/util/ExecAndComp.java||src/kylin-it/src/test/java/org/apache/kylin/util/ExecAndComp.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/util/ExecAndComp.java -> src/kylin-it/src/test/java/org/apache/kylin/util/ExecAndComp.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: import org.apache.kylin.common.util.JsonUtil;",
          "41: import org.apache.kylin.common.util.Pair;",
          "42: import org.apache.kylin.common.util.Unsafe;",
          "43: import org.apache.kylin.metadata.project.NProjectManager;",
          "44: import org.apache.kylin.metadata.query.StructField;",
          "45: import org.apache.kylin.query.engine.QueryExec;",
          "46: import org.apache.kylin.query.engine.data.QueryResult;",
          "47: import org.apache.kylin.query.relnode.OLAPContext;",
          "48: import org.apache.kylin.query.util.PushDownUtil;",
          "49: import org.apache.kylin.query.util.QueryParams;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "44: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "45: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "50: import org.apache.kylin.query.pushdown.SparkSqlClient;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54: import org.apache.spark.sql.types.StructType;",
          "55: import org.apache.spark.sql.util.SparderTypeUtil;",
          "60: import lombok.AllArgsConstructor;",
          "61: import lombok.Data;",
          "62: import lombok.NoArgsConstructor;",
          "",
          "[Removed Lines]",
          "57: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "58: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "59: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190:         } catch (Exception e) {",
          "191:             log.warn(\"persist {} failed\", sqlPath, e);",
          "192:         }",
          "194:         val structs = Arrays.stream(ds.schema().fields()).map(SparderTypeUtil::convertSparkFieldToJavaField)",
          "195:                 .collect(Collectors.toList());",
          "209:     }",
          "211:     public static String removeDataBaseInSql(String originSql) {",
          "",
          "[Removed Lines]",
          "193:         val rows = ds.collectAsList();",
          "196:         return new QueryResult(rows.stream().map(r -> {",
          "197:             List<String> result = Lists.newArrayList();",
          "198:             for (int i = 0; i < r.size(); i++) {",
          "199:                 val structField = structs.get(i);",
          "200:                 val node = r.get(i);",
          "201:                 if (node == null) {",
          "202:                     result.add(null);",
          "203:                 } else {",
          "204:                     result.add(node.toString());",
          "205:                 }",
          "206:             }",
          "207:             return result;",
          "208:         }).collect(Collectors.toList()), rows.size(), structs);",
          "",
          "[Added Lines]",
          "196:         val dsIter = ds.toIterator();",
          "197:         Iterable<List<String>> listIter = SparkSqlClient.readPushDownResultRow(dsIter._1(), false);",
          "198:         return new QueryResult(Lists.newArrayList(listIter), (int) dsIter._2(), structs);",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/relnode/KapProjectRel.java||src/query-common/src/main/java/org/apache/kylin/query/relnode/KapProjectRel.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/relnode/KapProjectRel.java -> src/query-common/src/main/java/org/apache/kylin/query/relnode/KapProjectRel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.ArrayList;",
          "22: import java.util.Collection;",
          "23: import java.util.List;",
          "24: import java.util.Map;",
          "25: import java.util.Set;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import java.util.HashMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.apache.calcite.rel.type.RelDataTypeFieldImpl;",
          "40: import org.apache.calcite.rex.RexInputRef;",
          "41: import org.apache.calcite.rex.RexNode;",
          "46: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "47: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "48: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "50: import lombok.Setter;",
          "51: import lombok.val;",
          "",
          "[Removed Lines]",
          "42: import org.apache.kylin.metadata.model.TblColRef;",
          "43: import org.apache.kylin.query.schema.OLAPTable;",
          "44: import org.apache.kylin.query.util.ICutContextStrategy;",
          "",
          "[Added Lines]",
          "46: import org.apache.kylin.metadata.model.TblColRef;",
          "47: import org.apache.kylin.query.schema.OLAPTable;",
          "48: import org.apache.kylin.query.util.ICutContextStrategy;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "162:                 || !(this.context.hasPrecalculatedFields())",
          "163:                 || (this.getContext().isHasJoin() && this.beforeTopPreCalcJoin)) {",
          "164:             this.columnRowType = this.buildColumnRowType();",
          "165:             return;",
          "166:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:             this.rewriteProjects();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:         this.columnRowType = this.buildColumnRowType();",
          "192:         this.rewriting = false;",
          "193:     }",
          "195:     private void updateSubContexts(Set<OLAPContext> subContexts) {",
          "196:         if (isMerelyPermutation || this.rewriting || this.afterAggregate)",
          "197:             return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:         this.rewriteProjects();",
          "197:     private void rewriteProjects() {",
          "198:         OLAPRel olapChild = (OLAPRel) getInput();",
          "199:         ColumnRowType inputColumnRowType = olapChild.getColumnRowType();",
          "200:         List<TblColRef> allColumns = inputColumnRowType.getAllColumns();",
          "201:         List<TblColRef> ccColRefList = allColumns.stream() //",
          "202:                 .filter(col -> col.getColumnDesc().isComputedColumn()) //",
          "203:                 .collect(Collectors.toList());",
          "205:         Map<TblColRef, Integer> columnToIdMap = Maps.newHashMap();",
          "206:         for (int i = 0; i < allColumns.size(); i++) {",
          "207:             TblColRef colRef = allColumns.get(i);",
          "208:             if (TblColRef.UNKNOWN_ALIAS.equalsIgnoreCase(colRef.getTableAlias())) {",
          "209:                 continue;",
          "210:             } else if (columnToIdMap.containsKey(colRef)) {",
          "211:                 logger.warn(\"duplicate TblColRef {} of computed column.\", colRef);",
          "212:             }",
          "213:             columnToIdMap.putIfAbsent(colRef, i);",
          "214:         }",
          "215:         List<RexNode> newRewriteProjList = Lists.newArrayList();",
          "216:         Map<String, TblColRef> map = Maps.newHashMap();",
          "217:         for (TblColRef tblColRef : ccColRefList) {",
          "218:             map.putIfAbsent(tblColRef.getDoubleQuoteExp(), tblColRef);",
          "219:         }",
          "220:         Map<RexNode, TblColRef> nodeAndTblColMap = new HashMap<>();",
          "221:         for (int i = 0; i < this.rewriteProjects.size(); i++) {",
          "222:             RexNode rex = this.rewriteProjects.get(i);",
          "223:             RelDataTypeField columnField = this.rowType.getFieldList().get(i);",
          "224:             String fieldName = columnField.getName();",
          "225:             Set<TblColRef> sourceCollector = Sets.newHashSet();",
          "226:             TblColRef column = translateRexNode(rex, inputColumnRowType, fieldName, sourceCollector, nodeAndTblColMap);",
          "227:             if (column == null)",
          "228:                 throw new IllegalStateException(\"No TblColRef found in \" + rex);",
          "229:             TblColRef existColRef = map.get(column.toString());",
          "230:             if (existColRef != null && getContext().allColumns.contains(existColRef)) {",
          "231:                 column = existColRef;",
          "232:                 List<RelDataTypeField> inputFieldList = getInput().getRowType().getFieldList();",
          "233:                 RelDataTypeField inputField = inputFieldList.get(columnToIdMap.get(column));",
          "234:                 RexNode newRef = inputField == null ? rex",
          "235:                         : new RexInputRef(inputField.getIndex(), inputField.getType());",
          "236:                 newRewriteProjList.add(newRef);",
          "237:             } else {",
          "238:                 newRewriteProjList.add(rex);",
          "239:             }",
          "240:         }",
          "241:         this.rewriteProjects = newRewriteProjList;",
          "242:     }",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java||src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java -> src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPAggregateRel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: import org.apache.calcite.sql.validate.SqlUserDefinedAggFunction;",
          "59: import org.apache.calcite.util.ImmutableBitSet;",
          "60: import org.apache.calcite.util.Util;",
          "61: import org.apache.kylin.measure.MeasureTypeFactory;",
          "62: import org.apache.kylin.measure.basic.BasicMeasureType;",
          "63: import org.apache.kylin.measure.percentile.PercentileMeasureType;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "62: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "63: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: import org.apache.kylin.metadata.model.TblColRef;",
          "69: import org.apache.kylin.query.schema.OLAPTable;",
          "77: public class OLAPAggregateRel extends Aggregate implements OLAPRel {",
          "",
          "[Removed Lines]",
          "71: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "72: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "73: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315:     }",
          "317:     public boolean needRewrite() {",
          "319:     }",
          "321:     @Override",
          "",
          "[Removed Lines]",
          "318:         return this.context.realization != null && !this.afterAggregate && !context.isAnsweredByTableIndex();",
          "",
          "[Added Lines]",
          "317:         return this.context.realization != null && !this.afterAggregate;",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPProjectRel.java||src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPProjectRel.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPProjectRel.java -> src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPProjectRel.java"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java||src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:         this.realization = realization;",
          "101:         this.ctx = ctx;",
          "102:         this.matchedJoinsGraphAliasMap = matchedJoinsGraphAliasMap;",
          "103:     }",
          "105:     @Override",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:         this.recordRewrittenCtxProps();",
          "105:     }",
          "107:     void recordRewrittenCtxProps() {",
          "108:         this.rewrittenCtx = RealizationChooser.preservePropsBeforeRewrite(ctx);",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:             return null;",
          "351:         }",
          "354:         logger.info(\"The realizations remaining: {}, and the final chosen one for current olap context {} is {}\",",
          "355:                 candidate.realization.getCanonicalName(), olapContext.id, candidate.realization.getCanonicalName());",
          "356:         return candidate;",
          "357:     }",
          "363:     static OLAPContextProp preservePropsBeforeRewrite(OLAPContext oriOLAPContext) {",
          "364:         OLAPContextProp preserved = new OLAPContextProp(-1);",
          "365:         preserved.allColumns = Sets.newHashSet(oriOLAPContext.allColumns);",
          "",
          "[Removed Lines]",
          "353:         candidate.setRewrittenCtx(preserveRewriteProps(olapContext));",
          "359:     static OLAPContextProp preserveRewriteProps(OLAPContext rewrittenOLAContext) {",
          "360:         return preservePropsBeforeRewrite(rewrittenOLAContext);",
          "361:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378:     static void restoreOLAPContextProps(OLAPContext oriOLAPContext, OLAPContextProp preservedOLAPContext) {",
          "379:         oriOLAPContext.allColumns = preservedOLAPContext.allColumns;",
          "380:         oriOLAPContext.setSortColumns(preservedOLAPContext.getSortColumns());",
          "381:         oriOLAPContext.aggregations.forEach(agg -> {",
          "384:                 agg.setExpression(functionDesc.getExpression());",
          "385:                 agg.setParameters(functionDesc.getParameters());",
          "386:                 agg.setReturnType(functionDesc.getReturnType());",
          "",
          "[Removed Lines]",
          "382:             if (preservedOLAPContext.getReservedMap().containsKey(agg)) {",
          "383:                 final FunctionDesc functionDesc = preservedOLAPContext.getReservedMap().get(agg);",
          "",
          "[Added Lines]",
          "379:         Map<FunctionDesc, FunctionDesc> map = Maps.newHashMap(preservedOLAPContext.getReservedMap());",
          "381:             if (map.containsKey(agg)) {",
          "382:                 final FunctionDesc functionDesc = map.get(agg);",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/RemoveIncapableRealizationsRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: import org.apache.kylin.metadata.realization.HybridRealization;",
          "26: import org.apache.kylin.metadata.realization.IRealization;",
          "27: import org.apache.kylin.metadata.realization.SQLDigest;",
          "28: import org.apache.kylin.query.util.ComputedColumnRewriter;",
          "29: import org.apache.kylin.query.util.QueryAliasMatchInfo;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: import org.apache.kylin.query.relnode.OLAPContextProp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:         if (candidate.getCapability() != null) {",
          "40:             return;",
          "41:         }",
          "45:         IRealization realization = candidate.getRealization();",
          "51:             ComputedColumnRewriter.rewriteCcInnerCol(candidate.getCtx(), realization.getModel(),",
          "52:                     new QueryAliasMatchInfo(aliasMapping, null));",
          "53:             candidate.getCtx().resetSQLDigest();",
          "55:         }",
          "58:     }",
          "60:     private CapabilityResult getCapabilityResult(Candidate candidate) {",
          "",
          "[Removed Lines]",
          "42:         candidate.getCtx().resetSQLDigest();",
          "43:         CapabilityResult capability = getCapabilityResult(candidate);",
          "46:         if (!capability.isCapable() && !realization.getModel().getComputedColumnDescs().isEmpty()) {",
          "47:             log.info(\"{}({}/{}): try rewrite computed column and then check whether the realization is capable.\",",
          "48:                     this.getClass().getName(), realization.getProject(), realization.getCanonicalName());",
          "49:             BiMap<String, String> aliasMapping = HashBiMap.create();",
          "50:             aliasMapping.putAll(candidate.getMatchedJoinsGraphAliasMap());",
          "54:             capability = getCapabilityResult(candidate);",
          "57:         candidate.setCapability(capability);",
          "",
          "[Added Lines]",
          "45:         OLAPContextProp propsBeforeRewrite = RealizationChooser.preservePropsBeforeRewrite(candidate.getCtx());",
          "46:         CapabilityResult capabilityResult = new CapabilityResult();",
          "49:         if (!realization.getModel().getComputedColumnDescs().isEmpty()) {",
          "50:             BiMap<String, String> aliasMapping = HashBiMap.create(candidate.getMatchedJoinsGraphAliasMap());",
          "54:             capabilityResult = getCapabilityResult(candidate);",
          "55:             candidate.recordRewrittenCtxProps();",
          "58:         if (!capabilityResult.isCapable()) {",
          "59:             RealizationChooser.restoreOLAPContextProps(candidate.getCtx(), propsBeforeRewrite);",
          "60:             candidate.getCtx().resetSQLDigest();",
          "61:             capabilityResult = getCapabilityResult(candidate);",
          "62:             candidate.recordRewrittenCtxProps();",
          "63:         }",
          "65:         candidate.setCapability(capabilityResult);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:         } else {",
          "68:             capability = DataflowCapabilityChecker.check((NDataflow) realization, candidate, sqlDigest);",
          "69:         }",
          "70:         return capability;",
          "71:     }",
          "72: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:         candidate.recordRewrittenCtxProps();",
          "",
          "---------------"
        ],
        "src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java||src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java": [
          "File: src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java -> src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: import org.apache.kylin.common.QueryContext;",
          "25: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "26: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "27: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "28: import org.apache.kylin.query.relnode.OLAPContext;",
          "29: import org.junit.jupiter.api.Assertions;",
          "30: import org.junit.jupiter.api.Test;",
          "31: import org.mockito.Mockito;",
          "33: class CandidateSortTest {",
          "35:     @Test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "28: import org.apache.kylin.junit.annotation.MetadataInfo;",
          "35: @MetadataInfo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         Comparator<Candidate> comparator = Candidate.realizationCostSorter();",
          "82:         NDataflow df1 = Mockito.mock(NDataflow.class);",
          "83:         NDataflow df2 = Mockito.mock(NDataflow.class);",
          "85:         Candidate c1 = new Candidate(df1, olapContext, Maps.newHashMap());",
          "86:         Candidate c2 = new Candidate(df2, olapContext, Maps.newHashMap());",
          "87:         Mockito.when(c1.getRealization().getCost()).thenReturn(1);",
          "",
          "[Removed Lines]",
          "84:         OLAPContext olapContext = Mockito.mock(OLAPContext.class);",
          "",
          "[Added Lines]",
          "87:         OLAPContext olapContext = new OLAPContext(0);",
          "88:         olapContext.allColumns = Sets.newHashSet();",
          "",
          "---------------"
        ],
        "src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/secondstorage/tdvt/TDVTTest.java||src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/secondstorage/tdvt/TDVTTest.java": [
          "File: src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/secondstorage/tdvt/TDVTTest.java -> src/second-storage/clickhouse-it/src/test/java/io/kyligence/kap/secondstorage/tdvt/TDVTTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: import org.apache.kylin.common.QueryContext;",
          "42: import org.apache.kylin.common.util.Unsafe;",
          "43: import org.apache.kylin.engine.spark.IndexDataConstructor;",
          "44: import org.apache.kylin.job.SecondStorageJobParamUtil;",
          "45: import org.apache.kylin.job.common.ExecutableUtil;",
          "46: import org.apache.kylin.job.execution.DefaultExecutable;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;",
          "45: import org.apache.kylin.guava30.shaded.common.collect.ImmutableMap;",
          "46: import org.apache.kylin.guava30.shaded.common.collect.ImmutableSet;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: import org.apache.kylin.job.model.JobParam;",
          "52: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "53: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "54: import org.apache.kylin.metadata.model.NDataModelManager;",
          "55: import org.apache.kylin.util.ExecAndComp;",
          "56: import org.apache.spark.sql.Dataset;",
          "57: import org.apache.spark.sql.Row;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: import org.apache.kylin.metadata.model.ComputedColumnDesc;",
          "59: import org.apache.kylin.query.util.PushDownUtil;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70: import org.junit.runners.Parameterized;",
          "71: import org.testcontainers.containers.JdbcDatabaseContainer;",
          "77: import io.kyligence.kap.newten.clickhouse.ClickHouseUtils;",
          "78: import io.kyligence.kap.secondstorage.SecondStorageUtil;",
          "79: import io.kyligence.kap.secondstorage.test.ClickHouseClassRule;",
          "",
          "[Removed Lines]",
          "73: import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;",
          "74: import org.apache.kylin.guava30.shaded.common.collect.ImmutableMap;",
          "75: import org.apache.kylin.guava30.shaded.common.collect.ImmutableSet;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:                         dataflowManager.getDataflow(AUTO_MODEL_STAPLES_1).getSegments().stream()",
          "163:                                 .map(NDataSegment::getId).collect(Collectors.toList())));",
          "166:         test.checkHttpServer();",
          "167:         test.overwriteSystemProp(\"kylin.query.use-tableindex-answer-non-raw-query\", \"true\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:         modelManager.listAllModels().forEach(model -> {",
          "168:             if (model.isBroken()) {",
          "169:                 return;",
          "170:             }",
          "171:             List<ComputedColumnDesc> ccList = model.getComputedColumnDescs();",
          "172:             for (ComputedColumnDesc ccDesc : ccList) {",
          "173:                 String innerExp = PushDownUtil.massageComputedColumn(model, model.getProject(), ccDesc, null);",
          "174:                 ccDesc.setInnerExpression(innerExp);",
          "175:             }",
          "176:         });",
          "",
          "---------------"
        ],
        "src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala||src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala": [
          "File: src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala -> src/spark-project/sparder/src/main/scala/org/apache/kylin/query/pushdown/SparkSqlClient.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:       QueryContext.current().getMetrics.setQueryStageCount(stageCount)",
          "165:       QueryContext.current().getMetrics.setQueryTaskCount(taskCount)",
          "168:     } catch {",
          "169:       case e: Throwable =>",
          "170:         if (e.isInstanceOf[InterruptedException]) {",
          "",
          "[Removed Lines]",
          "167:       (readPushDownResultRow(resultRows, true), resultSize, fieldList)",
          "",
          "[Added Lines]",
          "167:       (readPushDownResultRow(resultRows, checkInterrupt = true), resultSize, fieldList)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:     case value: mutable.WrappedArray.ofRef[AnyRef] => value.array.map(v => rawValueToString(v, true)).mkString(\"[\", \",\", \"]\")",
          "213:     case value: immutable.Map[Any, Any] =>",
          "214:       value.map(p => rawValueToString(p._1, true) + \":\" + rawValueToString(p._2, true)).mkString(\"{\", \",\", \"}\")",
          "215:     case value: Any => value.toString",
          "216:   }",
          "217: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:     case value: Array[Byte] => new String(value)",
          "",
          "---------------"
        ],
        "src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/SparderTypeUtil.scala||src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/SparderTypeUtil.scala": [
          "File: src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/SparderTypeUtil.scala -> src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/SparderTypeUtil.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.apache.spark.sql.functions._",
          "35: import org.apache.spark.sql.types._",
          "36: import org.apache.spark.unsafe.types.UTF8String",
          "39: import java.lang.{Boolean => JBoolean, Byte => JByte, Double => JDouble, Float => JFloat, Long => JLong, Short => JShort}",
          "40: import java.math.BigDecimal",
          "",
          "[Removed Lines]",
          "37: import org.springframework.util.Base64Utils",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:       case (ts: java.sql.Timestamp, _) => DateFormat.castTimestampToString(ts.getTime)",
          "298:       case (dt: java.sql.Date, _) => DateFormat.formatToDateStr(dt.getTime)",
          "299:       case (str: java.lang.String, _) => formatStringValue(str)",
          "301:         value.array.map(v => convertToStringWithCalciteType(v, relType, true)).mkString(\"[\", \",\", \"]\")",
          "302:       case (value: immutable.Map[Any, Any], _) =>",
          "303:         value",
          "304:           .map(v => convertToStringWithCalciteType(v._1, relType, true) + \":\" + convertToStringWithCalciteType(v._2, relType, true))",
          "305:           .mkString(\"{\", \",\", \"}\")",
          "307:       case (other, _) => other.toString",
          "308:     }",
          "309:   }",
          "",
          "[Removed Lines]",
          "300:       case (value: mutable.WrappedArray.ofRef[Any], _) =>",
          "306:       case (value: Array[Byte], _) => Base64Utils.encodeToString(value)",
          "",
          "[Added Lines]",
          "299:       case (value: mutable.WrappedArray.ofRef[AnyRef], _) =>",
          "300:         value.array.map(v => convertToStringWithCalciteType(v, relType, true)).mkString(\"[\", \",\", \"]\")",
          "301:       case (value: mutable.WrappedArray[Any], _) =>",
          "307:       case (value: Array[Byte], _) => new String(value)",
          "",
          "---------------"
        ],
        "src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/LayoutFileIndex.scala||src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/LayoutFileIndex.scala": [
          "File: src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/LayoutFileIndex.scala -> src/spark-project/spark-common/src/main/scala/org/apache/spark/sql/execution/datasource/LayoutFileIndex.scala"
        ]
      }
    },
    {
      "candidate_hash": "3dc5bfd19c347441efea29b630972f3e950ec20d",
      "candidate_info": {
        "commit_hash": "3dc5bfd19c347441efea29b630972f3e950ec20d",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/3dc5bfd19c347441efea29b630972f3e950ec20d",
        "files": [
          "pom.xml",
          "src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "src/kylin-it/src/test/java/org/apache/kylin/newten/BloomFilterTest.java",
          "src/spark-project/spark-common/src/main/java/org/apache/kylin/engine/spark/filter/ParquetBloomFilter.java"
        ],
        "message": "KYLIN-5640 Support building dynamic bloom filter that adapts to data",
        "before_after_code_files": [
          "src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "src/kylin-it/src/test/java/org/apache/kylin/newten/BloomFilterTest.java||src/kylin-it/src/test/java/org/apache/kylin/newten/BloomFilterTest.java",
          "src/spark-project/spark-common/src/main/java/org/apache/kylin/engine/spark/filter/ParquetBloomFilter.java||src/spark-project/spark-common/src/main/java/org/apache/kylin/engine/spark/filter/ParquetBloomFilter.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java||src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java": [
          "File: src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java -> src/core-common/src/main/java/org/apache/kylin/common/KylinConfigBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "3942:         return getOptional(\"kylin.bloom.build.column\", \"\");",
          "3943:     }",
          "3945:     public int getBloomBuildColumnNvd() {",
          "3946:         return Integer.parseInt(getOptional(\"kylin.bloom.build.column.nvd\", \"200000\"));",
          "3947:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3945:     public String getBloomBuildColumnIds() {",
          "3946:         return getOptional(\"kylin.bloom.build.column-ids\", \"\");",
          "3947:     }",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/newten/BloomFilterTest.java||src/kylin-it/src/test/java/org/apache/kylin/newten/BloomFilterTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/newten/BloomFilterTest.java -> src/kylin-it/src/test/java/org/apache/kylin/newten/BloomFilterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:         Assert.assertNotNull(layout);",
          "122:         populateSSWithCSVData(getTestConfig(), getProject(), SparderEnv.getSparkSession());",
          "125:         indexDataConstructor.buildIndex(dfID, SegmentRange.TimePartitionedSegmentRange.createInfinite(),",
          "126:                 Sets.newHashSet(",
          "127:                         dataflow.getIndexPlan().getLayoutEntity(20000000001L)), true);",
          "",
          "[Removed Lines]",
          "124:         overwriteSystemProp(\"kylin.bloom.build.column\", \"0#10000#1#10000\");",
          "",
          "[Added Lines]",
          "124:         overwriteSystemProp(\"kylin.bloom.build.column-ids\", \"0#1\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:             return true;",
          "175:         });",
          "178:         overwriteSystemProp(\"kylin.bloom.build.column.max-size\", \"1\");",
          "179:         ParquetBloomFilter.resetParquetBloomFilter();",
          "180:         indexDataConstructor.buildIndex(dfID, SegmentRange.TimePartitionedSegmentRange.createInfinite(),",
          "",
          "[Removed Lines]",
          "177:         overwriteSystemProp(\"kylin.bloom.build.column\", \"\");",
          "",
          "[Added Lines]",
          "177:         overwriteSystemProp(\"kylin.bloom.build.column-ids\", \"\");",
          "",
          "---------------"
        ],
        "src/spark-project/spark-common/src/main/java/org/apache/kylin/engine/spark/filter/ParquetBloomFilter.java||src/spark-project/spark-common/src/main/java/org/apache/kylin/engine/spark/filter/ParquetBloomFilter.java": [
          "File: src/spark-project/spark-common/src/main/java/org/apache/kylin/engine/spark/filter/ParquetBloomFilter.java -> src/spark-project/spark-common/src/main/java/org/apache/kylin/engine/spark/filter/ParquetBloomFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:             return;",
          "107:         }",
          "108:         String manualColumn = config.getBloomBuildColumn();",
          "109:         if (StringUtils.isNotBlank(manualColumn)) {",
          "110:             String[] blooms = manualColumn.split(\"#\");",
          "111:             for (int i = 0; i < blooms.length; i += 2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:         String bloomColumnIds= config.getBloomBuildColumnIds();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:             }",
          "118:             return;",
          "119:         }",
          "120:         Set<String> columns = Arrays.stream(data.columns()).collect(Collectors.toSet());",
          "121:         Set<ColumnFilter> dataColumns = columnFilters.stream()",
          "122:                 .filter(column -> columns.contains(column.columnId)).collect(Collectors.toSet());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:         dataWriter.option(\"parquet.bloom.filter.dynamic.enabled\", \"true\");",
          "122:         dataWriter.option(\"parquet.bloom.filter.candidate.size\", \"10\");",
          "123:         if (StringUtils.isNotBlank(bloomColumnIds)) {",
          "124:             String[] blooms = bloomColumnIds.split(\"#\");",
          "125:             for (int i = 0; i < blooms.length; i++) {",
          "126:                 dataWriter.option(\"parquet.bloom.filter.enabled#\" + blooms[i], \"true\");",
          "127:                 LOGGER.info(\"build dynamic BloomFilter info: columnIds is {}\", blooms[i]);",
          "128:                 buildBloomColumns.add(blooms[i]);",
          "129:             }",
          "130:             return;",
          "131:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:                 break;",
          "127:             }",
          "128:             dataWriter.option(\"parquet.bloom.filter.enabled#\" + columnFilter.columnId, \"true\");",
          "130:             buildBloomColumns.add(columnFilter.columnId);",
          "133:             count++;",
          "134:         }",
          "135:     }",
          "",
          "[Removed Lines]",
          "129:             dataWriter.option(\"parquet.bloom.filter.expected.ndv#\" + columnFilter.columnId, config.getBloomBuildColumnNvd());",
          "131:             LOGGER.info(\"building BloomFilter : columnId is {}; nvd is {}\",",
          "132:                     columnFilter.columnId, config.getBloomBuildColumnNvd());",
          "",
          "[Added Lines]",
          "142:             LOGGER.info(\"building BloomFilter : columnId is {}\", columnFilter.columnId);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46e602943b52ceff5628b37652b5a833c5475e82",
      "candidate_info": {
        "commit_hash": "46e602943b52ceff5628b37652b5a833c5475e82",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/46e602943b52ceff5628b37652b5a833c5475e82",
        "files": [
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/realization/HybridRealization.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/QueryableSeg.java",
          "src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextUtil.java",
          "src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationCheck.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationPruner.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RoutingRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/PartitionPruningRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveUncapableRealizationsRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/SegmentPruningRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/util/RexUtils.java",
          "src/query/src/main/java/org/apache/kylin/query/engine/QueryExec.java",
          "src/query/src/main/java/org/apache/kylin/query/util/FirstRoundContextCutStrategy.java",
          "src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java",
          "src/query/src/main/java/org/apache/kylin/query/util/QueryReCutContextStrategy.java"
        ],
        "message": "KYLIN-5632 Refactoring the selection logic of realizations",
        "before_after_code_files": [
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/realization/HybridRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/realization/HybridRealization.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java",
          "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/QueryableSeg.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/QueryableSeg.java",
          "src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextUtil.java||src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextUtil.java",
          "src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java||src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java||src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationCheck.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationCheck.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationPruner.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationPruner.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/RoutingRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RoutingRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/PartitionPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/rules/PartitionPruningRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveUncapableRealizationsRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveUncapableRealizationsRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/SegmentPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/rules/SegmentPruningRule.java",
          "src/query-common/src/main/java/org/apache/kylin/query/util/RexUtils.java||src/query-common/src/main/java/org/apache/kylin/query/util/RexUtils.java",
          "src/query/src/main/java/org/apache/kylin/query/engine/QueryExec.java||src/query/src/main/java/org/apache/kylin/query/engine/QueryExec.java",
          "src/query/src/main/java/org/apache/kylin/query/util/FirstRoundContextCutStrategy.java||src/query/src/main/java/org/apache/kylin/query/util/FirstRoundContextCutStrategy.java",
          "src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java||src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java",
          "src/query/src/main/java/org/apache/kylin/query/util/QueryReCutContextStrategy.java||src/query/src/main/java/org/apache/kylin/query/util/QueryReCutContextStrategy.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflow.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.metadata.cube.model;",
          "21: import java.io.Serializable;",
          "23: import java.util.Collection;",
          "24: import java.util.Collections;",
          "25: import java.util.LinkedHashSet;",
          "",
          "[Removed Lines]",
          "22: import java.util.Arrays;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import org.apache.kylin.common.KylinConfigExt;",
          "36: import org.apache.kylin.common.persistence.MissingRootPersistentEntity;",
          "37: import org.apache.kylin.common.persistence.RootPersistentEntity;",
          "38: import org.apache.kylin.metadata.MetadataConstants;",
          "39: import org.apache.kylin.metadata.cube.optimization.FrequencyMap;",
          "40: import org.apache.kylin.metadata.model.FunctionDesc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "38: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "39: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "40: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "50: import org.apache.kylin.metadata.model.TblColRef;",
          "51: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "52: import org.apache.kylin.metadata.realization.IRealization;",
          "53: import org.apache.kylin.metadata.realization.RealizationStatusEnum;",
          "54: import org.apache.kylin.metadata.realization.SQLDigest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: import org.apache.kylin.metadata.realization.QueryableSeg;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "57: import com.fasterxml.jackson.annotation.JsonIgnore;",
          "58: import com.fasterxml.jackson.annotation.JsonManagedReference;",
          "59: import com.fasterxml.jackson.annotation.JsonProperty;",
          "65: import lombok.Getter;",
          "66: import lombok.Setter;",
          "",
          "[Removed Lines]",
          "60: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "61: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "62: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "63: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "209:     @Override",
          "210:     public CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,",
          "213:     }",
          "215:     @Override",
          "218:         if (isStreaming()) {",
          "220:         } else {",
          "222:         }",
          "223:     }",
          "",
          "[Removed Lines]",
          "211:             Map<String, Set<Long>> secondStorageSegmentLayoutMap) {",
          "212:         return NDataflowCapabilityChecker.check(this, prunedSegments, digest, secondStorageSegmentLayoutMap);",
          "216:     public CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,",
          "217:             List<NDataSegment> prunedStreamingSegments, Map<String, Set<Long>> secondStorageSegmentLayoutMap) {",
          "219:             return isCapable(digest, prunedStreamingSegments, secondStorageSegmentLayoutMap);",
          "221:             return isCapable(digest, prunedSegments, secondStorageSegmentLayoutMap);",
          "",
          "[Added Lines]",
          "211:             Map<String, Set<Long>> chSegToLayoutsMap) {",
          "212:         return NDataflowCapabilityChecker.check(this, prunedSegments, digest, chSegToLayoutsMap);",
          "216:     public CapabilityResult isCapable(SQLDigest digest, QueryableSeg queryableSeg) {",
          "218:             return isCapable(digest, queryableSeg.getStreamingSegments(), Maps.newHashMap());",
          "220:             return isCapable(digest, queryableSeg.getBatchSegments(), queryableSeg.getChSegToLayoutsMap());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "272:     @Override",
          "273:     public List<IRealization> getRealizations() {",
          "275:     }",
          "277:     @Override",
          "",
          "[Removed Lines]",
          "274:         return Arrays.asList(this);",
          "",
          "[Added Lines]",
          "273:         return Collections.singletonList(this);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "356:     }",
          "358:     public Segments<NDataSegment> getQueryableSegments() {",
          "368:     }",
          "370:     public Segments<NDataSegment> getSegments(SegmentStatusEnum... statusLst) {",
          "",
          "[Removed Lines]",
          "359:         val loadingRangeManager = NDataLoadingRangeManager.getInstance(config, project);",
          "360:         val loadingRange = loadingRangeManager.getDataLoadingRange(getModel().getRootFactTableName());",
          "361:         if (loadingRange == null) {",
          "362:             return getSegments(SegmentStatusEnum.READY, SegmentStatusEnum.WARNING);",
          "363:         } else {",
          "364:             val querableRange = loadingRangeManager.getQuerableSegmentRange(loadingRange);",
          "365:             return segments.getSegments(SegmentStatusEnum.READY, SegmentStatusEnum.WARNING)",
          "366:                     .getSegmentsByRange(querableRange);",
          "367:         }",
          "",
          "[Added Lines]",
          "358:         return getSegments(SegmentStatusEnum.READY, SegmentStatusEnum.WARNING);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "379:         return segments.calculateToBeSegments(newSegment);",
          "380:     }",
          "386:     public NDataSegment getFirstSegment() {",
          "387:         List<NDataSegment> existing = getSegments();",
          "388:         if (existing.isEmpty()) {",
          "",
          "[Removed Lines]",
          "382:     public Segments<NDataSegment> getBuildingSegments() {",
          "383:         return segments.getBuildingSegments();",
          "384:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/model/NDataflowCapabilityChecker.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: import org.apache.commons.lang3.StringUtils;",
          "27: import org.apache.kylin.common.KylinConfig;",
          "28: import org.apache.kylin.common.QueryContext;",
          "29: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "30: import org.apache.kylin.metadata.cube.cuboid.NLookupCandidate;",
          "31: import org.apache.kylin.metadata.cube.cuboid.NQueryLayoutChooser;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39: import org.slf4j.Logger;",
          "40: import org.slf4j.LoggerFactory;",
          "44: public class NDataflowCapabilityChecker {",
          "45:     private static final Logger logger = LoggerFactory.getLogger(NDataflowCapabilityChecker.class);",
          "",
          "[Removed Lines]",
          "42: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:                 logger.info(\"Matched table {} snapshot in dataflow {} \", digest.factTable, dataflow);",
          "73:             }",
          "74:         } else {",
          "76:             logger.trace(\"Normal dataflow matching\");",
          "77:             boolean partialMatchIndex = QueryContext.current().isPartialMatchIndex();",
          "80:             if (partialMatchIndex && candidateAndInfluence == null) {",
          "81:                 logger.trace(\"Partial dataflow matching\");",
          "84:             }",
          "85:             if (candidateAndInfluence != null) {",
          "86:                 chosenCandidate = candidateAndInfluence;",
          "",
          "[Removed Lines]",
          "78:             NLayoutCandidate candidateAndInfluence = NQueryLayoutChooser",
          "79:                     .selectLayoutCandidate(dataflow, prunedSegments, digest, secondStorageSegmentLayoutMap);",
          "82:                 candidateAndInfluence = NQueryLayoutChooser.selectPartialLayoutCandidate(dataflow, prunedSegments, digest,",
          "83:                         secondStorageSegmentLayoutMap);",
          "",
          "[Added Lines]",
          "77:             NLayoutCandidate candidateAndInfluence = NQueryLayoutChooser.selectLayoutCandidate(dataflow, prunedSegments,",
          "78:                     digest, secondStorageSegmentLayoutMap);",
          "81:                 candidateAndInfluence = NQueryLayoutChooser.selectPartialLayoutCandidate(dataflow, prunedSegments,",
          "82:                         digest, secondStorageSegmentLayoutMap);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90:             }",
          "91:         }",
          "92:         if (chosenCandidate != null) {",
          "94:             if (dataflow.isStreaming()) {",
          "95:                 result.setSelectedStreamingCandidate(chosenCandidate);",
          "96:             } else {",
          "",
          "[Removed Lines]",
          "93:             result.capable = true;",
          "",
          "[Added Lines]",
          "92:             result.setCapable(true);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "98:             }",
          "99:             result.cost = (int) chosenCandidate.getCost();",
          "100:         } else {",
          "102:         }",
          "103:         return result;",
          "104:     }",
          "",
          "[Removed Lines]",
          "101:             result.capable = false;",
          "",
          "[Added Lines]",
          "100:             result.setCapable(false);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "114:             logger.info(\"Exclude NDataflow {} because snapshot of table {} does not exist\", dataflow, digest.factTable);",
          "115:             result.incapableCause = CapabilityResult.IncapableCause",
          "116:                     .create(CapabilityResult.IncapableType.NOT_EXIST_SNAPSHOT);",
          "118:             return null;",
          "119:         }",
          "",
          "[Removed Lines]",
          "117:             result.capable = false;",
          "",
          "[Added Lines]",
          "116:             result.setCapable(false);",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/realization/HybridRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/realization/HybridRealization.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/realization/HybridRealization.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/cube/realization/HybridRealization.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.metadata.cube.realization;",
          "21: import java.util.ArrayList;",
          "23: import java.util.LinkedHashSet;",
          "24: import java.util.List;",
          "25: import java.util.Map;",
          "",
          "[Removed Lines]",
          "22: import java.util.Collections;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: import org.apache.kylin.common.KylinConfig;",
          "29: import org.apache.kylin.common.KylinConfigExt;",
          "30: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "31: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "32: import org.apache.kylin.metadata.model.FunctionDesc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "30: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38: import org.apache.kylin.metadata.model.TblColRef;",
          "39: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "40: import org.apache.kylin.metadata.realization.IRealization;",
          "41: import org.apache.kylin.metadata.realization.SQLDigest;",
          "47: import lombok.Getter;",
          "49: public class HybridRealization implements IRealization {",
          "51:     public static final String REALIZATION_TYPE = \"HYBRID\";",
          "55:     @Getter",
          "56:     private String uuid;",
          "59:     private volatile IRealization batchRealization;",
          "60:     private volatile IRealization streamingRealization;",
          "61:     private String project;",
          "",
          "[Removed Lines]",
          "42: import org.slf4j.Logger;",
          "43: import org.slf4j.LoggerFactory;",
          "45: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "53:     private final static Logger logger = LoggerFactory.getLogger(HybridRealization.class);",
          "57:     private int cost = 50;",
          "58:     private volatile List<IRealization> realizations = new ArrayList<>();",
          "",
          "[Added Lines]",
          "42: import org.apache.kylin.metadata.realization.QueryableSeg;",
          "46: import lombok.extern.slf4j.Slf4j;",
          "48: @Slf4j",
          "52:     public static final String HYBRID_CAPABLE_ERROR_MSG = \"The fusion model can only execute this method separately \"",
          "53:             + \"for the batch model and the stream model it contains.\";",
          "57:     private final List<IRealization> realizations = new ArrayList<>();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:         allDimensions = Lists.newArrayList(dimensions);",
          "105:         allColumns = columns;",
          "106:         uuid = streamingRealization.getUuid();",
          "109:             long dateRangeStart1 = realization1.getDateRangeStart();",
          "110:             long dateRangeStart2 = realization2.getDateRangeStart();",
          "111:             long comp = dateRangeStart1 - dateRangeStart2;",
          "",
          "[Removed Lines]",
          "108:         Collections.sort(realizations, (realization1, realization2) -> {",
          "",
          "[Added Lines]",
          "106:         sortRealizations();",
          "107:     }",
          "109:     private void sortRealizations() {",
          "110:         realizations.sort((realization1, realization2) -> {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "127:     @Override",
          "128:     public CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,",
          "131:     }",
          "135:         CapabilityResult result = new CapabilityResult();",
          "138:         for (IRealization realization : getRealizations()) {",
          "139:             CapabilityResult child;",
          "140:             if (realization.isStreaming()) {",
          "142:                 result.setSelectedStreamingCandidate(child.getSelectedStreamingCandidate());",
          "144:                     result.cost = Math.min(result.cost, (int) child.getSelectedStreamingCandidate().getCost());",
          "145:                 }",
          "146:             } else {",
          "148:                 result.setSelectedCandidate(child.getSelectedCandidate());",
          "150:                     result.cost = Math.min(result.cost, (int) child.getSelectedCandidate().getCost());",
          "151:                 }",
          "152:             }",
          "155:                 result.influences.addAll(child.influences);",
          "156:             } else {",
          "157:                 result.incapableCause = child.incapableCause;",
          "",
          "[Removed Lines]",
          "129:             Map<String, Set<Long>> secondStorageSegmentLayoutMap) {",
          "130:         return new CapabilityResult();",
          "133:     public CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,",
          "134:             List<NDataSegment> prunedStreamingSegments, Map<String, Set<Long>> secondStorageSegmentLayoutMap) {",
          "137:         resolveSegmentsOverlap(prunedStreamingSegments);",
          "141:                 child = realization.isCapable(digest, prunedStreamingSegments, secondStorageSegmentLayoutMap);",
          "143:                 if (child.capable) {",
          "147:                 child = realization.isCapable(digest, prunedSegments, secondStorageSegmentLayoutMap);",
          "149:                 if (child.capable) {",
          "153:             if (child.capable) {",
          "154:                 result.capable = true;",
          "",
          "[Added Lines]",
          "131:             Map<String, Set<Long>> chSegToLayoutsMap) {",
          "132:         throw new IllegalStateException(HYBRID_CAPABLE_ERROR_MSG);",
          "135:     public CapabilityResult isCapable(SQLDigest digest, QueryableSeg queryableSeg) {",
          "138:         resolveSegmentsOverlap(queryableSeg.getStreamingSegments());",
          "142:                 child = realization.isCapable(digest, queryableSeg.getStreamingSegments(), Maps.newHashMap());",
          "144:                 if (child.isCapable()) {",
          "148:                 child = realization.isCapable(digest, queryableSeg.getBatchSegments(),",
          "149:                         queryableSeg.getChSegToLayoutsMap());",
          "151:                 if (child.isCapable()) {",
          "155:             if (child.isCapable()) {",
          "156:                 result.setCapable(true);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "171:         long end = batchRealization.getDateRangeEnd();",
          "172:         if (end != Long.MIN_VALUE) {",
          "173:             String segments = prunedStreamingSegments.toString();",
          "175:             SegmentRange.BasicSegmentRange range = new SegmentRange.KafkaOffsetPartitionedSegmentRange(end,",
          "176:                     Long.MAX_VALUE);",
          "177:             List<NDataSegment> list = ((NDataflow) streamingRealization).getQueryableSegmentsByRange(range);",
          "178:             prunedStreamingSegments.removeIf(seg -> !list.contains(seg));",
          "179:             segments = prunedStreamingSegments.toString();",
          "181:         }",
          "182:     }",
          "",
          "[Removed Lines]",
          "174:             logger.info(\"Before resolve segments overlap between batch and stream of fusion model: {}\", segments);",
          "180:             logger.info(\"After resolve segments overlap between batch and stream of fusion model: {}\", segments);",
          "",
          "[Added Lines]",
          "176:             log.info(\"Before resolve segments overlap between batch and stream of fusion model: {}\", segments);",
          "182:             log.info(\"After resolve segments overlap between batch and stream of fusion model: {}\", segments);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "188:             c = Math.min(realization.getCost(), c);",
          "189:         }",
          "193:     }",
          "195:     public List<IRealization> getRealizations() {",
          "",
          "[Removed Lines]",
          "191:         cost = --c;",
          "192:         return cost;",
          "",
          "[Added Lines]",
          "193:         return --c;",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/model/NDataModel.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: import org.apache.kylin.common.scheduler.SchedulerEventNotifier;",
          "55: import org.apache.kylin.common.util.Pair;",
          "56: import org.apache.kylin.common.util.StringHelper;",
          "57: import org.apache.kylin.metadata.MetadataConstants;",
          "58: import org.apache.kylin.metadata.model.graph.JoinsGraph;",
          "59: import org.apache.kylin.metadata.model.tool.CalciteParser;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: import org.apache.kylin.guava30.shaded.common.annotations.VisibleForTesting;",
          "58: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "59: import org.apache.kylin.guava30.shaded.common.collect.ImmutableBiMap;",
          "60: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "61: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "62: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility;",
          "69: import com.fasterxml.jackson.annotation.JsonInclude;",
          "70: import com.fasterxml.jackson.annotation.JsonProperty;",
          "78: import lombok.AllArgsConstructor;",
          "79: import lombok.Data;",
          "",
          "[Removed Lines]",
          "71: import org.apache.kylin.guava30.shaded.common.annotations.VisibleForTesting;",
          "72: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "73: import org.apache.kylin.guava30.shaded.common.collect.ImmutableBiMap;",
          "74: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "75: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "76: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "651:         return result;",
          "652:     }",
          "656:         TableRef result = tableNameMap.get(table.toUpperCase(Locale.ROOT));",
          "657:         if (result == null) {",
          "658:             int endOfDatabaseName = table.indexOf(\".\");",
          "",
          "[Removed Lines]",
          "655:     public TableRef findTable(String table) throws IllegalArgumentException {",
          "",
          "[Added Lines]",
          "655:     public TableRef findTable(String table) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1458:                 && CollectionUtils.isNotEmpty(multiPartitionDesc.getColumns());",
          "1459:     }",
          "1461:     public List<Integer> getMeasureRelatedCols() {",
          "1462:         Set<Integer> colIds = Sets.newHashSet();",
          "1463:         for (Measure measure : getEffectiveMeasures().values()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1461:     public boolean isEmptyMultiPartitionKeyMapping() {",
          "1462:         return multiPartitionKeyMapping == null",
          "1463:                 || CollectionUtils.isEmpty(multiPartitionKeyMapping.getMultiPartitionCols());",
          "1464:     }",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/IRealization.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:     CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,",
          "",
          "[Removed Lines]",
          "39:             Map<String, Set<Long>> secondStorageSegmentLayoutMap);",
          "41:     CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,",
          "42:             List<NDataSegment> prunedStreamingSegments, Map<String, Set<Long>> secondStorageSegmentLayoutMap);",
          "",
          "[Added Lines]",
          "39:             Map<String, Set<Long>> chSegToLayoutsMap);",
          "41:     CapabilityResult isCapable(SQLDigest digest, QueryableSeg queryableSeg);",
          "",
          "---------------"
        ],
        "src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/QueryableSeg.java||src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/QueryableSeg.java": [
          "File: src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/QueryableSeg.java -> src/core-metadata/src/main/java/org/apache/kylin/metadata/realization/QueryableSeg.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.metadata.realization;",
          "21: import java.util.List;",
          "22: import java.util.Map;",
          "23: import java.util.Set;",
          "24: import java.util.stream.Collectors;",
          "26: import org.apache.commons.compress.utils.Lists;",
          "27: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "29: import lombok.Getter;",
          "30: import lombok.Setter;",
          "32: @Setter",
          "33: @Getter",
          "34: public class QueryableSeg {",
          "36:     private List<NDataSegment> batchSegments;",
          "38:     private List<NDataSegment> streamingSegments;",
          "40:     private Map<String, Set<Long>> chSegToLayoutsMap;",
          "42:     public List<String> getPrunedSegmentIds(boolean isBatch) {",
          "43:         List<NDataSegment> segments = isBatch ? batchSegments : streamingSegments;",
          "44:         if (segments == null) {",
          "45:             segments = Lists.newArrayList();",
          "46:         }",
          "47:         return segments.stream().map(NDataSegment::getId).collect(Collectors.toList());",
          "48:     }",
          "49: }",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextUtil.java||src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextUtil.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextUtil.java -> src/kylin-it/src/test/java/org/apache/kylin/util/OlapContextUtil.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.util;",
          "21: import java.util.Collection;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "25: import org.apache.calcite.rel.RelNode;",
          "26: import org.apache.calcite.sql.parser.SqlParseException;",
          "27: import org.apache.kylin.common.KylinConfig;",
          "28: import org.apache.kylin.metadata.model.NDataModel;",
          "29: import org.apache.kylin.metadata.project.NProjectManager;",
          "30: import org.apache.kylin.metadata.realization.NoRealizationFoundException;",
          "31: import org.apache.kylin.query.engine.QueryExec;",
          "32: import org.apache.kylin.query.relnode.OLAPContext;",
          "33: import org.apache.kylin.query.routing.RealizationChooser;",
          "34: import org.apache.kylin.query.util.QueryContextCutter;",
          "36: import com.clearspring.analytics.util.Lists;",
          "38: public class OlapContextUtil {",
          "40:     public static List<OLAPContext> getOlapContexts(String project, String sql) throws SqlParseException {",
          "41:         return getOlapContexts(project, sql, false);",
          "42:     }",
          "44:     public static List<OLAPContext> getOlapContexts(String project, String sql, boolean reCutBanned)",
          "45:             throws SqlParseException {",
          "46:         QueryExec queryExec = new QueryExec(project, KylinConfig.getInstanceFromEnv());",
          "47:         RelNode rel = queryExec.parseAndOptimize(sql);",
          "48:         try {",
          "49:             QueryContextCutter.selectRealization(rel, reCutBanned);",
          "50:         } catch (NoRealizationFoundException e) {",
          "53:         }",
          "55:         return getOlapContexts();",
          "56:     }",
          "58:     public static List<OLAPContext> getHepRulesOptimizedOlapContexts(String project, String sql, boolean reCutBanned)",
          "59:             throws SqlParseException {",
          "60:         QueryExec queryExec = new QueryExec(project, KylinConfig.getInstanceFromEnv());",
          "61:         RelNode rel = queryExec.parseAndOptimize(sql);",
          "62:         List<OLAPContext> olapContexts = Lists.newArrayList();",
          "63:         try {",
          "64:             List<RelNode> relNodes = queryExec.postOptimize(rel);",
          "65:             relNodes.forEach(relNode -> {",
          "66:                 QueryContextCutter.selectRealization(relNode, reCutBanned);",
          "67:                 olapContexts.addAll(getOlapContexts());",
          "68:             });",
          "69:         } catch (NoRealizationFoundException e) {",
          "72:         }",
          "74:         return olapContexts;",
          "75:     }",
          "77:     private static List<OLAPContext> getOlapContexts() {",
          "78:         List<OLAPContext> result = Lists.newArrayList();",
          "79:         Collection<OLAPContext> contexts = OLAPContext.getThreadLocalContexts();",
          "80:         if (contexts != null) {",
          "81:             result.addAll(contexts);",
          "82:             result.forEach(olap -> {",
          "83:                 if (olap.isFixedModel()) {",
          "84:                     olap.unfixModel();",
          "85:                 }",
          "86:             });",
          "87:         }",
          "88:         return result;",
          "89:     }",
          "91:     public static Map<String, String> matchJoins(NDataModel model, OLAPContext ctx) {",
          "92:         KylinConfig projectConfig = NProjectManager.getProjectConfig(ctx.olapSchema.getProjectName());",
          "93:         boolean isPartialInnerJoin = projectConfig.isQueryMatchPartialInnerJoinModel();",
          "94:         boolean isPartialNonEquiJoin = projectConfig.partialMatchNonEquiJoins();",
          "95:         return RealizationChooser.matchJoins(model, ctx, isPartialInnerJoin, isPartialNonEquiJoin);",
          "96:     }",
          "97: }",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java||src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java -> src/query-common/src/main/java/org/apache/kylin/query/relnode/OLAPContext.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:     protected boolean hasBitmapMeasure = false;",
          "113:     protected boolean isExactlyFastBitmap = false;",
          "114:     boolean afterTopJoin = false;",
          "115:     boolean fixedModel;",
          "116:     List<SQLDigest.OrderEnum> sortOrders;",
          "117:     SQLDigest sqlDigest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115:     @Getter",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java||src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/Candidate.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Comparator;",
          "22: import java.util.HashMap;",
          "23: import java.util.List;",
          "25: import java.util.Map;",
          "26: import java.util.Set;",
          "28: import org.apache.kylin.common.QueryContext;",
          "29: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "30: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "31: import org.apache.kylin.metadata.realization.IRealization;",
          "33: import org.apache.kylin.query.relnode.OLAPContext;",
          "34: import org.apache.kylin.query.relnode.OLAPContextProp;",
          "36: import lombok.Getter;",
          "37: import lombok.Setter;",
          "39: public class Candidate {",
          "41:     public static final CandidateComparator COMPARATOR = new CandidateComparator();",
          "",
          "[Removed Lines]",
          "24: import java.util.Locale;",
          "32: import org.apache.kylin.metadata.realization.SQLDigest;",
          "",
          "[Added Lines]",
          "27: import org.apache.commons.collections.CollectionUtils;",
          "28: import org.apache.commons.lang3.StringUtils;",
          "30: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "32: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "33: import org.apache.kylin.metadata.model.Segments;",
          "36: import org.apache.kylin.metadata.realization.QueryableSeg;",
          "40: import io.kyligence.kap.secondstorage.SecondStorageUtil;",
          "44: @Getter",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     IRealization realization;",
          "48:     OLAPContext ctx;",
          "50:     CapabilityResult capability;",
          "52:     @Setter",
          "53:     OLAPContextProp rewrittenCtx;",
          "55:     @Setter",
          "59:     @Setter",
          "73:         } else {",
          "75:         }",
          "76:     }",
          "83:         this.realization = realization;",
          "84:         this.ctx = ctx;",
          "86:     }",
          "89:     Candidate() {",
          "90:     }",
          "104:     @Override",
          "105:     public String toString() {",
          "106:         return realization.toString();",
          "",
          "[Removed Lines]",
          "47:     @Getter",
          "49:     SQLDigest sqlDigest;",
          "51:     @Getter",
          "54:     @Getter",
          "56:     Map<String, String> aliasMap;",
          "58:     @Getter",
          "60:     private List<NDataSegment> prunedSegments;",
          "62:     @Getter",
          "63:     @Setter",
          "64:     private List<NDataSegment> prunedStreamingSegments;",
          "66:     @Getter",
          "67:     @Setter",
          "68:     private Map<String, Set<Long>> secondStorageSegmentLayoutMap;",
          "70:     public void setPrunedSegments(List<NDataSegment> prunedSegments, boolean isStreaming) {",
          "71:         if (isStreaming) {",
          "72:             this.prunedStreamingSegments = prunedSegments;",
          "74:             this.prunedSegments = prunedSegments;",
          "78:     @Getter",
          "79:     @Setter",
          "80:     private Map<String, List<Long>> prunedPartitions;",
          "82:     public Candidate(IRealization realization, OLAPContext ctx, Map<String, String> aliasMap) {",
          "85:         this.aliasMap = aliasMap;",
          "92:     public IRealization getRealization() {",
          "93:         return realization;",
          "94:     }",
          "96:     public CapabilityResult getCapability() {",
          "97:         return capability;",
          "98:     }",
          "100:     public void setCapability(CapabilityResult capability) {",
          "101:         this.capability = capability;",
          "102:     }",
          "",
          "[Added Lines]",
          "55:     @Setter",
          "60:     Map<String, String> matchedJoinsGraphAliasMap;",
          "63:     private Map<String, List<Long>> prunedPartitions;",
          "65:     private final QueryableSeg queryableSeg = new QueryableSeg();",
          "67:     public void setPrunedSegments(Segments<NDataSegment> prunedSegments, NDataflow df) {",
          "68:         if (df.isStreaming()) {",
          "69:             queryableSeg.setStreamingSegments(prunedSegments);",
          "71:             queryableSeg.setBatchSegments(prunedSegments);",
          "72:             fillSecondStorageLayouts(df);",
          "76:     private void fillSecondStorageLayouts(NDataflow df) {",
          "77:         Map<String, Set<Long>> secondStorageSegmentLayoutMap = Maps.newHashMap();",
          "78:         if (SecondStorageUtil.isModelEnable(df.getProject(), df.getId())) {",
          "79:             for (NDataSegment segment : queryableSeg.getBatchSegments()) {",
          "80:                 Set<Long> chEnableLayoutIds = SecondStorageUtil.listEnableLayoutBySegment(df.getProject(), df.getId(),",
          "81:                         segment.getId());",
          "82:                 if (CollectionUtils.isNotEmpty(chEnableLayoutIds)) {",
          "83:                     secondStorageSegmentLayoutMap.put(segment.getId(), chEnableLayoutIds);",
          "84:                 }",
          "85:             }",
          "86:         }",
          "87:         queryableSeg.setChSegToLayoutsMap(secondStorageSegmentLayoutMap);",
          "88:     }",
          "90:     public Candidate(IRealization realization, OLAPContext ctx, Map<String, String> matchedJoinsGraphAliasMap) {",
          "93:         this.matchedJoinsGraphAliasMap = matchedJoinsGraphAliasMap;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:                 priorities.put(QueryContext.current().getModelPriorities()[i], i);",
          "139:             }",
          "145:             if (comp != 0) {",
          "146:                 return comp;",
          "147:             }",
          "",
          "[Removed Lines]",
          "141:             int comp = priorities.getOrDefault(real1.getModel().getAlias().toUpperCase(Locale.ROOT),",
          "142:                     Integer.MAX_VALUE)",
          "143:                     - priorities.getOrDefault(real2.getModel().getAlias().toUpperCase(Locale.ROOT),",
          "144:                     Integer.MAX_VALUE);",
          "",
          "[Added Lines]",
          "137:             int comp = priorities.getOrDefault(StringUtils.upperCase(real1.getModel().getAlias()), Integer.MAX_VALUE)",
          "138:                     - priorities.getOrDefault(StringUtils.upperCase(real2.getModel().getAlias()), Integer.MAX_VALUE);",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java||src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/QueryRouter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.List;",
          "29: import org.apache.kylin.query.routing.rules.PartitionPruningRule;",
          "32: import org.apache.kylin.query.routing.rules.RemoveUncapableRealizationsRule;",
          "33: import org.apache.kylin.query.routing.rules.SegmentPruningRule;",
          "43: public class QueryRouter {",
          "47:     private QueryRouter() {",
          "48:     }",
          "50:     private static final List<RoutingRule> LAYOUT_CHOOSING_RULES = Lists.newLinkedList();",
          "52:     static {",
          "54:         LAYOUT_CHOOSING_RULES.add(new SegmentPruningRule());",
          "55:         LAYOUT_CHOOSING_RULES.add(new PartitionPruningRule());",
          "56:         LAYOUT_CHOOSING_RULES.add(new RemoveUncapableRealizationsRule());",
          "58:     }",
          "61:         for (RoutingRule rule : LAYOUT_CHOOSING_RULES) {",
          "163:         }",
          "164:     }",
          "165: }",
          "",
          "[Removed Lines]",
          "22: import java.util.Map;",
          "24: import org.apache.commons.lang3.StringUtils;",
          "25: import org.apache.kylin.metadata.model.FunctionDesc;",
          "26: import org.apache.kylin.metadata.realization.IRealization;",
          "27: import org.apache.kylin.query.relnode.OLAPContext;",
          "28: import org.apache.kylin.query.relnode.OLAPContextProp;",
          "30: import org.apache.kylin.query.routing.rules.RealizationSortRule;",
          "31: import org.apache.kylin.query.routing.rules.RemoveBlackoutRealizationsRule;",
          "34: import org.slf4j.Logger;",
          "35: import org.slf4j.LoggerFactory;",
          "37: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "38: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "45:     private static final Logger logger = LoggerFactory.getLogger(QueryRouter.class);",
          "53:         LAYOUT_CHOOSING_RULES.add(new RemoveBlackoutRealizationsRule());",
          "57:         LAYOUT_CHOOSING_RULES.add(new RealizationSortRule());",
          "60:     public static void applyRules(List<Candidate> candidates) {",
          "62:             String before = getPrintableText(candidates);",
          "63:             rule.apply(candidates);",
          "64:             String after = getPrintableText(candidates);",
          "65:             if (!before.equals(after)) {",
          "66:                 logger.info(\"Applying rule: {}, realizations before:{}, realizations after: {}\", rule, before, after);",
          "67:             }",
          "68:         }",
          "69:     }",
          "71:     public static String getPrintableText(List<Candidate> candidates) {",
          "72:         StringBuilder sb = new StringBuilder();",
          "73:         sb.append(\"[\");",
          "74:         for (Candidate candidate : candidates) {",
          "75:             IRealization r = candidate.realization;",
          "76:             sb.append(r.getCanonicalName());",
          "77:             sb.append(\",\");",
          "78:         }",
          "79:         if (sb.charAt(sb.length() - 1) != '[')",
          "80:             sb.deleteCharAt(sb.length() - 1);",
          "81:         sb.append(\"]\");",
          "82:         return sb.toString();",
          "83:     }",
          "85:     public static void removeRule(RoutingRule rule) {",
          "86:         LAYOUT_CHOOSING_RULES.removeIf(r -> r.getClass() == rule.getClass());",
          "87:     }",
          "89:     public static Candidate selectRealization(OLAPContext olapContext, IRealization realization,",
          "90:             Map<String, String> aliasMap) {",
          "91:         if (!realization.isReady()) {",
          "92:             logger.warn(\"Realization {} is not ready\", realization);",
          "93:             return null;",
          "94:         }",
          "96:         List<Candidate> candidates = Lists.newArrayListWithCapacity(1);",
          "97:         candidates.add(new Candidate(realization, olapContext, aliasMap));",
          "98:         logger.info(\"Find candidates by table {} and project={} : {}\", olapContext.firstTableScan.getTableName(),",
          "99:                 olapContext.olapSchema.getProjectName(), StringUtils.join(candidates, \",\"));",
          "100:         List<Candidate> originCandidates = Lists.newArrayList(candidates);",
          "103:         QueryRouter.applyRules(candidates);",
          "105:         collectIncapableReason(olapContext, originCandidates);",
          "106:         if (candidates.isEmpty()) {",
          "107:             return null;",
          "108:         }",
          "110:         Candidate chosen = candidates.get(0);",
          "111:         chosen.setRewrittenCtx(preserveRewriteProps(olapContext));",
          "112:         logger.info(\"The realizations remaining: {}, and the final chosen one for current olap context {} is {}\",",
          "113:                 QueryRouter.getPrintableText(candidates), olapContext.id, chosen.realization.getCanonicalName());",
          "114:         return chosen;",
          "115:     }",
          "117:     static OLAPContextProp preserveRewriteProps(OLAPContext rewrittenOLAContext) {",
          "118:         return preservePropsBeforeRewrite(rewrittenOLAContext);",
          "119:     }",
          "121:     static OLAPContextProp preservePropsBeforeRewrite(OLAPContext oriOLAPContext) {",
          "122:         OLAPContextProp preserved = new OLAPContextProp(-1);",
          "123:         preserved.allColumns = Sets.newHashSet(oriOLAPContext.allColumns);",
          "124:         preserved.setSortColumns(Lists.newArrayList(oriOLAPContext.getSortColumns()));",
          "125:         preserved.setInnerGroupByColumns(Sets.newHashSet(oriOLAPContext.getInnerGroupByColumns()));",
          "126:         preserved.setGroupByColumns(Sets.newLinkedHashSet(oriOLAPContext.getGroupByColumns()));",
          "127:         preserved.setInnerFilterColumns(Sets.newHashSet(oriOLAPContext.getInnerFilterColumns()));",
          "128:         for (FunctionDesc agg : oriOLAPContext.aggregations) {",
          "129:             preserved.getReservedMap().put(agg,",
          "130:                     FunctionDesc.newInstance(agg.getExpression(), agg.getParameters(), agg.getReturnType()));",
          "131:         }",
          "133:         return preserved;",
          "134:     }",
          "136:     static void restoreOLAPContextProps(OLAPContext oriOLAPContext, OLAPContextProp preservedOLAPContext) {",
          "137:         oriOLAPContext.allColumns = preservedOLAPContext.allColumns;",
          "138:         oriOLAPContext.setSortColumns(preservedOLAPContext.getSortColumns());",
          "139:         oriOLAPContext.aggregations.forEach(agg -> {",
          "140:             if (preservedOLAPContext.getReservedMap().containsKey(agg)) {",
          "141:                 final FunctionDesc functionDesc = preservedOLAPContext.getReservedMap().get(agg);",
          "142:                 agg.setExpression(functionDesc.getExpression());",
          "143:                 agg.setParameters(functionDesc.getParameters());",
          "144:                 agg.setReturnType(functionDesc.getReturnType());",
          "145:             }",
          "146:         });",
          "147:         oriOLAPContext.setGroupByColumns(preservedOLAPContext.getGroupByColumns());",
          "148:         oriOLAPContext.setInnerGroupByColumns(preservedOLAPContext.getInnerGroupByColumns());",
          "149:         oriOLAPContext.setInnerFilterColumns(preservedOLAPContext.getInnerFilterColumns());",
          "150:         oriOLAPContext.resetSQLDigest();",
          "151:     }",
          "153:     private static void collectIncapableReason(OLAPContext olapContext, List<Candidate> candidates) {",
          "154:         for (Candidate candidate : candidates) {",
          "155:             if (!candidate.getCapability().capable) {",
          "156:                 RealizationCheck.IncapableReason reason = RealizationCheck.IncapableReason",
          "157:                         .create(candidate.getCapability().incapableCause);",
          "158:                 if (reason != null)",
          "159:                     olapContext.realizationCheck.addIncapableCube(candidate.getRealization(), reason);",
          "160:             } else {",
          "161:                 olapContext.realizationCheck.addCapableCube(candidate.getRealization());",
          "162:             }",
          "",
          "[Added Lines]",
          "23: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "44:     public static void applyRules(Candidate candidate) {",
          "46:             rule.apply(candidate);",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationCheck.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationCheck.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationCheck.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationCheck.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "33: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "34: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "36: public class RealizationCheck {",
          "40:     public Map<NDataModel, List<IncapableReason>> getModelIncapableReasons() {",
          "41:         return modelIncapableReasons;",
          "42:     }",
          "64:     public void addModelIncapableReason(NDataModel modelDesc, IncapableReason reason) {",
          "65:         if (!modelIncapableReasons.containsKey(modelDesc)) {",
          "68:         } else {",
          "69:             List<IncapableReason> incapableReasons = modelIncapableReasons.get(modelDesc);",
          "70:             if (!incapableReasons.contains(reason))",
          "",
          "[Removed Lines]",
          "21: import java.util.Collection;",
          "25: import org.apache.commons.lang3.StringUtils;",
          "26: import org.apache.kylin.metadata.model.FunctionDesc;",
          "27: import org.apache.kylin.metadata.model.TblColRef;",
          "28: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "29: import org.apache.kylin.metadata.realization.IRealization;",
          "30: import org.apache.kylin.query.relnode.OLAPTableScan;",
          "31: import org.apache.kylin.metadata.model.NDataModel;",
          "37:     private Map<NDataModel, List<IncapableReason>> modelIncapableReasons = Maps.newHashMap();",
          "38:     private Map<NDataModel, Map<String, String>> capableModels = Maps.newHashMap();",
          "44:     public void addCapableCube(IRealization realization) {",
          "46:     }",
          "48:     public void addIncapableCube(IRealization realization) {",
          "50:     }",
          "52:     public void addIncapableCube(IRealization realization, IncapableReason incapableReason) {",
          "54:     }",
          "56:     public void addCubeIncapableReason(IRealization realization, IncapableReason incapableReason) {",
          "58:     }",
          "60:     public Map<NDataModel, Map<String, String>> getCapableModels() {",
          "61:         return capableModels;",
          "62:     }",
          "66:             List<IncapableReason> reasons = Lists.newArrayList(reason);",
          "67:             modelIncapableReasons.put(modelDesc, reasons);",
          "",
          "[Added Lines]",
          "26: import org.apache.kylin.metadata.model.NDataModel;",
          "29:     private final Map<NDataModel, List<IncapableReason>> modelIncapableReasons = Maps.newHashMap();",
          "30:     private final Map<NDataModel, Map<String, String>> capableModels = Maps.newHashMap();",
          "38:             modelIncapableReasons.put(modelDesc, Lists.newArrayList(reason));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:             this.capableModels.put(modelDesc, aliasMap);",
          "78:     }",
          "112:         MODEL_UNMATCHED_JOIN, //",
          "352:     }",
          "353: }",
          "",
          "[Removed Lines]",
          "80:     public void addModelIncapableReason(NDataModel modelDesc, List<IncapableReason> reasons) {",
          "81:         modelIncapableReasons.put(modelDesc, reasons);",
          "82:     }",
          "84:     public boolean isModelCapable() {",
          "85:         return (!capableModels.isEmpty()) || modelIncapableReasons.isEmpty();",
          "86:     }",
          "88:     public boolean isCubeCapable() {",
          "89:         return true;",
          "90:     }",
          "92:     public boolean isCapable() {",
          "93:         return isModelCapable() && isCubeCapable();",
          "94:     }",
          "96:     public enum IncapableType {",
          "98:         CUBE_NOT_READY, //cube not ready",
          "99:         CUBE_NOT_CONTAIN_TABLE, // cube not contain table",
          "100:         CUBE_NOT_CONTAIN_ALL_COLUMN, //",
          "101:         CUBE_NOT_CONTAIN_ALL_DIMENSION, //",
          "102:         CUBE_NOT_CONTAIN_ALL_MEASURE, //",
          "103:         CUBE_BLACK_OUT_REALIZATION, //",
          "104:         CUBE_UN_SUPPORT_MASSIN, //",
          "105:         CUBE_UN_SUPPORT_RAWQUERY, //",
          "106:         CUBE_UNMATCHED_DIMENSION, //",
          "107:         CUBE_LIMIT_PRECEDE_AGGR, //",
          "108:         CUBE_UNMATCHED_AGGREGATION, //",
          "109:         CUBE_OTHER_CUBE_INCAPABLE, //",
          "110:         TABLE_INDEX_NOT_CONTAIN_ALL_COLUMN, //",
          "113:         MODEL_JOIN_TYPE_UNMATCHED, //",
          "114:         MODEL_JOIN_CONDITION_UNMATCHED, //",
          "115:         MODEL_JOIN_NOT_FOUND, //",
          "116:         MODEL_BAD_JOIN_SEQUENCE, //",
          "117:         MODEL_FACT_TABLE_NOT_FOUND, //",
          "118:         MODEL_OTHER_MODEL_INCAPABLE, //",
          "119:         FACT_TABLE_NOT_CONSISTENT_IN_MODEL_AND_QUERY, MODEL_NOT_CONTAIN_ALL_COLUMN",
          "120:     }",
          "122:     public static class IncapableReason {",
          "123:         private IncapableType incapableType;",
          "125:         private Collection<TblColRef> notFoundColumns;",
          "126:         private Collection<TblColRef> notFoundDimensions;",
          "127:         private Collection<FunctionDesc> notFoundMeasures;",
          "128:         private Collection<TblColRef> unmatchedDimensions;",
          "129:         private Collection<FunctionDesc> unmatchedAggregations;",
          "130:         private Collection<OLAPTableScan> notFoundTables;",
          "132:         public static IncapableReason create(IncapableType incapableType) {",
          "133:             IncapableReason incapableReason = new IncapableReason();",
          "134:             incapableReason.setIncapableType(incapableType);",
          "135:             return incapableReason;",
          "136:         }",
          "138:         public static IncapableReason create(CapabilityResult.IncapableCause incapableCause) {",
          "139:             if (incapableCause == null) {",
          "140:                 return null;",
          "141:             }",
          "142:             IncapableReason incapableReason = new IncapableReason();",
          "143:             IncapableType incapableType = null;",
          "144:             switch (incapableCause.getIncapableType()) {",
          "145:             case UNSUPPORT_MASSIN:",
          "146:                 incapableType = IncapableType.CUBE_UN_SUPPORT_MASSIN;",
          "147:                 break;",
          "148:             case UNMATCHED_DIMENSION:",
          "149:                 incapableType = IncapableType.CUBE_UNMATCHED_DIMENSION;",
          "150:                 break;",
          "151:             case LIMIT_PRECEDE_AGGR:",
          "152:                 incapableType = IncapableType.CUBE_LIMIT_PRECEDE_AGGR;",
          "153:                 break;",
          "154:             case UNMATCHED_AGGREGATION:",
          "155:                 incapableType = IncapableType.CUBE_UNMATCHED_AGGREGATION;",
          "156:                 break;",
          "157:             case UNSUPPORT_RAWQUERY:",
          "158:                 incapableType = IncapableType.CUBE_UN_SUPPORT_RAWQUERY;",
          "159:                 break;",
          "160:             case II_UNMATCHED_FACT_TABLE:",
          "161:                 incapableType = IncapableType.MODEL_FACT_TABLE_NOT_FOUND;",
          "162:                 break;",
          "163:             case TABLE_INDEX_MISSING_COLS:",
          "164:                 incapableType = IncapableType.TABLE_INDEX_NOT_CONTAIN_ALL_COLUMN;",
          "165:                 break;",
          "166:             default:",
          "167:                 break;",
          "168:             }",
          "169:             incapableReason.setIncapableType(incapableType);",
          "170:             incapableReason.setUnmatchedDimensions(incapableCause.getUnmatchedDimensions());",
          "171:             incapableReason.setUnmatchedAggregations(incapableCause.getUnmatchedAggregations());",
          "172:             return incapableReason;",
          "173:         }",
          "175:         public static IncapableReason notContainAllColumn(Collection<TblColRef> notFoundColumns) {",
          "176:             IncapableReason incapableReason = new IncapableReason();",
          "177:             incapableReason.setIncapableType(IncapableType.MODEL_NOT_CONTAIN_ALL_COLUMN);",
          "178:             incapableReason.setNotFoundColumns(notFoundColumns);",
          "179:             return incapableReason;",
          "180:         }",
          "182:         public static IncapableReason notFoundTables(Collection<OLAPTableScan> notFoundTables) {",
          "183:             IncapableReason incapableReason = new IncapableReason();",
          "184:             incapableReason.setIncapableType(IncapableType.CUBE_NOT_CONTAIN_TABLE);",
          "185:             incapableReason.setNotFoundTables(notFoundTables);",
          "186:             return incapableReason;",
          "187:         }",
          "189:         public Collection<TblColRef> getNotFoundDimensions() {",
          "190:             return notFoundDimensions;",
          "191:         }",
          "193:         public void setNotFoundDimensions(Collection<TblColRef> notFoundDimensions) {",
          "194:             this.notFoundDimensions = notFoundDimensions;",
          "195:         }",
          "197:         public Collection<FunctionDesc> getNotFoundMeasures() {",
          "198:             return notFoundMeasures;",
          "199:         }",
          "201:         public void setNotFoundMeasures(Collection<FunctionDesc> notFoundMeasures) {",
          "202:             this.notFoundMeasures = notFoundMeasures;",
          "203:         }",
          "205:         public IncapableType getIncapableType() {",
          "206:             return incapableType;",
          "207:         }",
          "209:         public void setIncapableType(IncapableType incapableType) {",
          "210:             this.incapableType = incapableType;",
          "211:         }",
          "213:         public Collection<TblColRef> getUnmatchedDimensions() {",
          "214:             return unmatchedDimensions;",
          "215:         }",
          "217:         public void setUnmatchedDimensions(Collection<TblColRef> unmatchedDimensions) {",
          "218:             this.unmatchedDimensions = unmatchedDimensions;",
          "219:         }",
          "221:         public Collection<TblColRef> getNotFoundColumns() {",
          "222:             return notFoundColumns;",
          "223:         }",
          "225:         public void setNotFoundColumns(Collection<TblColRef> notFoundColumns) {",
          "226:             this.notFoundColumns = notFoundColumns;",
          "227:         }",
          "229:         public Collection<FunctionDesc> getUnmatchedAggregations() {",
          "230:             return unmatchedAggregations;",
          "231:         }",
          "233:         public void setUnmatchedAggregations(Collection<FunctionDesc> unmatchedAggregations) {",
          "234:             this.unmatchedAggregations = unmatchedAggregations;",
          "235:         }",
          "237:         public Collection<OLAPTableScan> getNotFoundTables() {",
          "238:             return notFoundTables;",
          "239:         }",
          "241:         public void setNotFoundTables(Collection<OLAPTableScan> notFoundTables) {",
          "242:             this.notFoundTables = notFoundTables;",
          "243:         }",
          "245:         @Override",
          "246:         public boolean equals(Object o) {",
          "247:             if (this == o)",
          "248:                 return true;",
          "249:             if (o == null || getClass() != o.getClass())",
          "250:                 return false;",
          "252:             IncapableReason that = (IncapableReason) o;",
          "254:             if (incapableType != that.incapableType)",
          "255:                 return false;",
          "256:             if (notFoundColumns != null ? !notFoundColumns.equals(that.notFoundColumns) : that.notFoundColumns != null)",
          "257:                 return false;",
          "258:             if (notFoundDimensions != null ? !notFoundDimensions.equals(that.notFoundDimensions)",
          "259:                     : that.notFoundDimensions != null)",
          "260:                 return false;",
          "261:             if (notFoundMeasures != null ? !notFoundMeasures.equals(that.notFoundMeasures)",
          "262:                     : that.notFoundMeasures != null)",
          "263:                 return false;",
          "264:             if (unmatchedDimensions != null ? !unmatchedDimensions.equals(that.unmatchedDimensions)",
          "265:                     : that.unmatchedDimensions != null)",
          "266:                 return false;",
          "267:             if (unmatchedAggregations != null ? !unmatchedAggregations.equals(that.unmatchedAggregations)",
          "268:                     : that.unmatchedAggregations != null)",
          "269:                 return false;",
          "270:             return notFoundTables != null ? notFoundTables.equals(that.notFoundTables) : that.notFoundTables == null;",
          "271:         }",
          "273:         @Override",
          "274:         public int hashCode() {",
          "275:             int result = incapableType != null ? incapableType.hashCode() : 0;",
          "276:             result = 31 * result + (notFoundColumns != null ? notFoundColumns.hashCode() : 0);",
          "277:             result = 31 * result + (notFoundDimensions != null ? notFoundDimensions.hashCode() : 0);",
          "278:             result = 31 * result + (notFoundMeasures != null ? notFoundMeasures.hashCode() : 0);",
          "279:             result = 31 * result + (unmatchedDimensions != null ? unmatchedDimensions.hashCode() : 0);",
          "280:             result = 31 * result + (unmatchedAggregations != null ? unmatchedAggregations.hashCode() : 0);",
          "281:             result = 31 * result + (notFoundTables != null ? notFoundTables.hashCode() : 0);",
          "282:             return result;",
          "283:         }",
          "285:         @Override",
          "286:         public String toString() {",
          "287:             StringBuilder sb = new StringBuilder(incapableType.toString());",
          "289:             switch (incapableType) {",
          "290:             case CUBE_NOT_CONTAIN_TABLE:",
          "291:                 if (notFoundTables != null) {",
          "292:                     sb.append('[');",
          "293:                     sb.append(StringUtils.join(notFoundTables.toArray(), \", \"));",
          "294:                     sb.append(']');",
          "295:                 }",
          "296:                 break;",
          "297:             case CUBE_NOT_CONTAIN_ALL_COLUMN:",
          "298:                 if (notFoundColumns != null) {",
          "299:                     sb.append('[');",
          "300:                     sb.append(StringUtils.join(notFoundColumns.toArray(), \", \"));",
          "301:                     sb.append(']');",
          "302:                 }",
          "303:                 break;",
          "304:             case CUBE_NOT_CONTAIN_ALL_DIMENSION:",
          "305:                 if (notFoundDimensions != null) {",
          "306:                     sb.append('[');",
          "307:                     sb.append(StringUtils.join(notFoundDimensions.toArray(), \", \"));",
          "308:                     sb.append(']');",
          "309:                 }",
          "310:                 break;",
          "311:             case CUBE_NOT_CONTAIN_ALL_MEASURE:",
          "312:                 if (notFoundMeasures != null) {",
          "313:                     sb.append('[');",
          "314:                     sb.append(StringUtils.join(notFoundMeasures.toArray(), \", \"));",
          "315:                     sb.append(']');",
          "316:                 }",
          "317:                 break;",
          "318:             case CUBE_UNMATCHED_DIMENSION:",
          "319:                 if (unmatchedDimensions != null) {",
          "320:                     sb.append('[');",
          "321:                     sb.append(StringUtils.join(unmatchedDimensions.toArray(), \", \"));",
          "322:                     sb.append(']');",
          "323:                 }",
          "324:                 break;",
          "325:             case CUBE_UNMATCHED_AGGREGATION:",
          "326:                 if (unmatchedAggregations != null) {",
          "327:                     sb.append('[');",
          "328:                     sb.append(StringUtils.join(unmatchedAggregations.toArray(), \", \"));",
          "329:                     sb.append(']');",
          "330:                 }",
          "331:                 break;",
          "332:             case CUBE_NOT_READY:",
          "333:             case CUBE_BLACK_OUT_REALIZATION:",
          "334:             case CUBE_UN_SUPPORT_MASSIN:",
          "335:             case CUBE_UN_SUPPORT_RAWQUERY:",
          "336:             case CUBE_LIMIT_PRECEDE_AGGR:",
          "337:             case CUBE_OTHER_CUBE_INCAPABLE:",
          "338:                 break;",
          "339:             case MODEL_UNMATCHED_JOIN:",
          "340:             case MODEL_JOIN_TYPE_UNMATCHED:",
          "341:             case MODEL_JOIN_CONDITION_UNMATCHED:",
          "342:             case MODEL_JOIN_NOT_FOUND:",
          "343:             case MODEL_BAD_JOIN_SEQUENCE:",
          "344:             case MODEL_FACT_TABLE_NOT_FOUND:",
          "345:             case MODEL_OTHER_MODEL_INCAPABLE:",
          "346:                 break;",
          "347:             default:",
          "348:                 break;",
          "349:             }",
          "350:             return sb.toString();",
          "351:         }",
          "",
          "[Added Lines]",
          "51:     public enum IncapableReason {",
          "53:         MODEL_BAD_JOIN_SEQUENCE",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationChooser.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: package org.apache.kylin.query.routing;",
          "42: import java.util.Collection;",
          "43: import java.util.HashMap;",
          "44: import java.util.HashSet;",
          "",
          "[Removed Lines]",
          "39: import static org.apache.kylin.common.exception.ServerErrorCode.STREAMING_MODEL_NOT_FOUND;",
          "41: import java.util.ArrayList;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: import java.util.concurrent.SynchronousQueue;",
          "56: import java.util.concurrent.ThreadPoolExecutor;",
          "57: import java.util.concurrent.TimeUnit;",
          "60: import org.apache.commons.collections.CollectionUtils;",
          "61: import org.apache.commons.collections.MapUtils;",
          "",
          "[Removed Lines]",
          "58: import java.util.stream.Collectors;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: import org.apache.kylin.common.KylinConfig;",
          "64: import org.apache.kylin.common.QueryContext;",
          "65: import org.apache.kylin.common.exception.KylinTimeoutException;",
          "66: import org.apache.kylin.common.logging.SetLogCategory;",
          "67: import org.apache.kylin.common.msg.MsgPicker;",
          "68: import org.apache.kylin.common.util.NamedThreadFactory;",
          "69: import org.apache.kylin.common.util.SetThreadName;",
          "70: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "71: import org.apache.kylin.metadata.cube.cuboid.NLookupCandidate;",
          "72: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: import org.apache.kylin.common.exception.ServerErrorCode;",
          "67: import org.apache.kylin.guava30.shaded.common.annotations.VisibleForTesting;",
          "68: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "69: import org.apache.kylin.guava30.shaded.common.collect.HashMultimap;",
          "70: import org.apache.kylin.guava30.shaded.common.collect.ImmutableMap;",
          "71: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "72: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "73: import org.apache.kylin.guava30.shaded.common.collect.Multimap;",
          "74: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90: import org.apache.kylin.metadata.model.graph.JoinsGraph;",
          "91: import org.apache.kylin.metadata.project.NProjectLoader;",
          "92: import org.apache.kylin.metadata.project.NProjectManager;",
          "94: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "95: import org.apache.kylin.metadata.realization.IRealization;",
          "96: import org.apache.kylin.metadata.realization.NoRealizationFoundException;",
          "",
          "[Removed Lines]",
          "93: import org.apache.kylin.metadata.project.ProjectInstance;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106: import org.slf4j.LoggerFactory;",
          "108: import com.alibaba.ttl.TtlRunnable;",
          "118: import lombok.val;",
          "120: public class RealizationChooser {",
          "122:     private static final Logger logger = LoggerFactory.getLogger(RealizationChooser.class);",
          "124:             KylinConfig.getInstanceFromEnv().getQueryRealizationChooserThreadCoreNum(),",
          "125:             KylinConfig.getInstanceFromEnv().getQueryRealizationChooserThreadMaxNum(), 60L, TimeUnit.SECONDS,",
          "126:             new SynchronousQueue<>(), new NamedThreadFactory(\"RealChooser\"), new ThreadPoolExecutor.CallerRunsPolicy());",
          "",
          "[Removed Lines]",
          "109: import org.apache.kylin.guava30.shaded.common.annotations.VisibleForTesting;",
          "110: import org.apache.kylin.guava30.shaded.common.base.Preconditions;",
          "111: import org.apache.kylin.guava30.shaded.common.collect.HashMultimap;",
          "112: import org.apache.kylin.guava30.shaded.common.collect.ImmutableMap;",
          "113: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "114: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "115: import org.apache.kylin.guava30.shaded.common.collect.Multimap;",
          "116: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "123:     private static ExecutorService selectCandidateService = new ThreadPoolExecutor(",
          "",
          "[Added Lines]",
          "119:     private static final ExecutorService selectCandidateService = new ThreadPoolExecutor(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "135:             if (ctx.isConstantQueryWithAggregations()) {",
          "136:                 continue;",
          "137:             }",
          "139:             attemptSelectCandidate(ctx);",
          "140:             Preconditions.checkNotNull(ctx.realization);",
          "141:         }",
          "142:     }",
          "144:     public static void multiThreadSelectLayoutCandidate(List<OLAPContext> contexts) {",
          "146:         try {",
          "151:             CountDownLatch latch = new CountDownLatch(contexts.size());",
          "152:             for (OLAPContext ctx : contexts) {",
          "178:                 futureList.add(future);",
          "179:             }",
          "180:             latch.await();",
          "",
          "[Removed Lines]",
          "138:             ctx.realizationCheck = new RealizationCheck();",
          "145:         ArrayList<Future<?>> futureList = Lists.newArrayList();",
          "147:             KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();",
          "148:             String project = QueryContext.current().getProject();",
          "149:             String queryId = QueryContext.current().getQueryId();",
          "153:                 Future<?> future = selectCandidateService.submit(Objects.requireNonNull(TtlRunnable.get(() -> {",
          "154:                     try (KylinConfig.SetAndUnsetThreadLocalConfig autoUnset = KylinConfig",
          "155:                             .setAndUnsetThreadLocalConfig(kylinConfig);",
          "156:                             SetThreadName ignored = new SetThreadName(Thread.currentThread().getName() + \" QueryId %s\",",
          "157:                                     queryId);",
          "158:                             SetLogCategory logCategory = new SetLogCategory(\"query\")) {",
          "159:                         if (project != null) {",
          "160:                             NTableMetadataManager.getInstance(kylinConfig, project);",
          "161:                             NDataModelManager.getInstance(kylinConfig, project);",
          "162:                             NDataflowManager.getInstance(kylinConfig, project);",
          "163:                             NIndexPlanManager.getInstance(kylinConfig, project);",
          "164:                             NProjectLoader.updateCache(project);",
          "165:                         }",
          "166:                         if (!ctx.isConstantQueryWithAggregations()) {",
          "167:                             ctx.realizationCheck = new RealizationCheck();",
          "168:                             attemptSelectCandidate(ctx);",
          "169:                             Preconditions.checkNotNull(ctx.realization);",
          "170:                         }",
          "171:                     } catch (KylinTimeoutException e) {",
          "172:                         logger.error(\"realization chooser thread task interrupted due to query [{}] timeout\", queryId);",
          "173:                     } finally {",
          "174:                         NProjectLoader.removeCache();",
          "175:                         latch.countDown();",
          "176:                     }",
          "177:                 })));",
          "",
          "[Added Lines]",
          "140:         List<Future<?>> futureList = Lists.newArrayList();",
          "145:                 TtlRunnable r = Objects.requireNonNull(TtlRunnable.get(() -> selectCandidate0(latch, ctx)));",
          "146:                 Future<?> future = selectCandidateService.submit(r);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "201:         }",
          "202:     }",
          "204:     @VisibleForTesting",
          "205:     public static void attemptSelectCandidate(OLAPContext context) {",
          "211:         Multimap<NDataModel, IRealization> modelMap = makeOrderedModelMap(context);",
          "222:         logger.info(\"Context join graph: {}\", context.getJoinsGraph());",
          "230:             }",
          "233:         }",
          "248:         }",
          "251:         sortCandidate(context, candidates);",
          "252:         logger.trace(\"Cost Sorted Realizations {}\", candidates);",
          "275:         }",
          "277:         checkNoRealizationWithStreaming(context);",
          "278:         RelAggPushDownUtil.registerUnmatchedJoinDigest(context.getTopNode());",
          "280:     }",
          "282:     private static void sortCandidate(OLAPContext context, List<Candidate> candidates) {",
          "286:             candidates.sort(Candidate.COMPARATOR_TABLE_INDEX);",
          "287:         } else {",
          "288:             candidates.sort(Candidate.COMPARATOR);",
          "",
          "[Removed Lines]",
          "206:         if (context.getModelAlias() != null) {",
          "207:             logger.info(\"context is bound to model {}\", context.getModelAlias());",
          "208:         }",
          "209:         context.setHasSelected(true);",
          "212:         if (modelMap.size() == 0) {",
          "213:             checkNoRealizationWithStreaming(context);",
          "214:             RelAggPushDownUtil.registerUnmatchedJoinDigest(context.getTopNode());",
          "215:             throw new NoRealizationFoundException(\"No model found for \" + toErrorMsg(context));",
          "216:         }",
          "217:         logger.trace(\"Models matched fact table {}: {}\", context.firstTableScan.getTableName(), modelMap.values());",
          "218:         List<Candidate> candidates = Lists.newArrayList();",
          "219:         Map<NDataModel, Map<String, String>> model2AliasMap = Maps.newHashMap();",
          "223:         for (NDataModel model : modelMap.keySet()) {",
          "224:             OLAPContextProp preservedOLAPContext = QueryRouter.preservePropsBeforeRewrite(context);",
          "225:             List<Candidate> candidate = selectRealizationFromModel(model, context, false, false, modelMap,",
          "226:                     model2AliasMap);",
          "227:             if (candidate != null && !candidate.isEmpty()) {",
          "228:                 candidates.addAll(candidate);",
          "229:                 logger.info(\"context & model({}, {}) match info: {}\", model.getUuid(), model.getAlias(), true);",
          "232:             QueryRouter.restoreOLAPContextProps(context, preservedOLAPContext);",
          "236:         if (CollectionUtils.isEmpty(candidates) && (partialMatchInnerJoin() || partialMatchNonEquiJoin())) {",
          "237:             for (NDataModel model : modelMap.keySet()) {",
          "238:                 OLAPContextProp preservedOLAPContext = QueryRouter.preservePropsBeforeRewrite(context);",
          "239:                 List<Candidate> candidate = selectRealizationFromModel(model, context, partialMatchInnerJoin(),",
          "240:                         partialMatchNonEquiJoin(), modelMap, model2AliasMap);",
          "241:                 if (candidate != null) {",
          "242:                     candidates.addAll(candidate);",
          "243:                 }",
          "245:                 QueryRouter.restoreOLAPContextProps(context, preservedOLAPContext);",
          "246:             }",
          "247:             context.storageContext.setPartialMatchModel(CollectionUtils.isNotEmpty(candidates));",
          "253:         if (!candidates.isEmpty()) {",
          "254:             Candidate selectedCandidate = candidates.get(0);",
          "255:             QueryRouter.restoreOLAPContextProps(context, selectedCandidate.getRewrittenCtx());",
          "256:             context.fixModel(selectedCandidate.getRealization().getModel(),",
          "257:                     model2AliasMap.get(selectedCandidate.getRealization().getModel()));",
          "258:             adjustForCapabilityInfluence(selectedCandidate, context);",
          "260:             context.realization = selectedCandidate.realization;",
          "261:             if (selectedCandidate.capability.getSelectedCandidate() instanceof NLookupCandidate) {",
          "262:                 context.storageContext",
          "263:                         .setUseSnapshot(context.isFirstTableLookupTableInModel(context.realization.getModel()));",
          "264:             } else {",
          "265:                 Set<TblColRef> dimensions = Sets.newHashSet();",
          "266:                 Set<FunctionDesc> metrics = Sets.newHashSet();",
          "267:                 boolean isBatchQuery = !(context.realization instanceof HybridRealization)",
          "268:                         && !context.realization.isStreaming();",
          "269:                 buildDimensionsAndMetrics(context.getSQLDigest(), dimensions, metrics, context.realization);",
          "270:                 buildStorageContext(context.storageContext, dimensions, metrics, selectedCandidate, isBatchQuery);",
          "271:                 buildSecondStorageEnabled(context.getSQLDigest());",
          "272:                 fixContextForTableIndexAnswerNonRawQuery(context);",
          "273:             }",
          "274:             return;",
          "279:         throw new NoRealizationFoundException(\"No realization found for \" + toErrorMsg(context));",
          "283:         ProjectInstance projectInstance = NProjectManager.getInstance(KylinConfig.getInstanceFromEnv())",
          "284:                 .getProject(context.olapSchema.getProjectName());",
          "285:         if (projectInstance.getConfig().useTableIndexAnswerSelectStarEnabled() && context.getSQLDigest().isRawQuery) {",
          "",
          "[Added Lines]",
          "173:     private static void selectCandidate0(CountDownLatch latch, OLAPContext ctx) {",
          "174:         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();",
          "175:         String queryId = QueryContext.current().getQueryId();",
          "176:         try (KylinConfig.SetAndUnsetThreadLocalConfig ignored0 = KylinConfig.setAndUnsetThreadLocalConfig(kylinConfig);",
          "177:                 SetThreadName ignored1 = new SetThreadName(Thread.currentThread().getName() + \" QueryId %s\", queryId);",
          "178:                 SetLogCategory ignored2 = new SetLogCategory(\"query\")) {",
          "180:             String project = ctx.olapSchema.getProjectName();",
          "181:             NTableMetadataManager.getInstance(kylinConfig, project);",
          "182:             NDataModelManager.getInstance(kylinConfig, project);",
          "183:             NDataflowManager.getInstance(kylinConfig, project);",
          "184:             NIndexPlanManager.getInstance(kylinConfig, project);",
          "185:             NProjectLoader.updateCache(project);",
          "187:             if (!ctx.isConstantQueryWithAggregations()) {",
          "188:                 ctx.realizationCheck = new RealizationCheck();",
          "189:                 attemptSelectCandidate(ctx);",
          "190:                 Preconditions.checkNotNull(ctx.realization);",
          "191:             }",
          "192:         } catch (KylinTimeoutException e) {",
          "193:             logger.error(\"realization chooser thread task interrupted due to query [{}] timeout\", queryId);",
          "194:         } finally {",
          "195:             NProjectLoader.removeCache();",
          "196:             latch.countDown();",
          "197:         }",
          "198:     }",
          "204:         checkNoRealizationFound(context, modelMap);",
          "209:         List<Candidate> candidates = trySelectCandidates(context, modelMap, false, false);",
          "212:         if (CollectionUtils.isEmpty(candidates)) {",
          "213:             String project = context.olapSchema.getProjectName();",
          "214:             KylinConfig projectConfig = NProjectManager.getProjectConfig(project);",
          "215:             boolean partialMatch = projectConfig.isQueryMatchPartialInnerJoinModel();",
          "216:             boolean nonEquiPartialMatch = projectConfig.partialMatchNonEquiJoins();",
          "217:             if (partialMatch || nonEquiPartialMatch) {",
          "218:                 candidates = trySelectCandidates(context, modelMap, partialMatch, nonEquiPartialMatch);",
          "219:                 context.storageContext.setPartialMatchModel(CollectionUtils.isNotEmpty(candidates));",
          "223:         if (candidates.isEmpty()) {",
          "224:             checkNoRealizationWithStreaming(context);",
          "225:             RelAggPushDownUtil.registerUnmatchedJoinDigest(context.getTopNode());",
          "226:             throw new NoRealizationFoundException(\"No realization found for \" + toErrorMsg(context));",
          "232:         Candidate candidate = candidates.get(0);",
          "233:         restoreOLAPContextProps(context, candidate.getRewrittenCtx());",
          "234:         context.fixModel(candidate.getRealization().getModel(), candidate.getMatchedJoinsGraphAliasMap());",
          "235:         adjustForCapabilityInfluence(candidate, context);",
          "237:         context.realization = candidate.realization;",
          "238:         if (candidate.capability.getSelectedCandidate() instanceof NLookupCandidate) {",
          "239:             boolean useSnapshot = context.isFirstTableLookupTableInModel(context.realization.getModel());",
          "240:             context.storageContext.setUseSnapshot(useSnapshot);",
          "241:         } else {",
          "242:             Set<TblColRef> dimensions = Sets.newHashSet();",
          "243:             Set<FunctionDesc> metrics = Sets.newHashSet();",
          "244:             buildDimensionsAndMetrics(context, dimensions, metrics);",
          "245:             buildStorageContext(context, dimensions, metrics, candidate);",
          "246:             buildSecondStorageEnabled(context.getSQLDigest());",
          "247:             fixContextForTableIndexAnswerNonRawQuery(context);",
          "249:     }",
          "251:     private static void checkNoRealizationFound(OLAPContext context, Multimap<NDataModel, IRealization> modelMap) {",
          "252:         if (!modelMap.isEmpty()) {",
          "253:             return;",
          "254:         }",
          "257:         throw new NoRealizationFoundException(\"No model found for \" + toErrorMsg(context));",
          "258:     }",
          "260:     private static List<Candidate> trySelectCandidates(OLAPContext context, Multimap<NDataModel, IRealization> modelMap,",
          "261:             boolean partialMatch, boolean nonEquiPartialMatch) {",
          "262:         List<Candidate> candidates = Lists.newArrayList();",
          "263:         for (NDataModel model : modelMap.keySet()) {",
          "265:             OLAPContextProp preservedOlapProps = preservePropsBeforeRewrite(context);",
          "266:             Map<String, String> matchedAliasMap = matchJoins(model, context, partialMatch, nonEquiPartialMatch);",
          "267:             Set<IRealization> realizations = Sets.newHashSet(modelMap.get(model));",
          "268:             List<Candidate> list = selectRealizations(model, context, matchedAliasMap, realizations);",
          "271:             restoreOLAPContextProps(context, preservedOlapProps);",
          "275:             if (!hasReadySegments(model)) {",
          "276:                 logger.info(\"Exclude this model {} because there are no ready segments\", model.getAlias());",
          "277:                 continue;",
          "278:             }",
          "280:             if (CollectionUtils.isNotEmpty(list)) {",
          "281:                 candidates.addAll(list);",
          "282:                 logger.info(\"context & model({}/{}/{}) match info: {}\", context.olapSchema.getProjectName(),",
          "283:                         model.getUuid(), model.getAlias(), true);",
          "284:             }",
          "285:         }",
          "286:         return candidates;",
          "290:         KylinConfig projectConfig = NProjectManager.getProjectConfig(context.olapSchema.getProjectName());",
          "291:         if (projectConfig.useTableIndexAnswerSelectStarEnabled() && context.getSQLDigest().isRawQuery) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:         for (OLAPTableScan tableScan : context.allTableScans) {",
          "298:             TableDesc tableDesc = tableManager.getTableDesc(tableScan.getTableName());",
          "299:             if (tableDesc.getSourceType() == ISourceAware.ID_STREAMING) {",
          "301:                         MsgPicker.getMsg().getNoStreamingModelFound());",
          "302:             }",
          "303:         }",
          "304:     }",
          "322:         }",
          "325:         List<Candidate> candidates = Lists.newArrayListWithCapacity(realizations.size());",
          "326:         for (IRealization real : realizations) {",
          "328:             if (candidate != null) {",
          "329:                 candidates.add(candidate);",
          "330:                 logger.trace(\"Model {} QueryRouter matched\", model);",
          "",
          "[Removed Lines]",
          "300:                 throw new NoStreamingRealizationFoundException(STREAMING_MODEL_NOT_FOUND,",
          "306:     private static List<Candidate> selectRealizationFromModel(NDataModel model, OLAPContext context,",
          "307:             boolean isPartialMatch, boolean isPartialMatchNonEquiJoin, Multimap<NDataModel, IRealization> modelMap,",
          "308:             Map<NDataModel, Map<String, String>> model2AliasMap) {",
          "309:         final Map<String, String> map = matchJoins(model, context, isPartialMatch, isPartialMatchNonEquiJoin);",
          "310:         if (MapUtils.isEmpty(map)) {",
          "311:             return new ArrayList<>();",
          "312:         }",
          "313:         context.fixModel(model, map);",
          "314:         model2AliasMap.put(model, map);",
          "316:         preprocessOlapCtx(context);",
          "318:         if (!hasReadySegments(model)) {",
          "319:             context.unfixModel();",
          "320:             logger.info(\"Exclude this model {} because there are no ready segments\", model.getAlias());",
          "321:             return new ArrayList<>();",
          "324:         Set<IRealization> realizations = Sets.newHashSet(modelMap.get(model));",
          "327:             Candidate candidate = QueryRouter.selectRealization(context, real, model2AliasMap.get(model));",
          "",
          "[Added Lines]",
          "306:                 throw new NoStreamingRealizationFoundException(ServerErrorCode.STREAMING_MODEL_NOT_FOUND,",
          "312:     private static List<Candidate> selectRealizations(NDataModel model, OLAPContext context,",
          "313:             Map<String, String> matchedGraphAliasMap, Set<IRealization> realizations) {",
          "315:         if (MapUtils.isEmpty(matchedGraphAliasMap)) {",
          "316:             return Lists.newArrayList();",
          "319:         context.fixModel(model, matchedGraphAliasMap);",
          "320:         preprocessSpecialAggregations(context);",
          "323:             Candidate candidate = selectRealization(context, real, matchedGraphAliasMap);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "337:         return candidates;",
          "338:     }",
          "340:     private static boolean needToManyDerived(NDataModel model) {",
          "341:         return model.getJoinTables().stream().anyMatch(JoinTableDesc::isDerivedToManyJoinRelation);",
          "342:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:     public static Candidate selectRealization(OLAPContext olapContext, IRealization realization,",
          "337:             Map<String, String> matchedJoinGraphAliasMap) {",
          "338:         if (!realization.isReady()) {",
          "339:             logger.warn(\"Realization {} is not ready\", realization);",
          "340:             return null;",
          "341:         }",
          "343:         Candidate candidate = new Candidate(realization, olapContext, matchedJoinGraphAliasMap);",
          "344:         logger.info(\"Find candidates by table {} and project={} : {}\", olapContext.firstTableScan.getTableName(),",
          "345:                 olapContext.olapSchema.getProjectName(), candidate);",
          "347:         QueryRouter.applyRules(candidate);",
          "349:         if (!candidate.getCapability().isCapable()) {",
          "350:             return null;",
          "351:         }",
          "353:         candidate.setRewrittenCtx(preserveRewriteProps(olapContext));",
          "354:         logger.info(\"The realizations remaining: {}, and the final chosen one for current olap context {} is {}\",",
          "355:                 candidate.realization.getCanonicalName(), olapContext.id, candidate.realization.getCanonicalName());",
          "356:         return candidate;",
          "357:     }",
          "359:     static OLAPContextProp preserveRewriteProps(OLAPContext rewrittenOLAContext) {",
          "360:         return preservePropsBeforeRewrite(rewrittenOLAContext);",
          "361:     }",
          "363:     static OLAPContextProp preservePropsBeforeRewrite(OLAPContext oriOLAPContext) {",
          "364:         OLAPContextProp preserved = new OLAPContextProp(-1);",
          "365:         preserved.allColumns = Sets.newHashSet(oriOLAPContext.allColumns);",
          "366:         preserved.setSortColumns(Lists.newArrayList(oriOLAPContext.getSortColumns()));",
          "367:         preserved.setInnerGroupByColumns(Sets.newHashSet(oriOLAPContext.getInnerGroupByColumns()));",
          "368:         preserved.setGroupByColumns(Sets.newLinkedHashSet(oriOLAPContext.getGroupByColumns()));",
          "369:         preserved.setInnerFilterColumns(Sets.newHashSet(oriOLAPContext.getInnerFilterColumns()));",
          "370:         for (FunctionDesc agg : oriOLAPContext.aggregations) {",
          "371:             preserved.getReservedMap().put(agg,",
          "372:                     FunctionDesc.newInstance(agg.getExpression(), agg.getParameters(), agg.getReturnType()));",
          "373:         }",
          "375:         return preserved;",
          "376:     }",
          "378:     static void restoreOLAPContextProps(OLAPContext oriOLAPContext, OLAPContextProp preservedOLAPContext) {",
          "379:         oriOLAPContext.allColumns = preservedOLAPContext.allColumns;",
          "380:         oriOLAPContext.setSortColumns(preservedOLAPContext.getSortColumns());",
          "381:         oriOLAPContext.aggregations.forEach(agg -> {",
          "382:             if (preservedOLAPContext.getReservedMap().containsKey(agg)) {",
          "383:                 final FunctionDesc functionDesc = preservedOLAPContext.getReservedMap().get(agg);",
          "384:                 agg.setExpression(functionDesc.getExpression());",
          "385:                 agg.setParameters(functionDesc.getParameters());",
          "386:                 agg.setReturnType(functionDesc.getReturnType());",
          "387:             }",
          "388:         });",
          "389:         oriOLAPContext.setGroupByColumns(preservedOLAPContext.getGroupByColumns());",
          "390:         oriOLAPContext.setInnerGroupByColumns(preservedOLAPContext.getInnerGroupByColumns());",
          "391:         oriOLAPContext.setInnerFilterColumns(preservedOLAPContext.getInnerFilterColumns());",
          "392:         oriOLAPContext.resetSQLDigest();",
          "393:     }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "410:         }",
          "411:     }",
          "414:         if (CollectionUtils.isEmpty(context.aggregations))",
          "415:             return;",
          "416:         Iterator<FunctionDesc> it = context.aggregations.iterator();",
          "",
          "[Removed Lines]",
          "413:     private static void preprocessOlapCtx(OLAPContext context) {",
          "",
          "[Added Lines]",
          "468:     private static void preprocessSpecialAggregations(OLAPContext context) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "435:         }",
          "436:     }",
          "440:         if (isBatchQuery) {",
          "442:         } else {",
          "444:         }",
          "445:     }",
          "448:             Set<FunctionDesc> metrics, Candidate candidate) {",
          "449:         val layoutCandidate = (NLayoutCandidate) candidate.getCapability().getSelectedCandidate();",
          "451:         val prunedPartitions = candidate.getPrunedPartitions();",
          "452:         if (layoutCandidate.isEmptyCandidate()) {",
          "456:             return;",
          "457:         }",
          "472:     }",
          "475:             Set<FunctionDesc> metrics, Candidate candidate) {",
          "480:             context.setStreamingLayoutId(-1L);",
          "481:         } else {",
          "483:         }",
          "492:                     String.format(Locale.ROOT, MsgPicker.getMsg().getNoStreamingModelFound()));",
          "493:         }",
          "496:             context.setLayoutId(-1L);",
          "497:             context.setStreamingLayoutId(-1L);",
          "498:             context.setEmptyLayout(true);",
          "500:             return;",
          "501:         }",
          "505:             context.setLayoutId(null);",
          "506:             context.setStreamingLayoutId(null);",
          "507:             context.setEmptyLayout(true);",
          "510:                     String.format(Locale.ROOT, MsgPicker.getMsg().getNoStreamingModelFound()));",
          "511:         }",
          "513:         NDataModel model = candidate.getRealization().getModel();",
          "516:         context.setDimensions(dimensions);",
          "517:         context.setMetrics(metrics);",
          "519:         context.setPrunedSegments(prunedSegments);",
          "539:         }",
          "540:     }",
          "",
          "[Removed Lines]",
          "438:     private static void buildStorageContext(StorageContext context, Set<TblColRef> dimensions,",
          "439:             Set<FunctionDesc> metrics, Candidate candidate, boolean isBatchQuery) {",
          "441:             buildBatchStorageContext(context, dimensions, metrics, candidate);",
          "443:             buildStreamingStorageContext(context, dimensions, metrics, candidate);",
          "447:     private static void buildBatchStorageContext(StorageContext context, Set<TblColRef> dimensions,",
          "450:         val prunedSegments = candidate.getPrunedSegments();",
          "453:             context.setLayoutId(-1L);",
          "454:             context.setEmptyLayout(true);",
          "455:             logger.info(\"for context {}, chose empty layout\", context.getCtxId());",
          "458:         LayoutEntity cuboidLayout = layoutCandidate.getLayoutEntity();",
          "459:         context.setCandidate(layoutCandidate);",
          "460:         context.setDimensions(dimensions);",
          "461:         context.setMetrics(metrics);",
          "462:         context.setLayoutId(cuboidLayout.getId());",
          "463:         context.setPrunedSegments(prunedSegments);",
          "464:         context.setPrunedPartitions(prunedPartitions);",
          "465:         val segmentIds = prunedSegments.stream().map(NDataSegment::getId).collect(Collectors.toList());",
          "466:         logger.info(",
          "467:                 \"for context {}, chosen model: {}, its join: {}, layout: {}, dimensions: {}, measures: {}, segments: {}\",",
          "468:                 context.getCtxId(), cuboidLayout.getModel().getAlias(), cuboidLayout.getModel().getJoinsGraph(),",
          "469:                 cuboidLayout.getId(), cuboidLayout.getOrderedDimensions(), cuboidLayout.getOrderedMeasures(),",
          "470:                 segmentIds);",
          "474:     private static void buildStreamingStorageContext(StorageContext context, Set<TblColRef> dimensions,",
          "476:         context.setPrunedStreamingSegments(candidate.getPrunedStreamingSegments());",
          "477:         val layoutStreamingCandidate = (NLayoutCandidate) candidate.getCapability().getSelectedStreamingCandidate();",
          "478:         context.setStreamingCandidate(layoutStreamingCandidate);",
          "479:         if (layoutStreamingCandidate == null || layoutStreamingCandidate.isEmptyCandidate()) {",
          "482:             context.setStreamingLayoutId(layoutStreamingCandidate.getLayoutEntity().getId());",
          "485:         List<NDataSegment> prunedSegments = candidate.getPrunedSegments();",
          "486:         NLayoutCandidate layoutCandidate = (NLayoutCandidate) candidate.getCapability().getSelectedCandidate();",
          "488:         val prunedPartitions = candidate.getPrunedPartitions();",
          "489:         if ((layoutCandidate == null && layoutStreamingCandidate == NLayoutCandidate.EMPTY)",
          "490:                 || (layoutStreamingCandidate == null && layoutCandidate == NLayoutCandidate.EMPTY)) {",
          "491:             throw new NoStreamingRealizationFoundException(STREAMING_MODEL_NOT_FOUND,",
          "495:         if (layoutCandidate == NLayoutCandidate.EMPTY && layoutStreamingCandidate == NLayoutCandidate.EMPTY) {",
          "499:             logger.info(\"for context {}, chose empty layout\", context.getCtxId());",
          "504:         if (differentTypeofIndex(layoutCandidate, layoutStreamingCandidate)) {",
          "508:             logger.error(\"The case when the type of stream and batch index different is not supported yet.\");",
          "509:             throw new NoStreamingRealizationFoundException(STREAMING_MODEL_NOT_FOUND,",
          "515:         context.setCandidate(layoutCandidate);",
          "518:         context.setLayoutId(layoutCandidate == null ? -1L : layoutCandidate.getLayoutEntity().getId());",
          "520:         context.setPrunedPartitions(prunedPartitions);",
          "521:         if (layoutCandidate != null && !layoutCandidate.isEmptyCandidate()) {",
          "522:             LayoutEntity cuboidLayout = layoutCandidate.getLayoutEntity();",
          "523:             val segmentIds = prunedSegments.stream().map(NDataSegment::getId).collect(Collectors.toList());",
          "524:             logger.info(",
          "525:                     \"for context {}, chosen model: {}, its join: {}, batch layout: {}, batch layout dimensions: {}, \"",
          "526:                             + \"batch layout measures: {}, batch segments: {}\",",
          "527:                     context.getCtxId(), model.getAlias(), model.getJoinsGraph(), cuboidLayout.getId(),",
          "528:                     cuboidLayout.getOrderedDimensions(), cuboidLayout.getOrderedMeasures(), segmentIds);",
          "529:         }",
          "530:         if (layoutStreamingCandidate != null && !layoutStreamingCandidate.isEmptyCandidate()) {",
          "531:             LayoutEntity cuboidLayout = layoutStreamingCandidate.getLayoutEntity();",
          "532:             val segmentIds = candidate.getPrunedStreamingSegments().stream().map(NDataSegment::getId)",
          "533:                     .collect(Collectors.toList());",
          "534:             logger.info(",
          "535:                     \"for context {}, chosen model: {}, its join: {}, streaming layout: {}, streaming layout dimensions: {}, \"",
          "536:                             + \"streaming layout measures: {}, streaming segments: {}\",",
          "537:                     context.getCtxId(), model.getAlias(), model.getJoinsGraph(), cuboidLayout.getId(),",
          "538:                     cuboidLayout.getOrderedDimensions(), cuboidLayout.getOrderedMeasures(), segmentIds);",
          "",
          "[Added Lines]",
          "493:     private static void buildStorageContext(OLAPContext olapContext, Set<TblColRef> dimensions,",
          "494:             Set<FunctionDesc> metrics, Candidate candidate) {",
          "495:         boolean isBatchQuery = !(olapContext.realization instanceof HybridRealization)",
          "496:                 && !olapContext.realization.isStreaming();",
          "498:             buildBatchStorageContext(olapContext.storageContext, dimensions, metrics, candidate);",
          "500:             buildHybridStorageContext(olapContext.storageContext, dimensions, metrics, candidate);",
          "504:     private static void buildBatchStorageContext(StorageContext storageContext, Set<TblColRef> dimensions,",
          "507:         val prunedSegments = candidate.getQueryableSeg().getBatchSegments();",
          "510:             storageContext.setLayoutId(-1L);",
          "511:             storageContext.setEmptyLayout(true);",
          "512:             logger.info(\"The context {}, chose empty layout\", storageContext.getCtxId());",
          "515:         LayoutEntity layout = layoutCandidate.getLayoutEntity();",
          "516:         storageContext.setCandidate(layoutCandidate);",
          "517:         storageContext.setDimensions(dimensions);",
          "518:         storageContext.setMetrics(metrics);",
          "519:         storageContext.setLayoutId(layout.getId());",
          "520:         storageContext.setPrunedSegments(prunedSegments);",
          "521:         storageContext.setPrunedPartitions(prunedPartitions);",
          "522:         logger.info(\"The context {}, chosen model: {}, its join: {}, layout: {}, dimensions: {}, measures: {}, \" //",
          "523:                 + \"segments: {}\", storageContext.getCtxId(), layout.getModel().getAlias(),",
          "524:                 layout.getModel().getJoinsGraph(), layout.getId(), layout.getOrderedDimensions(),",
          "525:                 layout.getOrderedMeasures(), candidate.getQueryableSeg().getPrunedSegmentIds(true));",
          "528:     private static void buildHybridStorageContext(StorageContext context, Set<TblColRef> dimensions,",
          "530:         context.setPrunedStreamingSegments(candidate.getQueryableSeg().getStreamingSegments());",
          "531:         NLayoutCandidate streamingCandidate = (NLayoutCandidate) candidate.getCapability()",
          "532:                 .getSelectedStreamingCandidate();",
          "533:         context.setStreamingCandidate(streamingCandidate);",
          "534:         if (streamingCandidate == null || streamingCandidate.isEmptyCandidate()) {",
          "537:             context.setStreamingLayoutId(streamingCandidate.getLayoutEntity().getId());",
          "540:         List<NDataSegment> prunedSegments = candidate.getQueryableSeg().getBatchSegments();",
          "541:         NLayoutCandidate batchCandidate = (NLayoutCandidate) candidate.getCapability().getSelectedCandidate();",
          "542:         if ((batchCandidate == null && streamingCandidate == NLayoutCandidate.EMPTY)",
          "543:                 || (streamingCandidate == null && batchCandidate == NLayoutCandidate.EMPTY)) {",
          "544:             throw new NoStreamingRealizationFoundException(ServerErrorCode.STREAMING_MODEL_NOT_FOUND,",
          "548:         if (batchCandidate == NLayoutCandidate.EMPTY && streamingCandidate == NLayoutCandidate.EMPTY) {",
          "552:             logger.info(\"The context {}, chose empty layout\", context.getCtxId());",
          "556:         if (differentTypeofIndex(batchCandidate, streamingCandidate)) {",
          "560:             logger.error(\"The index types of streaming model and batch model are different, \"",
          "561:                     + \"and this situation is not supported yet.\");",
          "562:             throw new NoStreamingRealizationFoundException(ServerErrorCode.STREAMING_MODEL_NOT_FOUND,",
          "568:         context.setCandidate(batchCandidate);",
          "571:         context.setLayoutId(batchCandidate == null ? -1L : batchCandidate.getLayoutEntity().getId());",
          "573:         context.setPrunedPartitions(candidate.getPrunedPartitions());",
          "574:         if (batchCandidate != null && !batchCandidate.isEmptyCandidate()) {",
          "575:             LayoutEntity layout = batchCandidate.getLayoutEntity();",
          "576:             logger.info(\"The context {}, chosen model: {}, its join: {}, \" //",
          "577:                     + \"batch layout: {}, batch layout dimensions: {}, \" //",
          "578:                     + \"batch layout measures: {}, batch segments: {}\", context.getCtxId(), model.getAlias(),",
          "579:                     model.getJoinsGraph(), layout.getId(), layout.getOrderedDimensions(), layout.getOrderedMeasures(),",
          "580:                     candidate.getQueryableSeg().getPrunedSegmentIds(true));",
          "581:         }",
          "583:         if (streamingCandidate != null && !streamingCandidate.isEmptyCandidate()) {",
          "584:             LayoutEntity cuboidLayout = streamingCandidate.getLayoutEntity();",
          "585:             logger.info(\"The context {}, chosen model: {}, its join: {}, \" //",
          "586:                     + \"streaming layout: {}, streaming layout dimensions: {},  \" //",
          "587:                     + \"streaming layout measures: {}, streaming segments: {}\", context.getCtxId(), model.getAlias(),",
          "588:                     model.getJoinsGraph(), cuboidLayout.getId(), cuboidLayout.getOrderedDimensions(),",
          "589:                     cuboidLayout.getOrderedMeasures(), candidate.getQueryableSeg().getPrunedSegmentIds(false));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "546:         if (streamLayout == null || streamLayout.isEmptyCandidate()) {",
          "547:             return false;",
          "548:         }",
          "554:     }",
          "558:         for (FunctionDesc func : sqlDigest.aggregations) {",
          "559:             if (!func.isDimensionAsMetric() && !func.isGrouping()) {",
          "",
          "[Removed Lines]",
          "549:         if (batchLayout.getLayoutEntity().getIndex().isTableIndex() != streamLayout.getLayoutEntity().getIndex()",
          "550:                 .isTableIndex()) {",
          "551:             return true;",
          "552:         }",
          "553:         return false;",
          "556:     private static void buildDimensionsAndMetrics(SQLDigest sqlDigest, Collection<TblColRef> dimensions,",
          "557:             Collection<FunctionDesc> metrics, IRealization realization) {",
          "",
          "[Added Lines]",
          "600:         return batchLayout.getLayoutEntity().getIndex().isTableIndex() != streamLayout.getLayoutEntity().getIndex()",
          "601:                 .isTableIndex();",
          "604:     private static void buildDimensionsAndMetrics(OLAPContext context, Collection<TblColRef> dimensions,",
          "605:             Collection<FunctionDesc> metrics) {",
          "606:         SQLDigest sqlDigest = context.getSQLDigest();",
          "607:         IRealization realization = context.realization;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "615:         return buf.toString();",
          "616:     }",
          "619:             boolean partialMatchNonEquiJoin) {",
          "621:         TableRef firstTable = ctx.firstTableScan.getTableRef();",
          "622:         boolean matched;",
          "624:         if (ctx.isFirstTableLookupTableInModel(model)) {",
          "626:             String modelAlias = model.findFirstTable(firstTable.getTableIdentity()).getAlias();",
          "628:             matched = true;",
          "629:             logger.info(\"Context fact table {} matched lookup table in model {}\", ctx.firstTableScan.getTableName(),",
          "630:                     model);",
          "631:         } else if (ctx.joins.size() != ctx.allTableScans.size() - 1) {",
          "633:             ctx.realizationCheck.addModelIncapableReason(model,",
          "635:             return new HashMap<>();",
          "636:         } else {",
          "638:             if (ctx.getJoinsGraph() == null) {",
          "639:                 ctx.setJoinsGraph(new JoinsGraph(firstTable, ctx.joins));",
          "640:             }",
          "642:             if (!matched) {",
          "643:                 KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();",
          "644:                 if (kylinConfig.isJoinMatchOptimizationEnabled()) {",
          "",
          "[Removed Lines]",
          "618:     public static Map<String, String> matchJoins(NDataModel model, OLAPContext ctx, boolean partialMatch,",
          "620:         Map<String, String> matchUp = Maps.newHashMap();",
          "627:             matchUp = ImmutableMap.of(firstTable.getAlias(), modelAlias);",
          "634:                     RealizationCheck.IncapableReason.create(RealizationCheck.IncapableType.MODEL_BAD_JOIN_SEQUENCE));",
          "641:             matched = ctx.getJoinsGraph().match(model.getJoinsGraph(), matchUp, partialMatch, partialMatchNonEquiJoin);",
          "",
          "[Added Lines]",
          "668:     public static Map<String, String> matchJoins(NDataModel model, OLAPContext ctx, boolean partialMatchInnerJoin,",
          "670:         Map<String, String> matchedAliasMap = Maps.newHashMap();",
          "677:             matchedAliasMap = ImmutableMap.of(firstTable.getAlias(), modelAlias);",
          "684:                     RealizationCheck.IncapableReason.MODEL_BAD_JOIN_SEQUENCE);",
          "691:             matched = ctx.getJoinsGraph().match(model.getJoinsGraph(), matchedAliasMap, partialMatchInnerJoin,",
          "692:                     partialMatchNonEquiJoin);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "646:                             \"Query match join with join match optimization mode, trying to match with newly rewrite join graph.\");",
          "647:                     ctx.matchJoinWithFilterTransformation();",
          "648:                     ctx.matchJoinWithEnhancementTransformation();",
          "650:                             partialMatchNonEquiJoin);",
          "651:                     logger.info(\"Match result for match join with join match optimization mode is: {}\", matched);",
          "652:                 }",
          "",
          "[Removed Lines]",
          "649:                     matched = ctx.getJoinsGraph().match(model.getJoinsGraph(), matchUp, partialMatch,",
          "",
          "[Added Lines]",
          "700:                     matched = ctx.getJoinsGraph().match(model.getJoinsGraph(), matchedAliasMap, partialMatchInnerJoin,",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "658:         }",
          "660:         if (!matched) {",
          "663:             return new HashMap<>();",
          "664:         }",
          "671:     }",
          "673:     private static Multimap<NDataModel, IRealization> makeOrderedModelMap(OLAPContext context) {",
          "674:         KylinConfig kylinConfig = context.olapSchema.getConfig();",
          "680:         final Multimap<NDataModel, IRealization> mapModelToRealizations = HashMultimap.create();",
          "681:         boolean streamingEnabled = kylinConfig.streamingEnabled();",
          "682:         for (IRealization real : realizations) {",
          "690:                 continue;",
          "691:             }",
          "692:             mapModelToRealizations.put(real.getModel(), real);",
          "693:         }",
          "695:         if (mapModelToRealizations.isEmpty()) {",
          "697:         }",
          "699:         return mapModelToRealizations;",
          "",
          "[Removed Lines]",
          "661:             ctx.realizationCheck.addModelIncapableReason(model,",
          "662:                     RealizationCheck.IncapableReason.create(RealizationCheck.IncapableType.MODEL_UNMATCHED_JOIN));",
          "665:         ctx.realizationCheck.addCapableModel(model, matchUp);",
          "666:         return matchUp;",
          "667:     }",
          "669:     public static Map<String, String> matchJoins(NDataModel model, OLAPContext ctx) {",
          "670:         return matchJoins(model, ctx, partialMatchInnerJoin(), partialMatchNonEquiJoin());",
          "675:         String projectName = context.olapSchema.getProjectName();",
          "676:         String factTableName = context.firstTableScan.getOlapTable().getTableName();",
          "677:         Set<IRealization> realizations = NProjectManager.getInstance(kylinConfig).getRealizationsByTable(projectName,",
          "678:                 factTableName);",
          "683:             if (!real.isReady() || isModelViewBounded(context, real) || omitFusionModel(streamingEnabled, real)) {",
          "684:                 if (!real.isReady()) {",
          "685:                     context.realizationCheck.addIncapableCube(real,",
          "686:                             RealizationCheck.IncapableReason.create(RealizationCheck.IncapableType.CUBE_NOT_READY));",
          "687:                     logger.warn(\"Realization {} is not ready for project {} with fact table {}\", real, projectName,",
          "688:                             factTableName);",
          "689:                 }",
          "696:             logger.error(\"No realization found for project {} with fact table {}\", projectName, factTableName);",
          "",
          "[Added Lines]",
          "712:             ctx.realizationCheck.addModelIncapableReason(model, RealizationCheck.IncapableReason.MODEL_UNMATCHED_JOIN);",
          "715:         ctx.realizationCheck.addCapableModel(model, matchedAliasMap);",
          "716:         return matchedAliasMap;",
          "720:         if (context.getModelAlias() != null) {",
          "721:             logger.info(\"The query is bounded to a certain model({}/{}).\", context.olapSchema.getProjectName(),",
          "722:                     context.getModelAlias());",
          "723:         }",
          "726:         String project = context.olapSchema.getProjectName();",
          "727:         String factTable = context.firstTableScan.getOlapTable().getTableName();",
          "728:         Set<IRealization> realizations = NProjectManager.getInstance(kylinConfig).getRealizationsByTable(project,",
          "729:                 factTable);",
          "734:             boolean skip = false;",
          "735:             if (!real.isReady()) {",
          "736:                 skip = true;",
          "737:                 logger.warn(\"Offline model({}/{}) with fact table {} cannot be queried.\", project, real, factTable);",
          "738:             } else if (isModelViewBounded(context, real)) {",
          "739:                 skip = true;",
          "740:             } else if (omitFusionModel(streamingEnabled, real)) {",
          "741:                 skip = true;",
          "742:                 logger.info(\"Fusion model({}/{}) is skipped.\", project, real.getUuid());",
          "743:             }",
          "744:             if (skip) {",
          "751:             logger.error(\"No realization found for project {} with fact table {}\", project, factTable);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "711:         return !turnOnStreaming && real.getModel().isFusionModel();",
          "712:     }",
          "733:     }",
          "735: }",
          "",
          "[Removed Lines]",
          "714:     private static boolean partialMatchInnerJoin() {",
          "715:         return getProjectConfig().isQueryMatchPartialInnerJoinModel();",
          "716:     }",
          "718:     private static boolean partialMatchNonEquiJoin() {",
          "719:         return getProjectConfig().partialMatchNonEquiJoins();",
          "720:     }",
          "722:     private static KylinConfig getProjectConfig() {",
          "723:         String project = QueryContext.current().getProject();",
          "724:         try {",
          "725:             if (project != null) {",
          "726:                 return NProjectManager.getProjectConfig(project);",
          "727:             }",
          "728:         } catch (Exception e) {",
          "729:             logger.error(\"Failed to get config of project<{}> when matching partial inner join model. {}\", //",
          "730:                     project, e.getMessage());",
          "731:         }",
          "732:         return KylinConfig.getInstanceFromEnv();",
          "",
          "[Added Lines]",
          "769:     public static Map<String, String> matchJoins(NDataModel model, OLAPContext ctx) {",
          "770:         KylinConfig projectConfig = NProjectManager.getProjectConfig(ctx.olapSchema.getProjectName());",
          "771:         boolean isPartialInnerJoin = projectConfig.isQueryMatchPartialInnerJoinModel();",
          "772:         boolean isPartialNonEquiJoin = projectConfig.partialMatchNonEquiJoins();",
          "773:         return matchJoins(model, ctx, isPartialInnerJoin, isPartialNonEquiJoin);",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationPruner.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationPruner.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationPruner.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/RealizationPruner.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/RoutingRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/RoutingRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/RoutingRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/RoutingRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing;",
          "25: public abstract class RoutingRule {",
          "",
          "[Removed Lines]",
          "21: import java.util.List;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:         return this.getClass().toString();",
          "30:     }",
          "34: }",
          "",
          "[Removed Lines]",
          "32:     public abstract void apply(List<Candidate> candidates);",
          "",
          "[Added Lines]",
          "30:     public abstract void apply(Candidate candidate);",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/PartitionPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/rules/PartitionPruningRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/rules/PartitionPruningRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/rules/PartitionPruningRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing.rules;",
          "21: import java.util.List;",
          "23: import org.apache.commons.collections.CollectionUtils;",
          "24: import org.apache.kylin.common.KylinConfig;",
          "25: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "26: import org.apache.kylin.query.routing.Candidate;",
          "28: import org.apache.kylin.query.routing.RoutingRule;",
          "33: import lombok.extern.slf4j.Slf4j;",
          "35: @Slf4j",
          "36: public class PartitionPruningRule extends RoutingRule {",
          "37:     @Override",
          "48:             }",
          "54:             }",
          "84:             }",
          "87:         }",
          "88:     }",
          "89: }",
          "",
          "[Removed Lines]",
          "27: import org.apache.kylin.query.routing.RealizationPruner;",
          "29: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "30: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "32: import lombok.val;",
          "38:     public void apply(List<Candidate> candidates) {",
          "39:         val iterator = candidates.iterator();",
          "40:         while (iterator.hasNext()) {",
          "41:             val candidate = iterator.next();",
          "42:             val model = candidate.getRealization().getModel();",
          "45:             val prunedSegments = candidate.getPrunedSegments();",
          "46:             if (CollectionUtils.isEmpty(prunedSegments)) {",
          "47:                 continue;",
          "51:             val multiPartitionDesc = model.getMultiPartitionDesc();",
          "52:             if (multiPartitionDesc == null || CollectionUtils.isEmpty(multiPartitionDesc.getColumns())) {",
          "53:                 continue;",
          "56:             val matchedPartitions = RealizationPruner.matchPartitions(prunedSegments, model, candidate.getCtx());",
          "59:             if (matchedPartitions == null) {",
          "60:                 val capability = new CapabilityResult();",
          "61:                 capability.capable = false;",
          "62:                 candidate.setCapability(capability);",
          "63:                 iterator.remove();",
          "64:                 continue;",
          "65:             }",
          "67:             val dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), model.getProject())",
          "68:                     .getDataflow(model.getId());",
          "69:             val allPartitionsEmpty = matchedPartitions.entrySet().stream().allMatch(entry -> {",
          "70:                 val segment = dataflow.getSegment(entry.getKey());",
          "71:                 val partitionIds = entry.getValue();",
          "72:                 return CollectionUtils.isNotEmpty(segment.getMultiPartitionIds())",
          "73:                         && CollectionUtils.isEmpty(partitionIds);",
          "74:             });",
          "77:             if (allPartitionsEmpty) {",
          "78:                 log.info(\"there is no partition to answer sql\");",
          "79:                 val capability = new CapabilityResult();",
          "80:                 capability.capable = true;",
          "81:                 capability.setSelectedCandidate(NLayoutCandidate.EMPTY);",
          "82:                 candidate.setCapability(capability);",
          "83:                 continue;",
          "86:             candidate.setPrunedPartitions(matchedPartitions);",
          "",
          "[Added Lines]",
          "21: import java.util.Collection;",
          "22: import java.util.Collections;",
          "24: import java.util.Map;",
          "25: import java.util.Set;",
          "26: import java.util.stream.Collectors;",
          "28: import org.apache.calcite.plan.RelOptCluster;",
          "29: import org.apache.calcite.plan.RelOptPredicateList;",
          "30: import org.apache.calcite.rex.RexBuilder;",
          "31: import org.apache.calcite.rex.RexInputRef;",
          "32: import org.apache.calcite.rex.RexNode;",
          "33: import org.apache.calcite.rex.RexSimplify;",
          "34: import org.apache.calcite.sql.fun.SqlStdOperatorTable;",
          "37: import org.apache.kylin.guava30.shaded.common.collect.ImmutableMap;",
          "38: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "39: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "40: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "41: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "42: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "43: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "44: import org.apache.kylin.metadata.model.MultiPartitionDesc;",
          "45: import org.apache.kylin.metadata.model.MultiPartitionKeyMapping;",
          "46: import org.apache.kylin.metadata.model.MultiPartitionKeyMappingImpl;",
          "47: import org.apache.kylin.metadata.model.NDataModel;",
          "48: import org.apache.kylin.metadata.model.TblColRef;",
          "50: import org.apache.kylin.query.relnode.OLAPContext;",
          "51: import org.apache.kylin.query.relnode.OLAPTableScan;",
          "54: import org.apache.kylin.query.util.RexUtils;",
          "61:     private static final String NEED_PUSH_DOWN = \"NULL\";",
          "64:     public void apply(Candidate candidate) {",
          "65:         if (nonBatchRealizationSkipPartitionsPruning(candidate)) {",
          "66:             log.info(\"{}({}/{}): only batch model support multi-partitions pruning.\", this.getClass().getName(),",
          "67:                     candidate.getRealization().getProject(), candidate.getRealization().getCanonicalName());",
          "68:             return;",
          "69:         }",
          "71:         if (noQueryableSegmentsCanAnswer(candidate)) {",
          "72:             log.debug(\"{}({}/{}): no queryable(READY|WARNING) segments can answer\", this.getClass().getName(),",
          "73:                     candidate.getRealization().getProject(), candidate.getRealization().getCanonicalName());",
          "74:             return;",
          "75:         }",
          "77:         if (noMultiPartitionColumnsExist(candidate)) {",
          "78:             log.debug(\"{}({}/{}): there is no multi-partition columns.\", this.getClass().getName(),",
          "79:                     candidate.getRealization().getProject(), candidate.getRealization().getCanonicalName());",
          "80:             return;",
          "81:         }",
          "83:         NDataModel model = candidate.getRealization().getModel();",
          "84:         Map<String, List<Long>> matchedPartitions = matchPartitions(candidate);",
          "85:         if (needPushDown(matchedPartitions)) {",
          "86:             log.debug(\"{}({}/{}): cannot match multi-partitions of segments.\", this.getClass().getName(),",
          "87:                     candidate.getRealization().getProject(), candidate.getRealization().getCanonicalName());",
          "88:             CapabilityResult capability = new CapabilityResult();",
          "89:             capability.setCapable(false);",
          "90:             candidate.setCapability(capability);",
          "91:             return;",
          "92:         }",
          "94:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), model.getProject())",
          "95:                 .getDataflow(model.getId());",
          "96:         boolean allPartitionsEmpty = matchedPartitions.entrySet().stream().allMatch(entry -> {",
          "97:             NDataSegment segment = dataflow.getSegment(entry.getKey());",
          "98:             List<Long> partitionIds = entry.getValue();",
          "99:             return CollectionUtils.isNotEmpty(segment.getMultiPartitionIds()) && CollectionUtils.isEmpty(partitionIds);",
          "100:         });",
          "103:         if (allPartitionsEmpty) {",
          "104:             log.info(\"there is no sub-partitions to answer sql\");",
          "105:             CapabilityResult capability = new CapabilityResult();",
          "106:             capability.setCapable(true);",
          "107:             capability.setSelectedCandidate(NLayoutCandidate.EMPTY);",
          "108:             candidate.setCapability(capability);",
          "109:             return;",
          "110:         }",
          "111:         candidate.setPrunedPartitions(matchedPartitions);",
          "112:     }",
          "114:     private boolean needPushDown(Map<String, List<Long>> matchedPartitions) {",
          "115:         return matchedPartitions.size() == 1 && matchedPartitions.containsKey(NEED_PUSH_DOWN);",
          "116:     }",
          "118:     private boolean noMultiPartitionColumnsExist(Candidate candidate) {",
          "119:         NDataModel model = candidate.getRealization().getModel();",
          "120:         MultiPartitionDesc multiPartitionDesc = model.getMultiPartitionDesc();",
          "121:         return multiPartitionDesc == null || CollectionUtils.isEmpty(multiPartitionDesc.getColumns());",
          "122:     }",
          "124:     private boolean noQueryableSegmentsCanAnswer(Candidate candidate) {",
          "125:         return CollectionUtils.isEmpty(candidate.getQueryableSeg().getBatchSegments());",
          "126:     }",
          "128:     private boolean nonBatchRealizationSkipPartitionsPruning(Candidate candidate) {",
          "129:         return CollectionUtils.isNotEmpty(candidate.getQueryableSeg().getStreamingSegments());",
          "130:     }",
          "132:     private Map<String, List<Long>> matchPartitions(Candidate candidate) {",
          "133:         NDataModel model = candidate.getRealization().getModel();",
          "134:         OLAPContext olapContext = candidate.getCtx();",
          "136:         Map<String, List<Long>> segPartitionMap = candidate.getQueryableSeg().getBatchSegments().stream()",
          "137:                 .collect(Collectors.toMap(NDataSegment::getId, NDataSegment::getMultiPartitionIds));",
          "138:         if (filtersContainPartOfMultiPartitionKeyMappingCols(model, olapContext.filterColumns)) {",
          "139:             return segPartitionMap;",
          "140:         }",
          "142:         RelOptCluster relOptCluster = olapContext.firstTableScan.getCluster();",
          "143:         RexBuilder rexBuilder = relOptCluster.getRexBuilder();",
          "144:         RexSimplify rexSimplify = new RexSimplify(relOptCluster.getRexBuilder(), RelOptPredicateList.EMPTY, true,",
          "145:                 relOptCluster.getPlanner().getExecutor());",
          "146:         RexNode simplifiedFilters = rexSimplify.simplifyAnds(olapContext.getExpandedFilterConditions());",
          "147:         if (simplifiedFilters.isAlwaysFalse()) {",
          "148:             log.info(\"The SQL filter condition is always false, and all partitions are filtered out.\");",
          "149:             return Maps.newHashMap();",
          "150:         }",
          "151:         if (simplifiedFilters.isAlwaysTrue()) {",
          "152:             log.info(\"The SQL filter condition is always true, and all partitions are reserved.\");",
          "153:             return segPartitionMap;",
          "154:         }",
          "156:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), model.getProject())",
          "157:                 .getDataflow(model.getId());",
          "158:         List<TblColRef> partitionColRefs = model.getMultiPartitionDesc().getColumnRefs();",
          "159:         for (MultiPartitionDesc.PartitionInfo partition : model.getMultiPartitionDesc().getPartitions()) {",
          "160:             try {",
          "161:                 RexNode partitionRex = partitionToRexCall(partitionColRefs, partition.getValues(), rexBuilder,",
          "162:                         olapContext.allTableScans);",
          "163:                 RexNode mappingColRex = multiPartitionKeyMappingToRex(rexBuilder, partition.getValues(),",
          "164:                         model.getMultiPartitionKeyMapping(), olapContext.allTableScans);",
          "167:                 List<RexNode> nodes = Lists.newArrayList(simplifiedFilters, partitionRex, mappingColRex);",
          "168:                 RexNode simplifyAnds = rexSimplify.simplifyAnds(nodes);",
          "169:                 RelOptPredicateList predicate = RelOptPredicateList.of(rexBuilder,",
          "170:                         Lists.newArrayList(partitionRex, mappingColRex));",
          "173:                 RexNode simplifiedWithPredicate = rexSimplify.withPredicates(predicate).simplify(simplifiedFilters);",
          "175:                 if (simplifyAnds.isAlwaysFalse() || simplifiedWithPredicate.isAlwaysFalse()) {",
          "177:                     segPartitionMap.forEach((dataSegment, partitionIds) -> partitionIds.remove(partition.getId()));",
          "178:                     continue;",
          "179:                 }",
          "180:             } catch (Exception ex) {",
          "181:                 log.warn(\"Multi-partition pruning error: \", ex);",
          "185:             for (Map.Entry<String, List<Long>> entry : segPartitionMap.entrySet()) {",
          "186:                 List<Long> partitionIds = entry.getValue();",
          "187:                 if (!partitionIds.contains(partition.getId())) {",
          "188:                     NDataSegment segment = dataflow.getSegment(entry.getKey());",
          "189:                     log.info(\"segment {} does not have partition {}\", segment.displayIdName(), partition.getId());",
          "190:                     return ImmutableMap.of(NEED_PUSH_DOWN, Lists.newArrayList());",
          "191:                 }",
          "193:         }",
          "195:         return segPartitionMap;",
          "196:     }",
          "198:     private RexNode partitionToRexCall(List<TblColRef> partitionCols, String[] partitionValues, RexBuilder rexBuilder,",
          "199:             Set<OLAPTableScan> tableScans) {",
          "200:         return transformColumns2RexCall(partitionCols, Collections.singletonList(Lists.newArrayList(partitionValues)),",
          "201:                 rexBuilder, tableScans);",
          "202:     }",
          "204:     private RexNode multiPartitionKeyMappingToRex(RexBuilder rexBuilder, String[] partitionValues,",
          "205:             MultiPartitionKeyMapping multiPartitionKeyMapping, Set<OLAPTableScan> tableScans) {",
          "206:         if (multiPartitionKeyMapping == null) {",
          "207:             return rexBuilder.makeLiteral(true);",
          "208:         }",
          "209:         List<TblColRef> mappedColumns = multiPartitionKeyMapping.getAliasColumns();",
          "210:         Collection<List<String>> mappedValues = multiPartitionKeyMapping",
          "211:                 .getAliasValue(Lists.newArrayList(partitionValues));",
          "212:         if (CollectionUtils.isEmpty(mappedColumns) || CollectionUtils.isEmpty(mappedValues)) {",
          "213:             return rexBuilder.makeLiteral(true);",
          "214:         }",
          "215:         return transformColumns2RexCall(mappedColumns, mappedValues, rexBuilder, tableScans);",
          "216:     }",
          "218:     private RexNode transformColumns2RexCall(List<TblColRef> columns, Collection<List<String>> values,",
          "219:             RexBuilder rexBuilder, Set<OLAPTableScan> tableScans) {",
          "220:         List<RexNode> orRexCalls = Lists.newArrayList();",
          "221:         for (List<String> columnValue : values) {",
          "222:             int size = columns.size();",
          "223:             List<RexNode> equalRexCalls = Lists.newArrayList();",
          "224:             for (int i = 0; i < size; i++) {",
          "225:                 String value = columnValue.get(i);",
          "226:                 TblColRef columnRef = columns.get(i);",
          "227:                 RexInputRef columnRexInputRef = RexUtils.transformColumn2RexInputRef(columnRef, tableScans);",
          "228:                 RexNode valueLiteral = RexUtils.transformValue2RexLiteral(rexBuilder, value, columnRef.getType());",
          "229:                 RexNode equalRexCall = rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,",
          "230:                         Lists.newArrayList(columnRexInputRef, valueLiteral));",
          "231:                 equalRexCalls.add(equalRexCall);",
          "234:             RexNode andRexCall = equalRexCalls.size() == 1 ? equalRexCalls.get(0)",
          "235:                     : rexBuilder.makeCall(SqlStdOperatorTable.AND, equalRexCalls);",
          "236:             orRexCalls.add(andRexCall);",
          "238:         return orRexCalls.size() == 1 ? orRexCalls.get(0) : rexBuilder.makeCall(SqlStdOperatorTable.OR, orRexCalls);",
          "239:     }",
          "241:     private boolean filtersContainPartOfMultiPartitionKeyMappingCols(NDataModel model, Set<TblColRef> filterCols) {",
          "242:         if (filterCols.containsAll(model.getMultiPartitionDesc().getColumnRefs())) {",
          "243:             return false;",
          "244:         }",
          "246:         if (model.isEmptyMultiPartitionKeyMapping()) {",
          "247:             return true;",
          "248:         }",
          "250:         MultiPartitionKeyMappingImpl mapping = model.getMultiPartitionKeyMapping();",
          "251:         Set<String> filterColumnIdentities = filterCols.stream().map(TblColRef::getCanonicalName)",
          "252:                 .collect(Collectors.toSet());",
          "253:         Set<String> aliasColumnIdentities = mapping.getAliasColumns().stream().map(TblColRef::getCanonicalName)",
          "254:                 .collect(Collectors.toSet());",
          "255:         return !filterColumnIdentities.containsAll(aliasColumnIdentities);",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveUncapableRealizationsRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveUncapableRealizationsRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveUncapableRealizationsRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/rules/RemoveUncapableRealizationsRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing.rules;",
          "24: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "25: import org.apache.kylin.query.routing.Candidate;",
          "26: import org.apache.kylin.query.routing.RoutingRule;",
          "27: import org.apache.kylin.query.util.ComputedColumnRewriter;",
          "28: import org.apache.kylin.query.util.QueryAliasMatchInfo;",
          "33: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "21: import java.util.Iterator;",
          "22: import java.util.List;",
          "30: import org.apache.kylin.guava30.shaded.common.collect.BiMap;",
          "31: import org.apache.kylin.guava30.shaded.common.collect.HashBiMap;",
          "",
          "[Added Lines]",
          "21: import org.apache.kylin.guava30.shaded.common.collect.BiMap;",
          "22: import org.apache.kylin.guava30.shaded.common.collect.HashBiMap;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: @Slf4j",
          "38: public class RemoveUncapableRealizationsRule extends RoutingRule {",
          "39:     @Override",
          "46:             candidate.getCtx().resetSQLDigest();",
          "67:         }",
          "68:     }",
          "70: }",
          "",
          "[Removed Lines]",
          "40:     public void apply(List<Candidate> candidates) {",
          "41:         for (Iterator<Candidate> iterator = candidates.iterator(); iterator.hasNext();) {",
          "42:             Candidate candidate = iterator.next();",
          "43:             if (candidate.getCapability() != null) {",
          "44:                 continue;",
          "45:             }",
          "47:             CapabilityResult capability = candidate.getRealization().isCapable(candidate.getCtx().getSQLDigest(),",
          "48:                     candidate.getPrunedSegments(), candidate.getPrunedStreamingSegments(),",
          "49:                     candidate.getSecondStorageSegmentLayoutMap());",
          "51:             if (!capability.capable && !candidate.getRealization().getModel().getComputedColumnDescs().isEmpty()) {",
          "52:                 BiMap<String, String> aliasMapping = HashBiMap.create();",
          "53:                 aliasMapping.putAll(candidate.getAliasMap());",
          "54:                 ComputedColumnRewriter.rewriteCcInnerCol(candidate.getCtx(), candidate.getRealization().getModel(),",
          "55:                         new QueryAliasMatchInfo(aliasMapping, null));",
          "56:                 candidate.getCtx().resetSQLDigest();",
          "57:                 capability = candidate.getRealization().isCapable(candidate.getCtx().getSQLDigest(),",
          "58:                         candidate.getPrunedSegments(), candidate.getPrunedStreamingSegments(),",
          "59:                         candidate.getSecondStorageSegmentLayoutMap());",
          "60:             }",
          "62:             candidate.setCapability(capability);",
          "63:             if (!capability.capable) {",
          "64:                 iterator.remove();",
          "65:             }",
          "",
          "[Added Lines]",
          "36:     public void apply(Candidate candidate) {",
          "37:         if (candidate.getCapability() != null) {",
          "38:             return;",
          "39:         }",
          "40:         candidate.getCtx().resetSQLDigest();",
          "41:         CapabilityResult capability = candidate.getRealization().isCapable(candidate.getCtx().getSQLDigest(),",
          "42:                 candidate.getQueryableSeg());",
          "44:         if (!capability.isCapable() && !candidate.getRealization().getModel().getComputedColumnDescs().isEmpty()) {",
          "45:             log.info(\"{}({}/{}): try rewrite computed column and then check whether the realization is capable.\",",
          "46:                     this.getClass().getName(), candidate.getRealization().getProject(),",
          "47:                     candidate.getRealization().getCanonicalName());",
          "48:             BiMap<String, String> aliasMapping = HashBiMap.create();",
          "49:             aliasMapping.putAll(candidate.getMatchedJoinsGraphAliasMap());",
          "50:             ComputedColumnRewriter.rewriteCcInnerCol(candidate.getCtx(), candidate.getRealization().getModel(),",
          "51:                     new QueryAliasMatchInfo(aliasMapping, null));",
          "53:             capability = candidate.getRealization().isCapable(candidate.getCtx().getSQLDigest(),",
          "54:                     candidate.getQueryableSeg());",
          "57:         candidate.setCapability(capability);",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/routing/rules/SegmentPruningRule.java||src/query-common/src/main/java/org/apache/kylin/query/routing/rules/SegmentPruningRule.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/routing/rules/SegmentPruningRule.java -> src/query-common/src/main/java/org/apache/kylin/query/routing/rules/SegmentPruningRule.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.routing.rules;",
          "21: import java.util.List;",
          "23: import java.util.Set;",
          "25: import org.apache.commons.collections.CollectionUtils;",
          "26: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "27: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "28: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "29: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "30: import org.apache.kylin.metadata.realization.IRealization;",
          "31: import org.apache.kylin.query.routing.Candidate;",
          "33: import org.apache.kylin.query.routing.RoutingRule;",
          "37: import lombok.val;",
          "38: import lombok.extern.slf4j.Slf4j;",
          "40: @Slf4j",
          "41: public class SegmentPruningRule extends RoutingRule {",
          "42:     @Override",
          "59:                 }",
          "62:             }",
          "71:             }",
          "72:         }",
          "73:     }",
          "74: }",
          "",
          "[Removed Lines]",
          "22: import java.util.Map;",
          "32: import org.apache.kylin.query.routing.RealizationPruner;",
          "35: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "36: import io.kyligence.kap.secondstorage.SecondStorageUtil;",
          "43:     public void apply(List<Candidate> candidates) {",
          "44:         val iterator = candidates.iterator();",
          "45:         while (iterator.hasNext()) {",
          "46:             val candidate = iterator.next();",
          "47:             List<IRealization> realizations = candidate.getRealization().getRealizations();",
          "48:             for (IRealization realization : realizations) {",
          "49:                 NDataflow df = (NDataflow) realization;",
          "50:                 val prunedSegments = RealizationPruner.pruneSegments(df, candidate.getCtx());",
          "51:                 Map<String, Set<Long>> secondStorageSegmentLayoutMap = Maps.newHashMap();",
          "52:                 if (SecondStorageUtil.isModelEnable(df.getProject(), df.getId())) {",
          "53:                     for (NDataSegment segment : prunedSegments) {",
          "54:                         Set<Long> chEnableLayoutIds = SecondStorageUtil.listEnableLayoutBySegment(df.getProject(), df.getId(), segment.getId());",
          "55:                         if (CollectionUtils.isNotEmpty(chEnableLayoutIds)) {",
          "56:                             secondStorageSegmentLayoutMap.put(segment.getId(), chEnableLayoutIds);",
          "57:                         }",
          "58:                     }",
          "60:                 candidate.setSecondStorageSegmentLayoutMap(secondStorageSegmentLayoutMap);",
          "61:                 candidate.setPrunedSegments(prunedSegments, df.isStreaming());",
          "63:             if (CollectionUtils.isEmpty(candidate.getPrunedSegments())",
          "64:                     && CollectionUtils.isEmpty(candidate.getPrunedStreamingSegments())) {",
          "65:                 log.info(\"there is no segment to answer sql\");",
          "66:                 val capability = new CapabilityResult();",
          "67:                 capability.capable = true;",
          "68:                 capability.setSelectedCandidate(NLayoutCandidate.EMPTY);",
          "69:                 capability.setSelectedStreamingCandidate(NLayoutCandidate.EMPTY);",
          "70:                 candidate.setCapability(capability);",
          "",
          "[Added Lines]",
          "21: import java.util.ArrayList;",
          "22: import java.util.Calendar;",
          "24: import java.util.Locale;",
          "26: import java.util.TimeZone;",
          "27: import java.util.regex.Pattern;",
          "28: import java.util.stream.Collectors;",
          "30: import org.apache.calcite.plan.RelOptPredicateList;",
          "31: import org.apache.calcite.rel.type.RelDataTypeFamily;",
          "32: import org.apache.calcite.rel.type.RelDataTypeSystem;",
          "33: import org.apache.calcite.rex.RexBuilder;",
          "34: import org.apache.calcite.rex.RexCall;",
          "35: import org.apache.calcite.rex.RexInputRef;",
          "36: import org.apache.calcite.rex.RexLiteral;",
          "37: import org.apache.calcite.rex.RexNode;",
          "38: import org.apache.calcite.rex.RexSimplify;",
          "39: import org.apache.calcite.sql.SqlCollation;",
          "40: import org.apache.calcite.sql.SqlKind;",
          "41: import org.apache.calcite.sql.fun.SqlStdOperatorTable;",
          "42: import org.apache.calcite.sql.type.BasicSqlType;",
          "43: import org.apache.calcite.sql.type.SqlTypeFamily;",
          "44: import org.apache.calcite.sql.type.SqlTypeName;",
          "45: import org.apache.calcite.util.DateString;",
          "46: import org.apache.calcite.util.NlsString;",
          "48: import org.apache.commons.lang3.time.DateUtils;",
          "49: import org.apache.kylin.common.KylinConfig;",
          "50: import org.apache.kylin.common.util.DateFormat;",
          "51: import org.apache.kylin.common.util.Pair;",
          "52: import org.apache.kylin.guava30.shaded.common.collect.ImmutableSet;",
          "53: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "57: import org.apache.kylin.metadata.datatype.DataType;",
          "58: import org.apache.kylin.metadata.model.FunctionDesc;",
          "59: import org.apache.kylin.metadata.model.ISegment;",
          "60: import org.apache.kylin.metadata.model.ISourceAware;",
          "61: import org.apache.kylin.metadata.model.NDataModel;",
          "62: import org.apache.kylin.metadata.model.NDataModelManager;",
          "63: import org.apache.kylin.metadata.model.PartitionDesc;",
          "64: import org.apache.kylin.metadata.model.Segments;",
          "65: import org.apache.kylin.metadata.model.TblColRef;",
          "66: import org.apache.kylin.metadata.project.NProjectManager;",
          "69: import org.apache.kylin.query.relnode.OLAPContext;",
          "72: import org.apache.kylin.query.util.RexUtils;",
          "75: import lombok.var;",
          "81:     private static final TimeZone UTC_ZONE = TimeZone.getTimeZone(\"UTC\");",
          "83:     private static final Pattern DATE_PATTERN = Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\");",
          "84:     private static final Pattern TIMESTAMP_PATTERN = Pattern",
          "85:             .compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2} \\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d*[1-9])?\");",
          "87:     public static final Set<SqlKind> COMPARISON_OP_KIND_SET = ImmutableSet.of(SqlKind.GREATER_THAN,",
          "88:             SqlKind.GREATER_THAN_OR_EQUAL, //",
          "89:             SqlKind.LESS_THAN, SqlKind.LESS_THAN_OR_EQUAL, //",
          "90:             SqlKind.IN, SqlKind.NOT_IN, //",
          "91:             SqlKind.EQUALS, SqlKind.NOT_EQUALS);",
          "94:     public void apply(Candidate candidate) {",
          "95:         List<IRealization> realizations = candidate.getRealization().getRealizations();",
          "96:         for (IRealization realization : realizations) {",
          "97:             NDataflow df = (NDataflow) realization;",
          "98:             Segments<NDataSegment> prunedSegments = pruneSegments(df, candidate.getCtx());",
          "99:             candidate.setPrunedSegments(prunedSegments, df);",
          "100:         }",
          "101:         if (CollectionUtils.isEmpty(candidate.getQueryableSeg().getBatchSegments())",
          "102:                 && CollectionUtils.isEmpty(candidate.getQueryableSeg().getStreamingSegments())) {",
          "103:             log.info(\"{}({}/{}): there is no queryable segments to answer this query.\", this.getClass().getName(),",
          "104:                     candidate.getRealization().getProject(), candidate.getRealization().getCanonicalName());",
          "105:             CapabilityResult capability = new CapabilityResult();",
          "106:             capability.setCapable(true);",
          "107:             capability.setSelectedCandidate(NLayoutCandidate.EMPTY);",
          "108:             capability.setSelectedStreamingCandidate(NLayoutCandidate.EMPTY);",
          "109:             candidate.setCapability(capability);",
          "110:         }",
          "111:     }",
          "113:     public Segments<NDataSegment> pruneSegments(NDataflow dataflow, OLAPContext olapContext) {",
          "114:         Segments<NDataSegment> allReadySegments = dataflow.getQueryableSegments();",
          "115:         if (!NProjectManager.getProjectConfig(dataflow.getProject()).isHeterogeneousSegmentEnabled()) {",
          "116:             return allReadySegments;",
          "117:         }",
          "120:         PartitionDesc partitionCol = getPartitionDesc(dataflow, olapContext);",
          "121:         if (isFullBuildModel(partitionCol)) {",
          "122:             log.info(\"No partition column or partition column format is null.\");",
          "123:             return allReadySegments;",
          "124:         }",
          "127:         val relOptCluster = olapContext.firstTableScan.getCluster();",
          "128:         val rexBuilder = relOptCluster.getRexBuilder();",
          "129:         val rexSimplify = new RexSimplify(relOptCluster.getRexBuilder(), RelOptPredicateList.EMPTY, true,",
          "130:                 relOptCluster.getPlanner().getExecutor());",
          "132:         var filterConditions = olapContext.getExpandedFilterConditions();",
          "133:         val dateFormat = partitionCol.getPartitionDateFormat();",
          "134:         val partitionColRef = partitionCol.getPartitionDateColumnRef();",
          "135:         RexInputRef partitionColInputRef = null;",
          "136:         if (needRewritePartitionColInFilter(dataflow, olapContext)) {",
          "137:             partitionColInputRef = RexUtils.transformColumn2RexInputRef(partitionColRef, olapContext.allTableScans);",
          "138:             try {",
          "139:                 val firstSegmentRanges = transformSegment2RexCall(allReadySegments.get(0), dateFormat, rexBuilder,",
          "140:                         partitionColInputRef, partitionColRef.getType(), dataflow.isStreaming());",
          "141:                 RelDataTypeFamily segmentLiteralTypeFamily = getSegmentLiteralTypeFamily(firstSegmentRanges.getFirst());",
          "142:                 List<RexNode> filterRexNodeList = new ArrayList<>();",
          "143:                 for (RexNode filterCondition : filterConditions) {",
          "144:                     RexNode rexNode = rewriteRexCall(filterCondition, rexBuilder, segmentLiteralTypeFamily,",
          "145:                             partitionColInputRef, dateFormat);",
          "146:                     filterRexNodeList.add(rexNode);",
          "147:                 }",
          "148:                 filterConditions = filterRexNodeList;",
          "149:             } catch (Exception ex) {",
          "150:                 log.warn(\"Segment pruning error: \", ex);",
          "151:                 if (canPruneSegmentsForMaxMeasure(dataflow, olapContext, partitionColRef)) {",
          "152:                     return selectSegmentsForMaxMeasure(dataflow);",
          "154:                 return allReadySegments;",
          "155:             }",
          "156:         }",
          "158:         RexNode simplifiedSqlFilter = rexSimplify.simplifyAnds(filterConditions);",
          "159:         if (simplifiedSqlFilter.isAlwaysFalse()) {",
          "160:             log.info(\"SQL filter condition is always false, pruning all ready segments\");",
          "161:             olapContext.storageContext.setFilterCondAlwaysFalse(true);",
          "162:             return Segments.empty();",
          "163:         }",
          "166:         if (canPruneSegmentsForMaxMeasure(dataflow, olapContext, partitionColRef)) {",
          "167:             return selectSegmentsForMaxMeasure(dataflow);",
          "168:         }",
          "170:         if (!olapContext.filterColumns.contains(partitionColRef)) {",
          "171:             log.info(\"Filter columns do not contain partition column\");",
          "172:             return allReadySegments;",
          "173:         }",
          "175:         if (simplifiedSqlFilter.isAlwaysTrue()) {",
          "176:             log.info(\"SQL filter condition is always true, pruning no segment\");",
          "177:             return allReadySegments;",
          "178:         }",
          "181:         Segments<NDataSegment> selectedSegments = pruneSegmentsByPartitionFilter(dataflow, olapContext, rexSimplify,",
          "182:                 partitionColInputRef, simplifiedSqlFilter);",
          "183:         log.info(\"Scan segment.size: {} after segment pruning\", selectedSegments.size());",
          "184:         return selectedSegments;",
          "185:     }",
          "187:     private Segments<NDataSegment> pruneSegmentsByPartitionFilter(NDataflow dataflow, OLAPContext olapContext,",
          "188:             RexSimplify rexSimplify, RexInputRef partitionColInputRef, RexNode simplifiedSqlFilter) {",
          "189:         Segments<NDataSegment> selectedSegments = new Segments<>();",
          "190:         PartitionDesc partitionCol = getPartitionDesc(dataflow, olapContext);",
          "191:         RexBuilder rexBuilder = olapContext.firstTableScan.getCluster().getRexBuilder();",
          "192:         for (NDataSegment dataSegment : dataflow.getQueryableSegments()) {",
          "193:             try {",
          "194:                 val segmentRanges = transformSegment2RexCall(dataSegment, partitionCol.getPartitionDateFormat(),",
          "195:                         rexBuilder, partitionColInputRef, partitionCol.getPartitionDateColumnRef().getType(),",
          "196:                         dataflow.isStreaming());",
          "198:                 val segmentStartPredicate = RelOptPredicateList.of(rexBuilder,",
          "199:                         Lists.newArrayList(segmentRanges.getFirst()));",
          "200:                 var simplifiedWithPredicate = rexSimplify.withPredicates(segmentStartPredicate)",
          "201:                         .simplify(simplifiedSqlFilter);",
          "202:                 if (simplifiedWithPredicate.isAlwaysFalse()) {",
          "203:                     continue;",
          "204:                 }",
          "206:                 val segmentEndPredicate = RelOptPredicateList.of(rexBuilder,",
          "207:                         Lists.newArrayList(segmentRanges.getSecond()));",
          "208:                 simplifiedWithPredicate = rexSimplify.withPredicates(segmentEndPredicate)",
          "209:                         .simplify(simplifiedWithPredicate);",
          "210:                 if (!simplifiedWithPredicate.isAlwaysFalse()) {",
          "211:                     selectedSegments.add(dataSegment);",
          "212:                 }",
          "213:             } catch (Exception ex) {",
          "214:                 log.warn(\"Segment pruning error: \", ex);",
          "215:                 selectedSegments.add(dataSegment);",
          "216:             }",
          "217:         }",
          "218:         return selectedSegments;",
          "219:     }",
          "221:     private boolean needRewritePartitionColInFilter(NDataflow dataflow, OLAPContext olapContext) {",
          "222:         return !dataflow.getQueryableSegments().isEmpty() && olapContext.filterColumns",
          "223:                 .contains(getPartitionDesc(dataflow, olapContext).getPartitionDateColumnRef());",
          "224:     }",
          "226:     private boolean isFullBuildModel(PartitionDesc partitionCol) {",
          "227:         return PartitionDesc.isEmptyPartitionDesc(partitionCol) || partitionCol.getPartitionDateFormat() == null;",
          "228:     }",
          "230:     private Segments<NDataSegment> selectSegmentsForMaxMeasure(NDataflow dataflow) {",
          "231:         Segments<NDataSegment> selectedSegments = new Segments<>();",
          "232:         long days = dataflow.getConfig().getMaxMeasureSegmentPrunerBeforeDays();",
          "234:         Segments<NDataSegment> allReadySegments = dataflow.getQueryableSegments();",
          "235:         long maxDt = allReadySegments.getLatestReadySegment().getTSRange().getEnd();",
          "236:         long minDt = maxDt - DateUtils.MILLIS_PER_DAY * days;",
          "237:         for (int i = allReadySegments.size() - 1; i >= 0; i--) {",
          "238:             if (allReadySegments.get(i).getTSRange().getEnd() > minDt) {",
          "239:                 selectedSegments.add(allReadySegments.get(i));",
          "240:             } else {",
          "241:                 break;",
          "242:             }",
          "243:         }",
          "244:         log.info(\"Scan segment size: {} after max measure segment pruner. The before days: {}. Passed on segment: {}\",",
          "245:                 selectedSegments.size(), days,",
          "246:                 selectedSegments.stream().map(ISegment::getName).collect(Collectors.joining(\",\")));",
          "247:         return selectedSegments;",
          "248:     }",
          "250:     private boolean canPruneSegmentsForMaxMeasure(NDataflow dataflow, OLAPContext olapContext,",
          "251:             TblColRef partitionColRef) {",
          "252:         if (dataflow.getConfig().getMaxMeasureSegmentPrunerBeforeDays() < 0) {",
          "253:             return false;",
          "254:         }",
          "256:         if (CollectionUtils.isNotEmpty(olapContext.getGroupByColumns())",
          "257:                 && !olapContext.getGroupByColumns().stream().allMatch(partitionColRef::equals)) {",
          "258:             return false;",
          "259:         }",
          "261:         if (CollectionUtils.isEmpty(olapContext.aggregations)) {",
          "262:             return false;",
          "263:         }",
          "265:         for (FunctionDesc agg : olapContext.aggregations) {",
          "266:             if (FunctionDesc.FUNC_MAX.equalsIgnoreCase(agg.getExpression())",
          "267:                     && !partitionColRef.equals(agg.getParameters().get(0).getColRef())) {",
          "268:                 return false;",
          "269:             }",
          "270:             if (!FunctionDesc.FUNC_MAX.equalsIgnoreCase(agg.getExpression())",
          "271:                     && CollectionUtils.isNotEmpty(agg.getParameters())) {",
          "272:                 return false;",
          "273:             }",
          "274:         }",
          "276:         return true;",
          "277:     }",
          "279:     private PartitionDesc getPartitionDesc(NDataflow dataflow, OLAPContext olapContext) {",
          "280:         NDataModel model = dataflow.getModel();",
          "281:         boolean isStreamingFactTable = olapContext.firstTableScan.getOlapTable().getSourceTable()",
          "282:                 .getSourceType() == ISourceAware.ID_STREAMING;",
          "283:         boolean isBatchFusionModel = isStreamingFactTable && dataflow.getModel().isFusionModel()",
          "284:                 && !dataflow.isStreaming();",
          "285:         if (!isBatchFusionModel) {",
          "286:             return model.getPartitionDesc();",
          "287:         }",
          "288:         return NDataModelManager.getInstance(KylinConfig.getInstanceFromEnv(), dataflow.getProject())",
          "289:                 .getDataModelDesc(model.getFusionId()).getPartitionDesc();",
          "290:     }",
          "292:     private RexNode rewriteRexCall(RexNode rexNode, RexBuilder rexBuilder, RelDataTypeFamily relDataTypeFamily,",
          "293:             RexInputRef partitionColInputRef, String dateFormat) {",
          "294:         if (!(rexNode instanceof RexCall)) {",
          "295:             return rexNode;",
          "296:         }",
          "298:         RexCall rewriteRexCall = (RexCall) rexNode;",
          "300:         if (COMPARISON_OP_KIND_SET.contains(rewriteRexCall.getOperator().kind)) {",
          "301:             return needRewrite(partitionColInputRef, rewriteRexCall)",
          "302:                     ? rewriteRexNodeLiteral(rexNode, rexBuilder, relDataTypeFamily, dateFormat)",
          "303:                     : rexNode;",
          "304:         } else {",
          "305:             List<RexNode> opList = rewriteRexCall.getOperands().stream()",
          "306:                     .map(rex -> rewriteRexCall(rex, rexBuilder, relDataTypeFamily, partitionColInputRef, dateFormat))",
          "307:                     .collect(Collectors.toList());",
          "308:             return rexBuilder.makeCall(rewriteRexCall.getOperator(), opList);",
          "309:         }",
          "310:     }",
          "312:     private boolean needRewrite(RexInputRef partitionColInputRef, RexCall rewriteRexCall) {",
          "313:         boolean isContainsPartitionColumn = false;",
          "314:         boolean isContainsLiteral = false;",
          "315:         for (RexNode sonRexNode : rewriteRexCall.getOperands()) {",
          "316:             if (sonRexNode instanceof RexInputRef) {",
          "317:                 RexInputRef rexInputRef = (RexInputRef) sonRexNode;",
          "318:                 String columnName = rexInputRef.getName();",
          "319:                 if (partitionColInputRef.getName().contains(columnName)) {",
          "320:                     isContainsPartitionColumn = true;",
          "321:                 }",
          "322:             } else if (sonRexNode instanceof RexLiteral) {",
          "323:                 isContainsLiteral = true;",
          "324:             }",
          "325:         }",
          "326:         return isContainsPartitionColumn && isContainsLiteral;",
          "327:     }",
          "329:     private RexNode rewriteRexNodeLiteral(RexNode rexNodeLiteral, RexBuilder rexBuilder,",
          "330:             RelDataTypeFamily relDataTypeFamily, String dateFormat) {",
          "331:         if (rexNodeLiteral instanceof RexCall) {",
          "332:             try {",
          "333:                 RexCall rexCall = (RexCall) rexNodeLiteral;",
          "334:                 List<RexNode> oldRexNodes = rexCall.getOperands();",
          "335:                 List<RexNode> newRexNodes = new ArrayList<>();",
          "336:                 for (RexNode rexNode : oldRexNodes) {",
          "337:                     newRexNodes.add(transform(rexNode, rexBuilder, relDataTypeFamily, dateFormat));",
          "338:                 }",
          "339:                 rexNodeLiteral = rexBuilder.makeCall(rexCall.getOperator(), newRexNodes);",
          "340:             } catch (Exception e) {",
          "341:                 log.warn(\"RewriteRexNodeLiteral failed rexNodeLiteral:{} relDataTypeFamily:{} dateFormat:{}\",",
          "342:                         rexNodeLiteral, relDataTypeFamily.toString(), dateFormat, e);",
          "343:             }",
          "344:         }",
          "345:         return rexNodeLiteral;",
          "346:     }",
          "348:     private RexNode transform(RexNode rexNode, RexBuilder rexBuilder, RelDataTypeFamily relDataTypeFamily,",
          "349:             String dateFormat) {",
          "350:         if (!(rexNode instanceof RexLiteral)) {",
          "351:             return rexNode;",
          "352:         }",
          "354:         RexLiteral rexLiteral = (RexLiteral) rexNode;",
          "355:         RexNode newLiteral;",
          "356:         if (SqlTypeFamily.DATE == relDataTypeFamily) {",
          "357:             String dateStr = normalization(dateFormat, rexLiteral);",
          "358:             newLiteral = rexBuilder.makeLiteral(new DateString(dateStr),",
          "359:                     new BasicSqlType(RelDataTypeSystem.DEFAULT, SqlTypeName.DATE), true);",
          "360:         } else if (SqlTypeFamily.CHARACTER == relDataTypeFamily) {",
          "361:             String dateStr = normalization(dateFormat, rexLiteral);",
          "362:             newLiteral = rexBuilder.makeLiteral(new NlsString(dateStr, \"UTF-16LE\", SqlCollation.IMPLICIT),",
          "363:                     new BasicSqlType(RelDataTypeSystem.DEFAULT, SqlTypeName.CHAR), true);",
          "364:         } else {",
          "365:             newLiteral = rexLiteral;",
          "366:         }",
          "367:         return newLiteral;",
          "368:     }",
          "370:     private String normalization(String dateFormat, RexLiteral rexLiteral) {",
          "371:         RelDataTypeFamily typeFamily = rexLiteral.getType().getFamily();",
          "372:         if (SqlTypeFamily.DATE == typeFamily || SqlTypeFamily.TIMESTAMP == typeFamily) {",
          "374:             long timeInMillis = ((Calendar) rexLiteral.getValue()).getTimeInMillis();",
          "375:             String dateStr = DateFormat.formatToDateStr(timeInMillis, dateFormat, UTC_ZONE);",
          "376:             if (!rexLiteral.toString().equals(dateStr)) {",
          "377:                 log.warn(\"Normalize RexLiteral({}) to {}\", rexLiteral, dateStr);",
          "378:             }",
          "379:             return dateStr;",
          "380:         }",
          "381:         return rexLiteral.getValue2().toString();",
          "382:     }",
          "384:     private RelDataTypeFamily getSegmentLiteralTypeFamily(RexNode rangeRexNode) {",
          "385:         if (rangeRexNode instanceof RexCall) {",
          "386:             RexCall rexCall = (RexCall) rangeRexNode;",
          "387:             List<RexNode> oldRexNodes = rexCall.getOperands();",
          "388:             for (RexNode rexNode : oldRexNodes) {",
          "389:                 if (rexNode instanceof RexLiteral) {",
          "390:                     return rexNode.getType().getFamily();",
          "391:                 }",
          "392:             }",
          "393:         }",
          "394:         return null;",
          "395:     }",
          "397:     private Pair<RexNode, RexNode> transformSegment2RexCall(NDataSegment dataSegment, String dateFormat,",
          "398:             RexBuilder rexBuilder, RexInputRef partitionColInputRef, DataType partitionColType, boolean isStreaming) {",
          "399:         String start;",
          "400:         String end;",
          "401:         if (dataSegment.isOffsetCube()) {",
          "402:             start = DateFormat.formatToDateStr(dataSegment.getKSRange().getStart(), dateFormat);",
          "403:             end = DateFormat.formatToDateStr(dataSegment.getKSRange().getEnd(), dateFormat);",
          "404:         } else {",
          "405:             Pair<String, String> pair = transformDateType(dataSegment, partitionColType, dateFormat);",
          "406:             start = pair.getFirst();",
          "407:             end = pair.getSecond();",
          "408:         }",
          "410:         val startRexLiteral = RexUtils.transformValue2RexLiteral(rexBuilder, start, partitionColType);",
          "411:         val endRexLiteral = RexUtils.transformValue2RexLiteral(rexBuilder, end, partitionColType);",
          "412:         val greaterThanOrEqualCall = rexBuilder.makeCall(SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,",
          "413:                 Lists.newArrayList(partitionColInputRef, startRexLiteral));",
          "416:         val sqlOperator = isStreaming ? SqlStdOperatorTable.LESS_THAN_OR_EQUAL : SqlStdOperatorTable.LESS_THAN;",
          "417:         val lessCall = rexBuilder.makeCall(sqlOperator, Lists.newArrayList(partitionColInputRef, endRexLiteral));",
          "418:         return Pair.newPair(greaterThanOrEqualCall, lessCall);",
          "419:     }",
          "421:     private Pair<String, String> transformDateType(NDataSegment dataSegment, DataType colType, String dateFormat) {",
          "422:         long segmentStartTs = dataSegment.getTSRange().getStart();",
          "423:         long segmentEndTs = dataSegment.getTSRange().getEnd();",
          "424:         String formattedStart = DateFormat.formatToDateStr(segmentStartTs, dateFormat);",
          "425:         String formattedEnd = DateFormat.formatToDateStr(segmentEndTs, dateFormat);",
          "426:         String start = checkAndReformatDateType(formattedStart, segmentStartTs, colType);",
          "427:         String end = checkAndReformatDateType(formattedEnd, segmentEndTs, colType);",
          "428:         return Pair.newPair(start, end);",
          "429:     }",
          "431:     private static String checkAndReformatDateType(String formattedValue, long segmentTs, DataType colType) {",
          "432:         switch (colType.getName()) {",
          "433:         case DataType.DATE:",
          "434:             if (DATE_PATTERN.matcher(formattedValue).matches()) {",
          "435:                 return formattedValue;",
          "437:             return DateFormat.formatToDateStr(segmentTs, DateFormat.DEFAULT_DATE_PATTERN);",
          "438:         case DataType.TIMESTAMP:",
          "439:             if (TIMESTAMP_PATTERN.matcher(formattedValue).matches()) {",
          "440:                 return formattedValue;",
          "442:             return DateFormat.formatToDateStr(segmentTs, DateFormat.DEFAULT_DATETIME_PATTERN_WITHOUT_MILLISECONDS);",
          "443:         case DataType.VARCHAR:",
          "444:         case DataType.STRING:",
          "445:         case DataType.INTEGER:",
          "446:         case DataType.BIGINT:",
          "447:             return formattedValue;",
          "448:         default:",
          "449:             throw new IllegalArgumentException(",
          "450:                     String.format(Locale.ROOT, \"%s data type is not supported for partition column\", colType));",
          "",
          "---------------"
        ],
        "src/query-common/src/main/java/org/apache/kylin/query/util/RexUtils.java||src/query-common/src/main/java/org/apache/kylin/query/util/RexUtils.java": [
          "File: src/query-common/src/main/java/org/apache/kylin/query/util/RexUtils.java -> src/query-common/src/main/java/org/apache/kylin/query/util/RexUtils.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.Collections;",
          "22: import java.util.HashSet;",
          "23: import java.util.List;",
          "24: import java.util.Set;",
          "25: import java.util.concurrent.atomic.AtomicInteger;",
          "26: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: import java.util.Locale;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: import org.apache.calcite.rel.core.Project;",
          "31: import org.apache.calcite.rel.core.TableScan;",
          "32: import org.apache.calcite.rel.core.Values;",
          "33: import org.apache.calcite.rex.RexCall;",
          "34: import org.apache.calcite.rex.RexInputRef;",
          "35: import org.apache.calcite.rex.RexNode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import org.apache.calcite.rex.RexBuilder;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38: import org.apache.calcite.rex.RexVisitorImpl;",
          "39: import org.apache.calcite.sql.SqlKind;",
          "40: import org.apache.calcite.sql.SqlOperator;",
          "41: import org.apache.kylin.query.relnode.KapAggregateRel;",
          "42: import org.apache.kylin.query.relnode.KapJoinRel;",
          "43: import org.apache.kylin.query.relnode.KapProjectRel;",
          "47: public class RexUtils {",
          "",
          "[Removed Lines]",
          "45: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "[Added Lines]",
          "43: import org.apache.calcite.sql.type.SqlTypeName;",
          "44: import org.apache.calcite.util.DateString;",
          "45: import org.apache.calcite.util.TimestampString;",
          "46: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "47: import org.apache.kylin.metadata.datatype.DataType;",
          "48: import org.apache.kylin.metadata.model.TblColRef;",
          "52: import org.apache.kylin.query.relnode.OLAPContext;",
          "53: import org.apache.kylin.query.relnode.OLAPTableScan;",
          "55: import lombok.val;",
          "56: import lombok.var;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "248:         return predicate;",
          "249:     }",
          "250: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262:     public static RexNode transformValue2RexLiteral(RexBuilder rexBuilder, String value, DataType colType) {",
          "263:         switch (colType.getName()) {",
          "264:         case DataType.DATE:",
          "265:             return rexBuilder.makeDateLiteral(new DateString(value));",
          "266:         case DataType.TIMESTAMP:",
          "267:             var relDataType = rexBuilder.getTypeFactory().createSqlType(SqlTypeName.TIMESTAMP);",
          "268:             return rexBuilder.makeTimestampLiteral(new TimestampString(value), relDataType.getPrecision());",
          "269:         case DataType.VARCHAR:",
          "270:         case DataType.STRING:",
          "271:             return rexBuilder.makeLiteral(value);",
          "272:         case DataType.INTEGER:",
          "273:             relDataType = rexBuilder.getTypeFactory().createSqlType(SqlTypeName.INTEGER);",
          "274:             return rexBuilder.makeLiteral(Integer.parseInt(value), relDataType, false);",
          "275:         case DataType.BIGINT:",
          "276:             relDataType = rexBuilder.getTypeFactory().createSqlType(SqlTypeName.BIGINT);",
          "277:             return rexBuilder.makeLiteral(Long.parseLong(value), relDataType, false);",
          "278:         default:",
          "279:             throw new IllegalArgumentException(",
          "280:                     String.format(Locale.ROOT, \"%s data type is not supported for partition column\", colType));",
          "281:         }",
          "282:     }",
          "284:     public static RexInputRef transformColumn2RexInputRef(TblColRef partitionCol, Set<OLAPTableScan> tableScans) {",
          "285:         for (OLAPTableScan tableScan : tableScans) {",
          "286:             val tableIdentity = tableScan.getTableName();",
          "287:             if (tableIdentity.equals(partitionCol.getTable())) {",
          "288:                 val index = tableScan.getColumnRowType().getAllColumns().indexOf(partitionCol);",
          "289:                 if (index >= 0) {",
          "290:                     return OLAPContext.createUniqueInputRefAmongTables(tableScan, index, tableScans);",
          "291:                 }",
          "292:                 throw new IllegalStateException(String.format(Locale.ROOT, \"Cannot find column %s in all tableScans\",",
          "293:                         partitionCol.getIdentity()));",
          "294:             }",
          "295:         }",
          "297:         throw new IllegalStateException(",
          "298:                 String.format(Locale.ROOT, \"Cannot find column %s in all tableScans\", partitionCol.getIdentity()));",
          "299:     }",
          "",
          "---------------"
        ],
        "src/query/src/main/java/org/apache/kylin/query/engine/QueryExec.java||src/query/src/main/java/org/apache/kylin/query/engine/QueryExec.java": [
          "File: src/query/src/main/java/org/apache/kylin/query/engine/QueryExec.java -> src/query/src/main/java/org/apache/kylin/query/engine/QueryExec.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:         Collection<RelOptRule> postOptRules = new LinkedHashSet<>();",
          "235:         if (kylinConfig.isConvertSumExpressionEnabled()) {",
          "236:             postOptRules.addAll(HepUtils.SumExprRules);",
          "",
          "[Removed Lines]",
          "233:     private List<RelNode> postOptimize(RelNode node) {",
          "",
          "[Added Lines]",
          "233:     public List<RelNode> postOptimize(RelNode node) {",
          "",
          "---------------"
        ],
        "src/query/src/main/java/org/apache/kylin/query/util/FirstRoundContextCutStrategy.java||src/query/src/main/java/org/apache/kylin/query/util/FirstRoundContextCutStrategy.java": [
          "File: src/query/src/main/java/org/apache/kylin/query/util/FirstRoundContextCutStrategy.java -> src/query/src/main/java/org/apache/kylin/query/util/FirstRoundContextCutStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.util.List;",
          "23: import org.apache.calcite.rel.RelNode;",
          "26: import org.apache.kylin.query.relnode.ContextUtil;",
          "27: import org.apache.kylin.query.relnode.KapRel;",
          "31: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "24: import org.apache.kylin.query.relnode.OLAPContext;",
          "25: import org.apache.kylin.query.relnode.OLAPRel;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "[Added Lines]",
          "24: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "27: import org.apache.kylin.query.relnode.OLAPContext;",
          "28: import org.apache.kylin.query.relnode.OLAPRel;",
          "",
          "---------------"
        ],
        "src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java||src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java": [
          "File: src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java -> src/query/src/main/java/org/apache/kylin/query/util/QueryContextCutter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: import org.apache.kylin.metadata.model.TableDesc;",
          "31: import org.apache.kylin.metadata.realization.NoRealizationFoundException;",
          "32: import org.apache.kylin.metadata.realization.NoStreamingRealizationFoundException;",
          "33: import org.apache.kylin.query.relnode.OLAPContext;",
          "34: import org.apache.kylin.query.relnode.OLAPRel;",
          "35: import org.apache.kylin.query.relnode.OLAPTableScan;",
          "36: import org.apache.kylin.query.routing.RealizationChooser;",
          "42: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "37: import org.apache.kylin.query.relnode.ContextUtil;",
          "38: import org.apache.kylin.query.relnode.KapRel;",
          "39: import org.slf4j.Logger;",
          "40: import org.slf4j.LoggerFactory;",
          "",
          "[Added Lines]",
          "33: import org.apache.kylin.query.relnode.ContextUtil;",
          "34: import org.apache.kylin.query.relnode.KapRel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: public class QueryContextCutter {",
          "46:     private static final int MAX_RETRY_TIMES_OF_CONTEXT_CUT = 10;",
          "",
          "[Removed Lines]",
          "48:     private static final Logger logger = LoggerFactory.getLogger(QueryContextCutter.class);",
          "",
          "[Added Lines]",
          "46:     private QueryContextCutter() {",
          "47:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "59:         FirstRoundContextCutStrategy firstRoundStrategy = new FirstRoundContextCutStrategy();",
          "63:         int retryCutTimes = 0;",
          "64:         while (retryCutTimes++ < MAX_RETRY_TIMES_OF_CONTEXT_CUT) {",
          "65:             try {",
          "66:                 return collectContextInfoAndSelectRealization(root);",
          "69:                     checkStreamingTableWithAutoModeling();",
          "71:                     throw e;",
          "72:                 }",
          "94:                 }",
          "95:             }",
          "96:         }",
          "98:         ContextUtil.dumpCalcitePlan(",
          "99:                 \"cannot find proper realizations After re-cut \" + MAX_RETRY_TIMES_OF_CONTEXT_CUT + \" times\", root, log);",
          "101:         throw new NoRealizationFoundException(",
          "102:                 \"too many unmatched join in this query, please check it or create correspond realization\");",
          "103:     }",
          "",
          "[Removed Lines]",
          "58:     public static List<OLAPContext> selectRealization(RelNode root, boolean isForAutoModeling) {",
          "60:         QueryReCutContextStrategy reCutContextStrategy = null;",
          "62:         new QueryContextCutter(firstRoundStrategy).cutContext((KapRel) root.getInput(0), root);",
          "67:             } catch (NoStreamingRealizationFoundException e) {",
          "68:                 if (isForAutoModeling) {",
          "70:                 } else {",
          "73:             } catch (NoRealizationFoundException e) {",
          "74:                 if (isForAutoModeling) {",
          "75:                     throw e;",
          "76:                 }",
          "78:                 int ctxSeq = reCutContextStrategy == null ? OLAPContext.getThreadLocalContexts().size()",
          "79:                         : reCutContextStrategy.getRecutContextImplementor().getCtxSeq();",
          "80:                 reCutContextStrategy = new QueryReCutContextStrategy(",
          "81:                         new ICutContextStrategy.CutContextImplementor(ctxSeq));",
          "82:                 for (OLAPContext context : ContextUtil.listContextsHavingScan()) {",
          "83:                     if (context.isHasSelected() && context.realization == null",
          "84:                             && (!context.isHasPreCalcJoin() || context.getModelAlias() != null)) {",
          "85:                         throw e;",
          "86:                     } else if (context.isHasSelected() && context.realization == null) {",
          "87:                         new QueryContextCutter(reCutContextStrategy).cutContext(context.getTopNode(), root);",
          "88:                         ContextUtil.setSubContexts(root.getInput(0));",
          "89:                         continue;",
          "90:                     } else if (context.realization != null) {",
          "91:                         context.unfixModel();",
          "92:                     }",
          "93:                     context.clearCtxInfo();",
          "100:         logger.error(\"too many unmatched join in this query, please check it or create correspond realization\");",
          "",
          "[Added Lines]",
          "57:     public static List<OLAPContext> selectRealization(RelNode root, boolean isReCutBanned) {",
          "59:         QueryReCutContextStrategy reCutStrategy = new QueryReCutContextStrategy();",
          "61:         QueryContextCutter.cutContext(firstRoundStrategy, (KapRel) root.getInput(0), root);",
          "66:             } catch (NoRealizationFoundException | NoStreamingRealizationFoundException e) {",
          "67:                 if (isReCutBanned && e instanceof NoStreamingRealizationFoundException) {",
          "69:                 } else if (isReCutBanned) {",
          "72:                 reCutStrategy.tryCutToSmallerContexts(root, e);",
          "73:             } finally {",
          "75:                 if (isReCutBanned) {",
          "76:                     ContextUtil.listContextsHavingScan().forEach(olapContext -> {",
          "77:                         if (olapContext.realization != null) {",
          "78:                             olapContext.unfixModel();",
          "79:                         }",
          "80:                     });",
          "87:         log.error(\"too many unmatched join in this query, please check it or create correspond realization\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:         List<OLAPContext> contexts = ContextUtil.listContextsHavingScan();",
          "113:         for (OLAPContext olapContext : contexts) {",
          "115:         }",
          "117:         long selectLayoutStartTime = System.currentTimeMillis();",
          "",
          "[Removed Lines]",
          "114:             logger.info(\"Context for realization matching: {}\", olapContext);",
          "",
          "[Added Lines]",
          "101:             olapContext.setHasSelected(true);",
          "102:             log.info(\"Context for realization matching: {}\", olapContext);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:         } else {",
          "121:             RealizationChooser.selectLayoutCandidate(contexts);",
          "122:         }",
          "124:                 System.currentTimeMillis() - selectLayoutStartTime);",
          "125:         QueryContext.current().record(\"end select realization\");",
          "126:         return contexts;",
          "",
          "[Removed Lines]",
          "123:         logger.info(\"select layout candidate for {} olapContext cost {} ms\", contexts.size(),",
          "",
          "[Added Lines]",
          "111:         log.info(\"select layout candidate for {} olapContext cost {} ms\", contexts.size(),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "138:         if (strategy.needCutOff(rootOfSubCtxTree)) {",
          "139:             strategy.cutOffContext(rootOfSubCtxTree, queryRoot);",
          "140:         }",
          "",
          "[Removed Lines]",
          "131:     private ICutContextStrategy strategy;",
          "133:     private QueryContextCutter(ICutContextStrategy cutContextStrategy) {",
          "134:         this.strategy = cutContextStrategy;",
          "135:     }",
          "137:     private void cutContext(OLAPRel rootOfSubCtxTree, RelNode queryRoot) {",
          "",
          "[Added Lines]",
          "119:     static void cutContext(ICutContextStrategy strategy, OLAPRel rootOfSubCtxTree, RelNode queryRoot) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "151:                 TableDesc tableDesc = tableScan.getTableRef().getTableDesc();",
          "152:                 if (ISourceAware.ID_STREAMING == tableDesc.getSourceType()",
          "153:                         && tableDesc.getKafkaConfig().hasBatchTable()) {",
          "156:                 }",
          "157:             }",
          "158:         }",
          "",
          "[Removed Lines]",
          "154:                     throw new NoStreamingRealizationFoundException(STREAMING_TABLE_NOT_SUPPORT_AUTO_MODELING, String",
          "155:                             .format(Locale.ROOT, MsgPicker.getMsg().getStreamingTableNotSupportAutoModeling()));",
          "",
          "[Added Lines]",
          "136:                     throw new NoStreamingRealizationFoundException(STREAMING_TABLE_NOT_SUPPORT_AUTO_MODELING,",
          "137:                             String.format(Locale.ROOT, MsgPicker.getMsg().getStreamingTableNotSupportAutoModeling()));",
          "",
          "---------------"
        ],
        "src/query/src/main/java/org/apache/kylin/query/util/QueryReCutContextStrategy.java||src/query/src/main/java/org/apache/kylin/query/util/QueryReCutContextStrategy.java": [
          "File: src/query/src/main/java/org/apache/kylin/query/util/QueryReCutContextStrategy.java -> src/query/src/main/java/org/apache/kylin/query/util/QueryReCutContextStrategy.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.query.util;",
          "21: import java.util.List;",
          "23: import org.apache.calcite.rel.RelNode;",
          "24: import org.apache.kylin.query.relnode.OLAPContext;",
          "25: import org.apache.kylin.query.relnode.OLAPRel;",
          "26: import org.apache.kylin.query.relnode.OLAPTableScan;",
          "30: public class QueryReCutContextStrategy implements ICutContextStrategy {",
          "37:     @Override",
          "38:     public List<OLAPRel> cutOffContext(OLAPRel rootRel, RelNode parentOfRoot) {",
          "",
          "[Removed Lines]",
          "28: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "31:     private CutContextImplementor cutImplementor;",
          "33:     public QueryReCutContextStrategy(CutContextImplementor recutContextImplementor) {",
          "34:         this.cutImplementor = recutContextImplementor;",
          "35:     }",
          "",
          "[Added Lines]",
          "22: import java.util.Objects;",
          "25: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "26: import org.apache.kylin.query.relnode.ContextUtil;",
          "31: import lombok.Getter;",
          "32: import lombok.Setter;",
          "34: @Getter",
          "35: @Setter",
          "38:     private CutContextImplementor reCutter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:         }",
          "43:         OLAPContext originCtx = rootRel.getContext();",
          "45:         OLAPContext.clearThreadLocalContextById(originCtx.id);",
          "46:         return Lists.newArrayList(rootRel);",
          "47:     }",
          "",
          "[Removed Lines]",
          "44:         cutImplementor.visitChild(rootRel);",
          "",
          "[Added Lines]",
          "47:         reCutter.visitChild(rootRel);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:         return rootRel.getContext() != null && rootRel.getContext().isHasJoin();",
          "52:     }",
          "56:     }",
          "57: }",
          "",
          "[Removed Lines]",
          "54:     public CutContextImplementor getRecutContextImplementor() {",
          "55:         return cutImplementor;",
          "",
          "[Added Lines]",
          "57:     void tryCutToSmallerContexts(RelNode root, RuntimeException e) {",
          "58:         ICutContextStrategy.CutContextImplementor cutter = getReCutter() == null",
          "59:                 ? new ICutContextStrategy.CutContextImplementor(",
          "60:                         Objects.requireNonNull(OLAPContext.getThreadLocalContexts()).size())",
          "61:                 : new ICutContextStrategy.CutContextImplementor(getReCutter().getCtxSeq());",
          "62:         setReCutter(cutter);",
          "63:         for (OLAPContext context : ContextUtil.listContextsHavingScan()) {",
          "64:             if (context.isHasSelected() && context.realization == null",
          "65:                     && (!context.isHasPreCalcJoin() || context.getModelAlias() != null)) {",
          "66:                 throw e;",
          "67:             } else if (context.isHasSelected() && context.realization == null) {",
          "68:                 QueryContextCutter.cutContext(this, context.getTopNode(), root);",
          "69:                 ContextUtil.setSubContexts(root.getInput(0));",
          "70:                 continue;",
          "71:             } else if (context.realization != null) {",
          "72:                 context.unfixModel();",
          "73:             }",
          "74:             context.clearCtxInfo();",
          "75:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b484fd4e4edce6b4469cd55661d9897ff04a9b1",
      "candidate_info": {
        "commit_hash": "1b484fd4e4edce6b4469cd55661d9897ff04a9b1",
        "repo": "apache/kylin",
        "commit_url": "https://github.com/apache/kylin/commit/1b484fd4e4edce6b4469cd55661d9897ff04a9b1",
        "files": [
          "src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataLoadingRangeManagerTest.java",
          "src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataflowTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/metadata/MetadataPerfTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/newten/ExactlyMatchTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java",
          "src/kylin-it/src/test/resources/ut_meta/agg_exact_match/metadata/_global/project/agg_match.json",
          "src/kylin-it/src/test/resources/ut_meta/agg_exact_match/metadata/agg_match/dataflow/c9ddd37e-c870-4ccf-a131-5eef8fe6cb7e.json",
          "src/kylin-it/src/test/resources/ut_meta/agg_exact_match/metadata/agg_match/index_plan/c9ddd37e-c870-4ccf-a131-5eef8fe6cb7e.json",
          "src/kylin-it/src/test/resources/ut_meta/agg_exact_match/metadata/agg_match/model_desc/c9ddd37e-c870-4ccf-a131-5eef8fe6cb7e.json",
          "src/kylin-it/src/test/resources/ut_meta/agg_exact_match/metadata/agg_match/table/DEFAULT.TEST_KYLIN_FACT.json",
          "src/kylin-it/src/test/resources/ut_meta/joins_graph_left_or_inner/metadata/_global/project/joins_graph_left_or_inner.json",
          "src/kylin-it/src/test/resources/ut_meta/joins_graph_left_or_inner/metadata/joins_graph_left_or_inner/dataflow/b780e4e4-69af-449e-b09f-05c90dfa04b7.json",
          "src/kylin-it/src/test/resources/ut_meta/joins_graph_left_or_inner/metadata/joins_graph_left_or_inner/dataflow_details/b780e4e4-69af-449e-b09f-05c90dfa04b7/0db919f3-1359-496c-aab5-b6f3951adc1e.json",
          "src/kylin-it/src/test/resources/ut_meta/joins_graph_left_or_inner/metadata/joins_graph_left_or_inner/index_plan/b780e4e4-69af-449e-b09f-05c90dfa04b7.json",
          "src/kylin-it/src/test/resources/ut_meta/joins_graph_left_or_inner/metadata/joins_graph_left_or_inner/model_desc/b780e4e4-69af-449e-b09f-05c90dfa04b7.json",
          "src/kylin-it/src/test/resources/ut_meta/joins_graph_left_or_inner/metadata/joins_graph_left_or_inner/table/DEFAULT.TEST_BANK_INCOME.json",
          "src/kylin-it/src/test/resources/ut_meta/joins_graph_left_or_inner/metadata/joins_graph_left_or_inner/table/DEFAULT.TEST_BANK_LOCATION.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/_global/project/multi_partition_date_type.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/dataflow/00a91916-d31e-ed40-b1ba-4a86765072f6.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/dataflow/3718b614-5191-2254-77e9-f4c5ca64e309.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/dataflow/3718b614-5191-2254-77e9-f4c5ca64e310.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/dataflow/3718b614-5191-2254-77e9-f4c5ca64e311.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/dataflow/3718b614-5191-2254-77e9-f4c5ca64e312.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/dataflow/cdf17c7b-18e3-9a09-23d1-4e82b7bc9123.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/index_plan/00a91916-d31e-ed40-b1ba-4a86765072f6.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/index_plan/3718b614-5191-2254-77e9-f4c5ca64e309.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/index_plan/3718b614-5191-2254-77e9-f4c5ca64e310.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/index_plan/3718b614-5191-2254-77e9-f4c5ca64e311.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/index_plan/3718b614-5191-2254-77e9-f4c5ca64e312.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/index_plan/cdf17c7b-18e3-9a09-23d1-4e82b7bc9123.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/model_desc/00a91916-d31e-ed40-b1ba-4a86765072f6.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/model_desc/3718b614-5191-2254-77e9-f4c5ca64e309.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/model_desc/3718b614-5191-2254-77e9-f4c5ca64e310.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/model_desc/3718b614-5191-2254-77e9-f4c5ca64e311.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/model_desc/3718b614-5191-2254-77e9-f4c5ca64e312.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/model_desc/cdf17c7b-18e3-9a09-23d1-4e82b7bc9123.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/table/TEST_DB.DATE_TIMESTAMP_TABLE.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/table/TEST_DB.TEST_FACT_13_10W.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/table/TEST_DB.TEST_FACT_24_2W.json",
          "src/kylin-it/src/test/resources/ut_meta/multi_partition_date_type/metadata/multi_partition_date_type/table/TEST_DB.TEST_FACT_30_3W.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/_global/project/tableindex_answer_selectstart.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/dataflow/baa44f37-8481-e78b-5cac-faa7d76767db.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/dataflow/c7a44f37-8481-e78b-5cac-faa7d76767db.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/dataflow/ccb82d81-1497-ca6d-f226-3258a0f0ba4f.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/dataflow_details/baa44f37-8481-e78b-5cac-faa7d76767db/bad65498-b922-225c-1db7-13de001beba8.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/dataflow_details/c7a44f37-8481-e78b-5cac-faa7d76767db/87d65498-b922-225c-1db7-13de001beba8.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/dataflow_details/ccb82d81-1497-ca6d-f226-3258a0f0ba4f/81b6caa7-50b4-81e9-4d46-0f5f11bfc8a2.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/index_plan/baa44f37-8481-e78b-5cac-faa7d76767db.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/index_plan/c7a44f37-8481-e78b-5cac-faa7d76767db.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/index_plan/ccb82d81-1497-ca6d-f226-3258a0f0ba4f.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/model_desc/baa44f37-8481-e78b-5cac-faa7d76767db.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/model_desc/c7a44f37-8481-e78b-5cac-faa7d76767db.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/model_desc/ccb82d81-1497-ca6d-f226-3258a0f0ba4f.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/table/DEFAULT.KYLIN_SALES.json",
          "src/kylin-it/src/test/resources/ut_meta/tableindex_answer_selectstart/metadata/tableindex_answer_selectstart/table/DEFAULT.TEST_KYLIN_FACT.json",
          "src/query-service/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/RealizationCheckTest.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java",
          "src/second-storage/core/src/test/scala/io/kyligence/kap/secondstorage/SecondStorageTest.scala",
          "src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/utils/ComputedColumnEvalUtilTest.java",
          "src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala",
          "src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestDFChooser.scala",
          "src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/job/TestRDSegmentBuildExec.scala"
        ],
        "message": "KYLIN-5632 fix some unstable ut, add some ignored ut, move some ut to the module of kylin-it",
        "before_after_code_files": [
          "src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataLoadingRangeManagerTest.java||src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataLoadingRangeManagerTest.java",
          "src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataflowTest.java||src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataflowTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/metadata/MetadataPerfTest.java||src/kylin-it/src/test/java/org/apache/kylin/metadata/MetadataPerfTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/newten/ExactlyMatchTest.java||src/kylin-it/src/test/java/org/apache/kylin/newten/ExactlyMatchTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java",
          "src/query-service/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java||src/query-service/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java||src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "src/query/src/test/java/org/apache/kylin/query/routing/RealizationCheckTest.java||src/query/src/test/java/org/apache/kylin/query/routing/RealizationCheckTest.java",
          "src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationPrunerTest.java||src/query/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java",
          "src/second-storage/core/src/test/scala/io/kyligence/kap/secondstorage/SecondStorageTest.scala||src/second-storage/core/src/test/scala/io/kyligence/kap/secondstorage/SecondStorageTest.scala",
          "src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/utils/ComputedColumnEvalUtilTest.java||src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/utils/ComputedColumnEvalUtilTest.java",
          "src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala||src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala",
          "src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestDFChooser.scala||src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestDFChooser.scala",
          "src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/job/TestRDSegmentBuildExec.scala||src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/job/TestRDSegmentBuildExec.scala"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/apache/kylin/pull/2138"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataLoadingRangeManagerTest.java||src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataLoadingRangeManagerTest.java": [
          "File: src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataLoadingRangeManagerTest.java -> src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataLoadingRangeManagerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.metadata.cube.model;",
          "23: import org.apache.kylin.common.util.DateFormat;",
          "28: import org.apache.kylin.common.util.NLocalFileMetadataTestCase;",
          "29: import org.apache.kylin.junit.TimeZoneTestRunner;",
          "30: import org.apache.kylin.metadata.model.AutoMergeTimeEnum;",
          "31: import org.apache.kylin.metadata.project.NProjectManager;",
          "32: import org.junit.After;",
          "33: import org.junit.Assert;",
          "",
          "[Removed Lines]",
          "21: import java.io.IOException;",
          "24: import org.apache.kylin.metadata.model.SegmentRange;",
          "25: import org.apache.kylin.metadata.model.SegmentStatusEnum;",
          "26: import org.apache.kylin.metadata.model.Segments;",
          "27: import org.apache.kylin.metadata.realization.RealizationStatusEnum;",
          "",
          "[Added Lines]",
          "25: import org.apache.kylin.metadata.model.SegmentRange;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:     }",
          "69:     @Test",
          "71:         String tableName = \"DEFAULT.TEST_KYLIN_FACT\";",
          "72:         String columnName = \"TEST_KYLIN_FACT.CAL_DT\";",
          "73:         NDataLoadingRange dataLoadingRange = new NDataLoadingRange();",
          "",
          "[Removed Lines]",
          "70:     public void testAppendSegRangeErrorCase() throws IOException {",
          "",
          "[Added Lines]",
          "65:     public void testAppendSegRangeErrorCase() {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:     }",
          "91:     @Test",
          "94:         String tableName = \"DEFAULT.TEST_KYLIN_FACT\";",
          "95:         String columnName = \"TEST_KYLIN_FACT.CAL_DT\";",
          "",
          "[Removed Lines]",
          "92:     public void testCreateAndUpdateDataLoadingRange() throws IOException {",
          "",
          "[Added Lines]",
          "87:     public void testCreateAndUpdateDataLoadingRange() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:         dataLoadingRange.setTableName(tableName);",
          "98:         dataLoadingRange.setColumnName(columnName);",
          "99:         NDataLoadingRange savedDataLoadingRange = dataLoadingRangeManager.createDataLoadingRange(dataLoadingRange);",
          "101:     }",
          "103:     @Test",
          "106:         String tableName = \"DEFAULT.TEST_KYLIN_FACT\";",
          "107:         String columnName = \"TEST_KYLIN_FACT.LSTG_FORMAT_NAME\";",
          "",
          "[Removed Lines]",
          "100:         Assert.assertTrue(savedDataLoadingRange.getProject().equals(DEFAULT_PROJECT));",
          "104:     public void testCreateDataLoadingRange_StringColumn() throws IOException {",
          "",
          "[Added Lines]",
          "95:         Assert.assertEquals(DEFAULT_PROJECT, savedDataLoadingRange.getProject());",
          "99:     public void testCreateDataLoadingRange_StringColumn() {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "111:         dataLoadingRange.setColumnName(columnName);",
          "112:         NDataLoadingRange savedDataLoadingRange = dataLoadingRangeManager.createDataLoadingRange(dataLoadingRange);",
          "116:     }",
          "118:     @Test",
          "121:         String tableName = \"DEFAULT.TEST_KYLIN_FACT\";",
          "122:         String columnName = \"TEST_KYLIN_FACT.LEAF_CATEG_ID\";",
          "",
          "[Removed Lines]",
          "114:         Assert.assertTrue(savedDataLoadingRange.getProject().equals(DEFAULT_PROJECT));",
          "115:         Assert.assertTrue(savedDataLoadingRange.getColumnName().equals(columnName));",
          "119:     public void testCreateDataLoadingRange_IntegerColumn() throws IOException {",
          "",
          "[Added Lines]",
          "109:         Assert.assertEquals(DEFAULT_PROJECT, savedDataLoadingRange.getProject());",
          "110:         Assert.assertEquals(savedDataLoadingRange.getColumnName(), columnName);",
          "114:     public void testCreateDataLoadingRange_IntegerColumn() {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "125:         dataLoadingRange.setPartitionDateFormat(\"YYYY\");",
          "126:         dataLoadingRange.setColumnName(columnName);",
          "127:         NDataLoadingRange savedDataLoadingRange = dataLoadingRangeManager.createDataLoadingRange(dataLoadingRange);",
          "130:     }",
          "132:     @Test",
          "",
          "[Removed Lines]",
          "128:         Assert.assertTrue(savedDataLoadingRange.getProject().equals(DEFAULT_PROJECT));",
          "129:         Assert.assertTrue(savedDataLoadingRange.getColumnName().equals(columnName));",
          "",
          "[Added Lines]",
          "123:         Assert.assertEquals(DEFAULT_PROJECT, savedDataLoadingRange.getProject());",
          "124:         Assert.assertEquals(savedDataLoadingRange.getColumnName(), columnName);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "260:     }",
          "262:     @Test",
          "264:         String start = \"2010-12-24 20:33:39.000\";",
          "265:         String end = \"2012-01-04 20:33:39.000\";",
          "266:         val loadingRange = createDataLoadingRange(DateFormat.stringToMillis(start), DateFormat.stringToMillis(end));",
          "",
          "[Removed Lines]",
          "263:     public void testGetQuerableSegmentRange_NoModel() {",
          "",
          "[Added Lines]",
          "258:     public void testGetQueryableSegmentRange_NoModel() {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "269:         Assert.assertEquals(start, DateFormat.formatToTimeStr(Long.parseLong(range.getStart().toString())));",
          "270:         Assert.assertEquals(end, DateFormat.formatToTimeStr(Long.parseLong(range.getEnd().toString())));",
          "271:     }",
          "358: }",
          "",
          "[Removed Lines]",
          "273:     @Test",
          "274:     public void testGetQuerableSegmentRange_HasModels() {",
          "275:         String start = \"2010-12-24 20:33:39.000\";",
          "276:         String end = \"2012-01-04 20:33:39.000\";",
          "277:         removeAllSegments();",
          "278:         val segments = new Segments<NDataSegment>();",
          "279:         val segments2 = new Segments<NDataSegment>();",
          "281:         val loadingRange = createDataLoadingRange(DateFormat.stringToMillis(start), DateFormat.stringToMillis(end));",
          "282:         val dataflowManager = NDataflowManager.getInstance(getTestConfig(), DEFAULT_PROJECT);",
          "284:         end = \"2011-05-18 09:00:19.000\";",
          "285:         SegmentRange segmentRange = new SegmentRange.TimePartitionedSegmentRange(DateFormat.stringToMillis(start),",
          "286:                 DateFormat.stringToMillis(end));",
          "287:         NDataflow df = dataflowManager.getDataflowByModelAlias(\"nmodel_basic\");",
          "288:         NDataSegment dataSegment = dataflowManager.appendSegment(df, segmentRange);",
          "289:         dataSegment.setStatus(SegmentStatusEnum.READY);",
          "290:         segments.add(dataSegment);",
          "292:         segmentRange = new SegmentRange.TimePartitionedSegmentRange(DateFormat.stringToMillis(start),",
          "293:                 DateFormat.stringToMillis(end));",
          "294:         df = dataflowManager.getDataflowByModelAlias(\"nmodel_basic_inner\");",
          "295:         dataSegment = dataflowManager.appendSegment(df, segmentRange);",
          "296:         dataSegment.setStatus(SegmentStatusEnum.READY);",
          "297:         segments2.add(dataSegment);",
          "299:         start = end;",
          "300:         end = \"2012-01-04 20:33:39.000\";",
          "301:         segmentRange = new SegmentRange.TimePartitionedSegmentRange(DateFormat.stringToMillis(start),",
          "302:                 DateFormat.stringToMillis(end));",
          "303:         df = dataflowManager.getDataflowByModelAlias(\"nmodel_basic\");",
          "304:         dataSegment = dataflowManager.appendSegment(df, segmentRange);",
          "305:         dataSegment.setStatus(SegmentStatusEnum.READY);",
          "306:         segments.add(dataSegment);",
          "308:         segmentRange = new SegmentRange.TimePartitionedSegmentRange(DateFormat.stringToMillis(start),",
          "309:                 DateFormat.stringToMillis(end));",
          "310:         df = dataflowManager.getDataflowByModelAlias(\"nmodel_basic_inner\");",
          "311:         dataSegment = dataflowManager.appendSegment(df, segmentRange);",
          "312:         dataSegment.setStatus(SegmentStatusEnum.NEW);",
          "313:         segments2.add(dataSegment);",
          "315:         NDataflowUpdate update = new NDataflowUpdate(dataflowManager.getDataflowByModelAlias(\"nmodel_basic\").getUuid());",
          "316:         update.setToUpdateSegs(segments.toArray(new NDataSegment[segments.size()]));",
          "317:         update.setStatus(RealizationStatusEnum.ONLINE);",
          "318:         dataflowManager.updateDataflow(update);",
          "320:         update = new NDataflowUpdate(dataflowManager.getDataflowByModelAlias(\"nmodel_basic_inner\").getUuid());",
          "321:         update.setToUpdateSegs(segments2.toArray(new NDataSegment[segments.size()]));",
          "322:         update.setStatus(RealizationStatusEnum.ONLINE);",
          "323:         dataflowManager.updateDataflow(update);",
          "325:         dataflowManager.updateDataflowStatus(\"abe3bf1a-c4bc-458d-8278-7ea8b00f5e96\", RealizationStatusEnum.OFFLINE);",
          "327:         val range = dataLoadingRangeManager.getQuerableSegmentRange(loadingRange);",
          "328:         Assert.assertEquals(\"2010-12-24 20:33:39.000\",",
          "329:                 DateFormat.formatToTimeStr(Long.parseLong(range.getStart().toString())));",
          "330:         Assert.assertEquals(\"2011-05-18 09:00:19.000\",",
          "331:                 DateFormat.formatToTimeStr(Long.parseLong(range.getEnd().toString())));",
          "333:         df = dataflowManager.getDataflowByModelAlias(\"nmodel_basic\");",
          "334:         val segs = df.getQueryableSegments();",
          "335:         Assert.assertEquals(1, segs.size());",
          "337:         Assert.assertEquals(\"2010-12-24 20:33:39.000\",",
          "338:                 DateFormat.formatToTimeStr(Long.parseLong(segs.get(0).getSegRange().getStart().toString())));",
          "339:         Assert.assertEquals(\"2011-05-18 09:00:19.000\",",
          "340:                 DateFormat.formatToTimeStr(Long.parseLong(segs.get(0).getSegRange().getEnd().toString())));",
          "342:     }",
          "344:     private void removeAllSegments() {",
          "345:         NDataflowManager dataflowManager = NDataflowManager.getInstance(getTestConfig(), DEFAULT_PROJECT);",
          "346:         NDataflow df = dataflowManager.getDataflowByModelAlias(\"nmodel_basic\");",
          "348:         NDataflowUpdate update = new NDataflowUpdate(df.getUuid());",
          "349:         update.setToRemoveSegs(df.getSegments().toArray(new NDataSegment[0]));",
          "350:         dataflowManager.updateDataflow(update);",
          "352:         df = dataflowManager.getDataflowByModelAlias(\"nmodel_basic_inner\");",
          "354:         update = new NDataflowUpdate(df.getUuid());",
          "355:         update.setToRemoveSegs(df.getSegments().toArray(new NDataSegment[0]));",
          "356:         dataflowManager.updateDataflow(update);",
          "357:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataflowTest.java||src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataflowTest.java": [
          "File: src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataflowTest.java -> src/core-metadata/src/test/java/org/apache/kylin/metadata/cube/model/NDataflowTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import java.io.IOException;",
          "23: import org.apache.kylin.common.util.NLocalFileMetadataTestCase;",
          "24: import org.apache.kylin.metadata.model.Segments;",
          "25: import org.apache.kylin.metadata.realization.RealizationStatusEnum;",
          "26: import org.junit.After;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: import org.apache.kylin.common.util.DateFormat;",
          "25: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "26: import org.apache.kylin.metadata.model.SegmentRange;",
          "27: import org.apache.kylin.metadata.model.SegmentStatusEnum;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: import org.junit.Test;",
          "30: import org.springframework.test.util.ReflectionTestUtils;",
          "33: import lombok.val;",
          "34: import lombok.var;",
          "",
          "[Removed Lines]",
          "32: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "201:         }",
          "202:     }",
          "204: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:     @Test",
          "208:     public void testGetQueryableSegmentRange() {",
          "209:         removeAllSegments(projectDefault);",
          "210:         NDataflowManager dfManager = NDataflowManager.getInstance(getTestConfig(), projectDefault);",
          "213:         {",
          "214:             NDataflow df = dfManager.getDataflowByModelAlias(\"nmodel_basic\");",
          "215:             Segments<NDataSegment> segments = new Segments<>();",
          "218:             String start = \"2010-12-24 20:33:39.000\";",
          "219:             String end = \"2011-05-18 09:00:19.000\";",
          "220:             NDataSegment dataSegment = dfManager.appendSegment(df, new SegmentRange.TimePartitionedSegmentRange(",
          "221:                     DateFormat.stringToMillis(start), DateFormat.stringToMillis(end)));",
          "222:             dataSegment.setStatus(SegmentStatusEnum.READY);",
          "223:             segments.add(dataSegment);",
          "226:             start = end;",
          "227:             end = \"2012-01-04 20:33:39.000\";",
          "228:             dataSegment = dfManager.appendSegment(df, new SegmentRange.TimePartitionedSegmentRange(",
          "229:                     DateFormat.stringToMillis(start), DateFormat.stringToMillis(end)));",
          "230:             dataSegment.setStatus(SegmentStatusEnum.NEW);",
          "231:             segments.add(dataSegment);",
          "234:             start = end;",
          "235:             end = \"2013-01-04 20:33:39.000\";",
          "236:             dataSegment = dfManager.appendSegment(df, new SegmentRange.TimePartitionedSegmentRange(",
          "237:                     DateFormat.stringToMillis(start), DateFormat.stringToMillis(end)));",
          "238:             dataSegment.setStatus(SegmentStatusEnum.WARNING);",
          "239:             segments.add(dataSegment);",
          "241:             NDataflowUpdate update = new NDataflowUpdate(dfManager.getDataflowByModelAlias(\"nmodel_basic\").getUuid());",
          "242:             update.setToUpdateSegs(segments.toArray(new NDataSegment[0]));",
          "243:             update.setStatus(RealizationStatusEnum.ONLINE);",
          "244:             dfManager.updateDataflow(update);",
          "245:         }",
          "248:         NDataflow df = dfManager.getDataflowByModelAlias(\"nmodel_basic\");",
          "249:         Segments<NDataSegment> queryableSegments = df.getQueryableSegments();",
          "250:         Assert.assertEquals(2, queryableSegments.size());",
          "252:         NDataSegment segment1 = queryableSegments.get(0);",
          "253:         Assert.assertEquals(\"2010-12-24 20:33:39.000\",",
          "254:                 DateFormat.formatToTimeStr(Long.parseLong(segment1.getSegRange().getStart().toString())));",
          "255:         Assert.assertEquals(\"2011-05-18 09:00:19.000\",",
          "256:                 DateFormat.formatToTimeStr(Long.parseLong(segment1.getSegRange().getEnd().toString())));",
          "257:         Assert.assertEquals(SegmentStatusEnum.READY, segment1.getStatus());",
          "259:         NDataSegment segment2 = queryableSegments.get(1);",
          "260:         Assert.assertEquals(\"2010-12-24 20:33:39.000\",",
          "261:                 DateFormat.formatToTimeStr(Long.parseLong(segment1.getSegRange().getStart().toString())));",
          "262:         Assert.assertEquals(\"2011-05-18 09:00:19.000\",",
          "263:                 DateFormat.formatToTimeStr(Long.parseLong(segment1.getSegRange().getEnd().toString())));",
          "264:         Assert.assertEquals(SegmentStatusEnum.READY, segment2.getStatus());",
          "265:     }",
          "267:     private void removeAllSegments(String project) {",
          "268:         NDataflowManager dataflowManager = NDataflowManager.getInstance(getTestConfig(), project);",
          "269:         NDataflow df = dataflowManager.getDataflowByModelAlias(\"nmodel_basic\");",
          "271:         NDataflowUpdate update = new NDataflowUpdate(df.getUuid());",
          "272:         update.setToRemoveSegs(df.getSegments().toArray(new NDataSegment[0]));",
          "273:         dataflowManager.updateDataflow(update);",
          "275:         df = dataflowManager.getDataflowByModelAlias(\"nmodel_basic_inner\");",
          "277:         update = new NDataflowUpdate(df.getUuid());",
          "278:         update.setToRemoveSegs(df.getSegments().toArray(new NDataSegment[0]));",
          "279:         dataflowManager.updateDataflow(update);",
          "280:     }",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/metadata/MetadataPerfTest.java||src/kylin-it/src/test/java/org/apache/kylin/metadata/MetadataPerfTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/metadata/MetadataPerfTest.java -> src/kylin-it/src/test/java/org/apache/kylin/metadata/MetadataPerfTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: import org.apache.kylin.common.util.Pair;",
          "49: import org.apache.kylin.common.util.RandomUtil;",
          "50: import org.apache.kylin.common.util.Unsafe;",
          "51: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "52: import org.apache.kylin.metadata.cube.model.IndexPlan;",
          "53: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.apache.kylin.guava30.shaded.common.base.Joiner;",
          "52: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "53: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: import org.junit.Assert;",
          "65: import org.junit.Before;",
          "66: import org.junit.Ignore;",
          "68: import org.junit.Test;",
          "70: import org.junit.runner.RunWith;",
          "71: import org.junit.runners.Parameterized;",
          "72: import org.springframework.jdbc.core.JdbcTemplate;",
          "73: import org.springframework.jdbc.datasource.DataSourceTransactionManager;",
          "79: import lombok.val;",
          "80: import lombok.var;",
          "81: import lombok.extern.slf4j.Slf4j;",
          "",
          "[Removed Lines]",
          "67: import org.junit.Rule;",
          "69: import org.junit.rules.TemporaryFolder;",
          "75: import org.apache.kylin.guava30.shaded.common.base.Joiner;",
          "76: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "77: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/newten/ExactlyMatchTest.java||src/kylin-it/src/test/java/org/apache/kylin/newten/ExactlyMatchTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/newten/ExactlyMatchTest.java -> src/kylin-it/src/test/java/org/apache/kylin/newten/ExactlyMatchTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.newten;",
          "21: import java.util.ArrayList;",
          "22: import java.util.List;",
          "24: import org.apache.kylin.common.KylinConfig;",
          "25: import org.apache.kylin.common.util.Pair;",
          "26: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "27: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "28: import org.apache.kylin.job.engine.JobEngineConfig;",
          "29: import org.apache.kylin.job.impl.threadpool.NDefaultScheduler;",
          "30: import org.apache.kylin.util.ExecAndComp;",
          "31: import org.apache.spark.sql.Dataset;",
          "32: import org.apache.spark.sql.Row;",
          "33: import org.apache.spark.sql.SparderEnv;",
          "34: import org.apache.spark.sql.catalyst.expressions.Expression;",
          "35: import org.apache.spark.sql.catalyst.expressions.In;",
          "36: import org.apache.spark.sql.catalyst.plans.logical.Aggregate;",
          "37: import org.apache.spark.sql.catalyst.plans.logical.Filter;",
          "38: import org.apache.spark.sql.catalyst.plans.logical.LogicalPlan;",
          "39: import org.junit.After;",
          "40: import org.junit.Assert;",
          "41: import org.junit.Before;",
          "42: import org.junit.Test;",
          "44: import scala.Option;",
          "45: import scala.runtime.AbstractFunction1;",
          "47: public class ExactlyMatchTest extends NLocalWithSparkSessionTest {",
          "49:     @Before",
          "50:     public void setup() throws Exception {",
          "51:         overwriteSystemProp(\"kylin.job.scheduler.poll-interval-second\", \"1\");",
          "52:         this.createTestMetadata(\"src/test/resources/ut_meta/agg_exact_match\");",
          "53:         NDefaultScheduler scheduler = NDefaultScheduler.getInstance(getProject());",
          "54:         scheduler.init(new JobEngineConfig(KylinConfig.getInstanceFromEnv()));",
          "55:         if (!scheduler.hasStarted()) {",
          "56:             throw new RuntimeException(\"scheduler has not been started\");",
          "57:         }",
          "58:     }",
          "60:     @After",
          "61:     public void after() throws Exception {",
          "62:         NDefaultScheduler.destroyInstance();",
          "63:         cleanupTestMetadata();",
          "64:     }",
          "66:     @Override",
          "67:     public String getProject() {",
          "68:         return \"agg_match\";",
          "69:     }",
          "71:     @Test",
          "72:     public void testInClause() throws Exception {",
          "73:         fullBuild(\"c9ddd37e-c870-4ccf-a131-5eef8fe6cb7e\");",
          "75:         KylinConfig config = KylinConfig.getInstanceFromEnv();",
          "76:         populateSSWithCSVData(config, getProject(), SparderEnv.getSparkSession());",
          "78:         String base = \"select count(*) from TEST_KYLIN_FACT \";",
          "80:         String in1 = base + \"where substring(LSTG_FORMAT_NAME, 1, 1) in ('A','F')\"",
          "81:                 + \" or substring(LSTG_FORMAT_NAME, 1, 1) in ('O','B')\";",
          "83:         String in2 = base + \"where substring(LSTG_FORMAT_NAME, 1, 1) in ('A','F')\"",
          "84:                 + \" and substring(LSTG_FORMAT_NAME, 1, 1) in ('O','B')\";",
          "86:         String not_in1 = base + \"where substring(LSTG_FORMAT_NAME, 1, 1) not in ('A','F')\"",
          "87:                 + \" or substring(LSTG_FORMAT_NAME, 1, 1) not in ('O','B')\";",
          "89:         String not_in2 = base + \"where substring(LSTG_FORMAT_NAME, 1, 1) not in ('A','F')\"",
          "90:                 + \" or substring(LSTG_FORMAT_NAME, 1, 1) not in ('O','B')\";",
          "92:         overwriteSystemProp(\"calcite.keep-in-clause\", \"true\");",
          "93:         Dataset<Row> df1 = ExecAndComp.queryModelWithoutCompute(getProject(), in1);",
          "94:         Dataset<Row> df2 = ExecAndComp.queryModelWithoutCompute(getProject(), in2);",
          "95:         Dataset<Row> df3 = ExecAndComp.queryModelWithoutCompute(getProject(), not_in2);",
          "96:         Dataset<Row> df4 = ExecAndComp.queryModelWithoutCompute(getProject(), not_in2);",
          "98:         Assert.assertTrue(existsIn(df1));",
          "99:         Assert.assertTrue(existsIn(df2));",
          "100:         Assert.assertTrue(existsIn(df3));",
          "101:         Assert.assertTrue(existsIn(df4));",
          "102:         ArrayList<String> querys = Lists.newArrayList(in1, in2, not_in1, not_in2);",
          "103:         ExecAndComp.execAndCompareQueryList(querys, getProject(), ExecAndComp.CompareLevel.SAME, \"left\");",
          "105:         overwriteSystemProp(\"calcite.keep-in-clause\", \"false\");",
          "106:         Dataset<Row> df5 = ExecAndComp.queryModelWithoutCompute(getProject(), in1);",
          "107:         Dataset<Row> df6 = ExecAndComp.queryModelWithoutCompute(getProject(), in2);",
          "108:         Dataset<Row> df7 = ExecAndComp.queryModelWithoutCompute(getProject(), not_in2);",
          "109:         Dataset<Row> df8 = ExecAndComp.queryModelWithoutCompute(getProject(), not_in2);",
          "111:         Assert.assertFalse(existsIn(df5));",
          "112:         Assert.assertFalse(existsIn(df6));",
          "113:         Assert.assertFalse(existsIn(df7));",
          "114:         Assert.assertFalse(existsIn(df8));",
          "115:     }",
          "117:     @Test",
          "118:     public void testSkipAgg() throws Exception {",
          "119:         fullBuild(\"c9ddd37e-c870-4ccf-a131-5eef8fe6cb7e\");",
          "121:         KylinConfig config = KylinConfig.getInstanceFromEnv();",
          "122:         populateSSWithCSVData(config, getProject(), SparderEnv.getSparkSession());",
          "124:         String exactly_match1 = \"select count (distinct price) as a from TEST_KYLIN_FACT group by TRANS_ID, CAL_DT, LSTG_FORMAT_NAME having count (distinct price)  > 0 \";",
          "125:         Dataset<Row> m1 = ExecAndComp.queryModelWithoutCompute(getProject(), exactly_match1);",
          "126:         Assert.assertFalse(existsAgg(m1));",
          "128:         String exactly_match2 = \"select count(*) from TEST_KYLIN_FACT group by TRANS_ID, CAL_DT, LSTG_FORMAT_NAME\";",
          "129:         Dataset<Row> m2 = ExecAndComp.queryModelWithoutCompute(getProject(), exactly_match2);",
          "130:         Assert.assertFalse(existsAgg(m2));",
          "132:         String exactly_match3 = \"select LSTG_FORMAT_NAME,sum(price),CAL_DT from TEST_KYLIN_FACT group by TRANS_ID, CAL_DT, LSTG_FORMAT_NAME\";",
          "133:         Dataset<Row> m3 = ExecAndComp.queryModelWithoutCompute(getProject(), exactly_match3);",
          "134:         String[] fieldNames = m3.schema().fieldNames();",
          "135:         Assert.assertFalse(existsAgg(m3));",
          "136:         Assert.assertTrue(fieldNames[0].contains(\"LSTG_FORMAT_NAME\"));",
          "137:         Assert.assertTrue(fieldNames[1].contains(\"GMV_SUM\"));",
          "138:         Assert.assertTrue(fieldNames[2].contains(\"CAL_DT\"));",
          "140:         String exactly_match4 = \"select count (distinct price) as a from TEST_KYLIN_FACT group by TRANS_ID, CAL_DT, LSTG_FORMAT_NAME having count (distinct price)  > 0 \";",
          "141:         Dataset<Row> m4 = ExecAndComp.queryModelWithoutCompute(getProject(), exactly_match1);",
          "142:         Assert.assertFalse(existsAgg(m4));",
          "144:         List<Pair<String, String>> query = new ArrayList<>();",
          "145:         query.add(Pair.newPair(\"\", exactly_match3));",
          "146:         query.add(Pair.newPair(\"\", exactly_match4));",
          "147:         ExecAndComp.execAndCompare(query, getProject(), ExecAndComp.CompareLevel.SAME, \"left\");",
          "149:         String not_match1 = \"select count(*) from TEST_KYLIN_FACT\";",
          "150:         Dataset<Row> n1 = ExecAndComp.queryModelWithoutCompute(getProject(), not_match1);",
          "151:         Assert.assertTrue(existsAgg(n1));",
          "152:     }",
          "154:     private boolean existsAgg(Dataset<Row> m1) {",
          "155:         return !m1.logicalPlan().find(new AbstractFunction1<LogicalPlan, Object>() {",
          "156:             @Override",
          "157:             public Object apply(LogicalPlan v1) {",
          "158:                 return v1 instanceof Aggregate;",
          "159:             }",
          "160:         }).isEmpty();",
          "161:     }",
          "163:     private boolean existsIn(Dataset<Row> m1) {",
          "164:         Option<LogicalPlan> option = m1.logicalPlan().find(new AbstractFunction1<LogicalPlan, Object>() {",
          "165:             @Override",
          "166:             public Object apply(LogicalPlan v1) {",
          "167:                 return v1 instanceof Filter;",
          "168:             }",
          "169:         });",
          "171:         if (option.isDefined()) {",
          "172:             Filter filter = (Filter) option.get();",
          "173:             return filter.condition().find(new AbstractFunction1<Expression, Object>() {",
          "174:                 @Override",
          "175:                 public Object apply(Expression v1) {",
          "176:                     return v1 instanceof In;",
          "177:                 }",
          "178:             }).isDefined();",
          "179:         } else {",
          "180:             return false;",
          "181:         }",
          "182:     }",
          "183: }",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/HeterogeneousSegmentPruningTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.sql.SQLException;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "24: import java.util.stream.Collectors;",
          "26: import org.apache.calcite.rex.RexNode;",
          "27: import org.apache.calcite.sql.parser.SqlParseException;",
          "28: import org.apache.kylin.common.KylinConfig;",
          "29: import org.apache.kylin.common.util.DateFormat;",
          "30: import org.apache.kylin.common.util.Pair;",
          "31: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "32: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "33: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "34: import org.apache.kylin.metadata.cube.model.LayoutPartition;",
          "35: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "36: import org.apache.kylin.metadata.cube.model.NDataflowUpdate;",
          "37: import org.apache.kylin.metadata.model.NDataModelManager;",
          "38: import org.apache.kylin.metadata.realization.NoRealizationFoundException;",
          "39: import org.apache.kylin.query.engine.QueryExec;",
          "40: import org.apache.kylin.query.relnode.OLAPContext;",
          "41: import org.apache.kylin.util.OlapContextUtil;",
          "42: import org.junit.Assert;",
          "43: import org.junit.Test;",
          "45: import lombok.val;",
          "47: public class HeterogeneousSegmentPruningTest extends NLocalWithSparkSessionTest {",
          "49:     @Test",
          "50:     public void testMultiLevelPartitionMapping() throws SqlParseException {",
          "51:         val project = \"multi_level_partition\";",
          "52:         val dfId = \"747f864b-9721-4b97-acde-0aa8e8656cba\";",
          "53:         val dfManager = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), project);",
          "54:         val dataflowCopy = dfManager.getDataflow(dfId).copy();",
          "57:         val newPartition = Lists.<String[]> newArrayList(new String[] { \"4\" });",
          "58:         val expectedRanges = Lists.<Pair<String, String>> newArrayList();",
          "59:         val segmentRange1 = Pair.newPair(\"2012-01-01\", \"2012-01-02\");",
          "60:         val segment1Uuid = \"8892fa3f-f607-4eec-8159-7c5ae2f16942\";",
          "61:         val segmentRange2 = Pair.newPair(\"2012-01-02\", \"2012-01-03\");",
          "62:         val segment2Uuid = \"d75a822c-788a-4592-a500-cf20186dded1\";",
          "63:         val segmentRange3 = Pair.newPair(\"2012-01-03\", \"2012-01-04\");",
          "64:         val segment3Uuid = \"54eaf96d-6146-45d2-b94e-d5d187f89919\";",
          "65:         val expectedPartitionMap = Maps.<String, List<Long>> newHashMap();",
          "66:         dfManager.appendPartitions(dfId, segment1Uuid, newPartition);",
          "67:         dfManager.appendPartitions(dfId, segment2Uuid, newPartition);",
          "68:         dfManager.appendPartitions(dfId, segment3Uuid, newPartition);",
          "69:         val layout1 = dataflowCopy.getSegment(segment1Uuid).getLayout(1L);",
          "70:         val layout2 = dataflowCopy.getSegment(segment2Uuid).getLayout(1L);",
          "71:         val layout3 = dataflowCopy.getSegment(segment3Uuid).getLayout(1L);",
          "72:         layout1.getMultiPartition().add(new LayoutPartition(4L));",
          "73:         layout2.getMultiPartition().add(new LayoutPartition(4L));",
          "74:         layout3.getMultiPartition().add(new LayoutPartition(4L));",
          "75:         val updateOps = new NDataflowUpdate(dfId);",
          "76:         updateOps.setToAddOrUpdateLayouts(layout1, layout2, layout3);",
          "77:         dfManager.updateDataflow(updateOps);",
          "79:         val sqlBase = \"select cal_dt, sum(price) from test_kylin_fact inner join test_account on test_kylin_fact.seller_id = test_account.account_id \";",
          "80:         val andMappingSql0 = sqlBase",
          "81:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-04' and lstg_format_name = 'FP-non GTC' group by cal_dt\";",
          "82:         expectedRanges.add(segmentRange1);",
          "83:         expectedRanges.add(segmentRange2);",
          "84:         expectedRanges.add(segmentRange3);",
          "85:         expectedPartitionMap.put(segment1Uuid, Lists.newArrayList(1L, 4L));",
          "86:         expectedPartitionMap.put(segment2Uuid, Lists.newArrayList(1L, 4L));",
          "87:         expectedPartitionMap.put(segment3Uuid, Lists.newArrayList(1L, 4L));",
          "88:         assertPrunedSegmentsRange(project, andMappingSql0, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "89:         val andSql0 = sqlBase",
          "90:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-04' and lstg_site_id = 1 group by cal_dt\";",
          "91:         expectedPartitionMap.clear();",
          "92:         expectedPartitionMap.put(segment1Uuid, Lists.newArrayList(1L));",
          "93:         expectedPartitionMap.put(segment2Uuid, Lists.newArrayList(1L));",
          "94:         expectedPartitionMap.put(segment3Uuid, Lists.newArrayList(1L));",
          "95:         assertPrunedSegmentsRange(project, andSql0, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "96:     }",
          "98:     @Test",
          "99:     public void testMultiLevelPartitionPruning() throws SqlParseException {",
          "117:         val project = \"multi_level_partition\";",
          "118:         val dfId = \"747f864b-9721-4b97-acde-0aa8e8656cba\";",
          "119:         val expectedRanges = Lists.<Pair<String, String>> newArrayList();",
          "120:         val segmentRange1 = Pair.newPair(\"2012-01-01\", \"2012-01-02\");",
          "121:         val segment1Uuid = \"8892fa3f-f607-4eec-8159-7c5ae2f16942\";",
          "122:         val segmentRange2 = Pair.newPair(\"2012-01-02\", \"2012-01-03\");",
          "123:         val segment2Uuid = \"d75a822c-788a-4592-a500-cf20186dded1\";",
          "124:         val segmentRange3 = Pair.newPair(\"2012-01-03\", \"2012-01-04\");",
          "125:         val segment3Uuid = \"54eaf96d-6146-45d2-b94e-d5d187f89919\";",
          "126:         val segmentRange4 = Pair.newPair(\"2012-01-04\", \"2012-01-05\");",
          "127:         val segment4Uuid = \"411f40b9-a80a-4453-90a9-409aac6f7632\";",
          "128:         val segmentRange5 = Pair.newPair(\"2012-01-05\", \"2012-01-06\");",
          "129:         val segment5Uuid = \"a8318597-cb75-416f-8eb8-96ea285dd2b4\";",
          "130:         val expectedPartitionMap = Maps.<String, List<Long>> newHashMap();",
          "132:         val sqlBase = \"select cal_dt, sum(price) from test_kylin_fact inner join test_account on test_kylin_fact.seller_id = test_account.account_id \";",
          "135:         val noFilterSql = sqlBase + \"group by cal_dt\";",
          "136:         expectedRanges.add(segmentRange1);",
          "137:         expectedRanges.add(segmentRange2);",
          "138:         expectedRanges.add(segmentRange3);",
          "139:         expectedRanges.add(segmentRange4);",
          "140:         expectedRanges.add(segmentRange5);",
          "141:         expectedPartitionMap.put(segment1Uuid, Lists.newArrayList(0L, 1L, 2L, 3L));",
          "142:         expectedPartitionMap.put(segment2Uuid, Lists.newArrayList(0L, 1L, 2L));",
          "143:         expectedPartitionMap.put(segment3Uuid, Lists.newArrayList(1L, 2L, 3L));",
          "144:         expectedPartitionMap.put(segment4Uuid, Lists.newArrayList(0L, 1L));",
          "145:         expectedPartitionMap.put(segment5Uuid, Lists.newArrayList(2L, 3L));",
          "146:         assertPrunedSegmentsRange(project, noFilterSql, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "148:         val andSql0 = sqlBase",
          "149:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-04' and lstg_site_id = 1 group by cal_dt\";",
          "150:         val andMappingSql0 = sqlBase",
          "151:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-04' and lstg_format_name = 'FP-non GTC' group by cal_dt\";",
          "152:         val andMixSql0 = sqlBase",
          "153:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-04' and lstg_site_id = 1 and lstg_format_name = 'FP-non GTC' group by cal_dt\";",
          "154:         expectedRanges.clear();",
          "155:         expectedRanges.add(segmentRange1);",
          "156:         expectedRanges.add(segmentRange2);",
          "157:         expectedRanges.add(segmentRange3);",
          "158:         expectedPartitionMap.clear();",
          "159:         expectedPartitionMap.put(segment1Uuid, Lists.newArrayList(1L));",
          "160:         expectedPartitionMap.put(segment2Uuid, Lists.newArrayList(1L));",
          "161:         expectedPartitionMap.put(segment3Uuid, Lists.newArrayList(1L));",
          "162:         assertPrunedSegmentsRange(project, andSql0, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "163:         assertPrunedSegmentsRange(project, andMappingSql0, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "164:         assertPrunedSegmentsRange(project, andMixSql0, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "166:         val notInSql0 = sqlBase",
          "167:                 + \"where cal_dt > '2012-01-02' and cal_dt < '2012-01-04' and lstg_site_id not in (0, 2, 3) group by cal_dt\";",
          "168:         val notInMappingSql0 = sqlBase",
          "169:                 + \"where cal_dt > '2012-01-02' and cal_dt < '2012-01-04' and lstg_format_name not in ('FP-GTC', 'ABIN', 'Auction') group by cal_dt\";",
          "170:         val notInMixSql0 = sqlBase",
          "171:                 + \"where cal_dt > '2012-01-02' and cal_dt < '2012-01-04' and lstg_site_id not in (0, 2, 3) and lstg_format_name not in ('FP-GTC', 'ABIN', 'Auction') group by cal_dt\";",
          "172:         expectedRanges.clear();",
          "173:         expectedRanges.add(segmentRange2);",
          "174:         expectedRanges.add(segmentRange3);",
          "175:         expectedPartitionMap.clear();",
          "176:         expectedPartitionMap.put(segment2Uuid, Lists.newArrayList(1L));",
          "177:         expectedPartitionMap.put(segment3Uuid, Lists.newArrayList(1L));",
          "178:         assertPrunedSegmentsRange(project, notInSql0, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "179:         assertPrunedSegmentsRange(project, notInMappingSql0, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "180:         assertPrunedSegmentsRange(project, notInMixSql0, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "183:         val emptyData = sqlBase",
          "184:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-03' and lstg_site_id = 5 group by cal_dt\";",
          "185:         val emptyDataMapping = sqlBase",
          "186:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-03' and lstg_format_name = 'not_exist_name' group by cal_dt\";",
          "187:         val emptyDataMix = sqlBase",
          "188:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-03' and lstg_site_id = 5 and lstg_format_name = 'not_exist_name' group by cal_dt\";",
          "189:         expectedRanges.clear();",
          "190:         expectedPartitionMap.clear();",
          "191:         assertPrunedSegmentsRange(project, emptyData, dfId, expectedRanges, -1L, expectedPartitionMap);",
          "192:         assertPrunedSegmentsRange(project, emptyDataMapping, dfId, expectedRanges, -1L, expectedPartitionMap);",
          "193:         assertPrunedSegmentsRange(project, emptyDataMix, dfId, expectedRanges, -1L, expectedPartitionMap);",
          "196:         val inSql0 = sqlBase",
          "197:                 + \"where cal_dt > '2011-12-30' and cal_dt < '2012-01-03' and lstg_site_id in (1, 2) group by cal_dt\";",
          "198:         val inMappingSql0 = sqlBase",
          "199:                 + \"where cal_dt > '2011-12-30' and cal_dt < '2012-01-03' and lstg_format_name in ('FP-non GTC', 'ABIN') group by cal_dt\";",
          "200:         val inMixSql0 = sqlBase",
          "201:                 + \"where cal_dt > '2011-12-30' and cal_dt < '2012-01-03' and lstg_site_id in (1, 2) and lstg_format_name in ('FP-non GTC', 'ABIN') group by cal_dt\";",
          "202:         expectedRanges.add(segmentRange1);",
          "203:         expectedRanges.add(segmentRange2);",
          "204:         expectedPartitionMap.put(segment1Uuid, Lists.newArrayList(1L, 2L));",
          "205:         expectedPartitionMap.put(segment2Uuid, Lists.newArrayList(1L, 2L));",
          "206:         assertPrunedSegmentsRange(project, inSql0, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "207:         assertPrunedSegmentsRange(project, inMappingSql0, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "208:         assertPrunedSegmentsRange(project, inMixSql0, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "210:         val pushDownSql0 = sqlBase",
          "211:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-03' and lstg_site_id = 3 group by cal_dt\";",
          "212:         assertNoRealizationFound(project, pushDownSql0);",
          "214:         val pushDownMappingSql0 = sqlBase",
          "215:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-03' and lstg_format_name = 'Auction' group by cal_dt\";",
          "216:         assertNoRealizationFound(project, pushDownMappingSql0);",
          "218:         val pushDownMixSql0 = sqlBase",
          "219:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-03' and lstg_site_id = 3 and lstg_format_name = 'Auction' group by cal_dt\";",
          "220:         assertNoRealizationFound(project, pushDownMixSql0);",
          "223:         val wrongMapping0 = sqlBase",
          "224:                 + \"where cal_dt between '2012-01-01' and '2012-01-02' and lstg_site_id = 0 and lstg_format_name = 'FP-non GTC' group by cal_dt\";",
          "225:         assertPrunedSegmentsRange(project, wrongMapping0, dfId, null, -1L, null);",
          "227:         val orSql0 = sqlBase",
          "228:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-02' and (lstg_site_id = 0 or lstg_format_name = 'FP-non GTC') group by cal_dt\";",
          "229:         expectedRanges.clear();",
          "230:         expectedPartitionMap.clear();",
          "231:         expectedRanges.add(segmentRange1);",
          "232:         expectedPartitionMap.put(segment1Uuid, Lists.newArrayList(0L, 1L));",
          "233:         assertPrunedSegmentsRange(project, orSql0, dfId, expectedRanges, 1L, expectedPartitionMap);",
          "234:     }",
          "236:     @Test",
          "237:     public void testWhenReadySegmentIsEmpty() {",
          "238:         val project = \"heterogeneous_segment\";",
          "239:         val sql = \"select cal_dt, count(*) from test_kylin_fact \"",
          "240:                 + \"inner join test_category_groupings on test_kylin_fact.leaf_categ_id = test_category_groupings.leaf_categ_id \"",
          "241:                 + \"where cal_dt >= '2012-01-03' and cal_dt < '2012-01-10' group by cal_dt\";",
          "242:         try {",
          "243:             new QueryExec(project, getTestConfig()).executeQuery(sql);",
          "244:             Assert.fail();",
          "245:         } catch (SQLException ex) {",
          "247:             Assert.assertTrue(ex.getCause() instanceof NoRealizationFoundException);",
          "248:         }",
          "250:         try {",
          "251:             getTestConfig().setProperty(\"kylin.query.heterogeneous-segment-enabled\", \"false\");",
          "252:             new QueryExec(project, getTestConfig()).executeQuery(sql);",
          "253:             Assert.fail();",
          "254:         } catch (SQLException ex) {",
          "256:             Assert.assertTrue(ex.getCause() instanceof NoRealizationFoundException);",
          "257:         }",
          "258:     }",
          "260:     @Test",
          "261:     public void testHeterogeneousSegment() throws SqlParseException {",
          "273:         val project = \"heterogeneous_segment\";",
          "274:         val dfId = \"747f864b-9721-4b97-acde-0aa8e8656cba\";",
          "275:         val expectedRanges = Lists.<Pair<String, String>> newArrayList();",
          "276:         val segmentRange1 = Pair.newPair(\"2012-01-01\", \"2012-01-02\");",
          "277:         val segmentRange2 = Pair.newPair(\"2012-01-02\", \"2012-01-03\");",
          "278:         val segmentRange3 = Pair.newPair(\"2012-01-03\", \"2012-01-04\");",
          "279:         val segmentRange4 = Pair.newPair(\"2012-01-04\", \"2012-01-05\");",
          "280:         val segmentRange5 = Pair.newPair(\"2012-01-05\", \"2012-01-06\");",
          "281:         val layout_20000000001 = 20000000001L;",
          "282:         val layout_20001 = 20001L;",
          "283:         val layout_10001 = 10001L;",
          "285:         val sql = \"select cal_dt, sum(price) from test_kylin_fact inner join test_account on test_kylin_fact.seller_id = test_account.account_id \";",
          "287:         val no_filter = sql + \"group by cal_dt\";",
          "288:         assertNoRealizationFound(project, no_filter);",
          "290:         val sql1_date = sql",
          "291:                 + \"where cal_dt = DATE '2012-01-01' or (cal_dt >= DATE '2012-01-02' and cal_dt < DATE '2012-01-04') group by cal_dt\";",
          "292:         expectedRanges.add(segmentRange1);",
          "293:         expectedRanges.add(segmentRange2);",
          "294:         expectedRanges.add(segmentRange3);",
          "295:         assertPrunedSegmentsRange(project, sql1_date, dfId, expectedRanges, layout_20001, null);",
          "297:         val sql1_date_string = sql",
          "298:                 + \"where cal_dt = '2012-01-01' or (cal_dt >= '2012-01-02' and cal_dt < '2012-01-04') group by cal_dt\";",
          "299:         assertPrunedSegmentsRange(project, sql1_date_string, dfId, expectedRanges, layout_20001, null);",
          "301:         val sql2_date = sql + \"where cal_dt >= DATE '2012-01-03' and cal_dt < DATE '2012-01-10' group by cal_dt\";",
          "302:         expectedRanges.clear();",
          "303:         expectedRanges.add(segmentRange3);",
          "304:         expectedRanges.add(segmentRange4);",
          "305:         expectedRanges.add(segmentRange5);",
          "306:         assertPrunedSegmentsRange(project, sql2_date, dfId, expectedRanges, layout_10001, null);",
          "308:         val sql2_date_string = sql + \"where cal_dt >= '2012-01-03' and cal_dt < '2012-01-10' group by cal_dt\";",
          "309:         assertPrunedSegmentsRange(project, sql2_date_string, dfId, expectedRanges, layout_10001, null);",
          "312:         val sql3_no_layout = \"select trans_id from test_kylin_fact \"",
          "313:                 + \"inner join test_account on test_kylin_fact.seller_id = test_account.account_id \"",
          "314:                 + \"where cal_dt > '2012-01-03' and cal_dt < '2012-01-05'\";",
          "315:         assertNoRealizationFound(project, sql3_no_layout);",
          "317:         expectedRanges.clear();",
          "318:         expectedRanges.add(segmentRange1);",
          "319:         expectedRanges.add(segmentRange2);",
          "320:         val sql4_table_index = \"select trans_id from test_kylin_fact \"",
          "321:                 + \"inner join test_account on test_kylin_fact.seller_id = test_account.account_id \"",
          "322:                 + \"where cal_dt > '2012-01-01' and cal_dt < '2012-01-03'\";",
          "323:         assertPrunedSegmentsRange(project, sql4_table_index, dfId, expectedRanges, layout_20000000001, null);",
          "326:         val sql5 = \"select trans_id, sum(price) \"",
          "327:                 + \"from test_kylin_fact inner join test_account on test_kylin_fact.seller_id = test_account.account_id \"",
          "328:                 + \"where cal_dt > '2012-01-03' and cal_dt < '2012-01-06' group by trans_id\";",
          "330:         assertNoRealizationFound(project, sql5);",
          "331:     }",
          "334:     @Test",
          "335:     public void testHeterogeneousSegmentFilter() throws SqlParseException {",
          "347:         val project = \"heterogeneous_segment\";",
          "348:         val dfId = \"747f864b-9721-4b97-acde-0aa8e8656cba\";",
          "349:         val expectedRanges = Lists.<Pair<String, String>> newArrayList();",
          "350:         val segmentRange1 = Pair.newPair(\"2012-01-01\", \"2012-01-02\");",
          "356:         val layout_20000000001 = 20000000001L;",
          "361:         val sql = \"select cal_dt from test_kylin_fact inner join test_account on test_kylin_fact.seller_id = test_account.account_id \";",
          "363:         val sql1_date = sql + \"where cal_dt = DATE '2012-01-01' and test_account.ACCOUNT_SELLER_LEVEL = 1 \";",
          "364:         expectedRanges.add(segmentRange1);",
          "365:         assertPrunedSegmentsRange(project, sql1_date, dfId, expectedRanges, layout_20000000001, null,",
          "366:                 \"=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),=(DEFAULT.TEST_ACCOUNT.ACCOUNT_SELLER_LEVEL, 1)\");",
          "367:     }",
          "370:     @Test",
          "371:     public void testHeterogeneousSegmentFilters() throws SqlParseException {",
          "383:         val project = \"heterogeneous_segment\";",
          "385:         val sql = \"with T1 as (select cal_dt, trans_id \\n\" + \"from test_kylin_fact inner join test_account \\n\"",
          "386:                 + \"on test_kylin_fact.seller_id = test_account.account_id \\n\"",
          "387:                 + \"where cal_dt between date'2012-01-01' and date'2012-01-03'\\n\" + \"group by cal_dt, trans_id)\\n\";",
          "389:         { // composite filters",
          "390:             val sqlFilter = sql + \"select * from T1\\n\"",
          "391:                     + \"where (cal_dt = DATE'2012-01-01' or (cast(cal_dt as date) = '2012-01-02' or cal_dt = '2012-01-03')) and (cal_dt is not null or cal_dt in ('2012-01-01', '2012-01-02'))\";",
          "392:             val context = getMatchedContexts(project, sqlFilter).get(0);",
          "393:             assertFiltersAndLayout(context, null,",
          "394:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),\"",
          "395:                             + \"OR(=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01), =(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02), =(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)),\"",
          "396:                             + \"OR(IS NOT NULL(DEFAULT.TEST_KYLIN_FACT.CAL_DT), OR(=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01), =(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02)))\");",
          "397:         }",
          "399:         { // invalid filters with or",
          "400:             val sqlFilter = sql + \"select * from T1\\n\"",
          "401:                     + \"where trans_id = 123  or trans_id + 1 = 123 or (trans_id + 2 = 234 and trans_id = 345)\";",
          "402:             val context = getMatchedContexts(project, sqlFilter).get(0);",
          "403:             assertFiltersAndLayout(context, null,",
          "404:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\");",
          "405:         }",
          "407:         { // invalid filters with and",
          "408:             val sqlFilter = sql + \"select * from T1\\n\"",
          "409:                     + \"where trans_id = 123 and (trans_id + 2 = 234 or trans_id = 345)\";",
          "410:             val context = getMatchedContexts(project, sqlFilter).get(0);",
          "411:             assertFiltersAndLayout(context, null,",
          "412:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),\"",
          "413:                             + \"=(DEFAULT.TEST_KYLIN_FACT.TRANS_ID, 123)\");",
          "414:         }",
          "416:         { // invalid filters with not",
          "417:             val sqlFilter = sql + \"select * from T1\\n\"",
          "418:                     + \"where trans_id = 123 and (not(trans_id = 234) or trans_id = 345) and (not(trans_id + 1 = 132))\";",
          "419:             val context = getMatchedContexts(project, sqlFilter).get(0);",
          "420:             assertFiltersAndLayout(context, null,",
          "421:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),\"",
          "422:                             + \"=(DEFAULT.TEST_KYLIN_FACT.TRANS_ID, 123),OR(<>(DEFAULT.TEST_KYLIN_FACT.TRANS_ID, 234), =(DEFAULT.TEST_KYLIN_FACT.TRANS_ID, 345))\");",
          "423:         }",
          "424:     }",
          "427:     @Test",
          "428:     public void testHeterogeneousSegmentFilterPushdownJoin() throws SqlParseException {",
          "440:         val project = \"heterogeneous_segment\";",
          "442:         val seg1Id = \"8892fa3f-f607-4eec-8159-7c5ae2f16942\";",
          "443:         val seg2Id = \"d75a822c-788a-4592-a500-cf20186dded1\";",
          "448:         val sql = \"with T1 as (select cal_dt, trans_id \\n\" + \"from test_kylin_fact inner join test_account \\n\"",
          "449:                 + \"on test_kylin_fact.seller_id = test_account.account_id \\n\"",
          "450:                 + \"where cal_dt between date'2012-01-01' and date'2012-01-03'\\n\" + \"group by cal_dt, trans_id),\\n\"",
          "451:                 + \"T2 as (\\n\" + \"select cal_dt \\n\" + \"from test_kylin_fact inner join test_account \\n\"",
          "452:                 + \"on test_kylin_fact.seller_id = test_account.account_id \\n\"",
          "453:                 + \"where cal_dt between date'2012-01-01' and date'2012-01-02'\\n\" + \"group by cal_dt\\n\" + \")\\n\";",
          "455:         { // inner join",
          "456:             val sqlInnerJoin = sql + \" select * from T1 inner join T2 on T1.cal_dt = T2.cal_dt \\n\"",
          "457:                     + \" where T1.cal_dt = '2012-01-01' and T2.cal_dt = DATE '2012-01-02'\";",
          "458:             val contexts = getMatchedContexts(project, sqlInnerJoin);",
          "459:             assertFiltersAndLayout(contexts.get(0), seg1Id,",
          "460:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01)\");",
          "461:             assertFiltersAndLayout(contexts.get(1), seg2Id,",
          "462:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02),=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02)\");",
          "463:         }",
          "465:         { // left join",
          "466:             val sqlLeftJoin = sql + \" select * from T1 left join T2 on T1.cal_dt = T2.cal_dt \\n\"",
          "467:                     + \" where T1.cal_dt = DATE '2012-01-01' and T2.cal_dt = DATE '2012-01-02'\";",
          "468:             val contexts = getMatchedContexts(project, sqlLeftJoin);",
          "469:             assertFiltersAndLayout(contexts.get(0), seg1Id,",
          "470:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03),=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01)\");",
          "471:             assertFiltersAndLayout(contexts.get(1), null,",
          "472:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02)\");",
          "473:         }",
          "475:         { // right join",
          "476:             val sqlRightJoin = sql + \" select * from T1 right join T2 on T1.cal_dt = T2.cal_dt \\n\"",
          "477:                     + \" where T1.cal_dt = DATE '2012-01-01' and T2.cal_dt = DATE '2012-01-02'\";",
          "478:             val contexts = getMatchedContexts(project, sqlRightJoin);",
          "479:             assertFiltersAndLayout(contexts.get(0), seg2Id,",
          "480:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02),=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02)\");",
          "481:             assertFiltersAndLayout(contexts.get(1), null,",
          "482:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\");",
          "483:         }",
          "485:         { // full join",
          "486:             val sqlFullJoin = sql + \" select * from T1 full join T2 on T1.cal_dt = T2.cal_dt \\n\"",
          "487:                     + \" where T1.cal_dt = DATE '2012-01-01' and T2.cal_dt = DATE '2012-01-02'\";",
          "488:             val contexts = getMatchedContexts(project, sqlFullJoin);",
          "489:             assertFiltersAndLayout(contexts.get(0), null,",
          "490:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\");",
          "491:             assertFiltersAndLayout(contexts.get(1), null,",
          "492:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-02)\");",
          "493:         }",
          "494:     }",
          "496:     @Test",
          "497:     public void testHeterogeneousSegmentFilterConditionLimit() throws SqlParseException {",
          "509:         val project = \"heterogeneous_segment\";",
          "517:         val sql = \"with T1 as (select cal_dt, trans_id \\n\" + \"from test_kylin_fact inner join test_account \\n\"",
          "518:                 + \"on test_kylin_fact.seller_id = test_account.account_id \\n\"",
          "519:                 + \"where cal_dt between date'2012-01-01' and date'2012-01-03'\\n\" + \"group by cal_dt, trans_id)\\n\";",
          "521:         {",
          "522:             val sqlWithTooManyOrs = sql + \" select * from T1 where \" + \"(cal_dt='2012-01-01' and trans_id = 1) or \\n\"",
          "523:                     + \"(cal_dt='2012-01-01' and trans_id = 2) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 3) or\\n\"",
          "524:                     + \"(cal_dt='2012-01-01' and trans_id = 4) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 5) or\\n\"",
          "525:                     + \"(cal_dt='2012-01-01' and trans_id = 6) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 7) or\\n\"",
          "526:                     + \"(cal_dt='2012-01-01' and trans_id = 8) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 9) or\\n\"",
          "527:                     + \"(cal_dt='2012-01-01' and trans_id = 10) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 12) or\\n\"",
          "528:                     + \"(cal_dt='2012-01-01' and trans_id = 13) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 14) or\\n\"",
          "529:                     + \"(cal_dt='2012-01-01' and trans_id = 15) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 16) or\\n\"",
          "530:                     + \"(cal_dt='2012-01-01' and trans_id = 17) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 18) or\\n\"",
          "531:                     + \"(cal_dt='2012-01-01' and trans_id = 19) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 20)\";",
          "532:             val contexts = getMatchedContexts(project, sqlWithTooManyOrs);",
          "533:             Assert.assertEquals(",
          "534:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\",",
          "535:                     contexts.get(0).getExpandedFilterConditions().stream().map(RexNode::toString)",
          "536:                             .collect(Collectors.joining(\",\")));",
          "537:         }",
          "539:         {",
          "540:             val sqlWithFilter = sql + \" select * from T1 where \" + \"(cal_dt='2012-01-01' and trans_id = 1) or \\n\"",
          "541:                     + \"(cal_dt='2012-01-01' and trans_id = 2) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 3) or\\n\"",
          "542:                     + \"(cal_dt='2012-01-01' and trans_id = 4) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 5) or\\n\"",
          "543:                     + \"(cal_dt='2012-01-01' and trans_id = 6) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 7) or\\n\"",
          "544:                     + \"(cal_dt='2012-01-01' and trans_id = 8) or\\n\" + \"(cal_dt='2012-01-01' and trans_id = 9) or\\n\"",
          "545:                     + \"(cal_dt='2012-01-01' and trans_id = 10)\";",
          "546:             val contexts = getMatchedContexts(project, sqlWithFilter);",
          "547:             Assert.assertNotEquals(",
          "548:                     \">=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-01),<=(DEFAULT.TEST_KYLIN_FACT.CAL_DT, 2012-01-03)\",",
          "549:                     contexts.get(0).getExpandedFilterConditions().stream().map(RexNode::toString)",
          "550:                             .collect(Collectors.joining(\",\")));",
          "551:         }",
          "553:     }",
          "555:     private List<OLAPContext> getMatchedContexts(String project, String sql) throws SqlParseException {",
          "556:         return OlapContextUtil.getOlapContexts(project, sql);",
          "557:     }",
          "559:     private void assertFiltersAndLayout(OLAPContext context, String segId, String expectedFilterCond) {",
          "560:         if (segId != null) {",
          "561:             Assert.assertEquals(segId, context.storageContext.getPrunedSegments().get(0).getId());",
          "562:         }",
          "563:         if (expectedFilterCond != null) {",
          "564:             Assert.assertEquals(expectedFilterCond, context.getExpandedFilterConditions().stream()",
          "565:                     .map(RexNode::toString).collect(Collectors.joining(\",\")));",
          "566:         }",
          "567:     }",
          "569:     private void assertNoRealizationFound(String project, String sql) throws SqlParseException {",
          "570:         val context = getMatchedContexts(project, sql).get(0);",
          "571:         Assert.assertNull(context.realization);",
          "572:     }",
          "574:     private void assertPrunedSegmentsRange(String project, String sql, String dfId,",
          "575:             List<Pair<String, String>> expectedRanges, long expectedLayoutId,",
          "576:             Map<String, List<Long>> expectedPartitions) throws SqlParseException {",
          "577:         assertPrunedSegmentsRange(project, sql, dfId, expectedRanges, expectedLayoutId, expectedPartitions, null);",
          "578:     }",
          "580:     private void assertPrunedSegmentsRange(String project, String sql, String dfId,",
          "581:             List<Pair<String, String>> expectedRanges, long expectedLayoutId,",
          "582:             Map<String, List<Long>> expectedPartitions, String expectedFilterCond) throws SqlParseException {",
          "583:         val context = getMatchedContexts(project, sql).get(0);",
          "585:         if (expectedLayoutId == -1L) {",
          "586:             Assert.assertTrue(context.storageContext.isEmptyLayout());",
          "587:             Assert.assertEquals(Long.valueOf(-1), context.storageContext.getLayoutId());",
          "588:             return;",
          "589:         }",
          "591:         Assert.assertNotNull(context.realization);",
          "592:         val prunedSegments = context.storageContext.getPrunedSegments();",
          "593:         val prunedPartitions = context.storageContext.getPrunedPartitions();",
          "594:         val candidate = context.storageContext.getCandidate();",
          "595:         Assert.assertEquals(expectedRanges.size(), prunedSegments.size());",
          "596:         Assert.assertEquals(expectedLayoutId, candidate.getLayoutEntity().getId());",
          "598:         val model = NDataModelManager.getInstance(getTestConfig(), project).getDataModelDesc(dfId);",
          "599:         val partitionColDateFormat = model.getPartitionDesc().getPartitionDateFormat();",
          "600:         for (int i = 0; i < prunedSegments.size(); i++) {",
          "601:             val segment = prunedSegments.get(i);",
          "602:             val start = DateFormat.formatToDateStr(segment.getTSRange().getStart(), partitionColDateFormat);",
          "603:             val end = DateFormat.formatToDateStr(segment.getTSRange().getEnd(), partitionColDateFormat);",
          "604:             val expectedRange = expectedRanges.get(i);",
          "605:             Assert.assertEquals(expectedRange.getFirst(), start);",
          "606:             Assert.assertEquals(expectedRange.getSecond(), end);",
          "609:             if (expectedPartitions == null)",
          "610:                 continue;",
          "611:             Assert.assertEquals(expectedPartitions.size(), prunedPartitions.size());",
          "612:             Assert.assertEquals(expectedPartitions.get(segment.getId()), prunedPartitions.get(segment.getId()));",
          "613:         }",
          "615:         if (expectedFilterCond != null) {",
          "616:             Assert.assertEquals(expectedFilterCond, context.getExpandedFilterConditions().stream()",
          "617:                     .map(RexNode::toString).collect(Collectors.joining(\",\")));",
          "618:         }",
          "619:     }",
          "620: }",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/NDataflowCapabilityCheckerTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.Map;",
          "23: import org.apache.calcite.sql.parser.SqlParseException;",
          "24: import org.apache.kylin.common.KylinConfig;",
          "25: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "26: import org.apache.kylin.metadata.cube.cuboid.NLookupCandidate;",
          "27: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "28: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "29: import org.apache.kylin.metadata.cube.model.NDataflowCapabilityChecker;",
          "30: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "31: import org.apache.kylin.metadata.cube.model.NDataflowUpdate;",
          "32: import org.apache.kylin.metadata.model.NTableMetadataManager;",
          "33: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "34: import org.apache.kylin.query.relnode.OLAPContext;",
          "35: import org.apache.kylin.util.OlapContextUtil;",
          "36: import org.junit.Assert;",
          "37: import org.junit.Test;",
          "39: public class NDataflowCapabilityCheckerTest extends NLocalWithSparkSessionTest {",
          "41:     @Test",
          "42:     public void testCapabilityResult() throws SqlParseException {",
          "43:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "44:                 .getDataflow(\"abe3bf1a-c4bc-458d-8278-7ea8b00f5e96\");",
          "45:         String sql = \"SELECT seller_ID FROM TEST_KYLIN_FACT LEFT JOIN TEST_ACCOUNT ON SELLER_ID = ACCOUNT_ID\";",
          "46:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "47:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "48:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "49:         CapabilityResult result = NDataflowCapabilityChecker.check(dataflow, dataflow.getQueryableSegments(),",
          "50:                 olapContext.getSQLDigest(), null);",
          "51:         Assert.assertNotNull(result);",
          "52:         Assert.assertEquals((int) result.getSelectedCandidate().getCost(), result.cost);",
          "53:     }",
          "55:     @Test",
          "56:     public void testLookupMatch() throws SqlParseException {",
          "57:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "58:                 .getDataflow(\"89af4ee2-2cdb-4b07-b39e-4c29856309aa\");",
          "61:         NTableMetadataManager.getInstance(dataflow.getConfig(), dataflow.getProject()).getTableDesc(\"EDW.TEST_SITES\")",
          "62:                 .setLastSnapshotPath(\"default/table_snapshot/EDW.TEST_SITES/c1e8096e-4e7f-4387-b7c3-5147c1ce38d6\");",
          "65:         {",
          "66:             String sql = \"select SITE_ID from EDW.TEST_SITES\";",
          "67:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "68:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "69:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "70:             CapabilityResult result = NDataflowCapabilityChecker.check(dataflow, dataflow.getQueryableSegments(),",
          "71:                     olapContext.getSQLDigest(), null);",
          "72:             Assert.assertNotNull(result);",
          "73:             Assert.assertTrue(result.getSelectedCandidate() instanceof NLookupCandidate);",
          "74:             Assert.assertFalse(olapContext.getSQLDigest().allColumns.isEmpty());",
          "75:             Assert.assertEquals(1, olapContext.getSQLDigest().allColumns.size());",
          "76:         }",
          "79:         {",
          "80:             String sql = \"select sum(SITE_ID) from EDW.TEST_SITES\";",
          "81:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "82:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "83:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "84:             CapabilityResult result = NDataflowCapabilityChecker.check(dataflow, dataflow.getQueryableSegments(),",
          "85:                     olapContext.getSQLDigest(), null);",
          "86:             Assert.assertNotNull(result);",
          "87:             Assert.assertTrue(result.getSelectedCandidate() instanceof NLookupCandidate);",
          "88:             Assert.assertFalse(olapContext.getSQLDigest().allColumns.isEmpty());",
          "89:             Assert.assertEquals(1, olapContext.getSQLDigest().allColumns.size());",
          "90:         }",
          "92:         {",
          "94:             String sql = \"select sum(SITE_ID) from EDW.TEST_SITES\";",
          "95:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "96:             removeAllSegments(dataflow);",
          "97:             dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "98:                     .getDataflow(\"89af4ee2-2cdb-4b07-b39e-4c29856309aa\");",
          "99:             CapabilityResult result = NDataflowCapabilityChecker.check(dataflow, dataflow.getQueryableSegments(),",
          "100:                     olapContext.getSQLDigest(), null);",
          "101:             Assert.assertFalse(result.isCapable());",
          "102:         }",
          "103:     }",
          "105:     private void removeAllSegments(NDataflow dataflow) {",
          "106:         NDataflowUpdate dataflowUpdate = new NDataflowUpdate(dataflow.getUuid());",
          "107:         dataflowUpdate.setToRemoveSegs(dataflow.getSegments().toArray(new NDataSegment[0]));",
          "108:         NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject()).updateDataflow(dataflowUpdate);",
          "109:     }",
          "110: }",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutChooserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.LinkedHashMap;",
          "22: import java.util.List;",
          "23: import java.util.Map;",
          "25: import org.apache.calcite.sql.parser.SqlParseException;",
          "26: import org.apache.kylin.common.KylinConfig;",
          "27: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "28: import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;",
          "29: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "30: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "31: import org.apache.kylin.metadata.cube.cuboid.NQueryLayoutChooser;",
          "32: import org.apache.kylin.metadata.cube.model.IndexEntity;",
          "33: import org.apache.kylin.metadata.cube.model.LayoutEntity;",
          "34: import org.apache.kylin.metadata.cube.model.NDataLayout;",
          "35: import org.apache.kylin.metadata.cube.model.NDataSegDetails;",
          "36: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "37: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "38: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "39: import org.apache.kylin.metadata.cube.model.NDataflowUpdate;",
          "40: import org.apache.kylin.metadata.cube.model.NIndexPlanManager;",
          "41: import org.apache.kylin.metadata.model.ColumnDesc;",
          "42: import org.apache.kylin.metadata.model.NDataModel;",
          "43: import org.apache.kylin.metadata.model.NTableMetadataManager;",
          "44: import org.apache.kylin.metadata.model.TableDesc;",
          "45: import org.apache.kylin.metadata.model.TableExtDesc;",
          "46: import org.apache.kylin.metadata.project.EnhancedUnitOfWork;",
          "47: import org.apache.kylin.query.relnode.OLAPContext;",
          "48: import org.apache.kylin.util.MetadataTestUtils;",
          "49: import org.apache.kylin.util.OlapContextUtil;",
          "50: import org.junit.After;",
          "51: import org.junit.Assert;",
          "52: import org.junit.Before;",
          "53: import org.junit.Test;",
          "55: public class QueryLayoutChooserTest extends NLocalWithSparkSessionTest {",
          "57:     @Before",
          "58:     public void setUp() throws Exception {",
          "59:         super.setUp();",
          "60:     }",
          "62:     @After",
          "63:     public void teardown() throws Exception {",
          "64:         super.tearDown();",
          "65:     }",
          "67:     @Test",
          "68:     public void testCCNullChecking() throws SqlParseException {",
          "70:         NDataflowManager dataflowManager = NDataflowManager.getInstance(getTestConfig(), getProject());",
          "71:         {",
          "72:             String sql = \"select distinct DEAL_AMOUNT from test_kylin_fact \\n\";",
          "73:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "76:             String modelWithCCId = \"89af4ee2-2cdb-4b07-b39e-4c29856309aa\";",
          "77:             NDataflow dataflow = dataflowManager.getDataflow(modelWithCCId);",
          "78:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "79:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "82:             String modelWithNoCCId = \"abe3bf1a-c4bc-458d-8278-7ea8b00f5e96\";",
          "83:             NDataflow dataflowNoCC = dataflowManager.getDataflow(modelWithNoCCId);",
          "84:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflowNoCC,",
          "85:                     dataflowNoCC.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "86:             Assert.assertNull(layoutCandidate);",
          "87:         }",
          "90:         {",
          "91:             String sql = \"select sum(DEAL_AMOUNT) from test_kylin_fact \\n\";",
          "92:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "95:             String modelWithCCId = \"89af4ee2-2cdb-4b07-b39e-4c29856309aa\";",
          "96:             NDataflow dataflow = dataflowManager.getDataflow(modelWithCCId);",
          "97:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "98:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "101:             String modelWithNoCCId = \"abe3bf1a-c4bc-458d-8278-7ea8b00f5e96\";",
          "102:             NDataflow dataflowNoCC = dataflowManager.getDataflow(modelWithNoCCId);",
          "103:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflowNoCC,",
          "104:                     dataflowNoCC.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "105:             Assert.assertNull(layoutCandidate);",
          "106:         }",
          "109:         {",
          "110:             String sql = \"select DEAL_AMOUNT from test_kylin_fact \\n\";",
          "111:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "114:             String modelWithCCId = \"89af4ee2-2cdb-4b07-b39e-4c29856309aa\";",
          "115:             NDataflow dataflow = dataflowManager.getDataflow(modelWithCCId);",
          "116:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "117:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "120:             String modelWithNoCCId = \"abe3bf1a-c4bc-458d-8278-7ea8b00f5e96\";",
          "121:             NDataflow dataflowNoCC = dataflowManager.getDataflow(modelWithNoCCId);",
          "122:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflowNoCC,",
          "123:                     dataflowNoCC.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "124:             Assert.assertNull(layoutCandidate);",
          "125:         }",
          "126:     }",
          "128:     @Test",
          "129:     public void testSelectIndexInOneModel() throws SqlParseException {",
          "131:         String modelId = \"89af4ee2-2cdb-4b07-b39e-4c29856309aa\";",
          "132:         EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {",
          "133:             NDataflowManager dataflowManager = NDataflowManager.getInstance(getTestConfig(), getProject());",
          "134:             NDataSegDetails segDetails = dataflowManager.getDataflow(modelId).getLatestReadySegment().getSegDetails();",
          "135:             NDataLayout lowestCostLayout = NDataLayout.newDataLayout(segDetails, 10001L);",
          "136:             lowestCostLayout.setRows(1000L);",
          "139:             NDataflowUpdate dataflowUpdate = new NDataflowUpdate(modelId);",
          "140:             dataflowUpdate.setToAddOrUpdateLayouts(lowestCostLayout);",
          "141:             dataflowManager.updateDataflow(dataflowUpdate);",
          "142:             return null;",
          "143:         }, getProject());",
          "145:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "147:         {",
          "148:             String sql = \"select CAL_DT, count(price) as GMV from test_kylin_fact \\n\"",
          "149:                     + \" where CAL_DT='2012-01-10' group by CAL_DT \";",
          "150:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "151:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "152:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "153:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "154:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "155:             Assert.assertNotNull(layoutCandidate);",
          "156:             Assert.assertEquals(10001L, layoutCandidate.getLayoutEntity().getId());",
          "157:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "158:             Assert.assertEquals(1000.0D, layoutCandidate.getCost(), 0.01);",
          "159:         }",
          "162:         {",
          "163:             String sql = \"select CAL_DT from test_kylin_fact where CAL_DT='2012-01-10'\";",
          "164:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "165:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "166:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "167:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "168:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "169:             Assert.assertNotNull(layoutCandidate);",
          "170:             Assert.assertTrue(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "171:         }",
          "172:     }",
          "177:     @Test",
          "178:     public void testFilterColsAffectIndexSelection() throws SqlParseException {",
          "180:         String modelId = \"89af4ee2-2cdb-4b07-b39e-4c29856309aa\";",
          "181:         cleanAlreadyExistingLayoutsInSegments(modelId);",
          "182:         addDesiredLayoutsToIndexPlanAndSegments(getProject(), modelId);",
          "183:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "185:         {",
          "186:             String sql = \"select CAL_DT, TRANS_ID, count(*) as GMV from test_kylin_fact \\n\"",
          "187:                     + \" where CAL_DT='2012-01-10' and TRANS_ID > 10000 group by CAL_DT, TRANS_ID \";",
          "188:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "189:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "190:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "191:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "192:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "193:             Assert.assertNotNull(layoutCandidate);",
          "194:             Assert.assertEquals(1010001, layoutCandidate.getLayoutEntity().getId());",
          "195:         }",
          "197:         {",
          "198:             String sql = \"select CAL_DT, TRANS_ID, count(*) as GMV from test_kylin_fact \\n\"",
          "199:                     + \" where CAL_DT > '2012-01-10' and TRANS_ID = 10000 group by CAL_DT, TRANS_ID \";",
          "200:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "201:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "202:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "203:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "204:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "205:             Assert.assertNotNull(layoutCandidate);",
          "206:             Assert.assertEquals(1010002, layoutCandidate.getLayoutEntity().getId());",
          "207:         }",
          "210:         {",
          "211:             String sql = \"select CAL_DT, TRANS_ID, count(*) as GMV from test_kylin_fact \\n\"",
          "212:                     + \" where CAL_DT = '2012-01-10' and TRANS_ID = 10000 group by CAL_DT, TRANS_ID \";",
          "213:             mockTableStats();",
          "214:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "215:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "216:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "217:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "218:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "219:             Assert.assertNotNull(layoutCandidate);",
          "220:             Assert.assertEquals(1010002, layoutCandidate.getLayoutEntity().getId());",
          "221:         }",
          "222:     }",
          "224:     private void addDesiredLayoutsToIndexPlanAndSegments(String project, String modelId) {",
          "225:         EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {",
          "226:             NIndexPlanManager indexMgr = NIndexPlanManager.getInstance(getTestConfig(), project);",
          "227:             indexMgr.updateIndexPlan(modelId, copyForWrite -> {",
          "229:                 IndexEntity oneIndex = new IndexEntity();",
          "230:                 long nextAggregationIndexId = copyForWrite.getNextAggregationIndexId();",
          "231:                 oneIndex.setId(nextAggregationIndexId);",
          "232:                 oneIndex.setDimensions(Lists.newArrayList(1, 2, 3));",
          "233:                 oneIndex.setMeasures(Lists.newArrayList(100000));",
          "234:                 LayoutEntity newLayout1 = new LayoutEntity();",
          "235:                 newLayout1.setId(oneIndex.getId() + 1);",
          "236:                 newLayout1.setAuto(true);",
          "237:                 newLayout1.setColOrder(Lists.newArrayList(2, 1, 3, 100000));",
          "238:                 LayoutEntity newLayout2 = new LayoutEntity();",
          "239:                 newLayout2.setId(oneIndex.getId() + 2);",
          "240:                 newLayout2.setAuto(true);",
          "241:                 newLayout2.setColOrder(Lists.newArrayList(1, 2, 3, 100000));",
          "242:                 oneIndex.setLayouts(Lists.newArrayList(newLayout1, newLayout2));",
          "245:                 IndexEntity anotherIndex = new IndexEntity();",
          "246:                 anotherIndex.setId(nextAggregationIndexId + IndexEntity.INDEX_ID_STEP);",
          "247:                 anotherIndex.setDimensions(Lists.newArrayList(1, 2, 3, 4));",
          "248:                 anotherIndex.setMeasures(Lists.newArrayList(100000));",
          "249:                 LayoutEntity newLayout = new LayoutEntity();",
          "250:                 newLayout.setId(anotherIndex.getId() + 1);",
          "251:                 newLayout.setAuto(true);",
          "252:                 newLayout.setColOrder(Lists.newArrayList(2, 1, 3, 4, 100000));",
          "253:                 anotherIndex.setLayouts(Lists.newArrayList(newLayout));",
          "256:                 List<IndexEntity> indexes = copyForWrite.getIndexes();",
          "257:                 indexes.add(oneIndex);",
          "258:                 indexes.add(anotherIndex);",
          "259:             });",
          "261:             NDataflowManager dfMgr = NDataflowManager.getInstance(getTestConfig(), getProject());",
          "262:             NDataSegment latestSegment = dfMgr.getDataflow(modelId).getLatestReadySegment();",
          "263:             NDataflowUpdate dataflowUpdate = new NDataflowUpdate(modelId);",
          "264:             NDataLayout layout1 = NDataLayout.newDataLayout(latestSegment.getSegDetails(), 1010001L);",
          "265:             layout1.setRows(1000L);",
          "266:             NDataLayout layout2 = NDataLayout.newDataLayout(latestSegment.getSegDetails(), 1010002L);",
          "267:             layout2.setRows(1000L);",
          "268:             NDataLayout layout3 = NDataLayout.newDataLayout(latestSegment.getSegDetails(), 1020001L);",
          "269:             layout3.setRows(1000L);",
          "270:             dataflowUpdate.setToAddOrUpdateLayouts(layout1, layout2, layout3);",
          "271:             dfMgr.updateDataflow(dataflowUpdate);",
          "272:             return null;",
          "273:         }, project);",
          "274:     }",
          "276:     @Test",
          "277:     public void testDerivedColsSelection() throws SqlParseException {",
          "279:         String modelId = \"89af4ee2-2cdb-4b07-b39e-4c29856309aa\";",
          "280:         cleanAlreadyExistingLayoutsInSegments(modelId);",
          "281:         mockDerivedIndex(getProject(), modelId);",
          "282:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "284:         String sql = \"select test_kylin_fact.lstg_format_name, META_CATEG_NAME, count(*) as TRANS_CNT \\n\"",
          "285:                 + \" from test_kylin_fact \\n\" //",
          "286:                 + \"left JOIN edw.test_cal_dt as test_cal_dt ON test_kylin_fact.cal_dt = test_cal_dt.cal_dt\\n\" //",
          "287:                 + \" left JOIN test_category_groupings ON test_kylin_fact.leaf_categ_id = test_category_groupings.leaf_categ_id \"",
          "288:                 + \"AND test_kylin_fact.lstg_site_id = test_category_groupings.site_id\\n\"",
          "289:                 + \" left JOIN edw.test_sites as test_sites ON test_kylin_fact.lstg_site_id = test_sites.site_id\\n\"",
          "290:                 + \" group by test_kylin_fact.lstg_format_name, META_CATEG_NAME\";",
          "291:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "292:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "293:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "294:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "295:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "296:         Assert.assertNotNull(layoutCandidate);",
          "297:         Assert.assertEquals(1010001L, layoutCandidate.getLayoutEntity().getId());",
          "298:     }",
          "300:     private void mockDerivedIndex(String project, String modelId) {",
          "301:         EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {",
          "302:             NIndexPlanManager indexMgr = NIndexPlanManager.getInstance(getTestConfig(), project);",
          "303:             indexMgr.updateIndexPlan(modelId, copyForWrite -> {",
          "305:                 IndexEntity oneIndex = new IndexEntity();",
          "306:                 long nextAggregationIndexId = copyForWrite.getNextAggregationIndexId();",
          "307:                 oneIndex.setId(nextAggregationIndexId);",
          "308:                 oneIndex.setDimensions(Lists.newArrayList(1, 3, 4, 5, 8));",
          "309:                 oneIndex.setMeasures(Lists.newArrayList(100000));",
          "310:                 LayoutEntity newLayout1 = new LayoutEntity();",
          "311:                 newLayout1.setId(oneIndex.getId() + 1);",
          "312:                 newLayout1.setAuto(true);",
          "313:                 newLayout1.setColOrder(Lists.newArrayList(3, 1, 5, 4, 8, 100000));",
          "314:                 oneIndex.setLayouts(Lists.newArrayList(newLayout1));",
          "317:                 IndexEntity anotherIndex = new IndexEntity();",
          "318:                 anotherIndex.setId(nextAggregationIndexId + IndexEntity.INDEX_ID_STEP);",
          "319:                 anotherIndex.setDimensions(Lists.newArrayList(1, 3, 4, 8));",
          "320:                 anotherIndex.setMeasures(Lists.newArrayList(100000));",
          "321:                 LayoutEntity newLayout2 = new LayoutEntity();",
          "322:                 newLayout2.setId(anotherIndex.getId() + 1);",
          "323:                 newLayout2.setAuto(true);",
          "324:                 newLayout2.setColOrder(Lists.newArrayList(3, 1, 4, 8, 100000));",
          "325:                 anotherIndex.setLayouts(Lists.newArrayList(newLayout2));",
          "328:                 List<IndexEntity> indexes = copyForWrite.getIndexes();",
          "329:                 indexes.add(oneIndex);",
          "330:                 indexes.add(anotherIndex);",
          "331:             });",
          "333:             NDataflowManager dfMgr = NDataflowManager.getInstance(getTestConfig(), getProject());",
          "334:             NDataflowUpdate dataflowUpdate = new NDataflowUpdate(modelId);",
          "335:             NDataSegment latestSegment = dfMgr.getDataflow(modelId).getLatestReadySegment();",
          "336:             NDataLayout layout1 = NDataLayout.newDataLayout(latestSegment.getSegDetails(), 1010001L);",
          "337:             layout1.setRows(1000L);",
          "338:             NDataLayout layout2 = NDataLayout.newDataLayout(latestSegment.getSegDetails(), 1020001L);",
          "339:             layout2.setRows(1000L);",
          "340:             dataflowUpdate.setToAddOrUpdateLayouts(layout1, layout2);",
          "341:             dfMgr.updateDataflow(dataflowUpdate);",
          "342:             return null;",
          "343:         }, project);",
          "344:     }",
          "346:     @Test",
          "347:     public void testDerivedDimWhenModelHasMultipleSameDimTable() throws SqlParseException {",
          "348:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), getProject())",
          "349:                 .getDataflow(\"abe3bf1a-c4bc-458d-8278-7ea8b00f5e96\");",
          "352:         NTableMetadataManager tblMgr = NTableMetadataManager.getInstance(dataflow.getConfig(), dataflow.getProject());",
          "353:         TableDesc tableDesc = tblMgr.getTableDesc(\"DEFAULT.TEST_ACCOUNT\");",
          "354:         tableDesc.setLastSnapshotPath(",
          "355:                 \"default/table_snapshot/DEFAULT.TEST_ACCOUNT/d6ba492b-13bf-444d-b6e3-71bfa903344d\");",
          "357:         String sql = \"select b.ACCOUNT_BUYER_LEVEL from \\\"DEFAULT\\\".\\\"TEST_KYLIN_FACT\\\" a\\n\"",
          "358:                 + \"left join \\\"DEFAULT\\\".\\\"TEST_ACCOUNT\\\" b on a.SELLER_ID = b.ACCOUNT_ID\";",
          "359:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "360:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "361:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "362:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "363:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "364:         Assert.assertNotNull(layoutCandidate);",
          "365:         Assert.assertEquals(20000000001L, layoutCandidate.getLayoutEntity().getId());",
          "366:     }",
          "368:     @Test",
          "369:     public void testSumExprWithAggPushDownEnabled() throws SqlParseException {",
          "370:         getTestConfig().setProperty(\"kylin.query.convert-sum-expression-enabled\", \"true\");",
          "371:         String modelId = \"d67bf0e4-30f4-9248-2528-52daa80be91a\";",
          "372:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "373:         String sql = \"select  sum( \" //",
          "374:                 + \"( case  when (  case when (lineorder.lo_orderdate = t0.x_measure__0) then true\\n\"",
          "375:                 + \" when not (lineorder.lo_orderdate = t0.x_measure__0) then false\\n\" //",
          "376:                 + \" else null end ) then lineorder.lo_quantity\\n\" //",
          "377:                 + \" else cast(null as integer)  end  )  ) as sum_lo_quantity_sum______88\\n\" //",
          "378:                 + \"from  ssb.lineorder lineorder  cross join (\\n\" //",
          "379:                 + \" select  max(lineorder.lo_orderdate) as x_measure__0\\n\" //",
          "380:                 + \" from  ssb.lineorder lineorder group by  1.1000000000000001 ) t0\\n\"",
          "381:                 + \"group by  1.1000000000000001\\n\";",
          "383:         getTestConfig().setProperty(\"kylin.query.calcite.aggregate-pushdown-enabled\", \"true\");",
          "384:         List<OLAPContext> olapContexts = OlapContextUtil.getHepRulesOptimizedOlapContexts(getProject(), sql, false);",
          "387:         OLAPContext oneOlapContext = olapContexts.get(0);",
          "388:         Map<String, String> oneMap = OlapContextUtil.matchJoins(dataflow.getModel(), oneOlapContext);",
          "389:         oneOlapContext.fixModel(dataflow.getModel(), oneMap);",
          "390:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "391:                 dataflow.getQueryableSegments(), oneOlapContext.getSQLDigest(), null);",
          "392:         Assert.assertNotNull(layoutCandidate);",
          "393:         Assert.assertEquals(1L, layoutCandidate.getLayoutEntity().getId());",
          "396:         OLAPContext anotherOlapContext = olapContexts.get(1);",
          "397:         Map<String, String> anotherMap = OlapContextUtil.matchJoins(dataflow.getModel(), anotherOlapContext);",
          "398:         anotherOlapContext.fixModel(dataflow.getModel(), anotherMap);",
          "399:         NLayoutCandidate anotherCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "400:                 dataflow.getQueryableSegments(), anotherOlapContext.getSQLDigest(), null);",
          "401:         Assert.assertNotNull(anotherCandidate);",
          "402:         Assert.assertEquals(1L, anotherCandidate.getLayoutEntity().getId());",
          "403:     }",
          "405:     @Test",
          "406:     public void testSumExprWithAggPushDownDisabled() throws SqlParseException {",
          "408:         getTestConfig().setProperty(\"kylin.query.convert-sum-expression-enabled\", \"true\");",
          "409:         String modelId = \"d67bf0e4-30f4-9248-2528-52daa80be91a\";",
          "410:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "411:         String sql = \"select  sum( \" //",
          "412:                 + \"( case  when (  case when (lineorder.lo_orderdate = t0.x_measure__0) then true\\n\"",
          "413:                 + \" when not (lineorder.lo_orderdate = t0.x_measure__0) then false\\n\" //",
          "414:                 + \" else null end ) then lineorder.lo_quantity\\n\" //",
          "415:                 + \" else cast(null as integer)  end  )  ) as sum_lo_quantity_sum______88\\n\" //",
          "416:                 + \"from  ssb.lineorder lineorder  cross join (\\n\" //",
          "417:                 + \" select  max(lineorder.lo_orderdate) as x_measure__0\\n\" //",
          "418:                 + \" from  ssb.lineorder lineorder group by  1.1000000000000001 ) t0\\n\"",
          "419:                 + \"group by  1.1000000000000001\\n\";",
          "421:         getTestConfig().setProperty(\"kylin.query.calcite.aggregate-pushdown-enabled\", \"false\");",
          "422:         List<OLAPContext> olapContexts = OlapContextUtil.getHepRulesOptimizedOlapContexts(getProject(), sql, false);",
          "425:         OLAPContext oneOlapContext = olapContexts.get(0);",
          "426:         Map<String, String> oneMap = OlapContextUtil.matchJoins(dataflow.getModel(), oneOlapContext);",
          "427:         oneOlapContext.fixModel(dataflow.getModel(), oneMap);",
          "428:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "429:                 dataflow.getQueryableSegments(), oneOlapContext.getSQLDigest(), null);",
          "430:         Assert.assertNotNull(layoutCandidate);",
          "431:         Assert.assertEquals(1L, layoutCandidate.getLayoutEntity().getId());",
          "434:         OLAPContext anotherOlapContext = olapContexts.get(1);",
          "435:         Map<String, String> anotherMap = OlapContextUtil.matchJoins(dataflow.getModel(), anotherOlapContext);",
          "436:         anotherOlapContext.fixModel(dataflow.getModel(), anotherMap);",
          "437:         NLayoutCandidate anotherCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "438:                 dataflow.getQueryableSegments(), anotherOlapContext.getSQLDigest(), null);",
          "439:         Assert.assertNotNull(anotherCandidate);",
          "440:         Assert.assertEquals(20000000001L, anotherCandidate.getLayoutEntity().getId());",
          "441:     }",
          "443:     @Test",
          "444:     public void testShardByCol() throws SqlParseException {",
          "446:         String modelId = \"89af4ee2-2cdb-4b07-b39e-4c29856309aa\";",
          "447:         cleanAlreadyExistingLayoutsInSegments(modelId);",
          "453:         mockShardByLayout(getProject(), modelId);",
          "454:         mockTableStats();",
          "455:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "457:         {",
          "458:             String sql = \"select CAL_DT, TRANS_ID, count(*) as GMV from test_kylin_fact \\n\"",
          "459:                     + \" where CAL_DT = '2012-01-10' and TRANS_ID = 10000 group by CAL_DT, TRANS_ID \";",
          "460:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "461:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "462:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "469:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "470:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "471:             Assert.assertNotNull(layoutCandidate);",
          "472:             Assert.assertEquals(1010002, layoutCandidate.getLayoutEntity().getId());",
          "473:         }",
          "475:         {",
          "476:             String sql = \"select CAL_DT, TRANS_ID, count(*) as GMV from test_kylin_fact \\n\"",
          "477:                     + \" where CAL_DT = '2012-01-10' and TRANS_ID > 10000 group by CAL_DT, TRANS_ID \";",
          "478:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "479:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "480:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "481:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "482:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "483:             Assert.assertNotNull(layoutCandidate);",
          "484:             Assert.assertEquals(1010003, layoutCandidate.getLayoutEntity().getId());",
          "485:         }",
          "486:     }",
          "488:     private void mockShardByLayout(String project, String modelId) {",
          "489:         EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {",
          "490:             NIndexPlanManager indexMgr = NIndexPlanManager.getInstance(getTestConfig(), getProject());",
          "491:             indexMgr.updateIndexPlan(modelId, copyForWrite -> {",
          "492:                 IndexEntity oneIndex = new IndexEntity();",
          "493:                 oneIndex.setId(copyForWrite.getNextAggregationIndexId());",
          "494:                 oneIndex.setDimensions(Lists.newArrayList(1, 2, 3));",
          "495:                 oneIndex.setMeasures(Lists.newArrayList(100000));",
          "497:                 LayoutEntity newLayout1 = new LayoutEntity();",
          "498:                 newLayout1.setId(oneIndex.getId() + 1);",
          "499:                 newLayout1.setAuto(true);",
          "500:                 newLayout1.setColOrder(Lists.newArrayList(1, 2, 3, 100000));",
          "502:                 LayoutEntity newLayout2 = new LayoutEntity();",
          "503:                 newLayout2.setId(oneIndex.getId() + 2);",
          "504:                 newLayout2.setAuto(true);",
          "505:                 newLayout2.setColOrder(Lists.newArrayList(2, 1, 3, 100000));",
          "506:                 newLayout2.setShardByColumns(Lists.newArrayList(1));",
          "508:                 LayoutEntity newLayout3 = new LayoutEntity();",
          "509:                 newLayout3.setId(oneIndex.getId() + 3);",
          "510:                 newLayout3.setAuto(true);",
          "511:                 newLayout3.setColOrder(Lists.newArrayList(2, 1, 3, 100000));",
          "512:                 newLayout3.setShardByColumns(Lists.newArrayList(2));",
          "513:                 oneIndex.setLayouts(Lists.newArrayList(newLayout1, newLayout2, newLayout3));",
          "514:                 copyForWrite.getIndexes().add(oneIndex);",
          "515:             });",
          "516:             NDataflowManager dfMgr = NDataflowManager.getInstance(getTestConfig(), getProject());",
          "517:             NDataSegment latestSegment = dfMgr.getDataflow(modelId).getLatestReadySegment();",
          "518:             NDataflowUpdate dataflowUpdate = new NDataflowUpdate(modelId);",
          "519:             NDataLayout layout1 = NDataLayout.newDataLayout(latestSegment.getSegDetails(), 1010001L);",
          "520:             layout1.setRows(1000L);",
          "521:             NDataLayout layout2 = NDataLayout.newDataLayout(latestSegment.getSegDetails(), 1010002L);",
          "522:             layout2.setRows(1000L);",
          "523:             NDataLayout layout3 = NDataLayout.newDataLayout(latestSegment.getSegDetails(), 1010003L);",
          "524:             layout3.setRows(1000L);",
          "525:             dataflowUpdate.setToAddOrUpdateLayouts(layout1, layout2, layout3);",
          "526:             dfMgr.updateDataflow(dataflowUpdate);",
          "527:             return null;",
          "528:         }, project);",
          "529:     }",
          "531:     @Test",
          "532:     public void testUnmatchedCountColumn() throws SqlParseException {",
          "533:         overwriteSystemProp(\"kylin.query.replace-count-column-with-count-star\", \"true\");",
          "534:         String modelId = \"abe3bf1a-c4bc-458d-8278-7ea8b00f5e96\";",
          "535:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "536:         String sql = \"select avg(TEST_KYLIN_FACT.ITEM_COUNT) from TEST_KYLIN_FACT\";",
          "537:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "538:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "539:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "540:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "541:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "543:         Assert.assertNotNull(layoutCandidate);",
          "544:         List<NDataModel.Measure> allMeasures = dataflow.getModel().getAllMeasures();",
          "545:         Assert.assertTrue(containMeasure(allMeasures, \"COUNT\", \"1\"));",
          "546:         Assert.assertTrue(containMeasure(allMeasures, \"SUM\", \"DEFAULT.TEST_KYLIN_FACT.PRICE\"));",
          "547:         Assert.assertFalse(containMeasure(allMeasures, \"COUNT\", \"DEFAULT.TEST_KYLIN_FACT.PRICE\"));",
          "548:     }",
          "553:     @Test",
          "554:     public void testTableIndexAndAggIndex() throws SqlParseException {",
          "555:         String emptyProject = \"newten\";",
          "556:         overwriteSystemProp(\"kylin.query.use-tableindex-answer-non-raw-query\", \"true\");",
          "557:         String project = \"table_index\";",
          "558:         String modelId = \"acfde546-2cc9-4eec-bc92-e3bd46d4e2ee\";",
          "559:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), project).getDataflow(modelId);",
          "561:         {",
          "562:             String sql = \"select sum(ORDER_ID) from TEST_KYLIN_FACT\";",
          "563:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "564:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "565:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "566:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "567:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "568:             Assert.assertNotNull(layoutCandidate);",
          "569:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "570:         }",
          "572:         {",
          "573:             String sql = \"select max(ORDER_ID) from TEST_KYLIN_FACT\";",
          "574:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "575:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "576:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "577:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "578:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "579:             Assert.assertNotNull(layoutCandidate);",
          "580:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "581:         }",
          "583:         {",
          "584:             String sql = \"select min(ORDER_ID) from TEST_KYLIN_FACT\";",
          "585:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "586:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "587:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "588:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "589:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "590:             Assert.assertNotNull(layoutCandidate);",
          "591:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "592:         }",
          "594:         {",
          "595:             String sql = \"select count(ORDER_ID) from TEST_KYLIN_FACT\";",
          "596:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "597:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "598:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "599:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "600:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "601:             Assert.assertNotNull(layoutCandidate);",
          "602:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "603:         }",
          "605:         {",
          "606:             String sql = \"select count(distinct ORDER_ID) from TEST_KYLIN_FACT\";",
          "607:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "608:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "609:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "610:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "611:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "612:             Assert.assertNotNull(layoutCandidate);",
          "613:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "614:         }",
          "616:         {",
          "617:             String sql = \"select collect_set(ORDER_ID) from TEST_KYLIN_FACT\";",
          "618:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "619:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "620:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "621:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "622:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "623:             Assert.assertNull(layoutCandidate);",
          "624:         }",
          "626:         {",
          "627:             getTestConfig().setProperty(\"kylin.engine.segment-online-mode\", \"ANY\");",
          "628:             String sql = \"select max(PRICE)from TEST_KYLIN_FACT\";",
          "629:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(emptyProject, sql).get(0);",
          "630:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "631:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "632:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "633:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "634:             Assert.assertNotNull(layoutCandidate);",
          "635:             Assert.assertTrue(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "636:         }",
          "637:     }",
          "644:     @Test",
          "645:     public void testPreferAggIndexEnabled() throws SqlParseException {",
          "646:         overwriteSystemProp(\"kylin.query.use-tableindex-answer-non-raw-query\", \"true\");",
          "647:         String modelId = \"acfde546-2cc9-4eec-bc92-e3bd46d4e2ee\";",
          "648:         String project = \"table_index\";",
          "649:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), project).getDataflow(modelId);",
          "650:         EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {",
          "651:             NDataflowManager dfMgr = NDataflowManager.getInstance(getTestConfig(), project);",
          "652:             NDataSegment latestSegment = dfMgr.getDataflow(modelId).getLatestReadySegment();",
          "653:             NDataflowUpdate dataflowUpdate = new NDataflowUpdate(modelId);",
          "654:             NDataLayout layout1 = NDataLayout.newDataLayout(latestSegment.getSegDetails(), 1L);",
          "655:             layout1.setRows(1000L);",
          "656:             NDataLayout layout2 = NDataLayout.newDataLayout(latestSegment.getSegDetails(), 20000000001L);",
          "657:             layout2.setRows(100L);",
          "658:             dataflowUpdate.setToAddOrUpdateLayouts(layout1, layout2);",
          "659:             dfMgr.updateDataflow(dataflowUpdate);",
          "660:             return null;",
          "661:         }, project);",
          "662:         String sql = \"select LSTG_FORMAT_NAME,count(*) from TEST_KYLIN_FACT group by LSTG_FORMAT_NAME\";",
          "664:         {",
          "665:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "666:             Map<String, String> tableAlias2ModelAliasMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "667:             olapContext.fixModel(dataflow.getModel(), tableAlias2ModelAliasMap);",
          "668:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "669:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "670:             Assert.assertNotNull(layoutCandidate);",
          "671:             Assert.assertFalse(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "672:         }",
          "674:         {",
          "675:             overwriteSystemProp(\"kylin.query.layout.prefer-aggindex\", \"false\");",
          "676:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "677:             Map<String, String> tableAlias2ModelAliasMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "678:             olapContext.fixModel(dataflow.getModel(), tableAlias2ModelAliasMap);",
          "679:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "680:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "681:             Assert.assertNotNull(layoutCandidate);",
          "682:             Assert.assertTrue(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "683:         }",
          "684:     }",
          "686:     @Test",
          "687:     public void testTableIndexAnswerAggQueryUseProjectConfig() throws SqlParseException {",
          "688:         String project = \"table_index\";",
          "689:         MetadataTestUtils.updateProjectConfig(project, \"kylin.query.use-tableindex-answer-non-raw-query\", \"true\");",
          "690:         String sql = \"select max(PRICE)from TEST_KYLIN_FACT\";",
          "691:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "693:         String modelId = \"acfde546-2cc9-4eec-bc92-e3bd46d4e2ee\";",
          "694:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), project).getDataflow(modelId);",
          "695:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "696:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "697:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "698:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "699:         Assert.assertNotNull(layoutCandidate);",
          "700:         Assert.assertTrue(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "701:     }",
          "703:     @Test",
          "704:     public void testTableIndexAnswerNonRawQueryQueryUseModelConfig() throws SqlParseException {",
          "705:         String project = \"table_index\";",
          "706:         MetadataTestUtils.updateProjectConfig(project, \"kylin.query.use-tableindex-answer-non-raw-query\", \"false\");",
          "707:         String uuid = \"acfde546-2cc9-4eec-bc92-e3bd46d4e2ee\";",
          "708:         NIndexPlanManager indexMgr = NIndexPlanManager.getInstance(getTestConfig(), project);",
          "709:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), project).getDataflow(uuid);",
          "710:         indexMgr.updateIndexPlan(uuid, copyForWrite -> {",
          "711:             LinkedHashMap<String, String> props = copyForWrite.getOverrideProps();",
          "712:             props.put(\"kylin.query.use-tableindex-answer-non-raw-query\", \"true\");",
          "713:             copyForWrite.setOverrideProps(props);",
          "714:         });",
          "715:         String sql = \"select max(PRICE) from TEST_KYLIN_FACT\";",
          "716:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "718:         Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "719:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelNameMap);",
          "720:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "721:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "722:         Assert.assertNotNull(layoutCandidate);",
          "723:         Assert.assertTrue(layoutCandidate.getLayoutEntity().getIndex().isTableIndex());",
          "724:     }",
          "726:     @Test",
          "727:     public void testMatchJoinWithFilter() throws SqlParseException {",
          "728:         final List<String> filters = ImmutableList.of(\" b.SITE_NAME is not null\",",
          "729:                 \" b.SITE_NAME is not null and b.SITE_NAME is null\", \" b.SITE_NAME = '\u82f1\u56fd'\", \" b.SITE_NAME < '\u82f1\u56fd'\",",
          "730:                 \" b.SITE_NAME > '\u82f1\u56fd'\", \" b.SITE_NAME >= '\u82f1\u56fd'\", \" b.SITE_NAME <= '\u82f1\u56fd'\", \" b.SITE_NAME <> '\u82f1\u56fd'\",",
          "731:                 \" b.SITE_NAME like '%\u82f1\u56fd%'\", \" b.SITE_NAME not like '%\u82f1\u56fd%'\", \" b.SITE_NAME not in ('\u82f1\u56fd%')\",",
          "732:                 \" b.SITE_NAME similar to '%\u82f1\u56fd%'\", \" b.SITE_NAME not similar to '%\u82f1\u56fd%'\",",
          "733:                 \" b.SITE_NAME is not distinct from '%\u82f1\u56fd%'\", \" b.SITE_NAME between '1' and '2'\",",
          "734:                 \" b.SITE_NAME not between '1' and '2'\", \" b.SITE_NAME <= '\u82f1\u56fd' OR b.SITE_NAME >= '\u82f1\u56fd'\",",
          "735:                 \" b.SITE_NAME = '\u82f1\u56fd' is not false\", \" b.SITE_NAME = '\u82f1\u56fd' is not true\", \" b.SITE_NAME = '\u82f1\u56fd' is false\",",
          "736:                 \" b.SITE_NAME = '\u82f1\u56fd' is true\");",
          "737:         getTestConfig().setProperty(\"kylin.query.join-match-optimization-enabled\", \"true\");",
          "738:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "739:                 .getDataflow(\"89af4ee2-2cdb-4b07-b39e-4c29856309aa\");",
          "740:         for (String filter : filters) {",
          "741:             String sql = \"select CAL_DT from test_kylin_fact a inner join EDW.test_sites b \\n\"",
          "742:                     + \" on a.LSTG_SITE_ID = b.SITE_ID where \" + filter;",
          "743:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "744:             Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "745:             olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "746:             NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "747:                     dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "748:             Assert.assertNotNull(layoutCandidate);",
          "749:             Assert.assertEquals(20000010001L, layoutCandidate.getLayoutEntity().getId());",
          "750:         }",
          "751:     }",
          "753:     @Test",
          "754:     public void testMatchJoinWithEnhancedMode() throws SqlParseException {",
          "755:         getTestConfig().setProperty(\"kylin.query.join-match-optimization-enabled\", \"true\");",
          "756:         String sql = \"SELECT \\n\" + \"COUNT(\\\"TEST_KYLIN_FACT\\\".\\\"SELLER_ID\\\")\\n\" + \"FROM \\n\"",
          "757:                 + \"\\\"DEFAULT\\\".\\\"TEST_KYLIN_FACT\\\" as \\\"TEST_KYLIN_FACT\\\" \\n\"",
          "758:                 + \"LEFT JOIN \\\"DEFAULT\\\".\\\"TEST_ORDER\\\" as \\\"TEST_ORDER\\\"\\n\" // left or inner join",
          "759:                 + \"ON \\\"TEST_KYLIN_FACT\\\".\\\"ORDER_ID\\\"=\\\"TEST_ORDER\\\".\\\"ORDER_ID\\\"\\n\"",
          "760:                 + \"INNER JOIN \\\"EDW\\\".\\\"TEST_SELLER_TYPE_DIM\\\" as \\\"TEST_SELLER_TYPE_DIM\\\"\\n\"",
          "761:                 + \"ON \\\"TEST_KYLIN_FACT\\\".\\\"SLR_SEGMENT_CD\\\"=\\\"TEST_SELLER_TYPE_DIM\\\".\\\"SELLER_TYPE_CD\\\"\\n\"",
          "762:                 + \"INNER JOIN \\\"EDW\\\".\\\"TEST_CAL_DT\\\" as \\\"TEST_CAL_DT\\\"\\n\"",
          "763:                 + \"ON \\\"TEST_KYLIN_FACT\\\".\\\"CAL_DT\\\"=\\\"TEST_CAL_DT\\\".\\\"CAL_DT\\\"\\n\"",
          "764:                 + \"INNER JOIN \\\"DEFAULT\\\".\\\"TEST_CATEGORY_GROUPINGS\\\" as \\\"TEST_CATEGORY_GROUPINGS\\\"\\n\"",
          "765:                 + \"ON \\\"TEST_KYLIN_FACT\\\".\\\"LEAF_CATEG_ID\\\"=\\\"TEST_CATEGORY_GROUPINGS\\\".\\\"LEAF_CATEG_ID\\\" AND \"",
          "766:                 + \"\\\"TEST_KYLIN_FACT\\\".\\\"LSTG_SITE_ID\\\"=\\\"TEST_CATEGORY_GROUPINGS\\\".\\\"SITE_ID\\\"\\n\"",
          "767:                 + \"INNER JOIN \\\"EDW\\\".\\\"TEST_SITES\\\" as \\\"TEST_SITES\\\"\\n\"",
          "768:                 + \"ON \\\"TEST_KYLIN_FACT\\\".\\\"LSTG_SITE_ID\\\"=\\\"TEST_SITES\\\".\\\"SITE_ID\\\"\\n\"",
          "769:                 + \"LEFT JOIN \\\"DEFAULT\\\".\\\"TEST_ACCOUNT\\\" as \\\"SELLER_ACCOUNT\\\"\\n\" // left or inner join",
          "770:                 + \"ON \\\"TEST_KYLIN_FACT\\\".\\\"SELLER_ID\\\"=\\\"SELLER_ACCOUNT\\\".\\\"ACCOUNT_ID\\\"\\n\"",
          "771:                 + \"LEFT JOIN \\\"DEFAULT\\\".\\\"TEST_ACCOUNT\\\" as \\\"BUYER_ACCOUNT\\\"\\n\" // left or inner join",
          "772:                 + \"ON \\\"TEST_ORDER\\\".\\\"BUYER_ID\\\"=\\\"BUYER_ACCOUNT\\\".\\\"ACCOUNT_ID\\\"\\n\"",
          "773:                 + \"INNER JOIN \\\"DEFAULT\\\".\\\"TEST_COUNTRY\\\" as \\\"SELLER_COUNTRY\\\"\\n\"",
          "774:                 + \"ON \\\"SELLER_ACCOUNT\\\".\\\"ACCOUNT_COUNTRY\\\"=\\\"SELLER_COUNTRY\\\".\\\"COUNTRY\\\"\\n\"",
          "775:                 + \"INNER JOIN \\\"DEFAULT\\\".\\\"TEST_COUNTRY\\\" as \\\"BUYER_COUNTRY\\\"\\n\"",
          "776:                 + \"ON \\\"BUYER_ACCOUNT\\\".\\\"ACCOUNT_COUNTRY\\\"=\\\"BUYER_COUNTRY\\\".\\\"COUNTRY\\\"\\n\"",
          "777:                 + \"GROUP BY \\\"TEST_KYLIN_FACT\\\".\\\"TRANS_ID\\\"\";",
          "778:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "779:                 .getDataflow(\"741ca86a-1f13-46da-a59f-95fb68615e3a\");",
          "780:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "781:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "782:         olapContext.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "783:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "784:                 dataflow.getQueryableSegments(), olapContext.getSQLDigest(), null);",
          "785:         Assert.assertNotNull(layoutCandidate);",
          "786:         Assert.assertEquals(1L, layoutCandidate.getLayoutEntity().getId());",
          "787:     }",
          "789:     public boolean containMeasure(List<NDataModel.Measure> allMeasures, String expression, String parameter) {",
          "790:         for (NDataModel.Measure measure : allMeasures) {",
          "791:             if (measure.getFunction().getExpression().equals(expression)",
          "792:                     && measure.getFunction().getParameters().get(0).toString().equals(parameter)) {",
          "793:                 return true;",
          "794:             }",
          "795:         }",
          "796:         return false;",
          "797:     }",
          "799:     private void cleanAlreadyExistingLayoutsInSegments(String modelId) {",
          "800:         EnhancedUnitOfWork.doInTransactionWithCheckAndRetry(() -> {",
          "801:             NDataflowManager dfMgr = NDataflowManager.getInstance(getTestConfig(), getProject());",
          "802:             NDataSegDetails segDetails = dfMgr.getDataflow(modelId).getLatestReadySegment().getSegDetails();",
          "803:             List<NDataLayout> allLayouts = segDetails.getAllLayouts();",
          "806:             NDataflowUpdate dataflowUpdate = new NDataflowUpdate(modelId);",
          "807:             dataflowUpdate.setToRemoveLayouts(allLayouts.toArray(new NDataLayout[0]));",
          "808:             dfMgr.updateDataflow(dataflowUpdate);",
          "809:             return null;",
          "810:         }, getProject());",
          "811:     }",
          "813:     private void mockTableStats() {",
          "814:         NTableMetadataManager tableManager = NTableMetadataManager.getInstance(KylinConfig.getInstanceFromEnv(),",
          "815:                 getProject());",
          "816:         TableDesc tableDesc = tableManager.getTableDesc(\"DEFAULT.TEST_KYLIN_FACT\");",
          "817:         TableExtDesc tableExt = tableManager.getOrCreateTableExt(tableDesc);",
          "818:         tableExt = tableManager.copyForWrite(tableExt);",
          "819:         List<TableExtDesc.ColumnStats> columnStats = Lists.newArrayList();",
          "821:         for (ColumnDesc columnDesc : tableDesc.getColumns()) {",
          "822:             if (columnDesc.isComputedColumn()) {",
          "823:                 continue;",
          "824:             }",
          "825:             TableExtDesc.ColumnStats colStats = tableExt.getColumnStatsByName(columnDesc.getName());",
          "826:             if (colStats == null) {",
          "827:                 colStats = new TableExtDesc.ColumnStats();",
          "828:                 colStats.setColumnName(columnDesc.getName());",
          "829:             }",
          "830:             if (\"CAL_DT\".equals(columnDesc.getName())) {",
          "831:                 colStats.setCardinality(1000);",
          "832:             } else if (\"TRANS_ID\".equals(columnDesc.getName())) {",
          "833:                 colStats.setCardinality(10000);",
          "834:             } else {",
          "835:                 colStats.setCardinality(100);",
          "836:             }",
          "837:             columnStats.add(colStats);",
          "838:         }",
          "839:         tableExt.setColumnStats(columnStats);",
          "840:         tableManager.saveTableExt(tableExt);",
          "841:     }",
          "842: }",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/QueryLayoutFilterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.List;",
          "23: import org.apache.calcite.jdbc.CalciteSchema;",
          "24: import org.apache.calcite.rex.RexExecutorImpl;",
          "25: import org.apache.hadoop.util.Shell;",
          "26: import org.apache.kylin.common.KylinConfig;",
          "27: import org.apache.kylin.common.util.RandomUtil;",
          "28: import org.apache.kylin.common.util.TempMetadataBuilder;",
          "29: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "30: import org.apache.kylin.job.engine.JobEngineConfig;",
          "31: import org.apache.kylin.job.impl.threadpool.NDefaultScheduler;",
          "32: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "33: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "34: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "35: import org.apache.kylin.metadata.query.NativeQueryRealization;",
          "36: import org.apache.kylin.metadata.query.QueryMetrics;",
          "37: import org.apache.kylin.query.engine.QueryExec;",
          "38: import org.apache.kylin.query.engine.TypeSystem;",
          "39: import org.apache.kylin.query.engine.meta.SimpleDataContext;",
          "40: import org.apache.kylin.query.relnode.OLAPContext;",
          "41: import org.apache.kylin.util.OlapContextUtil;",
          "42: import org.apache.spark.SparkConf;",
          "43: import org.apache.spark.sql.SparderEnv;",
          "44: import org.apache.spark.sql.SparkSession;",
          "45: import org.apache.spark.sql.internal.StaticSQLConf;",
          "46: import org.junit.After;",
          "47: import org.junit.Assert;",
          "48: import org.junit.Before;",
          "49: import org.junit.BeforeClass;",
          "50: import org.junit.Test;",
          "52: public class QueryLayoutFilterTest extends NLocalWithSparkSessionTest {",
          "54:     @BeforeClass",
          "55:     public static void initSpark() {",
          "56:         if (Shell.MAC)",
          "57:             overwriteSystemPropBeforeClass(\"org.xerial.snappy.lib.name\", \"libsnappyjava.jnilib\");//for snappy",
          "58:         if (ss != null && !ss.sparkContext().isStopped()) {",
          "59:             ss.stop();",
          "60:         }",
          "61:         sparkConf = new SparkConf().setAppName(RandomUtil.randomUUIDStr()).setMaster(\"local[4]\");",
          "62:         sparkConf.set(\"spark.serializer\", \"org.apache.spark.serializer.JavaSerializer\");",
          "63:         sparkConf.set(StaticSQLConf.CATALOG_IMPLEMENTATION().key(), \"in-memory\");",
          "64:         sparkConf.set(\"spark.sql.shuffle.partitions\", \"1\");",
          "65:         sparkConf.set(\"spark.memory.fraction\", \"0.1\");",
          "67:         sparkConf.set(\"spark.shuffle.detectCorrupt\", \"false\");",
          "69:         sparkConf.set(\"spark.sql.crossJoin.enabled\", \"true\");",
          "70:         sparkConf.set(\"spark.sql.adaptive.enabled\", \"true\");",
          "71:         sparkConf.set(StaticSQLConf.WAREHOUSE_PATH().key(),",
          "72:                 TempMetadataBuilder.TEMP_TEST_METADATA + \"/spark-warehouse\");",
          "73:         ss = SparkSession.builder().config(sparkConf).getOrCreate();",
          "74:         SparderEnv.setSparkSession(ss);",
          "76:     }",
          "78:     @Before",
          "79:     public void setup() throws Exception {",
          "80:         overwriteSystemProp(\"kylin.job.scheduler.poll-interval-second\", \"1\");",
          "81:         this.createTestMetadata();",
          "82:         NDefaultScheduler scheduler = NDefaultScheduler.getInstance(getProject());",
          "83:         scheduler.init(new JobEngineConfig(KylinConfig.getInstanceFromEnv()));",
          "84:         if (!scheduler.hasStarted()) {",
          "85:             throw new RuntimeException(\"scheduler has not been started\");",
          "86:         }",
          "87:     }",
          "89:     @After",
          "90:     public void after() throws Exception {",
          "91:         NDefaultScheduler.destroyInstance();",
          "92:         cleanupTestMetadata();",
          "93:     }",
          "95:     @Test",
          "96:     public void testQueryWithFilterCondAlwaysFalse() throws Exception {",
          "97:         String dataflowId = \"b780e4e4-69af-449e-b09f-05c90dfa04b6\";",
          "98:         KylinConfig kylinConfig = getTestConfig();",
          "99:         String project = \"default\";",
          "100:         NDataflowManager dataflowManager = NDataflowManager.getInstance(kylinConfig, project);",
          "101:         NDataflow dataflow = dataflowManager.getDataflow(dataflowId);",
          "102:         String sql = \"SELECT COUNT(*) FROM TEST_BANK_INCOME inner join TEST_BANK_LOCATION \"",
          "103:                 + \"on TEST_BANK_INCOME.COUNTRY = TEST_BANK_LOCATION.COUNTRY \\n\" //",
          "104:                 + \"WHERE 1 = 1\\n\" //",
          "105:                 + \"and TEST_BANK_INCOME.DT = '2021-11-02'\\n\" //",
          "106:                 + \"and TEST_BANK_INCOME.COUNTRY in ('INDONESIA')\\n\" //",
          "107:                 + \"and TEST_BANK_INCOME.COUNTRY in ('KENYA')\";",
          "108:         List<OLAPContext> contexts = OlapContextUtil.getOlapContexts(project, sql);",
          "109:         OLAPContext context = contexts.get(0);",
          "111:         CalciteSchema rootSchema = new QueryExec(project, kylinConfig).getRootSchema();",
          "112:         SimpleDataContext dataContext = new SimpleDataContext(rootSchema.plus(), TypeSystem.javaTypeFactory(),",
          "113:                 kylinConfig);",
          "114:         context.firstTableScan.getCluster().getPlanner().setExecutor(new RexExecutorImpl(dataContext));",
          "115:         List<NDataSegment> segments = new SegmentPruningRule().pruneSegments(dataflow, context);",
          "116:         Assert.assertTrue(segments.isEmpty());",
          "117:         context.storageContext.setEmptyLayout(true);",
          "118:         context.realization = dataflow;",
          "119:         OLAPContext.registerContext(context);",
          "120:         List<NativeQueryRealization> realizations = OLAPContext.getNativeRealizations();",
          "121:         Assert.assertEquals(1, realizations.size());",
          "122:         Assert.assertEquals(QueryMetrics.FILTER_CONFLICT, realizations.get(0).getIndexType());",
          "123:         Assert.assertEquals(Long.valueOf(-1), realizations.get(0).getLayoutId());",
          "124:     }",
          "125: }",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationChooserTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.List;",
          "22: import java.util.Map;",
          "24: import org.apache.calcite.sql.parser.SqlParseException;",
          "25: import org.apache.kylin.common.KylinConfig;",
          "26: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "27: import org.apache.kylin.guava30.shaded.common.collect.ImmutableList;",
          "28: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "29: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "30: import org.apache.kylin.query.relnode.OLAPContext;",
          "31: import org.apache.kylin.util.OlapContextUtil;",
          "32: import org.junit.After;",
          "33: import org.junit.Assert;",
          "34: import org.junit.Before;",
          "35: import org.junit.Test;",
          "37: public class RealizationChooserTest extends NLocalWithSparkSessionTest {",
          "38:     @Before",
          "39:     public void setUp() throws Exception {",
          "40:         super.setUp();",
          "41:         this.createTestMetadata(\"src/test/resources/ut_meta/joins_graph_left_or_inner\");",
          "42:     }",
          "44:     @After",
          "45:     public void teardown() throws Exception {",
          "46:         super.tearDown();",
          "47:     }",
          "49:     @Test",
          "50:     public void testCanMatchModelLeftQueryLeft() throws SqlParseException {",
          "53:         String project = \"joins_graph_left_or_inner\";",
          "54:         final List<String> filters = ImmutableList.of(\" b.LOCATION is not null\", \" b.LOCATION in ('a', 'b')\",",
          "55:                 \" b.LOCATION like 'a%' \", \" b.LOCATION not like 'b%' \", \" b.LOCATION between 'a' and 'b' \");",
          "56:         getTestConfig().setProperty(\"kylin.query.join-match-optimization-enabled\", \"true\");",
          "57:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), project)",
          "58:                 .getDataflow(\"b780e4e4-69af-449e-b09f-05c90dfa04b7\");",
          "59:         for (String filter : filters) {",
          "60:             String sql = \"select a.NAME from TEST_BANK_INCOME a left join TEST_BANK_LOCATION b \\n\"",
          "61:                     + \" on a.COUNTRY = b.COUNTRY where \" + filter;",
          "62:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "63:             Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "64:             Assert.assertFalse(sqlAlias2ModelName.isEmpty());",
          "65:         }",
          "66:     }",
          "68:     @Test",
          "69:     public void testCanNotMatchModelLeftQueryInner() throws SqlParseException {",
          "72:         String project = \"joins_graph_left_or_inner\";",
          "73:         String modelId = \"b780e4e4-69af-449e-b09f-05c90dfa04b7\";",
          "74:         overwriteSystemProp(\"kylin.query.join-match-optimization-enabled\", \"true\");",
          "75:         String sql = \"select a.NAME from TEST_BANK_INCOME a inner join TEST_BANK_LOCATION b on a.COUNTRY = b.COUNTRY\";",
          "76:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), project).getDataflow(modelId);",
          "77:         OLAPContext olapContext = OlapContextUtil.getOlapContexts(project, sql, true).get(0);",
          "78:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "79:         Assert.assertTrue(sqlAlias2ModelName.isEmpty());",
          "80:     }",
          "82:     @Test",
          "83:     public void testCanNotMatchInnerJoinWithFilter() throws SqlParseException {",
          "84:         String modelId = \"89af4ee2-2cdb-4b07-b39e-4c29856309aa\";",
          "85:         final List<String> filters = ImmutableList.of(\" b.SITE_NAME is null\", \" b.SITE_NAME is distinct from '%\u82f1\u56fd%'\",",
          "86:                 \" b.SITE_NAME is not distinct from null\", \" b.SITE_NAME is not null or a.TRANS_ID is not null\",",
          "87:                 \" case when b.SITE_NAME is not null then false else true end\" //",
          "88:         );",
          "89:         getTestConfig().setProperty(\"kylin.query.join-match-optimization-enabled\", \"true\");",
          "90:         NDataflow dataflow = NDataflowManager.getInstance(getTestConfig(), getProject()).getDataflow(modelId);",
          "91:         for (String filter : filters) {",
          "92:             String sql = \"select CAL_DT from test_kylin_fact a inner join EDW.test_sites b \\n\"",
          "93:                     + \" on a.LSTG_SITE_ID = b.SITE_ID where \" + filter;",
          "94:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "95:             Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "96:             Assert.assertTrue(sqlAlias2ModelName.isEmpty());",
          "97:         }",
          "98:     }",
          "100:     @Test",
          "101:     public void testCanMatchModelInnerQueryLeft() throws SqlParseException {",
          "104:         final List<String> filters = ImmutableList.of(\" b.LOCATION is not null\", \" b.LOCATION in ('a', 'b')\",",
          "105:                 \" b.LOCATION like 'a%' \", \" b.LOCATION not like 'b%' \", \" b.LOCATION between 'a' and 'b' \");",
          "106:         overwriteSystemProp(\"kylin.query.join-match-optimization-enabled\", \"true\");",
          "107:         NDataflowManager dfMgr = NDataflowManager.getInstance(getTestConfig(), getProject());",
          "108:         NDataflow dataflow = dfMgr.getDataflow(\"b780e4e4-69af-449e-b09f-05c90dfa04b6\");",
          "109:         for (String filter : filters) {",
          "110:             String sql = \"select a.NAME from TEST_BANK_INCOME a left join TEST_BANK_LOCATION b \\n\"",
          "111:                     + \" on a.COUNTRY = b.COUNTRY where \" + filter;",
          "112:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql, true).get(0);",
          "113:             Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "114:             Assert.assertFalse(sqlAlias2ModelName.isEmpty());",
          "115:         }",
          "116:     }",
          "118:     @Test",
          "119:     public void testCanNotMatchModelInnerQueryLeft() throws SqlParseException {",
          "122:         final List<String> filters = ImmutableList.of(\" b.LOCATION is null\", \" b.LOCATION is not distinct from null\");",
          "123:         getTestConfig().setProperty(\"kylin.query.join-match-optimization-enabled\", \"true\");",
          "124:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "125:                 .getDataflow(\"b780e4e4-69af-449e-b09f-05c90dfa04b6\");",
          "126:         for (String filter : filters) {",
          "127:             String sql = \"select a.NAME from TEST_BANK_INCOME a left join TEST_BANK_LOCATION b \\n\"",
          "128:                     + \" on a.COUNTRY = b.COUNTRY where \" + filter;",
          "129:             OLAPContext olapContext = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "130:             Map<String, String> sqlAlias2ModelNameMap = OlapContextUtil.matchJoins(dataflow.getModel(), olapContext);",
          "131:             Assert.assertTrue(sqlAlias2ModelNameMap.isEmpty());",
          "132:         }",
          "133:     }",
          "134: }",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.util.List;",
          "22: import java.util.Map;",
          "24: import org.apache.calcite.jdbc.CalciteSchema;",
          "25: import org.apache.calcite.rex.RexExecutorImpl;",
          "26: import org.apache.hadoop.util.Shell;",
          "27: import org.apache.kylin.common.KylinConfig;",
          "28: import org.apache.kylin.common.util.RandomUtil;",
          "29: import org.apache.kylin.common.util.TempMetadataBuilder;",
          "30: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "31: import org.apache.kylin.job.engine.JobEngineConfig;",
          "32: import org.apache.kylin.job.impl.threadpool.NDefaultScheduler;",
          "33: import org.apache.kylin.metadata.cube.model.NDataSegment;",
          "34: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "35: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "36: import org.apache.kylin.metadata.datatype.DataType;",
          "37: import org.apache.kylin.query.engine.QueryExec;",
          "38: import org.apache.kylin.query.engine.TypeSystem;",
          "39: import org.apache.kylin.query.engine.meta.SimpleDataContext;",
          "40: import org.apache.kylin.query.relnode.OLAPContext;",
          "41: import org.apache.kylin.util.OlapContextUtil;",
          "42: import org.apache.spark.SparkConf;",
          "43: import org.apache.spark.sql.SparderEnv;",
          "44: import org.apache.spark.sql.SparkSession;",
          "45: import org.apache.spark.sql.internal.StaticSQLConf;",
          "46: import org.junit.After;",
          "47: import org.junit.Assert;",
          "48: import org.junit.Before;",
          "49: import org.junit.BeforeClass;",
          "50: import org.junit.Test;",
          "51: import org.springframework.test.util.ReflectionTestUtils;",
          "53: import lombok.val;",
          "55: public class SegmentPruningRuleTest extends NLocalWithSparkSessionTest {",
          "57:     @BeforeClass",
          "58:     public static void initSpark() {",
          "59:         if (Shell.MAC) {",
          "61:             overwriteSystemPropBeforeClass(\"org.xerial.snappy.lib.name\", \"libsnappyjava.jnilib\");",
          "62:         }",
          "63:         if (ss != null && !ss.sparkContext().isStopped()) {",
          "64:             ss.stop();",
          "65:         }",
          "66:         sparkConf = new SparkConf().setAppName(RandomUtil.randomUUIDStr()).setMaster(\"local[4]\");",
          "67:         sparkConf.set(\"spark.serializer\", \"org.apache.spark.serializer.JavaSerializer\");",
          "68:         sparkConf.set(StaticSQLConf.CATALOG_IMPLEMENTATION().key(), \"in-memory\");",
          "69:         sparkConf.set(\"spark.sql.shuffle.partitions\", \"1\");",
          "70:         sparkConf.set(\"spark.memory.fraction\", \"0.1\");",
          "72:         sparkConf.set(\"spark.shuffle.detectCorrupt\", \"false\");",
          "74:         sparkConf.set(\"spark.sql.crossJoin.enabled\", \"true\");",
          "75:         sparkConf.set(\"spark.sql.adaptive.enabled\", \"true\");",
          "76:         sparkConf.set(StaticSQLConf.WAREHOUSE_PATH().key(),",
          "77:                 TempMetadataBuilder.TEMP_TEST_METADATA + \"/spark-warehouse\");",
          "78:         ss = SparkSession.builder().config(sparkConf).getOrCreate();",
          "79:         SparderEnv.setSparkSession(ss);",
          "81:     }",
          "83:     @Before",
          "84:     public void setup() throws Exception {",
          "85:         overwriteSystemProp(\"kylin.job.scheduler.poll-interval-second\", \"1\");",
          "86:         this.createTestMetadata(\"src/test/resources/ut_meta/multi_partition_date_type\");",
          "87:         NDefaultScheduler scheduler = NDefaultScheduler.getInstance(getProject());",
          "88:         scheduler.init(new JobEngineConfig(KylinConfig.getInstanceFromEnv()));",
          "89:         if (!scheduler.hasStarted()) {",
          "90:             throw new RuntimeException(\"scheduler has not been started\");",
          "91:         }",
          "92:     }",
          "94:     private List<NDataSegment> startRealizationPruner(NDataflowManager dataflowManager, String dataflowId, String sql,",
          "95:             String project, KylinConfig kylinConfig) throws Exception {",
          "96:         NDataflow dataflow = dataflowManager.getDataflow(dataflowId);",
          "97:         List<OLAPContext> olapContexts = OlapContextUtil.getOlapContexts(getProject(), sql);",
          "98:         OLAPContext context = olapContexts.get(0);",
          "99:         CalciteSchema rootSchema = new QueryExec(project, kylinConfig).getRootSchema();",
          "100:         SimpleDataContext dataContext = new SimpleDataContext(rootSchema.plus(), TypeSystem.javaTypeFactory(),",
          "101:                 kylinConfig);",
          "102:         context.firstTableScan.getCluster().getPlanner().setExecutor(new RexExecutorImpl(dataContext));",
          "103:         Map<String, String> map = RealizationChooser.matchJoins(dataflow.getModel(), context, false, false);",
          "104:         context.fixModel(dataflow.getModel(), map);",
          "105:         return new SegmentPruningRule().pruneSegments(dataflow, context);",
          "106:     }",
          "108:     @After",
          "109:     public void after() throws Exception {",
          "110:         NDefaultScheduler.destroyInstance();",
          "111:         cleanupTestMetadata();",
          "112:     }",
          "114:     @Test",
          "115:     public void testSegmentPruningPartitionDateColumnFilter() throws Exception {",
          "116:         val dataflowId = \"3718b614-5191-2254-77e9-f4c5ca64e309\";",
          "117:         KylinConfig kylinConfig = getTestConfig();",
          "118:         String project = getProject();",
          "119:         NDataflowManager dataflowManager = NDataflowManager.getInstance(kylinConfig, project);",
          "120:         String sql = \"SELECT * FROM TEST_DB.TEST_FACT_13_10W WHERE DATE_6 >= '2021-10-28' AND DATE_6 < '2021-11-05'\";",
          "121:         List<NDataSegment> selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project,",
          "122:                 kylinConfig);",
          "123:         Assert.assertEquals(4, selectSegmentList.size());",
          "124:         sql = \"SELECT * FROM TEST_DB.TEST_FACT_13_10W WHERE DATE_6 >= CAST('2021-10-28' AS DATE) AND DATE_6 < '2021-11-05'\";",
          "125:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "126:         Assert.assertEquals(4, selectSegmentList.size());",
          "127:         sql = \"SELECT * FROM TEST_DB.TEST_FACT_13_10W WHERE DATE_6 >= CAST('2021-10-28' AS DATE) AND DATE_6 < CAST('2021-11-05' AS DATE)\";",
          "128:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "129:         Assert.assertEquals(4, selectSegmentList.size());",
          "130:     }",
          "132:     @Test",
          "133:     public void testSegmentPruningPartitionDateStrColumnFilter() throws Exception {",
          "134:         val dataflowId = \"00a91916-d31e-ed40-b1ba-4a86765072f6\";",
          "135:         KylinConfig kylinConfig = getTestConfig();",
          "136:         String project = getProject();",
          "137:         NDataflowManager dataflowManager = NDataflowManager.getInstance(kylinConfig, project);",
          "138:         String sql = \"SELECT * FROM TEST_DB.TEST_FACT_24_2W WHERE STRING_DATE_20 >= '2021-12-20' AND STRING_DATE_20 < '2021-12-26'\";",
          "139:         List<NDataSegment> selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project,",
          "140:                 kylinConfig);",
          "141:         Assert.assertEquals(6, selectSegmentList.size());",
          "142:         sql = \"SELECT * FROM TEST_DB.TEST_FACT_24_2W WHERE STRING_DATE_20 >= CAST('2021-12-20' AS DATE) AND STRING_DATE_20 < '2021-12-26'\";",
          "143:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "144:         Assert.assertEquals(6, selectSegmentList.size());",
          "145:         sql = \"SELECT * FROM TEST_DB.TEST_FACT_24_2W WHERE STRING_DATE_20 >= CAST('2021-12-20' AS DATE) AND STRING_DATE_20 < CAST('2021-12-26' AS DATE)\";",
          "146:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "147:         Assert.assertEquals(6, selectSegmentList.size());",
          "148:         sql = \"SELECT * FROM TEST_DB.TEST_FACT_24_2W WHERE STRING_DATE_20 >= CAST('2021-12-20' AS TIMESTAMP) AND STRING_DATE_20 < CAST('2021-12-26' AS TIMESTAMP)\";",
          "149:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "150:         Assert.assertEquals(6, selectSegmentList.size());",
          "151:         sql = \"SELECT * FROM TEST_DB.TEST_FACT_24_2W WHERE CAST(STRING_DATE_20 AS TIMESTAMP)  >= '2021-12-20' AND CAST(STRING_DATE_20 AS TIMESTAMP) < '2021-12-26'\";",
          "152:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "153:         Assert.assertEquals(6, selectSegmentList.size());",
          "154:     }",
          "156:     @Test",
          "157:     public void testSegmentPruningPartitionDateStr2ColumnFilter() throws Exception {",
          "158:         val dataflowId = \"cdf17c7b-18e3-9a09-23d1-4e82b7bc9123\";",
          "159:         KylinConfig kylinConfig = getTestConfig();",
          "160:         String project = getProject();",
          "161:         NDataflowManager dataflowManager = NDataflowManager.getInstance(kylinConfig, project);",
          "162:         String sql = \"SELECT * FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "163:         List<NDataSegment> selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project,",
          "164:                 kylinConfig);",
          "165:         Assert.assertEquals(4, selectSegmentList.size());",
          "166:         sql = \"SELECT * FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= '20211220' AND STRING_DATE2_24 < 20211224\";",
          "167:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "168:         Assert.assertEquals(4, selectSegmentList.size());",
          "169:         sql = \"SELECT * FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= '20211220' AND STRING_DATE2_24 < '20211224'\";",
          "170:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "171:         Assert.assertEquals(4, selectSegmentList.size());",
          "172:     }",
          "174:     @Test",
          "175:     public void testSegmentPruningDateType2Timestamp() throws Exception {",
          "176:         val dataflowId = \"3718b614-5191-2254-77e9-f4c5ca64e310\";",
          "177:         KylinConfig kylinConfig = getTestConfig();",
          "178:         String project = getProject();",
          "179:         NDataflowManager dataflowManager = NDataflowManager.getInstance(kylinConfig, project);",
          "180:         String sql = \"SELECT * FROM TEST_DB.DATE_TIMESTAMP_TABLE WHERE DATE_6 >= '2021-10-28' AND DATE_6 < '2021-11-05'\";",
          "181:         List<NDataSegment> selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project,",
          "182:                 kylinConfig);",
          "183:         Assert.assertEquals(4, selectSegmentList.size());",
          "184:         sql = \"SELECT * FROM TEST_DB.DATE_TIMESTAMP_TABLE WHERE DATE_6 >= CAST('2021-10-28' AS DATE) AND DATE_6 < '2021-11-05'\";",
          "185:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "186:         Assert.assertEquals(4, selectSegmentList.size());",
          "187:         sql = \"SELECT * FROM TEST_DB.DATE_TIMESTAMP_TABLE WHERE DATE_6 >= CAST('2021-10-28' AS DATE) AND DATE_6 < CAST('2021-11-05' AS DATE)\";",
          "188:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "189:         Assert.assertEquals(4, selectSegmentList.size());",
          "191:         DataType dateType = new DataType(\"date\", 0, 0);",
          "192:         ReflectionTestUtils.invokeMethod(SegmentPruningRule.class, \"checkAndReformatDateType\", \"yyyy-MM-dd HH:mm:ss\",",
          "193:                 Long.parseLong(\"1633928400000\"), dateType);",
          "194:     }",
          "196:     @Test",
          "197:     public void testSegmentPruningTimestampType2DateType() throws Exception {",
          "198:         val dataflowId = \"3718b614-5191-2254-77e9-f4c5ca64e311\";",
          "199:         KylinConfig kylinConfig = getTestConfig();",
          "200:         String project = getProject();",
          "201:         NDataflowManager dataflowManager = NDataflowManager.getInstance(kylinConfig, project);",
          "202:         String sql = \"SELECT * FROM TEST_DB.DATE_TIMESTAMP_TABLE WHERE TIMESTAMP_10 >= '2021-10-28' AND TIMESTAMP_10 < '2021-11-05'\";",
          "203:         List<NDataSegment> selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project,",
          "204:                 kylinConfig);",
          "205:         Assert.assertEquals(5, selectSegmentList.size());",
          "206:         sql = \"SELECT * FROM TEST_DB.DATE_TIMESTAMP_TABLE WHERE TIMESTAMP_10 >= CAST('2021-10-28' AS DATE) AND TIMESTAMP_10 < '2021-11-05'\";",
          "207:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "208:         Assert.assertEquals(5, selectSegmentList.size());",
          "209:         sql = \"SELECT * FROM TEST_DB.DATE_TIMESTAMP_TABLE WHERE TIMESTAMP_10 >= CAST('2021-10-28' AS DATE) AND TIMESTAMP_10 < CAST('2021-11-05' AS DATE)\";",
          "210:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "211:         Assert.assertEquals(5, selectSegmentList.size());",
          "213:         DataType dateType = new DataType(\"date\", 0, 0);",
          "214:         ReflectionTestUtils.invokeMethod(SegmentPruningRule.class, \"checkAndReformatDateType\", \"yyyy-MM-dd HH:mm:ss\",",
          "215:                 Long.parseLong(\"1633928400000\"), dateType);",
          "216:     }",
          "218:     @Test",
          "219:     public void testSegmentPruningTimestampType() throws Exception {",
          "220:         val dataflowId = \"3718b614-5191-2254-77e9-f4c5ca64e312\";",
          "221:         KylinConfig kylinConfig = getTestConfig();",
          "222:         String project = getProject();",
          "223:         NDataflowManager dataflowManager = NDataflowManager.getInstance(kylinConfig, project);",
          "224:         String sql = \"SELECT * FROM TEST_DB.DATE_TIMESTAMP_TABLE WHERE TIMESTAMP_10 >= '2021-10-28' AND TIMESTAMP_10 < '2021-11-05'\";",
          "225:         List<NDataSegment> selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project,",
          "226:                 kylinConfig);",
          "227:         Assert.assertEquals(5, selectSegmentList.size());",
          "228:         sql = \"SELECT * FROM TEST_DB.DATE_TIMESTAMP_TABLE WHERE TIMESTAMP_10 >= CAST('2021-10-28' AS DATE) AND TIMESTAMP_10 < '2021-11-05'\";",
          "229:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "230:         Assert.assertEquals(5, selectSegmentList.size());",
          "231:         sql = \"SELECT * FROM TEST_DB.DATE_TIMESTAMP_TABLE WHERE TIMESTAMP_10 >= CAST('2021-10-28' AS DATE) AND TIMESTAMP_10 < CAST('2021-11-05' AS DATE)\";",
          "232:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "233:         Assert.assertEquals(5, selectSegmentList.size());",
          "235:         DataType dateType = new DataType(\"date\", 0, 0);",
          "236:         ReflectionTestUtils.invokeMethod(SegmentPruningRule.class, \"checkAndReformatDateType\", \"yyyy-MM-dd HH:mm:ss\",",
          "237:                 Long.parseLong(\"1633928400000\"), dateType);",
          "238:     }",
          "240:     @Test",
          "241:     public void testSegmentPruningMaxMeasureBeforeDaysSuccess() throws Exception {",
          "242:         overwriteSystemProp(\"kylin.query.calcite.extras-props.conformance\", \"DEFAULT\");",
          "243:         val dataflowId = \"cdf17c7b-18e3-9a09-23d1-4e82b7bc9123\";",
          "244:         KylinConfig kylinConfig = getTestConfig();",
          "245:         String project = getProject();",
          "246:         NDataflowManager dataflowManager = NDataflowManager.getInstance(kylinConfig, project);",
          "247:         String sql = \"SELECT MAX(STRING_DATE2_24) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "248:         List<NDataSegment> selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project,",
          "249:                 kylinConfig);",
          "250:         Assert.assertEquals(4, selectSegmentList.size());",
          "252:         overwriteSystemProp(\"kylin.query.max-measure-segment-pruner-before-days\", \"0\");",
          "253:         sql = \"SELECT MAX(STRING_DATE2_24) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "254:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "255:         Assert.assertEquals(0, selectSegmentList.size());",
          "257:         overwriteSystemProp(\"kylin.query.max-measure-segment-pruner-before-days\", \"2\");",
          "258:         sql = \"SELECT MAX(STRING_DATE2_24) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "259:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "260:         Assert.assertEquals(2, selectSegmentList.size());",
          "262:         sql = \"SELECT MAX(STRING_DATE2_24), MAX(STRING_DATE2_24) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "263:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "264:         Assert.assertEquals(2, selectSegmentList.size());",
          "266:         sql = \"SELECT MAX(STRING_DATE2_24), COUNT(*) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "267:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "268:         Assert.assertEquals(2, selectSegmentList.size());",
          "270:         sql = \"SELECT MAX(STRING_DATE2_24), COUNT(1) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "271:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "272:         Assert.assertEquals(2, selectSegmentList.size());",
          "274:         sql = \"SELECT MAX(STRING_DATE2_24), MIN(1) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "275:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "276:         Assert.assertEquals(2, selectSegmentList.size());",
          "278:         sql = \"SELECT 1, MAX(STRING_DATE2_24) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "279:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "280:         Assert.assertEquals(2, selectSegmentList.size());",
          "282:         sql = \"SELECT 1, MAX(STRING_DATE2_24) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224 GROUP BY 1\";",
          "283:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "284:         Assert.assertEquals(2, selectSegmentList.size());",
          "286:         sql = \"SELECT STRING_DATE2_24, MAX(STRING_DATE2_24) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224 GROUP BY STRING_DATE2_24\";",
          "287:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "288:         Assert.assertEquals(2, selectSegmentList.size());",
          "290:         sql = \"SELECT SUM(1), COUNT(DISTINCT 1), MAX(STRING_DATE2_24) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224 GROUP BY STRING_DATE2_24\";",
          "291:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "292:         Assert.assertEquals(2, selectSegmentList.size());",
          "293:     }",
          "295:     @Test",
          "296:     public void testSegmentPruningMaxMeasureBeforeDaysFail() throws Exception {",
          "297:         overwriteSystemProp(\"kylin.query.calcite.extras-props.conformance\", \"DEFAULT\");",
          "298:         val dataflowId = \"cdf17c7b-18e3-9a09-23d1-4e82b7bc9123\";",
          "299:         KylinConfig kylinConfig = getTestConfig();",
          "300:         String project = getProject();",
          "301:         NDataflowManager dataflowManager = NDataflowManager.getInstance(kylinConfig, project);",
          "304:         overwriteSystemProp(\"kylin.query.max-measure-segment-pruner-before-days\", \"2\");",
          "305:         String sql = \"SELECT MIN(STRING_DATE2_24) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "306:         List<NDataSegment> selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project,",
          "307:                 kylinConfig);",
          "308:         Assert.assertEquals(4, selectSegmentList.size());",
          "311:         sql = \"SELECT MAX(STRING_DATE_20) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "312:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "313:         Assert.assertEquals(4, selectSegmentList.size());",
          "316:         sql = \"SELECT MAX(STRING_DATE2_24), MIN(STRING_DATE2_24) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "317:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "318:         Assert.assertEquals(4, selectSegmentList.size());",
          "321:         sql = \"SELECT STRING_DATE2_24 FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "322:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "323:         Assert.assertEquals(4, selectSegmentList.size());",
          "326:         sql = \"SELECT MAX(STRING_DATE2_24),STRING_DATE_20 FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224 GROUP BY STRING_DATE_20\";",
          "327:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "328:         Assert.assertEquals(4, selectSegmentList.size());",
          "331:         dataflowManager.getDataflow(dataflowId).getModel().getPartitionDesc().setPartitionDateFormat(null);",
          "332:         sql = \"SELECT MAX(STRING_DATE2_24) FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 >= 20211220 AND STRING_DATE2_24 < 20211224\";",
          "333:         selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project, kylinConfig);",
          "334:         Assert.assertEquals(18, selectSegmentList.size());",
          "335:     }",
          "337:     @Test",
          "338:     public void testSegmentPruningFilterAlwaysFalse() throws Exception {",
          "339:         overwriteSystemProp(\"kylin.query.calcite.extras-props.conformance\", \"DEFAULT\");",
          "340:         val dataflowId = \"cdf17c7b-18e3-9a09-23d1-4e82b7bc9123\";",
          "341:         KylinConfig kylinConfig = getTestConfig();",
          "342:         String project = getProject();",
          "343:         NDataflowManager dataflowManager = NDataflowManager.getInstance(kylinConfig, project);",
          "345:         String sql = \"SELECT * FROM (SELECT STRING_DATE2_24,STRING_DATE_20 FROM TEST_DB.TEST_FACT_30_3W WHERE STRING_DATE2_24 = 20211221) AS T1 WHERE STRING_DATE2_24 = 20211220\";",
          "346:         List<NDataSegment> selectSegmentList = startRealizationPruner(dataflowManager, dataflowId, sql, project,",
          "347:                 kylinConfig);",
          "348:         Assert.assertEquals(0, selectSegmentList.size());",
          "349:     }",
          "351:     @Override",
          "352:     public String getProject() {",
          "353:         return \"multi_partition_date_type\";",
          "354:     }",
          "356: }",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java||src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java -> src/kylin-it/src/test/java/org/apache/kylin/query/routing/TableIndexAnswerSelectStarTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: package org.apache.kylin.query.routing;",
          "21: import java.lang.reflect.Field;",
          "22: import java.util.Map;",
          "23: import java.util.Set;",
          "25: import org.apache.hadoop.util.Shell;",
          "26: import org.apache.kylin.common.KylinConfig;",
          "27: import org.apache.kylin.common.persistence.RootPersistentEntity;",
          "28: import org.apache.kylin.common.util.RandomUtil;",
          "29: import org.apache.kylin.common.util.TempMetadataBuilder;",
          "30: import org.apache.kylin.common.util.Unsafe;",
          "31: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "32: import org.apache.kylin.job.engine.JobEngineConfig;",
          "33: import org.apache.kylin.job.impl.threadpool.NDefaultScheduler;",
          "34: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "35: import org.apache.kylin.metadata.cube.cuboid.NQueryLayoutChooser;",
          "36: import org.apache.kylin.metadata.cube.model.NDataLayout;",
          "37: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "38: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "39: import org.apache.kylin.metadata.cube.model.NDataflowUpdate;",
          "40: import org.apache.kylin.metadata.model.ComputedColumnDesc;",
          "41: import org.apache.kylin.metadata.model.NDataModel;",
          "42: import org.apache.kylin.metadata.model.NDataModelManager;",
          "43: import org.apache.kylin.metadata.model.TblColRef;",
          "44: import org.apache.kylin.metadata.realization.RealizationStatusEnum;",
          "45: import org.apache.kylin.query.engine.SchemaMetaData;",
          "46: import org.apache.kylin.query.relnode.OLAPContext;",
          "47: import org.apache.kylin.rest.constant.Constant;",
          "48: import org.apache.kylin.rest.request.CreateBaseIndexRequest;",
          "49: import org.apache.kylin.rest.service.IndexPlanService;",
          "50: import org.apache.kylin.rest.service.ModelService;",
          "51: import org.apache.kylin.rest.util.AclEvaluate;",
          "52: import org.apache.kylin.rest.util.AclUtil;",
          "53: import org.apache.kylin.util.OlapContextUtil;",
          "54: import org.apache.spark.SparkConf;",
          "55: import org.apache.spark.sql.SparderEnv;",
          "56: import org.apache.spark.sql.SparkSession;",
          "57: import org.apache.spark.sql.internal.StaticSQLConf;",
          "58: import org.junit.After;",
          "59: import org.junit.Assert;",
          "60: import org.junit.Before;",
          "61: import org.junit.BeforeClass;",
          "62: import org.junit.Test;",
          "63: import org.mockito.InjectMocks;",
          "64: import org.mockito.Mock;",
          "65: import org.mockito.Mockito;",
          "66: import org.springframework.security.authentication.TestingAuthenticationToken;",
          "67: import org.springframework.security.core.context.SecurityContextHolder;",
          "68: import org.springframework.test.util.ReflectionTestUtils;",
          "70: public class TableIndexAnswerSelectStarTest extends NLocalWithSparkSessionTest {",
          "72:     @InjectMocks",
          "73:     private final IndexPlanService indexPlanService = Mockito.spy(new IndexPlanService());",
          "75:     @Mock",
          "76:     private AclEvaluate aclEvaluate = Mockito.spy(AclEvaluate.class);",
          "78:     @Mock",
          "79:     private AclUtil aclUtil = Mockito.spy(AclUtil.class);",
          "81:     @InjectMocks",
          "82:     private final ModelService modelService = Mockito.spy(new ModelService());",
          "84:     @BeforeClass",
          "85:     public static void initSpark() {",
          "86:         if (Shell.MAC)",
          "87:             overwriteSystemPropBeforeClass(\"org.xerial.snappy.lib.name\", \"libsnappyjava.jnilib\");//for snappy",
          "88:         if (ss != null && !ss.sparkContext().isStopped()) {",
          "89:             ss.stop();",
          "90:         }",
          "91:         sparkConf = new SparkConf().setAppName(RandomUtil.randomUUIDStr()).setMaster(\"local[4]\");",
          "92:         sparkConf.set(\"spark.serializer\", \"org.apache.spark.serializer.JavaSerializer\");",
          "93:         sparkConf.set(StaticSQLConf.CATALOG_IMPLEMENTATION().key(), \"in-memory\");",
          "94:         sparkConf.set(\"spark.sql.shuffle.partitions\", \"1\");",
          "95:         sparkConf.set(\"spark.memory.fraction\", \"0.1\");",
          "97:         sparkConf.set(\"spark.shuffle.detectCorrupt\", \"false\");",
          "99:         sparkConf.set(\"spark.sql.crossJoin.enabled\", \"true\");",
          "100:         sparkConf.set(\"spark.sql.adaptive.enabled\", \"true\");",
          "101:         sparkConf.set(StaticSQLConf.WAREHOUSE_PATH().key(),",
          "102:                 TempMetadataBuilder.TEMP_TEST_METADATA + \"/spark-warehouse\");",
          "103:         ss = SparkSession.builder().config(sparkConf).getOrCreate();",
          "104:         SparderEnv.setSparkSession(ss);",
          "106:     }",
          "108:     @Before",
          "109:     public void setup() throws Exception {",
          "110:         overwriteSystemProp(\"kylin.job.scheduler.poll-interval-second\", \"1\");",
          "111:         this.createTestMetadata(\"src/test/resources/ut_meta/tableindex_answer_selectstart\");",
          "112:         ReflectionTestUtils.setField(aclEvaluate, \"aclUtil\", aclUtil);",
          "113:         ReflectionTestUtils.setField(indexPlanService, \"aclEvaluate\", aclEvaluate);",
          "114:         ReflectionTestUtils.setField(modelService, \"aclEvaluate\", aclEvaluate);",
          "115:         TestingAuthenticationToken auth = new TestingAuthenticationToken(\"ADMIN\", \"ADMIN\", Constant.ROLE_ADMIN);",
          "116:         SecurityContextHolder.getContext().setAuthentication(auth);",
          "117:         NDefaultScheduler scheduler = NDefaultScheduler.getInstance(getProject());",
          "118:         scheduler.init(new JobEngineConfig(KylinConfig.getInstanceFromEnv()));",
          "119:         if (!scheduler.hasStarted()) {",
          "120:             throw new RuntimeException(\"scheduler has not been started\");",
          "121:         }",
          "122:     }",
          "124:     @After",
          "125:     public void after() throws Exception {",
          "126:         NDefaultScheduler.destroyInstance();",
          "127:         cleanupTestMetadata();",
          "128:     }",
          "130:     @Test",
          "131:     public void testTableIndexAnswerSelectStarPartialMatch() throws Exception {",
          "132:         String sql = \"select * from kylin_sales\";",
          "133:         overwriteSystemProp(\"kylin.query.use-tableindex-answer-select-star.enabled\", \"true\");",
          "134:         OLAPContext context = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "135:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "136:                 .getDataflow(\"ccb82d81-1497-ca6d-f226-3258a0f0ba4f\");",
          "137:         Assert.assertEquals(dataflow.getAllColumns().size(), context.allColumns.size());",
          "138:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), context);",
          "139:         context.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "140:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "141:                 dataflow.getQueryableSegments(), context.getSQLDigest(), null);",
          "142:         Assert.assertNotNull(layoutCandidate);",
          "143:         Assert.assertEquals(20000000001L, layoutCandidate.getLayoutEntity().getId());",
          "144:     }",
          "146:     @Test",
          "147:     public void testTableIndexAnswerSelectStarBaseTableIndex() throws Exception {",
          "148:         String sql = \"select * from test_kylin_fact \\n\";",
          "149:         overwriteSystemProp(\"kylin.query.use-tableindex-answer-select-star.enabled\", \"true\");",
          "150:         OLAPContext context = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "151:         NDataflow dataflow = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject())",
          "152:                 .getDataflow(\"c7a44f37-8481-e78b-5cac-faa7d76767db\");",
          "153:         Assert.assertEquals(dataflow.getAllColumns().size(), context.allColumns.size());",
          "154:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), context);",
          "155:         context.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "156:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "157:                 dataflow.getQueryableSegments(), context.getSQLDigest(), null);",
          "158:         Assert.assertNotNull(layoutCandidate);",
          "159:         Assert.assertEquals(20000010001L, layoutCandidate.getLayoutEntity().getId());",
          "160:     }",
          "162:     @Test",
          "163:     public void testTableIndexAnswerSelectStarModelHavingCCs() throws Exception {",
          "164:         overwriteSystemProp(\"kylin.query.use-tableindex-answer-select-star.enabled\", \"true\");",
          "165:         overwriteSystemProp(\"kylin.query.use-tableindex-answer-non-raw-query\", \"true\");",
          "166:         String modelId = \"c7a44f37-8481-e78b-5cac-faa7d76767db\";",
          "167:         NDataModelManager modelManager = NDataModelManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject());",
          "168:         NDataflowManager dataflowManager = NDataflowManager.getInstance(KylinConfig.getInstanceFromEnv(), getProject());",
          "170:         dataflowManager.updateDataflowStatus(\"baa44f37-8481-e78b-5cac-faa7d76767db\", RealizationStatusEnum.OFFLINE);",
          "171:         modelManager.updateDataModel(modelId, copyForWrite -> {",
          "172:             ComputedColumnDesc newCC = new ComputedColumnDesc();",
          "173:             newCC.setTableIdentity(\"DEFAULT.TEST_KYLIN_FACT\");",
          "174:             newCC.setTableAlias(\"TEST_KYLIN_FACT\");",
          "175:             newCC.setComment(\"\");",
          "176:             newCC.setColumnName(\"NEW_CC\");",
          "177:             newCC.setDatatype(\"BIGINT\");",
          "178:             newCC.setExpression(\"TEST_KYLIN_FACT.ORDER_ID + 1\");",
          "179:             newCC.setInnerExpression(\"`TEST_KYLIN_FACT`.`ORDER_ID` + 1\");",
          "180:             copyForWrite.getComputedColumnDescs().add(newCC);",
          "182:             NDataModel.NamedColumn newCol = new NDataModel.NamedColumn();",
          "183:             newCol.setName(\"NEW_CC\");",
          "184:             newCol.setId(copyForWrite.getAllNamedColumns().size());",
          "185:             newCol.setAliasDotColumn(\"TEST_KYLIN_FACT.NEW_CC\");",
          "186:             newCol.setStatus(NDataModel.ColumnStatus.DIMENSION);",
          "187:             copyForWrite.getAllNamedColumns().add(newCol);",
          "188:         });",
          "190:         CreateBaseIndexRequest request = new CreateBaseIndexRequest();",
          "191:         request.setProject(getProject());",
          "192:         request.setModelId(modelId);",
          "193:         indexPlanService.updateBaseIndex(getProject(), request, false, false, false);",
          "194:         NDataflow dataflow = dataflowManager.getDataflow(modelId);",
          "195:         String segId = \"87d65498-b922-225c-1db7-13de001beba8\";",
          "196:         NDataLayout baseAggLayout = dataflow.getSegment(segId).getLayout(1L);",
          "197:         NDataLayout baseTableLayout = dataflow.getSegment(segId).getLayout(20000010001L);",
          "198:         Class<RootPersistentEntity> clazz = RootPersistentEntity.class;",
          "199:         Field field = clazz.getDeclaredField(\"isCachedAndShared\");",
          "200:         Unsafe.changeAccessibleObject(field, true);",
          "201:         field.set(baseAggLayout.getSegDetails(), false);",
          "202:         field.set(baseTableLayout.getSegDetails(), false);",
          "203:         baseAggLayout.setLayoutId(10001L);",
          "204:         NDataflowUpdate updateOps = new NDataflowUpdate(modelId);",
          "205:         updateOps.setToAddOrUpdateLayouts(baseAggLayout, baseTableLayout);",
          "206:         dataflowManager.updateDataflow(updateOps);",
          "208:         String sql = \"select cal_dt, new_cc from test_kylin_fact\";",
          "209:         OLAPContext context = OlapContextUtil.getOlapContexts(getProject(), sql).get(0);",
          "210:         Set<TblColRef> allColumns = context.realization.getAllColumns();",
          "211:         Assert.assertEquals(13, allColumns.size());",
          "212:         SchemaMetaData schemaMetaData = new SchemaMetaData(getProject(), KylinConfig.getInstanceFromEnv());",
          "213:         Assert.assertEquals(26, schemaMetaData.getTables().get(1).getFields().size());",
          "215:         Map<String, String> sqlAlias2ModelName = OlapContextUtil.matchJoins(dataflow.getModel(), context);",
          "216:         context.fixModel(dataflow.getModel(), sqlAlias2ModelName);",
          "217:         NLayoutCandidate layoutCandidate = NQueryLayoutChooser.selectLayoutCandidate(dataflow,",
          "218:                 dataflow.getQueryableSegments(), context.getSQLDigest(), null);",
          "219:         Assert.assertNotNull(layoutCandidate);",
          "220:         Assert.assertEquals(20000010001L, layoutCandidate.getLayoutEntity().getId());",
          "221:     }",
          "223:     @Override",
          "224:     public String getProject() {",
          "225:         return \"tableindex_answer_selectstart\";",
          "226:     }",
          "228: }",
          "",
          "---------------"
        ],
        "src/query-service/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java||src/query-service/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java": [
          "File: src/query-service/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java -> src/query-service/src/test/java/org/apache/kylin/rest/service/QueryServiceTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: import org.apache.kylin.common.util.NLocalFileMetadataTestCase;",
          "76: import org.apache.kylin.common.util.Pair;",
          "77: import org.apache.kylin.common.util.RandomUtil;",
          "78: import org.apache.kylin.metadata.acl.AclTCR;",
          "79: import org.apache.kylin.metadata.acl.AclTCRManager;",
          "80: import org.apache.kylin.metadata.cube.cuboid.NLayoutCandidate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "79: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "80: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: import org.apache.kylin.metadata.cube.model.NDataflow;",
          "85: import org.apache.kylin.metadata.cube.model.NDataflowManager;",
          "86: import org.apache.kylin.metadata.cube.model.NDataflowUpdate;",
          "88: import org.apache.kylin.metadata.model.ColumnDesc;",
          "89: import org.apache.kylin.metadata.model.ComputedColumnDesc;",
          "90: import org.apache.kylin.metadata.model.NDataModel;",
          "",
          "[Removed Lines]",
          "87: import org.apache.kylin.metadata.cube.realization.HybridRealization;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101: import org.apache.kylin.metadata.querymeta.ColumnMetaWithType;",
          "102: import org.apache.kylin.metadata.querymeta.TableMeta;",
          "103: import org.apache.kylin.metadata.querymeta.TableMetaWithType;",
          "104: import org.apache.kylin.metadata.realization.IRealization;",
          "105: import org.apache.kylin.metadata.realization.RealizationStatusEnum;",
          "106: import org.apache.kylin.metadata.user.ManagedUser;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: import org.apache.kylin.metadata.realization.HybridRealization;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "159: import org.springframework.security.core.userdetails.UserDetails;",
          "160: import org.springframework.test.util.ReflectionTestUtils;",
          "166: import lombok.val;",
          "",
          "[Removed Lines]",
          "162: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "163: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "164: import org.apache.kylin.guava30.shaded.common.collect.Sets;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java||src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java": [
          "File: src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java -> src/query/src/test/java/org/apache/kylin/query/routing/CandidateSortTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import org.apache.kylin.metadata.model.TblColRef;",
          "34: import org.apache.kylin.metadata.realization.CapabilityResult;",
          "35: import org.apache.kylin.metadata.realization.IRealization;",
          "36: import org.apache.kylin.metadata.realization.SQLDigest;",
          "37: import org.junit.Assert;",
          "38: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import org.apache.kylin.metadata.realization.QueryableSeg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:         return new IRealization() {",
          "188:             @Override",
          "189:             public CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,",
          "191:                 return null;",
          "192:             }",
          "194:             @Override",
          "197:                 return null;",
          "198:             }",
          "",
          "[Removed Lines]",
          "190:                     Map<String, Set<Long>> secondStorageSegmentLayoutMap) {",
          "195:             public CapabilityResult isCapable(SQLDigest digest, List<NDataSegment> prunedSegments,",
          "196:                     List<NDataSegment> prunedStreamingSegments, Map<String, Set<Long>> secondStorageSegmentLayoutMap) {",
          "",
          "[Added Lines]",
          "191:                     Map<String, Set<Long>> chSegToLayoutsMap) {",
          "196:             public CapabilityResult isCapable(SQLDigest digest, QueryableSeg queryableSeg) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "241:             }",
          "243:             @Override",
          "245:                 return true;",
          "246:             }",
          "",
          "[Removed Lines]",
          "244:             public boolean isReady() {",
          "",
          "[Added Lines]",
          "244:             public boolean isOnline() {",
          "",
          "---------------"
        ],
        "src/query/src/test/java/org/apache/kylin/query/routing/RealizationCheckTest.java||src/query/src/test/java/org/apache/kylin/query/routing/RealizationCheckTest.java": [
          "File: src/query/src/test/java/org/apache/kylin/query/routing/RealizationCheckTest.java -> src/query/src/test/java/org/apache/kylin/query/routing/RealizationCheckTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationPrunerTest.java||src/query/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java": [
          "File: src/kylin-it/src/test/java/org/apache/kylin/query/routing/RealizationPrunerTest.java -> src/query/src/test/java/org/apache/kylin/query/routing/SegmentPruningRuleTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: import org.junit.jupiter.api.Test;",
          "24: import org.springframework.test.util.ReflectionTestUtils;",
          "28:     @Test",
          "29:     void testCheckAndReformatDateType() {",
          "30:         long segmentTs = 1675396800000L;",
          "31:         {",
          "33:                     \"checkAndReformatDateType\", \"2023-02-03\", segmentTs, new DataType(\"date\", 0, 0));",
          "34:             Assertions.assertEquals(\"2023-02-03\", formattedValue);",
          "35:         }",
          "37:         {",
          "39:                     \"checkAndReformatDateType\", \"2023-02-03 12:00:00\", segmentTs, new DataType(\"date\", 0, 0));",
          "40:             Assertions.assertEquals(\"2023-02-03\", formattedValue);",
          "41:         }",
          "43:         {",
          "45:                     \"checkAndReformatDateType\", \"2023-02-03\", segmentTs, new DataType(\"timestamp\", 0, 0));",
          "46:             Assertions.assertEquals(\"2023-02-03 12:00:00\", formattedValue);",
          "47:         }",
          "49:         {",
          "51:                     \"checkAndReformatDateType\", \"2023-02-03 12:00:00\", segmentTs, new DataType(\"timestamp\", 0, 0));",
          "52:             Assertions.assertEquals(\"2023-02-03 12:00:00\", formattedValue);",
          "53:         }",
          "55:         {",
          "57:                     \"checkAndReformatDateType\", \"2023-02-03 12:00:00\", segmentTs, new DataType(\"varchar\", 0, 0));",
          "58:             Assertions.assertEquals(\"2023-02-03 12:00:00\", formattedValue);",
          "59:         }",
          "61:         {",
          "63:                     \"checkAndReformatDateType\", \"2023-02-03 12:00:00\", segmentTs, new DataType(\"string\", 0, 0));",
          "64:             Assertions.assertEquals(\"2023-02-03 12:00:00\", formattedValue);",
          "65:         }",
          "67:         {",
          "69:                     \"checkAndReformatDateType\", \"2023-02-03 12:00:00\", segmentTs, new DataType(\"integer\", 0, 0));",
          "70:             Assertions.assertEquals(\"2023-02-03 12:00:00\", formattedValue);",
          "71:         }",
          "73:         {",
          "75:                     \"checkAndReformatDateType\", \"2023-02-03 12:00:00\", segmentTs, new DataType(\"bigint\", 0, 0));",
          "76:             Assertions.assertEquals(\"2023-02-03 12:00:00\", formattedValue);",
          "77:         }",
          "",
          "[Removed Lines]",
          "26: class RealizationPrunerTest {",
          "32:             String formattedValue = ReflectionTestUtils.invokeMethod(RealizationPruner.class,",
          "38:             String formattedValue = ReflectionTestUtils.invokeMethod(RealizationPruner.class,",
          "44:             String formattedValue = ReflectionTestUtils.invokeMethod(RealizationPruner.class,",
          "50:             String formattedValue = ReflectionTestUtils.invokeMethod(RealizationPruner.class,",
          "56:             String formattedValue = ReflectionTestUtils.invokeMethod(RealizationPruner.class,",
          "62:             String formattedValue = ReflectionTestUtils.invokeMethod(RealizationPruner.class,",
          "68:             String formattedValue = ReflectionTestUtils.invokeMethod(RealizationPruner.class,",
          "74:             String formattedValue = ReflectionTestUtils.invokeMethod(RealizationPruner.class,",
          "",
          "[Added Lines]",
          "26: class SegmentPruningRuleTest {",
          "32:             String formattedValue = ReflectionTestUtils.invokeMethod(SegmentPruningRule.class,",
          "38:             String formattedValue = ReflectionTestUtils.invokeMethod(SegmentPruningRule.class,",
          "44:             String formattedValue = ReflectionTestUtils.invokeMethod(SegmentPruningRule.class,",
          "50:             String formattedValue = ReflectionTestUtils.invokeMethod(SegmentPruningRule.class,",
          "56:             String formattedValue = ReflectionTestUtils.invokeMethod(SegmentPruningRule.class,",
          "62:             String formattedValue = ReflectionTestUtils.invokeMethod(SegmentPruningRule.class,",
          "68:             String formattedValue = ReflectionTestUtils.invokeMethod(SegmentPruningRule.class,",
          "74:             String formattedValue = ReflectionTestUtils.invokeMethod(SegmentPruningRule.class,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:         {",
          "80:             DataType errorType = new DataType(\"error_type\", 0, 0);",
          "81:             Assertions.assertThrows(IllegalArgumentException.class,",
          "83:                             \"2023-02-03 12:00:00\", segmentTs, errorType));",
          "84:         }",
          "85:     }",
          "",
          "[Removed Lines]",
          "82:                     () -> ReflectionTestUtils.invokeMethod(RealizationPruner.class, \"checkAndReformatDateType\",",
          "",
          "[Added Lines]",
          "82:                     () -> ReflectionTestUtils.invokeMethod(SegmentPruningRule.class, \"checkAndReformatDateType\",",
          "",
          "---------------"
        ],
        "src/second-storage/core/src/test/scala/io/kyligence/kap/secondstorage/SecondStorageTest.scala||src/second-storage/core/src/test/scala/io/kyligence/kap/secondstorage/SecondStorageTest.scala": [
          "File: src/second-storage/core/src/test/scala/io/kyligence/kap/secondstorage/SecondStorageTest.scala -> src/second-storage/core/src/test/scala/io/kyligence/kap/secondstorage/SecondStorageTest.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package io.kyligence.kap.secondstorage",
          "21: import org.apache.kylin.common.{ForceToTieredStorage, QueryContext}",
          "22: import org.apache.kylin.metadata.cube.model.NDataflow",
          "23: import org.apache.kylin.metadata.model.NDataModel",
          "24: import org.apache.spark.sql.common.{LocalMetadata, SparderBaseFunSuite}",
          "25: import org.mockito.Mockito",
          "29: import scala.reflect.runtime.{universe => ru}",
          "31: class SecondStorageTest extends SparderBaseFunSuite with LocalMetadata {",
          "33:   test(\"SecondStorage.enabled should not throw execution\") {",
          "",
          "[Removed Lines]",
          "20: import io.kyligence.kap.secondstorage.enums.LockTypeEnum",
          "27: import java.lang.reflect.InvocationTargetException",
          "28: import java.util.ArrayList",
          "",
          "[Added Lines]",
          "20: import java.lang.reflect.InvocationTargetException",
          "21: import java.util.ArrayList",
          "31: import io.kyligence.kap.secondstorage.enums.LockTypeEnum",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/utils/ComputedColumnEvalUtilTest.java||src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/utils/ComputedColumnEvalUtilTest.java": [
          "File: src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/utils/ComputedColumnEvalUtilTest.java -> src/spark-project/engine-spark/src/test/java/org/apache/kylin/engine/spark/utils/ComputedColumnEvalUtilTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import static org.apache.kylin.common.exception.QueryErrorCode.CC_EXPRESSION_ILLEGAL;",
          "24: import java.util.List;",
          "26: import org.apache.kylin.common.KylinConfig;",
          "27: import org.apache.kylin.common.util.JsonUtil;",
          "28: import org.apache.kylin.engine.spark.NLocalWithSparkSessionTest;",
          "29: import org.apache.kylin.metadata.model.ComputedColumnDesc;",
          "30: import org.apache.kylin.metadata.model.NDataModel;",
          "31: import org.apache.kylin.metadata.model.NDataModelManager;",
          "32: import org.apache.kylin.metadata.model.util.ComputedColumnUtil;",
          "33: import org.junit.Assert;",
          "34: import org.junit.Test;",
          "38: public class ComputedColumnEvalUtilTest extends NLocalWithSparkSessionTest {",
          "40:     @Test",
          "41:     public void testRemoveUnsupportedCCWithEvenCase() {",
          "42:         List<ComputedColumnDesc> computedColumns = Lists.newArrayList();",
          "",
          "[Removed Lines]",
          "23: import java.util.Arrays;",
          "36: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "",
          "[Added Lines]",
          "23: import java.util.Collections;",
          "25: import java.util.Map;",
          "26: import java.util.concurrent.atomic.AtomicInteger;",
          "27: import java.util.stream.Collectors;",
          "32: import org.apache.kylin.guava30.shaded.common.collect.Lists;",
          "33: import org.apache.kylin.guava30.shaded.common.collect.Maps;",
          "38: import org.apache.kylin.query.util.PushDownUtil;",
          "39: import org.apache.spark.sql.SparderEnv;",
          "40: import org.junit.After;",
          "46:     @After",
          "47:     public void tearDown() throws Exception {",
          "48:         super.tearDown();",
          "49:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "272:         copyModel.setProject(project);",
          "273:         copyModel.init(KylinConfig.getInstanceFromEnv());",
          "277:     }",
          "279: }",
          "",
          "[Removed Lines]",
          "275:         String sharedName = ComputedColumnUtil.shareCCNameAcrossModel(cc1, copyModel, Arrays.asList(dataModel));",
          "276:         Assert.assertEquals(null, sharedName);",
          "",
          "[Added Lines]",
          "286:         String sharedName = ComputedColumnUtil.shareCCNameAcrossModel(cc1, copyModel,",
          "287:                 Collections.singletonList(dataModel));",
          "288:         Assert.assertNull(sharedName);",
          "289:     }",
          "291:     @Test",
          "292:     public void testDataTypeForNestedCC() {",
          "293:         KylinConfig config = KylinConfig.getInstanceFromEnv();",
          "294:         String project = getProject();",
          "295:         populateSSWithCSVData(config, project, SparderEnv.getSparkSession());",
          "297:         NDataModelManager manager = NDataModelManager.getInstance(config, project);",
          "298:         NDataModel model = manager.getDataModelDescByAlias(\"nmodel_basic\");",
          "300:         ComputedColumnDesc newCC = new ComputedColumnDesc();",
          "301:         newCC.setTableIdentity(\"DEFAULT.TEST_KYLIN_FACT\");",
          "302:         newCC.setTableAlias(\"TEST_KYLIN_FACT\");",
          "303:         newCC.setColumnName(\"NEW_CC\");",
          "304:         newCC.setExpression(\"TEST_KYLIN_FACT.NEST4 - 1\");",
          "305:         newCC.setInnerExpression(PushDownUtil.massageComputedColumn(model, project, newCC, null));",
          "306:         newCC.setDatatype(\"ANY\");",
          "308:         ComputedColumnEvalUtil.evaluateExprAndTypeBatch(model, Lists.newArrayList(newCC));",
          "309:         Assert.assertEquals(\"DECIMAL(35,0)\", newCC.getDatatype());",
          "312:     @Test",
          "313:     public void testAllDataTypesForCC() {",
          "314:         KylinConfig config = KylinConfig.getInstanceFromEnv();",
          "315:         String project = getProject();",
          "316:         populateSSWithCSVData(config, project, SparderEnv.getSparkSession());",
          "318:         NDataModelManager manager = NDataModelManager.getInstance(config, project);",
          "319:         NDataModel model = manager.getDataModelDescByAlias(\"nmodel_full_measure_test\");",
          "321:         Map<String, String> exprTypes = Maps.newHashMap();",
          "322:         exprTypes.put(\"TEST_MEASURE.ID1\", \"BIGINT\");",
          "323:         exprTypes.put(\"TEST_MEASURE.ID2\", \"BIGINT\");",
          "324:         exprTypes.put(\"TEST_MEASURE.ID3\", \"BIGINT\"); // long",
          "325:         exprTypes.put(\"TEST_MEASURE.ID4\", \"INTEGER\");",
          "326:         exprTypes.put(\"TEST_MEASURE.ID1 * 2\", \"BIGINT\");",
          "327:         exprTypes.put(\"TEST_MEASURE.ID2 / 2\", \"DOUBLE\");",
          "328:         exprTypes.put(\"TEST_MEASURE.ID3 - 1000\", \"BIGINT\");",
          "329:         exprTypes.put(\"TEST_MEASURE.ID4 + 1000\", \"INTEGER\");",
          "330:         exprTypes.put(\"CASE WHEN TEST_MEASURE.ID1 > 0 THEN 'YES' ELSE 'NO' END\", \"VARCHAR\");",
          "332:         exprTypes.put(\"TEST_MEASURE.PRICE1\", \"FLOAT\");",
          "333:         exprTypes.put(\"TEST_MEASURE.PRICE2\", \"DOUBLE\");",
          "334:         exprTypes.put(\"TEST_MEASURE.PRICE3\", \"DECIMAL(19,4)\");",
          "335:         exprTypes.put(\"TEST_MEASURE.PRICE5\", \"SMALLINT\"); // short",
          "336:         exprTypes.put(\"TEST_MEASURE.PRICE6\", \"TINYINT\");",
          "337:         exprTypes.put(\"TEST_MEASURE.PRICE7\", \"SMALLINT\");",
          "338:         exprTypes.put(\"TEST_MEASURE.PRICE1 - TEST_MEASURE.PRICE2\", \"DOUBLE\");",
          "339:         exprTypes.put(\"CASE WHEN 1 > 0 THEN TEST_MEASURE.PRICE1 ELSE TEST_MEASURE.PRICE2 END\", \"DOUBLE\");",
          "340:         exprTypes.put(\"CASE WHEN 1 < 0 THEN TEST_MEASURE.PRICE1 ELSE TEST_MEASURE.PRICE2 END\", \"DOUBLE\");",
          "341:         exprTypes.put(\"TEST_MEASURE.PRICE3 * 10\", \"DECIMAL(22,4)\");",
          "342:         exprTypes.put(\"TEST_MEASURE.PRICE3 / 10\", \"DECIMAL(22,7)\");",
          "343:         exprTypes.put(\"TEST_MEASURE.PRICE5 + 1\", \"INTEGER\");",
          "344:         exprTypes.put(\"TEST_MEASURE.PRICE6 + 1\", \"INTEGER\");",
          "345:         exprTypes.put(\"TEST_MEASURE.PRICE7 + 1\", \"INTEGER\");",
          "346:         exprTypes.put(\"TEST_MEASURE.PRICE5 * TEST_MEASURE.PRICE6 + TEST_MEASURE.PRICE7\", \"SMALLINT\");",
          "348:         exprTypes.put(\"TEST_MEASURE.NAME1\", \"VARCHAR\"); // string",
          "349:         exprTypes.put(\"TEST_MEASURE.NAME2\", \"VARCHAR\"); // varchar(254)",
          "350:         exprTypes.put(\"TEST_MEASURE.NAME3\", \"VARCHAR\"); // char",
          "351:         exprTypes.put(\"TEST_MEASURE.NAME4\", \"TINYINT\"); // byte",
          "352:         exprTypes.put(\"CONCAT(TEST_MEASURE.NAME1, ' ')\", \"VARCHAR\");",
          "353:         exprTypes.put(\"SUBSTRING(TEST_MEASURE.NAME2, 1, 2)\", \"VARCHAR\");",
          "354:         exprTypes.put(\"LENGTH(TEST_MEASURE.NAME1)\", \"INTEGER\");",
          "356:         exprTypes.put(\"TEST_MEASURE.TIME1\", \"DATE\");",
          "357:         exprTypes.put(\"TEST_MEASURE.TIME2\", \"TIMESTAMP\");",
          "358:         exprTypes.put(\"DATEDIFF(CAST(TEST_MEASURE.TIME2 AS DATE), TEST_MEASURE.TIME1)\", \"INTEGER\");",
          "359:         exprTypes.put(\"CAST(TEST_MEASURE.TIME2 AS STRING)\", \"VARCHAR\");",
          "360:         exprTypes.put(\"TEST_MEASURE.TIME1 + INTERVAL 12 HOURS\", \"TIMESTAMP\");",
          "361:         exprTypes.put(\"TEST_MEASURE.TIME2 + INTERVAL 12 HOURS\", \"TIMESTAMP\");",
          "362:         exprTypes.put(\"YEAR(TEST_MEASURE.TIME2)\", \"INTEGER\");",
          "363:         exprTypes.put(\"MONTH(TEST_MEASURE.TIME2)\", \"INTEGER\");",
          "364:         exprTypes.put(\"DAYOFMONTH(TEST_MEASURE.TIME2)\", \"INTEGER\");",
          "366:         exprTypes.put(\"TEST_MEASURE.FLAG\", \"BOOLEAN\");",
          "367:         exprTypes.put(\"NOT TEST_MEASURE.FLAG\", \"BOOLEAN\");",
          "369:         AtomicInteger ccId = new AtomicInteger(0);",
          "370:         List<ComputedColumnDesc> newCCs = exprTypes.keySet().stream().map(expr -> {",
          "371:             ComputedColumnDesc newCC = new ComputedColumnDesc();",
          "372:             newCC.setTableIdentity(\"DEFAULT.TEST_MEASURE\");",
          "373:             newCC.setTableAlias(\"TEST_MEASURE\");",
          "374:             newCC.setColumnName(\"CC_\" + ccId.incrementAndGet());",
          "375:             newCC.setExpression(expr);",
          "376:             newCC.setDatatype(\"ANY\");",
          "377:             return newCC;",
          "378:         }).collect(Collectors.toList());",
          "380:         ComputedColumnEvalUtil.evaluateExprAndTypeBatch(model, newCCs);",
          "381:         newCCs.forEach(cc -> {",
          "382:             String expr = cc.getExpression();",
          "383:             Assert.assertEquals(expr + \" type is fail\", exprTypes.get(expr), cc.getDatatype());",
          "384:         });",
          "385:     }",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala||src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala": [
          "File: src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala -> src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestCreateFlatTable.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.kylin.engine.spark.builder",
          "20: import org.apache.kylin.common.KylinConfig",
          "21: import org.apache.kylin.engine.spark.builder.DFBuilderHelper.ENCODE_SUFFIX",
          "22: import org.apache.kylin.engine.spark.job.DFChooser",
          "23: import org.apache.kylin.metadata.cube.cuboid.NSpanningTreeFactory",
          "24: import org.apache.kylin.metadata.cube.model._",
          "27: import org.apache.spark.sql.common.{LocalMetadata, SharedSparkSession, SparderBaseFunSuite}",
          "28: import org.apache.spark.sql.{Dataset, Row}",
          "29: import org.junit.Assert",
          "33: import scala.collection.JavaConverters._",
          "",
          "[Removed Lines]",
          "25: import org.apache.kylin.metadata.model.{NDataModel, NDataModelManager}",
          "26: import org.apache.kylin.metadata.model.SegmentRange",
          "31: import java.text.SimpleDateFormat",
          "32: import java.util.{Locale, TimeZone}",
          "",
          "[Added Lines]",
          "20: import java.text.SimpleDateFormat",
          "21: import java.util.{Locale, TimeZone}",
          "28: import org.apache.kylin.metadata.model.{NDataModel, NDataModelManager, SegmentRange}",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestDFChooser.scala||src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestDFChooser.scala": [
          "File: src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestDFChooser.scala -> src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/builder/TestDFChooser.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.apache.kylin.engine.spark.builder",
          "20: import java.util",
          "23: import org.apache.kylin.engine.spark.builder.DFBuilderHelper.ENCODE_SUFFIX",
          "24: import org.apache.kylin.engine.spark.job.{CuboidAggregator, UdfManager}",
          "25: import org.apache.kylin.metadata.cube.cuboid.NSpanningTreeFactory",
          "26: import org.apache.kylin.metadata.cube.model.NIndexPlanManager.NIndexPlanUpdater",
          "27: import org.apache.kylin.metadata.cube.model._",
          "28: import org.apache.kylin.metadata.model.NDataModel.Measure",
          "33: import org.apache.spark.dict.{NGlobalDictBuilderAssist, NGlobalDictionaryV2}",
          "34: import org.apache.spark.sql.common.{LocalMetadata, SharedSparkSession, SparderBaseFunSuite}",
          "35: import org.apache.spark.sql.{Dataset, Row}",
          "",
          "[Removed Lines]",
          "21: import org.apache.kylin.guava30.shaded.common.collect.Lists.newArrayList",
          "22: import org.apache.kylin.guava30.shaded.common.collect.{Lists, Sets}",
          "29: import org.apache.kylin.metadata.model.{ManagementType, NDataModel, NDataModelManager}",
          "30: import org.apache.commons.lang3.StringUtils",
          "31: import org.apache.kylin.common.KylinConfig",
          "32: import org.apache.kylin.metadata.model.{FunctionDesc, ParameterDesc, SegmentRange, TblColRef}",
          "",
          "[Added Lines]",
          "22: import org.apache.commons.lang3.StringUtils",
          "23: import org.apache.kylin.common.KylinConfig",
          "26: import org.apache.kylin.guava30.shaded.common.collect.Lists.newArrayList",
          "27: import org.apache.kylin.guava30.shaded.common.collect.{Lists, Sets}",
          "32: import org.apache.kylin.metadata.model.{FunctionDesc, ManagementType, NDataModel, NDataModelManager, ParameterDesc, SegmentRange, TblColRef}",
          "",
          "---------------"
        ],
        "src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/job/TestRDSegmentBuildExec.scala||src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/job/TestRDSegmentBuildExec.scala": [
          "File: src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/job/TestRDSegmentBuildExec.scala -> src/spark-project/engine-spark/src/test/scala/org/apache/kylin/engine/spark/job/TestRDSegmentBuildExec.scala",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package org.apache.kylin.engine.spark.job",
          "22: import org.apache.kylin.common.util.TestUtils.getTestConfig",
          "23: import org.apache.kylin.common.{KapConfig, KylinConfig}",
          "24: import org.apache.kylin.engine.spark.job.stage.BuildParam",
          "25: import org.apache.kylin.metadata.cube.model._",
          "26: import org.apache.kylin.metadata.model.{NTableMetadataManager, SegmentRange, TableDesc, TableExtDesc}",
          "27: import org.apache.spark.sql.SaveMode",
          "",
          "[Removed Lines]",
          "21: import org.apache.kylin.guava30.shaded.common.collect.Lists",
          "",
          "[Added Lines]",
          "21: import java.util",
          "26: import org.apache.kylin.guava30.shaded.common.collect.Lists",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31: import org.mockito.Mockito",
          "32: import org.scalatest.PrivateMethodTester",
          "35: import scala.collection.JavaConverters._",
          "37: class TestRDSegmentBuildExec extends SparderBaseFunSuite with PrivateMethodTester",
          "",
          "[Removed Lines]",
          "34: import java.util",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}