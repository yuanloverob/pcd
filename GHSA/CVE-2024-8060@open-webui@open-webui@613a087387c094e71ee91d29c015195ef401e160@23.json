{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7c68a424f82f32d7be4e59cfb2ee6552e3de9216",
      "candidate_info": {
        "commit_hash": "7c68a424f82f32d7be4e59cfb2ee6552e3de9216",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/7c68a424f82f32d7be4e59cfb2ee6552e3de9216",
        "files": [
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1279:   const chatInputElement = document.getElementById('chat-input');",
          "1281:   if (chatInputElement) {",
          "1282:    chatInputElement.style.height = '';",
          "1283:   }",
          "1285:   const _files = JSON.parse(JSON.stringify(files));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1282:    await tick();",
          "1284:    chatInputElement.style.height = Math.min(chatInputElement.scrollHeight, 320) + 'px';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ffdb45cc4beb48c131e0177fee9da81a9aa598a4",
      "candidate_info": {
        "commit_hash": "ffdb45cc4beb48c131e0177fee9da81a9aa598a4",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/ffdb45cc4beb48c131e0177fee9da81a9aa598a4",
        "files": [
          "backend/open_webui/routers/channels.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/channels.py||backend/open_webui/routers/channels.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/channels.py||backend/open_webui/routers/channels.py": [
          "File: backend/open_webui/routers/channels.py -> backend/open_webui/routers/channels.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "673:             to=f\"channel:{channel.id}\",",
          "674:         )",
          "676:         return True",
          "677:     except Exception as e:",
          "678:         log.exception(e)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "676:         if message.parent_id:",
          "677:             # If this message is a reply, emit to the parent message as well",
          "678:             parent_message = Messages.get_message_by_id(message.parent_id)",
          "680:             if parent_message:",
          "681:                 await sio.emit(",
          "682:                     \"channel-events\",",
          "683:                     {",
          "684:                         \"channel_id\": channel.id,",
          "685:                         \"message_id\": parent_message.id,",
          "686:                         \"data\": {",
          "687:                             \"type\": \"message:reply\",",
          "688:                             \"data\": MessageUserResponse(",
          "691:                                     \"user\": UserNameResponse(",
          "693:                                             parent_message.user_id",
          "694:                                         ).model_dump()",
          "695:                                     ),",
          "696:                                 }",
          "697:                             ).model_dump(),",
          "698:                         },",
          "699:                         \"user\": UserNameResponse(**user.model_dump()).model_dump(),",
          "700:                         \"channel\": channel.model_dump(),",
          "701:                     },",
          "702:                     to=f\"channel:{channel.id}\",",
          "703:                 )",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6e56c0e5aa45a8250ade23497b0e4f8fc1c9702",
      "candidate_info": {
        "commit_hash": "b6e56c0e5aa45a8250ade23497b0e4f8fc1c9702",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/b6e56c0e5aa45a8250ade23497b0e4f8fc1c9702",
        "files": [
          "src/lib/components/chat/Messages/ResponseMessage.svelte",
          "src/lib/components/layout/Navbar/Menu.svelte",
          "src/lib/components/layout/Sidebar/ChatMenu.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Messages/ResponseMessage.svelte||src/lib/components/chat/Messages/ResponseMessage.svelte",
          "src/lib/components/layout/Navbar/Menu.svelte||src/lib/components/layout/Navbar/Menu.svelte",
          "src/lib/components/layout/Sidebar/ChatMenu.svelte||src/lib/components/layout/Sidebar/ChatMenu.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Messages/ResponseMessage.svelte||src/lib/components/chat/Messages/ResponseMessage.svelte": [
          "File: src/lib/components/chat/Messages/ResponseMessage.svelte -> src/lib/components/chat/Messages/ResponseMessage.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "559:   <div class=\"flex-auto w-0 pl-1\">",
          "560:    <Name>",
          "561:     <Tooltip content={model?.name ?? message.model} placement=\"top-start\">",
          "563:       {model?.name ?? message.model}",
          "564:      </span>",
          "565:     </Tooltip>",
          "",
          "[Removed Lines]",
          "562:      <span class=\"line-clamp-1\">",
          "",
          "[Added Lines]",
          "562:      <span class=\"line-clamp-1 text-black dark:text-white\">",
          "",
          "---------------"
        ],
        "src/lib/components/layout/Navbar/Menu.svelte||src/lib/components/layout/Navbar/Menu.svelte": [
          "File: src/lib/components/layout/Navbar/Menu.svelte -> src/lib/components/layout/Navbar/Menu.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:    try {",
          "69:     const isDarkMode = $theme.includes('dark'); // Check theme mode",
          "72:      useCORS: true,",
          "77:     });",
          "79:     const imgData = canvas.toDataURL('image/png');",
          "82:     const pdf = new jsPDF('p', 'mm', 'a4');",
          "87:     let heightLeft = imgHeight;",
          "88:     let position = 0;",
          "91:     if (isDarkMode) {",
          "94:     }",
          "97:     pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);",
          "98:     heightLeft -= pageHeight;",
          "101:     while (heightLeft > 0) {",
          "102:      position -= pageHeight;",
          "103:      pdf.addPage();",
          "105:      if (isDarkMode) {",
          "107:       pdf.rect(0, 0, imgWidth, pageHeight, 'F');",
          "108:      }",
          "",
          "[Removed Lines]",
          "71:     const canvas = await html2canvas(containerElement, {",
          "73:      backgroundColor: isDarkMode ? '#000' : '#fff', // Ensure proper background",
          "74:      scale: 2, // Enhance resolution",
          "75:      height: containerElement.scrollHeight,",
          "76:      windowHeight: containerElement.scrollHeight",
          "83:     const imgWidth = 210;",
          "84:     const pageHeight = 297;",
          "86:     const imgHeight = (canvas.height * imgWidth) / canvas.width; // Maintain aspect ratio",
          "92:      pdf.setFillColor(0, 0, 0); // Black background for each page",
          "93:      pdf.rect(0, 0, imgWidth, pageHeight, 'F'); // Fill entire page",
          "106:       pdf.setFillColor(0, 0, 0); // Ensure dark background for new pages",
          "",
          "[Added Lines]",
          "72:     const virtualWidth = 1024; // Fixed width (adjust as needed)",
          "73:     const virtualHeight = 1400; // Fixed height (adjust as needed)",
          "76:     const clonedElement = containerElement.cloneNode(true);",
          "77:     clonedElement.style.width = `${virtualWidth}px`; // Apply fixed width",
          "78:     clonedElement.style.height = 'auto'; // Allow content to expand",
          "80:     document.body.appendChild(clonedElement); // Temporarily add to DOM",
          "83:     const canvas = await html2canvas(clonedElement, {",
          "84:      backgroundColor: isDarkMode ? '#000' : '#fff',",
          "86:      scale: 2, // Keep at 1x to avoid unexpected enlargements",
          "87:      width: virtualWidth, // Set fixed virtual screen width",
          "88:      windowWidth: virtualWidth, // Ensure consistent rendering",
          "89:      windowHeight: virtualHeight",
          "92:     document.body.removeChild(clonedElement); // Clean up temp element",
          "98:     const imgWidth = 210; // A4 width in mm",
          "99:     const pageHeight = 297; // A4 height in mm",
          "102:     const imgHeight = (canvas.height * imgWidth) / canvas.width;",
          "108:      pdf.setFillColor(0, 0, 0);",
          "109:      pdf.rect(0, 0, imgWidth, pageHeight, 'F'); // Apply black bg",
          "121:       pdf.setFillColor(0, 0, 0);",
          "",
          "---------------"
        ],
        "src/lib/components/layout/Sidebar/ChatMenu.svelte||src/lib/components/layout/Sidebar/ChatMenu.svelte": [
          "File: src/lib/components/layout/Sidebar/ChatMenu.svelte -> src/lib/components/layout/Sidebar/ChatMenu.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:  const downloadPdf = async () => {",
          "82:   const chat = await getChatById(localStorage.token, chatId);",
          "83:   const containerElement = document.getElementById('messages-container');",
          "85:   if (containerElement) {",
          "86:    try {",
          "87:     const isDarkMode = $theme.includes('dark'); // Check theme mode",
          "90:      useCORS: true,",
          "95:     });",
          "97:     const imgData = canvas.toDataURL('image/png');",
          "100:     const pdf = new jsPDF('p', 'mm', 'a4');",
          "105:     let heightLeft = imgHeight;",
          "106:     let position = 0;",
          "109:     if (isDarkMode) {",
          "112:     }",
          "115:     pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);",
          "116:     heightLeft -= pageHeight;",
          "119:     while (heightLeft > 0) {",
          "120:      position -= pageHeight;",
          "121:      pdf.addPage();",
          "123:      if (isDarkMode) {",
          "125:       pdf.rect(0, 0, imgWidth, pageHeight, 'F');",
          "126:      }",
          "",
          "[Removed Lines]",
          "89:     const canvas = await html2canvas(containerElement, {",
          "91:      backgroundColor: isDarkMode ? '#000' : '#fff', // Ensure proper background",
          "92:      scale: 2, // Enhance resolution",
          "93:      height: containerElement.scrollHeight,",
          "94:      windowHeight: containerElement.scrollHeight",
          "101:     const imgWidth = 210;",
          "102:     const pageHeight = 297;",
          "104:     const imgHeight = (canvas.height * imgWidth) / canvas.width; // Maintain aspect ratio",
          "110:      pdf.setFillColor(0, 0, 0); // Black background for each page",
          "111:      pdf.rect(0, 0, imgWidth, pageHeight, 'F'); // Fill entire page",
          "124:       pdf.setFillColor(0, 0, 0); // Ensure dark background for new pages",
          "",
          "[Added Lines]",
          "91:     const virtualWidth = 1024; // Fixed width (adjust as needed)",
          "92:     const virtualHeight = 1400; // Fixed height (adjust as needed)",
          "95:     const clonedElement = containerElement.cloneNode(true);",
          "96:     clonedElement.style.width = `${virtualWidth}px`; // Apply fixed width",
          "97:     clonedElement.style.height = 'auto'; // Allow content to expand",
          "99:     document.body.appendChild(clonedElement); // Temporarily add to DOM",
          "102:     const canvas = await html2canvas(clonedElement, {",
          "103:      backgroundColor: isDarkMode ? '#000' : '#fff',",
          "105:      scale: 2, // Keep at 1x to avoid unexpected enlargements",
          "106:      width: virtualWidth, // Set fixed virtual screen width",
          "107:      windowWidth: virtualWidth, // Ensure consistent rendering",
          "108:      windowHeight: virtualHeight",
          "111:     document.body.removeChild(clonedElement); // Clean up temp element",
          "117:     const imgWidth = 210; // A4 width in mm",
          "118:     const pageHeight = 297; // A4 height in mm",
          "121:     const imgHeight = (canvas.height * imgWidth) / canvas.width;",
          "127:      pdf.setFillColor(0, 0, 0);",
          "128:      pdf.rect(0, 0, imgWidth, pageHeight, 'F'); // Apply black bg",
          "140:       pdf.setFillColor(0, 0, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "667d26ca12e9e640759e94f5fe69a8f88464cf16",
      "candidate_info": {
        "commit_hash": "667d26ca12e9e640759e94f5fe69a8f88464cf16",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/667d26ca12e9e640759e94f5fe69a8f88464cf16",
        "files": [
          "src/lib/components/admin/Functions/FunctionEditor.svelte",
          "src/lib/components/chat/Messages/CodeBlock.svelte",
          "src/lib/components/common/CodeEditor.svelte",
          "src/lib/components/workspace/Tools/ToolkitEditor.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/admin/Functions/FunctionEditor.svelte||src/lib/components/admin/Functions/FunctionEditor.svelte",
          "src/lib/components/chat/Messages/CodeBlock.svelte||src/lib/components/chat/Messages/CodeBlock.svelte",
          "src/lib/components/common/CodeEditor.svelte||src/lib/components/common/CodeEditor.svelte",
          "src/lib/components/workspace/Tools/ToolkitEditor.svelte||src/lib/components/workspace/Tools/ToolkitEditor.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Functions/FunctionEditor.svelte||src/lib/components/admin/Functions/FunctionEditor.svelte": [
          "File: src/lib/components/admin/Functions/FunctionEditor.svelte -> src/lib/components/admin/Functions/FunctionEditor.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:       value={content}",
          "372:       lang=\"python\"",
          "373:       {boilerplate}",
          "375:        _content = e.detail.value;",
          "376:       }}",
          "378:        if (formElement) {",
          "379:         formElement.requestSubmit();",
          "380:        }",
          "",
          "[Removed Lines]",
          "374:       on:change={(e) => {",
          "377:       on:save={async () => {",
          "",
          "[Added Lines]",
          "374:       onChange={(e) => {",
          "377:       onSave={async () => {",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages/CodeBlock.svelte||src/lib/components/chat/Messages/CodeBlock.svelte": [
          "File: src/lib/components/chat/Messages/CodeBlock.svelte -> src/lib/components/chat/Messages/CodeBlock.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "468:      value={code}",
          "469:      {id}",
          "470:      {lang}",
          "472:       saveCode();",
          "473:      }}",
          "475:       _code = e.detail.value;",
          "476:      }}",
          "477:     />",
          "",
          "[Removed Lines]",
          "471:      on:save={() => {",
          "474:      on:change={(e) => {",
          "",
          "[Added Lines]",
          "471:      onSave={() => {",
          "474:      onChange={(e) => {",
          "",
          "---------------"
        ],
        "src/lib/components/common/CodeEditor.svelte||src/lib/components/common/CodeEditor.svelte": [
          "File: src/lib/components/common/CodeEditor.svelte -> src/lib/components/common/CodeEditor.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  export let boilerplate = '';",
          "23:  export let value = '';",
          "24:  let _value = '';",
          "26:  $: if (value) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25:  export let onSave = () => {};",
          "26:  export let onChange = () => {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     });",
          "77:     _value = formattedCode;",
          "79:     await tick();",
          "81:     toast.success($i18n.t('Code formatted successfully'));",
          "",
          "[Removed Lines]",
          "78:     dispatch('change', { value: _value });",
          "",
          "[Added Lines]",
          "82:     onChange({ value: _value });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:   EditorView.updateListener.of((e) => {",
          "95:    if (e.docChanged) {",
          "96:     _value = e.state.doc.toString();",
          "98:    }",
          "99:   }),",
          "100:   editorTheme.of([]),",
          "",
          "[Removed Lines]",
          "97:     dispatch('change', { value: _value });",
          "",
          "[Added Lines]",
          "101:     onChange({ value: _value });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:   const keydownHandler = async (e) => {",
          "171:    if ((e.ctrlKey || e.metaKey) && e.key === 's') {",
          "172:     e.preventDefault();",
          "174:    }",
          "",
          "[Removed Lines]",
          "173:     dispatch('save');",
          "",
          "[Added Lines]",
          "178:     onSave();",
          "",
          "---------------"
        ],
        "src/lib/components/workspace/Tools/ToolkitEditor.svelte||src/lib/components/workspace/Tools/ToolkitEditor.svelte": [
          "File: src/lib/components/workspace/Tools/ToolkitEditor.svelte -> src/lib/components/workspace/Tools/ToolkitEditor.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:       value={content}",
          "285:       {boilerplate}",
          "286:       lang=\"python\"",
          "288:        _content = e.detail.value;",
          "289:       }}",
          "291:        if (formElement) {",
          "292:         formElement.requestSubmit();",
          "293:        }",
          "",
          "[Removed Lines]",
          "287:       on:change={(e) => {",
          "290:       on:save={() => {",
          "",
          "[Added Lines]",
          "287:       onChange={(e) => {",
          "290:       onSave={() => {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "029625ec4e207e3d9652fd2e3b9728eb5990e0ae",
      "candidate_info": {
        "commit_hash": "029625ec4e207e3d9652fd2e3b9728eb5990e0ae",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/029625ec4e207e3d9652fd2e3b9728eb5990e0ae",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1553:                                                         ] += delta_arguments",
          "1555:                                     value = delta.get(\"content\")",
          "1556:                                     reasoning_content = delta.get(\"reasoning_content\")",
          "1557:                                     if reasoning_content:",
          "1559:                                             reasoning_block = {",
          "1560:                                                 \"type\": \"reasoning\",",
          "1561:                                                 \"start_tag\": \"think\",",
          "1562:                                                 \"end_tag\": \"/think\",",
          "1564:                                                 \"content\": \"\",",
          "1566:                                             }",
          "1567:                                             content_blocks.append(reasoning_block)",
          "1568:                                         else:",
          "1569:                                             reasoning_block = content_blocks[-1]",
          "1570:                                         reasoning_block[\"content\"] += reasoning_content",
          "1571:                                         data = {",
          "1573:                                         }",
          "1574:                                     if value:",
          "1576:                                             reasoning_block = content_blocks[-1]",
          "1578:                                             reasoning_block[\"ended_at\"] = time.time()",
          "1581:                                             content_blocks.append(",
          "1582:                                                 {",
          "",
          "[Removed Lines]",
          "1558:                                         if not content_blocks or content_blocks[-1][\"type\"] != \"reasoning\":",
          "1563:                                                 \"attributes\": {\"type\": \"reasoning_content\"},",
          "1565:                                                 \"started_at\": time.time()",
          "1572:                                             \"content\": serialize_content_blocks(content_blocks)",
          "1575:                                         if content_blocks and content_blocks[-1][\"type\"] == \"reasoning\" and content_blocks[-1].get(\"attributes\", {}).get(\"type\") == \"reasoning_content\":",
          "1577:                                             reasoning_block[\"attributes\"] = {}",
          "1579:                                             reasoning_block[\"duration\"] = int(reasoning_block[\"ended_at\"] - reasoning_block[\"started_at\"])",
          "",
          "[Added Lines]",
          "1559:                                         if (",
          "1560:                                             not content_blocks",
          "1561:                                             or content_blocks[-1][\"type\"] != \"reasoning\"",
          "1562:                                         ):",
          "1567:                                                 \"attributes\": {",
          "1568:                                                     \"type\": \"reasoning_content\"",
          "1569:                                                 },",
          "1571:                                                 \"started_at\": time.time(),",
          "1580:                                             \"content\": serialize_content_blocks(",
          "1581:                                                 content_blocks",
          "1582:                                             )",
          "1586:                                         if (",
          "1587:                                             content_blocks",
          "1588:                                             and content_blocks[-1][\"type\"]",
          "1589:                                             == \"reasoning\"",
          "1590:                                             and content_blocks[-1]",
          "1591:                                             .get(\"attributes\", {})",
          "1592:                                             .get(\"type\")",
          "1593:                                             == \"reasoning_content\"",
          "1594:                                         ):",
          "1597:                                             reasoning_block[\"duration\"] = int(",
          "1598:                                                 reasoning_block[\"ended_at\"]",
          "1599:                                                 - reasoning_block[\"started_at\"]",
          "1600:                                             )",
          "",
          "---------------"
        ]
      }
    }
  ]
}