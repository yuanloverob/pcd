{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f806ab0bd295bbf6feb50d4512f5e1f3d9dcf9cf",
      "candidate_info": {
        "commit_hash": "f806ab0bd295bbf6feb50d4512f5e1f3d9dcf9cf",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/f806ab0bd295bbf6feb50d4512f5e1f3d9dcf9cf",
        "files": [
          "backend/open_webui/env.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/env.py||backend/open_webui/env.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/env.py||backend/open_webui/env.py": [
          "File: backend/open_webui/env.py -> backend/open_webui/env.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "392: AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST = os.environ.get(",
          "393:     \"AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST\",",
          "395: )",
          "397: if AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST == \"\":",
          "",
          "[Removed Lines]",
          "394:     os.environ.get(\"AIOHTTP_CLIENT_TIMEOUT_OPENAI_MODEL_LIST\", \"\"),",
          "",
          "[Added Lines]",
          "394:     os.environ.get(\"AIOHTTP_CLIENT_TIMEOUT_OPENAI_MODEL_LIST\", \"10\"),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:     try:",
          "401:         AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST = int(AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST)",
          "402:     except Exception:",
          "405: ####################################",
          "406: # OFFLINE_MODE",
          "",
          "[Removed Lines]",
          "403:         AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST = 5",
          "",
          "[Added Lines]",
          "403:         AIOHTTP_CLIENT_TIMEOUT_MODEL_LIST = 10",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20211a489fcfc12c91ec4486017d540c14c9b308",
      "candidate_info": {
        "commit_hash": "20211a489fcfc12c91ec4486017d540c14c9b308",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/20211a489fcfc12c91ec4486017d540c14c9b308",
        "files": [
          "src/app.css",
          "src/lib/components/chat/MessageInput.svelte",
          "src/lib/components/chat/Settings/Interface.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/app.css||src/app.css",
          "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte",
          "src/lib/components/chat/Settings/Interface.svelte||src/lib/components/chat/Settings/Interface.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/app.css||src/app.css": [
          "File: src/app.css -> src/app.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:  @apply rounded-lg;",
          "47: }",
          "49: .input-prose {",
          "50:  @apply prose dark:prose-invert prose-headings:font-semibold prose-hr:my-4 prose-hr:border-gray-100 prose-hr:dark:border-gray-800 prose-p:my-0 prose-img:my-1 prose-headings:my-1 prose-pre:my-0 prose-table:my-0 prose-blockquote:my-0 prose-ul:-my-0 prose-ol:-my-0 prose-li:-my-0 whitespace-pre-line;",
          "51: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: input::placeholder {",
          "50:  direction: auto;",
          "51: }",
          "53: textarea::placeholder {",
          "54:  direction: auto;",
          "55: }",
          "",
          "---------------"
        ],
        "src/lib/components/chat/MessageInput.svelte||src/lib/components/chat/MessageInput.svelte": [
          "File: src/lib/components/chat/MessageInput.svelte -> src/lib/components/chat/MessageInput.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1033:          {/if}",
          "1034:         </div>",
          "1037:          <div class=\"ml-1 self-end flex items-center flex-1 max-w-[80%] gap-0.5\">",
          "1038:           <InputMenu",
          "1039:            bind:selectedToolIds",
          "",
          "[Removed Lines]",
          "1036:         <div class=\" flex justify-between mt-1.5 mb-2.5 mx-0.5 max-w-full\">",
          "",
          "[Added Lines]",
          "1036:         <div class=\" flex justify-between mt-1.5 mb-2.5 mx-0.5 max-w-full\" dir=\"ltr\">",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Settings/Interface.svelte||src/lib/components/chat/Settings/Interface.svelte": [
          "File: src/lib/components/chat/Settings/Interface.svelte -> src/lib/components/chat/Settings/Interface.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:  };",
          "213:  const toggleChangeChatDirection = async () => {",
          "215:   saveSettings({ chatDirection });",
          "216:  };",
          "",
          "[Removed Lines]",
          "214:   chatDirection = chatDirection === 'LTR' ? 'RTL' : 'LTR';",
          "",
          "[Added Lines]",
          "214:   if (chatDirection === 'auto') {",
          "215:    chatDirection = 'LTR';",
          "216:   } else if (chatDirection === 'LTR') {",
          "217:    chatDirection = 'RTL';",
          "218:   } else if (chatDirection === 'RTL') {",
          "219:    chatDirection = 'auto';",
          "220:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412:      >",
          "413:       {#if chatDirection === 'LTR'}",
          "414:        <span class=\"ml-2 self-center\">{$i18n.t('LTR')}</span>",
          "416:        <span class=\"ml-2 self-center\">{$i18n.t('RTL')}</span>",
          "417:       {/if}",
          "418:      </button>",
          "419:     </div>",
          "",
          "[Removed Lines]",
          "415:       {:else}",
          "",
          "[Added Lines]",
          "421:       {:else if chatDirection === 'RTL'}",
          "423:       {:else}",
          "424:        <span class=\"ml-2 self-center\">{$i18n.t('Auto')}</span>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "794919e91d24200f8911d307dc597a57f06843b5",
      "candidate_info": {
        "commit_hash": "794919e91d24200f8911d307dc597a57f06843b5",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/794919e91d24200f8911d307dc597a57f06843b5",
        "files": [
          "src/lib/components/chat/Messages/CodeBlock.svelte",
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Messages/CodeBlock.svelte||src/lib/components/chat/Messages/CodeBlock.svelte",
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Messages/CodeBlock.svelte||src/lib/components/chat/Messages/CodeBlock.svelte": [
          "File: src/lib/components/chat/Messages/CodeBlock.svelte -> src/lib/components/chat/Messages/CodeBlock.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <script lang=\"ts\">",
          "4:  import mermaid from 'mermaid';",
          "6:  import { v4 as uuidv4 } from 'uuid';",
          "16:  import { copyToClipboard } from '$lib/utils';",
          "18:  import 'highlight.js/styles/github-dark.min.css';",
          "",
          "[Removed Lines]",
          "2:  import hljs from 'highlight.js';",
          "3:  import { loadPyodide } from 'pyodide';",
          "8:  import {",
          "9:   getContext,",
          "10:   getAllContexts,",
          "11:   onMount,",
          "12:   tick,",
          "13:   createEventDispatcher,",
          "14:   onDestroy",
          "15:  } from 'svelte';",
          "",
          "[Added Lines]",
          "6:  import { getContext, onMount, tick, onDestroy } from 'svelte';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:  import { toast } from 'svelte-sonner';",
          "27:  const i18n = getContext('i18n');",
          "30:  export let id = '';",
          "32:  export let save = false;",
          "33:  export let run = true;",
          "",
          "[Removed Lines]",
          "28:  const dispatch = createEventDispatcher();",
          "",
          "[Added Lines]",
          "22:  export let onSave = (e) => {};",
          "23:  export let onCode = (e) => {};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:   saved = true;",
          "73:   code = _code;",
          "76:   setTimeout(() => {",
          "77:    saved = false;",
          "",
          "[Removed Lines]",
          "74:   dispatch('save', code);",
          "",
          "[Added Lines]",
          "67:   onSave(code);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "344:   render();",
          "345:  }",
          "349:  $: if (attributes) {",
          "350:   onAttributesUpdate();",
          "",
          "[Removed Lines]",
          "347:  $: dispatch('code', { lang, code });",
          "",
          "[Added Lines]",
          "340:  $: onCode({ lang, code });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "380:   console.log('codeblock', lang, code);",
          "382:   if (lang) {",
          "384:   }",
          "385:   if (document.documentElement.classList.contains('dark')) {",
          "386:    mermaid.initialize({",
          "",
          "[Removed Lines]",
          "383:    dispatch('code', { lang, code });",
          "",
          "[Added Lines]",
          "376:    onCode({ lang, code });",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte": [
          "File: src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte -> src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     code={token?.text ?? ''}",
          "89:     {attributes}",
          "90:     {save}",
          "92:      dispatch('code', e.detail);",
          "93:     }}",
          "95:      dispatch('update', {",
          "96:       raw: token.raw,",
          "97:       oldContent: token.text,",
          "",
          "[Removed Lines]",
          "91:     on:code={(e) => {",
          "94:     on:save={(e) => {",
          "",
          "[Added Lines]",
          "91:     onCode={(e) => {",
          "94:     onSave={(e) => {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31c176a485642d2bc860ff833a06f6db13127798",
      "candidate_info": {
        "commit_hash": "31c176a485642d2bc860ff833a06f6db13127798",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/31c176a485642d2bc860ff833a06f6db13127798",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1107:                         reasoning_duration = block.get(\"duration\", None)",
          "1109:                         if reasoning_duration:",
          "1111:                         else:",
          "1114:                     elif block[\"type\"] == \"code_interpreter\":",
          "1115:                         attributes = block.get(\"attributes\", {})",
          "",
          "[Removed Lines]",
          "1110:                             content = f'{content}<details type=\"reasoning\" done=\"true\" duration=\"{reasoning_duration}\">\\n<summary>Thought for {reasoning_duration} seconds</summary>\\n{reasoning_display_content}\\n</details>\\n'",
          "1112:                             content = f'{content}<details type=\"reasoning\" done=\"false\">\\n<summary>Thinking\u2026</summary>\\n{reasoning_display_content}\\n</details>\\n'",
          "",
          "[Added Lines]",
          "1110:                             if raw:",
          "1111:                                 content = f'{content}<{block[\"tag\"]}>{block[\"content\"]}</{block[\"tag\"]}>\\n'",
          "1112:                             else:",
          "1113:                                 content = f'{content}<details type=\"reasoning\" done=\"true\" duration=\"{reasoning_duration}\">\\n<summary>Thought for {reasoning_duration} seconds</summary>\\n{reasoning_display_content}\\n</details>\\n'",
          "1115:                             if raw:",
          "1116:                                 content = f'{content}<{block[\"tag\"]}>{block[\"content\"]}</{block[\"tag\"]}>\\n'",
          "1117:                             else:",
          "1118:                                 content = f'{content}<details type=\"reasoning\" done=\"false\">\\n<summary>Thinking\u2026</summary>\\n{reasoning_display_content}\\n</details>\\n'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1124:                             else:",
          "1125:                                 content = f'{content}<details type=\"code_interpreter\" done=\"true\" output=\"{output}\">\\n<summary>Analyzed</summary>\\n```{lang}\\n{block[\"content\"]}\\n```\\n</details>\\n'",
          "1126:                         else:",
          "1129:                     else:",
          "1130:                         block_content = str(block[\"content\"]).strip()",
          "",
          "[Removed Lines]",
          "1127:                             content = f'{content}<details type=\"code_interpreter\" done=\"false\">\\n<summary>Analyzing...</summary>\\n```{lang}\\n{block[\"content\"]}\\n```\\n</details>\\n'",
          "",
          "[Added Lines]",
          "1133:                             if raw:",
          "1134:                                 content = f'{content}<code_interpreter type=\"code\" lang=\"{lang}\">\\n{block[\"content\"]}\\n</code_interpreter>\\n'",
          "1135:                             else:",
          "1136:                                 content = f'{content}<details type=\"code_interpreter\" done=\"false\">\\n<summary>Analyzing...</summary>\\n```{lang}\\n{block[\"content\"]}\\n```\\n</details>\\n'",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5627d422608417a039062ed3d6db50ee08e7547",
      "candidate_info": {
        "commit_hash": "a5627d422608417a039062ed3d6db50ee08e7547",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/a5627d422608417a039062ed3d6db50ee08e7547",
        "files": [
          "backend/open_webui/models/messages.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/models/messages.py||backend/open_webui/models/messages.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/models/messages.py||backend/open_webui/models/messages.py": [
          "File: backend/open_webui/models/messages.py -> backend/open_webui/models/messages.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:             # Delete all reactions to this message",
          "271:             db.query(MessageReaction).filter_by(message_id=id).delete()",
          "283:             db.commit()",
          "284:             return True",
          "",
          "[Removed Lines]",
          "273:             # List all replies to this message",
          "274:             replies = db.query(Message).filter_by(parent_id=id).all()",
          "276:             # Delete all reactions to each reply",
          "277:             for reply in replies:",
          "278:                 db.query(MessageReaction).filter_by(message_id=reply.id).delete()",
          "280:             # Delete all replies to this message",
          "281:             db.query(Message).filter_by(parent_id=id).delete()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}