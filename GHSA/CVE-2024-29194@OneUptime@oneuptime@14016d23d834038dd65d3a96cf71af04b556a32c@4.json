{
  "cve_id": "CVE-2024-29194",
  "cve_desc": "OneUptime is a solution for monitoring and managing online services. The vulnerability lies in the improper validation of client-side stored data within the web application. Specifically, the is_master_admin key, stored in the local storage of the browser, can be manipulated by an attacker. By changing this key from false to true, the application grants administrative privileges to the user, without proper server-side validation.  This has been patched in 7.0.1815.",
  "repo": "OneUptime/oneuptime",
  "patch_hash": "14016d23d834038dd65d3a96cf71af04b556a32c",
  "patch_info": {
    "commit_hash": "14016d23d834038dd65d3a96cf71af04b556a32c",
    "repo": "OneUptime/oneuptime",
    "commit_url": "https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c",
    "files": [
      "CommonServer/Types/Database/ModelPermission.ts",
      "Model/Models/BillingInvoice.ts",
      "Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "Model/Models/OnCallDutyPolicyExecutionLog.ts",
      "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "Model/Models/OnCallDutyPolicySchedule.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayer.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts",
      "Model/Models/User.ts"
    ],
    "message": "Add deletedByUserId property to several models",
    "before_after_code_files": [
      "CommonServer/Types/Database/ModelPermission.ts||CommonServer/Types/Database/ModelPermission.ts",
      "Model/Models/BillingInvoice.ts||Model/Models/BillingInvoice.ts",
      "Model/Models/OnCallDutyPolicyEscalationRule.ts||Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts||Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts||Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts||Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "Model/Models/OnCallDutyPolicyExecutionLog.ts||Model/Models/OnCallDutyPolicyExecutionLog.ts",
      "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts||Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "Model/Models/OnCallDutyPolicySchedule.ts||Model/Models/OnCallDutyPolicySchedule.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayer.ts||Model/Models/OnCallDutyPolicyScheduleLayer.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts||Model/Models/OnCallDutyPolicyScheduleLayerUser.ts",
      "Model/Models/User.ts||Model/Models/User.ts"
    ]
  },
  "patch_diff": {
    "CommonServer/Types/Database/ModelPermission.ts||CommonServer/Types/Database/ModelPermission.ts": [
      "File: CommonServer/Types/Database/ModelPermission.ts -> CommonServer/Types/Database/ModelPermission.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: import ColumnBillingAccessControl from 'Common/Types/BaseDatabase/ColumnBillingAccessControl';",
      "40: import DatabaseCommonInteractionPropsUtil from 'Common/Types/BaseDatabase/DatabaseCommonInteractionPropsUtil';",
      "41: import Includes from 'Common/Types/BaseDatabase/Includes';",
      "43: export interface CheckReadPermissionType<TBaseModel extends BaseModel> {",
      "44:     query: Query<TBaseModel>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: import UserModel from 'Common/Models/UserModel';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:                 props",
      "296:             );",
      "298:             if (!props.isMultiTenantRequest) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "301:             query = await this.addUserScopeToQuery(modelType, query, props);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "854:         return query;",
      "855:     }",
      "857:     private static async addTenantScopeToQuery<TBaseModel extends BaseModel>(",
      "858:         modelType: { new (): TBaseModel },",
      "859:         query: Query<TBaseModel>,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "862:     private static async addUserScopeToQuery<TBaseModel extends BaseModel>(",
      "863:         modelType: { new (): TBaseModel },",
      "864:         query: Query<TBaseModel>,",
      "865:         props: DatabaseCommonInteractionProps",
      "866:     ): Promise<Query<TBaseModel>> {",
      "867:         const model: BaseModel = new modelType();",
      "869:         if (model instanceof UserModel) {",
      "870:             if (props.userId) {",
      "871:                 (query as any)['_id'] = props.userId;",
      "872:             } else if (!props.isRoot && !props.isMasterAdmin) {",
      "873:                 throw new NotAuthorizedException(",
      "874:                     `You do not have permissions to query on - ${model.singularName}.`",
      "875:                 );",
      "876:             }",
      "877:         }",
      "879:         return query;",
      "880:     }",
      "",
      "---------------"
    ],
    "Model/Models/BillingInvoice.ts||Model/Models/BillingInvoice.ts": [
      "File: Model/Models/BillingInvoice.ts -> Model/Models/BillingInvoice.ts"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRule.ts||Model/Models/OnCallDutyPolicyEscalationRule.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRule.ts -> Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "355:     @JoinColumn({ name: 'deletedByUserId' })",
      "356:     public deletedByUser?: User = undefined;",
      "358:     @ColumnAccessControl({",
      "359:         create: [",
      "360:             Permission.ProjectOwner,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "358:     @ColumnAccessControl({",
      "359:         create: [],",
      "360:         read: [],",
      "361:         update: [],",
      "362:     })",
      "363:     @TableColumn({",
      "364:         type: TableColumnType.ObjectID,",
      "365:         title: 'Deleted by User ID',",
      "366:         description:",
      "367:             'User ID who deleted this object (if this object was deleted by a User)',",
      "368:     })",
      "369:     @Column({",
      "370:         type: ColumnType.ObjectID,",
      "371:         nullable: true,",
      "372:         transformer: ObjectID.getDatabaseTransformer(),",
      "373:     })",
      "374:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts||Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts -> Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "420:     )",
      "421:     @JoinColumn({ name: 'deletedByUserId' })",
      "422:     public deletedByUser?: User = undefined;",
      "423: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "425:     @ColumnAccessControl({",
      "426:         create: [],",
      "427:         read: [],",
      "428:         update: [],",
      "429:     })",
      "430:     @TableColumn({",
      "431:         type: TableColumnType.ObjectID,",
      "432:         title: 'Deleted by User ID',",
      "433:         description:",
      "434:             'User ID who deleted this object (if this object was deleted by a User)',",
      "435:     })",
      "436:     @Column({",
      "437:         type: ColumnType.ObjectID,",
      "438:         nullable: true,",
      "439:         transformer: ObjectID.getDatabaseTransformer(),",
      "440:     })",
      "441:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts||Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts -> Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "418:     )",
      "419:     @JoinColumn({ name: 'deletedByUserId' })",
      "420:     public deletedByUser?: User = undefined;",
      "421: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "422:     @ColumnAccessControl({",
      "423:         create: [],",
      "424:         read: [],",
      "425:         update: [],",
      "426:     })",
      "427:     @TableColumn({",
      "428:         type: TableColumnType.ObjectID,",
      "429:         title: 'Deleted by User ID',",
      "430:         description:",
      "431:             'User ID who deleted this object (if this object was deleted by a User)',",
      "432:     })",
      "433:     @Column({",
      "434:         type: ColumnType.ObjectID,",
      "435:         nullable: true,",
      "436:         transformer: ObjectID.getDatabaseTransformer(),",
      "437:     })",
      "438:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts||Model/Models/OnCallDutyPolicyEscalationRuleUser.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleUser.ts -> Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "417:     )",
      "418:     @JoinColumn({ name: 'deletedByUserId' })",
      "419:     public deletedByUser?: User = undefined;",
      "420: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "421:     @ColumnAccessControl({",
      "422:         create: [],",
      "423:         read: [],",
      "424:         update: [],",
      "425:     })",
      "426:     @TableColumn({",
      "427:         type: TableColumnType.ObjectID,",
      "428:         title: 'Deleted by User ID',",
      "429:         description:",
      "430:             'User ID who deleted this object (if this object was deleted by a User)',",
      "431:     })",
      "432:     @Column({",
      "433:         type: ColumnType.ObjectID,",
      "434:         nullable: true,",
      "435:         transformer: ObjectID.getDatabaseTransformer(),",
      "436:     })",
      "437:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyExecutionLog.ts||Model/Models/OnCallDutyPolicyExecutionLog.ts": [
      "File: Model/Models/OnCallDutyPolicyExecutionLog.ts -> Model/Models/OnCallDutyPolicyExecutionLog.ts"
    ],
    "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts||Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts": [
      "File: Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts -> Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "708:         unique: false,",
      "709:     })",
      "710:     public acknowledgedAt?: Date = undefined;",
      "711: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "712:     @ColumnAccessControl({",
      "713:         create: [],",
      "714:         read: [],",
      "715:         update: [],",
      "716:     })",
      "717:     @TableColumn({",
      "718:         type: TableColumnType.ObjectID,",
      "719:         title: 'Deleted by User ID',",
      "720:         description:",
      "721:             'User ID who deleted this object (if this object was deleted by a User)',",
      "722:     })",
      "723:     @Column({",
      "724:         type: ColumnType.ObjectID,",
      "725:         nullable: true,",
      "726:         transformer: ObjectID.getDatabaseTransformer(),",
      "727:     })",
      "728:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicySchedule.ts||Model/Models/OnCallDutyPolicySchedule.ts": [
      "File: Model/Models/OnCallDutyPolicySchedule.ts -> Model/Models/OnCallDutyPolicySchedule.ts"
    ],
    "Model/Models/OnCallDutyPolicyScheduleLayer.ts||Model/Models/OnCallDutyPolicyScheduleLayer.ts": [
      "File: Model/Models/OnCallDutyPolicyScheduleLayer.ts -> Model/Models/OnCallDutyPolicyScheduleLayer.ts"
    ],
    "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts||Model/Models/OnCallDutyPolicyScheduleLayerUser.ts": [
      "File: Model/Models/OnCallDutyPolicyScheduleLayerUser.ts -> Model/Models/OnCallDutyPolicyScheduleLayerUser.ts"
    ],
    "Model/Models/User.ts||Model/Models/User.ts": [
      "File: Model/Models/User.ts -> Model/Models/User.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: @AllowAccessIfSubscriptionIsUnpaid()",
      "33: @TableAccessControl({",
      "34:     create: [Permission.Public],",
      "40:     delete: [Permission.CurrentUser],",
      "41:     update: [Permission.CurrentUser],",
      "42: })",
      "",
      "[Removed Lines]",
      "35:     read: [",
      "36:         Permission.CurrentUser,",
      "37:         Permission.ProjectAdmin,",
      "38:         Permission.ProjectOwner,",
      "39:     ],",
      "",
      "[Added Lines]",
      "35:     read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: class User extends UserModel {",
      "57:     @ColumnAccessControl({",
      "58:         create: [Permission.Public],",
      "64:         update: [Permission.CurrentUser],",
      "65:     })",
      "66:     @TableColumn({ type: TableColumnType.Name, canReadOnRelationQuery: true })",
      "",
      "[Removed Lines]",
      "59:         read: [",
      "60:             Permission.CurrentUser,",
      "61:             Permission.ProjectAdmin,",
      "62:             Permission.ProjectOwner,",
      "63:         ],",
      "",
      "[Added Lines]",
      "55:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76:     @ColumnAccessControl({",
      "77:         create: [Permission.Public],",
      "84:         update: [Permission.CurrentUser],",
      "85:     })",
      "",
      "[Removed Lines]",
      "78:         read: [",
      "79:             Permission.CurrentUser,",
      "80:             Permission.ProjectAdmin,",
      "81:             Permission.ProjectOwner,",
      "82:         ],",
      "",
      "[Added Lines]",
      "70:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     @ColumnAccessControl({",
      "249:         create: [],",
      "256:         update: [Permission.CurrentUser],",
      "257:     })",
      "",
      "[Removed Lines]",
      "250:         read: [",
      "251:             Permission.CurrentUser,",
      "252:             Permission.ProjectAdmin,",
      "253:             Permission.ProjectOwner,",
      "254:         ],",
      "",
      "[Added Lines]",
      "238:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "277:     @ColumnAccessControl({",
      "278:         create: [],",
      "285:         update: [Permission.CurrentUser],",
      "286:     })",
      "",
      "[Removed Lines]",
      "279:         read: [",
      "280:             Permission.CurrentUser,",
      "281:             Permission.ProjectAdmin,",
      "282:             Permission.ProjectOwner,",
      "283:         ],",
      "",
      "[Added Lines]",
      "263:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "298:     @ColumnAccessControl({",
      "299:         create: [],",
      "306:         update: [Permission.CurrentUser],",
      "307:     })",
      "",
      "[Removed Lines]",
      "300:         read: [",
      "301:             Permission.CurrentUser,",
      "302:             Permission.ProjectAdmin,",
      "303:             Permission.ProjectOwner,",
      "304:         ],",
      "",
      "[Added Lines]",
      "280:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "309:         isDefaultValueColumn: true,",
      "310:         required: true,",
      "311:         type: TableColumnType.Boolean,",
      "312:     })",
      "313:     @Column({",
      "314:         type: ColumnType.Boolean,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "288:         canReadOnRelationQuery: true,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "425:     @ColumnAccessControl({",
      "426:         create: [],",
      "433:         update: [Permission.CurrentUser],",
      "434:     })",
      "",
      "[Removed Lines]",
      "427:         read: [",
      "428:             Permission.CurrentUser,",
      "429:             Permission.ProjectAdmin,",
      "430:             Permission.ProjectOwner,",
      "431:         ],",
      "",
      "[Added Lines]",
      "404:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "544:     @ColumnAccessControl({",
      "545:         create: [],",
      "552:         update: [Permission.CurrentUser],",
      "553:     })",
      "",
      "[Removed Lines]",
      "546:         read: [",
      "547:             Permission.CurrentUser,",
      "548:             Permission.ProjectAdmin,",
      "549:             Permission.ProjectOwner,",
      "550:         ],",
      "",
      "[Added Lines]",
      "519:         read: [Permission.CurrentUser],",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a3f8fca1a18149afb511d58599236d0e22ce9c2",
      "candidate_info": {
        "commit_hash": "1a3f8fca1a18149afb511d58599236d0e22ce9c2",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/1a3f8fca1a18149afb511d58599236d0e22ce9c2",
        "files": [
          "Common/Types/Monitor/CriteriaFilter.ts",
          "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ],
        "message": "Add EvaluateOverTimeType and EvaluateOverTimeOptions to CriteriaFilter",
        "before_after_code_files": [
          "Common/Types/Monitor/CriteriaFilter.ts||Common/Types/Monitor/CriteriaFilter.ts",
          "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx||Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Common/Types/Monitor/CriteriaFilter.ts||Common/Types/Monitor/CriteriaFilter.ts": [
          "File: Common/Types/Monitor/CriteriaFilter.ts -> Common/Types/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:     diskPath?: string | undefined;",
          "20: }",
          "22: export interface CriteriaFilter {",
          "23:     checkOn: CheckOn;",
          "24:     serverMonitorOptions?: ServerMonitorOptions | undefined;",
          "25:     filterType: FilterType | undefined;",
          "26:     value: string | number | undefined;",
          "27: }",
          "29: export enum FilterType {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: export enum EvaluateOverTimeType {",
          "23:     Average = 'Average',",
          "24:     Sum = 'Sum',",
          "25:     Maximum = 'Maximum',",
          "26:     Munimum = 'Minimum',",
          "27:     All = 'All',",
          "28:     Any = 'Any',",
          "29: }",
          "31: export enum EvaluateOverTimeMinutes {",
          "32:     TwoMinutes = 2,",
          "33:     ThreeMinutes = 3,",
          "34:     FiveMinutes = 5,",
          "35:     TenMinutes = 10,",
          "36:     FifteenMinutes = 15,",
          "37:     TwentyMinutes = 20,",
          "38:     ThirtyMinutes = 30,",
          "39:     FortyFiveMinutes = 45,",
          "40:     SixtyMinutes = 60,",
          "41: }",
          "44: export interface EvaluateOverTimeOptions {",
          "45:     timeValueInMinutes: number | undefined;",
          "46:     evaluateOverTimeType: EvaluateOverTimeType | undefined;",
          "47: }",
          "54:     eveluateOverTime?: boolean | undefined;",
          "55:     evaluateOverTimeOptions?: EvaluateOverTimeOptions | undefined;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:     All = 'All',",
          "51:     Any = 'Any',",
          "52: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: export class CriteriaFilterUtil {",
          "85:     public static isEvaluateOverTimeFilter(checkOn: CheckOn): boolean {",
          "86:         return checkOn === CheckOn.ResponseStatusCode || checkOn === CheckOn.ResponseTime || checkOn === CheckOn.DiskUsagePercent || checkOn === CheckOn.CPUUsagePercent || checkOn === CheckOn.MemoryUsagePercent;",
          "87:     }",
          "88: }",
          "",
          "---------------"
        ],
        "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx||Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx": [
          "File: Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx -> Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import {",
          "3:     CheckOn,",
          "4:     CriteriaFilter,",
          "5:     FilterType,",
          "6: } from 'Common/Types/Monitor/CriteriaFilter';",
          "7: import MonitorType from 'Common/Types/Monitor/MonitorType';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5:     CriteriaFilterUtil,",
          "6:     EvaluateOverTimeOptions,",
          "7:     EvaluateOverTimeType,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: import React, { FunctionComponent, ReactElement, useEffect } from 'react';",
          "20: import FieldLabelElement from 'CommonUI/src/Components/Detail/FieldLabel';",
          "21: import Route from 'Common/Types/API/Route';",
          "23: export interface ComponentProps {",
          "24:     initialValue: CriteriaFilter | undefined;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: import CheckboxElement from 'CommonUI/src/Components/Checkbox/Checkbox';",
          "26: import CriteriaFilterUiUtil from '../../../Utils/Form/Monitor/CriteriaFilter';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "43:     const [isLoading, setIsLoading] = React.useState<boolean>(true);",
          "103:         setIsLoading(false);",
          "104:     }, [props.monitorType]);",
          "",
          "[Removed Lines]",
          "45:     useEffect(() => {",
          "46:         let options: Array<DropdownOption> =",
          "47:             DropdownUtil.getDropdownOptionsFromEnum(CheckOn);",
          "49:         if (",
          "50:             props.monitorType === MonitorType.Ping ||",
          "51:             props.monitorType === MonitorType.IP ||",
          "52:             props.monitorType === MonitorType.Port",
          "53:         ) {",
          "54:             options = options.filter((i: DropdownOption) => {",
          "55:                 return (",
          "56:                     i.value === CheckOn.IsOnline ||",
          "57:                     i.value === CheckOn.ResponseTime",
          "58:                 );",
          "59:             });",
          "60:         }",
          "62:         if (props.monitorType === MonitorType.Server) {",
          "63:             options = options.filter((i: DropdownOption) => {",
          "64:                 return (",
          "65:                     i.value === CheckOn.IsOnline ||",
          "66:                     i.value === CheckOn.DiskUsagePercent ||",
          "67:                     i.value === CheckOn.CPUUsagePercent ||",
          "68:                     i.value === CheckOn.MemoryUsagePercent",
          "69:                 );",
          "70:             });",
          "71:         }",
          "73:         if (props.monitorType === MonitorType.IncomingRequest) {",
          "74:             options = options.filter((i: DropdownOption) => {",
          "75:                 return (",
          "76:                     i.value === CheckOn.IncomingRequest ||",
          "77:                     i.value === CheckOn.RequestBody ||",
          "78:                     i.value === CheckOn.RequestHeader ||",
          "79:                     i.value === CheckOn.RequestHeaderValue ||",
          "80:                     i.value === CheckOn.JavaScriptExpression",
          "81:                 );",
          "82:             });",
          "83:         }",
          "85:         if (",
          "86:             props.monitorType === MonitorType.Website ||",
          "87:             props.monitorType === MonitorType.API",
          "88:         ) {",
          "89:             options = options.filter((i: DropdownOption) => {",
          "90:                 return (",
          "91:                     i.value === CheckOn.IsOnline ||",
          "92:                     i.value === CheckOn.ResponseTime ||",
          "93:                     i.value === CheckOn.ResponseBody ||",
          "94:                     i.value === CheckOn.ResponseHeader ||",
          "95:                     i.value === CheckOn.ResponseHeaderValue ||",
          "96:                     i.value === CheckOn.ResponseStatusCode ||",
          "97:                     i.value === CheckOn.JavaScriptExpression",
          "98:                 );",
          "99:             });",
          "100:         }",
          "102:         setCheckOnOptions(options);",
          "",
          "[Added Lines]",
          "51:     useEffect(() => {",
          "52:         setCheckOnOptions(CriteriaFilterUiUtil.getCheckOnOptionsByMonitorType(props.monitorType));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:     >([]);",
          "110:     useEffect(() => {",
          "211:     }, [criteriaFilter]);",
          "213:     useEffect(() => {",
          "",
          "[Removed Lines]",
          "111:         let options: Array<DropdownOption> =",
          "112:             DropdownUtil.getDropdownOptionsFromEnum(FilterType);",
          "114:         if (!criteriaFilter?.checkOn) {",
          "115:             setFilterTypeOptions([]);",
          "116:         }",
          "118:         if (criteriaFilter?.checkOn === CheckOn.ResponseTime) {",
          "119:             options = options.filter((i: DropdownOption) => {",
          "120:                 return (",
          "121:                     i.value === FilterType.GreaterThan ||",
          "122:                     i.value === FilterType.LessThan ||",
          "123:                     i.value === FilterType.LessThanOrEqualTo ||",
          "124:                     i.value === FilterType.GreaterThanOrEqualTo",
          "125:                 );",
          "126:             });",
          "128:             setValuePlaceholder('5000');",
          "129:         }",
          "131:         if (",
          "132:             criteriaFilter?.checkOn === CheckOn.CPUUsagePercent ||",
          "133:             criteriaFilter?.checkOn === CheckOn.DiskUsagePercent ||",
          "134:             criteriaFilter?.checkOn === CheckOn.MemoryUsagePercent",
          "135:         ) {",
          "136:             options = options.filter((i: DropdownOption) => {",
          "137:                 return (",
          "138:                     i.value === FilterType.GreaterThan ||",
          "139:                     i.value === FilterType.LessThan ||",
          "140:                     i.value === FilterType.LessThanOrEqualTo ||",
          "141:                     i.value === FilterType.GreaterThanOrEqualTo",
          "142:                 );",
          "143:             });",
          "145:             setValuePlaceholder('65');",
          "146:         }",
          "148:         if (criteriaFilter?.checkOn === CheckOn.IncomingRequest) {",
          "149:             options = options.filter((i: DropdownOption) => {",
          "150:                 return (",
          "151:                     i.value === FilterType.NotRecievedInMinutes ||",
          "152:                     i.value === FilterType.RecievedInMinutes",
          "153:                 );",
          "154:             });",
          "155:         }",
          "157:         if (criteriaFilter?.checkOn === CheckOn.IsOnline) {",
          "158:             options = options.filter((i: DropdownOption) => {",
          "159:                 return (",
          "160:                     i.value === FilterType.True || i.value === FilterType.False",
          "161:                 );",
          "162:             });",
          "163:         }",
          "165:         if (",
          "166:             criteriaFilter?.checkOn === CheckOn.ResponseBody ||",
          "167:             criteriaFilter?.checkOn === CheckOn.ResponseHeader ||",
          "168:             criteriaFilter?.checkOn === CheckOn.ResponseHeaderValue ||",
          "169:             criteriaFilter?.checkOn === CheckOn.RequestBody ||",
          "170:             criteriaFilter?.checkOn === CheckOn.RequestHeader ||",
          "171:             criteriaFilter?.checkOn === CheckOn.RequestHeaderValue",
          "172:         ) {",
          "173:             options = options.filter((i: DropdownOption) => {",
          "174:                 return (",
          "175:                     i.value === FilterType.Contains ||",
          "176:                     i.value === FilterType.NotContains",
          "177:                 );",
          "178:             });",
          "180:             setValuePlaceholder('Some Text');",
          "181:         }",
          "183:         if (criteriaFilter?.checkOn === CheckOn.JavaScriptExpression) {",
          "184:             options = options.filter((i: DropdownOption) => {",
          "185:                 return i.value === FilterType.EvaluatesToTrue;",
          "186:             });",
          "188:             if (props.monitorType === MonitorType.IncomingRequest) {",
          "189:                 setValuePlaceholder('{{requestBody.result}} === true');",
          "190:             } else {",
          "191:                 setValuePlaceholder('{{responseBody.result}} === true');",
          "192:             }",
          "193:         }",
          "195:         if (criteriaFilter?.checkOn === CheckOn.ResponseStatusCode) {",
          "196:             options = options.filter((i: DropdownOption) => {",
          "197:                 return (",
          "198:                     i.value === FilterType.GreaterThan ||",
          "199:                     i.value === FilterType.LessThan ||",
          "200:                     i.value === FilterType.LessThanOrEqualTo ||",
          "201:                     i.value === FilterType.GreaterThanOrEqualTo ||",
          "202:                     i.value === FilterType.EqualTo ||",
          "203:                     i.value === FilterType.NotEqualTo",
          "204:                 );",
          "205:             });",
          "207:             setValuePlaceholder('200');",
          "208:         }",
          "210:         setFilterTypeOptions(options);",
          "",
          "[Added Lines]",
          "61:         setFilterTypeOptions(criteriaFilter?.checkOn ? CriteriaFilterUiUtil.getFilterTypeOptionsByCheckOn(criteriaFilter?.checkOn) : []);",
          "62:         setValuePlaceholder( criteriaFilter?.checkOn ? CriteriaFilterUiUtil.getFilterTypePlaceholderValueByCheckOn(props.monitorType, criteriaFilter?.checkOn) : '');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "264:                         </div>",
          "265:                     )}",
          "267:                 {!criteriaFilter?.checkOn ||",
          "268:                     (criteriaFilter?.checkOn && (",
          "269:                         <div className=\"mt-1\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:                 {/** checkbox for evaluateOverTime */}",
          "121:                 {",
          "122:                     (criteriaFilter?.checkOn && CriteriaFilterUtil.isEvaluateOverTimeFilter(criteriaFilter?.checkOn)) && (",
          "123:                         <div className=\"mt-3\">",
          "125:                             <CheckboxElement",
          "126:                                 initialValue={criteriaFilter?.eveluateOverTime}",
          "127:                                 title={\"Evaluate this criteria over a period of time\"}",
          "128:                                 onChange={(value: boolean) => {",
          "129:                                     setCriteriaFilter({",
          "130:                                         ...criteriaFilter,",
          "131:                                         eveluateOverTime: value,",
          "132:                                     });",
          "133:                                 }} />",
          "134:                         </div>",
          "135:                     )}",
          "138:                 {criteriaFilter?.checkOn &&",
          "139:                     (criteriaFilter?.checkOn && CriteriaFilterUtil.isEvaluateOverTimeFilter(criteriaFilter?.checkOn)) && criteriaFilter.eveluateOverTime ? (",
          "140:                     <div className=\"mt-1\">",
          "141:                         <FieldLabelElement title=\"Evaluate\" />",
          "142:                         <Dropdown",
          "143:                             initialValue={DropdownUtil.getDropdownOptionsFromEnum(EvaluateOverTimeType).find((item: DropdownOption) => item.value === criteriaFilter?.evaluateOverTimeOptions?.evaluateOverTimeType)}",
          "144:                             options={DropdownUtil.getDropdownOptionsFromEnum(EvaluateOverTimeType)}",
          "145:                             onChange={(value: DropdownValue | Array<DropdownValue> | null) => {",
          "147:                                 const evaluateOverTimeOption: EvaluateOverTimeOptions = criteriaFilter?.evaluateOverTimeOptions ? { ...criteriaFilter?.evaluateOverTimeOptions } : {",
          "148:                                     timeValueInMinutes: 5,",
          "149:                                     evaluateOverTimeType: EvaluateOverTimeType.All,",
          "150:                                 };",
          "152:                                 setCriteriaFilter({",
          "153:                                     ...criteriaFilter,",
          "154:                                     eveluateOverTime: true,",
          "155:                                     evaluateOverTimeOptions: {",
          "156:                                         ...evaluateOverTimeOption,",
          "157:                                         evaluateOverTimeType: value?.toString() as EvaluateOverTimeType,",
          "158:                                     },",
          "159:                                 });",
          "161:                             }}",
          "162:                         />",
          "163:                     </div>",
          "164:                 ) : (",
          "165:                     <></>",
          "166:                 )}",
          "169:                 {criteriaFilter?.checkOn &&",
          "170:                     (criteriaFilter?.checkOn && CriteriaFilterUtil.isEvaluateOverTimeFilter(criteriaFilter?.checkOn)) && criteriaFilter.eveluateOverTime ? (",
          "171:                     <div className=\"mt-1\">",
          "172:                         <FieldLabelElement title=\"For the last (in minutes)\" />",
          "173:                         <Dropdown",
          "174:                             initialValue={CriteriaFilterUiUtil.getEvaluateOverTimeMinutesOptions().find((item: DropdownOption) => item.value === criteriaFilter?.evaluateOverTimeOptions?.timeValueInMinutes)}",
          "175:                             options={CriteriaFilterUiUtil.getEvaluateOverTimeMinutesOptions()}",
          "176:                             onChange={(value: DropdownValue | Array<DropdownValue> | null) => {",
          "178:                                 const evaluateOverTimeOption: EvaluateOverTimeOptions = criteriaFilter?.evaluateOverTimeOptions ? { ...criteriaFilter?.evaluateOverTimeOptions } : {",
          "179:                                     timeValueInMinutes: 5,",
          "180:                                     evaluateOverTimeType: EvaluateOverTimeType.All,",
          "181:                                 };",
          "183:                                 setCriteriaFilter({",
          "184:                                     ...criteriaFilter,",
          "185:                                     eveluateOverTime: true,",
          "186:                                     evaluateOverTimeOptions: {",
          "187:                                         ...evaluateOverTimeOption,",
          "188:                                         timeValueInMinutes: value as number,",
          "189:                                     },",
          "190:                                 });",
          "192:                             }}",
          "193:                         />",
          "194:                     </div>",
          "195:                 ) : (",
          "196:                     <></>",
          "197:                 )}",
          "",
          "---------------"
        ],
        "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts": [
          "File: Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts -> Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import DropdownUtil from \"CommonUI/src/Utils/Dropdown\";",
          "2: import MonitorType from \"Common/Types/Monitor/MonitorType\";",
          "3: import { DropdownOption } from \"CommonUI/src/Components/Dropdown/Dropdown\";",
          "4: import { CheckOn, EvaluateOverTimeMinutes, FilterType } from \"Common/Types/Monitor/CriteriaFilter\";",
          "6: export default class CriteriaFilterUtil {",
          "9:     public static  getEvaluateOverTimeMinutesOptions(): Array<DropdownOption> {",
          "10:         const keys = Object.keys(EvaluateOverTimeMinutes)",
          "11:         return keys.map((key: string) => {",
          "12:             return {",
          "13:                 label: `${EvaluateOverTimeMinutes[key as any]} Minutes`,",
          "14:                 value: EvaluateOverTimeMinutes[key as any]!,",
          "15:             };",
          "16:         });",
          "17:     }",
          "19:     public static getCheckOnOptionsByMonitorType(monitorType: MonitorType): Array<DropdownOption> {",
          "20:         let options: Array<DropdownOption> =",
          "21:             DropdownUtil.getDropdownOptionsFromEnum(CheckOn);",
          "23:         if (",
          "24:             monitorType === MonitorType.Ping ||",
          "25:             monitorType === MonitorType.IP ||",
          "26:             monitorType === MonitorType.Port",
          "27:         ) {",
          "28:             options = options.filter((i: DropdownOption) => {",
          "29:                 return (",
          "30:                     i.value === CheckOn.IsOnline ||",
          "31:                     i.value === CheckOn.ResponseTime",
          "32:                 );",
          "33:             });",
          "34:         }",
          "36:         if (monitorType === MonitorType.Server) {",
          "37:             options = options.filter((i: DropdownOption) => {",
          "38:                 return (",
          "39:                     i.value === CheckOn.IsOnline ||",
          "40:                     i.value === CheckOn.DiskUsagePercent ||",
          "41:                     i.value === CheckOn.CPUUsagePercent ||",
          "42:                     i.value === CheckOn.MemoryUsagePercent",
          "43:                 );",
          "44:             });",
          "45:         }",
          "47:         if (monitorType === MonitorType.IncomingRequest) {",
          "48:             options = options.filter((i: DropdownOption) => {",
          "49:                 return (",
          "50:                     i.value === CheckOn.IncomingRequest ||",
          "51:                     i.value === CheckOn.RequestBody ||",
          "52:                     i.value === CheckOn.RequestHeader ||",
          "53:                     i.value === CheckOn.RequestHeaderValue ||",
          "54:                     i.value === CheckOn.JavaScriptExpression",
          "55:                 );",
          "56:             });",
          "57:         }",
          "59:         if (",
          "60:             monitorType === MonitorType.Website ||",
          "61:             monitorType === MonitorType.API",
          "62:         ) {",
          "63:             options = options.filter((i: DropdownOption) => {",
          "64:                 return (",
          "65:                     i.value === CheckOn.IsOnline ||",
          "66:                     i.value === CheckOn.ResponseTime ||",
          "67:                     i.value === CheckOn.ResponseBody ||",
          "68:                     i.value === CheckOn.ResponseHeader ||",
          "69:                     i.value === CheckOn.ResponseHeaderValue ||",
          "70:                     i.value === CheckOn.ResponseStatusCode ||",
          "71:                     i.value === CheckOn.JavaScriptExpression",
          "72:                 );",
          "73:             });",
          "74:         }",
          "76:         return options;",
          "77:     }",
          "80:     public static getFilterTypeOptionsByCheckOn(checkOn: CheckOn): Array<DropdownOption> {",
          "81:         let options: Array<DropdownOption> =",
          "82:             DropdownUtil.getDropdownOptionsFromEnum(FilterType);",
          "84:         if (!checkOn) {",
          "85:             return [];",
          "86:         }",
          "88:         if (checkOn === CheckOn.ResponseTime) {",
          "89:             options = options.filter((i: DropdownOption) => {",
          "90:                 return (",
          "91:                     i.value === FilterType.GreaterThan ||",
          "92:                     i.value === FilterType.LessThan ||",
          "93:                     i.value === FilterType.LessThanOrEqualTo ||",
          "94:                     i.value === FilterType.GreaterThanOrEqualTo",
          "95:                 );",
          "96:             });",
          "97:         }",
          "99:         if (",
          "100:             checkOn === CheckOn.CPUUsagePercent ||",
          "101:             checkOn === CheckOn.DiskUsagePercent ||",
          "102:             checkOn === CheckOn.MemoryUsagePercent",
          "103:         ) {",
          "104:             options = options.filter((i: DropdownOption) => {",
          "105:                 return (",
          "106:                     i.value === FilterType.GreaterThan ||",
          "107:                     i.value === FilterType.LessThan ||",
          "108:                     i.value === FilterType.LessThanOrEqualTo ||",
          "109:                     i.value === FilterType.GreaterThanOrEqualTo",
          "110:                 );",
          "111:             });",
          "112:         }",
          "114:         if (checkOn === CheckOn.IncomingRequest) {",
          "115:             options = options.filter((i: DropdownOption) => {",
          "116:                 return (",
          "117:                     i.value === FilterType.NotRecievedInMinutes ||",
          "118:                     i.value === FilterType.RecievedInMinutes",
          "119:                 );",
          "120:             });",
          "121:         }",
          "123:         if (checkOn === CheckOn.IsOnline) {",
          "124:             options = options.filter((i: DropdownOption) => {",
          "125:                 return (",
          "126:                     i.value === FilterType.True || i.value === FilterType.False",
          "127:                 );",
          "128:             });",
          "129:         }",
          "131:         if (",
          "132:             checkOn === CheckOn.ResponseBody ||",
          "133:             checkOn === CheckOn.ResponseHeader ||",
          "134:             checkOn === CheckOn.ResponseHeaderValue ||",
          "135:             checkOn === CheckOn.RequestBody ||",
          "136:             checkOn === CheckOn.RequestHeader ||",
          "137:             checkOn === CheckOn.RequestHeaderValue",
          "138:         ) {",
          "139:             options = options.filter((i: DropdownOption) => {",
          "140:                 return (",
          "141:                     i.value === FilterType.Contains ||",
          "142:                     i.value === FilterType.NotContains",
          "143:                 );",
          "144:             });",
          "145:         }",
          "147:         if (checkOn === CheckOn.JavaScriptExpression) {",
          "148:             options = options.filter((i: DropdownOption) => {",
          "149:                 return i.value === FilterType.EvaluatesToTrue;",
          "150:             });",
          "151:         }",
          "153:         if (checkOn === CheckOn.ResponseStatusCode) {",
          "154:             options = options.filter((i: DropdownOption) => {",
          "155:                 return (",
          "156:                     i.value === FilterType.GreaterThan ||",
          "157:                     i.value === FilterType.LessThan ||",
          "158:                     i.value === FilterType.LessThanOrEqualTo ||",
          "159:                     i.value === FilterType.GreaterThanOrEqualTo ||",
          "160:                     i.value === FilterType.EqualTo ||",
          "161:                     i.value === FilterType.NotEqualTo",
          "162:                 );",
          "163:             });",
          "164:         }",
          "166:         return  options;",
          "167:     }",
          "169:     public static getFilterTypePlaceholderValueByCheckOn(monitorType: MonitorType, checkOn: CheckOn): string {",
          "170:         if(!checkOn) {",
          "171:             return '';",
          "172:         }",
          "174:         if (checkOn === CheckOn.ResponseTime) {",
          "175:             return '5000';",
          "176:         }",
          "178:         if (",
          "179:             checkOn === CheckOn.CPUUsagePercent ||",
          "180:             checkOn === CheckOn.DiskUsagePercent ||",
          "181:             checkOn === CheckOn.MemoryUsagePercent",
          "182:         ) {",
          "183:             return '65';",
          "184:         }",
          "186:         if (checkOn === CheckOn.IncomingRequest) {",
          "187:             return '5';",
          "188:         }",
          "190:         if ( checkOn === CheckOn.ResponseBody ||",
          "191:             checkOn === CheckOn.ResponseHeader ||",
          "192:             checkOn === CheckOn.ResponseHeaderValue ||",
          "193:             checkOn === CheckOn.RequestBody ||",
          "194:             checkOn === CheckOn.RequestHeader ||",
          "195:             checkOn === CheckOn.RequestHeaderValue) {",
          "196:             return 'Some Text';",
          "197:         }",
          "199:         if (checkOn === CheckOn.JavaScriptExpression) {",
          "200:             if (monitorType === MonitorType.IncomingRequest) {",
          "201:                 return '{{requestBody.result}} === true';",
          "202:             } else {",
          "203:                return '{{responseBody.result}} === true';",
          "204:             }",
          "205:         }",
          "207:         if (checkOn === CheckOn.ResponseStatusCode) {",
          "208:             return '200';",
          "209:         }",
          "211:         return '';",
          "212:     }",
          "213: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ebeef5397d4b5d226106fb9f43ac424ded7296e",
      "candidate_info": {
        "commit_hash": "6ebeef5397d4b5d226106fb9f43ac424ded7296e",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/6ebeef5397d4b5d226106fb9f43ac424ded7296e",
        "files": [
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ],
        "message": "Refactor CriteriaFilterUtil class to improve readability and add support for evaluating percentage values over time",
        "before_after_code_files": [
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts": [
          "File: Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts -> Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     ): string {",
          "30:         let text: string = 'Check if ';",
          "33:         if (",
          "34:             criteriaFilter?.eveluateOverTime &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:         const isPercentage: boolean = criteriaFilter?.checkOn === CheckOn.CPUUsagePercent || criteriaFilter?.checkOn === CheckOn.DiskUsagePercent || criteriaFilter?.checkOn === CheckOn.MemoryUsagePercent;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "39:                 EvaluateOverTimeType.AllValues",
          "40:             ) {",
          "42:             } else if (",
          "43:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "44:                 EvaluateOverTimeType.AnyValue",
          "45:             ) {",
          "47:             } else if (",
          "48:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "49:                 EvaluateOverTimeType.Average",
          "50:             ) {",
          "52:             } else if (",
          "53:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "54:                 EvaluateOverTimeType.MaximumValue",
          "55:             ) {",
          "57:             } else if (",
          "58:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "59:                 EvaluateOverTimeType.MunimumValue",
          "60:             ) {",
          "62:             } else if (",
          "63:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "64:                 EvaluateOverTimeType.Sum",
          "65:             ) {",
          "67:             }",
          "68:         }",
          "70:         if (criteriaFilter?.checkOn === CheckOn.JavaScriptExpression) {",
          "",
          "[Removed Lines]",
          "41:                 text += 'all values ';",
          "46:                 text += 'any value ';",
          "51:                 text += 'average ';",
          "56:                 text += 'maximum value ';",
          "61:                 text += 'minimum value ';",
          "66:                 text += 'sum ';",
          "",
          "[Added Lines]",
          "45:                 text += `all ${isPercentage ? 'percentage ' : ''}values `;",
          "50:                 text += `any ${isPercentage ? 'percentage ' : ''}value `;",
          "55:                 text += `average ${isPercentage ? 'percentage ' : ''}value`;",
          "60:                 text += `maximum ${isPercentage ? 'percentage ' : ''}value `;",
          "65:                 text += `minimum ${isPercentage ? 'percentage ' : ''}value `;",
          "70:                 text += `sum of all ${isPercentage ? 'percentage ' : ''}values `;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:                     ' ';",
          "89:             }",
          "91:             if (criteriaFilter?.filterType) {",
          "92:                 if (",
          "93:                     criteriaFilter?.filterType",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:             if (",
          "100:                 criteriaFilter?.eveluateOverTime &&",
          "101:                 criteriaFilter.evaluateOverTimeOptions?.timeValueInMinutes",
          "102:             ) {",
          "103:                 text +=",
          "104:                     'in the past ' +",
          "105:                     criteriaFilter.evaluateOverTimeOptions?.timeValueInMinutes +",
          "106:                     ' minutes is ';",
          "107:             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "105:                 }",
          "106:             }",
          "108:             if (criteriaFilter?.value !== undefined) {",
          "109:                 text += criteriaFilter?.value.toString() + ' ';",
          "110:             }",
          "122:         }",
          "124:         if (filterCondition === FilterCondition.All) {",
          "",
          "[Removed Lines]",
          "113:             if (",
          "114:                 criteriaFilter?.eveluateOverTime &&",
          "115:                 criteriaFilter.evaluateOverTimeOptions?.timeValueInMinutes",
          "116:             ) {",
          "117:                 text +=",
          "118:                     'over ' +",
          "119:                     criteriaFilter.evaluateOverTimeOptions?.timeValueInMinutes +",
          "120:                     ' minutes ';",
          "121:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56d2d348fb288c0d6f0534f8ecb4b99962630769",
      "candidate_info": {
        "commit_hash": "56d2d348fb288c0d6f0534f8ecb4b99962630769",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/56d2d348fb288c0d6f0534f8ecb4b99962630769",
        "files": [
          "Common/Types/Monitor/CriteriaFilter.ts",
          "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "Dashboard/src/Components/Monitor/MonitorSteps/CriteriaFilter.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ],
        "message": "Update EvaluateOverTimeType enum values",
        "before_after_code_files": [
          "Common/Types/Monitor/CriteriaFilter.ts||Common/Types/Monitor/CriteriaFilter.ts",
          "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx||Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "Dashboard/src/Components/Monitor/MonitorSteps/CriteriaFilter.tsx||Dashboard/src/Components/Monitor/MonitorSteps/CriteriaFilter.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Common/Types/Monitor/CriteriaFilter.ts||Common/Types/Monitor/CriteriaFilter.ts": [
          "File: Common/Types/Monitor/CriteriaFilter.ts -> Common/Types/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: export enum EvaluateOverTimeType {",
          "23:     Average = 'Average',",
          "24:     Sum = 'Sum',",
          "29: }",
          "31: export enum EvaluateOverTimeMinutes {",
          "",
          "[Removed Lines]",
          "25:     Maximum = 'Maximum',",
          "26:     Munimum = 'Minimum',",
          "27:     All = 'All',",
          "28:     Any = 'Any',",
          "",
          "[Added Lines]",
          "25:     MaximumValue = 'Maximum Value',",
          "26:     MunimumValue = 'Minimum Value',",
          "27:     AllValues = 'All Values',",
          "28:     AnyValue = 'Any Value',",
          "",
          "---------------"
        ],
        "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx||Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx": [
          "File: Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx -> Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:                                         : {",
          "206:                                               timeValueInMinutes: 5,",
          "207:                                               evaluateOverTimeType:",
          "209:                                           };",
          "211:                                 setCriteriaFilter({",
          "",
          "[Removed Lines]",
          "208:                                                   EvaluateOverTimeType.All,",
          "",
          "[Added Lines]",
          "208:                                                   EvaluateOverTimeType.AllValues,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:                                         : {",
          "250:                                               timeValueInMinutes: 5,",
          "251:                                               evaluateOverTimeType:",
          "253:                                           };",
          "255:                                 setCriteriaFilter({",
          "",
          "[Removed Lines]",
          "252:                                                   EvaluateOverTimeType.All,",
          "",
          "[Added Lines]",
          "252:                                                   EvaluateOverTimeType.AllValues,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:                                         | null",
          "282:                                 ) => {",
          "283:                                     setCriteriaFilter({",
          "287:                                         filterType:",
          "288:                                             value?.toString() as FilterType,",
          "290:                                     });",
          "291:                                 }}",
          "292:                             />",
          "",
          "[Removed Lines]",
          "284:                                         checkOn:",
          "285:                                             criteriaFilter?.checkOn ||",
          "286:                                             CheckOn.IsOnline,",
          "289:                                         value: criteriaFilter?.value || '',",
          "",
          "[Added Lines]",
          "284:                                         ...criteriaFilter,",
          "287:                                         value: undefined,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "303:                                     value={criteriaFilter?.value?.toString()}",
          "304:                                     onChange={(value: string) => {",
          "305:                                         setCriteriaFilter({",
          "312:                                             value: value || '',",
          "313:                                         });",
          "314:                                     }}",
          "",
          "[Removed Lines]",
          "306:                                             checkOn:",
          "307:                                                 criteriaFilter?.checkOn ||",
          "308:                                                 CheckOn.IsOnline,",
          "309:                                             filterType:",
          "310:                                                 criteriaFilter?.filterType ||",
          "311:                                                 FilterType.EqualTo,",
          "",
          "[Added Lines]",
          "304:                                             ...criteriaFilter,",
          "",
          "---------------"
        ],
        "Dashboard/src/Components/Monitor/MonitorSteps/CriteriaFilter.tsx||Dashboard/src/Components/Monitor/MonitorSteps/CriteriaFilter.tsx": [
          "File: Dashboard/src/Components/Monitor/MonitorSteps/CriteriaFilter.tsx -> Dashboard/src/Components/Monitor/MonitorSteps/CriteriaFilter.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import {",
          "3:     CriteriaFilter,",
          "4:     FilterCondition,",
          "6: } from 'Common/Types/Monitor/CriteriaFilter';",
          "7: import React, { FunctionComponent, ReactElement } from 'react';",
          "9: export interface ComponentProps {",
          "10:     criteriaFilter: CriteriaFilter | undefined;",
          "",
          "[Removed Lines]",
          "2:     CheckOn,",
          "5:     FilterType,",
          "",
          "[Added Lines]",
          "6: import CriteriaFilterUtil from '../../../Utils/Form/Monitor/CriteriaFilter';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: const CriteriaFilterElement: FunctionComponent<ComponentProps> = (",
          "15:     props: ComponentProps",
          "16: ): ReactElement => {",
          "70:     }",
          "72:     return (",
          "",
          "[Removed Lines]",
          "17:     let text: string = 'Check if this resource ';",
          "19:     if (props.criteriaFilter?.checkOn === CheckOn.JavaScriptExpression) {",
          "20:         text = 'Check if ';",
          "22:         text +=",
          "23:             'JavaScript expression ' +",
          "24:             props.criteriaFilter?.value +",
          "25:             ' - evaluates to true.';",
          "26:     } else if (props.criteriaFilter?.checkOn === CheckOn.IsOnline) {",
          "27:         if (props.criteriaFilter?.filterType === FilterType.True) {",
          "28:             text += ' is online ';",
          "29:         } else {",
          "30:             text += ' is offline ';",
          "31:         }",
          "32:     } else {",
          "33:         text += props.criteriaFilter?.checkOn.toString().toLowerCase() + ' ';",
          "35:         if (props.criteriaFilter?.serverMonitorOptions?.diskPath) {",
          "36:             text +=",
          "37:                 'on ' +",
          "38:                 props.criteriaFilter?.serverMonitorOptions?.diskPath +",
          "39:                 ' ';",
          "40:         }",
          "42:         if (props.criteriaFilter?.filterType) {",
          "43:             if (",
          "44:                 props.criteriaFilter?.filterType",
          "45:                     .toLowerCase()",
          "46:                     .includes('contains')",
          "47:             ) {",
          "48:                 text +=",
          "49:                     props.criteriaFilter?.filterType.toString().toLowerCase() +",
          "50:                     ' ';",
          "51:             } else {",
          "52:                 text +=",
          "53:                     'is ' +",
          "54:                     props.criteriaFilter?.filterType.toString().toLowerCase() +",
          "55:                     ' ';",
          "56:             }",
          "57:         }",
          "59:         if (props.criteriaFilter?.value !== undefined) {",
          "60:             text += props.criteriaFilter?.value.toString() + ' ';",
          "61:         }",
          "62:     }",
          "64:     if (props.filterCondition === FilterCondition.All) {",
          "65:         text += 'and,';",
          "66:     }",
          "68:     if (props.filterCondition === FilterCondition.Any) {",
          "69:         text += 'or,';",
          "",
          "[Added Lines]",
          "16:     let text: string = '';",
          "18:     if (props.criteriaFilter) {",
          "19:         text = CriteriaFilterUtil.translateFilterToText(",
          "20:             props.criteriaFilter,",
          "21:             props.filterCondition",
          "22:         );",
          "",
          "---------------"
        ],
        "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts": [
          "File: Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts -> Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { DropdownOption } from 'CommonUI/src/Components/Dropdown/Dropdown';",
          "4: import {",
          "5:     CheckOn,",
          "6:     EvaluateOverTimeMinutes,",
          "7:     FilterType,",
          "8: } from 'Common/Types/Monitor/CriteriaFilter';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:     CriteriaFilter,",
          "8:     EvaluateOverTimeType,",
          "9:     FilterCondition,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:         });",
          "21:     }",
          "23:     public static getCheckOnOptionsByMonitorType(",
          "24:         monitorType: MonitorType",
          "25:     ): Array<DropdownOption> {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:     public static translateFilterToText(",
          "27:         criteriaFilter: CriteriaFilter,",
          "28:         filterCondition?: FilterCondition | undefined",
          "29:     ): string {",
          "30:         let text: string = 'Check if ';",
          "33:         if (",
          "34:             criteriaFilter?.eveluateOverTime &&",
          "35:             criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "36:         ) {",
          "37:             if (",
          "38:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "39:                 EvaluateOverTimeType.AllValues",
          "40:             ) {",
          "41:                 text += 'all values ';",
          "42:             } else if (",
          "43:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "44:                 EvaluateOverTimeType.AnyValue",
          "45:             ) {",
          "46:                 text += 'any value ';",
          "47:             } else if (",
          "48:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "49:                 EvaluateOverTimeType.Average",
          "50:             ) {",
          "51:                 text += 'average ';",
          "52:             } else if (",
          "53:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "54:                 EvaluateOverTimeType.MaximumValue",
          "55:             ) {",
          "56:                 text += 'maximum value ';",
          "57:             } else if (",
          "58:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "59:                 EvaluateOverTimeType.MunimumValue",
          "60:             ) {",
          "61:                 text += 'minimum value ';",
          "62:             } else if (",
          "63:                 criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType ===",
          "64:                 EvaluateOverTimeType.Sum",
          "65:             ) {",
          "66:                 text += 'sum ';",
          "67:             }",
          "68:         }",
          "70:         if (criteriaFilter?.checkOn === CheckOn.JavaScriptExpression) {",
          "71:             text +=",
          "72:                 'JavaScript expression ' +",
          "73:                 criteriaFilter?.value +",
          "74:                 ' - evaluates to true.';",
          "75:         } else if (criteriaFilter?.checkOn === CheckOn.IsOnline) {",
          "76:             if (criteriaFilter?.filterType === FilterType.True) {",
          "77:                 text += ' is online ';",
          "78:             } else {",
          "79:                 text += ' is offline ';",
          "80:             }",
          "81:         } else {",
          "82:             text += criteriaFilter?.checkOn.toString().toLowerCase() + ' ';",
          "84:             if (criteriaFilter?.serverMonitorOptions?.diskPath) {",
          "85:                 text +=",
          "86:                     'on ' +",
          "87:                     criteriaFilter?.serverMonitorOptions?.diskPath +",
          "88:                     ' ';",
          "89:             }",
          "91:             if (criteriaFilter?.filterType) {",
          "92:                 if (",
          "93:                     criteriaFilter?.filterType",
          "94:                         .toLowerCase()",
          "95:                         .includes('contains')",
          "96:                 ) {",
          "97:                     text +=",
          "98:                         criteriaFilter?.filterType.toString().toLowerCase() +",
          "99:                         ' ';",
          "100:                 } else {",
          "101:                     text +=",
          "102:                         'is ' +",
          "103:                         criteriaFilter?.filterType.toString().toLowerCase() +",
          "104:                         ' ';",
          "105:                 }",
          "106:             }",
          "108:             if (criteriaFilter?.value !== undefined) {",
          "109:                 text += criteriaFilter?.value.toString() + ' ';",
          "110:             }",
          "113:             if (",
          "114:                 criteriaFilter?.eveluateOverTime &&",
          "115:                 criteriaFilter.evaluateOverTimeOptions?.timeValueInMinutes",
          "116:             ) {",
          "117:                 text +=",
          "118:                     'over ' +",
          "119:                     criteriaFilter.evaluateOverTimeOptions?.timeValueInMinutes +",
          "120:                     ' minutes ';",
          "121:             }",
          "122:         }",
          "124:         if (filterCondition === FilterCondition.All) {",
          "125:             text += 'and,';",
          "126:         }",
          "128:         if (filterCondition === FilterCondition.Any) {",
          "129:             text += 'or,';",
          "130:         }",
          "132:         return text;",
          "133:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1acfedeebb0d3ca981acdec25895e5532c4cbaa6",
      "candidate_info": {
        "commit_hash": "1acfedeebb0d3ca981acdec25895e5532c4cbaa6",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/1acfedeebb0d3ca981acdec25895e5532c4cbaa6",
        "files": [
          "CommonUI/src/Components/Navbar/NavBar.tsx",
          "Dashboard/src/Components/NavBar/NavBar.tsx"
        ],
        "message": "Refactor Navbar component to include a right element",
        "before_after_code_files": [
          "CommonUI/src/Components/Navbar/NavBar.tsx||CommonUI/src/Components/Navbar/NavBar.tsx",
          "Dashboard/src/Components/NavBar/NavBar.tsx||Dashboard/src/Components/NavBar/NavBar.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "CommonUI/src/Components/Navbar/NavBar.tsx||CommonUI/src/Components/Navbar/NavBar.tsx": [
          "File: CommonUI/src/Components/Navbar/NavBar.tsx -> CommonUI/src/Components/Navbar/NavBar.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: export interface ComponentProps {",
          "6:     children: ReactElement | Array<ReactElement>;",
          "7:     className?: string | undefined;",
          "8: }",
          "10: const Navbar: FunctionComponent<ComponentProps> = (",
          "11:     props: ComponentProps",
          "12: ): ReactElement => {",
          "13:     const className: string =",
          "17: };",
          "19: export default Navbar;",
          "",
          "[Removed Lines]",
          "14:         props.className || 'lg:flex text-center lg:space-x-8 lg:py-2 bg-white';",
          "16:     return <nav className={className}>{props.children}</nav>;",
          "",
          "[Added Lines]",
          "8:     rightElement?: ReactElement | undefined;",
          "15:         props.className || 'flex text-center lg:space-x-8 lg:py-2 bg-white ';",
          "17:     return <nav className='flex justify-between'>",
          "18:         <div className={className}>",
          "19:             {props.children}",
          "20:         </div>",
          "21:         <div className={className}>",
          "22:             {props.rightElement}",
          "23:         </div>",
          "24:     </nav>;",
          "",
          "---------------"
        ],
        "Dashboard/src/Components/NavBar/NavBar.tsx||Dashboard/src/Components/NavBar/NavBar.tsx": [
          "File: Dashboard/src/Components/NavBar/NavBar.tsx -> Dashboard/src/Components/NavBar/NavBar.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     }",
          "59:     return (",
          "61:             <NavBarItem",
          "62:                 title=\"Home\"",
          "63:                 icon={IconProp.Home}",
          "",
          "[Removed Lines]",
          "60:         <NavBar>",
          "",
          "[Added Lines]",
          "60:         <NavBar rightElement={<NavBarItem",
          "61:             title=\"User Settings\"",
          "62:             route={RouteUtil.populateRouteParams(",
          "63:                 RouteMap[PageMap.USER_SETTINGS] as Route",
          "64:             )}",
          "65:             activeRoute={RouteMap[PageMap.USER_SETTINGS]}",
          "66:             icon={IconProp.User}",
          "67:         />}>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:                                 description=\"Manage your scheduled maintenance events.\"",
          "141:                                 route={RouteUtil.populateRouteParams(",
          "142:                                     RouteMap[",
          "144:                                     ] as Route",
          "145:                                 )}",
          "146:                                 icon={IconProp.Clock}",
          "",
          "[Removed Lines]",
          "143:                                         PageMap.SCHEDULED_MAINTENANCE_EVENTS",
          "",
          "[Added Lines]",
          "150:                                     PageMap.SCHEDULED_MAINTENANCE_EVENTS",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "183:                                     forceHideMoreMenu();",
          "184:                                 }}",
          "185:                             />",
          "198:                             {/* <NavBarMenuItem",
          "199:                             title=\"Logs Management\"",
          "",
          "[Removed Lines]",
          "186:                             <NavBarMenuItem",
          "187:                                 title=\"User Settings\"",
          "188:                                 description=\"Review or manage user settings related to this project here.\"",
          "189:                                 route={RouteUtil.populateRouteParams(",
          "190:                                     RouteMap[PageMap.USER_SETTINGS] as Route",
          "191:                                 )}",
          "192:                                 icon={IconProp.User}",
          "193:                                 onClick={() => {",
          "194:                                     forceHideMoreMenu();",
          "195:                                 }}",
          "196:                             />",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "decc09e3b9ecc5daae331e25e968daf3ed4e05f4",
      "candidate_info": {
        "commit_hash": "decc09e3b9ecc5daae331e25e968daf3ed4e05f4",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/decc09e3b9ecc5daae331e25e968daf3ed4e05f4",
        "files": [
          "AdminDashboard/src/Pages/Settings/SMTP/Index.tsx",
          "Common/Types/Monitor/CriteriaFilter.ts",
          "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ],
        "message": "Fix formatting issues and update descriptions in SMTP settings and CriteriaFilter",
        "before_after_code_files": [
          "AdminDashboard/src/Pages/Settings/SMTP/Index.tsx||AdminDashboard/src/Pages/Settings/SMTP/Index.tsx",
          "Common/Types/Monitor/CriteriaFilter.ts||Common/Types/Monitor/CriteriaFilter.ts",
          "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx||Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "AdminDashboard/src/Pages/Settings/SMTP/Index.tsx||AdminDashboard/src/Pages/Settings/SMTP/Index.tsx": [
          "File: AdminDashboard/src/Pages/Settings/SMTP/Index.tsx -> AdminDashboard/src/Pages/Settings/SMTP/Index.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:                             title: 'Use SSL / TLS',",
          "184:                             stepId: 'server-info',",
          "185:                             fieldType: FormFieldSchemaType.Toggle,",
          "187:                         },",
          "188:                         {",
          "189:                             field: {",
          "",
          "[Removed Lines]",
          "186:                             description: 'If you use port 465, please enable this. Do not enable this if you use port 587.',",
          "",
          "[Added Lines]",
          "186:                             description:",
          "187:                                 'If you use port 465, please enable this. Do not enable this if you use port 587.',",
          "",
          "---------------"
        ],
        "Common/Types/Monitor/CriteriaFilter.ts||Common/Types/Monitor/CriteriaFilter.ts": [
          "File: Common/Types/Monitor/CriteriaFilter.ts -> Common/Types/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "80:     Any = 'Any',",
          "81: }",
          "84: export class CriteriaFilterUtil {",
          "85:     public static isEvaluateOverTimeFilter(checkOn: CheckOn): boolean {",
          "87:     }",
          "88: }",
          "",
          "[Removed Lines]",
          "86:         return checkOn === CheckOn.ResponseStatusCode || checkOn === CheckOn.ResponseTime || checkOn === CheckOn.DiskUsagePercent || checkOn === CheckOn.CPUUsagePercent || checkOn === CheckOn.MemoryUsagePercent;",
          "",
          "[Added Lines]",
          "84:         return (",
          "85:             checkOn === CheckOn.ResponseStatusCode ||",
          "86:             checkOn === CheckOn.ResponseTime ||",
          "87:             checkOn === CheckOn.DiskUsagePercent ||",
          "88:             checkOn === CheckOn.CPUUsagePercent ||",
          "89:             checkOn === CheckOn.MemoryUsagePercent",
          "90:         );",
          "",
          "---------------"
        ],
        "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx||Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx": [
          "File: Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx -> Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:     const [isLoading, setIsLoading] = React.useState<boolean>(true);",
          "51:     useEffect(() => {",
          "53:         setIsLoading(false);",
          "54:     }, [props.monitorType]);",
          "",
          "[Removed Lines]",
          "52:         setCheckOnOptions(CriteriaFilterUiUtil.getCheckOnOptionsByMonitorType(props.monitorType));",
          "",
          "[Added Lines]",
          "51:         setCheckOnOptions(",
          "52:             CriteriaFilterUiUtil.getCheckOnOptionsByMonitorType(",
          "53:                 props.monitorType",
          "54:             )",
          "55:         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     >([]);",
          "60:     useEffect(() => {",
          "63:     }, [criteriaFilter]);",
          "65:     useEffect(() => {",
          "",
          "[Removed Lines]",
          "61:         setFilterTypeOptions(criteriaFilter?.checkOn ? CriteriaFilterUiUtil.getFilterTypeOptionsByCheckOn(criteriaFilter?.checkOn) : []);",
          "62:         setValuePlaceholder( criteriaFilter?.checkOn ? CriteriaFilterUiUtil.getFilterTypePlaceholderValueByCheckOn(props.monitorType, criteriaFilter?.checkOn) : '');",
          "",
          "[Added Lines]",
          "64:         setFilterTypeOptions(",
          "65:             criteriaFilter?.checkOn",
          "66:                 ? CriteriaFilterUiUtil.getFilterTypeOptionsByCheckOn(",
          "67:                       criteriaFilter?.checkOn",
          "68:                   )",
          "69:                 : []",
          "70:         );",
          "71:         setValuePlaceholder(",
          "72:             criteriaFilter?.checkOn",
          "73:                 ? CriteriaFilterUiUtil.getFilterTypePlaceholderValueByCheckOn(",
          "74:                       props.monitorType,",
          "75:                       criteriaFilter?.checkOn",
          "76:                   )",
          "77:                 : ''",
          "78:         );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:                 {/** checkbox for evaluateOverTime */}",
          "123:                         <div className=\"mt-3\">",
          "125:                             <CheckboxElement",
          "126:                                 initialValue={criteriaFilter?.eveluateOverTime}",
          "128:                                 onChange={(value: boolean) => {",
          "129:                                     setCriteriaFilter({",
          "130:                                         ...criteriaFilter,",
          "131:                                         eveluateOverTime: value,",
          "132:                                     });",
          "134:                         </div>",
          "135:                     )}",
          "138:                 {criteriaFilter?.checkOn &&",
          "140:                     <div className=\"mt-1\">",
          "141:                         <FieldLabelElement title=\"Evaluate\" />",
          "142:                         <Dropdown",
          "152:                                 setCriteriaFilter({",
          "153:                                     ...criteriaFilter,",
          "154:                                     eveluateOverTime: true,",
          "155:                                     evaluateOverTimeOptions: {",
          "156:                                         ...evaluateOverTimeOption,",
          "158:                                     },",
          "159:                                 });",
          "161:                             }}",
          "162:                         />",
          "163:                     </div>",
          "",
          "[Removed Lines]",
          "121:                 {",
          "122:                     (criteriaFilter?.checkOn && CriteriaFilterUtil.isEvaluateOverTimeFilter(criteriaFilter?.checkOn)) && (",
          "127:                                 title={\"Evaluate this criteria over a period of time\"}",
          "133:                                 }} />",
          "139:                     (criteriaFilter?.checkOn && CriteriaFilterUtil.isEvaluateOverTimeFilter(criteriaFilter?.checkOn)) && criteriaFilter.eveluateOverTime ? (",
          "143:                             initialValue={DropdownUtil.getDropdownOptionsFromEnum(EvaluateOverTimeType).find((item: DropdownOption) => item.value === criteriaFilter?.evaluateOverTimeOptions?.evaluateOverTimeType)}",
          "144:                             options={DropdownUtil.getDropdownOptionsFromEnum(EvaluateOverTimeType)}",
          "145:                             onChange={(value: DropdownValue | Array<DropdownValue> | null) => {",
          "147:                                 const evaluateOverTimeOption: EvaluateOverTimeOptions = criteriaFilter?.evaluateOverTimeOptions ? { ...criteriaFilter?.evaluateOverTimeOptions } : {",
          "148:                                     timeValueInMinutes: 5,",
          "149:                                     evaluateOverTimeType: EvaluateOverTimeType.All,",
          "150:                                 };",
          "157:                                         evaluateOverTimeType: value?.toString() as EvaluateOverTimeType,",
          "",
          "[Added Lines]",
          "137:                 {criteriaFilter?.checkOn &&",
          "138:                     CriteriaFilterUtil.isEvaluateOverTimeFilter(",
          "139:                         criteriaFilter?.checkOn",
          "140:                     ) && (",
          "144:                                 title={",
          "145:                                     'Evaluate this criteria over a period of time'",
          "146:                                 }",
          "152:                                 }}",
          "153:                             />",
          "158:                 criteriaFilter?.checkOn &&",
          "159:                 CriteriaFilterUtil.isEvaluateOverTimeFilter(",
          "160:                     criteriaFilter?.checkOn",
          "161:                 ) &&",
          "162:                 criteriaFilter.eveluateOverTime ? (",
          "166:                             initialValue={DropdownUtil.getDropdownOptionsFromEnum(",
          "167:                                 EvaluateOverTimeType",
          "168:                             ).find((item: DropdownOption) => {",
          "169:                                 return (",
          "170:                                     item.value ===",
          "171:                                     criteriaFilter?.evaluateOverTimeOptions",
          "172:                                         ?.evaluateOverTimeType",
          "173:                                 );",
          "174:                             })}",
          "175:                             options={DropdownUtil.getDropdownOptionsFromEnum(",
          "176:                                 EvaluateOverTimeType",
          "177:                             )}",
          "178:                             onChange={(",
          "179:                                 value:",
          "180:                                     | DropdownValue",
          "181:                                     | Array<DropdownValue>",
          "182:                                     | null",
          "183:                             ) => {",
          "184:                                 const evaluateOverTimeOption: EvaluateOverTimeOptions =",
          "185:                                     criteriaFilter?.evaluateOverTimeOptions",
          "186:                                         ? {",
          "187:                                               ...criteriaFilter?.evaluateOverTimeOptions,",
          "188:                                           }",
          "189:                                         : {",
          "190:                                               timeValueInMinutes: 5,",
          "191:                                               evaluateOverTimeType:",
          "192:                                                   EvaluateOverTimeType.All,",
          "193:                                           };",
          "200:                                         evaluateOverTimeType:",
          "201:                                             value?.toString() as EvaluateOverTimeType,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "165:                     <></>",
          "166:                 )}",
          "169:                 {criteriaFilter?.checkOn &&",
          "171:                     <div className=\"mt-1\">",
          "172:                         <FieldLabelElement title=\"For the last (in minutes)\" />",
          "173:                         <Dropdown",
          "175:                             options={CriteriaFilterUiUtil.getEvaluateOverTimeMinutesOptions()}",
          "183:                                 setCriteriaFilter({",
          "184:                                     ...criteriaFilter,",
          "",
          "[Removed Lines]",
          "170:                     (criteriaFilter?.checkOn && CriteriaFilterUtil.isEvaluateOverTimeFilter(criteriaFilter?.checkOn)) && criteriaFilter.eveluateOverTime ? (",
          "174:                             initialValue={CriteriaFilterUiUtil.getEvaluateOverTimeMinutesOptions().find((item: DropdownOption) => item.value === criteriaFilter?.evaluateOverTimeOptions?.timeValueInMinutes)}",
          "176:                             onChange={(value: DropdownValue | Array<DropdownValue> | null) => {",
          "178:                                 const evaluateOverTimeOption: EvaluateOverTimeOptions = criteriaFilter?.evaluateOverTimeOptions ? { ...criteriaFilter?.evaluateOverTimeOptions } : {",
          "179:                                     timeValueInMinutes: 5,",
          "180:                                     evaluateOverTimeType: EvaluateOverTimeType.All,",
          "181:                                 };",
          "",
          "[Added Lines]",
          "212:                 criteriaFilter?.checkOn &&",
          "213:                 CriteriaFilterUtil.isEvaluateOverTimeFilter(",
          "214:                     criteriaFilter?.checkOn",
          "215:                 ) &&",
          "216:                 criteriaFilter.eveluateOverTime ? (",
          "220:                             initialValue={CriteriaFilterUiUtil.getEvaluateOverTimeMinutesOptions().find(",
          "221:                                 (item: DropdownOption) => {",
          "222:                                     return (",
          "223:                                         item.value ===",
          "224:                                         criteriaFilter?.evaluateOverTimeOptions",
          "225:                                             ?.timeValueInMinutes",
          "226:                                     );",
          "227:                                 }",
          "228:                             )}",
          "230:                             onChange={(",
          "231:                                 value:",
          "232:                                     | DropdownValue",
          "233:                                     | Array<DropdownValue>",
          "234:                                     | null",
          "235:                             ) => {",
          "236:                                 const evaluateOverTimeOption: EvaluateOverTimeOptions =",
          "237:                                     criteriaFilter?.evaluateOverTimeOptions",
          "238:                                         ? {",
          "239:                                               ...criteriaFilter?.evaluateOverTimeOptions,",
          "240:                                           }",
          "241:                                         : {",
          "242:                                               timeValueInMinutes: 5,",
          "243:                                               evaluateOverTimeType:",
          "244:                                                   EvaluateOverTimeType.All,",
          "245:                                           };",
          "",
          "---------------"
        ],
        "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts": [
          "File: Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts -> Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:         return keys.map((key: string) => {",
          "12:             return {",
          "13:                 label: `${EvaluateOverTimeMinutes[key as any]} Minutes`,",
          "",
          "[Removed Lines]",
          "1: import DropdownUtil from \"CommonUI/src/Utils/Dropdown\";",
          "2: import MonitorType from \"Common/Types/Monitor/MonitorType\";",
          "3: import { DropdownOption } from \"CommonUI/src/Components/Dropdown/Dropdown\";",
          "4: import { CheckOn, EvaluateOverTimeMinutes, FilterType } from \"Common/Types/Monitor/CriteriaFilter\";",
          "6: export default class CriteriaFilterUtil {",
          "9:     public static  getEvaluateOverTimeMinutesOptions(): Array<DropdownOption> {",
          "10:         const keys = Object.keys(EvaluateOverTimeMinutes)",
          "",
          "[Added Lines]",
          "1: import DropdownUtil from 'CommonUI/src/Utils/Dropdown';",
          "2: import MonitorType from 'Common/Types/Monitor/MonitorType';",
          "3: import { DropdownOption } from 'CommonUI/src/Components/Dropdown/Dropdown';",
          "4: import {",
          "5:     CheckOn,",
          "6:     EvaluateOverTimeMinutes,",
          "7:     FilterType,",
          "8: } from 'Common/Types/Monitor/CriteriaFilter';",
          "10: export default class CriteriaFilterUtil {",
          "11:     public static getEvaluateOverTimeMinutesOptions(): Array<DropdownOption> {",
          "12:         const keys: Array<string> = Object.keys(EvaluateOverTimeMinutes);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:         });",
          "17:     }",
          "20:         let options: Array<DropdownOption> =",
          "21:             DropdownUtil.getDropdownOptionsFromEnum(CheckOn);",
          "",
          "[Removed Lines]",
          "19:     public static getCheckOnOptionsByMonitorType(monitorType: MonitorType): Array<DropdownOption> {",
          "",
          "[Added Lines]",
          "21:     public static getCheckOnOptionsByMonitorType(",
          "22:         monitorType: MonitorType",
          "23:     ): Array<DropdownOption> {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:         return options;",
          "77:     }",
          "81:         let options: Array<DropdownOption> =",
          "82:             DropdownUtil.getDropdownOptionsFromEnum(FilterType);",
          "",
          "[Removed Lines]",
          "80:     public static getFilterTypeOptionsByCheckOn(checkOn: CheckOn): Array<DropdownOption> {",
          "",
          "[Added Lines]",
          "83:     public static getFilterTypeOptionsByCheckOn(",
          "84:         checkOn: CheckOn",
          "85:     ): Array<DropdownOption> {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:                 );",
          "163:             });",
          "164:         }",
          "167:     }",
          "171:             return '';",
          "172:         }",
          "",
          "[Removed Lines]",
          "166:         return  options;",
          "169:     public static getFilterTypePlaceholderValueByCheckOn(monitorType: MonitorType, checkOn: CheckOn): string {",
          "170:         if(!checkOn) {",
          "",
          "[Added Lines]",
          "171:         return options;",
          "174:     public static getFilterTypePlaceholderValueByCheckOn(",
          "175:         monitorType: MonitorType,",
          "176:         checkOn: CheckOn",
          "177:     ): string {",
          "178:         if (!checkOn) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "187:             return '5';",
          "188:         }",
          "191:             checkOn === CheckOn.ResponseHeader ||",
          "192:             checkOn === CheckOn.ResponseHeaderValue ||",
          "193:             checkOn === CheckOn.RequestBody ||",
          "194:             checkOn === CheckOn.RequestHeader ||",
          "196:             return 'Some Text';",
          "197:         }",
          "199:         if (checkOn === CheckOn.JavaScriptExpression) {",
          "200:             if (monitorType === MonitorType.IncomingRequest) {",
          "201:                 return '{{requestBody.result}} === true';",
          "204:             }",
          "205:         }",
          "207:         if (checkOn === CheckOn.ResponseStatusCode) {",
          "",
          "[Removed Lines]",
          "190:         if ( checkOn === CheckOn.ResponseBody ||",
          "195:             checkOn === CheckOn.RequestHeaderValue) {",
          "202:             } else {",
          "203:                return '{{responseBody.result}} === true';",
          "",
          "[Added Lines]",
          "198:         if (",
          "199:             checkOn === CheckOn.ResponseBody ||",
          "204:             checkOn === CheckOn.RequestHeaderValue",
          "205:         ) {",
          "213:             return '{{responseBody.result}} === true';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "211:         return '';",
          "212:     }",
          "",
          "[Removed Lines]",
          "213: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}