{
  "cve_id": "CVE-2024-29901",
  "cve_desc": "The AuthKit library for Next.js provides helpers for authentication and session management using WorkOS & AuthKit with Next.js.\nA user can reuse an expired session by controlling the `x-workos-session` header. The vulnerability is patched in v0.4.2.",
  "repo": "workos/authkit-nextjs",
  "patch_hash": "6c3f4f3179d66cbb15de3962792083ff3b244a01",
  "patch_info": {
    "commit_hash": "6c3f4f3179d66cbb15de3962792083ff3b244a01",
    "repo": "workos/authkit-nextjs",
    "commit_url": "https://github.com/workos/authkit-nextjs/commit/6c3f4f3179d66cbb15de3962792083ff3b244a01",
    "files": [
      "src/session.ts"
    ],
    "message": "always control the x-workos-session header (#17)",
    "before_after_code_files": [
      "src/session.ts||src/session.ts"
    ]
  },
  "patch_diff": {
    "src/session.ts||src/session.ts": [
      "File: src/session.ts -> src/session.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "31:   newRequestHeaders.set(middlewareHeaderName, 'true');",
      "34:   if (!session) {",
      "35:     return NextResponse.next({",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33:   newRequestHeaders.delete(sessionHeaderName);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "77:     return response;",
      "78:   } catch (e) {",
      "79:     console.warn('Failed to refresh', e);",
      "81:     response.cookies.delete(cookieName);",
      "82:     return response;",
      "83:   }",
      "",
      "[Removed Lines]",
      "80:     const response = NextResponse.next();",
      "",
      "[Added Lines]",
      "82:     const response = NextResponse.next({",
      "83:       request: { headers: newRequestHeaders },",
      "84:     });",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e20e926849a0f837c7efb0fd94af5e3a8183572b",
      "candidate_info": {
        "commit_hash": "e20e926849a0f837c7efb0fd94af5e3a8183572b",
        "repo": "workos/authkit-nextjs",
        "commit_url": "https://github.com/workos/authkit-nextjs/commit/e20e926849a0f837c7efb0fd94af5e3a8183572b",
        "files": [
          "README.md",
          "__tests__/session.spec.ts",
          "jest.setup.ts",
          "src/index.ts",
          "src/interfaces.ts",
          "src/middleware.ts",
          "src/session.ts"
        ],
        "message": "Add composable middleware (#164)\n\n* Added tests and made a start to auth.ts\n\n* Add tests for cookie and callback route\n\n* Tests for session and actions\n\n* Add jsdom tests for tsx files\n\n* Add new workflow\n\n* Clean up jest config file\n\n* Didn't mean to add this\n\n* Add jest config and setup scripts to ts exclude\n\n* Impersonation shouldn't be a client component for now\n\n* 100% test coverage\n\n* Add debug flag\n\n* Add another test and change coverage engine to have local and github show the same results\n\n* Should actually add the test\n\n* Address feedback\n\n* Also run prettier on test files\n\n* wip\n\n* wip\n\n* Add tests\n\n* Delete getSession in favor of authkit method\n\n* Restore package-lock.json\n\n* Flip debug back to false\n\n* Remove deprecated tests and update readme\n\n* Make options object optional and fix tests\n\n* Update tests",
        "before_after_code_files": [
          "__tests__/session.spec.ts||__tests__/session.spec.ts",
          "jest.setup.ts||jest.setup.ts",
          "src/index.ts||src/index.ts",
          "src/interfaces.ts||src/interfaces.ts",
          "src/middleware.ts||src/middleware.ts",
          "src/session.ts||src/session.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/session.ts||src/session.ts"
          ],
          "candidate": [
            "src/session.ts||src/session.ts"
          ]
        }
      },
      "candidate_diff": {
        "__tests__/session.spec.ts||__tests__/session.spec.ts": [
          "File: __tests__/session.spec.ts -> __tests__/session.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { NextRequest, NextResponse } from 'next/server';",
          "2: import { cookies, headers } from 'next/headers';",
          "3: import { redirect } from 'next/navigation';",
          "5: import { workos } from '../src/workos.js';",
          "6: import * as envVariables from '../src/env-variables.js';",
          "9: import { sealData } from 'iron-session';",
          "10: import { User } from '@workos-inc/node';",
          "",
          "[Removed Lines]",
          "4: import { withAuth, updateSession, refreshSession, getSession, terminateSession } from '../src/session.js';",
          "8: import { jwtVerify, SignJWT } from 'jose';",
          "",
          "[Added Lines]",
          "4: import { generateTestToken } from './test-helpers.js';",
          "5: import { withAuth, updateSession, refreshSession, terminateSession, updateSessionMiddleware } from '../src/session.js';",
          "9: import { jwtVerify } from 'jose';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:     });",
          "148:   });",
          "151:     it('should throw an error if the redirect URI is not set', async () => {",
          "152:       const originalWorkosRedirectUri = envVariables.WORKOS_REDIRECT_URI;",
          "154:       jest.replaceProperty(envVariables, 'WORKOS_REDIRECT_URI', '');",
          "156:       await expect(async () => {",
          "158:           new NextRequest(new URL('http://example.com')),",
          "159:           false,",
          "160:           {",
          "",
          "[Removed Lines]",
          "150:   describe('updateSession', () => {",
          "157:         await updateSession(",
          "",
          "[Added Lines]",
          "151:   describe('updateSessionMiddleware', () => {",
          "158:         await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "175:       jest.replaceProperty(envVariables, 'WORKOS_COOKIE_PASSWORD', '');",
          "177:       await expect(async () => {",
          "179:           new NextRequest(new URL('http://example.com')),",
          "180:           false,",
          "181:           {",
          "",
          "[Removed Lines]",
          "178:         await updateSession(",
          "",
          "[Added Lines]",
          "179:         await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "198:       jest.replaceProperty(envVariables, 'WORKOS_COOKIE_PASSWORD', 'short');",
          "200:       await expect(async () => {",
          "202:           new NextRequest(new URL('http://example.com')),",
          "203:           false,",
          "204:           {",
          "",
          "[Removed Lines]",
          "201:         await updateSession(",
          "",
          "[Added Lines]",
          "202:         await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "218:     it('should return early if there is no session', async () => {",
          "219:       const request = new NextRequest(new URL('http://example.com'));",
          "221:         request,",
          "222:         false,",
          "223:         {",
          "",
          "[Removed Lines]",
          "220:       const result = await updateSession(",
          "",
          "[Added Lines]",
          "221:       const result = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "246:       });",
          "248:       const request = new NextRequest(new URL('http://example.com'));",
          "250:         request,",
          "251:         true,",
          "252:         {",
          "",
          "[Removed Lines]",
          "249:       const result = await updateSession(",
          "",
          "[Added Lines]",
          "250:       const result = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "260:       expect(result).toBeInstanceOf(NextResponse);",
          "261:       expect(result.status).toBe(200);",
          "263:     });",
          "265:     it('should attempt to refresh the session when the access token is invalid', async () => {",
          "",
          "[Removed Lines]",
          "262:       expect(console.log).toHaveBeenCalledWith('Session is valid');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "284:       const request = new NextRequest(new URL('http://example.com'));",
          "287:         request,",
          "288:         true,",
          "289:         {",
          "",
          "[Removed Lines]",
          "286:       const result = await updateSession(",
          "",
          "[Added Lines]",
          "286:       const result = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "298:       expect(console.log).toHaveBeenCalledWith(",
          "299:         `Session invalid. Refreshing access token that ends in ${mockSession.accessToken.slice(-10)}`,",
          "300:       );",
          "302:     });",
          "304:     it('should delete the cookie when refreshing fails', async () => {",
          "",
          "[Removed Lines]",
          "301:       expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Refresh successful. New access token ends in'));",
          "",
          "[Added Lines]",
          "301:       expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Session successfully refreshed'));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "323:       const request = new NextRequest(new URL('http://example.com'));",
          "326:         request,",
          "327:         true,",
          "328:         {",
          "",
          "[Removed Lines]",
          "325:       const result = await updateSession(",
          "",
          "[Added Lines]",
          "325:       const result = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "352:         jest.spyOn(console, 'log').mockImplementation(() => {});",
          "354:         const request = new NextRequest(new URL('http://example.com/protected'));",
          "356:           request,",
          "357:           true,",
          "358:           {",
          "",
          "[Removed Lines]",
          "355:         const result = await updateSession(",
          "",
          "[Added Lines]",
          "355:         const result = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "374:         (NextResponse as Partial<typeof NextResponse>).redirect = undefined;",
          "376:         const request = new NextRequest(new URL('http://example.com/protected'));",
          "378:           request,",
          "379:           false,",
          "380:           {",
          "",
          "[Removed Lines]",
          "377:         const result = await updateSession(",
          "",
          "[Added Lines]",
          "377:         const result = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "394:       it('should automatically add the redirect URI to unauthenticatedPaths when middleware is enabled', async () => {",
          "395:         const request = new NextRequest(new URL('http://example.com/protected'));",
          "397:           request,",
          "398:           false,",
          "399:           {",
          "",
          "[Removed Lines]",
          "396:         const result = await updateSession(",
          "",
          "[Added Lines]",
          "396:         const result = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "410:       it('should redirect unauthenticated users to sign up page on protected routes included in signUpPaths', async () => {",
          "411:         const request = new NextRequest(new URL('http://example.com/protected-signup'));",
          "413:           request,",
          "414:           false,",
          "415:           {",
          "",
          "[Removed Lines]",
          "412:         const result = await updateSession(",
          "",
          "[Added Lines]",
          "412:         const result = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "424:         expect(result.headers.get('Location')).toContain('screen_hint=sign-up');",
          "425:       });",
          "427:       it('should allow logged out users on unauthenticated paths', async () => {",
          "428:         const request = new NextRequest(new URL('http://example.com/unauthenticated'));",
          "430:           request,",
          "431:           false,",
          "432:           {",
          "",
          "[Removed Lines]",
          "429:         const result = await updateSession(",
          "",
          "[Added Lines]",
          "427:       it('should set the sign up paths in the headers', async () => {",
          "428:         const request = new NextRequest(new URL('http://example.com/protected-signup'));",
          "429:         const result = await updateSessionMiddleware(",
          "430:           request,",
          "431:           false,",
          "432:           {",
          "433:             enabled: false,",
          "434:             unauthenticatedPaths: [],",
          "435:           },",
          "436:           process.env.NEXT_PUBLIC_WORKOS_REDIRECT_URI as string,",
          "437:           ['/protected-signup'],",
          "438:         );",
          "440:         console.log('result headers:', result.headers);",
          "442:         expect(result.headers.get('x-middleware-request-x-sign-up-paths')).toBe('/protected-signup');",
          "443:       });",
          "447:         const result = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "443:       it('should throw an error if the provided regex is invalid', async () => {",
          "444:         const request = new NextRequest(new URL('http://example.com/invalid-regex'));",
          "445:         await expect(async () => {",
          "447:             request,",
          "448:             false,",
          "449:             {",
          "",
          "[Removed Lines]",
          "446:           await updateSession(",
          "",
          "[Added Lines]",
          "464:           await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "467:         });",
          "472:         const request = new NextRequest(new URL('http://example.com/invalid-regex'));",
          "474:         await expect(async () => {",
          "476:             request,",
          "477:             false,",
          "478:             {",
          "",
          "[Removed Lines]",
          "470:         const { updateSession } = await import('../src/session.js');",
          "475:           await updateSession(",
          "",
          "[Added Lines]",
          "488:         const { updateSessionMiddleware } = await import('../src/session.js');",
          "493:           await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "491:       it('should default to the WORKOS_REDIRECT_URI environment variable if no redirect URI is provided', async () => {",
          "492:         const request = new NextRequest(new URL('http://example.com/protected'));",
          "494:           request,",
          "495:           false,",
          "496:           {",
          "",
          "[Removed Lines]",
          "493:         const result = await updateSession(",
          "",
          "[Added Lines]",
          "511:         const result = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "526:         const request = new NextRequest(new URL('http://example.com'));",
          "529:           request,",
          "530:           true,",
          "531:           {",
          "",
          "[Removed Lines]",
          "528:         const result = await updateSession(",
          "",
          "[Added Lines]",
          "546:         const result = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "549:           new Error('Failed to refresh'),",
          "550:         );",
          "553:       });",
          "555:       describe('sign up paths', () => {",
          "556:         it('should redirect to sign up when unauthenticated user is on a sign up path', async () => {",
          "557:           const request = new NextRequest(new URL('http://example.com/signup'));",
          "560:             request,",
          "561:             false,",
          "562:             {",
          "",
          "[Removed Lines]",
          "552:         expect(console.log).toHaveBeenNthCalledWith(3, 'Redirecting to AuthKit to log in again.');",
          "559:           const result = await updateSession(",
          "",
          "[Added Lines]",
          "570:         expect(console.log).toHaveBeenNthCalledWith(",
          "571:           3,",
          "572:           'Unauthenticated user on protected route http://example.com/, redirecting to AuthKit',",
          "573:         );",
          "580:           const result = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "584:     });",
          "585:   });",
          "587:   describe('refreshSession', () => {",
          "588:     it('should refresh session successfully', async () => {",
          "589:       jest.spyOn(workos.userManagement, 'authenticateWithRefreshToken').mockResolvedValue({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "608:   describe('updateSession', () => {",
          "609:     it('should return an authorization url if the session is invalid', async () => {",
          "610:       const result = await updateSession(new NextRequest(new URL('http://example.com/protected')), {",
          "611:         debug: true,",
          "612:         screenHint: 'sign-up',",
          "613:       });",
          "615:       expect(result.authorizationUrl).toBeDefined();",
          "616:       expect(result.authorizationUrl).toContain('screen_hint=sign-up');",
          "617:       expect(result.session.user).toBeNull();",
          "618:       expect(console.log).toHaveBeenCalledWith('No session found from cookie');",
          "619:     });",
          "621:     it('should return a session if the session is valid', async () => {",
          "622:       const nextCookies = await cookies();",
          "623:       nextCookies.set(",
          "624:         'wos-session',",
          "625:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "626:       );",
          "628:       const result = await updateSession(new NextRequest(new URL('http://example.com/protected')));",
          "630:       expect(result.session).toBeDefined();",
          "631:     });",
          "633:     it('should attempt to refresh an invalid session', async () => {",
          "635:       mockSession.accessToken = await generateTestToken({}, true);",
          "637:       const nextCookies = await cookies();",
          "638:       nextCookies.set(",
          "639:         'wos-session',",
          "640:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "641:       );",
          "644:       (jwtVerify as jest.Mock).mockImplementation(() => {",
          "645:         throw new Error('Invalid token');",
          "646:       });",
          "649:       jest.spyOn(workos.userManagement, 'authenticateWithRefreshToken').mockResolvedValue({",
          "650:         accessToken: await generateTestToken(),",
          "651:         refreshToken: 'new-refresh-token',",
          "652:         user: mockSession.user,",
          "653:       });",
          "655:       const result = await updateSession(new NextRequest(new URL('http://example.com/protected')), {",
          "656:         debug: true,",
          "657:       });",
          "659:       expect(result.session).toBeDefined();",
          "660:       expect(result.session.user).toBeDefined();",
          "661:       expect(console.log).toHaveBeenCalledWith(",
          "662:         expect.stringContaining('Session invalid. Refreshing access token that ends in'),",
          "663:       );",
          "664:     });",
          "666:     it('should handle refresh failure by returning auth URL', async () => {",
          "668:       mockSession.accessToken = await generateTestToken({}, true);",
          "670:       const nextCookies = await cookies();",
          "671:       nextCookies.set(",
          "672:         'wos-session',",
          "673:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "674:       );",
          "677:       (jwtVerify as jest.Mock).mockImplementation(() => {",
          "678:         throw new Error('Invalid token');",
          "679:       });",
          "682:       jest.spyOn(workos.userManagement, 'authenticateWithRefreshToken').mockRejectedValue(new Error('Refresh failed'));",
          "684:       const result = await updateSession(new NextRequest(new URL('http://example.com/protected')), {",
          "685:         debug: true,",
          "686:       });",
          "688:       expect(result.session.user).toBeNull();",
          "689:       expect(result.authorizationUrl).toBeDefined();",
          "690:       expect(console.log).toHaveBeenCalledWith('Failed to refresh. Deleting cookie.', expect.any(Error));",
          "691:     });",
          "692:   });",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "647:     });",
          "648:   });",
          "698:   describe('terminateSession', () => {",
          "699:     it('should redirect to logout url when there is a session', async () => {",
          "700:       const nextHeaders = await headers();",
          "",
          "[Removed Lines]",
          "650:   describe('getSession', () => {",
          "651:     it('should return session info when valid', async () => {",
          "652:       const nextCookies = await cookies();",
          "653:       nextCookies.set(",
          "654:         'wos-session',",
          "655:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "656:       );",
          "658:       const result = await getSession();",
          "659:       expect(result).toHaveProperty('user');",
          "660:     });",
          "662:     it('should return null user when no session exists', async () => {",
          "663:       const result = await getSession();",
          "664:       expect(result).toEqual({ user: null });",
          "665:     });",
          "667:     it('should return undefined if the access token is invalid', async () => {",
          "668:       mockSession.accessToken = 'invalid-token';",
          "670:       const nextCookies = await cookies();",
          "671:       nextCookies.set(",
          "672:         'wos-session',",
          "673:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "674:       );",
          "676:       (jwtVerify as jest.Mock).mockImplementation(() => {",
          "677:         throw new Error('Invalid token');",
          "678:       });",
          "680:       const result = await getSession();",
          "681:       expect(result).toEqual(undefined);",
          "682:     });",
          "684:     it('should return cookie from a response object if provided', async () => {",
          "685:       mockSession.accessToken = await generateTestToken();",
          "687:       const response = new NextResponse();",
          "688:       response.cookies.set(",
          "689:         'wos-session',",
          "690:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "691:       );",
          "693:       const result = await getSession(response);",
          "694:       expect(result).toEqual(mockSession);",
          "695:     });",
          "696:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "726:     });",
          "727:   });",
          "728: });",
          "",
          "[Removed Lines]",
          "730: async function generateTestToken(payload = {}, expired = false) {",
          "731:   const defaultPayload = {",
          "732:     sid: 'session_123',",
          "733:     org_id: 'org_123',",
          "734:     role: 'member',",
          "735:     permissions: ['posts:create', 'posts:delete'],",
          "736:     entitlements: ['audit-logs'],",
          "737:   };",
          "739:   const mergedPayload = { ...defaultPayload, ...payload };",
          "741:   const secret = new TextEncoder().encode(process.env.WORKOS_COOKIE_PASSWORD as string);",
          "743:   const token = await new SignJWT(mergedPayload)",
          "744:     .setProtectedHeader({ alg: 'HS256' })",
          "745:     .setIssuedAt()",
          "746:     .setIssuer('urn:example:issuer')",
          "747:     .setExpirationTime(expired ? '0s' : '2h')",
          "748:     .sign(secret);",
          "750:   return token;",
          "751: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "jest.setup.ts||jest.setup.ts": [
          "File: jest.setup.ts -> jest.setup.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:       get: jest.fn((name: string) => cookieStore.get(name)),",
          "27:       getAll: jest.fn(() => Array.from(cookieStore.entries())),",
          "28:       set: jest.fn((name: string, value: string | { [key: string]: string | number | boolean }) =>",
          "30:       ),",
          "31:       _reset: () => {",
          "32:         cookieStore.clear();",
          "",
          "[Removed Lines]",
          "29:         cookieStore.set(name, value),",
          "",
          "[Added Lines]",
          "29:         cookieStore.set(name, {",
          "30:           name,",
          "31:           value,",
          "32:         }),",
          "",
          "---------------"
        ],
        "src/index.ts||src/index.ts": [
          "File: src/index.ts -> src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { handleAuth } from './authkit-callback-route.js';",
          "4: import { getSignInUrl, getSignUpUrl, signOut } from './auth.js';",
          "6: export {",
          "7:   handleAuth,",
          "9:   authkitMiddleware,",
          "12:   getSignInUrl,",
          "13:   getSignUpUrl,",
          "",
          "[Removed Lines]",
          "2: import { authkitMiddleware } from './middleware.js';",
          "3: import { withAuth, refreshSession, getSession } from './session.js';",
          "10:   getSession,",
          "",
          "[Added Lines]",
          "2: import { authkit, authkitMiddleware } from './middleware.js';",
          "3: import { withAuth, refreshSession } from './session.js';",
          "10:   authkit,",
          "",
          "---------------"
        ],
        "src/interfaces.ts||src/interfaces.ts": [
          "File: src/interfaces.ts -> src/interfaces.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   signUpPaths?: string[];",
          "70: }",
          "72: export interface CookieOptions {",
          "73:   path: '/';",
          "74:   httpOnly: true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: export interface AuthkitOptions {",
          "73:   debug?: boolean;",
          "74:   redirectUri?: string;",
          "75:   screenHint?: 'sign-up' | 'sign-in';",
          "76: }",
          "78: export interface AuthkitResponse {",
          "79:   session: UserInfo | NoUserInfo;",
          "80:   headers: Headers;",
          "81:   authorizationUrl?: string;",
          "82: }",
          "",
          "---------------"
        ],
        "src/middleware.ts||src/middleware.ts": [
          "File: src/middleware.ts -> src/middleware.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import { WORKOS_REDIRECT_URI } from './env-variables.js';",
          "6: export function authkitMiddleware({",
          "",
          "[Removed Lines]",
          "1: import { NextMiddleware } from 'next/server';",
          "2: import { updateSession } from './session.js';",
          "3: import { AuthkitMiddlewareOptions } from './interfaces.js';",
          "",
          "[Added Lines]",
          "1: import { NextMiddleware, NextRequest } from 'next/server';",
          "2: import { updateSessionMiddleware, updateSession } from './session.js';",
          "3: import { AuthkitMiddlewareOptions, AuthkitOptions, AuthkitResponse } from './interfaces.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:   signUpPaths = [],",
          "11: }: AuthkitMiddlewareOptions = {}): NextMiddleware {",
          "12:   return function (request) {",
          "14:   };",
          "15: }",
          "",
          "[Removed Lines]",
          "13:     return updateSession(request, debug, middlewareAuth, redirectUri, signUpPaths);",
          "",
          "[Added Lines]",
          "13:     return updateSessionMiddleware(request, debug, middlewareAuth, redirectUri, signUpPaths);",
          "17: export async function authkit(request: NextRequest, options: AuthkitOptions = {}): Promise<AuthkitResponse> {",
          "18:   return await updateSession(request, options);",
          "19: }",
          "",
          "---------------"
        ],
        "src/session.ts||src/session.ts": [
          "File: src/session.ts -> src/session.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: import { workos } from './workos.js';",
          "10: import { WORKOS_CLIENT_ID, WORKOS_COOKIE_PASSWORD, WORKOS_COOKIE_NAME, WORKOS_REDIRECT_URI } from './env-variables.js';",
          "11: import { getAuthorizationUrl } from './get-authorization-url.js';",
          "14: import { parse, tokensToRegexp } from 'path-to-regexp';",
          "15: import { redirectWithFallback } from './utils.js';",
          "17: const sessionHeaderName = 'x-workos-session';",
          "18: const middlewareHeaderName = 'x-workos-middleware';",
          "20: const signUpPathsHeaderName = 'x-sign-up-paths';",
          "22: const JWKS = createRemoteJWKSet(new URL(workos.userManagement.getJwksUrl(WORKOS_CLIENT_ID)));",
          "",
          "[Removed Lines]",
          "12: import { AccessToken, AuthkitMiddlewareAuth, NoUserInfo, Session, UserInfo } from './interfaces.js';",
          "19: const redirectUriHeaderName = 'x-redirect-uri';",
          "",
          "[Added Lines]",
          "12: import {",
          "13:   AccessToken,",
          "14:   AuthkitMiddlewareAuth,",
          "15:   AuthkitOptions,",
          "16:   AuthkitResponse,",
          "17:   NoUserInfo,",
          "18:   Session,",
          "19:   UserInfo,",
          "20: } from './interfaces.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:   });",
          "29: }",
          "32:   request: NextRequest,",
          "33:   debug: boolean,",
          "34:   middlewareAuth: AuthkitMiddlewareAuth,",
          "",
          "[Removed Lines]",
          "31: async function updateSession(",
          "",
          "[Added Lines]",
          "38: async function updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "45:     );",
          "46:   }",
          "64:   let url;",
          "67:   if (redirectUri) {",
          "69:     url = new URL(redirectUri);",
          "70:   } else {",
          "71:     url = new URL(WORKOS_REDIRECT_URI);",
          "72:   }",
          "76:   if (",
          "77:     middlewareAuth.enabled &&",
          "78:     url.pathname === request.nextUrl.pathname &&",
          "",
          "[Removed Lines]",
          "48:   const session = await getSessionFromCookie();",
          "49:   const newRequestHeaders = new Headers(request.headers);",
          "54:   newRequestHeaders.set('x-url', request.url);",
          "57:   newRequestHeaders.set(middlewareHeaderName, 'true');",
          "60:   if (signUpPaths.length > 0) {",
          "61:     newRequestHeaders.set(signUpPathsHeaderName, signUpPaths.join(','));",
          "62:   }",
          "68:     newRequestHeaders.set(redirectUriHeaderName, redirectUri);",
          "74:   newRequestHeaders.delete(sessionHeaderName);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "94:     return pathRegex.exec(request.nextUrl.pathname);",
          "95:   });",
          "108:   }",
          "115:   }",
          "165:   }",
          "180: }",
          "182: async function refreshSession(options: {",
          "",
          "[Removed Lines]",
          "98:   if (middlewareAuth.enabled && matchedPaths.length === 0 && !session) {",
          "99:     if (debug) console.log(`Unauthenticated user on protected route ${request.url}, redirecting to AuthKit`);",
          "101:     const redirectTo = await getAuthorizationUrl({",
          "102:       returnPathname: getReturnPathname(request.url),",
          "103:       redirectUri: redirectUri,",
          "104:       screenHint: getScreenHint(signUpPaths, request.nextUrl.pathname),",
          "105:     });",
          "107:     return redirectWithFallback(redirectTo);",
          "111:   if (!session) {",
          "112:     return NextResponse.next({",
          "113:       request: { headers: newRequestHeaders },",
          "114:     });",
          "117:   const hasValidSession = await verifyAccessToken(session.accessToken);",
          "118:   const cookieName = WORKOS_COOKIE_NAME || 'wos-session';",
          "120:   const nextCookies = await cookies();",
          "122:   if (hasValidSession) {",
          "123:     if (debug) console.log('Session is valid');",
          "125:     newRequestHeaders.set(sessionHeaderName, nextCookies.get(cookieName)!.value);",
          "126:     return NextResponse.next({",
          "127:       request: { headers: newRequestHeaders },",
          "128:     });",
          "129:   }",
          "131:   try {",
          "132:     if (debug) console.log(`Session invalid. Refreshing access token that ends in ${session.accessToken.slice(-10)}`);",
          "134:     const { org_id: organizationId } = decodeJwt<AccessToken>(session.accessToken);",
          "137:     const { accessToken, refreshToken, user, impersonator } = await workos.userManagement.authenticateWithRefreshToken({",
          "138:       clientId: WORKOS_CLIENT_ID,",
          "139:       refreshToken: session.refreshToken,",
          "140:       organizationId,",
          "141:     });",
          "143:     if (debug) console.log(`Refresh successful. New access token ends in ${accessToken.slice(-10)}`);",
          "146:     const encryptedSession = await encryptSession({",
          "147:       accessToken,",
          "148:       refreshToken,",
          "149:       user,",
          "150:       impersonator,",
          "151:     });",
          "153:     newRequestHeaders.set(sessionHeaderName, encryptedSession);",
          "155:     const response = NextResponse.next({",
          "156:       request: { headers: newRequestHeaders },",
          "157:     });",
          "159:     response.cookies.set(cookieName, encryptedSession, getCookieOptions(redirectUri));",
          "160:     return response;",
          "161:   } catch (e) {",
          "162:     if (debug) console.log('Failed to refresh. Deleting cookie.', e);",
          "164:     nextCookies.delete(cookieName);",
          "167:   if (middlewareAuth.enabled) {",
          "172:     if (debug) console.log('Redirecting to AuthKit to log in again.');",
          "173:     return redirectWithFallback(request.url);",
          "174:   }",
          "177:   return NextResponse.next({",
          "178:     request: { headers: newRequestHeaders },",
          "179:   });",
          "",
          "[Added Lines]",
          "84:   const { session, headers, authorizationUrl } = await updateSession(request, {",
          "85:     debug,",
          "86:     redirectUri,",
          "87:     screenHint: getScreenHint(signUpPaths, request.nextUrl.pathname),",
          "88:   });",
          "91:   if (middlewareAuth.enabled && matchedPaths.length === 0 && !session.user) {",
          "92:     if (debug) {",
          "93:       console.log(`Unauthenticated user on protected route ${request.url}, redirecting to AuthKit`);",
          "94:     }",
          "96:     return redirectWithFallback(authorizationUrl as string);",
          "100:   if (signUpPaths.length > 0) {",
          "101:     headers.set(signUpPathsHeaderName, signUpPaths.join(','));",
          "104:   return NextResponse.next({",
          "105:     request: { headers },",
          "106:   });",
          "107: }",
          "109: async function updateSession(",
          "110:   request: NextRequest,",
          "111:   options: AuthkitOptions = { debug: false },",
          "112: ): Promise<AuthkitResponse> {",
          "113:   const session = await getSessionFromCookie();",
          "115:   const newRequestHeaders = new Headers(request.headers);",
          "118:   newRequestHeaders.set(middlewareHeaderName, 'true');",
          "123:   newRequestHeaders.set('x-url', request.url);",
          "125:   newRequestHeaders.delete(sessionHeaderName);",
          "127:   if (!session) {",
          "128:     if (options.debug) {",
          "129:       console.log('No session found from cookie');",
          "130:     }",
          "132:     return {",
          "133:       session: { user: null },",
          "134:       headers: newRequestHeaders,",
          "135:       authorizationUrl: await getAuthorizationUrl({",
          "136:         returnPathname: getReturnPathname(request.url),",
          "137:         redirectUri: options.redirectUri || WORKOS_REDIRECT_URI,",
          "138:         screenHint: options.screenHint,",
          "139:       }),",
          "140:     };",
          "141:   }",
          "143:   const hasValidSession = await verifyAccessToken(session.accessToken);",
          "145:   const cookieName = WORKOS_COOKIE_NAME || 'wos-session';",
          "146:   const nextCookies = await cookies();",
          "148:   if (!hasValidSession) {",
          "149:     if (options.debug) {",
          "150:       console.log(`Session invalid. Refreshing access token that ends in ${session.accessToken.slice(-10)}`);",
          "151:     }",
          "153:     try {",
          "154:       const newSession = await refreshSession({",
          "155:         ensureSignedIn: false,",
          "156:       });",
          "158:       if (options.debug) {",
          "159:         console.log('Session successfully refreshed');",
          "160:       }",
          "162:       newRequestHeaders.set(sessionHeaderName, nextCookies.get(cookieName)!.value);",
          "164:       return {",
          "165:         session: newSession,",
          "166:         headers: newRequestHeaders,",
          "167:       };",
          "168:     } catch (e) {",
          "169:       if (options.debug) {",
          "170:         console.log('Failed to refresh. Deleting cookie.', e);",
          "171:       }",
          "173:       const nextCookies = await cookies();",
          "174:       nextCookies.delete(cookieName);",
          "176:       return {",
          "177:         session: { user: null },",
          "178:         headers: newRequestHeaders,",
          "179:         authorizationUrl: await getAuthorizationUrl({",
          "180:           returnPathname: getReturnPathname(request.url),",
          "181:         }),",
          "182:       };",
          "183:     }",
          "186:   newRequestHeaders.set(sessionHeaderName, nextCookies.get(cookieName)!.value);",
          "188:   const {",
          "189:     sid: sessionId,",
          "190:     org_id: organizationId,",
          "191:     role,",
          "192:     permissions,",
          "193:     entitlements,",
          "194:   } = decodeJwt<AccessToken>(session.accessToken);",
          "196:   return {",
          "197:     session: {",
          "198:       sessionId,",
          "199:       user: session.user,",
          "200:       organizationId,",
          "201:       role,",
          "202:       permissions,",
          "203:       entitlements,",
          "204:       impersonator: session.impersonator,",
          "205:       accessToken: session.accessToken,",
          "206:     },",
          "207:     headers: newRequestHeaders,",
          "208:   };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "339:   }",
          "340: }",
          "343:   const cookieName = WORKOS_COOKIE_NAME || 'wos-session';",
          "344:   const nextCookies = await cookies();",
          "347:   if (cookie) {",
          "349:       password: WORKOS_COOKIE_PASSWORD,",
          "350:     });",
          "351:   }",
          "352: }",
          "386: async function getSessionFromHeader(): Promise<Session | undefined> {",
          "387:   const headersList = await headers();",
          "388:   const hasMiddleware = Boolean(headersList.get(middlewareHeaderName));",
          "",
          "[Removed Lines]",
          "342: async function getSessionFromCookie(response?: NextResponse) {",
          "345:   const cookie = response ? response.cookies.get(cookieName) : nextCookies.get(cookieName);",
          "348:     return unsealData<Session>(cookie.value ?? cookie, {",
          "359: async function getSession(response?: NextResponse) {",
          "360:   const session = await getSessionFromCookie(response);",
          "362:   if (!session) return { user: null };",
          "364:   if (await verifyAccessToken(session.accessToken)) {",
          "365:     const {",
          "366:       sid: sessionId,",
          "367:       org_id: organizationId,",
          "368:       role,",
          "369:       permissions,",
          "370:       entitlements,",
          "371:     } = decodeJwt<AccessToken>(session.accessToken);",
          "373:     return {",
          "374:       sessionId,",
          "375:       user: session.user,",
          "376:       organizationId,",
          "377:       role,",
          "378:       permissions,",
          "379:       entitlements,",
          "380:       impersonator: session.impersonator,",
          "381:       accessToken: session.accessToken,",
          "382:     };",
          "383:   }",
          "384: }",
          "",
          "[Added Lines]",
          "371: async function getSessionFromCookie() {",
          "374:   const cookie = nextCookies.get(cookieName);",
          "377:     return unsealData<Session>(cookie.value, {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "417:   return screenHintPaths.length > 0 ? 'sign-up' : 'sign-in';",
          "418: }",
          "",
          "[Removed Lines]",
          "420: export { encryptSession, withAuth, refreshSession, terminateSession, updateSession, getSession };",
          "",
          "[Added Lines]",
          "417: export { encryptSession, withAuth, refreshSession, terminateSession, updateSessionMiddleware, updateSession };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ac630139003963dade01793227912e17d58d80b",
      "candidate_info": {
        "commit_hash": "4ac630139003963dade01793227912e17d58d80b",
        "repo": "workos/authkit-nextjs",
        "commit_url": "https://github.com/workos/authkit-nextjs/commit/4ac630139003963dade01793227912e17d58d80b",
        "files": [
          ".gitignore",
          ".prettierrc",
          "LICENSE",
          "README.md",
          "package-lock.json",
          "package.json",
          "src/auth.ts",
          "src/authkit-callback-route.ts",
          "src/cookie.ts",
          "src/env-variables.ts",
          "src/get-authorization-url.ts",
          "src/index.ts",
          "src/interfaces.ts",
          "src/middleware.ts",
          "src/session.ts",
          "src/workos.ts",
          "tsconfig-base.json",
          "tsconfig-cjs.json",
          "tsconfig-esm.json"
        ],
        "message": "Initial commit",
        "before_after_code_files": [
          "src/auth.ts||src/auth.ts",
          "src/authkit-callback-route.ts||src/authkit-callback-route.ts",
          "src/cookie.ts||src/cookie.ts",
          "src/env-variables.ts||src/env-variables.ts",
          "src/get-authorization-url.ts||src/get-authorization-url.ts",
          "src/index.ts||src/index.ts",
          "src/interfaces.ts||src/interfaces.ts",
          "src/middleware.ts||src/middleware.ts",
          "src/session.ts||src/session.ts",
          "src/workos.ts||src/workos.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/session.ts||src/session.ts"
          ],
          "candidate": [
            "src/session.ts||src/session.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/auth.ts||src/auth.ts": [
          "File: src/auth.ts -> src/auth.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { getAuthorizationUrl } from \"./get-authorization-url\";",
          "2: import { cookies } from \"next/headers\";",
          "3: import { cookieName } from \"./cookie\";",
          "4: import { terminateSession } from \"./session\";",
          "6: async function getSignInUrl() {",
          "7:   return getAuthorizationUrl();",
          "8: }",
          "10: async function signOut() {",
          "11:   cookies().delete(cookieName);",
          "12:   await terminateSession();",
          "13: }",
          "15: export { getSignInUrl, signOut };",
          "",
          "---------------"
        ],
        "src/authkit-callback-route.ts||src/authkit-callback-route.ts": [
          "File: src/authkit-callback-route.ts -> src/authkit-callback-route.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { NextRequest, NextResponse } from 'next/server';",
          "2: import { cookies } from 'next/headers';",
          "3: import { workos } from './workos';",
          "4: import { WORKOS_CLIENT_ID } from './env-variables';",
          "5: import { encryptSession } from './session';",
          "6: import { cookieName, cookieOptions } from './cookie';",
          "8: export async function authkitCallbackRoute(request: NextRequest) {",
          "9:   const code = request.nextUrl.searchParams.get('code');",
          "11:   if (code) {",
          "12:     try {",
          "14:       const { user, accessToken, refreshToken } = await workos.userManagement.authenticateWithCode({",
          "15:         clientId: WORKOS_CLIENT_ID,",
          "16:         code,",
          "17:       });",
          "19:       const url = request.nextUrl.clone();",
          "22:       url.searchParams.delete('code');",
          "25:       url.pathname = '/';",
          "26:       const response = NextResponse.redirect(url);",
          "28:       if (!accessToken || !refreshToken) throw new Error('response is missing tokens');",
          "32:       cookies().set(",
          "33:         cookieName,",
          "34:         await encryptSession({ accessToken, refreshToken, user }),",
          "35:         cookieOptions,",
          "36:       );",
          "38:       return response;",
          "39:     } catch (error) {",
          "40:       const errorRes = {",
          "41:         error: error instanceof Error ? error.message : String(error),",
          "42:       };",
          "44:       console.error(errorRes);",
          "46:       return errorResponse();",
          "47:     }",
          "48:   }",
          "50:   return errorResponse();",
          "51: }",
          "53: function errorResponse() {",
          "54:   return NextResponse.json(",
          "55:     {",
          "56:       error: {",
          "57:         message: 'Something went wrong',",
          "58:         description:",
          "59:           'Couldn\u2019t sign in. If you are not sure what happened, please contact your organization admin.',",
          "60:       },",
          "61:     },",
          "62:     { status: 500 },",
          "63:   );",
          "64: }",
          "",
          "---------------"
        ],
        "src/cookie.ts||src/cookie.ts": [
          "File: src/cookie.ts -> src/cookie.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: const cookieName = \"wos-session\";",
          "2: const cookieOptions = {",
          "3:   path: \"/\",",
          "4:   httpOnly: true,",
          "5:   secure: true,",
          "6:   sameSite: \"lax\" as const,",
          "7: };",
          "9: export { cookieName, cookieOptions };",
          "",
          "---------------"
        ],
        "src/env-variables.ts||src/env-variables.ts": [
          "File: src/env-variables.ts -> src/env-variables.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: function getEnvVariable(name: string) {",
          "2:   const envVariable = process.env[name];",
          "3:   if (!envVariable) {",
          "4:     throw new Error(`${name} environment variable is not set`);",
          "5:   }",
          "6:   return envVariable;",
          "7: }",
          "9: const WORKOS_CLIENT_ID = getEnvVariable(\"WORKOS_CLIENT_ID\");",
          "10: const WORKOS_API_KEY = getEnvVariable(\"WORKOS_API_KEY\");",
          "11: const WORKOS_REDIRECT_URI = getEnvVariable(\"WORKOS_REDIRECT_URI\");",
          "12: const WORKOS_COOKIE_PASSWORD = getEnvVariable(\"WORKOS_COOKIE_PASSWORD\");",
          "14: if (WORKOS_COOKIE_PASSWORD.length < 32) {",
          "15:   throw new Error(\"WORKOS_COOKIE_PASSWORD must be at least 32 characters long\");",
          "16: }",
          "18: export {",
          "19:   WORKOS_CLIENT_ID,",
          "20:   WORKOS_API_KEY,",
          "21:   WORKOS_REDIRECT_URI,",
          "22:   WORKOS_COOKIE_PASSWORD,",
          "23: };",
          "",
          "---------------"
        ],
        "src/get-authorization-url.ts||src/get-authorization-url.ts": [
          "File: src/get-authorization-url.ts -> src/get-authorization-url.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { workos } from \"./workos\";",
          "2: import { WORKOS_CLIENT_ID, WORKOS_REDIRECT_URI } from \"./env-variables\";",
          "4: async function getAuthorizationUrl() {",
          "5:   return workos.userManagement.getAuthorizationUrl({",
          "6:     provider: \"authkit\",",
          "7:     clientId: WORKOS_CLIENT_ID,",
          "8:     redirectUri: WORKOS_REDIRECT_URI,",
          "9:   });",
          "10: }",
          "12: export { getAuthorizationUrl };",
          "",
          "---------------"
        ],
        "src/index.ts||src/index.ts": [
          "File: src/index.ts -> src/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { authkitCallbackRoute } from './authkit-callback-route';",
          "2: import { authkitMiddleware } from './middleware';",
          "3: import { getUser } from './session';",
          "4: import { getSignInUrl, signOut } from './auth';",
          "6: export {",
          "7:   authkitCallbackRoute,",
          "9:   authkitMiddleware,",
          "11:   getSignInUrl,",
          "12:   getUser,",
          "13:   signOut,",
          "14: };",
          "",
          "---------------"
        ],
        "src/interfaces.ts||src/interfaces.ts": [
          "File: src/interfaces.ts -> src/interfaces.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { User } from \"@workos-inc/node\";",
          "3: export interface Session {",
          "4:   accessToken: string;",
          "5:   refreshToken: string;",
          "6:   user: User;",
          "7: }",
          "9: export interface UserInfo {",
          "10:   user: User;",
          "11:   organizationId: string;",
          "12:   sessionId: string;",
          "13: }",
          "14: export interface NoUserInfo {",
          "15:   user: null;",
          "16:   sessionId?: undefined;",
          "17: }",
          "19: export interface AccessToken {",
          "20:   sid: string;",
          "21:   org_id: string;",
          "22: }",
          "",
          "---------------"
        ],
        "src/middleware.ts||src/middleware.ts": [
          "File: src/middleware.ts -> src/middleware.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { NextMiddleware, NextResponse } from \"next/server\";",
          "2: import { updateSession } from \"./session\";",
          "4: type AuthkitMiddlewareConfig = {};",
          "6: export function authkitMiddleware({}: AuthkitMiddlewareConfig = {}): NextMiddleware {",
          "7:   return function (request, event) {",
          "8:     return updateSession(request);",
          "9:   };",
          "10: }",
          "",
          "---------------"
        ],
        "src/session.ts||src/session.ts": [
          "File: src/session.ts -> src/session.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { redirect } from \"next/navigation\";",
          "2: import { cookies, headers } from \"next/headers\";",
          "3: import { NextRequest, NextResponse } from \"next/server\";",
          "4: import { jwtVerify, createRemoteJWKSet, decodeJwt } from \"jose\";",
          "5: import { sealData, unsealData } from \"iron-session\";",
          "6: import { cookieName, cookieOptions } from \"./cookie\";",
          "7: import { workos } from \"./workos\";",
          "8: import { WORKOS_CLIENT_ID, WORKOS_COOKIE_PASSWORD } from \"./env-variables\";",
          "9: import { getAuthorizationUrl } from \"./get-authorization-url\";",
          "10: import { AccessToken, NoUserInfo, Session, UserInfo } from \"./interfaces\";",
          "12: const sessionHeaderName = \"x-workos-session\";",
          "14: const JWKS = createRemoteJWKSet(",
          "15:   new URL(workos.userManagement.getJwksUrl(WORKOS_CLIENT_ID))",
          "16: );",
          "18: async function encryptSession(session: Session) {",
          "19:   return sealData(session, { password: WORKOS_COOKIE_PASSWORD });",
          "20: }",
          "22: async function updateSession(request: NextRequest) {",
          "23:   const session = await getSessionFromCookie();",
          "26:   if (!session) {",
          "27:     return NextResponse.next();",
          "28:   }",
          "30:   const hasValidSession = await verifyAccessToken(session.accessToken);",
          "32:   const newRequestHeaders = new Headers(request.headers);",
          "34:   if (hasValidSession) {",
          "35:     console.log(\"Session is valid\");",
          "37:     newRequestHeaders.set(sessionHeaderName, cookies().get(cookieName)!.value);",
          "38:     return NextResponse.next({",
          "39:       headers: newRequestHeaders,",
          "40:     });",
          "41:   }",
          "43:   try {",
          "44:     console.log(\"Session invalid. Attempting refresh\", session.refreshToken);",
          "47:     const { accessToken, refreshToken } =",
          "48:       await workos.userManagement.authenticateWithRefreshToken({",
          "49:         clientId: WORKOS_CLIENT_ID,",
          "50:         refreshToken: session.refreshToken,",
          "51:       });",
          "53:     console.log(\"Refresh successful:\", refreshToken);",
          "56:     const encryptedSession = await encryptSession({",
          "57:       accessToken,",
          "58:       refreshToken,",
          "59:       user: session.user,",
          "60:     });",
          "62:     newRequestHeaders.set(sessionHeaderName, encryptedSession);",
          "64:     const response = NextResponse.next({",
          "65:       request: {",
          "66:         headers: newRequestHeaders,",
          "67:       },",
          "68:     });",
          "70:     response.cookies.set(cookieName, encryptedSession, cookieOptions);",
          "71:     return response;",
          "72:   } catch (e) {",
          "73:     console.warn(\"Failed to refresh\", e);",
          "74:     const response = NextResponse.next();",
          "75:     response.cookies.delete(cookieName);",
          "76:     return response;",
          "77:   }",
          "78: }",
          "80: async function getUser(options?: {",
          "81:   ensureSignedIn: false;",
          "82: }): Promise<UserInfo | NoUserInfo>;",
          "84: async function getUser(options: { ensureSignedIn: true }): Promise<UserInfo>;",
          "86: async function getUser({ ensureSignedIn = false } = {}) {",
          "87:   const session = await getSessionFromHeader();",
          "88:   if (!session) {",
          "89:     if (ensureSignedIn) {",
          "90:       redirect(await getAuthorizationUrl());",
          "91:     }",
          "92:     return { user: null };",
          "93:   }",
          "95:   const { sid: sessionId, org_id: organizationId } = decodeJwt<AccessToken>(",
          "96:     session.accessToken",
          "97:   );",
          "99:   return {",
          "100:     user: session.user,",
          "101:     sessionId,",
          "102:     organizationId,",
          "103:   };",
          "104: }",
          "106: async function terminateSession() {",
          "107:   const { sessionId } = await getUser();",
          "108:   if (sessionId) {",
          "109:     redirect(workos.userManagement.getLogoutUrl({ sessionId }));",
          "110:   }",
          "111:   redirect(\"/\");",
          "112: }",
          "114: async function verifyAccessToken(accessToken: string) {",
          "115:   try {",
          "116:     const { payload } = await jwtVerify(accessToken, JWKS);",
          "117:     return true;",
          "118:   } catch (e) {",
          "119:     console.warn(\"Failed to verify session:\", e);",
          "120:     return false;",
          "121:   }",
          "122: }",
          "124: async function getSessionFromCookie() {",
          "125:   const cookie = cookies().get(cookieName);",
          "126:   if (cookie) {",
          "127:     return unsealData<Session>(cookie.value, {",
          "128:       password: WORKOS_COOKIE_PASSWORD,",
          "129:     });",
          "130:   }",
          "131: }",
          "133: async function getSessionFromHeader(): Promise<Session | undefined> {",
          "134:   const authHeader = headers().get(sessionHeaderName);",
          "135:   if (!authHeader) return;",
          "137:   return unsealData<Session>(authHeader, { password: WORKOS_COOKIE_PASSWORD });",
          "138: }",
          "140: export { encryptSession, updateSession, getUser, terminateSession };",
          "",
          "---------------"
        ],
        "src/workos.ts||src/workos.ts": [
          "File: src/workos.ts -> src/workos.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import WorkOS from \"@workos-inc/node\";",
          "2: import { WORKOS_API_KEY } from \"./env-variables\";",
          "5: const workos = new WorkOS(WORKOS_API_KEY);",
          "7: export { workos };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce5f0a356260a372a70a9860d336a4224615ae91",
      "candidate_info": {
        "commit_hash": "ce5f0a356260a372a70a9860d336a4224615ae91",
        "repo": "workos/authkit-nextjs",
        "commit_url": "https://github.com/workos/authkit-nextjs/commit/ce5f0a356260a372a70a9860d336a4224615ae91",
        "files": [
          "__tests__/cookie.spec.ts",
          "__tests__/session.spec.ts",
          "__tests__/utils.spec.ts",
          "package.json",
          "src/cookie.ts",
          "src/session.ts",
          "src/utils.ts",
          "src/workos.ts"
        ],
        "message": "Fix cookie bugs (#171)\n\n* Fix cookie bugs\n\n* Address feedback",
        "before_after_code_files": [
          "__tests__/cookie.spec.ts||__tests__/cookie.spec.ts",
          "__tests__/session.spec.ts||__tests__/session.spec.ts",
          "__tests__/utils.spec.ts||__tests__/utils.spec.ts",
          "src/cookie.ts||src/cookie.ts",
          "src/session.ts||src/session.ts",
          "src/utils.ts||src/utils.ts",
          "src/workos.ts||src/workos.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/session.ts||src/session.ts"
          ],
          "candidate": [
            "src/session.ts||src/session.ts"
          ]
        }
      },
      "candidate_diff": {
        "__tests__/cookie.spec.ts||__tests__/cookie.spec.ts": [
          "File: __tests__/cookie.spec.ts -> __tests__/cookie.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:           domain: 'foobar.com',",
          "47:         }),",
          "48:       );",
          "49:     });",
          "50:   });",
          "51: });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:       Object.defineProperty(envVars, 'WORKOS_COOKIE_DOMAIN', { value: '' });",
          "52:       const options2 = getCookieOptions('http://example.com');",
          "53:       expect(options2).toEqual(",
          "54:         expect.objectContaining({",
          "55:           secure: false,",
          "56:           maxAge: 1000,",
          "57:           domain: '',",
          "58:         }),",
          "59:       );",
          "61:       const options3 = getCookieOptions('https://example.com', true);",
          "63:       expect(options3).toEqual(expect.stringContaining('Domain='));",
          "64:     });",
          "66:     it('should return the cookie options with expired set to true', async () => {",
          "67:       const { getCookieOptions } = await import('../src/cookie');",
          "68:       const options = getCookieOptions('http://example.com', false, true);",
          "69:       expect(options).toEqual(expect.objectContaining({ maxAge: 0 }));",
          "70:     });",
          "72:     it('should return the cookie options as a string', async () => {",
          "73:       const { getCookieOptions } = await import('../src/cookie');",
          "74:       const options = getCookieOptions('http://example.com', true, false);",
          "75:       expect(options).toEqual(",
          "76:         expect.stringContaining('Path=/; HttpOnly; Secure=false; SameSite=\"Lax\"; Max-Age=34560000; Domain=example.com'),",
          "77:       );",
          "79:       const options2 = getCookieOptions('https://example.com', true, true);",
          "80:       expect(options2).toEqual(",
          "81:         expect.stringContaining('Path=/; HttpOnly; Secure=true; SameSite=\"Lax\"; Max-Age=0; Domain=example.com'),",
          "82:       );",
          "",
          "---------------"
        ],
        "__tests__/session.spec.ts||__tests__/session.spec.ts": [
          "File: __tests__/session.spec.ts -> __tests__/session.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:     it('should attempt to refresh the session when the access token is invalid', async () => {",
          "266:       mockSession.accessToken = await generateTestToken({}, true);",
          "274:       (jwtVerify as jest.Mock).mockImplementation(() => {",
          "275:         throw new Error('Invalid token');",
          "276:       });",
          "",
          "[Removed Lines]",
          "268:       const nextCookies = await cookies();",
          "269:       nextCookies.set(",
          "270:         'wos-session',",
          "271:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "272:       );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:       const request = new NextRequest(new URL('http://example.com'));",
          "286:       const result = await updateSessionMiddleware(",
          "287:         request,",
          "288:         true,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:       request.cookies.set(",
          "281:         'wos-session',",
          "282:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "283:       );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:       mockSession.accessToken = await generateTestToken({}, true);",
          "315:       (jwtVerify as jest.Mock).mockImplementation(() => {",
          "316:         throw new Error('Invalid token');",
          "317:       });",
          "",
          "[Removed Lines]",
          "309:       const nextCookies = await cookies();",
          "310:       nextCookies.set(",
          "311:         'wos-session',",
          "312:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "313:       );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "323:       const request = new NextRequest(new URL('http://example.com'));",
          "326:         request,",
          "327:         true,",
          "328:         {",
          "",
          "[Removed Lines]",
          "325:       const result = await updateSessionMiddleware(",
          "",
          "[Added Lines]",
          "318:       request.cookies.set(",
          "319:         'wos-session',",
          "320:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "321:       );",
          "323:       const response = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "333:         [],",
          "334:       );",
          "338:       expect(console.log).toHaveBeenCalledTimes(2);",
          "339:       expect(console.log).toHaveBeenNthCalledWith(",
          "340:         1,",
          "",
          "[Removed Lines]",
          "336:       expect(result.status).toBe(200);",
          "337:       expect(nextCookies.get('wos-session')).toBeUndefined();",
          "",
          "[Added Lines]",
          "334:       expect(response.status).toBe(200);",
          "335:       expect(response.headers.get('Set-Cookie')).toContain('wos-session=;');",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "343:       expect(console.log).toHaveBeenNthCalledWith(",
          "344:         2,",
          "345:         'Failed to refresh. Deleting cookie.',",
          "347:       );",
          "348:     });",
          "",
          "[Removed Lines]",
          "346:         new Error('Failed to refresh session: Failed to refresh'),",
          "",
          "[Added Lines]",
          "344:         new Error('Failed to refresh'),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "437:           ['/protected-signup'],",
          "438:         );",
          "443:       });",
          "445:       it('should allow logged out users on unauthenticated paths', async () => {",
          "",
          "[Removed Lines]",
          "440:         console.log('result headers:', result.headers);",
          "442:         expect(result.headers.get('x-middleware-request-x-sign-up-paths')).toBe('/protected-signup');",
          "",
          "[Added Lines]",
          "438:         expect(result.headers.get('x-sign-up-paths')).toBe('/protected-signup');",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "528:         mockSession.accessToken = await generateTestToken({}, true);",
          "536:         (jwtVerify as jest.Mock).mockImplementation(() => {",
          "537:           throw new Error('Invalid token');",
          "538:         });",
          "",
          "[Removed Lines]",
          "530:         const nextCookies = await cookies();",
          "531:         nextCookies.set(",
          "532:           'wos-session',",
          "533:           await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "534:         );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "544:         const request = new NextRequest(new URL('http://example.com'));",
          "547:           request,",
          "548:           true,",
          "549:           {",
          "",
          "[Removed Lines]",
          "546:         const result = await updateSessionMiddleware(",
          "",
          "[Added Lines]",
          "536:         request.cookies.set(",
          "537:           'wos-session',",
          "538:           await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "539:         );",
          "541:         const response = await updateSessionMiddleware(",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "554:           [],",
          "555:         );",
          "559:         expect(console.log).toHaveBeenCalledTimes(3);",
          "560:         expect(console.log).toHaveBeenNthCalledWith(",
          "561:           1,",
          "",
          "[Removed Lines]",
          "557:         expect(result.status).toBe(307);",
          "558:         expect(nextCookies.get('wos-session')).toBeUndefined();",
          "",
          "[Added Lines]",
          "552:         expect(response.status).toBe(307);",
          "553:         expect(response.headers.get('Set-Cookie')).toContain('wos-session=;');",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "564:         expect(console.log).toHaveBeenNthCalledWith(",
          "565:           2,",
          "566:           'Failed to refresh. Deleting cookie.',",
          "568:         );",
          "570:         expect(console.log).toHaveBeenNthCalledWith(",
          "",
          "[Removed Lines]",
          "567:           new Error('Failed to refresh session: Failed to refresh'),",
          "",
          "[Added Lines]",
          "562:           new Error('Failed to refresh'),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "619:     });",
          "621:     it('should return a session if the session is valid', async () => {",
          "624:         'wos-session',",
          "625:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "626:       );",
          "630:       expect(result.session).toBeDefined();",
          "631:     });",
          "",
          "[Removed Lines]",
          "622:       const nextCookies = await cookies();",
          "623:       nextCookies.set(",
          "628:       const result = await updateSession(new NextRequest(new URL('http://example.com/protected')));",
          "",
          "[Added Lines]",
          "617:       const request = new NextRequest(new URL('http://example.com/protected'));",
          "618:       request.cookies.set(",
          "623:       const result = await updateSession(request);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "635:       mockSession.accessToken = await generateTestToken({}, true);",
          "644:       (jwtVerify as jest.Mock).mockImplementation(() => {",
          "645:         throw new Error('Invalid token');",
          "",
          "[Removed Lines]",
          "637:       const nextCookies = await cookies();",
          "638:       nextCookies.set(",
          "639:         'wos-session',",
          "640:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "641:       );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "652:         user: mockSession.user,",
          "653:       });",
          "656:         debug: true,",
          "657:       });",
          "661:       expect(console.log).toHaveBeenCalledWith(",
          "662:         expect.stringContaining('Session invalid. Refreshing access token that ends in'),",
          "663:       );",
          "",
          "[Removed Lines]",
          "655:       const result = await updateSession(new NextRequest(new URL('http://example.com/protected')), {",
          "659:       expect(result.session).toBeDefined();",
          "660:       expect(result.session.user).toBeDefined();",
          "",
          "[Added Lines]",
          "644:       const request = new NextRequest(new URL('http://example.com/protected'));",
          "645:       request.cookies.set(",
          "646:         'wos-session',",
          "647:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "648:       );",
          "650:       const response = await updateSession(request, {",
          "654:       expect(response.session).toBeDefined();",
          "655:       expect(response.session.user).toBeDefined();",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "668:       mockSession.accessToken = await generateTestToken({}, true);",
          "677:       (jwtVerify as jest.Mock).mockImplementation(() => {",
          "678:         throw new Error('Invalid token');",
          "",
          "[Removed Lines]",
          "670:       const nextCookies = await cookies();",
          "671:       nextCookies.set(",
          "672:         'wos-session',",
          "673:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "674:       );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "682:       jest.spyOn(workos.userManagement, 'authenticateWithRefreshToken').mockRejectedValue(new Error('Refresh failed'));",
          "685:         debug: true,",
          "686:       });",
          "690:       expect(console.log).toHaveBeenCalledWith('Failed to refresh. Deleting cookie.', expect.any(Error));",
          "691:     });",
          "692:   });",
          "",
          "[Removed Lines]",
          "684:       const result = await updateSession(new NextRequest(new URL('http://example.com/protected')), {",
          "688:       expect(result.session.user).toBeNull();",
          "689:       expect(result.authorizationUrl).toBeDefined();",
          "",
          "[Added Lines]",
          "673:       const request = new NextRequest(new URL('http://example.com/protected'));",
          "674:       request.cookies.set(",
          "675:         'wos-session',",
          "676:         await sealData(mockSession, { password: process.env.WORKOS_COOKIE_PASSWORD as string }),",
          "677:       );",
          "679:       const response = await updateSession(request, {",
          "683:       expect(response.session.user).toBeNull();",
          "684:       expect(response.authorizationUrl).toBeDefined();",
          "",
          "---------------"
        ],
        "__tests__/utils.spec.ts||__tests__/utils.spec.ts": [
          "File: __tests__/utils.spec.ts -> __tests__/utils.spec.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:       const result = redirectWithFallback(redirectUrl);",
          "20:       expect(result).toBe('redirected');",
          "22:       NextResponse.redirect = originalRedirect;",
          "23:     });",
          "25:     it('falls back to standard Response when NextResponse exists but redirect is undefined', async () => {",
          "26:       const redirectUrl = 'https://example.com';",
          "",
          "[Removed Lines]",
          "19:       expect(mockRedirect).toHaveBeenCalledWith(redirectUrl);",
          "",
          "[Added Lines]",
          "19:       expect(mockRedirect).toHaveBeenCalledWith(redirectUrl, { headers: undefined });",
          "25:     it('uses headers when provided', () => {",
          "26:       const redirectUrl = 'https://example.com';",
          "27:       const headers = new Headers();",
          "28:       headers.set('Set-Cookie', 'test=1');",
          "30:       const result = redirectWithFallback(redirectUrl, headers);",
          "32:       expect(result.headers.get('Set-Cookie')).toBe('test=1');",
          "33:     });",
          "",
          "---------------"
        ],
        "src/cookie.ts||src/cookie.ts": [
          "File: src/cookie.ts -> src/cookie.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { WORKOS_REDIRECT_URI, WORKOS_COOKIE_MAX_AGE, WORKOS_COOKIE_DOMAIN } from './env-variables.js';",
          "2: import { CookieOptions } from './interfaces.js';",
          "5:   const url = new URL(redirectUri || WORKOS_REDIRECT_URI);",
          "18: }",
          "",
          "[Removed Lines]",
          "4: export function getCookieOptions(redirectUri?: string | null): CookieOptions {",
          "7:   return {",
          "8:     path: '/',",
          "9:     httpOnly: true,",
          "10:     secure: url.protocol === 'https:',",
          "11:     sameSite: 'lax' as const,",
          "15:     maxAge: WORKOS_COOKIE_MAX_AGE ? parseInt(WORKOS_COOKIE_MAX_AGE, 10) : 60 * 60 * 24 * 400,",
          "16:     domain: WORKOS_COOKIE_DOMAIN,",
          "17:   };",
          "",
          "[Added Lines]",
          "4: export function getCookieOptions(): CookieOptions;",
          "5: export function getCookieOptions(redirectUri?: string | null): CookieOptions;",
          "6: export function getCookieOptions(redirectUri: string | null | undefined, asString: true, expired?: boolean): string;",
          "7: export function getCookieOptions(",
          "8:   redirectUri: string | null | undefined,",
          "9:   asString: false,",
          "10:   expired?: boolean,",
          "11: ): CookieOptions;",
          "12: export function getCookieOptions(",
          "13:   redirectUri?: string | null,",
          "14:   asString?: boolean,",
          "15:   expired?: boolean,",
          "16: ): CookieOptions | string;",
          "17: export function getCookieOptions(",
          "18:   redirectUri?: string | null,",
          "19:   asString: boolean = false,",
          "20:   expired: boolean = false,",
          "21: ): CookieOptions | string {",
          "24:   const maxAge = expired ? 0 : WORKOS_COOKIE_MAX_AGE ? parseInt(WORKOS_COOKIE_MAX_AGE, 10) : 60 * 60 * 24 * 400;",
          "26:   return asString",
          "27:     ? `Path=/; HttpOnly; Secure=${url.protocol === 'https:'}; SameSite=\"Lax\"; Max-Age=${maxAge}; Domain=${WORKOS_COOKIE_DOMAIN || ''}`",
          "28:     : {",
          "29:         path: '/',",
          "30:         httpOnly: true,",
          "31:         secure: url.protocol === 'https:',",
          "32:         sameSite: 'lax' as const,",
          "36:         maxAge,",
          "37:         domain: WORKOS_COOKIE_DOMAIN || '',",
          "38:       };",
          "",
          "---------------"
        ],
        "src/session.ts||src/session.ts": [
          "File: src/session.ts -> src/session.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:   AuthkitMiddlewareAuth,",
          "15:   AuthkitOptions,",
          "16:   AuthkitResponse,",
          "17:   NoUserInfo,",
          "18:   Session,",
          "19:   UserInfo,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17:   CookieOptions,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:       console.log(`Unauthenticated user on protected route ${request.url}, redirecting to AuthKit`);",
          "94:     }",
          "97:   }",
          "",
          "[Removed Lines]",
          "96:     return redirectWithFallback(authorizationUrl as string);",
          "",
          "[Added Lines]",
          "97:     return redirectWithFallback(authorizationUrl as string, headers);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:   }",
          "104:   return NextResponse.next({",
          "106:   });",
          "107: }",
          "",
          "[Removed Lines]",
          "105:     request: { headers },",
          "",
          "[Added Lines]",
          "106:     headers,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110:   request: NextRequest,",
          "111:   options: AuthkitOptions = { debug: false },",
          "112: ): Promise<AuthkitResponse> {",
          "115:   const newRequestHeaders = new Headers(request.headers);",
          "",
          "[Removed Lines]",
          "113:   const session = await getSessionFromCookie();",
          "",
          "[Added Lines]",
          "114:   const session = await getSessionFromCookie(request);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "143:   const hasValidSession = await verifyAccessToken(session.accessToken);",
          "145:   const cookieName = WORKOS_COOKIE_NAME || 'wos-session';",
          "184:   }",
          "201:       role,",
          "202:       permissions,",
          "203:       entitlements,",
          "209: }",
          "211: async function refreshSession(options: {",
          "",
          "[Removed Lines]",
          "146:   const nextCookies = await cookies();",
          "148:   if (!hasValidSession) {",
          "149:     if (options.debug) {",
          "150:       console.log(`Session invalid. Refreshing access token that ends in ${session.accessToken.slice(-10)}`);",
          "151:     }",
          "153:     try {",
          "154:       const newSession = await refreshSession({",
          "155:         ensureSignedIn: false,",
          "156:       });",
          "158:       if (options.debug) {",
          "159:         console.log('Session successfully refreshed');",
          "160:       }",
          "162:       newRequestHeaders.set(sessionHeaderName, nextCookies.get(cookieName)!.value);",
          "164:       return {",
          "165:         session: newSession,",
          "166:         headers: newRequestHeaders,",
          "167:       };",
          "168:     } catch (e) {",
          "169:       if (options.debug) {",
          "170:         console.log('Failed to refresh. Deleting cookie.', e);",
          "171:       }",
          "173:       const nextCookies = await cookies();",
          "174:       nextCookies.delete(cookieName);",
          "176:       return {",
          "177:         session: { user: null },",
          "178:         headers: newRequestHeaders,",
          "179:         authorizationUrl: await getAuthorizationUrl({",
          "180:           returnPathname: getReturnPathname(request.url),",
          "181:         }),",
          "182:       };",
          "183:     }",
          "186:   newRequestHeaders.set(sessionHeaderName, nextCookies.get(cookieName)!.value);",
          "188:   const {",
          "189:     sid: sessionId,",
          "190:     org_id: organizationId,",
          "191:     role,",
          "192:     permissions,",
          "193:     entitlements,",
          "194:   } = decodeJwt<AccessToken>(session.accessToken);",
          "196:   return {",
          "197:     session: {",
          "198:       sessionId,",
          "199:       user: session.user,",
          "200:       organizationId,",
          "204:       impersonator: session.impersonator,",
          "205:       accessToken: session.accessToken,",
          "206:     },",
          "207:     headers: newRequestHeaders,",
          "208:   };",
          "",
          "[Added Lines]",
          "148:   if (hasValidSession) {",
          "149:     newRequestHeaders.set(sessionHeaderName, request.cookies.get(cookieName)!.value);",
          "151:     const {",
          "152:       sid: sessionId,",
          "153:       org_id: organizationId,",
          "154:       role,",
          "155:       permissions,",
          "156:       entitlements,",
          "157:     } = decodeJwt<AccessToken>(session.accessToken);",
          "159:     return {",
          "160:       session: {",
          "161:         sessionId,",
          "162:         user: session.user,",
          "163:         organizationId,",
          "164:         role,",
          "165:         permissions,",
          "166:         entitlements,",
          "167:         impersonator: session.impersonator,",
          "168:         accessToken: session.accessToken,",
          "169:       },",
          "170:       headers: newRequestHeaders,",
          "171:     };",
          "172:   }",
          "174:   if (options.debug) {",
          "175:     console.log(`Session invalid. Refreshing access token that ends in ${session.accessToken.slice(-10)}`);",
          "178:   try {",
          "179:     const { org_id: organizationIdFromAccessToken } = decodeJwt<AccessToken>(session.accessToken);",
          "181:     const { accessToken, refreshToken, user, impersonator } = await workos.userManagement.authenticateWithRefreshToken({",
          "182:       clientId: WORKOS_CLIENT_ID,",
          "183:       refreshToken: session.refreshToken,",
          "184:       organizationId: organizationIdFromAccessToken,",
          "185:     });",
          "187:     if (options.debug) {",
          "188:       console.log('Session successfully refreshed');",
          "189:     }",
          "191:     const encryptedSession = await encryptSession({",
          "192:       accessToken,",
          "193:       refreshToken,",
          "194:       user,",
          "195:       impersonator,",
          "196:     });",
          "198:     newRequestHeaders.append('Set-Cookie', `${cookieName}=${encryptedSession}; ${getCookieOptions(request.url, true)}`);",
          "199:     newRequestHeaders.set(sessionHeaderName, encryptedSession);",
          "201:     const {",
          "202:       sid: sessionId,",
          "203:       org_id: organizationId,",
          "207:     } = decodeJwt<AccessToken>(accessToken);",
          "209:     return {",
          "210:       session: {",
          "211:         sessionId,",
          "212:         user,",
          "213:         organizationId,",
          "214:         role,",
          "215:         permissions,",
          "216:         entitlements,",
          "217:         impersonator,",
          "218:         accessToken,",
          "219:       },",
          "220:       headers: newRequestHeaders,",
          "221:     };",
          "222:   } catch (e) {",
          "223:     if (options.debug) {",
          "224:       console.log('Failed to refresh. Deleting cookie.', e);",
          "225:     }",
          "228:     const deleteCookie = `${cookieName}=; Expires=${new Date(0).toUTCString()}; ${getCookieOptions(request.url, true, true)}`;",
          "229:     newRequestHeaders.append('Set-Cookie', deleteCookie);",
          "231:     return {",
          "232:       session: { user: null },",
          "233:       headers: newRequestHeaders,",
          "234:       authorizationUrl: await getAuthorizationUrl({",
          "235:         returnPathname: getReturnPathname(request.url),",
          "236:       }),",
          "237:     };",
          "238:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "260:   const url = headersList.get('x-url');",
          "262:   const nextCookies = await cookies();",
          "265:   const {",
          "266:     sid: sessionId,",
          "",
          "[Removed Lines]",
          "263:   nextCookies.set(cookieName, encryptedSession, getCookieOptions(url));",
          "",
          "[Added Lines]",
          "293:   nextCookies.set(cookieName, encryptedSession, getCookieOptions(url) as CookieOptions);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "368:   }",
          "369: }",
          "372:   const cookieName = WORKOS_COOKIE_NAME || 'wos-session';",
          "376:   if (cookie) {",
          "377:     return unsealData<Session>(cookie.value, {",
          "",
          "[Removed Lines]",
          "371: async function getSessionFromCookie() {",
          "373:   const nextCookies = await cookies();",
          "374:   const cookie = nextCookies.get(cookieName);",
          "",
          "[Added Lines]",
          "401: async function getSessionFromCookie(request?: NextRequest) {",
          "403:   let cookie;",
          "405:   if (request) {",
          "406:     cookie = request.cookies.get(cookieName);",
          "407:   } else {",
          "408:     const nextCookies = await cookies();",
          "409:     cookie = nextCookies.get(cookieName);",
          "410:   }",
          "",
          "---------------"
        ],
        "src/utils.ts||src/utils.ts": [
          "File: src/utils.ts -> src/utils.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { NextResponse } from 'next/server';",
          "6:   return NextResponse?.redirect",
          "9: }",
          "11: export function errorResponseWithFallback(errorBody: { error: { message: string; description: string } }) {",
          "",
          "[Removed Lines]",
          "3: export function redirectWithFallback(redirectUri: string) {",
          "7:     ? NextResponse.redirect(redirectUri)",
          "8:     : new Response(null, { status: 307, headers: { Location: redirectUri } });",
          "",
          "[Added Lines]",
          "3: export function redirectWithFallback(redirectUri: string, headers?: Headers) {",
          "4:   const newHeaders = headers ? new Headers(headers) : new Headers();",
          "5:   newHeaders.set('Location', redirectUri);",
          "10:     ? NextResponse.redirect(redirectUri, { headers })",
          "11:     : new Response(null, { status: 307, headers: newHeaders });",
          "",
          "---------------"
        ],
        "src/workos.ts||src/workos.ts": [
          "File: src/workos.ts -> src/workos.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { WorkOS } from '@workos-inc/node';",
          "2: import { WORKOS_API_HOSTNAME, WORKOS_API_KEY, WORKOS_API_HTTPS, WORKOS_API_PORT } from './env-variables.js';",
          "6: const options = {",
          "7:   apiHostname: WORKOS_API_HOSTNAME,",
          "",
          "[Removed Lines]",
          "4: export const VERSION = '1.0.0';",
          "",
          "[Added Lines]",
          "4: export const VERSION = '1.0.1';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3052db790eb7c8872ea718566ab16e37c652660a",
      "candidate_info": {
        "commit_hash": "3052db790eb7c8872ea718566ab16e37c652660a",
        "repo": "workos/authkit-nextjs",
        "commit_url": "https://github.com/workos/authkit-nextjs/commit/3052db790eb7c8872ea718566ab16e37c652660a",
        "files": [
          "package.json",
          "src/session.ts",
          "src/workos.ts"
        ],
        "message": "Redirect if refresh failed (#143)\n\n* Redirect if refresh failed\n\n* version bump\n\n* Put back to 302\n\n* back to 307",
        "before_after_code_files": [
          "src/session.ts||src/session.ts",
          "src/workos.ts||src/workos.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/session.ts||src/session.ts"
          ],
          "candidate": [
            "src/session.ts||src/session.ts"
          ]
        }
      },
      "candidate_diff": {
        "src/session.ts||src/session.ts": [
          "File: src/session.ts -> src/session.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:     return response;",
          "161:   } catch (e) {",
          "162:     if (debug) console.log('Failed to refresh. Deleting cookie and redirecting.', e);",
          "168:   }",
          "169: }",
          "171: async function refreshSession(options: {",
          "",
          "[Removed Lines]",
          "163:     const response = NextResponse.next({",
          "164:       request: { headers: newRequestHeaders },",
          "165:     });",
          "166:     response.cookies.delete(cookieName);",
          "167:     return response;",
          "",
          "[Added Lines]",
          "164:     nextCookies.delete(cookieName);",
          "171:   return NextResponse?.redirect",
          "172:     ? NextResponse.redirect(request.url)",
          "173:     : new Response(null, {",
          "174:         status: 307,",
          "175:         headers: {",
          "176:           Location: request.url,",
          "177:         },",
          "178:       });",
          "",
          "---------------"
        ],
        "src/workos.ts||src/workos.ts": [
          "File: src/workos.ts -> src/workos.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { WorkOS } from '@workos-inc/node';",
          "2: import { WORKOS_API_HOSTNAME, WORKOS_API_KEY, WORKOS_API_HTTPS, WORKOS_API_PORT } from './env-variables.js';",
          "6: const options = {",
          "7:   apiHostname: WORKOS_API_HOSTNAME,",
          "",
          "[Removed Lines]",
          "4: export const VERSION = '0.16.0';",
          "",
          "[Added Lines]",
          "4: export const VERSION = '0.16.1';",
          "",
          "---------------"
        ]
      }
    }
  ]
}