{
  "cve_id": "CVE-2024-51491",
  "cve_desc": "notion-go is a collection of libraries for supporting sign and verify OCI artifacts. Based on Notary Project specifications. The issue was identified during Quarkslab's security audit on the Certificate Revocation List (CRL) based revocation check feature.\nAfter retrieving the CRL, notation-go attempts to update the CRL cache using the os.Rename method. However, this operation may fail due to operating system-specific limitations, particularly when the source and destination paths are on different mount points. This failure could lead to an unexpected program termination. In method `crl.(*FileCache).Set`, a temporary file is created in the OS dedicated area (like /tmp for, usually, Linux/Unix). The file is written and then it is tried to move it to the dedicated `notation` cache directory thanks `os.Rename`. As specified in Go documentation, OS specific restriction may apply. When used with Linux OS, it is relying on rename syscall from the libc and as per the documentation, moving a file to a different mountpoint raises an EXDEV error, interpreted as Cross device link not permitted error. Some Linux distribution, like RedHat use a dedicated filesystem (tmpfs), mounted on a specific mountpoint (usually /tmp) for temporary files. When using such OS, revocation check based on CRL will repeatedly crash notation. As a result the signature verification process is aborted as process crashes. This issue has been addressed in version 1.3.0-rc.2 and all users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "notaryproject/notation-go",
  "patch_hash": "3c3302258ad510fbca2f8a73731569d91f07d196",
  "patch_info": {
    "commit_hash": "3c3302258ad510fbca2f8a73731569d91f07d196",
    "repo": "notaryproject/notation-go",
    "commit_url": "https://github.com/notaryproject/notation-go/commit/3c3302258ad510fbca2f8a73731569d91f07d196",
    "files": [
      "internal/file/file.go",
      "internal/file/file_test.go",
      "verifier/crl/crl.go"
    ],
    "message": "fix: OS error when setting CRL cache leads to denial of signature verification\n\nSigned-off-by: Junjie Gao <junjiegao@microsoft.com>\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
    "before_after_code_files": [
      "internal/file/file.go||internal/file/file.go",
      "internal/file/file_test.go||internal/file/file_test.go",
      "verifier/crl/crl.go||verifier/crl/crl.go"
    ]
  },
  "patch_diff": {
    "internal/file/file.go||internal/file/file.go": [
      "File: internal/file/file.go -> internal/file/file.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "124:  if err != nil {",
      "125:   return fmt.Errorf(\"failed to create temp file: %w\", err)",
      "126:  }",
      "",
      "[Removed Lines]",
      "122: func WriteFile(path string, content []byte) (writeErr error) {",
      "123:  tempFile, err := os.CreateTemp(\"\", tempFileNamePrefix)",
      "",
      "[Added Lines]",
      "129: func WriteFile(tempDir, path string, content []byte) (writeErr error) {",
      "130:  tempFile, err := os.CreateTemp(tempDir, tempFileNamePrefix)",
      "",
      "---------------"
    ],
    "internal/file/file_test.go||internal/file/file_test.go": [
      "File: internal/file/file_test.go -> internal/file/file_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "30:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "31:    t.Fatal(err)",
      "32:   }",
      "34:    t.Fatal(err)",
      "35:   }",
      "",
      "[Removed Lines]",
      "33:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "33:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "52:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "53:    t.Fatal(err)",
      "54:   }",
      "56:    t.Fatal(err)",
      "57:   }",
      "",
      "[Removed Lines]",
      "55:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "55:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "87:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "88:    t.Fatal(err)",
      "89:   }",
      "91:    t.Fatal(err)",
      "92:   }",
      "",
      "[Removed Lines]",
      "90:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "90:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "113:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "114:    t.Fatal(err)",
      "115:   }",
      "117:    t.Fatal(err)",
      "118:   }",
      "",
      "[Removed Lines]",
      "116:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "116:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "139:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "140:    t.Fatal(err)",
      "141:   }",
      "143:    t.Fatal(err)",
      "144:   }",
      "",
      "[Removed Lines]",
      "142:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "142:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "159:   if err := os.MkdirAll(filepath.Dir(filename), 0700); err != nil {",
      "160:    t.Fatal(err)",
      "161:   }",
      "163:    t.Fatal(err)",
      "164:   }",
      "",
      "[Removed Lines]",
      "162:   if err := WriteFile(filename, data); err != nil {",
      "",
      "[Added Lines]",
      "162:   if err := WriteFile(tempDir, filename, data); err != nil {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "192:   if err != nil {",
      "193:    t.Fatal(err)",
      "194:   }",
      "196:   if err == nil || !strings.Contains(err.Error(), \"permission denied\") {",
      "197:    t.Fatalf(\"expected permission denied error, but got %s\", err)",
      "198:   }",
      "",
      "[Removed Lines]",
      "195:   err = WriteFile(filepath.Join(tempDir, \"testFile\"), content)",
      "",
      "[Added Lines]",
      "195:   err = WriteFile(tempDir, filepath.Join(tempDir, \"testFile\"), content)",
      "",
      "---------------"
    ],
    "verifier/crl/crl.go||verifier/crl/crl.go": [
      "File: verifier/crl/crl.go -> verifier/crl/crl.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "144:  if err != nil {",
      "145:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
      "146:  }",
      "148:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
      "149:  }",
      "150:  return nil",
      "",
      "[Removed Lines]",
      "147:  if err := file.WriteFile(filepath.Join(c.root, c.fileName(url)), contentBytes); err != nil {",
      "",
      "[Added Lines]",
      "147:  if err := file.WriteFile(c.root, filepath.Join(c.root, c.fileName(url)), contentBytes); err != nil {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0c84a376a5858518d8bc329912792836d7e23323",
      "candidate_info": {
        "commit_hash": "0c84a376a5858518d8bc329912792836d7e23323",
        "repo": "notaryproject/notation-go",
        "commit_url": "https://github.com/notaryproject/notation-go/commit/0c84a376a5858518d8bc329912792836d7e23323",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "build(deps): bump golang.org/x/crypto from 0.27.0 to 0.28.0 (#468)\n\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/notaryproject/notation-go/pull/487"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:  github.com/opencontainers/go-digest v1.0.0",
          "11:  github.com/opencontainers/image-spec v1.1.0",
          "12:  github.com/veraison/go-cose v1.3.0",
          "14:  golang.org/x/mod v0.21.0",
          "15:  oras.land/oras-go/v2 v2.5.0",
          "16: )",
          "",
          "[Removed Lines]",
          "13:  golang.org/x/crypto v0.27.0",
          "",
          "[Added Lines]",
          "13:  golang.org/x/crypto v0.28.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: golang.org/x/crypto v0.6.0/go.mod h1:OFC/31mSvZgRz0V1QTNCzfAI1aIRzbiufJtkMIlEp58=",
          "63: golang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=",
          "64: golang.org/x/crypto v0.21.0/go.mod h1:0BP7YvVV9gBbVKyeTG0Gyn+gZm94bibOW5BjDEYAOMs=",
          "67: golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=",
          "68: golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=",
          "69: golang.org/x/mod v0.21.0 h1:vvrHzRwRfVKSiLrG+d4FMl/Qi4ukBCE6kZlTUkDYRT0=",
          "",
          "[Removed Lines]",
          "65: golang.org/x/crypto v0.27.0 h1:GXm2NjJrPaiv/h1tb2UH8QfgC/hOf/+z0p6PT8o1w7A=",
          "66: golang.org/x/crypto v0.27.0/go.mod h1:1Xngt8kV6Dvbssa53Ziq6Eqn0HqbZi5Z6R0ZpwQzt70=",
          "",
          "[Added Lines]",
          "65: golang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=",
          "66: golang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e277e402ba3b99089acc9a3ebf3fcd11271d8cf2",
      "candidate_info": {
        "commit_hash": "e277e402ba3b99089acc9a3ebf3fcd11271d8cf2",
        "repo": "notaryproject/notation-go",
        "commit_url": "https://github.com/notaryproject/notation-go/commit/e277e402ba3b99089acc9a3ebf3fcd11271d8cf2",
        "files": [
          "verifier/crl/crl.go",
          "verifier/crl/crl_test.go"
        ],
        "message": "fix: crl cache log and err msg (#475)\n\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
        "before_after_code_files": [
          "verifier/crl/crl.go||verifier/crl/crl.go",
          "verifier/crl/crl_test.go||verifier/crl/crl_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/notaryproject/notation-go/pull/487"
        ],
        "olp_code_files": {
          "patch": [
            "verifier/crl/crl.go||verifier/crl/crl.go"
          ],
          "candidate": [
            "verifier/crl/crl.go||verifier/crl/crl.go"
          ]
        }
      },
      "candidate_diff": {
        "verifier/crl/crl.go||verifier/crl/crl.go": [
          "File: verifier/crl/crl.go -> verifier/crl/crl.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:    logger.Debugf(\"CRL file cache miss. Key %q does not exist\", url)",
          "89:    return nil, corecrl.ErrCacheMiss",
          "90:   }",
          "92:   return nil, fmt.Errorf(\"failed to get crl bundle from file cache with key %q: %w\", url, err)",
          "93:  }",
          "96:  var content fileCacheContent",
          "97:  if err := json.Unmarshal(contentBytes, &content); err != nil {",
          "99:   return nil, fmt.Errorf(\"failed to decode file retrieved from file cache: %w\", err)",
          "100:  }",
          "101:  var bundle corecrl.Bundle",
          "102:  bundle.BaseCRL, err = x509.ParseRevocationList(content.BaseCRL)",
          "103:  if err != nil {",
          "105:   return nil, fmt.Errorf(\"failed to parse base CRL of file retrieved from file cache: %w\", err)",
          "106:  }",
          "107:  if content.DeltaCRL != nil {",
          "108:   bundle.DeltaCRL, err = x509.ParseRevocationList(content.DeltaCRL)",
          "109:   if err != nil {",
          "111:    return nil, fmt.Errorf(\"failed to parse delta CRL of file retrieved from file cache: %w\", err)",
          "112:   }",
          "113:  }",
          "116:  if err := checkExpiry(ctx, bundle.BaseCRL.NextUpdate); err != nil {",
          "119:  }",
          "120:  if bundle.DeltaCRL != nil {",
          "121:   if err := checkExpiry(ctx, bundle.DeltaCRL.NextUpdate); err != nil {",
          "124:   }",
          "125:  }",
          "",
          "[Removed Lines]",
          "91:   logger.Debugf(\"failed to get crl bundle from file cache with key %q: %w\", url, err)",
          "98:   logger.Debugf(\"failed to decode file retrieved from file cache: %w\", err)",
          "104:   logger.Debugf(\"failed to parse base CRL of file retrieved from file cache: %w\", err)",
          "110:    logger.Debugf(\"failed to parse delta CRL of file retrieved from file cache: %w\", err)",
          "117:   logger.Debugf(\"check BaseCRL expiry failed: %w\", err)",
          "118:   return nil, err",
          "122:    logger.Debugf(\"check DeltaCRL expiry failed: %w\", err)",
          "123:    return nil, err",
          "",
          "[Added Lines]",
          "113:   return nil, fmt.Errorf(\"check BaseCRL expiry failed: %w\", err)",
          "117:    return nil, fmt.Errorf(\"check DeltaCRL expiry failed: %w\", err)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:  logger.Debugf(\"Storing crl bundle to file cache with key %q ...\", url)",
          "135:  if bundle == nil {",
          "137:   return errors.New(\"failed to store crl bundle in file cache: bundle cannot be nil\")",
          "138:  }",
          "139:  if bundle.BaseCRL == nil {",
          "141:   return errors.New(\"failed to store crl bundle in file cache: bundle BaseCRL cannot be nil\")",
          "142:  }",
          "",
          "[Removed Lines]",
          "136:   logger.Debugln(\"failed to store crl bundle in file cache: bundle cannot be nil\")",
          "140:   logger.Debugln(\"failed to store crl bundle in file cache: bundle BaseCRL cannot be nil\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150:  }",
          "151:  contentBytes, err := json.Marshal(content)",
          "152:  if err != nil {",
          "154:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
          "155:  }",
          "156:  if err := file.WriteFile(c.root, filepath.Join(c.root, c.fileName(url)), contentBytes); err != nil {",
          "158:   return fmt.Errorf(\"failed to store crl bundle in file cache: %w\", err)",
          "159:  }",
          "160:  return nil",
          "",
          "[Removed Lines]",
          "153:   logger.Debugf(\"failed to store crl bundle in file cache: %w\", err)",
          "157:   logger.Debugf(\"failed to store crl bundle in file cache: %w\", err)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "verifier/crl/crl_test.go||verifier/crl/crl_test.go": [
          "File: verifier/crl/crl_test.go -> verifier/crl/crl_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "270:    t.Fatal(err)",
          "271:   }",
          "272:   _, err = cache.Get(ctx, \"expiredKey\")",
          "274:   if err == nil || err.Error() != expectedErrMsg {",
          "275:    t.Fatalf(\"expected %s, but got %v\", expectedErrMsg, err)",
          "276:   }",
          "",
          "[Removed Lines]",
          "273:   expectedErrMsg := \"crl bundle retrieved from file cache does not contain valid NextUpdate\"",
          "",
          "[Added Lines]",
          "273:   expectedErrMsg := \"check BaseCRL expiry failed: crl bundle retrieved from file cache does not contain valid NextUpdate\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d66c7ab85786ab3c0ce22caed90ccd34a024dff0",
      "candidate_info": {
        "commit_hash": "d66c7ab85786ab3c0ce22caed90ccd34a024dff0",
        "repo": "notaryproject/notation-go",
        "commit_url": "https://github.com/notaryproject/notation-go/commit/d66c7ab85786ab3c0ce22caed90ccd34a024dff0",
        "files": [
          "verifier/testdata/truststore/x509/tsa/test-mismatch/DigiCertTSARootSHA384.cer",
          "verifier/testdata/truststore/x509/tsa/test-nonCA/wabbit-networks.io.crt",
          "verifier/testdata/truststore/x509/tsa/test-nonSelfIssued/nonSelfIssued.crt",
          "verifier/truststore/truststore.go",
          "verifier/truststore/truststore_test.go"
        ],
        "message": "fix: added tsa trust store root cert validation (#471)\n\nThis PR adds tsa trust store root cert validation while getting\ncertificates from trust store. This is to fail fast if cert in TSA trust\nstore is not a root CA certificate.\n\nResolves #470\n\n---------\n\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
        "before_after_code_files": [
          "verifier/truststore/truststore.go||verifier/truststore/truststore.go",
          "verifier/truststore/truststore_test.go||verifier/truststore/truststore_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/notaryproject/notation-go/pull/487"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "verifier/truststore/truststore.go||verifier/truststore/truststore.go": [
          "File: verifier/truststore/truststore.go -> verifier/truststore/truststore.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: package truststore",
          "17: import (",
          "18:  \"context\"",
          "19:  \"crypto/x509\"",
          "20:  \"errors\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  \"bytes\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:   if err := ValidateCertificates(certs); err != nil {",
          "107:    return nil, CertificateError{InnerError: err, Msg: fmt.Sprintf(\"failed to validate the trusted certificate %s in trust store %s of type %s\", certFileName, namedStore, storeType)}",
          "108:   }",
          "109:   certificates = append(certificates, certs...)",
          "110:  }",
          "111:  if len(certificates) < 1 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:   if storeType == TypeTSA {",
          "112:    for _, cert := range certs {",
          "113:     if err := isRootCACertificate(cert); err != nil {",
          "114:      return nil, CertificateError{InnerError: err, Msg: fmt.Sprintf(\"trusted certificate %s in trust store %s of type %s is invalid: %v\", certFileName, namedStore, storeType, err.Error())}",
          "115:     }",
          "116:    }",
          "117:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137: func isValidStoreType(storeType Type) bool {",
          "138:  return slices.Contains(Types, storeType)",
          "139: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151: func isRootCACertificate(cert *x509.Certificate) error {",
          "152:  if err := cert.CheckSignatureFrom(cert); err != nil {",
          "153:   return fmt.Errorf(\"certificate with subject %q is not a root CA certificate: %w\", cert.Subject, err)",
          "154:  }",
          "155:  if !bytes.Equal(cert.RawSubject, cert.RawIssuer) {",
          "156:   return fmt.Errorf(\"certificate with subject %q is not a root CA certificate: issuer (%s) and subject (%s) are not the same\", cert.Subject, cert.Issuer, cert.Subject)",
          "157:  }",
          "158:  return nil",
          "159: }",
          "",
          "---------------"
        ],
        "verifier/truststore/truststore_test.go||verifier/truststore/truststore_test.go": [
          "File: verifier/truststore/truststore_test.go -> verifier/truststore/truststore_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:   t.Fatalf(\"leaf cert in a trust store should return error %q, got: %v\", expectedErr, err)",
          "99:  }",
          "100: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: func TestGetCertFromValidTsaTrustStore(t *testing.T) {",
          "104:  _, err := trustStore.GetCertificates(context.Background(), \"tsa\", \"test-timestamp\")",
          "105:  if err != nil {",
          "106:   t.Fatalf(\"expected nil error, but got %s\", err)",
          "107:  }",
          "108: }",
          "110: func TestGetCertFromInvalidTsaTrustStore(t *testing.T) {",
          "111:  t.Run(\"non CA certificate\", func(t *testing.T) {",
          "113:   expectedErrMsg := `trusted certificate wabbit-networks.io.crt in trust store test-nonCA of type tsa is invalid: certificate with subject \"CN=wabbit-networks.io,O=Notary,L=Seattle,ST=WA,C=US\" is not a root CA certificate: x509: invalid signature: parent certificate cannot sign this kind of certificate`",
          "114:   _, err := trustStore.GetCertificates(context.Background(), \"tsa\", \"test-nonCA\")",
          "115:   if err == nil || err.Error() != expectedErrMsg {",
          "116:    t.Fatalf(\"expected error: %s, but got %s\", expectedErrMsg, err)",
          "117:   }",
          "118:  })",
          "120:  t.Run(\"not self-issued\", func(t *testing.T) {",
          "122:   expectedErrMsg := `trusted certificate nonSelfIssued.crt in trust store test-nonSelfIssued of type tsa is invalid: certificate with subject \"CN=Notation Test Revokable RSA Chain Cert 2,O=Notary,L=Seattle,ST=WA,C=US\" is not a root CA certificate: issuer (CN=Notation Test Revokable RSA Chain Cert Root,O=Notary,L=Seattle,ST=WA,C=US) and subject (CN=Notation Test Revokable RSA Chain Cert 2,O=Notary,L=Seattle,ST=WA,C=US) are not the same`",
          "123:   _, err := trustStore.GetCertificates(context.Background(), \"tsa\", \"test-nonSelfIssued\")",
          "124:   if err == nil || err.Error() != expectedErrMsg {",
          "125:    t.Fatalf(\"expected error: %s, but got %s\", expectedErrMsg, err)",
          "126:   }",
          "127:  })",
          "128: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29912acbfea764a212720e40b599c63519073ee3",
      "candidate_info": {
        "commit_hash": "29912acbfea764a212720e40b599c63519073ee3",
        "repo": "notaryproject/notation-go",
        "commit_url": "https://github.com/notaryproject/notation-go/commit/29912acbfea764a212720e40b599c63519073ee3",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "build(deps): bump github.com/veraison/go-cose from 1.1.0 to 1.3.0 (#467)\n\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/notaryproject/notation-go/pull/487"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  github.com/notaryproject/tspclient-go v0.2.0",
          "10:  github.com/opencontainers/go-digest v1.0.0",
          "11:  github.com/opencontainers/image-spec v1.1.0",
          "13:  golang.org/x/crypto v0.27.0",
          "14:  golang.org/x/mod v0.21.0",
          "15:  oras.land/oras-go/v2 v2.5.0",
          "",
          "[Removed Lines]",
          "12:  github.com/veraison/go-cose v1.1.0",
          "",
          "[Added Lines]",
          "12:  github.com/veraison/go-cose v1.3.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=",
          "53: github.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKsk=",
          "54: github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=",
          "57: github.com/x448/float16 v0.8.4 h1:qLwI1I70+NjRFUR3zs1JPUCgaCXSh3SW62uAKT1mSBM=",
          "58: github.com/x448/float16 v0.8.4/go.mod h1:14CWIYCyZA/cWjXOioeEpHeN/83MdbZDRQHoFcYsOfg=",
          "59: github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=",
          "",
          "[Removed Lines]",
          "55: github.com/veraison/go-cose v1.1.0 h1:AalPS4VGiKavpAzIlBjrn7bhqXiXi4jbMYY/2+UC+4o=",
          "56: github.com/veraison/go-cose v1.1.0/go.mod h1:7ziE85vSq4ScFTg6wyoMXjucIGOf4JkFEZi/an96Ct4=",
          "",
          "[Added Lines]",
          "55: github.com/veraison/go-cose v1.3.0 h1:2/H5w8kdSpQJyVtIhx8gmwPJ2uSz1PkyWFx0idbd7rk=",
          "56: github.com/veraison/go-cose v1.3.0/go.mod h1:df09OV91aHoQWLmy1KsDdYiagtXgyAwAl8vFeFn1gMc=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c32fb1aa7a5638756820777e2ac1f5129fde27e4",
      "candidate_info": {
        "commit_hash": "c32fb1aa7a5638756820777e2ac1f5129fde27e4",
        "repo": "notaryproject/notation-go",
        "commit_url": "https://github.com/notaryproject/notation-go/commit/c32fb1aa7a5638756820777e2ac1f5129fde27e4",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "build(deps): bump github.com/golang-jwt/jwt/v4 from 4.5.0 to 4.5.1 (#474)\n\nSigned-off-by: Patrick Zheng <patrickzheng@microsoft.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/notaryproject/notation-go/pull/487"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  github.com/Azure/go-ntlmssp v0.0.0-20221128193559-754e69321358 // indirect",
          "20:  github.com/fxamacker/cbor/v2 v2.7.0 // indirect",
          "21:  github.com/go-asn1-ber/asn1-ber v1.5.5 // indirect",
          "23:  github.com/google/uuid v1.6.0 // indirect",
          "24:  github.com/x448/float16 v0.8.4 // indirect",
          "25:  golang.org/x/sync v0.6.0 // indirect",
          "",
          "[Removed Lines]",
          "22:  github.com/golang-jwt/jwt/v4 v4.5.0 // indirect",
          "",
          "[Added Lines]",
          "22:  github.com/golang-jwt/jwt/v4 v4.5.1 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: github.com/go-asn1-ber/asn1-ber v1.5.5/go.mod h1:hEBeB/ic+5LoWskz+yKT7vGhhPYkProFKoKdwZRWMe0=",
          "12: github.com/go-ldap/ldap/v3 v3.4.8 h1:loKJyspcRezt2Q3ZRMq2p/0v8iOurlmeXDPw6fikSvQ=",
          "13: github.com/go-ldap/ldap/v3 v3.4.8/go.mod h1:qS3Sjlu76eHfHGpUdWkAXQTw4beih+cHsco2jXlIXrk=",
          "16: github.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=",
          "17: github.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=",
          "18: github.com/gorilla/securecookie v1.1.1/go.mod h1:ra0sb63/xPlUeL+yeDciTfxMRAA+MP+HVt/4epWDjd4=",
          "",
          "[Removed Lines]",
          "14: github.com/golang-jwt/jwt/v4 v4.5.0 h1:7cYmW1XlMY7h7ii7UhUyChSgS5wUJEnm9uZVTGqOWzg=",
          "15: github.com/golang-jwt/jwt/v4 v4.5.0/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=",
          "",
          "[Added Lines]",
          "14: github.com/golang-jwt/jwt/v4 v4.5.1 h1:JdqV9zKUdtaa9gdPlywC3aeoEsR681PlKC+4F5gQgeo=",
          "15: github.com/golang-jwt/jwt/v4 v4.5.1/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=",
          "",
          "---------------"
        ]
      }
    }
  ]
}