{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "22f6e0f2f4cd922af1a24626e03e9b5b76d89002",
      "candidate_info": {
        "commit_hash": "22f6e0f2f4cd922af1a24626e03e9b5b76d89002",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/22f6e0f2f4cd922af1a24626e03e9b5b76d89002",
        "files": [
          "src/lib/components/layout/Sidebar/RecursiveFolder.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/layout/Sidebar/RecursiveFolder.svelte||src/lib/components/layout/Sidebar/RecursiveFolder.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/layout/Sidebar/RecursiveFolder.svelte||src/lib/components/layout/Sidebar/RecursiveFolder.svelte": [
          "File: src/lib/components/layout/Sidebar/RecursiveFolder.svelte -> src/lib/components/layout/Sidebar/RecursiveFolder.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:   console.log('Edit');",
          "305:   await tick();",
          "306:   name = folders[folderId].name;",
          "309:   await tick();",
          "319:  };",
          "321:  const exportHandler = async () => {",
          "",
          "[Removed Lines]",
          "307:   edit = true;",
          "312:   setTimeout(() => {",
          "313:    const input = document.getElementById(`folder-${folderId}-input`);",
          "314:    if (input) {",
          "315:     input.focus();",
          "316:     input.select();",
          "317:    }",
          "318:   }, 100);",
          "",
          "[Added Lines]",
          "308:   edit = true;",
          "311:   const input = document.getElementById(`folder-${folderId}-input`);",
          "313:   if (input) {",
          "314:    input.focus();",
          "315:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404:        id=\"folder-{folderId}-input\"",
          "405:        type=\"text\"",
          "406:        bind:value={name}",
          "407:        on:blur={() => {",
          "408:         nameUpdateHandler();",
          "409:         edit = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:        on:focus={(e) => {",
          "405:         e.target.select();",
          "406:        }}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "437:     >",
          "438:      <FolderMenu",
          "439:       on:rename={() => {",
          "441:       }}",
          "442:       on:delete={() => {",
          "443:        showDeleteConfirm = true;",
          "",
          "[Removed Lines]",
          "440:        editHandler();",
          "",
          "[Added Lines]",
          "441:        setTimeout(() => {",
          "442:         editHandler();",
          "443:        }, 200);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1168139a60f32d9852f542c9488ec70d33b2fef",
      "candidate_info": {
        "commit_hash": "e1168139a60f32d9852f542c9488ec70d33b2fef",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/e1168139a60f32d9852f542c9488ec70d33b2fef",
        "files": [
          "backend/open_webui/main.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/main.py||backend/open_webui/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "357: from open_webui.utils.security_headers import SecurityHeadersMiddleware",
          "359: from open_webui.tasks import stop_task, list_tasks  # Import from tasks.py",
          "362: if SAFE_MODE:",
          "363:     print(\"SAFE MODE ENABLED\")",
          "",
          "[Removed Lines]",
          "360: from open_webui.utils.telemetry.setup import setup as setup_opentelemetry",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "435: ########################################",
          "437: if not ENABLE_OTEL:",
          "438:     setup_opentelemetry(app=app, db_engine=engine)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437:     from open_webui.utils.telemetry.setup import setup as setup_opentelemetry",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9a8808b0d935a17d7c0db6653755c587bfb688d",
      "candidate_info": {
        "commit_hash": "c9a8808b0d935a17d7c0db6653755c587bfb688d",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/c9a8808b0d935a17d7c0db6653755c587bfb688d",
        "files": [
          "backend/open_webui/routers/retrieval.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py": [
          "File: backend/open_webui/routers/retrieval.py -> backend/open_webui/routers/retrieval.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "760:     # for meta-data so convert them to string.",
          "761:     for metadata in metadatas:",
          "762:         for key, value in metadata.items():",
          "764:                 metadata[key] = str(value)",
          "766:     try:",
          "",
          "[Removed Lines]",
          "763:             if isinstance(value, datetime):",
          "",
          "[Added Lines]",
          "763:             if (",
          "764:                 isinstance(value, datetime)",
          "765:                 or isinstance(value, list)",
          "766:                 or isinstance(value, dict)",
          "767:             ):",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c0505e1cd0e0fb5edb41ea775bc0b3902f9e4eb",
      "candidate_info": {
        "commit_hash": "0c0505e1cd0e0fb5edb41ea775bc0b3902f9e4eb",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/0c0505e1cd0e0fb5edb41ea775bc0b3902f9e4eb",
        "files": [
          "backend/open_webui/config.py",
          "backend/open_webui/main.py",
          "backend/open_webui/routers/configs.py",
          "backend/open_webui/routers/tools.py",
          "backend/open_webui/utils/auth.py",
          "backend/open_webui/utils/tools.py",
          "src/lib/apis/configs/index.ts",
          "src/lib/apis/index.ts",
          "src/lib/components/AddServerModal.svelte",
          "src/lib/components/admin/Settings/Tools.svelte",
          "src/lib/components/chat/Settings/Tools.svelte",
          "src/lib/components/chat/Settings/Tools/Connection.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/config.py||backend/open_webui/config.py",
          "backend/open_webui/main.py||backend/open_webui/main.py",
          "backend/open_webui/routers/configs.py||backend/open_webui/routers/configs.py",
          "backend/open_webui/routers/tools.py||backend/open_webui/routers/tools.py",
          "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py",
          "backend/open_webui/utils/tools.py||backend/open_webui/utils/tools.py",
          "src/lib/apis/configs/index.ts||src/lib/apis/configs/index.ts",
          "src/lib/apis/index.ts||src/lib/apis/index.ts",
          "src/lib/components/AddServerModal.svelte||src/lib/components/AddServerModal.svelte",
          "src/lib/components/admin/Settings/Tools.svelte||src/lib/components/admin/Settings/Tools.svelte",
          "src/lib/components/chat/Settings/Tools.svelte||src/lib/components/chat/Settings/Tools.svelte",
          "src/lib/components/chat/Settings/Tools/Connection.svelte||src/lib/components/chat/Settings/Tools/Connection.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/config.py||backend/open_webui/config.py": [
          "File: backend/open_webui/config.py -> backend/open_webui/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "881:     pass",
          "882: OPENAI_API_BASE_URL = \"https://api.openai.com/v1\"",
          "884: ####################################",
          "885: # WEBUI",
          "886: ####################################",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "884: ####################################",
          "885: # TOOL_SERVERS",
          "886: ####################################",
          "889: TOOL_SERVER_CONNECTIONS = PersistentConfig(",
          "890:     \"TOOL_SERVER_CONNECTIONS\",",
          "891:     \"tool_server.connections\",",
          "892:     [],",
          "893: )",
          "",
          "---------------"
        ],
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:     OPENAI_API_CONFIGS,",
          "106:     # Direct Connections",
          "107:     ENABLE_DIRECT_CONNECTIONS,",
          "108:     # Code Execution",
          "109:     ENABLE_CODE_EXECUTION,",
          "110:     CODE_EXECUTION_ENGINE,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:     # Tool Server Configs",
          "109:     TOOL_SERVER_CONNECTIONS,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357: from open_webui.utils.auth import (",
          "358:     get_license_data,",
          "359:     decode_token,",
          "360:     get_admin_user,",
          "361:     get_verified_user,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361:     get_http_authorization_cred,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "479: app.state.OPENAI_MODELS = {}",
          "481: ########################################",
          "482: #",
          "483: # DIRECT CONNECTIONS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "484: ########################################",
          "485: #",
          "486: # TOOL SERVERS",
          "487: #",
          "488: ########################################",
          "490: app.state.config.TOOL_SERVER_CONNECTIONS = TOOL_SERVER_CONNECTIONS",
          "491: app.state.TOOL_SERVERS = []",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "864: @app.middleware(\"http\")",
          "865: async def check_url(request: Request, call_next):",
          "866:     start_time = int(time.time())",
          "867:     request.state.enable_api_key = app.state.config.ENABLE_API_KEY",
          "868:     response = await call_next(request)",
          "869:     process_time = int(time.time()) - start_time",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "879:     request.state.token = get_http_authorization_cred(",
          "880:         request.headers.get(\"Authorization\")",
          "881:     )",
          "",
          "---------------"
        ],
        "backend/open_webui/routers/configs.py||backend/open_webui/routers/configs.py": [
          "File: backend/open_webui/routers/configs.py -> backend/open_webui/routers/configs.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: from typing import Optional",
          "",
          "[Removed Lines]",
          "1: from fastapi import APIRouter, Depends, Request",
          "2: from pydantic import BaseModel",
          "",
          "[Added Lines]",
          "1: from fastapi import APIRouter, Depends, Request, HTTPException",
          "2: from pydantic import BaseModel, ConfigDict",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7: from open_webui.config import get_config, save_config",
          "8: from open_webui.config import BannerModel",
          "11: router = APIRouter()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: from open_webui.utils.tools import get_tool_server_data, get_tool_servers_data",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:     }",
          "69: ############################",
          "70: # CodeInterpreterConfig",
          "71: ############################",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: ############################",
          "72: # ToolServers Config",
          "73: ############################",
          "76: class ToolServerConnection(BaseModel):",
          "77:     url: str",
          "78:     path: str",
          "79:     auth_type: Optional[str]",
          "80:     key: Optional[str]",
          "81:     config: Optional[dict]",
          "83:     model_config = ConfigDict(extra=\"allow\")",
          "86: class ToolServersConfigForm(BaseModel):",
          "87:     TOOL_SERVER_CONNECTIONS: list[ToolServerConnection]",
          "90: @router.get(\"/tool_servers\", response_model=ToolServersConfigForm)",
          "91: async def get_tool_servers_config(request: Request, user=Depends(get_admin_user)):",
          "92:     return {",
          "93:         \"TOOL_SERVER_CONNECTIONS\": request.app.state.config.TOOL_SERVER_CONNECTIONS,",
          "94:     }",
          "97: @router.post(\"/tool_servers\", response_model=ToolServersConfigForm)",
          "98: async def set_tool_servers_config(",
          "99:     request: Request,",
          "100:     form_data: ToolServersConfigForm,",
          "101:     user=Depends(get_admin_user),",
          "102: ):",
          "103:     request.app.state.config.TOOL_SERVER_CONNECTIONS = form_data.TOOL_SERVER_CONNECTIONS",
          "105:     request.app.state.TOOL_SERVERS = await get_tool_servers_data(",
          "106:         request.app.state.config.TOOL_SERVER_CONNECTIONS",
          "107:     )",
          "109:     return {",
          "110:         \"TOOL_SERVER_CONNECTIONS\": request.app.state.config.TOOL_SERVER_CONNECTIONS,",
          "111:     }",
          "114: @router.post(\"/tool_servers/verify\")",
          "115: async def verify_tool_servers_config(",
          "116:     request: Request, form_data: ToolServerConnection, user=Depends(get_admin_user)",
          "117: ):",
          "118:     \"\"\"",
          "119:     Verify the connection to the tool server.",
          "120:     \"\"\"",
          "121:     try:",
          "123:         token = None",
          "124:         if form_data.auth_type == \"bearer\":",
          "125:             token = form_data.key",
          "126:         elif form_data.auth_type == \"session\":",
          "127:             token = request.state.token.credentials",
          "129:         url = f\"{form_data.url}/{form_data.path}\"",
          "130:         return await get_tool_server_data(token, url)",
          "131:     except Exception as e:",
          "132:         raise HTTPException(",
          "133:             status_code=400,",
          "134:             detail=f\"Failed to connect to the tool server: {str(e)}\",",
          "135:         )",
          "",
          "---------------"
        ],
        "backend/open_webui/routers/tools.py||backend/open_webui/routers/tools.py": [
          "File: backend/open_webui/routers/tools.py -> backend/open_webui/routers/tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: from open_webui.utils.access_control import has_access, has_permission",
          "19: from open_webui.env import SRC_LOG_LEVELS",
          "21: log = logging.getLogger(__name__)",
          "22: log.setLevel(SRC_LOG_LEVELS[\"MAIN\"])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: from open_webui.utils.tools import get_tool_servers_data",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32: @router.get(\"/\", response_model=list[ToolUserResponse])",
          "34:     if user.role == \"admin\":",
          "35:         tools = Tools.get_tools()",
          "36:     else:",
          "",
          "[Removed Lines]",
          "33: async def get_tools(user=Depends(get_verified_user)):",
          "",
          "[Added Lines]",
          "35: async def get_tools(request: Request, user=Depends(get_verified_user)):",
          "37:     if not request.app.state.TOOL_SERVERS:",
          "38:         # If the tool servers are not set, we need to set them",
          "39:         # This is done only once when the server starts",
          "40:         # This is done to avoid loading the tool servers every time",
          "42:         request.app.state.TOOL_SERVERS = await get_tool_servers_data(",
          "43:             request.app.state.config.TOOL_SERVER_CONNECTIONS",
          "44:         )",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py": [
          "File: backend/open_webui/utils/auth.py -> backend/open_webui/utils/auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:     return f\"sk-{key}\"",
          "147:     try:",
          "148:         scheme, credentials = auth_header.split(\" \")",
          "149:         return HTTPAuthorizationCredentials(scheme=scheme, credentials=credentials)",
          "150:     except Exception:",
          "154: def get_current_user(",
          "",
          "[Removed Lines]",
          "146: def get_http_authorization_cred(auth_header: str):",
          "151:         raise ValueError(ERROR_MESSAGES.INVALID_TOKEN)",
          "",
          "[Added Lines]",
          "146: def get_http_authorization_cred(auth_header: Optional[str]):",
          "147:     if not auth_header:",
          "148:         return None",
          "153:         return None",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/tools.py||backend/open_webui/utils/tools.py": [
          "File: backend/open_webui/utils/tools.py -> backend/open_webui/utils/tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import logging",
          "3: import re",
          "4: import inspect",
          "8: from functools import update_wrapper, partial",
          "",
          "[Removed Lines]",
          "5: import uuid",
          "7: from typing import Any, Awaitable, Callable, get_type_hints",
          "",
          "[Added Lines]",
          "5: import aiohttp",
          "6: import asyncio",
          "8: from typing import Any, Awaitable, Callable, get_type_hints, Dict, List, Union",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     function_list = get_callable_attributes(tool_class)",
          "218:     models = map(function_to_pydantic_model, function_list)",
          "219:     return [convert_to_openai_function(tool) for tool in models]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: import copy",
          "226: def resolve_schema(schema, components):",
          "227:     \"\"\"",
          "228:     Recursively resolves a JSON schema using OpenAPI components.",
          "229:     \"\"\"",
          "230:     if not schema:",
          "231:         return {}",
          "233:     if \"$ref\" in schema:",
          "234:         ref_path = schema[\"$ref\"]",
          "235:         ref_parts = ref_path.strip(\"#/\").split(\"/\")",
          "236:         resolved = components",
          "237:         for part in ref_parts[1:]:  # Skip the initial 'components'",
          "238:             resolved = resolved.get(part, {})",
          "239:         return resolve_schema(resolved, components)",
          "241:     resolved_schema = copy.deepcopy(schema)",
          "243:     # Recursively resolve inner schemas",
          "244:     if \"properties\" in resolved_schema:",
          "245:         for prop, prop_schema in resolved_schema[\"properties\"].items():",
          "246:             resolved_schema[\"properties\"][prop] = resolve_schema(",
          "247:                 prop_schema, components",
          "248:             )",
          "250:     if \"items\" in resolved_schema:",
          "251:         resolved_schema[\"items\"] = resolve_schema(resolved_schema[\"items\"], components)",
          "253:     return resolved_schema",
          "256: def convert_openapi_to_tool_payload(openapi_spec):",
          "257:     \"\"\"",
          "258:     Converts an OpenAPI specification into a custom tool payload structure.",
          "260:     Args:",
          "261:         openapi_spec (dict): The OpenAPI specification as a Python dict.",
          "263:     Returns:",
          "264:         list: A list of tool payloads.",
          "265:     \"\"\"",
          "266:     tool_payload = []",
          "268:     for path, methods in openapi_spec.get(\"paths\", {}).items():",
          "269:         for method, operation in methods.items():",
          "270:             tool = {",
          "271:                 \"type\": \"function\",",
          "272:                 \"name\": operation.get(\"operationId\"),",
          "273:                 \"description\": operation.get(\"summary\", \"No description available.\"),",
          "274:                 \"parameters\": {\"type\": \"object\", \"properties\": {}, \"required\": []},",
          "275:             }",
          "277:             # Extract path and query parameters",
          "278:             for param in operation.get(\"parameters\", []):",
          "279:                 param_name = param[\"name\"]",
          "280:                 param_schema = param.get(\"schema\", {})",
          "281:                 tool[\"parameters\"][\"properties\"][param_name] = {",
          "282:                     \"type\": param_schema.get(\"type\"),",
          "283:                     \"description\": param_schema.get(\"description\", \"\"),",
          "284:                 }",
          "285:                 if param.get(\"required\"):",
          "286:                     tool[\"parameters\"][\"required\"].append(param_name)",
          "288:             # Extract and resolve requestBody if available",
          "289:             request_body = operation.get(\"requestBody\")",
          "290:             if request_body:",
          "291:                 content = request_body.get(\"content\", {})",
          "292:                 json_schema = content.get(\"application/json\", {}).get(\"schema\")",
          "293:                 if json_schema:",
          "294:                     resolved_schema = resolve_schema(",
          "295:                         json_schema, openapi_spec.get(\"components\", {})",
          "296:                     )",
          "298:                     if resolved_schema.get(\"properties\"):",
          "299:                         tool[\"parameters\"][\"properties\"].update(",
          "300:                             resolved_schema[\"properties\"]",
          "301:                         )",
          "302:                         if \"required\" in resolved_schema:",
          "303:                             tool[\"parameters\"][\"required\"] = list(",
          "304:                                 set(",
          "305:                                     tool[\"parameters\"][\"required\"]",
          "306:                                     + resolved_schema[\"required\"]",
          "307:                                 )",
          "308:                             )",
          "309:                     elif resolved_schema.get(\"type\") == \"array\":",
          "310:                         tool[\"parameters\"] = resolved_schema  # special case for array",
          "312:             tool_payload.append(tool)",
          "314:     return tool_payload",
          "317: async def get_tool_server_data(token: str, url: str) -> Dict[str, Any]:",
          "318:     headers = {",
          "319:         \"Accept\": \"application/json\",",
          "320:         \"Content-Type\": \"application/json\",",
          "321:     }",
          "322:     if token:",
          "323:         headers[\"Authorization\"] = f\"Bearer {token}\"",
          "325:     error = None",
          "326:     try:",
          "327:         async with aiohttp.ClientSession() as session:",
          "328:             async with session.get(url, headers=headers) as response:",
          "329:                 if response.status != 200:",
          "330:                     error_body = await response.json()",
          "331:                     raise Exception(error_body)",
          "332:                 res = await response.json()",
          "333:     except Exception as err:",
          "334:         print(\"Error:\", err)",
          "335:         if isinstance(err, dict) and \"detail\" in err:",
          "336:             error = err[\"detail\"]",
          "337:         else:",
          "338:             error = str(err)",
          "339:         raise Exception(error)",
          "341:     data = {",
          "342:         \"openapi\": res,",
          "343:         \"info\": res.get(\"info\", {}),",
          "344:         \"specs\": convert_openapi_to_tool_payload(res),",
          "345:     }",
          "347:     print(\"Fetched data:\", data)",
          "348:     return data",
          "351: async def get_tool_servers_data(servers: List[Dict[str, Any]]) -> List[Dict[str, Any]]:",
          "352:     enabled_servers = [",
          "353:         server for server in servers if server.get(\"config\", {}).get(\"enable\")",
          "354:     ]",
          "356:     urls = [",
          "357:         (",
          "358:             server,",
          "359:             f\"{server.get('url')}/{server.get('path', 'openapi.json')}\",",
          "360:             server.get(\"key\", \"\"),",
          "361:         )",
          "362:         for server in enabled_servers",
          "363:     ]",
          "365:     tasks = [get_tool_server_data(token, url) for _, url, token in urls]",
          "367:     results: List[Dict[str, Any]] = []",
          "369:     responses = await asyncio.gather(*tasks, return_exceptions=True)",
          "371:     for (server, _, _), response in zip(urls, responses):",
          "372:         if isinstance(response, Exception):",
          "373:             url_path = server.get(\"path\", \"openapi.json\")",
          "374:             full_url = f\"{server.get('url')}/{url_path}\"",
          "375:             print(f\"Failed to connect to {full_url} OpenAPI tool server\")",
          "376:         else:",
          "377:             results.append(",
          "378:                 {",
          "379:                     \"url\": server.get(\"url\"),",
          "380:                     \"openapi\": response[\"openapi\"],",
          "381:                     \"info\": response[\"info\"],",
          "382:                     \"specs\": response[\"specs\"],",
          "383:                 }",
          "384:             )",
          "386:     return results",
          "389: async def execute_tool_server(",
          "390:     token: str, url: str, name: str, params: Dict[str, Any], server_data: Dict[str, Any]",
          "391: ) -> Any:",
          "392:     error = None",
          "393:     try:",
          "394:         openapi = server_data.get(\"openapi\", {})",
          "395:         paths = openapi.get(\"paths\", {})",
          "397:         matching_route = None",
          "398:         for route_path, methods in paths.items():",
          "399:             for http_method, operation in methods.items():",
          "400:                 if isinstance(operation, dict) and operation.get(\"operationId\") == name:",
          "401:                     matching_route = (route_path, methods)",
          "402:                     break",
          "403:             if matching_route:",
          "404:                 break",
          "406:         if not matching_route:",
          "407:             raise Exception(f\"No matching route found for operationId: {name}\")",
          "409:         route_path, methods = matching_route",
          "411:         method_entry = None",
          "412:         for http_method, operation in methods.items():",
          "413:             if operation.get(\"operationId\") == name:",
          "414:                 method_entry = (http_method.lower(), operation)",
          "415:                 break",
          "417:         if not method_entry:",
          "418:             raise Exception(f\"No matching method found for operationId: {name}\")",
          "420:         http_method, operation = method_entry",
          "422:         path_params = {}",
          "423:         query_params = {}",
          "424:         body_params = {}",
          "426:         for param in operation.get(\"parameters\", []):",
          "427:             param_name = param[\"name\"]",
          "428:             param_in = param[\"in\"]",
          "429:             if param_name in params:",
          "430:                 if param_in == \"path\":",
          "431:                     path_params[param_name] = params[param_name]",
          "432:                 elif param_in == \"query\":",
          "433:                     query_params[param_name] = params[param_name]",
          "435:         final_url = f\"{url}{route_path}\"",
          "436:         for key, value in path_params.items():",
          "437:             final_url = final_url.replace(f\"{{{key}}}\", str(value))",
          "439:         if query_params:",
          "440:             query_string = \"&\".join(f\"{k}={v}\" for k, v in query_params.items())",
          "441:             final_url = f\"{final_url}?{query_string}\"",
          "443:         if operation.get(\"requestBody\", {}).get(\"content\"):",
          "444:             if params:",
          "445:                 body_params = params",
          "446:             else:",
          "447:                 raise Exception(",
          "448:                     f\"Request body expected for operation '{name}' but none found.\"",
          "449:                 )",
          "451:         headers = {\"Content-Type\": \"application/json\"}",
          "453:         if token:",
          "454:             headers[\"Authorization\"] = f\"Bearer {token}\"",
          "456:         async with aiohttp.ClientSession() as session:",
          "457:             request_method = getattr(session, http_method.lower())",
          "459:             if http_method in [\"post\", \"put\", \"patch\"]:",
          "460:                 async with request_method(",
          "461:                     final_url, json=body_params, headers=headers",
          "462:                 ) as response:",
          "463:                     if response.status >= 400:",
          "464:                         text = await response.text()",
          "465:                         raise Exception(f\"HTTP error {response.status}: {text}\")",
          "466:                     return await response.json()",
          "467:             else:",
          "468:                 async with request_method(final_url, headers=headers) as response:",
          "469:                     if response.status >= 400:",
          "470:                         text = await response.text()",
          "471:                         raise Exception(f\"HTTP error {response.status}: {text}\")",
          "472:                     return await response.json()",
          "474:     except Exception as err:",
          "475:         error = str(err)",
          "476:         print(\"API Request Error:\", error)",
          "477:         return {\"error\": error}",
          "",
          "---------------"
        ],
        "src/lib/apis/configs/index.ts||src/lib/apis/configs/index.ts": [
          "File: src/lib/apis/configs/index.ts -> src/lib/apis/configs/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:  return res;",
          "116: };",
          "118: export const getCodeExecutionConfig = async (token: string) => {",
          "119:  let error = null;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: export const getToolServerConnections = async (token: string) => {",
          "119:  let error = null;",
          "121:  const res = await fetch(`${WEBUI_API_BASE_URL}/configs/tool_servers`, {",
          "122:   method: 'GET',",
          "123:   headers: {",
          "124:    'Content-Type': 'application/json',",
          "125:    Authorization: `Bearer ${token}`",
          "126:   }",
          "127:  })",
          "128:   .then(async (res) => {",
          "129:    if (!res.ok) throw await res.json();",
          "130:    return res.json();",
          "131:   })",
          "132:   .catch((err) => {",
          "133:    console.log(err);",
          "134:    error = err.detail;",
          "135:    return null;",
          "136:   });",
          "138:  if (error) {",
          "139:   throw error;",
          "140:  }",
          "142:  return res;",
          "143: };",
          "145: export const setToolServerConnections = async (token: string, connections: object) => {",
          "146:  let error = null;",
          "148:  const res = await fetch(`${WEBUI_API_BASE_URL}/configs/tool_servers`, {",
          "149:   method: 'POST',",
          "150:   headers: {",
          "151:    'Content-Type': 'application/json',",
          "152:    Authorization: `Bearer ${token}`",
          "153:   },",
          "154:   body: JSON.stringify({",
          "155:    ...connections",
          "156:   })",
          "157:  })",
          "158:   .then(async (res) => {",
          "159:    if (!res.ok) throw await res.json();",
          "160:    return res.json();",
          "161:   })",
          "162:   .catch((err) => {",
          "163:    console.log(err);",
          "164:    error = err.detail;",
          "165:    return null;",
          "166:   });",
          "168:  if (error) {",
          "169:   throw error;",
          "170:  }",
          "172:  return res;",
          "173: };",
          "175: export const verifyToolServerConnection = async (token: string, connection: object) => {",
          "176:  let error = null;",
          "178:  const res = await fetch(`${WEBUI_API_BASE_URL}/configs/tool_servers/verify`, {",
          "179:   method: 'POST',",
          "180:   headers: {",
          "181:    'Content-Type': 'application/json',",
          "182:    Authorization: `Bearer ${token}`",
          "183:   },",
          "184:   body: JSON.stringify({",
          "185:    ...connection",
          "186:   })",
          "187:  })",
          "188:   .then(async (res) => {",
          "189:    if (!res.ok) throw await res.json();",
          "190:    return res.json();",
          "191:   })",
          "192:   .catch((err) => {",
          "193:    console.log(err);",
          "194:    error = err.detail;",
          "195:    return null;",
          "196:   });",
          "198:  if (error) {",
          "199:   throw error;",
          "200:  }",
          "202:  return res;",
          "203: };",
          "",
          "---------------"
        ],
        "src/lib/apis/index.ts||src/lib/apis/index.ts": [
          "File: src/lib/apis/index.ts -> src/lib/apis/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:     .map(async (server) => {",
          "307:      const data = await getToolServerData(",
          "308:       server?.key,",
          "310:      ).catch((err) => {",
          "311:       toast.error(",
          "312:        i18n.t(`Failed to connect to {{URL}} OpenAPI tool server`, {",
          "314:        })",
          "315:       );",
          "316:       return null;",
          "",
          "[Removed Lines]",
          "309:       server?.url + (server?.path ?? '/openapi.json')",
          "313:         URL: server?.url + (server?.path ?? '/openapi.json')",
          "",
          "[Added Lines]",
          "309:       server?.url + '/' + (server?.path ?? 'openapi.json')",
          "313:         URL: server?.url + '/' + (server?.path ?? 'openapi.json')",
          "",
          "---------------"
        ],
        "src/lib/components/AddServerModal.svelte||src/lib/components/AddServerModal.svelte": [
          "File: src/lib/components/AddServerModal.svelte -> src/lib/components/AddServerModal.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  import Tooltip from '$lib/components/common/Tooltip.svelte';",
          "16:  import Switch from '$lib/components/common/Switch.svelte';",
          "17:  import Tags from './common/Tags.svelte';",
          "19:  export let onSubmit: Function = () => {};",
          "20:  export let onDelete: Function = () => {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:  import { getToolServerData } from '$lib/apis';",
          "19:  import { verifyToolServerConnection } from '$lib/apis/configs';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:  export let show = false;",
          "23:  export let edit = false;",
          "25:  export let connection = null;",
          "27:  let url = '';",
          "30:  let auth_type = 'bearer';",
          "31:  let key = '';",
          "",
          "[Removed Lines]",
          "28:  let path = '/openapi.json';",
          "",
          "[Added Lines]",
          "27:  export let direct = false;",
          "32:  let path = 'openapi.json';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "35:  let loading = false;",
          "37:  const submitHandler = async () => {",
          "38:   loading = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:  const verifyHandler = async () => {",
          "42:   if (url === '') {",
          "43:    toast.error($i18n.t('Please enter a valid URL'));",
          "44:    return;",
          "45:   }",
          "47:   if (path === '') {",
          "48:    toast.error($i18n.t('Please enter a valid path'));",
          "49:    return;",
          "50:   }",
          "52:   if (direct) {",
          "53:    const res = await getToolServerData(",
          "54:     auth_type === 'bearer' ? key : localStorage.token,",
          "55:     `${url}/${path}`",
          "56:    ).catch((err) => {",
          "57:     toast.error($i18n.t('Connection failed'));",
          "58:    });",
          "60:    if (res) {",
          "61:     toast.success($i18n.t('Connection successful'));",
          "62:     console.debug('Connection successful', res);",
          "63:    }",
          "64:   } else {",
          "65:    const res = await verifyToolServerConnection(localStorage.token, {",
          "66:     url,",
          "67:     path,",
          "68:     auth_type,",
          "69:     key,",
          "70:     config: {",
          "71:      enable: enable",
          "72:     }",
          "73:    }).catch((err) => {",
          "74:     toast.error($i18n.t('Connection failed'));",
          "75:    });",
          "77:    if (res) {",
          "78:     toast.success($i18n.t('Connection successful'));",
          "79:     console.debug('Connection successful', res);",
          "80:    }",
          "81:   }",
          "82:  };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "56:   show = false;",
          "58:   url = '';",
          "60:   key = '';",
          "61:   auth_type = 'bearer';",
          "",
          "[Removed Lines]",
          "59:   path = '/openapi.json';",
          "",
          "[Added Lines]",
          "106:   path = 'openapi.json';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "66:  const init = () => {",
          "67:   if (connection) {",
          "68:    url = connection.url;",
          "71:    auth_type = connection?.auth_type ?? 'bearer';",
          "72:    key = connection?.key ?? '';",
          "",
          "[Removed Lines]",
          "69:    path = connection?.path ?? '/openapi.json';",
          "",
          "[Added Lines]",
          "116:    path = connection?.path ?? 'openapi.json';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "125:      <div class=\"px-1\">",
          "126:       <div class=\"flex gap-2\">",
          "127:        <div class=\"flex flex-col w-full\">",
          "131:          <input",
          "133:           type=\"text\"",
          "134:           bind:value={url}",
          "135:           placeholder={$i18n.t('API Base URL')}",
          "136:           autocomplete=\"off\"",
          "137:           required",
          "138:          />",
          "139:         </div>",
          "142:          <input",
          "143:           class=\"w-full text-sm bg-transparent placeholder:text-gray-300 dark:placeholder:text-gray-700 outline-hidden\"",
          "144:           type=\"text\"",
          "",
          "[Removed Lines]",
          "128:         <div class=\" mb-0.5 text-xs text-gray-500\">{$i18n.t('URL')}</div>",
          "130:         <div class=\"flex-1\">",
          "132:           class=\"w-full text-sm bg-transparent placeholder:text-gray-300 dark:placeholder:text-gray-700 outline-hidden\"",
          "141:         <div class=\"flex-1\">",
          "",
          "[Added Lines]",
          "175:         <div class=\"flex justify-between mb-0.5\">",
          "176:          <div class=\" text-xs text-gray-500\">{$i18n.t('URL')}</div>",
          "177:         </div>",
          "179:         <div class=\"flex flex-1 items-center\">",
          "181:           class=\"w-full flex-1 text-sm bg-transparent placeholder:text-gray-300 dark:placeholder:text-gray-700 outline-hidden\"",
          "189:          <Tooltip",
          "190:           content={$i18n.t('Verify Connection')}",
          "191:           className=\"shrink-0 flex items-center mr-1\"",
          "192:          >",
          "193:           <button",
          "194:            class=\"self-center p-1 bg-transparent hover:bg-gray-100 dark:bg-gray-900 dark:hover:bg-gray-850 rounded-lg transition\"",
          "195:            on:click={() => {",
          "196:             verifyHandler();",
          "197:            }}",
          "198:            type=\"button\"",
          "199:           >",
          "200:            <svg",
          "201:             xmlns=\"http://www.w3.org/2000/svg\"",
          "202:             viewBox=\"0 0 20 20\"",
          "203:             fill=\"currentColor\"",
          "204:             class=\"w-4 h-4\"",
          "205:            >",
          "206:             <path",
          "207:              fill-rule=\"evenodd\"",
          "208:              d=\"M15.312 11.424a5.5 5.5 0 01-9.201 2.466l-.312-.311h2.433a.75.75 0 000-1.5H3.989a.75.75 0 00-.75.75v4.242a.75.75 0 001.5 0v-2.43l.31.31a7 7 0 0011.712-3.138.75.75 0 00-1.449-.39zm1.23-3.723a.75.75 0 00.219-.53V2.929a.75.75 0 00-1.5 0V5.36l-.31-.31A7 7 0 003.239 8.188a.75.75 0 101.448.389A5.5 5.5 0 0113.89 6.11l.311.31h-2.432a.75.75 0 000 1.5h4.243a.75.75 0 00.53-.219z\"",
          "209:              clip-rule=\"evenodd\"",
          "210:             />",
          "211:            </svg>",
          "212:           </button>",
          "213:          </Tooltip>",
          "215:          <Tooltip content={enable ? $i18n.t('Enabled') : $i18n.t('Disabled')}>",
          "216:           <Switch bind:state={enable} />",
          "217:          </Tooltip>",
          "220:         <div class=\"flex-1 flex items-center\">",
          "221:          <div class=\"text-sm\">/</div>",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "149:          />",
          "150:         </div>",
          "151:        </div>",
          "158:       </div>",
          "160:       <div class=\"text-xs text-gray-500 mt-1\">",
          "164:        })}",
          "165:       </div>",
          "",
          "[Removed Lines]",
          "153:        <div class=\"flex flex-col shrink-0 self-start\">",
          "154:         <Tooltip content={enable ? $i18n.t('Enabled') : $i18n.t('Disabled')}>",
          "155:          <Switch bind:state={enable} />",
          "156:         </Tooltip>",
          "157:        </div>",
          "161:        {$i18n.t(`WebUI will make requests to \"{{url}}{{path}}\"`, {",
          "162:         url: url,",
          "163:         path: path",
          "",
          "[Added Lines]",
          "235:        {$i18n.t(`WebUI will make requests to \"{{url}}\"`, {",
          "236:         url: `${url}/${path}`",
          "",
          "---------------"
        ],
        "src/lib/components/admin/Settings/Tools.svelte||src/lib/components/admin/Settings/Tools.svelte": [
          "File: src/lib/components/admin/Settings/Tools.svelte -> src/lib/components/admin/Settings/Tools.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <script lang=\"ts\">",
          "2:  import { toast } from 'svelte-sonner';",
          "3:  import { createEventDispatcher, onMount, getContext, tick } from 'svelte';",
          "5:  const dispatch = createEventDispatcher();",
          "14:  import Switch from '$lib/components/common/Switch.svelte';",
          "15:  import Spinner from '$lib/components/common/Spinner.svelte';",
          "16:  import Tooltip from '$lib/components/common/Tooltip.svelte';",
          "17:  import Plus from '$lib/components/icons/Plus.svelte';",
          "105:  };",
          "138:  onMount(async () => {",
          "194:  });",
          "203: </script>",
          "217:  <div class=\" overflow-y-scroll scrollbar-hidden h-full\">",
          "304:      <hr class=\" border-gray-100 dark:border-gray-850 my-2\" />",
          "310:        <Tooltip content={$i18n.t(`Add Connection`)}>",
          "311:         <button",
          "312:          class=\"px-1\"",
          "313:          on:click={() => {",
          "315:          }}",
          "316:          type=\"button\"",
          "317:         >",
          "",
          "[Removed Lines]",
          "7:  import { getOllamaConfig, updateOllamaConfig } from '$lib/apis/ollama';",
          "8:  import { getOpenAIConfig, updateOpenAIConfig, getOpenAIModels } from '$lib/apis/openai';",
          "9:  import { getModels as _getModels } from '$lib/apis';",
          "10:  import { getDirectConnectionsConfig, setDirectConnectionsConfig } from '$lib/apis/configs';",
          "12:  import { config, models, settings, user } from '$lib/stores';",
          "19:  import OpenAIConnection from './Connections/OpenAIConnection.svelte';",
          "20:  import AddConnectionModal from '$lib/components/AddConnectionModal.svelte';",
          "21:  import OllamaConnection from './Connections/OllamaConnection.svelte';",
          "23:  const i18n = getContext('i18n');",
          "25:  const getModels = async () => {",
          "26:   const models = await _getModels(",
          "27:    localStorage.token,",
          "28:    $config?.features?.enable_direct_connections && ($settings?.directConnections ?? null)",
          "29:   );",
          "30:   return models;",
          "31:  };",
          "34:  let OLLAMA_BASE_URLS = [''];",
          "35:  let OLLAMA_API_CONFIGS = {};",
          "37:  let OPENAI_API_KEYS = [''];",
          "38:  let OPENAI_API_BASE_URLS = [''];",
          "39:  let OPENAI_API_CONFIGS = {};",
          "41:  let ENABLE_OPENAI_API: null | boolean = null;",
          "42:  let ENABLE_OLLAMA_API: null | boolean = null;",
          "44:  let directConnectionsConfig = null;",
          "46:  let pipelineUrls = {};",
          "47:  let showAddOpenAIConnectionModal = false;",
          "48:  let showAddOllamaConnectionModal = false;",
          "50:  const updateOpenAIHandler = async () => {",
          "51:   if (ENABLE_OPENAI_API !== null) {",
          "53:    OPENAI_API_BASE_URLS = OPENAI_API_BASE_URLS.map((url) => url.replace(/\\/$/, ''));",
          "56:    if (OPENAI_API_KEYS.length !== OPENAI_API_BASE_URLS.length) {",
          "58:     if (OPENAI_API_KEYS.length > OPENAI_API_BASE_URLS.length) {",
          "59:      OPENAI_API_KEYS = OPENAI_API_KEYS.slice(0, OPENAI_API_BASE_URLS.length);",
          "60:     }",
          "63:     if (OPENAI_API_KEYS.length < OPENAI_API_BASE_URLS.length) {",
          "64:      const diff = OPENAI_API_BASE_URLS.length - OPENAI_API_KEYS.length;",
          "65:      for (let i = 0; i < diff; i++) {",
          "66:       OPENAI_API_KEYS.push('');",
          "67:      }",
          "68:     }",
          "69:    }",
          "71:    const res = await updateOpenAIConfig(localStorage.token, {",
          "72:     ENABLE_OPENAI_API: ENABLE_OPENAI_API,",
          "73:     OPENAI_API_BASE_URLS: OPENAI_API_BASE_URLS,",
          "74:     OPENAI_API_KEYS: OPENAI_API_KEYS,",
          "75:     OPENAI_API_CONFIGS: OPENAI_API_CONFIGS",
          "76:    }).catch((error) => {",
          "77:     toast.error(`${error}`);",
          "78:    });",
          "80:    if (res) {",
          "81:     toast.success($i18n.t('OpenAI API settings updated'));",
          "82:     await models.set(await getModels());",
          "83:    }",
          "84:   }",
          "85:  };",
          "87:  const updateOllamaHandler = async () => {",
          "88:   if (ENABLE_OLLAMA_API !== null) {",
          "90:    OLLAMA_BASE_URLS = OLLAMA_BASE_URLS.map((url) => url.replace(/\\/$/, ''));",
          "92:    const res = await updateOllamaConfig(localStorage.token, {",
          "93:     ENABLE_OLLAMA_API: ENABLE_OLLAMA_API,",
          "94:     OLLAMA_BASE_URLS: OLLAMA_BASE_URLS,",
          "95:     OLLAMA_API_CONFIGS: OLLAMA_API_CONFIGS",
          "96:    }).catch((error) => {",
          "97:     toast.error(`${error}`);",
          "98:    });",
          "100:    if (res) {",
          "101:     toast.success($i18n.t('Ollama API settings updated'));",
          "102:     await models.set(await getModels());",
          "103:    }",
          "104:   }",
          "107:  const updateDirectConnectionsHandler = async () => {",
          "108:   const res = await setDirectConnectionsConfig(localStorage.token, directConnectionsConfig).catch(",
          "109:    (error) => {",
          "110:     toast.error(`${error}`);",
          "111:    }",
          "112:   );",
          "114:   if (res) {",
          "115:    toast.success($i18n.t('Direct Connections settings updated'));",
          "116:    await models.set(await getModels());",
          "117:   }",
          "118:  };",
          "120:  const addOpenAIConnectionHandler = async (connection) => {",
          "121:   OPENAI_API_BASE_URLS = [...OPENAI_API_BASE_URLS, connection.url];",
          "122:   OPENAI_API_KEYS = [...OPENAI_API_KEYS, connection.key];",
          "123:   OPENAI_API_CONFIGS[OPENAI_API_BASE_URLS.length - 1] = connection.config;",
          "125:   await updateOpenAIHandler();",
          "126:  };",
          "128:  const addOllamaConnectionHandler = async (connection) => {",
          "129:   OLLAMA_BASE_URLS = [...OLLAMA_BASE_URLS, connection.url];",
          "130:   OLLAMA_API_CONFIGS[OLLAMA_BASE_URLS.length - 1] = {",
          "131:    ...connection.config,",
          "132:    key: connection.key",
          "133:   };",
          "135:   await updateOllamaHandler();",
          "136:  };",
          "139:   if ($user?.role === 'admin') {",
          "140:    let ollamaConfig = {};",
          "141:    let openaiConfig = {};",
          "143:    await Promise.all([",
          "144:     (async () => {",
          "145:      ollamaConfig = await getOllamaConfig(localStorage.token);",
          "146:     })(),",
          "147:     (async () => {",
          "148:      openaiConfig = await getOpenAIConfig(localStorage.token);",
          "149:     })(),",
          "150:     (async () => {",
          "151:      directConnectionsConfig = await getDirectConnectionsConfig(localStorage.token);",
          "152:     })()",
          "153:    ]);",
          "155:    ENABLE_OPENAI_API = openaiConfig.ENABLE_OPENAI_API;",
          "156:    ENABLE_OLLAMA_API = ollamaConfig.ENABLE_OLLAMA_API;",
          "158:    OPENAI_API_BASE_URLS = openaiConfig.OPENAI_API_BASE_URLS;",
          "159:    OPENAI_API_KEYS = openaiConfig.OPENAI_API_KEYS;",
          "160:    OPENAI_API_CONFIGS = openaiConfig.OPENAI_API_CONFIGS;",
          "162:    OLLAMA_BASE_URLS = ollamaConfig.OLLAMA_BASE_URLS;",
          "163:    OLLAMA_API_CONFIGS = ollamaConfig.OLLAMA_API_CONFIGS;",
          "165:    if (ENABLE_OPENAI_API) {",
          "167:     for (const [idx, url] of OPENAI_API_BASE_URLS.entries()) {",
          "168:      if (!OPENAI_API_CONFIGS[idx]) {",
          "170:       OPENAI_API_CONFIGS[idx] = OPENAI_API_CONFIGS[url] || {};",
          "171:      }",
          "172:     }",
          "174:     OPENAI_API_BASE_URLS.forEach(async (url, idx) => {",
          "175:      OPENAI_API_CONFIGS[idx] = OPENAI_API_CONFIGS[idx] || {};",
          "176:      if (!(OPENAI_API_CONFIGS[idx]?.enable ?? true)) {",
          "177:       return;",
          "178:      }",
          "179:      const res = await getOpenAIModels(localStorage.token, idx);",
          "180:      if (res.pipelines) {",
          "181:       pipelineUrls[url] = true;",
          "182:      }",
          "183:     });",
          "184:    }",
          "186:    if (ENABLE_OLLAMA_API) {",
          "187:     for (const [idx, url] of OLLAMA_BASE_URLS.entries()) {",
          "188:      if (!OLLAMA_API_CONFIGS[idx]) {",
          "189:       OLLAMA_API_CONFIGS[idx] = OLLAMA_API_CONFIGS[url] || {};",
          "190:      }",
          "191:     }",
          "192:    }",
          "193:   }",
          "196:  const submitHandler = async () => {",
          "197:   updateOpenAIHandler();",
          "198:   updateOllamaHandler();",
          "199:   updateDirectConnectionsHandler();",
          "201:   dispatch('save');",
          "202:  };",
          "205: <AddConnectionModal",
          "206:  bind:show={showAddOpenAIConnectionModal}",
          "207:  onSubmit={addOpenAIConnectionHandler}",
          "208: />",
          "210: <AddConnectionModal",
          "211:  ollama",
          "212:  bind:show={showAddOllamaConnectionModal}",
          "213:  onSubmit={addOllamaConnectionHandler}",
          "214: />",
          "216: <form class=\"flex flex-col h-full justify-between text-sm\" on:submit|preventDefault={submitHandler}>",
          "218:   {#if ENABLE_OPENAI_API !== null && ENABLE_OLLAMA_API !== null && directConnectionsConfig !== null}",
          "219:    <div class=\"my-2\">",
          "220:     <div class=\"mt-2 space-y-2 pr-1.5\">",
          "221:      <div class=\"flex justify-between items-center text-sm\">",
          "222:       <div class=\"  font-medium\">{$i18n.t('OpenAI API')}</div>",
          "224:       <div class=\"flex items-center\">",
          "225:        <div class=\"\">",
          "226:         <Switch",
          "227:          bind:state={ENABLE_OPENAI_API}",
          "228:          on:change={async () => {",
          "229:           updateOpenAIHandler();",
          "230:          }}",
          "231:         />",
          "232:        </div>",
          "233:       </div>",
          "234:      </div>",
          "236:      {#if ENABLE_OPENAI_API}",
          "237:       <hr class=\" border-gray-100 dark:border-gray-850\" />",
          "239:       <div class=\"\">",
          "240:        <div class=\"flex justify-between items-center\">",
          "241:         <div class=\"font-medium\">{$i18n.t('Manage OpenAI API Connections')}</div>",
          "243:         <Tooltip content={$i18n.t(`Add Connection`)}>",
          "244:          <button",
          "245:           class=\"px-1\"",
          "246:           on:click={() => {",
          "247:            showAddOpenAIConnectionModal = true;",
          "248:           }}",
          "249:           type=\"button\"",
          "250:          >",
          "251:           <Plus />",
          "252:          </button>",
          "253:         </Tooltip>",
          "254:        </div>",
          "256:        <div class=\"flex flex-col gap-1.5 mt-1.5\">",
          "257:         {#each OPENAI_API_BASE_URLS as url, idx}",
          "258:          <OpenAIConnection",
          "259:           pipeline={pipelineUrls[url] ? true : false}",
          "260:           bind:url",
          "261:           bind:key={OPENAI_API_KEYS[idx]}",
          "262:           bind:config={OPENAI_API_CONFIGS[idx]}",
          "263:           onSubmit={() => {",
          "264:            updateOpenAIHandler();",
          "265:           }}",
          "266:           onDelete={() => {",
          "267:            OPENAI_API_BASE_URLS = OPENAI_API_BASE_URLS.filter(",
          "268:             (url, urlIdx) => idx !== urlIdx",
          "269:            );",
          "270:            OPENAI_API_KEYS = OPENAI_API_KEYS.filter((key, keyIdx) => idx !== keyIdx);",
          "272:            let newConfig = {};",
          "273:            OPENAI_API_BASE_URLS.forEach((url, newIdx) => {",
          "274:             newConfig[newIdx] = OPENAI_API_CONFIGS[newIdx < idx ? newIdx : newIdx + 1];",
          "275:            });",
          "276:            OPENAI_API_CONFIGS = newConfig;",
          "277:            updateOpenAIHandler();",
          "278:           }}",
          "279:          />",
          "280:         {/each}",
          "281:        </div>",
          "282:       </div>",
          "283:      {/if}",
          "284:     </div>",
          "285:    </div>",
          "287:    <hr class=\" border-gray-100 dark:border-gray-850\" />",
          "289:    <div class=\"pr-1.5 my-2\">",
          "290:     <div class=\"flex justify-between items-center text-sm mb-2\">",
          "291:      <div class=\"  font-medium\">{$i18n.t('Ollama API')}</div>",
          "293:      <div class=\"mt-1\">",
          "294:       <Switch",
          "295:        bind:state={ENABLE_OLLAMA_API}",
          "296:        on:change={async () => {",
          "297:         updateOllamaHandler();",
          "298:        }}",
          "299:       />",
          "300:      </div>",
          "301:     </div>",
          "303:     {#if ENABLE_OLLAMA_API}",
          "306:      <div class=\"\">",
          "307:       <div class=\"flex justify-between items-center\">",
          "308:        <div class=\"font-medium\">{$i18n.t('Manage Ollama API Connections')}</div>",
          "314:           showAddOllamaConnectionModal = true;",
          "",
          "[Added Lines]",
          "4:  import { getModels as _getModels } from '$lib/apis';",
          "7:  const i18n = getContext('i18n');",
          "9:  import { models, settings, user } from '$lib/stores';",
          "15:  import Connection from '$lib/components/chat/Settings/Tools/Connection.svelte';",
          "17:  import AddServerModal from '$lib/components/AddServerModal.svelte';",
          "19:  export let saveSettings: Function;",
          "21:  let servers = null;",
          "22:  let showConnectionModal = false;",
          "24:  const addConnectionHandler = async (server) => {",
          "25:   servers = [...servers, server];",
          "26:   await updateHandler();",
          "29:  const updateHandler = async () => {};",
          "32:   servers = [];",
          "36: <AddServerModal bind:show={showConnectionModal} onSubmit={addConnectionHandler} />",
          "38: <form",
          "39:  class=\"flex flex-col h-full justify-between text-sm\"",
          "40:  on:submit|preventDefault={() => {",
          "41:   updateHandler();",
          "42:  }}",
          "43: >",
          "45:   {#if servers !== null}",
          "46:    <div class=\"\">",
          "47:     <div class=\"mb-3\">",
          "48:      <div class=\" mb-2.5 text-base font-medium\">{$i18n.t('General')}</div>",
          "52:      <div class=\"mb-2.5 flex flex-col w-full justify-between\">",
          "53:       <!-- {$i18n.t(`Failed to connect to {{URL}} OpenAPI tool server`, {",
          "54:        URL: 'server?.url'",
          "55:       })} -->",
          "56:       <div class=\"flex justify-between items-center mb-0.5\">",
          "57:        <div class=\"font-medium\">{$i18n.t('Manage Tool Servers')}</div>",
          "63:           showConnectionModal = true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "320:        </Tooltip>",
          "321:       </div>",
          "345:       </div>",
          "356:       </div>",
          "357:      </div>",
          "385:     </div>",
          "386:    </div>",
          "387:   {:else}",
          "",
          "[Removed Lines]",
          "323:       <div class=\"flex w-full gap-1.5\">",
          "324:        <div class=\"flex-1 flex flex-col gap-1.5 mt-1.5\">",
          "325:         {#each OLLAMA_BASE_URLS as url, idx}",
          "326:          <OllamaConnection",
          "327:           bind:url",
          "328:           bind:config={OLLAMA_API_CONFIGS[idx]}",
          "329:           {idx}",
          "330:           onSubmit={() => {",
          "331:            updateOllamaHandler();",
          "332:           }}",
          "333:           onDelete={() => {",
          "334:            OLLAMA_BASE_URLS = OLLAMA_BASE_URLS.filter((url, urlIdx) => idx !== urlIdx);",
          "336:            let newConfig = {};",
          "337:            OLLAMA_BASE_URLS.forEach((url, newIdx) => {",
          "338:             newConfig[newIdx] = OLLAMA_API_CONFIGS[newIdx < idx ? newIdx : newIdx + 1];",
          "339:            });",
          "340:            OLLAMA_API_CONFIGS = newConfig;",
          "341:           }}",
          "342:          />",
          "343:         {/each}",
          "344:        </div>",
          "347:       <div class=\"mt-1 text-xs text-gray-400 dark:text-gray-500\">",
          "348:        {$i18n.t('Trouble accessing Ollama?')}",
          "349:        <a",
          "350:         class=\" text-gray-300 font-medium underline\"",
          "351:         href=\"https://github.com/open-webui/open-webui#troubleshooting\"",
          "352:         target=\"_blank\"",
          "353:        >",
          "354:         {$i18n.t('Click here for help.')}",
          "355:        </a>",
          "358:     {/if}",
          "359:    </div>",
          "361:    <hr class=\" border-gray-100 dark:border-gray-850\" />",
          "363:    <div class=\"pr-1.5 my-2\">",
          "364:     <div class=\"flex justify-between items-center text-sm\">",
          "365:      <div class=\"  font-medium\">{$i18n.t('Direct Connections')}</div>",
          "367:      <div class=\"flex items-center\">",
          "368:       <div class=\"\">",
          "369:        <Switch",
          "370:         bind:state={directConnectionsConfig.ENABLE_DIRECT_CONNECTIONS}",
          "371:         on:change={async () => {",
          "372:          updateDirectConnectionsHandler();",
          "373:         }}",
          "374:        />",
          "375:       </div>",
          "376:      </div>",
          "377:     </div>",
          "379:     <div class=\"mt-1.5\">",
          "380:      <div class=\"text-xs text-gray-500\">",
          "381:       {$i18n.t(",
          "382:        'Direct Connections allow users to connect to their own OpenAI compatible API endpoints.'",
          "383:       )}",
          "384:      </div>",
          "",
          "[Added Lines]",
          "72:       <div class=\"flex flex-col gap-1.5\">",
          "73:        {#each servers as server, idx}",
          "74:         <Connection",
          "75:          bind:connection={server}",
          "76:          onSubmit={() => {",
          "77:           updateHandler();",
          "78:          }}",
          "79:          onDelete={() => {",
          "80:           servers = servers.filter((_, i) => i !== idx);",
          "81:           updateHandler();",
          "82:          }}",
          "83:         />",
          "84:        {/each}",
          "87:       <div class=\"my-1.5\">",
          "88:        <div class=\"text-xs text-gray-500\">",
          "89:         {$i18n.t('Connect to your own OpenAPI compatible external tool servers.')}",
          "90:        </div>",
          "94:      <!-- <div class=\"mb-2.5 flex w-full justify-between\">",
          "95:       <div class=\" text-xs font-medium\">{$i18n.t('Arena Models')}</div>",
          "97:       <Tooltip content={$i18n.t(`Message rating should be enabled to use this feature`)}>",
          "98:        <Switch bind:state={evaluationConfig.ENABLE_EVALUATION_ARENA_MODELS} />",
          "99:       </Tooltip>",
          "100:      </div> -->",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Settings/Tools.svelte||src/lib/components/chat/Settings/Tools.svelte": [
          "File: src/lib/components/chat/Settings/Tools.svelte -> src/lib/components/chat/Settings/Tools.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:  });",
          "40: </script>",
          "44: <form",
          "45:  class=\"flex flex-col h-full justify-between text-sm\"",
          "",
          "[Removed Lines]",
          "42: <AddServerModal bind:show={showConnectionModal} onSubmit={addConnectionHandler} />",
          "",
          "[Added Lines]",
          "42: <AddServerModal bind:show={showConnectionModal} onSubmit={addConnectionHandler} direct />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:        {#each servers as server, idx}",
          "76:         <Connection",
          "77:          bind:connection={server}",
          "78:          onSubmit={() => {",
          "79:           updateHandler();",
          "80:          }}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78:          direct",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Settings/Tools/Connection.svelte||src/lib/components/chat/Settings/Tools/Connection.svelte": [
          "File: src/lib/components/chat/Settings/Tools/Connection.svelte -> src/lib/components/chat/Settings/Tools/Connection.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  export let onSubmit = () => {};",
          "14:  export let connection = null;",
          "16:  let showConfigModal = false;",
          "17:  let showDeleteConfirmDialog = false;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15:  export let direct = false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: <div class=\"flex w-full gap-2 items-center\">",
          "43:  <Tooltip",
          "44:   className=\"w-full relative\"",
          "48:   })}",
          "49:   placement=\"top-start\"",
          "50:  >",
          "",
          "[Removed Lines]",
          "45:   content={$i18n.t(`WebUI will make requests to \"{{url}}{{path}}\"`, {",
          "46:    url: connection?.url,",
          "47:    path: connection?.path ?? '/openapi.json'",
          "",
          "[Added Lines]",
          "46:   content={$i18n.t(`WebUI will make requests to \"{{url}}\"`, {",
          "47:    url: `${connection?.url}/${connection?.path ?? 'openapi.json'}`",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93bb77ede321f64a87135e01ddcd292ff6156910",
      "candidate_info": {
        "commit_hash": "93bb77ede321f64a87135e01ddcd292ff6156910",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/93bb77ede321f64a87135e01ddcd292ff6156910",
        "files": [
          "backend/open_webui/utils/middleware.py",
          "backend/open_webui/utils/plugin.py",
          "backend/open_webui/utils/tools.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "backend/open_webui/utils/plugin.py||backend/open_webui/utils/plugin.py",
          "backend/open_webui/utils/tools.py||backend/open_webui/utils/tools.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:                 if isinstance(tool_result, str):",
          "228:                     tool = tools[tool_function_name]",
          "230:                     if tool.get(\"metadata\", {}).get(\"citation\", False) or tool.get(",
          "231:                         \"direct\", False",
          "232:                     ):",
          "",
          "[Removed Lines]",
          "229:                     tool_id = tool.get(\"toolkit_id\", \"\")",
          "",
          "[Added Lines]",
          "229:                     tool_id = tool.get(\"tool_id\", \"\")",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/plugin.py||backend/open_webui/utils/plugin.py": [
          "File: backend/open_webui/utils/plugin.py -> backend/open_webui/utils/plugin.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     return content",
          "73:     if content is None:",
          "75:         if not tool:",
          "78:         content = tool.content",
          "80:         content = replace_imports(content)",
          "82:     else:",
          "83:         frontmatter = extract_frontmatter(content)",
          "84:         # Install required packages found within the frontmatter",
          "85:         install_frontmatter_requirements(frontmatter.get(\"requirements\", \"\"))",
          "88:     module = types.ModuleType(module_name)",
          "89:     sys.modules[module_name] = module",
          "",
          "[Removed Lines]",
          "71: def load_tools_module_by_id(toolkit_id, content=None):",
          "74:         tool = Tools.get_tool_by_id(toolkit_id)",
          "76:             raise Exception(f\"Toolkit not found: {toolkit_id}\")",
          "81:         Tools.update_tool_by_id(toolkit_id, {\"content\": content})",
          "87:     module_name = f\"tool_{toolkit_id}\"",
          "",
          "[Added Lines]",
          "71: def load_tools_module_by_id(tool_id, content=None):",
          "74:         tool = Tools.get_tool_by_id(tool_id)",
          "76:             raise Exception(f\"Toolkit not found: {tool_id}\")",
          "81:         Tools.update_tool_by_id(tool_id, {\"content\": content})",
          "87:     module_name = f\"tool_{tool_id}\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:         else:",
          "109:             raise Exception(\"No Tools class found in the module\")",
          "110:     except Exception as e:",
          "112:         del sys.modules[module_name]  # Clean up",
          "113:         raise e",
          "114:     finally:",
          "",
          "[Removed Lines]",
          "111:         log.error(f\"Error loading module: {toolkit_id}: {e}\")",
          "",
          "[Added Lines]",
          "111:         log.error(f\"Error loading module: {tool_id}: {e}\")",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/tools.py||backend/open_webui/utils/tools.py": [
          "File: backend/open_webui/utils/tools.py -> backend/open_webui/utils/tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     return new_function",
          "44: def get_tools(",
          "45:     request: Request, tool_ids: list[str], user: UserModel, extra_params: dict",
          "46: ) -> dict[str, dict]:",
          "47:     tools_dict = {}",
          "49:     for tool_id in tool_ids:",
          "53:             if tool_id.startswith(\"server:\"):",
          "54:                 server_idx = int(tool_id.split(\":\")[1])",
          "",
          "[Removed Lines]",
          "43: # Mutation on extra_params",
          "50:         tools = Tools.get_tool_by_id(tool_id)",
          "51:         if tools is None:",
          "",
          "[Added Lines]",
          "49:         tool = Tools.get_tool_by_id(tool_id)",
          "50:         if tool is None:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:                 tool_dict = {",
          "58:                     \"spec\": spec,",
          "59:                     \"callable\": callable,",
          "61:                     # Misc info",
          "62:                     \"metadata\": {",
          "63:                         \"file_handler\": hasattr(module, \"file_handler\")",
          "",
          "[Removed Lines]",
          "60:                     \"toolkit_id\": tool_id,",
          "",
          "[Added Lines]",
          "59:                     \"tool_id\": tool_id,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:                         \"citation\": hasattr(module, \"citation\") and module.citation,",
          "66:                     },",
          "67:                 }",
          "69:         else:",
          "71:             module = request.app.state.TOOLS.get(tool_id, None)",
          "72:             if module is None:",
          "73:                 module, _ = load_tools_module_by_id(tool_id)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:             else:",
          "68:                 continue",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:                 )",
          "87:                 # TODO: Fix hack for OpenAI API",
          "88:                 # Some times breaks OpenAI but others don't. Leaving the comment",
          "89:                 for val in spec.get(\"parameters\", {}).get(\"properties\", {}).values():",
          "",
          "[Removed Lines]",
          "86:             for spec in tools.specs:",
          "",
          "[Added Lines]",
          "85:             for spec in tool.specs:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:                 tool_dict = {",
          "115:                     \"spec\": spec,",
          "116:                     \"callable\": callable,",
          "118:                     # Misc info",
          "119:                     \"metadata\": {",
          "120:                         \"file_handler\": hasattr(module, \"file_handler\")",
          "",
          "[Removed Lines]",
          "117:                     \"toolkit_id\": tool_id,",
          "",
          "[Added Lines]",
          "116:                     \"tool_id\": tool_id,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "128:                     log.warning(",
          "129:                         f\"Tool {function_name} already exists in another tools!\"",
          "130:                     )",
          "133:                 else:",
          "134:                     tools_dict[function_name] = tool_dict",
          "",
          "[Removed Lines]",
          "131:                     log.warning(f\"Collision between {tools} and {tool_id}.\")",
          "132:                     log.warning(f\"Discarding {tools}.{function_name}\")",
          "",
          "[Added Lines]",
          "130:                     log.warning(f\"Collision between {tool} and {tool_id}.\")",
          "131:                     log.warning(f\"Discarding {tool}.{function_name}\")",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "241: def get_tools_specs(tool_class: object) -> list[dict]:",
          "244:     return [",
          "245:         convert_to_openai_function(function_model)",
          "246:         for function_model in function_model_list",
          "",
          "[Removed Lines]",
          "242:     function_list = get_callable_attributes(tool_class)",
          "243:     function_model_list = map(function_to_pydantic_model, function_list)",
          "",
          "[Added Lines]",
          "241:     function_model_list = map(",
          "242:         function_to_pydantic_model, get_callable_attributes(tool_class)",
          "243:     )",
          "",
          "---------------"
        ]
      }
    }
  ]
}