{
  "cve_id": "CVE-2024-29194",
  "cve_desc": "OneUptime is a solution for monitoring and managing online services. The vulnerability lies in the improper validation of client-side stored data within the web application. Specifically, the is_master_admin key, stored in the local storage of the browser, can be manipulated by an attacker. By changing this key from false to true, the application grants administrative privileges to the user, without proper server-side validation.  This has been patched in 7.0.1815.",
  "repo": "OneUptime/oneuptime",
  "patch_hash": "14016d23d834038dd65d3a96cf71af04b556a32c",
  "patch_info": {
    "commit_hash": "14016d23d834038dd65d3a96cf71af04b556a32c",
    "repo": "OneUptime/oneuptime",
    "commit_url": "https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c",
    "files": [
      "CommonServer/Types/Database/ModelPermission.ts",
      "Model/Models/BillingInvoice.ts",
      "Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "Model/Models/OnCallDutyPolicyExecutionLog.ts",
      "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "Model/Models/OnCallDutyPolicySchedule.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayer.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts",
      "Model/Models/User.ts"
    ],
    "message": "Add deletedByUserId property to several models",
    "before_after_code_files": [
      "CommonServer/Types/Database/ModelPermission.ts||CommonServer/Types/Database/ModelPermission.ts",
      "Model/Models/BillingInvoice.ts||Model/Models/BillingInvoice.ts",
      "Model/Models/OnCallDutyPolicyEscalationRule.ts||Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts||Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts||Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts||Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "Model/Models/OnCallDutyPolicyExecutionLog.ts||Model/Models/OnCallDutyPolicyExecutionLog.ts",
      "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts||Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "Model/Models/OnCallDutyPolicySchedule.ts||Model/Models/OnCallDutyPolicySchedule.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayer.ts||Model/Models/OnCallDutyPolicyScheduleLayer.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts||Model/Models/OnCallDutyPolicyScheduleLayerUser.ts",
      "Model/Models/User.ts||Model/Models/User.ts"
    ]
  },
  "patch_diff": {
    "CommonServer/Types/Database/ModelPermission.ts||CommonServer/Types/Database/ModelPermission.ts": [
      "File: CommonServer/Types/Database/ModelPermission.ts -> CommonServer/Types/Database/ModelPermission.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: import ColumnBillingAccessControl from 'Common/Types/BaseDatabase/ColumnBillingAccessControl';",
      "40: import DatabaseCommonInteractionPropsUtil from 'Common/Types/BaseDatabase/DatabaseCommonInteractionPropsUtil';",
      "41: import Includes from 'Common/Types/BaseDatabase/Includes';",
      "43: export interface CheckReadPermissionType<TBaseModel extends BaseModel> {",
      "44:     query: Query<TBaseModel>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: import UserModel from 'Common/Models/UserModel';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:                 props",
      "296:             );",
      "298:             if (!props.isMultiTenantRequest) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "301:             query = await this.addUserScopeToQuery(modelType, query, props);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "854:         return query;",
      "855:     }",
      "857:     private static async addTenantScopeToQuery<TBaseModel extends BaseModel>(",
      "858:         modelType: { new (): TBaseModel },",
      "859:         query: Query<TBaseModel>,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "862:     private static async addUserScopeToQuery<TBaseModel extends BaseModel>(",
      "863:         modelType: { new (): TBaseModel },",
      "864:         query: Query<TBaseModel>,",
      "865:         props: DatabaseCommonInteractionProps",
      "866:     ): Promise<Query<TBaseModel>> {",
      "867:         const model: BaseModel = new modelType();",
      "869:         if (model instanceof UserModel) {",
      "870:             if (props.userId) {",
      "871:                 (query as any)['_id'] = props.userId;",
      "872:             } else if (!props.isRoot && !props.isMasterAdmin) {",
      "873:                 throw new NotAuthorizedException(",
      "874:                     `You do not have permissions to query on - ${model.singularName}.`",
      "875:                 );",
      "876:             }",
      "877:         }",
      "879:         return query;",
      "880:     }",
      "",
      "---------------"
    ],
    "Model/Models/BillingInvoice.ts||Model/Models/BillingInvoice.ts": [
      "File: Model/Models/BillingInvoice.ts -> Model/Models/BillingInvoice.ts"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRule.ts||Model/Models/OnCallDutyPolicyEscalationRule.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRule.ts -> Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "355:     @JoinColumn({ name: 'deletedByUserId' })",
      "356:     public deletedByUser?: User = undefined;",
      "358:     @ColumnAccessControl({",
      "359:         create: [",
      "360:             Permission.ProjectOwner,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "358:     @ColumnAccessControl({",
      "359:         create: [],",
      "360:         read: [],",
      "361:         update: [],",
      "362:     })",
      "363:     @TableColumn({",
      "364:         type: TableColumnType.ObjectID,",
      "365:         title: 'Deleted by User ID',",
      "366:         description:",
      "367:             'User ID who deleted this object (if this object was deleted by a User)',",
      "368:     })",
      "369:     @Column({",
      "370:         type: ColumnType.ObjectID,",
      "371:         nullable: true,",
      "372:         transformer: ObjectID.getDatabaseTransformer(),",
      "373:     })",
      "374:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts||Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts -> Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "420:     )",
      "421:     @JoinColumn({ name: 'deletedByUserId' })",
      "422:     public deletedByUser?: User = undefined;",
      "423: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "425:     @ColumnAccessControl({",
      "426:         create: [],",
      "427:         read: [],",
      "428:         update: [],",
      "429:     })",
      "430:     @TableColumn({",
      "431:         type: TableColumnType.ObjectID,",
      "432:         title: 'Deleted by User ID',",
      "433:         description:",
      "434:             'User ID who deleted this object (if this object was deleted by a User)',",
      "435:     })",
      "436:     @Column({",
      "437:         type: ColumnType.ObjectID,",
      "438:         nullable: true,",
      "439:         transformer: ObjectID.getDatabaseTransformer(),",
      "440:     })",
      "441:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts||Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts -> Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "418:     )",
      "419:     @JoinColumn({ name: 'deletedByUserId' })",
      "420:     public deletedByUser?: User = undefined;",
      "421: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "422:     @ColumnAccessControl({",
      "423:         create: [],",
      "424:         read: [],",
      "425:         update: [],",
      "426:     })",
      "427:     @TableColumn({",
      "428:         type: TableColumnType.ObjectID,",
      "429:         title: 'Deleted by User ID',",
      "430:         description:",
      "431:             'User ID who deleted this object (if this object was deleted by a User)',",
      "432:     })",
      "433:     @Column({",
      "434:         type: ColumnType.ObjectID,",
      "435:         nullable: true,",
      "436:         transformer: ObjectID.getDatabaseTransformer(),",
      "437:     })",
      "438:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts||Model/Models/OnCallDutyPolicyEscalationRuleUser.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleUser.ts -> Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "417:     )",
      "418:     @JoinColumn({ name: 'deletedByUserId' })",
      "419:     public deletedByUser?: User = undefined;",
      "420: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "421:     @ColumnAccessControl({",
      "422:         create: [],",
      "423:         read: [],",
      "424:         update: [],",
      "425:     })",
      "426:     @TableColumn({",
      "427:         type: TableColumnType.ObjectID,",
      "428:         title: 'Deleted by User ID',",
      "429:         description:",
      "430:             'User ID who deleted this object (if this object was deleted by a User)',",
      "431:     })",
      "432:     @Column({",
      "433:         type: ColumnType.ObjectID,",
      "434:         nullable: true,",
      "435:         transformer: ObjectID.getDatabaseTransformer(),",
      "436:     })",
      "437:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyExecutionLog.ts||Model/Models/OnCallDutyPolicyExecutionLog.ts": [
      "File: Model/Models/OnCallDutyPolicyExecutionLog.ts -> Model/Models/OnCallDutyPolicyExecutionLog.ts"
    ],
    "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts||Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts": [
      "File: Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts -> Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "708:         unique: false,",
      "709:     })",
      "710:     public acknowledgedAt?: Date = undefined;",
      "711: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "712:     @ColumnAccessControl({",
      "713:         create: [],",
      "714:         read: [],",
      "715:         update: [],",
      "716:     })",
      "717:     @TableColumn({",
      "718:         type: TableColumnType.ObjectID,",
      "719:         title: 'Deleted by User ID',",
      "720:         description:",
      "721:             'User ID who deleted this object (if this object was deleted by a User)',",
      "722:     })",
      "723:     @Column({",
      "724:         type: ColumnType.ObjectID,",
      "725:         nullable: true,",
      "726:         transformer: ObjectID.getDatabaseTransformer(),",
      "727:     })",
      "728:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicySchedule.ts||Model/Models/OnCallDutyPolicySchedule.ts": [
      "File: Model/Models/OnCallDutyPolicySchedule.ts -> Model/Models/OnCallDutyPolicySchedule.ts"
    ],
    "Model/Models/OnCallDutyPolicyScheduleLayer.ts||Model/Models/OnCallDutyPolicyScheduleLayer.ts": [
      "File: Model/Models/OnCallDutyPolicyScheduleLayer.ts -> Model/Models/OnCallDutyPolicyScheduleLayer.ts"
    ],
    "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts||Model/Models/OnCallDutyPolicyScheduleLayerUser.ts": [
      "File: Model/Models/OnCallDutyPolicyScheduleLayerUser.ts -> Model/Models/OnCallDutyPolicyScheduleLayerUser.ts"
    ],
    "Model/Models/User.ts||Model/Models/User.ts": [
      "File: Model/Models/User.ts -> Model/Models/User.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: @AllowAccessIfSubscriptionIsUnpaid()",
      "33: @TableAccessControl({",
      "34:     create: [Permission.Public],",
      "40:     delete: [Permission.CurrentUser],",
      "41:     update: [Permission.CurrentUser],",
      "42: })",
      "",
      "[Removed Lines]",
      "35:     read: [",
      "36:         Permission.CurrentUser,",
      "37:         Permission.ProjectAdmin,",
      "38:         Permission.ProjectOwner,",
      "39:     ],",
      "",
      "[Added Lines]",
      "35:     read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: class User extends UserModel {",
      "57:     @ColumnAccessControl({",
      "58:         create: [Permission.Public],",
      "64:         update: [Permission.CurrentUser],",
      "65:     })",
      "66:     @TableColumn({ type: TableColumnType.Name, canReadOnRelationQuery: true })",
      "",
      "[Removed Lines]",
      "59:         read: [",
      "60:             Permission.CurrentUser,",
      "61:             Permission.ProjectAdmin,",
      "62:             Permission.ProjectOwner,",
      "63:         ],",
      "",
      "[Added Lines]",
      "55:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76:     @ColumnAccessControl({",
      "77:         create: [Permission.Public],",
      "84:         update: [Permission.CurrentUser],",
      "85:     })",
      "",
      "[Removed Lines]",
      "78:         read: [",
      "79:             Permission.CurrentUser,",
      "80:             Permission.ProjectAdmin,",
      "81:             Permission.ProjectOwner,",
      "82:         ],",
      "",
      "[Added Lines]",
      "70:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     @ColumnAccessControl({",
      "249:         create: [],",
      "256:         update: [Permission.CurrentUser],",
      "257:     })",
      "",
      "[Removed Lines]",
      "250:         read: [",
      "251:             Permission.CurrentUser,",
      "252:             Permission.ProjectAdmin,",
      "253:             Permission.ProjectOwner,",
      "254:         ],",
      "",
      "[Added Lines]",
      "238:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "277:     @ColumnAccessControl({",
      "278:         create: [],",
      "285:         update: [Permission.CurrentUser],",
      "286:     })",
      "",
      "[Removed Lines]",
      "279:         read: [",
      "280:             Permission.CurrentUser,",
      "281:             Permission.ProjectAdmin,",
      "282:             Permission.ProjectOwner,",
      "283:         ],",
      "",
      "[Added Lines]",
      "263:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "298:     @ColumnAccessControl({",
      "299:         create: [],",
      "306:         update: [Permission.CurrentUser],",
      "307:     })",
      "",
      "[Removed Lines]",
      "300:         read: [",
      "301:             Permission.CurrentUser,",
      "302:             Permission.ProjectAdmin,",
      "303:             Permission.ProjectOwner,",
      "304:         ],",
      "",
      "[Added Lines]",
      "280:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "309:         isDefaultValueColumn: true,",
      "310:         required: true,",
      "311:         type: TableColumnType.Boolean,",
      "312:     })",
      "313:     @Column({",
      "314:         type: ColumnType.Boolean,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "288:         canReadOnRelationQuery: true,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "425:     @ColumnAccessControl({",
      "426:         create: [],",
      "433:         update: [Permission.CurrentUser],",
      "434:     })",
      "",
      "[Removed Lines]",
      "427:         read: [",
      "428:             Permission.CurrentUser,",
      "429:             Permission.ProjectAdmin,",
      "430:             Permission.ProjectOwner,",
      "431:         ],",
      "",
      "[Added Lines]",
      "404:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "544:     @ColumnAccessControl({",
      "545:         create: [],",
      "552:         update: [Permission.CurrentUser],",
      "553:     })",
      "",
      "[Removed Lines]",
      "546:         read: [",
      "547:             Permission.CurrentUser,",
      "548:             Permission.ProjectAdmin,",
      "549:             Permission.ProjectOwner,",
      "550:         ],",
      "",
      "[Added Lines]",
      "519:         read: [Permission.CurrentUser],",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0914ae6bda1bacb8903b70c66961999a9334bedd",
      "candidate_info": {
        "commit_hash": "0914ae6bda1bacb8903b70c66961999a9334bedd",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/0914ae6bda1bacb8903b70c66961999a9334bedd",
        "files": [
          "Ingestor/Utils/Criteria/CompareCriteria.ts",
          "Ingestor/Utils/Criteria/EvaluateOverTime.ts",
          "Ingestor/Utils/Criteria/ServerMonitorCriteria.ts"
        ],
        "message": "Add query parameter for EvaluateOverTime criteria",
        "before_after_code_files": [
          "Ingestor/Utils/Criteria/CompareCriteria.ts||Ingestor/Utils/Criteria/CompareCriteria.ts",
          "Ingestor/Utils/Criteria/EvaluateOverTime.ts||Ingestor/Utils/Criteria/EvaluateOverTime.ts",
          "Ingestor/Utils/Criteria/ServerMonitorCriteria.ts||Ingestor/Utils/Criteria/ServerMonitorCriteria.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Ingestor/Utils/Criteria/CompareCriteria.ts||Ingestor/Utils/Criteria/CompareCriteria.ts": [
          "File: Ingestor/Utils/Criteria/CompareCriteria.ts -> Ingestor/Utils/Criteria/CompareCriteria.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { CheckOn, CriteriaFilter, EvaluateOverTimeOptions, EvaluateOverTimeType, FilterType } from \"Common/Types/Monitor/CriteriaFilter\";",
          "2: import Typeof from \"Common/Types/Typeof\";",
          "3: import logger from \"CommonServer/Utils/Logger\";",
          "5: export default class CompareCriteria {",
          "7:     public static greaterThan(data: {",
          "8:         value: number | Array<number>,",
          "9:         evaluationType?: EvaluateOverTimeType | undefined,",
          "10:         threshold: number",
          "11:     }): boolean {",
          "12:         if (Array.isArray(data.value)) {",
          "13:             if (data.evaluationType === EvaluateOverTimeType.AnyValue) {",
          "14:                 return data.value.some((value: number) => value > data.threshold);",
          "15:             } else {",
          "16:                 return data.value.every((value: number) => value > data.threshold);",
          "17:             }",
          "18:         }",
          "20:         return data.value > data.threshold;",
          "21:     }",
          "23:     public static lessThan(data: {",
          "24:         value: number | Array<number>,",
          "25:         evaluationType?: EvaluateOverTimeType | undefined,",
          "26:         threshold: number",
          "27:     }): boolean {",
          "28:         if (Array.isArray(data.value)) {",
          "29:             if (data.evaluationType === EvaluateOverTimeType.AnyValue) {",
          "30:                 return data.value.some((value: number) => value < data.threshold);",
          "31:             } else {",
          "32:                 return data.value.every((value: number) => value < data.threshold);",
          "33:             }",
          "34:         }",
          "36:         return data.value < data.threshold;",
          "37:     }",
          "39:     public static greaterThanOrEqual(data: {",
          "40:         value: number | Array<number>,",
          "41:         evaluationType?: EvaluateOverTimeType | undefined,",
          "42:         threshold: number",
          "43:     }): boolean {",
          "44:         if (Array.isArray(data.value)) {",
          "45:             if (data.evaluationType === EvaluateOverTimeType.AnyValue) {",
          "46:                 return data.value.some((value: number) => value >= data.threshold);",
          "47:             } else {",
          "48:                 return data.value.every((value: number) => value >= data.threshold);",
          "49:             }",
          "50:         }",
          "52:         return data.value >= data.threshold;",
          "53:     }",
          "56:     public static lessThanOrEqual(data: {",
          "57:         value: number | Array<number>,",
          "58:         evaluationType?: EvaluateOverTimeType | undefined,",
          "59:         threshold: number",
          "60:     }): boolean {",
          "61:         if (Array.isArray(data.value)) {",
          "62:             if (data.evaluationType === EvaluateOverTimeType.AnyValue) {",
          "63:                 return data.value.some((value: number) => value <= data.threshold);",
          "64:             } else {",
          "65:                 return data.value.every((value: number) => value <= data.threshold);",
          "66:             }",
          "67:         }",
          "69:         return data.value <= data.threshold;",
          "70:     }",
          "72:     public static equalTo(data: {",
          "73:         value: number | Array<number>,",
          "74:         evaluationType?: EvaluateOverTimeType | undefined,",
          "75:         threshold: number",
          "76:     }): boolean {",
          "77:         if (Array.isArray(data.value)) {",
          "78:             if (data.evaluationType === EvaluateOverTimeType.AnyValue) {",
          "79:                 return data.value.some((value: number) => value === data.threshold);",
          "80:             } else {",
          "81:                 return data.value.every((value: number) => value === data.threshold);",
          "82:             }",
          "83:         }",
          "85:         return data.value === data.threshold;",
          "86:     }",
          "88:     public static notEqualTo(data: {",
          "89:         value: number | Array<number>,",
          "90:         evaluationType?: EvaluateOverTimeType | undefined,",
          "91:         threshold: number",
          "92:     }): boolean {",
          "93:         if (Array.isArray(data.value)) {",
          "94:             if (data.evaluationType === EvaluateOverTimeType.AnyValue) {",
          "95:                 return data.value.some((value: number) => value !== data.threshold);",
          "96:             } else {",
          "97:                 return data.value.every((value: number) => value !== data.threshold);",
          "98:             }",
          "99:         }",
          "101:         return data.value !== data.threshold;",
          "102:     }",
          "104:     public static convertThresholdToNumber(threshold: string | number | undefined): number | null {",
          "105:         if (!threshold) {",
          "106:             return null;",
          "107:         }",
          "109:         if (typeof threshold === Typeof.String) {",
          "110:             try {",
          "111:                 threshold = parseInt(threshold as string);",
          "112:             } catch (err) {",
          "113:                 logger.error(err);",
          "114:                 return null;",
          "115:             }",
          "116:         }",
          "118:         if (typeof threshold !== Typeof.Number) {",
          "119:             return null;",
          "120:         }",
          "122:         return threshold as number;",
          "123:     }",
          "125:     public static compareCriteriaNumbers(data: {",
          "126:         value: Array<number> | number,",
          "127:         threshold: number,",
          "128:         criteriaFilter: CriteriaFilter",
          "129:     }): string | null {",
          "130:         if (data.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "131:             if (CompareCriteria.greaterThan({",
          "132:                 threshold: data.threshold as number,",
          "133:                 value: data.value,",
          "134:                 evaluationType: data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "135:             })) {",
          "136:                 return CompareCriteria.getCompareMessage({",
          "137:                     values: data.value,",
          "138:                     threshold: data.threshold as number,",
          "139:                     criteriaFilter: data.criteriaFilter",
          "140:                 });",
          "141:             }",
          "143:             return null;",
          "144:         }",
          "146:         if (data.criteriaFilter.filterType === FilterType.LessThan) {",
          "147:             if (CompareCriteria.lessThan({",
          "148:                 threshold: data.threshold as number,",
          "149:                 value: data.value,",
          "150:                 evaluationType: data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "151:             })) {",
          "152:                 return CompareCriteria.getCompareMessage({",
          "154:                     values: data.value,",
          "155:                     threshold: data.threshold as number,",
          "156:                     criteriaFilter: data.criteriaFilter",
          "158:                 });",
          "159:             }",
          "161:             return null;",
          "162:         }",
          "164:         if (data.criteriaFilter.filterType === FilterType.EqualTo) {",
          "165:             if (CompareCriteria.equalTo({",
          "166:                 threshold: data.threshold as number,",
          "167:                 value: data.value,",
          "168:                 evaluationType: data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "169:             })) {",
          "170:                 return CompareCriteria.getCompareMessage({",
          "172:                     values: data.value,",
          "173:                     threshold: data.threshold as number,",
          "174:                     criteriaFilter: data.criteriaFilter",
          "176:                 });",
          "177:             }",
          "179:             return null;",
          "180:         }",
          "182:         if (data.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "183:             if (CompareCriteria.notEqualTo({",
          "184:                 threshold: data.threshold as number,",
          "185:                 value: data.value,",
          "186:                 evaluationType: data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "187:             })) {",
          "188:                 return CompareCriteria.getCompareMessage({",
          "190:                     values: data.value,",
          "191:                     threshold: data.threshold as number,",
          "192:                     criteriaFilter: data.criteriaFilter",
          "194:                 });",
          "195:             }",
          "197:             return null;",
          "198:         }",
          "200:         if (",
          "201:             data.criteriaFilter.filterType ===",
          "202:             FilterType.GreaterThanOrEqualTo",
          "203:         ) {",
          "204:             if (CompareCriteria.greaterThanOrEqual({",
          "205:                 threshold: data.threshold as number,",
          "206:                 value: data.value,",
          "207:                 evaluationType: data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "208:             })) {",
          "209:                 return CompareCriteria.getCompareMessage({",
          "211:                     values: data.value,",
          "212:                     threshold: data.threshold as number,",
          "213:                     criteriaFilter: data.criteriaFilter",
          "215:                 });",
          "216:             }",
          "218:             return null;",
          "219:         }",
          "221:         if (",
          "222:             data.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "223:         ) {",
          "224:             if (CompareCriteria.lessThanOrEqual({",
          "225:                 threshold: data.threshold as number,",
          "226:                 value: data.value,",
          "227:                 evaluationType: data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType",
          "228:             })) {",
          "229:                 return CompareCriteria.getCompareMessage({",
          "231:                     values: data.value,",
          "232:                     threshold: data.threshold as number,",
          "233:                     criteriaFilter: data.criteriaFilter",
          "235:                 });",
          "236:             }",
          "238:             return null;",
          "239:         }",
          "241:         return null;",
          "242:     }",
          "244:     public static getCompareMessage(data: {",
          "245:         values: Array<number> | number,",
          "246:         threshold: number,",
          "247:         criteriaFilter: CriteriaFilter,",
          "248:     }): string {",
          "251:         let message = '';",
          "253:         if (data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType === EvaluateOverTimeType.AnyValue) {",
          "254:             message += 'Any value of';",
          "255:         }",
          "257:         if (data.criteriaFilter.evaluateOverTimeOptions?.evaluateOverTimeType === EvaluateOverTimeType.AllValues) {",
          "258:             message += 'All values of';",
          "259:         }",
          "261:         message += ` ${data.criteriaFilter.checkOn}`;",
          "263:         if (data.criteriaFilter.checkOn === CheckOn.DiskUsagePercent) {",
          "265:             const diskPath: string =",
          "266:                 data.criteriaFilter.serverMonitorOptions?.diskPath || '/';",
          "268:             message += ` on disk ${diskPath}`;",
          "269:         }",
          "271:         if (data.criteriaFilter.evaluateOverTimeOptions?.timeValueInMinutes) {",
          "272:             message += ` over the last ${data.criteriaFilter.evaluateOverTimeOptions.timeValueInMinutes} minutes`;",
          "273:         }",
          "275:         if (Array.isArray(data.values)) {",
          "276:             message += ` is ${data.values.join(', ')}`;",
          "277:         } else {",
          "278:             message += ` is ${data.values}`;",
          "279:         }",
          "281:         message += ' which is'",
          "283:         switch (data.criteriaFilter.filterType) {",
          "284:             case FilterType.EqualTo:",
          "285:                 message += ` equal to threshold ${data.threshold}`;",
          "286:                 break;",
          "287:             case FilterType.GreaterThan:",
          "288:                 message += ` greater than threshold ${data.threshold}`;",
          "289:                 break;",
          "290:             case FilterType.GreaterThanOrEqualTo:",
          "291:                 message += ` greater than or equal to threshold ${data.threshold}`;",
          "292:                 break;",
          "293:             case FilterType.LessThan:",
          "294:                 message += ` less than threshold ${data.threshold}`;",
          "295:                 break;",
          "296:             case FilterType.LessThanOrEqualTo:",
          "297:                 message += ` less than or equal to threshold ${data.threshold}`;",
          "298:                 break;",
          "299:         }",
          "301:         return message.trim();",
          "304:     }",
          "306: }",
          "",
          "---------------"
        ],
        "Ingestor/Utils/Criteria/EvaluateOverTime.ts||Ingestor/Utils/Criteria/EvaluateOverTime.ts": [
          "File: Ingestor/Utils/Criteria/EvaluateOverTime.ts -> Ingestor/Utils/Criteria/EvaluateOverTime.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import { CheckOn, EvaluateOverTimeOptions, EvaluateOverTimeType } from \"Common/Types/Monitor/CriteriaFilter\";",
          "6: import ObjectID from \"Common/Types/ObjectID\";",
          "7: import MonitorMetricsByMinuteService from \"CommonServer/Services/MonitorMetricsByMinuteService\";",
          "8: import MonitorMetricsByMinute from \"Model/AnalyticsModels/MonitorMetricsByMinute\";",
          "10: export default class EvaluateOverTime {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: import Query from \"CommonServer/Types/AnalyticsDatabase/Query\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:         const monitorMetricsItems: Array<MonitorMetricsByMinute> = await MonitorMetricsByMinuteService.findBy({",
          "28:             limit: LIMIT_PER_PROJECT,",
          "29:             skip: 0,",
          "30:             props: {",
          "",
          "[Removed Lines]",
          "23:             query: {",
          "24:                 createdAt: new GreaterThanOrEqual(lastMinutesDate),",
          "25:                 monitorId: data.monitorId,",
          "26:                 metricType: data.metricType,",
          "27:             },",
          "",
          "[Added Lines]",
          "23:         const query: Query<MonitorMetricsByMinute>  = {",
          "24:             createdAt: new GreaterThanOrEqual(lastMinutesDate),",
          "25:             monitorId: data.monitorId,",
          "26:             metricType: data.metricType,",
          "27:         };",
          "30:         if(data.miscData){",
          "31:             query.miscData = data.miscData;",
          "32:         }",
          "35:             query: query,",
          "",
          "---------------"
        ],
        "Ingestor/Utils/Criteria/ServerMonitorCriteria.ts||Ingestor/Utils/Criteria/ServerMonitorCriteria.ts": [
          "File: Ingestor/Utils/Criteria/ServerMonitorCriteria.ts -> Ingestor/Utils/Criteria/ServerMonitorCriteria.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: } from 'Common/Types/Monitor/CriteriaFilter';",
          "7: import { BasicDiskMetrics } from 'Common/Types/Infrastructure/BasicMetrics';",
          "8: import ServerMonitorResponse from 'Common/Types/Monitor/ServerMonitor/ServerMonitorResponse';",
          "11: import OneUptimeDate from 'Common/Types/Date';",
          "12: import ProbeMonitorResponse from 'Common/Types/Probe/ProbeMonitorResponse';",
          "13: import EvaluateOverTime from './EvaluateOverTime';",
          "14: import { JSONObject } from 'Common/Types/JSON';",
          "16: export default class ServerMonitorCriteria {",
          "17:     public static async isMonitorInstanceCriteriaFilterMet(input: {",
          "",
          "[Removed Lines]",
          "9: import logger from 'CommonServer/Utils/Logger';",
          "10: import Typeof from 'Common/Types/Typeof';",
          "",
          "[Added Lines]",
          "13: import CompareCriteria from './CompareCriteria';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:     }): Promise<string | null> {",
          "28:                 monitorId: input.dataToProcess.monitorId!,",
          "29:                 evaluateOverTimeOptions: input.criteriaFilter.evaluateOverTimeOptions,",
          "30:                 metricType: input.criteriaFilter.checkOn,",
          "31:                 miscData: input.criteriaFilter.serverMonitorOptions as JSONObject",
          "32:             });",
          "35:         }",
          "",
          "[Removed Lines]",
          "23:         let value: number | string | undefined = input.criteriaFilter.value;",
          "26:         if(input.criteriaFilter.eveluateOverTime && input.criteriaFilter.evaluateOverTimeOptions) {",
          "27:             const overTimeValue: Array<number> | number = await EvaluateOverTime.getValueOverTime({",
          "",
          "[Added Lines]",
          "22:         let threshold: number | string | undefined | null = input.criteriaFilter.value;",
          "23:         let overTimeValue: Array<number> | number | undefined = undefined;",
          "26:         if (input.criteriaFilter.eveluateOverTime && input.criteriaFilter.evaluateOverTimeOptions) {",
          "27:             overTimeValue = await EvaluateOverTime.getValueOverTime({",
          "34:             if (Array.isArray(overTimeValue) && overTimeValue.length === 0) {",
          "35:                 return null;",
          "36:             }",
          "38:             if (overTimeValue === undefined) {",
          "39:                 return null;",
          "40:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:             !(input.dataToProcess as ServerMonitorResponse)",
          "81:                 .onlyCheckRequestReceivedAt",
          "82:         ) {",
          "156:         }",
          "158:         if (",
          "",
          "[Removed Lines]",
          "83:             if (!value) {",
          "84:                 return null;",
          "85:             }",
          "87:             if (typeof value === Typeof.String) {",
          "88:                 try {",
          "89:                     value = parseInt(value as string);",
          "90:                 } catch (err) {",
          "91:                     logger.error(err);",
          "92:                     return null;",
          "93:                 }",
          "94:             }",
          "96:             if (typeof value !== Typeof.Number) {",
          "97:                 return null;",
          "98:             }",
          "100:             const currentCpuPercent: number =",
          "101:                 (input.dataToProcess as ServerMonitorResponse)",
          "102:                     .basicInfrastructureMetrics?.cpuMetrics.percentUsed || 0;",
          "104:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "105:                 if (currentCpuPercent > (value as number)) {",
          "106:                     return `CPU Percent is ${currentCpuPercent}% which is greater than the criteria value of ${value}%.`;",
          "107:                 }",
          "109:                 return null;",
          "110:             }",
          "112:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "113:                 if (currentCpuPercent < (value as number)) {",
          "114:                     return `CPU Percent is ${currentCpuPercent}% which is less than than the criteria value of ${value}%.`;",
          "115:                 }",
          "117:                 return null;",
          "118:             }",
          "120:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "121:                 if (currentCpuPercent === (value as number)) {",
          "122:                     return `CPU Percent is ${currentCpuPercent}% which is equal to the criteria value of ${value}%.`;",
          "123:                 }",
          "125:                 return null;",
          "126:             }",
          "128:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "129:                 if (currentCpuPercent !== (value as number)) {",
          "130:                     return `CPU Percent is ${currentCpuPercent}% which is not equal to the criteria value of ${value}%.`;",
          "131:                 }",
          "133:                 return null;",
          "134:             }",
          "136:             if (",
          "137:                 input.criteriaFilter.filterType ===",
          "138:                 FilterType.GreaterThanOrEqualTo",
          "139:             ) {",
          "140:                 if (currentCpuPercent >= (value as number)) {",
          "141:                     return `CPU Percent is ${currentCpuPercent}% which is greater than or equal to the criteria value of ${value}%.`;",
          "142:                 }",
          "144:                 return null;",
          "145:             }",
          "147:             if (",
          "148:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "149:             ) {",
          "150:                 if (currentCpuPercent <= (value as number)) {",
          "151:                     return `CPU Percent is ${currentCpuPercent}% which is less than or equal to the criteria value of ${value}%.`;",
          "152:                 }",
          "154:                 return null;",
          "155:             }",
          "",
          "[Added Lines]",
          "89:             threshold = CompareCriteria.convertThresholdToNumber(threshold);",
          "91:             const currentCpuPercent: number | Array<number> = overTimeValue || (input.dataToProcess as ServerMonitorResponse)",
          "92:                 .basicInfrastructureMetrics?.cpuMetrics.percentUsed || 0;",
          "94:             return CompareCriteria.compareCriteriaNumbers({",
          "95:                 value: currentCpuPercent,",
          "96:                 threshold: threshold as number,",
          "97:                 criteriaFilter: input.criteriaFilter,",
          "98:             });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "160:             !(input.dataToProcess as ServerMonitorResponse)",
          "161:                 .onlyCheckRequestReceivedAt",
          "162:         ) {",
          "236:         }",
          "238:         if (",
          "",
          "[Removed Lines]",
          "163:             if (!value) {",
          "164:                 return null;",
          "165:             }",
          "167:             if (typeof value === Typeof.String) {",
          "168:                 try {",
          "169:                     value = parseInt(value as string);",
          "170:                 } catch (err) {",
          "171:                     logger.error(err);",
          "172:                     return null;",
          "173:                 }",
          "174:             }",
          "176:             if (typeof value !== Typeof.Number) {",
          "177:                 return null;",
          "178:             }",
          "180:             const memoryPercent: number =",
          "181:                 (input.dataToProcess as ServerMonitorResponse)",
          "182:                     .basicInfrastructureMetrics?.memoryMetrics.percentFree || 0;",
          "184:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "185:                 if (memoryPercent > (value as number)) {",
          "186:                     return `Memory Percent is ${memoryPercent}% which is greater than the criteria value of ${value}%.`;",
          "187:                 }",
          "189:                 return null;",
          "190:             }",
          "192:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "193:                 if (memoryPercent < (value as number)) {",
          "194:                     return `Memory Percent is ${memoryPercent}% which is less than than the criteria value of ${value}%.`;",
          "195:                 }",
          "197:                 return null;",
          "198:             }",
          "200:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "201:                 if (memoryPercent === (value as number)) {",
          "202:                     return `Memory Percent is ${memoryPercent}% which is equal to the criteria value of ${value}%.`;",
          "203:                 }",
          "205:                 return null;",
          "206:             }",
          "208:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "209:                 if (memoryPercent !== (value as number)) {",
          "210:                     return `Memory Percent is ${memoryPercent}% which is not equal to the criteria value of ${value}%.`;",
          "211:                 }",
          "213:                 return null;",
          "214:             }",
          "216:             if (",
          "217:                 input.criteriaFilter.filterType ===",
          "218:                 FilterType.GreaterThanOrEqualTo",
          "219:             ) {",
          "220:                 if (memoryPercent >= (value as number)) {",
          "221:                     return `Memory Percent is ${memoryPercent}% which is greater than or equal to the criteria value of ${value}%.`;",
          "222:                 }",
          "224:                 return null;",
          "225:             }",
          "227:             if (",
          "228:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "229:             ) {",
          "230:                 if (memoryPercent <= (value as number)) {",
          "231:                     return `Memory Percent is ${memoryPercent}% which is less than or equal to the criteria value of ${value}%.`;",
          "232:                 }",
          "234:                 return null;",
          "235:             }",
          "",
          "[Added Lines]",
          "106:             threshold = CompareCriteria.convertThresholdToNumber(threshold);",
          "108:             const memoryPercent: number | Array<number> = overTimeValue || (input.dataToProcess as ServerMonitorResponse)",
          "109:                 .basicInfrastructureMetrics?.memoryMetrics.percentUsed || 0;",
          "111:             return CompareCriteria.compareCriteriaNumbers({",
          "112:                 value: memoryPercent,",
          "113:                 threshold: threshold as number,",
          "114:                 criteriaFilter: input.criteriaFilter",
          "115:             });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "240:             !(input.dataToProcess as ServerMonitorResponse)",
          "241:                 .onlyCheckRequestReceivedAt",
          "242:         ) {",
          "260:             const diskPath: string =",
          "261:                 input.criteriaFilter.serverMonitorOptions?.diskPath || '/';",
          "",
          "[Removed Lines]",
          "243:             if (!value) {",
          "244:                 return null;",
          "245:             }",
          "247:             if (typeof value === Typeof.String) {",
          "248:                 try {",
          "249:                     value = parseInt(value as string);",
          "250:                 } catch (err) {",
          "251:                     logger.error(err);",
          "252:                     return null;",
          "253:                 }",
          "254:             }",
          "256:             if (typeof value !== Typeof.Number) {",
          "257:                 return null;",
          "258:             }",
          "",
          "[Added Lines]",
          "123:             threshold = CompareCriteria.convertThresholdToNumber(threshold);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "272:                     }",
          "273:                 )[0]?.percentFree || 0;",
          "327:         }",
          "329:         return null;",
          "",
          "[Removed Lines]",
          "275:             if (input.criteriaFilter.filterType === FilterType.GreaterThan) {",
          "276:                 if (diskPercent > (value as number)) {",
          "277:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is greater than the criteria value of ${value}%.`;",
          "278:                 }",
          "280:                 return null;",
          "281:             }",
          "283:             if (input.criteriaFilter.filterType === FilterType.LessThan) {",
          "284:                 if (diskPercent < (value as number)) {",
          "285:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is less than than the criteria value of ${value}%.`;",
          "286:                 }",
          "288:                 return null;",
          "289:             }",
          "291:             if (input.criteriaFilter.filterType === FilterType.EqualTo) {",
          "292:                 if (diskPercent === (value as number)) {",
          "293:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is equal to the criteria value of ${value}%.`;",
          "294:                 }",
          "296:                 return null;",
          "297:             }",
          "299:             if (input.criteriaFilter.filterType === FilterType.NotEqualTo) {",
          "300:                 if (diskPercent !== (value as number)) {",
          "301:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is not equal to the criteria value of ${value}%.`;",
          "302:                 }",
          "304:                 return null;",
          "305:             }",
          "307:             if (",
          "308:                 input.criteriaFilter.filterType ===",
          "309:                 FilterType.GreaterThanOrEqualTo",
          "310:             ) {",
          "311:                 if (diskPercent >= (value as number)) {",
          "312:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is greater than or equal to the criteria value of ${value}%.`;",
          "313:                 }",
          "315:                 return null;",
          "316:             }",
          "318:             if (",
          "319:                 input.criteriaFilter.filterType === FilterType.LessThanOrEqualTo",
          "320:             ) {",
          "321:                 if (diskPercent <= (value as number)) {",
          "322:                     return `Disk Percent for ${diskPath} is ${diskPercent}% which is less than or equal to the criteria value of ${value}%.`;",
          "323:                 }",
          "325:                 return null;",
          "326:             }",
          "",
          "[Added Lines]",
          "140:             return CompareCriteria.compareCriteriaNumbers({",
          "141:                 value: diskPercent,",
          "142:                 threshold: threshold as number,",
          "143:                 criteriaFilter: input.criteriaFilter,",
          "144:             });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efd8a0e79f08ddcb5ab81bc2cb7a8608ea019844",
      "candidate_info": {
        "commit_hash": "efd8a0e79f08ddcb5ab81bc2cb7a8608ea019844",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/efd8a0e79f08ddcb5ab81bc2cb7a8608ea019844",
        "files": [
          "Dashboard/src/Components/Incident/IncidentsTable.tsx",
          "Dashboard/src/Pages/Monitor/View/Incidents.tsx"
        ],
        "message": "Add FormValues import and update createInitialValues prop",
        "before_after_code_files": [
          "Dashboard/src/Components/Incident/IncidentsTable.tsx||Dashboard/src/Components/Incident/IncidentsTable.tsx",
          "Dashboard/src/Pages/Monitor/View/Incidents.tsx||Dashboard/src/Pages/Monitor/View/Incidents.tsx"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Dashboard/src/Components/Incident/IncidentsTable.tsx||Dashboard/src/Components/Incident/IncidentsTable.tsx": [
          "File: Dashboard/src/Components/Incident/IncidentsTable.tsx -> Dashboard/src/Components/Incident/IncidentsTable.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import ObjectID from 'Common/Types/ObjectID';",
          "35: import { ButtonStyleType } from 'CommonUI/src/Components/Button/Button';",
          "36: import BaseModel from 'Common/Models/BaseModel';",
          "38: export interface ComponentProps {",
          "39:     query?: Query<Incident> | undefined;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: import FormValues from 'CommonUI/src/Components/Forms/Types/FormValues';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:     noItemsMessage?: string | undefined;",
          "42:     title?: string | undefined;",
          "43:     description?: string | undefined;",
          "44: }",
          "46: const IncidentsTable: FunctionComponent<ComponentProps> = (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     createInitialValues?: FormValues<Incident> | undefined;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "208:                 isEditable={false}",
          "209:                 isCreateable={true}",
          "210:                 isViewable={true}",
          "212:                 cardProps={{",
          "213:                     title: props.title || 'Incidents',",
          "214:                     buttons: [",
          "",
          "[Removed Lines]",
          "211:                 createInitialValues={initialValuesForIncident}",
          "",
          "[Added Lines]",
          "213:                 createInitialValues={Object.keys(initialValuesForIncident).length > 0 ? initialValuesForIncident : props.createInitialValues}",
          "",
          "---------------"
        ],
        "Dashboard/src/Pages/Monitor/View/Incidents.tsx||Dashboard/src/Pages/Monitor/View/Incidents.tsx": [
          "File: Dashboard/src/Pages/Monitor/View/Incidents.tsx -> Dashboard/src/Pages/Monitor/View/Incidents.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import React, { Fragment, FunctionComponent, ReactElement } from 'react';",
          "3: import PageComponentProps from '../../PageComponentProps';",
          "5: import DashboardNavigation from '../../../Utils/Navigation';",
          "6: import ObjectID from 'Common/Types/ObjectID';",
          "17: import Navigation from 'CommonUI/src/Utils/Navigation';",
          "19: import DisabledWarning from '../../../Components/Monitor/DisabledWarning';",
          "20: const MonitorIncidents: FunctionComponent<PageComponentProps> = (",
          "21:     _props: PageComponentProps",
          "22: ): ReactElement => {",
          "",
          "[Removed Lines]",
          "1: import Route from 'Common/Types/API/Route';",
          "4: import BaseModel from 'Common/Models/BaseModel';",
          "7: import Monitor from 'Model/Models/Monitor';",
          "8: import FieldType from 'CommonUI/src/Components/Types/FieldType';",
          "9: import MonitorsElement from '../../../Components/Monitor/Monitors';",
          "10: import { JSONArray, JSONObject } from 'Common/Types/JSON';",
          "11: import Color from 'Common/Types/Color';",
          "12: import Pill from 'CommonUI/src/Components/Pill/Pill';",
          "13: import FormFieldSchemaType from 'CommonUI/src/Components/Forms/Types/FormFieldSchemaType';",
          "14: import MonitorStatus from 'Model/Models/MonitorStatus';",
          "15: import Incident from 'Model/Models/Incident';",
          "16: import ModelTable from 'CommonUI/src/Components/ModelTable/ModelTable';",
          "18: import IncidentSeverity from 'Model/Models/IncidentSeverity';",
          "",
          "[Added Lines]",
          "8: import IncidentsTable from '../../../Components/Incident/IncidentsTable';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     return (",
          "26:         <Fragment>",
          "27:             <DisabledWarning monitorId={modelId} />",
          "35:                 query={{",
          "43:                 }}",
          "44:                 createInitialValues={{",
          "45:                     monitors: [modelId.toString()],",
          "46:                 }}",
          "253:             />",
          "254:         </Fragment>",
          "255:     );",
          "",
          "[Removed Lines]",
          "28:             <ModelTable<Incident>",
          "29:                 modelType={Incident}",
          "30:                 id=\"incidents-table\"",
          "31:                 name=\"Monitor > Incidents\"",
          "32:                 isDeleteable={false}",
          "33:                 isEditable={false}",
          "34:                 isCreateable={true}",
          "36:                     monitors: [modelId.toString()],",
          "37:                 }}",
          "38:                 isViewable={true}",
          "39:                 cardProps={{",
          "40:                     title: 'Incidents',",
          "41:                     description:",
          "42:                         'Here is a list of incidents for this monitor.',",
          "47:                 onViewPage={(item: Incident): Promise<Route> => {",
          "48:                     return Promise.resolve(",
          "49:                         new Route(",
          "50:                             `/dashboard/${",
          "51:                                 DashboardNavigation.getProjectId()?.toString() ||",
          "52:                                 ''",
          "53:                             }/incidents/${item._id}`",
          "54:                         )",
          "55:                     );",
          "56:                 }}",
          "57:                 noItemsMessage={'No incidents created for this monitor so far.'}",
          "58:                 formFields={[",
          "59:                     {",
          "60:                         field: {",
          "61:                             title: true,",
          "62:                         },",
          "63:                         title: 'Title',",
          "64:                         fieldType: FormFieldSchemaType.Text,",
          "65:                         required: true,",
          "66:                         placeholder: 'Incident Title',",
          "67:                         validation: {",
          "68:                             minLength: 2,",
          "69:                         },",
          "70:                     },",
          "71:                     {",
          "72:                         field: {",
          "73:                             description: true,",
          "74:                         },",
          "75:                         title: 'Description',",
          "76:                         fieldType: FormFieldSchemaType.LongText,",
          "77:                         required: true,",
          "78:                         placeholder: 'Description',",
          "79:                     },",
          "80:                     {",
          "81:                         field: {",
          "82:                             monitors: true,",
          "83:                         },",
          "84:                         title: 'Monitors affected',",
          "85:                         description:",
          "86:                             'Select monitors affected by this incident.',",
          "87:                         fieldType: FormFieldSchemaType.MultiSelectDropdown,",
          "88:                         dropdownModal: {",
          "89:                             type: Monitor,",
          "90:                             labelField: 'name',",
          "91:                             valueField: '_id',",
          "92:                         },",
          "93:                         required: true,",
          "94:                         placeholder: 'Monitors affected',",
          "95:                     },",
          "96:                     {",
          "97:                         field: {",
          "98:                             incidentSeverity: true,",
          "99:                         },",
          "100:                         title: 'Incident Severity',",
          "101:                         description: 'What type of incident is this?',",
          "102:                         fieldType: FormFieldSchemaType.Dropdown,",
          "103:                         dropdownModal: {",
          "104:                             type: IncidentSeverity,",
          "105:                             labelField: 'name',",
          "106:                             valueField: '_id',",
          "107:                         },",
          "108:                         required: true,",
          "109:                         placeholder: 'Incident Severity',",
          "110:                     },",
          "111:                     {",
          "112:                         field: {",
          "113:                             changeMonitorStatusTo: true,",
          "114:                         },",
          "115:                         title: 'Change Monitor Status to',",
          "116:                         description:",
          "117:                             'This will change the status of all the monitors attached to this incident.',",
          "118:                         fieldType: FormFieldSchemaType.Dropdown,",
          "119:                         dropdownModal: {",
          "120:                             type: MonitorStatus,",
          "121:                             labelField: 'name',",
          "122:                             valueField: '_id',",
          "123:                         },",
          "124:                         required: true,",
          "125:                         placeholder: 'Monitor Status',",
          "126:                     },",
          "127:                 ]}",
          "128:                 showRefreshButton={true}",
          "129:                 showFilterButton={true}",
          "130:                 showViewIdButton={true}",
          "131:                 viewPageRoute={Navigation.getCurrentRoute()}",
          "132:                 columns={[",
          "133:                     {",
          "134:                         field: {",
          "135:                             title: true,",
          "136:                         },",
          "137:                         title: 'Title',",
          "138:                         type: FieldType.Text,",
          "139:                         isFilterable: true,",
          "140:                     },",
          "141:                     {",
          "142:                         field: {",
          "143:                             currentIncidentState: {",
          "144:                                 name: true,",
          "145:                                 color: true,",
          "146:                             },",
          "147:                         },",
          "148:                         title: 'Current State',",
          "149:                         type: FieldType.Text,",
          "150:                         getElement: (item: JSONObject): ReactElement => {",
          "151:                             if (item['currentIncidentState']) {",
          "152:                                 return (",
          "153:                                     <Pill",
          "154:                                         isMinimal={true}",
          "155:                                         color={",
          "156:                                             (",
          "157:                                                 item[",
          "158:                                                     'currentIncidentState'",
          "159:                                                 ] as JSONObject",
          "160:                                             )['color'] as Color",
          "161:                                         }",
          "162:                                         text={",
          "163:                                             (",
          "164:                                                 item[",
          "165:                                                     'currentIncidentState'",
          "166:                                                 ] as JSONObject",
          "167:                                             )['name'] as string",
          "168:                                         }",
          "169:                                     />",
          "170:                                 );",
          "171:                             }",
          "173:                             return <></>;",
          "174:                         },",
          "175:                     },",
          "176:                     {",
          "177:                         field: {",
          "178:                             incidentSeverity: {",
          "179:                                 name: true,",
          "180:                                 color: true,",
          "181:                             },",
          "182:                         },",
          "183:                         isFilterable: true,",
          "184:                         filterEntityType: IncidentSeverity,",
          "185:                         filterQuery: {",
          "186:                             projectId:",
          "187:                                 DashboardNavigation.getProjectId()?.toString(),",
          "188:                         },",
          "189:                         filterDropdownField: {",
          "190:                             label: 'name',",
          "191:                             value: '_id',",
          "192:                         },",
          "193:                         title: 'Severity',",
          "194:                         type: FieldType.Entity,",
          "195:                         getElement: (item: JSONObject): ReactElement => {",
          "196:                             if (item['incidentSeverity']) {",
          "197:                                 return (",
          "198:                                     <Pill",
          "199:                                         color={",
          "200:                                             (",
          "201:                                                 item[",
          "202:                                                     'incidentSeverity'",
          "203:                                                 ] as JSONObject",
          "204:                                             )['color'] as Color",
          "205:                                         }",
          "206:                                         isMinimal={true}",
          "207:                                         text={",
          "208:                                             (",
          "209:                                                 item[",
          "210:                                                     'incidentSeverity'",
          "211:                                                 ] as JSONObject",
          "212:                                             )['name'] as string",
          "213:                                         }",
          "214:                                     />",
          "215:                                 );",
          "216:                             }",
          "218:                             return <></>;",
          "219:                         },",
          "220:                     },",
          "221:                     {",
          "222:                         field: {",
          "223:                             monitors: {",
          "224:                                 name: true,",
          "225:                                 _id: true,",
          "226:                                 projectId: true,",
          "227:                             },",
          "228:                         },",
          "229:                         title: 'Monitors Affected',",
          "230:                         type: FieldType.Text,",
          "231:                         getElement: (item: JSONObject): ReactElement => {",
          "232:                             return (",
          "233:                                 <MonitorsElement",
          "234:                                     monitors={",
          "235:                                         BaseModel.fromJSON(",
          "236:                                             (item['monitors'] as JSONArray) ||",
          "237:                                                 [],",
          "238:                                             Monitor",
          "239:                                         ) as Array<Monitor>",
          "240:                                     }",
          "241:                                 />",
          "242:                             );",
          "243:                         },",
          "244:                     },",
          "245:                     {",
          "246:                         field: {",
          "247:                             createdAt: true,",
          "248:                         },",
          "249:                         title: 'Created At',",
          "250:                         type: FieldType.DateTime,",
          "251:                     },",
          "252:                 ]}",
          "",
          "[Added Lines]",
          "18:             <IncidentsTable",
          "19:                 viewPageRoute={Navigation.getCurrentRoute()}",
          "21:                     projectId: DashboardNavigation.getProjectId()?.toString(),",
          "22:                     monitors: [modelId.toString()]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20f09bc6009dcfd9b24bb5489ffb1fbf19336275",
      "candidate_info": {
        "commit_hash": "20f09bc6009dcfd9b24bb5489ffb1fbf19336275",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/20f09bc6009dcfd9b24bb5489ffb1fbf19336275",
        "files": [
          "Accounts/src/Pages/Register.tsx",
          "CommonServer/Services/ProjectService.ts",
          "CommonServer/Utils/Probe/ProbeMonitorResponse.ts",
          "CommonUI/src/Utils/User.ts",
          "Home/views/head.ejs",
          "Model/Models/Project.ts",
          "Model/Models/User.ts"
        ],
        "message": "add utm params",
        "before_after_code_files": [
          "Accounts/src/Pages/Register.tsx||Accounts/src/Pages/Register.tsx",
          "CommonServer/Services/ProjectService.ts||CommonServer/Services/ProjectService.ts",
          "CommonServer/Utils/Probe/ProbeMonitorResponse.ts||CommonServer/Utils/Probe/ProbeMonitorResponse.ts",
          "CommonUI/src/Utils/User.ts||CommonUI/src/Utils/User.ts",
          "Home/views/head.ejs||Home/views/head.ejs",
          "Model/Models/Project.ts||Model/Models/Project.ts",
          "Model/Models/User.ts||Model/Models/User.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Model/Models/User.ts||Model/Models/User.ts"
          ],
          "candidate": [
            "Model/Models/User.ts||Model/Models/User.ts"
          ]
        }
      },
      "candidate_diff": {
        "Accounts/src/Pages/Register.tsx||Accounts/src/Pages/Register.tsx": [
          "File: Accounts/src/Pages/Register.tsx -> Accounts/src/Pages/Register.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: import URL from 'Common/Types/API/URL';",
          "14: import { SIGNUP_API_URL } from '../Utils/ApiPaths';",
          "15: import Fields from 'CommonUI/src/Components/Forms/Types/Fields';",
          "17: const RegisterPage: () => JSX.Element = () => {",
          "18:     const apiUrl: URL = SIGNUP_API_URL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: import { Dictionary } from 'lodash';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:                         maxPrimaryButtonWidth={true}",
          "126:                         fields={formFields}",
          "127:                         apiUrl={apiUrl}",
          "128:                         formType={FormType.Create}",
          "129:                         submitButtonText={'Sign Up'}",
          "130:                         onSuccess={(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:                         onBeforeCreate={(item: User): Promise<User> => {",
          "130:                             const utmParams: Dictionary<string> =",
          "131:                                 UserUtil.getUtmParams();",
          "133:                             if (",
          "134:                                 utmParams &&",
          "135:                                 Object.keys(utmParams).length > 0",
          "136:                             ) {",
          "137:                                 item.utmSource = utmParams['utmSource'] || '';",
          "138:                                 item.utmMedium = utmParams['utmMedium'] || '';",
          "139:                                 item.utmCampaign =",
          "140:                                     utmParams['utmCampaign'] || '';",
          "141:                                 item.utmTerm = utmParams['utmTerm'] || '';",
          "142:                                 item.utmContent = utmParams['utmContent'] || '';",
          "143:                                 item.utmUrl = utmParams['utmUrl'] || '';",
          "144:                             }",
          "146:                             return Promise.resolve(item);",
          "147:                         }}",
          "",
          "---------------"
        ],
        "CommonServer/Services/ProjectService.ts||CommonServer/Services/ProjectService.ts": [
          "File: CommonServer/Services/ProjectService.ts -> CommonServer/Services/ProjectService.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:                 email: true,",
          "140:                 companyPhoneNumber: true,",
          "141:                 companyName: true,",
          "142:             },",
          "143:             props: {",
          "144:                 isRoot: true,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:                 utmCampaign: true,",
          "143:                 utmSource: true,",
          "144:                 utmMedium: true,",
          "145:                 utmTerm: true,",
          "146:                 utmContent: true,",
          "147:                 utmUrl: true,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:         data.data.createdOwnerEmail = user.email!;",
          "154:         data.data.createdOwnerPhone = user.companyPhoneNumber!;",
          "155:         data.data.createdOwnerCompanyName = user.companyName!;",
          "157:         return Promise.resolve({ createBy: data, carryForward: null });",
          "158:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:         data.data.utmCampaign = user.utmCampaign!;",
          "163:         data.data.utmSource = user.utmSource!;",
          "164:         data.data.utmMedium = user.utmMedium!;",
          "165:         data.data.utmTerm = user.utmTerm!;",
          "166:         data.data.utmContent = user.utmContent!;",
          "167:         data.data.utmUrl = user.utmUrl!;",
          "",
          "---------------"
        ],
        "CommonServer/Utils/Probe/ProbeMonitorResponse.ts||CommonServer/Utils/Probe/ProbeMonitorResponse.ts": [
          "File: CommonServer/Utils/Probe/ProbeMonitorResponse.ts -> CommonServer/Utils/Probe/ProbeMonitorResponse.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:             rootCause: null,",
          "46:         };",
          "49:         const monitor: Monitor | null = await MonitorService.findOneById({",
          "50:             id: dataToProcess.monitorId,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:         logger.info('Processing probe response');",
          "49:         logger.info('Monitor ID: ' + dataToProcess.monitorId);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:         }",
          "68:         if (monitor.disableActiveMonitoring) {",
          "69:             throw new BadDataException(",
          "70:                 'Monitor is disabled. Please enable it to start monitoring again.'",
          "71:             );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:             logger.info(",
          "73:                 `${dataToProcess.monitorId.toString()} Monitor is disabled. Please enable it to start monitoring again.`",
          "74:             );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:         if (",
          "79:             monitor.monitorType === MonitorType.API ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:         logger.info(",
          "85:             `${dataToProcess.monitorId.toString()} - monitor type ${",
          "86:                 monitor.monitorType",
          "87:             }`",
          "88:         );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "154:             monitorSteps.data?.monitorStepsInstanceArray.length === 0",
          "155:         ) {",
          "157:             return response;",
          "158:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:             logger.info(",
          "170:                 `${dataToProcess.monitorId.toString()} - No monitoring steps.`",
          "171:             );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "255:         });",
          "257:         if (response.criteriaMetId && response.rootCause) {",
          "258:             await this.criteriaMetCreateIncidentsAndUpdateMonitorStatus({",
          "259:                 monitor: monitor,",
          "260:                 rootCause: response.rootCause,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273:             logger.info(",
          "274:                 `${dataToProcess.monitorId.toString()} - Criteria met: ${",
          "275:                     response.criteriaMetId",
          "276:                 }`",
          "277:             );",
          "278:             logger.info(",
          "279:                 `${dataToProcess.monitorId.toString()} - Root cause: ${",
          "280:                     response.rootCause",
          "281:                 }`",
          "282:             );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "268:             monitor.currentMonitorStatusId?.toString() !==",
          "269:                 monitorSteps.data.defaultMonitorStatusId.toString()",
          "270:         ) {",
          "271:             await this.checkOpenIncidentsAndCloseIfResolved({",
          "272:                 monitorId: monitor.id!,",
          "273:                 autoResolveCriteriaInstanceIdIncidentIdsDictionary,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:             logger.info(",
          "298:                 `${dataToProcess.monitorId.toString()} - No criteria met. Change to default status.`",
          "299:             );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "371:             input.criteriaInstance.data?.monitorStatusId.toString() !==",
          "372:                 input.monitor.currentMonitorStatusId?.toString()",
          "373:         ) {",
          "376:             const monitorStatusId: ObjectID | undefined =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:             logger.info(",
          "405:                 `${input.monitor.id?.toString()} - Change monitor status to ${input.criteriaInstance.data?.monitorStatusId.toString()}`",
          "406:             );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "397:         }",
          "402:         const openIncidents: Array<Incident> =",
          "403:             await this.checkOpenIncidentsAndCloseIfResolved({",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:         logger.info(`${input.monitor.id?.toString()} - Check open incidents.`);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "415:             for (const criteriaIncident of input.criteriaInstance.data",
          "416:                 ?.incidents || []) {",
          "419:                     openIncidents.find((incident: Incident) => {",
          "420:                         return (",
          "421:                             incident.createdCriteriaId ===",
          "",
          "[Removed Lines]",
          "418:                 const hasAlreadyOpenIncident: boolean = Boolean(",
          "",
          "[Added Lines]",
          "452:                 const alreadyOpenIncident: Incident | undefined =",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "423:                             incident.createdIncidentTemplateId ===",
          "424:                                 criteriaIncident.id.toString()",
          "425:                         );",
          "427:                 );",
          "429:                 if (hasAlreadyOpenIncident) {",
          "",
          "[Removed Lines]",
          "426:                     })",
          "",
          "[Added Lines]",
          "460:                     });",
          "462:                 const hasAlreadyOpenIncident: boolean =",
          "463:                     Boolean(alreadyOpenIncident);",
          "465:                 logger.info(",
          "466:                     `${input.monitor.id?.toString()} - Open Incident ${alreadyOpenIncident?.id?.toString()}`",
          "467:                 );",
          "469:                 logger.info(",
          "470:                     `${input.monitor.id?.toString()} - Has open incident ${hasAlreadyOpenIncident}`",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "435:                 const incident: Incident = new Incident();",
          "437:                 incident.title = criteriaIncident.title;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "479:                 logger.info(",
          "480:                     `${input.monitor.id?.toString()} - Create incident.`",
          "481:                 );",
          "",
          "---------------"
        ],
        "CommonUI/src/Utils/User.ts||CommonUI/src/Utils/User.ts": [
          "File: CommonUI/src/Utils/User.ts -> CommonUI/src/Utils/User.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     public static logout(): void {",
          "126:         LocalStorage.clear();",
          "127:     }",
          "128: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:     public static getUtmParams(): Dictionary<string> {",
          "130:         const localStorageItems: Dictionary<string> =",
          "131:             LocalStorage.getAllItems();",
          "132:         const result: Dictionary<string> = {};",
          "134:         for (const key in localStorageItems) {",
          "135:             if (!localStorageItems[key]) {",
          "136:                 continue;",
          "137:             }",
          "139:             if (key.startsWith('utm')) {",
          "140:                 result[key] = localStorageItems[key] as string;",
          "141:             }",
          "142:         }",
          "144:         return result;",
          "145:     }",
          "",
          "---------------"
        ],
        "Home/views/head.ejs||Home/views/head.ejs": [
          "File: Home/views/head.ejs -> Home/views/head.ejs",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     }",
          "51: </style>",
          "53: <meta charset=\"utf-8\" />",
          "54: <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />",
          "55: <link rel=\"shortcut icon\" href=\"/img/favicons/favicon.ico\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: <script>",
          "54:     window.onload = function () {",
          "57:         var urlParams = new URLSearchParams(window.location.search);",
          "58:         var utm_source = urlParams.get('utm_source');",
          "59:         var utm_medium = urlParams.get('utm_medium');",
          "60:         var utm_campaign = urlParams.get('utm_campaign');",
          "61:         var utm_term = urlParams.get('utm_term');",
          "62:         var utm_content = urlParams.get('utm_content');",
          "63:         var utm_url = window.location.href;",
          "65:         if(utm_source != null){",
          "66:             localStorage.setItem('utmSource', utm_source);",
          "67:             localStorage.setItem('utmMedium', utm_medium);",
          "68:             localStorage.setItem('utmCampaign', utm_campaign);",
          "69:             localStorage.setItem('utmTerm', utm_term);",
          "70:             localStorage.setItem('utmContent', utm_content);",
          "71:             localStorage.setItem('utmUrl', utm_url);",
          "72:         }",
          "73:     };",
          "74: </script>",
          "",
          "---------------"
        ],
        "Model/Models/Project.ts||Model/Models/Project.ts": [
          "File: Model/Models/Project.ts -> Model/Models/Project.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:     })",
          "862:     public createdOwnerName?: Name = undefined;",
          "864:     @ColumnAccessControl({",
          "865:         create: [Permission.User],",
          "866:         read: [],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "864:     @ColumnAccessControl({",
          "865:         create: [Permission.User],",
          "866:         read: [],",
          "867:         update: [],",
          "868:     })",
          "869:     @TableColumn({ type: TableColumnType.LongText })",
          "870:     @Column({",
          "871:         type: ColumnType.LongText,",
          "872:         length: ColumnLength.LongText,",
          "873:         nullable: true,",
          "874:         unique: false,",
          "875:     })",
          "876:     public utmSource?: string = undefined;",
          "878:     @ColumnAccessControl({",
          "879:         create: [Permission.User],",
          "880:         read: [],",
          "881:         update: [],",
          "882:     })",
          "883:     @TableColumn({ type: TableColumnType.LongText })",
          "884:     @Column({",
          "885:         type: ColumnType.LongText,",
          "886:         length: ColumnLength.LongText,",
          "887:         nullable: true,",
          "888:         unique: false,",
          "889:     })",
          "890:     public utmMedium?: string = undefined;",
          "892:     @ColumnAccessControl({",
          "893:         create: [Permission.User],",
          "894:         read: [],",
          "895:         update: [],",
          "896:     })",
          "897:     @TableColumn({ type: TableColumnType.LongText })",
          "898:     @Column({",
          "899:         type: ColumnType.LongText,",
          "900:         length: ColumnLength.LongText,",
          "901:         nullable: true,",
          "902:         unique: false,",
          "903:     })",
          "904:     public utmCampaign?: string = undefined;",
          "906:     @ColumnAccessControl({",
          "907:         create: [Permission.User],",
          "908:         read: [],",
          "909:         update: [],",
          "910:     })",
          "911:     @TableColumn({ type: TableColumnType.LongText })",
          "912:     @Column({",
          "913:         type: ColumnType.LongText,",
          "914:         length: ColumnLength.LongText,",
          "915:         nullable: true,",
          "916:         unique: false,",
          "917:     })",
          "918:     public utmTerm?: string = undefined;",
          "920:     @ColumnAccessControl({",
          "921:         create: [Permission.User],",
          "922:         read: [],",
          "923:         update: [],",
          "924:     })",
          "925:     @TableColumn({ type: TableColumnType.LongText })",
          "926:     @Column({",
          "927:         type: ColumnType.LongText,",
          "928:         length: ColumnLength.LongText,",
          "929:         nullable: true,",
          "930:         unique: false,",
          "931:     })",
          "932:     public utmContent?: string = undefined;",
          "934:     @ColumnAccessControl({",
          "935:         create: [Permission.User],",
          "936:         read: [],",
          "937:         update: [],",
          "938:     })",
          "939:     @TableColumn({ type: TableColumnType.LongText })",
          "940:     @Column({",
          "941:         type: ColumnType.LongText,",
          "942:         length: ColumnLength.LongText,",
          "943:         nullable: true,",
          "944:         unique: false,",
          "945:     })",
          "946:     public utmUrl?: string = undefined;",
          "",
          "---------------"
        ],
        "Model/Models/User.ts||Model/Models/User.ts": [
          "File: Model/Models/User.ts -> Model/Models/User.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "571:     })",
          "572:     public alertPhoneVerificationCode?: string = undefined;",
          "574:     @ColumnAccessControl({",
          "575:         create: [],",
          "576:         read: [],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:     @ColumnAccessControl({",
          "575:         create: [Permission.Public],",
          "576:         read: [],",
          "577:         update: [],",
          "578:     })",
          "579:     @TableColumn({ type: TableColumnType.LongText })",
          "580:     @Column({",
          "581:         type: ColumnType.LongText,",
          "582:         length: ColumnLength.LongText,",
          "583:         nullable: true,",
          "584:         unique: false,",
          "585:     })",
          "586:     public utmSource?: string = undefined;",
          "588:     @ColumnAccessControl({",
          "589:         create: [Permission.Public],",
          "590:         read: [],",
          "591:         update: [],",
          "592:     })",
          "593:     @TableColumn({ type: TableColumnType.LongText })",
          "594:     @Column({",
          "595:         type: ColumnType.LongText,",
          "596:         length: ColumnLength.LongText,",
          "597:         nullable: true,",
          "598:         unique: false,",
          "599:     })",
          "600:     public utmMedium?: string = undefined;",
          "602:     @ColumnAccessControl({",
          "603:         create: [Permission.Public],",
          "604:         read: [],",
          "605:         update: [],",
          "606:     })",
          "607:     @TableColumn({ type: TableColumnType.LongText })",
          "608:     @Column({",
          "609:         type: ColumnType.LongText,",
          "610:         length: ColumnLength.LongText,",
          "611:         nullable: true,",
          "612:         unique: false,",
          "613:     })",
          "614:     public utmCampaign?: string = undefined;",
          "616:     @ColumnAccessControl({",
          "617:         create: [Permission.Public],",
          "618:         read: [],",
          "619:         update: [],",
          "620:     })",
          "621:     @TableColumn({ type: TableColumnType.LongText })",
          "622:     @Column({",
          "623:         type: ColumnType.LongText,",
          "624:         length: ColumnLength.LongText,",
          "625:         nullable: true,",
          "626:         unique: false,",
          "627:     })",
          "628:     public utmTerm?: string = undefined;",
          "630:     @ColumnAccessControl({",
          "631:         create: [Permission.Public],",
          "632:         read: [],",
          "633:         update: [],",
          "634:     })",
          "635:     @TableColumn({ type: TableColumnType.LongText })",
          "636:     @Column({",
          "637:         type: ColumnType.LongText,",
          "638:         length: ColumnLength.LongText,",
          "639:         nullable: true,",
          "640:         unique: false,",
          "641:     })",
          "642:     public utmContent?: string = undefined;",
          "644:     @ColumnAccessControl({",
          "645:         create: [Permission.Public],",
          "646:         read: [],",
          "647:         update: [],",
          "648:     })",
          "649:     @TableColumn({ type: TableColumnType.LongText })",
          "650:     @Column({",
          "651:         type: ColumnType.LongText,",
          "652:         length: ColumnLength.LongText,",
          "653:         nullable: true,",
          "654:         unique: false,",
          "655:     })",
          "656:     public utmUrl?: string = undefined;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa83db3e4887afe485abb18e8ff1a63f35e974ad",
      "candidate_info": {
        "commit_hash": "aa83db3e4887afe485abb18e8ff1a63f35e974ad",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/aa83db3e4887afe485abb18e8ff1a63f35e974ad",
        "files": [
          "Model/Models/User.ts"
        ],
        "message": "refactor: Add deletedByUser and deletedByUserId columns to User model\n\nThis code change adds the `deletedByUser` and `deletedByUserId` columns to the `User` model. These columns are used to track the user who deleted the object and their corresponding user ID. This enhancement allows for better auditing and tracking of deleted objects in the system.",
        "before_after_code_files": [
          "Model/Models/User.ts||Model/Models/User.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Model/Models/User.ts||Model/Models/User.ts"
          ],
          "candidate": [
            "Model/Models/User.ts||Model/Models/User.ts"
          ]
        }
      },
      "candidate_diff": {
        "Model/Models/User.ts||Model/Models/User.ts": [
          "File: Model/Models/User.ts -> Model/Models/User.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "656:         unique: false,",
          "657:     })",
          "658:     public tempAlertPhoneNumber?: Phone = undefined;",
          "659: }",
          "661: export default User;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "660:     @ColumnAccessControl({",
          "661:         create: [],",
          "662:         read: [],",
          "663:         update: [],",
          "664:     })",
          "665:     @TableColumn({",
          "666:         manyToOneRelationColumn: 'deletedByUserId',",
          "667:         type: TableColumnType.Entity,",
          "668:         title: 'Deleted by User',",
          "669:         description:",
          "670:             'Relation to User who deleted this object (if this object was deleted by a User)',",
          "671:     })",
          "672:     @ManyToOne(",
          "673:         (_type: string) => {",
          "674:             return User;",
          "675:         },",
          "676:         {",
          "677:             cascade: false,",
          "678:             eager: false,",
          "679:             nullable: true,",
          "680:             onDelete: 'CASCADE',",
          "681:             orphanedRowAction: 'nullify',",
          "682:         }",
          "683:     )",
          "684:     @JoinColumn({ name: 'deletedByUserId' })",
          "685:     public deletedByUser?: User = undefined;",
          "687:     @ColumnAccessControl({",
          "688:         create: [],",
          "689:         read: [],",
          "690:         update: [],",
          "691:     })",
          "692:     @TableColumn({",
          "693:         type: TableColumnType.ObjectID,",
          "694:         title: 'Deleted by User ID',",
          "695:         description:",
          "696:             'User ID who deleted this object (if this object was deleted by a User)',",
          "697:     })",
          "698:     @Column({",
          "699:         type: ColumnType.ObjectID,",
          "700:         nullable: true,",
          "701:         transformer: ObjectID.getDatabaseTransformer(),",
          "702:     })",
          "703:     public deletedByUserId?: ObjectID = undefined;",
          "",
          "---------------"
        ]
      }
    }
  ]
}