{
  "cve_id": "CVE-2024-21909",
  "cve_desc": "PeterO.Cbor versions 4.0.0 through 4.5.0 are vulnerable to a denial of \nservice vulnerability. An attacker may trigger the denial of service \ncondition by providing crafted data to the DecodeFromBytes or other \ndecoding mechanisms in PeterO.Cbor. Depending on the usage of the \nlibrary, an unauthenticated and remote attacker may be able to cause the\n denial of service condition.\n",
  "repo": "peteroupc/CBOR",
  "patch_hash": "b4117dbbb4cd5a4a963f9d0c9aa132f033e15b95",
  "patch_info": {
    "commit_hash": "b4117dbbb4cd5a4a963f9d0c9aa132f033e15b95",
    "repo": "peteroupc/CBOR",
    "commit_url": "https://github.com/peteroupc/CBOR/commit/b4117dbbb4cd5a4a963f9d0c9aa132f033e15b95",
    "files": [
      "CBOR/PeterO/Cbor/CBORObject.cs",
      "CBOR/PeterO/Cbor/PropertyMap.cs",
      "CBORTest/CBORGenerator.cs",
      "CBORTest/CBORObjectTest.cs",
      "CBORTest/CBORTest.csproj",
      "CBORTest/CBORTestCommon.cs",
      "CBORTest/TestCommon.cs"
    ],
    "message": "fix algorithmic complexity issue; add regression tests",
    "before_after_code_files": [
      "CBOR/PeterO/Cbor/CBORObject.cs||CBOR/PeterO/Cbor/CBORObject.cs",
      "CBOR/PeterO/Cbor/PropertyMap.cs||CBOR/PeterO/Cbor/PropertyMap.cs",
      "CBORTest/CBORGenerator.cs||CBORTest/CBORGenerator.cs",
      "CBORTest/CBORObjectTest.cs||CBORTest/CBORObjectTest.cs",
      "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj",
      "CBORTest/CBORTestCommon.cs||CBORTest/CBORTestCommon.cs",
      "CBORTest/TestCommon.cs||CBORTest/TestCommon.cs"
    ]
  },
  "patch_diff": {
    "CBOR/PeterO/Cbor/CBORObject.cs||CBOR/PeterO/Cbor/CBORObject.cs": [
      "File: CBOR/PeterO/Cbor/CBORObject.cs -> CBOR/PeterO/Cbor/CBORObject.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "7942:       if (listACount != listBCount) {",
      "7943:         return listACount < listBCount ? -1 : 1;",
      "7944:       }",
      "7952:       listACount = sortedASet.Count;",
      "7953:       listBCount = sortedBSet.Count;",
      "",
      "[Removed Lines]",
      "7945:       var sortedASet = new List<CBORObject>(mapA.Keys);",
      "7946:       var sortedBSet = new List<CBORObject>(mapB.Keys);",
      "7948:       sortedASet.Sort();",
      "7950:       sortedBSet.Sort();",
      "",
      "[Added Lines]",
      "7945:       var sortedASet = new List<CBORObject>(PropertyMap.GetSortedKeys(mapA));",
      "7946:       var sortedBSet = new List<CBORObject>(PropertyMap.GetSortedKeys(mapB));",
      "",
      "---------------"
    ],
    "CBOR/PeterO/Cbor/PropertyMap.cs||CBOR/PeterO/Cbor/PropertyMap.cs": [
      "File: CBOR/PeterO/Cbor/PropertyMap.cs -> CBOR/PeterO/Cbor/PropertyMap.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "35:       private readonly IDictionary<TKey, TValue> dict;",
      "36:       private readonly LinkedList<TKey> list;",
      "37:       public OrderedDictionary() {",
      "39:         this.list = new LinkedList<TKey>();",
      "40:       }",
      "41:       public void Add(KeyValuePair<TKey, TValue> kvp) {",
      "",
      "[Removed Lines]",
      "38:         this.dict = new Dictionary<TKey, TValue>();",
      "",
      "[Added Lines]",
      "38:         this.dict = new SortedDictionary<TKey, TValue>();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "179:         }",
      "180:       }",
      "182:       public ICollection<TValue> Values {",
      "183:         get {",
      "184:           return new ValueWrapper<TKey, TValue>(this.dict, this.list);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "182:       public ICollection<TKey> SortedKeys {",
      "183:         get {",
      "184:            return this.dict.Keys;",
      "185:         }",
      "186:       }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "895:           Convert.ToInt32(value, CultureInfo.InvariantCulture));",
      "896:     }",
      "898:     public static ICollection<KeyValuePair<TKey, TValue>>",
      "899:     GetEntries<TKey, TValue>(",
      "900:       IDictionary<TKey, TValue> dict) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "904:     public static ICollection<TKey>",
      "905:     GetSortedKeys<TKey, TValue>(",
      "906:       IDictionary<TKey, TValue> dict) {",
      "907:       var odict = dict as OrderedDictionary<TKey, TValue>;",
      "908:       if (odict != null) {",
      "909:         return odict.SortedKeys;",
      "910:       }",
      "911:       var sdict = dict as SortedDictionary<TKey, TValue>;",
      "912:       if (sdict != null) {",
      "913:         return sdict.Keys;",
      "914:       }",
      "915:       throw new InvalidOperationException(\"Internal error: Map doesn't\" +",
      "916: \"\\u0020support sorted keys\");",
      "917:     }",
      "",
      "---------------"
    ],
    "CBORTest/CBORGenerator.cs||CBORTest/CBORGenerator.cs": [
      "File: CBORTest/CBORGenerator.cs -> CBORTest/CBORGenerator.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "84:     private static int[]",
      "85:     valueMajorTypes = {",
      "86:       0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4,",
      "88:     };",
      "90:     private static int[] valueMajorTypesHighLength = {",
      "",
      "[Removed Lines]",
      "87:       4, 5, 6, 6, 7, 7, 7, 7, 7, 7,",
      "",
      "[Added Lines]",
      "87:       4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7,",
      "88:     };",
      "90:     private static int[]",
      "91:     valueMajorTypesHighDepth = {",
      "92:       0, 1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,",
      "93:       5, 5, 5, 5, 5, 5, 6, 7,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "130:       }",
      "131:     }",
      "133:     private void Generate(IRandomGenExtended r, int depth, ByteWriter bs) {",
      "134:       int majorType = valueMajorTypes[r.GetInt32(valueMajorTypes.Length)];",
      "135:       if (bs.ByteLength > 2000000) {",
      "136:         majorType = valueMajorTypesHighLength[r.GetInt32(",
      "137:               valueMajorTypesHighLength.Length)];",
      "138:       }",
      "140:         int len = r.GetInt32(1000);",
      "141:         if (r.GetInt32(50) == 0 && depth < 2) {",
      "142:           var v = (long)r.GetInt32(100000) * r.GetInt32(100000);",
      "143:           len = (int)(v / 100000);",
      "146:           len = r.GetInt32(100) == 0 ? 1 : 0;",
      "147:         }",
      "149:         if (r.GetInt32(2) == 0) {",
      "",
      "[Removed Lines]",
      "139:       if (majorType == 3 || majorType == 2) {",
      "144:         }",
      "145:         if (depth > 6) {",
      "",
      "[Added Lines]",
      "139:     private void GenerateSmall(IRandomGenExtended r, int depth, ByteWriter bs) {",
      "140:       int v = r.GetInt32(100);",
      "141:       if (v < 25) {",
      "142:         GenerateArgument(r, 0, r.GetInt32(100), bs);",
      "143:       } else if (v < 35) {",
      "144:         bs.Write(0x41);",
      "145:       bs.Write(0x20);",
      "146:       } else if (v < 45) {",
      "147:         bs.Write(0x41);",
      "148:       bs.Write(0x20);",
      "149:       } else if (v < 50) {",
      "150:         bs.Write(0x81);",
      "151:       this.GenerateSmall(r, depth + 1, bs);",
      "152:       } else if (v < 53) {",
      "153:         bs.Write(0xa2);",
      "154:       bs.Write(0xf7);",
      "155:     bs.Write(0xf6);",
      "156:   this.GenerateSmall(r, depth + 1, bs);",
      "157:   bs.Write(0xf5);",
      "158:       } else if (v < 80) {",
      "159:         bs.Write(r.GetInt32(0x40));",
      "160:       } else if (v < 100) {",
      "161:         bs.Write(r.GetInt32(0x60));",
      "162:       }",
      "163:     }",
      "166:       if (depth > 6) {",
      "167:         majorType = valueMajorTypesHighDepth[r.GetInt32(",
      "168:               valueMajorTypesHighDepth.Length)];",
      "169:       }",
      "174:       if (majorType == 3 || majorType == 2) { // Byte and text strings",
      "179:         } else if (depth > 6) {",
      "181:         } else if (depth > 2) {",
      "182:           len = r.GetInt32(16) + 1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "174:           }",
      "175:         }",
      "176:         return;",
      "178:         int len = r.GetInt32(8);",
      "179:         if (r.GetInt32(50) == 0 && depth < 2) {",
      "180:           var v = (long)r.GetInt32(1000) * r.GetInt32(1000);",
      "181:           len = (int)(v / 1000);",
      "182:         }",
      "183:         bool indefiniteLength = r.GetInt32(2) == 0;",
      "184:         if (indefiniteLength) {",
      "",
      "[Removed Lines]",
      "177:       } else if (majorType == 4 || majorType == 5) {",
      "",
      "[Added Lines]",
      "213:       } else if (majorType == 4 || majorType == 5) { // Arrays and maps",
      "218:         } else if (depth > 6) {",
      "219:           len = r.GetInt32(100) == 0 ? 1 : 0;",
      "220:         } else if (depth > 2) {",
      "221:           len = r.GetInt32(3) + 1;",
      "222:         }",
      "223:         if (depth > 6) {",
      "224:           len = r.GetInt32(100) < 50 ? 1 : (r.GetInt32(100) < 10 ? 2 : 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "187:           GenerateArgument(r, majorType, len, bs);",
      "188:         }",
      "189:         for (int i = 0; i < len; ++i) {",
      "191:           if (majorType == 5) {",
      "192:             this.Generate(r, depth + 1, bs);",
      "193:           }",
      "",
      "[Removed Lines]",
      "190:           this.Generate(r, depth + 1, bs);",
      "",
      "[Added Lines]",
      "233:           if (depth > 6) {",
      "234:             this.GenerateSmall(r, depth + 1, bs);",
      "235:           } else {",
      "236:             this.Generate(r, depth + 1, bs);",
      "237:           }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "229:           }",
      "230:           break;",
      "231:       }",
      "233:         this.Generate(r, depth + 1, bs);",
      "234:       }",
      "235:     }",
      "",
      "[Removed Lines]",
      "232:       if (majorType == 6) {",
      "",
      "[Added Lines]",
      "279:       if (majorType == 6) { // Tags",
      "",
      "---------------"
    ],
    "CBORTest/CBORObjectTest.cs||CBORTest/CBORObjectTest.cs": [
      "File: CBORTest/CBORObjectTest.cs -> CBORTest/CBORObjectTest.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "9721:       Assert.IsTrue(cbor.AsDoubleValue() == Double.NegativeInfinity);",
      "9722:     }",
      "9724:     [Test]",
      "9725:     public void TestToObject_TypeMapper() {",
      "9726:       var mapper = new CBORTypeMapper()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9724: [Test]",
      "9725: public void TestRoundTripRegressions() {",
      "9726: {",
      "9727: var options = new CBOREncodeOptions(\"allowduplicatekeys=1;keepkeyorder=1\");",
      "9728: var bytes = new byte[] {",
      "9729:   (byte)0xba, 0x00, 0x00, 0x00, 0x03,",
      "9730:   (byte)0xf9,",
      "9731:   (byte)0x83, 0x1d,",
      "9732:   (byte)0xda,",
      "9733:   (byte)0xb6,",
      "9734:   (byte)0xda, 0x50, 0x56, 0x1a, 0x50,",
      "9735:   (byte)0xe3, 0x2c, 0x7a, 0x16,",
      "9736:   (byte)0xfa, 0x50, 0x32, 0x73, 0x07,",
      "9737:   (byte)0xfa, (byte)0xb9, 0x2d, 0x73, (byte)0xce, 0x38, (byte)0xd0,",
      "9738: };",
      "9739: CBORTestCommon.AssertRoundTrip(CBORObject.DecodeFromBytes(bytes, options));",
      "9740: }",
      "9741: {",
      "9742: var options = new CBOREncodeOptions(\"allowduplicatekeys=1;keepkeyorder=1\");",
      "9743: var bytes = new byte[] {",
      "9744:   (byte)0xbf,",
      "9745:   (byte)0x9f,",
      "9746:   (byte)0xbf, 0x39, 0x20,",
      "9747:   (byte)0x8f, 0x4a, 0x1f, 0x46, 0x26, 0x0b, 0x3e, 0x72, 0x2c, 0x7f, 0x11,",
      "9748:   0x2e, 0x39,",
      "9749:   (byte)0x9d,",
      "9750:   (byte)0xba, 0x1a, 0x11,",
      "9751:   (byte)0x8d,",
      "9752:   (byte)0xc0,",
      "9753:   (byte)0xb4, 0x38,",
      "9754:   (byte)0xb6,",
      "9755:   (byte)0x9b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,",
      "9756:   (byte)0xd8, 0x3b,",
      "9757:   (byte)0x99, 0x00, 0x02, 0x3b, 0x05,",
      "9758:   (byte)0xbb,",
      "9759:   (byte)0xea,",
      "9760:   (byte)0x8e, 0x4b,",
      "9761:   (byte)0xd3, 0x5e, 0x22,",
      "9762:   (byte)0x9f, 0x59, 0x00, 0x00,",
      "9763:   (byte)0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x20,",
      "9764:   (byte)0xbf, 0x1a, 0x00, 0x00, 0x00, 0x61,",
      "9765:   (byte)0xb9, 0x00, 0x01, 0x1a, 0x00, 0x00, 0x00, 0x0e,",
      "9766:   (byte)0xba, 0x00, 0x00, 0x00, 0x00,",
      "9767:   (byte)0xff,",
      "9768:   (byte)0xff,",
      "9769:   (byte)0xff,",
      "9770:   (byte)0xd8, 0x22,",
      "9771:   (byte)0xf8,",
      "9772:   (byte)0x93,",
      "9773:   (byte)0xd9,",
      "9774:   (byte)0xaf, 0x33, 0x19,",
      "9775:   (byte)0xf0,",
      "9776:   (byte)0xf0,",
      "9777:   (byte)0xf9,",
      "9778:   (byte)0x85,",
      "9779:   (byte)0x93,",
      "9780:   (byte)0x99, 0x00, 0x01, 0x3a,",
      "9781:   (byte)0xb5,",
      "9782:   (byte)0xfb, 0x4d, 0x43,",
      "9783:   (byte)0x98, 0x00,",
      "9784:   (byte)0xff, (byte)0xfa, (byte)0xb0, (byte)0xb4, (byte)0xdc, 0x6d,",
      "9785:   (byte)0xff,",
      "9786: };",
      "9787: CBORTestCommon.AssertRoundTrip(CBORObject.DecodeFromBytes(bytes, options));",
      "9788: }",
      "9789: {",
      "9790: var options = new CBOREncodeOptions(\"allowduplicatekeys=1;keepkeyorder=1\");",
      "9791: var bytes = new byte[] {",
      "9792:   (byte)0xdb, 0x0d,",
      "9793:   (byte)0xcb, 0x5d, 0x78,",
      "9794:   (byte)0x92,",
      "9795:   (byte)0xc2,",
      "9796:   (byte)0xc7, 0x2b,",
      "9797:   (byte)0xb9, 0x00, 0x02, 0x39,",
      "9798:   (byte)0xee,",
      "9799:   (byte)0xa0, (byte)0xa0, 0x1a, 0x0e, (byte)0xd9, (byte)0xec, (byte)0xca,",
      "9800:   (byte)0xf2,",
      "9801: };",
      "9802: CBORTestCommon.AssertRoundTrip(CBORObject.DecodeFromBytes(bytes, options));",
      "9803: }",
      "9804: {",
      "9805: var options = new CBOREncodeOptions(\"allowduplicatekeys=1;keepkeyorder=1\");",
      "9806: var bytes = new byte[] {",
      "9807:   (byte)0xbf,",
      "9808:   (byte)0xfb,",
      "9809:   (byte)0xb1, 0x21,",
      "9810:   (byte)0x93,",
      "9811:   (byte)0x8c,",
      "9812:   (byte)0xc6,",
      "9813:   (byte)0xf3,",
      "9814:   (byte)0xcf,",
      "9815:   (byte)0xb7, (byte)0xf8, 0x76, 0x18, (byte)0xda, 0x39, 0x60, (byte)0xf4,",
      "9816:   (byte)0xff,",
      "9817: };",
      "9818: CBORTestCommon.AssertRoundTrip(CBORObject.DecodeFromBytes(bytes, options));",
      "9819: }",
      "9820: {",
      "9821: var options = new CBOREncodeOptions(\"allowduplicatekeys=1;keepkeyorder=1\");",
      "9822: var bytes = new byte[] {",
      "9823:   (byte)0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
      "9824:   0x00, 0x02, (byte)0xf0, 0x0d, 0x2a, 0x21,",
      "9825: };",
      "9826: CBORTestCommon.AssertRoundTrip(CBORObject.DecodeFromBytes(bytes, options));",
      "9827: }",
      "9828: {",
      "9829: var options = new CBOREncodeOptions(\"allowduplicatekeys=1;keepkeyorder=1\");",
      "9830: var bytes = new byte[] {",
      "9831:   (byte)0xba, 0x00, 0x00, 0x00, 0x02,",
      "9832:   (byte)0xf9, 0x48, 0x37,",
      "9833:   (byte)0xda,",
      "9834:   (byte)0xb5, 0x72,",
      "9835:   (byte)0xcf,",
      "9836:   (byte)0xf8, 0x31, 0x3b, 0x06, 0x78,",
      "9837:   (byte)0xdb, 0x44, 0x7d, (byte)0xba, (byte)0xbd, 0x7d, 0x39, (byte)0x98,",
      "9838:   (byte)0xb9,",
      "9839: };",
      "9840: CBORTestCommon.AssertRoundTrip(CBORObject.DecodeFromBytes(bytes, options));",
      "9841: }",
      "9842: }",
      "9843: [Test]",
      "9844: public void TestMapCompareRegressions() {",
      "9845:   CBORObject m1, m2;",
      "9846:   m1 = CBORObject.NewMap().Add(3, 4).Add(1, 2);",
      "9847:   m2 = CBORObject.NewOrderedMap().Add(3, 4).Add(1, 2);",
      "9848:   Assert.AreEqual(0, m1.CompareTo(m2));",
      "9849:   TestCommon.CompareTestEqualAndConsistent(m1, m2);",
      "9850:   m1 = CBORObject.NewMap().Add(3, 2).Add(1, 2);",
      "9851:   m2 = CBORObject.NewOrderedMap().Add(3, 4).Add(1, 2);",
      "9852:   TestCommon.CompareTestLess(m1, m2);",
      "9853:   m1 = CBORObject.NewMap().Add(3, 7).Add(1, 2);",
      "9854:   m2 = CBORObject.NewOrderedMap().Add(3, 4).Add(1, 2);",
      "9855:   TestCommon.CompareTestGreater(m1, m2);",
      "9856:   m1 = CBORObject.NewMap().Add(3, 4).Add(1, 0);",
      "9857:   m2 = CBORObject.NewOrderedMap().Add(3, 4).Add(1, 2);",
      "9858:   TestCommon.CompareTestLess(m1, m2);",
      "9859:   m1 = CBORObject.NewMap().Add(3, 4).Add(1, 7);",
      "9860:   m2 = CBORObject.NewOrderedMap().Add(3, 4).Add(1, 2);",
      "9861:   TestCommon.CompareTestGreater(m1, m2);",
      "9862: }",
      "",
      "---------------"
    ],
    "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj": [
      "File: CBORTest/CBORTest.csproj -> CBORTest/CBORTest.csproj",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: <Project Sdk='Microsoft.NET.Sdk'>",
      "2:   <PropertyGroup>",
      "4:   </PropertyGroup>",
      "5:   <PropertyGroup Condition=' &apos;$(Configuration)&apos;==&apos;Debug&apos; '>",
      "6:     <DebugType>full</DebugType>",
      "",
      "[Removed Lines]",
      "3:     <TargetFramework>netcoreapp2.1</TargetFramework>",
      "",
      "[Added Lines]",
      "3:     <TargetFramework>netcoreapp5.0</TargetFramework>",
      "",
      "---------------"
    ],
    "CBORTest/CBORTestCommon.cs||CBORTest/CBORTestCommon.cs": [
      "File: CBORTest/CBORTestCommon.cs -> CBORTest/CBORTestCommon.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "119:     public static CBORObject RandomCBORMap(IRandomGenExtended rand, int depth) {",
      "120:       int x = rand.GetInt32(100);",
      "121:       int count = (x < 80) ? 2 : ((x < 93) ? 1 : ((x < 98) ? 0 : 10));",
      "123:       for (var i = 0; i < count; ++i) {",
      "124:         CBORObject key = RandomCBORObject(rand, depth + 1);",
      "125:         CBORObject value = RandomCBORObject(rand, depth + 1);",
      "",
      "[Removed Lines]",
      "122:       CBORObject cborRet = CBORObject.NewMap();",
      "",
      "[Added Lines]",
      "122:       CBORObject cborRet = rand.GetInt32(100) < 30 ?",
      "123:          CBORObject.NewOrderedMap() : CBORObject.NewMap();",
      "",
      "---------------"
    ],
    "CBORTest/TestCommon.cs||CBORTest/TestCommon.cs": [
      "File: CBORTest/TestCommon.cs -> CBORTest/TestCommon.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "761:       return true;",
      "762:     }",
      "765:       if (arr1 == null) {",
      "766:         return arr2 == null;",
      "767:       }",
      "",
      "[Removed Lines]",
      "764:     private static bool ByteArraysEqual(byte[] arr1, byte[] arr2) {",
      "",
      "[Added Lines]",
      "764:     public static bool ByteArraysEqual(byte[] arr1, byte[] arr2) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3c53e1995cae2b6bc163de2023f7d664f45403aa",
      "candidate_info": {
        "commit_hash": "3c53e1995cae2b6bc163de2023f7d664f45403aa",
        "repo": "peteroupc/CBOR",
        "commit_url": "https://github.com/peteroupc/CBOR/commit/3c53e1995cae2b6bc163de2023f7d664f45403aa",
        "files": [
          "CBORTest/CBORTest.cs",
          "CBORTest/CBORTest.csproj"
        ],
        "message": "fix",
        "before_after_code_files": [
          "CBORTest/CBORTest.cs||CBORTest/CBORTest.cs",
          "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
          ],
          "candidate": [
            "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
          ]
        }
      },
      "candidate_diff": {
        "CBORTest/CBORTest.cs||CBORTest/CBORTest.cs": [
          "File: CBORTest/CBORTest.cs -> CBORTest/CBORTest.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4794:           CBORObject.FromJSONBytes(jsonbytes, jsonop4);",
          "4795:         } catch (CBORException ex) {",
          "4796:           string msg = ex.Message + \"\\n\" +",
          "4798:           throw new InvalidOperationException(msg, ex);",
          "4799:         }",
          "4800:       }",
          "",
          "[Removed Lines]",
          "4797:             DataUtilities.GetUtf8String(json, true) + \"\\n\" + currop;",
          "",
          "[Added Lines]",
          "4797:             DataUtilities.GetUtf8String(jsonbytes, true) + \"\\n\" + currop;",
          "",
          "---------------"
        ],
        "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj": [
          "File: CBORTest/CBORTest.csproj -> CBORTest/CBORTest.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <Project Sdk='Microsoft.NET.Sdk'>",
          "2:   <PropertyGroup>",
          "4:     <GenerateProgramFile>false</GenerateProgramFile>",
          "5:   </PropertyGroup>",
          "6:   <PropertyGroup Condition=' &apos;$(Configuration)&apos;==&apos;Debug&apos; '>",
          "",
          "[Removed Lines]",
          "3:     <TargetFramework>netcoreapp2.1</TargetFramework>",
          "",
          "[Added Lines]",
          "3:     <TargetFramework>netcoreapp5.0</TargetFramework>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e49e9e085524aeb0fa8312fddc44bca1a6973ba0",
      "candidate_info": {
        "commit_hash": "e49e9e085524aeb0fa8312fddc44bca1a6973ba0",
        "repo": "peteroupc/CBOR",
        "commit_url": "https://github.com/peteroupc/CBOR/commit/e49e9e085524aeb0fa8312fddc44bca1a6973ba0",
        "files": [
          "CBORTest/CBORTest.cs",
          "CBORTest/CBORTest.csproj"
        ],
        "message": "edits",
        "before_after_code_files": [
          "CBORTest/CBORTest.cs||CBORTest/CBORTest.cs",
          "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
          ],
          "candidate": [
            "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
          ]
        }
      },
      "candidate_diff": {
        "CBORTest/CBORTest.cs||CBORTest/CBORTest.cs": [
          "File: CBORTest/CBORTest.cs -> CBORTest/CBORTest.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "4780:       var jsonop3 = new JSONOptions(\"numberconversion=intorfloatfromdouble\");",
          "4781:       var jsonop4 = new JSONOptions(\"numberconversion=double\");",
          "4782:       for (var i = 0; i < 200; ++i) {",
          "4785:         JSONOptions currop = null;",
          "4786:         try {",
          "4787:           currop = jsonop1;",
          "4789:           currop = jsonop2;",
          "4791:           currop = jsonop3;",
          "4793:           currop = jsonop4;",
          "4795:         } catch (CBORException ex) {",
          "4796:           string msg = ex.Message + \"\\n\" +",
          "4797:             DataUtilities.GetUtf8String(json, true) + \"\\n\" + currop;",
          "",
          "[Removed Lines]",
          "4783:         byte[] json = jsongen.Generate(rg);",
          "4784:         Console.WriteLine(String.Empty + i + \" len=\" + json.Length);",
          "4788:           CBORObject.FromJSONBytes(json, jsonop1);",
          "4790:           CBORObject.FromJSONBytes(json, jsonop2);",
          "4792:           CBORObject.FromJSONBytes(json, jsonop3);",
          "4794:           CBORObject.FromJSONBytes(json, jsonop4);",
          "",
          "[Added Lines]",
          "4783:         byte[] jsonbytes = jsongen.Generate(rg);",
          "4788:           CBORObject.FromJSONBytes(jsonbytes, jsonop1);",
          "4790:           CBORObject.FromJSONBytes(jsonbytes, jsonop2);",
          "4792:           CBORObject.FromJSONBytes(jsonbytes, jsonop3);",
          "4794:           CBORObject.FromJSONBytes(jsonbytes, jsonop4);",
          "",
          "---------------"
        ],
        "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj": [
          "File: CBORTest/CBORTest.csproj -> CBORTest/CBORTest.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <Project Sdk='Microsoft.NET.Sdk'>",
          "2:   <PropertyGroup>",
          "4:     <GenerateProgramFile>false</GenerateProgramFile>",
          "5:   </PropertyGroup>",
          "6:   <PropertyGroup Condition=' &apos;$(Configuration)&apos;==&apos;Debug&apos; '>",
          "",
          "[Removed Lines]",
          "3:     <TargetFramework>netcoreapp5.0</TargetFramework>",
          "",
          "[Added Lines]",
          "3:     <TargetFramework>netcoreapp2.1</TargetFramework>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93adbc2ba479e16fc0b4f8e916a086c4e3acd01a",
      "candidate_info": {
        "commit_hash": "93adbc2ba479e16fc0b4f8e916a086c4e3acd01a",
        "repo": "peteroupc/CBOR",
        "commit_url": "https://github.com/peteroupc/CBOR/commit/93adbc2ba479e16fc0b4f8e916a086c4e3acd01a",
        "files": [
          "CBORTest/CBORTest.csproj"
        ],
        "message": "Edit project files",
        "before_after_code_files": [
          "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
          ],
          "candidate": [
            "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
          ]
        }
      },
      "candidate_diff": {
        "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj": [
          "File: CBORTest/CBORTest.csproj -> CBORTest/CBORTest.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <Project Sdk='Microsoft.NET.Sdk'>",
          "2:   <PropertyGroup>",
          "4:     <GenerateProgramFile>false</GenerateProgramFile>",
          "5:   </PropertyGroup>",
          "6:   <PropertyGroup Condition=' &apos;$(Configuration)&apos;==&apos;Debug&apos; '>",
          "",
          "[Removed Lines]",
          "3:     <TargetFramework>netcoreapp2.2</TargetFramework>",
          "",
          "[Added Lines]",
          "3:     <TargetFramework>netcoreapp3.1</TargetFramework>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03dc2189aeadf5c76ac62bcaaf180026a14c911e",
      "candidate_info": {
        "commit_hash": "03dc2189aeadf5c76ac62bcaaf180026a14c911e",
        "repo": "peteroupc/CBOR",
        "commit_url": "https://github.com/peteroupc/CBOR/commit/03dc2189aeadf5c76ac62bcaaf180026a14c911e",
        "files": [
          "CBOR.nuspec",
          "CBORTest/CBORObjectTest.cs",
          "CBORTest/CBORTest.csproj",
          "CBORTest/JSONWithComments.cs",
          "docs/PeterO.Cbor.CBORObject.md"
        ],
        "message": "some edits",
        "before_after_code_files": [
          "CBOR.nuspec||CBOR.nuspec",
          "CBORTest/CBORObjectTest.cs||CBORTest/CBORObjectTest.cs",
          "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj",
          "CBORTest/JSONWithComments.cs||CBORTest/JSONWithComments.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CBORTest/CBORObjectTest.cs||CBORTest/CBORObjectTest.cs",
            "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
          ],
          "candidate": [
            "CBORTest/CBORObjectTest.cs||CBORTest/CBORObjectTest.cs",
            "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
          ]
        }
      },
      "candidate_diff": {
        "CBOR.nuspec||CBOR.nuspec": [
          "File: CBOR.nuspec -> CBOR.nuspec",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: - CBORDateConverter made public and expanded to enable conversion between various",
          "17:   date/time formats and CBOR objects",
          "18: - Added CanFitInUInt64 and CanTruncatedIntFitInUInt64 methods",
          "20: >",
          "",
          "[Removed Lines]",
          "19: - Bug fixes</releaseNotes><summary></summary><license type='expression'>CC0-1.0</license><projectUrl>https://github.com/peteroupc/CBOR</projectUrl><authors>Peter Occil</authors><description>A C# implementation of Concise Binary Object Representation (CBOR), a general-purpose binary data format defined in RFC 8949.</description><owners>Peter Occil</owners><title>CBOR (Concise Binary Object Representation)</title><tags>cbor data serialization binary json</tags><dependencies><group targetFramework='.NETStandard1.0'><dependency id='PeterO.URIUtility' version='1.0.0' /><dependency id='PeterO.Numbers' version='1.7.4' /></group><group targetFramework='.NETFramework2.0'><dependency id='PeterO.URIUtility' version='1.0.0' /><dependency id='PeterO.Numbers' version='1.7.4' /></group><group targetFramework='.NETFramework4.0'><dependency id='PeterO.URIUtility' version='1.0.0' /><dependency id='PeterO.Numbers' version='1.7.4' /></group></dependencies></metadata><files><file src='CBOR/bin/Release/netstandard1.0/CBOR.dll' target='/lib/netstandard1.0' /><file src='CBOR/bin/Release/netstandard1.0/CBOR.xml' target='/lib/netstandard1.0' /><file src='CBOR20/bin/Release/CBOR.dll' target='/lib/net20' /><file src='CBOR20/bin/Release/CBOR.xml' target='/lib/net20' /><file src='CBOR40/bin/Release/CBOR.dll' target='/lib/net40' /><file src='CBOR40/bin/Release/CBOR.xml' target='/lib/net40' /></files></package",
          "",
          "[Added Lines]",
          "19: - Bug fixes</releaseNotes><summary></summary><license type='expression'>CC0-1.0</license><projectUrl>https://github.com/peteroupc/CBOR</projectUrl><authors>Peter Occil</authors><description>A C# implementation of Concise Binary Object Representation (CBOR), a general-purpose binary data format defined in RFC 8949.</description><owners>Peter Occil</owners><title>CBOR (Concise Binary Object Representation)</title><tags>cbor data serialization binary json</tags><dependencies><group targetFramework='.NETStandard1.0'><dependency id='PeterO.URIUtility' version='1.0.0' /><dependency id='PeterO.Numbers' version='1.8.0' /></group><group targetFramework='.NETFramework2.0'><dependency id='PeterO.URIUtility' version='1.0.0' /><dependency id='PeterO.Numbers' version='1.8.0' /></group><group targetFramework='.NETFramework4.0'><dependency id='PeterO.URIUtility' version='1.0.0' /><dependency id='PeterO.Numbers' version='1.8.0' /></group></dependencies></metadata><files><file src='CBOR/bin/Release/netstandard1.0/CBOR.dll' target='/lib/netstandard1.0' /><file src='CBOR/bin/Release/netstandard1.0/CBOR.xml' target='/lib/netstandard1.0' /><file src='CBOR20/bin/Release/CBOR.dll' target='/lib/net20' /><file src='CBOR20/bin/Release/CBOR.xml' target='/lib/net20' /><file src='CBOR40/bin/Release/CBOR.dll' target='/lib/net40' /><file src='CBOR40/bin/Release/CBOR.xml' target='/lib/net40' /></files></package",
          "",
          "---------------"
        ],
        "CBORTest/CBORObjectTest.cs||CBORTest/CBORObjectTest.cs": [
          "File: CBORTest/CBORObjectTest.cs -> CBORTest/CBORObjectTest.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:       \"\\\"\\ud800\\\\udc00\\\"\", \"\\\"\\\\U0023\\\"\", \"\\\"\\\\u002x\\\"\", \"\\\"\\\\u00xx\\\"\",",
          "17:       \"\\\"\\\\u0xxx\\\"\", \"\\\"\\\\u0\\\"\", \"\\\"\\\\u00\\\"\", \"\\\"\\\\u000\\\"\", \"trbb\",",
          "18:       \"trub\", \"falsb\", \"nulb\", \"[true\", \"[true,\", \"[true]!\", \"tr\\u0020\",",
          "21:       \"[tr]\", \"[fa]\",",
          "24:   \"[truE]\", \"[falsE]\",",
          "25:   \"[nulL]\",\"[tRUE]\",\"[fALSE]\",\"[nULL]\",\"[tRuE]\",\"[fAlSe]\",\"[nUlL]\",",
          "",
          "[Removed Lines]",
          "19:       \"tr\", \"fa\", \"nu\", \"True\", \"False\",\"Null\",\"TRUE\",\"FALSE\",\"NULL\",",
          "20:       \"truE\", \"falsE\", \"nulL\",\"tRUE\",\"fALSE\",\"nULL\",\"tRuE\",\"fAlSe\",\"nUlL\",",
          "22:       \"[nu]\", \"[True]\",\"[False]\",\"[Null]\",\"[TRUE]\",\"[FALSE]\",\"[NULL]\",",
          "",
          "[Added Lines]",
          "19:       \"tr\", \"fa\", \"nu\", \"True\", \"False\", \"Null\", \"TRUE\", \"FALSE\", \"NULL\",",
          "20:       \"truE\", \"falsE\", \"nulL\", \"tRUE\", \"fALSE\", \"nULL\", \"tRuE\", \"fAlSe\", \"nUlL\",",
          "22:       \"[nu]\", \"[True]\", \"[False]\", \"[Null]\", \"[TRUE]\", \"[FALSE]\", \"[NULL]\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:       \"{\\\"test\\\":5}\\u0005\", \"true\\\"\", \"truex\", \"true}\", \"true\\u0300\",",
          "42:       \"true\\u0005\", \"8024\\\"\", \"8024x\", \"8024}\", \"8024\\u0300\",",
          "43:       \"8024\\u0005\", \"{\\\"test\\\":5}}\", \"{\\\"test\\\":5}{\", \"[5]]\", \"[5][\",",
          "46:       \"01e4\", \"01.1e4\",",
          "48:       \"0000\", \"0x1\", \"0xf\", \"0x20\", \"0x01\",",
          "49:       \"-3x\", \"-3e89x\", \"\\u0005true\", \"x\\\\u0005z\",",
          "52:       \"0.0L\",",
          "53:       \"0X1\", \"0Xf\", \"0X20\", \"0X01\", \".2\", \".05\", \"-.2\",",
          "54:       \"-.05\", \"23.\", \"23.e0\", \"23.e1\", \"0.\", \"-0.\", \"[0000]\", \"[0x1]\",",
          "",
          "[Removed Lines]",
          "44:       \"00\", \"000\", \"001\", \"0001\", \"00.0\", \"001.0\", \"0001.0\",\"01E-4\",\"01.1E-4\",",
          "45:       \"01E4\", \"01.1E4\", \"01e-4\",\"01.1e-4\",",
          "47:       \"+0\", \"+1\", \"+0.0\",\"+1e4\",\"+1e-4\",\"+1.0\",\"+1.0e4\",\"+1.0e+4\",\"+1.0e-4\",",
          "50:       \"0,2\", \"0,05\", \"-0,2\", \"-0,05\", \"\\u007F0.0\", \"\\u00010.0\",\"0.0\\u007F\",",
          "51:       \"0.0\\u0001\", \"-1.D\\r\\n\", \"-1.D\\u0020\",\"-1.5L\",\"-0.0L\",\"0L\",\"1L\",\"1.5L\",",
          "",
          "[Added Lines]",
          "44:       \"00\", \"000\", \"001\", \"0001\", \"00.0\", \"001.0\", \"0001.0\", \"01E-4\", \"01.1E-4\",",
          "45:       \"01E4\", \"01.1E4\", \"01e-4\", \"01.1e-4\",",
          "47:       \"+0\", \"+1\", \"+0.0\", \"+1e4\", \"+1e-4\", \"+1.0\", \"+1.0e4\",",
          "48:       \"+1.0e+4\", \"+1.0e-4\",",
          "51:       \"0,2\", \"0,05\", \"-0,2\", \"-0,05\", \"\\u007F0.0\", \"\\u00010.0\", \"0.0\\u007F\",",
          "52:       \"0.0\\u0001\", \"-1.D\\r\\n\", \"-1.D\\u0020\", \"-1.5L\", \"-0.0L\", \"0L\", \"1L\",",
          "53:       \"1.5L\",",
          "",
          "---------------"
        ],
        "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj": [
          "File: CBORTest/CBORTest.csproj -> CBORTest/CBORTest.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <Project Sdk='Microsoft.NET.Sdk'>",
          "2:   <PropertyGroup>",
          "4:     <GenerateProgramFile>false</GenerateProgramFile>",
          "5:   </PropertyGroup>",
          "6:   <PropertyGroup Condition=' &apos;$(Configuration)&apos;==&apos;Debug&apos; '>",
          "",
          "[Removed Lines]",
          "3:     <TargetFramework>netcoreapp3.1</TargetFramework>",
          "",
          "[Added Lines]",
          "3:     <TargetFramework>netcoreapp2.2</TargetFramework>",
          "",
          "---------------"
        ],
        "CBORTest/JSONWithComments.cs||CBORTest/JSONWithComments.cs": [
          "File: CBORTest/JSONWithComments.cs -> CBORTest/JSONWithComments.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:           if (escaped) {",
          "61:             return CBORObject.FromJSONString(js.Substring(",
          "62:                 startIndex - 1,",
          "66:               (endIndex - 1) - startIndex));",
          "67:         } else if (c == '\\\\') {",
          "68:           this.index = idx++;",
          "",
          "[Removed Lines]",
          "63:                 (endIndex - (startIndex - 1)))); } return",
          "64: CBORObject.FromObject(js.Substring(",
          "65:               startIndex,",
          "",
          "[Added Lines]",
          "63:                 (endIndex - (startIndex - 1)))); }",
          "64:                 return CBORObject.FromObject(js.Substring(startIndex,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab7f53f447c61f809eba47befdb3202f48a904c7",
      "candidate_info": {
        "commit_hash": "ab7f53f447c61f809eba47befdb3202f48a904c7",
        "repo": "peteroupc/CBOR",
        "commit_url": "https://github.com/peteroupc/CBOR/commit/ab7f53f447c61f809eba47befdb3202f48a904c7",
        "files": [
          "CBORTest/CBORTest.csproj"
        ],
        "message": "Edit project files",
        "before_after_code_files": [
          "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
          ],
          "candidate": [
            "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj"
          ]
        }
      },
      "candidate_diff": {
        "CBORTest/CBORTest.csproj||CBORTest/CBORTest.csproj": [
          "File: CBORTest/CBORTest.csproj -> CBORTest/CBORTest.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <Project Sdk='Microsoft.NET.Sdk'>",
          "2:   <PropertyGroup>",
          "4:   </PropertyGroup>",
          "5:   <PropertyGroup Condition=' &apos;$(Configuration)&apos;==&apos;Debug&apos; '>",
          "6:     <DebugType>full</DebugType>",
          "",
          "[Removed Lines]",
          "3:     <TargetFramework>netcoreapp5.0</TargetFramework>",
          "",
          "[Added Lines]",
          "3:     <TargetFramework>netcoreapp2.1</TargetFramework>",
          "",
          "---------------"
        ]
      }
    }
  ]
}