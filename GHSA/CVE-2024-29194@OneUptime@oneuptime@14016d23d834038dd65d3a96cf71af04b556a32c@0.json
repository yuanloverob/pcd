{
  "cve_id": "CVE-2024-29194",
  "cve_desc": "OneUptime is a solution for monitoring and managing online services. The vulnerability lies in the improper validation of client-side stored data within the web application. Specifically, the is_master_admin key, stored in the local storage of the browser, can be manipulated by an attacker. By changing this key from false to true, the application grants administrative privileges to the user, without proper server-side validation.  This has been patched in 7.0.1815.",
  "repo": "OneUptime/oneuptime",
  "patch_hash": "14016d23d834038dd65d3a96cf71af04b556a32c",
  "patch_info": {
    "commit_hash": "14016d23d834038dd65d3a96cf71af04b556a32c",
    "repo": "OneUptime/oneuptime",
    "commit_url": "https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c",
    "files": [
      "CommonServer/Types/Database/ModelPermission.ts",
      "Model/Models/BillingInvoice.ts",
      "Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "Model/Models/OnCallDutyPolicyExecutionLog.ts",
      "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "Model/Models/OnCallDutyPolicySchedule.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayer.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts",
      "Model/Models/User.ts"
    ],
    "message": "Add deletedByUserId property to several models",
    "before_after_code_files": [
      "CommonServer/Types/Database/ModelPermission.ts||CommonServer/Types/Database/ModelPermission.ts",
      "Model/Models/BillingInvoice.ts||Model/Models/BillingInvoice.ts",
      "Model/Models/OnCallDutyPolicyEscalationRule.ts||Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts||Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts||Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts||Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "Model/Models/OnCallDutyPolicyExecutionLog.ts||Model/Models/OnCallDutyPolicyExecutionLog.ts",
      "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts||Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "Model/Models/OnCallDutyPolicySchedule.ts||Model/Models/OnCallDutyPolicySchedule.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayer.ts||Model/Models/OnCallDutyPolicyScheduleLayer.ts",
      "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts||Model/Models/OnCallDutyPolicyScheduleLayerUser.ts",
      "Model/Models/User.ts||Model/Models/User.ts"
    ]
  },
  "patch_diff": {
    "CommonServer/Types/Database/ModelPermission.ts||CommonServer/Types/Database/ModelPermission.ts": [
      "File: CommonServer/Types/Database/ModelPermission.ts -> CommonServer/Types/Database/ModelPermission.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: import ColumnBillingAccessControl from 'Common/Types/BaseDatabase/ColumnBillingAccessControl';",
      "40: import DatabaseCommonInteractionPropsUtil from 'Common/Types/BaseDatabase/DatabaseCommonInteractionPropsUtil';",
      "41: import Includes from 'Common/Types/BaseDatabase/Includes';",
      "43: export interface CheckReadPermissionType<TBaseModel extends BaseModel> {",
      "44:     query: Query<TBaseModel>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: import UserModel from 'Common/Models/UserModel';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:                 props",
      "296:             );",
      "298:             if (!props.isMultiTenantRequest) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "301:             query = await this.addUserScopeToQuery(modelType, query, props);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "854:         return query;",
      "855:     }",
      "857:     private static async addTenantScopeToQuery<TBaseModel extends BaseModel>(",
      "858:         modelType: { new (): TBaseModel },",
      "859:         query: Query<TBaseModel>,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "862:     private static async addUserScopeToQuery<TBaseModel extends BaseModel>(",
      "863:         modelType: { new (): TBaseModel },",
      "864:         query: Query<TBaseModel>,",
      "865:         props: DatabaseCommonInteractionProps",
      "866:     ): Promise<Query<TBaseModel>> {",
      "867:         const model: BaseModel = new modelType();",
      "869:         if (model instanceof UserModel) {",
      "870:             if (props.userId) {",
      "871:                 (query as any)['_id'] = props.userId;",
      "872:             } else if (!props.isRoot && !props.isMasterAdmin) {",
      "873:                 throw new NotAuthorizedException(",
      "874:                     `You do not have permissions to query on - ${model.singularName}.`",
      "875:                 );",
      "876:             }",
      "877:         }",
      "879:         return query;",
      "880:     }",
      "",
      "---------------"
    ],
    "Model/Models/BillingInvoice.ts||Model/Models/BillingInvoice.ts": [
      "File: Model/Models/BillingInvoice.ts -> Model/Models/BillingInvoice.ts"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRule.ts||Model/Models/OnCallDutyPolicyEscalationRule.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRule.ts -> Model/Models/OnCallDutyPolicyEscalationRule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "355:     @JoinColumn({ name: 'deletedByUserId' })",
      "356:     public deletedByUser?: User = undefined;",
      "358:     @ColumnAccessControl({",
      "359:         create: [",
      "360:             Permission.ProjectOwner,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "358:     @ColumnAccessControl({",
      "359:         create: [],",
      "360:         read: [],",
      "361:         update: [],",
      "362:     })",
      "363:     @TableColumn({",
      "364:         type: TableColumnType.ObjectID,",
      "365:         title: 'Deleted by User ID',",
      "366:         description:",
      "367:             'User ID who deleted this object (if this object was deleted by a User)',",
      "368:     })",
      "369:     @Column({",
      "370:         type: ColumnType.ObjectID,",
      "371:         nullable: true,",
      "372:         transformer: ObjectID.getDatabaseTransformer(),",
      "373:     })",
      "374:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts||Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts -> Model/Models/OnCallDutyPolicyEscalationRuleSchedule.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "420:     )",
      "421:     @JoinColumn({ name: 'deletedByUserId' })",
      "422:     public deletedByUser?: User = undefined;",
      "423: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "425:     @ColumnAccessControl({",
      "426:         create: [],",
      "427:         read: [],",
      "428:         update: [],",
      "429:     })",
      "430:     @TableColumn({",
      "431:         type: TableColumnType.ObjectID,",
      "432:         title: 'Deleted by User ID',",
      "433:         description:",
      "434:             'User ID who deleted this object (if this object was deleted by a User)',",
      "435:     })",
      "436:     @Column({",
      "437:         type: ColumnType.ObjectID,",
      "438:         nullable: true,",
      "439:         transformer: ObjectID.getDatabaseTransformer(),",
      "440:     })",
      "441:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts||Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts -> Model/Models/OnCallDutyPolicyEscalationRuleTeam.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "418:     )",
      "419:     @JoinColumn({ name: 'deletedByUserId' })",
      "420:     public deletedByUser?: User = undefined;",
      "421: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "422:     @ColumnAccessControl({",
      "423:         create: [],",
      "424:         read: [],",
      "425:         update: [],",
      "426:     })",
      "427:     @TableColumn({",
      "428:         type: TableColumnType.ObjectID,",
      "429:         title: 'Deleted by User ID',",
      "430:         description:",
      "431:             'User ID who deleted this object (if this object was deleted by a User)',",
      "432:     })",
      "433:     @Column({",
      "434:         type: ColumnType.ObjectID,",
      "435:         nullable: true,",
      "436:         transformer: ObjectID.getDatabaseTransformer(),",
      "437:     })",
      "438:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyEscalationRuleUser.ts||Model/Models/OnCallDutyPolicyEscalationRuleUser.ts": [
      "File: Model/Models/OnCallDutyPolicyEscalationRuleUser.ts -> Model/Models/OnCallDutyPolicyEscalationRuleUser.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "417:     )",
      "418:     @JoinColumn({ name: 'deletedByUserId' })",
      "419:     public deletedByUser?: User = undefined;",
      "420: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "421:     @ColumnAccessControl({",
      "422:         create: [],",
      "423:         read: [],",
      "424:         update: [],",
      "425:     })",
      "426:     @TableColumn({",
      "427:         type: TableColumnType.ObjectID,",
      "428:         title: 'Deleted by User ID',",
      "429:         description:",
      "430:             'User ID who deleted this object (if this object was deleted by a User)',",
      "431:     })",
      "432:     @Column({",
      "433:         type: ColumnType.ObjectID,",
      "434:         nullable: true,",
      "435:         transformer: ObjectID.getDatabaseTransformer(),",
      "436:     })",
      "437:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicyExecutionLog.ts||Model/Models/OnCallDutyPolicyExecutionLog.ts": [
      "File: Model/Models/OnCallDutyPolicyExecutionLog.ts -> Model/Models/OnCallDutyPolicyExecutionLog.ts"
    ],
    "Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts||Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts": [
      "File: Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts -> Model/Models/OnCallDutyPolicyExecutionLogTimeline.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "708:         unique: false,",
      "709:     })",
      "710:     public acknowledgedAt?: Date = undefined;",
      "711: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "712:     @ColumnAccessControl({",
      "713:         create: [],",
      "714:         read: [],",
      "715:         update: [],",
      "716:     })",
      "717:     @TableColumn({",
      "718:         type: TableColumnType.ObjectID,",
      "719:         title: 'Deleted by User ID',",
      "720:         description:",
      "721:             'User ID who deleted this object (if this object was deleted by a User)',",
      "722:     })",
      "723:     @Column({",
      "724:         type: ColumnType.ObjectID,",
      "725:         nullable: true,",
      "726:         transformer: ObjectID.getDatabaseTransformer(),",
      "727:     })",
      "728:     public deletedByUserId?: ObjectID = undefined;",
      "",
      "---------------"
    ],
    "Model/Models/OnCallDutyPolicySchedule.ts||Model/Models/OnCallDutyPolicySchedule.ts": [
      "File: Model/Models/OnCallDutyPolicySchedule.ts -> Model/Models/OnCallDutyPolicySchedule.ts"
    ],
    "Model/Models/OnCallDutyPolicyScheduleLayer.ts||Model/Models/OnCallDutyPolicyScheduleLayer.ts": [
      "File: Model/Models/OnCallDutyPolicyScheduleLayer.ts -> Model/Models/OnCallDutyPolicyScheduleLayer.ts"
    ],
    "Model/Models/OnCallDutyPolicyScheduleLayerUser.ts||Model/Models/OnCallDutyPolicyScheduleLayerUser.ts": [
      "File: Model/Models/OnCallDutyPolicyScheduleLayerUser.ts -> Model/Models/OnCallDutyPolicyScheduleLayerUser.ts"
    ],
    "Model/Models/User.ts||Model/Models/User.ts": [
      "File: Model/Models/User.ts -> Model/Models/User.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "32: @AllowAccessIfSubscriptionIsUnpaid()",
      "33: @TableAccessControl({",
      "34:     create: [Permission.Public],",
      "40:     delete: [Permission.CurrentUser],",
      "41:     update: [Permission.CurrentUser],",
      "42: })",
      "",
      "[Removed Lines]",
      "35:     read: [",
      "36:         Permission.CurrentUser,",
      "37:         Permission.ProjectAdmin,",
      "38:         Permission.ProjectOwner,",
      "39:     ],",
      "",
      "[Added Lines]",
      "35:     read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: class User extends UserModel {",
      "57:     @ColumnAccessControl({",
      "58:         create: [Permission.Public],",
      "64:         update: [Permission.CurrentUser],",
      "65:     })",
      "66:     @TableColumn({ type: TableColumnType.Name, canReadOnRelationQuery: true })",
      "",
      "[Removed Lines]",
      "59:         read: [",
      "60:             Permission.CurrentUser,",
      "61:             Permission.ProjectAdmin,",
      "62:             Permission.ProjectOwner,",
      "63:         ],",
      "",
      "[Added Lines]",
      "55:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76:     @ColumnAccessControl({",
      "77:         create: [Permission.Public],",
      "84:         update: [Permission.CurrentUser],",
      "85:     })",
      "",
      "[Removed Lines]",
      "78:         read: [",
      "79:             Permission.CurrentUser,",
      "80:             Permission.ProjectAdmin,",
      "81:             Permission.ProjectOwner,",
      "82:         ],",
      "",
      "[Added Lines]",
      "70:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     @ColumnAccessControl({",
      "249:         create: [],",
      "256:         update: [Permission.CurrentUser],",
      "257:     })",
      "",
      "[Removed Lines]",
      "250:         read: [",
      "251:             Permission.CurrentUser,",
      "252:             Permission.ProjectAdmin,",
      "253:             Permission.ProjectOwner,",
      "254:         ],",
      "",
      "[Added Lines]",
      "238:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "277:     @ColumnAccessControl({",
      "278:         create: [],",
      "285:         update: [Permission.CurrentUser],",
      "286:     })",
      "",
      "[Removed Lines]",
      "279:         read: [",
      "280:             Permission.CurrentUser,",
      "281:             Permission.ProjectAdmin,",
      "282:             Permission.ProjectOwner,",
      "283:         ],",
      "",
      "[Added Lines]",
      "263:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "298:     @ColumnAccessControl({",
      "299:         create: [],",
      "306:         update: [Permission.CurrentUser],",
      "307:     })",
      "",
      "[Removed Lines]",
      "300:         read: [",
      "301:             Permission.CurrentUser,",
      "302:             Permission.ProjectAdmin,",
      "303:             Permission.ProjectOwner,",
      "304:         ],",
      "",
      "[Added Lines]",
      "280:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "309:         isDefaultValueColumn: true,",
      "310:         required: true,",
      "311:         type: TableColumnType.Boolean,",
      "312:     })",
      "313:     @Column({",
      "314:         type: ColumnType.Boolean,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "288:         canReadOnRelationQuery: true,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "425:     @ColumnAccessControl({",
      "426:         create: [],",
      "433:         update: [Permission.CurrentUser],",
      "434:     })",
      "",
      "[Removed Lines]",
      "427:         read: [",
      "428:             Permission.CurrentUser,",
      "429:             Permission.ProjectAdmin,",
      "430:             Permission.ProjectOwner,",
      "431:         ],",
      "",
      "[Added Lines]",
      "404:         read: [Permission.CurrentUser],",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "544:     @ColumnAccessControl({",
      "545:         create: [],",
      "552:         update: [Permission.CurrentUser],",
      "553:     })",
      "",
      "[Removed Lines]",
      "546:         read: [",
      "547:             Permission.CurrentUser,",
      "548:             Permission.ProjectAdmin,",
      "549:             Permission.ProjectOwner,",
      "550:         ],",
      "",
      "[Added Lines]",
      "519:         read: [Permission.CurrentUser],",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bf8561a166a1a15022829034efcf723dbb583234",
      "candidate_info": {
        "commit_hash": "bf8561a166a1a15022829034efcf723dbb583234",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/bf8561a166a1a15022829034efcf723dbb583234",
        "files": [
          "CommonServer/Utils/Probe/ProbeMonitorResponse.ts"
        ],
        "message": "Refactor saveMonitorMetrics function to improve code readability and maintainability",
        "before_after_code_files": [
          "CommonServer/Utils/Probe/ProbeMonitorResponse.ts||CommonServer/Utils/Probe/ProbeMonitorResponse.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "CommonServer/Utils/Probe/ProbeMonitorResponse.ts||CommonServer/Utils/Probe/ProbeMonitorResponse.ts": [
          "File: CommonServer/Utils/Probe/ProbeMonitorResponse.ts -> CommonServer/Utils/Probe/ProbeMonitorResponse.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import MonitorType from 'Common/Types/Monitor/MonitorType';",
          "37: import VMUtil from '../VM';",
          "38: import ServerMonitorResponse from 'Common/Types/Monitor/ServerMonitor/ServerMonitorResponse';",
          "40: import MonitorMetricsByMinute from 'Model/AnalyticsModels/MonitorMetricsByMinute';",
          "41: import MonitorMetricsByMinuteService from '../../Services/MonitorMetricsByMinuteService';",
          "",
          "[Removed Lines]",
          "39: import BasicInfrastructureMetrics, { BasicDiskMetrics } from 'Common/Types/Infrastructure/BasicMetrics';",
          "",
          "[Added Lines]",
          "39: import BasicInfrastructureMetrics, {",
          "40:     BasicDiskMetrics,",
          "41: } from 'Common/Types/Infrastructure/BasicMetrics';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "383:         return response;",
          "384:     }",
          "389:             return;",
          "390:         }",
          "393:             return;",
          "394:         }",
          "397:             return;",
          "398:         }",
          "408:                 return;",
          "409:             }",
          "411:             const itemsToSave: Array<MonitorMetricsByMinute> = [];",
          "415:                 monitorMetricsByMinute.monitorId = data.monitorId;",
          "416:                 monitorMetricsByMinute.projectId = data.projectId;",
          "417:                 monitorMetricsByMinute.metricType = CheckOn.CPUUsagePercent;",
          "420:                 itemsToSave.push(monitorMetricsByMinute);",
          "421:             }",
          "425:                 monitorMetricsByMinute.monitorId = data.monitorId;",
          "426:                 monitorMetricsByMinute.projectId = data.projectId;",
          "427:                 monitorMetricsByMinute.metricType = CheckOn.MemoryUsagePercent;",
          "430:                 itemsToSave.push(monitorMetricsByMinute);",
          "431:             }",
          "436:                     monitorMetricsByMinute.monitorId = data.monitorId;",
          "437:                     monitorMetricsByMinute.projectId = data.projectId;",
          "439:                     monitorMetricsByMinute.metricValue = diskMetric.percentUsed;",
          "440:                     monitorMetricsByMinute.miscData = {",
          "441:                         diskPath: diskMetric.diskPath,",
          "",
          "[Removed Lines]",
          "386:     public static async saveMonitorMetrics(data: { monitorId: ObjectID; projectId: ObjectID; dataToProcess: DataToProcess; }): Promise<void> {",
          "388:         if(!data.monitorId){",
          "392:         if(!data.projectId){",
          "396:         if(!data.dataToProcess){",
          "402:         if((data.dataToProcess as ServerMonitorResponse).basicInfrastructureMetrics){",
          "405:             const basicMetrics: BasicInfrastructureMetrics | undefined = (data.dataToProcess as ServerMonitorResponse).basicInfrastructureMetrics;",
          "407:             if(!basicMetrics){",
          "413:             if(basicMetrics.cpuMetrics){",
          "414:                 const monitorMetricsByMinute: MonitorMetricsByMinute = new MonitorMetricsByMinute();",
          "418:                 monitorMetricsByMinute.metricValue = basicMetrics.cpuMetrics.percentUsed;",
          "423:             if(basicMetrics.memoryMetrics){",
          "424:                 const monitorMetricsByMinute: MonitorMetricsByMinute = new MonitorMetricsByMinute();",
          "428:                 monitorMetricsByMinute.metricValue = basicMetrics.memoryMetrics.percentUsed;",
          "433:             if(basicMetrics.diskMetrics){",
          "434:                 for(const diskMetric of basicMetrics.diskMetrics){",
          "435:                     const monitorMetricsByMinute: MonitorMetricsByMinute = new MonitorMetricsByMinute();",
          "438:                     monitorMetricsByMinute.metricType = CheckOn.DiskUsagePercent;",
          "",
          "[Added Lines]",
          "388:     public static async saveMonitorMetrics(data: {",
          "389:         monitorId: ObjectID;",
          "390:         projectId: ObjectID;",
          "391:         dataToProcess: DataToProcess;",
          "392:     }): Promise<void> {",
          "393:         if (!data.monitorId) {",
          "397:         if (!data.projectId) {",
          "401:         if (!data.dataToProcess) {",
          "405:         if (",
          "406:             (data.dataToProcess as ServerMonitorResponse)",
          "407:                 .basicInfrastructureMetrics",
          "408:         ) {",
          "411:             const basicMetrics: BasicInfrastructureMetrics | undefined = (",
          "412:                 data.dataToProcess as ServerMonitorResponse",
          "413:             ).basicInfrastructureMetrics;",
          "415:             if (!basicMetrics) {",
          "421:             if (basicMetrics.cpuMetrics) {",
          "422:                 const monitorMetricsByMinute: MonitorMetricsByMinute =",
          "423:                     new MonitorMetricsByMinute();",
          "427:                 monitorMetricsByMinute.metricValue =",
          "428:                     basicMetrics.cpuMetrics.percentUsed;",
          "433:             if (basicMetrics.memoryMetrics) {",
          "434:                 const monitorMetricsByMinute: MonitorMetricsByMinute =",
          "435:                     new MonitorMetricsByMinute();",
          "439:                 monitorMetricsByMinute.metricValue =",
          "440:                     basicMetrics.memoryMetrics.percentUsed;",
          "445:             if (basicMetrics.diskMetrics) {",
          "446:                 for (const diskMetric of basicMetrics.diskMetrics) {",
          "447:                     const monitorMetricsByMinute: MonitorMetricsByMinute =",
          "448:                         new MonitorMetricsByMinute();",
          "451:                     monitorMetricsByMinute.metricType =",
          "452:                         CheckOn.DiskUsagePercent;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "449:                 items: itemsToSave,",
          "450:                 props: {",
          "451:                     isRoot: true,",
          "453:             });",
          "454:         }",
          "459:             monitorMetricsByMinute.monitorId = data.monitorId;",
          "460:             monitorMetricsByMinute.projectId = data.projectId;",
          "461:             monitorMetricsByMinute.metricType = CheckOn.ResponseTime;",
          "464:             await MonitorMetricsByMinuteService.create({",
          "465:                 data: monitorMetricsByMinute,",
          "466:                 props: {",
          "467:                     isRoot: true,",
          "469:             });",
          "470:         }",
          "472:     }",
          "474:     private static async checkOpenIncidentsAndCloseIfResolved(input: {",
          "",
          "[Removed Lines]",
          "452:                 }",
          "456:         if((data.dataToProcess as ProbeMonitorResponse).responseTimeInMs){",
          "458:             const monitorMetricsByMinute: MonitorMetricsByMinute = new MonitorMetricsByMinute();",
          "462:             monitorMetricsByMinute.metricValue = (data.dataToProcess as ProbeMonitorResponse).responseTimeInMs;",
          "468:                 }",
          "",
          "[Added Lines]",
          "466:                 },",
          "470:         if ((data.dataToProcess as ProbeMonitorResponse).responseTimeInMs) {",
          "471:             const monitorMetricsByMinute: MonitorMetricsByMinute =",
          "472:                 new MonitorMetricsByMinute();",
          "476:             monitorMetricsByMinute.metricValue = (",
          "477:                 data.dataToProcess as ProbeMonitorResponse",
          "478:             ).responseTimeInMs;",
          "484:                 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9c9b9addf7b1ce93df9999a863bb000eca1895b",
      "candidate_info": {
        "commit_hash": "f9c9b9addf7b1ce93df9999a863bb000eca1895b",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/f9c9b9addf7b1ce93df9999a863bb000eca1895b",
        "files": [
          "Common/Types/Monitor/CriteriaFilter.ts",
          "CommonUI/src/Components/Dropdown/Dropdown.tsx",
          "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ],
        "message": "Update EvaluateOverTimeMinutes enum values to be strings",
        "before_after_code_files": [
          "Common/Types/Monitor/CriteriaFilter.ts||Common/Types/Monitor/CriteriaFilter.ts",
          "CommonUI/src/Components/Dropdown/Dropdown.tsx||CommonUI/src/Components/Dropdown/Dropdown.tsx",
          "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx||Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Common/Types/Monitor/CriteriaFilter.ts||Common/Types/Monitor/CriteriaFilter.ts": [
          "File: Common/Types/Monitor/CriteriaFilter.ts -> Common/Types/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: }",
          "31: export enum EvaluateOverTimeMinutes {",
          "41: }",
          "43: export interface EvaluateOverTimeOptions {",
          "",
          "[Removed Lines]",
          "32:     TwoMinutes = 2,",
          "33:     ThreeMinutes = 3,",
          "34:     FiveMinutes = 5,",
          "35:     TenMinutes = 10,",
          "36:     FifteenMinutes = 15,",
          "37:     TwentyMinutes = 20,",
          "38:     ThirtyMinutes = 30,",
          "39:     FortyFiveMinutes = 45,",
          "40:     SixtyMinutes = 60,",
          "",
          "[Added Lines]",
          "32:     TwoMinutes = '2',",
          "33:     ThreeMinutes = '3',",
          "34:     FiveMinutes = '5',",
          "35:     TenMinutes = '10',",
          "36:     FifteenMinutes = '15',",
          "37:     TwentyMinutes = '20',",
          "38:     ThirtyMinutes = '30',",
          "39:     FortyFiveMinutes = '45',",
          "40:     SixtyMinutes = '60',",
          "",
          "---------------"
        ],
        "CommonUI/src/Components/Dropdown/Dropdown.tsx||CommonUI/src/Components/Dropdown/Dropdown.tsx": [
          "File: CommonUI/src/Components/Dropdown/Dropdown.tsx -> CommonUI/src/Components/Dropdown/Dropdown.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     placeholder?: undefined | string;",
          "21:     className?: undefined | string;",
          "22:     onChange?:",
          "25:     value?: DropdownOption | undefined;",
          "26:     onFocus?: (() => void) | undefined;",
          "27:     onBlur?: (() => void) | undefined;",
          "",
          "[Removed Lines]",
          "23:         | undefined",
          "24:         | ((value: DropdownValue | Array<DropdownValue> | null) => void);",
          "",
          "[Added Lines]",
          "23:     | undefined",
          "24:     | ((value: DropdownValue | Array<DropdownValue> | null) => void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     type GetDropdownOptionFromValueFunction = (",
          "44:         value: GetDropdownOptionFromValueFunctionProps",
          "47:     const getDropdownOptionFromValue: GetDropdownOptionFromValueFunction = (",
          "48:         value: GetDropdownOptionFromValueFunctionProps",
          "50:         if (",
          "51:             Array.isArray(value) &&",
          "52:             value.length > 0 &&",
          "",
          "[Removed Lines]",
          "45:     ) => DropdownOption | Array<DropdownOption>;",
          "49:     ): DropdownOption | Array<DropdownOption> => {",
          "",
          "[Added Lines]",
          "45:     ) => DropdownOption | Array<DropdownOption> | undefined;",
          "49:     ): DropdownOption | Array<DropdownOption> | undefined => {",
          "51:         if(value === undefined) {",
          "52:             return undefined;",
          "53:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:                         | DropdownOption",
          "72:                         | undefined",
          "73:                         | Array<DropdownOption> = props.options.find(",
          "79:                     if (option) {",
          "80:                         options.push(option as DropdownOption);",
          "",
          "[Removed Lines]",
          "74:                         (option: DropdownOption) => {",
          "75:                             return option.value === item;",
          "76:                         }",
          "77:                     ) as DropdownOption | Array<DropdownOption>;",
          "",
          "[Added Lines]",
          "79:                             (option: DropdownOption) => {",
          "80:                                 return option.value === item;",
          "81:                             }",
          "82:                         ) as DropdownOption | Array<DropdownOption>;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:     >(getDropdownOptionFromValue(props.initialValue));",
          "104:     useEffect(() => {",
          "112:     }, [props.value]);",
          "114:     return (",
          "115:         <div",
          "118:                 'relative mt-2 mb-1 rounded-md w-full overflow-visible'",
          "120:             onClick={() => {",
          "121:                 props.onClick && props.onClick();",
          "122:                 props.onFocus && props.onFocus();",
          "",
          "[Removed Lines]",
          "105:         if (props.value) {",
          "106:             setValue(",
          "107:                 getDropdownOptionFromValue(",
          "108:                     props.value ? props.value : undefined",
          "109:                 )",
          "110:             );",
          "111:         }",
          "116:             className={`${",
          "117:                 props.className ||",
          "119:             }`}",
          "",
          "[Added Lines]",
          "111:         const value: DropdownOption | Array<DropdownOption> | undefined =",
          "112:         getDropdownOptionFromValue(",
          "113:             props.value ? props.value : undefined",
          "114:         )",
          "116:         setValue(",
          "117:             value",
          "118:         );",
          "124:             className={`${props.className ||",
          "126:                 }`}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128:                 }}",
          "129:                 tabIndex={props.tabIndex}",
          "130:                 isMulti={props.isMultiSelect}",
          "132:                 onFocus={() => {",
          "133:                     props.onFocus && props.onFocus();",
          "134:                 }}",
          "",
          "[Removed Lines]",
          "131:                 value={value}",
          "",
          "[Added Lines]",
          "138:                 value={value || null}",
          "",
          "---------------"
        ],
        "Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx||Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx": [
          "File: Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx -> Dashboard/src/Components/Form/Monitor/CriteriaFilter.tsx",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         return <></>;",
          "89:     }",
          "91:     return (",
          "92:         <div>",
          "93:             <div className=\"rounded-md p-2 bg-gray-50 my-5 border-gray-200 border-solid border-2\">",
          "94:                 <div className=\"\">",
          "95:                     <FieldLabelElement title=\"Filter Type\" />",
          "96:                     <Dropdown",
          "98:                             (i: DropdownOption) => {",
          "99:                                 return i.value === criteriaFilter?.checkOn;",
          "100:                             }",
          "",
          "[Removed Lines]",
          "97:                         initialValue={checkOnOptions.find(",
          "",
          "[Added Lines]",
          "92:     const filterConditionValue: DropdownOption | undefined = filterTypeOptions.find(",
          "93:         (i: DropdownOption) => {",
          "94:             return (",
          "95:                 i.value ===",
          "96:                 criteriaFilter?.filterType",
          "97:             );",
          "98:         }",
          "99:     );",
          "102:     const evaluateOverTimeMinutesValue: DropdownOption | undefined = CriteriaFilterUiUtil.getEvaluateOverTimeMinutesOptions().find(",
          "103:         (item: DropdownOption) => {",
          "104:             return (",
          "105:                 item.value ===",
          "106:                 criteriaFilter?.evaluateOverTimeOptions",
          "107:                     ?.timeValueInMinutes",
          "108:             );",
          "109:         }",
          "110:     );",
          "113:     const evaluateOverTimeTypeValue: DropdownOption | undefined = DropdownUtil.getDropdownOptionsFromEnum(",
          "114:         EvaluateOverTimeType",
          "115:     ).find((item: DropdownOption) => {",
          "116:         return (",
          "117:             item.value ===",
          "118:             criteriaFilter?.evaluateOverTimeOptions",
          "119:                 ?.evaluateOverTimeType",
          "120:         );",
          "121:     });",
          "129:                         value={checkOnOptions.find(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:                             <Input",
          "121:                                 placeholder={'C:\\\\ or /mnt/data or /dev/sda1'}",
          "123:                                 onChange={(value: string) => {",
          "124:                                     setCriteriaFilter({",
          "125:                                         ...criteriaFilter,",
          "",
          "[Removed Lines]",
          "122:                                 initialValue={criteriaFilter?.serverMonitorOptions?.diskPath?.toString()}",
          "",
          "[Added Lines]",
          "154:                                 value={criteriaFilter?.serverMonitorOptions?.diskPath?.toString()}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "140:                     ) && (",
          "141:                         <div className=\"mt-3\">",
          "142:                             <CheckboxElement",
          "144:                                 title={",
          "145:                                     'Evaluate this criteria over a period of time'",
          "146:                                 }",
          "",
          "[Removed Lines]",
          "143:                                 initialValue={criteriaFilter?.eveluateOverTime}",
          "",
          "[Added Lines]",
          "175:                                 value={criteriaFilter?.eveluateOverTime}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163:                     <div className=\"mt-1\">",
          "164:                         <FieldLabelElement title=\"Evaluate\" />",
          "165:                         <Dropdown",
          "175:                             options={DropdownUtil.getDropdownOptionsFromEnum(",
          "176:                                 EvaluateOverTimeType",
          "177:                             )}",
          "",
          "[Removed Lines]",
          "166:                             initialValue={DropdownUtil.getDropdownOptionsFromEnum(",
          "167:                                 EvaluateOverTimeType",
          "168:                             ).find((item: DropdownOption) => {",
          "169:                                 return (",
          "170:                                     item.value ===",
          "171:                                     criteriaFilter?.evaluateOverTimeOptions",
          "172:                                         ?.evaluateOverTimeType",
          "173:                                 );",
          "174:                             })}",
          "",
          "[Added Lines]",
          "198:                             value={evaluateOverTimeTypeValue}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:                     <div className=\"mt-1\">",
          "218:                         <FieldLabelElement title=\"For the last (in minutes)\" />",
          "219:                         <Dropdown",
          "229:                             options={CriteriaFilterUiUtil.getEvaluateOverTimeMinutesOptions()}",
          "230:                             onChange={(",
          "231:                                 value:",
          "",
          "[Removed Lines]",
          "220:                             initialValue={CriteriaFilterUiUtil.getEvaluateOverTimeMinutesOptions().find(",
          "221:                                 (item: DropdownOption) => {",
          "222:                                     return (",
          "223:                                         item.value ===",
          "224:                                         criteriaFilter?.evaluateOverTimeOptions",
          "225:                                             ?.timeValueInMinutes",
          "226:                                     );",
          "227:                                 }",
          "228:                             )}",
          "",
          "[Added Lines]",
          "244:                             value={evaluateOverTimeMinutesValue}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "264:                         <div className=\"mt-1\">",
          "265:                             <FieldLabelElement title=\"Filter Condition\" />",
          "266:                             <Dropdown",
          "275:                                 options={filterTypeOptions}",
          "276:                                 onChange={(",
          "277:                                     value:",
          "",
          "[Removed Lines]",
          "267:                                 initialValue={filterTypeOptions.find(",
          "268:                                     (i: DropdownOption) => {",
          "269:                                         return (",
          "270:                                             i.value ===",
          "271:                                             criteriaFilter?.filterType",
          "272:                                         );",
          "273:                                     }",
          "274:                                 )}",
          "",
          "[Added Lines]",
          "283:                                 value={filterConditionValue}",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "299:                                 <FieldLabelElement title=\"Value\" />",
          "300:                                 <Input",
          "301:                                     placeholder={valuePlaceholder}",
          "303:                                     onChange={(value: string) => {",
          "304:                                         setCriteriaFilter({",
          "305:                                             checkOn:",
          "",
          "[Removed Lines]",
          "302:                                     initialValue={criteriaFilter?.value?.toString()}",
          "",
          "[Added Lines]",
          "311:                                     value={criteriaFilter?.value?.toString()}",
          "",
          "---------------"
        ],
        "Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts||Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts": [
          "File: Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts -> Dashboard/src/Utils/Form/Monitor/CriteriaFilter.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: } from 'Common/Types/Monitor/CriteriaFilter';",
          "10: export default class CriteriaFilterUtil {",
          "11:     public static getEvaluateOverTimeMinutesOptions(): Array<DropdownOption> {",
          "12:         const keys: Array<string> = Object.keys(EvaluateOverTimeMinutes);",
          "21:     }",
          "23:     public static getCheckOnOptionsByMonitorType(",
          "",
          "[Removed Lines]",
          "13:         return keys.filter((key: string)=>{",
          "14:             return EvaluateOverTimeMinutes[key as any];",
          "15:         }).map((key: string) => {",
          "16:             return {",
          "17:                 label: `${EvaluateOverTimeMinutes[key as any]} Minutes`,",
          "18:                 value: EvaluateOverTimeMinutes[key as any]!,",
          "19:             };",
          "20:         });",
          "",
          "[Added Lines]",
          "14:         return keys",
          "15:             .map((key: string) => {",
          "16:                 return {",
          "17:                     label: `${(EvaluateOverTimeMinutes as any)[key].toString()} Minutes`,",
          "18:                     value: (EvaluateOverTimeMinutes as any)[key]!.toString(),",
          "19:                 };",
          "20:             });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28302939499cac30936a476cf082b5ced846a729",
      "candidate_info": {
        "commit_hash": "28302939499cac30936a476cf082b5ced846a729",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/28302939499cac30936a476cf082b5ced846a729",
        "files": [
          "App/FeatureSet/Workers/Index.ts",
          "App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts"
        ],
        "message": "Add Monitor Metrics job to Workers Index.ts",
        "before_after_code_files": [
          "App/FeatureSet/Workers/Index.ts||App/FeatureSet/Workers/Index.ts",
          "App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts||App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "App/FeatureSet/Workers/Index.ts||App/FeatureSet/Workers/Index.ts": [
          "File: App/FeatureSet/Workers/Index.ts -> App/FeatureSet/Workers/Index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "76: import './Jobs/Workflow/TimeoutJobs';",
          "77: import './Jobs/MeteredPlan/ReportTelemetryMeteredPlan';",
          "78: import { PromiseVoidFunction } from 'Common/Types/FunctionTypes';",
          "80: const APP_NAME: string = 'api/workers';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81: import './Jobs/MonitorMetrics/MonitorMetricsByMinute';",
          "",
          "---------------"
        ],
        "App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts||App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts": [
          "File: App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts -> App/FeatureSet/Workers/Jobs/MonitorMetrics/MonitorMetricsByMinute.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import RunCron from '../../Utils/Cron';",
          "2: import { EVERY_MINUTE } from 'Common/Utils/CronTime';",
          "3: import OneUptimeDate from 'Common/Types/Date';",
          "4: import MonitorMetricsByMinuteService from 'CommonServer/Services/MonitorMetricsByMinuteService';",
          "5: import LessThan from 'Common/Types/BaseDatabase/LessThan';",
          "7: RunCron(",
          "8:     'MonitorMetrics:HardDeleteMonitorMetricsByMinute',",
          "9:     { schedule: EVERY_MINUTE, runOnStartup: false },",
          "10:     async () => {",
          "11:         const oneHourAgo: Date = OneUptimeDate.getSomeMinutesAgo(60);",
          "15:         await MonitorMetricsByMinuteService.deleteBy({",
          "16:             query: {",
          "17:                 createdAt: new LessThan(oneHourAgo)",
          "18:             },",
          "19:             props: {",
          "20:                 isRoot: true,",
          "21:             }",
          "22:         });",
          "23:     }",
          "24: );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5976fc22f5361c02379479b023f7dd40dd100738",
      "candidate_info": {
        "commit_hash": "5976fc22f5361c02379479b023f7dd40dd100738",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/5976fc22f5361c02379479b023f7dd40dd100738",
        "files": [
          "CommonServer/Utils/Probe/Criteria/APIRequestCriteria.ts",
          "CommonServer/Utils/Probe/Criteria/CompareCriteria.ts",
          "CommonServer/Utils/Probe/Criteria/IncomingRequestCriteria.ts",
          "CommonServer/Utils/Probe/ProbeMonitorResponse.ts"
        ],
        "message": "Fix formatting issues in APIRequestCriteria and CompareCriteria",
        "before_after_code_files": [
          "CommonServer/Utils/Probe/Criteria/APIRequestCriteria.ts||CommonServer/Utils/Probe/Criteria/APIRequestCriteria.ts",
          "CommonServer/Utils/Probe/Criteria/CompareCriteria.ts||CommonServer/Utils/Probe/Criteria/CompareCriteria.ts",
          "CommonServer/Utils/Probe/Criteria/IncomingRequestCriteria.ts||CommonServer/Utils/Probe/Criteria/IncomingRequestCriteria.ts",
          "CommonServer/Utils/Probe/ProbeMonitorResponse.ts||CommonServer/Utils/Probe/ProbeMonitorResponse.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "CommonServer/Utils/Probe/Criteria/APIRequestCriteria.ts||CommonServer/Utils/Probe/Criteria/APIRequestCriteria.ts": [
          "File: CommonServer/Utils/Probe/Criteria/APIRequestCriteria.ts -> CommonServer/Utils/Probe/Criteria/APIRequestCriteria.ts"
        ],
        "CommonServer/Utils/Probe/Criteria/CompareCriteria.ts||CommonServer/Utils/Probe/Criteria/CompareCriteria.ts": [
          "File: CommonServer/Utils/Probe/Criteria/CompareCriteria.ts -> CommonServer/Utils/Probe/Criteria/CompareCriteria.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:             message += ` on disk ${diskPath}`;",
          "307:         }",
          "310:             message += ` over the last ${data.criteriaFilter.evaluateOverTimeOptions.timeValueInMinutes} minutes`;",
          "311:         }",
          "",
          "[Removed Lines]",
          "309:         if (data.criteriaFilter.eveluateOverTime && data.criteriaFilter.evaluateOverTimeOptions?.timeValueInMinutes) {",
          "",
          "[Added Lines]",
          "309:         if (",
          "310:             data.criteriaFilter.eveluateOverTime &&",
          "311:             data.criteriaFilter.evaluateOverTimeOptions?.timeValueInMinutes",
          "312:         ) {",
          "",
          "---------------"
        ],
        "CommonServer/Utils/Probe/Criteria/IncomingRequestCriteria.ts||CommonServer/Utils/Probe/Criteria/IncomingRequestCriteria.ts": [
          "File: CommonServer/Utils/Probe/Criteria/IncomingRequestCriteria.ts -> CommonServer/Utils/Probe/Criteria/IncomingRequestCriteria.ts"
        ],
        "CommonServer/Utils/Probe/ProbeMonitorResponse.ts||CommonServer/Utils/Probe/ProbeMonitorResponse.ts": [
          "File: CommonServer/Utils/Probe/ProbeMonitorResponse.ts -> CommonServer/Utils/Probe/ProbeMonitorResponse.ts"
        ]
      }
    },
    {
      "candidate_hash": "e92ee600c9b0838372c9060e69cd4d9a153778d3",
      "candidate_info": {
        "commit_hash": "e92ee600c9b0838372c9060e69cd4d9a153778d3",
        "repo": "OneUptime/oneuptime",
        "commit_url": "https://github.com/OneUptime/oneuptime/commit/e92ee600c9b0838372c9060e69cd4d9a153778d3",
        "files": [
          "Common/Types/Infrastructure/BasicMetrics.ts",
          "CommonServer/Utils/Probe/ProbeMonitorResponse.ts",
          "InfrastructureAgent/Utils/BasicMetrics.ts"
        ],
        "message": "Update BasicMetrics.ts and ProbeMonitorResponse.ts",
        "before_after_code_files": [
          "Common/Types/Infrastructure/BasicMetrics.ts||Common/Types/Infrastructure/BasicMetrics.ts",
          "CommonServer/Utils/Probe/ProbeMonitorResponse.ts||CommonServer/Utils/Probe/ProbeMonitorResponse.ts",
          "InfrastructureAgent/Utils/BasicMetrics.ts||InfrastructureAgent/Utils/BasicMetrics.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/OneUptime/oneuptime/pull/1268"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Common/Types/Infrastructure/BasicMetrics.ts||Common/Types/Infrastructure/BasicMetrics.ts": [
          "File: Common/Types/Infrastructure/BasicMetrics.ts -> Common/Types/Infrastructure/BasicMetrics.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: }",
          "9: export interface CPUMetrics {",
          "11: }",
          "13: export interface BasicDiskMetrics {",
          "",
          "[Removed Lines]",
          "10:     percentUsage: number;",
          "",
          "[Added Lines]",
          "10:     percentUsed: number;",
          "",
          "---------------"
        ],
        "CommonServer/Utils/Probe/ProbeMonitorResponse.ts||CommonServer/Utils/Probe/ProbeMonitorResponse.ts": [
          "File: CommonServer/Utils/Probe/ProbeMonitorResponse.ts -> CommonServer/Utils/Probe/ProbeMonitorResponse.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import MonitorType from 'Common/Types/Monitor/MonitorType';",
          "37: import VMUtil from '../VM';",
          "38: import ServerMonitorResponse from 'Common/Types/Monitor/ServerMonitor/ServerMonitorResponse';",
          "41: type DataToProcess =",
          "42:     | ProbeMonitorResponse",
          "",
          "[Removed Lines]",
          "39: import { BasicDiskMetrics } from 'Common/Types/Infrastructure/BasicMetrics';",
          "",
          "[Added Lines]",
          "39: import BasicInfrastructureMetrics, { BasicDiskMetrics } from 'Common/Types/Infrastructure/BasicMetrics';",
          "40: import MonitorMetricsByMinute from 'Model/AnalyticsModels/MonitorMetricsByMinute';",
          "41: import MonitorMetricsByMinuteService from '../../Services/MonitorMetricsByMinuteService';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "204:             });",
          "205:         }",
          "209:         const monitorSteps: MonitorSteps = monitor.monitorSteps!;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:         await this.saveMonitorMetrics({",
          "210:             monitorId: monitor.id!,",
          "211:             projectId: monitor.projectId!,",
          "212:             dataToProcess: dataToProcess,",
          "213:         });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "377:         return response;",
          "378:     }",
          "380:     private static async checkOpenIncidentsAndCloseIfResolved(input: {",
          "381:         monitorId: ObjectID;",
          "382:         autoResolveCriteriaInstanceIdIncidentIdsDictionary: Dictionary<",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:     public static async saveMonitorMetrics(data: { monitorId: ObjectID; projectId: ObjectID; dataToProcess: DataToProcess; }): Promise<void> {",
          "388:         if(!data.monitorId){",
          "389:             return;",
          "390:         }",
          "392:         if(!data.projectId){",
          "393:             return;",
          "394:         }",
          "396:         if(!data.dataToProcess){",
          "397:             return;",
          "398:         }",
          "402:         if((data.dataToProcess as ServerMonitorResponse).basicInfrastructureMetrics){",
          "405:             const basicMetrics: BasicInfrastructureMetrics | undefined = (data.dataToProcess as ServerMonitorResponse).basicInfrastructureMetrics;",
          "407:             if(!basicMetrics){",
          "408:                 return;",
          "409:             }",
          "411:             const itemsToSave: Array<MonitorMetricsByMinute> = [];",
          "413:             if(basicMetrics.cpuMetrics){",
          "414:                 const monitorMetricsByMinute: MonitorMetricsByMinute = new MonitorMetricsByMinute();",
          "415:                 monitorMetricsByMinute.monitorId = data.monitorId;",
          "416:                 monitorMetricsByMinute.projectId = data.projectId;",
          "417:                 monitorMetricsByMinute.metricType = CheckOn.CPUUsagePercent;",
          "418:                 monitorMetricsByMinute.metricValue = basicMetrics.cpuMetrics.percentUsed;",
          "420:                 itemsToSave.push(monitorMetricsByMinute);",
          "421:             }",
          "423:             if(basicMetrics.memoryMetrics){",
          "424:                 const monitorMetricsByMinute: MonitorMetricsByMinute = new MonitorMetricsByMinute();",
          "425:                 monitorMetricsByMinute.monitorId = data.monitorId;",
          "426:                 monitorMetricsByMinute.projectId = data.projectId;",
          "427:                 monitorMetricsByMinute.metricType = CheckOn.MemoryUsagePercent;",
          "428:                 monitorMetricsByMinute.metricValue = basicMetrics.memoryMetrics.percentUsed;",
          "430:                 itemsToSave.push(monitorMetricsByMinute);",
          "431:             }",
          "433:             if(basicMetrics.diskMetrics){",
          "434:                 for(const diskMetric of basicMetrics.diskMetrics){",
          "435:                     const monitorMetricsByMinute: MonitorMetricsByMinute = new MonitorMetricsByMinute();",
          "436:                     monitorMetricsByMinute.monitorId = data.monitorId;",
          "437:                     monitorMetricsByMinute.projectId = data.projectId;",
          "438:                     monitorMetricsByMinute.metricType = CheckOn.DiskUsagePercent;",
          "439:                     monitorMetricsByMinute.metricValue = diskMetric.percentUsed;",
          "440:                     monitorMetricsByMinute.miscData = {",
          "441:                         diskPath: diskMetric.diskPath,",
          "442:                     };",
          "444:                     itemsToSave.push(monitorMetricsByMinute);",
          "445:                 }",
          "446:             }",
          "448:             await MonitorMetricsByMinuteService.createMany({",
          "449:                 items: itemsToSave,",
          "450:                 props: {",
          "451:                     isRoot: true,",
          "452:                 }",
          "453:             });",
          "454:         }",
          "456:         if((data.dataToProcess as ProbeMonitorResponse).responseTimeInMs){",
          "458:             const monitorMetricsByMinute: MonitorMetricsByMinute = new MonitorMetricsByMinute();",
          "459:             monitorMetricsByMinute.monitorId = data.monitorId;",
          "460:             monitorMetricsByMinute.projectId = data.projectId;",
          "461:             monitorMetricsByMinute.metricType = CheckOn.ResponseTime;",
          "462:             monitorMetricsByMinute.metricValue = (data.dataToProcess as ProbeMonitorResponse).responseTimeInMs;",
          "464:             await MonitorMetricsByMinuteService.create({",
          "465:                 data: monitorMetricsByMinute,",
          "466:                 props: {",
          "467:                     isRoot: true,",
          "468:                 }",
          "469:             });",
          "470:         }",
          "472:     }",
          "",
          "---------------"
        ],
        "InfrastructureAgent/Utils/BasicMetrics.ts||InfrastructureAgent/Utils/BasicMetrics.ts": [
          "File: InfrastructureAgent/Utils/BasicMetrics.ts -> InfrastructureAgent/Utils/BasicMetrics.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:         const cpuUsage: number | undefined = os.loadavg()[0]; // Returns an array containing the 1, 5, and 15 minute load averages.",
          "56:         return {",
          "58:         };",
          "59:     }",
          "60: }",
          "",
          "[Removed Lines]",
          "57:             percentUsage: cpuUsage || 0,",
          "",
          "[Added Lines]",
          "57:             percentUsed: cpuUsage || 0,",
          "",
          "---------------"
        ]
      }
    }
  ]
}