{
  "cve_id": "CVE-2024-28239",
  "cve_desc": "Directus is a real-time API and App dashboard for managing SQL database content. The authentication API has a `redirect` parameter that can be exploited as an open redirect vulnerability as the user tries to log in via the API URL. There's a redirect that is done after successful login via the Auth API GET request to `directus/auth/login/google?redirect=http://malicious-fishing-site.com`. While credentials don't seem to be passed to the attacker site, the user can be phished into clicking a legitimate directus site and be taken to a malicious site made to look like a an error message \"Your password needs to be updated\" to phish out the current password. Users who login via OAuth2 into Directus may be at risk. This issue has been addressed in version 10.10.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
  "repo": "directus/directus",
  "patch_hash": "5477d7d61babd7ffc2f835d399bf79611b15b203",
  "patch_info": {
    "commit_hash": "5477d7d61babd7ffc2f835d399bf79611b15b203",
    "repo": "directus/directus",
    "commit_url": "https://github.com/directus/directus/commit/5477d7d61babd7ffc2f835d399bf79611b15b203",
    "files": [
      ".changeset/calm-tables-destroy.md",
      "api/src/auth/drivers/oauth2.ts",
      "api/src/auth/drivers/openid.ts",
      "api/src/auth/drivers/saml.ts",
      "api/src/utils/is-login-redirect-allowed.test.ts",
      "api/src/utils/is-login-redirect-allowed.ts",
      "api/src/utils/is-url-allowed.test.ts",
      "api/src/utils/is-url-allowed.ts",
      "docs/releases/breaking-changes.md",
      "docs/self-hosted/config-options.md",
      "packages/env/src/constants/directus-variables.ts"
    ],
    "message": "Fix URL Redirection in OAuth2/OpenID/SAML (#21238)\n\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>\nCo-authored-by: Azri Kahar <42867097+azrikahar@users.noreply.github.com>",
    "before_after_code_files": [
      "api/src/auth/drivers/oauth2.ts||api/src/auth/drivers/oauth2.ts",
      "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts",
      "api/src/auth/drivers/saml.ts||api/src/auth/drivers/saml.ts",
      "api/src/utils/is-login-redirect-allowed.test.ts||api/src/utils/is-login-redirect-allowed.test.ts",
      "api/src/utils/is-login-redirect-allowed.ts||api/src/utils/is-login-redirect-allowed.ts",
      "api/src/utils/is-url-allowed.test.ts||api/src/utils/is-url-allowed.test.ts",
      "api/src/utils/is-url-allowed.ts||api/src/utils/is-url-allowed.ts",
      "packages/env/src/constants/directus-variables.ts||packages/env/src/constants/directus-variables.ts"
    ]
  },
  "patch_diff": {
    "api/src/auth/drivers/oauth2.ts||api/src/auth/drivers/oauth2.ts": [
      "File: api/src/auth/drivers/oauth2.ts -> api/src/auth/drivers/oauth2.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import {",
      "3:  ErrorCode,",
      "4:  InvalidCredentialsError,",
      "5:  InvalidProviderConfigError,",
      "6:  InvalidProviderError,",
      "7:  InvalidTokenError,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:  InvalidPayloadError,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: import type { Client } from 'openid-client';",
      "17: import { errors, generators, Issuer } from 'openid-client';",
      "18: import { getAuthProvider } from '../../auth.js';",
      "19: import getDatabase from '../../database/index.js';",
      "20: import emitter from '../../emitter.js';",
      "21: import { useLogger } from '../../logger.js';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import { REFRESH_COOKIE_OPTIONS, SESSION_COOKIE_OPTIONS } from '../../constants.js';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "26: import asyncHandler from '../../utils/async-handler.js';",
      "27: import { getConfigFromEnv } from '../../utils/get-config-from-env.js';",
      "28: import { getIPFromReq } from '../../utils/get-ip-from-req.js';",
      "29: import { Url } from '../../utils/url.js';",
      "30: import { LocalAuthDriver } from './local.js';",
      "33: export class OAuth2AuthDriver extends LocalAuthDriver {",
      "34:  client: Client;",
      "",
      "[Removed Lines]",
      "31: import { REFRESH_COOKIE_OPTIONS, SESSION_COOKIE_OPTIONS } from '../../constants.js';",
      "",
      "[Added Lines]",
      "31: import { isLoginRedirectAllowed } from '../../utils/is-login-redirect-allowed.js';",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "298:    const provider = getAuthProvider(providerName) as OAuth2AuthDriver;",
      "299:    const codeVerifier = provider.generateCodeVerifier();",
      "300:    const prompt = !!req.query['prompt'];",
      "311:    res.cookie(`oauth2.${providerName}`, token, {",
      "312:     httpOnly: true,",
      "",
      "[Removed Lines]",
      "302:    const token = jwt.sign(",
      "303:     { verifier: codeVerifier, redirect: req.query['redirect'], prompt },",
      "304:     env['SECRET'] as string,",
      "305:     {",
      "306:      expiresIn: '5m',",
      "307:      issuer: 'directus',",
      "308:     },",
      "309:    );",
      "",
      "[Added Lines]",
      "303:    const redirect = req.query['redirect'];",
      "305:    if (isLoginRedirectAllowed(redirect, providerName) === false) {",
      "306:     throw new InvalidPayloadError({ reason: `URL \"${redirect}\" can't be used to redirect after login` });",
      "307:    }",
      "309:    const token = jwt.sign({ verifier: codeVerifier, redirect, prompt }, env['SECRET'] as string, {",
      "310:     expiresIn: '5m',",
      "311:     issuer: 'directus',",
      "312:    });",
      "",
      "---------------"
    ],
    "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts": [
      "File: api/src/auth/drivers/openid.ts -> api/src/auth/drivers/openid.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: import {",
      "3:  ErrorCode,",
      "4:  InvalidCredentialsError,",
      "5:  InvalidProviderConfigError,",
      "6:  InvalidProviderError,",
      "7:  InvalidTokenError,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:  InvalidPayloadError,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16: import type { Client } from 'openid-client';",
      "17: import { errors, generators, Issuer } from 'openid-client';",
      "18: import { getAuthProvider } from '../../auth.js';",
      "19: import getDatabase from '../../database/index.js';",
      "20: import emitter from '../../emitter.js';",
      "21: import { useLogger } from '../../logger.js';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import { REFRESH_COOKIE_OPTIONS, SESSION_COOKIE_OPTIONS } from '../../constants.js';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "26: import asyncHandler from '../../utils/async-handler.js';",
      "27: import { getConfigFromEnv } from '../../utils/get-config-from-env.js';",
      "28: import { getIPFromReq } from '../../utils/get-ip-from-req.js';",
      "29: import { Url } from '../../utils/url.js';",
      "30: import { LocalAuthDriver } from './local.js';",
      "33: export class OpenIDAuthDriver extends LocalAuthDriver {",
      "34:  client: Promise<Client>;",
      "",
      "[Removed Lines]",
      "31: import { REFRESH_COOKIE_OPTIONS, SESSION_COOKIE_OPTIONS } from '../../constants.js';",
      "",
      "[Added Lines]",
      "31: import { isLoginRedirectAllowed } from '../../utils/is-login-redirect-allowed.js';",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "329:    const provider = getAuthProvider(providerName) as OpenIDAuthDriver;",
      "330:    const codeVerifier = provider.generateCodeVerifier();",
      "331:    const prompt = !!req.query['prompt'];",
      "342:    res.cookie(`openid.${providerName}`, token, {",
      "343:     httpOnly: true,",
      "",
      "[Removed Lines]",
      "333:    const token = jwt.sign(",
      "334:     { verifier: codeVerifier, redirect: req.query['redirect'], prompt },",
      "335:     env['SECRET'] as string,",
      "336:     {",
      "337:      expiresIn: '5m',",
      "338:      issuer: 'directus',",
      "339:     },",
      "340:    );",
      "",
      "[Added Lines]",
      "333:    const redirect = req.query['redirect'];",
      "335:    if (isLoginRedirectAllowed(redirect, providerName) === false) {",
      "336:     throw new InvalidPayloadError({ reason: `URL \"${redirect}\" can't be used to redirect after login` });",
      "337:    }",
      "339:    const token = jwt.sign({ verifier: codeVerifier, redirect, prompt }, env['SECRET'] as string, {",
      "340:     expiresIn: '5m',",
      "341:     issuer: 'directus',",
      "342:    });",
      "",
      "---------------"
    ],
    "api/src/auth/drivers/saml.ts||api/src/auth/drivers/saml.ts": [
      "File: api/src/auth/drivers/saml.ts -> api/src/auth/drivers/saml.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import * as validator from '@authenio/samlify-node-xmllint';",
      "2: import { useEnv } from '@directus/env';",
      "4: import express, { Router } from 'express';",
      "5: import * as samlify from 'samlify';",
      "6: import { getAuthProvider } from '../../auth.js';",
      "",
      "[Removed Lines]",
      "3: import { ErrorCode, InvalidCredentialsError, InvalidProviderError, isDirectusError } from '@directus/errors';",
      "",
      "[Added Lines]",
      "3: import {",
      "4:  ErrorCode,",
      "5:  InvalidCredentialsError,",
      "6:  InvalidPayloadError,",
      "7:  InvalidProviderError,",
      "8:  isDirectusError,",
      "9: } from '@directus/errors';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "15: import asyncHandler from '../../utils/async-handler.js';",
      "16: import { getConfigFromEnv } from '../../utils/get-config-from-env.js';",
      "17: import { LocalAuthDriver } from './local.js';",
      "20: samlify.setSchemaValidator(validator);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: import { isLoginRedirectAllowed } from '../../utils/is-login-redirect-allowed.js';",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "126:    const parsedUrl = new URL(url);",
      "128:    if (req.query['redirect']) {",
      "130:    }",
      "132:    return res.redirect(parsedUrl.toString());",
      "",
      "[Removed Lines]",
      "129:     parsedUrl.searchParams.append('RelayState', req.query['redirect'] as string);",
      "",
      "[Added Lines]",
      "136:     const redirect = req.query['redirect'] as string;",
      "138:     if (isLoginRedirectAllowed(redirect, providerName) === false) {",
      "139:      throw new InvalidPayloadError({ reason: `URL \"${redirect}\" can't be used to redirect after login` });",
      "140:     }",
      "142:     parsedUrl.searchParams.append('RelayState', redirect);",
      "",
      "---------------"
    ],
    "api/src/utils/is-login-redirect-allowed.test.ts||api/src/utils/is-login-redirect-allowed.test.ts": [
      "File: api/src/utils/is-login-redirect-allowed.test.ts -> api/src/utils/is-login-redirect-allowed.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { vi, expect, test, afterEach } from 'vitest';",
      "2: import { useEnv } from '@directus/env';",
      "3: import { isLoginRedirectAllowed } from './is-login-redirect-allowed.js';",
      "5: vi.mock('@directus/env');",
      "7: afterEach(() => {",
      "8:  vi.clearAllMocks();",
      "9: });",
      "11: test('isLoginRedirectAllowed returns true with no redirect', () => {",
      "12:  const redirect = undefined;",
      "13:  const provider = 'local';",
      "15:  expect(isLoginRedirectAllowed(redirect, provider)).toBe(true);",
      "16: });",
      "18: test('isLoginRedirectAllowed returns false with invalid redirect', () => {",
      "19:  const redirect = 123456;",
      "20:  const provider = 'local';",
      "22:  expect(isLoginRedirectAllowed(redirect, provider)).toBe(false);",
      "23: });",
      "25: test('isLoginRedirectAllowed returns true for allowed URL', () => {",
      "26:  const provider = 'local';",
      "28:  vi.mocked(useEnv).mockReturnValue({",
      "29:   [`AUTH_${provider.toUpperCase()}_REDIRECT_ALLOW_LIST`]:",
      "30:    'http://external.example.com,https://external.example.com,http://external.example.com:8055/test',",
      "31:   PUBLIC_URL: 'http://public.example.com',",
      "32:  });",
      "34:  expect(isLoginRedirectAllowed('http://public.example.com', provider)).toBe(true);",
      "35:  expect(isLoginRedirectAllowed('http://external.example.com', provider)).toBe(true);",
      "36:  expect(isLoginRedirectAllowed('https://external.example.com', provider)).toBe(true);",
      "37:  expect(isLoginRedirectAllowed('http://external.example.com:8055/test', provider)).toBe(true);",
      "38: });",
      "40: test('isLoginRedirectAllowed returns false for denied URL', () => {",
      "41:  const provider = 'local';",
      "43:  vi.mocked(useEnv).mockReturnValue({",
      "44:   [`AUTH_${provider.toUpperCase()}_REDIRECT_ALLOW_LIST`]: 'http://external.example.com',",
      "45:   PUBLIC_URL: 'http://public.example.com',",
      "46:  });",
      "48:  expect(isLoginRedirectAllowed('https://external.example.com', provider)).toBe(false);",
      "49:  expect(isLoginRedirectAllowed('http://external.example.com:8055', provider)).toBe(false);",
      "50:  expect(isLoginRedirectAllowed('http://external.example.com/test', provider)).toBe(false);",
      "51: });",
      "53: test('isLoginRedirectAllowed returns true for relative paths', () => {",
      "54:  const provider = 'local';",
      "56:  vi.mocked(useEnv).mockReturnValue({",
      "57:   [`AUTH_${provider.toUpperCase()}_REDIRECT_ALLOW_LIST`]: 'http://external.example.com',",
      "58:   PUBLIC_URL: 'http://public.example.com',",
      "59:  });",
      "61:  expect(isLoginRedirectAllowed('/admin/content', provider)).toBe(true);",
      "62:  expect(isLoginRedirectAllowed('../admin/content', provider)).toBe(true);",
      "63:  expect(isLoginRedirectAllowed('./admin/content', provider)).toBe(true);",
      "65:  expect(isLoginRedirectAllowed('http://public.example.com/admin/content', provider)).toBe(true);",
      "66: });",
      "68: test('isLoginRedirectAllowed returns false if missing protocol', () => {",
      "69:  const provider = 'local';",
      "71:  vi.mocked(useEnv).mockReturnValue({",
      "72:   [`AUTH_${provider.toUpperCase()}_REDIRECT_ALLOW_LIST`]: 'http://example.com',",
      "73:   PUBLIC_URL: 'http://example.com',",
      "74:  });",
      "76:  expect(isLoginRedirectAllowed('//example.com/admin/content', provider)).toBe(false);",
      "77:  expect(isLoginRedirectAllowed('//user@password:example.com/', provider)).toBe(false);",
      "78: });",
      "",
      "---------------"
    ],
    "api/src/utils/is-login-redirect-allowed.ts||api/src/utils/is-login-redirect-allowed.ts": [
      "File: api/src/utils/is-login-redirect-allowed.ts -> api/src/utils/is-login-redirect-allowed.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { useEnv } from '@directus/env';",
      "2: import { toArray } from '@directus/utils';",
      "3: import isUrlAllowed from './is-url-allowed.js';",
      "8: export function isLoginRedirectAllowed(redirect: unknown, provider: string): boolean {",
      "9:  if (!redirect) return true; // empty redirect",
      "10:  if (typeof redirect !== 'string') return false; // invalid type",
      "12:  const env = useEnv();",
      "13:  const publicUrl = env['PUBLIC_URL'] as string;",
      "15:  if (URL.canParse(redirect) === false) {",
      "16:   if (redirect.startsWith('//') === false) {",
      "18:    return true;",
      "19:   }",
      "22:   return false;",
      "23:  }",
      "25:  const { protocol: redirectProtocol, hostname: redirectDomain } = new URL(redirect);",
      "27:  const envKey = `AUTH_${provider.toUpperCase()}_REDIRECT_ALLOW_LIST`;",
      "29:  if (envKey in env) {",
      "30:   if (isUrlAllowed(redirect, [...toArray(env[envKey] as string), publicUrl])) return true;",
      "31:  }",
      "33:  if (URL.canParse(publicUrl) === false) {",
      "34:   return false;",
      "35:  }",
      "38:  const { protocol: publicProtocol, hostname: publicDomain } = new URL(publicUrl);",
      "40:  return `${redirectProtocol}//${redirectDomain}` === `${publicProtocol}//${publicDomain}`;",
      "41: }",
      "",
      "---------------"
    ],
    "api/src/utils/is-url-allowed.test.ts||api/src/utils/is-url-allowed.test.ts": [
      "File: api/src/utils/is-url-allowed.test.ts -> api/src/utils/is-url-allowed.test.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: import { expect, test } from 'vitest';",
      "2: import isUrlAllowed from './is-url-allowed.js';",
      "4: test('isUrlAllowed should allow matching domain', () => {",
      "5:  const checkUrl = 'https://directus.io';",
      "6:  const allowedUrls = ['https://directus.io/'];",
      "8:  expect(isUrlAllowed(checkUrl, allowedUrls)).toBe(true);",
      "9: });",
      "11: test('isUrlAllowed should allow matching path', () => {",
      "12:  const checkUrl = 'https://directus.io/tv';",
      "13:  const allowedUrls = ['https://directus.io/tv'];",
      "15:  expect(isUrlAllowed(checkUrl, allowedUrls)).toBe(true);",
      "16: });",
      "18: test('isUrlAllowed should block different paths', () => {",
      "19:  const checkUrl = 'http://example.com/test1';",
      "20:  const allowedUrls = ['http://example.com/test2', 'http://example.com/test3', 'http://example.com/'];",
      "22:  expect(isUrlAllowed(checkUrl, allowedUrls)).toBe(false);",
      "23: });",
      "25: test('isUrlAllowed should block different domains', () => {",
      "26:  const checkUrl = 'http://directus.io/';",
      "27:  const allowedUrls = ['http://example.com/', 'http://directus.chat'];",
      "29:  expect(isUrlAllowed(checkUrl, allowedUrls)).toBe(false);",
      "30: });",
      "32: test('isUrlAllowed blocks varying protocols', () => {",
      "33:  const checkUrl = 'http://example.com/';",
      "34:  const allowedUrls = ['ftp://example.com/', 'https://example.com/'];",
      "36:  expect(isUrlAllowed(checkUrl, allowedUrls)).toBe(false);",
      "37: });",
      "",
      "---------------"
    ],
    "api/src/utils/is-url-allowed.ts||api/src/utils/is-url-allowed.ts": [
      "File: api/src/utils/is-url-allowed.ts -> api/src/utils/is-url-allowed.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "15:  const parsedWhitelist = urlAllowList",
      "16:   .map((allowedURL) => {",
      "17:    try {",
      "20:    } catch {",
      "21:     logger.warn(`Invalid URL used \"${url}\"`);",
      "22:    }",
      "",
      "[Removed Lines]",
      "18:     const { hostname, pathname } = new URL(allowedURL);",
      "19:     return hostname + pathname;",
      "",
      "[Added Lines]",
      "18:     const { origin, pathname } = new URL(allowedURL);",
      "19:     return origin + pathname;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "26:   .filter((f) => f) as string[];",
      "28:  try {",
      "31:  } catch {",
      "32:   return false;",
      "33:  }",
      "",
      "[Removed Lines]",
      "29:   const { hostname, pathname } = new URL(url);",
      "30:   return parsedWhitelist.includes(hostname + pathname);",
      "",
      "[Added Lines]",
      "29:   const { origin, pathname } = new URL(url);",
      "30:   return parsedWhitelist.includes(origin + pathname);",
      "",
      "---------------"
    ],
    "packages/env/src/constants/directus-variables.ts||packages/env/src/constants/directus-variables.ts": [
      "File: packages/env/src/constants/directus-variables.ts -> packages/env/src/constants/directus-variables.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "153:  'AUTH_.+_GROUP_SCOPE',",
      "154:  'AUTH_.+_IDP.+',",
      "155:  'AUTH_.+_SP.+',",
      "157:  'PACKAGE_FILE_LOCATION',",
      "158:  'EXTENSIONS_LOCATION',",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "156:  'AUTH_.+_REDIRECT_ALLOW_LIST',",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "de2a9b10f84cf43f27e04a46718595ca3941ba33",
      "candidate_info": {
        "commit_hash": "de2a9b10f84cf43f27e04a46718595ca3941ba33",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/de2a9b10f84cf43f27e04a46718595ca3941ba33",
        "files": [
          ".changeset/early-bears-impress.md",
          "api/package.json",
          "api/src/auth/drivers/openid.ts",
          "api/src/services/authentication.ts",
          "api/src/services/files/utils/get-metadata.ts",
          "api/src/services/graphql/schema-cache.ts",
          "api/src/services/shares.ts",
          "api/src/services/tus/lockers.ts",
          "api/src/services/users.ts",
          "api/src/websocket/controllers/base.ts",
          "app/package.json",
          "docs/package.json",
          "package.json",
          "packages/components/package.json",
          "packages/composables/package.json",
          "packages/constants/package.json",
          "packages/create-directus-extension/package.json",
          "packages/create-directus-project/package.json",
          "packages/env/package.json",
          "packages/errors/package.json",
          "packages/extensions-registry/package.json",
          "packages/extensions-sdk/package.json",
          "packages/extensions/package.json",
          "packages/format-title/package.json",
          "packages/memory/package.json",
          "packages/memory/src/bus/lib/redis.test.ts",
          "packages/memory/src/kv/lib/redis.test.ts",
          "packages/pressure/package.json",
          "packages/random/package.json",
          "packages/release-notes-generator/package.json",
          "packages/schema/package.json",
          "packages/storage-driver-azure/package.json",
          "packages/storage-driver-cloudinary/package.json",
          "packages/storage-driver-gcs/package.json",
          "packages/storage-driver-local/package.json",
          "packages/storage-driver-s3/package.json",
          "packages/storage-driver-supabase/package.json",
          "packages/storage/package.json",
          "packages/stores/package.json",
          "packages/system-data/package.json",
          "packages/themes/package.json",
          "packages/types/package.json",
          "packages/update-check/package.json",
          "packages/utils/package.json",
          "packages/validation/package.json",
          "pnpm-lock.yaml",
          "sdk/package.json",
          "tests/blackbox/package.json"
        ],
        "message": "Update all non-major dependencies (#24722)\n\nCo-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>",
        "before_after_code_files": [
          "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts",
          "api/src/services/authentication.ts||api/src/services/authentication.ts",
          "api/src/services/files/utils/get-metadata.ts||api/src/services/files/utils/get-metadata.ts",
          "api/src/services/graphql/schema-cache.ts||api/src/services/graphql/schema-cache.ts",
          "api/src/services/shares.ts||api/src/services/shares.ts",
          "api/src/services/tus/lockers.ts||api/src/services/tus/lockers.ts",
          "api/src/services/users.ts||api/src/services/users.ts",
          "api/src/websocket/controllers/base.ts||api/src/websocket/controllers/base.ts",
          "packages/memory/src/bus/lib/redis.test.ts||packages/memory/src/bus/lib/redis.test.ts",
          "packages/memory/src/kv/lib/redis.test.ts||packages/memory/src/kv/lib/redis.test.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts"
          ],
          "candidate": [
            "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts"
          ]
        }
      },
      "candidate_diff": {
        "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts": [
          "File: api/src/auth/drivers/openid.ts -> api/src/auth/drivers/openid.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: import express, { Router } from 'express';",
          "15: import { flatten } from 'flat';",
          "16: import jwt from 'jsonwebtoken';",
          "17: import type { Client } from 'openid-client';",
          "18: import { errors, generators, Issuer } from 'openid-client';",
          "19: import { getAuthProvider } from '../../auth.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import type { StringValue } from 'ms';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "393:    }",
          "395:    const token = jwt.sign({ verifier: codeVerifier, redirect, prompt }, getSecret(), {",
          "397:     issuer: 'directus',",
          "398:    });",
          "",
          "[Removed Lines]",
          "396:     expiresIn: (env[`AUTH_${providerName.toUpperCase()}_LOGIN_TIMEOUT`] ?? '5m') as string,",
          "",
          "[Added Lines]",
          "397:     expiresIn: (env[`AUTH_${providerName.toUpperCase()}_LOGIN_TIMEOUT`] ?? '5m') as StringValue | number,",
          "",
          "---------------"
        ],
        "api/src/services/authentication.ts||api/src/services/authentication.ts": [
          "File: api/src/services/authentication.ts -> api/src/services/authentication.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { Action } from '@directus/constants';",
          "4: import { useEnv } from '@directus/env';",
          "5: import {",
          "",
          "[Removed Lines]",
          "1: import { fetchRolesTree } from '../permissions/lib/fetch-roles-tree.js';",
          "2: import { fetchGlobalAccess } from '../permissions/modules/fetch-global-access/fetch-global-access.js';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12: import jwt from 'jsonwebtoken';",
          "13: import type { Knex } from 'knex';",
          "14: import { clone, cloneDeep } from 'lodash-es';",
          "15: import { performance } from 'perf_hooks';",
          "16: import { getAuthProvider } from '../auth.js';",
          "17: import { DEFAULT_AUTH_PROVIDER } from '../constants.js';",
          "18: import getDatabase from '../database/index.js';",
          "19: import emitter from '../emitter.js';",
          "20: import { RateLimiterRes, createRateLimiter } from '../rate-limiter.js';",
          "21: import type { AbstractServiceOptions, DirectusTokenPayload, LoginResult, Session, User } from '../types/index.js';",
          "22: import { getMilliseconds } from '../utils/get-milliseconds.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import type { StringValue } from 'ms';",
          "19: import { fetchRolesTree } from '../permissions/lib/fetch-roles-tree.js';",
          "20: import { fetchGlobalAccess } from '../permissions/modules/fetch-global-access/fetch-global-access.js';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "221:    },",
          "222:   );",
          "226:   const accessToken = jwt.sign(customClaims, getSecret(), {",
          "227:    expiresIn: TTL,",
          "",
          "[Removed Lines]",
          "224:   const TTL = env[options?.session ? 'SESSION_COOKIE_TTL' : 'ACCESS_TOKEN_TTL'] as string;",
          "",
          "[Added Lines]",
          "225:   const TTL = env[options?.session ? 'SESSION_COOKIE_TTL' : 'ACCESS_TOKEN_TTL'] as StringValue | number;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "401:    },",
          "402:   );",
          "406:   const accessToken = jwt.sign(customClaims, getSecret(), {",
          "407:    expiresIn: TTL,",
          "",
          "[Removed Lines]",
          "404:   const TTL = env[options?.session ? 'SESSION_COOKIE_TTL' : 'ACCESS_TOKEN_TTL'] as string;",
          "",
          "[Added Lines]",
          "405:   const TTL = env[options?.session ? 'SESSION_COOKIE_TTL' : 'ACCESS_TOKEN_TTL'] as StringValue | number;",
          "",
          "---------------"
        ],
        "api/src/services/files/utils/get-metadata.ts||api/src/services/files/utils/get-metadata.ts": [
          "File: api/src/services/files/utils/get-metadata.ts -> api/src/services/files/utils/get-metadata.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     if (sharpMetadata.exif) {",
          "55:      try {",
          "60:       if (Image) {",
          "61:        fullMetadata.ifd0 = Image;",
          "",
          "[Removed Lines]",
          "56:       const { Image, ThumbnailTags, Iop, GPSInfo, Photo } = (exif as unknown as typeof exif.default)(",
          "57:        sharpMetadata.exif,",
          "58:       );",
          "",
          "[Added Lines]",
          "56:       const { Image, ThumbnailTags, Iop, GPSInfo, Photo } = exif(sharpMetadata.exif);",
          "",
          "---------------"
        ],
        "api/src/services/graphql/schema-cache.ts||api/src/services/graphql/schema-cache.ts": [
          "File: api/src/services/graphql/schema-cache.ts -> api/src/services/graphql/schema-cache.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { useEnv } from '@directus/env';",
          "2: import { GraphQLSchema } from 'graphql';",
          "4: import { useBus } from '../../bus/index.js';",
          "9: const env = useEnv();",
          "10: const bus = useBus();",
          "",
          "[Removed Lines]",
          "3: import LRUMapDefault from 'mnemonist/lru-map.js';",
          "7: const LRUMap = LRUMapDefault as unknown as typeof LRUMapDefault.default;",
          "",
          "[Added Lines]",
          "3: import { LRUMap } from 'mnemonist';",
          "",
          "---------------"
        ],
        "api/src/services/shares.ts||api/src/services/shares.ts": [
          "File: api/src/services/shares.ts -> api/src/services/shares.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import type { Item, PrimaryKey } from '@directus/types';",
          "4: import argon2 from 'argon2';",
          "5: import jwt from 'jsonwebtoken';",
          "6: import { nanoid } from 'nanoid';",
          "7: import { useLogger } from '../logger/index.js';",
          "8: import { validateAccess } from '../permissions/modules/validate-access/validate-access.js';",
          "9: import type {",
          "10:  AbstractServiceOptions,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import type { StringValue } from 'ms';",
          "9: import { clearCache as clearPermissionsCache } from '../permissions/cache.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21: import { ItemsService } from './items.js';",
          "22: import { MailService } from './mail/index.js';",
          "23: import { UsersService } from './users.js';",
          "26: const env = useEnv();",
          "27: const logger = useLogger();",
          "",
          "[Removed Lines]",
          "24: import { clearCache as clearPermissionsCache } from '../permissions/cache.js';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:    tokenPayload.session = refreshToken;",
          "117:   }",
          "121:   const accessToken = jwt.sign(tokenPayload, getSecret(), {",
          "122:    expiresIn: TTL,",
          "",
          "[Removed Lines]",
          "119:   const TTL = env[options?.session ? 'SESSION_COOKIE_TTL' : 'ACCESS_TOKEN_TTL'] as string;",
          "",
          "[Added Lines]",
          "120:   const TTL = env[options?.session ? 'SESSION_COOKIE_TTL' : 'ACCESS_TOKEN_TTL'] as StringValue | number;",
          "",
          "---------------"
        ],
        "api/src/services/tus/lockers.ts||api/src/services/tus/lockers.ts": [
          "File: api/src/services/tus/lockers.ts -> api/src/services/tus/lockers.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:   this.kv = useLock();",
          "43:  }",
          "46:   const abortController = new AbortController();",
          "48:   const lock = await Promise.race([",
          "51:   ]);",
          "53:   abortController.abort();",
          "",
          "[Removed Lines]",
          "45:  async lock(cancelReq: RequestRelease) {",
          "49:    waitTimeout(this.acquireTimeout, abortController.signal),",
          "50:    this.acquireLock(this.id, cancelReq, abortController.signal),",
          "",
          "[Added Lines]",
          "45:  async lock(signal: AbortSignal, cancelReq: RequestRelease) {",
          "48:   const abortSignal = AbortSignal.any([signal, abortController.signal]);",
          "51:    waitTimeout(this.acquireTimeout, abortSignal),",
          "52:    this.acquireLock(this.id, cancelReq, abortSignal),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:  }",
          "60:  protected async acquireLock(id: string, requestRelease: RequestRelease, signal: AbortSignal): Promise<boolean> {",
          "61:   if (signal.aborted) {",
          "63:   }",
          "66:   const now = Date.now();",
          "68:   if (!lockTime || Number(lockTime) < now - this.lockTimeout) {",
          "",
          "[Removed Lines]",
          "62:    return false;",
          "65:   const lockTime = await this.kv.get(id);",
          "",
          "[Added Lines]",
          "63:   const lockTime = await this.kv.get(id);",
          "66:    return typeof lockTime !== 'undefined';",
          "",
          "---------------"
        ],
        "api/src/services/users.ts||api/src/services/users.ts": [
          "File: api/src/services/users.ts -> api/src/services/users.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: import Joi from 'joi';",
          "7: import jwt from 'jsonwebtoken';",
          "8: import { isEmpty } from 'lodash-es';",
          "9: import { performance } from 'perf_hooks';",
          "10: import { clearSystemCache } from '../cache.js';",
          "11: import getDatabase from '../database/index.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import type { StringValue } from 'ms';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:   const payload = { email, scope: 'invite' };",
          "144:   const token = jwt.sign(payload, getSecret(), {",
          "146:    issuer: 'directus',",
          "147:   });",
          "",
          "[Removed Lines]",
          "145:    expiresIn: env['USER_INVITE_TOKEN_TTL'] as string,",
          "",
          "[Added Lines]",
          "146:    expiresIn: env['USER_INVITE_TOKEN_TTL'] as StringValue | number,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "490:    const payload = { email: input.email, scope: 'pending-registration' };",
          "492:    const token = jwt.sign(payload, env['SECRET'] as string, {",
          "494:     issuer: 'directus',",
          "495:    });",
          "",
          "[Removed Lines]",
          "493:     expiresIn: env['EMAIL_VERIFICATION_TOKEN_TTL'] as string,",
          "",
          "[Added Lines]",
          "494:     expiresIn: env['EMAIL_VERIFICATION_TOKEN_TTL'] as StringValue | number,",
          "",
          "---------------"
        ],
        "api/src/websocket/controllers/base.ts||api/src/websocket/controllers/base.ts": [
          "File: api/src/websocket/controllers/base.ts -> api/src/websocket/controllers/base.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import type { RateLimiterAbstract } from 'rate-limiter-flexible';",
          "9: import type internal from 'stream';",
          "10: import { parse } from 'url';",
          "12: import { fromZodError } from 'zod-validation-error';",
          "13: import emitter from '../../emitter.js';",
          "14: import { useLogger } from '../../logger/index.js';",
          "",
          "[Removed Lines]",
          "11: import WebSocket, { WebSocketServer } from 'ws';",
          "",
          "[Added Lines]",
          "11: import WebSocket, { WebSocketServer, type Server } from 'ws';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: const logger = useLogger();",
          "30: export default abstract class SocketController {",
          "32:  clients: Set<WebSocketClient>;",
          "33:  authentication: WebSocketAuthentication;",
          "",
          "[Removed Lines]",
          "31:  server: WebSocket.Server;",
          "",
          "[Added Lines]",
          "31:  server: Server;",
          "",
          "---------------"
        ],
        "packages/memory/src/bus/lib/redis.test.ts||packages/memory/src/bus/lib/redis.test.ts": [
          "File: packages/memory/src/bus/lib/redis.test.ts -> packages/memory/src/bus/lib/redis.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: let mockNamespacedChannel: string;",
          "25: let mockNamespacedChannelBuffer: Buffer;",
          "26: let mockUint8Array: Uint8Array;",
          "28: let mockCompressedUint8Array: Uint8Array;",
          "29: let mockDecompressedUint8Array: Uint8Array;",
          "30: let mockMessage: string;",
          "",
          "[Removed Lines]",
          "27: let mockBuffer: Buffer<Uint8Array>;",
          "",
          "[Added Lines]",
          "27: let mockBuffer: Buffer;",
          "",
          "---------------"
        ],
        "packages/memory/src/kv/lib/redis.test.ts||packages/memory/src/kv/lib/redis.test.ts": [
          "File: packages/memory/src/kv/lib/redis.test.ts -> packages/memory/src/kv/lib/redis.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: let mockNamespacedKey: string;",
          "22: let mockRedis: Redis;",
          "23: let mockUint8Array: Uint8Array;",
          "25: let mockCompressedUint8Array: Uint8Array;",
          "26: let mockDecompressedUint8Array: Uint8Array;",
          "27: let mockValue: string;",
          "",
          "[Removed Lines]",
          "24: let mockBuffer: Buffer<Uint8Array>;",
          "",
          "[Added Lines]",
          "24: let mockBuffer: Buffer;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec2604f913b3b12788144187fa65c9e64f08ff6e",
      "candidate_info": {
        "commit_hash": "ec2604f913b3b12788144187fa65c9e64f08ff6e",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/ec2604f913b3b12788144187fa65c9e64f08ff6e",
        "files": [
          ".changeset/weak-chefs-sniff.md",
          "api/src/app.test.ts",
          "api/src/app.ts",
          "api/src/auth/drivers/oauth2.ts",
          "api/src/auth/drivers/openid.ts",
          "api/src/cli/utils/create-env/env-stub.liquid",
          "api/src/cli/utils/create-env/index.ts",
          "api/src/controllers/auth.ts",
          "api/src/services/authentication.ts",
          "api/src/services/graphql/index.ts",
          "api/src/services/server.ts",
          "api/src/services/shares.ts",
          "api/src/services/users.ts",
          "api/src/utils/get-accountability-for-token.ts",
          "api/src/utils/get-secret.ts",
          "docs/contributing/running-locally.md",
          "docs/getting-started/quickstart.md",
          "docs/reference/system/server.md",
          "docs/self-hosted/config-options.md",
          "docs/self-hosted/docker-guide.md",
          "docs/self-hosted/quickstart.md",
          "packages/env/src/constants/directus-variables.ts",
          "tests/blackbox/common/config.ts"
        ],
        "message": "Don't require `KEY` or `SECRET` to be set on startup (#22320)\n\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>",
        "before_after_code_files": [
          "api/src/app.test.ts||api/src/app.test.ts",
          "api/src/app.ts||api/src/app.ts",
          "api/src/auth/drivers/oauth2.ts||api/src/auth/drivers/oauth2.ts",
          "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts",
          "api/src/cli/utils/create-env/env-stub.liquid||api/src/cli/utils/create-env/env-stub.liquid",
          "api/src/cli/utils/create-env/index.ts||api/src/cli/utils/create-env/index.ts",
          "api/src/controllers/auth.ts||api/src/controllers/auth.ts",
          "api/src/services/authentication.ts||api/src/services/authentication.ts",
          "api/src/services/graphql/index.ts||api/src/services/graphql/index.ts",
          "api/src/services/server.ts||api/src/services/server.ts",
          "api/src/services/shares.ts||api/src/services/shares.ts",
          "api/src/services/users.ts||api/src/services/users.ts",
          "api/src/utils/get-accountability-for-token.ts||api/src/utils/get-accountability-for-token.ts",
          "api/src/utils/get-secret.ts||api/src/utils/get-secret.ts",
          "packages/env/src/constants/directus-variables.ts||packages/env/src/constants/directus-variables.ts",
          "tests/blackbox/common/config.ts||tests/blackbox/common/config.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "api/src/auth/drivers/oauth2.ts||api/src/auth/drivers/oauth2.ts",
            "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts",
            "packages/env/src/constants/directus-variables.ts||packages/env/src/constants/directus-variables.ts"
          ],
          "candidate": [
            "api/src/auth/drivers/oauth2.ts||api/src/auth/drivers/oauth2.ts",
            "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts",
            "packages/env/src/constants/directus-variables.ts||packages/env/src/constants/directus-variables.ts"
          ]
        }
      },
      "candidate_diff": {
        "api/src/app.test.ts||api/src/app.test.ts": [
          "File: api/src/app.test.ts -> api/src/app.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: beforeEach(() => {",
          "73:  vi.mocked(useEnv).mockReturnValue({",
          "75:   SECRET: 'abcdef',",
          "76:   SERVE_APP: 'true',",
          "77:   PUBLIC_URL: 'http://localhost:8055/directus',",
          "",
          "[Removed Lines]",
          "74:   KEY: 'xxxxxxx-xxxxxx-xxxxxxxx-xxxxxxxxxx',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "api/src/app.ts||api/src/app.ts": [
          "File: api/src/app.ts -> api/src/app.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: import { initTelemetry } from './telemetry/index.js';",
          "66: import { getConfigFromEnv } from './utils/get-config-from-env.js';",
          "67: import { Url } from './utils/url.js';",
          "69: import { validateStorage } from './utils/validate-storage.js';",
          "71: const require = createRequire(import.meta.url);",
          "",
          "[Removed Lines]",
          "68: import { validateEnv } from './utils/validate-env.js';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:  const logger = useLogger();",
          "76:  const helmet = await import('helmet');",
          "86:  await validateDatabaseConnection();",
          "89:  if ((await isInstalled()) === false) {",
          "90:   logger.error(`Database doesn't have Directus tables installed.`);",
          "",
          "[Removed Lines]",
          "78:  validateEnv(['KEY', 'SECRET']);",
          "80:  if (!new Url(env['PUBLIC_URL'] as string).isAbsolute()) {",
          "81:   logger.warn('PUBLIC_URL should be a full URL');",
          "82:  }",
          "84:  await validateStorage();",
          "87:  await validateDatabaseExtensions();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:   logger.warn(`Database migrations have not all been run`);",
          "96:  }",
          "98:  await registerAuthProviders();",
          "100:  const extensionManager = getExtensionManager();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:  if (!env['SECRET']) {",
          "89:   logger.warn(",
          "90:    `\"SECRET\" env variable is missing. Using a random value instead. Tokens will not persist between restarts. This is not appropriate for production usage.`,",
          "91:   );",
          "92:  }",
          "94:  if (!new Url(env['PUBLIC_URL'] as string).isAbsolute()) {",
          "95:   logger.warn('\"PUBLIC_URL\" should be a full URL');",
          "96:  }",
          "98:  await validateDatabaseExtensions();",
          "99:  await validateStorage();",
          "",
          "---------------"
        ],
        "api/src/auth/drivers/oauth2.ts||api/src/auth/drivers/oauth2.ts": [
          "File: api/src/auth/drivers/oauth2.ts -> api/src/auth/drivers/oauth2.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: import { isLoginRedirectAllowed } from '../../utils/is-login-redirect-allowed.js';",
          "32: import { Url } from '../../utils/url.js';",
          "33: import { LocalAuthDriver } from './local.js';",
          "35: export class OAuth2AuthDriver extends LocalAuthDriver {",
          "36:  client: Client;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: import { getSecret } from '../../utils/get-secret.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:     throw new InvalidPayloadError({ reason: `URL \"${redirect}\" can't be used to redirect after login` });",
          "307:    }",
          "310:     expiresIn: '5m',",
          "311:     issuer: 'directus',",
          "312:    });",
          "",
          "[Removed Lines]",
          "309:    const token = jwt.sign({ verifier: codeVerifier, redirect, prompt }, env['SECRET'] as string, {",
          "",
          "[Added Lines]",
          "310:    const token = jwt.sign({ verifier: codeVerifier, redirect, prompt }, getSecret(), {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "338:    let tokenData;",
          "340:    try {",
          "342:      issuer: 'directus',",
          "343:     }) as {",
          "344:      verifier: string;",
          "",
          "[Removed Lines]",
          "341:     tokenData = jwt.verify(req.cookies[`oauth2.${providerName}`], env['SECRET'] as string, {",
          "",
          "[Added Lines]",
          "342:     tokenData = jwt.verify(req.cookies[`oauth2.${providerName}`], getSecret(), {",
          "",
          "---------------"
        ],
        "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts": [
          "File: api/src/auth/drivers/openid.ts -> api/src/auth/drivers/openid.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import asyncHandler from '../../utils/async-handler.js';",
          "29: import { getConfigFromEnv } from '../../utils/get-config-from-env.js';",
          "30: import { getIPFromReq } from '../../utils/get-ip-from-req.js';",
          "31: import { isLoginRedirectAllowed } from '../../utils/is-login-redirect-allowed.js';",
          "32: import { Url } from '../../utils/url.js';",
          "33: import { LocalAuthDriver } from './local.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: import { getSecret } from '../../utils/get-secret.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336:     throw new InvalidPayloadError({ reason: `URL \"${redirect}\" can't be used to redirect after login` });",
          "337:    }",
          "340:     expiresIn: '5m',",
          "341:     issuer: 'directus',",
          "342:    });",
          "",
          "[Removed Lines]",
          "339:    const token = jwt.sign({ verifier: codeVerifier, redirect, prompt }, env['SECRET'] as string, {",
          "",
          "[Added Lines]",
          "340:    const token = jwt.sign({ verifier: codeVerifier, redirect, prompt }, getSecret(), {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "368:    let tokenData;",
          "370:    try {",
          "372:      issuer: 'directus',",
          "373:     }) as {",
          "374:      verifier: string;",
          "",
          "[Removed Lines]",
          "371:     tokenData = jwt.verify(req.cookies[`openid.${providerName}`], env['SECRET'] as string, {",
          "",
          "[Added Lines]",
          "372:     tokenData = jwt.verify(req.cookies[`openid.${providerName}`], getSecret(), {",
          "",
          "---------------"
        ],
        "api/src/cli/utils/create-env/env-stub.liquid||api/src/cli/utils/create-env/env-stub.liquid": [
          "File: api/src/cli/utils/create-env/env-stub.liquid -> api/src/cli/utils/create-env/env-stub.liquid",
          "--- Hunk 1 ---",
          "[Context before]",
          "196: {{ security }}",
          "201: # Secret string for the project",
          "202: # SECRET=\"abcdef\"",
          "",
          "[Removed Lines]",
          "198: # Unique identifier for the project",
          "199: # KEY=\"xxxxxxx-xxxxxx-xxxxxxxx-xxxxxxxxxx\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "api/src/cli/utils/create-env/index.ts||api/src/cli/utils/create-env/index.ts": [
          "File: api/src/cli/utils/create-env/index.ts -> api/src/cli/utils/create-env/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import fs from 'fs';",
          "2: import { Liquid } from 'liquidjs';",
          "4: import { dirname } from 'node:path';",
          "5: import { fileURLToPath } from 'node:url';",
          "6: import path from 'path';",
          "",
          "[Removed Lines]",
          "3: import { randomUUID } from 'node:crypto';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:  const config: Record<string, any> = {",
          "30:   security: {",
          "32:    SECRET: nanoid(32),",
          "33:   },",
          "34:   database: {",
          "",
          "[Removed Lines]",
          "31:    KEY: randomUUID(),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "api/src/controllers/auth.ts||api/src/controllers/auth.ts": [
          "File: api/src/controllers/auth.ts -> api/src/controllers/auth.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { useEnv } from '@directus/env';",
          "2: import { ErrorCode, InvalidPayloadError, isDirectusError } from '@directus/errors';",
          "3: import type { Accountability } from '@directus/types';",
          "5: import type { Request } from 'express';",
          "6: import {",
          "7:  createLDAPAuthRouter,",
          "8:  createLocalAuthRouter,",
          "",
          "[Removed Lines]",
          "4: import { Router } from 'express';",
          "",
          "[Added Lines]",
          "5: import { Router } from 'express';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:  createOpenIDAuthRouter,",
          "11:  createSAMLAuthRouter,",
          "12: } from '../auth/drivers/index.js';",
          "14: import { useLogger } from '../logger.js';",
          "15: import { respond } from '../middleware/respond.js';",
          "16: import { AuthenticationService } from '../services/authentication.js';",
          "17: import { UsersService } from '../services/users.js';",
          "18: import asyncHandler from '../utils/async-handler.js';",
          "19: import { getAuthProviders } from '../utils/get-auth-providers.js';",
          "20: import { getIPFromReq } from '../utils/get-ip-from-req.js';",
          "21: import isDirectusJWT from '../utils/is-directus-jwt.js';",
          "22: import { verifyAccessJWT } from '../utils/jwt.js';",
          "25: const router = Router();",
          "26: const env = useEnv();",
          "",
          "[Removed Lines]",
          "13: import { REFRESH_COOKIE_OPTIONS, DEFAULT_AUTH_PROVIDER, SESSION_COOKIE_OPTIONS } from '../constants.js';",
          "23: import type { AuthenticationMode } from '../types/auth.js';",
          "",
          "[Added Lines]",
          "13: import { DEFAULT_AUTH_PROVIDER, REFRESH_COOKIE_OPTIONS, SESSION_COOKIE_OPTIONS } from '../constants.js';",
          "18: import type { AuthenticationMode } from '../types/auth.js';",
          "22: import { getSecret } from '../utils/get-secret.js';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "90:   const token = req.cookies[env['SESSION_COOKIE_NAME'] as string];",
          "92:   if (isDirectusJWT(token)) {",
          "94:    return payload.session;",
          "95:   }",
          "96:  }",
          "",
          "[Removed Lines]",
          "93:    const payload = verifyAccessJWT(token, env['SECRET'] as string);",
          "",
          "[Added Lines]",
          "94:    const payload = verifyAccessJWT(token, getSecret());",
          "",
          "---------------"
        ],
        "api/src/services/authentication.ts||api/src/services/authentication.ts": [
          "File: api/src/services/authentication.ts -> api/src/services/authentication.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import { RateLimiterRes, createRateLimiter } from '../rate-limiter.js';",
          "20: import type { AbstractServiceOptions, DirectusTokenPayload, LoginResult, Session, User } from '../types/index.js';",
          "21: import { getMilliseconds } from '../utils/get-milliseconds.js';",
          "22: import { stall } from '../utils/stall.js';",
          "23: import { ActivityService } from './activity.js';",
          "24: import { SettingsService } from './settings.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import { getSecret } from '../utils/get-secret.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227:   const TTL = env[options?.session ? 'SESSION_COOKIE_TTL' : 'ACCESS_TOKEN_TTL'] as string;",
          "230:    expiresIn: TTL,",
          "231:    issuer: 'directus',",
          "232:   });",
          "",
          "[Removed Lines]",
          "229:   const accessToken = jwt.sign(customClaims, env['SECRET'] as string, {",
          "",
          "[Added Lines]",
          "230:   const accessToken = jwt.sign(customClaims, getSecret(), {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "404:   const TTL = env[options?.session ? 'SESSION_COOKIE_TTL' : 'ACCESS_TOKEN_TTL'] as string;",
          "407:    expiresIn: TTL,",
          "408:    issuer: 'directus',",
          "409:   });",
          "",
          "[Removed Lines]",
          "406:   const accessToken = jwt.sign(customClaims, env['SECRET'] as string, {",
          "",
          "[Added Lines]",
          "407:   const accessToken = jwt.sign(customClaims, getSecret(), {",
          "",
          "---------------"
        ],
        "api/src/services/graphql/index.ts||api/src/services/graphql/index.ts": [
          "File: api/src/services/graphql/index.ts -> api/src/services/graphql/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: import type { AbstractServiceOptions, AuthenticationMode, GraphQLParams } from '../../types/index.js';",
          "58: import { generateHash } from '../../utils/generate-hash.js';",
          "59: import { getGraphQLType } from '../../utils/get-graphql-type.js';",
          "60: import { getService } from '../../utils/get-service.js';",
          "61: import isDirectusJWT from '../../utils/is-directus-jwt.js';",
          "62: import { verifyAccessJWT } from '../../utils/jwt.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: import { getSecret } from '../../utils/get-secret.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2311:       const token = req?.cookies[env['SESSION_COOKIE_NAME'] as string];",
          "2313:       if (isDirectusJWT(token)) {",
          "2315:        currentRefreshToken = payload.session;",
          "2316:       }",
          "2317:      }",
          "",
          "[Removed Lines]",
          "2314:        const payload = verifyAccessJWT(token, env['SECRET'] as string);",
          "",
          "[Added Lines]",
          "2315:        const payload = verifyAccessJWT(token, getSecret());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2378:       const token = req?.cookies[env['SESSION_COOKIE_NAME'] as string];",
          "2380:       if (isDirectusJWT(token)) {",
          "2382:        currentRefreshToken = payload.session;",
          "2383:       }",
          "2384:      }",
          "",
          "[Removed Lines]",
          "2381:        const payload = verifyAccessJWT(token, env['SECRET'] as string);",
          "",
          "[Added Lines]",
          "2382:        const payload = verifyAccessJWT(token, getSecret());",
          "",
          "---------------"
        ],
        "api/src/services/server.ts||api/src/services/server.ts": [
          "File: api/src/services/server.ts -> api/src/services/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   const data: HealthData = {",
          "145:    status: 'ok',",
          "146:    releaseId: version,",
          "148:    checks: merge(",
          "149:     ...(await Promise.all([",
          "150:      testDatabase(),",
          "",
          "[Removed Lines]",
          "147:    serviceId: env['KEY'] as string,",
          "",
          "[Added Lines]",
          "147:    serviceId: env['PUBLIC_URL'] as string,",
          "",
          "---------------"
        ],
        "api/src/services/shares.ts||api/src/services/shares.ts": [
          "File: api/src/services/shares.ts -> api/src/services/shares.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  ShareData,",
          "13: } from '../types/index.js';",
          "14: import { getMilliseconds } from '../utils/get-milliseconds.js';",
          "15: import { md } from '../utils/md.js';",
          "16: import { Url } from '../utils/url.js';",
          "17: import { userName } from '../utils/user-name.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import { getSecret } from '../utils/get-secret.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:   const TTL = env[options?.session ? 'SESSION_COOKIE_TTL' : 'ACCESS_TOKEN_TTL'] as string;",
          "110:    expiresIn: TTL,",
          "111:    issuer: 'directus',",
          "112:   });",
          "",
          "[Removed Lines]",
          "109:   const accessToken = jwt.sign(tokenPayload, env['SECRET'] as string, {",
          "",
          "[Added Lines]",
          "110:   const accessToken = jwt.sign(tokenPayload, getSecret(), {",
          "",
          "---------------"
        ],
        "api/src/services/users.ts||api/src/services/users.ts": [
          "File: api/src/services/users.ts -> api/src/services/users.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import getDatabase from '../database/index.js';",
          "11: import { useLogger } from '../logger.js';",
          "12: import type { AbstractServiceOptions, MutationOptions } from '../types/index.js';",
          "13: import isUrlAllowed from '../utils/is-url-allowed.js';",
          "14: import { verifyJWT } from '../utils/jwt.js';",
          "15: import { stall } from '../utils/stall.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import { getSecret } from '../utils/get-secret.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:  private inviteUrl(email: string, url: string | null): string {",
          "160:   const payload = { email, scope: 'invite' };",
          "163:   const inviteURL = url ? new Url(url) : new Url(env['PUBLIC_URL'] as string).addPath('admin', 'accept-invite');",
          "164:   inviteURL.setQuery('token', token);",
          "",
          "[Removed Lines]",
          "162:   const token = jwt.sign(payload, env['SECRET'] as string, { expiresIn: '7d', issuer: 'directus' });",
          "",
          "[Added Lines]",
          "163:   const token = jwt.sign(payload, getSecret(), { expiresIn: '7d', issuer: 'directus' });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429:  }",
          "431:  async acceptInvite(token: string, password: string): Promise<void> {",
          "433:    email: string;",
          "434:    scope: string;",
          "435:   };",
          "",
          "[Removed Lines]",
          "432:   const { email, scope } = verifyJWT(token, env['SECRET'] as string) as {",
          "",
          "[Added Lines]",
          "433:   const { email, scope } = verifyJWT(token, getSecret()) as {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "473:   });",
          "475:   const payload = { email: user.email, scope: 'password-reset', hash: getSimpleHash('' + user.password) };",
          "478:   const acceptURL = url",
          "479:    ? new Url(url).setQuery('token', token).toString()",
          "",
          "[Removed Lines]",
          "476:   const token = jwt.sign(payload, env['SECRET'] as string, { expiresIn: '1d', issuer: 'directus' });",
          "",
          "[Added Lines]",
          "477:   const token = jwt.sign(payload, getSecret(), { expiresIn: '1d', issuer: 'directus' });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "501:  }",
          "503:  async resetPassword(token: string, password: string): Promise<void> {",
          "505:    email: string;",
          "506:    scope: string;",
          "507:    hash: string;",
          "",
          "[Removed Lines]",
          "504:   const { email, scope, hash } = jwt.verify(token, env['SECRET'] as string, { issuer: 'directus' }) as {",
          "",
          "[Added Lines]",
          "505:   const { email, scope, hash } = jwt.verify(token, getSecret(), { issuer: 'directus' }) as {",
          "",
          "---------------"
        ],
        "api/src/utils/get-accountability-for-token.ts||api/src/utils/get-accountability-for-token.ts": [
          "File: api/src/utils/get-accountability-for-token.ts -> api/src/utils/get-accountability-for-token.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { InvalidCredentialsError } from '@directus/errors';",
          "3: import type { Accountability } from '@directus/types';",
          "4: import getDatabase from '../database/index.js';",
          "5: import isDirectusJWT from './is-directus-jwt.js';",
          "6: import { verifySessionJWT } from './verify-session-jwt.js';",
          "7: import { verifyAccessJWT } from './jwt.js';",
          "",
          "[Removed Lines]",
          "1: import { useEnv } from '@directus/env';",
          "",
          "[Added Lines]",
          "4: import { getSecret } from './get-secret.js';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10:  token?: string | null,",
          "11:  accountability?: Accountability,",
          "12: ): Promise<Accountability> {",
          "15:  if (!accountability) {",
          "16:   accountability = {",
          "17:    user: null,",
          "",
          "[Removed Lines]",
          "13:  const env = useEnv();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24:  if (token) {",
          "25:   if (isDirectusJWT(token)) {",
          "28:    if ('session' in payload) {",
          "29:     await verifySessionJWT(payload);",
          "",
          "[Removed Lines]",
          "26:    const payload = verifyAccessJWT(token, env['SECRET'] as string);",
          "",
          "[Added Lines]",
          "24:    const payload = verifyAccessJWT(token, getSecret());",
          "",
          "---------------"
        ],
        "api/src/utils/get-secret.ts||api/src/utils/get-secret.ts": [
          "File: api/src/utils/get-secret.ts -> api/src/utils/get-secret.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { useEnv } from '@directus/env';",
          "2: import { nanoid } from 'nanoid';",
          "4: export const _cache: { secret: string | null } = { secret: null };",
          "6: export const getSecret = () => {",
          "7:  if (_cache.secret) {",
          "8:   return _cache.secret;",
          "9:  }",
          "11:  const env = useEnv();",
          "13:  if (env['SECRET']) {",
          "14:   return env['SECRET'] as string;",
          "15:  }",
          "17:  _cache.secret = nanoid(32);",
          "19:  return _cache.secret;",
          "20: };",
          "",
          "---------------"
        ],
        "packages/env/src/constants/directus-variables.ts||packages/env/src/constants/directus-variables.ts": [
          "File: packages/env/src/constants/directus-variables.ts -> packages/env/src/constants/directus-variables.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  'DB_.+',",
          "36:  'SECRET',",
          "38:  'ACCESS_TOKEN_TTL',",
          "",
          "[Removed Lines]",
          "35:  'KEY',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/blackbox/common/config.ts||tests/blackbox/common/config.ts": [
          "File: tests/blackbox/common/config.ts -> tests/blackbox/common/config.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:  ...process.env,",
          "75:  ADMIN_EMAIL: 'admin@example.com',",
          "76:  ADMIN_PASSWORD: 'password',",
          "78:  SECRET: 'directus-test',",
          "79:  TELEMETRY: 'false',",
          "80:  CACHE_SCHEMA: 'true',",
          "",
          "[Removed Lines]",
          "77:  KEY: 'directus-test',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7800b4afa0466a8d5cf63d81e9e4cf2f914d1f0c",
      "candidate_info": {
        "commit_hash": "7800b4afa0466a8d5cf63d81e9e4cf2f914d1f0c",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/7800b4afa0466a8d5cf63d81e9e4cf2f914d1f0c",
        "files": [
          ".changeset/violet-drinks-jump.md",
          "api/src/auth/drivers/openid.ts",
          "contributors.yml",
          "docs/self-hosted/config-options.md"
        ],
        "message": "Allow the login timeout for OpenID SSO login to be adjusted (#24003)\n\n* Allow the lifetime of the `openid.<providerName>` cookie to be determined by a configuration setting.\n\n* - Signed CLA\n- Whitespace correction by prettier\n\n* Create violet-drinks-jump.md\n\n---------\n\nCo-authored-by: Rijk van Zanten <rijkvanzanten@me.com>",
        "before_after_code_files": [
          "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts"
          ],
          "candidate": [
            "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts"
          ]
        }
      },
      "candidate_diff": {
        "api/src/auth/drivers/openid.ts||api/src/auth/drivers/openid.ts": [
          "File: api/src/auth/drivers/openid.ts -> api/src/auth/drivers/openid.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:    }",
          "354:    const token = jwt.sign({ verifier: codeVerifier, redirect, prompt }, getSecret(), {",
          "356:     issuer: 'directus',",
          "357:    });",
          "",
          "[Removed Lines]",
          "355:     expiresIn: '5m',",
          "",
          "[Added Lines]",
          "355:     expiresIn: (env[`AUTH_${providerName.toUpperCase()}_LOGIN_TIMEOUT`] ?? '5m') as string,",
          "",
          "---------------"
        ]
      }
    }
  ]
}