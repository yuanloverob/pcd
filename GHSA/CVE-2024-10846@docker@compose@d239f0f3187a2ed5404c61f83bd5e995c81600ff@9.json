{
  "cve_id": "CVE-2024-10846",
  "cve_desc": "The compose-go library component in versions v2.10-v2.4.0 allows an authorized user who sends malicious YAML payloads to cause the compose-go to consume excessive amount of Memory and CPU cycles while parsing YAML, such as used by Docker Compose from versions  v2.27.0 to v2.29.7 included",
  "repo": "docker/compose",
  "patch_hash": "d239f0f3187a2ed5404c61f83bd5e995c81600ff",
  "patch_info": {
    "commit_hash": "d239f0f3187a2ed5404c61f83bd5e995c81600ff",
    "repo": "docker/compose",
    "commit_url": "https://github.com/docker/compose/commit/d239f0f3187a2ed5404c61f83bd5e995c81600ff#diff-33ef32bf6c23acb95f5902d7097b7a1d5128ca061167ec0716715b0b9eeaa5f6R10",
    "files": [
      "cmd/compose/config.go",
      "go.mod",
      "go.sum",
      "pkg/compose/create.go",
      "pkg/e2e/container_name_test.go",
      "pkg/e2e/fixtures/container_name/compose.yaml"
    ],
    "message": "check container_name is not in use by another service we will create\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
    "before_after_code_files": [
      "cmd/compose/config.go||cmd/compose/config.go",
      "go.mod||go.mod",
      "go.sum||go.sum",
      "pkg/compose/create.go||pkg/compose/create.go",
      "pkg/e2e/container_name_test.go||pkg/e2e/container_name_test.go"
    ]
  },
  "patch_diff": {
    "cmd/compose/config.go||cmd/compose/config.go": [
      "File: cmd/compose/config.go -> cmd/compose/config.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "169:    return err",
      "170:   }",
      "172:   switch opts.Format {",
      "173:   case \"json\":",
      "174:    content, err = project.MarshalJSON()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:   if !opts.noConsistency {",
      "173:    err := project.CheckContainerNameUnicity()",
      "174:    if err != nil {",
      "175:     return err",
      "176:    }",
      "177:   }",
      "",
      "---------------"
    ],
    "go.mod||go.mod": [
      "File: go.mod -> go.mod",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:  github.com/Microsoft/go-winio v0.6.1",
      "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
      "9:  github.com/buger/goterm v1.0.4",
      "11:  github.com/containerd/console v1.0.4",
      "12:  github.com/containerd/containerd v1.7.13",
      "13:  github.com/davecgh/go-spew v1.1.1",
      "",
      "[Removed Lines]",
      "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39",
      "",
      "[Added Lines]",
      "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4",
      "",
      "---------------"
    ],
    "go.sum||go.sum": [
      "File: go.sum -> go.sum",
      "--- Hunk 1 ---",
      "[Context before]",
      "90: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
      "91: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
      "92: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
      "95: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
      "96: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
      "97: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
      "",
      "[Removed Lines]",
      "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39 h1:ZUpnv0xA75X9gy9Y7hjJm51nflGbr+2URaLXBtEic7A=",
      "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
      "",
      "[Added Lines]",
      "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4 h1:WYiZ9D0WBykHUJLlpt+w7NXX0hy+cQKKdVe7vmsNZvg=",
      "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
      "",
      "---------------"
    ],
    "pkg/compose/create.go||pkg/compose/create.go": [
      "File: pkg/compose/create.go -> pkg/compose/create.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:   options.Services = project.ServiceNames()",
      "78:  }",
      "80:  var observedState Containers",
      "82:  if err != nil {",
      "83:   return err",
      "84:  }",
      "",
      "[Removed Lines]",
      "81:  observedState, err := s.getContainers(ctx, project.Name, oneOffInclude, true)",
      "",
      "[Added Lines]",
      "80:  err := project.CheckContainerNameUnicity()",
      "81:  if err != nil {",
      "82:   return err",
      "83:  }",
      "86:  observedState, err = s.getContainers(ctx, project.Name, oneOffInclude, true)",
      "",
      "---------------"
    ],
    "pkg/e2e/container_name_test.go||pkg/e2e/container_name_test.go": [
      "File: pkg/e2e/container_name_test.go -> pkg/e2e/container_name_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:    Copyright 2022 Docker Compose CLI authors",
      "7:    Licensed under the Apache License, Version 2.0 (the \"License\");",
      "8:    you may not use this file except in compliance with the License.",
      "9:    You may obtain a copy of the License at",
      "11:        http://www.apache.org/licenses/LICENSE-2.0",
      "13:    Unless required by applicable law or agreed to in writing, software",
      "14:    distributed under the License is distributed on an \"AS IS\" BASIS,",
      "15:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "16:    See the License for the specific language governing permissions and",
      "17:    limitations under the License.",
      "20: package e2e",
      "22: import (",
      "23:  \"testing\"",
      "25:  \"gotest.tools/v3/icmd\"",
      "26: )",
      "28: func TestUpContainerNameConflict(t *testing.T) {",
      "29:  c := NewParallelCLI(t)",
      "30:  const projectName = \"e2e-container_name_conflict\"",
      "32:  t.Cleanup(func() {",
      "33:   c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "34:  })",
      "36:  res := c.RunDockerComposeCmdNoCheck(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\")",
      "37:  res.Assert(t, icmd.Expected{ExitCode: 1, Err: `container name \"test\" is already in use`})",
      "39:  c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "40:  c.RunDockerComposeCmd(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\", \"test\")",
      "42:  c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "43:  c.RunDockerComposeCmd(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\", \"another_test\")",
      "44: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "663866cbe503ddbfcb466793c5555f527734f4e3",
      "candidate_info": {
        "commit_hash": "663866cbe503ddbfcb466793c5555f527734f4e3",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/663866cbe503ddbfcb466793c5555f527734f4e3",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "Bump compose-go version to latest main\n\nSigned-off-by: Rob Murray <rob.murray@docker.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  github.com/Microsoft/go-winio v0.6.2",
          "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
          "9:  github.com/buger/goterm v1.0.4",
          "11:  github.com/containerd/console v1.0.4",
          "12:  github.com/containerd/containerd v1.7.16",
          "13:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.1.1-0.20240516145816-197e6352c64a",
          "",
          "[Added Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.1.1-0.20240514125539-94bd7356c641",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "91: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "92: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "95: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "96: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "97: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
          "",
          "[Removed Lines]",
          "93: github.com/compose-spec/compose-go/v2 v2.1.1-0.20240516145816-197e6352c64a h1:R0ufvPulvRvFa8JaFEWzSJmkhjfeArXD9vKk0jpmpM4=",
          "94: github.com/compose-spec/compose-go/v2 v2.1.1-0.20240516145816-197e6352c64a/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "[Added Lines]",
          "93: github.com/compose-spec/compose-go/v2 v2.1.0 h1:qdW2qISQlCQG8v1O2TChcdxgAWTUGgUX/CPSO+ES9+E=",
          "94: github.com/compose-spec/compose-go/v2 v2.1.0/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02c747a7defd8593ede969eefbc0c41404f9660b",
      "candidate_info": {
        "commit_hash": "02c747a7defd8593ede969eefbc0c41404f9660b",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/02c747a7defd8593ede969eefbc0c41404f9660b",
        "files": [
          "cmd/compose/compose.go",
          "go.mod",
          "go.sum",
          "pkg/compose/build.go",
          "pkg/compose/convergence.go",
          "pkg/compose/down.go",
          "pkg/compose/plugins.go",
          "pkg/compose/pull.go"
        ],
        "message": "bump compose-go to custom version of v2.5.0 should be replace by v2.5.1 it will be released\n\nSigned-off-by: Guillaume Lours <705411+glours@users.noreply.github.com>",
        "before_after_code_files": [
          "cmd/compose/compose.go||cmd/compose/compose.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/build.go||pkg/compose/build.go",
          "pkg/compose/convergence.go||pkg/compose/convergence.go",
          "pkg/compose/down.go||pkg/compose/down.go",
          "pkg/compose/plugins.go||pkg/compose/plugins.go",
          "pkg/compose/pull.go||pkg/compose/pull.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "cmd/compose/compose.go||cmd/compose/compose.go": [
          "File: cmd/compose/compose.go -> cmd/compose/compose.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: )",
          "76:  lines, err := kvfile.ParseFromReader(r, lookup)",
          "77:  if err != nil {",
          "79:  }",
          "81:  for _, line := range lines {",
          "82:   key, value, _ := strings.Cut(line, \"=\")",
          "83:   vars[key] = value",
          "84:  }",
          "86: }",
          "88: func init() {",
          "",
          "[Removed Lines]",
          "75: func rawEnv(r io.Reader, filename string, lookup func(key string) (string, bool)) (map[string]string, error) {",
          "78:   return nil, fmt.Errorf(\"failed to parse env_file %s: %w\", filename, err)",
          "80:  vars := types.Mapping{}",
          "85:  return vars, nil",
          "",
          "[Added Lines]",
          "75: func rawEnv(r io.Reader, filename string, vars map[string]string, lookup func(key string) (string, bool)) error {",
          "78:   return fmt.Errorf(\"failed to parse env_file %s: %w\", filename, err)",
          "84:  return nil",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  github.com/Microsoft/go-winio v0.6.2",
          "9:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
          "10:  github.com/buger/goterm v1.0.4",
          "12:  github.com/containerd/containerd/v2 v2.0.4",
          "13:  github.com/containerd/platforms v1.0.0-rc.1",
          "14:  github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc",
          "",
          "[Removed Lines]",
          "11:  github.com/compose-spec/compose-go/v2 v2.4.10-0.20250327151131-f48efd965e24",
          "",
          "[Added Lines]",
          "11:  github.com/compose-spec/compose-go/v2 v2.5.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "205:  sigs.k8s.io/structured-merge-diff/v4 v4.4.1 // indirect",
          "206:  sigs.k8s.io/yaml v1.4.0 // indirect",
          "207: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209: replace github.com/compose-spec/compose-go/v2 => github.com/glours/compose-go/v2 v2.0.0-20250403082600-80aa75f06535",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: github.com/cloudflare/cfssl v0.0.0-20180223231731-4e2dcbde5004/go.mod h1:yMWuSON2oQp+43nFtAV/uvKQIFpSPerB57DCt9t8sSA=",
          "84: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "85: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "88: github.com/containerd/cgroups/v3 v3.0.5 h1:44na7Ud+VwyE7LIoJ8JTNQOa549a8543BmzaJHo6Bzo=",
          "89: github.com/containerd/cgroups/v3 v3.0.5/go.mod h1:SA5DLYnXO8pTGYiAHXz94qvLQTKfVM5GEVisn4jpins=",
          "90: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
          "",
          "[Removed Lines]",
          "86: github.com/compose-spec/compose-go/v2 v2.4.10-0.20250327151131-f48efd965e24 h1:dIo4KMeWqnbC/hcWm0kHf+AzEcgUdUpjO+1LEoEdhiI=",
          "87: github.com/compose-spec/compose-go/v2 v2.4.10-0.20250327151131-f48efd965e24/go.mod h1:vPlkN0i+0LjLf9rv52lodNMUTJF5YHVfHVGLLIP67NA=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "169: github.com/fvbommel/sortorder v1.1.0/go.mod h1:uk88iVf1ovNn1iLfgUVU2F9o5eO30ui720w+kxuqRs0=",
          "170: github.com/fxamacker/cbor/v2 v2.7.0 h1:iM5WgngdRBanHcxugY4JySA0nk1wZorNOpTgCMedv5E=",
          "171: github.com/fxamacker/cbor/v2 v2.7.0/go.mod h1:pxXPTn3joSm21Gbwsv0w9OSA2y1HFR9qXEeXQVeNoDQ=",
          "172: github.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=",
          "173: github.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=",
          "174: github.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170: github.com/glours/compose-go/v2 v2.0.0-20250403082600-80aa75f06535 h1:S/P6v3QxsMpkKn+2OSMPNkfSkadSjSHoMGAc/eBZgMU=",
          "171: github.com/glours/compose-go/v2 v2.0.0-20250403082600-80aa75f06535/go.mod h1:vPlkN0i+0LjLf9rv52lodNMUTJF5YHVfHVGLLIP67NA=",
          "",
          "---------------"
        ],
        "pkg/compose/build.go||pkg/compose/build.go": [
          "File: pkg/compose/build.go -> pkg/compose/build.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "264: func (s *composeService) ensureImagesExists(ctx context.Context, project *types.Project, buildOpts *api.BuildOptions, quietPull bool) error {",
          "265:  for name, service := range project.Services {",
          "267:    return fmt.Errorf(\"invalid service %q. Must specify either image or build\", name)",
          "268:   }",
          "269:  }",
          "",
          "[Removed Lines]",
          "266:   if service.External == nil && service.Image == \"\" && service.Build == nil {",
          "",
          "[Added Lines]",
          "266:   if service.Provider == nil && service.Image == \"\" && service.Build == nil {",
          "",
          "---------------"
        ],
        "pkg/compose/convergence.go||pkg/compose/convergence.go": [
          "File: pkg/compose/convergence.go -> pkg/compose/convergence.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: }",
          "112: func (c *convergence) ensureService(ctx context.Context, project *types.Project, service types.ServiceConfig, recreate string, inherit bool, timeout *time.Duration) error { //nolint:gocyclo",
          "114:   return c.service.runPlugin(ctx, project, service, \"up\")",
          "115:  }",
          "116:  expected, err := getScale(service)",
          "",
          "[Removed Lines]",
          "113:  if service.External != nil {",
          "",
          "[Added Lines]",
          "113:  if service.Provider != nil {",
          "",
          "---------------"
        ],
        "pkg/compose/down.go||pkg/compose/down.go": [
          "File: pkg/compose/down.go -> pkg/compose/down.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:  err = InReverseDependencyOrder(ctx, project, func(c context.Context, service string) error {",
          "86:   serv := project.Services[service]",
          "88:    return s.runPlugin(ctx, project, serv, \"down\")",
          "89:   }",
          "90:   serviceContainers := containers.filter(isService(service))",
          "",
          "[Removed Lines]",
          "87:   if serv.External != nil {",
          "",
          "[Added Lines]",
          "87:   if serv.Provider != nil {",
          "",
          "---------------"
        ],
        "pkg/compose/plugins.go||pkg/compose/plugins.go": [
          "File: pkg/compose/plugins.go -> pkg/compose/plugins.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import (",
          "20:  \"context\"",
          "21:  \"encoding/json\"",
          "22:  \"fmt\"",
          "23:  \"io\"",
          "24:  \"os\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:  \"errors\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:  \"github.com/docker/cli/cli-plugins/socket\"",
          "31:  \"github.com/docker/compose/v2/pkg/progress\"",
          "32:  \"github.com/docker/docker/errdefs\"",
          "34:  \"github.com/spf13/cobra\"",
          "35:  \"go.opentelemetry.io/otel\"",
          "36:  \"go.opentelemetry.io/otel/propagation\"",
          "",
          "[Removed Lines]",
          "33:  \"github.com/pkg/errors\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:  SetEnvType = \"setenv\"",
          "49: )",
          "55:  plugin, err := manager.GetPlugin(x.Type, s.dockerCli, &cobra.Command{})",
          "",
          "[Removed Lines]",
          "51: func (s *composeService) runPlugin(ctx context.Context, project *types.Project, service types.ServiceConfig, command string) error {",
          "52:  x := *service.External",
          "",
          "[Added Lines]",
          "51: func (s *composeService) runPlugin(ctx context.Context, project *types.Project, service types.ServiceConfig, command string) error { //nolint:gocyclo",
          "52:  x := *service.Provider",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "97:  eg.Go(cmd.Wait)",
          "99:  decoder := json.NewDecoder(stdout)",
          "102:  variables := types.Mapping{}",
          "",
          "[Removed Lines]",
          "100:  defer stdout.Close()",
          "",
          "[Added Lines]",
          "100:  defer func() { _ = stdout.Close() }()",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106:  for {",
          "107:   var msg JsonMessage",
          "108:   err = decoder.Decode(&msg)",
          "110:    break",
          "111:   }",
          "112:   if err != nil {",
          "",
          "[Removed Lines]",
          "109:   if err == io.EOF {",
          "",
          "[Added Lines]",
          "109:   if errors.Is(err, io.EOF) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "132:  err = eg.Wait()",
          "133:  if err != nil {",
          "134:   pw.Event(progress.ErrorMessageEvent(service.Name, err.Error()))",
          "136:  }",
          "137:  pw.Event(progress.CreatedEvent(service.Name))",
          "",
          "[Removed Lines]",
          "135:   return errors.Wrapf(err, \"failed to create external service\")",
          "",
          "[Added Lines]",
          "135:   return fmt.Errorf(\"failed to create external service: %s\", err.Error())",
          "",
          "---------------"
        ],
        "pkg/compose/pull.go||pkg/compose/pull.go": [
          "File: pkg/compose/pull.go -> pkg/compose/pull.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "335: }",
          "337: func mustPull(service types.ServiceConfig, images map[string]api.ImageSummary) (bool, error) {",
          "339:   return false, nil",
          "340:  }",
          "341:  if service.Image == \"\" {",
          "",
          "[Removed Lines]",
          "338:  if service.External != nil {",
          "",
          "[Added Lines]",
          "338:  if service.Provider != nil {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "342a2a9e71ee66ff560818d57e4279461957500b",
      "candidate_info": {
        "commit_hash": "342a2a9e71ee66ff560818d57e4279461957500b",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/342a2a9e71ee66ff560818d57e4279461957500b",
        "files": [
          "go.mod",
          "go.sum",
          "pkg/compose/convergence.go",
          "pkg/compose/restart.go",
          "pkg/e2e/fixtures/restart-test/compose-depends-on.yaml",
          "pkg/e2e/restart_test.go"
        ],
        "message": "Fix support for depends_on.restart in up and restart commands\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/convergence.go||pkg/compose/convergence.go",
          "pkg/compose/restart.go||pkg/compose/restart.go",
          "pkg/e2e/restart_test.go||pkg/e2e/restart_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  github.com/Microsoft/go-winio v0.6.2",
          "9:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
          "10:  github.com/buger/goterm v1.0.4",
          "12:  github.com/containerd/containerd/v2 v2.0.4",
          "13:  github.com/containerd/platforms v1.0.0-rc.1",
          "14:  github.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc",
          "",
          "[Removed Lines]",
          "11:  github.com/compose-spec/compose-go/v2 v2.4.9",
          "",
          "[Added Lines]",
          "11:  github.com/compose-spec/compose-go/v2 v2.4.10-0.20250319114556-312596f4c1fe",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: github.com/cloudflare/cfssl v0.0.0-20180223231731-4e2dcbde5004/go.mod h1:yMWuSON2oQp+43nFtAV/uvKQIFpSPerB57DCt9t8sSA=",
          "84: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "85: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "88: github.com/containerd/cgroups/v3 v3.0.5 h1:44na7Ud+VwyE7LIoJ8JTNQOa549a8543BmzaJHo6Bzo=",
          "89: github.com/containerd/cgroups/v3 v3.0.5/go.mod h1:SA5DLYnXO8pTGYiAHXz94qvLQTKfVM5GEVisn4jpins=",
          "90: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
          "",
          "[Removed Lines]",
          "86: github.com/compose-spec/compose-go/v2 v2.4.9 h1:2K4TDw+1ba2idiR6empXHKRXvWYpnvAKoNQy93/sSOs=",
          "87: github.com/compose-spec/compose-go/v2 v2.4.9/go.mod h1:6k5l/0TxCg0/2uLEhRVEsoBWBprS2uvZi32J7xub3lo=",
          "",
          "[Added Lines]",
          "86: github.com/compose-spec/compose-go/v2 v2.4.10-0.20250319114556-312596f4c1fe h1:gl5+6pDRe/b8tbqJOXvNOZWNQe4aFLymlMV0iqFp9GI=",
          "87: github.com/compose-spec/compose-go/v2 v2.4.10-0.20250319114556-312596f4c1fe/go.mod h1:6k5l/0TxCg0/2uLEhRVEsoBWBprS2uvZi32J7xub3lo=",
          "",
          "---------------"
        ],
        "pkg/compose/convergence.go||pkg/compose/convergence.go": [
          "File: pkg/compose/convergence.go -> pkg/compose/convergence.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "226: func (c *convergence) stopDependentContainers(ctx context.Context, project *types.Project, service types.ServiceConfig) error {",
          "229:  if len(dependents) == 0 {",
          "230:   return nil",
          "231:  }",
          "",
          "[Removed Lines]",
          "228:  dependents := project.GetDependentsForService(service)",
          "",
          "[Added Lines]",
          "228:  dependents := project.GetDependentsForService(service, func(dependency types.ServiceDependency) bool {",
          "229:   return dependency.Restart",
          "230:  })",
          "",
          "---------------"
        ],
        "pkg/compose/restart.go||pkg/compose/restart.go": [
          "File: pkg/compose/restart.go -> pkg/compose/restart.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:  w := progress.ContextWriter(ctx)",
          "79:  return InDependencyOrder(ctx, project, func(c context.Context, service string) error {",
          "80:   eg, ctx := errgroup.WithContext(ctx)",
          "81:   for _, ctr := range containers.filter(isService(service)) {",
          "82:    eg.Go(func() error {",
          "83:     eventName := getContainerProgressName(ctr)",
          "84:     w.Event(progress.RestartingEvent(eventName))",
          "85:     timeout := utils.DurationSecondToInt(options.Timeout)",
          "87:     if err != nil {",
          "88:      return err",
          "89:     }",
          "",
          "[Removed Lines]",
          "86:     err := s.apiClient().ContainerRestart(ctx, ctr.ID, container.StopOptions{Timeout: timeout})",
          "",
          "[Added Lines]",
          "80:   config := project.Services[service]",
          "81:   err = s.waitDependencies(ctx, project, service, config.DependsOn, containers, 0)",
          "82:   if err != nil {",
          "83:    return err",
          "84:   }",
          "92:     err = s.apiClient().ContainerRestart(ctx, ctr.ID, container.StopOptions{Timeout: timeout})",
          "",
          "---------------"
        ],
        "pkg/e2e/restart_test.go||pkg/e2e/restart_test.go": [
          "File: pkg/e2e/restart_test.go -> pkg/e2e/restart_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: }",
          "67: func TestRestartWithDependencies(t *testing.T) {",
          "69:   \"COMPOSE_PROJECT_NAME=e2e-restart-deps\",",
          "70:  ))",
          "71:  baseService := \"nginx\"",
          "",
          "[Removed Lines]",
          "68:  c := NewParallelCLI(t, WithEnv(",
          "",
          "[Added Lines]",
          "68:  c := NewCLI(t, WithEnv(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:  res := c.RunDockerComposeCmd(t, \"restart\", baseService)",
          "82:  out := res.Combined()",
          "84:  assert.Assert(t, strings.Contains(out, fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Started\", depWithRestart)), out)",
          "85:  assert.Assert(t, !strings.Contains(out, depNoRestart), out)",
          "86: }",
          "88: func TestRestartWithProfiles(t *testing.T) {",
          "",
          "[Removed Lines]",
          "83:  assert.Assert(t, strings.Contains(out, fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Started\", baseService)), out)",
          "",
          "[Added Lines]",
          "83:  assert.Assert(t, strings.Contains(out, fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Restarting\", baseService)), out)",
          "84:  assert.Assert(t, strings.Contains(out, fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Healthy\", baseService)), out)",
          "88:  c = NewParallelCLI(t, WithEnv(",
          "89:   \"COMPOSE_PROJECT_NAME=e2e-restart-deps\",",
          "90:   \"LABEL=recreate\",",
          "91:  ))",
          "92:  res = c.RunDockerComposeCmd(t, \"-f\", \"./fixtures/restart-test/compose-depends-on.yaml\", \"up\", \"-d\")",
          "93:  out = res.Combined()",
          "94:  assert.Assert(t, strings.Contains(out, fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Stopped\", depWithRestart)), out)",
          "95:  assert.Assert(t, strings.Contains(out, fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Recreated\", baseService)), out)",
          "96:  assert.Assert(t, strings.Contains(out, fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Healthy\", baseService)), out)",
          "97:  assert.Assert(t, strings.Contains(out, fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Started\", depWithRestart)), out)",
          "98:  assert.Assert(t, strings.Contains(out, fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Running\", depNoRestart)), out)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6b4d1c755b43efc9193904778296796637304c9",
      "candidate_info": {
        "commit_hash": "d6b4d1c755b43efc9193904778296796637304c9",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/d6b4d1c755b43efc9193904778296796637304c9",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "bump compose-go to version v1.18.0\n\nSigned-off-by: Guillaume Lours <705411+glours@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.3",
          "12:  github.com/cucumber/godog v0.0.0-00010101000000-000000000000 // replaced; see replace for the actual version used",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go v1.17.0",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go v1.18.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "142: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "143: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "146: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "147: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "148: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "144: github.com/compose-spec/compose-go v1.17.0 h1:cvje90CU94dQyTnJoHJYjx9yE4Iggse1XmGcO3Qi5ts=",
          "145: github.com/compose-spec/compose-go v1.17.0/go.mod h1:zR2tP1+kZHi5vJz7PjpW6oMoDji/Js3GHjP+hfjf70Q=",
          "",
          "[Added Lines]",
          "144: github.com/compose-spec/compose-go v1.18.0 h1:IMKwjRFgI81kFhNarNxmRyRG+PuhBZKA6VpGl3pV5NA=",
          "145: github.com/compose-spec/compose-go v1.18.0/go.mod h1:zR2tP1+kZHi5vJz7PjpW6oMoDji/Js3GHjP+hfjf70Q=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d05df6e5c7f8fa0c78a9e2a9d02c262d3756495",
      "candidate_info": {
        "commit_hash": "5d05df6e5c7f8fa0c78a9e2a9d02c262d3756495",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/5d05df6e5c7f8fa0c78a9e2a9d02c262d3756495",
        "files": [
          "cmd/compose/compose.go",
          "cmd/compose/compose_test.go",
          "cmd/compose/config.go",
          "cmd/compose/pull.go",
          "cmd/compose/pullOptions_test.go",
          "cmd/compose/push.go",
          "cmd/compose/restart.go",
          "cmd/compose/run.go",
          "cmd/compose/scale.go",
          "cmd/compose/up.go",
          "go.mod",
          "go.sum",
          "pkg/compose/build.go",
          "pkg/compose/compose.go",
          "pkg/compose/publish.go",
          "pkg/compose/restart.go",
          "pkg/compose/watch.go"
        ],
        "message": "update compose-go to version using immutable Project functions\n\nSigned-off-by: Guillaume Lours <705411+glours@users.noreply.github.com>",
        "before_after_code_files": [
          "cmd/compose/compose.go||cmd/compose/compose.go",
          "cmd/compose/compose_test.go||cmd/compose/compose_test.go",
          "cmd/compose/config.go||cmd/compose/config.go",
          "cmd/compose/pull.go||cmd/compose/pull.go",
          "cmd/compose/pullOptions_test.go||cmd/compose/pullOptions_test.go",
          "cmd/compose/push.go||cmd/compose/push.go",
          "cmd/compose/restart.go||cmd/compose/restart.go",
          "cmd/compose/run.go||cmd/compose/run.go",
          "cmd/compose/scale.go||cmd/compose/scale.go",
          "cmd/compose/up.go||cmd/compose/up.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/build.go||pkg/compose/build.go",
          "pkg/compose/compose.go||pkg/compose/compose.go",
          "pkg/compose/publish.go||pkg/compose/publish.go",
          "pkg/compose/restart.go||pkg/compose/restart.go",
          "pkg/compose/watch.go||pkg/compose/watch.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/compose/config.go||cmd/compose/config.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "cmd/compose/config.go||cmd/compose/config.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "cmd/compose/compose.go||cmd/compose/compose.go": [
          "File: cmd/compose/compose.go -> cmd/compose/compose.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:   return nil, errors.New(\"project name can't be empty. Use `--project-name` to set a valid name\")",
          "227:  }",
          "230:  if err != nil {",
          "231:   return nil, err",
          "232:  }",
          "",
          "[Removed Lines]",
          "229:  err = project.EnableServices(services...)",
          "",
          "[Added Lines]",
          "229:  project, err = project.WithServicesEnabled(services...)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:   project.Services[name] = s",
          "247:  }",
          "252:  return project, err",
          "253: }",
          "",
          "[Removed Lines]",
          "249:  project.WithoutUnnecessaryResources()",
          "251:  err = project.ForServices(services)",
          "",
          "[Added Lines]",
          "249:  project = project.WithoutUnnecessaryResources()",
          "251:  project, err = project.WithSelectedServices(services)",
          "",
          "---------------"
        ],
        "cmd/compose/compose_test.go||cmd/compose/compose_test.go": [
          "File: cmd/compose/compose_test.go -> cmd/compose/compose_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:    },",
          "45:   },",
          "46:  }",
          "48:  assert.NilError(t, err)",
          "50:  assert.Equal(t, len(p.Services), 2)",
          "",
          "[Removed Lines]",
          "47:  err := p.ForServices([]string{\"bar\"})",
          "",
          "[Added Lines]",
          "47:  p, err := p.WithSelectedServices([]string{\"bar\"})",
          "",
          "---------------"
        ],
        "cmd/compose/config.go||cmd/compose/config.go": [
          "File: cmd/compose/config.go -> cmd/compose/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:  if err != nil {",
          "160:   return err",
          "161:  }",
          "164:   return nil",
          "165:  })",
          "166: }",
          "168: func runVolumes(ctx context.Context, dockerCli command.Cli, opts configOptions) error {",
          "",
          "[Removed Lines]",
          "162:  return project.WithServices(project.ServiceNames(), func(s types.ServiceConfig) error {",
          "163:   fmt.Fprintln(dockerCli.Out(), s.Name)",
          "",
          "[Added Lines]",
          "162:  err = project.ForEachService(project.ServiceNames(), func(serviceName string, _ *types.ServiceConfig) error {",
          "163:   fmt.Fprintln(dockerCli.Out(), serviceName)",
          "166:  return err",
          "",
          "---------------"
        ],
        "cmd/compose/pull.go||cmd/compose/pull.go": [
          "File: cmd/compose/pull.go -> cmd/compose/pull.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:  return cmd",
          "73: }",
          "76:  if !opts.includeDeps {",
          "78:   if err != nil {",
          "80:   }",
          "81:  }",
          "",
          "[Removed Lines]",
          "75: func (opts pullOptions) apply(project *types.Project, services []string) error {",
          "77:   err := project.ForServices(services, types.IgnoreDependencies)",
          "79:    return err",
          "",
          "[Added Lines]",
          "75: func (opts pullOptions) apply(project *types.Project, services []string) (*types.Project, error) {",
          "77:   var err error",
          "78:   project, err = project.WithSelectedServices(services, types.IgnoreDependencies)",
          "80:    return nil, err",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:    project.Services[i] = service",
          "90:   }",
          "91:  }",
          "93: }",
          "95: func runPull(ctx context.Context, dockerCli command.Cli, backend api.Service, opts pullOptions, services []string) error {",
          "",
          "[Removed Lines]",
          "92:  return nil",
          "",
          "[Added Lines]",
          "93:  return project, nil",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:   return err",
          "99:  }",
          "102:  if err != nil {",
          "103:   return err",
          "104:  }",
          "",
          "[Removed Lines]",
          "101:  err = opts.apply(project, services)",
          "",
          "[Added Lines]",
          "102:  project, err = opts.apply(project, services)",
          "",
          "---------------"
        ],
        "cmd/compose/pullOptions_test.go||cmd/compose/pullOptions_test.go": [
          "File: cmd/compose/pullOptions_test.go -> cmd/compose/pullOptions_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:    },",
          "47:   },",
          "48:  }",
          "50:   policy: types.PullPolicyMissing,",
          "51:  }.apply(project, nil)",
          "52:  assert.NilError(t, err)",
          "",
          "[Removed Lines]",
          "49:  err := pullOptions{",
          "",
          "[Added Lines]",
          "49:  project, err := pullOptions{",
          "",
          "---------------"
        ],
        "cmd/compose/push.go||cmd/compose/push.go": [
          "File: cmd/compose/push.go -> cmd/compose/push.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "60:  }",
          "62:  if !opts.IncludeDeps {",
          "64:   if err != nil {",
          "65:    return err",
          "66:   }",
          "",
          "[Removed Lines]",
          "63:   err := project.ForServices(services, types.IgnoreDependencies)",
          "",
          "[Added Lines]",
          "63:   project, err = project.WithSelectedServices(services, types.IgnoreDependencies)",
          "",
          "---------------"
        ],
        "cmd/compose/restart.go||cmd/compose/restart.go": [
          "File: cmd/compose/restart.go -> cmd/compose/restart.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  }",
          "64:  if project != nil && len(services) > 0 {",
          "66:   if err != nil {",
          "67:    return err",
          "68:   }",
          "",
          "[Removed Lines]",
          "65:   err := project.EnableServices(services...)",
          "",
          "[Added Lines]",
          "65:   project, err = project.WithServicesEnabled(services...)",
          "",
          "---------------"
        ],
        "cmd/compose/run.go||cmd/compose/run.go": [
          "File: cmd/compose/run.go -> cmd/compose/run.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:  quietPull     bool",
          "67: }",
          "70:  if options.noDeps {",
          "72:   if err != nil {",
          "74:   }",
          "75:  }",
          "77:  target, err := project.GetService(options.Service)",
          "78:  if err != nil {",
          "80:  }",
          "82:  target.Tty = !options.noTty",
          "",
          "[Removed Lines]",
          "69: func (options runOptions) apply(project *types.Project) error {",
          "71:   err := project.ForServices([]string{options.Service}, types.IgnoreDependencies)",
          "73:    return err",
          "79:   return err",
          "",
          "[Added Lines]",
          "69: func (options runOptions) apply(project *types.Project) (*types.Project, error) {",
          "71:   var err error",
          "72:   project, err = project.WithSelectedServices([]string{options.Service}, types.IgnoreDependencies)",
          "74:    return nil, err",
          "80:   return nil, err",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:   for _, p := range options.publish {",
          "92:    config, err := types.ParsePortConfig(p)",
          "93:    if err != nil {",
          "95:    }",
          "96:    target.Ports = append(target.Ports, config...)",
          "97:   }",
          "",
          "[Removed Lines]",
          "94:     return err",
          "",
          "[Added Lines]",
          "95:     return nil, err",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100:  for _, v := range options.volumes {",
          "101:   volume, err := format.ParseVolume(v)",
          "102:   if err != nil {",
          "104:   }",
          "105:   target.Volumes = append(target.Volumes, volume)",
          "106:  }",
          "",
          "[Removed Lines]",
          "103:    return err",
          "",
          "[Added Lines]",
          "104:    return nil, err",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "111:    break",
          "112:   }",
          "113:  }",
          "115: }",
          "117: func runCommand(p *ProjectOptions, dockerCli command.Cli, backend api.Service) *cobra.Command {",
          "",
          "[Removed Lines]",
          "114:  return nil",
          "",
          "[Added Lines]",
          "115:  return project, nil",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "210: }",
          "212: func runRun(ctx context.Context, backend api.Service, project *types.Project, options runOptions, createOpts createOptions, buildOpts buildOptions, dockerCli command.Cli) error {",
          "214:  if err != nil {",
          "215:   return err",
          "216:  }",
          "",
          "[Removed Lines]",
          "213:  err := options.apply(project)",
          "",
          "[Added Lines]",
          "214:  project, err := options.apply(project)",
          "",
          "---------------"
        ],
        "cmd/compose/scale.go||cmd/compose/scale.go": [
          "File: cmd/compose/scale.go -> cmd/compose/scale.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  }",
          "69:  if opts.noDeps {",
          "71:    return err",
          "72:   }",
          "73:  }",
          "",
          "[Removed Lines]",
          "70:   if err := project.ForServices(services, types.IgnoreDependencies); err != nil {",
          "",
          "[Added Lines]",
          "70:   if project, err = project.WithSelectedServices(services, types.IgnoreDependencies); err != nil {",
          "",
          "---------------"
        ],
        "cmd/compose/up.go||cmd/compose/up.go": [
          "File: cmd/compose/up.go -> cmd/compose/up.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:  waitTimeout        int",
          "57: }",
          "60:  if opts.noDeps {",
          "62:   if err != nil {",
          "64:   }",
          "65:  }",
          "67:  if opts.exitCodeFrom != \"\" {",
          "68:   _, err := project.GetService(opts.exitCodeFrom)",
          "69:   if err != nil {",
          "71:   }",
          "72:  }",
          "75: }",
          "77: func upCommand(p *ProjectOptions, dockerCli command.Cli, backend api.Service) *cobra.Command {",
          "",
          "[Removed Lines]",
          "59: func (opts upOptions) apply(project *types.Project, services []string) error {",
          "61:   err := project.ForServices(services, types.IgnoreDependencies)",
          "63:    return err",
          "70:    return err",
          "74:  return nil",
          "",
          "[Added Lines]",
          "59: func (opts upOptions) apply(project *types.Project, services []string) (*types.Project, error) {",
          "61:   var err error",
          "62:   project, err = project.WithSelectedServices(services, types.IgnoreDependencies)",
          "64:    return nil, err",
          "71:    return nil, err",
          "75:  return project, nil",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:   return err",
          "172:  }",
          "175:  if err != nil {",
          "176:   return err",
          "177:  }",
          "",
          "[Removed Lines]",
          "174:  err = upOptions.apply(project, services)",
          "",
          "[Added Lines]",
          "175:  project, err = upOptions.apply(project, services)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "229:    if upOptions.attachDependencies {",
          "230:     dependencyOpt = types.IncludeDependencies",
          "231:    }",
          "233:     if s.Attach == nil || *s.Attach {",
          "235:     }",
          "236:     return nil",
          "237:    }, dependencyOpt); err != nil {",
          "",
          "[Removed Lines]",
          "232:    if err := project.WithServices(services, func(s types.ServiceConfig) error {",
          "234:      attachSet.Add(s.Name)",
          "",
          "[Added Lines]",
          "233:    if err := project.ForEachService(services, func(serviceName string, s *types.ServiceConfig) error {",
          "235:      attachSet.Add(serviceName)",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.11",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-beta.2",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-beta.3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:  github.com/matttproud/golang_protobuf_extensions v1.0.4 // indirect",
          "115:  github.com/mgutz/ansi v0.0.0-20170206155736-9520e82c474b // indirect",
          "116:  github.com/miekg/pkcs11 v1.1.1 // indirect",
          "117:  github.com/moby/locker v1.0.1 // indirect",
          "118:  github.com/moby/spdystream v0.2.0 // indirect",
          "119:  github.com/moby/sys/mountinfo v0.6.2 // indirect",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:  github.com/mitchellh/copystructure v1.2.0 // indirect",
          "118:  github.com/mitchellh/reflectwalk v1.0.2 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "88: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "91: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "92: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "93: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-beta.2 h1:UrKM2RA9qel+EGsHvdK/0y6XA047iDuK75dJYHWXZnc=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-beta.2/go.mod h1:PWCgeD8cxiI/DmdpBM407CuLDrZ2W4xuS6/Z9jAi0YQ=",
          "",
          "[Added Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-beta.3 h1:9MsMdwLaHE0uplnF2baXtM3yExD8Yaw3HUGlwm8Z+fQ=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-beta.3/go.mod h1:IVsvFyGVhw4FASzUtlWNVaAOhYmakXAFY9IlZ7LAuD8=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "327: github.com/miekg/pkcs11 v1.0.2/go.mod h1:XsNlhZGX73bx86s2hdc/FuaLm2CPZJemRLMA+WTFxgs=",
          "328: github.com/miekg/pkcs11 v1.1.1 h1:Ugu9pdy6vAYku5DEpVWVFPYnzV+bxB+iRdbuFSu7TvU=",
          "329: github.com/miekg/pkcs11 v1.1.1/go.mod h1:XsNlhZGX73bx86s2hdc/FuaLm2CPZJemRLMA+WTFxgs=",
          "330: github.com/mitchellh/mapstructure v0.0.0-20150613213606-2caf8efc9366/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=",
          "331: github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=",
          "332: github.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=",
          "333: github.com/moby/buildkit v0.13.0-beta1.0.20231219135447-957cb50df991 h1:r80LLQ91uOLxU1ElAvrB1o8oBsph51lPzVnr7t2b200=",
          "334: github.com/moby/buildkit v0.13.0-beta1.0.20231219135447-957cb50df991/go.mod h1:6MddWPSL5jxy+W8eMMHWDOfZzzRRKWXPZqajw72YHBc=",
          "335: github.com/moby/locker v1.0.1 h1:fOXqR41zeveg4fFODix+1Ch4mj/gT0NE1XJbp/epuBg=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330: github.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=",
          "331: github.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=",
          "335: github.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=",
          "336: github.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=",
          "",
          "---------------"
        ],
        "pkg/compose/build.go||pkg/compose/build.go": [
          "File: pkg/compose/build.go -> pkg/compose/build.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:  if options.Deps {",
          "85:   policy = types.IncludeDependencies",
          "86:  }",
          "88:   if service.Build == nil {",
          "89:    return nil",
          "90:   }",
          "92:   _, localImagePresent := localImages[image]",
          "93:   if localImagePresent && service.PullPolicy != types.PullPolicyBuild {",
          "94:    return nil",
          "95:   }",
          "98:   return nil",
          "99:  }, policy)",
          "100:  if err != nil || len(serviceToBeBuild) == 0 {",
          "",
          "[Removed Lines]",
          "87:  err = project.WithServices(options.Services, func(service types.ServiceConfig) error {",
          "91:   image := api.GetImageNameOrDefault(service, project.Name)",
          "96:   name := service.Name",
          "97:   serviceToBeBuild[name] = serviceToBuild{name: name, service: service}",
          "",
          "[Added Lines]",
          "87:  err = project.ForEachService(options.Services, func(serviceName string, service *types.ServiceConfig) error {",
          "91:   image := api.GetImageNameOrDefault(*service, project.Name)",
          "96:   serviceToBeBuild[serviceName] = serviceToBuild{name: serviceName, service: *service}",
          "",
          "---------------"
        ],
        "pkg/compose/compose.go||pkg/compose/compose.go": [
          "File: pkg/compose/compose.go -> pkg/compose/compose.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "149: func (s *composeService) Config(ctx context.Context, project *types.Project, options api.ConfigOptions) ([]byte, error) {",
          "150:  if options.ResolveImageDigests {",
          "152:    auth, err := encodedAuth(named, s.configFile())",
          "153:    if err != nil {",
          "154:     return \"\", err",
          "",
          "[Removed Lines]",
          "151:   err := project.ResolveImages(func(named reference.Named) (digest.Digest, error) {",
          "",
          "[Added Lines]",
          "151:   var err error",
          "152:   project, err = project.WithImagesResolved(func(named reference.Named) (digest.Digest, error) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233:   }",
          "234:   return project, fmt.Errorf(\"no such service: %q: %w\", qs, api.ErrNotFound)",
          "235:  }",
          "237:  if err != nil {",
          "238:   return project, err",
          "239:  }",
          "",
          "[Removed Lines]",
          "236:  err := project.ForServices(services)",
          "",
          "[Added Lines]",
          "237:  project, err := project.WithSelectedServices(services)",
          "",
          "---------------"
        ],
        "pkg/compose/publish.go||pkg/compose/publish.go": [
          "File: pkg/compose/publish.go -> pkg/compose/publish.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: }",
          "109: func (s *composeService) generateImageDigestsOverride(ctx context.Context, project *types.Project) ([]byte, error) {",
          "112:   auth, err := encodedAuth(named, s.configFile())",
          "113:   if err != nil {",
          "114:    return \"\", err",
          "",
          "[Removed Lines]",
          "110:  project.ApplyProfiles([]string{\"*\"})",
          "111:  err := project.ResolveImages(func(named reference.Named) (digest.Digest, error) {",
          "",
          "[Added Lines]",
          "110:  project, err := project.WithProfiles([]string{\"*\"})",
          "111:  if err != nil {",
          "112:   return nil, err",
          "113:  }",
          "114:  project, err = project.WithImagesResolved(func(named reference.Named) (digest.Digest, error) {",
          "",
          "---------------"
        ],
        "pkg/compose/restart.go||pkg/compose/restart.go": [
          "File: pkg/compose/restart.go -> pkg/compose/restart.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  }",
          "51:  if options.NoDeps {",
          "53:   if err != nil {",
          "54:    return err",
          "55:   }",
          "",
          "[Removed Lines]",
          "52:   err := project.ForServices(options.Services, types.IgnoreDependencies)",
          "",
          "[Added Lines]",
          "52:   project, err = project.WithSelectedServices(options.Services, types.IgnoreDependencies)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:  }",
          "68:  if len(options.Services) != 0 {",
          "70:   if err != nil {",
          "71:    return err",
          "72:   }",
          "",
          "[Removed Lines]",
          "69:   err = project.ForServices(options.Services, types.IncludeDependents)",
          "",
          "[Added Lines]",
          "69:   project, err = project.WithSelectedServices(options.Services, types.IncludeDependents)",
          "",
          "---------------"
        ],
        "pkg/compose/watch.go||pkg/compose/watch.go": [
          "File: pkg/compose/watch.go -> pkg/compose/watch.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: }",
          "66: func (s *composeService) Watch(ctx context.Context, project *types.Project, services []string, options api.WatchOptions) error { //nolint: gocyclo",
          "68:   return err",
          "69:  }",
          "70:  syncer := s.getSyncImplementation(project)",
          "",
          "[Removed Lines]",
          "67:  if err := project.ForServices(services); err != nil {",
          "",
          "[Added Lines]",
          "67:  var err error",
          "68:  if project, err = project.WithSelectedServices(services); err != nil {",
          "",
          "---------------"
        ]
      }
    }
  ]
}