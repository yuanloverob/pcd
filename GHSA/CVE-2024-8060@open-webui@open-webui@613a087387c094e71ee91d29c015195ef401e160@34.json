{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b964b175d4bac5ada3ba37a239bc64ac499cd10b",
      "candidate_info": {
        "commit_hash": "b964b175d4bac5ada3ba37a239bc64ac499cd10b",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/b964b175d4bac5ada3ba37a239bc64ac499cd10b",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1474:                                 extra_params=extra_params,",
          "1475:                             )",
          "1541:                                     )",
          "1550:                                             )",
          "1560:                                             )",
          "1561:                                         )",
          "1573:                                             )",
          "1582:                                                 \"content\": serialize_content_blocks(",
          "1583:                                                     content_blocks",
          "1584:                                                 ),",
          "1600:                         except Exception as e:",
          "1601:                             done = \"data: [DONE]\" in line",
          "1602:                             if done:",
          "",
          "[Removed Lines]",
          "1477:                             if \"selected_model_id\" in data:",
          "1478:                                 model_id = data[\"selected_model_id\"]",
          "1479:                                 Chats.upsert_message_to_chat_by_id_and_message_id(",
          "1480:                                     metadata[\"chat_id\"],",
          "1481:                                     metadata[\"message_id\"],",
          "1482:                                     {",
          "1483:                                         \"selectedModelId\": model_id,",
          "1484:                                     },",
          "1485:                                 )",
          "1486:                             else:",
          "1487:                                 choices = data.get(\"choices\", [])",
          "1488:                                 if not choices:",
          "1489:                                     continue",
          "1491:                                 delta = choices[0].get(\"delta\", {})",
          "1492:                                 delta_tool_calls = delta.get(\"tool_calls\", None)",
          "1494:                                 if delta_tool_calls:",
          "1495:                                     for delta_tool_call in delta_tool_calls:",
          "1496:                                         tool_call_index = delta_tool_call.get(\"index\")",
          "1498:                                         if tool_call_index is not None:",
          "1499:                                             if (",
          "1500:                                                 len(response_tool_calls)",
          "1501:                                                 <= tool_call_index",
          "1502:                                             ):",
          "1503:                                                 response_tool_calls.append(",
          "1504:                                                     delta_tool_call",
          "1505:                                                 )",
          "1506:                                             else:",
          "1507:                                                 delta_name = delta_tool_call.get(",
          "1508:                                                     \"function\", {}",
          "1509:                                                 ).get(\"name\")",
          "1510:                                                 delta_arguments = delta_tool_call.get(",
          "1511:                                                     \"function\", {}",
          "1512:                                                 ).get(\"arguments\")",
          "1514:                                                 if delta_name:",
          "1515:                                                     response_tool_calls[",
          "1516:                                                         tool_call_index",
          "1517:                                                     ][\"function\"][\"name\"] += delta_name",
          "1519:                                                 if delta_arguments:",
          "1520:                                                     response_tool_calls[",
          "1521:                                                         tool_call_index",
          "1522:                                                     ][\"function\"][",
          "1523:                                                         \"arguments\"",
          "1524:                                                     ] += delta_arguments",
          "1526:                                 value = delta.get(\"content\")",
          "1528:                                 if value:",
          "1529:                                     content = f\"{content}{value}\"",
          "1531:                                     if not content_blocks:",
          "1532:                                         content_blocks.append(",
          "1533:                                             {",
          "1534:                                                 \"type\": \"text\",",
          "1535:                                                 \"content\": \"\",",
          "1536:                                             }",
          "1537:                                         )",
          "1539:                                     content_blocks[-1][\"content\"] = (",
          "1540:                                         content_blocks[-1][\"content\"] + value",
          "1543:                                     if DETECT_REASONING:",
          "1544:                                         content, content_blocks, _ = (",
          "1545:                                             tag_content_handler(",
          "1546:                                                 \"reasoning\",",
          "1547:                                                 reasoning_tags,",
          "1548:                                                 content,",
          "1549:                                                 content_blocks,",
          "1551:                                         )",
          "1553:                                     if DETECT_CODE_INTERPRETER:",
          "1554:                                         content, content_blocks, end = (",
          "1555:                                             tag_content_handler(",
          "1556:                                                 \"code_interpreter\",",
          "1557:                                                 code_interpreter_tags,",
          "1558:                                                 content,",
          "1559:                                                 content_blocks,",
          "1563:                                         if end:",
          "1564:                                             break",
          "1566:                                     if DETECT_SOLUTION:",
          "1567:                                         content, content_blocks, _ = (",
          "1568:                                             tag_content_handler(",
          "1569:                                                 \"solution\",",
          "1570:                                                 solution_tags,",
          "1571:                                                 content,",
          "1572:                                                 content_blocks,",
          "1574:                                         )",
          "1576:                                     if ENABLE_REALTIME_CHAT_SAVE:",
          "1577:                                         # Save message in the database",
          "1578:                                         Chats.upsert_message_to_chat_by_id_and_message_id(",
          "1579:                                             metadata[\"chat_id\"],",
          "1580:                                             metadata[\"message_id\"],",
          "1581:                                             {",
          "1585:                                             },",
          "1586:                                         )",
          "1587:                                     else:",
          "1588:                                         data = {",
          "1589:                                             \"content\": serialize_content_blocks(",
          "1590:                                                 content_blocks",
          "1591:                                             ),",
          "1592:                                         }",
          "1594:                             await event_emitter(",
          "1595:                                 {",
          "1596:                                     \"type\": \"chat:completion\",",
          "1597:                                     \"data\": data,",
          "1598:                                 }",
          "1599:                             )",
          "",
          "[Added Lines]",
          "1477:                             if data:",
          "1478:                                 if \"selected_model_id\" in data:",
          "1479:                                     model_id = data[\"selected_model_id\"]",
          "1480:                                     Chats.upsert_message_to_chat_by_id_and_message_id(",
          "1481:                                         metadata[\"chat_id\"],",
          "1482:                                         metadata[\"message_id\"],",
          "1483:                                         {",
          "1484:                                             \"selectedModelId\": model_id,",
          "1485:                                         },",
          "1487:                                 else:",
          "1488:                                     choices = data.get(\"choices\", [])",
          "1489:                                     if not choices:",
          "1490:                                         continue",
          "1492:                                     delta = choices[0].get(\"delta\", {})",
          "1493:                                     delta_tool_calls = delta.get(\"tool_calls\", None)",
          "1495:                                     if delta_tool_calls:",
          "1496:                                         for delta_tool_call in delta_tool_calls:",
          "1497:                                             tool_call_index = delta_tool_call.get(",
          "1498:                                                 \"index\"",
          "1501:                                             if tool_call_index is not None:",
          "1502:                                                 if (",
          "1503:                                                     len(response_tool_calls)",
          "1504:                                                     <= tool_call_index",
          "1505:                                                 ):",
          "1506:                                                     response_tool_calls.append(",
          "1507:                                                         delta_tool_call",
          "1508:                                                     )",
          "1509:                                                 else:",
          "1510:                                                     delta_name = delta_tool_call.get(",
          "1511:                                                         \"function\", {}",
          "1512:                                                     ).get(\"name\")",
          "1513:                                                     delta_arguments = (",
          "1514:                                                         delta_tool_call.get(",
          "1515:                                                             \"function\", {}",
          "1516:                                                         ).get(\"arguments\")",
          "1517:                                                     )",
          "1519:                                                     if delta_name:",
          "1520:                                                         response_tool_calls[",
          "1521:                                                             tool_call_index",
          "1522:                                                         ][\"function\"][",
          "1523:                                                             \"name\"",
          "1524:                                                         ] += delta_name",
          "1526:                                                     if delta_arguments:",
          "1527:                                                         response_tool_calls[",
          "1528:                                                             tool_call_index",
          "1529:                                                         ][\"function\"][",
          "1530:                                                             \"arguments\"",
          "1531:                                                         ] += delta_arguments",
          "1533:                                     value = delta.get(\"content\")",
          "1535:                                     if value:",
          "1536:                                         content = f\"{content}{value}\"",
          "1538:                                         if not content_blocks:",
          "1539:                                             content_blocks.append(",
          "1540:                                                 {",
          "1541:                                                     \"type\": \"text\",",
          "1542:                                                     \"content\": \"\",",
          "1543:                                                 }",
          "1546:                                         content_blocks[-1][\"content\"] = (",
          "1547:                                             content_blocks[-1][\"content\"] + value",
          "1550:                                         if DETECT_REASONING:",
          "1551:                                             content, content_blocks, _ = (",
          "1552:                                                 tag_content_handler(",
          "1553:                                                     \"reasoning\",",
          "1554:                                                     reasoning_tags,",
          "1555:                                                     content,",
          "1556:                                                     content_blocks,",
          "1557:                                                 )",
          "1558:                                             )",
          "1560:                                         if DETECT_CODE_INTERPRETER:",
          "1561:                                             content, content_blocks, end = (",
          "1562:                                                 tag_content_handler(",
          "1563:                                                     \"code_interpreter\",",
          "1564:                                                     code_interpreter_tags,",
          "1565:                                                     content,",
          "1566:                                                     content_blocks,",
          "1567:                                                 )",
          "1570:                                             if end:",
          "1571:                                                 break",
          "1573:                                         if DETECT_SOLUTION:",
          "1574:                                             content, content_blocks, _ = (",
          "1575:                                                 tag_content_handler(",
          "1576:                                                     \"solution\",",
          "1577:                                                     solution_tags,",
          "1578:                                                     content,",
          "1579:                                                     content_blocks,",
          "1580:                                                 )",
          "1581:                                             )",
          "1583:                                         if ENABLE_REALTIME_CHAT_SAVE:",
          "1584:                                             # Save message in the database",
          "1585:                                             Chats.upsert_message_to_chat_by_id_and_message_id(",
          "1586:                                                 metadata[\"chat_id\"],",
          "1587:                                                 metadata[\"message_id\"],",
          "1588:                                                 {",
          "1589:                                                     \"content\": serialize_content_blocks(",
          "1590:                                                         content_blocks",
          "1591:                                                     ),",
          "1592:                                                 },",
          "1593:                                             )",
          "1594:                                         else:",
          "1595:                                             data = {",
          "1599:                                             }",
          "1601:                                 await event_emitter(",
          "1602:                                     {",
          "1603:                                         \"type\": \"chat:completion\",",
          "1604:                                         \"data\": data,",
          "1605:                                     }",
          "1606:                                 )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2000:                     form_data=event,",
          "2001:                     extra_params=extra_params,",
          "2002:                 )",
          "2005:             async for data in original_generator:",
          "2006:                 data, _ = await process_filter_functions(",
          "",
          "[Removed Lines]",
          "2003:                 yield wrap_item(json.dumps(event))",
          "",
          "[Added Lines]",
          "2011:                 if event:",
          "2012:                     yield wrap_item(json.dumps(event))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2010:                     form_data=data,",
          "2011:                     extra_params=extra_params,",
          "2012:                 )",
          "2015:         return StreamingResponse(",
          "2016:             stream_wrapper(response.body_iterator, events),",
          "",
          "[Removed Lines]",
          "2013:                 yield data",
          "",
          "[Added Lines]",
          "2023:                 if data:",
          "2024:                     yield data",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9bd49bf56d46adcfcba90df84f04edf9db519a0",
      "candidate_info": {
        "commit_hash": "f9bd49bf56d46adcfcba90df84f04edf9db519a0",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/f9bd49bf56d46adcfcba90df84f04edf9db519a0",
        "files": [
          "backend/open_webui/env.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/env.py||backend/open_webui/env.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/env.py||backend/open_webui/env.py": [
          "File: backend/open_webui/env.py -> backend/open_webui/env.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:     \"AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA\", \"10\"",
          "428: )",
          "430: ####################################",
          "431: # OFFLINE_MODE",
          "432: ####################################",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430: if AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA == \"\":",
          "431:     AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA = None",
          "432: else:",
          "433:     try:",
          "434:         AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA = int(",
          "435:             AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA",
          "436:         )",
          "437:     except Exception:",
          "438:         AIOHTTP_CLIENT_TIMEOUT_TOOL_SERVER_DATA = 10",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82189066e8bff8a37ff09f264f683022ad58ecda",
      "candidate_info": {
        "commit_hash": "82189066e8bff8a37ff09f264f683022ad58ecda",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/82189066e8bff8a37ff09f264f683022ad58ecda",
        "files": [
          "backend/open_webui/config.py",
          "backend/open_webui/main.py",
          "backend/open_webui/utils/auth.py",
          "src/lib/components/admin/Settings/General.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/config.py||backend/open_webui/config.py",
          "backend/open_webui/main.py||backend/open_webui/main.py",
          "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py",
          "src/lib/components/admin/Settings/General.svelte||src/lib/components/admin/Settings/General.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/config.py||backend/open_webui/config.py": [
          "File: backend/open_webui/config.py -> backend/open_webui/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "609:         shutil.copyfile(frontend_favicon, STATIC_DIR / \"favicon.png\")",
          "610:     except Exception as e:",
          "611:         logging.error(f\"An error occurred: {e}\")",
          "615: frontend_splash = FRONTEND_BUILD_DIR / \"static\" / \"splash.png\"",
          "",
          "[Removed Lines]",
          "612: else:",
          "613:     logging.warning(f\"Frontend favicon not found at {frontend_favicon}\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619:         shutil.copyfile(frontend_splash, STATIC_DIR / \"splash.png\")",
          "620:     except Exception as e:",
          "621:         logging.error(f\"An error occurred: {e}\")",
          "626: ####################################",
          "628: ####################################",
          "630: CUSTOM_NAME = os.environ.get(\"CUSTOM_NAME\", \"\")",
          "",
          "[Removed Lines]",
          "622: else:",
          "623:     logging.warning(f\"Frontend splash not found at {frontend_splash}\")",
          "627: # CUSTOM_NAME",
          "",
          "[Added Lines]",
          "621: frontend_loader = FRONTEND_BUILD_DIR / \"static\" / \"loader.js\"",
          "623: if frontend_loader.exists():",
          "624:     try:",
          "625:         shutil.copyfile(frontend_loader, STATIC_DIR / \"loader.js\")",
          "626:     except Exception as e:",
          "627:         logging.error(f\"An error occurred: {e}\")",
          "631: # CUSTOM_NAME (Legacy)",
          "",
          "---------------"
        ],
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: from open_webui.models.users import UserModel, Users",
          "90: from open_webui.config import (",
          "92:     LICENSE_KEY,",
          "93:     # Ollama",
          "94:     ENABLE_OLLAMA_API,",
          "",
          "[Removed Lines]",
          "91:     override_static,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "316: from open_webui.utils.access_control import has_access",
          "318: from open_webui.utils.auth import (",
          "320:     decode_token,",
          "321:     get_admin_user,",
          "322:     get_verified_user,",
          "",
          "[Removed Lines]",
          "319:     verify_signature,",
          "",
          "[Added Lines]",
          "318:     get_license_data,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "373:     if RESET_CONFIG_ON_START:",
          "374:         reset_config()",
          "402:     asyncio.create_task(periodic_usage_pool_cleanup())",
          "403:     yield",
          "",
          "[Removed Lines]",
          "376:     key = app.state.config.LICENSE_KEY",
          "377:     if key:",
          "378:         try:",
          "379:             res = requests.post(",
          "380:                 \"https://api.openwebui.com/api/v1/license\",",
          "381:                 json={\"key\": key, \"version\": \"1\"},",
          "382:                 timeout=5,",
          "383:             )",
          "385:             if getattr(res, \"ok\", False):",
          "386:                 payload = getattr(res, \"json\", lambda: {})()",
          "387:                 for k, v in payload.items():",
          "388:                     if k == \"resources\":",
          "389:                         for p, c in v.items():",
          "390:                             globals().get(\"override_static\", lambda a, b: None)(p, c)",
          "391:                     elif k == \"user_count\":",
          "392:                         setattr(app.state, \"USER_COUNT\", v)",
          "393:                     elif k == \"webui_name\":",
          "394:                         setattr(app.state, \"WEBUI_NAME\", v)",
          "395:             else:",
          "396:                 log.error(",
          "397:                     f\"License retrieval issue: {getattr(res, 'text', 'unknown error')}\"",
          "398:                 )",
          "399:         except Exception as ex:",
          "400:             log.error(f\"Uncaught Exception: {ex}\")",
          "",
          "[Added Lines]",
          "375:     if app.state.config.LICENSE_KEY:",
          "376:         get_license_data(app, app.state.config.LICENSE_KEY)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "415: app.state.config = AppConfig()",
          "419: app.state.WEBUI_NAME = WEBUI_NAME",
          "421: ########################################",
          "422: #",
          "",
          "[Removed Lines]",
          "417: app.state.config.LICENSE_KEY = LICENSE_KEY",
          "",
          "[Added Lines]",
          "394: app.state.config.LICENSE_KEY = LICENSE_KEY",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py": [
          "File: backend/open_webui/utils/auth.py -> backend/open_webui/utils/auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import base64",
          "5: import hmac",
          "6: import hashlib",
          "8: from datetime import UTC, datetime, timedelta",
          "9: from typing import Optional, Union, List, Dict",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import requests",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: from open_webui.models.users import Users",
          "13: from open_webui.constants import ERROR_MESSAGES",
          "14: from open_webui.env import WEBUI_SECRET_KEY, TRUSTED_SIGNATURE_KEY",
          "16: from fastapi import Depends, HTTPException, Request, Response, status",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: from open_webui.config import override_static",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:         return False",
          "47: bearer_security = HTTPBearer(auto_error=False)",
          "48: pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50: def get_license_data(app, key):",
          "51:     if key:",
          "52:         try:",
          "53:             res = requests.post(",
          "54:                 \"https://api.openwebui.com/api/v1/license\",",
          "55:                 json={\"key\": key, \"version\": \"1\"},",
          "56:                 timeout=5,",
          "57:             )",
          "59:             if getattr(res, \"ok\", False):",
          "60:                 payload = getattr(res, \"json\", lambda: {})()",
          "61:                 for k, v in payload.items():",
          "62:                     if k == \"resources\":",
          "63:                         for p, c in v.items():",
          "64:                             globals().get(\"override_static\", lambda a, b: None)(p, c)",
          "65:                     elif k == \"user_count\":",
          "66:                         setattr(app.state, \"USER_COUNT\", v)",
          "67:                     elif k == \"webui_name\":",
          "68:                         setattr(app.state, \"WEBUI_NAME\", v)",
          "70:                 return True",
          "71:             else:",
          "72:                 print(",
          "73:                     f\"License: retrieval issue: {getattr(res, 'text', 'unknown error')}\"",
          "74:                 )",
          "75:         except Exception as ex:",
          "76:             print(f\"License: Uncaught Exception: {ex}\")",
          "77:     return False",
          "",
          "---------------"
        ],
        "src/lib/components/admin/Settings/General.svelte||src/lib/components/admin/Settings/General.svelte": [
          "File: src/lib/components/admin/Settings/General.svelte -> src/lib/components/admin/Settings/General.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:      <div class=\"mb-2.5\">",
          "172:       <div class=\"flex w-full justify-between items-center\">",
          "174:         <div class=\"\">",
          "175:          {$i18n.t('Help')}",
          "176:         </div>",
          "",
          "[Removed Lines]",
          "173:        <div class=\"text-xs\">",
          "",
          "[Added Lines]",
          "173:        <div class=\"text-xs pr-2\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:        </div>",
          "182:        <a",
          "184:         href=\"https://docs.openwebui.com/\"",
          "185:         target=\"_blank\"",
          "186:        >",
          "",
          "[Removed Lines]",
          "183:         class=\" text-xs font-medium underline\"",
          "",
          "[Added Lines]",
          "183:         class=\"flex-shrink-0 text-xs font-medium underline\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fefbb9e20d5289698f62415a91e88bb7c143b28",
      "candidate_info": {
        "commit_hash": "3fefbb9e20d5289698f62415a91e88bb7c143b28",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/3fefbb9e20d5289698f62415a91e88bb7c143b28",
        "files": [
          "src/lib/components/app/AppSidebar.svelte",
          "src/routes/+layout.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/app/AppControls.svelte||src/lib/components/app/AppSidebar.svelte",
          "src/routes/+layout.svelte||src/routes/+layout.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/app/AppControls.svelte||src/lib/components/app/AppSidebar.svelte": [
          "File: src/lib/components/app/AppControls.svelte -> src/lib/components/app/AppSidebar.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  <div class=\"flex justify-center relative\">",
          "10:   {#if selected === 'home'}",
          "11:    <div class=\"absolute top-0 left-0 flex h-full\">",
          "13:    </div>",
          "14:   {/if}",
          "",
          "[Removed Lines]",
          "12:     <div class=\"my-auto rounded-r-lg w-1 h-8 bg-white\"></div>",
          "",
          "[Added Lines]",
          "12:     <div class=\"my-auto rounded-r-lg w-1 h-8 bg-black dark:bg-white\"></div>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:   </Tooltip>",
          "31:  </div>",
          "35:  <div class=\"flex justify-center relative group\">",
          "36:   {#if selected === ''}",
          "37:    <div class=\"absolute top-0 left-0 flex h-full\">",
          "39:    </div>",
          "40:   {/if}",
          "41:   <button",
          "",
          "[Removed Lines]",
          "33:  <div class=\"border-t border-gray-50 dark:border-gray-900 mx-3\"></div>",
          "38:     <div class=\"my-auto rounded-r-lg w-1 h-8 bg-white\"></div>",
          "",
          "[Added Lines]",
          "33:  <div class=\" border-[1.5px] border-gray-100 dark:border-gray-900 mx-4\"></div>",
          "38:     <div class=\"my-auto rounded-r-lg w-1 h-8 bg-black dark:bg-white\"></div>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:   </button>",
          "54:  </div>",
          "57:   <button class=\" cursor-pointer p-2\" on:click={() => {}}>",
          "58:    <Plus className=\"size-4\" strokeWidth=\"2\" />",
          "59:   </button>",
          "61: </div>",
          "",
          "[Removed Lines]",
          "56:  <div class=\"flex justify-center relative group text-gray-400\">",
          "60:  </div>",
          "",
          "[Added Lines]",
          "56:  <!-- <div class=\"flex justify-center relative group text-gray-400\">",
          "60:  </div> -->",
          "",
          "---------------"
        ],
        "src/routes/+layout.svelte||src/routes/+layout.svelte": [
          "File: src/routes/+layout.svelte -> src/routes/+layout.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:  import { bestMatchingLanguage } from '$lib/utils';",
          "44:  import { getAllTags, getChatList } from '$lib/apis/chats';",
          "45:  import NotificationToast from '$lib/components/NotificationToast.svelte';",
          "48:  setContext('i18n', i18n);",
          "",
          "[Removed Lines]",
          "46:  import AppControls from '$lib/components/app/AppControls.svelte';",
          "",
          "[Added Lines]",
          "46:  import AppSidebar from '$lib/components/app/AppSidebar.svelte';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "209:    if (res) {",
          "210:     isApp.set(true);",
          "211:     appInfo.set(res);",
          "212:    }",
          "213:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:     console.log(res);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "361: {#if loaded}",
          "362:  {#if $isApp}",
          "363:   <div class=\"flex flex-row h-screen\">",
          "366:    <div class=\"w-full flex-1 max-w-[calc(100%-4.5rem)]\">",
          "367:     <slot />",
          "",
          "[Removed Lines]",
          "364:    <AppControls />",
          "",
          "[Added Lines]",
          "365:    <AppSidebar />",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab92737a9ab21c562d5e6718e59eb76cbfe7f219",
      "candidate_info": {
        "commit_hash": "ab92737a9ab21c562d5e6718e59eb76cbfe7f219",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/ab92737a9ab21c562d5e6718e59eb76cbfe7f219",
        "files": [
          "src/lib/utils/index.ts"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/utils/index.ts||src/lib/utils/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/utils/index.ts||src/lib/utils/index.ts": [
          "File: src/lib/utils/index.ts -> src/lib/utils/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "752: };",
          "754: export const getMessageContentParts = (content: string, split_on: string = 'punctuation') => {",
          "756:  const messageContentParts: string[] = [];",
          "758:  switch (split_on) {",
          "",
          "[Removed Lines]",
          "755:  content = removeDetails(content, ['reasoning', 'code_interpreter']);",
          "",
          "[Added Lines]",
          "755:  content = removeDetails(content, ['reasoning', 'code_interpreter', 'tool_calls']);",
          "",
          "---------------"
        ]
      }
    }
  ]
}