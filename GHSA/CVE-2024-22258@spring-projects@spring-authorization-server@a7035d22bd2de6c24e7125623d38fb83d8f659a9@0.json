{
  "cve_id": "CVE-2024-22258",
  "cve_desc": "Spring Authorization Server versions 1.0.0 - 1.0.5, 1.1.0 - 1.1.5, 1.2.0 - 1.2.2 and older unsupported versions are susceptible to a PKCE Downgrade Attack for Confidential Clients.\n\nSpecifically, an application is vulnerable when a Confidential Client\u00a0uses PKCE for the Authorization Code Grant.\n\nAn application is not vulnerable when a Public Client\u00a0uses PKCE for the Authorization Code Grant.\n\n",
  "repo": "spring-projects/spring-authorization-server",
  "patch_hash": "a7035d22bd2de6c24e7125623d38fb83d8f659a9",
  "patch_info": {
    "commit_hash": "a7035d22bd2de6c24e7125623d38fb83d8f659a9",
    "repo": "spring-projects/spring-authorization-server",
    "commit_url": "https://github.com/spring-projects/spring-authorization-server/commit/a7035d22bd2de6c24e7125623d38fb83d8f659a9",
    "files": [
      "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java",
      "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java"
    ],
    "message": "Update PKCE validation",
    "before_after_code_files": [
      "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java",
      "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java"
    ]
  },
  "patch_diff": {
    "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java": [
      "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:   String codeChallenge = (String) authorizationRequest.getAdditionalParameters()",
      "96:     .get(PkceParameterNames.CODE_CHALLENGE);",
      "97:   if (!StringUtils.hasText(codeChallenge)) {",
      "99:     throwInvalidGrant(PkceParameterNames.CODE_CHALLENGE);",
      "100:    } else {",
      "101:     if (this.logger.isTraceEnabled()) {",
      "",
      "[Removed Lines]",
      "98:    if (registeredClient.getClientSettings().isRequireProofKey()) {",
      "",
      "[Added Lines]",
      "97:   String codeVerifier = (String) parameters.get(PkceParameterNames.CODE_VERIFIER);",
      "99:    if (registeredClient.getClientSettings().isRequireProofKey() ||",
      "100:      StringUtils.hasText(codeVerifier)) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "112:   String codeChallengeMethod = (String) authorizationRequest.getAdditionalParameters()",
      "113:     .get(PkceParameterNames.CODE_CHALLENGE_METHOD);",
      "115:   if (!codeVerifierValid(codeVerifier, codeChallenge, codeChallengeMethod)) {",
      "116:    throwInvalidGrant(PkceParameterNames.CODE_VERIFIER);",
      "117:   }",
      "",
      "[Removed Lines]",
      "114:   String codeVerifier = (String) parameters.get(PkceParameterNames.CODE_VERIFIER);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java": [
      "File: oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java -> oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "488:   assertThat(redirectedUrl).isEqualTo(expectedRedirectUri);",
      "489:  }",
      "491:  @Test",
      "492:  public void requestWhenCustomTokenGeneratorThenUsed() throws Exception {",
      "493:   this.spring.register(AuthorizationServerConfigurationWithTokenGenerator.class).autowire();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "491:  @Test",
      "492:  public void requestWhenConfidentialClientWithPkceAndMissingCodeChallengeButCodeVerifierProvidedThenBadRequest() throws Exception {",
      "493:   this.spring.register(AuthorizationServerConfiguration.class).autowire();",
      "495:   RegisteredClient registeredClient = TestRegisteredClients.registeredClient().build();",
      "496:   this.registeredClientRepository.save(registeredClient);",
      "498:   MultiValueMap<String, String> authorizationRequestParameters = getAuthorizationRequestParameters(registeredClient);",
      "499:   MvcResult mvcResult = this.mvc.perform(get(DEFAULT_AUTHORIZATION_ENDPOINT_URI)",
      "500:       .queryParams(authorizationRequestParameters)",
      "501:       .with(user(\"user\")))",
      "502:     .andExpect(status().is3xxRedirection())",
      "503:     .andReturn();",
      "504:   String redirectedUrl = mvcResult.getResponse().getRedirectedUrl();",
      "505:   String expectedRedirectUri = authorizationRequestParameters.getFirst(OAuth2ParameterNames.REDIRECT_URI);",
      "506:   assertThat(redirectedUrl).matches(expectedRedirectUri + \"\\\\?code=.{15,}&state=\" + STATE_URL_ENCODED);",
      "508:   String authorizationCode = extractParameterFromRedirectUri(redirectedUrl, \"code\");",
      "509:   OAuth2Authorization authorizationCodeAuthorization = this.authorizationService.findByToken(authorizationCode, AUTHORIZATION_CODE_TOKEN_TYPE);",
      "510:   assertThat(authorizationCodeAuthorization).isNotNull();",
      "511:   assertThat(authorizationCodeAuthorization.getAuthorizationGrantType()).isEqualTo(AuthorizationGrantType.AUTHORIZATION_CODE);",
      "513:   this.mvc.perform(post(DEFAULT_TOKEN_ENDPOINT_URI)",
      "514:     .params(getTokenRequestParameters(registeredClient, authorizationCodeAuthorization))",
      "515:     .param(PkceParameterNames.CODE_VERIFIER, S256_CODE_VERIFIER)",
      "516:     .header(HttpHeaders.AUTHORIZATION, getAuthorizationHeader(registeredClient)))",
      "517:     .andExpect(status().isBadRequest());",
      "518:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9be1438c2543c2d233e09729f82480ff9c1cb411",
      "candidate_info": {
        "commit_hash": "9be1438c2543c2d233e09729f82480ff9c1cb411",
        "repo": "spring-projects/spring-authorization-server",
        "commit_url": "https://github.com/spring-projects/spring-authorization-server/commit/9be1438c2543c2d233e09729f82480ff9c1cb411",
        "files": [
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationConsentService.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/aot/hint/OAuth2AuthorizationServerBeanRegistrationAotProcessor.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/ClientSecretAuthenticationProvider.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeRequestAuthenticationValidator.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/client/JdbcRegisteredClientRepository.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProvider.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProvider.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/OidcClientRegistrationRegisteredClientConverter.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/RegisteredClientOidcClientRegistrationConverter.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilter.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/token/OAuth2RefreshTokenGenerator.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandler.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeAuthenticationProviderTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2RefreshTokenGrantTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcClientRegistrationTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProviderTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProviderTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilterTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandlerTests.java"
        ],
        "message": "Apply Spring formatting to 1.2.x\n\nIssue gh-1616",
        "before_after_code_files": [
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationConsentService.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationConsentService.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/aot/hint/OAuth2AuthorizationServerBeanRegistrationAotProcessor.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/aot/hint/OAuth2AuthorizationServerBeanRegistrationAotProcessor.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/ClientSecretAuthenticationProvider.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/ClientSecretAuthenticationProvider.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeRequestAuthenticationValidator.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeRequestAuthenticationValidator.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/client/JdbcRegisteredClientRepository.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/client/JdbcRegisteredClientRepository.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProvider.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProvider.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProvider.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProvider.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/OidcClientRegistrationRegisteredClientConverter.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/OidcClientRegistrationRegisteredClientConverter.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/RegisteredClientOidcClientRegistrationConverter.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/RegisteredClientOidcClientRegistrationConverter.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilter.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilter.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/token/OAuth2RefreshTokenGenerator.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/token/OAuth2RefreshTokenGenerator.java",
          "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandler.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandler.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeAuthenticationProviderTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeAuthenticationProviderTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2RefreshTokenGrantTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2RefreshTokenGrantTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcClientRegistrationTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcClientRegistrationTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProviderTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProviderTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProviderTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProviderTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilterTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilterTests.java",
          "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandlerTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandlerTests.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java",
            "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java"
          ],
          "candidate": [
            "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java",
            "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java"
          ]
        }
      },
      "candidate_diff": {
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationConsentService.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationConsentService.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationConsentService.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationConsentService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:   @Override",
          "77:   public void registerHints(RuntimeHints hints, ClassLoader classLoader) {",
          "80:   }",
          "82:  }",
          "",
          "[Removed Lines]",
          "78:    hints.resources().registerResource(new ClassPathResource(",
          "79:      \"org/springframework/security/oauth2/server/authorization/oauth2-authorization-consent-schema.sql\"));",
          "",
          "[Added Lines]",
          "78:    hints.resources()",
          "79:     .registerResource(new ClassPathResource(",
          "80:       \"org/springframework/security/oauth2/server/authorization/oauth2-authorization-consent-schema.sql\"));",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/JdbcOAuth2AuthorizationService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "102:   @Override",
          "103:   public void registerHints(RuntimeHints hints, ClassLoader classLoader) {",
          "106:   }",
          "108:  }",
          "",
          "[Removed Lines]",
          "104:    hints.resources().registerResource(new ClassPathResource(",
          "105:      \"org/springframework/security/oauth2/server/authorization/oauth2-authorization-schema.sql\"));",
          "",
          "[Added Lines]",
          "104:    hints.resources()",
          "105:     .registerResource(new ClassPathResource(",
          "106:       \"org/springframework/security/oauth2/server/authorization/oauth2-authorization-schema.sql\"));",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/aot/hint/OAuth2AuthorizationServerBeanRegistrationAotProcessor.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/aot/hint/OAuth2AuthorizationServerBeanRegistrationAotProcessor.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/aot/hint/OAuth2AuthorizationServerBeanRegistrationAotProcessor.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/aot/hint/OAuth2AuthorizationServerBeanRegistrationAotProcessor.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:    jackson2Contributed = true;",
          "73:    return jackson2Contribution;",
          "74:   }",
          "75:   return null;",
          "76:  }",
          "79:   private final BindingReflectionHintsRegistrar reflectionHintsRegistrar = new BindingReflectionHintsRegistrar();",
          "81:   @Override",
          "",
          "[Removed Lines]",
          "78:  private static class Jackson2ConfigurationBeanRegistrationAotContribution implements BeanRegistrationAotContribution {",
          "",
          "[Added Lines]",
          "82:  private static class Jackson2ConfigurationBeanRegistrationAotContribution",
          "83:    implements BeanRegistrationAotContribution {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   }",
          "86:   private void registerHints(RuntimeHints hints) {",
          "133:    this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(),",
          "",
          "[Removed Lines]",
          "88:    hints.reflection().registerType(Collections.class,",
          "89:      MemberCategory.DECLARED_CLASSES);",
          "92:    hints.reflection().registerType(HashSet.class,",
          "93:      MemberCategory.DECLARED_FIELDS, MemberCategory.INVOKE_DECLARED_CONSTRUCTORS,",
          "94:      MemberCategory.INVOKE_DECLARED_METHODS);",
          "97:    hints.reflection().registerTypes(",
          "98:      Arrays.asList(",
          "99:        TypeReference.of(AbstractAuthenticationToken.class),",
          "100:        TypeReference.of(DefaultSavedRequest.Builder.class),",
          "101:        TypeReference.of(WebAuthenticationDetails.class),",
          "102:        TypeReference.of(UsernamePasswordAuthenticationToken.class),",
          "103:        TypeReference.of(User.class),",
          "104:        TypeReference.of(DefaultOidcUser.class),",
          "105:        TypeReference.of(DefaultOAuth2User.class),",
          "106:        TypeReference.of(OidcUserAuthority.class),",
          "107:        TypeReference.of(OAuth2UserAuthority.class),",
          "108:        TypeReference.of(SimpleGrantedAuthority.class),",
          "109:        TypeReference.of(OidcIdToken.class),",
          "110:        TypeReference.of(AbstractOAuth2Token.class),",
          "111:        TypeReference.of(OidcUserInfo.class),",
          "112:        TypeReference.of(OAuth2AuthorizationRequest.class),",
          "113:        TypeReference.of(AuthorizationGrantType.class),",
          "114:        TypeReference.of(OAuth2AuthorizationResponseType.class),",
          "115:        TypeReference.of(OAuth2TokenFormat.class)",
          "116:      ), builder ->",
          "117:        builder.withMembers(MemberCategory.DECLARED_FIELDS,",
          "118:          MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)",
          "119:    );",
          "122:    hints.reflection().registerTypes(",
          "123:      Arrays.asList(",
          "124:        TypeReference.of(CoreJackson2Module.class),",
          "125:        TypeReference.of(WebServletJackson2Module.class),",
          "126:        TypeReference.of(OAuth2AuthorizationServerJackson2Module.class)",
          "127:      ), builder ->",
          "128:        builder.withMembers(MemberCategory.DECLARED_FIELDS,",
          "129:          MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)",
          "130:    );",
          "",
          "[Added Lines]",
          "95:    hints.reflection().registerType(Collections.class, MemberCategory.DECLARED_CLASSES);",
          "98:    hints.reflection()",
          "99:     .registerType(HashSet.class, MemberCategory.DECLARED_FIELDS,",
          "100:       MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS);",
          "103:    hints.reflection()",
          "104:     .registerTypes(Arrays.asList(TypeReference.of(AbstractAuthenticationToken.class),",
          "105:       TypeReference.of(DefaultSavedRequest.Builder.class),",
          "106:       TypeReference.of(WebAuthenticationDetails.class),",
          "107:       TypeReference.of(UsernamePasswordAuthenticationToken.class), TypeReference.of(User.class),",
          "108:       TypeReference.of(DefaultOidcUser.class), TypeReference.of(DefaultOAuth2User.class),",
          "109:       TypeReference.of(OidcUserAuthority.class), TypeReference.of(OAuth2UserAuthority.class),",
          "110:       TypeReference.of(SimpleGrantedAuthority.class), TypeReference.of(OidcIdToken.class),",
          "111:       TypeReference.of(AbstractOAuth2Token.class), TypeReference.of(OidcUserInfo.class),",
          "112:       TypeReference.of(OAuth2AuthorizationRequest.class),",
          "113:       TypeReference.of(AuthorizationGrantType.class),",
          "114:       TypeReference.of(OAuth2AuthorizationResponseType.class),",
          "115:       TypeReference.of(OAuth2TokenFormat.class)),",
          "116:       builder -> builder.withMembers(MemberCategory.DECLARED_FIELDS,",
          "117:         MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS));",
          "120:    hints.reflection()",
          "121:     .registerTypes(",
          "122:       Arrays.asList(TypeReference.of(CoreJackson2Module.class),",
          "123:         TypeReference.of(WebServletJackson2Module.class),",
          "124:         TypeReference.of(OAuth2AuthorizationServerJackson2Module.class)),",
          "125:       builder -> builder.withMembers(MemberCategory.DECLARED_FIELDS,",
          "126:         MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "136:      loadClass(\"org.springframework.security.jackson2.UnmodifiableListMixin\"));",
          "137:    this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(),",
          "138:      loadClass(\"org.springframework.security.jackson2.UnmodifiableMapMixin\"));",
          "141:    this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(),",
          "142:      loadClass(\"org.springframework.security.oauth2.server.authorization.jackson2.HashSetMixin\"));",
          "143:    this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(),",
          "",
          "[Removed Lines]",
          "139:    this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(),",
          "140:      loadClass(\"org.springframework.security.oauth2.server.authorization.jackson2.UnmodifiableMapMixin\"));",
          "",
          "[Added Lines]",
          "135:    this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(), loadClass(",
          "136:      \"org.springframework.security.oauth2.server.authorization.jackson2.UnmodifiableMapMixin\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:      loadClass(\"org.springframework.security.jackson2.UserMixin\"));",
          "151:    this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(),",
          "152:      loadClass(\"org.springframework.security.jackson2.SimpleGrantedAuthorityMixin\"));",
          "159:    if (ClassUtils.isPresent(\"org.springframework.security.oauth2.client.registration.ClientRegistration\",",
          "160:      ClassUtils.getDefaultClassLoader())) {",
          "175:     this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(),",
          "176:       loadClass(\"org.springframework.security.oauth2.client.jackson2.DefaultOidcUserMixin\"));",
          "177:     this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(),",
          "",
          "[Removed Lines]",
          "153:    this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(),",
          "154:      loadClass(\"org.springframework.security.oauth2.server.authorization.jackson2.OAuth2AuthorizationRequestMixin\"));",
          "155:    this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(),",
          "156:      loadClass(\"org.springframework.security.oauth2.server.authorization.jackson2.OAuth2TokenFormatMixin\"));",
          "163:     hints.reflection().registerTypes(",
          "164:       Arrays.asList(",
          "165:         TypeReference.of(\"org.springframework.security.oauth2.client.jackson2.OAuth2ClientJackson2Module\"),",
          "166:         TypeReference.of(\"org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken\")",
          "167:       ), builder ->",
          "168:         builder.withMembers(MemberCategory.DECLARED_FIELDS,",
          "169:           MemberCategory.INVOKE_DECLARED_CONSTRUCTORS, MemberCategory.INVOKE_DECLARED_METHODS)",
          "170:     );",
          "173:     this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(),",
          "174:       loadClass(\"org.springframework.security.oauth2.client.jackson2.OAuth2AuthenticationTokenMixin\"));",
          "",
          "[Added Lines]",
          "149:    this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(), loadClass(",
          "150:      \"org.springframework.security.oauth2.server.authorization.jackson2.OAuth2AuthorizationRequestMixin\"));",
          "151:    this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(), loadClass(",
          "152:      \"org.springframework.security.oauth2.server.authorization.jackson2.OAuth2TokenFormatMixin\"));",
          "159:     hints.reflection()",
          "160:      .registerTypes(Arrays.asList(",
          "161:        TypeReference",
          "162:         .of(\"org.springframework.security.oauth2.client.jackson2.OAuth2ClientJackson2Module\"),",
          "163:        TypeReference",
          "164:         .of(\"org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken\")),",
          "165:        builder -> builder.withMembers(MemberCategory.DECLARED_FIELDS,",
          "166:          MemberCategory.INVOKE_DECLARED_CONSTRUCTORS,",
          "167:          MemberCategory.INVOKE_DECLARED_METHODS));",
          "170:     this.reflectionHintsRegistrar.registerReflectionHints(hints.reflection(), loadClass(",
          "171:       \"org.springframework.security.oauth2.client.jackson2.OAuth2AuthenticationTokenMixin\"));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "190:   private static Class<?> loadClass(String className) {",
          "191:    try {",
          "192:     return Class.forName(className);",
          "194:     throw new RuntimeException(ex);",
          "195:    }",
          "196:   }",
          "",
          "[Removed Lines]",
          "193:    } catch (ClassNotFoundException ex) {",
          "",
          "[Added Lines]",
          "190:    }",
          "191:    catch (ClassNotFoundException ex) {",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/ClientSecretAuthenticationProvider.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/ClientSecretAuthenticationProvider.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/ClientSecretAuthenticationProvider.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/ClientSecretAuthenticationProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:   String clientSecret = clientAuthentication.getCredentials().toString();",
          "124:   if (!this.passwordEncoder.matches(clientSecret, registeredClient.getClientSecret())) {",
          "125:    if (this.logger.isDebugEnabled()) {",
          "128:    }",
          "129:    throwInvalidClient(OAuth2ParameterNames.CLIENT_SECRET);",
          "130:   }",
          "",
          "[Removed Lines]",
          "126:     this.logger.debug(LogMessage.format(\"Invalid request: client_secret does not match\" +",
          "127:       \" for registered client '%s'\", registeredClient.getId()));",
          "",
          "[Added Lines]",
          "126:     this.logger.debug(LogMessage.format(",
          "127:       \"Invalid request: client_secret does not match\" + \" for registered client '%s'\",",
          "128:       registeredClient.getId()));",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/CodeVerifierAuthenticator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:    .get(PkceParameterNames.CODE_CHALLENGE);",
          "99:   String codeVerifier = (String) parameters.get(PkceParameterNames.CODE_VERIFIER);",
          "100:   if (!StringUtils.hasText(codeChallenge)) {",
          "103:     if (this.logger.isDebugEnabled()) {",
          "106:     }",
          "107:     throwInvalidGrant(PkceParameterNames.CODE_CHALLENGE);",
          "108:    }",
          "",
          "[Removed Lines]",
          "101:    if (registeredClient.getClientSettings().isRequireProofKey() ||",
          "102:      StringUtils.hasText(codeVerifier)) {",
          "104:      this.logger.debug(LogMessage.format(\"Invalid request: code_challenge is required\" +",
          "105:        \" for registered client '%s'\", registeredClient.getId()));",
          "",
          "[Added Lines]",
          "101:    if (registeredClient.getClientSettings().isRequireProofKey() || StringUtils.hasText(codeVerifier)) {",
          "103:      this.logger.debug(LogMessage.format(",
          "104:        \"Invalid request: code_challenge is required\" + \" for registered client '%s'\",",
          "105:        registeredClient.getId()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:    .get(PkceParameterNames.CODE_CHALLENGE_METHOD);",
          "123:   if (!codeVerifierValid(codeVerifier, codeChallenge, codeChallengeMethod)) {",
          "124:    if (this.logger.isDebugEnabled()) {",
          "127:    }",
          "128:    throwInvalidGrant(PkceParameterNames.CODE_VERIFIER);",
          "129:   }",
          "",
          "[Removed Lines]",
          "125:     this.logger.debug(LogMessage.format(\"Invalid request: code_verifier is missing or invalid\" +",
          "126:       \" for registered client '%s'\", registeredClient.getId()));",
          "",
          "[Added Lines]",
          "125:     this.logger.debug(LogMessage.format(",
          "126:       \"Invalid request: code_verifier is missing or invalid\" + \" for registered client '%s'\",",
          "127:       registeredClient.getId()));",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeRequestAuthenticationValidator.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeRequestAuthenticationValidator.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeRequestAuthenticationValidator.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeRequestAuthenticationValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:   Set<String> allowedScopes = registeredClient.getScopes();",
          "88:   if (!requestedScopes.isEmpty() && !allowedScopes.containsAll(requestedScopes)) {",
          "89:    if (LOGGER.isDebugEnabled()) {",
          "92:    }",
          "93:    throwError(OAuth2ErrorCodes.INVALID_SCOPE, OAuth2ParameterNames.SCOPE,",
          "94:      authorizationCodeRequestAuthentication, registeredClient);",
          "",
          "[Removed Lines]",
          "90:     LOGGER.debug(LogMessage.format(\"Invalid request: requested scope is not allowed\" +",
          "91:       \" for registered client '%s'\", registeredClient.getId()));",
          "",
          "[Added Lines]",
          "91:     LOGGER.debug(LogMessage.format(",
          "92:       \"Invalid request: requested scope is not allowed\" + \" for registered client '%s'\",",
          "93:       registeredClient.getId()));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:    }",
          "114:    if (requestedRedirect == null || requestedRedirect.getFragment() != null) {",
          "115:     if (LOGGER.isDebugEnabled()) {",
          "118:     }",
          "119:     throwError(OAuth2ErrorCodes.INVALID_REQUEST, OAuth2ParameterNames.REDIRECT_URI,",
          "120:       authorizationCodeRequestAuthentication, registeredClient);",
          "",
          "[Removed Lines]",
          "116:      LOGGER.debug(LogMessage.format(\"Invalid request: redirect_uri is missing or contains a fragment\" +",
          "117:        \" for registered client '%s'\", registeredClient.getId()));",
          "",
          "[Added Lines]",
          "118:      LOGGER.debug(LogMessage.format(\"Invalid request: redirect_uri is missing or contains a fragment\"",
          "119:        + \" for registered client '%s'\", registeredClient.getId()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "148:     }",
          "149:     if (!validRedirectUri) {",
          "150:      if (LOGGER.isDebugEnabled()) {",
          "153:      }",
          "154:      throwError(OAuth2ErrorCodes.INVALID_REQUEST, OAuth2ParameterNames.REDIRECT_URI,",
          "155:        authorizationCodeRequestAuthentication, registeredClient);",
          "",
          "[Removed Lines]",
          "151:       LOGGER.debug(LogMessage.format(\"Invalid request: redirect_uri does not match\" +",
          "152:         \" for registered client '%s'\", registeredClient.getId()));",
          "",
          "[Added Lines]",
          "153:       LOGGER.debug(LogMessage.format(",
          "154:         \"Invalid request: redirect_uri does not match\" + \" for registered client '%s'\",",
          "155:         registeredClient.getId()));",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/client/JdbcRegisteredClientRepository.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/client/JdbcRegisteredClientRepository.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/client/JdbcRegisteredClientRepository.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/client/JdbcRegisteredClientRepository.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:   @Override",
          "88:   public void registerHints(RuntimeHints hints, ClassLoader classLoader) {",
          "91:   }",
          "93:  }",
          "",
          "[Removed Lines]",
          "89:    hints.resources().registerResource(new ClassPathResource(",
          "90:      \"org/springframework/security/oauth2/server/authorization/client/oauth2-registered-client-schema.sql\"));",
          "",
          "[Added Lines]",
          "89:    hints.resources()",
          "90:     .registerResource(new ClassPathResource(",
          "91:       \"org/springframework/security/oauth2/server/authorization/client/oauth2-registered-client-schema.sql\"));",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProvider.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProvider.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProvider.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  }",
          "95:   Assert.notNull(clientRegistrationConverter, \"clientRegistrationConverter cannot be null\");",
          "96:   this.clientRegistrationConverter = clientRegistrationConverter;",
          "97:  }",
          "",
          "[Removed Lines]",
          "94:  public void setClientRegistrationConverter(Converter<RegisteredClient, OidcClientRegistration> clientRegistrationConverter) {",
          "",
          "[Added Lines]",
          "95:  public void setClientRegistrationConverter(",
          "96:    Converter<RegisteredClient, OidcClientRegistration> clientRegistrationConverter) {",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProvider.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProvider.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProvider.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProvider.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:  }",
          "194:   Assert.notNull(clientRegistrationConverter, \"clientRegistrationConverter cannot be null\");",
          "195:   this.clientRegistrationConverter = clientRegistrationConverter;",
          "196:  }",
          "",
          "[Removed Lines]",
          "193:  public void setClientRegistrationConverter(Converter<RegisteredClient, OidcClientRegistration> clientRegistrationConverter) {",
          "",
          "[Added Lines]",
          "194:  public void setClientRegistrationConverter(",
          "195:    Converter<RegisteredClient, OidcClientRegistration> clientRegistrationConverter) {",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/OidcClientRegistrationRegisteredClientConverter.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/OidcClientRegistrationRegisteredClientConverter.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/OidcClientRegistrationRegisteredClientConverter.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/OidcClientRegistrationRegisteredClientConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: import org.springframework.util.CollectionUtils;",
          "44:  private static final StringKeyGenerator CLIENT_ID_GENERATOR = new Base64StringKeyGenerator(",
          "45:    Base64.getUrlEncoder().withoutPadding(), 32);",
          "46:  private static final StringKeyGenerator CLIENT_SECRET_GENERATOR = new Base64StringKeyGenerator(",
          "47:    Base64.getUrlEncoder().withoutPadding(), 48);",
          "",
          "[Removed Lines]",
          "43: public final class OidcClientRegistrationRegisteredClientConverter implements Converter<OidcClientRegistration, RegisteredClient> {",
          "",
          "[Added Lines]",
          "44: public final class OidcClientRegistrationRegisteredClientConverter",
          "45:   implements Converter<OidcClientRegistration, RegisteredClient> {",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/RegisteredClientOidcClientRegistrationConverter.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/RegisteredClientOidcClientRegistrationConverter.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/RegisteredClientOidcClientRegistrationConverter.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/converter/RegisteredClientOidcClientRegistrationConverter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: import org.springframework.web.util.UriComponentsBuilder;",
          "38:  @Override",
          "39:  public OidcClientRegistration convert(RegisteredClient registeredClient) {",
          "",
          "[Removed Lines]",
          "36: public final class RegisteredClientOidcClientRegistrationConverter implements Converter<RegisteredClient, OidcClientRegistration> {",
          "",
          "[Added Lines]",
          "37: public final class RegisteredClientOidcClientRegistrationConverter",
          "38:   implements Converter<RegisteredClient, OidcClientRegistration> {",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilter.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilter.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilter.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilter.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:    .getAuthorizationServerSettings();",
          "101:   OidcProviderConfiguration.Builder providerConfiguration = OidcProviderConfiguration.builder()",
          "124:   this.providerConfigurationCustomizer.accept(providerConfiguration);",
          "",
          "[Removed Lines]",
          "102:     .issuer(issuer)",
          "103:     .authorizationEndpoint(asUrl(issuer, authorizationServerSettings.getAuthorizationEndpoint()))",
          "104:     .deviceAuthorizationEndpoint(asUrl(issuer, authorizationServerSettings.getDeviceAuthorizationEndpoint()))",
          "105:     .tokenEndpoint(asUrl(issuer, authorizationServerSettings.getTokenEndpoint()))",
          "106:     .tokenEndpointAuthenticationMethods(clientAuthenticationMethods())",
          "107:     .jwkSetUrl(asUrl(issuer, authorizationServerSettings.getJwkSetEndpoint()))",
          "108:     .userInfoEndpoint(asUrl(issuer, authorizationServerSettings.getOidcUserInfoEndpoint()))",
          "109:     .endSessionEndpoint(asUrl(issuer, authorizationServerSettings.getOidcLogoutEndpoint()))",
          "110:     .responseType(OAuth2AuthorizationResponseType.CODE.getValue())",
          "111:     .grantType(AuthorizationGrantType.AUTHORIZATION_CODE.getValue())",
          "112:     .grantType(AuthorizationGrantType.CLIENT_CREDENTIALS.getValue())",
          "113:     .grantType(AuthorizationGrantType.REFRESH_TOKEN.getValue())",
          "114:     .grantType(AuthorizationGrantType.DEVICE_CODE.getValue())",
          "115:     .tokenRevocationEndpoint(asUrl(issuer, authorizationServerSettings.getTokenRevocationEndpoint()))",
          "116:     .tokenRevocationEndpointAuthenticationMethods(clientAuthenticationMethods())",
          "117:     .tokenIntrospectionEndpoint(asUrl(issuer, authorizationServerSettings.getTokenIntrospectionEndpoint()))",
          "118:     .tokenIntrospectionEndpointAuthenticationMethods(clientAuthenticationMethods())",
          "119:     .codeChallengeMethod(\"S256\")",
          "120:     .subjectType(\"public\")",
          "121:     .idTokenSigningAlgorithm(SignatureAlgorithm.RS256.getName())",
          "122:     .scope(OidcScopes.OPENID);",
          "",
          "[Added Lines]",
          "102:    .issuer(issuer)",
          "103:    .authorizationEndpoint(asUrl(issuer, authorizationServerSettings.getAuthorizationEndpoint()))",
          "104:    .deviceAuthorizationEndpoint(asUrl(issuer, authorizationServerSettings.getDeviceAuthorizationEndpoint()))",
          "105:    .tokenEndpoint(asUrl(issuer, authorizationServerSettings.getTokenEndpoint()))",
          "106:    .tokenEndpointAuthenticationMethods(clientAuthenticationMethods())",
          "107:    .jwkSetUrl(asUrl(issuer, authorizationServerSettings.getJwkSetEndpoint()))",
          "108:    .userInfoEndpoint(asUrl(issuer, authorizationServerSettings.getOidcUserInfoEndpoint()))",
          "109:    .endSessionEndpoint(asUrl(issuer, authorizationServerSettings.getOidcLogoutEndpoint()))",
          "110:    .responseType(OAuth2AuthorizationResponseType.CODE.getValue())",
          "111:    .grantType(AuthorizationGrantType.AUTHORIZATION_CODE.getValue())",
          "112:    .grantType(AuthorizationGrantType.CLIENT_CREDENTIALS.getValue())",
          "113:    .grantType(AuthorizationGrantType.REFRESH_TOKEN.getValue())",
          "114:    .grantType(AuthorizationGrantType.DEVICE_CODE.getValue())",
          "115:    .tokenRevocationEndpoint(asUrl(issuer, authorizationServerSettings.getTokenRevocationEndpoint()))",
          "116:    .tokenRevocationEndpointAuthenticationMethods(clientAuthenticationMethods())",
          "117:    .tokenIntrospectionEndpoint(asUrl(issuer, authorizationServerSettings.getTokenIntrospectionEndpoint()))",
          "118:    .tokenIntrospectionEndpointAuthenticationMethods(clientAuthenticationMethods())",
          "119:    .codeChallengeMethod(\"S256\")",
          "120:    .subjectType(\"public\")",
          "121:    .idTokenSigningAlgorithm(SignatureAlgorithm.RS256.getName())",
          "122:    .scope(OidcScopes.OPENID);",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/token/OAuth2RefreshTokenGenerator.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/token/OAuth2RefreshTokenGenerator.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/token/OAuth2RefreshTokenGenerator.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/token/OAuth2RefreshTokenGenerator.java"
        ],
        "oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandler.java||oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandler.java": [
          "File: oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandler.java -> oauth2-authorization-server/src/main/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   if (authenticationException instanceof OAuth2AuthenticationException) {",
          "57:    OAuth2Error error = ((OAuth2AuthenticationException) authenticationException).getError();",
          "58:    this.errorResponseConverter.write(error, null, httpResponse);",
          "60:    if (this.logger.isWarnEnabled()) {",
          "64:    }",
          "65:   }",
          "66:  }",
          "73:  public void setErrorResponseConverter(HttpMessageConverter<OAuth2Error> errorResponseConverter) {",
          "74:   Assert.notNull(errorResponseConverter, \"errorResponseConverter cannot be null\");",
          "",
          "[Removed Lines]",
          "59:   } else {",
          "61:     this.logger.warn(AuthenticationException.class.getSimpleName() + \" must be of type \" +",
          "62:       OAuth2AuthenticationException.class.getName() +",
          "63:       \" but was \" + authenticationException.getClass().getName());",
          "",
          "[Added Lines]",
          "62:   }",
          "63:   else {",
          "65:     this.logger.warn(AuthenticationException.class.getSimpleName() + \" must be of type \"",
          "66:       + OAuth2AuthenticationException.class.getName() + \" but was \"",
          "67:       + authenticationException.getClass().getName());",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeAuthenticationProviderTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeAuthenticationProviderTests.java": [
          "File: oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeAuthenticationProviderTests.java -> oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/authentication/OAuth2AuthorizationCodeAuthenticationProviderTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:   doAnswer(answer -> {",
          "407:    OAuth2TokenContext context = answer.getArgument(0);",
          "408:    if (OAuth2TokenType.REFRESH_TOKEN.equals(context.getTokenType())) {",
          "411:    }",
          "412:    else {",
          "413:     return answer.callRealMethod();",
          "",
          "[Removed Lines]",
          "409:     return new OAuth2AccessToken(",
          "410:       OAuth2AccessToken.TokenType.BEARER, \"access-token\", Instant.now(), Instant.now().plusSeconds(300));",
          "",
          "[Added Lines]",
          "409:     return new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER, \"access-token\", Instant.now(),",
          "410:       Instant.now().plusSeconds(300));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:   }).when(this.tokenGenerator).generate(any());",
          "417:   assertThatThrownBy(() -> this.authenticationProvider.authenticate(authentication))",
          "424:  }",
          "426:  @Test",
          "",
          "[Removed Lines]",
          "418:     .isInstanceOf(OAuth2AuthenticationException.class)",
          "419:     .extracting(ex -> ((OAuth2AuthenticationException) ex).getError())",
          "420:     .satisfies(error -> {",
          "421:      assertThat(error.getErrorCode()).isEqualTo(OAuth2ErrorCodes.SERVER_ERROR);",
          "422:      assertThat(error.getDescription()).contains(\"The token generator failed to generate a valid refresh token.\");",
          "423:     });",
          "",
          "[Added Lines]",
          "418:    .isInstanceOf(OAuth2AuthenticationException.class)",
          "419:    .extracting(ex -> ((OAuth2AuthenticationException) ex).getError())",
          "420:    .satisfies(error -> {",
          "421:     assertThat(error.getErrorCode()).isEqualTo(OAuth2ErrorCodes.SERVER_ERROR);",
          "422:     assertThat(error.getDescription())",
          "423:      .contains(\"The token generator failed to generate a valid refresh token.\");",
          "424:    });",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java": [
          "File: oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java -> oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2AuthorizationCodeGrantTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "467:   this.spring.register(AuthorizationServerConfigurationWithCustomRefreshTokenGenerator.class).autowire();",
          "469:   RegisteredClient registeredClient = TestRegisteredClients.registeredPublicClient()",
          "472:   this.registeredClientRepository.save(registeredClient);",
          "475:     .queryParams(getAuthorizationRequestParameters(registeredClient))",
          "476:     .queryParam(PkceParameterNames.CODE_CHALLENGE, S256_CODE_CHALLENGE)",
          "477:     .queryParam(PkceParameterNames.CODE_CHALLENGE_METHOD, \"S256\")",
          "478:     .with(user(\"user\")))",
          "481:   String redirectedUrl = mvcResult.getResponse().getRedirectedUrl();",
          "482:   assertThat(redirectedUrl).matches(\"https://example.com\\\\?code=.{15,}&state=\" + STATE_URL_ENCODED);",
          "484:   String authorizationCode = extractParameterFromRedirectUri(redirectedUrl, \"code\");",
          "486:   assertThat(authorizationCodeAuthorization).isNotNull();",
          "490:     .params(getTokenRequestParameters(registeredClient, authorizationCodeAuthorization))",
          "491:     .param(OAuth2ParameterNames.CLIENT_ID, registeredClient.getClientId())",
          "492:     .param(PkceParameterNames.CODE_VERIFIER, S256_CODE_VERIFIER))",
          "502:   OAuth2Authorization authorization = this.authorizationService.findById(authorizationCodeAuthorization.getId());",
          "503:   assertThat(authorization).isNotNull();",
          "504:   assertThat(authorization.getAccessToken()).isNotNull();",
          "505:   assertThat(authorization.getRefreshToken()).isNotNull();",
          "508:   assertThat(authorizationCodeToken).isNotNull();",
          "510:  }",
          "512:  @Test",
          "",
          "[Removed Lines]",
          "470:     .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)",
          "471:     .build();",
          "474:   MvcResult mvcResult = this.mvc.perform(get(DEFAULT_AUTHORIZATION_ENDPOINT_URI)",
          "479:     .andExpect(status().is3xxRedirection())",
          "480:     .andReturn();",
          "485:   OAuth2Authorization authorizationCodeAuthorization = this.authorizationService.findByToken(authorizationCode, AUTHORIZATION_CODE_TOKEN_TYPE);",
          "487:   assertThat(authorizationCodeAuthorization.getAuthorizationGrantType()).isEqualTo(AuthorizationGrantType.AUTHORIZATION_CODE);",
          "489:   this.mvc.perform(post(DEFAULT_TOKEN_ENDPOINT_URI)",
          "493:     .andExpect(header().string(HttpHeaders.CACHE_CONTROL, containsString(\"no-store\")))",
          "494:     .andExpect(header().string(HttpHeaders.PRAGMA, containsString(\"no-cache\")))",
          "495:     .andExpect(status().isOk())",
          "496:     .andExpect(jsonPath(\"$.access_token\").isNotEmpty())",
          "497:     .andExpect(jsonPath(\"$.token_type\").isNotEmpty())",
          "498:     .andExpect(jsonPath(\"$.expires_in\").isNotEmpty())",
          "499:     .andExpect(jsonPath(\"$.refresh_token\").isNotEmpty())",
          "500:     .andExpect(jsonPath(\"$.scope\").isNotEmpty());",
          "507:   OAuth2Authorization.Token<OAuth2AuthorizationCode> authorizationCodeToken = authorization.getToken(OAuth2AuthorizationCode.class);",
          "509:   assertThat(authorizationCodeToken.getMetadata().get(OAuth2Authorization.Token.INVALIDATED_METADATA_NAME)).isEqualTo(true);",
          "",
          "[Added Lines]",
          "470:    .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)",
          "471:    .build();",
          "474:   MvcResult mvcResult = this.mvc",
          "475:    .perform(get(DEFAULT_AUTHORIZATION_ENDPOINT_URI)",
          "480:    .andExpect(status().is3xxRedirection())",
          "481:    .andReturn();",
          "486:   OAuth2Authorization authorizationCodeAuthorization = this.authorizationService.findByToken(authorizationCode,",
          "487:     AUTHORIZATION_CODE_TOKEN_TYPE);",
          "489:   assertThat(authorizationCodeAuthorization.getAuthorizationGrantType())",
          "490:    .isEqualTo(AuthorizationGrantType.AUTHORIZATION_CODE);",
          "492:   this.mvc",
          "493:    .perform(post(DEFAULT_TOKEN_ENDPOINT_URI)",
          "497:    .andExpect(header().string(HttpHeaders.CACHE_CONTROL, containsString(\"no-store\")))",
          "498:    .andExpect(header().string(HttpHeaders.PRAGMA, containsString(\"no-cache\")))",
          "499:    .andExpect(status().isOk())",
          "500:    .andExpect(jsonPath(\"$.access_token\").isNotEmpty())",
          "501:    .andExpect(jsonPath(\"$.token_type\").isNotEmpty())",
          "502:    .andExpect(jsonPath(\"$.expires_in\").isNotEmpty())",
          "503:    .andExpect(jsonPath(\"$.refresh_token\").isNotEmpty())",
          "504:    .andExpect(jsonPath(\"$.scope\").isNotEmpty());",
          "511:   OAuth2Authorization.Token<OAuth2AuthorizationCode> authorizationCodeToken = authorization",
          "512:    .getToken(OAuth2AuthorizationCode.class);",
          "514:   assertThat(authorizationCodeToken.getMetadata().get(OAuth2Authorization.Token.INVALIDATED_METADATA_NAME))",
          "515:    .isEqualTo(true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1033:  @EnableWebSecurity",
          "1034:  @Import(OAuth2AuthorizationServerConfiguration.class)",
          "1037:   @Bean",
          "1038:   JwtEncoder jwtEncoder() {",
          "",
          "[Removed Lines]",
          "1035:  static class AuthorizationServerConfigurationWithCustomRefreshTokenGenerator extends AuthorizationServerConfiguration {",
          "",
          "[Added Lines]",
          "1041:  static class AuthorizationServerConfigurationWithCustomRefreshTokenGenerator",
          "1042:    extends AuthorizationServerConfiguration {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1048:   }",
          "1050:   private static final class CustomRefreshTokenGenerator implements OAuth2TokenGenerator<OAuth2RefreshToken> {",
          "1054:    @Nullable",
          "1055:    @Override",
          "",
          "[Removed Lines]",
          "1051:    private final StringKeyGenerator refreshTokenGenerator =",
          "1052:      new Base64StringKeyGenerator(Base64.getUrlEncoder().withoutPadding(), 96);",
          "",
          "[Added Lines]",
          "1059:    private final StringKeyGenerator refreshTokenGenerator = new Base64StringKeyGenerator(",
          "1060:      Base64.getUrlEncoder().withoutPadding(), 96);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1058:      return null;",
          "1059:     }",
          "1060:     Instant issuedAt = Instant.now();",
          "1062:     return new OAuth2RefreshToken(this.refreshTokenGenerator.generateKey(), issuedAt, expiresAt);",
          "1063:    }",
          "",
          "[Removed Lines]",
          "1061:     Instant expiresAt = issuedAt.plus(context.getRegisteredClient().getTokenSettings().getRefreshTokenTimeToLive());",
          "",
          "[Added Lines]",
          "1069:     Instant expiresAt = issuedAt",
          "1070:      .plus(context.getRegisteredClient().getTokenSettings().getRefreshTokenTimeToLive());",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2RefreshTokenGrantTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2RefreshTokenGrantTests.java": [
          "File: oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2RefreshTokenGrantTests.java -> oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OAuth2RefreshTokenGrantTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:   this.spring.register(AuthorizationServerConfigurationWithPublicClientAuthentication.class).autowire();",
          "250:   RegisteredClient registeredClient = TestRegisteredClients.registeredPublicClient()",
          "253:   this.registeredClientRepository.save(registeredClient);",
          "255:   OAuth2Authorization authorization = TestOAuth2Authorizations.authorization(registeredClient).build();",
          "256:   this.authorizationService.save(authorization);",
          "260:     .param(OAuth2ParameterNames.CLIENT_ID, registeredClient.getClientId()))",
          "269:  }",
          "271:  private static MultiValueMap<String, String> getRefreshTokenRequestParameters(OAuth2Authorization authorization) {",
          "",
          "[Removed Lines]",
          "251:     .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)",
          "252:     .build();",
          "258:   this.mvc.perform(post(DEFAULT_TOKEN_ENDPOINT_URI)",
          "259:     .params(getRefreshTokenRequestParameters(authorization))",
          "261:     .andExpect(status().isOk())",
          "262:     .andExpect(header().string(HttpHeaders.CACHE_CONTROL, containsString(\"no-store\")))",
          "263:     .andExpect(header().string(HttpHeaders.PRAGMA, containsString(\"no-cache\")))",
          "264:     .andExpect(jsonPath(\"$.access_token\").isNotEmpty())",
          "265:     .andExpect(jsonPath(\"$.token_type\").isNotEmpty())",
          "266:     .andExpect(jsonPath(\"$.expires_in\").isNotEmpty())",
          "267:     .andExpect(jsonPath(\"$.refresh_token\").isNotEmpty())",
          "268:     .andExpect(jsonPath(\"$.scope\").isNotEmpty());",
          "",
          "[Added Lines]",
          "251:    .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)",
          "252:    .build();",
          "258:   this.mvc",
          "259:    .perform(post(DEFAULT_TOKEN_ENDPOINT_URI).params(getRefreshTokenRequestParameters(authorization))",
          "261:    .andExpect(status().isOk())",
          "262:    .andExpect(header().string(HttpHeaders.CACHE_CONTROL, containsString(\"no-store\")))",
          "263:    .andExpect(header().string(HttpHeaders.PRAGMA, containsString(\"no-cache\")))",
          "264:    .andExpect(jsonPath(\"$.access_token\").isNotEmpty())",
          "265:    .andExpect(jsonPath(\"$.token_type\").isNotEmpty())",
          "266:    .andExpect(jsonPath(\"$.expires_in\").isNotEmpty())",
          "267:    .andExpect(jsonPath(\"$.refresh_token\").isNotEmpty())",
          "268:    .andExpect(jsonPath(\"$.scope\").isNotEmpty());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "366:  @EnableWebSecurity",
          "367:  @Configuration(proxyBeanMethods = false)",
          "370:   @Bean",
          "371:   SecurityFilterChain authorizationServerSecurityFilterChain(",
          "",
          "[Removed Lines]",
          "368:  static class AuthorizationServerConfigurationWithPublicClientAuthentication extends AuthorizationServerConfiguration {",
          "",
          "[Added Lines]",
          "368:  static class AuthorizationServerConfigurationWithPublicClientAuthentication",
          "369:    extends AuthorizationServerConfiguration {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "441:   @Override",
          "442:   public Authentication authenticate(Authentication authentication) throws AuthenticationException {",
          "446:    if (!ClientAuthenticationMethod.NONE.equals(publicClientAuthentication.getClientAuthenticationMethod())) {",
          "447:     return null;",
          "",
          "[Removed Lines]",
          "443:    PublicClientRefreshTokenAuthenticationToken publicClientAuthentication =",
          "444:      (PublicClientRefreshTokenAuthenticationToken) authentication;",
          "",
          "[Added Lines]",
          "447:    PublicClientRefreshTokenAuthenticationToken publicClientAuthentication = (PublicClientRefreshTokenAuthenticationToken) authentication;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "453:     throwInvalidClient(OAuth2ParameterNames.CLIENT_ID);",
          "454:    }",
          "458:     throwInvalidClient(\"authentication_method\");",
          "459:    }",
          "",
          "[Removed Lines]",
          "456:    if (!registeredClient.getClientAuthenticationMethods().contains(",
          "457:      publicClientAuthentication.getClientAuthenticationMethod())) {",
          "",
          "[Added Lines]",
          "459:    if (!registeredClient.getClientAuthenticationMethods()",
          "460:     .contains(publicClientAuthentication.getClientAuthenticationMethod())) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "467:   }",
          "469:   private static void throwInvalidClient(String parameterName) {",
          "475:    throw new OAuth2AuthenticationException(error);",
          "476:   }",
          "",
          "[Removed Lines]",
          "470:    OAuth2Error error = new OAuth2Error(",
          "471:      OAuth2ErrorCodes.INVALID_CLIENT,",
          "472:      \"Public client authentication failed: \" + parameterName,",
          "473:      null",
          "474:    );",
          "",
          "[Added Lines]",
          "473:    OAuth2Error error = new OAuth2Error(OAuth2ErrorCodes.INVALID_CLIENT,",
          "474:      \"Public client authentication failed: \" + parameterName, null);",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcClientRegistrationTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcClientRegistrationTests.java": [
          "File: oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcClientRegistrationTests.java -> oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcClientRegistrationTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "770:  }",
          "775:   private final List<String> supportedCustomClientMetadata;",
          "777:   private CustomRegisteredClientConverter(List<String> supportedCustomClientMetadata) {",
          "",
          "[Removed Lines]",
          "772:  private static class CustomRegisteredClientConverter implements Converter<OidcClientRegistration, RegisteredClient> {",
          "773:   private final OidcClientRegistrationRegisteredClientConverter delegate =",
          "774:     new OidcClientRegistrationRegisteredClientConverter();",
          "",
          "[Added Lines]",
          "772:  private static class CustomRegisteredClientConverter",
          "773:    implements Converter<OidcClientRegistration, RegisteredClient> {",
          "775:   private final OidcClientRegistrationRegisteredClientConverter delegate = new OidcClientRegistrationRegisteredClientConverter();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "783:    RegisteredClient registeredClient = this.delegate.convert(clientRegistration);",
          "785:    ClientSettings.Builder clientSettingsBuilder = ClientSettings",
          "787:    if (!CollectionUtils.isEmpty(this.supportedCustomClientMetadata)) {",
          "788:     clientRegistration.getClaims().forEach((claim, value) -> {",
          "789:      if (this.supportedCustomClientMetadata.contains(claim)) {",
          "",
          "[Removed Lines]",
          "786:      .withSettings(registeredClient.getClientSettings().getSettings());",
          "",
          "[Added Lines]",
          "788:     .withSettings(registeredClient.getClientSettings().getSettings());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "798:  }",
          "803:   private final List<String> supportedCustomClientMetadata;",
          "805:   private CustomClientRegistrationConverter(List<String> supportedCustomClientMetadata) {",
          "",
          "[Removed Lines]",
          "800:  private static class CustomClientRegistrationConverter implements Converter<RegisteredClient, OidcClientRegistration> {",
          "801:   private final RegisteredClientOidcClientRegistrationConverter delegate =",
          "802:     new RegisteredClientOidcClientRegistrationConverter();",
          "",
          "[Added Lines]",
          "802:  private static class CustomClientRegistrationConverter",
          "803:    implements Converter<RegisteredClient, OidcClientRegistration> {",
          "805:   private final RegisteredClientOidcClientRegistrationConverter delegate = new RegisteredClientOidcClientRegistrationConverter();",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcTests.java": [
          "File: oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcTests.java -> oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/config/annotation/web/configurers/OidcTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "474:  @Test",
          "476:   this.spring.register(AuthorizationServerConfigurationWithCustomRefreshTokenGenerator.class).autowire();",
          "478:   RegisteredClient registeredClient = TestRegisteredClients.registeredClient()",
          "482:   this.registeredClientRepository.save(registeredClient);",
          "490:   String redirectedUrl = mvcResult.getResponse().getRedirectedUrl();",
          "491:   String expectedRedirectUri = authorizationRequestParameters.getFirst(OAuth2ParameterNames.REDIRECT_URI);",
          "492:   assertThat(redirectedUrl).matches(expectedRedirectUri + \"\\\\?code=.{15,}&state=state\");",
          "494:   String authorizationCode = extractParameterFromRedirectUri(redirectedUrl, \"code\");",
          "511:  }",
          "514:  @Test",
          "516:   this.spring.register(AuthorizationServerConfigurationWithCustomRefreshTokenGenerator.class).autowire();",
          "521:   this.registeredClientRepository.save(registeredClient);",
          "529:   String redirectedUrl = mvcResult.getResponse().getRedirectedUrl();",
          "530:   String expectedRedirectUri = authorizationRequestParameters.getFirst(OAuth2ParameterNames.REDIRECT_URI);",
          "531:   assertThat(redirectedUrl).matches(expectedRedirectUri + \"\\\\?code=.{15,}&state=state\");",
          "533:   String authorizationCode = extractParameterFromRedirectUri(redirectedUrl, \"code\");",
          "550:  }",
          "552:  private static MultiValueMap<String, String> getAuthorizationRequestParameters(RegisteredClient registeredClient) {",
          "",
          "[Removed Lines]",
          "475:  public void requestWhenAuthenticationRequestWithOfflineAccessScopeThenTokenResponseIncludesRefreshToken() throws Exception {",
          "479:     .scope(OidcScopes.OPENID)",
          "480:     .scope(\"offline_access\")",
          "481:     .build();",
          "484:   MultiValueMap<String, String> authorizationRequestParameters = getAuthorizationRequestParameters(registeredClient);",
          "485:   MvcResult mvcResult = this.mvc.perform(get(DEFAULT_AUTHORIZATION_ENDPOINT_URI)",
          "486:       .queryParams(authorizationRequestParameters)",
          "487:       .with(user(\"user\")))",
          "488:     .andExpect(status().is3xxRedirection())",
          "489:     .andReturn();",
          "495:   OAuth2Authorization authorization = this.authorizationService.findByToken(authorizationCode, AUTHORIZATION_CODE_TOKEN_TYPE);",
          "497:   this.mvc.perform(post(DEFAULT_TOKEN_ENDPOINT_URI)",
          "498:     .params(getTokenRequestParameters(registeredClient, authorization))",
          "499:     .header(HttpHeaders.AUTHORIZATION, \"Basic \" + encodeBasicAuth(",
          "500:       registeredClient.getClientId(), registeredClient.getClientSecret())))",
          "501:     .andExpect(status().isOk())",
          "502:     .andExpect(header().string(HttpHeaders.CACHE_CONTROL, containsString(\"no-store\")))",
          "503:     .andExpect(header().string(HttpHeaders.PRAGMA, containsString(\"no-cache\")))",
          "504:     .andExpect(jsonPath(\"$.access_token\").isNotEmpty())",
          "505:     .andExpect(jsonPath(\"$.token_type\").isNotEmpty())",
          "506:     .andExpect(jsonPath(\"$.expires_in\").isNotEmpty())",
          "507:     .andExpect(jsonPath(\"$.refresh_token\").isNotEmpty())",
          "508:     .andExpect(jsonPath(\"$.scope\").isNotEmpty())",
          "509:     .andExpect(jsonPath(\"$.id_token\").isNotEmpty())",
          "510:     .andReturn();",
          "515:  public void requestWhenAuthenticationRequestWithoutOfflineAccessScopeThenTokenResponseDoesNotIncludeRefreshToken() throws Exception {",
          "518:   RegisteredClient registeredClient = TestRegisteredClients.registeredClient()",
          "519:     .scope(OidcScopes.OPENID)",
          "520:     .build();",
          "523:   MultiValueMap<String, String> authorizationRequestParameters = getAuthorizationRequestParameters(registeredClient);",
          "524:   MvcResult mvcResult = this.mvc.perform(get(DEFAULT_AUTHORIZATION_ENDPOINT_URI)",
          "525:       .queryParams(authorizationRequestParameters)",
          "526:       .with(user(\"user\")))",
          "527:     .andExpect(status().is3xxRedirection())",
          "528:     .andReturn();",
          "534:   OAuth2Authorization authorization = this.authorizationService.findByToken(authorizationCode, AUTHORIZATION_CODE_TOKEN_TYPE);",
          "536:   this.mvc.perform(post(DEFAULT_TOKEN_ENDPOINT_URI)",
          "537:       .params(getTokenRequestParameters(registeredClient, authorization))",
          "538:       .header(HttpHeaders.AUTHORIZATION, \"Basic \" + encodeBasicAuth(",
          "539:         registeredClient.getClientId(), registeredClient.getClientSecret())))",
          "540:     .andExpect(status().isOk())",
          "541:     .andExpect(header().string(HttpHeaders.CACHE_CONTROL, containsString(\"no-store\")))",
          "542:     .andExpect(header().string(HttpHeaders.PRAGMA, containsString(\"no-cache\")))",
          "543:     .andExpect(jsonPath(\"$.access_token\").isNotEmpty())",
          "544:     .andExpect(jsonPath(\"$.token_type\").isNotEmpty())",
          "545:     .andExpect(jsonPath(\"$.expires_in\").isNotEmpty())",
          "546:     .andExpect(jsonPath(\"$.refresh_token\").doesNotExist())",
          "547:     .andExpect(jsonPath(\"$.scope\").isNotEmpty())",
          "548:     .andExpect(jsonPath(\"$.id_token\").isNotEmpty())",
          "549:     .andReturn();",
          "",
          "[Added Lines]",
          "475:  public void requestWhenAuthenticationRequestWithOfflineAccessScopeThenTokenResponseIncludesRefreshToken()",
          "476:    throws Exception {",
          "480:    .scope(OidcScopes.OPENID)",
          "481:    .scope(\"offline_access\")",
          "482:    .build();",
          "485:   MultiValueMap<String, String> authorizationRequestParameters = getAuthorizationRequestParameters(",
          "486:     registeredClient);",
          "487:   MvcResult mvcResult = this.mvc",
          "488:    .perform(get(DEFAULT_AUTHORIZATION_ENDPOINT_URI).queryParams(authorizationRequestParameters)",
          "489:     .with(user(\"user\")))",
          "490:    .andExpect(status().is3xxRedirection())",
          "491:    .andReturn();",
          "497:   OAuth2Authorization authorization = this.authorizationService.findByToken(authorizationCode,",
          "498:     AUTHORIZATION_CODE_TOKEN_TYPE);",
          "500:   this.mvc",
          "501:    .perform(post(DEFAULT_TOKEN_ENDPOINT_URI).params(getTokenRequestParameters(registeredClient, authorization))",
          "502:     .header(HttpHeaders.AUTHORIZATION,",
          "503:       \"Basic \" + encodeBasicAuth(registeredClient.getClientId(), registeredClient.getClientSecret())))",
          "504:    .andExpect(status().isOk())",
          "505:    .andExpect(header().string(HttpHeaders.CACHE_CONTROL, containsString(\"no-store\")))",
          "506:    .andExpect(header().string(HttpHeaders.PRAGMA, containsString(\"no-cache\")))",
          "507:    .andExpect(jsonPath(\"$.access_token\").isNotEmpty())",
          "508:    .andExpect(jsonPath(\"$.token_type\").isNotEmpty())",
          "509:    .andExpect(jsonPath(\"$.expires_in\").isNotEmpty())",
          "510:    .andExpect(jsonPath(\"$.refresh_token\").isNotEmpty())",
          "511:    .andExpect(jsonPath(\"$.scope\").isNotEmpty())",
          "512:    .andExpect(jsonPath(\"$.id_token\").isNotEmpty())",
          "513:    .andReturn();",
          "518:  public void requestWhenAuthenticationRequestWithoutOfflineAccessScopeThenTokenResponseDoesNotIncludeRefreshToken()",
          "519:    throws Exception {",
          "522:   RegisteredClient registeredClient = TestRegisteredClients.registeredClient().scope(OidcScopes.OPENID).build();",
          "525:   MultiValueMap<String, String> authorizationRequestParameters = getAuthorizationRequestParameters(",
          "526:     registeredClient);",
          "527:   MvcResult mvcResult = this.mvc",
          "528:    .perform(get(DEFAULT_AUTHORIZATION_ENDPOINT_URI).queryParams(authorizationRequestParameters)",
          "529:     .with(user(\"user\")))",
          "530:    .andExpect(status().is3xxRedirection())",
          "531:    .andReturn();",
          "537:   OAuth2Authorization authorization = this.authorizationService.findByToken(authorizationCode,",
          "538:     AUTHORIZATION_CODE_TOKEN_TYPE);",
          "540:   this.mvc",
          "541:    .perform(post(DEFAULT_TOKEN_ENDPOINT_URI).params(getTokenRequestParameters(registeredClient, authorization))",
          "542:     .header(HttpHeaders.AUTHORIZATION,",
          "543:       \"Basic \" + encodeBasicAuth(registeredClient.getClientId(), registeredClient.getClientSecret())))",
          "544:    .andExpect(status().isOk())",
          "545:    .andExpect(header().string(HttpHeaders.CACHE_CONTROL, containsString(\"no-store\")))",
          "546:    .andExpect(header().string(HttpHeaders.PRAGMA, containsString(\"no-cache\")))",
          "547:    .andExpect(jsonPath(\"$.access_token\").isNotEmpty())",
          "548:    .andExpect(jsonPath(\"$.token_type\").isNotEmpty())",
          "549:    .andExpect(jsonPath(\"$.expires_in\").isNotEmpty())",
          "550:    .andExpect(jsonPath(\"$.refresh_token\").doesNotExist())",
          "551:    .andExpect(jsonPath(\"$.scope\").isNotEmpty())",
          "552:    .andExpect(jsonPath(\"$.id_token\").isNotEmpty())",
          "553:    .andReturn();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "729:  @EnableWebSecurity",
          "730:  @Configuration",
          "734:   @Bean",
          "",
          "[Removed Lines]",
          "731:  static class AuthorizationServerConfigurationWithCustomRefreshTokenGenerator extends AuthorizationServerConfiguration {",
          "",
          "[Added Lines]",
          "735:  static class AuthorizationServerConfigurationWithCustomRefreshTokenGenerator",
          "736:    extends AuthorizationServerConfiguration {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "763:   }",
          "765:   private static final class CustomRefreshTokenGenerator implements OAuth2TokenGenerator<OAuth2RefreshToken> {",
          "766:    private final OAuth2RefreshTokenGenerator delegate = new OAuth2RefreshTokenGenerator();",
          "768:    @Nullable",
          "769:    @Override",
          "770:    public OAuth2RefreshToken generate(OAuth2TokenContext context) {",
          "773:      return null;",
          "774:     }",
          "775:     return this.delegate.generate(context);",
          "",
          "[Removed Lines]",
          "771:     if (context.getAuthorizedScopes().contains(OidcScopes.OPENID) &&",
          "772:       !context.getAuthorizedScopes().contains(\"offline_access\")) {",
          "",
          "[Added Lines]",
          "777:     if (context.getAuthorizedScopes().contains(OidcScopes.OPENID)",
          "778:       && !context.getAuthorizedScopes().contains(\"offline_access\")) {",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProviderTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProviderTests.java": [
          "File: oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProviderTests.java -> oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientConfigurationAuthenticationProviderTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:  @Test",
          "120:  public void setClientRegistrationConverterWhenNullThenThrowIllegalArgumentException() {",
          "121:   assertThatIllegalArgumentException()",
          "124:  }",
          "126:  @Test",
          "",
          "[Removed Lines]",
          "122:     .isThrownBy(() -> this.authenticationProvider.setClientRegistrationConverter(null))",
          "123:     .withMessage(\"clientRegistrationConverter cannot be null\");",
          "",
          "[Added Lines]",
          "122:    .isThrownBy(() -> this.authenticationProvider.setClientRegistrationConverter(null))",
          "123:    .withMessage(\"clientRegistrationConverter cannot be null\");",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProviderTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProviderTests.java": [
          "File: oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProviderTests.java -> oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/authentication/OidcClientRegistrationAuthenticationProviderTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "172:  @Test",
          "173:  public void setClientRegistrationConverterWhenNullThenThrowIllegalArgumentException() {",
          "174:   assertThatIllegalArgumentException()",
          "177:  }",
          "179:  @Test",
          "",
          "[Removed Lines]",
          "175:     .isThrownBy(() -> this.authenticationProvider.setClientRegistrationConverter(null))",
          "176:     .withMessage(\"clientRegistrationConverter cannot be null\");",
          "",
          "[Added Lines]",
          "175:    .isThrownBy(() -> this.authenticationProvider.setClientRegistrationConverter(null))",
          "176:    .withMessage(\"clientRegistrationConverter cannot be null\");",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilterTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilterTests.java": [
          "File: oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilterTests.java -> oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/oidc/web/OidcProviderConfigurationEndpointFilterTests.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:   assertThat(providerConfigurationResponse).contains(\"\\\"jwks_uri\\\":\\\"https://example.com/oauth2/v1/jwks\\\"\");",
          "132:   assertThat(providerConfigurationResponse).contains(\"\\\"scopes_supported\\\":[\\\"openid\\\"]\");",
          "133:   assertThat(providerConfigurationResponse).contains(\"\\\"response_types_supported\\\":[\\\"code\\\"]\");",
          "139:   assertThat(providerConfigurationResponse).contains(\"\\\"code_challenge_methods_supported\\\":[\\\"S256\\\"]\");",
          "140:   assertThat(providerConfigurationResponse).contains(\"\\\"subject_types_supported\\\":[\\\"public\\\"]\");",
          "141:   assertThat(providerConfigurationResponse).contains(\"\\\"id_token_signing_alg_values_supported\\\":[\\\"RS256\\\"]\");",
          "",
          "[Removed Lines]",
          "134:   assertThat(providerConfigurationResponse).contains(\"\\\"grant_types_supported\\\":[\\\"authorization_code\\\",\\\"client_credentials\\\",\\\"refresh_token\\\",\\\"urn:ietf:params:oauth:grant-type:device_code\\\"]\");",
          "135:   assertThat(providerConfigurationResponse).contains(\"\\\"revocation_endpoint\\\":\\\"https://example.com/oauth2/v1/revoke\\\"\");",
          "136:   assertThat(providerConfigurationResponse).contains(\"\\\"revocation_endpoint_auth_methods_supported\\\":[\\\"client_secret_basic\\\",\\\"client_secret_post\\\",\\\"client_secret_jwt\\\",\\\"private_key_jwt\\\"]\");",
          "137:   assertThat(providerConfigurationResponse).contains(\"\\\"introspection_endpoint\\\":\\\"https://example.com/oauth2/v1/introspect\\\"\");",
          "138:   assertThat(providerConfigurationResponse).contains(\"\\\"introspection_endpoint_auth_methods_supported\\\":[\\\"client_secret_basic\\\",\\\"client_secret_post\\\",\\\"client_secret_jwt\\\",\\\"private_key_jwt\\\"]\");",
          "",
          "[Added Lines]",
          "134:   assertThat(providerConfigurationResponse).contains(",
          "135:     \"\\\"grant_types_supported\\\":[\\\"authorization_code\\\",\\\"client_credentials\\\",\\\"refresh_token\\\",\\\"urn:ietf:params:oauth:grant-type:device_code\\\"]\");",
          "136:   assertThat(providerConfigurationResponse)",
          "137:    .contains(\"\\\"revocation_endpoint\\\":\\\"https://example.com/oauth2/v1/revoke\\\"\");",
          "138:   assertThat(providerConfigurationResponse).contains(",
          "139:     \"\\\"revocation_endpoint_auth_methods_supported\\\":[\\\"client_secret_basic\\\",\\\"client_secret_post\\\",\\\"client_secret_jwt\\\",\\\"private_key_jwt\\\"]\");",
          "140:   assertThat(providerConfigurationResponse)",
          "141:    .contains(\"\\\"introspection_endpoint\\\":\\\"https://example.com/oauth2/v1/introspect\\\"\");",
          "142:   assertThat(providerConfigurationResponse).contains(",
          "143:     \"\\\"introspection_endpoint_auth_methods_supported\\\":[\\\"client_secret_basic\\\",\\\"client_secret_post\\\",\\\"client_secret_jwt\\\",\\\"private_key_jwt\\\"]\");",
          "",
          "---------------"
        ],
        "oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandlerTests.java||oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandlerTests.java": [
          "File: oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandlerTests.java -> oauth2-authorization-server/src/test/java/org/springframework/security/oauth2/server/authorization/web/authentication/OAuth2ErrorAuthenticationFailureHandlerTests.java"
        ]
      }
    }
  ]
}