{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "16ce8ab16c05c76b58477b86b93a99418d3b51a2",
      "candidate_info": {
        "commit_hash": "16ce8ab16c05c76b58477b86b93a99418d3b51a2",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/16ce8ab16c05c76b58477b86b93a99418d3b51a2",
        "files": [
          "src/lib/apis/users/index.ts"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/apis/users/index.ts||src/lib/apis/users/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/apis/users/index.ts||src/lib/apis/users/index.ts": [
          "File: src/lib/apis/users/index.ts -> src/lib/apis/users/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "285: export const getAndUpdateUserLocation = async (token: string) => {",
          "286:  const location = await getUserPosition().catch((err) => {",
          "288:  });",
          "290:  if (location) {",
          "291:   await updateUserInfo(token, { location: location });",
          "292:   return location;",
          "293:  } else {",
          "295:  }",
          "296: };",
          "",
          "[Removed Lines]",
          "287:   throw err;",
          "294:   throw new Error('Failed to get user location');",
          "",
          "[Added Lines]",
          "287:   console.log(err);",
          "288:   return null;",
          "295:   console.log('Failed to get user location');",
          "296:   return null;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8c1bb0ec53cd1f57e9bc9c12e94d28bc45bcff5",
      "candidate_info": {
        "commit_hash": "b8c1bb0ec53cd1f57e9bc9c12e94d28bc45bcff5",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/b8c1bb0ec53cd1f57e9bc9c12e94d28bc45bcff5",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1204:                                         break",
          "1206:                                 if tool_result:",
          "1208:                                 else:",
          "1211:                             if not raw:",
          "1212:                                 content = f'{content}\\n<details type=\"tool_calls\" done=\"true\" content=\"{html.escape(json.dumps(tool_calls))}\" results=\"{html.escape(json.dumps(results))}\">\\n<summary>Tool Executed</summary>\\n{tool_calls_display_content}\\n</details>\\n'",
          "",
          "[Removed Lines]",
          "1207:                                     tool_calls_display_content = f\"{tool_calls_display_content}\\nExecuted {tool_name}\\n```\\n{tool_call.get('function', {}).get('arguments', '')}\\n```\\n> {tool_result.get('content', '')}\"",
          "1209:                                     tool_calls_display_content = f\"{tool_calls_display_content}\\nExecuted {tool_call.get('function', {}).get('name', '')}\\n```\\n{tool_call.get('function', {}).get('arguments', '')}\\n```\"",
          "",
          "[Added Lines]",
          "1207:                                     tool_calls_display_content = f\"{tool_calls_display_content}\\nExecuted `{tool_name}` with the following arguments:\\n```\\n{tool_call.get('function', {}).get('arguments', '')}\\n```\\n> {tool_result.get('content', '')}\"",
          "1209:                                     tool_calls_display_content = f\"{tool_calls_display_content}\\nExecuted `{tool_call.get('function', {}).get('name', '')}` with the following arguments:\\n```\\n{tool_call.get('function', {}).get('arguments', '')}\\n```\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1214:                             tool_calls_display_content = \"\"",
          "1216:                             for tool_call in tool_calls:",
          "1219:                             if not raw:",
          "1220:                                 content = f'{content}\\n<details type=\"tool_calls\" done=\"false\" content=\"{html.escape(json.dumps(tool_calls))}\">\\n<summary>Tool Executing...</summary>\\n{tool_calls_display_content}\\n</details>\\n'",
          "",
          "[Removed Lines]",
          "1217:                                 tool_calls_display_content = f\"{tool_calls_display_content}\\nExecuting {tool_call.get('function', {}).get('name', '')}\\n```\\n{tool_call.get('function', {}).get('arguments', '')}\\n```\"",
          "",
          "[Added Lines]",
          "1217:                                 tool_calls_display_content = f\"{tool_calls_display_content}\\nExecuting `{tool_call.get('function', {}).get('name', '')}` with the following arguments:\\n```\\n{tool_call.get('function', {}).get('arguments', '')}\\n```\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1ff69721adf5c8de9e11dd9d4124d8e5e954862",
      "candidate_info": {
        "commit_hash": "c1ff69721adf5c8de9e11dd9d4124d8e5e954862",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/c1ff69721adf5c8de9e11dd9d4124d8e5e954862",
        "files": [
          "backend/open_webui/routers/files.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/files.py||backend/open_webui/routers/files.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/files.py||backend/open_webui/routers/files.py": [
          "File: backend/open_webui/routers/files.py -> backend/open_webui/routers/files.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: @router.get(\"/\", response_model=list[FileModelResponse])",
          "168:     if user.role == \"admin\":",
          "169:         files = Files.get_files()",
          "170:     else:",
          "171:         files = Files.get_files_by_user_id(user.id)",
          "174:         for file in files:",
          "176:     return files",
          "",
          "[Removed Lines]",
          "165: async def list_files(",
          "166:     user=Depends(get_verified_user), include_content: bool = Query(True)",
          "167: ):",
          "173:     if not include_content:",
          "175:             file.data[\"content\"] = \"\"",
          "",
          "[Added Lines]",
          "165: async def list_files(user=Depends(get_verified_user), content: bool = Query(True)):",
          "171:     if not content:",
          "173:             del file.data[\"content\"]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7d8ed0c6dc6b66ee9d37dc3a7d9812da71a7d7f",
      "candidate_info": {
        "commit_hash": "a7d8ed0c6dc6b66ee9d37dc3a7d9812da71a7d7f",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/a7d8ed0c6dc6b66ee9d37dc3a7d9812da71a7d7f",
        "files": [
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1493:        params?.system ?? $settings?.system ?? '',",
          "1494:        $user.name,",
          "1495:        $settings?.userLocation",
          "1497:         : undefined",
          "1498:       )}${",
          "1499:        (responseMessage?.userContext ?? null)",
          "",
          "[Removed Lines]",
          "1496:         ? await getAndUpdateUserLocation(localStorage.token)",
          "",
          "[Added Lines]",
          "1496:         ? await getAndUpdateUserLocation(localStorage.token).catch((err) => {",
          "1497:           console.error(err);",
          "1498:           return undefined;",
          "1499:          })",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1578:     variables: {",
          "1579:      ...getPromptVariables(",
          "1580:       $user.name,",
          "1582:      )",
          "1583:     },",
          "1584:     model_item: $models.find((m) => m.id === model.id),",
          "",
          "[Removed Lines]",
          "1581:       $settings?.userLocation ? await getAndUpdateUserLocation(localStorage.token) : undefined",
          "",
          "[Added Lines]",
          "1584:       $settings?.userLocation",
          "1585:        ? await getAndUpdateUserLocation(localStorage.token).catch((err) => {",
          "1586:          console.error(err);",
          "1587:          return undefined;",
          "1588:         })",
          "1589:        : undefined",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a75a855566065563fe2139e6ce82e08811403ae",
      "candidate_info": {
        "commit_hash": "2a75a855566065563fe2139e6ce82e08811403ae",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/2a75a855566065563fe2139e6ce82e08811403ae",
        "files": [
          "src/lib/components/layout/Sidebar/ChatItem.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/layout/Sidebar/ChatItem.svelte||src/lib/components/layout/Sidebar/ChatItem.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/layout/Sidebar/ChatItem.svelte||src/lib/components/layout/Sidebar/ChatItem.svelte": [
          "File: src/lib/components/layout/Sidebar/ChatItem.svelte -> src/lib/components/layout/Sidebar/ChatItem.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:  </DragGhost>",
          "228: {/if}",
          "231:  {#if confirmEdit}",
          "232:   <div",
          "233:    class=\" w-full flex justify-between rounded-lg px-[11px] py-[6px] {id === $chatId ||",
          "",
          "[Removed Lines]",
          "230: <div bind:this={itemElement} class=\" w-full {className} relative group\" {draggable}>",
          "",
          "[Added Lines]",
          "230: <div",
          "231:  bind:this={itemElement}",
          "232:  class=\" w-full {className} relative group\"",
          "233:  draggable={draggable && !confirmEdit}",
          "234: >",
          "",
          "---------------"
        ]
      }
    }
  ]
}