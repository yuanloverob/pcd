{
  "cve_id": "CVE-2024-11734",
  "cve_desc": "A denial of service vulnerability was found in Keycloak that could allow an administrative user with the right to change realm settings to disrupt the service. This action is done by modifying any of the security headers and inserting newlines, which causes the Keycloak server to write to a request that has already been terminated, leading to the failure of said request.",
  "repo": "keycloak/keycloak",
  "patch_hash": "93b2a7327b2557eb132a8169086c5e63c81dff79",
  "patch_info": {
    "commit_hash": "93b2a7327b2557eb132a8169086c5e63c81dff79",
    "repo": "keycloak/keycloak",
    "commit_url": "https://github.com/keycloak/keycloak/commit/93b2a7327b2557eb132a8169086c5e63c81dff79",
    "files": [
      "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java",
      "services/src/main/java/org/keycloak/services/managers/RealmManager.java",
      "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java",
      "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java"
    ],
    "message": "EMBARGOED CVE-2024-11734 org.keycloak/keycloak-quarkus-server: Denial of Service in Keycloak Server via Security Headers (#228)\n\nSigned-off-by: Douglas Palmer <dpalmer@redhat.com>",
    "before_after_code_files": [
      "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java||server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java",
      "services/src/main/java/org/keycloak/services/managers/RealmManager.java||services/src/main/java/org/keycloak/services/managers/RealmManager.java",
      "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java||services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java",
      "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java"
    ]
  },
  "patch_diff": {
    "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java||server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java": [
      "File: server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java -> server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "19: import jakarta.ws.rs.BadRequestException;",
      "20: import org.jboss.logging.Logger;",
      "22: import java.util.regex.Matcher;",
      "23: import java.util.regex.Pattern;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "22: import java.util.Map;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "39:     private ReservedCharValidator() {}",
      "42:         if (str == null) return;",
      "44:         Matcher matcher = pattern.matcher(str);",
      "45:         if (matcher.find()) {",
      "47:             logger.warn(message);",
      "48:             throw new ReservedCharException(message);",
      "49:         }",
      "50:     }",
      "52:     public static void validateNoSpace(String str) {",
      "64:         validate(str, RESERVED_CHARS_PATTERN);",
      "65:     }",
      "67:     public static void validate(String str) {",
      "68:         validate(str, RESERVED_CHARS_PATTERN);",
      "69:     }",
      "",
      "[Removed Lines]",
      "41:     public static void validate(String str, Pattern pattern) throws ReservedCharException {",
      "46:             String message = \"Character '\" + matcher.group() + \"' not allowed.\";",
      "53:         if (str == null) return;",
      "55:         Pattern pattern = Pattern.compile(\"\\\\s\");",
      "56:         Matcher matcher = pattern.matcher(str);",
      "58:         if (matcher.find()) {",
      "59:             String message = \"Empty Space not allowed.\";",
      "60:             logger.warn(message);",
      "61:             throw new ReservedCharException(message);",
      "62:         }",
      "",
      "[Added Lines]",
      "42:     public static void validate(String str, Pattern pattern) {",
      "43:         validate(str, pattern, null);",
      "44:     }",
      "46:     public static void validate(String str, Pattern pattern, String message) throws ReservedCharException {",
      "51:             if(message == null) {",
      "52:                 message = \"Character '\" + matcher.group() + \"' not allowed.\";",
      "53:             }",
      "60:         validate(str, Pattern.compile(\"\\\\s\"), \"Empty Space not allowed.\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "75:             validate(str, RESERVED_CHARS_LOCALES_PATTERN);",
      "76:         }",
      "77:     }",
      "79:     public static class ReservedCharException extends BadRequestException {",
      "80:         ReservedCharException(String msg) {",
      "81:             super(msg);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76:     public static void validateSecurityHeaders(Map<String, String> headers) {",
      "77:         if (headers == null) return;",
      "79:         for (Map.Entry<String, String> entry : headers.entrySet()) {",
      "80:             validate(entry.getKey(), Pattern.compile(\"\\\\n\"), \"Newline not allowed.\");",
      "81:             validate(entry.getValue(), Pattern.compile(\"\\\\n\"), \"Newline not allowed.\");",
      "82:         }",
      "83:     }",
      "",
      "---------------"
    ],
    "services/src/main/java/org/keycloak/services/managers/RealmManager.java||services/src/main/java/org/keycloak/services/managers/RealmManager.java": [
      "File: services/src/main/java/org/keycloak/services/managers/RealmManager.java -> services/src/main/java/org/keycloak/services/managers/RealmManager.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "536:             session.getContext().setRealm(realm);",
      "537:             ReservedCharValidator.validate(rep.getRealm());",
      "538:             ReservedCharValidator.validateLocales(rep.getSupportedLocales());",
      "539:             realm.setName(rep.getRealm());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "539:             ReservedCharValidator.validateSecurityHeaders(rep.getBrowserSecurityHeaders());",
      "",
      "---------------"
    ],
    "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java||services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java": [
      "File: services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java -> services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "418:             throw ErrorResponse.error(\"Can't rename master realm\", Status.BAD_REQUEST);",
      "419:         }",
      "424:         try {",
      "425:             if (!Constants.GENERATE.equals(rep.getPublicKey()) && (rep.getPrivateKey() != null && rep.getPublicKey() != null)) {",
      "",
      "[Removed Lines]",
      "421:         ReservedCharValidator.validate(rep.getRealm());",
      "422:         ReservedCharValidator.validateLocales(rep.getSupportedLocales());",
      "",
      "[Added Lines]",
      "421:         try {",
      "422:             ReservedCharValidator.validate(rep.getRealm());",
      "423:             ReservedCharValidator.validateLocales(rep.getSupportedLocales());",
      "424:             ReservedCharValidator.validateSecurityHeaders(rep.getBrowserSecurityHeaders());",
      "425:         } catch (ReservedCharValidator.ReservedCharException e) {",
      "426:             logger.error(e.getMessage(), e);",
      "427:             throw ErrorResponse.error(e.getMessage(), Status.BAD_REQUEST);",
      "428:         }",
      "",
      "---------------"
    ],
    "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java": [
      "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: package org.keycloak.testsuite.oauth;",
      "20: import org.apache.commons.io.IOUtils;",
      "21: import org.apache.http.Header;",
      "22: import org.apache.http.NameValuePair;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import jakarta.ws.rs.BadRequestException;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: import org.keycloak.models.BrowserSecurityHeaders;",
      "36: import org.keycloak.models.Constants;",
      "37: import org.keycloak.representations.idm.ClientRepresentation;",
      "38: import org.keycloak.representations.idm.RealmRepresentation;",
      "39: import org.keycloak.testsuite.AbstractKeycloakTest;",
      "40: import org.keycloak.testsuite.ActionURIUtils;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: import org.keycloak.representations.idm.ErrorRepresentation;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "57: import static org.junit.Assert.assertNotNull;",
      "58: import static org.junit.Assert.assertNull;",
      "59: import static org.junit.Assert.assertTrue;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62: import static org.junit.Assert.fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "219:         }",
      "220:     }",
      "222:     @Override",
      "223:     public void addTestRealms(List<RealmRepresentation> testRealms) {",
      "224:         testRealms.add(RealmBuilder.create().name(\"test\").build());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "225:     @Test",
      "226:     public void checkCspWithNewline() throws Exception {",
      "227:         try {",
      "228:             new RealmAttributeUpdater(adminClient.realm(\"test\"))",
      "229:                     .setBrowserSecurityHeader(BrowserSecurityHeaders.CONTENT_SECURITY_POLICY.getKey(), \"test\\ntest\")",
      "230:                     .update();",
      "231:             fail(\"Validation should fail due to newline\");",
      "232:         }",
      "233:         catch (BadRequestException ex) {",
      "234:             ErrorRepresentation errorRep = ex.getResponse().readEntity(ErrorRepresentation.class);",
      "235:             assertEquals(\"Newline not allowed.\", errorRep.getErrorMessage());",
      "236:         }",
      "237:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b3fa8b7a77166d34b5a88a4cee94306ae339fdb",
      "candidate_info": {
        "commit_hash": "6b3fa8b7a77166d34b5a88a4cee94306ae339fdb",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/6b3fa8b7a77166d34b5a88a4cee94306ae339fdb",
        "files": [
          "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java",
          "services/src/main/java/org/keycloak/services/resources/admin/IdentityProvidersResource.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java"
        ],
        "message": "Invalid redirect uri when identity provider alias has spaces (#22840)\n\ncloses #22836\n\n\nCo-authored-by: Marek Posolda <mposolda@gmail.com>",
        "before_after_code_files": [
          "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java||server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java",
          "services/src/main/java/org/keycloak/services/resources/admin/IdentityProvidersResource.java||services/src/main/java/org/keycloak/services/resources/admin/IdentityProvidersResource.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java||server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java"
          ],
          "candidate": [
            "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java||server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java"
          ]
        }
      },
      "candidate_diff": {
        "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java||server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java": [
          "File: server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java -> server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:             throw new ReservedCharException(message);",
          "49:         }",
          "50:     }",
          "52:     public static void validate(String str) {",
          "53:         validate(str, RESERVED_CHARS_PATTERN);",
          "54:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     public static void validateNoSpace(String str) {",
          "53:         if (str == null) return;",
          "55:         Pattern pattern = Pattern.compile(\"\\\\s\");",
          "56:         Matcher matcher = pattern.matcher(str);",
          "58:         if (matcher.find()) {",
          "59:             String message = \"Empty Space not allowed.\";",
          "60:             logger.warn(message);",
          "61:             throw new ReservedCharException(message);",
          "62:         }",
          "64:         validate(str, RESERVED_CHARS_PATTERN);",
          "65:     }",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/services/resources/admin/IdentityProvidersResource.java||services/src/main/java/org/keycloak/services/resources/admin/IdentityProvidersResource.java": [
          "File: services/src/main/java/org/keycloak/services/resources/admin/IdentityProvidersResource.java -> services/src/main/java/org/keycloak/services/resources/admin/IdentityProvidersResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:         if (data == null || !(data.containsKey(\"providerId\") && data.containsKey(\"fromUrl\"))) {",
          "150:             throw new BadRequestException();",
          "151:         }",
          "155:         String providerId = data.get(\"providerId\").toString();",
          "156:         String from = data.get(\"fromUrl\").toString();",
          "157:         InputStream inputStream = session.getProvider(HttpClientProvider.class).get(from);",
          "",
          "[Removed Lines]",
          "153:         ReservedCharValidator.validate((String)data.get(\"alias\"));",
          "",
          "[Added Lines]",
          "153:         ReservedCharValidator.validateNoSpace((String)data.get(\"alias\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:     public Response create(@Parameter(description = \"JSON body\") IdentityProviderRepresentation representation) {",
          "240:         this.auth.realm().requireManageIdentityProviders();",
          "244:         try {",
          "245:             IdentityProviderModel identityProvider = RepresentationToModel.toModel(realm, representation, session);",
          "",
          "[Removed Lines]",
          "242:         ReservedCharValidator.validate(representation.getAlias());",
          "",
          "[Added Lines]",
          "242:         ReservedCharValidator.validateNoSpace(representation.getAlias());",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/admin/IdentityProviderTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.testsuite.admin;",
          "20: import org.jboss.resteasy.plugins.providers.multipart.MultipartFormDataOutput;",
          "21: import org.junit.Test;",
          "22: import org.keycloak.admin.client.resource.IdentityProviderResource;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import static org.hamcrest.MatcherAssert.assertThat;",
          "21: import static org.hamcrest.Matchers.containsInAnyOrder;",
          "22: import static org.hamcrest.Matchers.containsString;",
          "23: import static org.hamcrest.Matchers.empty;",
          "24: import static org.hamcrest.Matchers.equalTo;",
          "25: import static org.hamcrest.Matchers.hasEntry;",
          "26: import static org.hamcrest.Matchers.hasSize;",
          "27: import static org.hamcrest.Matchers.is;",
          "28: import static org.hamcrest.Matchers.not;",
          "29: import static org.hamcrest.Matchers.notNullValue;",
          "30: import static org.junit.Assert.assertEquals;",
          "31: import static org.junit.Assert.assertFalse;",
          "32: import static org.junit.Assert.assertNotNull;",
          "33: import static org.junit.Assert.assertNull;",
          "34: import static org.junit.Assert.assertThrows;",
          "35: import static org.junit.Assert.assertTrue;",
          "36: import static org.junit.Assert.fail;",
          "37: import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.XMLDSIG_NSURI;",
          "39: import java.io.ByteArrayInputStream;",
          "40: import java.io.IOException;",
          "41: import java.net.URI;",
          "42: import java.net.URISyntaxException;",
          "43: import java.net.URL;",
          "44: import java.nio.charset.Charset;",
          "45: import java.nio.file.Files;",
          "46: import java.nio.file.Paths;",
          "47: import java.security.PublicKey;",
          "48: import java.security.cert.CertificateEncodingException;",
          "49: import java.security.cert.X509Certificate;",
          "50: import java.util.Arrays;",
          "51: import java.util.Base64;",
          "52: import java.util.Collections;",
          "53: import java.util.HashMap;",
          "54: import java.util.HashSet;",
          "55: import java.util.List;",
          "56: import java.util.Map;",
          "57: import java.util.Set;",
          "58: import java.util.UUID;",
          "60: import javax.xml.crypto.dsig.XMLSignature;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47: import org.keycloak.saml.common.exceptions.ParsingException;",
          "48: import org.keycloak.saml.common.exceptions.ProcessingException;",
          "49: import org.keycloak.saml.common.util.DocumentUtil;",
          "50: import org.keycloak.saml.processing.api.saml.v2.sig.SAML2Signature;",
          "51: import org.keycloak.saml.processing.core.parsers.saml.SAMLParser;",
          "52: import org.keycloak.saml.processing.core.util.XMLSignatureUtil;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92: import org.keycloak.saml.common.util.XmlKeyInfoKeyNameTransformer;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56: import org.keycloak.testsuite.updaters.RealmAttributeUpdater;",
          "57: import org.keycloak.testsuite.util.AdminEventPaths;",
          "58: import org.keycloak.testsuite.util.KeyUtils;",
          "59: import org.w3c.dom.Document;",
          "60: import org.w3c.dom.Element;",
          "61: import org.w3c.dom.NodeList;",
          "63: import jakarta.ws.rs.ClientErrorException;",
          "64: import jakarta.ws.rs.NotFoundException;",
          "65: import jakarta.ws.rs.core.MediaType;",
          "66: import jakarta.ws.rs.core.Response;",
          "",
          "[Removed Lines]",
          "67: import javax.xml.crypto.dsig.XMLSignature;",
          "68: import java.io.ByteArrayInputStream;",
          "69: import java.io.IOException;",
          "70: import java.net.URI;",
          "71: import java.net.URISyntaxException;",
          "72: import java.net.URL;",
          "73: import java.nio.charset.Charset;",
          "74: import java.nio.file.Files;",
          "75: import java.nio.file.Paths;",
          "76: import java.security.PublicKey;",
          "77: import java.security.cert.CertificateEncodingException;",
          "78: import java.security.cert.X509Certificate;",
          "79: import java.util.Arrays;",
          "80: import java.util.Base64;",
          "81: import java.util.Collections;",
          "82: import java.util.HashMap;",
          "83: import java.util.HashSet;",
          "84: import java.util.List;",
          "85: import java.util.Map;",
          "86: import java.util.Set;",
          "87: import java.util.UUID;",
          "89: import static org.hamcrest.Matchers.containsInAnyOrder;",
          "90: import static org.hamcrest.Matchers.containsString;",
          "91: import static org.hamcrest.Matchers.empty;",
          "92: import static org.hamcrest.Matchers.equalTo;",
          "93: import static org.hamcrest.Matchers.hasEntry;",
          "94: import static org.hamcrest.Matchers.hasSize;",
          "95: import static org.hamcrest.Matchers.is;",
          "96: import static org.hamcrest.Matchers.not;",
          "97: import static org.hamcrest.Matchers.notNullValue;",
          "98: import static org.junit.Assert.assertEquals;",
          "99: import static org.junit.Assert.assertFalse;",
          "100: import static org.junit.Assert.assertNull;",
          "101: import static org.junit.Assert.assertNotNull;",
          "102: import static org.hamcrest.MatcherAssert.assertThat;",
          "103: import static org.junit.Assert.assertTrue;",
          "104: import static org.junit.Assert.fail;",
          "105: import static org.keycloak.saml.common.constants.JBossSAMLURIConstants.XMLDSIG_NSURI;",
          "107: import org.keycloak.saml.common.util.XmlKeyInfoKeyNameTransformer;",
          "",
          "[Added Lines]",
          "102: import org.keycloak.utils.ReservedCharValidator.ReservedCharException;",
          "107: import jakarta.ws.rs.BadRequestException;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "271:             }",
          "272:         }",
          "273:     }",
          "275:     @Test",
          "276:     public void testCreateWithBasicAuth() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:     @Test",
          "280:     public void shouldFailWhenAliasHasSpaceDuringCreation() {",
          "281:         IdentityProviderRepresentation newIdentityProvider = createRep(\"New Identity Provider\", \"oidc\");",
          "283:         newIdentityProvider.getConfig().put(IdentityProviderModel.SYNC_MODE, \"IMPORT\");",
          "284:         newIdentityProvider.getConfig().put(\"clientId\", \"clientId\");",
          "285:         newIdentityProvider.getConfig().put(\"clientSecret\", \"some secret value\");",
          "286:         newIdentityProvider.getConfig().put(\"clientAuthMethod\",OIDCLoginProtocol.CLIENT_SECRET_BASIC);",
          "288:         try (Response response = this.realm.identityProviders().create(newIdentityProvider)) {",
          "289:             assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());",
          "290:             String error = response.readEntity(String.class);",
          "291:             assertTrue(error.contains(\"Empty Space not allowed.\"));",
          "292:         }",
          "293:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "681:         response.close();",
          "682:     }",
          "684:     @Test",
          "685:     public void testSamlImportAndExport() throws URISyntaxException, IOException, ParsingException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:     @Test",
          "705:     public void importShouldFailDueAliasWithSpace() {",
          "707:         Map<String, Object> data = new HashMap<>();",
          "708:         data.put(\"providerId\", \"saml\");",
          "709:         data.put(\"alias\", \"Alias With Space\");",
          "710:         data.put(\"fromUrl\", \"http://\");",
          "712:        assertThrows(BadRequestException.class, () -> {",
          "713:             realm.identityProviders().importFrom(data);",
          "714:         });",
          "716:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd9db3a00e0d2fd9f5d37717155f817af5e04beb",
      "candidate_info": {
        "commit_hash": "fd9db3a00e0d2fd9f5d37717155f817af5e04beb",
        "repo": "keycloak/keycloak",
        "commit_url": "https://github.com/keycloak/keycloak/commit/fd9db3a00e0d2fd9f5d37717155f817af5e04beb",
        "files": [
          "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java",
          "services/src/main/java/org/keycloak/services/managers/RealmManager.java",
          "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java"
        ],
        "message": "EMBARGOED CVE-2024-11734 org.keycloak/keycloak-quarkus-server: Denial of Service in Keycloak Server via Security Headers (#228) (#36470)\n\nSigned-off-by: Douglas Palmer <dpalmer@redhat.com>\nCo-authored-by: Douglas Palmer <dpalmer@redhat.com>",
        "before_after_code_files": [
          "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java||server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java",
          "services/src/main/java/org/keycloak/services/managers/RealmManager.java||services/src/main/java/org/keycloak/services/managers/RealmManager.java",
          "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java||services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java",
          "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java||server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java",
            "services/src/main/java/org/keycloak/services/managers/RealmManager.java||services/src/main/java/org/keycloak/services/managers/RealmManager.java",
            "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java||services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java"
          ],
          "candidate": [
            "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java||server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java",
            "services/src/main/java/org/keycloak/services/managers/RealmManager.java||services/src/main/java/org/keycloak/services/managers/RealmManager.java",
            "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java||services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java",
            "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java"
          ]
        }
      },
      "candidate_diff": {
        "server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java||server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java": [
          "File: server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java -> server-spi-private/src/main/java/org/keycloak/utils/ReservedCharValidator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: import jakarta.ws.rs.BadRequestException;",
          "20: import org.jboss.logging.Logger;",
          "22: import java.util.regex.Matcher;",
          "23: import java.util.regex.Pattern;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     private ReservedCharValidator() {}",
          "42:         if (str == null) return;",
          "44:         Matcher matcher = pattern.matcher(str);",
          "45:         if (matcher.find()) {",
          "47:             logger.warn(message);",
          "48:             throw new ReservedCharException(message);",
          "49:         }",
          "50:     }",
          "52:     public static void validateNoSpace(String str) {",
          "64:         validate(str, RESERVED_CHARS_PATTERN);",
          "65:     }",
          "67:     public static void validate(String str) {",
          "68:         validate(str, RESERVED_CHARS_PATTERN);",
          "69:     }",
          "",
          "[Removed Lines]",
          "41:     public static void validate(String str, Pattern pattern) throws ReservedCharException {",
          "46:             String message = \"Character '\" + matcher.group() + \"' not allowed.\";",
          "53:         if (str == null) return;",
          "55:         Pattern pattern = Pattern.compile(\"\\\\s\");",
          "56:         Matcher matcher = pattern.matcher(str);",
          "58:         if (matcher.find()) {",
          "59:             String message = \"Empty Space not allowed.\";",
          "60:             logger.warn(message);",
          "61:             throw new ReservedCharException(message);",
          "62:         }",
          "",
          "[Added Lines]",
          "42:     public static void validate(String str, Pattern pattern) {",
          "43:         validate(str, pattern, null);",
          "44:     }",
          "46:     public static void validate(String str, Pattern pattern, String message) throws ReservedCharException {",
          "51:             if(message == null) {",
          "52:                 message = \"Character '\" + matcher.group() + \"' not allowed.\";",
          "53:             }",
          "60:         validate(str, Pattern.compile(\"\\\\s\"), \"Empty Space not allowed.\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75:             validate(str, RESERVED_CHARS_LOCALES_PATTERN);",
          "76:         }",
          "77:     }",
          "79:     public static class ReservedCharException extends BadRequestException {",
          "80:         ReservedCharException(String msg) {",
          "81:             super(msg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:     public static void validateSecurityHeaders(Map<String, String> headers) {",
          "77:         if (headers == null) return;",
          "79:         for (Map.Entry<String, String> entry : headers.entrySet()) {",
          "80:             validate(entry.getKey(), Pattern.compile(\"\\\\n\"), \"Newline not allowed.\");",
          "81:             validate(entry.getValue(), Pattern.compile(\"\\\\n\"), \"Newline not allowed.\");",
          "82:         }",
          "83:     }",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/services/managers/RealmManager.java||services/src/main/java/org/keycloak/services/managers/RealmManager.java": [
          "File: services/src/main/java/org/keycloak/services/managers/RealmManager.java -> services/src/main/java/org/keycloak/services/managers/RealmManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "549:             session.getContext().setRealm(realm);",
          "550:             ReservedCharValidator.validate(rep.getRealm());",
          "551:             ReservedCharValidator.validateLocales(rep.getSupportedLocales());",
          "552:             realm.setName(rep.getRealm());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "552:             ReservedCharValidator.validateSecurityHeaders(rep.getBrowserSecurityHeaders());",
          "",
          "---------------"
        ],
        "services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java||services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java": [
          "File: services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java -> services/src/main/java/org/keycloak/services/resources/admin/RealmAdminResource.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "418:             throw ErrorResponse.error(\"Can't rename master realm\", Status.BAD_REQUEST);",
          "419:         }",
          "424:         try {",
          "425:             if (!Constants.GENERATE.equals(rep.getPublicKey()) && (rep.getPrivateKey() != null && rep.getPublicKey() != null)) {",
          "",
          "[Removed Lines]",
          "421:         ReservedCharValidator.validate(rep.getRealm());",
          "422:         ReservedCharValidator.validateLocales(rep.getSupportedLocales());",
          "",
          "[Added Lines]",
          "421:         try {",
          "422:             ReservedCharValidator.validate(rep.getRealm());",
          "423:             ReservedCharValidator.validateLocales(rep.getSupportedLocales());",
          "424:             ReservedCharValidator.validateSecurityHeaders(rep.getBrowserSecurityHeaders());",
          "425:         } catch (ReservedCharValidator.ReservedCharException e) {",
          "426:             logger.error(e.getMessage(), e);",
          "427:             throw ErrorResponse.error(e.getMessage(), Status.BAD_REQUEST);",
          "428:         }",
          "",
          "---------------"
        ],
        "testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java||testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java": [
          "File: testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java -> testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/oauth/LoginStatusIframeEndpointTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package org.keycloak.testsuite.oauth;",
          "20: import org.apache.commons.io.IOUtils;",
          "21: import org.apache.http.Header;",
          "22: import org.apache.http.NameValuePair;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: import jakarta.ws.rs.BadRequestException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: import org.keycloak.models.BrowserSecurityHeaders;",
          "36: import org.keycloak.models.Constants;",
          "37: import org.keycloak.representations.idm.ClientRepresentation;",
          "38: import org.keycloak.representations.idm.RealmRepresentation;",
          "39: import org.keycloak.testsuite.AbstractKeycloakTest;",
          "40: import org.keycloak.testsuite.ActionURIUtils;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.keycloak.representations.idm.ErrorRepresentation;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58: import static org.junit.Assert.assertNotNull;",
          "59: import static org.junit.Assert.assertNull;",
          "60: import static org.junit.Assert.assertTrue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: import static org.junit.Assert.fail;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "220:         }",
          "221:     }",
          "223:     @Override",
          "224:     public void addTestRealms(List<RealmRepresentation> testRealms) {",
          "225:         testRealms.add(RealmBuilder.create().name(\"test\").build());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:     @Test",
          "227:     public void checkCspWithNewline() throws Exception {",
          "228:         try {",
          "229:             new RealmAttributeUpdater(adminClient.realm(\"test\"))",
          "230:                     .setBrowserSecurityHeader(BrowserSecurityHeaders.CONTENT_SECURITY_POLICY.getKey(), \"test\\ntest\")",
          "231:                     .update();",
          "232:             fail(\"Validation should fail due to newline\");",
          "233:         }",
          "234:         catch (BadRequestException ex) {",
          "235:             ErrorRepresentation errorRep = ex.getResponse().readEntity(ErrorRepresentation.class);",
          "236:             assertEquals(\"Newline not allowed.\", errorRep.getErrorMessage());",
          "237:         }",
          "238:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}