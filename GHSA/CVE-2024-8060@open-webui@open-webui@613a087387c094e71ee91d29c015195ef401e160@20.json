{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a28436237c265011d698af0b5974140b4dbf8421",
      "candidate_info": {
        "commit_hash": "a28436237c265011d698af0b5974140b4dbf8421",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/a28436237c265011d698af0b5974140b4dbf8421",
        "files": [
          "src/lib/components/layout/Sidebar.svelte",
          "src/lib/components/layout/Sidebar/RecursiveFolder.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/layout/Sidebar.svelte||src/lib/components/layout/Sidebar.svelte",
          "src/lib/components/layout/Sidebar/RecursiveFolder.svelte||src/lib/components/layout/Sidebar/RecursiveFolder.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/layout/Sidebar.svelte||src/lib/components/layout/Sidebar.svelte": [
          "File: src/lib/components/layout/Sidebar.svelte -> src/lib/components/layout/Sidebar.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "93:    folders[folder.id] = { ...(folders[folder.id] || {}), ...folder };",
          "95:    if (newFolderId && folder.id === newFolderId) {",
          "97:     newFolderId = null;",
          "98:    }",
          "99:   }",
          "",
          "[Removed Lines]",
          "96:     folders[folder.id].isNew = true;",
          "",
          "[Added Lines]",
          "96:     folders[folder.id].new = true;",
          "",
          "---------------"
        ],
        "src/lib/components/layout/Sidebar/RecursiveFolder.svelte||src/lib/components/layout/Sidebar/RecursiveFolder.svelte": [
          "File: src/lib/components/layout/Sidebar/RecursiveFolder.svelte -> src/lib/components/layout/Sidebar/RecursiveFolder.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "201:   dragged = false;",
          "202:  };",
          "205:   open = folders[folderId].is_expanded;",
          "206:   if (folderElement) {",
          "207:    folderElement.addEventListener('dragover', onDragOver);",
          "",
          "[Removed Lines]",
          "204:  onMount(() => {",
          "",
          "[Added Lines]",
          "204:  onMount(async () => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:    folderElement.addEventListener('dragend', onDragEnd);",
          "217:   }",
          "225:   }",
          "226:  });",
          "",
          "[Removed Lines]",
          "219:   if (folders[folderId].isNew) {",
          "220:    folders[folderId].isNew = false;",
          "222:    setTimeout(() => {",
          "223:     editHandler();",
          "224:    }, 100);",
          "",
          "[Added Lines]",
          "219:   if (folders[folderId]?.new) {",
          "220:    delete folders[folderId].new;",
          "222:    await tick();",
          "223:    editHandler();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "658944e75671c140492fdebb9296a0ce94a493ea",
      "candidate_info": {
        "commit_hash": "658944e75671c140492fdebb9296a0ce94a493ea",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/658944e75671c140492fdebb9296a0ce94a493ea",
        "files": [
          "backend/open_webui/routers/auths.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/auths.py||backend/open_webui/routers/auths.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/auths.py||backend/open_webui/routers/auths.py": [
          "File: backend/open_webui/routers/auths.py -> backend/open_webui/routers/auths.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "424: @router.post(\"/signup\", response_model=SessionUserResponse)",
          "425: async def signup(request: Request, response: Response, form_data: SignupForm):",
          "428:     if WEBUI_AUTH:",
          "429:         if (",
          "",
          "[Removed Lines]",
          "426:     user_count = Users.get_num_users()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434:                 status.HTTP_403_FORBIDDEN, detail=ERROR_MESSAGES.ACCESS_PROHIBITED",
          "435:             )",
          "436:     else:",
          "438:             raise HTTPException(",
          "439:                 status.HTTP_403_FORBIDDEN, detail=ERROR_MESSAGES.ACCESS_PROHIBITED",
          "440:             )",
          "442:     if request.app.state.USER_COUNT and user_count >= request.app.state.USER_COUNT:",
          "443:         raise HTTPException(",
          "444:             status.HTTP_403_FORBIDDEN, detail=ERROR_MESSAGES.ACCESS_PROHIBITED",
          "",
          "[Removed Lines]",
          "437:         if user_count != 0:",
          "",
          "[Added Lines]",
          "436:         if Users.get_num_users() != 0:",
          "441:     user_count = Users.get_num_users()",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cdb49049991f816334ec393aea8801936cd756e2",
      "candidate_info": {
        "commit_hash": "cdb49049991f816334ec393aea8801936cd756e2",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/cdb49049991f816334ec393aea8801936cd756e2",
        "files": [
          "backend/open_webui/routers/chats.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/chats.py||backend/open_webui/routers/chats.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/chats.py||backend/open_webui/routers/chats.py": [
          "File: backend/open_webui/routers/chats.py -> backend/open_webui/routers/chats.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "580: @router.post(\"/{id}/clone/shared\", response_model=Optional[ChatResponse])",
          "581: async def clone_shared_chat_by_id(id: str, user=Depends(get_verified_user)):",
          "583:     if chat:",
          "584:         updated_chat = {",
          "",
          "[Removed Lines]",
          "582:     chat = Chats.get_chat_by_share_id(id)",
          "",
          "[Added Lines]",
          "583:     if user.role == \"admin\":",
          "584:         chat = Chats.get_chat_by_id(id)",
          "585:     else:",
          "586:         chat = Chats.get_chat_by_share_id(id)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9cb1104f09123d91fea25ff69f22b84d49009f6f",
      "candidate_info": {
        "commit_hash": "9cb1104f09123d91fea25ff69f22b84d49009f6f",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/9cb1104f09123d91fea25ff69f22b84d49009f6f",
        "files": [
          "backend/open_webui/main.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/main.py||backend/open_webui/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1053:     model_item = form_data.pop(\"model_item\", {})",
          "1054:     tasks = form_data.pop(\"background_tasks\", None)",
          "1057:     metadata = {}",
          "1059:     try:",
          "1060:         if not model_item.get(\"direct\", False):",
          "1061:             model_id = form_data.get(\"model\", None)",
          "",
          "[Removed Lines]",
          "1056:     # placeholder",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9b44c6bf2834fa36c5b54cd6706ab699553a384",
      "candidate_info": {
        "commit_hash": "f9b44c6bf2834fa36c5b54cd6706ab699553a384",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/f9b44c6bf2834fa36c5b54cd6706ab699553a384",
        "files": [
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1938:   <PaneGroup direction=\"horizontal\" class=\"w-full h-full\">",
          "1939:    <Pane defaultSize={50} class=\"h-full flex w-full relative\">",
          "1941:      <div class=\"absolute top-12 left-0 right-0 w-full z-30\">",
          "1942:       <div class=\" flex flex-col gap-1 w-full\">",
          "1943:        {#if ($config?.license_metadata?.type ?? null) === 'trial'}",
          "",
          "[Removed Lines]",
          "1940:     {#if $banners.length > 0 && !history.currentId && !$chatId && selectedModels.length <= 1}",
          "",
          "[Added Lines]",
          "1940:     {#if ($banners.length > 0 && !history.currentId && !$chatId && selectedModels.length <= 1) || ($config?.license_metadata?.type ?? null) === 'trial' || (($config?.license_metadata?.seats ?? null) !== null && $config?.user_count > $config?.license_metadata?.seats)}",
          "",
          "---------------"
        ]
      }
    }
  ]
}