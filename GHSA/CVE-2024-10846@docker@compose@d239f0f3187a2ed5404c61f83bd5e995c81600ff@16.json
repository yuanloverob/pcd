{
  "cve_id": "CVE-2024-10846",
  "cve_desc": "The compose-go library component in versions v2.10-v2.4.0 allows an authorized user who sends malicious YAML payloads to cause the compose-go to consume excessive amount of Memory and CPU cycles while parsing YAML, such as used by Docker Compose from versions  v2.27.0 to v2.29.7 included",
  "repo": "docker/compose",
  "patch_hash": "d239f0f3187a2ed5404c61f83bd5e995c81600ff",
  "patch_info": {
    "commit_hash": "d239f0f3187a2ed5404c61f83bd5e995c81600ff",
    "repo": "docker/compose",
    "commit_url": "https://github.com/docker/compose/commit/d239f0f3187a2ed5404c61f83bd5e995c81600ff#diff-33ef32bf6c23acb95f5902d7097b7a1d5128ca061167ec0716715b0b9eeaa5f6R10",
    "files": [
      "cmd/compose/config.go",
      "go.mod",
      "go.sum",
      "pkg/compose/create.go",
      "pkg/e2e/container_name_test.go",
      "pkg/e2e/fixtures/container_name/compose.yaml"
    ],
    "message": "check container_name is not in use by another service we will create\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
    "before_after_code_files": [
      "cmd/compose/config.go||cmd/compose/config.go",
      "go.mod||go.mod",
      "go.sum||go.sum",
      "pkg/compose/create.go||pkg/compose/create.go",
      "pkg/e2e/container_name_test.go||pkg/e2e/container_name_test.go"
    ]
  },
  "patch_diff": {
    "cmd/compose/config.go||cmd/compose/config.go": [
      "File: cmd/compose/config.go -> cmd/compose/config.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "169:    return err",
      "170:   }",
      "172:   switch opts.Format {",
      "173:   case \"json\":",
      "174:    content, err = project.MarshalJSON()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:   if !opts.noConsistency {",
      "173:    err := project.CheckContainerNameUnicity()",
      "174:    if err != nil {",
      "175:     return err",
      "176:    }",
      "177:   }",
      "",
      "---------------"
    ],
    "go.mod||go.mod": [
      "File: go.mod -> go.mod",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:  github.com/Microsoft/go-winio v0.6.1",
      "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
      "9:  github.com/buger/goterm v1.0.4",
      "11:  github.com/containerd/console v1.0.4",
      "12:  github.com/containerd/containerd v1.7.13",
      "13:  github.com/davecgh/go-spew v1.1.1",
      "",
      "[Removed Lines]",
      "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39",
      "",
      "[Added Lines]",
      "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4",
      "",
      "---------------"
    ],
    "go.sum||go.sum": [
      "File: go.sum -> go.sum",
      "--- Hunk 1 ---",
      "[Context before]",
      "90: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
      "91: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
      "92: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
      "95: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
      "96: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
      "97: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
      "",
      "[Removed Lines]",
      "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39 h1:ZUpnv0xA75X9gy9Y7hjJm51nflGbr+2URaLXBtEic7A=",
      "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
      "",
      "[Added Lines]",
      "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4 h1:WYiZ9D0WBykHUJLlpt+w7NXX0hy+cQKKdVe7vmsNZvg=",
      "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
      "",
      "---------------"
    ],
    "pkg/compose/create.go||pkg/compose/create.go": [
      "File: pkg/compose/create.go -> pkg/compose/create.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:   options.Services = project.ServiceNames()",
      "78:  }",
      "80:  var observedState Containers",
      "82:  if err != nil {",
      "83:   return err",
      "84:  }",
      "",
      "[Removed Lines]",
      "81:  observedState, err := s.getContainers(ctx, project.Name, oneOffInclude, true)",
      "",
      "[Added Lines]",
      "80:  err := project.CheckContainerNameUnicity()",
      "81:  if err != nil {",
      "82:   return err",
      "83:  }",
      "86:  observedState, err = s.getContainers(ctx, project.Name, oneOffInclude, true)",
      "",
      "---------------"
    ],
    "pkg/e2e/container_name_test.go||pkg/e2e/container_name_test.go": [
      "File: pkg/e2e/container_name_test.go -> pkg/e2e/container_name_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:    Copyright 2022 Docker Compose CLI authors",
      "7:    Licensed under the Apache License, Version 2.0 (the \"License\");",
      "8:    you may not use this file except in compliance with the License.",
      "9:    You may obtain a copy of the License at",
      "11:        http://www.apache.org/licenses/LICENSE-2.0",
      "13:    Unless required by applicable law or agreed to in writing, software",
      "14:    distributed under the License is distributed on an \"AS IS\" BASIS,",
      "15:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "16:    See the License for the specific language governing permissions and",
      "17:    limitations under the License.",
      "20: package e2e",
      "22: import (",
      "23:  \"testing\"",
      "25:  \"gotest.tools/v3/icmd\"",
      "26: )",
      "28: func TestUpContainerNameConflict(t *testing.T) {",
      "29:  c := NewParallelCLI(t)",
      "30:  const projectName = \"e2e-container_name_conflict\"",
      "32:  t.Cleanup(func() {",
      "33:   c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "34:  })",
      "36:  res := c.RunDockerComposeCmdNoCheck(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\")",
      "37:  res.Assert(t, icmd.Expected{ExitCode: 1, Err: `container name \"test\" is already in use`})",
      "39:  c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "40:  c.RunDockerComposeCmd(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\", \"test\")",
      "42:  c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "43:  c.RunDockerComposeCmd(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\", \"another_test\")",
      "44: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ef55a531fad92ccfcbe5791b705faf5b4dd5363",
      "candidate_info": {
        "commit_hash": "6ef55a531fad92ccfcbe5791b705faf5b4dd5363",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/6ef55a531fad92ccfcbe5791b705faf5b4dd5363",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "bump compose-go to v2.0.0-rc.4\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.12",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-rc.3",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-rc.4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:  go.opentelemetry.io/otel/trace v1.19.0",
          "45:  go.uber.org/goleak v1.3.0",
          "46:  go.uber.org/mock v0.4.0",
          "48:  golang.org/x/sync v0.6.0",
          "49:  golang.org/x/sys v0.16.0",
          "50:  google.golang.org/grpc v1.59.0",
          "",
          "[Removed Lines]",
          "47:  golang.org/x/exp v0.0.0-20230713183714-613f0c0eb8a1",
          "",
          "[Added Lines]",
          "47:  golang.org/x/exp v0.0.0-20240112132812-db7319d0e0e3",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:  go.opentelemetry.io/otel/metric v1.19.0 // indirect",
          "155:  go.opentelemetry.io/otel/sdk/metric v1.19.0 // indirect",
          "156:  go.opentelemetry.io/proto/otlp v1.0.0 // indirect",
          "160:  golang.org/x/oauth2 v0.11.0 // indirect",
          "162:  golang.org/x/text v0.14.0 // indirect",
          "163:  golang.org/x/time v0.3.0 // indirect",
          "165:  google.golang.org/appengine v1.6.7 // indirect",
          "166:  google.golang.org/genproto v0.0.0-20230822172742-b8732ec3820d // indirect",
          "167:  google.golang.org/genproto/googleapis/api v0.0.0-20230822172742-b8732ec3820d // indirect",
          "",
          "[Removed Lines]",
          "157:  golang.org/x/crypto v0.17.0 // indirect",
          "158:  golang.org/x/mod v0.11.0 // indirect",
          "159:  golang.org/x/net v0.17.0 // indirect",
          "161:  golang.org/x/term v0.15.0 // indirect",
          "164:  golang.org/x/tools v0.10.0 // indirect",
          "",
          "[Added Lines]",
          "157:  golang.org/x/crypto v0.18.0 // indirect",
          "158:  golang.org/x/mod v0.14.0 // indirect",
          "159:  golang.org/x/net v0.20.0 // indirect",
          "161:  golang.org/x/term v0.16.0 // indirect",
          "164:  golang.org/x/tools v0.17.0 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "88: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "91: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "92: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "93: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-rc.3 h1:t0qajSNkH3zR4HEN2CM+GVU7GBx5AwqiYJk5w800M7w=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-rc.3/go.mod h1:r7CJHU0GaLtRVLm2ch8RCNkJh3GHyaqqc2rSti7VP44=",
          "",
          "[Added Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-rc.4 h1:vVDWv1xm7Lqi7sEevU0Jk+T2huxNzf92lFhqKbn3sT8=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-rc.4/go.mod h1:IbZsys5a7eFTsdcWvM3brnghkK7ctZwUSr7mCj5NXu0=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "537: golang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=",
          "538: golang.org/x/crypto v0.0.0-20201117144127-c1f2f97bffc9/go.mod h1:jdWPYTVW3xRLrWPugEBEK3UY2ZEsg3UU495nc5E+M+I=",
          "539: golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=",
          "542: golang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=",
          "545: golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=",
          "546: golang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=",
          "547: golang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=",
          "548: golang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=",
          "549: golang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=",
          "550: golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=",
          "553: golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=",
          "554: golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=",
          "555: golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=",
          "",
          "[Removed Lines]",
          "540: golang.org/x/crypto v0.17.0 h1:r8bRNjWL3GshPW3gkd+RpvzWrZAwPS49OmTGZ/uhM4k=",
          "541: golang.org/x/crypto v0.17.0/go.mod h1:gCAAfMLgwOJRpTjQ2zCCt2OcSfYMTeZVSRtQlPC7Nq4=",
          "543: golang.org/x/exp v0.0.0-20230713183714-613f0c0eb8a1 h1:MGwJjxBy0HJshjDNfLsYO8xppfqWlA5ZT9OhtUUhTNw=",
          "544: golang.org/x/exp v0.0.0-20230713183714-613f0c0eb8a1/go.mod h1:FXUEEKJgO7OQYeo8N01OfiKP8RXMtf6e8aTskBGqWdc=",
          "551: golang.org/x/mod v0.11.0 h1:bUO06HqtnRcc/7l71XBe4WcqTZ+3AH1J59zWDDwLKgU=",
          "552: golang.org/x/mod v0.11.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=",
          "",
          "[Added Lines]",
          "540: golang.org/x/crypto v0.18.0 h1:PGVlW0xEltQnzFZ55hkuX5+KLyrMYhHld1YHO4AKcdc=",
          "541: golang.org/x/crypto v0.18.0/go.mod h1:R0j02AL6hcrfOiy9T4ZYp/rcWeMxM3L6QYxlOuEG1mg=",
          "543: golang.org/x/exp v0.0.0-20240112132812-db7319d0e0e3 h1:hNQpMuAJe5CtcUqCXaWga3FHu+kQvCqcsoVaQgSV60o=",
          "544: golang.org/x/exp v0.0.0-20240112132812-db7319d0e0e3/go.mod h1:idGWGoKP1toJGkd5/ig9ZLuPcZBC3ewk7SzmH0uou08=",
          "551: golang.org/x/mod v0.14.0 h1:dGoOF9QVLYng8IHTm7BAyWqCqSheQ5pYWGhzW00YJr0=",
          "552: golang.org/x/mod v0.14.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "564: golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=",
          "565: golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=",
          "566: golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=",
          "569: golang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=",
          "570: golang.org/x/oauth2 v0.11.0 h1:vPL4xzxBM4niKCW6g9whtaWVXTJf1U5e4aZxxFx/gbU=",
          "571: golang.org/x/oauth2 v0.11.0/go.mod h1:LdF7O/8bLR/qWK9DrpXmbHLTouvRHK0SgJl0GmDBchk=",
          "",
          "[Removed Lines]",
          "567: golang.org/x/net v0.17.0 h1:pVaXccu2ozPjCXewfr1S7xza/zcXTity9cCdXQYSjIM=",
          "568: golang.org/x/net v0.17.0/go.mod h1:NxSsAGuq816PNPmqtQdLE42eU2Fs7NoRIZrHJAlaCOE=",
          "",
          "[Added Lines]",
          "567: golang.org/x/net v0.20.0 h1:aCL9BSgETF1k+blQaYUBx9hJ9LOGP3gAVemcZlf1Kpo=",
          "568: golang.org/x/net v0.20.0/go.mod h1:z8BVo6PvndSri0LbOE3hAn0apkU+1YvI6E70E9jsnvY=",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "606: golang.org/x/term v0.0.0-20201117132131-f5c789dd3221/go.mod h1:Nr5EML6q2oocZ2LXRh80K7BxOlk5/8JxuGnuhpl+muw=",
          "607: golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=",
          "608: golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=",
          "611: golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=",
          "612: golang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=",
          "613: golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=",
          "",
          "[Removed Lines]",
          "609: golang.org/x/term v0.15.0 h1:y/Oo/a/q3IXu26lQgl04j/gjuBDOBlx7X6Om1j2CPW4=",
          "610: golang.org/x/term v0.15.0/go.mod h1:BDl952bC7+uMoWR75FIrCDx79TPU9oHkTZ9yRbYOrX0=",
          "",
          "[Added Lines]",
          "609: golang.org/x/term v0.16.0 h1:m+B6fahuftsE9qjo0VWp2FW0mB3MTJvR0BaMQrq0pmE=",
          "610: golang.org/x/term v0.16.0/go.mod h1:yn7UURbUtPyrVJPGPq404EukNFxcm/foM+bV/bfcDsY=",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "626: golang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=",
          "627: golang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=",
          "628: golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=",
          "631: golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=",
          "632: golang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=",
          "633: golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=",
          "",
          "[Removed Lines]",
          "629: golang.org/x/tools v0.10.0 h1:tvDr/iQoUqNdohiYm0LmmKcBk+q86lb9EprIUFhHHGg=",
          "630: golang.org/x/tools v0.10.0/go.mod h1:UJwyiVBsOA2uwvK/e5OY3GTpDUJriEd+/YlqAwLPmyM=",
          "",
          "[Added Lines]",
          "629: golang.org/x/tools v0.17.0 h1:FvmRgNOcs3kOa+T20R1uhfP9F6HgG2mfxDv1vrx1Htc=",
          "630: golang.org/x/tools v0.17.0/go.mod h1:xsh6VxdV005rRVaS6SSAf9oiAqljS7UZUacMZ8Bnsps=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "138facea624ed02037bdeeed37ed59dbe453e08e",
      "candidate_info": {
        "commit_hash": "138facea624ed02037bdeeed37ed59dbe453e08e",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/138facea624ed02037bdeeed37ed59dbe453e08e",
        "files": [
          "cmd/compose/build.go",
          "cmd/compose/compose_test.go",
          "cmd/compose/create_test.go",
          "cmd/compose/options.go",
          "cmd/compose/options_test.go",
          "cmd/compose/pullOptions_test.go",
          "cmd/compose/run.go",
          "cmd/compose/up_test.go",
          "go.mod",
          "go.sum",
          "internal/tracing/attributes.go",
          "pkg/compose/build.go",
          "pkg/compose/build_classic.go",
          "pkg/compose/compose.go",
          "pkg/compose/convergence_test.go",
          "pkg/compose/create.go",
          "pkg/compose/create_test.go",
          "pkg/compose/dependencies_test.go",
          "pkg/compose/down_test.go",
          "pkg/compose/logs_test.go",
          "pkg/compose/pull.go",
          "pkg/compose/viz_test.go",
          "pkg/compose/watch_test.go",
          "pkg/e2e/restart_test.go",
          "pkg/e2e/start_stop_test.go"
        ],
        "message": "project.Services is a map\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
        "before_after_code_files": [
          "cmd/compose/build.go||cmd/compose/build.go",
          "cmd/compose/compose_test.go||cmd/compose/compose_test.go",
          "cmd/compose/create_test.go||cmd/compose/create_test.go",
          "cmd/compose/options.go||cmd/compose/options.go",
          "cmd/compose/options_test.go||cmd/compose/options_test.go",
          "cmd/compose/pullOptions_test.go||cmd/compose/pullOptions_test.go",
          "cmd/compose/run.go||cmd/compose/run.go",
          "cmd/compose/up_test.go||cmd/compose/up_test.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "internal/tracing/attributes.go||internal/tracing/attributes.go",
          "pkg/compose/build.go||pkg/compose/build.go",
          "pkg/compose/build_classic.go||pkg/compose/build_classic.go",
          "pkg/compose/compose.go||pkg/compose/compose.go",
          "pkg/compose/convergence_test.go||pkg/compose/convergence_test.go",
          "pkg/compose/create.go||pkg/compose/create.go",
          "pkg/compose/create_test.go||pkg/compose/create_test.go",
          "pkg/compose/dependencies_test.go||pkg/compose/dependencies_test.go",
          "pkg/compose/down_test.go||pkg/compose/down_test.go",
          "pkg/compose/logs_test.go||pkg/compose/logs_test.go",
          "pkg/compose/pull.go||pkg/compose/pull.go",
          "pkg/compose/viz_test.go||pkg/compose/viz_test.go",
          "pkg/compose/watch_test.go||pkg/compose/watch_test.go",
          "pkg/e2e/restart_test.go||pkg/e2e/restart_test.go",
          "pkg/e2e/start_stop_test.go||pkg/e2e/start_stop_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ]
        }
      },
      "candidate_diff": {
        "cmd/compose/build.go||cmd/compose/build.go": [
          "File: cmd/compose/build.go -> cmd/compose/build.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:  \"strings\"",
          "25:  \"github.com/compose-spec/compose-go/v2/cli\"",
          "27:  \"github.com/compose-spec/compose-go/v2/types\"",
          "28:  \"github.com/docker/cli/cli/command\"",
          "29:  cliopts \"github.com/docker/cli/opts\"",
          "",
          "[Removed Lines]",
          "26:  \"github.com/compose-spec/compose-go/v2/loader\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "cmd/compose/compose_test.go||cmd/compose/compose_test.go": [
          "File: cmd/compose/compose_test.go -> cmd/compose/compose_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: func TestFilterServices(t *testing.T) {",
          "27:  p := &types.Project{",
          "28:   Services: types.Services{",
          "30:     Name:  \"foo\",",
          "31:     Links: []string{\"bar\"},",
          "32:    },",
          "34:     Name: \"bar\",",
          "35:     DependsOn: map[string]types.ServiceDependency{",
          "36:      \"zot\": {},",
          "37:     },",
          "38:    },",
          "40:     Name: \"zot\",",
          "41:    },",
          "43:     Name: \"qix\",",
          "44:    },",
          "45:   },",
          "",
          "[Removed Lines]",
          "29:    {",
          "33:    {",
          "39:    {",
          "42:    {",
          "",
          "[Added Lines]",
          "29:    \"foo\": {",
          "33:    \"bar\": {",
          "39:    \"zot\": {",
          "42:    \"qix\": {",
          "",
          "---------------"
        ],
        "cmd/compose/create_test.go||cmd/compose/create_test.go": [
          "File: cmd/compose/create_test.go -> cmd/compose/create_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  return &types.Project{",
          "87:   Name: \"test\",",
          "88:   Services: types.Services{",
          "90:     Name: \"svc\",",
          "91:     Build: &types.BuildConfig{",
          "92:      Context: \".\",",
          "",
          "[Removed Lines]",
          "89:    {",
          "",
          "[Added Lines]",
          "89:    \"svc\": {",
          "",
          "---------------"
        ],
        "cmd/compose/options.go||cmd/compose/options.go": [
          "File: cmd/compose/options.go -> cmd/compose/options.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: func applyPlatforms(project *types.Project, buildForSinglePlatform bool) error {",
          "27:  defaultPlatform := project.Environment[\"DOCKER_DEFAULT_PLATFORM\"]",
          "32:   if service.Build == nil {",
          "33:    continue",
          "34:   }",
          "",
          "[Removed Lines]",
          "28:  for i := range project.Services {",
          "30:   service := &project.Services[i]",
          "",
          "[Added Lines]",
          "28:  for _, service := range project.Services {",
          "",
          "---------------"
        ],
        "cmd/compose/options_test.go||cmd/compose/options_test.go": [
          "File: cmd/compose/options_test.go -> cmd/compose/options_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:  makeProject := func() *types.Project {",
          "28:   return &types.Project{",
          "29:    Services: types.Services{",
          "31:      Name:  \"test\",",
          "32:      Image: \"foo\",",
          "33:      Build: &types.BuildConfig{",
          "",
          "[Removed Lines]",
          "30:     {",
          "",
          "[Added Lines]",
          "30:     \"test\": {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:  t.Run(\"SinglePlatform\", func(t *testing.T) {",
          "48:   project := makeProject()",
          "49:   require.NoError(t, applyPlatforms(project, true))",
          "51:  })",
          "53:  t.Run(\"MultiPlatform\", func(t *testing.T) {",
          "54:   project := makeProject()",
          "55:   require.NoError(t, applyPlatforms(project, false))",
          "56:   require.EqualValues(t, []string{\"linux/amd64\", \"linux/arm64\", \"alice/32\"},",
          "58:  })",
          "59: }",
          "",
          "[Removed Lines]",
          "50:   require.EqualValues(t, []string{\"alice/32\"}, project.Services[0].Build.Platforms)",
          "57:    project.Services[0].Build.Platforms)",
          "",
          "[Added Lines]",
          "50:   require.EqualValues(t, []string{\"alice/32\"}, project.Services[\"test\"].Build.Platforms)",
          "57:    project.Services[\"test\"].Build.Platforms)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "65:     \"DOCKER_DEFAULT_PLATFORM\": \"linux/amd64\",",
          "66:    },",
          "67:    Services: types.Services{",
          "69:      Name:  \"test\",",
          "70:      Image: \"foo\",",
          "71:      Build: &types.BuildConfig{",
          "",
          "[Removed Lines]",
          "68:     {",
          "",
          "[Added Lines]",
          "68:     \"test\": {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "83:  t.Run(\"SinglePlatform\", func(t *testing.T) {",
          "84:   project := makeProject()",
          "85:   require.NoError(t, applyPlatforms(project, true))",
          "87:  })",
          "89:  t.Run(\"MultiPlatform\", func(t *testing.T) {",
          "90:   project := makeProject()",
          "91:   require.NoError(t, applyPlatforms(project, false))",
          "92:   require.EqualValues(t, []string{\"linux/amd64\", \"linux/arm64\"},",
          "94:  })",
          "95: }",
          "",
          "[Removed Lines]",
          "86:   require.EqualValues(t, []string{\"linux/amd64\"}, project.Services[0].Build.Platforms)",
          "93:    project.Services[0].Build.Platforms)",
          "",
          "[Added Lines]",
          "86:   require.EqualValues(t, []string{\"linux/amd64\"}, project.Services[\"test\"].Build.Platforms)",
          "93:    project.Services[\"test\"].Build.Platforms)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "101:     \"DOCKER_DEFAULT_PLATFORM\": \"commodore/64\",",
          "102:    },",
          "103:    Services: types.Services{",
          "105:      Name:  \"test\",",
          "106:      Image: \"foo\",",
          "107:      Build: &types.BuildConfig{",
          "",
          "[Removed Lines]",
          "104:     {",
          "",
          "[Added Lines]",
          "104:     \"foo\": {",
          "",
          "---------------"
        ],
        "cmd/compose/pullOptions_test.go||cmd/compose/pullOptions_test.go": [
          "File: cmd/compose/pullOptions_test.go -> cmd/compose/pullOptions_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: func TestApplyPullOptions(t *testing.T) {",
          "27:  project := &types.Project{",
          "28:   Services: types.Services{",
          "30:     Name: \"must-build\",",
          "32:     Build: &types.BuildConfig{",
          "33:      Context: \".\",",
          "34:     },",
          "35:    },",
          "37:     Name:  \"has-build\",",
          "38:     Image: \"registry.example.com/myservice\",",
          "39:     Build: &types.BuildConfig{",
          "40:      Context: \".\",",
          "41:     },",
          "42:    },",
          "44:     Name:  \"must-pull\",",
          "45:     Image: \"registry.example.com/another-service\",",
          "46:    },",
          "",
          "[Removed Lines]",
          "29:    {",
          "36:    {",
          "43:    {",
          "",
          "[Added Lines]",
          "29:    \"must-build\": {",
          "36:    \"has-build\": {",
          "43:    \"must-pull\": {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:  }.apply(project, nil)",
          "52:  assert.NilError(t, err)",
          "57: }",
          "",
          "[Removed Lines]",
          "54:  assert.Equal(t, project.Services[0].PullPolicy, \"\") // still default",
          "55:  assert.Equal(t, project.Services[1].PullPolicy, types.PullPolicyMissing)",
          "56:  assert.Equal(t, project.Services[2].PullPolicy, types.PullPolicyMissing)",
          "",
          "[Added Lines]",
          "54:  assert.Equal(t, project.Services[\"must-build\"].PullPolicy, \"\") // still default",
          "55:  assert.Equal(t, project.Services[\"has-build\"].PullPolicy, types.PullPolicyMissing)",
          "56:  assert.Equal(t, project.Services[\"must-pull\"].PullPolicy, types.PullPolicyMissing)",
          "",
          "---------------"
        ],
        "cmd/compose/run.go||cmd/compose/run.go": [
          "File: cmd/compose/run.go -> cmd/compose/run.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "300: func startDependencies(ctx context.Context, backend api.Service, project types.Project, buildOpts *api.BuildOptions, requestedServiceName string, ignoreOrphans bool) error {",
          "301:  dependencies := types.Services{}",
          "302:  var requestedService types.ServiceConfig",
          "304:   if service.Name != requestedServiceName {",
          "306:   } else {",
          "307:    requestedService = service",
          "308:   }",
          "309:  }",
          "311:  project.Services = dependencies",
          "313:  err := backend.Create(ctx, &project, api.CreateOptions{",
          "314:   Build:         buildOpts,",
          "315:   IgnoreOrphans: ignoreOrphans,",
          "",
          "[Removed Lines]",
          "303:  for _, service := range project.Services {",
          "305:    dependencies = append(dependencies, service)",
          "312:  project.DisabledServices = append(project.DisabledServices, requestedService)",
          "",
          "[Added Lines]",
          "303:  for name, service := range project.Services {",
          "305:    dependencies[name] = service",
          "312:  project.DisabledServices[requestedServiceName] = requestedService",
          "",
          "---------------"
        ],
        "cmd/compose/up_test.go||cmd/compose/up_test.go": [
          "File: cmd/compose/up_test.go -> cmd/compose/up_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: func TestApplyScaleOpt(t *testing.T) {",
          "27:  p := types.Project{",
          "28:   Services: types.Services{",
          "30:     Name: \"foo\",",
          "31:    },",
          "33:     Name: \"bar\",",
          "34:     Deploy: &types.DeployConfig{",
          "35:      Mode: \"test\",",
          "",
          "[Removed Lines]",
          "29:    {",
          "32:    {",
          "",
          "[Added Lines]",
          "29:    \"foo\": {",
          "32:    \"bar\": {",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.7",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-20231121074112-593b77722992",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-20231123162526-11ef9572f1a4",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "133: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "134: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "137: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "138: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "139: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "135: github.com/compose-spec/compose-go/v2 v2.0.0-20231121074112-593b77722992 h1:0BM7GPtSRK7djjvG3h67aJYH8eRikBgxkrEG7wNtgaU=",
          "136: github.com/compose-spec/compose-go/v2 v2.0.0-20231121074112-593b77722992/go.mod h1:uAthZuC/GWStR8mxGMRaQyaOeSqA4V+MZIiAIfuBoIU=",
          "",
          "[Added Lines]",
          "135: github.com/compose-spec/compose-go/v2 v2.0.0-20231123162526-11ef9572f1a4 h1:Lr78By808iuG+2gTyxIDslRpKQCk/lcRqElKsrhzp+U=",
          "136: github.com/compose-spec/compose-go/v2 v2.0.0-20231123162526-11ef9572f1a4/go.mod h1:PWCgeD8cxiI/DmdpBM407CuLDrZ2W4xuS6/Z9jAi0YQ=",
          "",
          "---------------"
        ],
        "internal/tracing/attributes.go||internal/tracing/attributes.go": [
          "File: internal/tracing/attributes.go -> internal/tracing/attributes.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   return nil",
          "59:  }",
          "66:  attrs := []attribute.KeyValue{",
          "67:   attribute.String(\"project.name\", proj.Name),",
          "68:   attribute.String(\"project.dir\", proj.WorkingDir),",
          "69:   attribute.StringSlice(\"project.compose_files\", proj.ComposeFiles),",
          "70:   attribute.StringSlice(\"project.services.active\", proj.ServiceNames()),",
          "72:   attribute.StringSlice(\"project.profiles\", proj.Profiles),",
          "73:   attribute.StringSlice(\"project.volumes\", proj.VolumeNames()),",
          "74:   attribute.StringSlice(\"project.networks\", proj.NetworkNames()),",
          "",
          "[Removed Lines]",
          "61:  disabledServiceNames := make([]string, len(proj.DisabledServices))",
          "62:  for i := range proj.DisabledServices {",
          "63:   disabledServiceNames[i] = proj.DisabledServices[i].Name",
          "64:  }",
          "71:   attribute.StringSlice(\"project.services.disabled\", disabledServiceNames),",
          "",
          "[Added Lines]",
          "66:   attribute.StringSlice(\"project.services.disabled\", proj.DisabledServiceNames()),",
          "",
          "---------------"
        ],
        "pkg/compose/build.go||pkg/compose/build.go": [
          "File: pkg/compose/build.go -> pkg/compose/build.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: }",
          "69: type serviceToBuild struct {",
          "71:  service types.ServiceConfig",
          "72: }",
          "",
          "[Removed Lines]",
          "70:  idx     int",
          "",
          "[Added Lines]",
          "70:  name    string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   if len(options.Services) > 0 && !utils.Contains(options.Services, name) {",
          "86:    return nil",
          "87:   }",
          "90:   if service.Build == nil {",
          "91:    return nil",
          "",
          "[Removed Lines]",
          "88:   service, idx := getServiceIndex(project, name)",
          "",
          "[Added Lines]",
          "88:   service := project.Services[name]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:    return nil",
          "98:   }",
          "99:   mapServiceMutx.Lock()",
          "101:   mapServiceMutx.Unlock()",
          "102:   return nil",
          "103:  }, func(traversal *graphTraversal) {",
          "",
          "[Removed Lines]",
          "100:   serviceToBeBuild[name] = serviceToBuild{idx: idx, service: service}",
          "",
          "[Added Lines]",
          "100:   serviceToBeBuild[name] = serviceToBuild{name: name, service: service}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:   }",
          "147:  }",
          "149:  builtDigests := make([]string, len(project.Services))",
          "150:  err = InDependencyOrder(ctx, project, func(ctx context.Context, name string) error {",
          "151:   if len(options.Services) > 0 && !utils.Contains(options.Services, name) {",
          "152:    return nil",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:  names := project.ServiceNames()",
          "152:  getServiceIndex := func(name string) int {",
          "153:   for idx, n := range names {",
          "154:    if n == name {",
          "155:     return idx",
          "156:    }",
          "157:   }",
          "158:   return -1",
          "159:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "156:    return nil",
          "157:   }",
          "158:   service := serviceToBuild.service",
          "161:   if !buildkitEnabled {",
          "162:    id, err := s.doBuildClassic(ctx, project, service, options)",
          "163:    if err != nil {",
          "164:     return err",
          "165:    }",
          "168:    if options.Push {",
          "169:     return s.push(ctx, project, api.PushOptions{})",
          "",
          "[Removed Lines]",
          "159:   idx := serviceToBuild.idx",
          "166:    builtDigests[idx] = id",
          "",
          "[Added Lines]",
          "175:    builtDigests[getServiceIndex(name)] = id",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "184:   if err != nil {",
          "185:    return err",
          "186:   }",
          "189:   return nil",
          "190:  }, func(traversal *graphTraversal) {",
          "",
          "[Removed Lines]",
          "187:   builtDigests[idx] = digest",
          "",
          "[Added Lines]",
          "196:   builtDigests[getServiceIndex(name)] = digest",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "205:  for i, imageDigest := range builtDigests {",
          "206:   if imageDigest != \"\" {",
          "208:    imageIDs[imageRef] = imageDigest",
          "209:   }",
          "210:  }",
          "211:  return imageIDs, err",
          "212: }",
          "226: func (s *composeService) ensureImagesExists(ctx context.Context, project *types.Project, buildOpts *api.BuildOptions, quietPull bool) error {",
          "227:  for _, service := range project.Services {",
          "228:   if service.Image == \"\" && service.Build == nil {",
          "",
          "[Removed Lines]",
          "207:    imageRef := api.GetImageNameOrDefault(project.Services[i], project.Name)",
          "214: func getServiceIndex(project *types.Project, name string) (types.ServiceConfig, int) {",
          "215:  var service types.ServiceConfig",
          "216:  var idx int",
          "217:  for i, s := range project.Services {",
          "218:   if s.Name == name {",
          "219:    idx, service = i, s",
          "220:    break",
          "221:   }",
          "222:  }",
          "223:  return service, idx",
          "224: }",
          "",
          "[Added Lines]",
          "216:    imageRef := api.GetImageNameOrDefault(project.Services[names[i]], project.Name)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "264:  }",
          "268:   image := api.GetImageNameOrDefault(service, project.Name)",
          "269:   digest, ok := images[image]",
          "270:   if ok {",
          "273:    }",
          "275:   }",
          "276:  }",
          "277:  return nil",
          "",
          "[Removed Lines]",
          "267:  for i, service := range project.Services {",
          "271:    if project.Services[i].Labels == nil {",
          "272:     project.Services[i].Labels = types.Labels{}",
          "274:    project.Services[i].CustomLabels.Add(api.ImageDigestLabel, digest)",
          "",
          "[Added Lines]",
          "264:  for _, service := range project.Services {",
          "268:    if service.Labels == nil {",
          "269:     service.Labels = types.Labels{}",
          "271:    service.CustomLabels.Add(api.ImageDigestLabel, digest)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "440:   Platforms:   plats,",
          "441:   Labels:      imageLabels,",
          "442:   NetworkMode: service.Build.Network,",
          "444:   Ulimits:     toUlimitOpt(service.Build.Ulimits),",
          "445:   Session:     sessionConfig,",
          "446:   Allow:       allow,",
          "",
          "[Removed Lines]",
          "443:   ExtraHosts:  service.Build.ExtraHosts.AsList(),",
          "",
          "[Added Lines]",
          "440:   ExtraHosts:  service.Build.ExtraHosts.AsList(\":\"),",
          "",
          "---------------"
        ],
        "pkg/compose/build_classic.go||pkg/compose/build_classic.go": [
          "File: pkg/compose/build_classic.go -> pkg/compose/build_classic.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:   BuildArgs:   resolveAndMergeBuildArgs(dockerCli, project, service, options),",
          "230:   Labels:      config.Labels,",
          "231:   NetworkMode: config.Network,",
          "233:   Target:      config.Target,",
          "234:   Isolation:   container.Isolation(config.Isolation),",
          "235:  }",
          "",
          "[Removed Lines]",
          "232:   ExtraHosts:  config.ExtraHosts.AsList(),",
          "",
          "[Added Lines]",
          "232:   ExtraHosts:  config.ExtraHosts.AsList(\":\"),",
          "",
          "---------------"
        ],
        "pkg/compose/compose.go||pkg/compose/compose.go": [
          "File: pkg/compose/compose.go -> pkg/compose/compose.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:  if len(containers) == 0 {",
          "184:   return project, fmt.Errorf(\"no container found for project %q: %w\", projectName, api.ErrNotFound)",
          "185:  }",
          "187:  for _, c := range containers {",
          "188:   serviceLabel := c.Labels[api.ServiceLabel]",
          "189:   service, ok := set[serviceLabel]",
          "",
          "[Removed Lines]",
          "186:  set := map[string]types.ServiceConfig{}",
          "",
          "[Added Lines]",
          "186:  set := types.Services{}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:   }",
          "198:   service.Scale = increment(service.Scale)",
          "199:  }",
          "201:   dependencies := service.Labels[api.DependenciesLabel]",
          "202:   if len(dependencies) > 0 {",
          "203:    service.DependsOn = types.DependsOnConfig{}",
          "",
          "[Removed Lines]",
          "200:  for _, service := range set {",
          "",
          "[Added Lines]",
          "200:  for name, service := range set {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:     }",
          "219:     service.DependsOn[dependency] = types.ServiceDependency{Condition: condition, Restart: restart, Required: required}",
          "220:    }",
          "221:   }",
          "223:  }",
          "224: SERVICES:",
          "225:  for _, qs := range services {",
          "226:   for _, es := range project.Services {",
          "",
          "[Removed Lines]",
          "222:   project.Services = append(project.Services, service)",
          "",
          "[Added Lines]",
          "221:    set[name] = service",
          "224:  project.Services = set",
          "",
          "---------------"
        ],
        "pkg/compose/convergence_test.go||pkg/compose/convergence_test.go": [
          "File: pkg/compose/convergence_test.go -> pkg/compose/convergence_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:  t.Run(\"should skip dependencies with scale 0\", func(t *testing.T) {",
          "228:   dbService := types.ServiceConfig{Name: \"db\", Scale: intPtr(0)}",
          "229:   redisService := types.ServiceConfig{Name: \"redis\", Scale: intPtr(0)}",
          "231:   dependencies := types.DependsOnConfig{",
          "232:    \"db\":    {Condition: ServiceConditionRunningOrHealthy},",
          "233:    \"redis\": {Condition: ServiceConditionRunningOrHealthy},",
          "",
          "[Removed Lines]",
          "230:   project := types.Project{Name: strings.ToLower(testProject), Services: types.Services{dbService, redisService}}",
          "",
          "[Added Lines]",
          "230:   project := types.Project{Name: strings.ToLower(testProject), Services: types.Services{",
          "231:    \"db\":    dbService,",
          "232:    \"redis\": redisService,",
          "233:   }}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:  t.Run(\"should skip dependencies with condition service_started\", func(t *testing.T) {",
          "238:   dbService := types.ServiceConfig{Name: \"db\", Scale: intPtr(1)}",
          "239:   redisService := types.ServiceConfig{Name: \"redis\", Scale: intPtr(1)}",
          "241:   dependencies := types.DependsOnConfig{",
          "242:    \"db\":    {Condition: types.ServiceConditionStarted, Required: true},",
          "243:    \"redis\": {Condition: types.ServiceConditionStarted, Required: true},",
          "",
          "[Removed Lines]",
          "240:   project := types.Project{Name: strings.ToLower(testProject), Services: types.Services{dbService, redisService}}",
          "",
          "[Added Lines]",
          "243:   project := types.Project{Name: strings.ToLower(testProject), Services: types.Services{",
          "244:    \"db\":    dbService,",
          "245:    \"redis\": redisService,",
          "246:   }}",
          "",
          "---------------"
        ],
        "pkg/compose/create.go||pkg/compose/create.go": [
          "File: pkg/compose/create.go -> pkg/compose/create.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   return err",
          "95:  }",
          "102:  orphans := observedState.filter(isNotService(allServiceNames...))",
          "103:  if len(orphans) > 0 && !options.IgnoreOrphans {",
          "104:   if options.RemoveOrphans {",
          "",
          "[Removed Lines]",
          "97:  allServices := project.AllServices()",
          "98:  allServiceNames := []string{}",
          "99:  for _, service := range allServices {",
          "100:   allServiceNames = append(allServiceNames, service.Name)",
          "101:  }",
          "",
          "[Added Lines]",
          "97:  allServiceNames := append(project.ServiceNames(), project.DisabledServiceNames()...)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:   DNS:            service.DNS,",
          "264:   DNSSearch:      service.DNSSearch,",
          "265:   DNSOptions:     service.DNSOpts,",
          "267:   SecurityOpt:    securityOpts,",
          "268:   UsernsMode:     container.UsernsMode(service.UserNSMode),",
          "269:   UTSMode:        container.UTSMode(service.Uts),",
          "",
          "[Removed Lines]",
          "266:   ExtraHosts:     service.ExtraHosts.AsList(),",
          "",
          "[Added Lines]",
          "262:   ExtraHosts:     service.ExtraHosts.AsList(\":\"),",
          "",
          "---------------"
        ],
        "pkg/compose/create_test.go||pkg/compose/create_test.go": [
          "File: pkg/compose/create_test.go -> pkg/compose/create_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: func TestBuildContainerMountOptions(t *testing.T) {",
          "102:  project := composetypes.Project{",
          "103:   Name: \"myProject\",",
          "106:     Name: \"myService\",",
          "107:     Volumes: []composetypes.ServiceVolumeConfig{",
          "108:      {",
          "",
          "[Removed Lines]",
          "104:   Services: []composetypes.ServiceConfig{",
          "105:    {",
          "",
          "[Added Lines]",
          "104:   Services: composetypes.Services{",
          "105:    \"myService\": {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:   },",
          "145:  }",
          "148:  sort.Slice(mounts, func(i, j int) bool {",
          "149:   return mounts[i].Target < mounts[j].Target",
          "150:  })",
          "",
          "[Removed Lines]",
          "147:  mounts, err := buildContainerMountOptions(project, project.Services[0], moby.ImageInspect{}, inherit)",
          "",
          "[Added Lines]",
          "147:  mounts, err := buildContainerMountOptions(project, project.Services[\"myService\"], moby.ImageInspect{}, inherit)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:  assert.Equal(t, mounts[1].Target, \"/var/myvolume2\")",
          "155:  assert.Equal(t, mounts[2].Target, \"\\\\\\\\.\\\\pipe\\\\docker_engine\")",
          "158:  sort.Slice(mounts, func(i, j int) bool {",
          "159:   return mounts[i].Target < mounts[j].Target",
          "160:  })",
          "",
          "[Removed Lines]",
          "157:  mounts, err = buildContainerMountOptions(project, project.Services[0], moby.ImageInspect{}, inherit)",
          "",
          "[Added Lines]",
          "157:  mounts, err = buildContainerMountOptions(project, project.Services[\"myService\"], moby.ImageInspect{}, inherit)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:   }",
          "181:   project := composetypes.Project{",
          "182:    Name: \"myProject\",",
          "185:    },",
          "186:    Networks: composetypes.Networks(map[string]composetypes.NetworkConfig{",
          "187:     \"myNetwork1\": {",
          "",
          "[Removed Lines]",
          "183:    Services: []composetypes.ServiceConfig{",
          "184:     service,",
          "",
          "[Added Lines]",
          "183:    Services: composetypes.Services{",
          "184:     \"myService\": service,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "205:   }",
          "206:   project := composetypes.Project{",
          "207:    Name: \"myProject\",",
          "210:    },",
          "211:    Networks: composetypes.Networks(map[string]composetypes.NetworkConfig{",
          "212:     \"myNetwork1\": {",
          "",
          "[Removed Lines]",
          "208:    Services: []composetypes.ServiceConfig{",
          "209:     service,",
          "",
          "[Added Lines]",
          "208:    Services: composetypes.Services{",
          "209:     \"myService\": service,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "233:   }",
          "234:   project := composetypes.Project{",
          "235:    Name: \"myProject\",",
          "238:    },",
          "239:   }",
          "",
          "[Removed Lines]",
          "236:    Services: []composetypes.ServiceConfig{",
          "237:     service,",
          "",
          "[Added Lines]",
          "236:    Services: composetypes.Services{",
          "237:     \"myService\": service,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "250:   }",
          "251:   project := composetypes.Project{",
          "252:    Name:     \"myProject\",",
          "254:    Networks: composetypes.Networks(map[string]composetypes.NetworkConfig{",
          "255:     \"default\": {",
          "256:      Name: \"myProject_default\",",
          "",
          "[Removed Lines]",
          "253:    Services: []composetypes.ServiceConfig{service},",
          "",
          "[Added Lines]",
          "253:    Services: composetypes.Services{\"myService\": service},",
          "",
          "---------------"
        ],
        "pkg/compose/dependencies_test.go||pkg/compose/dependencies_test.go": [
          "File: pkg/compose/dependencies_test.go -> pkg/compose/dependencies_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: func createTestProject() *types.Project {",
          "34:  return &types.Project{",
          "35:   Services: types.Services{",
          "37:     Name: \"test1\",",
          "38:     DependsOn: map[string]types.ServiceDependency{",
          "39:      \"test2\": {},",
          "40:     },",
          "41:    },",
          "43:     Name: \"test2\",",
          "44:     DependsOn: map[string]types.ServiceDependency{",
          "45:      \"test3\": {},",
          "46:     },",
          "47:    },",
          "49:     Name: \"test3\",",
          "50:    },",
          "51:   },",
          "",
          "[Removed Lines]",
          "36:    {",
          "42:    {",
          "48:    {",
          "",
          "[Added Lines]",
          "36:    \"test1\": {",
          "42:    \"test2\": {",
          "48:    \"test3\": {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:  }",
          "61:  project := types.Project{",
          "63:  }",
          "65:  for i := 1; i <= 100; i++ {",
          "",
          "[Removed Lines]",
          "62:   Services: types.Services{dependent},",
          "",
          "[Added Lines]",
          "62:   Services: types.Services{\"dependent\": dependent},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:   dependent.DependsOn[name] = types.ServiceDependency{}",
          "69:   svc := types.ServiceConfig{Name: name}",
          "71:  }",
          "73:  ctx, cancel := context.WithCancel(context.Background())",
          "",
          "[Removed Lines]",
          "70:   project.Services = append(project.Services, svc)",
          "",
          "[Added Lines]",
          "70:   project.Services[name] = svc",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:   {",
          "133:    desc: \"builds graph with single service\",",
          "134:    services: types.Services{",
          "136:      Name:      \"test\",",
          "137:      DependsOn: types.DependsOnConfig{},",
          "138:     },",
          "",
          "[Removed Lines]",
          "135:     {",
          "",
          "[Added Lines]",
          "135:     \"test\": {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "150:   {",
          "151:    desc: \"builds graph with two separate services\",",
          "152:    services: types.Services{",
          "154:      Name:      \"test\",",
          "155:      DependsOn: types.DependsOnConfig{},",
          "156:     },",
          "158:      Name:      \"another\",",
          "159:      DependsOn: types.DependsOnConfig{},",
          "160:     },",
          "",
          "[Removed Lines]",
          "153:     {",
          "157:     {",
          "",
          "[Added Lines]",
          "153:     \"test\": {",
          "157:     \"another\": {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "179:   {",
          "180:    desc: \"builds graph with a service and a dependency\",",
          "181:    services: types.Services{",
          "183:      Name: \"test\",",
          "184:      DependsOn: types.DependsOnConfig{",
          "185:       \"another\": types.ServiceDependency{},",
          "186:      },",
          "187:     },",
          "189:      Name:      \"another\",",
          "190:      DependsOn: types.DependsOnConfig{},",
          "191:     },",
          "",
          "[Removed Lines]",
          "182:     {",
          "188:     {",
          "",
          "[Added Lines]",
          "182:     \"test\": {",
          "188:     \"another\": {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214:   {",
          "215:    desc: \"builds graph with multiple dependency levels\",",
          "216:    services: types.Services{",
          "218:      Name: \"test\",",
          "219:      DependsOn: types.DependsOnConfig{",
          "220:       \"another\": types.ServiceDependency{},",
          "221:      },",
          "222:     },",
          "224:      Name: \"another\",",
          "225:      DependsOn: types.DependsOnConfig{",
          "226:       \"another_dep\": types.ServiceDependency{},",
          "227:      },",
          "228:     },",
          "230:      Name:      \"another_dep\",",
          "231:      DependsOn: types.DependsOnConfig{},",
          "232:     },",
          "",
          "[Removed Lines]",
          "217:     {",
          "223:     {",
          "229:     {",
          "",
          "[Added Lines]",
          "217:     \"test\": {",
          "223:     \"another\": {",
          "229:     \"another_dep\": {",
          "",
          "---------------"
        ],
        "pkg/compose/down_test.go||pkg/compose/down_test.go": [
          "File: pkg/compose/down_test.go -> pkg/compose/down_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:   Project: &types.Project{",
          "185:    Name: strings.ToLower(testProject),",
          "186:    Services: types.Services{",
          "193:    },",
          "194:   },",
          "195:  }",
          "",
          "[Removed Lines]",
          "187:     {Name: \"local-anonymous\"},",
          "188:     {Name: \"local-named\", Image: \"local-named-image\"},",
          "189:     {Name: \"remote\", Image: \"remote-image\"},",
          "190:     {Name: \"remote-tagged\", Image: \"registry.example.com/remote-image-tagged:v1.0\"},",
          "191:     {Name: \"no-images-anonymous\"},",
          "192:     {Name: \"no-images-named\", Image: \"missing-named-image\"},",
          "",
          "[Added Lines]",
          "187:     \"local-anonymous\":     {Name: \"local-anonymous\"},",
          "188:     \"local-named\":         {Name: \"local-named\", Image: \"local-named-image\"},",
          "189:     \"remote\":              {Name: \"remote\", Image: \"remote-image\"},",
          "190:     \"remote-tagged\":       {Name: \"remote-tagged\", Image: \"registry.example.com/remote-image-tagged:v1.0\"},",
          "191:     \"no-images-anonymous\": {Name: \"no-images-anonymous\"},",
          "192:     \"no-images-named\":     {Name: \"no-images-named\", Image: \"missing-named-image\"},",
          "",
          "---------------"
        ],
        "pkg/compose/logs_test.go||pkg/compose/logs_test.go": [
          "File: pkg/compose/logs_test.go -> pkg/compose/logs_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:  opts := compose.LogOptions{",
          "84:   Project: &types.Project{",
          "85:    Services: types.Services{",
          "87:    },",
          "88:   },",
          "89:  }",
          "",
          "[Removed Lines]",
          "86:     {Name: \"service\"},",
          "",
          "[Added Lines]",
          "86:     \"service\": {Name: \"service\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:  proj := &types.Project{",
          "155:   Services: types.Services{",
          "158:   },",
          "159:  }",
          "160:  consumer := &testLogConsumer{}",
          "",
          "[Removed Lines]",
          "156:    {Name: \"serviceA\"},",
          "157:    {Name: \"serviceC\"},",
          "",
          "[Added Lines]",
          "156:    \"serviceA\": {Name: \"serviceA\"},",
          "157:    \"serviceC\": {Name: \"serviceC\"},",
          "",
          "---------------"
        ],
        "pkg/compose/pull.go||pkg/compose/pull.go": [
          "File: pkg/compose/pull.go -> pkg/compose/pull.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   imagesBeingPulled = map[string]string{}",
          "64:  )",
          "68:   if service.Image == \"\" {",
          "69:    w.Event(progress.Event{",
          "70:     ID:     service.Name,",
          "",
          "[Removed Lines]",
          "66:  for i, service := range project.Services {",
          "67:   i, service := i, service",
          "",
          "[Added Lines]",
          "66:  i := 0",
          "67:  for _, service := range project.Services {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:   imagesBeingPulled[service.Image] = service.Name",
          "116:   eg.Go(func() error {",
          "117:    _, err := s.pullServiceImage(ctx, service, s.configFile(), w, false, project.Environment[\"DOCKER_DEFAULT_PLATFORM\"])",
          "118:    if err != nil {",
          "120:     if service.Build != nil {",
          "121:      mustBuild = append(mustBuild, service.Name)",
          "122:     }",
          "",
          "[Removed Lines]",
          "119:     pullErrors[i] = err",
          "",
          "[Added Lines]",
          "116:   idx, service := i, service",
          "120:     pullErrors[idx] = err",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:    }",
          "135:    return nil",
          "136:   })",
          "137:  }",
          "139:  err = eg.Wait()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138:   i++",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "260: }",
          "262: func (s *composeService) pullRequiredImages(ctx context.Context, project *types.Project, images map[string]string, quietPull bool) error {",
          "264:  for _, service := range project.Services {",
          "265:   if service.Image == \"\" {",
          "266:    continue",
          "",
          "[Removed Lines]",
          "263:  var needPull types.Services",
          "",
          "[Added Lines]",
          "265:  var needPull []types.ServiceConfig",
          "",
          "---------------"
        ],
        "pkg/compose/viz_test.go||pkg/compose/viz_test.go": [
          "File: pkg/compose/viz_test.go -> pkg/compose/viz_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   Name:       \"viz-test\",",
          "35:   WorkingDir: \"/home\",",
          "36:   Services: types.Services{",
          "38:     Name:  \"service1\",",
          "39:     Image: \"image-for-service1\",",
          "40:     Ports: []types.ServicePortConfig{",
          "",
          "[Removed Lines]",
          "37:    {",
          "",
          "[Added Lines]",
          "37:    \"service1\": {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:      \"internal\": nil,",
          "54:     },",
          "55:    },",
          "57:     Name:  \"service2\",",
          "58:     Image: \"image-for-service2\",",
          "59:     Ports: []types.ServicePortConfig{},",
          "60:    },",
          "62:     Name:  \"service3\",",
          "63:     Image: \"some-image\",",
          "64:     DependsOn: map[string]types.ServiceDependency{",
          "",
          "[Removed Lines]",
          "56:    {",
          "61:    {",
          "",
          "[Added Lines]",
          "56:    \"service2\": {",
          "61:    \"service3\": {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:      \"service1\": {},",
          "67:     },",
          "68:    },",
          "70:     Name:  \"service4\",",
          "71:     Image: \"another-image\",",
          "72:     DependsOn: map[string]types.ServiceDependency{",
          "",
          "[Removed Lines]",
          "69:    {",
          "",
          "[Added Lines]",
          "69:    \"service4\": {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "82:      \"external\": nil,",
          "83:     },",
          "84:    },",
          "86:     Name:  \"With host IP\",",
          "87:     Image: \"user/image-name\",",
          "88:     DependsOn: map[string]types.ServiceDependency{",
          "",
          "[Removed Lines]",
          "85:    {",
          "",
          "[Added Lines]",
          "85:    \"With host IP\": {",
          "",
          "---------------"
        ],
        "pkg/compose/watch_test.go||pkg/compose/watch_test.go": [
          "File: pkg/compose/watch_test.go -> pkg/compose/watch_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:  proj := types.Project{",
          "108:   Services: types.Services{",
          "110:     Name: \"test\",",
          "111:    },",
          "112:   },",
          "",
          "[Removed Lines]",
          "109:    {",
          "",
          "[Added Lines]",
          "109:    \"test\": {",
          "",
          "---------------"
        ],
        "pkg/e2e/restart_test.go||pkg/e2e/restart_test.go": [
          "File: pkg/e2e/restart_test.go -> pkg/e2e/restart_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:  c.RunDockerComposeCmd(t, \"-f\", \"./fixtures/restart-test/compose-depends-on.yaml\", \"up\", \"-d\")",
          "81:  res := c.RunDockerComposeCmd(t, \"restart\", baseService)",
          "86: }",
          "88: func TestRestartWithProfiles(t *testing.T) {",
          "",
          "[Removed Lines]",
          "82:  fmt.Println(res.Combined())",
          "83:  assert.Assert(t, strings.Contains(res.Combined(), fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Started\", baseService)), res.Combined())",
          "84:  assert.Assert(t, strings.Contains(res.Combined(), fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Started\", depWithRestart)), res.Combined())",
          "85:  assert.Assert(t, !strings.Contains(res.Combined(), depNoRestart), res.Combined())",
          "",
          "[Added Lines]",
          "82:  out := res.Combined()",
          "83:  assert.Assert(t, strings.Contains(out, fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Started\", baseService)), out)",
          "84:  assert.Assert(t, strings.Contains(out, fmt.Sprintf(\"Container e2e-restart-deps-%s-1  Started\", depWithRestart)), out)",
          "85:  assert.Assert(t, !strings.Contains(out, depNoRestart), out)",
          "",
          "---------------"
        ],
        "pkg/e2e/start_stop_test.go||pkg/e2e/start_stop_test.go": [
          "File: pkg/e2e/start_stop_test.go -> pkg/e2e/start_stop_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   assert.Assert(t, strings.Contains(res.Combined(), \"Container e2e-start-stop-with-dependencies-bar-1  Stopped\"), res.Combined())",
          "108:   res = c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"start\", \"foo\")",
          "112:   res = c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"ps\", \"--status\", \"running\")",
          "115:  })",
          "117:  t.Run(\"Up no-deps links\", func(t *testing.T) {",
          "",
          "[Removed Lines]",
          "109:   assert.Assert(t, strings.Contains(res.Combined(), \"Container e2e-start-stop-with-dependencies-bar-1  Started\"), res.Combined())",
          "110:   assert.Assert(t, strings.Contains(res.Combined(), \"Container e2e-start-stop-with-dependencies-foo-1  Started\"), res.Combined())",
          "113:   assert.Assert(t, strings.Contains(res.Combined(), \"e2e-start-stop-with-dependencies-bar-1\"), res.Combined())",
          "114:   assert.Assert(t, strings.Contains(res.Combined(), \"e2e-start-stop-with-dependencies-foo-1\"), res.Combined())",
          "",
          "[Added Lines]",
          "109:   out := res.Combined()",
          "110:   assert.Assert(t, strings.Contains(out, \"Container e2e-start-stop-with-dependencies-bar-1  Started\"), out)",
          "111:   assert.Assert(t, strings.Contains(out, \"Container e2e-start-stop-with-dependencies-foo-1  Started\"), out)",
          "114:   out = res.Combined()",
          "115:   assert.Assert(t, strings.Contains(out, \"e2e-start-stop-with-dependencies-bar-1\"), out)",
          "116:   assert.Assert(t, strings.Contains(out, \"e2e-start-stop-with-dependencies-foo-1\"), out)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad414613090d031583181d34cf93f15024d0524c",
      "candidate_info": {
        "commit_hash": "ad414613090d031583181d34cf93f15024d0524c",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/ad414613090d031583181d34cf93f15024d0524c",
        "files": [
          "go.mod",
          "go.sum",
          "pkg/compose/create.go"
        ],
        "message": "Bump compose-go to v2.0.1\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/create.go||pkg/compose/create.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.12",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.1",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "88: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "91: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "92: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "93: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0 h1:RLI8GmNxRLg759CzZITh/kGYZTYhEak121FaVYdXTC8=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "[Added Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.1 h1:XIvwK9RltlwAikI1d8aOaGGTr0/i2Jev3LoRn2nLEmA=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.1/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "---------------"
        ],
        "pkg/compose/create.go||pkg/compose/create.go": [
          "File: pkg/compose/create.go -> pkg/compose/create.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:  if limits.MemoryBytes != 0 {",
          "711:   resources.Memory = int64(limits.MemoryBytes)",
          "712:  }",
          "717:  }",
          "718:  if limits.Pids > 0 {",
          "719:   resources.PidsLimit = &limits.Pids",
          "",
          "[Removed Lines]",
          "713:  if limits.NanoCPUs != \"\" {",
          "714:   if f, err := strconv.ParseFloat(limits.NanoCPUs, 64); err == nil {",
          "715:    resources.NanoCPUs = int64(f * 1e9)",
          "716:   }",
          "",
          "[Added Lines]",
          "713:  if limits.NanoCPUs != 0 {",
          "714:   resources.NanoCPUs = int64(limits.NanoCPUs * 1e9)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f3c10eb4ba8cdd68cd3adfad60199d2004699d3",
      "candidate_info": {
        "commit_hash": "1f3c10eb4ba8cdd68cd3adfad60199d2004699d3",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/1f3c10eb4ba8cdd68cd3adfad60199d2004699d3",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "bump compose-go to v2.4.7\n\nSigned-off-by: Guillaume Lours <705411+glours@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  github.com/Microsoft/go-winio v0.6.2",
          "10:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
          "11:  github.com/buger/goterm v1.0.4",
          "13:  github.com/containerd/containerd v1.7.24",
          "14:  github.com/containerd/platforms v0.2.1",
          "15:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "12:  github.com/compose-spec/compose-go/v2 v2.4.6",
          "",
          "[Added Lines]",
          "12:  github.com/compose-spec/compose-go/v2 v2.4.7",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: github.com/cloudflare/cfssl v0.0.0-20180223231731-4e2dcbde5004/go.mod h1:yMWuSON2oQp+43nFtAV/uvKQIFpSPerB57DCt9t8sSA=",
          "80: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "81: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "84: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "85: github.com/containerd/cgroups/v3 v3.0.3 h1:S5ByHZ/h9PMe5IOQoN7E+nMc2UcLEM/V48DGDJ9kip0=",
          "86: github.com/containerd/cgroups/v3 v3.0.3/go.mod h1:8HBe7V3aWGLFPd/k03swSIsGjZhHI2WzJmticMgVuz0=",
          "",
          "[Removed Lines]",
          "82: github.com/compose-spec/compose-go/v2 v2.4.6 h1:QiqXQ2L/f0OCbAl41bPpeiGAWVRIQ+GEDrYxO+dRPhQ=",
          "83: github.com/compose-spec/compose-go/v2 v2.4.6/go.mod h1:lFN0DrMxIncJGYAXTfWuajfwj5haBJqrBkarHcnjJKc=",
          "",
          "[Added Lines]",
          "82: github.com/compose-spec/compose-go/v2 v2.4.7 h1:WNpz5bIbKG+G+w9pfu72B1ZXr+Og9jez8TMEo8ecXPk=",
          "83: github.com/compose-spec/compose-go/v2 v2.4.7/go.mod h1:lFN0DrMxIncJGYAXTfWuajfwj5haBJqrBkarHcnjJKc=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5617eff0c23fba31de33f6894e243c3bb36e6085",
      "candidate_info": {
        "commit_hash": "5617eff0c23fba31de33f6894e243c3bb36e6085",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/5617eff0c23fba31de33f6894e243c3bb36e6085",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "bump compose-go to v2.4.0\n\nSigned-off-by: Guillaume Lours <705411+glours@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  github.com/Microsoft/go-winio v0.6.2",
          "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
          "9:  github.com/buger/goterm v1.0.4",
          "11:  github.com/containerd/containerd v1.7.22",
          "12:  github.com/containerd/platforms v0.2.1",
          "13:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.3.1-0.20241015085011-35c9659361ef",
          "",
          "[Added Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.4.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: github.com/cncf/xds/go v0.0.0-20231128003011-0fa0005c9caa/go.mod h1:x/1Gn8zydmfq8dk6e9PdstVsDgu9RuyIIJqAaF//0IM=",
          "86: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "90: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "91: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "92: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
          "",
          "[Removed Lines]",
          "88: github.com/compose-spec/compose-go/v2 v2.3.1-0.20241015085011-35c9659361ef h1:E3qLbOpEyqemgAkQQg3uKNFaJJ+cVXGKiy1Xj4zh49k=",
          "89: github.com/compose-spec/compose-go/v2 v2.3.1-0.20241015085011-35c9659361ef/go.mod h1:lFN0DrMxIncJGYAXTfWuajfwj5haBJqrBkarHcnjJKc=",
          "",
          "[Added Lines]",
          "88: github.com/compose-spec/compose-go/v2 v2.4.0 h1:Hb0YNtknMWZGHUuULtV/f0cYJVTLt7TWHGEtJwOPzK4=",
          "89: github.com/compose-spec/compose-go/v2 v2.4.0/go.mod h1:lFN0DrMxIncJGYAXTfWuajfwj5haBJqrBkarHcnjJKc=",
          "",
          "---------------"
        ]
      }
    }
  ]
}