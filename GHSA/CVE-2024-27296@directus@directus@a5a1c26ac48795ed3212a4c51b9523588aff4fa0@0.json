{
  "cve_id": "CVE-2024-27296",
  "cve_desc": "Directus is a real-time API and App dashboard for managing SQL database content. Prior to version 10.8.3, the exact Directus version number was being shipped in compiled JS bundles which are accessible without authentication. With this information a malicious attacker can trivially look for known vulnerabilities in Directus core or any of its shipped dependencies in that specific running version. The problem has been resolved in versions 10.8.3 and newer.",
  "repo": "directus/directus",
  "patch_hash": "a5a1c26ac48795ed3212a4c51b9523588aff4fa0",
  "patch_info": {
    "commit_hash": "a5a1c26ac48795ed3212a4c51b9523588aff4fa0",
    "repo": "directus/directus",
    "commit_url": "https://github.com/directus/directus/commit/a5a1c26ac48795ed3212a4c51b9523588aff4fa0",
    "files": [
      "app/env.d.ts",
      "app/src/main.ts",
      "app/src/modules/settings/components/navigation.vue",
      "app/src/stores/server.ts",
      "app/vite.config.js"
    ],
    "message": "replaced hardcoded versions in the app",
    "before_after_code_files": [
      "app/env.d.ts||app/env.d.ts",
      "app/src/main.ts||app/src/main.ts",
      "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue",
      "app/src/stores/server.ts||app/src/stores/server.ts",
      "app/vite.config.js||app/vite.config.js"
    ]
  },
  "patch_diff": {
    "app/env.d.ts||app/env.d.ts": [
      "File: app/env.d.ts -> app/env.d.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "4: declare const __DIRECTUS_VERSION__: string;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "app/src/main.ts||app/src/main.ts": [
      "File: app/src/main.ts -> app/src/main.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: init();",
      "19: async function init() {",
      "22:  console.log(DIRECTUS_LOGO);",
      "24:  console.info(",
      "25:   `Hey! Interested in helping build this open-source data management platform?\\nIf so, join our growing team of contributors at: https://directus.chat`,",
      "26:  );",
      "34:  console.time('\ud83d\udd53 Application Loaded');",
      "",
      "[Removed Lines]",
      "20:  const version = __DIRECTUS_VERSION__;",
      "28:  if (import.meta.env.DEV) {",
      "29:   console.info(`%c\ud83d\udc30 Starting Directus v${version}...`, 'color:Green');",
      "30:  } else {",
      "31:   console.info(`%c\ud83d\udc30 Starting Directus...`, 'color:Green');",
      "32:  }",
      "",
      "[Added Lines]",
      "26:  console.info(`%c\ud83d\udc30 Starting Directus...`, 'color:Green');",
      "",
      "---------------"
    ],
    "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue": [
      "File: app/src/modules/settings/components/navigation.vue -> app/src/modules/settings/components/navigation.vue",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: <script setup lang=\"ts\">",
      "2: import { computed } from 'vue';",
      "3: import { useI18n } from 'vue-i18n';",
      "7: const { t } = useI18n();",
      "9: const dataItems = [",
      "10:  {",
      "",
      "[Removed Lines]",
      "5: const version = __DIRECTUS_VERSION__;",
      "",
      "[Added Lines]",
      "2: import { useServerStore } from '@/stores/server';",
      "7: const { info } = useServerStore();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "103:   <v-list-item href=\"https://github.com/directus/directus/releases\" class=\"version\">",
      "104:    <v-list-item-icon><v-icon name=\"directus\" /></v-list-item-icon>",
      "105:    <v-list-item-content>",
      "107:    </v-list-item-content>",
      "108:   </v-list-item>",
      "109:  </v-list>",
      "",
      "[Removed Lines]",
      "106:     <v-text-overflow class=\"version\" :text=\"`Directus ${version}`\" />",
      "",
      "[Added Lines]",
      "106:     <v-text-overflow class=\"version\" :text=\"`Directus ${info.version}`\" />",
      "",
      "---------------"
    ],
    "app/src/stores/server.ts||app/src/stores/server.ts": [
      "File: app/src/stores/server.ts -> app/src/stores/server.ts",
      "--- Hunk 1 ---",
      "[Context before]",
      "43:   default: number;",
      "44:   max: number;",
      "45:  };",
      "46: };",
      "48: export type Auth = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:  version?: string;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:   info.project = serverInfoResponse.data.data?.project;",
      "85:   info.queryLimit = serverInfoResponse.data.data?.queryLimit;",
      "87:   auth.providers = authResponse.data.data;",
      "88:   auth.disableDefault = authResponse.data.disableDefault;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:   info.version = serverInfoResponse.data.data?.version;",
      "",
      "---------------"
    ],
    "app/vite.config.js||app/vite.config.js": [
      "File: app/vite.config.js -> app/vite.config.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: import path from 'node:path';",
      "19: import { searchForWorkspaceRoot } from 'vite';",
      "20: import { defineConfig } from 'vitest/config';",
      "23: const API_PATH = path.join('..', 'api');",
      "24: const EXTENSIONS_PATH = path.join(API_PATH, 'extensions');",
      "27: export default defineConfig({",
      "31:  plugins: [",
      "32:   directusExtensions(),",
      "33:   vue(),",
      "",
      "[Removed Lines]",
      "21: import { version } from '../directus/package.json';",
      "28:  define: {",
      "29:   __DIRECTUS_VERSION__: JSON.stringify(version),",
      "30:  },",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "73d54991d7977375217029abb1a34ce4782610e4",
      "candidate_info": {
        "commit_hash": "73d54991d7977375217029abb1a34ce4782610e4",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/73d54991d7977375217029abb1a34ce4782610e4",
        "files": [
          "app/package.json",
          "app/src/main.ts",
          "app/src/modules/settings/components/navigation.vue",
          "app/src/vite-env.d.ts",
          "app/vite.config.js",
          "pnpm-lock.yaml"
        ],
        "message": "Get Directus version directly via filesystem from `directus` package (#18164)",
        "before_after_code_files": [
          "app/src/main.ts||app/src/main.ts",
          "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue",
          "app/src/vite-env.d.ts||app/src/vite-env.d.ts",
          "app/vite.config.js||app/vite.config.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/src/main.ts||app/src/main.ts",
            "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue",
            "app/vite.config.js||app/vite.config.js"
          ],
          "candidate": [
            "app/src/main.ts||app/src/main.ts",
            "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue",
            "app/vite.config.js||app/vite.config.js"
          ]
        }
      },
      "candidate_diff": {
        "app/src/main.ts||app/src/main.ts": [
          "File: app/src/main.ts -> app/src/main.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { getVueComponentName } from '@/utils/get-vue-component-name';",
          "4: import { createPinia } from 'pinia';",
          "5: import { createApp } from 'vue';",
          "7: import App from './app.vue';",
          "8: import { registerComponents } from './components/register';",
          "9: import { DIRECTUS_LOGO } from './constants';",
          "",
          "[Removed Lines]",
          "6: import { version } from '../package.json';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: init();",
          "19: async function init() {",
          "20:  console.log(DIRECTUS_LOGO);",
          "22:  console.info(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  const version = __DIRECTUS_VERSION__;",
          "",
          "---------------"
        ],
        "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue": [
          "File: app/src/modules/settings/components/navigation.vue -> app/src/modules/settings/components/navigation.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: <script lang=\"ts\">",
          "29: import { computed, defineComponent } from 'vue';",
          "30: import { useI18n } from 'vue-i18n';",
          "33: export default defineComponent({",
          "34:  setup() {",
          "35:   const { t } = useI18n();",
          "37:   const navItems = [",
          "",
          "[Removed Lines]",
          "31: import { version } from 'directus/package.json';",
          "",
          "[Added Lines]",
          "34:   const version = __DIRECTUS_VERSION__;",
          "",
          "---------------"
        ],
        "app/src/vite-env.d.ts||app/src/vite-env.d.ts": [
          "File: app/src/vite-env.d.ts -> app/src/vite-env.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: declare const __DIRECTUS_VERSION__: string;",
          "",
          "---------------"
        ],
        "app/vite.config.js||app/vite.config.js": [
          "File: app/vite.config.js -> app/vite.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: } from '@directus/utils/node';",
          "14: import yaml from '@rollup/plugin-yaml';",
          "15: import vue from '@vitejs/plugin-vue';",
          "18: import { searchForWorkspaceRoot } from 'vite';",
          "19: import { defineConfig } from 'vitest/config';",
          "21: const API_PATH = path.join('..', 'api');",
          "22: const EXTENSIONS_PATH = path.join(API_PATH, 'extensions');",
          "25: export default defineConfig({",
          "26:  plugins: [",
          "27:   directusExtensions(),",
          "28:   vue(),",
          "",
          "[Removed Lines]",
          "16: import path from 'path';",
          "17: import fs from 'fs';",
          "",
          "[Added Lines]",
          "16: import fs from 'node:fs';",
          "17: import path from 'node:path';",
          "20: import { version } from '../directus/package.json';",
          "27:  define: {",
          "28:   __DIRECTUS_VERSION__: JSON.stringify(version),",
          "29:  },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb68d5f08ba78ecd075da64a4773386289a12c03",
      "candidate_info": {
        "commit_hash": "bb68d5f08ba78ecd075da64a4773386289a12c03",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/bb68d5f08ba78ecd075da64a4773386289a12c03",
        "files": [
          "app/src/stores/server.test.ts",
          "app/src/stores/server.ts"
        ],
        "message": "fixed the readProviders command",
        "before_after_code_files": [
          "app/src/stores/server.test.ts||app/src/stores/server.test.ts",
          "app/src/stores/server.ts||app/src/stores/server.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/src/stores/server.ts||app/src/stores/server.ts"
          ],
          "candidate": [
            "app/src/stores/server.ts||app/src/stores/server.ts"
          ]
        }
      },
      "candidate_diff": {
        "app/src/stores/server.test.ts||app/src/stores/server.test.ts": [
          "File: app/src/stores/server.test.ts -> app/src/stores/server.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import * as setLanguageDefault from '@/lang/set-language';",
          "3: import { User } from '@directus/types';",
          "4: import { createTestingPinia } from '@pinia/testing';",
          "",
          "[Removed Lines]",
          "1: import api, * as apiFunctions from '@/api';",
          "",
          "[Added Lines]",
          "1: import * as apiFunctions from '@/api';",
          "2: import sdk from '@/sdk';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:  language: 'zh-CN',",
          "52: } as User;",
          "55: let replaceQueueSpy: MockInstance;",
          "56: let setLanguageSpy: MockInstance;",
          "58: beforeEach(() => {",
          "60:  replaceQueueSpy = vi.spyOn(apiFunctions, 'replaceQueue').mockResolvedValue();",
          "61:  setLanguageSpy = vi.spyOn(setLanguageDefault, 'setLanguage').mockResolvedValue(true);",
          "62: });",
          "",
          "[Removed Lines]",
          "54: let apiGetSpy: MockInstance;",
          "59:  apiGetSpy = vi.spyOn(api, 'get');",
          "",
          "[Added Lines]",
          "55: let sdkRequestSpy: MockInstance;",
          "60:  sdkRequestSpy = vi.spyOn(sdk, 'request');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "68: describe('hydrate action', async () => {",
          "69:  test('should hydrate info', async () => {",
          "71:    if (path === '/server/info') {",
          "77:    }",
          "79:    if (path.startsWith('/auth')) {",
          "82:    }",
          "84:    return;",
          "",
          "[Removed Lines]",
          "70:   apiGetSpy.mockImplementation((path: string) => {",
          "72:     return Promise.resolve({",
          "73:      data: {",
          "74:       data: mockServerInfo,",
          "75:      },",
          "76:     });",
          "81:     return Promise.resolve({ data: {} });",
          "",
          "[Added Lines]",
          "71:   sdkRequestSpy.mockImplementation((cfg: () => Record<string, any>) => {",
          "72:    const { path } = cfg();",
          "75:     return Promise.resolve(mockServerInfo);",
          "80:     return Promise.resolve({});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "91:  });",
          "93:  test('should hydrate auth', async () => {",
          "95:    if (path === '/server/info') {",
          "98:    }",
          "100:    if (path.startsWith('/auth')) {",
          "101:     return Promise.resolve({",
          "106:     });",
          "107:    }",
          "",
          "[Removed Lines]",
          "94:   apiGetSpy.mockImplementation((path: string) => {",
          "97:     return Promise.resolve({ data: {} });",
          "102:      data: {",
          "103:       data: mockAuthProviders,",
          "104:       disableDefault: true,",
          "105:      },",
          "",
          "[Added Lines]",
          "93:   sdkRequestSpy.mockImplementation((cfg: () => Record<string, any>) => {",
          "94:    const { path } = cfg();",
          "98:     return Promise.resolve({});",
          "103:      data: mockAuthProviders,",
          "104:      disableDefault: true,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:  });",
          "124:  test('should set default language en-US when there is no logged in user', async () => {",
          "126:    if (path === '/server/info') {",
          "129:    }",
          "131:    if (path.startsWith('/auth')) {",
          "134:    }",
          "136:    return;",
          "",
          "[Removed Lines]",
          "125:   apiGetSpy.mockImplementation((path: string) => {",
          "128:     return Promise.resolve({ data: {} });",
          "133:     return Promise.resolve({ data: {} });",
          "",
          "[Added Lines]",
          "124:   sdkRequestSpy.mockImplementation((cfg: () => Record<string, any>) => {",
          "125:    const { path } = cfg();",
          "129:     return Promise.resolve({});",
          "134:     return Promise.resolve({});",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "143:  });",
          "145:  test('should set configured default language when there is no logged in user', async () => {",
          "147:    if (path === '/server/info') {",
          "153:    }",
          "155:    if (path.startsWith('/auth')) {",
          "158:    }",
          "160:    return;",
          "",
          "[Removed Lines]",
          "146:   apiGetSpy.mockImplementation((path: string) => {",
          "148:     return Promise.resolve({",
          "149:      data: {",
          "150:       data: mockServerInfo,",
          "151:      },",
          "152:     });",
          "157:     return Promise.resolve({ data: {} });",
          "",
          "[Added Lines]",
          "147:   sdkRequestSpy.mockImplementation((cfg: () => Record<string, any>) => {",
          "148:    const { path } = cfg();",
          "151:     return Promise.resolve(mockServerInfo);",
          "156:     return Promise.resolve({});",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "167:  });",
          "169:  test('should set updated default language for admin user', async () => {",
          "171:    if (path === '/server/info') {",
          "177:    }",
          "179:    if (path.startsWith('/auth')) {",
          "182:    }",
          "184:    return;",
          "",
          "[Removed Lines]",
          "170:   apiGetSpy.mockImplementation((path: string) => {",
          "172:     return Promise.resolve({",
          "173:      data: {",
          "174:       data: mockServerInfo,",
          "175:      },",
          "176:     });",
          "181:     return Promise.resolve({ data: {} });",
          "",
          "[Added Lines]",
          "169:   sdkRequestSpy.mockImplementation((cfg: () => Record<string, any>) => {",
          "170:    const { path } = cfg();",
          "173:     return Promise.resolve(mockServerInfo);",
          "178:     return Promise.resolve({});",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "194:  });",
          "196:  test('should not set updated default language for admin user', async () => {",
          "198:    if (path === '/server/info') {",
          "204:    }",
          "206:    if (path.startsWith('/auth')) {",
          "209:    }",
          "211:    return;",
          "",
          "[Removed Lines]",
          "197:   apiGetSpy.mockImplementation((path: string) => {",
          "199:     return Promise.resolve({",
          "200:      data: {",
          "201:       data: mockServerInfo,",
          "202:      },",
          "203:     });",
          "208:     return Promise.resolve({ data: {} });",
          "",
          "[Added Lines]",
          "194:   sdkRequestSpy.mockImplementation((cfg: () => Record<string, any>) => {",
          "195:    const { path } = cfg();",
          "198:     return Promise.resolve(mockServerInfo);",
          "203:     return Promise.resolve({});",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "221:  });",
          "223:  test('should not set updated default language for admin user with configured language', async () => {",
          "225:    if (path === '/server/info') {",
          "231:    }",
          "233:    if (path.startsWith('/auth')) {",
          "236:    }",
          "238:    return;",
          "",
          "[Removed Lines]",
          "224:   apiGetSpy.mockImplementation((path: string) => {",
          "226:     return Promise.resolve({",
          "227:      data: {",
          "228:       data: mockServerInfo,",
          "229:      },",
          "230:     });",
          "235:     return Promise.resolve({ data: {} });",
          "",
          "[Added Lines]",
          "219:   sdkRequestSpy.mockImplementation((cfg: () => Record<string, any>) => {",
          "220:    const { path } = cfg();",
          "223:     return Promise.resolve(mockServerInfo);",
          "228:     return Promise.resolve({});",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "248:  });",
          "250:  test('should not call replaceQueue when there is no rateLimit', async () => {",
          "252:    if (path === '/server/info') {",
          "258:    }",
          "260:    if (path.startsWith('/auth')) {",
          "263:    }",
          "265:    return;",
          "",
          "[Removed Lines]",
          "251:   apiGetSpy.mockImplementation((path: string) => {",
          "253:     return Promise.resolve({",
          "254:      data: {",
          "255:       data: {},",
          "256:      },",
          "257:     });",
          "262:     return Promise.resolve({ data: {} });",
          "",
          "[Added Lines]",
          "244:   sdkRequestSpy.mockImplementation((cfg: () => Record<string, any>) => {",
          "245:    const { path } = cfg();",
          "248:     return Promise.resolve({});",
          "253:     return Promise.resolve({});",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "272:  });",
          "274:  test('should call replaceQueue without arguments when rateLimit is false', async () => {",
          "276:    if (path === '/server/info') {",
          "282:    }",
          "284:    if (path.startsWith('/auth')) {",
          "287:    }",
          "289:    return;",
          "",
          "[Removed Lines]",
          "275:   apiGetSpy.mockImplementation((path: string) => {",
          "277:     return Promise.resolve({",
          "278:      data: {",
          "279:       data: { rateLimit: false },",
          "280:      },",
          "281:     });",
          "286:     return Promise.resolve({ data: {} });",
          "",
          "[Added Lines]",
          "266:   sdkRequestSpy.mockImplementation((cfg: () => Record<string, any>) => {",
          "267:    const { path } = cfg();",
          "270:     return Promise.resolve({ rateLimit: false });",
          "275:     return Promise.resolve({});",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "301:    points: 20,",
          "302:   };",
          "305:    if (path === '/server/info') {",
          "313:    }",
          "315:    if (path.startsWith('/auth')) {",
          "318:    }",
          "320:    return;",
          "",
          "[Removed Lines]",
          "304:   apiGetSpy.mockImplementation((path: string) => {",
          "306:     return Promise.resolve({",
          "307:      data: {",
          "308:       data: {",
          "309:        rateLimit: mockRateLimit,",
          "310:       },",
          "311:      },",
          "312:     });",
          "317:     return Promise.resolve({ data: {} });",
          "",
          "[Added Lines]",
          "293:   sdkRequestSpy.mockImplementation((cfg: () => Record<string, any>) => {",
          "294:    const { path } = cfg();",
          "297:     return Promise.resolve({ rateLimit: mockRateLimit });",
          "302:     return Promise.resolve({});",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "334: describe('dehydrate action', () => {",
          "335:  test('should reset store', async () => {",
          "337:    if (path === '/server/info') {",
          "343:    }",
          "345:    if (path.startsWith('/auth')) {",
          "346:     return Promise.resolve({",
          "351:     });",
          "352:    }",
          "",
          "[Removed Lines]",
          "336:   apiGetSpy.mockImplementation((path: string) => {",
          "338:     return Promise.resolve({",
          "339:      data: {",
          "340:       data: mockServerInfo,",
          "341:      },",
          "342:     });",
          "347:      data: {",
          "348:       data: mockAuthProviders,",
          "349:       disableDefault: true,",
          "350:      },",
          "",
          "[Added Lines]",
          "321:   sdkRequestSpy.mockImplementation((cfg: () => Record<string, any>) => {",
          "322:    const { path } = cfg();",
          "325:     return Promise.resolve(mockServerInfo);",
          "330:      data: mockAuthProviders,",
          "331:      disableDefault: true,",
          "",
          "---------------"
        ],
        "app/src/stores/server.ts||app/src/stores/server.ts": [
          "File: app/src/stores/server.ts -> app/src/stores/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { AUTH_SSO_DRIVERS, DEFAULT_AUTH_DRIVER, DEFAULT_AUTH_PROVIDER } from '@/constants';",
          "3: import { i18n } from '@/lang';",
          "4: import { setLanguage } from '@/lang/set-language';",
          "5: import { useUserStore } from '@/stores/user';",
          "6: import { AuthProvider } from '@/types/login';",
          "7: import formatTitle from '@directus/format-title';",
          "8: import { acceptHMRUpdate, defineStore } from 'pinia';",
          "9: import { computed, reactive, unref } from 'vue';",
          "",
          "[Removed Lines]",
          "1: import api, { replaceQueue } from '@/api';",
          "",
          "[Added Lines]",
          "1: import { replaceQueue } from '@/api';",
          "5: import sdk from '@/sdk';",
          "9: import { readProviders, serverInfo } from '@directus/sdk';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:  const hydrate = async (options?: HydrateOptions) => {",
          "87:   const [serverInfoResponse, authResponse] = await Promise.all([",
          "90:   ]);",
          "100:   const { currentUser } = useUserStore();",
          "",
          "[Removed Lines]",
          "88:    api.get(`/server/info`),",
          "89:    api.get('/auth?sessionOnly'),",
          "92:   info.project = serverInfoResponse.data.data?.project;",
          "93:   info.queryLimit = serverInfoResponse.data.data?.queryLimit;",
          "94:   info.extensions = serverInfoResponse.data.data?.extensions;",
          "95:   info.version = serverInfoResponse.data.data?.version;",
          "97:   auth.providers = authResponse.data.data;",
          "98:   auth.disableDefault = authResponse.data.disableDefault;",
          "",
          "[Added Lines]",
          "90:    sdk.request(serverInfo()),",
          "91:    sdk.request(readProviders(true)),",
          "94:   info.project = serverInfoResponse.project;",
          "95:   info.queryLimit = serverInfoResponse.queryLimit;",
          "96:   info.extensions = serverInfoResponse.extensions;",
          "97:   info.version = serverInfoResponse.version;",
          "99:   auth.providers = authResponse.data;",
          "100:   auth.disableDefault = authResponse.disableDefault;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:    await setLanguage(unref(info)?.project?.default_language ?? 'en-US');",
          "110:   }",
          "114:     await replaceQueue();",
          "115:    } else {",
          "117:     await replaceQueue({ intervalCap: points - 10, interval: duration * 1000, carryoverConcurrencyCount: true });",
          "118:    }",
          "119:   }",
          "",
          "[Removed Lines]",
          "112:   if (serverInfoResponse.data.data?.rateLimit !== undefined) {",
          "113:    if (serverInfoResponse.data.data?.rateLimit === false) {",
          "116:     const { duration, points } = serverInfoResponse.data.data.rateLimit;",
          "",
          "[Added Lines]",
          "114:   if (serverInfoResponse.rateLimit !== undefined) {",
          "115:    if (serverInfoResponse.rateLimit === false) {",
          "118:     const { duration, points } = serverInfoResponse.rateLimit;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "545d392e936bab5303e4f512cea9821600ea6703",
      "candidate_info": {
        "commit_hash": "545d392e936bab5303e4f512cea9821600ea6703",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/545d392e936bab5303e4f512cea9821600ea6703",
        "files": [
          ".changeset/three-poems-agree.md",
          "api/package.json",
          "api/src/cli/index.ts",
          "api/src/services/schema.test.ts",
          "api/src/services/server.ts",
          "api/src/services/specifications.ts",
          "api/src/utils/get-cache-key.test.ts",
          "api/src/utils/get-cache-key.ts",
          "api/src/utils/get-snapshot.ts",
          "api/src/utils/get-versioned-hash.test.ts",
          "api/src/utils/get-versioned-hash.ts",
          "api/src/utils/package.ts",
          "api/src/utils/telemetry.ts",
          "api/src/utils/validate-snapshot.test.ts",
          "api/src/utils/validate-snapshot.ts",
          "app/src/main.ts",
          "app/src/modules/settings/components/navigation.vue",
          "directus/cli.js",
          "directus/package.json",
          "directus/version.d.ts",
          "directus/version.js",
          "pnpm-lock.yaml"
        ],
        "message": "Deprecate utils/package.js in favor of directus/version (#20840)\n\n* Deprecate utils/package.js in favor of directus/version\n\n* Add changeset\n\n* Drop version console log\n\n* Make info reactive\n\n* Fix import order\n\n* Update directus/version.js\n\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>\n\n* Fix tests\n\n---------\n\nCo-authored-by: Pascal Jufer <pascal-jufer@bluewin.ch>",
        "before_after_code_files": [
          "api/src/cli/index.ts||api/src/cli/index.ts",
          "api/src/services/schema.test.ts||api/src/services/schema.test.ts",
          "api/src/services/server.ts||api/src/services/server.ts",
          "api/src/services/specifications.ts||api/src/services/specifications.ts",
          "api/src/utils/get-cache-key.test.ts||api/src/utils/get-cache-key.test.ts",
          "api/src/utils/get-cache-key.ts||api/src/utils/get-cache-key.ts",
          "api/src/utils/get-snapshot.ts||api/src/utils/get-snapshot.ts",
          "api/src/utils/get-versioned-hash.test.ts||api/src/utils/get-versioned-hash.test.ts",
          "api/src/utils/get-versioned-hash.ts||api/src/utils/get-versioned-hash.ts",
          "api/src/utils/package.ts||api/src/utils/package.ts",
          "api/src/utils/telemetry.ts||api/src/utils/telemetry.ts",
          "api/src/utils/validate-snapshot.test.ts||api/src/utils/validate-snapshot.test.ts",
          "api/src/utils/validate-snapshot.ts||api/src/utils/validate-snapshot.ts",
          "app/src/main.ts||app/src/main.ts",
          "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue",
          "directus/cli.js||directus/cli.js",
          "directus/version.d.ts||directus/version.d.ts",
          "directus/version.js||directus/version.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/src/main.ts||app/src/main.ts",
            "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue"
          ],
          "candidate": [
            "app/src/main.ts||app/src/main.ts",
            "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue"
          ]
        }
      },
      "candidate_diff": {
        "api/src/cli/index.ts||api/src/cli/index.ts": [
          "File: api/src/cli/index.ts -> api/src/cli/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import { Command, Option } from 'commander';",
          "2: import emitter from '../emitter.js';",
          "3: import { startServer } from '../server.js';",
          "5: import bootstrap from './commands/bootstrap/index.js';",
          "6: import count from './commands/count/index.js';",
          "7: import dbInstall from './commands/database/install.js';",
          "",
          "[Removed Lines]",
          "4: import * as pkg from '../utils/package.js';",
          "",
          "[Added Lines]",
          "2: import { version } from 'directus/version';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:  await emitter.emitInit('cli.before', { program });",
          "26:  program.name('directus').usage('[command] [options]');",
          "29:  program.command('start').description('Start the Directus API').action(startServer);",
          "30:  program.command('init').description('Create a new Directus Project').action(init);",
          "",
          "[Removed Lines]",
          "27:  program.version(pkg.version, '-v, --version');",
          "",
          "[Added Lines]",
          "27:  program.version(version, '-v, --version');",
          "",
          "---------------"
        ],
        "api/src/services/schema.test.ts||api/src/services/schema.test.ts": [
          "File: api/src/services/schema.test.ts -> api/src/services/schema.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import { getSnapshot } from '../utils/get-snapshot.js';",
          "11: import { SchemaService } from './schema.js';",
          "15: vi.mock('../../src/database/index.js', () => {",
          "16:  return { __esModule: true, default: vi.fn(), getDatabaseClient: vi.fn().mockReturnValue('postgres') };",
          "",
          "[Removed Lines]",
          "13: vi.mock('../utils/package.js', () => ({ version: '0.0.0' }));",
          "",
          "[Added Lines]",
          "13: vi.mock('directus/version', () => ({ version: '0.0.0' }));",
          "",
          "---------------"
        ],
        "api/src/services/server.ts||api/src/services/server.ts": [
          "File: api/src/services/server.ts -> api/src/services/server.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import type { Accountability, SchemaOverview } from '@directus/types';",
          "2: import { toArray } from '@directus/utils';",
          "3: import type { Knex } from 'knex';",
          "4: import { merge } from 'lodash-es';",
          "5: import { Readable } from 'node:stream';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import { version } from 'directus/version';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "14: import { SERVER_ONLINE } from '../server.js';",
          "15: import { getStorage } from '../storage/index.js';",
          "16: import type { AbstractServiceOptions } from '../types/index.js';",
          "18: import { toBoolean } from '../utils/to-boolean.js';",
          "19: import { SettingsService } from './settings.js';",
          "",
          "[Removed Lines]",
          "17: import { version, releaseVersion } from '../utils/package.js';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:     info['websocket'] = false;",
          "105:    }",
          "108:   }",
          "110:   return info;",
          "",
          "[Removed Lines]",
          "107:    info['version'] = releaseVersion;",
          "",
          "[Added Lines]",
          "107:    info['version'] = version;",
          "",
          "---------------"
        ],
        "api/src/services/specifications.ts||api/src/services/specifications.ts": [
          "File: api/src/services/specifications.ts -> api/src/services/specifications.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import formatTitle from '@directus/format-title';",
          "2: import { spec } from '@directus/specs';",
          "3: import type { Accountability, FieldOverview, Permission, SchemaOverview, Type } from '@directus/types';",
          "4: import type { Knex } from 'knex';",
          "5: import { cloneDeep, mergeWith } from 'lodash-es';",
          "6: import type {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import { version } from 'directus/version';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16: import env from '../env.js';",
          "17: import type { AbstractServiceOptions } from '../types/index.js';",
          "18: import { getRelationType } from '../utils/get-relation-type.js';",
          "21: import { reduceSchema } from '../utils/reduce-schema.js';",
          "23: export class SpecificationService {",
          "24:  accountability: Accountability | null;",
          "",
          "[Removed Lines]",
          "19: import { version } from '../utils/package.js';",
          "20: import { GraphQLService } from './graphql/index.js';",
          "",
          "[Added Lines]",
          "21: import { GraphQLService } from './graphql/index.js';",
          "",
          "---------------"
        ],
        "api/src/utils/get-cache-key.test.ts||api/src/utils/get-cache-key.test.ts": [
          "File: api/src/utils/get-cache-key.test.ts -> api/src/utils/get-cache-key.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { getCacheKey } from './get-cache-key.js';",
          "4: import * as getGraphqlQueryUtil from './get-graphql-query-and-variables.js';",
          "8: const baseUrl = 'http://localhost';",
          "9: const restUrl = `${baseUrl}/items/example`;",
          "",
          "[Removed Lines]",
          "6: vi.mock('./package.js', () => ({ version: '1.2.3' }));",
          "",
          "[Added Lines]",
          "6: vi.mock('directus/version', () => ({ version: '1.2.3' }));",
          "",
          "---------------"
        ],
        "api/src/utils/get-cache-key.ts||api/src/utils/get-cache-key.ts": [
          "File: api/src/utils/get-cache-key.ts -> api/src/utils/get-cache-key.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import hash from 'object-hash';",
          "3: import url from 'url';",
          "4: import { getGraphqlQueryAndVariables } from './get-graphql-query-and-variables.js';",
          "7: export function getCacheKey(req: Request): string {",
          "8:  const path = url.parse(req.originalUrl).pathname;",
          "",
          "[Removed Lines]",
          "5: import { version } from './package.js';",
          "",
          "[Added Lines]",
          "5: import { version } from 'directus/version';",
          "",
          "---------------"
        ],
        "api/src/utils/get-snapshot.ts||api/src/utils/get-snapshot.ts": [
          "File: api/src/utils/get-snapshot.ts -> api/src/utils/get-snapshot.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import type { SchemaOverview } from '@directus/types';",
          "2: import type { Knex } from 'knex';",
          "3: import { fromPairs, isArray, isPlainObject, mapValues, omit, sortBy, toPairs } from 'lodash-es';",
          "4: import getDatabase, { getDatabaseClient } from '../database/index.js';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: import { version } from 'directus/version';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7: import { RelationsService } from '../services/relations.js';",
          "8: import type { Collection, Snapshot, SnapshotField, SnapshotRelation } from '../types/index.js';",
          "9: import { getSchema } from './get-schema.js';",
          "11: import { sanitizeCollection, sanitizeField, sanitizeRelation } from './sanitize-schema.js';",
          "13: export async function getSnapshot(options?: { database?: Knex; schema?: SchemaOverview }): Promise<Snapshot> {",
          "",
          "[Removed Lines]",
          "10: import { version } from './package.js';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "api/src/utils/get-versioned-hash.test.ts||api/src/utils/get-versioned-hash.test.ts": [
          "File: api/src/utils/get-versioned-hash.test.ts -> api/src/utils/get-versioned-hash.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { getVersionedHash } from './get-versioned-hash.js';",
          "9: describe('getVersionedHash', () => {",
          "10:  test.each([",
          "",
          "[Removed Lines]",
          "1: import { test, expect, describe, vi } from 'vitest';",
          "5: vi.mock('./package.js', () => ({",
          "6:  version: '10.10.10',",
          "7: }));",
          "",
          "[Added Lines]",
          "1: import { describe, expect, test, vi } from 'vitest';",
          "4: vi.mock('directus/version', () => ({ version: '10.10.10' }));",
          "",
          "---------------"
        ],
        "api/src/utils/get-versioned-hash.ts||api/src/utils/get-versioned-hash.ts": [
          "File: api/src/utils/get-versioned-hash.ts -> api/src/utils/get-versioned-hash.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import hash from 'object-hash';",
          "4: export function getVersionedHash(item: Record<string, any>): string {",
          "5:  return hash({ item, version });",
          "",
          "[Removed Lines]",
          "2: import { version } from './package.js';",
          "",
          "[Added Lines]",
          "1: import { version } from 'directus/version';",
          "",
          "---------------"
        ],
        "api/src/utils/package.ts||api/src/utils/package.ts": [
          "File: api/src/utils/package.ts -> api/src/utils/package.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "api/src/utils/telemetry.ts||api/src/utils/telemetry.ts": [
          "File: api/src/utils/telemetry.ts -> api/src/utils/telemetry.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import mid from 'node-machine-id';",
          "2: import env from '../env.js';",
          "3: import logger from '../logger.js';",
          "6: export async function collectTelemetry(): Promise<void> {",
          "7:  const axios = (await import('axios')).default;",
          "",
          "[Removed Lines]",
          "4: import { version } from './package.js';",
          "",
          "[Added Lines]",
          "4: import { version } from 'directus/version';",
          "",
          "---------------"
        ],
        "api/src/utils/validate-snapshot.test.ts||api/src/utils/validate-snapshot.test.ts": [
          "File: api/src/utils/validate-snapshot.test.ts -> api/src/utils/validate-snapshot.test.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import type { Snapshot } from '../types/snapshot.js';",
          "3: import { validateSnapshot } from './validate-snapshot.js';",
          "6:  version: '10.0.0',",
          "7: }));",
          "",
          "[Removed Lines]",
          "5: vi.mock('./package.js', () => ({",
          "",
          "[Added Lines]",
          "5: vi.mock('directus/version', () => ({",
          "",
          "---------------"
        ],
        "api/src/utils/validate-snapshot.ts||api/src/utils/validate-snapshot.ts": [
          "File: api/src/utils/validate-snapshot.ts -> api/src/utils/validate-snapshot.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: import { InvalidPayloadError } from '@directus/errors';",
          "6: import type { Snapshot } from '../types/index.js';",
          "7: import { DatabaseClients } from '../types/index.js';",
          "10: const snapshotJoiSchema = Joi.object({",
          "11:  version: Joi.number().valid(1).required(),",
          "",
          "[Removed Lines]",
          "8: import { version as currentDirectusVersion } from './package.js';",
          "",
          "[Added Lines]",
          "8: import { version } from 'directus/version';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:  if (force) return;",
          "64:   throw new InvalidPayloadError({",
          "66:   });",
          "67:  }",
          "",
          "[Removed Lines]",
          "63:  if (snapshot.directus !== currentDirectusVersion) {",
          "65:    reason: `Provided snapshot's directus version ${snapshot.directus} does not match the current instance's version ${currentDirectusVersion}. You can bypass this check by passing the \"force\" query parameter`,",
          "",
          "[Added Lines]",
          "63:  if (snapshot.directus !== version) {",
          "65:    reason: `Provided snapshot's directus version ${snapshot.directus} does not match the current instance's version ${version}. You can bypass this check by passing the \"force\" query parameter`,",
          "",
          "---------------"
        ],
        "app/src/main.ts||app/src/main.ts": [
          "File: app/src/main.ts -> app/src/main.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { getVueComponentName } from '@/utils/get-vue-component-name';",
          "5: import { createHead } from '@unhead/vue';",
          "7: import App from './app.vue';",
          "8: import { registerComponents } from './components/register';",
          "9: import { DIRECTUS_LOGO } from './constants';",
          "",
          "[Removed Lines]",
          "4: import { createPinia } from 'pinia';",
          "6: import { createApp } from 'vue';",
          "",
          "[Added Lines]",
          "4: import { createApp } from 'vue';",
          "8: import { createPinia } from 'pinia';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "57:  console.group(`%c\u2728 Project Information`, 'color:DodgerBlue'); // groupCollapsed",
          "63:  console.info(`%cEnvironment: ${import.meta.env.MODE}`, 'color:DodgerBlue');",
          "64:  console.groupEnd();",
          "",
          "[Removed Lines]",
          "59:  if (import.meta.env.DEV) {",
          "60:   console.info(`%cVersion: v${version}`, 'color:DodgerBlue');",
          "61:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue": [
          "File: app/src/modules/settings/components/navigation.vue -> app/src/modules/settings/components/navigation.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import { useServerStore } from '@/stores/server';",
          "3: import { computed } from 'vue';",
          "4: import { useI18n } from 'vue-i18n';",
          "6: const { t } = useI18n();",
          "9: const dataItems = [",
          "10:  {",
          "",
          "[Removed Lines]",
          "7: const { info } = useServerStore();",
          "",
          "[Added Lines]",
          "5: import { storeToRefs } from 'pinia';",
          "8: const { info } = storeToRefs(useServerStore());",
          "",
          "---------------"
        ],
        "directus/cli.js||directus/cli.js": [
          "File: directus/cli.js -> directus/cli.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/bin/env node",
          "2: import { updateCheck } from '@directus/update-check';",
          "11: if (version) {",
          "12:  await updateCheck(version);",
          "",
          "[Removed Lines]",
          "3: import { readFileSync } from 'node:fs';",
          "4: import { dirname, resolve } from 'node:path';",
          "5: import { fileURLToPath } from 'node:url';",
          "7: const __dirname = dirname(fileURLToPath(import.meta.url));",
          "9: const { version } = JSON.parse(readFileSync(resolve(__dirname, 'package.json'), 'utf8'));",
          "",
          "[Added Lines]",
          "3: import { version } from './version.js';",
          "",
          "---------------"
        ],
        "directus/version.d.ts||directus/version.d.ts": [
          "File: directus/version.d.ts -> directus/version.d.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: export declare const version: string;",
          "",
          "---------------"
        ],
        "directus/version.js||directus/version.js": [
          "File: directus/version.js -> directus/version.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import { readFile } from 'node:fs/promises';",
          "2: import { dirname, join } from 'node:path';",
          "3: import { fileURLToPath } from 'node:url';",
          "5: const __dirname = dirname(fileURLToPath(import.meta.url));",
          "7: const pkg = JSON.parse(await readFile(join(__dirname, 'package.json'), 'utf8'));",
          "9: export const version = pkg.version;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42e69bbb27e1a2ff320b896ac693e0dc574bc22d",
      "candidate_info": {
        "commit_hash": "42e69bbb27e1a2ff320b896ac693e0dc574bc22d",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/42e69bbb27e1a2ff320b896ac693e0dc574bc22d",
        "files": [
          "app/src/modules/settings/components/navigation.vue",
          "app/src/modules/settings/routes/not-found.vue",
          "app/src/modules/settings/routes/project/components/project-info-sidebar-detail.vue",
          "app/src/modules/settings/routes/project/project.vue",
          "app/src/modules/settings/routes/roles/add-new.vue",
          "app/src/modules/settings/routes/roles/collection.vue",
          "app/src/modules/settings/routes/roles/item/components/permissions-overview-row.vue",
          "app/src/modules/settings/routes/roles/item/components/permissions-overview-toggle.vue",
          "app/src/modules/settings/routes/roles/item/components/permissions-overview.vue",
          "app/src/modules/settings/routes/roles/item/item.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/components/actions.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/components/fields.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/components/permissions.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/components/presets.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/components/tabs.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/components/validation.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/permissions-detail.vue",
          "app/src/modules/settings/routes/roles/public-item.vue",
          "app/src/modules/settings/routes/webhooks/collection.vue",
          "app/src/modules/settings/routes/webhooks/item.vue"
        ],
        "message": "script[setup]: rest of settings (#18447)",
        "before_after_code_files": [
          "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue",
          "app/src/modules/settings/routes/not-found.vue||app/src/modules/settings/routes/not-found.vue",
          "app/src/modules/settings/routes/project/components/project-info-sidebar-detail.vue||app/src/modules/settings/routes/project/components/project-info-sidebar-detail.vue",
          "app/src/modules/settings/routes/project/project.vue||app/src/modules/settings/routes/project/project.vue",
          "app/src/modules/settings/routes/roles/add-new.vue||app/src/modules/settings/routes/roles/add-new.vue",
          "app/src/modules/settings/routes/roles/collection.vue||app/src/modules/settings/routes/roles/collection.vue",
          "app/src/modules/settings/routes/roles/item/components/permissions-overview-row.vue||app/src/modules/settings/routes/roles/item/components/permissions-overview-row.vue",
          "app/src/modules/settings/routes/roles/item/components/permissions-overview-toggle.vue||app/src/modules/settings/routes/roles/item/components/permissions-overview-toggle.vue",
          "app/src/modules/settings/routes/roles/item/components/permissions-overview.vue||app/src/modules/settings/routes/roles/item/components/permissions-overview.vue",
          "app/src/modules/settings/routes/roles/item/item.vue||app/src/modules/settings/routes/roles/item/item.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/components/actions.vue||app/src/modules/settings/routes/roles/permissions-detail/components/actions.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/components/fields.vue||app/src/modules/settings/routes/roles/permissions-detail/components/fields.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/components/permissions.vue||app/src/modules/settings/routes/roles/permissions-detail/components/permissions.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/components/presets.vue||app/src/modules/settings/routes/roles/permissions-detail/components/presets.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/components/tabs.vue||app/src/modules/settings/routes/roles/permissions-detail/components/tabs.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/components/validation.vue||app/src/modules/settings/routes/roles/permissions-detail/components/validation.vue",
          "app/src/modules/settings/routes/roles/permissions-detail/permissions-detail.vue||app/src/modules/settings/routes/roles/permissions-detail/permissions-detail.vue",
          "app/src/modules/settings/routes/roles/public-item.vue||app/src/modules/settings/routes/roles/public-item.vue",
          "app/src/modules/settings/routes/webhooks/collection.vue||app/src/modules/settings/routes/webhooks/collection.vue",
          "app/src/modules/settings/routes/webhooks/item.vue||app/src/modules/settings/routes/webhooks/item.vue"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue"
          ],
          "candidate": [
            "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue"
          ]
        }
      },
      "candidate_diff": {
        "app/src/modules/settings/components/navigation.vue||app/src/modules/settings/components/navigation.vue": [
          "File: app/src/modules/settings/components/navigation.vue -> app/src/modules/settings/components/navigation.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  </v-list>",
          "26: </template>",
          "30: import { useI18n } from 'vue-i18n';",
          "92:  },",
          "93: });",
          "94: </script>",
          "",
          "[Removed Lines]",
          "28: <script lang=\"ts\">",
          "29: import { computed, defineComponent } from 'vue';",
          "32: export default defineComponent({",
          "33:  setup() {",
          "34:   const version = __DIRECTUS_VERSION__;",
          "36:   const { t } = useI18n();",
          "38:   const navItems = [",
          "39:    {",
          "40:     icon: 'public',",
          "41:     name: t('settings_project'),",
          "42:     to: `/settings/project`,",
          "43:    },",
          "44:    {",
          "45:     icon: 'list_alt',",
          "46:     name: t('settings_data_model'),",
          "47:     to: `/settings/data-model`,",
          "48:    },",
          "49:    {",
          "50:     icon: 'admin_panel_settings',",
          "51:     name: t('settings_permissions'),",
          "52:     to: `/settings/roles`,",
          "53:    },",
          "54:    {",
          "55:     icon: 'bookmark',",
          "56:     name: t('settings_presets'),",
          "57:     to: `/settings/presets`,",
          "58:    },",
          "59:    {",
          "60:     icon: 'translate',",
          "61:     name: t('settings_translation_strings'),",
          "62:     to: `/settings/translation-strings`,",
          "63:    },",
          "64:    {",
          "65:     icon: 'anchor',",
          "66:     name: t('settings_webhooks'),",
          "67:     to: `/settings/webhooks`,",
          "68:    },",
          "69:    {",
          "70:     icon: 'bolt',",
          "71:     name: t('settings_flows'),",
          "72:     to: `/settings/flows`,",
          "73:    },",
          "74:   ];",
          "76:   const externalItems = computed(() => {",
          "77:    return [",
          "78:     {",
          "79:      icon: 'bug_report',",
          "80:      name: t('report_bug'),",
          "81:      href: 'https://github.com/directus/directus/issues/new?template=bug_report.yml',",
          "82:     },",
          "83:     {",
          "84:      icon: 'new_releases',",
          "85:      name: t('request_feature'),",
          "86:      href: 'https://github.com/directus/directus/discussions/new?category=feature-requests',",
          "87:     },",
          "88:    ];",
          "89:   });",
          "91:   return { version, navItems, externalItems };",
          "",
          "[Added Lines]",
          "28: <script setup lang=\"ts\">",
          "29: import { computed } from 'vue';",
          "32: const version = __DIRECTUS_VERSION__;",
          "34: const { t } = useI18n();",
          "36: const navItems = [",
          "37:  {",
          "38:   icon: 'public',",
          "39:   name: t('settings_project'),",
          "40:   to: `/settings/project`,",
          "41:  },",
          "42:  {",
          "43:   icon: 'list_alt',",
          "44:   name: t('settings_data_model'),",
          "45:   to: `/settings/data-model`,",
          "46:  },",
          "47:  {",
          "48:   icon: 'admin_panel_settings',",
          "49:   name: t('settings_permissions'),",
          "50:   to: `/settings/roles`,",
          "51:  },",
          "52:  {",
          "53:   icon: 'bookmark',",
          "54:   name: t('settings_presets'),",
          "55:   to: `/settings/presets`,",
          "57:  {",
          "58:   icon: 'translate',",
          "59:   name: t('settings_translation_strings'),",
          "60:   to: `/settings/translation-strings`,",
          "61:  },",
          "62:  {",
          "63:   icon: 'anchor',",
          "64:   name: t('settings_webhooks'),",
          "65:   to: `/settings/webhooks`,",
          "66:  },",
          "67:  {",
          "68:   icon: 'bolt',",
          "69:   name: t('settings_flows'),",
          "70:   to: `/settings/flows`,",
          "71:  },",
          "72: ];",
          "74: const externalItems = computed(() => {",
          "75:  return [",
          "76:   {",
          "77:    icon: 'bug_report',",
          "78:    name: t('report_bug'),",
          "79:    href: 'https://github.com/directus/directus/issues/new?template=bug_report.yml',",
          "80:   },",
          "81:   {",
          "82:    icon: 'new_releases',",
          "83:    name: t('request_feature'),",
          "84:    href: 'https://github.com/directus/directus/discussions/new?category=feature-requests',",
          "85:   },",
          "86:  ];",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/not-found.vue||app/src/modules/settings/routes/not-found.vue": [
          "File: app/src/modules/settings/routes/not-found.vue -> app/src/modules/settings/routes/not-found.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  </private-view>",
          "13: </template>",
          "16: import { useI18n } from 'vue-i18n';",
          "18: import SettingsNavigation from '../components/navigation.vue';",
          "27: </script>",
          "29: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "15: <script lang=\"ts\">",
          "17: import { defineComponent } from 'vue';",
          "20: export default defineComponent({",
          "21:  components: { SettingsNavigation },",
          "22:  setup() {",
          "23:   const { t } = useI18n();",
          "24:   return { t };",
          "25:  },",
          "26: });",
          "",
          "[Added Lines]",
          "15: <script setup lang=\"ts\">",
          "19: const { t } = useI18n();",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/project/components/project-info-sidebar-detail.vue||app/src/modules/settings/routes/project/components/project-info-sidebar-detail.vue": [
          "File: app/src/modules/settings/routes/project/components/project-info-sidebar-detail.vue -> app/src/modules/settings/routes/project/components/project-info-sidebar-detail.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:  </sidebar-detail>",
          "38: </template>",
          "41: import { useI18n } from 'vue-i18n';",
          "43: import { useProjectInfo } from '../../../composables/use-project-info';",
          "54: </script>",
          "56: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "40: <script lang=\"ts\">",
          "42: import { defineComponent } from 'vue';",
          "45: export default defineComponent({",
          "46:  setup() {",
          "47:   const { t } = useI18n();",
          "49:   const { parsedInfo } = useProjectInfo();",
          "51:   return { t, parsedInfo };",
          "52:  },",
          "53: });",
          "",
          "[Added Lines]",
          "40: <script setup lang=\"ts\">",
          "44: const { t } = useI18n();",
          "46: const { parsedInfo } = useProjectInfo();",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/project/project.vue||app/src/modules/settings/routes/project/project.vue": [
          "File: app/src/modules/settings/routes/project/project.vue -> app/src/modules/settings/routes/project/project.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:  </private-view>",
          "41: </template>",
          "49: import { useServerStore } from '@/stores/server';",
          "51: import { clone } from 'lodash';",
          "54: import { useRouter } from 'vue-router';",
          "112: });",
          "113: </script>",
          "115: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "43: <script lang=\"ts\">",
          "44: import { useI18n } from 'vue-i18n';",
          "45: import { defineComponent, ref, computed } from 'vue';",
          "46: import SettingsNavigation from '../../components/navigation.vue';",
          "47: import { useCollection } from '@directus/composables';",
          "48: import { useSettingsStore } from '@/stores/settings';",
          "50: import ProjectInfoSidebarDetail from './components/project-info-sidebar-detail.vue';",
          "52: import { useShortcut } from '@/composables/use-shortcut';",
          "53: import { useEditsGuard } from '@/composables/use-edits-guard';",
          "56: export default defineComponent({",
          "57:  components: { SettingsNavigation, ProjectInfoSidebarDetail },",
          "58:  setup() {",
          "59:   const { t } = useI18n();",
          "61:   const router = useRouter();",
          "63:   const settingsStore = useSettingsStore();",
          "64:   const serverStore = useServerStore();",
          "66:   const { fields } = useCollection('directus_settings');",
          "68:   const initialValues = ref(clone(settingsStore.settings));",
          "70:   const edits = ref<{ [key: string]: any } | null>(null);",
          "72:   const hasEdits = computed(() => edits.value !== null && Object.keys(edits.value).length > 0);",
          "74:   const saving = ref(false);",
          "76:   useShortcut('meta+s', () => {",
          "77:    if (hasEdits.value) save();",
          "78:   });",
          "80:   const { confirmLeave, leaveTo } = useEditsGuard(hasEdits);",
          "82:   return {",
          "83:    t,",
          "84:    fields,",
          "85:    initialValues,",
          "86:    edits,",
          "87:    hasEdits,",
          "88:    saving,",
          "89:    confirmLeave,",
          "90:    leaveTo,",
          "91:    save,",
          "92:    discardAndLeave,",
          "93:   };",
          "95:   async function save() {",
          "96:    if (edits.value === null) return;",
          "97:    saving.value = true;",
          "98:    await settingsStore.updateSettings(edits.value);",
          "99:    await serverStore.hydrate({ isLanguageUpdated: 'default_language' in edits.value });",
          "100:    edits.value = null;",
          "101:    saving.value = false;",
          "102:    initialValues.value = clone(settingsStore.settings);",
          "103:   }",
          "105:   function discardAndLeave() {",
          "106:    if (!leaveTo.value) return;",
          "107:    edits.value = {};",
          "108:    confirmLeave.value = false;",
          "109:    router.push(leaveTo.value);",
          "110:   }",
          "111:  },",
          "",
          "[Added Lines]",
          "43: <script setup lang=\"ts\">",
          "44: import { useEditsGuard } from '@/composables/use-edits-guard';",
          "45: import { useShortcut } from '@/composables/use-shortcut';",
          "47: import { useSettingsStore } from '@/stores/settings';",
          "48: import { useCollection } from '@directus/composables';",
          "50: import { computed, ref } from 'vue';",
          "51: import { useI18n } from 'vue-i18n';",
          "53: import SettingsNavigation from '../../components/navigation.vue';",
          "54: import ProjectInfoSidebarDetail from './components/project-info-sidebar-detail.vue';",
          "56: const { t } = useI18n();",
          "58: const router = useRouter();",
          "60: const settingsStore = useSettingsStore();",
          "61: const serverStore = useServerStore();",
          "63: const { fields } = useCollection('directus_settings');",
          "65: const initialValues = ref(clone(settingsStore.settings));",
          "67: const edits = ref<{ [key: string]: any } | null>(null);",
          "69: const hasEdits = computed(() => edits.value !== null && Object.keys(edits.value).length > 0);",
          "71: const saving = ref(false);",
          "73: useShortcut('meta+s', () => {",
          "74:  if (hasEdits.value) save();",
          "77: const { confirmLeave, leaveTo } = useEditsGuard(hasEdits);",
          "79: async function save() {",
          "80:  if (edits.value === null) return;",
          "81:  saving.value = true;",
          "82:  await settingsStore.updateSettings(edits.value);",
          "83:  await serverStore.hydrate({ isLanguageUpdated: 'default_language' in edits.value });",
          "84:  edits.value = null;",
          "85:  saving.value = false;",
          "86:  initialValues.value = clone(settingsStore.settings);",
          "87: }",
          "89: function discardAndLeave() {",
          "90:  if (!leaveTo.value) return;",
          "91:  edits.value = {};",
          "92:  confirmLeave.value = false;",
          "93:  router.push(leaveTo.value);",
          "94: }",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/add-new.vue||app/src/modules/settings/routes/roles/add-new.vue": [
          "File: app/src/modules/settings/routes/roles/add-new.vue -> app/src/modules/settings/routes/roles/add-new.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:  </v-dialog>",
          "30: </template>",
          "35: import api from '@/api';",
          "36: import { useRouter } from 'vue-router';",
          "37: import { appRecommendedPermissions } from './app-permissions';",
          "88:    }",
          "89:   }",
          "92: </script>",
          "94: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "32: <script lang=\"ts\">",
          "33: import { useI18n } from 'vue-i18n';",
          "34: import { defineComponent, ref } from 'vue';",
          "38: import { unexpectedError } from '@/utils/unexpected-error';",
          "39: import { useDialogRoute } from '@/composables/use-dialog-route';",
          "41: export default defineComponent({",
          "42:  setup() {",
          "43:   const { t } = useI18n();",
          "45:   const router = useRouter();",
          "47:   const isOpen = useDialogRoute();",
          "49:   const roleName = ref<string | null>(null);",
          "50:   const appAccess = ref(true);",
          "51:   const adminAccess = ref(false);",
          "53:   const { saving, save } = useSave();",
          "55:   return { t, router, isOpen, roleName, saving, save, appAccess, adminAccess };",
          "57:   function useSave() {",
          "58:    const saving = ref(false);",
          "60:    return { saving, save };",
          "62:    async function save() {",
          "63:     saving.value = true;",
          "65:     try {",
          "66:      const roleResponse = await api.post('/roles', {",
          "67:       name: roleName.value,",
          "68:       admin_access: adminAccess.value,",
          "69:       app_access: appAccess.value,",
          "70:      });",
          "72:      if (appAccess.value === true && adminAccess.value === false) {",
          "73:       await api.post(",
          "74:        '/permissions',",
          "75:        appRecommendedPermissions.map((permission) => ({",
          "76:         ...permission,",
          "77:         role: roleResponse.data.data.id,",
          "78:        }))",
          "79:       );",
          "80:      }",
          "82:      router.push(`/settings/roles/${roleResponse.data.data.id}`);",
          "83:     } catch (err: any) {",
          "84:      unexpectedError(err);",
          "85:     } finally {",
          "86:      saving.value = false;",
          "87:     }",
          "90:  },",
          "91: });",
          "",
          "[Added Lines]",
          "32: <script setup lang=\"ts\">",
          "34: import { useDialogRoute } from '@/composables/use-dialog-route';",
          "35: import { unexpectedError } from '@/utils/unexpected-error';",
          "36: import { ref } from 'vue';",
          "37: import { useI18n } from 'vue-i18n';",
          "41: const { t } = useI18n();",
          "43: const router = useRouter();",
          "45: const isOpen = useDialogRoute();",
          "47: const roleName = ref<string | null>(null);",
          "48: const appAccess = ref(true);",
          "49: const adminAccess = ref(false);",
          "51: const { saving, save } = useSave();",
          "53: function useSave() {",
          "54:  const saving = ref(false);",
          "56:  return { saving, save };",
          "58:  async function save() {",
          "59:   saving.value = true;",
          "61:   try {",
          "62:    const roleResponse = await api.post('/roles', {",
          "63:     name: roleName.value,",
          "64:     admin_access: adminAccess.value,",
          "65:     app_access: appAccess.value,",
          "66:    });",
          "68:    if (appAccess.value === true && adminAccess.value === false) {",
          "69:     await api.post(",
          "70:      '/permissions',",
          "71:      appRecommendedPermissions.map((permission) => ({",
          "72:       ...permission,",
          "73:       role: roleResponse.data.data.id,",
          "74:      }))",
          "75:     );",
          "78:    router.push(`/settings/roles/${roleResponse.data.data.id}`);",
          "79:   } catch (err: any) {",
          "80:    unexpectedError(err);",
          "81:   } finally {",
          "82:    saving.value = false;",
          "84:  }",
          "85: }",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/collection.vue||app/src/modules/settings/routes/roles/collection.vue": [
          "File: app/src/modules/settings/routes/roles/collection.vue -> app/src/modules/settings/routes/roles/collection.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:  </private-view>",
          "56: </template>",
          "63: import api from '@/api';",
          "64: import { Header as TableHeader } from '@/components/v-table/types';",
          "67: import { translate } from '@/utils/translate-object-values';",
          "68: import { Role } from '@directus/types';",
          "70: type RoleItem = Partial<Role> & {",
          "71:  count?: number;",
          "72: };",
          "115:    },",
          "116:    {",
          "123:    },",
          "130:   });",
          "188: </script>",
          "190: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "58: <script lang=\"ts\">",
          "59: import { useI18n } from 'vue-i18n';",
          "60: import { defineComponent, computed, ref } from 'vue';",
          "61: import SettingsNavigation from '../../components/navigation.vue';",
          "65: import { useRouter } from 'vue-router';",
          "66: import { unexpectedError } from '@/utils/unexpected-error';",
          "74: export default defineComponent({",
          "75:  name: 'RolesCollection',",
          "76:  components: { SettingsNavigation },",
          "77:  props: {},",
          "78:  setup() {",
          "79:   const { t } = useI18n();",
          "81:   const router = useRouter();",
          "83:   const roles = ref<RoleItem[]>([]);",
          "84:   const loading = ref(false);",
          "86:   const lastAdminRoleId = computed(() => {",
          "87:    const adminRoles = roles.value.filter((role) => role.admin_access === true);",
          "88:    return adminRoles.length === 1 ? adminRoles[0].id : null;",
          "89:   });",
          "91:   const tableHeaders = ref<TableHeader[]>([",
          "92:    {",
          "93:     text: '',",
          "94:     value: 'icon',",
          "95:     sortable: false,",
          "96:     width: 42,",
          "97:     align: 'left',",
          "98:     description: null,",
          "99:    },",
          "100:    {",
          "101:     text: t('name'),",
          "102:     value: 'name',",
          "103:     sortable: false,",
          "104:     width: 200,",
          "105:     align: 'left',",
          "106:     description: null,",
          "107:    },",
          "108:    {",
          "109:     text: t('users'),",
          "110:     value: 'count',",
          "111:     sortable: false,",
          "112:     width: 140,",
          "113:     align: 'left',",
          "114:     description: null,",
          "117:     text: t('description'),",
          "118:     value: 'description',",
          "119:     sortable: false,",
          "120:     width: 470,",
          "121:     align: 'left',",
          "122:     description: null,",
          "124:   ]);",
          "126:   fetchRoles();",
          "128:   const addNewLink = computed(() => {",
          "129:    return `/settings/roles/+`;",
          "132:   return { t, loading, roles, tableHeaders, addNewLink, navigateToRole };",
          "134:   async function fetchRoles() {",
          "135:    loading.value = true;",
          "137:    try {",
          "138:     const response = await api.get(`/roles`, {",
          "139:      params: {",
          "140:       limit: -1,",
          "141:       fields: ['id', 'name', 'description', 'icon', 'admin_access', 'users'],",
          "142:       deep: {",
          "143:        users: {",
          "144:         _aggregate: { count: 'id' },",
          "145:         _groupBy: ['role'],",
          "146:         _sort: 'role',",
          "147:         _limit: -1,",
          "148:        },",
          "149:       },",
          "150:       sort: 'name',",
          "151:      },",
          "152:     });",
          "154:     roles.value = [",
          "155:      {",
          "156:       public: true,",
          "157:       name: t('public_label'),",
          "158:       icon: 'public',",
          "159:       description: t('public_description'),",
          "160:       id: 'public',",
          "161:      },",
          "162:      ...response.data.data.map((role: any) => {",
          "163:       return {",
          "164:        ...translate(role),",
          "165:        count: role.users[0]?.count.id || 0,",
          "166:       };",
          "167:      }),",
          "168:     ];",
          "169:    } catch (err: any) {",
          "170:     unexpectedError(err);",
          "171:    } finally {",
          "172:     loading.value = false;",
          "173:    }",
          "174:   }",
          "176:   function navigateToRole({ item }: { item: Role }) {",
          "177:    if (item.id !== 'public' && lastAdminRoleId.value) {",
          "178:     router.push({",
          "179:      name: 'settings-roles-item',",
          "180:      params: { primaryKey: item.id, lastAdminRoleId: lastAdminRoleId.value },",
          "181:     });",
          "182:    } else {",
          "183:     router.push(`/settings/roles/${item.id}`);",
          "184:    }",
          "185:   }",
          "186:  },",
          "187: });",
          "",
          "[Added Lines]",
          "58: <script setup lang=\"ts\">",
          "62: import { unexpectedError } from '@/utils/unexpected-error';",
          "64: import { computed, ref } from 'vue';",
          "65: import { useI18n } from 'vue-i18n';",
          "66: import { useRouter } from 'vue-router';",
          "67: import SettingsNavigation from '../../components/navigation.vue';",
          "73: const { t } = useI18n();",
          "75: const router = useRouter();",
          "77: const roles = ref<RoleItem[]>([]);",
          "78: const loading = ref(false);",
          "80: const lastAdminRoleId = computed(() => {",
          "81:  const adminRoles = roles.value.filter((role) => role.admin_access === true);",
          "82:  return adminRoles.length === 1 ? adminRoles[0].id : null;",
          "83: });",
          "85: const tableHeaders = ref<TableHeader[]>([",
          "86:  {",
          "87:   text: '',",
          "88:   value: 'icon',",
          "89:   sortable: false,",
          "90:   width: 42,",
          "91:   align: 'left',",
          "92:   description: null,",
          "93:  },",
          "94:  {",
          "95:   text: t('name'),",
          "96:   value: 'name',",
          "97:   sortable: false,",
          "98:   width: 200,",
          "99:   align: 'left',",
          "100:   description: null,",
          "101:  },",
          "102:  {",
          "103:   text: t('users'),",
          "104:   value: 'count',",
          "105:   sortable: false,",
          "106:   width: 140,",
          "107:   align: 'left',",
          "108:   description: null,",
          "109:  },",
          "110:  {",
          "111:   text: t('description'),",
          "112:   value: 'description',",
          "113:   sortable: false,",
          "114:   width: 470,",
          "115:   align: 'left',",
          "116:   description: null,",
          "117:  },",
          "118: ]);",
          "120: fetchRoles();",
          "122: const addNewLink = computed(() => {",
          "123:  return `/settings/roles/+`;",
          "124: });",
          "126: async function fetchRoles() {",
          "127:  loading.value = true;",
          "129:  try {",
          "130:   const response = await api.get(`/roles`, {",
          "131:    params: {",
          "132:     limit: -1,",
          "133:     fields: ['id', 'name', 'description', 'icon', 'admin_access', 'users'],",
          "134:     deep: {",
          "135:      users: {",
          "136:       _aggregate: { count: 'id' },",
          "137:       _groupBy: ['role'],",
          "138:       _sort: 'role',",
          "139:       _limit: -1,",
          "140:      },",
          "141:     },",
          "142:     sort: 'name',",
          "144:   });",
          "146:   roles.value = [",
          "148:     public: true,",
          "149:     name: t('public_label'),",
          "150:     icon: 'public',",
          "151:     description: t('public_description'),",
          "152:     id: 'public',",
          "154:    ...response.data.data.map((role: any) => {",
          "155:     return {",
          "156:      ...translate(role),",
          "157:      count: role.users[0]?.count.id || 0,",
          "158:     };",
          "159:    }),",
          "160:   ];",
          "161:  } catch (err: any) {",
          "162:   unexpectedError(err);",
          "163:  } finally {",
          "164:   loading.value = false;",
          "165:  }",
          "166: }",
          "168: function navigateToRole({ item }: { item: Role }) {",
          "169:  if (item.id !== 'public' && lastAdminRoleId.value) {",
          "170:   router.push({",
          "171:    name: 'settings-roles-item',",
          "172:    params: { primaryKey: item.id, lastAdminRoleId: lastAdminRoleId.value },",
          "174:  } else {",
          "175:   router.push(`/settings/roles/${item.id}`);",
          "176:  }",
          "177: }",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/item/components/permissions-overview-row.vue||app/src/modules/settings/routes/roles/item/components/permissions-overview-row.vue": [
          "File: app/src/modules/settings/routes/roles/item/components/permissions-overview-row.vue -> app/src/modules/settings/routes/roles/item/components/permissions-overview-row.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:  </div>",
          "53: </template>",
          "56: import { useI18n } from 'vue-i18n';",
          "60: import useUpdatePermissions from '../composables/use-update-permissions';",
          "101: </script>",
          "103: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "55: <script lang=\"ts\">",
          "57: import { defineComponent, PropType, toRefs } from 'vue';",
          "58: import { Permission, Collection } from '@directus/types';",
          "59: import PermissionsOverviewToggle from './permissions-overview-toggle.vue';",
          "62: export default defineComponent({",
          "63:  components: { PermissionsOverviewToggle },",
          "64:  props: {",
          "65:   role: {",
          "66:    type: String,",
          "67:    default: null,",
          "68:   },",
          "69:   collection: {",
          "70:    type: Object as PropType<Collection>,",
          "71:    required: true,",
          "72:   },",
          "73:   permissions: {",
          "74:    type: Array as PropType<Permission[]>,",
          "75:    required: true,",
          "76:   },",
          "77:   refreshing: {",
          "78:    type: Array as PropType<number[]>,",
          "79:    required: true,",
          "80:   },",
          "81:   appMinimal: {",
          "82:    type: [Boolean, Array] as PropType<false | Partial<Permission>[]>,",
          "83:    default: false,",
          "84:   },",
          "85:  },",
          "86:  setup(props) {",
          "87:   const { t } = useI18n();",
          "89:   const { collection, role, permissions } = toRefs(props);",
          "90:   const { setFullAccessAll, setNoAccessAll, getPermission } = useUpdatePermissions(collection, permissions, role);",
          "92:   return { t, getPermission, isLoading, setFullAccessAll, setNoAccessAll };",
          "94:   function isLoading(action: string) {",
          "95:    const permission = getPermission(action);",
          "96:    if (!permission) return false;",
          "97:    return props.refreshing.includes(permission.id);",
          "98:   }",
          "99:  },",
          "100: });",
          "",
          "[Added Lines]",
          "55: <script setup lang=\"ts\">",
          "56: import { Collection, Permission } from '@directus/types';",
          "57: import { toRefs } from 'vue';",
          "60: import PermissionsOverviewToggle from './permissions-overview-toggle.vue';",
          "62: const props = withDefaults(",
          "63:  defineProps<{",
          "64:   collection: Collection;",
          "65:   permissions: Permission[];",
          "66:   refreshing: number[];",
          "67:   role?: string;",
          "68:   appMinimal?: false | Partial<Permission>[];",
          "69:  }>(),",
          "70:  {",
          "71:   appMinimal: false,",
          "72:  }",
          "73: );",
          "75: const { t } = useI18n();",
          "77: const { collection, role, permissions } = toRefs(props);",
          "78: const { setFullAccessAll, setNoAccessAll, getPermission } = useUpdatePermissions(collection, permissions, role);",
          "80: function isLoading(action: string) {",
          "81:  const permission = getPermission(action);",
          "82:  if (!permission) return false;",
          "83:  return props.refreshing.includes(permission.id);",
          "84: }",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/item/components/permissions-overview-toggle.vue||app/src/modules/settings/routes/roles/item/components/permissions-overview-toggle.vue": [
          "File: app/src/modules/settings/routes/roles/item/components/permissions-overview-toggle.vue -> app/src/modules/settings/routes/roles/item/components/permissions-overview-toggle.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  </div>",
          "64: </template>",
          "70: import api from '@/api';",
          "71: import { useRouter } from 'vue-router';",
          "72: import useUpdatePermissions from '../composables/use-update-permissions';",
          "164: });",
          "165: </script>",
          "167: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "66: <script lang=\"ts\">",
          "67: import { useI18n } from 'vue-i18n';",
          "68: import { defineComponent, PropType, computed, inject, ref, toRefs } from 'vue';",
          "69: import { Permission, Collection } from '@directus/types';",
          "74: export default defineComponent({",
          "75:  props: {",
          "76:   collection: {",
          "77:    type: Object as PropType<Collection>,",
          "78:    required: true,",
          "79:   },",
          "80:   role: {",
          "81:    type: String,",
          "82:    default: null,",
          "83:   },",
          "84:   action: {",
          "85:    type: String,",
          "86:    required: true,",
          "87:   },",
          "88:   permissions: {",
          "89:    type: Array as PropType<Permission[]>,",
          "90:    default: null,",
          "91:   },",
          "92:   loading: {",
          "93:    type: Boolean,",
          "94:    default: false,",
          "95:   },",
          "96:   appMinimal: {",
          "97:    type: [Boolean, Object] as PropType<false | Partial<Permission>>,",
          "98:    default: false,",
          "99:   },",
          "100:  },",
          "101:  setup(props) {",
          "102:   const { t } = useI18n();",
          "104:   const router = useRouter();",
          "106:   const { collection, role, permissions } = toRefs(props);",
          "107:   const { setFullAccess, setNoAccess, getPermission } = useUpdatePermissions(collection, permissions, role);",
          "109:   const permission = computed(() => getPermission(props.action));",
          "111:   const permissionLevel = computed<'all' | 'none' | 'custom'>(() => {",
          "112:    if (permission.value === undefined) return 'none';",
          "114:    if (",
          "115:     permission.value.fields?.includes('*') &&",
          "116:     Object.keys(permission.value.permissions || {}).length === 0 &&",
          "117:     Object.keys(permission.value.validation || {}).length === 0",
          "118:    ) {",
          "119:     return 'all';",
          "120:    }",
          "122:    return 'custom';",
          "123:   });",
          "125:   const saving = ref(false);",
          "127:   const refresh = inject<() => Promise<void>>('refresh-permissions');",
          "129:   const appMinimalLevel = computed(() => {",
          "130:    if (props.appMinimal === false) return null;",
          "131:    if (Object.keys(props.appMinimal).length === 2) return 'full';",
          "132:    return 'partial';",
          "133:   });",
          "135:   return { t, permissionLevel, saving, setFullAccess, setNoAccess, openPermissions, appMinimalLevel };",
          "137:   async function openPermissions() {",
          "140:    if (props.collection.meta === null) {",
          "141:     await api.patch(`/collections/${props.collection.collection}`, {",
          "142:      meta: {},",
          "143:     });",
          "144:    }",
          "146:    if (permission.value) {",
          "147:     router.push(`/settings/roles/${props.role || 'public'}/${permission.value.id}`);",
          "148:    } else {",
          "149:     saving.value = true;",
          "151:     const permResponse = await api.post('/permissions', {",
          "152:      role: props.role,",
          "153:      collection: props.collection.collection,",
          "154:      action: props.action,",
          "155:     });",
          "157:     await refresh?.();",
          "159:     saving.value = false;",
          "160:     router.push(`/settings/roles/${props.role || 'public'}/${permResponse.data.data.id}`);",
          "161:    }",
          "162:   }",
          "163:  },",
          "",
          "[Added Lines]",
          "66: <script setup lang=\"ts\">",
          "68: import { Collection, Permission } from '@directus/types';",
          "69: import { computed, inject, ref, toRefs } from 'vue';",
          "70: import { useI18n } from 'vue-i18n';",
          "74: const props = withDefaults(",
          "75:  defineProps<{",
          "76:   collection: Collection;",
          "77:   action: string;",
          "78:   role?: string;",
          "79:   permissions?: Permission[];",
          "80:   loading?: boolean;",
          "81:   appMinimal?: false | Partial<Permission>;",
          "82:  }>(),",
          "83:  {",
          "84:   loading: false,",
          "85:   appMinimal: false,",
          "86:  }",
          "87: );",
          "89: const { t } = useI18n();",
          "91: const router = useRouter();",
          "93: const { collection, role, permissions } = toRefs(props);",
          "94: const { setFullAccess, setNoAccess, getPermission } = useUpdatePermissions(collection, permissions, role);",
          "96: const permission = computed(() => getPermission(props.action));",
          "98: const permissionLevel = computed<'all' | 'none' | 'custom'>(() => {",
          "99:  if (permission.value === undefined) return 'none';",
          "101:  if (",
          "102:   permission.value.fields?.includes('*') &&",
          "103:   Object.keys(permission.value.permissions || {}).length === 0 &&",
          "104:   Object.keys(permission.value.validation || {}).length === 0",
          "105:  ) {",
          "106:   return 'all';",
          "107:  }",
          "109:  return 'custom';",
          "112: const saving = ref(false);",
          "114: const refresh = inject<() => Promise<void>>('refresh-permissions');",
          "116: const appMinimalLevel = computed(() => {",
          "117:  if (props.appMinimal === false) return null;",
          "118:  if (Object.keys(props.appMinimal).length === 2) return 'full';",
          "119:  return 'partial';",
          "120: });",
          "122: async function openPermissions() {",
          "125:  if (props.collection.meta === null) {",
          "126:   await api.patch(`/collections/${props.collection.collection}`, {",
          "127:    meta: {},",
          "128:   });",
          "129:  }",
          "131:  if (permission.value) {",
          "132:   router.push(`/settings/roles/${props.role || 'public'}/${permission.value.id}`);",
          "133:  } else {",
          "134:   saving.value = true;",
          "136:   const permResponse = await api.post('/permissions', {",
          "137:    role: props.role,",
          "138:    collection: props.collection.collection,",
          "139:    action: props.action,",
          "140:   });",
          "142:   await refresh?.();",
          "144:   saving.value = false;",
          "145:   router.push(`/settings/roles/${props.role || 'public'}/${permResponse.data.data.id}`);",
          "146:  }",
          "147: }",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/item/components/permissions-overview.vue||app/src/modules/settings/routes/roles/item/components/permissions-overview.vue": [
          "File: app/src/modules/settings/routes/roles/item/components/permissions-overview.vue -> app/src/modules/settings/routes/roles/item/components/permissions-overview.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  </div>",
          "63: </template>",
          "72: import api from '@/api';",
          "74: import { unexpectedError } from '@/utils/unexpected-error';",
          "75: import { orderBy } from 'lodash';",
          "183:    }",
          "184:   }",
          "223:    }",
          "224:   }",
          "227: </script>",
          "229: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "65: <script lang=\"ts\">",
          "66: import { useI18n } from 'vue-i18n';",
          "67: import { defineComponent, computed, ref, provide, watch } from 'vue';",
          "68: import { useCollectionsStore } from '@/stores/collections';",
          "69: import PermissionsOverviewHeader from './permissions-overview-header.vue';",
          "70: import PermissionsOverviewRow from './permissions-overview-row.vue';",
          "71: import { Permission } from '@directus/types';",
          "73: import { appRecommendedPermissions, appMinimalPermissions } from '../../app-permissions';",
          "77: export default defineComponent({",
          "78:  components: { PermissionsOverviewHeader, PermissionsOverviewRow },",
          "79:  props: {",
          "80:   role: {",
          "81:    type: String,",
          "82:    default: null,",
          "83:   },",
          "84:   permission: {",
          "86:    type: String,",
          "87:    default: null,",
          "88:   },",
          "89:   appAccess: {",
          "90:    type: Boolean,",
          "91:    default: false,",
          "92:   },",
          "93:  },",
          "94:  setup(props) {",
          "95:   const { t } = useI18n();",
          "97:   const collectionsStore = useCollectionsStore();",
          "99:   const regularCollections = computed(() => collectionsStore.databaseCollections);",
          "101:   const systemCollections = computed(() =>",
          "102:    orderBy(",
          "103:     collectionsStore.collections.filter((collection) => collection.collection.startsWith('directus_') === true),",
          "104:     'name'",
          "105:    )",
          "106:   );",
          "108:   const systemVisible = ref(false);",
          "110:   const { permissions, loading, fetchPermissions, refreshPermission, refreshing } = usePermissions();",
          "112:   const { resetActive, resetSystemPermissions, resetting, resetError } = useReset();",
          "114:   fetchPermissions();",
          "116:   watch(() => props.permission, fetchPermissions, { immediate: true });",
          "118:   provide('refresh-permissions', fetchPermissions);",
          "120:   return {",
          "121:    t,",
          "122:    systemVisible,",
          "123:    regularCollections,",
          "124:    systemCollections,",
          "125:    permissions,",
          "126:    loading,",
          "127:    fetchPermissions,",
          "128:    refreshPermission,",
          "129:    refreshing,",
          "130:    resetActive,",
          "131:    resetSystemPermissions,",
          "132:    resetting,",
          "133:    resetError,",
          "134:    appMinimalPermissions,",
          "135:   };",
          "137:   function usePermissions() {",
          "138:    const permissions = ref<Permission[]>([]);",
          "139:    const loading = ref(false);",
          "140:    const refreshing = ref<number[]>([]);",
          "142:    return { permissions, loading, fetchPermissions, refreshPermission, refreshing };",
          "144:    async function fetchPermissions() {",
          "145:     loading.value = true;",
          "147:     try {",
          "148:      const params: any = { filter: { role: {} }, limit: -1 };",
          "150:      if (props.role === null) {",
          "151:       params.filter.role = { _null: true };",
          "152:      } else {",
          "153:       params.filter.role = { _eq: props.role };",
          "154:      }",
          "156:      const response = await api.get('/permissions', { params });",
          "158:      permissions.value = response.data.data;",
          "159:     } catch (err: any) {",
          "160:      unexpectedError(err);",
          "161:     } finally {",
          "162:      loading.value = false;",
          "163:     }",
          "164:    }",
          "166:    async function refreshPermission(id: number) {",
          "167:     if (refreshing.value.includes(id) === false) {",
          "168:      refreshing.value.push(id);",
          "169:     }",
          "171:     try {",
          "172:      const response = await api.get(`/permissions/${id}`);",
          "174:      permissions.value = permissions.value.map((permission) => {",
          "175:       if (permission.id === id) return response.data.data;",
          "176:       return permission;",
          "177:      });",
          "178:     } catch (err: any) {",
          "179:      unexpectedError(err);",
          "180:     } finally {",
          "181:      refreshing.value = refreshing.value.filter((inProgressID) => inProgressID !== id);",
          "182:     }",
          "186:   function useReset() {",
          "187:    const resetActive = ref<string | boolean>(false);",
          "188:    const resetting = ref(false);",
          "189:    const resetError = ref<any>(null);",
          "191:    return { resetActive, resetSystemPermissions, resetting, resetError };",
          "193:    async function resetSystemPermissions(useRecommended: boolean) {",
          "194:     resetting.value = true;",
          "196:     const toBeDeleted = permissions.value",
          "197:      .filter((permission) => permission.collection.startsWith('directus_'))",
          "198:      .map((permission) => permission.id);",
          "200:     try {",
          "201:      if (toBeDeleted.length > 0) {",
          "202:       await api.delete(`/permissions`, { data: toBeDeleted });",
          "203:      }",
          "205:      if (props.role !== null && props.appAccess === true && useRecommended === true) {",
          "206:       await api.post(",
          "207:        '/permissions',",
          "208:        appRecommendedPermissions.map((permission) => ({",
          "209:         ...permission,",
          "210:         role: props.role,",
          "211:        }))",
          "212:       );",
          "213:      }",
          "215:      await fetchPermissions();",
          "217:      resetActive.value = false;",
          "218:     } catch (err: any) {",
          "219:      resetError.value = err;",
          "220:     } finally {",
          "221:      resetting.value = false;",
          "222:     }",
          "225:  },",
          "226: });",
          "",
          "[Added Lines]",
          "65: <script setup lang=\"ts\">",
          "67: import { useCollectionsStore } from '@/stores/collections';",
          "69: import { Permission } from '@directus/types';",
          "71: import { computed, provide, ref, watch } from 'vue';",
          "72: import { useI18n } from 'vue-i18n';",
          "73: import { appMinimalPermissions, appRecommendedPermissions } from '../../app-permissions';",
          "74: import PermissionsOverviewHeader from './permissions-overview-header.vue';",
          "75: import PermissionsOverviewRow from './permissions-overview-row.vue';",
          "77: const props = withDefaults(",
          "78:  defineProps<{",
          "79:   role?: string;",
          "81:   permission?: string;",
          "82:   appAccess?: boolean;",
          "83:  }>(),",
          "84:  {",
          "85:   appAccess: false,",
          "86:  }",
          "87: );",
          "89: const { t } = useI18n();",
          "91: const collectionsStore = useCollectionsStore();",
          "93: const regularCollections = computed(() => collectionsStore.databaseCollections);",
          "95: const systemCollections = computed(() =>",
          "96:  orderBy(",
          "97:   collectionsStore.collections.filter((collection) => collection.collection.startsWith('directus_') === true),",
          "98:   'name'",
          "99:  )",
          "100: );",
          "102: const systemVisible = ref(false);",
          "104: const { permissions, fetchPermissions, refreshing } = usePermissions();",
          "106: const { resetActive, resetSystemPermissions, resetting } = useReset();",
          "108: fetchPermissions();",
          "110: watch(() => props.permission, fetchPermissions, { immediate: true });",
          "112: provide('refresh-permissions', fetchPermissions);",
          "114: function usePermissions() {",
          "115:  const permissions = ref<Permission[]>([]);",
          "116:  const loading = ref(false);",
          "117:  const refreshing = ref<number[]>([]);",
          "119:  return { permissions, loading, fetchPermissions, refreshPermission, refreshing };",
          "121:  async function fetchPermissions() {",
          "122:   loading.value = true;",
          "124:   try {",
          "125:    const params: any = { filter: { role: {} }, limit: -1 };",
          "127:    if (props.role === null) {",
          "128:     params.filter.role = { _null: true };",
          "129:    } else {",
          "130:     params.filter.role = { _eq: props.role };",
          "133:    const response = await api.get('/permissions', { params });",
          "135:    permissions.value = response.data.data;",
          "136:   } catch (err: any) {",
          "137:    unexpectedError(err);",
          "138:   } finally {",
          "139:    loading.value = false;",
          "141:  }",
          "143:  async function refreshPermission(id: number) {",
          "144:   if (refreshing.value.includes(id) === false) {",
          "145:    refreshing.value.push(id);",
          "146:   }",
          "148:   try {",
          "149:    const response = await api.get(`/permissions/${id}`);",
          "151:    permissions.value = permissions.value.map((permission) => {",
          "152:     if (permission.id === id) return response.data.data;",
          "153:     return permission;",
          "154:    });",
          "155:   } catch (err: any) {",
          "156:    unexpectedError(err);",
          "157:   } finally {",
          "158:    refreshing.value = refreshing.value.filter((inProgressID) => inProgressID !== id);",
          "159:   }",
          "160:  }",
          "161: }",
          "163: function useReset() {",
          "164:  const resetActive = ref<string | boolean>(false);",
          "165:  const resetting = ref(false);",
          "166:  const resetError = ref<any>(null);",
          "168:  return { resetActive, resetSystemPermissions, resetting, resetError };",
          "170:  async function resetSystemPermissions(useRecommended: boolean) {",
          "171:   resetting.value = true;",
          "173:   const toBeDeleted = permissions.value",
          "174:    .filter((permission) => permission.collection.startsWith('directus_'))",
          "175:    .map((permission) => permission.id);",
          "177:   try {",
          "178:    if (toBeDeleted.length > 0) {",
          "179:     await api.delete(`/permissions`, { data: toBeDeleted });",
          "182:    if (props.role !== null && props.appAccess === true && useRecommended === true) {",
          "183:     await api.post(",
          "184:      '/permissions',",
          "185:      appRecommendedPermissions.map((permission) => ({",
          "186:       ...permission,",
          "187:       role: props.role,",
          "188:      }))",
          "189:     );",
          "190:    }",
          "192:    await fetchPermissions();",
          "194:    resetActive.value = false;",
          "195:   } catch (err: any) {",
          "196:    resetError.value = err;",
          "197:   } finally {",
          "198:    resetting.value = false;",
          "200:  }",
          "201: }",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/item/item.vue||app/src/modules/settings/routes/roles/item/item.vue": [
          "File: app/src/modules/settings/routes/roles/item/item.vue -> app/src/modules/settings/routes/roles/item/item.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:  </private-view>",
          "106: </template>",
          "112: import { useEditsGuard } from '@/composables/use-edits-guard';",
          "113: import { useItem } from '@/composables/use-item';",
          "114: import { useShortcut } from '@/composables/use-shortcut';",
          "",
          "[Removed Lines]",
          "108: <script lang=\"ts\">",
          "109: import { computed, defineComponent, ref, toRefs } from 'vue';",
          "110: import { useI18n } from 'vue-i18n';",
          "",
          "[Added Lines]",
          "108: <script setup lang=\"ts\">",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117: import { useUserStore } from '@/stores/user';",
          "118: import RevisionsDrawerDetail from '@/views/private/components/revisions-drawer-detail.vue';",
          "119: import UsersInvite from '@/views/private/components/users-invite.vue';",
          "120: import { useRouter } from 'vue-router';",
          "121: import SettingsNavigation from '../../../components/navigation.vue';",
          "122: import PermissionsOverview from './components/permissions-overview.vue';",
          "123: import RoleInfoSidebarDetail from './components/role-info-sidebar-detail.vue';",
          "259: });",
          "260: </script>",
          "262: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "125: export default defineComponent({",
          "126:  name: 'RolesItem',",
          "127:  components: { SettingsNavigation, RevisionsDrawerDetail, RoleInfoSidebarDetail, PermissionsOverview, UsersInvite },",
          "128:  props: {",
          "129:   primaryKey: {",
          "130:    type: String,",
          "131:    required: true,",
          "132:   },",
          "133:   permissionKey: {",
          "134:    type: String,",
          "135:    default: null,",
          "136:   },",
          "137:   lastAdminRoleId: {",
          "138:    type: String,",
          "139:    default: null,",
          "140:   },",
          "141:  },",
          "142:  setup(props) {",
          "143:   const { t } = useI18n();",
          "145:   const router = useRouter();",
          "147:   const userStore = useUserStore();",
          "148:   const permissionsStore = usePermissionsStore();",
          "149:   const serverStore = useServerStore();",
          "150:   const userInviteModalActive = ref(false);",
          "151:   const { primaryKey } = toRefs(props);",
          "153:   const revisionsDrawerDetailRef = ref<InstanceType<typeof RevisionsDrawerDetail> | null>(null);",
          "155:   const { edits, hasEdits, item, saving, loading, error, save, remove, deleting, isBatch } = useItem(",
          "156:    ref('directus_roles'),",
          "157:    primaryKey,",
          "158:    { deep: { users: { _limit: 0 } } }",
          "159:   );",
          "161:   const confirmDelete = ref(false);",
          "163:   const adminEnabled = computed(() => {",
          "164:    const values = {",
          "165:     ...item.value,",
          "166:     ...edits.value,",
          "167:    } as Record<string, any>;",
          "169:    return !!values.admin_access;",
          "170:   });",
          "172:   const appAccess = computed(() => {",
          "173:    const values = {",
          "174:     ...item.value,",
          "175:     ...edits.value,",
          "176:    } as Record<string, any>;",
          "178:    return !!values.app_access;",
          "179:   });",
          "181:   useShortcut('meta+s', () => {",
          "182:    if (hasEdits.value) saveAndStay();",
          "183:   });",
          "185:   const { confirmLeave, leaveTo } = useEditsGuard(hasEdits);",
          "187:   const canInviteUsers = computed(() => {",
          "188:    if (serverStore.auth.disableDefault === true) return false;",
          "190:    const isAdmin = !!userStore.currentUser?.role?.admin_access;",
          "191:    if (isAdmin) return true;",
          "193:    const usersCreatePermission = permissionsStore.permissions.find(",
          "194:     (permission) => permission.collection === 'directus_users' && permission.action === 'create'",
          "195:    );",
          "197:    const rolesReadPermission = permissionsStore.permissions.find(",
          "198:     (permission) => permission.collection === 'directus_roles' && permission.action === 'read'",
          "199:    );",
          "201:    return !!usersCreatePermission && !!rolesReadPermission;",
          "202:   });",
          "204:   return {",
          "205:    t,",
          "206:    item,",
          "207:    loading,",
          "208:    error,",
          "209:    edits,",
          "210:    hasEdits,",
          "211:    saving,",
          "212:    saveAndQuit,",
          "213:    deleteAndQuit,",
          "214:    confirmDelete,",
          "215:    deleting,",
          "216:    isBatch,",
          "217:    adminEnabled,",
          "218:    userInviteModalActive,",
          "219:    appAccess,",
          "220:    confirmLeave,",
          "221:    leaveTo,",
          "222:    discardAndLeave,",
          "223:    canInviteUsers,",
          "224:    revisionsDrawerDetailRef,",
          "225:   };",
          "234:   async function saveAndStay() {",
          "235:    await save();",
          "236:    await userStore.hydrate();",
          "237:    revisionsDrawerDetailRef.value?.refresh?.();",
          "238:   }",
          "240:   async function saveAndQuit() {",
          "241:    await save();",
          "242:    await userStore.hydrate();",
          "243:    router.push(`/settings/roles`);",
          "244:   }",
          "246:   async function deleteAndQuit() {",
          "247:    await remove();",
          "248:    edits.value = {};",
          "249:    router.replace(`/settings/roles`);",
          "250:   }",
          "252:   function discardAndLeave() {",
          "253:    if (!leaveTo.value) return;",
          "254:    edits.value = {};",
          "255:    confirmLeave.value = false;",
          "256:    router.push(leaveTo.value);",
          "257:   }",
          "258:  },",
          "",
          "[Added Lines]",
          "117: import { computed, ref, toRefs } from 'vue';",
          "118: import { useI18n } from 'vue-i18n';",
          "124: const props = defineProps<{",
          "125:  primaryKey: string;",
          "126:  permissionKey?: string;",
          "127:  lastAdminRoleId?: string;",
          "128: }>();",
          "130: const { t } = useI18n();",
          "132: const router = useRouter();",
          "134: const userStore = useUserStore();",
          "135: const permissionsStore = usePermissionsStore();",
          "136: const serverStore = useServerStore();",
          "137: const userInviteModalActive = ref(false);",
          "138: const { primaryKey } = toRefs(props);",
          "140: const revisionsDrawerDetailRef = ref<InstanceType<typeof RevisionsDrawerDetail> | null>(null);",
          "142: const { edits, hasEdits, item, saving, loading, save, remove, deleting, isBatch } = useItem(",
          "143:  ref('directus_roles'),",
          "144:  primaryKey,",
          "145:  { deep: { users: { _limit: 0 } } }",
          "146: );",
          "148: const confirmDelete = ref(false);",
          "150: const adminEnabled = computed(() => {",
          "151:  const values = {",
          "152:   ...item.value,",
          "153:   ...edits.value,",
          "154:  } as Record<string, any>;",
          "156:  return !!values.admin_access;",
          "157: });",
          "159: const appAccess = computed(() => {",
          "160:  const values = {",
          "161:   ...item.value,",
          "162:   ...edits.value,",
          "163:  } as Record<string, any>;",
          "165:  return !!values.app_access;",
          "166: });",
          "168: useShortcut('meta+s', () => {",
          "169:  if (hasEdits.value) saveAndStay();",
          "172: const { confirmLeave, leaveTo } = useEditsGuard(hasEdits);",
          "174: const canInviteUsers = computed(() => {",
          "175:  if (serverStore.auth.disableDefault === true) return false;",
          "177:  const isAdmin = !!userStore.currentUser?.role?.admin_access;",
          "178:  if (isAdmin) return true;",
          "180:  const usersCreatePermission = permissionsStore.permissions.find(",
          "181:   (permission) => permission.collection === 'directus_users' && permission.action === 'create'",
          "182:  );",
          "184:  const rolesReadPermission = permissionsStore.permissions.find(",
          "185:   (permission) => permission.collection === 'directus_roles' && permission.action === 'read'",
          "186:  );",
          "188:  return !!usersCreatePermission && !!rolesReadPermission;",
          "189: });",
          "198: async function saveAndStay() {",
          "199:  await save();",
          "200:  await userStore.hydrate();",
          "201:  revisionsDrawerDetailRef.value?.refresh?.();",
          "202: }",
          "204: async function saveAndQuit() {",
          "205:  await save();",
          "206:  await userStore.hydrate();",
          "207:  router.push(`/settings/roles`);",
          "208: }",
          "210: async function deleteAndQuit() {",
          "211:  await remove();",
          "212:  edits.value = {};",
          "213:  router.replace(`/settings/roles`);",
          "214: }",
          "216: function discardAndLeave() {",
          "217:  if (!leaveTo.value) return;",
          "218:  edits.value = {};",
          "219:  confirmLeave.value = false;",
          "220:  router.push(leaveTo.value);",
          "221: }",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/permissions-detail/components/actions.vue||app/src/modules/settings/routes/roles/permissions-detail/components/actions.vue": [
          "File: app/src/modules/settings/routes/roles/permissions-detail/components/actions.vue -> app/src/modules/settings/routes/roles/permissions-detail/components/actions.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  </div>",
          "7: </template>",
          "13: import api from '@/api';",
          "16: import { isPermissionEmpty } from '@/utils/is-permission-empty';",
          "56:   }",
          "59: </script>",
          "61: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "9: <script lang=\"ts\">",
          "10: import { useI18n } from 'vue-i18n';",
          "11: import { defineComponent, PropType, ref } from 'vue';",
          "12: import { Permission } from '@directus/types';",
          "14: import { useRouter } from 'vue-router';",
          "15: import { unexpectedError } from '@/utils/unexpected-error';",
          "18: export default defineComponent({",
          "19:  props: {",
          "20:   roleKey: {",
          "21:    type: String,",
          "22:    default: null,",
          "23:   },",
          "24:   permission: {",
          "25:    type: Object as PropType<Permission>,",
          "26:    required: true,",
          "27:   },",
          "28:  },",
          "29:  emits: ['refresh'],",
          "30:  setup(props, { emit }) {",
          "31:   const { t } = useI18n();",
          "33:   const router = useRouter();",
          "35:   const loading = ref(false);",
          "37:   return { t, save, loading };",
          "39:   async function save() {",
          "40:    loading.value = true;",
          "42:    try {",
          "43:     if (isPermissionEmpty(props.permission)) {",
          "44:      await api.delete(`/permissions/${props.permission.id}`);",
          "45:     } else {",
          "46:      await api.patch(`/permissions/${props.permission.id}`, props.permission);",
          "47:     }",
          "49:     emit('refresh');",
          "50:     router.push(`/settings/roles/${props.roleKey || 'public'}`);",
          "51:    } catch (err: any) {",
          "52:     unexpectedError(err);",
          "53:    } finally {",
          "54:     loading.value = false;",
          "55:    }",
          "57:  },",
          "58: });",
          "",
          "[Added Lines]",
          "9: <script setup lang=\"ts\">",
          "12: import { unexpectedError } from '@/utils/unexpected-error';",
          "13: import { Permission } from '@directus/types';",
          "14: import { ref } from 'vue';",
          "15: import { useI18n } from 'vue-i18n';",
          "16: import { useRouter } from 'vue-router';",
          "18: const props = defineProps<{",
          "19:  permission: Permission;",
          "20:  roleKey?: string;",
          "21: }>();",
          "23: const emit = defineEmits(['refresh']);",
          "25: const { t } = useI18n();",
          "27: const router = useRouter();",
          "29: const loading = ref(false);",
          "31: async function save() {",
          "32:  loading.value = true;",
          "34:  try {",
          "35:   if (isPermissionEmpty(props.permission)) {",
          "36:    await api.delete(`/permissions/${props.permission.id}`);",
          "37:   } else {",
          "38:    await api.patch(`/permissions/${props.permission.id}`, props.permission);",
          "41:   emit('refresh');",
          "42:   router.push(`/settings/roles/${props.roleKey || 'public'}`);",
          "43:  } catch (err: any) {",
          "44:   unexpectedError(err);",
          "45:  } finally {",
          "46:   loading.value = false;",
          "47:  }",
          "48: }",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/permissions-detail/components/fields.vue||app/src/modules/settings/routes/roles/permissions-detail/components/fields.vue": [
          "File: app/src/modules/settings/routes/roles/permissions-detail/components/fields.vue -> app/src/modules/settings/routes/roles/permissions-detail/components/fields.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:  </div>",
          "26: </template>",
          "34: import { useFieldsStore } from '@/stores/fields';",
          "50:  },",
          "96:  },",
          "97: });",
          "98: </script>",
          "",
          "[Removed Lines]",
          "28: <script lang=\"ts\">",
          "29: import { useI18n } from 'vue-i18n';",
          "30: import { defineComponent, PropType, computed } from 'vue';",
          "31: import { Permission, Role } from '@directus/types';",
          "32: import { Field } from '@directus/types';",
          "33: import { useSync } from '@directus/composables';",
          "36: export default defineComponent({",
          "37:  props: {",
          "38:   permission: {",
          "39:    type: Object as PropType<Permission>,",
          "40:    required: true,",
          "41:   },",
          "42:   role: {",
          "43:    type: Object as PropType<Role>,",
          "44:    default: null,",
          "45:   },",
          "46:   appMinimal: {",
          "47:    type: Object as PropType<Partial<Permission>>,",
          "48:    default: undefined,",
          "49:   },",
          "51:  emits: ['update:permission'],",
          "52:  setup(props, { emit }) {",
          "53:   const { t } = useI18n();",
          "55:   const fieldsStore = useFieldsStore();",
          "57:   const internalPermission = useSync(props, 'permission', emit);",
          "59:   const fieldsInCollection = computed(() => {",
          "60:    const fields = fieldsStore.getFieldsForCollectionSorted(props.permission.collection);",
          "62:    return fields.map((field: Field) => {",
          "63:     return {",
          "64:      text: field.name,",
          "65:      value: field.field,",
          "66:     };",
          "67:    });",
          "68:   });",
          "70:   const fields = computed({",
          "71:    get() {",
          "72:     if (!internalPermission.value.fields) return [];",
          "74:     if (internalPermission.value.fields.includes('*')) {",
          "75:      return fieldsInCollection.value.map(({ value }: { value: string }) => value);",
          "76:     }",
          "78:     return internalPermission.value.fields;",
          "79:    },",
          "80:    set(newFields: string[] | null) {",
          "81:     if (newFields && newFields.length > 0) {",
          "82:      internalPermission.value = {",
          "83:       ...internalPermission.value,",
          "84:       fields: newFields,",
          "85:      };",
          "86:     } else {",
          "87:      internalPermission.value = {",
          "88:       ...internalPermission.value,",
          "89:       fields: null,",
          "90:      };",
          "91:     }",
          "92:    },",
          "93:   });",
          "95:   return { t, fields, fieldsInCollection };",
          "",
          "[Added Lines]",
          "28: <script setup lang=\"ts\">",
          "30: import { useSync } from '@directus/composables';",
          "31: import { Field, Permission, Role } from '@directus/types';",
          "32: import { computed } from 'vue';",
          "33: import { useI18n } from 'vue-i18n';",
          "35: const props = defineProps<{",
          "36:  permission: Permission;",
          "37:  role?: Role;",
          "38:  appMinimal?: Partial<Permission>;",
          "39: }>();",
          "41: const emit = defineEmits(['update:permission']);",
          "43: const { t } = useI18n();",
          "45: const fieldsStore = useFieldsStore();",
          "47: const internalPermission = useSync(props, 'permission', emit);",
          "49: const fieldsInCollection = computed(() => {",
          "50:  const fields = fieldsStore.getFieldsForCollectionSorted(props.permission.collection);",
          "52:  return fields.map((field: Field) => {",
          "53:   return {",
          "54:    text: field.name,",
          "55:    value: field.field,",
          "56:   };",
          "57:  });",
          "58: });",
          "60: const fields = computed({",
          "61:  get() {",
          "62:   if (!internalPermission.value.fields) return [];",
          "64:   if (internalPermission.value.fields.includes('*')) {",
          "65:    return fieldsInCollection.value.map(({ value }: { value: string }) => value);",
          "66:   }",
          "68:   return internalPermission.value.fields;",
          "70:  set(newFields: string[] | null) {",
          "71:   if (newFields && newFields.length > 0) {",
          "72:    internalPermission.value = {",
          "73:     ...internalPermission.value,",
          "74:     fields: newFields,",
          "75:    };",
          "76:   } else {",
          "77:    internalPermission.value = {",
          "78:     ...internalPermission.value,",
          "79:     fields: null,",
          "80:    };",
          "81:   }",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/permissions-detail/components/permissions.vue||app/src/modules/settings/routes/roles/permissions-detail/components/permissions.vue": [
          "File: app/src/modules/settings/routes/roles/permissions-detail/components/permissions.vue -> app/src/modules/settings/routes/roles/permissions-detail/components/permissions.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:  </div>",
          "20: </template>",
          "26: import { useSync } from '@directus/composables';",
          "64:  },",
          "66: </script>",
          "68: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "22: <script lang=\"ts\">",
          "23: import { useI18n } from 'vue-i18n';",
          "24: import { defineComponent, PropType, computed } from 'vue';",
          "25: import { Permission, Role } from '@directus/types';",
          "28: export default defineComponent({",
          "29:  props: {",
          "30:   permission: {",
          "31:    type: Object as PropType<Permission>,",
          "32:    required: true,",
          "33:   },",
          "34:   role: {",
          "35:    type: Object as PropType<Role>,",
          "36:    default: null,",
          "37:   },",
          "38:   appMinimal: {",
          "39:    type: Object as PropType<Partial<Permission>>,",
          "40:    default: undefined,",
          "41:   },",
          "42:  },",
          "43:  emits: ['update:permission'],",
          "44:  setup(props, { emit }) {",
          "45:   const { t } = useI18n();",
          "47:   const permissionSync = useSync(props, 'permission', emit);",
          "49:   const fields = computed(() => [",
          "50:    {",
          "51:     field: 'permissions',",
          "52:     name: t('rule'),",
          "53:     type: 'json',",
          "54:     meta: {",
          "55:      interface: 'system-filter',",
          "56:      options: {",
          "57:       collectionName: permissionSync.value.collection,",
          "58:      },",
          "59:     },",
          "60:    },",
          "61:   ]);",
          "63:   return { t, fields, permissionSync };",
          "65: });",
          "",
          "[Added Lines]",
          "22: <script setup lang=\"ts\">",
          "24: import { Permission, Role } from '@directus/types';",
          "25: import { computed } from 'vue';",
          "26: import { useI18n } from 'vue-i18n';",
          "28: const props = defineProps<{",
          "29:  permission: Permission;",
          "30:  role?: Role;",
          "31:  appMinimal?: Partial<Permission>;",
          "32: }>();",
          "34: const emit = defineEmits(['update:permission']);",
          "36: const { t } = useI18n();",
          "38: const permissionSync = useSync(props, 'permission', emit);",
          "40: const fields = computed(() => [",
          "41:  {",
          "42:   field: 'permissions',",
          "43:   name: t('rule'),",
          "44:   type: 'json',",
          "45:   meta: {",
          "46:    interface: 'system-filter',",
          "47:    options: {",
          "48:     collectionName: permissionSync.value.collection,",
          "49:    },",
          "50:   },",
          "52: ]);",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/permissions-detail/components/presets.vue||app/src/modules/settings/routes/roles/permissions-detail/components/presets.vue": [
          "File: app/src/modules/settings/routes/roles/permissions-detail/components/presets.vue -> app/src/modules/settings/routes/roles/permissions-detail/components/presets.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "12:  </div>",
          "13: </template>",
          "19: import { useSync } from '@directus/composables';",
          "51:  },",
          "52: });",
          "53: </script>",
          "",
          "[Removed Lines]",
          "15: <script lang=\"ts\">",
          "16: import { useI18n } from 'vue-i18n';",
          "17: import { defineComponent, PropType, computed } from 'vue';",
          "18: import { Permission, Role } from '@directus/types';",
          "21: export default defineComponent({",
          "22:  props: {",
          "23:   permission: {",
          "24:    type: Object as PropType<Permission>,",
          "25:    default: null,",
          "26:   },",
          "27:   role: {",
          "28:    type: Object as PropType<Role>,",
          "29:    default: null,",
          "30:   },",
          "31:  },",
          "32:  emits: ['update:permission'],",
          "33:  setup(props, { emit }) {",
          "34:   const { t } = useI18n();",
          "36:   const internalPermission = useSync(props, 'permission', emit);",
          "38:   const presets = computed({",
          "39:    get() {",
          "40:     return internalPermission.value.presets;",
          "41:    },",
          "42:    set(newPresets: Record<string, any> | null) {",
          "43:     internalPermission.value = {",
          "44:      ...internalPermission.value,",
          "45:      presets: newPresets,",
          "46:     };",
          "47:    },",
          "48:   });",
          "50:   return { t, presets };",
          "",
          "[Added Lines]",
          "15: <script setup lang=\"ts\">",
          "17: import { Permission, Role } from '@directus/types';",
          "18: import { computed } from 'vue';",
          "19: import { useI18n } from 'vue-i18n';",
          "21: const props = defineProps<{",
          "22:  permission: Permission;",
          "23:  role?: Role;",
          "24: }>();",
          "26: const emit = defineEmits(['update:permission']);",
          "28: const { t } = useI18n();",
          "30: const internalPermission = useSync(props, 'permission', emit);",
          "32: const presets = computed({",
          "33:  get() {",
          "34:   return internalPermission.value.presets;",
          "35:  },",
          "36:  set(newPresets: Record<string, any> | null) {",
          "37:   internalPermission.value = {",
          "38:    ...internalPermission.value,",
          "39:    presets: newPresets,",
          "40:   };",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/permissions-detail/components/tabs.vue||app/src/modules/settings/routes/roles/permissions-detail/components/tabs.vue": [
          "File: app/src/modules/settings/routes/roles/permissions-detail/components/tabs.vue -> app/src/modules/settings/routes/roles/permissions-detail/components/tabs.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  </v-tabs>",
          "8: </template>",
          "12: import { useSync } from '@directus/composables';",
          "32: </script>",
          "34: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "10: <script lang=\"ts\">",
          "11: import { defineComponent } from 'vue';",
          "14: export default defineComponent({",
          "15:  props: {",
          "16:   currentTab: {",
          "17:    type: Array,",
          "18:    default: null,",
          "19:   },",
          "20:   tabs: {",
          "21:    type: Array,",
          "22:    required: true,",
          "23:   },",
          "24:  },",
          "25:  emits: ['update:currentTab'],",
          "26:  setup(props, { emit }) {",
          "27:   const internalCurrentTab = useSync(props, 'currentTab', emit);",
          "29:   return { internalCurrentTab };",
          "30:  },",
          "31: });",
          "",
          "[Added Lines]",
          "10: <script setup lang=\"ts\">",
          "13: const props = defineProps<{",
          "14:  tabs: [];",
          "15:  currentTab?: [];",
          "16: }>();",
          "18: const emit = defineEmits(['update:currentTab']);",
          "20: const internalCurrentTab = useSync(props, 'currentTab', emit);",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/permissions-detail/components/validation.vue||app/src/modules/settings/routes/roles/permissions-detail/components/validation.vue": [
          "File: app/src/modules/settings/routes/roles/permissions-detail/components/validation.vue -> app/src/modules/settings/routes/roles/permissions-detail/components/validation.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  </div>",
          "14: </template>",
          "20: import { useSync } from '@directus/composables';",
          "56:  },",
          "58: </script>",
          "60: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "16: <script lang=\"ts\">",
          "17: import { useI18n } from 'vue-i18n';",
          "18: import { defineComponent, PropType, computed } from 'vue';",
          "19: import { Permission, Role } from '@directus/types';",
          "22: export default defineComponent({",
          "23:  props: {",
          "24:   permission: {",
          "25:    type: Object as PropType<Permission>,",
          "26:    required: true,",
          "27:   },",
          "28:   role: {",
          "29:    type: Object as PropType<Role>,",
          "30:    default: null,",
          "31:   },",
          "32:  },",
          "33:  emits: ['update:permission'],",
          "34:  setup(props, { emit }) {",
          "35:   const { t } = useI18n();",
          "37:   const permissionSync = useSync(props, 'permission', emit);",
          "39:   const fields = computed(() => [",
          "40:    {",
          "41:     field: 'validation',",
          "42:     name: t('rule'),",
          "43:     type: 'json',",
          "44:     meta: {",
          "45:      interface: 'system-filter',",
          "46:      options: {",
          "47:       collectionName: permissionSync.value.collection,",
          "48:       includeValidation: true,",
          "49:       includeRelations: false,",
          "50:      },",
          "51:     },",
          "52:    },",
          "53:   ]);",
          "55:   return { t, permissionSync, fields };",
          "57: });",
          "",
          "[Added Lines]",
          "16: <script setup lang=\"ts\">",
          "18: import { Permission, Role } from '@directus/types';",
          "19: import { computed } from 'vue';",
          "20: import { useI18n } from 'vue-i18n';",
          "22: const props = defineProps<{",
          "23:  permission: Permission;",
          "24:  role?: Role;",
          "25: }>();",
          "27: const emit = defineEmits(['update:permission']);",
          "29: const { t } = useI18n();",
          "31: const permissionSync = useSync(props, 'permission', emit);",
          "33: const fields = computed(() => [",
          "34:  {",
          "35:   field: 'validation',",
          "36:   name: t('rule'),",
          "37:   type: 'json',",
          "38:   meta: {",
          "39:    interface: 'system-filter',",
          "40:    options: {",
          "41:     collectionName: permissionSync.value.collection,",
          "42:     includeValidation: true,",
          "43:     includeRelations: false,",
          "44:    },",
          "45:   },",
          "47: ]);",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/permissions-detail/permissions-detail.vue||app/src/modules/settings/routes/roles/permissions-detail/permissions-detail.vue": [
          "File: app/src/modules/settings/routes/roles/permissions-detail/permissions-detail.vue -> app/src/modules/settings/routes/roles/permissions-detail/permissions-detail.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:   @cancel=\"close\"",
          "9:  >",
          "10:   <template v-if=\"!loading\" #sidebar>",
          "12:   </template>",
          "14:   <div v-if=\"!loading\" class=\"content\">",
          "",
          "[Removed Lines]",
          "11:    <tabs v-model:current-tab=\"currentTab\" :tabs=\"tabs\" />",
          "",
          "[Added Lines]",
          "11:    <tabs v-model:current-tab=\"currentTab\" :tabs=\"tabsValue\" />",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:  </v-drawer>",
          "45: </template>",
          "50: import api from '@/api';",
          "52: import { useCollectionsStore } from '@/stores/collections';",
          "53: import { useRouter } from 'vue-router';",
          "54: import Actions from './components/actions.vue';",
          "58: import Fields from './components/fields.vue';",
          "60: import Presets from './components/presets.vue';",
          "150:   });",
          "158:   });",
          "175:   });",
          "214:  },",
          "215: });",
          "216: </script>",
          "218: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "47: <script lang=\"ts\">",
          "48: import { useI18n } from 'vue-i18n';",
          "49: import { defineComponent, ref, computed, watch } from 'vue';",
          "51: import { Permission, Role } from '@directus/types';",
          "55: import Tabs from './components/tabs.vue';",
          "57: import Permissions from './components/permissions.vue';",
          "59: import Validation from './components/validation.vue';",
          "61: import { unexpectedError } from '@/utils/unexpected-error';",
          "62: import { appMinimalPermissions } from '../app-permissions';",
          "63: import { useDialogRoute } from '@/composables/use-dialog-route';",
          "64: import { isPermissionEmpty } from '@/utils/is-permission-empty';",
          "66: export default defineComponent({",
          "67:  components: { Actions, Tabs, Permissions, Fields, Validation, Presets },",
          "68:  props: {",
          "69:   roleKey: {",
          "70:    type: String,",
          "71:    default: null,",
          "72:   },",
          "73:   permissionKey: {",
          "74:    type: String,",
          "75:    required: true,",
          "76:   },",
          "77:  },",
          "78:  emits: ['refresh'],",
          "79:  setup(props) {",
          "80:   const { t } = useI18n();",
          "82:   const router = useRouter();",
          "84:   const collectionsStore = useCollectionsStore();",
          "86:   const isOpen = useDialogRoute();",
          "88:   const permission = ref<Permission>();",
          "89:   const role = ref<Role>();",
          "90:   const loading = ref(false);",
          "92:   const collectionName = computed(() => {",
          "93:    if (!permission.value) return null;",
          "94:    return collectionsStore.collections.find((collection) => collection.collection === permission.value!.collection)",
          "95:     ?.name;",
          "96:   });",
          "98:   const modalTitle = computed(() => {",
          "99:    if (loading.value || !permission.value) return t('loading');",
          "101:    if (props.roleKey) {",
          "102:     return role.value!.name + ' -> ' + collectionName.value + ' -> ' + t(permission.value.action);",
          "103:    }",
          "105:    return t('public_label') + ' -> ' + collectionName.value + ' -> ' + t(permission.value.action);",
          "106:   });",
          "108:   watch(() => props.permissionKey, load, { immediate: true });",
          "110:   const tabs = computed(() => {",
          "111:    if (!permission.value) return [];",
          "113:    const action = permission.value.action;",
          "115:    const tabs = [];",
          "117:    if (['read', 'update', 'delete', 'share'].includes(action)) {",
          "118:     tabs.push({",
          "119:      text: t('item_permissions'),",
          "120:      value: 'permissions',",
          "121:      hasValue: permission.value.permissions !== null && Object.keys(permission.value.permissions).length > 0,",
          "122:     });",
          "123:    }",
          "125:    if (['create', 'read', 'update'].includes(action)) {",
          "126:     tabs.push({",
          "127:      text: t('field_permissions'),",
          "128:      value: 'fields',",
          "129:      hasValue: permission.value.fields !== null,",
          "130:     });",
          "131:    }",
          "133:    if (['create', 'update'].includes(action)) {",
          "134:     tabs.push({",
          "135:      text: t('field_validation'),",
          "136:      value: 'validation',",
          "137:      hasValue: permission.value.validation !== null && Object.keys(permission.value.validation).length > 0,",
          "138:     });",
          "139:    }",
          "141:    if (['create', 'update'].includes(action)) {",
          "142:     tabs.push({",
          "143:      text: t('field_presets'),",
          "144:      value: 'presets',",
          "145:      hasValue: permission.value.presets !== null && Object.keys(permission.value.presets).length > 0,",
          "146:     });",
          "147:    }",
          "149:    return tabs;",
          "152:   const currentTab = ref<string[]>([]);",
          "154:   const currentTabInfo = computed(() => {",
          "155:    const tabKey = currentTab.value?.[0];",
          "156:    if (!tabKey) return null;",
          "157:    return tabs.value.find((tab) => tab.value === tabKey);",
          "160:   watch(",
          "161:    tabs,",
          "162:    (newTabs, oldTabs) => {",
          "163:     if (newTabs && oldTabs && newTabs.length === oldTabs.length) return;",
          "164:     currentTab.value = [tabs?.value?.[0]?.value];",
          "165:    },",
          "166:    { immediate: true }",
          "167:   );",
          "169:   const appMinimal = computed(() => {",
          "170:    if (!permission.value) return null;",
          "171:    return appMinimalPermissions.find(",
          "172:     (p: Partial<Permission>) =>",
          "173:      p.collection === permission.value!.collection && p.action === permission.value!.action",
          "174:    );",
          "177:   return { isOpen, permission, role, loading, modalTitle, tabs, currentTab, currentTabInfo, appMinimal, close };",
          "179:   async function close() {",
          "180:    if (permission.value && isPermissionEmpty(permission.value)) {",
          "181:     await api.delete(`/permissions/${permission.value.id}`);",
          "182:     router.replace(`/settings/roles/${props.roleKey || 'public'}`);",
          "183:    } else {",
          "184:     router.push(`/settings/roles/${props.roleKey || 'public'}`);",
          "185:    }",
          "186:   }",
          "188:   async function load() {",
          "189:    loading.value = true;",
          "191:    try {",
          "192:     if (props.roleKey) {",
          "193:      const response = await api.get(`/roles/${props.roleKey}`, {",
          "194:       params: {",
          "195:        deep: { users: { _limit: 0 } },",
          "196:       },",
          "197:      });",
          "199:      role.value = response.data.data;",
          "200:     }",
          "202:     const response = await api.get(`/permissions/${props.permissionKey}`);",
          "203:     permission.value = response.data.data;",
          "204:    } catch (err: any) {",
          "205:     if (err?.response?.status === 403) {",
          "206:      router.push(`/settings/roles/${props.roleKey || 'public'}`);",
          "207:     } else {",
          "208:      unexpectedError(err);",
          "209:     }",
          "210:    } finally {",
          "211:     loading.value = false;",
          "212:    }",
          "213:   }",
          "",
          "[Added Lines]",
          "47: <script setup lang=\"ts\">",
          "49: import { useDialogRoute } from '@/composables/use-dialog-route';",
          "51: import { isPermissionEmpty } from '@/utils/is-permission-empty';",
          "52: import { unexpectedError } from '@/utils/unexpected-error';",
          "53: import { Permission, Role } from '@directus/types';",
          "54: import { computed, ref, watch } from 'vue';",
          "55: import { useI18n } from 'vue-i18n';",
          "57: import { appMinimalPermissions } from '../app-permissions';",
          "60: import Permissions from './components/permissions.vue';",
          "62: import Tabs from './components/tabs.vue';",
          "63: import Validation from './components/validation.vue';",
          "65: const props = defineProps<{",
          "66:  permissionKey: string;",
          "67:  roleKey?: string;",
          "68: }>();",
          "70: defineEmits(['refresh']);",
          "72: const { t } = useI18n();",
          "74: const router = useRouter();",
          "76: const collectionsStore = useCollectionsStore();",
          "78: const isOpen = useDialogRoute();",
          "80: const permission = ref<Permission>();",
          "81: const role = ref<Role>();",
          "82: const loading = ref(false);",
          "84: const collectionName = computed(() => {",
          "85:  if (!permission.value) return null;",
          "86:  return collectionsStore.collections.find((collection) => collection.collection === permission.value!.collection)",
          "87:   ?.name;",
          "88: });",
          "90: const modalTitle = computed(() => {",
          "91:  if (loading.value || !permission.value) return t('loading');",
          "93:  if (props.roleKey) {",
          "94:   return role.value!.name + ' -> ' + collectionName.value + ' -> ' + t(permission.value.action);",
          "95:  }",
          "97:  return t('public_label') + ' -> ' + collectionName.value + ' -> ' + t(permission.value.action);",
          "98: });",
          "100: watch(() => props.permissionKey, load, { immediate: true });",
          "102: const tabsValue = computed(() => {",
          "103:  if (!permission.value) return [];",
          "105:  const action = permission.value.action;",
          "107:  const tabs = [];",
          "109:  if (['read', 'update', 'delete', 'share'].includes(action)) {",
          "110:   tabs.push({",
          "111:    text: t('item_permissions'),",
          "112:    value: 'permissions',",
          "113:    hasValue: permission.value.permissions !== null && Object.keys(permission.value.permissions).length > 0,",
          "115:  }",
          "117:  if (['create', 'read', 'update'].includes(action)) {",
          "118:   tabs.push({",
          "119:    text: t('field_permissions'),",
          "120:    value: 'fields',",
          "121:    hasValue: permission.value.fields !== null,",
          "122:   });",
          "123:  }",
          "125:  if (['create', 'update'].includes(action)) {",
          "126:   tabs.push({",
          "127:    text: t('field_validation'),",
          "128:    value: 'validation',",
          "129:    hasValue: permission.value.validation !== null && Object.keys(permission.value.validation).length > 0,",
          "131:  }",
          "133:  if (['create', 'update'].includes(action)) {",
          "134:   tabs.push({",
          "135:    text: t('field_presets'),",
          "136:    value: 'presets',",
          "137:    hasValue: permission.value.presets !== null && Object.keys(permission.value.presets).length > 0,",
          "139:  }",
          "141:  return tabs;",
          "142: });",
          "144: const currentTab = ref<string[]>([]);",
          "146: const currentTabInfo = computed(() => {",
          "147:  const tabKey = currentTab.value?.[0];",
          "148:  if (!tabKey) return null;",
          "149:  return tabsValue.value.find((tab) => tab.value === tabKey);",
          "150: });",
          "152: watch(",
          "153:  tabsValue,",
          "154:  (newTabs, oldTabs) => {",
          "155:   if (newTabs && oldTabs && newTabs.length === oldTabs.length) return;",
          "156:   currentTab.value = [tabsValue?.value?.[0]?.value];",
          "158:  { immediate: true }",
          "159: );",
          "161: const appMinimal = computed(() => {",
          "162:  if (!permission.value) return null;",
          "163:  return appMinimalPermissions.find(",
          "164:   (p: Partial<Permission>) => p.collection === permission.value!.collection && p.action === permission.value!.action",
          "165:  );",
          "168: async function close() {",
          "169:  if (permission.value && isPermissionEmpty(permission.value)) {",
          "170:   await api.delete(`/permissions/${permission.value.id}`);",
          "171:   router.replace(`/settings/roles/${props.roleKey || 'public'}`);",
          "172:  } else {",
          "173:   router.push(`/settings/roles/${props.roleKey || 'public'}`);",
          "174:  }",
          "175: }",
          "177: async function load() {",
          "178:  loading.value = true;",
          "180:  try {",
          "181:   if (props.roleKey) {",
          "182:    const response = await api.get(`/roles/${props.roleKey}`, {",
          "183:     params: {",
          "184:      deep: { users: { _limit: 0 } },",
          "185:     },",
          "186:    });",
          "188:    role.value = response.data.data;",
          "189:   }",
          "191:   const response = await api.get(`/permissions/${props.permissionKey}`);",
          "192:   permission.value = response.data.data;",
          "193:  } catch (err: any) {",
          "194:   if (err?.response?.status === 403) {",
          "195:    router.push(`/settings/roles/${props.roleKey || 'public'}`);",
          "196:   } else {",
          "197:    unexpectedError(err);",
          "198:   }",
          "199:  } finally {",
          "200:   loading.value = false;",
          "201:  }",
          "202: }",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/roles/public-item.vue||app/src/modules/settings/routes/roles/public-item.vue": [
          "File: app/src/modules/settings/routes/roles/public-item.vue -> app/src/modules/settings/routes/roles/public-item.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "21:  </private-view>",
          "22: </template>",
          "25: import { useI18n } from 'vue-i18n';",
          "28: import SettingsNavigation from '../../components/navigation.vue';",
          "29: import PermissionsOverview from './item/components/permissions-overview.vue';",
          "30: import RoleInfoSidebarDetail from './item/components/role-info-sidebar-detail.vue';",
          "46: </script>",
          "48: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "24: <script lang=\"ts\">",
          "26: import { defineComponent } from 'vue';",
          "32: export default defineComponent({",
          "33:  name: 'RolesItem',",
          "34:  components: { SettingsNavigation, PermissionsOverview, RoleInfoSidebarDetail },",
          "35:  props: {",
          "36:   permissionKey: {",
          "37:    type: String,",
          "38:    default: null,",
          "39:   },",
          "40:  },",
          "41:  setup() {",
          "42:   const { t } = useI18n();",
          "43:   return { t };",
          "44:  },",
          "45: });",
          "",
          "[Added Lines]",
          "24: <script setup lang=\"ts\">",
          "30: defineProps<{",
          "31:  permissionKey?: string;",
          "32: }>();",
          "34: const { t } = useI18n();",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/webhooks/collection.vue||app/src/modules/settings/routes/webhooks/collection.vue": [
          "File: app/src/modules/settings/routes/webhooks/collection.vue -> app/src/modules/settings/routes/webhooks/collection.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:  </component>",
          "96: </template>",
          "105: import api from '@/api';",
          "107: import { useExtension } from '@/composables/use-extension';",
          "109: type Item = {",
          "110:  [field: string]: any;",
          "111: };",
          "195: </script>",
          "197: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "98: <script lang=\"ts\">",
          "99: import { useI18n } from 'vue-i18n';",
          "100: import { defineComponent, computed, ref } from 'vue';",
          "101: import SettingsNavigation from '../../components/navigation.vue';",
          "102: import LayoutSidebarDetail from '@/views/private/components/layout-sidebar-detail.vue';",
          "103: import { usePreset } from '@/composables/use-preset';",
          "104: import { useLayout } from '@directus/composables';",
          "106: import SearchInput from '@/views/private/components/search-input.vue';",
          "113: export default defineComponent({",
          "114:  name: 'WebhooksCollection',",
          "115:  components: { SettingsNavigation, LayoutSidebarDetail, SearchInput },",
          "116:  setup() {",
          "117:   const { t } = useI18n();",
          "119:   const layoutRef = ref();",
          "120:   const selection = ref<Item[]>([]);",
          "122:   const { layout, layoutOptions, layoutQuery, filter, search } = usePreset(ref('directus_webhooks'));",
          "123:   const { addNewLink, batchLink } = useLinks();",
          "124:   const { confirmDelete, deleting, batchDelete } = useBatchDelete();",
          "126:   const { layoutWrapper } = useLayout(layout);",
          "128:   const currentLayout = useExtension('layout', layout);",
          "130:   return {",
          "131:    t,",
          "132:    addNewLink,",
          "133:    batchDelete,",
          "134:    batchLink,",
          "135:    confirmDelete,",
          "136:    deleting,",
          "137:    layoutRef,",
          "138:    layoutWrapper,",
          "139:    filter,",
          "140:    selection,",
          "141:    layoutOptions,",
          "142:    layoutQuery,",
          "143:    layout,",
          "144:    search,",
          "145:    clearFilters,",
          "146:    currentLayout,",
          "147:   };",
          "149:   async function refresh() {",
          "150:    await layoutRef.value?.state?.refresh?.();",
          "151:   }",
          "153:   function useBatchDelete() {",
          "154:    const confirmDelete = ref(false);",
          "155:    const deleting = ref(false);",
          "157:    return { confirmDelete, deleting, batchDelete };",
          "159:    async function batchDelete() {",
          "160:     deleting.value = true;",
          "162:     confirmDelete.value = false;",
          "164:     const batchPrimaryKeys = selection.value;",
          "166:     await api.delete(`/webhooks/${batchPrimaryKeys}`);",
          "168:     await refresh();",
          "170:     selection.value = [];",
          "171:     deleting.value = false;",
          "172:     confirmDelete.value = false;",
          "173:    }",
          "174:   }",
          "176:   function useLinks() {",
          "177:    const addNewLink = computed<string>(() => {",
          "178:     return `/settings/webhooks/+`;",
          "179:    });",
          "181:    const batchLink = computed<string>(() => {",
          "182:     const batchPrimaryKeys = selection.value;",
          "183:     return `/settings/webhooks/${batchPrimaryKeys}`;",
          "184:    });",
          "186:    return { addNewLink, batchLink };",
          "187:   }",
          "189:   function clearFilters() {",
          "190:    filter.value = null;",
          "191:    search.value = null;",
          "192:   }",
          "193:  },",
          "194: });",
          "",
          "[Added Lines]",
          "98: <script setup lang=\"ts\">",
          "101: import { usePreset } from '@/composables/use-preset';",
          "102: import LayoutSidebarDetail from '@/views/private/components/layout-sidebar-detail.vue';",
          "103: import SearchInput from '@/views/private/components/search-input.vue';",
          "104: import { useLayout } from '@directus/composables';",
          "105: import { computed, ref } from 'vue';",
          "106: import { useI18n } from 'vue-i18n';",
          "107: import SettingsNavigation from '../../components/navigation.vue';",
          "113: const { t } = useI18n();",
          "115: const layoutRef = ref();",
          "116: const selection = ref<Item[]>([]);",
          "118: const { layout, layoutOptions, layoutQuery, filter, search } = usePreset(ref('directus_webhooks'));",
          "119: const { addNewLink, batchLink } = useLinks();",
          "120: const { confirmDelete, deleting, batchDelete } = useBatchDelete();",
          "122: const { layoutWrapper } = useLayout(layout);",
          "124: const currentLayout = useExtension('layout', layout);",
          "126: async function refresh() {",
          "127:  await layoutRef.value?.state?.refresh?.();",
          "128: }",
          "130: function useBatchDelete() {",
          "131:  const confirmDelete = ref(false);",
          "132:  const deleting = ref(false);",
          "134:  return { confirmDelete, deleting, batchDelete };",
          "136:  async function batchDelete() {",
          "137:   deleting.value = true;",
          "139:   confirmDelete.value = false;",
          "141:   const batchPrimaryKeys = selection.value;",
          "143:   await api.delete(`/webhooks/${batchPrimaryKeys}`);",
          "145:   await refresh();",
          "147:   selection.value = [];",
          "148:   deleting.value = false;",
          "149:   confirmDelete.value = false;",
          "150:  }",
          "151: }",
          "153: function useLinks() {",
          "154:  const addNewLink = computed<string>(() => {",
          "155:   return `/settings/webhooks/+`;",
          "156:  });",
          "158:  const batchLink = computed<string>(() => {",
          "159:   const batchPrimaryKeys = selection.value;",
          "160:   return `/settings/webhooks/${batchPrimaryKeys}`;",
          "161:  });",
          "163:  return { addNewLink, batchLink };",
          "164: }",
          "166: function clearFilters() {",
          "167:  filter.value = null;",
          "168:  search.value = null;",
          "169: }",
          "",
          "---------------"
        ],
        "app/src/modules/settings/routes/webhooks/item.vue||app/src/modules/settings/routes/webhooks/item.vue": [
          "File: app/src/modules/settings/routes/webhooks/item.vue -> app/src/modules/settings/routes/webhooks/item.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:  </private-view>",
          "89: </template>",
          "98: import { useItem } from '@/composables/use-item';",
          "100: import { useShortcut } from '@/composables/use-shortcut';",
          "219: });",
          "220: </script>",
          "222: <style lang=\"scss\" scoped>",
          "",
          "[Removed Lines]",
          "91: <script lang=\"ts\">",
          "92: import { useI18n } from 'vue-i18n';",
          "93: import { defineComponent, computed, toRefs, ref } from 'vue';",
          "95: import SettingsNavigation from '../../components/navigation.vue';",
          "96: import { useRouter } from 'vue-router';",
          "97: import RevisionsDrawerDetail from '@/views/private/components/revisions-drawer-detail.vue';",
          "99: import SaveOptions from '@/views/private/components/save-options.vue';",
          "101: import { useEditsGuard } from '@/composables/use-edits-guard';",
          "103: export default defineComponent({",
          "104:  name: 'WebhooksItem',",
          "105:  components: { SettingsNavigation, RevisionsDrawerDetail, SaveOptions },",
          "106:  props: {",
          "107:   primaryKey: {",
          "108:    type: String,",
          "109:    required: true,",
          "110:   },",
          "111:  },",
          "112:  setup(props) {",
          "113:   const { t } = useI18n();",
          "115:   const router = useRouter();",
          "117:   const { primaryKey } = toRefs(props);",
          "119:   const revisionsDrawerDetailRef = ref<InstanceType<typeof RevisionsDrawerDetail> | null>(null);",
          "121:   const {",
          "122:    isNew,",
          "123:    edits,",
          "124:    hasEdits,",
          "125:    item,",
          "126:    saving,",
          "127:    loading,",
          "128:    error,",
          "129:    save,",
          "130:    remove,",
          "131:    deleting,",
          "132:    saveAsCopy,",
          "133:    isBatch,",
          "134:    validationErrors,",
          "135:   } = useItem(ref('directus_webhooks'), primaryKey);",
          "137:   const confirmDelete = ref(false);",
          "139:   const title = computed(() => {",
          "140:    if (loading.value) return t('loading');",
          "141:    if (isNew.value) return t('creating_webhook');",
          "142:    return item.value?.name;",
          "143:   });",
          "145:   useShortcut('meta+s', () => {",
          "146:    if (hasEdits.value) saveAndStay();",
          "147:   });",
          "149:   useShortcut('meta+shift+s', () => {",
          "150:    if (hasEdits.value) saveAndAddNew();",
          "151:   });",
          "153:   const { confirmLeave, leaveTo } = useEditsGuard(hasEdits);",
          "155:   return {",
          "156:    t,",
          "157:    item,",
          "158:    loading,",
          "159:    error,",
          "160:    isNew,",
          "161:    edits,",
          "162:    hasEdits,",
          "163:    saving,",
          "164:    saveAndQuit,",
          "165:    deleteAndQuit,",
          "166:    confirmDelete,",
          "167:    deleting,",
          "168:    saveAndStay,",
          "169:    saveAndAddNew,",
          "170:    saveAsCopyAndNavigate,",
          "171:    discardAndStay,",
          "172:    isBatch,",
          "173:    title,",
          "174:    validationErrors,",
          "175:    confirmLeave,",
          "176:    leaveTo,",
          "177:    discardAndLeave,",
          "178:    revisionsDrawerDetailRef,",
          "179:   };",
          "181:   async function saveAndQuit() {",
          "182:    await save();",
          "183:    router.push(`/settings/webhooks`);",
          "184:   }",
          "186:   async function saveAndStay() {",
          "187:    await save();",
          "188:    revisionsDrawerDetailRef.value?.refresh?.();",
          "189:   }",
          "191:   async function saveAndAddNew() {",
          "192:    await save();",
          "193:    router.push(`/settings/webhooks/+`);",
          "194:   }",
          "196:   async function saveAsCopyAndNavigate() {",
          "197:    const newPrimaryKey = await saveAsCopy();",
          "198:    if (newPrimaryKey) router.push(`/settings/webhooks/${newPrimaryKey}`);",
          "199:   }",
          "201:   async function deleteAndQuit() {",
          "202:    await remove();",
          "203:    edits.value = {};",
          "204:    router.replace(`/settings/webhooks`);",
          "205:   }",
          "207:   function discardAndLeave() {",
          "208:    if (!leaveTo.value) return;",
          "209:    edits.value = {};",
          "210:    confirmLeave.value = false;",
          "211:    router.push(leaveTo.value);",
          "212:   }",
          "214:   function discardAndStay() {",
          "215:    edits.value = {};",
          "216:    confirmLeave.value = false;",
          "217:   }",
          "218:  },",
          "",
          "[Added Lines]",
          "91: <script setup lang=\"ts\">",
          "92: import { useEditsGuard } from '@/composables/use-edits-guard';",
          "95: import RevisionsDrawerDetail from '@/views/private/components/revisions-drawer-detail.vue';",
          "96: import SaveOptions from '@/views/private/components/save-options.vue';",
          "97: import { computed, ref, toRefs } from 'vue';",
          "98: import { useI18n } from 'vue-i18n';",
          "99: import { useRouter } from 'vue-router';",
          "100: import SettingsNavigation from '../../components/navigation.vue';",
          "102: const props = defineProps<{",
          "103:  primaryKey: string;",
          "104: }>();",
          "106: const { t } = useI18n();",
          "108: const router = useRouter();",
          "110: const { primaryKey } = toRefs(props);",
          "112: const revisionsDrawerDetailRef = ref<InstanceType<typeof RevisionsDrawerDetail> | null>(null);",
          "114: const { isNew, edits, hasEdits, item, saving, loading, save, remove, deleting, saveAsCopy, isBatch, validationErrors } =",
          "115:  useItem(ref('directus_webhooks'), primaryKey);",
          "117: const confirmDelete = ref(false);",
          "119: const title = computed(() => {",
          "120:  if (loading.value) return t('loading');",
          "121:  if (isNew.value) return t('creating_webhook');",
          "122:  return item.value?.name;",
          "125: useShortcut('meta+s', () => {",
          "126:  if (hasEdits.value) saveAndStay();",
          "127: });",
          "129: useShortcut('meta+shift+s', () => {",
          "130:  if (hasEdits.value) saveAndAddNew();",
          "131: });",
          "133: const { confirmLeave, leaveTo } = useEditsGuard(hasEdits);",
          "135: async function saveAndQuit() {",
          "136:  await save();",
          "137:  router.push(`/settings/webhooks`);",
          "138: }",
          "140: async function saveAndStay() {",
          "141:  await save();",
          "142:  revisionsDrawerDetailRef.value?.refresh?.();",
          "143: }",
          "145: async function saveAndAddNew() {",
          "146:  await save();",
          "147:  router.push(`/settings/webhooks/+`);",
          "148: }",
          "150: async function saveAsCopyAndNavigate() {",
          "151:  const newPrimaryKey = await saveAsCopy();",
          "152:  if (newPrimaryKey) router.push(`/settings/webhooks/${newPrimaryKey}`);",
          "153: }",
          "155: async function deleteAndQuit() {",
          "156:  await remove();",
          "157:  edits.value = {};",
          "158:  router.replace(`/settings/webhooks`);",
          "159: }",
          "161: function discardAndLeave() {",
          "162:  if (!leaveTo.value) return;",
          "163:  edits.value = {};",
          "164:  confirmLeave.value = false;",
          "165:  router.push(leaveTo.value);",
          "166: }",
          "168: function discardAndStay() {",
          "169:  edits.value = {};",
          "170:  confirmLeave.value = false;",
          "171: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27957bb295dac25e88eb65f8382a1ca6fdd256e9",
      "candidate_info": {
        "commit_hash": "27957bb295dac25e88eb65f8382a1ca6fdd256e9",
        "repo": "directus/directus",
        "commit_url": "https://github.com/directus/directus/commit/27957bb295dac25e88eb65f8382a1ca6fdd256e9",
        "files": [
          ".changeset/gentle-planets-trade.md",
          "app/index.html",
          "app/package.json",
          "app/public/browserconfig.xml",
          "app/public/img/icons/mstile-150x150.png",
          "app/public/img/icons/safari-pinned-tab.svg",
          "app/public/manifest.webmanifest",
          "app/src/app.vue",
          "app/src/composables/use-title.ts",
          "app/src/main.ts",
          "app/src/modules/content/routes/item.vue",
          "app/src/views/private/private-view.vue",
          "app/vite.config.js",
          "pnpm-lock.yaml"
        ],
        "message": "Fix meta tags inconsistencies (#19141)\n\n* Install unhead\n\n* Use unhead plugin in vite for smaller builds\n\n* Remove unused / outdated public assets\n\n* Don't serve fixed manifest, pinned tab icon\n\n* Remove custom useTitle composable in favor of useHead\n\n* Register useHead in vue app\n\n* Set global title template based on projectname\n\n* Add changeset\n\n* Make theme-color dynamic\n\n* Remove default meta tags",
        "before_after_code_files": [
          "app/index.html||app/index.html",
          "app/public/manifest.webmanifest||app/public/manifest.webmanifest",
          "app/src/app.vue||app/src/app.vue",
          "app/src/composables/use-title.ts||app/src/composables/use-title.ts",
          "app/src/main.ts||app/src/main.ts",
          "app/src/modules/content/routes/item.vue||app/src/modules/content/routes/item.vue",
          "app/src/views/private/private-view.vue||app/src/views/private/private-view.vue",
          "app/vite.config.js||app/vite.config.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "app/src/main.ts||app/src/main.ts",
            "app/vite.config.js||app/vite.config.js"
          ],
          "candidate": [
            "app/src/main.ts||app/src/main.ts",
            "app/vite.config.js||app/vite.config.js"
          ]
        }
      },
      "candidate_diff": {
        "app/index.html||app/index.html": [
          "File: app/index.html -> app/index.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:   <meta name=\"format-detection\" content=\"telephone=no,date=no,address=no,email=no,url=no\" />",
          "14:   <meta name=\"HandheldFriendly\" content=\"true\" />",
          "15:   <meta name=\"MobileOptimized\" content=\"width\" />",
          "18:   <meta name=\"color-scheme\" content=\"dark light\" />",
          "19:   <meta name=\"mobile-web-app-capable\" content=\"yes\" />",
          "20:   <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />",
          "21:   <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\" />",
          "24:   <title>Loading&hellip;</title>",
          "25:   <style id=\"custom-css\"></style>",
          "26:   <embed-head />",
          "",
          "[Removed Lines]",
          "16:   <meta name=\"msapplication-TileColor\" content=\"#263238\" />",
          "17:   <meta name=\"theme-color\" content=\"#263238\" />",
          "22:   <link rel=\"manifest\" href=\"/manifest.webmanifest\" />",
          "23:   <link rel=\"mask-icon\" href=\"/img/icons/safari-pinned-tab.svg\" color=\"#263238\" />",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "app/public/manifest.webmanifest||app/public/manifest.webmanifest": [
          "File: app/public/manifest.webmanifest -> app/public/manifest.webmanifest",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "app/src/app.vue||app/src/app.vue": [
          "File: app/src/app.vue -> app/src/app.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import { setFavicon } from '@/utils/set-favicon';",
          "28: import { useAppStore } from '@directus/stores';",
          "29: import { User } from '@directus/types';",
          "30: import { StyleValue, computed, onMounted, onUnmounted, toRefs, watch } from 'vue';",
          "31: import { useI18n } from 'vue-i18n';",
          "32: import { startIdleTracking, stopIdleTracking } from './idle';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: import { useHead } from '@unhead/vue';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45:  } as StyleValue;",
          "46: });",
          "48: onMounted(() => startIdleTracking());",
          "49: onUnmounted(() => stopIdleTracking());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: useHead({",
          "50:  titleTemplate: computed((title?: string) => {",
          "51:   const projectName = serverStore.info?.project?.project_name ?? 'Directus';",
          "52:   return !title ? projectName : `${title} \u00b7 ${projectName}`;",
          "53:  }),",
          "54:  meta: computed(() => {",
          "55:   const content = serverStore.info?.project?.project_color ?? '#6644ff';",
          "57:   return [",
          "58:    {",
          "59:     name: 'msapplication-TileColor',",
          "60:     content,",
          "61:    },",
          "62:    {",
          "63:     name: 'theme-color',",
          "64:     content,",
          "65:    },",
          "66:   ];",
          "67:  }),",
          "68: });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "78:  { immediate: true }",
          "79: );",
          "89: const customCSS = computed(() => {",
          "90:  return serverStore.info?.project?.custom_css || '';",
          "91: });",
          "",
          "[Removed Lines]",
          "81: watch(",
          "82:  () => serverStore.info?.project?.project_name,",
          "83:  (projectName) => {",
          "84:   document.title = projectName || 'Directus';",
          "85:  },",
          "86:  { immediate: true }",
          "87: );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "app/src/composables/use-title.ts||app/src/composables/use-title.ts": [
          "File: app/src/composables/use-title.ts -> app/src/composables/use-title.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "app/src/main.ts||app/src/main.ts": [
          "File: app/src/main.ts -> app/src/main.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import { getVueComponentName } from '@/utils/get-vue-component-name';",
          "4: import { createPinia } from 'pinia';",
          "5: import { createApp } from 'vue';",
          "6: import App from './app.vue';",
          "7: import { registerComponents } from './components/register';",
          "8: import { DIRECTUS_LOGO } from './constants';",
          "9: import { registerDirectives } from './directives/register';",
          "10: import { i18n } from './lang/';",
          "11: import { router } from './router';",
          "12: import './styles/main.scss';",
          "13: import { registerViews } from './views/register';",
          "16: init();",
          "",
          "[Removed Lines]",
          "14: import { loadExtensions, registerExtensions } from './extensions';",
          "",
          "[Added Lines]",
          "5: import { createHead } from '@unhead/vue';",
          "11: import { loadExtensions, registerExtensions } from './extensions';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:  app.use(router);",
          "38:  app.use(i18n);",
          "39:  app.use(createPinia());",
          "41:  app.config.errorHandler = (err, vm, info) => {",
          "42:   const source = getVueComponentName(vm);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:  app.use(createHead());",
          "",
          "---------------"
        ],
        "app/src/modules/content/routes/item.vue||app/src/modules/content/routes/item.vue": [
          "File: app/src/modules/content/routes/item.vue -> app/src/modules/content/routes/item.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "226: import { usePermissions } from '@/composables/use-permissions';",
          "227: import { useShortcut } from '@/composables/use-shortcut';",
          "228: import { useTemplateData } from '@/composables/use-template-data';",
          "230: import { renderStringTemplate } from '@/utils/render-string-template';",
          "231: import CommentsSidebarDetail from '@/views/private/components/comments-sidebar-detail.vue';",
          "232: import FlowSidebarDetail from '@/views/private/components/flow-sidebar-detail.vue';",
          "",
          "[Removed Lines]",
          "229: import { useTitle } from '@/composables/use-title';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234: import SaveOptions from '@/views/private/components/save-options.vue';",
          "235: import SharesSidebarDetail from '@/views/private/components/shares-sidebar-detail.vue';",
          "236: import { useCollection } from '@directus/composables';",
          "237: import { useRouter } from 'vue-router';",
          "238: import LivePreview from '../components/live-preview.vue';",
          "239: import ContentNavigation from '../components/navigation.vue';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236: import { useHead } from '@unhead/vue';",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "315:   : t('editing_in', { collection: collectionInfo.value?.name });",
          "316: });",
          "328:   }",
          "332: });",
          "336: const archiveTooltip = computed(() => {",
          "337:  if (archiveAllowed.value === false) return t('not_allowed');",
          "338:  if (isArchived.value === true) return t('unarchive');",
          "",
          "[Removed Lines]",
          "318: const tabTitle = computed(() => {",
          "319:  const tabTitle = (collectionInfo.value?.name || '') + ' | ';",
          "321:  if (collectionInfo.value && collectionInfo.value.meta) {",
          "322:   if (collectionInfo.value.meta.singleton === true) {",
          "323:    return tabTitle + collectionInfo.value.name;",
          "324:   } else if (isNew.value === false && collectionInfo.value.meta.display_template) {",
          "325:    const { displayValue } = renderStringTemplate(collectionInfo.value.meta.display_template, templateData);",
          "327:    if (displayValue.value !== undefined) return tabTitle + displayValue.value;",
          "329:  }",
          "331:  return tabTitle + title.value;",
          "334: useTitle(tabTitle);",
          "",
          "[Added Lines]",
          "318: useHead({",
          "319:  title: () => {",
          "320:   const tabTitle = (collectionInfo.value?.name || '') + ' | ';",
          "322:   if (collectionInfo.value && collectionInfo.value.meta) {",
          "323:    if (collectionInfo.value.meta.singleton === true) {",
          "324:     return tabTitle + collectionInfo.value.name;",
          "325:    } else if (isNew.value === false && collectionInfo.value.meta.display_template) {",
          "326:     const { displayValue } = renderStringTemplate(collectionInfo.value.meta.display_template, templateData);",
          "328:     if (displayValue.value !== undefined) return tabTitle + displayValue.value;",
          "329:    }",
          "332:   return tabTitle + title.value;",
          "333:  },",
          "",
          "---------------"
        ],
        "app/src/views/private/private-view.vue||app/src/views/private/private-view.vue": [
          "File: app/src/views/private/private-view.vue -> app/src/views/private/private-view.vue",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: <script setup lang=\"ts\">",
          "99: import VResizeable, { ResizeableOptions } from '@/components/v-resizeable.vue';",
          "100: import { useLocalStorage } from '@/composables/use-local-storage';",
          "102: import { useWindowSize } from '@/composables/use-window-size';",
          "104: import { useUserStore } from '@/stores/user';",
          "105: import { useElementSize, useSync } from '@directus/composables';",
          "106: import { useEventListener } from '@vueuse/core';",
          "107: import { debounce } from 'lodash';",
          "108: import { storeToRefs } from 'pinia';",
          "",
          "[Removed Lines]",
          "101: import { useTitle } from '@/composables/use-title';",
          "103: import { useAppStore } from '@directus/stores';",
          "",
          "[Added Lines]",
          "104: import { useAppStore } from '@directus/stores';",
          "105: import { useHead } from '@unhead/vue';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "344:  fullScreen.value = false;",
          "345: });",
          "349: function openSidebar(event: MouseEvent) {",
          "350:  if (event.target && (event.target as HTMLElement).classList.contains('close') === false) {",
          "",
          "[Removed Lines]",
          "347: useTitle(title);",
          "",
          "[Added Lines]",
          "347: useHead({",
          "348:  title: title,",
          "349: });",
          "",
          "---------------"
        ],
        "app/vite.config.js||app/vite.config.js": [
          "File: app/vite.config.js -> app/vite.config.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: import { searchForWorkspaceRoot } from 'vite';",
          "19: import { defineConfig } from 'vitest/config';",
          "20: import { version } from '../directus/package.json';",
          "22: const API_PATH = path.join('..', 'api');",
          "23: const EXTENSIONS_PATH = path.join(API_PATH, 'extensions');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import UnheadVite from '@unhead/addons/vite';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:  plugins: [",
          "31:   directusExtensions(),",
          "32:   vue(),",
          "33:   yaml({",
          "34:    transform(data) {",
          "35:     return data === null ? {} : undefined;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:   UnheadVite(),",
          "",
          "---------------"
        ]
      }
    }
  ]
}