{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "26980fb859b75955f012725edf11458a444d7fdc",
      "candidate_info": {
        "commit_hash": "26980fb859b75955f012725edf11458a444d7fdc",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/26980fb859b75955f012725edf11458a444d7fdc",
        "files": [
          "src/lib/components/chat/ModelSelector/Selector.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/ModelSelector/Selector.svelte||src/lib/components/chat/ModelSelector/Selector.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/ModelSelector/Selector.svelte||src/lib/components/chat/ModelSelector/Selector.svelte": [
          "File: src/lib/components/chat/ModelSelector/Selector.svelte -> src/lib/components/chat/ModelSelector/Selector.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:         {$i18n.t('All')}",
          "370:        </button>",
          "373:         <button",
          "374:          class=\"min-w-fit outline-none p-1.5 {selectedConnectionType === 'ollama'",
          "375:           ? ''",
          "",
          "[Removed Lines]",
          "372:        {#if items.find((item) => item.model?.owned_by === 'ollama')}",
          "",
          "[Added Lines]",
          "372:        {#if items.find((item) => item.model?.owned_by === 'ollama') && items.find((item) => item.model?.owned_by === 'openai')}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:         >",
          "382:          {$i18n.t('Local')}",
          "383:         </button>",
          "387:         <button",
          "388:          class=\"min-w-fit outline-none p-1.5 {selectedConnectionType === 'openai'",
          "389:           ? ''",
          "",
          "[Removed Lines]",
          "384:        {/if}",
          "386:        {#if items.find((item) => item.model?.owned_by === 'openai')}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b20603e01a206f6e47d4f212d1ab64dbab39a016",
      "candidate_info": {
        "commit_hash": "b20603e01a206f6e47d4f212d1ab64dbab39a016",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/b20603e01a206f6e47d4f212d1ab64dbab39a016",
        "files": [
          "backend/open_webui/utils/middleware.py",
          "scripts/prepare-pyodide.js"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "scripts/prepare-pyodide.js||scripts/prepare-pyodide.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1117:                         if reasoning_duration:",
          "1118:                             if raw:",
          "1120:                             else:",
          "1122:                         else:",
          "1123:                             if raw:",
          "1125:                             else:",
          "1128:                     elif block[\"type\"] == \"code_interpreter\":",
          "1129:                         attributes = block.get(\"attributes\", {})",
          "",
          "[Removed Lines]",
          "1119:                                 content = f'{content}<{block[\"tag\"]}>{block[\"content\"]}</{block[\"tag\"]}>\\n'",
          "1121:                                 content = f'{content}<details type=\"reasoning\" done=\"true\" duration=\"{reasoning_duration}\">\\n<summary>Thought for {reasoning_duration} seconds</summary>\\n{reasoning_display_content}\\n</details>\\n'",
          "1124:                                 content = f'{content}<{block[\"tag\"]}>{block[\"content\"]}</{block[\"tag\"]}>\\n'",
          "1126:                                 content = f'{content}<details type=\"reasoning\" done=\"false\">\\n<summary>Thinking\u2026</summary>\\n{reasoning_display_content}\\n</details>\\n'",
          "",
          "[Added Lines]",
          "1119:                                 content = f'{content}\\n<{block[\"tag\"]}>{block[\"content\"]}</{block[\"tag\"]}>\\n'",
          "1121:                                 content = f'{content}\\n<details type=\"reasoning\" done=\"true\" duration=\"{reasoning_duration}\">\\n<summary>Thought for {reasoning_duration} seconds</summary>\\n{reasoning_display_content}\\n</details>\\n'",
          "1124:                                 content = f'{content}\\n<{block[\"tag\"]}>{block[\"content\"]}</{block[\"tag\"]}>\\n'",
          "1126:                                 content = f'{content}\\n<details type=\"reasoning\" done=\"false\">\\n<summary>Thinking\u2026</summary>\\n{reasoning_display_content}\\n</details>\\n'",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1134:                             output = html.escape(json.dumps(output))",
          "1136:                             if raw:",
          "1138:                             else:",
          "1140:                         else:",
          "1141:                             if raw:",
          "1143:                             else:",
          "1146:                     else:",
          "1147:                         block_content = str(block[\"content\"]).strip()",
          "",
          "[Removed Lines]",
          "1137:                                 content = f'{content}<code_interpreter type=\"code\" lang=\"{lang}\">\\n{block[\"content\"]}\\n</code_interpreter>\\n```output\\n{output}\\n```\\n'",
          "1139:                                 content = f'{content}<details type=\"code_interpreter\" done=\"true\" output=\"{output}\">\\n<summary>Analyzed</summary>\\n```{lang}\\n{block[\"content\"]}\\n```\\n</details>\\n'",
          "1142:                                 content = f'{content}<code_interpreter type=\"code\" lang=\"{lang}\">\\n{block[\"content\"]}\\n</code_interpreter>\\n'",
          "1144:                                 content = f'{content}<details type=\"code_interpreter\" done=\"false\">\\n<summary>Analyzing...</summary>\\n```{lang}\\n{block[\"content\"]}\\n```\\n</details>\\n'",
          "",
          "[Added Lines]",
          "1137:                                 content = f'{content}\\n<code_interpreter type=\"code\" lang=\"{lang}\">\\n{block[\"content\"]}\\n</code_interpreter>\\n```output\\n{output}\\n```\\n'",
          "1139:                                 content = f'{content}\\n<details type=\"code_interpreter\" done=\"true\" output=\"{output}\">\\n<summary>Analyzed</summary>\\n```{lang}\\n{block[\"content\"]}\\n```\\n</details>\\n'",
          "1142:                                 content = f'{content}\\n<code_interpreter type=\"code\" lang=\"{lang}\">\\n{block[\"content\"]}\\n</code_interpreter>\\n'",
          "1144:                                 content = f'{content}\\n<details type=\"code_interpreter\" done=\"false\">\\n<summary>Analyzing...</summary>\\n```{lang}\\n{block[\"content\"]}\\n```\\n</details>\\n'",
          "",
          "---------------"
        ],
        "scripts/prepare-pyodide.js||scripts/prepare-pyodide.js": [
          "File: scripts/prepare-pyodide.js -> scripts/prepare-pyodide.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  'scikit-learn',",
          "10:  'scipy',",
          "11:  'regex',",
          "12:  'seaborn'",
          "13: ];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  'sympy',",
          "13:  'tiktoken',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "656a887db677eed447064c784cfcc1b4c97453b2",
      "candidate_info": {
        "commit_hash": "656a887db677eed447064c784cfcc1b4c97453b2",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/656a887db677eed447064c784cfcc1b4c97453b2",
        "files": [
          "src/lib/components/chat/Chat.svelte",
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte",
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "839:   if (res !== null && res.messages) {",
          "841:    for (const message of res.messages) {",
          "843:      history.messages[message.id] = {",
          "844:       ...history.messages[message.id],",
          "845:       ...(history.messages[message.id].content !== message.content",
          "",
          "[Removed Lines]",
          "842:     if (message && message.id) {  // Add null check for message and message.id",
          "",
          "[Added Lines]",
          "842:     if (message?.id) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1350:     history.currentId = responseMessageId;",
          "1354:      history.messages[parentId].childrenIds = [",
          "1355:       ...history.messages[parentId].childrenIds,",
          "1356:       responseMessageId",
          "",
          "[Removed Lines]",
          "1353:     if (parentId !== null && history.messages[parentId]) { // Add null check before accessing childrenIds",
          "",
          "[Added Lines]",
          "1354:     if (parentId !== null && history.messages[parentId]) {",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte": [
          "File: src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte -> src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  const { saveAs } = fileSaver;",
          "9:  import { marked, type Token } from 'marked';",
          "12:  import { WEBUI_BASE_URL } from '$lib/constants';",
          "",
          "[Removed Lines]",
          "10:  import { revertSanitizedResponseContent, unescapeHtml } from '$lib/utils';",
          "",
          "[Added Lines]",
          "10:  import { unescapeHtml } from '$lib/utils';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52010accc90e0afb23771d89910bf00164aed2b1",
      "candidate_info": {
        "commit_hash": "52010accc90e0afb23771d89910bf00164aed2b1",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/52010accc90e0afb23771d89910bf00164aed2b1",
        "files": [
          "backend/open_webui/config.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/config.py||backend/open_webui/config.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/config.py||backend/open_webui/config.py": [
          "File: backend/open_webui/config.py -> backend/open_webui/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1101: - Use emojis that enhance understanding of the topic, but avoid quotation marks or special formatting.",
          "1102: - Write the title in the chat's primary language; default to English if multilingual.",
          "1103: - Prioritize accuracy over excessive creativity; keep it clear and simple.",
          "1113: ### Output:",
          "1114: JSON format: { \"title\": \"your concise title here\" }",
          "1116: ### Chat History:",
          "1117: <chat_history>",
          "1118: {{MESSAGES:END:2}}",
          "1119: </chat_history>\"\"\"",
          "1122: TAGS_GENERATION_PROMPT_TEMPLATE = PersistentConfig(",
          "1123:     \"TAGS_GENERATION_PROMPT_TEMPLATE\",",
          "1124:     \"task.tags.prompt_template\",",
          "",
          "[Removed Lines]",
          "1105: ### Examples:",
          "1106: - \ud83d\udcc9 Stock Market Trends",
          "1107: - \ud83c\udf6a Perfect Chocolate Chip Recipe",
          "1108: - Evolution of Music Streaming",
          "1109: - Remote Work Productivity Tips",
          "1110: - Artificial Intelligence in Healthcare",
          "1111: - \ud83c\udfae Video Game Development Insights",
          "",
          "[Added Lines]",
          "1106: ### Examples:",
          "1107: - { \"title\": \"\ud83d\udcc9 Stock Market Trends\" },",
          "1108: - { \"title\": \"\ud83c\udf6a Perfect Chocolate Chip Recipe\" },",
          "1109: - { \"title\": \"Evolution of Music Streaming\" },",
          "1110: - { \"title\": \"Remote Work Productivity Tips\" },",
          "1111: - { \"title\": \"Artificial Intelligence in Healthcare\" },",
          "1112: - { \"title\": \"\ud83c\udfae Video Game Development Insights\" }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bdef1001ac0ff4003dc7e1fdfce4ccf4b16a80ab",
      "candidate_info": {
        "commit_hash": "bdef1001ac0ff4003dc7e1fdfce4ccf4b16a80ab",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/bdef1001ac0ff4003dc7e1fdfce4ccf4b16a80ab",
        "files": [
          "backend/open_webui/models/memories.py",
          "backend/open_webui/routers/memories.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/models/memories.py||backend/open_webui/models/memories.py",
          "backend/open_webui/routers/memories.py||backend/open_webui/routers/memories.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/models/memories.py||backend/open_webui/models/memories.py": [
          "File: backend/open_webui/models/memories.py -> backend/open_webui/models/memories.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:             else:",
          "64:                 return None",
          "67:         self,",
          "68:         id: str,",
          "69:         content: str,",
          "70:     ) -> Optional[MemoryModel]:",
          "71:         with get_db() as db:",
          "72:             try:",
          "74:                     {\"content\": content, \"updated_at\": int(time.time())}",
          "75:                 )",
          "76:                 db.commit()",
          "",
          "[Removed Lines]",
          "66:     def update_memory_by_id(",
          "73:                 db.query(Memory).filter_by(id=id).update(",
          "",
          "[Added Lines]",
          "66:     def update_memory_by_id_and_user_id(",
          "69:         user_id: str,",
          "74:                 db.query(Memory).filter_by(id=id, user_id=user_id).update(",
          "",
          "---------------"
        ],
        "backend/open_webui/routers/memories.py||backend/open_webui/routers/memories.py": [
          "File: backend/open_webui/routers/memories.py -> backend/open_webui/routers/memories.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:     form_data: MemoryUpdateModel,",
          "154:     user=Depends(get_verified_user),",
          "155: ):",
          "157:     if memory is None:",
          "158:         raise HTTPException(status_code=404, detail=\"Memory not found\")",
          "",
          "[Removed Lines]",
          "156:     memory = Memories.update_memory_by_id(memory_id, form_data.content)",
          "",
          "[Added Lines]",
          "156:     memory = Memories.update_memory_by_id_and_user_id(",
          "157:         memory_id, user.id, form_data.content",
          "158:     )",
          "",
          "---------------"
        ]
      }
    }
  ]
}