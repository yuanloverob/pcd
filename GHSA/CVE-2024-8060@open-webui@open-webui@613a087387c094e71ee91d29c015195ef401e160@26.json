{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8380d3f5ae30fcd9bb3da235aab49c7cae913e67",
      "candidate_info": {
        "commit_hash": "8380d3f5ae30fcd9bb3da235aab49c7cae913e67",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/8380d3f5ae30fcd9bb3da235aab49c7cae913e67",
        "files": [
          "src/lib/apis/ollama/index.ts"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/apis/ollama/index.ts||src/lib/apis/ollama/index.ts"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/apis/ollama/index.ts||src/lib/apis/ollama/index.ts": [
          "File: src/lib/apis/ollama/index.ts -> src/lib/apis/ollama/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:  return [res, controller];",
          "361: };",
          "369:  let error = null;",
          "371:  const res = await fetch(",
          "",
          "[Removed Lines]",
          "363: export const createModel = async (",
          "364:  token: string,",
          "365:  tagName: string,",
          "366:  content: string,",
          "367:  urlIdx: string | null = null",
          "368: ) => {",
          "",
          "[Added Lines]",
          "363: export const createModel = async (token: string, payload: object, urlIdx: string | null = null) => {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377:     'Content-Type': 'application/json',",
          "378:     Authorization: `Bearer ${token}`",
          "379:    },",
          "384:   }",
          "385:  ).catch((err) => {",
          "386:   error = err;",
          "",
          "[Removed Lines]",
          "380:    body: JSON.stringify({",
          "381:     name: tagName,",
          "382:     modelfile: content",
          "383:    })",
          "",
          "[Added Lines]",
          "375:    body: JSON.stringify(payload)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad51b0166c66e65031d545b8e2dbf5161486ccb5",
      "candidate_info": {
        "commit_hash": "ad51b0166c66e65031d545b8e2dbf5161486ccb5",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/ad51b0166c66e65031d545b8e2dbf5161486ccb5",
        "files": [
          "backend/open_webui/main.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/main.py||backend/open_webui/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "434: ########################################",
          "436: if not ENABLE_OTEL:",
          "437:     from open_webui.utils.telemetry.setup import setup as setup_opentelemetry",
          "439:     setup_opentelemetry(app=app, db_engine=engine)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437: if ENABLE_OTEL:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60247fe18d2ba32718bd8f27a0f80fbe612039c5",
      "candidate_info": {
        "commit_hash": "60247fe18d2ba32718bd8f27a0f80fbe612039c5",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/60247fe18d2ba32718bd8f27a0f80fbe612039c5",
        "files": [
          "src/lib/components/channel/Channel.svelte",
          "src/lib/components/channel/Thread.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/channel/Channel.svelte||src/lib/components/channel/Channel.svelte",
          "src/lib/components/channel/Thread.svelte||src/lib/components/channel/Thread.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/channel/Channel.svelte||src/lib/components/channel/Channel.svelte": [
          "File: src/lib/components/channel/Channel.svelte -> src/lib/components/channel/Channel.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:  };",
          "69:  const channelEventHandler = async (event) => {",
          "72:   if (event.channel_id === id) {",
          "73:    const type = event?.data?.type ?? null;",
          "74:    const data = event?.data?.data ?? null;",
          "",
          "[Removed Lines]",
          "70:   console.log(event);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/components/channel/Thread.svelte||src/lib/components/channel/Thread.svelte": [
          "File: src/lib/components/channel/Thread.svelte -> src/lib/components/channel/Thread.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:  };",
          "56:  const channelEventHandler = async (event) => {",
          "59:   if (event.channel_id === channel.id) {",
          "60:    const type = event?.data?.type ?? null;",
          "61:    const data = event?.data?.data ?? null;",
          "",
          "[Removed Lines]",
          "57:   console.log(event);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "627ed7c9ce0966c14ae048a5e7403b8e2a9bae35",
      "candidate_info": {
        "commit_hash": "627ed7c9ce0966c14ae048a5e7403b8e2a9bae35",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/627ed7c9ce0966c14ae048a5e7403b8e2a9bae35",
        "files": [
          "src/lib/components/admin/Settings/CodeInterpreter.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/admin/Settings/CodeInterpreter.svelte||src/lib/components/admin/Settings/CodeInterpreter.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Settings/CodeInterpreter.svelte||src/lib/components/admin/Settings/CodeInterpreter.svelte": [
          "File: src/lib/components/admin/Settings/CodeInterpreter.svelte -> src/lib/components/admin/Settings/CodeInterpreter.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:     {#if config.CODE_INTERPRETER_ENGINE === 'jupyter'}",
          "74:      <div class=\"mt-1 flex flex-col gap-1.5 mb-1 w-full\">",
          "75:       <div class=\"text-xs font-medium\">",
          "77:       </div>",
          "79:       <div class=\"flex w-full\">",
          "",
          "[Removed Lines]",
          "76:        {$i18n.t('Jupyter Kernel Gateway URL')}",
          "",
          "[Added Lines]",
          "76:        {$i18n.t('Jupyter URL')}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:         <input",
          "82:          class=\"w-full text-sm py-0.5 placeholder:text-gray-300 dark:placeholder:text-gray-700 bg-transparent outline-none\"",
          "83:          type=\"text\"",
          "85:          bind:value={config.CODE_INTERPRETER_JUPYTER_URL}",
          "86:          autocomplete=\"off\"",
          "87:         />",
          "",
          "[Removed Lines]",
          "84:          placeholder={$i18n.t('Enter Jupyter Kernel Gateway URL')}",
          "",
          "[Added Lines]",
          "84:          placeholder={$i18n.t('Enter Jupyter URL')}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:      <div class=\"mt-1 flex gap-2 mb-1 w-full items-center justify-between\">",
          "93:       <div class=\"text-xs font-medium\">",
          "95:       </div>",
          "97:       <div>",
          "",
          "[Removed Lines]",
          "94:        {$i18n.t('Jupyter Kernel Gateway Auth')}",
          "",
          "[Added Lines]",
          "94:        {$i18n.t('Jupyter Auth')}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:         {#if config.CODE_INTERPRETER_JUPYTER_AUTH === 'password'}",
          "114:          <SensitiveInput",
          "115:           type=\"text\"",
          "117:           bind:value={config.CODE_INTERPRETER_JUPYTER_AUTH_PASSWORD}",
          "118:           autocomplete=\"off\"",
          "119:          />",
          "120:         {:else}",
          "121:          <SensitiveInput",
          "122:           type=\"text\"",
          "124:           bind:value={config.CODE_INTERPRETER_JUPYTER_AUTH_TOKEN}",
          "125:           autocomplete=\"off\"",
          "126:          />",
          "",
          "[Removed Lines]",
          "116:           placeholder={$i18n.t('Enter Jupyter Kernel Gateway Password')}",
          "123:           placeholder={$i18n.t('Enter Jupyter Kernel Gateway Token')}",
          "",
          "[Added Lines]",
          "116:           placeholder={$i18n.t('Enter Jupyter Password')}",
          "123:           placeholder={$i18n.t('Enter Jupyter Token')}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f527f31d2bc18342fb620e93b03db9005112ffa0",
      "candidate_info": {
        "commit_hash": "f527f31d2bc18342fb620e93b03db9005112ffa0",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/f527f31d2bc18342fb620e93b03db9005112ffa0",
        "files": [
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1440:      const chatEventEmitter = await getChatEventEmitter(model.id, _chatId);",
          "1442:      scrollToBottom();",
          "1445:      if (chatEventEmitter) clearInterval(chatEventEmitter);",
          "1446:     } else {",
          "",
          "[Removed Lines]",
          "1443:      await sendPromptSocket(model, responseMessageId, _chatId);",
          "",
          "[Added Lines]",
          "1443:      await sendPromptSocket(history, model, responseMessageId, _chatId);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1453:   chats.set(await getChatList(localStorage.token, $currentChatPage));",
          "1454:  };",
          "1457:   const responseMessage = history.messages[responseMessageId];",
          "1458:   const userMessage = history.messages[responseMessage.parentId];",
          "",
          "[Removed Lines]",
          "1456:  const sendPromptSocket = async (model, responseMessageId, _chatId) => {",
          "",
          "[Added Lines]",
          "1456:  const sendPromptSocket = async (history, model, responseMessageId, _chatId) => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1738:     .at(0);",
          "1740:    if (model) {",
          "1742:    }",
          "1743:   }",
          "1744:  };",
          "",
          "[Removed Lines]",
          "1741:     await sendPromptSocket(model, responseMessage.id, _chatId);",
          "",
          "[Added Lines]",
          "1741:     await sendPromptSocket(history, model, responseMessage.id, _chatId);",
          "",
          "---------------"
        ]
      }
    }
  ]
}