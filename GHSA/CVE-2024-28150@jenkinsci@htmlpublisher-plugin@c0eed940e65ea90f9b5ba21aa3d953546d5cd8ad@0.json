{
  "cve_id": "CVE-2024-28150",
  "cve_desc": "Jenkins HTML Publisher Plugin 1.32 and earlier does not escape job names, report names, and index page titles shown as part of the report frame, resulting in a stored cross-site scripting (XSS) vulnerability exploitable by attackers with Item/Configure permission.",
  "repo": "jenkinsci/htmlpublisher-plugin",
  "patch_hash": "c0eed940e65ea90f9b5ba21aa3d953546d5cd8ad",
  "patch_info": {
    "commit_hash": "c0eed940e65ea90f9b5ba21aa3d953546d5cd8ad",
    "repo": "jenkinsci/htmlpublisher-plugin",
    "commit_url": "https://github.com/jenkinsci/htmlpublisher-plugin/commit/c0eed940e65ea90f9b5ba21aa3d953546d5cd8ad",
    "files": [
      "src/main/java/htmlpublisher/HtmlPublisher.java",
      "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy",
      "src/test/java/htmlpublisher/HtmlFileNameTest.java",
      "src/test/java/htmlpublisher/Security3302Test.java",
      "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/build.xml",
      "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/changelog.xml",
      "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
      "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/test.txt",
      "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/log",
      "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/legacyIds",
      "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/permalinks",
      "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/config.xml",
      "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/nextBuildNumber"
    ],
    "message": "SECURITY-3302",
    "before_after_code_files": [
      "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
      "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy||src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy",
      "src/test/java/htmlpublisher/HtmlFileNameTest.java||src/test/java/htmlpublisher/HtmlFileNameTest.java",
      "src/test/java/htmlpublisher/Security3302Test.java||src/test/java/htmlpublisher/Security3302Test.java",
      "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html"
    ]
  },
  "patch_diff": {
    "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java": [
      "File: src/main/java/htmlpublisher/HtmlPublisher.java -> src/main/java/htmlpublisher/HtmlPublisher.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "82: import edu.umd.cs.findbugs.annotations.NonNull;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84: import static hudson.Functions.htmlAttributeEscape;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "130:         return Util.toHexString(sha1.digest());",
      "131:     }",
      "134:             java.io.IOException {",
      "135:         return readFile(filePath, this.getClass());",
      "136:     }",
      "",
      "[Removed Lines]",
      "133:     public List<String> readFile(String filePath) throws",
      "",
      "[Added Lines]",
      "135:     public List<String> readFile(String filePath) throws",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "318:                 } else {",
      "319:                     reportFile = report;",
      "320:                 }",
      "322:                 reportLines.add(tabItem);",
      "323:             }",
      "325:             String hudsonUrl = Jenkins.get().getRootUrl();",
      "326:             Job job = build.getParent();",
      "329:             if (hudsonUrl == null) {",
      "330:                 reportLines.add(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"hudson_link\\\").onclick = function() { history.go(-1); return false; };</script>\");",
      "",
      "[Removed Lines]",
      "321:                 String tabItem = \"<li id=\\\"\" + tabNo + \"\\\" class=\\\"unselected\\\" onclick=\\\"updateBody('\" + tabNo + \"');\\\" value=\\\"\" + report + \"\\\">\" + getTitle(reportFile, titles, j) + \"</li>\";",
      "327:             reportLines.add(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"hudson_link\\\").innerHTML=\\\"Back to \" + job.getName() + \"\\\";</script>\");",
      "",
      "[Added Lines]",
      "323:                 String tabItem = \"<li id=\\\"\" + tabNo + \"\\\" class=\\\"unselected\\\" onclick=\\\"updateBody('\" + tabNo + \"');\\\" value=\\\"\" + htmlAttributeEscape(report) + \"\\\">\" + htmlAttributeEscape(getTitle(reportFile, titles, j)) + \"</li>\";",
      "329:             reportLines.add(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"hudson_link\\\").innerHTML=\\\"Back to \" + htmlAttributeEscape(job.getName()) + \"\\\";</script>\");",
      "",
      "---------------"
    ],
    "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy||src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy": [
      "File: src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy -> src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: import htmlpublisher.HtmlPublisher",
      "4: import htmlpublisher.HtmlPublisherTarget",
      "5: import hudson.Util",
      "7: import java.security.MessageDigest",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: import hudson.model.Descriptor",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "58:     def legacyFile = new File(my.dir(), \"htmlpublisher-wrapper.html\")",
      "60:     raw(legacyFile.text)",
      "61: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "61:     def scriptPattern = legacyFile.text =~ /(<script type=\"text\\/javascript\">document.getElementById\\(\"hudson_link\"\\).innerHTML=\"Back to )(.*[<>\"\\\\].*)(\";<\\/script>)/",
      "63:     if (scriptPattern.find()) {",
      "64:         throw new Descriptor.FormException(\"Can't use illegal character in the Job Name\", \"JobName\")",
      "65:     }",
      "67:     def tabPattern = legacyFile.text =~ /(<li id=\"tab\\d+\" class=\"unselected\" onclick=\"updateBody\\('tab\\d+'\\);\" value=\")(.*[<>\"\\\\].*)(\">)(.*[<>\"\\\\].*)(<\\/li>)/",
      "69:     if (tabPattern.find()) {",
      "70:         throw new Descriptor.FormException(\"Can't use illegal character in the Report Name\", \"ReportName\")",
      "71:     }",
      "73:     def valuePattern = legacyFile.text =~ /(<li id=\"tab\\d+\" class=\"unselected\" onclick=\"updateBody\\('tab\\d+'\\);\" value=\")([^<]+)(\">)(.*[<>\"\\\\].*)(<\\/li>)/",
      "75:     if (valuePattern.find()) {",
      "76:         throw new Descriptor.FormException(\"Can't use illegal character in the Report Name\", \"ReportName\")",
      "77:     }",
      "79:     def titlePattern = legacyFile.text =~ /(<li id=\"tab\\d+\" class=\"unselected\" onclick=\"updateBody\\('tab\\d+'\\);\" value=\")(.*[<>\"\\\\].*)(\">)([^<]+)(<\\/li>)/",
      "81:     if (titlePattern.find()) {",
      "82:         throw new Descriptor.FormException(\"Can't use illegal character in the Report Name\", \"ReportName\")",
      "83:     }",
      "",
      "---------------"
    ],
    "src/test/java/htmlpublisher/HtmlFileNameTest.java||src/test/java/htmlpublisher/HtmlFileNameTest.java": [
      "File: src/test/java/htmlpublisher/HtmlFileNameTest.java -> src/test/java/htmlpublisher/HtmlFileNameTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "25:         FreeStyleProject job = j.createFreeStyleProject();",
      "28:         job.getPublishersList().add(new HtmlPublisher(Arrays.asList(",
      "29:             new HtmlPublisherTarget(\"report-name\", \"\", \"subdir/*.html\", true, true, false))));",
      "30:         job.save();",
      "",
      "[Removed Lines]",
      "27:         job.getBuildersList().add(new CreateFileBuilder(\"subdir/#$&+,;= @.html\", content));",
      "",
      "[Added Lines]",
      "27:         job.getBuildersList().add(new CreateFileBuilder(\"subdir/#$+,;= @.html\", content));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "34:         JenkinsRule.WebClient client = j.createWebClient();",
      "35:         assertEquals(content,",
      "39:         HtmlPage page = client.getPage(job, \"report-name\");",
      "40:         HtmlInlineFrame iframe = (HtmlInlineFrame) page.getElementById(\"myframe\");",
      "43:         HtmlPage pageInIframe = (HtmlPage) iframe.getEnclosedPage();",
      "44:         assertEquals(\"Hello world!\", pageInIframe.getBody().asNormalizedText());",
      "",
      "[Removed Lines]",
      "36:             client.getPage(job, \"report-name/subdir/%23%24%26%2B%2C%3B%3D%20%40.html\").getWebResponse().getContentAsString());",
      "41:         assertEquals(\"subdir/%23%24%26%2B%2C%3B%3D%20%40.html\", iframe.getAttribute(\"src\"));",
      "",
      "[Added Lines]",
      "36:             client.getPage(job, \"report-name/subdir/%23%24%2B%2C%3B%3D%20%40.html\").getWebResponse().getContentAsString());",
      "41:         assertEquals(\"subdir/%23%24%2B%2C%3B%3D%20%40.html\", iframe.getAttribute(\"src\"));",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "51:         FreeStyleProject job = j.createFreeStyleProject();",
      "54:         job.getPublishersList().add(new HtmlPublisher(Arrays.asList(",
      "55:             new HtmlPublisherTarget(\"report-name\", \"\", \"subdir/subdir2/*.html\", true, true, false))));",
      "56:         job.save();",
      "",
      "[Removed Lines]",
      "53:         job.getBuildersList().add(new CreateFileBuilder(\"subdir/subdir2/#$&+,;= @.html\", content));",
      "",
      "[Added Lines]",
      "53:         job.getBuildersList().add(new CreateFileBuilder(\"subdir/subdir2/#$+,;= @.html\", content));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "60:         JenkinsRule.WebClient client = j.createWebClient();",
      "61:         assertEquals(content,",
      "65:         HtmlPage page = client.getPage(job, \"report-name\");",
      "66:         HtmlInlineFrame iframe = (HtmlInlineFrame) page.getElementById(\"myframe\");",
      "69:         HtmlPage pageInIframe = (HtmlPage) iframe.getEnclosedPage();",
      "70:         assertEquals(\"Hello world!\", pageInIframe.getBody().asNormalizedText());",
      "",
      "[Removed Lines]",
      "62:             client.getPage(job, \"report-name/subdir/subdir2/%23%24%26%2B%2C%3B%3D%20%40.html\").getWebResponse().getContentAsString());",
      "67:         assertEquals(\"subdir/subdir2/%23%24%26%2B%2C%3B%3D%20%40.html\", iframe.getAttribute(\"src\"));",
      "",
      "[Added Lines]",
      "62:             client.getPage(job, \"report-name/subdir/subdir2/%23%24%2B%2C%3B%3D%20%40.html\").getWebResponse().getContentAsString());",
      "67:         assertEquals(\"subdir/subdir2/%23%24%2B%2C%3B%3D%20%40.html\", iframe.getAttribute(\"src\"));",
      "",
      "---------------"
    ],
    "src/test/java/htmlpublisher/Security3302Test.java||src/test/java/htmlpublisher/Security3302Test.java": [
      "File: src/test/java/htmlpublisher/Security3302Test.java -> src/test/java/htmlpublisher/Security3302Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package htmlpublisher;",
      "3: import hudson.model.FreeStyleProject;",
      "4: import hudson.tasks.Shell;",
      "5: import org.htmlunit.AlertHandler;",
      "6: import org.htmlunit.FailingHttpStatusCodeException;",
      "7: import org.htmlunit.Page;",
      "8: import org.junit.Rule;",
      "9: import org.junit.Test;",
      "10: import org.jvnet.hudson.test.Issue;",
      "11: import org.jvnet.hudson.test.JenkinsRule;",
      "12: import org.jvnet.hudson.test.recipes.LocalData;",
      "14: import java.util.ArrayList;",
      "15: import java.util.Collections;",
      "16: import java.util.List;",
      "18: import static hudson.Functions.isWindows;",
      "19: import static org.hamcrest.MatcherAssert.assertThat;",
      "20: import static org.hamcrest.collection.IsEmptyCollection.empty;",
      "21: import static org.hamcrest.core.IsNot.not;",
      "22: import static org.junit.Assert.*;",
      "23: import static org.junit.Assume.assumeFalse;",
      "25: public class Security3302Test {",
      "27:     @Rule",
      "28:     public JenkinsRule j = new JenkinsRule();",
      "30:     @Test",
      "31:     public void security3302sanitizeJobNameTest() throws Exception {",
      "34:         assumeFalse(isWindows());",
      "36:         FreeStyleProject job = j.jenkins.createProject(FreeStyleProject.class, \"\\\"+alert(1)+\\\"\");",
      "37:         job.getBuildersList().add(new Shell(\"date > index.html\"));",
      "39:         HtmlPublisherTarget target = new HtmlPublisherTarget(",
      "40:                 \"HTML Report\",",
      "41:                 \"\",",
      "42:                 \"index.html\",",
      "43:                 true,",
      "44:                 false,",
      "45:                 false",
      "46:         );",
      "48:         target.setUseWrapperFileDirectly(true);",
      "49:         target.setEscapeUnderscores(true);",
      "50:         target.setReportTitles(\"\");",
      "51:         target.setIncludes(\"**/*\");",
      "53:         List<HtmlPublisherTarget> reportTargets = new ArrayList<>();",
      "54:         reportTargets.add(target);",
      "56:         job.getPublishersList().add(new HtmlPublisher(reportTargets));",
      "58:         j.buildAndAssertSuccess(job);",
      "60:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
      "61:         assertNotNull(action);",
      "63:         assertEquals(\"HTML Report\", action.getHTMLTarget().getReportName());",
      "64:         assertEquals(\"HTML_20Report\", action.getUrlName());",
      "66:         JenkinsRule.WebClient client = j.createWebClient();",
      "69:         Alerter alerter = new Alerter();",
      "70:         client.setAlertHandler(alerter);",
      "71:         client.goTo(\"job/\\\"+alert(1)+\\\"/HTML_20Report/\");",
      "74:         client.waitForBackgroundJavaScript(2000);",
      "75:         assertTrue(alerter.messages.isEmpty());",
      "77:     }",
      "79:     @Test",
      "80:     @LocalData",
      "81:     @Issue(\"security-3302\")",
      "82:     public void oldReportJobNameTest() throws Exception {",
      "84:         assumeFalse(isWindows());",
      "85:         List<FreeStyleProject> items = j.jenkins.getItems(FreeStyleProject.class);",
      "86:         assertThat(items, not(empty()));",
      "87:         FreeStyleProject job = items.get(0);",
      "88:         assertNotNull(job);",
      "89:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
      "90:         assertNotNull(action);",
      "92:         assertEquals(\"HTML Report\", action.getHTMLTarget().getReportName());",
      "93:         assertEquals(\"HTML_20Report\", action.getUrlName());",
      "95:         JenkinsRule.WebClient client = j.createWebClient();",
      "98:         Alerter alerter = new Alerter();",
      "99:         client.setAlertHandler(alerter);",
      "101:         try {",
      "102:             client.goTo(\"job/testJob/1/HTML_20Report/\");",
      "104:         } catch (FailingHttpStatusCodeException e) {",
      "106:         } finally {",
      "108:             client.waitForBackgroundJavaScript(2000);",
      "109:             assertTrue(alerter.messages.isEmpty());",
      "110:         }",
      "111:     }",
      "113:     @Test",
      "114:     public void security3302sanitizeOptionalNameTest() throws Exception {",
      "117:         assumeFalse(isWindows());",
      "119:         FreeStyleProject job = j.jenkins.createProject(FreeStyleProject.class, \"testJob\");",
      "120:         job.getBuildersList().add(new Shell(\"echo \\\"Test\\\" > test.txt\"));",
      "122:         HtmlPublisherTarget target = new HtmlPublisherTarget(",
      "123:                 \"HTML Report\",",
      "124:                 \"\",",
      "125:                 \"test.txt\",",
      "126:                 true,",
      "127:                 false,",
      "128:                 false",
      "129:         );",
      "131:         target.setUseWrapperFileDirectly(true);",
      "132:         target.setEscapeUnderscores(true);",
      "133:         target.setReportTitles(\"<img src onerror=alert(1)>\");",
      "134:         target.setIncludes(\"**/*\");",
      "136:         List<HtmlPublisherTarget> reportTargets = new ArrayList<>();",
      "137:         reportTargets.add(target);",
      "139:         job.getPublishersList().add(new HtmlPublisher(reportTargets));",
      "141:         j.buildAndAssertSuccess(job);",
      "143:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
      "144:         assertNotNull(action);",
      "146:         assertEquals(\"HTML Report\", action.getHTMLTarget().getReportName());",
      "147:         assertEquals(\"HTML_20Report\", action.getUrlName());",
      "149:         JenkinsRule.WebClient client = j.createWebClient();",
      "152:         Alerter alerter = new Alerter();",
      "153:         client.setAlertHandler(alerter);",
      "154:         client.goTo(\"job/testJob/HTML_20Report/\");",
      "157:         client.waitForBackgroundJavaScript(2000);",
      "158:         assertTrue(alerter.messages.isEmpty());",
      "160:     }",
      "162:     @Test",
      "163:     public void security3302sanitizeExistingReportTitleTest() throws Exception {",
      "166:         assumeFalse(isWindows());",
      "168:         FreeStyleProject job = j.jenkins.createProject(FreeStyleProject.class, \"testJob\");",
      "169:         job.getBuildersList().add(new Shell(\"echo \\\"Test\\\" > '\\\"><img src onerror=alert(1)>'\"));",
      "171:         HtmlPublisherTarget target = new HtmlPublisherTarget(",
      "172:                 \"HTML Report\",",
      "173:                 \"\",",
      "174:                 \"\",",
      "175:                 true,",
      "176:                 false,",
      "177:                 false",
      "178:         );",
      "180:         target.setUseWrapperFileDirectly(true);",
      "181:         target.setEscapeUnderscores(true);",
      "182:         target.setReportTitles(\"\\\"><img src onerror=alert(1)>\");",
      "183:         target.setIncludes(\"**/*\");",
      "185:         List<HtmlPublisherTarget> reportTargets = new ArrayList<>();",
      "186:         reportTargets.add(target);",
      "188:         job.getPublishersList().add(new HtmlPublisher(reportTargets));",
      "190:         j.buildAndAssertSuccess(job);",
      "192:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
      "193:         assertNotNull(action);",
      "195:         assertEquals(\"HTML Report\", action.getHTMLTarget().getReportName());",
      "196:         assertEquals(\"HTML_20Report\", action.getUrlName());",
      "198:         JenkinsRule.WebClient client = j.createWebClient();",
      "200:         Alerter alerter = new Alerter();",
      "201:         client.setAlertHandler(alerter);",
      "202:         client.goTo(\"job/testJob/HTML_20Report/\");",
      "205:         client.waitForBackgroundJavaScript(2000);",
      "206:         assertTrue(alerter.messages.isEmpty());",
      "208:     }",
      "211:     static class Alerter implements AlertHandler {",
      "212:         List<String> messages = Collections.synchronizedList(new ArrayList<>());",
      "213:         @Override",
      "214:         public void handleAlert(final Page page, final String message) {",
      "215:             messages.add(message);",
      "216:         }",
      "217:     }",
      "218: }",
      "",
      "---------------"
    ],
    "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html": [
      "File: src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html -> src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"",
      "2: \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
      "4: <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">",
      "5: <head>",
      "6: <meta http-equiv=\"Content-Type\" content=\"text/html\" />",
      "7: <!-- CSS Tabs is licensed under Creative Commons Attribution 3.0 - http://creativecommons.org/licenses/by/3.0/ -->",
      "8: <style type=\"text/css\">",
      "10: body {",
      "11: font: 100% verdana, arial, sans-serif;",
      "12: background-color: #fff;",
      "13: }",
      "22: list-style-type: none;",
      "23: padding: 3px 10px 0px 10px;",
      "24: }",
      "27: display: inline-block;",
      "28: }",
      "33: }",
      "37: padding: 3px 4px;",
      "39: border-bottom: 1px solid #cfc;",
      "43: text-decoration: none;",
      "44: cursor: pointer;",
      "45: }",
      "49: }",
      "54: html, body, div, iframe { margin:0; padding:0; }",
      "55: iframe { display:block; width:100%; border:none; }",
      "57: h1",
      "58: {",
      "59:     display: inline;",
      "60:     float: left;",
      "61:     font-size: small;",
      "62:     margin: 0;",
      "63:     padding: 0 10px;",
      "64: }",
      "66: h2",
      "67: {",
      "68:     display: inline;",
      "69:     float: right;",
      "70:     font-size: small;",
      "71:     margin: 0;",
      "72:     padding: 0 10px;",
      "73: }",
      "75: </style>",
      "77: <script type=\"text/javascript\">",
      "78: function updateBody(tabId, page) {",
      "79:     document.getElementById(selectedTab).setAttribute(\"class\", \"unselected\");",
      "80:     tab = document.getElementById(tabId)",
      "81:     tab.setAttribute(\"class\", \"selected\");",
      "82:     selectedTab = tabId;",
      "83:     iframe = document.getElementById(\"myframe\");",
      "84:     iframe.src = encodeURIComponent(tab.getAttribute(\"value\")).replace(/%2F/g, '/');",
      "85: }",
      "86: function init(tabId){",
      "87:  updateBody(tabId);",
      "88:  updateViewport();",
      "90:  window.onresize = updateViewport;",
      "91: }",
      "93: function updateViewport(){",
      "94:   var viewportheight;",
      "98:   if (typeof window.innerWidth != 'undefined')",
      "99:   {",
      "100:        viewportheight = window.innerHeight",
      "101:   }",
      "105:   else if (typeof document.documentElement != 'undefined'",
      "106:       && typeof document.documentElement.clientWidth !=",
      "107:       'undefined' && document.documentElement.clientWidth != 0)",
      "108:   {",
      "109:         viewportheight = document.documentElement.clientHeight",
      "110:   }",
      "112:   else",
      "113:   {",
      "114:         viewportheight = document.getElementsByTagName('body')[0].clientHeight",
      "115:   }",
      "117:  iframe = document.getElementById(\"myframe\");",
      "118:  iframe.style.height = (viewportheight-30)+'px';",
      "119: }",
      "120: var selectedTab = \"tab1\"",
      "121: </script>",
      "123: </head>",
      "125: <body onload=\"init('tab1');\">",
      "127: <h1><a id=\"hudson_link\" href=\"#\"></a></h1>",
      "128: <h2><a id=\"zip_link\" href=\"#\">Zip</a></h2>",
      "130: <ul id=\"tabnav\">",
      "131: <script type=\"text/javascript\">document.getElementById(\"hudson_link\").innerHTML=\"Back to \"+alert(1)+\"\";</script>",
      "132: <script type=\"text/javascript\">document.getElementById(\"hudson_link\").onclick = function() { history.go(-1); return false; };</script>",
      "133: <script type=\"text/javascript\">document.getElementById(\"zip_link\").href=\"*zip*/HTML_20Report.zip\";</script>",
      "134: </ul>",
      "135: <div>",
      "136: <iframe id=\"myframe\" height=\"100%\" width=\"100%\" frameborder=\"0\"></iframe>",
      "137: </div>",
      "139: </body>",
      "140: </html>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c599eceb827334daea8ffba9c756eddb74e6d885",
      "candidate_info": {
        "commit_hash": "c599eceb827334daea8ffba9c756eddb74e6d885",
        "repo": "jenkinsci/htmlpublisher-plugin",
        "commit_url": "https://github.com/jenkinsci/htmlpublisher-plugin/commit/c599eceb827334daea8ffba9c756eddb74e6d885",
        "files": [
          "src/main/java/htmlpublisher/HtmlPublisher.java",
          "src/main/resources/htmlpublisher/HtmlPublisher/header.html",
          "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy",
          "src/main/webapp/js/htmlpublisher.js"
        ],
        "message": "[JENKINS-74015][JENKINS-74746] Improve CSP compatibility (#312)\n\n* [JENKINS-74015][JENKINS-74746] Improve CSP compatibility\n* Address review feedback\n* Do not use shaded `commons-lang`",
        "before_after_code_files": [
          "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
          "src/main/resources/htmlpublisher/HtmlPublisher/header.html||src/main/resources/htmlpublisher/HtmlPublisher/header.html",
          "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy||src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy",
          "src/main/webapp/js/htmlpublisher.js||src/main/webapp/js/htmlpublisher.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
            "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy||src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy"
          ],
          "candidate": [
            "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
            "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy||src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java": [
          "File: src/main/java/htmlpublisher/HtmlPublisher.java -> src/main/java/htmlpublisher/HtmlPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
          "49: import hudson.util.DirScanner;",
          "50: import jenkins.util.SystemProperties;",
          "51: import org.kohsuke.accmod.Restricted;",
          "52: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "53: import org.kohsuke.accmod.restrictions.suppressions.SuppressRestrictedWarnings;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: import org.apache.commons.lang.StringUtils;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: import hudson.FilePath;",
          "61: import hudson.Launcher;",
          "62: import hudson.Util;",
          "63: import hudson.matrix.MatrixConfiguration;",
          "64: import hudson.matrix.MatrixProject;",
          "65: import hudson.model.AbstractBuild;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: import hudson.Functions;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "237:         for (int i=0; i < reportTargets.size(); i++) {",
          "239:             List<String> reportLines = new ArrayList<>(headerLines);",
          "240:             HtmlPublisherTarget reportTarget = reportTargets.get(i);",
          "241:             boolean keepAll = reportTarget.getKeepAll();",
          "242:             boolean allowMissing = reportTarget.getAllowMissing();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "242:             reportLines.add(\"<script type=\\\"text/javascript\\\" src=\\\"\" + getStaticResourcesUrl() + \"/plugin/htmlpublisher/js/htmlpublisher.js\\\"></script>\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "338:                 } else {",
          "339:                     reportFile = report;",
          "340:                 }",
          "342:                 reportLines.add(tabItem);",
          "343:             }",
          "345:             String hudsonUrl = Jenkins.get().getRootUrl();",
          "346:             Job job = build.getParent();",
          "359:             reportLines.addAll(footerLines);",
          "",
          "[Removed Lines]",
          "341:                 String tabItem = \"<li id=\\\"\" + tabNo + \"\\\" class=\\\"unselected\\\" onclick=\\\"updateBody('\" + tabNo + \"');\\\" value=\\\"\" + htmlAttributeEscape(report) + \"\\\">\" + htmlAttributeEscape(getTitle(reportFile, titles, j)) + \"</li>\";",
          "347:             reportLines.add(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"hudson_link\\\").innerHTML=\\\"Back to \" + htmlAttributeEscape(job.getName()) + \"\\\";</script>\");",
          "349:             if (hudsonUrl == null) {",
          "350:                 reportLines.add(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"hudson_link\\\").onclick = function() { history.go(-1); return false; };</script>\");",
          "351:             } else {",
          "352:                 String jobUrl = hudsonUrl + job.getUrl();",
          "353:                 reportLines.add(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"hudson_link\\\").href=\\\"\" + jobUrl + \"\\\";</script>\");",
          "354:             }",
          "356:             reportLines.add(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"zip_link\\\").href=\\\"*zip*/\" + reportTarget.getSanitizedName() + \".zip\\\";</script>\");",
          "",
          "[Added Lines]",
          "344:                 String tabItem = \"<li id=\\\"\" + tabNo + \"\\\" class=\\\"unselected\\\" value=\\\"\" + htmlAttributeEscape(report) + \"\\\">\" + htmlAttributeEscape(getTitle(reportFile, titles, j)) + \"</li>\";",
          "350:             reportLines.add(\"<span class='links-data-holder' data-back-to-name='\" + job.getName() + \"' data-root-url='\" +",
          "351:                     hudsonUrl + \"' data-job-url='\" + job.getUrl() + \"' data-zip-link='\" + reportTarget.getSanitizedName() + \"'/>\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "398:         }",
          "399:     }",
          "401:     private static void adjustMatrixProject(AbstractProject<?, ?> project) {",
          "402:         MatrixProject mp = (MatrixProject) project;",
          "403:         if (mp.getActiveConfigurations() != null) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "395:     private static String getStaticResourcesUrl() {",
          "396:         String rootUrl = Jenkins.get().getRootUrl();",
          "397:         if (rootUrl == null) {",
          "398:             rootUrl = \"\";",
          "399:         }",
          "401:         return StringUtils.stripEnd(rootUrl, \"/\") + Functions.getResourcePath();",
          "402:     }",
          "",
          "---------------"
        ],
        "src/main/resources/htmlpublisher/HtmlPublisher/header.html||src/main/resources/htmlpublisher/HtmlPublisher/header.html": [
          "File: src/main/resources/htmlpublisher/HtmlPublisher/header.html -> src/main/resources/htmlpublisher/HtmlPublisher/header.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: }",
          "88: </style>",
          "106: </head>",
          "109: <nav>",
          "110: <h1><a id=\"hudson_link\" href=\"#\"></a></h1>",
          "111: <h2><a id=\"zip_link\" href=\"#\">Zip</a></h2>",
          "",
          "[Removed Lines]",
          "90: <script type=\"text/javascript\">",
          "91: function updateBody(tabId, page) {",
          "92:     document.getElementById(selectedTab).setAttribute(\"class\", \"unselected\");",
          "93:     tab = document.getElementById(tabId)",
          "94:     tab.setAttribute(\"class\", \"selected\");",
          "95:     selectedTab = tabId;",
          "96:     iframe = document.getElementById(\"myframe\");",
          "97:     iframe.src = encodeURIComponent(tab.getAttribute(\"value\")).replace(/%2F/g, '/');",
          "98: }",
          "99: function init(tabId){",
          "100:  updateBody(tabId);",
          "101: }",
          "103: var selectedTab = \"tab1\"",
          "104: </script>",
          "108: <body onload=\"init('tab1');\">",
          "",
          "[Added Lines]",
          "91: <body>",
          "",
          "---------------"
        ],
        "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy||src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy": [
          "File: src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy -> src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import htmlpublisher.HtmlPublisher",
          "4: import htmlpublisher.HtmlPublisherTarget",
          "5: import hudson.Util",
          "6: import hudson.model.Descriptor",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import hudson.Functions",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10: l = namespace(lib.LayoutTagLib)",
          "11: st = namespace(\"jelly:stapler\")",
          "13: def text = new File(my.dir(), my.getHTMLTarget().getWrapperName()).text",
          "15: def actual = Util.toHexString(MessageDigest.getInstance(\"SHA-1\").digest(text.getBytes(\"UTF-8\")))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: Functions.initPageVariables(context)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "26:     def footer = HtmlPublisher.class.getResourceAsStream(\"/htmlpublisher/HtmlPublisher/footer.html\").text",
          "28:     raw(header)",
          "30:     def legacyFile = new File(my.dir(), \"htmlpublisher-wrapper.html\")",
          "33:     def items = []",
          "34:     def itemsTitle = []",
          "",
          "[Removed Lines]",
          "31:     def matcher = legacyFile.text =~ /<li id=\"tab\\d+\" class=\"unselected\" onclick=\"updateBody\\('tab\\d+'\\);\" value=\"([^\"]+)\">([^<]+)<\\/li>/",
          "",
          "[Added Lines]",
          "32:     script(src: \"${resURL}/plugin/htmlpublisher/js/htmlpublisher.js\", type: \"text/javascript\")",
          "35:     def matcher = legacyFile.text =~ /<li id=\"tab\\d+\" class=\"unselected\"(?: onclick=\"updateBody\\('tab\\d+'\\);\")? value=\"([^\"]+)\">([^<]+)<\\/li>/",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "40:     def idx = 1",
          "41:     items.each { file ->",
          "43:         idx++",
          "44:     }",
          "51:     raw(footer)",
          "52: }",
          "",
          "[Removed Lines]",
          "42:         li(itemsTitle[idx - 1], id: \"tab${idx}\", class: \"unselected\", onclick: \"updateBody('tab${idx}')\", value: file.trim())",
          "47:     raw(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"hudson_link\\\").innerHTML=\\\"Back to ${my.backToName}\\\";</script>\")",
          "48:     raw(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"hudson_link\\\").href=\\\"${rootURL}/${my.backToUrl}\\\";</script>\")",
          "49:     raw(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"zip_link\\\").href=\\\"*zip*/${my.getHTMLTarget().sanitizedName}.zip\\\";</script>\")",
          "",
          "[Added Lines]",
          "46:         li(itemsTitle[idx - 1], id: \"tab${idx}\", class: \"unselected\", value: file.trim())",
          "50:     span(class: \"links-data-holder\",",
          "51:             \"data-back-to-name\": \"${my.backToName}\",",
          "52:             \"data-root-url\": \"${rootURL}\",",
          "53:             \"data-job-url\": \"${my.backToUrl}\",",
          "54:             \"data-zip-link\": \"${my.getHTMLTarget().sanitizedName}\")",
          "",
          "---------------"
        ],
        "src/main/webapp/js/htmlpublisher.js||src/main/webapp/js/htmlpublisher.js": [
          "File: src/main/webapp/js/htmlpublisher.js -> src/main/webapp/js/htmlpublisher.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: function updateBody(tabId) {",
          "2:   document.getElementById(selectedTab).setAttribute(\"class\", \"unselected\");",
          "3:   tab = document.getElementById(tabId)",
          "4:   tab.setAttribute(\"class\", \"selected\");",
          "5:   selectedTab = tabId;",
          "6:   iframe = document.getElementById(\"myframe\");",
          "7:   iframe.src = encodeURIComponent(tab.getAttribute(\"value\")).replace(/%2F/g, '/');",
          "8: }",
          "9: function init(tabId){",
          "10:   updateBody(tabId);",
          "11: }",
          "13: var selectedTab = \"tab1\";",
          "15: window.addEventListener(\"DOMContentLoaded\", () => {",
          "16:   init(\"tab1\");",
          "18:   const dataHolder = document.querySelector(\".links-data-holder\");",
          "19:   const { backToName, rootUrl, jobUrl, zipLink } = dataHolder.dataset;",
          "20:   const backButton = document.querySelector(\"#hudson_link\");",
          "21:   backButton.innerText = `Back to ${backToName}`;",
          "22:   backButton.href = `${rootUrl}/${jobUrl}`;",
          "24:   document.querySelector(\"#zip_link\").href = `*zip*/${zipLink}.zip`;",
          "26:   document.querySelectorAll(\"#tabnav li\").forEach((item) => {",
          "27:     item.addEventListener(\"click\", (event) => {",
          "28:       updateBody(event.target.id);",
          "29:     });",
          "30:   });",
          "31: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e792f5afcad02b0cb248623a7656e2f724df9fef",
      "candidate_info": {
        "commit_hash": "e792f5afcad02b0cb248623a7656e2f724df9fef",
        "repo": "jenkinsci/htmlpublisher-plugin",
        "commit_url": "https://github.com/jenkinsci/htmlpublisher-plugin/commit/e792f5afcad02b0cb248623a7656e2f724df9fef",
        "files": [
          "src/main/java/htmlpublisher/HtmlPublisher.java",
          "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy",
          "src/test/java/htmlpublisher/HtmlFileNameTest.java",
          "src/test/java/htmlpublisher/Security3302Test.java",
          "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/build.xml",
          "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/changelog.xml",
          "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
          "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/test.txt",
          "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/log",
          "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/legacyIds",
          "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/permalinks",
          "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/config.xml",
          "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/nextBuildNumber"
        ],
        "message": "SECURITY-3302",
        "before_after_code_files": [
          "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
          "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy||src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy",
          "src/test/java/htmlpublisher/HtmlFileNameTest.java||src/test/java/htmlpublisher/HtmlFileNameTest.java",
          "src/test/java/htmlpublisher/Security3302Test.java||src/test/java/htmlpublisher/Security3302Test.java",
          "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
            "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy||src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy",
            "src/test/java/htmlpublisher/HtmlFileNameTest.java||src/test/java/htmlpublisher/HtmlFileNameTest.java",
            "src/test/java/htmlpublisher/Security3302Test.java||src/test/java/htmlpublisher/Security3302Test.java",
            "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html"
          ],
          "candidate": [
            "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java",
            "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy||src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy",
            "src/test/java/htmlpublisher/HtmlFileNameTest.java||src/test/java/htmlpublisher/HtmlFileNameTest.java",
            "src/test/java/htmlpublisher/Security3302Test.java||src/test/java/htmlpublisher/Security3302Test.java",
            "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html"
          ]
        }
      },
      "candidate_diff": {
        "src/main/java/htmlpublisher/HtmlPublisher.java||src/main/java/htmlpublisher/HtmlPublisher.java": [
          "File: src/main/java/htmlpublisher/HtmlPublisher.java -> src/main/java/htmlpublisher/HtmlPublisher.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: import edu.umd.cs.findbugs.annotations.NonNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: import static hudson.Functions.htmlAttributeEscape;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:         return Util.toHexString(sha1.digest());",
          "131:     }",
          "134:             java.io.IOException {",
          "135:         return readFile(filePath, this.getClass());",
          "136:     }",
          "",
          "[Removed Lines]",
          "133:     public List<String> readFile(String filePath) throws",
          "",
          "[Added Lines]",
          "135:     public List<String> readFile(String filePath) throws",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:                 } else {",
          "319:                     reportFile = report;",
          "320:                 }",
          "322:                 reportLines.add(tabItem);",
          "323:             }",
          "325:             String hudsonUrl = Jenkins.get().getRootUrl();",
          "326:             Job job = build.getParent();",
          "329:             if (hudsonUrl == null) {",
          "330:                 reportLines.add(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"hudson_link\\\").onclick = function() { history.go(-1); return false; };</script>\");",
          "",
          "[Removed Lines]",
          "321:                 String tabItem = \"<li id=\\\"\" + tabNo + \"\\\" class=\\\"unselected\\\" onclick=\\\"updateBody('\" + tabNo + \"');\\\" value=\\\"\" + report + \"\\\">\" + getTitle(reportFile, titles, j) + \"</li>\";",
          "327:             reportLines.add(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"hudson_link\\\").innerHTML=\\\"Back to \" + job.getName() + \"\\\";</script>\");",
          "",
          "[Added Lines]",
          "323:                 String tabItem = \"<li id=\\\"\" + tabNo + \"\\\" class=\\\"unselected\\\" onclick=\\\"updateBody('\" + tabNo + \"');\\\" value=\\\"\" + htmlAttributeEscape(report) + \"\\\">\" + htmlAttributeEscape(getTitle(reportFile, titles, j)) + \"</li>\";",
          "329:             reportLines.add(\"<script type=\\\"text/javascript\\\">document.getElementById(\\\"hudson_link\\\").innerHTML=\\\"Back to \" + htmlAttributeEscape(job.getName()) + \"\\\";</script>\");",
          "",
          "---------------"
        ],
        "src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy||src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy": [
          "File: src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy -> src/main/resources/htmlpublisher/HtmlPublisherTarget/BaseHTMLAction/index.groovy",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import htmlpublisher.HtmlPublisher",
          "4: import htmlpublisher.HtmlPublisherTarget",
          "5: import hudson.Util",
          "7: import java.security.MessageDigest",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: import hudson.model.Descriptor",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:     def legacyFile = new File(my.dir(), \"htmlpublisher-wrapper.html\")",
          "60:     raw(legacyFile.text)",
          "61: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     def scriptPattern = legacyFile.text =~ /(<script type=\"text\\/javascript\">document.getElementById\\(\"hudson_link\"\\).innerHTML=\"Back to )(.*[<>\"\\\\].*)(\";<\\/script>)/",
          "63:     if (scriptPattern.find()) {",
          "64:         throw new Descriptor.FormException(\"Can't use illegal character in the Job Name\", \"JobName\")",
          "65:     }",
          "67:     def tabPattern = legacyFile.text =~ /(<li id=\"tab\\d+\" class=\"unselected\" onclick=\"updateBody\\('tab\\d+'\\);\" value=\")(.*[<>\"\\\\].*)(\">)(.*[<>\"\\\\].*)(<\\/li>)/",
          "69:     if (tabPattern.find()) {",
          "70:         throw new Descriptor.FormException(\"Can't use illegal character in the Report Name\", \"ReportName\")",
          "71:     }",
          "73:     def valuePattern = legacyFile.text =~ /(<li id=\"tab\\d+\" class=\"unselected\" onclick=\"updateBody\\('tab\\d+'\\);\" value=\")([^<]+)(\">)(.*[<>\"\\\\].*)(<\\/li>)/",
          "75:     if (valuePattern.find()) {",
          "76:         throw new Descriptor.FormException(\"Can't use illegal character in the Report Name\", \"ReportName\")",
          "77:     }",
          "79:     def titlePattern = legacyFile.text =~ /(<li id=\"tab\\d+\" class=\"unselected\" onclick=\"updateBody\\('tab\\d+'\\);\" value=\")(.*[<>\"\\\\].*)(\">)([^<]+)(<\\/li>)/",
          "81:     if (titlePattern.find()) {",
          "82:         throw new Descriptor.FormException(\"Can't use illegal character in the Report Name\", \"ReportName\")",
          "83:     }",
          "",
          "---------------"
        ],
        "src/test/java/htmlpublisher/HtmlFileNameTest.java||src/test/java/htmlpublisher/HtmlFileNameTest.java": [
          "File: src/test/java/htmlpublisher/HtmlFileNameTest.java -> src/test/java/htmlpublisher/HtmlFileNameTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:         FreeStyleProject job = j.createFreeStyleProject();",
          "28:         job.getPublishersList().add(new HtmlPublisher(Arrays.asList(",
          "29:             new HtmlPublisherTarget(\"report-name\", \"\", \"subdir/*.html\", true, true, false))));",
          "30:         job.save();",
          "",
          "[Removed Lines]",
          "27:         job.getBuildersList().add(new CreateFileBuilder(\"subdir/#$&+,;= @.html\", content));",
          "",
          "[Added Lines]",
          "27:         job.getBuildersList().add(new CreateFileBuilder(\"subdir/#$+,;= @.html\", content));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:         JenkinsRule.WebClient client = j.createWebClient();",
          "35:         assertEquals(content,",
          "39:         HtmlPage page = client.getPage(job, \"report-name\");",
          "40:         HtmlInlineFrame iframe = (HtmlInlineFrame) page.getElementById(\"myframe\");",
          "43:         HtmlPage pageInIframe = (HtmlPage) iframe.getEnclosedPage();",
          "44:         assertEquals(\"Hello world!\", pageInIframe.getBody().asNormalizedText());",
          "",
          "[Removed Lines]",
          "36:             client.getPage(job, \"report-name/subdir/%23%24%26%2B%2C%3B%3D%20%40.html\").getWebResponse().getContentAsString());",
          "41:         assertEquals(\"subdir/%23%24%26%2B%2C%3B%3D%20%40.html\", iframe.getAttribute(\"src\"));",
          "",
          "[Added Lines]",
          "36:             client.getPage(job, \"report-name/subdir/%23%24%2B%2C%3B%3D%20%40.html\").getWebResponse().getContentAsString());",
          "41:         assertEquals(\"subdir/%23%24%2B%2C%3B%3D%20%40.html\", iframe.getAttribute(\"src\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "51:         FreeStyleProject job = j.createFreeStyleProject();",
          "54:         job.getPublishersList().add(new HtmlPublisher(Arrays.asList(",
          "55:             new HtmlPublisherTarget(\"report-name\", \"\", \"subdir/subdir2/*.html\", true, true, false))));",
          "56:         job.save();",
          "",
          "[Removed Lines]",
          "53:         job.getBuildersList().add(new CreateFileBuilder(\"subdir/subdir2/#$&+,;= @.html\", content));",
          "",
          "[Added Lines]",
          "53:         job.getBuildersList().add(new CreateFileBuilder(\"subdir/subdir2/#$+,;= @.html\", content));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:         JenkinsRule.WebClient client = j.createWebClient();",
          "61:         assertEquals(content,",
          "65:         HtmlPage page = client.getPage(job, \"report-name\");",
          "66:         HtmlInlineFrame iframe = (HtmlInlineFrame) page.getElementById(\"myframe\");",
          "69:         HtmlPage pageInIframe = (HtmlPage) iframe.getEnclosedPage();",
          "70:         assertEquals(\"Hello world!\", pageInIframe.getBody().asNormalizedText());",
          "",
          "[Removed Lines]",
          "62:             client.getPage(job, \"report-name/subdir/subdir2/%23%24%26%2B%2C%3B%3D%20%40.html\").getWebResponse().getContentAsString());",
          "67:         assertEquals(\"subdir/subdir2/%23%24%26%2B%2C%3B%3D%20%40.html\", iframe.getAttribute(\"src\"));",
          "",
          "[Added Lines]",
          "62:             client.getPage(job, \"report-name/subdir/subdir2/%23%24%2B%2C%3B%3D%20%40.html\").getWebResponse().getContentAsString());",
          "67:         assertEquals(\"subdir/subdir2/%23%24%2B%2C%3B%3D%20%40.html\", iframe.getAttribute(\"src\"));",
          "",
          "---------------"
        ],
        "src/test/java/htmlpublisher/Security3302Test.java||src/test/java/htmlpublisher/Security3302Test.java": [
          "File: src/test/java/htmlpublisher/Security3302Test.java -> src/test/java/htmlpublisher/Security3302Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package htmlpublisher;",
          "3: import hudson.model.FreeStyleProject;",
          "4: import hudson.tasks.Shell;",
          "5: import org.htmlunit.AlertHandler;",
          "6: import org.htmlunit.FailingHttpStatusCodeException;",
          "7: import org.htmlunit.Page;",
          "8: import org.junit.Rule;",
          "9: import org.junit.Test;",
          "10: import org.jvnet.hudson.test.Issue;",
          "11: import org.jvnet.hudson.test.JenkinsRule;",
          "12: import org.jvnet.hudson.test.recipes.LocalData;",
          "14: import java.util.ArrayList;",
          "15: import java.util.Collections;",
          "16: import java.util.List;",
          "18: import static hudson.Functions.isWindows;",
          "19: import static org.hamcrest.MatcherAssert.assertThat;",
          "20: import static org.hamcrest.collection.IsEmptyCollection.empty;",
          "21: import static org.hamcrest.core.IsNot.not;",
          "22: import static org.junit.Assert.*;",
          "23: import static org.junit.Assume.assumeFalse;",
          "25: public class Security3302Test {",
          "27:     @Rule",
          "28:     public JenkinsRule j = new JenkinsRule();",
          "30:     @Test",
          "31:     public void security3302sanitizeJobNameTest() throws Exception {",
          "34:         assumeFalse(isWindows());",
          "36:         FreeStyleProject job = j.jenkins.createProject(FreeStyleProject.class, \"\\\"+alert(1)+\\\"\");",
          "37:         job.getBuildersList().add(new Shell(\"date > index.html\"));",
          "39:         HtmlPublisherTarget target = new HtmlPublisherTarget(",
          "40:                 \"HTML Report\",",
          "41:                 \"\",",
          "42:                 \"index.html\",",
          "43:                 true,",
          "44:                 false,",
          "45:                 false",
          "46:         );",
          "48:         target.setUseWrapperFileDirectly(true);",
          "49:         target.setEscapeUnderscores(true);",
          "50:         target.setReportTitles(\"\");",
          "51:         target.setIncludes(\"**/*\");",
          "53:         List<HtmlPublisherTarget> reportTargets = new ArrayList<>();",
          "54:         reportTargets.add(target);",
          "56:         job.getPublishersList().add(new HtmlPublisher(reportTargets));",
          "58:         j.buildAndAssertSuccess(job);",
          "60:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
          "61:         assertNotNull(action);",
          "63:         assertEquals(\"HTML Report\", action.getHTMLTarget().getReportName());",
          "64:         assertEquals(\"HTML_20Report\", action.getUrlName());",
          "66:         JenkinsRule.WebClient client = j.createWebClient();",
          "69:         Alerter alerter = new Alerter();",
          "70:         client.setAlertHandler(alerter);",
          "71:         client.goTo(\"job/\\\"+alert(1)+\\\"/HTML_20Report/\");",
          "74:         client.waitForBackgroundJavaScript(2000);",
          "75:         assertTrue(alerter.messages.isEmpty());",
          "77:     }",
          "79:     @Test",
          "80:     @LocalData",
          "81:     @Issue(\"security-3302\")",
          "82:     public void oldReportJobNameTest() throws Exception {",
          "84:         assumeFalse(isWindows());",
          "85:         List<FreeStyleProject> items = j.jenkins.getItems(FreeStyleProject.class);",
          "86:         assertThat(items, not(empty()));",
          "87:         FreeStyleProject job = items.get(0);",
          "88:         assertNotNull(job);",
          "89:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
          "90:         assertNotNull(action);",
          "92:         assertEquals(\"HTML Report\", action.getHTMLTarget().getReportName());",
          "93:         assertEquals(\"HTML_20Report\", action.getUrlName());",
          "95:         JenkinsRule.WebClient client = j.createWebClient();",
          "98:         Alerter alerter = new Alerter();",
          "99:         client.setAlertHandler(alerter);",
          "101:         try {",
          "102:             client.goTo(\"job/testJob/1/HTML_20Report/\");",
          "104:         } catch (FailingHttpStatusCodeException e) {",
          "106:         } finally {",
          "108:             client.waitForBackgroundJavaScript(2000);",
          "109:             assertTrue(alerter.messages.isEmpty());",
          "110:         }",
          "111:     }",
          "113:     @Test",
          "114:     public void security3302sanitizeOptionalNameTest() throws Exception {",
          "117:         assumeFalse(isWindows());",
          "119:         FreeStyleProject job = j.jenkins.createProject(FreeStyleProject.class, \"testJob\");",
          "120:         job.getBuildersList().add(new Shell(\"echo \\\"Test\\\" > test.txt\"));",
          "122:         HtmlPublisherTarget target = new HtmlPublisherTarget(",
          "123:                 \"HTML Report\",",
          "124:                 \"\",",
          "125:                 \"test.txt\",",
          "126:                 true,",
          "127:                 false,",
          "128:                 false",
          "129:         );",
          "131:         target.setUseWrapperFileDirectly(true);",
          "132:         target.setEscapeUnderscores(true);",
          "133:         target.setReportTitles(\"<img src onerror=alert(1)>\");",
          "134:         target.setIncludes(\"**/*\");",
          "136:         List<HtmlPublisherTarget> reportTargets = new ArrayList<>();",
          "137:         reportTargets.add(target);",
          "139:         job.getPublishersList().add(new HtmlPublisher(reportTargets));",
          "141:         j.buildAndAssertSuccess(job);",
          "143:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
          "144:         assertNotNull(action);",
          "146:         assertEquals(\"HTML Report\", action.getHTMLTarget().getReportName());",
          "147:         assertEquals(\"HTML_20Report\", action.getUrlName());",
          "149:         JenkinsRule.WebClient client = j.createWebClient();",
          "152:         Alerter alerter = new Alerter();",
          "153:         client.setAlertHandler(alerter);",
          "154:         client.goTo(\"job/testJob/HTML_20Report/\");",
          "157:         client.waitForBackgroundJavaScript(2000);",
          "158:         assertTrue(alerter.messages.isEmpty());",
          "160:     }",
          "162:     @Test",
          "163:     public void security3302sanitizeExistingReportTitleTest() throws Exception {",
          "166:         assumeFalse(isWindows());",
          "168:         FreeStyleProject job = j.jenkins.createProject(FreeStyleProject.class, \"testJob\");",
          "169:         job.getBuildersList().add(new Shell(\"echo \\\"Test\\\" > '\\\"><img src onerror=alert(1)>'\"));",
          "171:         HtmlPublisherTarget target = new HtmlPublisherTarget(",
          "172:                 \"HTML Report\",",
          "173:                 \"\",",
          "174:                 \"\",",
          "175:                 true,",
          "176:                 false,",
          "177:                 false",
          "178:         );",
          "180:         target.setUseWrapperFileDirectly(true);",
          "181:         target.setEscapeUnderscores(true);",
          "182:         target.setReportTitles(\"\\\"><img src onerror=alert(1)>\");",
          "183:         target.setIncludes(\"**/*\");",
          "185:         List<HtmlPublisherTarget> reportTargets = new ArrayList<>();",
          "186:         reportTargets.add(target);",
          "188:         job.getPublishersList().add(new HtmlPublisher(reportTargets));",
          "190:         j.buildAndAssertSuccess(job);",
          "192:         HtmlPublisherTarget.HTMLAction action = job.getAction(HtmlPublisherTarget.HTMLAction.class);",
          "193:         assertNotNull(action);",
          "195:         assertEquals(\"HTML Report\", action.getHTMLTarget().getReportName());",
          "196:         assertEquals(\"HTML_20Report\", action.getUrlName());",
          "198:         JenkinsRule.WebClient client = j.createWebClient();",
          "200:         Alerter alerter = new Alerter();",
          "201:         client.setAlertHandler(alerter);",
          "202:         client.goTo(\"job/testJob/HTML_20Report/\");",
          "205:         client.waitForBackgroundJavaScript(2000);",
          "206:         assertTrue(alerter.messages.isEmpty());",
          "208:     }",
          "211:     static class Alerter implements AlertHandler {",
          "212:         List<String> messages = Collections.synchronizedList(new ArrayList<>());",
          "213:         @Override",
          "214:         public void handleAlert(final Page page, final String message) {",
          "215:             messages.add(message);",
          "216:         }",
          "217:     }",
          "218: }",
          "",
          "---------------"
        ],
        "src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html||src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html": [
          "File: src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html -> src/test/resources/htmlpublisher/Security3302Test/oldReportJobNameTest/jobs/testJob/builds/1/htmlreports/HTML_20Report/htmlpublisher-wrapper.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"",
          "2: \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">",
          "4: <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">",
          "5: <head>",
          "6: <meta http-equiv=\"Content-Type\" content=\"text/html\" />",
          "7: <!-- CSS Tabs is licensed under Creative Commons Attribution 3.0 - http://creativecommons.org/licenses/by/3.0/ -->",
          "8: <style type=\"text/css\">",
          "10: body {",
          "11: font: 100% verdana, arial, sans-serif;",
          "12: background-color: #fff;",
          "13: }",
          "22: list-style-type: none;",
          "23: padding: 3px 10px 0px 10px;",
          "24: }",
          "27: display: inline-block;",
          "28: }",
          "33: }",
          "37: padding: 3px 4px;",
          "39: border-bottom: 1px solid #cfc;",
          "43: text-decoration: none;",
          "44: cursor: pointer;",
          "45: }",
          "49: }",
          "54: html, body, div, iframe { margin:0; padding:0; }",
          "55: iframe { display:block; width:100%; border:none; }",
          "57: h1",
          "58: {",
          "59:     display: inline;",
          "60:     float: left;",
          "61:     font-size: small;",
          "62:     margin: 0;",
          "63:     padding: 0 10px;",
          "64: }",
          "66: h2",
          "67: {",
          "68:     display: inline;",
          "69:     float: right;",
          "70:     font-size: small;",
          "71:     margin: 0;",
          "72:     padding: 0 10px;",
          "73: }",
          "75: </style>",
          "77: <script type=\"text/javascript\">",
          "78: function updateBody(tabId, page) {",
          "79:     document.getElementById(selectedTab).setAttribute(\"class\", \"unselected\");",
          "80:     tab = document.getElementById(tabId)",
          "81:     tab.setAttribute(\"class\", \"selected\");",
          "82:     selectedTab = tabId;",
          "83:     iframe = document.getElementById(\"myframe\");",
          "84:     iframe.src = encodeURIComponent(tab.getAttribute(\"value\")).replace(/%2F/g, '/');",
          "85: }",
          "86: function init(tabId){",
          "87:  updateBody(tabId);",
          "88:  updateViewport();",
          "90:  window.onresize = updateViewport;",
          "91: }",
          "93: function updateViewport(){",
          "94:   var viewportheight;",
          "98:   if (typeof window.innerWidth != 'undefined')",
          "99:   {",
          "100:        viewportheight = window.innerHeight",
          "101:   }",
          "105:   else if (typeof document.documentElement != 'undefined'",
          "106:       && typeof document.documentElement.clientWidth !=",
          "107:       'undefined' && document.documentElement.clientWidth != 0)",
          "108:   {",
          "109:         viewportheight = document.documentElement.clientHeight",
          "110:   }",
          "112:   else",
          "113:   {",
          "114:         viewportheight = document.getElementsByTagName('body')[0].clientHeight",
          "115:   }",
          "117:  iframe = document.getElementById(\"myframe\");",
          "118:  iframe.style.height = (viewportheight-30)+'px';",
          "119: }",
          "120: var selectedTab = \"tab1\"",
          "121: </script>",
          "123: </head>",
          "125: <body onload=\"init('tab1');\">",
          "127: <h1><a id=\"hudson_link\" href=\"#\"></a></h1>",
          "128: <h2><a id=\"zip_link\" href=\"#\">Zip</a></h2>",
          "130: <ul id=\"tabnav\">",
          "131: <script type=\"text/javascript\">document.getElementById(\"hudson_link\").innerHTML=\"Back to \"+alert(1)+\"\";</script>",
          "132: <script type=\"text/javascript\">document.getElementById(\"hudson_link\").onclick = function() { history.go(-1); return false; };</script>",
          "133: <script type=\"text/javascript\">document.getElementById(\"zip_link\").href=\"*zip*/HTML_20Report.zip\";</script>",
          "134: </ul>",
          "135: <div>",
          "136: <iframe id=\"myframe\" height=\"100%\" width=\"100%\" frameborder=\"0\"></iframe>",
          "137: </div>",
          "139: </body>",
          "140: </html>",
          "",
          "---------------"
        ]
      }
    }
  ]
}