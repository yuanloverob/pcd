{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "100f5a57e715125789362e328b5d013f9f52e4f1",
      "candidate_info": {
        "commit_hash": "100f5a57e715125789362e328b5d013f9f52e4f1",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/100f5a57e715125789362e328b5d013f9f52e4f1",
        "files": [
          "src/lib/components/common/Collapsible.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/common/Collapsible.svelte||src/lib/components/common/Collapsible.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/common/Collapsible.svelte||src/lib/components/common/Collapsible.svelte": [
          "File: src/lib/components/common/Collapsible.svelte -> src/lib/components/common/Collapsible.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:   </div>",
          "198:  {/if}",
          "212: > ${formatJSONString(args)}",
          "213: > ${formatJSONString(result)}",
          "214: > \\`\\`\\``}",
          "228: > ${formatJSONString(args)}",
          "229: > \\`\\`\\``}",
          "231:      {/if}",
          "234:     {/if}",
          "235:    </div>",
          "236:   {/if}",
          "237:  {/if}",
          "",
          "[Removed Lines]",
          "200:  {#if !grow}",
          "201:   {#if open && !hide}",
          "202:    <div transition:slide={{ duration: 300, easing: quintOut, axis: 'y' }}>",
          "203:     {#if attributes?.type === 'tool_calls'}",
          "204:      {@const args = decode(attributes?.arguments)}",
          "205:      {@const result = decode(attributes?.result ?? '')}",
          "206:      {@const files = parseJSONString(decode(attributes?.files ?? ''))}",
          "208:      {#if attributes?.done === 'true'}",
          "209:       <Markdown",
          "210:        id={`tool-calls-${attributes?.id}-result`}",
          "211:        content={`> \\`\\`\\`json",
          "215:       />",
          "217:       {#if typeof files === 'object'}",
          "218:        {#each files ?? [] as file, idx}",
          "219:         {#if file.startsWith('data:image/')}",
          "220:          <Image id={`tool-calls-${attributes?.id}-result-${idx}`} src={file} alt=\"Image\" />",
          "221:         {/if}",
          "222:        {/each}",
          "223:       {/if}",
          "224:      {:else}",
          "225:       <Markdown",
          "226:        id={`tool-calls-${attributes?.id}-result`}",
          "227:        content={`> \\`\\`\\`json",
          "230:       />",
          "232:     {:else}",
          "233:      <slot name=\"content\" />",
          "",
          "[Added Lines]",
          "200:  {#if attributes?.type === 'tool_calls'}",
          "201:   {@const args = decode(attributes?.arguments)}",
          "202:   {@const result = decode(attributes?.result ?? '')}",
          "203:   {@const files = parseJSONString(decode(attributes?.files ?? ''))}",
          "205:   {#if !grow}",
          "206:    {#if open && !hide}",
          "207:     <div transition:slide={{ duration: 300, easing: quintOut, axis: 'y' }}>",
          "208:      {#if attributes?.type === 'tool_calls'}",
          "209:       {#if attributes?.done === 'true'}",
          "210:        <Markdown",
          "211:         id={`tool-calls-${attributes?.id}-result`}",
          "212:         content={`> \\`\\`\\`json",
          "216:        />",
          "218:        {#if typeof files === 'object'}",
          "219:         {#each files ?? [] as file, idx}",
          "220:          {#if file.startsWith('data:image/')}",
          "221:           <Image",
          "222:            id={`tool-calls-${attributes?.id}-result-${idx}`}",
          "223:            src={file}",
          "224:            alt=\"Image\"",
          "225:           />",
          "226:          {/if}",
          "227:         {/each}",
          "228:        {/if}",
          "229:       {:else}",
          "230:        <Markdown",
          "231:         id={`tool-calls-${attributes?.id}-result`}",
          "232:         content={`> \\`\\`\\`json",
          "235:        />",
          "236:       {/if}",
          "237:      {:else}",
          "238:       <slot name=\"content\" />",
          "240:     </div>",
          "241:    {/if}",
          "243:    {#if attributes?.done === 'true'}",
          "244:     {#if typeof files === 'object'}",
          "245:      {#each files ?? [] as file, idx}",
          "246:       {#if file.startsWith('data:image/')}",
          "247:        <Image id={`tool-calls-${attributes?.id}-result-${idx}`} src={file} alt=\"Image\" />",
          "248:       {/if}",
          "249:      {/each}",
          "251:    {/if}",
          "252:   {/if}",
          "253:  {:else if !grow}",
          "254:   {#if open && !hide}",
          "255:    <div transition:slide={{ duration: 300, easing: quintOut, axis: 'y' }}>",
          "256:     <slot name=\"content\" />",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cd3904046db1d1be316cb41e67470eaa110a60bc",
      "candidate_info": {
        "commit_hash": "cd3904046db1d1be316cb41e67470eaa110a60bc",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/cd3904046db1d1be316cb41e67470eaa110a60bc",
        "files": [
          "src/lib/components/common/CodeEditor.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/common/CodeEditor.svelte||src/lib/components/common/CodeEditor.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/common/CodeEditor.svelte||src/lib/components/common/CodeEditor.svelte": [
          "File: src/lib/components/common/CodeEditor.svelte -> src/lib/components/common/CodeEditor.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:  let codeEditor;",
          "50:  let isDarkMode = false;",
          "51:  let editorTheme = new Compartment();",
          "52:  let editorLanguage = new Compartment();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "50:  export const focus = () => {",
          "51:   codeEditor.focus();",
          "52:  };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05aa9c6d9c64329379b3a4081450414ba24f49ba",
      "candidate_info": {
        "commit_hash": "05aa9c6d9c64329379b3a4081450414ba24f49ba",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/05aa9c6d9c64329379b3a4081450414ba24f49ba",
        "files": [
          "backend/open_webui/routers/audio.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
          ],
          "candidate": [
            "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
          ]
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
          "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: from pydub.utils import mediainfo",
          "72:     \"\"\"Check if the given file needs to be converted to a different format.\"\"\"",
          "73:     if not os.path.isfile(file_path):",
          "74:         log.error(f\"File not found: {file_path}\")",
          "",
          "[Removed Lines]",
          "71: def audio_needs_conversion(file_path):",
          "",
          "[Added Lines]",
          "71: def get_audio_format(file_path):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "500:         log.debug(data)",
          "501:         return data",
          "502:     elif request.app.state.config.STT_ENGINE == \"openai\":",
          "506:             # Convert unsupported audio file to WAV format",
          "507:             convert_audio_to_wav(",
          "509:                 file_path,",
          "511:             )",
          "513:         r = None",
          "",
          "[Removed Lines]",
          "503:         conversion_type = audio_needs_conversion(file_path)",
          "504:         if conversion_type:",
          "505:             os.rename(file_path, file_path.replace(\".wav\", f\".{conversion_type}\"))",
          "508:                 file_path.replace(\".wav\", f\".{conversion_type}\"),",
          "510:                 conversion_type,",
          "",
          "[Added Lines]",
          "503:         audio_format = get_audio_format(file_path)",
          "504:         if audio_format:",
          "505:             os.rename(file_path, file_path.replace(\".wav\", f\".{audio_format}\"))",
          "508:                 file_path.replace(\".wav\", f\".{audio_format}\"),",
          "510:                 audio_format,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d84e7d13d068f663f73de387a21015b2ef9a789f",
      "candidate_info": {
        "commit_hash": "d84e7d13d068f663f73de387a21015b2ef9a789f",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/d84e7d13d068f663f73de387a21015b2ef9a789f",
        "files": [
          "src/lib/components/chat/ModelSelector/Selector.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/ModelSelector/Selector.svelte||src/lib/components/chat/ModelSelector/Selector.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/ModelSelector/Selector.svelte||src/lib/components/chat/ModelSelector/Selector.svelte": [
          "File: src/lib/components/chat/ModelSelector/Selector.svelte -> src/lib/components/chat/ModelSelector/Selector.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:  let selectedConnectionType = '';",
          "68:  let ollamaVersion = null;",
          "75:  const fuse = new Fuse(",
          "76:   items.map((item) => {",
          "",
          "[Removed Lines]",
          "70:  let selectedModelIdx = Math.max(",
          "71:   0,",
          "72:   items.findIndex((item) => item.value === value)",
          "73:  );",
          "",
          "[Added Lines]",
          "69:  let selectedModelIdx = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:      }",
          "131:     });",
          "133:  const pullModelHandler = async () => {",
          "134:   const sanitizedModelTag = searchValue.trim().replace(/^ollama\\s+(run|pull)\\s+/, '');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129:  $: if (selectedTag || selectedConnectionType) {",
          "130:   resetView();",
          "131:  } else {",
          "132:   resetView();",
          "133:  }",
          "135:  const resetView = async () => {",
          "136:   await tick();",
          "138:   const selectedInFiltered = filteredItems.findIndex((item) => item.value === value);",
          "140:   if (selectedInFiltered >= 0) {",
          "142:    selectedModelIdx = selectedInFiltered;",
          "143:   } else {",
          "145:    selectedModelIdx = 0;",
          "146:   }",
          "148:   await tick();",
          "149:   const item = document.querySelector(`[data-arrow-selected=\"true\"]`);",
          "150:   item?.scrollIntoView({ block: 'center', inline: 'nearest', behavior: 'instant' });",
          "151:  };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:  bind:open={show}",
          "291:  onOpenChange={async () => {",
          "292:   searchValue = '';",
          "326:  }}",
          "327:  closeFocus={false}",
          "328: >",
          "",
          "[Removed Lines]",
          "295:   await tick();",
          "298:   const selectedInFiltered = filteredItems.findIndex((item) => item.value === value);",
          "300:   if (selectedInFiltered >= 0) {",
          "302:    selectedModelIdx = selectedInFiltered;",
          "303:   } else {",
          "305:    selectedModelIdx = 0;",
          "306:   }",
          "308:   await tick();",
          "311:   const itemToScrollTo =",
          "312:    selectedInFiltered >= 0",
          "313:     ? document.querySelector(`[data-value=\"${value}\"]`)",
          "314:     : document.querySelector('[data-arrow-selected=\"true\"]');",
          "316:   if (itemToScrollTo) {",
          "317:    const container = itemToScrollTo.closest('.overflow-y-auto');",
          "318:    if (container) {",
          "319:     const itemTop = itemToScrollTo.offsetTop;",
          "320:     const containerHeight = container.clientHeight;",
          "321:     const itemHeight = itemToScrollTo.clientHeight;",
          "323:     container.scrollTop = itemTop - containerHeight / 2 + itemHeight / 2;",
          "324:    }",
          "325:   }",
          "",
          "[Added Lines]",
          "313:   window.setTimeout(() => document.getElementById('model-search-input')?.focus(), 0);",
          "315:   resetView();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63e5200e2fd5f0072c19b831de9655159373dc65",
      "candidate_info": {
        "commit_hash": "63e5200e2fd5f0072c19b831de9655159373dc65",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/63e5200e2fd5f0072c19b831de9655159373dc65",
        "files": [
          "backend/open_webui/retrieval/web/sougou.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/retrieval/web/sougou.py||backend/open_webui/retrieval/web/sougou.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/retrieval/web/sougou.py||backend/open_webui/retrieval/web/sougou.py": [
          "File: backend/open_webui/retrieval/web/sougou.py -> backend/open_webui/retrieval/web/sougou.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import json",
          "3: from typing import Optional, List",
          "11: from open_webui.retrieval.web.main import SearchResult, get_filtered_results",
          "12: from open_webui.env import SRC_LOG_LEVELS",
          "",
          "[Removed Lines]",
          "5: from tencentcloud.common.common_client import CommonClient",
          "6: from tencentcloud.common import credential",
          "7: from tencentcloud.common.exception.tencent_cloud_sdk_exception import TencentCloudSDKException",
          "8: from tencentcloud.common.profile.client_profile import ClientProfile",
          "9: from tencentcloud.common.profile.http_profile import HttpProfile",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:     count: int,",
          "23:     filter_list: Optional[List[str]] = None,",
          "24: ) -> List[SearchResult]:",
          "25:     try:",
          "26:         cred = credential.Credential(sougou_api_sid, sougou_api_sk)",
          "27:         http_profile = HttpProfile()",
          "28:         http_profile.endpoint = \"tms.tencentcloudapi.com\"",
          "29:         client_profile = ClientProfile()",
          "30:         client_profile.http_profile = http_profile",
          "33:         results = [",
          "35:         ]",
          "37:         if filter_list:",
          "38:             sorted_results = get_filtered_results(sorted_results, filter_list)",
          "40:         return [",
          "41:             SearchResult(",
          "43:             )",
          "44:             for result in sorted_results[:count]",
          "45:         ]",
          "",
          "[Removed Lines]",
          "31:         params = json.dumps({\"Query\": query, 'Cnt': 20})",
          "32:         common_client = CommonClient(\"tms\", \"2020-12-29\", cred, \"\", profile=client_profile)",
          "34:             json.loads(page) for page in common_client.call_json(\"SearchPro\", json.loads(params))[\"Response\"][\"Pages\"]",
          "36:         sorted_results = sorted(results, key=lambda x: x.get(\"scour\", 0.0), reverse=True)",
          "42:                 link=result.get(\"url\"), title=result.get(\"title\"), snippet=result.get(\"passage\")",
          "",
          "[Added Lines]",
          "20:     from tencentcloud.common.common_client import CommonClient",
          "21:     from tencentcloud.common import credential",
          "22:     from tencentcloud.common.exception.tencent_cloud_sdk_exception import (",
          "23:         TencentCloudSDKException,",
          "24:     )",
          "25:     from tencentcloud.common.profile.client_profile import ClientProfile",
          "26:     from tencentcloud.common.profile.http_profile import HttpProfile",
          "34:         params = json.dumps({\"Query\": query, \"Cnt\": 20})",
          "35:         common_client = CommonClient(",
          "36:             \"tms\", \"2020-12-29\", cred, \"\", profile=client_profile",
          "37:         )",
          "39:             json.loads(page)",
          "40:             for page in common_client.call_json(\"SearchPro\", json.loads(params))[",
          "41:                 \"Response\"",
          "42:             ][\"Pages\"]",
          "44:         sorted_results = sorted(",
          "45:             results, key=lambda x: x.get(\"scour\", 0.0), reverse=True",
          "46:         )",
          "52:                 link=result.get(\"url\"),",
          "53:                 title=result.get(\"title\"),",
          "54:                 snippet=result.get(\"passage\"),",
          "",
          "---------------"
        ]
      }
    }
  ]
}