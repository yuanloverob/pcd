{
  "cve_id": "CVE-2024-1455",
  "cve_desc": "A vulnerability in the langchain-ai/langchain repository allows for a Billion Laughs Attack, a type of XML External Entity (XXE) exploitation. By nesting multiple layers of entities within an XML document, an attacker can cause the XML parser to consume excessive CPU and memory resources, leading to a denial of service (DoS). ",
  "repo": "langchain-ai/langchain",
  "patch_hash": "727d5023ce88e18e3074ef620a98137d26ff92a3",
  "patch_info": {
    "commit_hash": "727d5023ce88e18e3074ef620a98137d26ff92a3",
    "repo": "langchain-ai/langchain",
    "commit_url": "https://github.com/langchain-ai/langchain/commit/727d5023ce88e18e3074ef620a98137d26ff92a3",
    "files": [
      "libs/core/langchain_core/output_parsers/xml.py",
      "libs/core/poetry.lock",
      "libs/core/pyproject.toml",
      "libs/core/tests/unit_tests/output_parsers/test_xml_parser.py"
    ],
    "message": "core[patch]: Use defusedxml in XMLOutputParser (#19526)\n\nThis mitigates a security concern for users still using older versions of libexpat that causes an attacker to compromise the availability of the system if an attacker manages to surface malicious payload to this XMLParser.",
    "before_after_code_files": [
      "libs/core/langchain_core/output_parsers/xml.py||libs/core/langchain_core/output_parsers/xml.py",
      "libs/core/poetry.lock||libs/core/poetry.lock",
      "libs/core/tests/unit_tests/output_parsers/test_xml_parser.py||libs/core/tests/unit_tests/output_parsers/test_xml_parser.py"
    ]
  },
  "patch_diff": {
    "libs/core/langchain_core/output_parsers/xml.py||libs/core/langchain_core/output_parsers/xml.py": [
      "File: libs/core/langchain_core/output_parsers/xml.py -> libs/core/langchain_core/output_parsers/xml.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import re",
      "3: from typing import Any, AsyncIterator, Dict, Iterator, List, Optional, Union",
      "5: from langchain_core.exceptions import OutputParserException",
      "6: from langchain_core.messages import BaseMessage",
      "",
      "[Removed Lines]",
      "2: import xml.etree.ElementTree as ET",
      "",
      "[Added Lines]",
      "3: from xml.etree import ElementTree as ET",
      "4: from xml.etree.ElementTree import TreeBuilder",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35:         return XML_FORMAT_INSTRUCTIONS.format(tags=self.tags)",
      "37:     def parse(self, text: str) -> Dict[str, List[Any]]:",
      "38:         # Try to find XML string within triple backticks",
      "39:         match = re.search(r\"```(xml)?(.*)```\", text, re.DOTALL)",
      "40:         if match is not None:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39:         # Imports are temporarily placed here to avoid issue with caching on CI",
      "40:         # likely if you're reading this you can move them to the top of the file",
      "41:         from defusedxml import ElementTree as DET  # type: ignore[import]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "47:         text = text.strip()",
      "48:         try:",
      "50:             return self._root_to_dict(root)",
      "53:             msg = f\"Failed to parse XML format from completion {text}. Got: {e}\"",
      "54:             raise OutputParserException(msg, llm_output=text) from e",
      "56:     def _transform(",
      "57:         self, input: Iterator[Union[str, BaseMessage]]",
      "58:     ) -> Iterator[AddableDict]:",
      "59:         xml_start_re = re.compile(r\"<[a-zA-Z:_]\")",
      "61:         xml_started = False",
      "62:         current_path: List[str] = []",
      "63:         current_path_has_children = False",
      "",
      "[Removed Lines]",
      "49:             root = ET.fromstring(text)",
      "52:         except ET.ParseError as e:",
      "60:         parser = ET.XMLPullParser([\"start\", \"end\"])",
      "",
      "[Added Lines]",
      "54:             root = DET.fromstring(text)",
      "57:         except (DET.ParseError, DET.EntitiesForbidden) as e:",
      "64:         # Imports are temporarily placed here to avoid issue with caching on CI",
      "65:         # likely if you're reading this you can move them to the top of the file",
      "66:         from defusedxml.ElementTree import DefusedXMLParser  # type: ignore[import]",
      "68:         parser = ET.XMLPullParser(",
      "69:             [\"start\", \"end\"], _parser=DefusedXMLParser(target=TreeBuilder())",
      "70:         )",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "105:     async def _atransform(",
      "106:         self, input: AsyncIterator[Union[str, BaseMessage]]",
      "107:     ) -> AsyncIterator[AddableDict]:",
      "109:         current_path: List[str] = []",
      "110:         current_path_has_children = False",
      "111:         async for chunk in input:",
      "112:             if isinstance(chunk, BaseMessage):",
      "113:                 # extract text",
      "",
      "[Removed Lines]",
      "108:         parser = ET.XMLPullParser([\"start\", \"end\"])",
      "",
      "[Added Lines]",
      "120:         # Imports are temporarily placed here to avoid issue with caching on CI",
      "121:         # likely if you're reading this you can move them to the top of the file",
      "122:         from defusedxml.ElementTree import DefusedXMLParser  # type: ignore[import]",
      "124:         _parser = DefusedXMLParser(target=TreeBuilder())",
      "125:         parser = ET.XMLPullParser([\"start\", \"end\"], _parser=_parser)",
      "126:         xml_start_re = re.compile(r\"<[a-zA-Z:_]\")",
      "127:         xml_started = False",
      "130:         buffer = \"\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "115:                 if not isinstance(chunk_content, str):",
      "116:                     continue",
      "117:                 chunk = chunk_content",
      "120:             # yield all events",
      "121:             for event, elem in parser.read_events():",
      "122:                 if event == \"start\":",
      "",
      "[Removed Lines]",
      "118:             # pass chunk to parser",
      "119:             parser.feed(chunk)",
      "",
      "[Added Lines]",
      "138:             # add chunk to buffer of unprocessed text",
      "139:             buffer += chunk",
      "140:             # if xml string hasn't started yet, continue to next chunk",
      "141:             if not xml_started:",
      "142:                 if match := xml_start_re.search(buffer):",
      "143:                     # if xml string has started, remove all text before it",
      "144:                     buffer = buffer[match.start() :]",
      "145:                     xml_started = True",
      "146:                 else:",
      "147:                     continue",
      "148:             # feed buffer to parser",
      "149:             parser.feed(buffer)",
      "150:             buffer = \"\"",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "130:                     if not current_path_has_children:",
      "131:                         yield nested_element(current_path, elem)",
      "132:                     # prevent yielding of parent element",
      "134:         # close parser",
      "135:         parser.close()",
      "",
      "[Removed Lines]",
      "133:                     current_path_has_children = True",
      "",
      "[Added Lines]",
      "164:                     if current_path:",
      "165:                         current_path_has_children = True",
      "166:                     else:",
      "167:                         xml_started = False",
      "",
      "---------------"
    ],
    "libs/core/poetry.lock||libs/core/poetry.lock": [
      "File: libs/core/poetry.lock -> libs/core/poetry.lock",
      "--- Hunk 1 ---",
      "[Context before]",
      "661: [[package]]",
      "662: name = \"importlib-metadata\"",
      "664: description = \"Read metadata from Python packages\"",
      "665: optional = false",
      "666: python-versions = \">=3.8\"",
      "667: files = [",
      "670: ]",
      "672: [package.dependencies]",
      "",
      "[Removed Lines]",
      "663: version = \"7.0.2\"",
      "668:     {file = \"importlib_metadata-7.0.2-py3-none-any.whl\", hash = \"sha256:f4bc4c0c070c490abf4ce96d715f68e95923320370efb66143df00199bb6c100\"},",
      "669:     {file = \"importlib_metadata-7.0.2.tar.gz\", hash = \"sha256:198f568f3230878cb1b44fbd7975f87906c22336dba2e4a7f05278c281fbd792\"},",
      "",
      "[Added Lines]",
      "663: version = \"7.1.0\"",
      "668:     {file = \"importlib_metadata-7.1.0-py3-none-any.whl\", hash = \"sha256:30962b96c0c223483ed6cc7280e7f0199feb01a0e40cfae4d4450fc6fab1f570\"},",
      "669:     {file = \"importlib_metadata-7.1.0.tar.gz\", hash = \"sha256:b78938b926ee8d5f020fc4772d487045805a55ddbad2ecf21c6d60938dc7fcd2\"},",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "675: [package.extras]",
      "676: docs = [\"furo\", \"jaraco.packaging (>=9.3)\", \"jaraco.tidelift (>=1.4)\", \"rst.linker (>=1.9)\", \"sphinx (>=3.5)\", \"sphinx-lint\"]",
      "677: perf = [\"ipython\"]",
      "680: [[package]]",
      "681: name = \"importlib-resources\"",
      "683: description = \"Read resources from Python packages\"",
      "684: optional = false",
      "685: python-versions = \">=3.8\"",
      "686: files = [",
      "689: ]",
      "691: [package.dependencies]",
      "",
      "[Removed Lines]",
      "678: testing = [\"flufl.flake8\", \"importlib-resources (>=1.3)\", \"packaging\", \"pyfakefs\", \"pytest (>=6)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-mypy\", \"pytest-perf (>=0.9.2)\", \"pytest-ruff (>=0.2.1)\"]",
      "682: version = \"6.3.1\"",
      "687:     {file = \"importlib_resources-6.3.1-py3-none-any.whl\", hash = \"sha256:4811639ca7fa830abdb8e9ca0a104dc6ad13de691d9fe0d3173a71304f068159\"},",
      "688:     {file = \"importlib_resources-6.3.1.tar.gz\", hash = \"sha256:29a3d16556e330c3c8fb8202118c5ff41241cc34cbfb25989bbad226d99b7995\"},",
      "",
      "[Added Lines]",
      "678: testing = [\"flufl.flake8\", \"importlib-resources (>=1.3)\", \"jaraco.test (>=5.4)\", \"packaging\", \"pyfakefs\", \"pytest (>=6)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-mypy\", \"pytest-perf (>=0.9.2)\", \"pytest-ruff (>=0.2.1)\"]",
      "682: version = \"6.4.0\"",
      "687:     {file = \"importlib_resources-6.4.0-py3-none-any.whl\", hash = \"sha256:50d10f043df931902d4194ea07ec57960f66a80449ff867bfe782b4c486ba78c\"},",
      "688:     {file = \"importlib_resources-6.4.0.tar.gz\", hash = \"sha256:cdb2b453b8046ca4e3798eb1d84f3cce1446a0e8e7b5ef4efb600f19fc398145\"},",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "694: [package.extras]",
      "695: docs = [\"furo\", \"jaraco.packaging (>=9.3)\", \"jaraco.tidelift (>=1.4)\", \"rst.linker (>=1.9)\", \"sphinx (<7.2.5)\", \"sphinx (>=3.5)\", \"sphinx-lint\"]",
      "698: [[package]]",
      "699: name = \"iniconfig\"",
      "",
      "[Removed Lines]",
      "696: testing = [\"jaraco.collections\", \"pytest (>=6)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-mypy\", \"pytest-ruff (>=0.2.1)\", \"zipp (>=3.17)\"]",
      "",
      "[Added Lines]",
      "696: testing = [\"jaraco.test (>=5.4)\", \"pytest (>=6)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-mypy\", \"pytest-ruff (>=0.2.1)\", \"zipp (>=3.17)\"]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1021: [[package]]",
      "1022: name = \"jupyter-events\"",
      "1024: description = \"Jupyter Event System library\"",
      "1025: optional = false",
      "1026: python-versions = \">=3.8\"",
      "1027: files = [",
      "1030: ]",
      "1032: [package.dependencies]",
      "",
      "[Removed Lines]",
      "1023: version = \"0.9.1\"",
      "1028:     {file = \"jupyter_events-0.9.1-py3-none-any.whl\", hash = \"sha256:e51f43d2c25c2ddf02d7f7a5045f71fc1d5cb5ad04ef6db20da961c077654b9b\"},",
      "1029:     {file = \"jupyter_events-0.9.1.tar.gz\", hash = \"sha256:a52e86f59eb317ee71ff2d7500c94b963b8a24f0b7a1517e2e653e24258e15c7\"},",
      "",
      "[Added Lines]",
      "1023: version = \"0.10.0\"",
      "1028:     {file = \"jupyter_events-0.10.0-py3-none-any.whl\", hash = \"sha256:4b72130875e59d57716d327ea70d3ebc3af1944d3717e5a498b8a06c6c159960\"},",
      "1029:     {file = \"jupyter_events-0.10.0.tar.gz\", hash = \"sha256:670b8229d3cc882ec782144ed22e0d29e1c2d639263f92ca8383e66682845e22\"},",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1217: [[package]]",
      "1218: name = \"langsmith\"",
      "1220: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
      "1221: optional = false",
      "1223: files = [",
      "1226: ]",
      "1228: [package.dependencies]",
      "",
      "[Removed Lines]",
      "1219: version = \"0.1.27\"",
      "1222: python-versions = \">=3.8.1,<4.0\"",
      "1224:     {file = \"langsmith-0.1.27-py3-none-any.whl\", hash = \"sha256:d223176952b1525c958189ab1b894f5bd9891ec9177222f7a978aeee4bf1cc95\"},",
      "1225:     {file = \"langsmith-0.1.27.tar.gz\", hash = \"sha256:e0a339d976362051adf3fdbc43fcc7c00bb4615a401321ad7e556bd2dab556c0\"},",
      "",
      "[Added Lines]",
      "1219: version = \"0.1.31\"",
      "1222: python-versions = \"<4.0,>=3.8.1\"",
      "1224:     {file = \"langsmith-0.1.31-py3-none-any.whl\", hash = \"sha256:5211a9dc00831db307eb843485a97096484b697b5d2cd1efaac34228e97ca087\"},",
      "1225:     {file = \"langsmith-0.1.31.tar.gz\", hash = \"sha256:efd54ccd44be7fda911bfdc0ead340473df2fdd07345c7252901834d0c4aa37e\"},",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1407: [[package]]",
      "1408: name = \"nbconvert\"",
      "1410: description = \"Converting Jupyter Notebooks (.ipynb files) to other formats.  Output formats include asciidoc, html, latex, markdown, pdf, py, rst, script.  nbconvert can be used both as a Python library (`import nbconvert`) or as a command line tool (invoked as `jupyter nbconvert ...`).\"",
      "1411: optional = false",
      "1412: python-versions = \">=3.8\"",
      "1413: files = [",
      "1416: ]",
      "1418: [package.dependencies]",
      "",
      "[Removed Lines]",
      "1409: version = \"7.16.2\"",
      "1414:     {file = \"nbconvert-7.16.2-py3-none-any.whl\", hash = \"sha256:0c01c23981a8de0220255706822c40b751438e32467d6a686e26be08ba784382\"},",
      "1415:     {file = \"nbconvert-7.16.2.tar.gz\", hash = \"sha256:8310edd41e1c43947e4ecf16614c61469ebc024898eb808cce0999860fc9fb16\"},",
      "",
      "[Added Lines]",
      "1409: version = \"7.16.3\"",
      "1414:     {file = \"nbconvert-7.16.3-py3-none-any.whl\", hash = \"sha256:ddeff14beeeedf3dd0bc506623e41e4507e551736de59df69a91f86700292b3b\"},",
      "1415:     {file = \"nbconvert-7.16.3.tar.gz\", hash = \"sha256:a6733b78ce3d47c3f85e504998495b07e6ea9cf9bf6ec1c98dda63ec6ad19142\"},",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1439: qtpdf = [\"nbconvert[qtpng]\"]",
      "1440: qtpng = [\"pyqtwebengine (>=5.15)\"]",
      "1441: serve = [\"tornado (>=6.1)\"]",
      "1443: webpdf = [\"playwright\"]",
      "1445: [[package]]",
      "",
      "[Removed Lines]",
      "1442: test = [\"flaky\", \"ipykernel\", \"ipywidgets (>=7.5)\", \"pytest\"]",
      "",
      "[Added Lines]",
      "1442: test = [\"flaky\", \"ipykernel\", \"ipywidgets (>=7.5)\", \"pytest (>=7)\"]",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1998: [[package]]",
      "1999: name = \"pytest-mock\"",
      "2001: description = \"Thin-wrapper around the mock package for easier use with pytest\"",
      "2002: optional = false",
      "2003: python-versions = \">=3.8\"",
      "2004: files = [",
      "2007: ]",
      "2009: [package.dependencies]",
      "2012: [package.extras]",
      "2013: dev = [\"pre-commit\", \"pytest-asyncio\", \"tox\"]",
      "",
      "[Removed Lines]",
      "2000: version = \"3.12.0\"",
      "2005:     {file = \"pytest-mock-3.12.0.tar.gz\", hash = \"sha256:31a40f038c22cad32287bb43932054451ff5583ff094bca6f675df2f8bc1a6e9\"},",
      "2006:     {file = \"pytest_mock-3.12.0-py3-none-any.whl\", hash = \"sha256:0972719a7263072da3a21c7f4773069bcc7486027d7e8e1f81d98a47e701bc4f\"},",
      "2010: pytest = \">=5.0\"",
      "",
      "[Added Lines]",
      "2000: version = \"3.14.0\"",
      "2005:     {file = \"pytest-mock-3.14.0.tar.gz\", hash = \"sha256:2719255a1efeceadbc056d6bf3df3d1c5015530fb40cf347c0f9afac88410bd0\"},",
      "2006:     {file = \"pytest_mock-3.14.0-py3-none-any.whl\", hash = \"sha256:0b72c38033392a5f4621342fe11e9219ac11ec9d375f8e2a0c164539e0d70f6f\"},",
      "2010: pytest = \">=6.2.5\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2966: [metadata]",
      "2967: lock-version = \"2.0\"",
      "2968: python-versions = \">=3.8.1,<4.0\"",
      "",
      "[Removed Lines]",
      "2969: content-hash = \"ca611429e3dd84ce6dac7ef69d7d9b4da78bf467356946e37016b821e5fe752e\"",
      "",
      "[Added Lines]",
      "2969: content-hash = \"a13a0a8454b242106bb681fa74e1f1320a0198f2e07b35d29d985b03a310cf67\"",
      "",
      "---------------"
    ],
    "libs/core/tests/unit_tests/output_parsers/test_xml_parser.py||libs/core/tests/unit_tests/output_parsers/test_xml_parser.py": [
      "File: libs/core/tests/unit_tests/output_parsers/test_xml_parser.py -> libs/core/tests/unit_tests/output_parsers/test_xml_parser.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: \"\"\"Test XMLOutputParser\"\"\"",
      "2: import pytest",
      "4: from langchain_core.exceptions import OutputParserException",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: from typing import AsyncIterator",
      "3: from xml.etree.ElementTree import ParseError",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "40: \"\"\",",
      "41:     ],",
      "42: )",
      "44:     \"\"\"Test XMLOutputParser.\"\"\"",
      "46:     xml_parser = XMLOutputParser()",
      "50:     assert list(xml_parser.transform(iter(result))) == [",
      "51:         {\"foo\": [{\"bar\": [{\"baz\": None}]}]},",
      "52:         {\"foo\": [{\"bar\": [{\"baz\": \"slim.shady\"}]}]},",
      "53:         {\"foo\": [{\"baz\": \"tag\"}]},",
      "54:     ]",
      "57: @pytest.mark.parametrize(\"result\", [\"foo></foo>\", \"<foo></foo\", \"foo></foo\", \"foofoo\"])",
      "58: def test_xml_output_parser_fail(result: str) -> None:",
      "",
      "[Removed Lines]",
      "43: def test_xml_output_parser(result: str) -> None:",
      "48:     xml_result = xml_parser.parse(result)",
      "49:     assert DEF_RESULT_EXPECTED == xml_result",
      "",
      "[Added Lines]",
      "46: async def test_xml_output_parser(result: str) -> None:",
      "50:     assert DEF_RESULT_EXPECTED == xml_parser.parse(result)",
      "51:     assert DEF_RESULT_EXPECTED == (await xml_parser.aparse(result))",
      "58:     async def _as_iter(string: str) -> AsyncIterator[str]:",
      "59:         for c in string:",
      "60:             yield c",
      "62:     chunks = [chunk async for chunk in xml_parser.atransform(_as_iter(result))]",
      "63:     assert chunks == [",
      "64:         {\"foo\": [{\"bar\": [{\"baz\": None}]}]},",
      "65:         {\"foo\": [{\"bar\": [{\"baz\": \"slim.shady\"}]}]},",
      "66:         {\"foo\": [{\"baz\": \"tag\"}]},",
      "67:     ]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "63:     with pytest.raises(OutputParserException) as e:",
      "64:         xml_parser.parse(result)",
      "65:     assert \"Failed to parse\" in str(e)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "81: MALICIOUS_XML = \"\"\"<?xml version=\"1.0\"?>",
      "82: <!DOCTYPE lolz [<!ENTITY lol \"lol\"><!ELEMENT lolz (#PCDATA)>",
      "83:  <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">",
      "84:  <!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">",
      "85:  <!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">",
      "86:  <!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">",
      "87:  <!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">",
      "88:  <!ENTITY lol6 \"&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\">",
      "89:  <!ENTITY lol7 \"&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\">",
      "90:  <!ENTITY lol8 \"&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\">",
      "91:  <!ENTITY lol9 \"&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\">",
      "92: ]>",
      "93: <lolz>&lol9;</lolz>\"\"\"",
      "96: async def tests_billion_laughs_attack() -> None:",
      "97:     parser = XMLOutputParser()",
      "98:     with pytest.raises(OutputParserException):",
      "99:         parser.parse(MALICIOUS_XML)",
      "101:     with pytest.raises(OutputParserException):",
      "102:         await parser.aparse(MALICIOUS_XML)",
      "104:     with pytest.raises(ParseError):",
      "105:         # Right now raises undefined entity error",
      "106:         assert list(parser.transform(iter(MALICIOUS_XML))) == [",
      "107:             {\"foo\": [{\"bar\": [{\"baz\": None}]}]}",
      "108:         ]",
      "110:     async def _as_iter(string: str) -> AsyncIterator[str]:",
      "111:         for c in string:",
      "112:             yield c",
      "114:     with pytest.raises(ParseError):",
      "115:         chunks = [chunk async for chunk in parser.atransform(_as_iter(MALICIOUS_XML))]",
      "116:         assert chunks == [{\"foo\": [{\"bar\": [{\"baz\": None}]}]}]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8964f8a7100bbddb4c21287801368a010db4c36c",
      "candidate_info": {
        "commit_hash": "8964f8a7100bbddb4c21287801368a010db4c36c",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/8964f8a7100bbddb4c21287801368a010db4c36c",
        "files": [
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml"
        ],
        "message": "core: use mypy<1.11 (#24749)\n\nBug in mypy 1.11.0 blocking CI, see example:\nhttps://github.com/langchain-ai/langchain/actions/runs/10127096903/job/28004492692?pr=24641",
        "before_after_code_files": [
          "libs/core/poetry.lock||libs/core/poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661: [[package]]",
          "662: name = \"importlib-metadata\"",
          "664: description = \"Read metadata from Python packages\"",
          "665: optional = false",
          "666: python-versions = \">=3.8\"",
          "667: files = [",
          "670: ]",
          "672: [package.dependencies]",
          "",
          "[Removed Lines]",
          "663: version = \"8.0.0\"",
          "668:     {file = \"importlib_metadata-8.0.0-py3-none-any.whl\", hash = \"sha256:15584cf2b1bf449d98ff8a6ff1abef57bf20f3ac6454f431736cd3e660921b2f\"},",
          "669:     {file = \"importlib_metadata-8.0.0.tar.gz\", hash = \"sha256:188bd24e4c346d3f0a933f275c2fec67050326a856b9a359881d7c2a697e8812\"},",
          "",
          "[Added Lines]",
          "663: version = \"8.2.0\"",
          "668:     {file = \"importlib_metadata-8.2.0-py3-none-any.whl\", hash = \"sha256:11901fa0c2f97919b288679932bb64febaeacf289d18ac84dd68cb2e74213369\"},",
          "669:     {file = \"importlib_metadata-8.2.0.tar.gz\", hash = \"sha256:72e8d4399996132204f9a16dcc751af254a48f8d1b20b9ff0f98d4a8f901e73d\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1234: [[package]]",
          "1235: name = \"langsmith\"",
          "1237: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "1238: optional = false",
          "1239: python-versions = \"<4.0,>=3.8.1\"",
          "1240: files = [",
          "1243: ]",
          "1245: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1236: version = \"0.1.92\"",
          "1241:     {file = \"langsmith-0.1.92-py3-none-any.whl\", hash = \"sha256:8acb27844ff5263bde14b23425f83ee63996f4d5a8e9998cdeef07fd913137ff\"},",
          "1242:     {file = \"langsmith-0.1.92.tar.gz\", hash = \"sha256:681a613a4dc8c8e57c8961c347a39ffcb64d6c697e8ddde1fd8458fcfaef6c13\"},",
          "",
          "[Added Lines]",
          "1236: version = \"0.1.93\"",
          "1241:     {file = \"langsmith-0.1.93-py3-none-any.whl\", hash = \"sha256:811210b9d5f108f36431bd7b997eb9476a9ecf5a2abd7ddbb606c1cdcf0f43ce\"},",
          "1242:     {file = \"langsmith-0.1.93.tar.gz\", hash = \"sha256:285b6ad3a54f50fa8eb97b5f600acc57d0e37e139dd8cf2111a117d0435ba9b4\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1862: [[package]]",
          "1863: name = \"pure-eval\"",
          "1865: description = \"Safely evaluate AST nodes without side effects\"",
          "1866: optional = false",
          "1867: python-versions = \"*\"",
          "1868: files = [",
          "1871: ]",
          "1873: [package.extras]",
          "",
          "[Removed Lines]",
          "1864: version = \"0.2.2\"",
          "1869:     {file = \"pure_eval-0.2.2-py3-none-any.whl\", hash = \"sha256:01eaab343580944bc56080ebe0a674b39ec44a945e6d09ba7db3cb8cec289350\"},",
          "1870:     {file = \"pure_eval-0.2.2.tar.gz\", hash = \"sha256:2b45320af6dfaa1750f543d714b6d1c520a1688dec6fd24d339063ce0aaa9ac3\"},",
          "",
          "[Added Lines]",
          "1864: version = \"0.2.3\"",
          "1869:     {file = \"pure_eval-0.2.3-py3-none-any.whl\", hash = \"sha256:1db8e35b67b3d218d818ae653e27f06c3aa420901fa7b081ca98cbedc874e0d0\"},",
          "1870:     {file = \"pure_eval-0.2.3.tar.gz\", hash = \"sha256:5f4e983f40564c576c7c8635ae88db5956bb2229d7e9237d03b3c0b0190eaf42\"},",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2485: [[package]]",
          "2486: name = \"rpds-py\"",
          "2488: description = \"Python bindings to Rust's persistent data structures (rpds)\"",
          "2489: optional = false",
          "2490: python-versions = \">=3.8\"",
          "2491: files = [",
          "2591: ]",
          "2593: [[package]]",
          "2594: name = \"ruff\"",
          "2596: description = \"An extremely fast Python linter and code formatter, written in Rust.\"",
          "2597: optional = false",
          "2598: python-versions = \">=3.7\"",
          "2599: files = [",
          "2618: ]",
          "2620: [[package]]",
          "",
          "[Removed Lines]",
          "2487: version = \"0.19.0\"",
          "2492:     {file = \"rpds_py-0.19.0-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:fb37bd599f031f1a6fb9e58ec62864ccf3ad549cf14bac527dbfa97123edcca4\"},",
          "2493:     {file = \"rpds_py-0.19.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:3384d278df99ec2c6acf701d067147320b864ef6727405d6470838476e44d9e8\"},",
          "2494:     {file = \"rpds_py-0.19.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e54548e0be3ac117595408fd4ca0ac9278fde89829b0b518be92863b17ff67a2\"},",
          "2495:     {file = \"rpds_py-0.19.0-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:8eb488ef928cdbc05a27245e52de73c0d7c72a34240ef4d9893fdf65a8c1a955\"},",
          "2496:     {file = \"rpds_py-0.19.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:a5da93debdfe27b2bfc69eefb592e1831d957b9535e0943a0ee8b97996de21b5\"},",
          "2497:     {file = \"rpds_py-0.19.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:79e205c70afddd41f6ee79a8656aec738492a550247a7af697d5bd1aee14f766\"},",
          "2498:     {file = \"rpds_py-0.19.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:959179efb3e4a27610e8d54d667c02a9feaa86bbabaf63efa7faa4dfa780d4f1\"},",
          "2499:     {file = \"rpds_py-0.19.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:a6e605bb9edcf010f54f8b6a590dd23a4b40a8cb141255eec2a03db249bc915b\"},",
          "2500:     {file = \"rpds_py-0.19.0-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:9133d75dc119a61d1a0ded38fb9ba40a00ef41697cc07adb6ae098c875195a3f\"},",
          "2501:     {file = \"rpds_py-0.19.0-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:dd36b712d35e757e28bf2f40a71e8f8a2d43c8b026d881aa0c617b450d6865c9\"},",
          "2502:     {file = \"rpds_py-0.19.0-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:354f3a91718489912f2e0fc331c24eaaf6a4565c080e00fbedb6015857c00582\"},",
          "2503:     {file = \"rpds_py-0.19.0-cp310-none-win32.whl\", hash = \"sha256:ebcbf356bf5c51afc3290e491d3722b26aaf5b6af3c1c7f6a1b757828a46e336\"},",
          "2504:     {file = \"rpds_py-0.19.0-cp310-none-win_amd64.whl\", hash = \"sha256:75a6076289b2df6c8ecb9d13ff79ae0cad1d5fb40af377a5021016d58cd691ec\"},",
          "2505:     {file = \"rpds_py-0.19.0-cp311-cp311-macosx_10_12_x86_64.whl\", hash = \"sha256:6d45080095e585f8c5097897313def60caa2046da202cdb17a01f147fb263b81\"},",
          "2506:     {file = \"rpds_py-0.19.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:c5c9581019c96f865483d031691a5ff1cc455feb4d84fc6920a5ffc48a794d8a\"},",
          "2507:     {file = \"rpds_py-0.19.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1540d807364c84516417115c38f0119dfec5ea5c0dd9a25332dea60b1d26fc4d\"},",
          "2508:     {file = \"rpds_py-0.19.0-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:9e65489222b410f79711dc3d2d5003d2757e30874096b2008d50329ea4d0f88c\"},",
          "2509:     {file = \"rpds_py-0.19.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:9da6f400eeb8c36f72ef6646ea530d6d175a4f77ff2ed8dfd6352842274c1d8b\"},",
          "2510:     {file = \"rpds_py-0.19.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:37f46bb11858717e0efa7893c0f7055c43b44c103e40e69442db5061cb26ed34\"},",
          "2511:     {file = \"rpds_py-0.19.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:071d4adc734de562bd11d43bd134330fb6249769b2f66b9310dab7460f4bf714\"},",
          "2512:     {file = \"rpds_py-0.19.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:9625367c8955e4319049113ea4f8fee0c6c1145192d57946c6ffcd8fe8bf48dd\"},",
          "2513:     {file = \"rpds_py-0.19.0-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:e19509145275d46bc4d1e16af0b57a12d227c8253655a46bbd5ec317e941279d\"},",
          "2514:     {file = \"rpds_py-0.19.0-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:4d438e4c020d8c39961deaf58f6913b1bf8832d9b6f62ec35bd93e97807e9cbc\"},",
          "2515:     {file = \"rpds_py-0.19.0-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:90bf55d9d139e5d127193170f38c584ed3c79e16638890d2e36f23aa1630b952\"},",
          "2516:     {file = \"rpds_py-0.19.0-cp311-none-win32.whl\", hash = \"sha256:8d6ad132b1bc13d05ffe5b85e7a01a3998bf3a6302ba594b28d61b8c2cf13aaf\"},",
          "2517:     {file = \"rpds_py-0.19.0-cp311-none-win_amd64.whl\", hash = \"sha256:7ec72df7354e6b7f6eb2a17fa6901350018c3a9ad78e48d7b2b54d0412539a67\"},",
          "2518:     {file = \"rpds_py-0.19.0-cp312-cp312-macosx_10_12_x86_64.whl\", hash = \"sha256:5095a7c838a8647c32aa37c3a460d2c48debff7fc26e1136aee60100a8cd8f68\"},",
          "2519:     {file = \"rpds_py-0.19.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:6f2f78ef14077e08856e788fa482107aa602636c16c25bdf59c22ea525a785e9\"},",
          "2520:     {file = \"rpds_py-0.19.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b7cc6cb44f8636fbf4a934ca72f3e786ba3c9f9ba4f4d74611e7da80684e48d2\"},",
          "2521:     {file = \"rpds_py-0.19.0-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:cf902878b4af334a09de7a45badbff0389e7cf8dc2e4dcf5f07125d0b7c2656d\"},",
          "2522:     {file = \"rpds_py-0.19.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:688aa6b8aa724db1596514751ffb767766e02e5c4a87486ab36b8e1ebc1aedac\"},",
          "2523:     {file = \"rpds_py-0.19.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:57dbc9167d48e355e2569346b5aa4077f29bf86389c924df25c0a8b9124461fb\"},",
          "2524:     {file = \"rpds_py-0.19.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3b4cf5a9497874822341c2ebe0d5850fed392034caadc0bad134ab6822c0925b\"},",
          "2525:     {file = \"rpds_py-0.19.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:8a790d235b9d39c70a466200d506bb33a98e2ee374a9b4eec7a8ac64c2c261fa\"},",
          "2526:     {file = \"rpds_py-0.19.0-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:1d16089dfa58719c98a1c06f2daceba6d8e3fb9b5d7931af4a990a3c486241cb\"},",
          "2527:     {file = \"rpds_py-0.19.0-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:bc9128e74fe94650367fe23f37074f121b9f796cabbd2f928f13e9661837296d\"},",
          "2528:     {file = \"rpds_py-0.19.0-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:c8f77e661ffd96ff104bebf7d0f3255b02aa5d5b28326f5408d6284c4a8b3248\"},",
          "2529:     {file = \"rpds_py-0.19.0-cp312-none-win32.whl\", hash = \"sha256:5f83689a38e76969327e9b682be5521d87a0c9e5a2e187d2bc6be4765f0d4600\"},",
          "2530:     {file = \"rpds_py-0.19.0-cp312-none-win_amd64.whl\", hash = \"sha256:06925c50f86da0596b9c3c64c3837b2481337b83ef3519e5db2701df695453a4\"},",
          "2531:     {file = \"rpds_py-0.19.0-cp38-cp38-macosx_10_12_x86_64.whl\", hash = \"sha256:52e466bea6f8f3a44b1234570244b1cff45150f59a4acae3fcc5fd700c2993ca\"},",
          "2532:     {file = \"rpds_py-0.19.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:e21cc693045fda7f745c790cb687958161ce172ffe3c5719ca1764e752237d16\"},",
          "2533:     {file = \"rpds_py-0.19.0-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6b31f059878eb1f5da8b2fd82480cc18bed8dcd7fb8fe68370e2e6285fa86da6\"},",
          "2534:     {file = \"rpds_py-0.19.0-cp38-cp38-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:1dd46f309e953927dd018567d6a9e2fb84783963650171f6c5fe7e5c41fd5666\"},",
          "2535:     {file = \"rpds_py-0.19.0-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:34a01a4490e170376cd79258b7f755fa13b1a6c3667e872c8e35051ae857a92b\"},",
          "2536:     {file = \"rpds_py-0.19.0-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:bcf426a8c38eb57f7bf28932e68425ba86def6e756a5b8cb4731d8e62e4e0223\"},",
          "2537:     {file = \"rpds_py-0.19.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f68eea5df6347d3f1378ce992d86b2af16ad7ff4dcb4a19ccdc23dea901b87fb\"},",
          "2538:     {file = \"rpds_py-0.19.0-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:dab8d921b55a28287733263c0e4c7db11b3ee22aee158a4de09f13c93283c62d\"},",
          "2539:     {file = \"rpds_py-0.19.0-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:6fe87efd7f47266dfc42fe76dae89060038f1d9cb911f89ae7e5084148d1cc08\"},",
          "2540:     {file = \"rpds_py-0.19.0-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:535d4b52524a961d220875688159277f0e9eeeda0ac45e766092bfb54437543f\"},",
          "2541:     {file = \"rpds_py-0.19.0-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:8b1a94b8afc154fbe36978a511a1f155f9bd97664e4f1f7a374d72e180ceb0ae\"},",
          "2542:     {file = \"rpds_py-0.19.0-cp38-none-win32.whl\", hash = \"sha256:7c98298a15d6b90c8f6e3caa6457f4f022423caa5fa1a1ca7a5e9e512bdb77a4\"},",
          "2543:     {file = \"rpds_py-0.19.0-cp38-none-win_amd64.whl\", hash = \"sha256:b0da31853ab6e58a11db3205729133ce0df26e6804e93079dee095be3d681dc1\"},",
          "2544:     {file = \"rpds_py-0.19.0-cp39-cp39-macosx_10_12_x86_64.whl\", hash = \"sha256:5039e3cef7b3e7a060de468a4a60a60a1f31786da94c6cb054e7a3c75906111c\"},",
          "2545:     {file = \"rpds_py-0.19.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:ab1932ca6cb8c7499a4d87cb21ccc0d3326f172cfb6a64021a889b591bb3045c\"},",
          "2546:     {file = \"rpds_py-0.19.0-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f2afd2164a1e85226fcb6a1da77a5c8896c18bfe08e82e8ceced5181c42d2179\"},",
          "2547:     {file = \"rpds_py-0.19.0-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:b1c30841f5040de47a0046c243fc1b44ddc87d1b12435a43b8edff7e7cb1e0d0\"},",
          "2548:     {file = \"rpds_py-0.19.0-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:f757f359f30ec7dcebca662a6bd46d1098f8b9fb1fcd661a9e13f2e8ce343ba1\"},",
          "2549:     {file = \"rpds_py-0.19.0-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:15e65395a59d2e0e96caf8ee5389ffb4604e980479c32742936ddd7ade914b22\"},",
          "2550:     {file = \"rpds_py-0.19.0-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:cb0f6eb3a320f24b94d177e62f4074ff438f2ad9d27e75a46221904ef21a7b05\"},",
          "2551:     {file = \"rpds_py-0.19.0-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:b228e693a2559888790936e20f5f88b6e9f8162c681830eda303bad7517b4d5a\"},",
          "2552:     {file = \"rpds_py-0.19.0-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:2575efaa5d949c9f4e2cdbe7d805d02122c16065bfb8d95c129372d65a291a0b\"},",
          "2553:     {file = \"rpds_py-0.19.0-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:5c872814b77a4e84afa293a1bee08c14daed1068b2bb1cc312edbf020bbbca2b\"},",
          "2554:     {file = \"rpds_py-0.19.0-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:850720e1b383df199b8433a20e02b25b72f0fded28bc03c5bd79e2ce7ef050be\"},",
          "2555:     {file = \"rpds_py-0.19.0-cp39-none-win32.whl\", hash = \"sha256:ce84a7efa5af9f54c0aa7692c45861c1667080814286cacb9958c07fc50294fb\"},",
          "2556:     {file = \"rpds_py-0.19.0-cp39-none-win_amd64.whl\", hash = \"sha256:1c26da90b8d06227d7769f34915913911222d24ce08c0ab2d60b354e2d9c7aff\"},",
          "2557:     {file = \"rpds_py-0.19.0-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:75969cf900d7be665ccb1622a9aba225cf386bbc9c3bcfeeab9f62b5048f4a07\"},",
          "2558:     {file = \"rpds_py-0.19.0-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:8445f23f13339da640d1be8e44e5baf4af97e396882ebbf1692aecd67f67c479\"},",
          "2559:     {file = \"rpds_py-0.19.0-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a5a7c1062ef8aea3eda149f08120f10795835fc1c8bc6ad948fb9652a113ca55\"},",
          "2560:     {file = \"rpds_py-0.19.0-pp310-pypy310_pp73-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:462b0c18fbb48fdbf980914a02ee38c423a25fcc4cf40f66bacc95a2d2d73bc8\"},",
          "2561:     {file = \"rpds_py-0.19.0-pp310-pypy310_pp73-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:3208f9aea18991ac7f2b39721e947bbd752a1abbe79ad90d9b6a84a74d44409b\"},",
          "2562:     {file = \"rpds_py-0.19.0-pp310-pypy310_pp73-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:c3444fe52b82f122d8a99bf66777aed6b858d392b12f4c317da19f8234db4533\"},",
          "2563:     {file = \"rpds_py-0.19.0-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:88cb4bac7185a9f0168d38c01d7a00addece9822a52870eee26b8d5b61409213\"},",
          "2564:     {file = \"rpds_py-0.19.0-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:6b130bd4163c93798a6b9bb96be64a7c43e1cec81126ffa7ffaa106e1fc5cef5\"},",
          "2565:     {file = \"rpds_py-0.19.0-pp310-pypy310_pp73-musllinux_1_2_aarch64.whl\", hash = \"sha256:a707b158b4410aefb6b054715545bbb21aaa5d5d0080217290131c49c2124a6e\"},",
          "2566:     {file = \"rpds_py-0.19.0-pp310-pypy310_pp73-musllinux_1_2_i686.whl\", hash = \"sha256:dc9ac4659456bde7c567107556ab065801622396b435a3ff213daef27b495388\"},",
          "2567:     {file = \"rpds_py-0.19.0-pp310-pypy310_pp73-musllinux_1_2_x86_64.whl\", hash = \"sha256:81ea573aa46d3b6b3d890cd3c0ad82105985e6058a4baed03cf92518081eec8c\"},",
          "2568:     {file = \"rpds_py-0.19.0-pp38-pypy38_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:3f148c3f47f7f29a79c38cc5d020edcb5ca780020fab94dbc21f9af95c463581\"},",
          "2569:     {file = \"rpds_py-0.19.0-pp38-pypy38_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:b0906357f90784a66e89ae3eadc2654f36c580a7d65cf63e6a616e4aec3a81be\"},",
          "2570:     {file = \"rpds_py-0.19.0-pp38-pypy38_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:f629ecc2db6a4736b5ba95a8347b0089240d69ad14ac364f557d52ad68cf94b0\"},",
          "2571:     {file = \"rpds_py-0.19.0-pp38-pypy38_pp73-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:c6feacd1d178c30e5bc37184526e56740342fd2aa6371a28367bad7908d454fc\"},",
          "2572:     {file = \"rpds_py-0.19.0-pp38-pypy38_pp73-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:ae8b6068ee374fdfab63689be0963333aa83b0815ead5d8648389a8ded593378\"},",
          "2573:     {file = \"rpds_py-0.19.0-pp38-pypy38_pp73-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:78d57546bad81e0da13263e4c9ce30e96dcbe720dbff5ada08d2600a3502e526\"},",
          "2574:     {file = \"rpds_py-0.19.0-pp38-pypy38_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a8b6683a37338818646af718c9ca2a07f89787551057fae57c4ec0446dc6224b\"},",
          "2575:     {file = \"rpds_py-0.19.0-pp38-pypy38_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:e8481b946792415adc07410420d6fc65a352b45d347b78fec45d8f8f0d7496f0\"},",
          "2576:     {file = \"rpds_py-0.19.0-pp38-pypy38_pp73-musllinux_1_2_aarch64.whl\", hash = \"sha256:bec35eb20792ea64c3c57891bc3ca0bedb2884fbac2c8249d9b731447ecde4fa\"},",
          "2577:     {file = \"rpds_py-0.19.0-pp38-pypy38_pp73-musllinux_1_2_i686.whl\", hash = \"sha256:aa5476c3e3a402c37779e95f7b4048db2cb5b0ed0b9d006983965e93f40fe05a\"},",
          "2578:     {file = \"rpds_py-0.19.0-pp38-pypy38_pp73-musllinux_1_2_x86_64.whl\", hash = \"sha256:19d02c45f2507b489fd4df7b827940f1420480b3e2e471e952af4d44a1ea8e34\"},",
          "2579:     {file = \"rpds_py-0.19.0-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:a3e2fd14c5d49ee1da322672375963f19f32b3d5953f0615b175ff7b9d38daed\"},",
          "2580:     {file = \"rpds_py-0.19.0-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:93a91c2640645303e874eada51f4f33351b84b351a689d470f8108d0e0694210\"},",
          "2581:     {file = \"rpds_py-0.19.0-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e5b9fc03bf76a94065299d4a2ecd8dfbae4ae8e2e8098bbfa6ab6413ca267709\"},",
          "2582:     {file = \"rpds_py-0.19.0-pp39-pypy39_pp73-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:5a4b07cdf3f84310c08c1de2c12ddadbb7a77568bcb16e95489f9c81074322ed\"},",
          "2583:     {file = \"rpds_py-0.19.0-pp39-pypy39_pp73-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:ba0ed0dc6763d8bd6e5de5cf0d746d28e706a10b615ea382ac0ab17bb7388633\"},",
          "2584:     {file = \"rpds_py-0.19.0-pp39-pypy39_pp73-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:474bc83233abdcf2124ed3f66230a1c8435896046caa4b0b5ab6013c640803cc\"},",
          "2585:     {file = \"rpds_py-0.19.0-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:329c719d31362355a96b435f4653e3b4b061fcc9eba9f91dd40804ca637d914e\"},",
          "2586:     {file = \"rpds_py-0.19.0-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:ef9101f3f7b59043a34f1dccbb385ca760467590951952d6701df0da9893ca0c\"},",
          "2587:     {file = \"rpds_py-0.19.0-pp39-pypy39_pp73-musllinux_1_2_aarch64.whl\", hash = \"sha256:0121803b0f424ee2109d6e1f27db45b166ebaa4b32ff47d6aa225642636cd834\"},",
          "2588:     {file = \"rpds_py-0.19.0-pp39-pypy39_pp73-musllinux_1_2_i686.whl\", hash = \"sha256:8344127403dea42f5970adccf6c5957a71a47f522171fafaf4c6ddb41b61703a\"},",
          "2589:     {file = \"rpds_py-0.19.0-pp39-pypy39_pp73-musllinux_1_2_x86_64.whl\", hash = \"sha256:443cec402ddd650bb2b885113e1dcedb22b1175c6be223b14246a714b61cd521\"},",
          "2590:     {file = \"rpds_py-0.19.0.tar.gz\", hash = \"sha256:4fdc9afadbeb393b4bbbad75481e0ea78e4469f2e1d713a90811700830b553a9\"},",
          "2595: version = \"0.5.3\"",
          "2600:     {file = \"ruff-0.5.3-py3-none-linux_armv6l.whl\", hash = \"sha256:b12424d9db7347fa63c5ed9af010003338c63c629fb9c9c6adb2aa4f5699729b\"},",
          "2601:     {file = \"ruff-0.5.3-py3-none-macosx_10_12_x86_64.whl\", hash = \"sha256:b8d72c5684bbd4ed304a9a955ee2e67f57b35f6193222ade910cca8a805490e3\"},",
          "2602:     {file = \"ruff-0.5.3-py3-none-macosx_11_0_arm64.whl\", hash = \"sha256:d2fc2cdb85ccac1e816cc9d5d8cedefd93661bd957756d902543af32a6b04a71\"},",
          "2603:     {file = \"ruff-0.5.3-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:cf4bc751240b2fab5d19254571bcacb315c7b0b00bf3c912d52226a82bbec073\"},",
          "2604:     {file = \"ruff-0.5.3-py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:bc697ec874fdd7c7ba0a85ec76ab38f8595224868d67f097c5ffc21136e72fcd\"},",
          "2605:     {file = \"ruff-0.5.3-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:e791d34d3557a3819b3704bc1f087293c821083fa206812842fa363f6018a192\"},",
          "2606:     {file = \"ruff-0.5.3-py3-none-manylinux_2_17_ppc64.manylinux2014_ppc64.whl\", hash = \"sha256:76bb5a87fd397520b91a83eae8a2f7985236d42dd9459f09eef58e7f5c1d8316\"},",
          "2607:     {file = \"ruff-0.5.3-py3-none-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:a8cfc7a26422c78e94f1ec78ec02501bbad2df5834907e75afe474cc6b83a8c1\"},",
          "2608:     {file = \"ruff-0.5.3-py3-none-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:96066c4328a49fce2dd40e80f7117987369feec30ab771516cf95f1cc2db923c\"},",
          "2609:     {file = \"ruff-0.5.3-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:03bfe9ab5bdc0b08470c3b261643ad54ea86edc32b64d1e080892d7953add3ad\"},",
          "2610:     {file = \"ruff-0.5.3-py3-none-musllinux_1_2_aarch64.whl\", hash = \"sha256:7704582a026fa02cca83efd76671a98ee6eb412c4230209efe5e2a006c06db62\"},",
          "2611:     {file = \"ruff-0.5.3-py3-none-musllinux_1_2_armv7l.whl\", hash = \"sha256:08058d077e21b856d32ebf483443390e29dc44d927608dc8f092ff6776519da9\"},",
          "2612:     {file = \"ruff-0.5.3-py3-none-musllinux_1_2_i686.whl\", hash = \"sha256:77d49484429ed7c7e6e2e75a753f153b7b58f875bdb4158ad85af166a1ec1822\"},",
          "2613:     {file = \"ruff-0.5.3-py3-none-musllinux_1_2_x86_64.whl\", hash = \"sha256:642cbff6cbfa38d2566d8db086508d6f472edb136cbfcc4ea65997745368c29e\"},",
          "2614:     {file = \"ruff-0.5.3-py3-none-win32.whl\", hash = \"sha256:eafc45dd8bdc37a00b28e68cc038daf3ca8c233d73fea276dcd09defb1352841\"},",
          "2615:     {file = \"ruff-0.5.3-py3-none-win_amd64.whl\", hash = \"sha256:cbaec2ddf4f78e5e9ecf5456ea0f496991358a1d883862ed0b9e947e2b6aea93\"},",
          "2616:     {file = \"ruff-0.5.3-py3-none-win_arm64.whl\", hash = \"sha256:05fbd2cb404775d6cd7f2ff49504e2d20e13ef95fa203bd1ab22413af70d420b\"},",
          "2617:     {file = \"ruff-0.5.3.tar.gz\", hash = \"sha256:2a3eb4f1841771fa5b67a56be9c2d16fd3cc88e378bd86aaeaec2f7e6bcdd0a2\"},",
          "",
          "[Added Lines]",
          "2487: version = \"0.19.1\"",
          "2492:     {file = \"rpds_py-0.19.1-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:aaf71f95b21f9dc708123335df22e5a2fef6307e3e6f9ed773b2e0938cc4d491\"},",
          "2493:     {file = \"rpds_py-0.19.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:ca0dda0c5715efe2ab35bb83f813f681ebcd2840d8b1b92bfc6fe3ab382fae4a\"},",
          "2494:     {file = \"rpds_py-0.19.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:81db2e7282cc0487f500d4db203edc57da81acde9e35f061d69ed983228ffe3b\"},",
          "2495:     {file = \"rpds_py-0.19.1-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:1a8dfa125b60ec00c7c9baef945bb04abf8ac772d8ebefd79dae2a5f316d7850\"},",
          "2496:     {file = \"rpds_py-0.19.1-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:271accf41b02687cef26367c775ab220372ee0f4925591c6796e7c148c50cab5\"},",
          "2497:     {file = \"rpds_py-0.19.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:f9bc4161bd3b970cd6a6fcda70583ad4afd10f2750609fb1f3ca9505050d4ef3\"},",
          "2498:     {file = \"rpds_py-0.19.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f0cf2a0dbb5987da4bd92a7ca727eadb225581dd9681365beba9accbe5308f7d\"},",
          "2499:     {file = \"rpds_py-0.19.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:b5e28e56143750808c1c79c70a16519e9bc0a68b623197b96292b21b62d6055c\"},",
          "2500:     {file = \"rpds_py-0.19.1-cp310-cp310-musllinux_1_2_aarch64.whl\", hash = \"sha256:c7af6f7b80f687b33a4cdb0a785a5d4de1fb027a44c9a049d8eb67d5bfe8a687\"},",
          "2501:     {file = \"rpds_py-0.19.1-cp310-cp310-musllinux_1_2_i686.whl\", hash = \"sha256:e429fc517a1c5e2a70d576077231538a98d59a45dfc552d1ac45a132844e6dfb\"},",
          "2502:     {file = \"rpds_py-0.19.1-cp310-cp310-musllinux_1_2_x86_64.whl\", hash = \"sha256:d2dbd8f4990d4788cb122f63bf000357533f34860d269c1a8e90ae362090ff3a\"},",
          "2503:     {file = \"rpds_py-0.19.1-cp310-none-win32.whl\", hash = \"sha256:e0f9d268b19e8f61bf42a1da48276bcd05f7ab5560311f541d22557f8227b866\"},",
          "2504:     {file = \"rpds_py-0.19.1-cp310-none-win_amd64.whl\", hash = \"sha256:df7c841813f6265e636fe548a49664c77af31ddfa0085515326342a751a6ba51\"},",
          "2505:     {file = \"rpds_py-0.19.1-cp311-cp311-macosx_10_12_x86_64.whl\", hash = \"sha256:902cf4739458852fe917104365ec0efbea7d29a15e4276c96a8d33e6ed8ec137\"},",
          "2506:     {file = \"rpds_py-0.19.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:f3d73022990ab0c8b172cce57c69fd9a89c24fd473a5e79cbce92df87e3d9c48\"},",
          "2507:     {file = \"rpds_py-0.19.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3837c63dd6918a24de6c526277910e3766d8c2b1627c500b155f3eecad8fad65\"},",
          "2508:     {file = \"rpds_py-0.19.1-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:cdb7eb3cf3deb3dd9e7b8749323b5d970052711f9e1e9f36364163627f96da58\"},",
          "2509:     {file = \"rpds_py-0.19.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:26ab43b6d65d25b1a333c8d1b1c2f8399385ff683a35ab5e274ba7b8bb7dc61c\"},",
          "2510:     {file = \"rpds_py-0.19.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:75130df05aae7a7ac171b3b5b24714cffeabd054ad2ebc18870b3aa4526eba23\"},",
          "2511:     {file = \"rpds_py-0.19.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c34f751bf67cab69638564eee34023909380ba3e0d8ee7f6fe473079bf93f09b\"},",
          "2512:     {file = \"rpds_py-0.19.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:f2671cb47e50a97f419a02cd1e0c339b31de017b033186358db92f4d8e2e17d8\"},",
          "2513:     {file = \"rpds_py-0.19.1-cp311-cp311-musllinux_1_2_aarch64.whl\", hash = \"sha256:3c73254c256081704dba0a333457e2fb815364018788f9b501efe7c5e0ada401\"},",
          "2514:     {file = \"rpds_py-0.19.1-cp311-cp311-musllinux_1_2_i686.whl\", hash = \"sha256:4383beb4a29935b8fa28aca8fa84c956bf545cb0c46307b091b8d312a9150e6a\"},",
          "2515:     {file = \"rpds_py-0.19.1-cp311-cp311-musllinux_1_2_x86_64.whl\", hash = \"sha256:dbceedcf4a9329cc665452db1aaf0845b85c666e4885b92ee0cddb1dbf7e052a\"},",
          "2516:     {file = \"rpds_py-0.19.1-cp311-none-win32.whl\", hash = \"sha256:f0a6d4a93d2a05daec7cb885157c97bbb0be4da739d6f9dfb02e101eb40921cd\"},",
          "2517:     {file = \"rpds_py-0.19.1-cp311-none-win_amd64.whl\", hash = \"sha256:c149a652aeac4902ecff2dd93c3b2681c608bd5208c793c4a99404b3e1afc87c\"},",
          "2518:     {file = \"rpds_py-0.19.1-cp312-cp312-macosx_10_12_x86_64.whl\", hash = \"sha256:56313be667a837ff1ea3508cebb1ef6681d418fa2913a0635386cf29cff35165\"},",
          "2519:     {file = \"rpds_py-0.19.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:6d1d7539043b2b31307f2c6c72957a97c839a88b2629a348ebabe5aa8b626d6b\"},",
          "2520:     {file = \"rpds_py-0.19.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:3e1dc59a5e7bc7f44bd0c048681f5e05356e479c50be4f2c1a7089103f1621d5\"},",
          "2521:     {file = \"rpds_py-0.19.1-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:b8f78398e67a7227aefa95f876481485403eb974b29e9dc38b307bb6eb2315ea\"},",
          "2522:     {file = \"rpds_py-0.19.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:ef07a0a1d254eeb16455d839cef6e8c2ed127f47f014bbda64a58b5482b6c836\"},",
          "2523:     {file = \"rpds_py-0.19.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:8124101e92c56827bebef084ff106e8ea11c743256149a95b9fd860d3a4f331f\"},",
          "2524:     {file = \"rpds_py-0.19.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:08ce9c95a0b093b7aec75676b356a27879901488abc27e9d029273d280438505\"},",
          "2525:     {file = \"rpds_py-0.19.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:0b02dd77a2de6e49078c8937aadabe933ceac04b41c5dde5eca13a69f3cf144e\"},",
          "2526:     {file = \"rpds_py-0.19.1-cp312-cp312-musllinux_1_2_aarch64.whl\", hash = \"sha256:4dd02e29c8cbed21a1875330b07246b71121a1c08e29f0ee3db5b4cfe16980c4\"},",
          "2527:     {file = \"rpds_py-0.19.1-cp312-cp312-musllinux_1_2_i686.whl\", hash = \"sha256:9c7042488165f7251dc7894cd533a875d2875af6d3b0e09eda9c4b334627ad1c\"},",
          "2528:     {file = \"rpds_py-0.19.1-cp312-cp312-musllinux_1_2_x86_64.whl\", hash = \"sha256:f809a17cc78bd331e137caa25262b507225854073fd319e987bd216bed911b7c\"},",
          "2529:     {file = \"rpds_py-0.19.1-cp312-none-win32.whl\", hash = \"sha256:3ddab996807c6b4227967fe1587febade4e48ac47bb0e2d3e7858bc621b1cace\"},",
          "2530:     {file = \"rpds_py-0.19.1-cp312-none-win_amd64.whl\", hash = \"sha256:32e0db3d6e4f45601b58e4ac75c6f24afbf99818c647cc2066f3e4b192dabb1f\"},",
          "2531:     {file = \"rpds_py-0.19.1-cp313-cp313-macosx_10_12_x86_64.whl\", hash = \"sha256:747251e428406b05fc86fee3904ee19550c4d2d19258cef274e2151f31ae9d38\"},",
          "2532:     {file = \"rpds_py-0.19.1-cp313-cp313-macosx_11_0_arm64.whl\", hash = \"sha256:dc733d35f861f8d78abfaf54035461e10423422999b360966bf1c443cbc42705\"},",
          "2533:     {file = \"rpds_py-0.19.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bbda75f245caecff8faa7e32ee94dfaa8312a3367397975527f29654cd17a6ed\"},",
          "2534:     {file = \"rpds_py-0.19.1-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:bd04d8cab16cab5b0a9ffc7d10f0779cf1120ab16c3925404428f74a0a43205a\"},",
          "2535:     {file = \"rpds_py-0.19.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:e2d66eb41ffca6cc3c91d8387509d27ba73ad28371ef90255c50cb51f8953301\"},",
          "2536:     {file = \"rpds_py-0.19.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:fdf4890cda3b59170009d012fca3294c00140e7f2abe1910e6a730809d0f3f9b\"},",
          "2537:     {file = \"rpds_py-0.19.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d1fa67ef839bad3815124f5f57e48cd50ff392f4911a9f3cf449d66fa3df62a5\"},",
          "2538:     {file = \"rpds_py-0.19.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:b82c9514c6d74b89a370c4060bdb80d2299bc6857e462e4a215b4ef7aa7b090e\"},",
          "2539:     {file = \"rpds_py-0.19.1-cp313-cp313-musllinux_1_2_aarch64.whl\", hash = \"sha256:c7b07959866a6afb019abb9564d8a55046feb7a84506c74a6f197cbcdf8a208e\"},",
          "2540:     {file = \"rpds_py-0.19.1-cp313-cp313-musllinux_1_2_i686.whl\", hash = \"sha256:4f580ae79d0b861dfd912494ab9d477bea535bfb4756a2269130b6607a21802e\"},",
          "2541:     {file = \"rpds_py-0.19.1-cp313-cp313-musllinux_1_2_x86_64.whl\", hash = \"sha256:c6d20c8896c00775e6f62d8373aba32956aa0b850d02b5ec493f486c88e12859\"},",
          "2542:     {file = \"rpds_py-0.19.1-cp313-none-win32.whl\", hash = \"sha256:afedc35fe4b9e30ab240b208bb9dc8938cb4afe9187589e8d8d085e1aacb8309\"},",
          "2543:     {file = \"rpds_py-0.19.1-cp313-none-win_amd64.whl\", hash = \"sha256:1d4af2eb520d759f48f1073ad3caef997d1bfd910dc34e41261a595d3f038a94\"},",
          "2544:     {file = \"rpds_py-0.19.1-cp38-cp38-macosx_10_12_x86_64.whl\", hash = \"sha256:34bca66e2e3eabc8a19e9afe0d3e77789733c702c7c43cd008e953d5d1463fde\"},",
          "2545:     {file = \"rpds_py-0.19.1-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:24f8ae92c7fae7c28d0fae9b52829235df83f34847aa8160a47eb229d9666c7b\"},",
          "2546:     {file = \"rpds_py-0.19.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:71157f9db7f6bc6599a852852f3389343bea34315b4e6f109e5cbc97c1fb2963\"},",
          "2547:     {file = \"rpds_py-0.19.1-cp38-cp38-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:1d494887d40dc4dd0d5a71e9d07324e5c09c4383d93942d391727e7a40ff810b\"},",
          "2548:     {file = \"rpds_py-0.19.1-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:7b3661e6d4ba63a094138032c1356d557de5b3ea6fd3cca62a195f623e381c76\"},",
          "2549:     {file = \"rpds_py-0.19.1-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:97fbb77eaeb97591efdc654b8b5f3ccc066406ccfb3175b41382f221ecc216e8\"},",
          "2550:     {file = \"rpds_py-0.19.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:4cc4bc73e53af8e7a42c8fd7923bbe35babacfa7394ae9240b3430b5dcf16b2a\"},",
          "2551:     {file = \"rpds_py-0.19.1-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:35af5e4d5448fa179fd7fff0bba0fba51f876cd55212f96c8bbcecc5c684ae5c\"},",
          "2552:     {file = \"rpds_py-0.19.1-cp38-cp38-musllinux_1_2_aarch64.whl\", hash = \"sha256:3511f6baf8438326e351097cecd137eb45c5f019944fe0fd0ae2fea2fd26be39\"},",
          "2553:     {file = \"rpds_py-0.19.1-cp38-cp38-musllinux_1_2_i686.whl\", hash = \"sha256:57863d16187995c10fe9cf911b897ed443ac68189179541734502353af33e693\"},",
          "2554:     {file = \"rpds_py-0.19.1-cp38-cp38-musllinux_1_2_x86_64.whl\", hash = \"sha256:9e318e6786b1e750a62f90c6f7fa8b542102bdcf97c7c4de2a48b50b61bd36ec\"},",
          "2555:     {file = \"rpds_py-0.19.1-cp38-none-win32.whl\", hash = \"sha256:53dbc35808c6faa2ce3e48571f8f74ef70802218554884787b86a30947842a14\"},",
          "2556:     {file = \"rpds_py-0.19.1-cp38-none-win_amd64.whl\", hash = \"sha256:8df1c283e57c9cb4d271fdc1875f4a58a143a2d1698eb0d6b7c0d7d5f49c53a1\"},",
          "2557:     {file = \"rpds_py-0.19.1-cp39-cp39-macosx_10_12_x86_64.whl\", hash = \"sha256:e76c902d229a3aa9d5ceb813e1cbcc69bf5bda44c80d574ff1ac1fa3136dea71\"},",
          "2558:     {file = \"rpds_py-0.19.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:de1f7cd5b6b351e1afd7568bdab94934d656abe273d66cda0ceea43bbc02a0c2\"},",
          "2559:     {file = \"rpds_py-0.19.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:24fc5a84777cb61692d17988989690d6f34f7f95968ac81398d67c0d0994a897\"},",
          "2560:     {file = \"rpds_py-0.19.1-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:74129d5ffc4cde992d89d345f7f7d6758320e5d44a369d74d83493429dad2de5\"},",
          "2561:     {file = \"rpds_py-0.19.1-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:5e360188b72f8080fefa3adfdcf3618604cc8173651c9754f189fece068d2a45\"},",
          "2562:     {file = \"rpds_py-0.19.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:13e6d4840897d4e4e6b2aa1443e3a8eca92b0402182aafc5f4ca1f5e24f9270a\"},",
          "2563:     {file = \"rpds_py-0.19.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:f09529d2332264a902688031a83c19de8fda5eb5881e44233286b9c9ec91856d\"},",
          "2564:     {file = \"rpds_py-0.19.1-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:0d4b52811dcbc1aba08fd88d475f75b4f6db0984ba12275d9bed1a04b2cae9b5\"},",
          "2565:     {file = \"rpds_py-0.19.1-cp39-cp39-musllinux_1_2_aarch64.whl\", hash = \"sha256:dd635c2c4043222d80d80ca1ac4530a633102a9f2ad12252183bcf338c1b9474\"},",
          "2566:     {file = \"rpds_py-0.19.1-cp39-cp39-musllinux_1_2_i686.whl\", hash = \"sha256:f35b34a5184d5e0cc360b61664c1c06e866aab077b5a7c538a3e20c8fcdbf90b\"},",
          "2567:     {file = \"rpds_py-0.19.1-cp39-cp39-musllinux_1_2_x86_64.whl\", hash = \"sha256:d4ec0046facab83012d821b33cead742a35b54575c4edfb7ed7445f63441835f\"},",
          "2568:     {file = \"rpds_py-0.19.1-cp39-none-win32.whl\", hash = \"sha256:f5b8353ea1a4d7dfb59a7f45c04df66ecfd363bb5b35f33b11ea579111d4655f\"},",
          "2569:     {file = \"rpds_py-0.19.1-cp39-none-win_amd64.whl\", hash = \"sha256:1fb93d3486f793d54a094e2bfd9cd97031f63fcb5bc18faeb3dd4b49a1c06523\"},",
          "2570:     {file = \"rpds_py-0.19.1-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:7d5c7e32f3ee42f77d8ff1a10384b5cdcc2d37035e2e3320ded909aa192d32c3\"},",
          "2571:     {file = \"rpds_py-0.19.1-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:89cc8921a4a5028d6dd388c399fcd2eef232e7040345af3d5b16c04b91cf3c7e\"},",
          "2572:     {file = \"rpds_py-0.19.1-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:bca34e913d27401bda2a6f390d0614049f5a95b3b11cd8eff80fe4ec340a1208\"},",
          "2573:     {file = \"rpds_py-0.19.1-pp310-pypy310_pp73-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:5953391af1405f968eb5701ebbb577ebc5ced8d0041406f9052638bafe52209d\"},",
          "2574:     {file = \"rpds_py-0.19.1-pp310-pypy310_pp73-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:840e18c38098221ea6201f091fc5d4de6128961d2930fbbc96806fb43f69aec1\"},",
          "2575:     {file = \"rpds_py-0.19.1-pp310-pypy310_pp73-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:6d8b735c4d162dc7d86a9cf3d717f14b6c73637a1f9cd57fe7e61002d9cb1972\"},",
          "2576:     {file = \"rpds_py-0.19.1-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ce757c7c90d35719b38fa3d4ca55654a76a40716ee299b0865f2de21c146801c\"},",
          "2577:     {file = \"rpds_py-0.19.1-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:a9421b23c85f361a133aa7c5e8ec757668f70343f4ed8fdb5a4a14abd5437244\"},",
          "2578:     {file = \"rpds_py-0.19.1-pp310-pypy310_pp73-musllinux_1_2_aarch64.whl\", hash = \"sha256:3b823be829407393d84ee56dc849dbe3b31b6a326f388e171555b262e8456cc1\"},",
          "2579:     {file = \"rpds_py-0.19.1-pp310-pypy310_pp73-musllinux_1_2_i686.whl\", hash = \"sha256:5e58b61dcbb483a442c6239c3836696b79f2cd8e7eec11e12155d3f6f2d886d1\"},",
          "2580:     {file = \"rpds_py-0.19.1-pp310-pypy310_pp73-musllinux_1_2_x86_64.whl\", hash = \"sha256:39d67896f7235b2c886fb1ee77b1491b77049dcef6fbf0f401e7b4cbed86bbd4\"},",
          "2581:     {file = \"rpds_py-0.19.1-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:8b32cd4ab6db50c875001ba4f5a6b30c0f42151aa1fbf9c2e7e3674893fb1dc4\"},",
          "2582:     {file = \"rpds_py-0.19.1-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:1c32e41de995f39b6b315d66c27dea3ef7f7c937c06caab4c6a79a5e09e2c415\"},",
          "2583:     {file = \"rpds_py-0.19.1-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:1a129c02b42d46758c87faeea21a9f574e1c858b9f358b6dd0bbd71d17713175\"},",
          "2584:     {file = \"rpds_py-0.19.1-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:346557f5b1d8fd9966059b7a748fd79ac59f5752cd0e9498d6a40e3ac1c1875f\"},",
          "2585:     {file = \"rpds_py-0.19.1-pp39-pypy39_pp73-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:31e450840f2f27699d014cfc8865cc747184286b26d945bcea6042bb6aa4d26e\"},",
          "2586:     {file = \"rpds_py-0.19.1-pp39-pypy39_pp73-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:01227f8b3e6c8961490d869aa65c99653df80d2f0a7fde8c64ebddab2b9b02fd\"},",
          "2587:     {file = \"rpds_py-0.19.1-pp39-pypy39_pp73-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:69084fd29bfeff14816666c93a466e85414fe6b7d236cfc108a9c11afa6f7301\"},",
          "2588:     {file = \"rpds_py-0.19.1-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e4d2b88efe65544a7d5121b0c3b003ebba92bfede2ea3577ce548b69c5235185\"},",
          "2589:     {file = \"rpds_py-0.19.1-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:6ea961a674172ed2235d990d7edf85d15d8dfa23ab8575e48306371c070cda67\"},",
          "2590:     {file = \"rpds_py-0.19.1-pp39-pypy39_pp73-musllinux_1_2_aarch64.whl\", hash = \"sha256:5beffdbe766cfe4fb04f30644d822a1080b5359df7db3a63d30fa928375b2720\"},",
          "2591:     {file = \"rpds_py-0.19.1-pp39-pypy39_pp73-musllinux_1_2_i686.whl\", hash = \"sha256:720f3108fb1bfa32e51db58b832898372eb5891e8472a8093008010911e324c5\"},",
          "2592:     {file = \"rpds_py-0.19.1-pp39-pypy39_pp73-musllinux_1_2_x86_64.whl\", hash = \"sha256:c2087dbb76a87ec2c619253e021e4fb20d1a72580feeaa6892b0b3d955175a71\"},",
          "2593:     {file = \"rpds_py-0.19.1-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:2ddd50f18ebc05ec29a0d9271e9dbe93997536da3546677f8ca00b76d477680c\"},",
          "2594:     {file = \"rpds_py-0.19.1.tar.gz\", hash = \"sha256:31dd5794837f00b46f4096aa8ccaa5972f73a938982e32ed817bb520c465e520\"},",
          "2599: version = \"0.5.5\"",
          "2604:     {file = \"ruff-0.5.5-py3-none-linux_armv6l.whl\", hash = \"sha256:605d589ec35d1da9213a9d4d7e7a9c761d90bba78fc8790d1c5e65026c1b9eaf\"},",
          "2605:     {file = \"ruff-0.5.5-py3-none-macosx_10_12_x86_64.whl\", hash = \"sha256:00817603822a3e42b80f7c3298c8269e09f889ee94640cd1fc7f9329788d7bf8\"},",
          "2606:     {file = \"ruff-0.5.5-py3-none-macosx_11_0_arm64.whl\", hash = \"sha256:187a60f555e9f865a2ff2c6984b9afeffa7158ba6e1eab56cb830404c942b0f3\"},",
          "2607:     {file = \"ruff-0.5.5-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:fe26fc46fa8c6e0ae3f47ddccfbb136253c831c3289bba044befe68f467bfb16\"},",
          "2608:     {file = \"ruff-0.5.5-py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:4ad25dd9c5faac95c8e9efb13e15803cd8bbf7f4600645a60ffe17c73f60779b\"},",
          "2609:     {file = \"ruff-0.5.5-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl\", hash = \"sha256:f70737c157d7edf749bcb952d13854e8f745cec695a01bdc6e29c29c288fc36e\"},",
          "2610:     {file = \"ruff-0.5.5-py3-none-manylinux_2_17_ppc64.manylinux2014_ppc64.whl\", hash = \"sha256:cfd7de17cef6ab559e9f5ab859f0d3296393bc78f69030967ca4d87a541b97a0\"},",
          "2611:     {file = \"ruff-0.5.5-py3-none-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:a09b43e02f76ac0145f86a08e045e2ea452066f7ba064fd6b0cdccb486f7c3e7\"},",
          "2612:     {file = \"ruff-0.5.5-py3-none-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d0b856cb19c60cd40198be5d8d4b556228e3dcd545b4f423d1ad812bfdca5884\"},",
          "2613:     {file = \"ruff-0.5.5-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:3687d002f911e8a5faf977e619a034d159a8373514a587249cc00f211c67a091\"},",
          "2614:     {file = \"ruff-0.5.5-py3-none-musllinux_1_2_aarch64.whl\", hash = \"sha256:ac9dc814e510436e30d0ba535f435a7f3dc97f895f844f5b3f347ec8c228a523\"},",
          "2615:     {file = \"ruff-0.5.5-py3-none-musllinux_1_2_armv7l.whl\", hash = \"sha256:af9bdf6c389b5add40d89b201425b531e0a5cceb3cfdcc69f04d3d531c6be74f\"},",
          "2616:     {file = \"ruff-0.5.5-py3-none-musllinux_1_2_i686.whl\", hash = \"sha256:d40a8533ed545390ef8315b8e25c4bb85739b90bd0f3fe1280a29ae364cc55d8\"},",
          "2617:     {file = \"ruff-0.5.5-py3-none-musllinux_1_2_x86_64.whl\", hash = \"sha256:cab904683bf9e2ecbbe9ff235bfe056f0eba754d0168ad5407832928d579e7ab\"},",
          "2618:     {file = \"ruff-0.5.5-py3-none-win32.whl\", hash = \"sha256:696f18463b47a94575db635ebb4c178188645636f05e934fdf361b74edf1bb2d\"},",
          "2619:     {file = \"ruff-0.5.5-py3-none-win_amd64.whl\", hash = \"sha256:50f36d77f52d4c9c2f1361ccbfbd09099a1b2ea5d2b2222c586ab08885cf3445\"},",
          "2620:     {file = \"ruff-0.5.5-py3-none-win_arm64.whl\", hash = \"sha256:3191317d967af701f1b73a31ed5788795936e423b7acce82a2b63e26eb3e89d6\"},",
          "2621:     {file = \"ruff-0.5.5.tar.gz\", hash = \"sha256:cc5516bdb4858d972fbc31d246bdb390eab8df1a26e2353be2dbc0c2d7f5421a\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2854: [[package]]",
          "2855: name = \"types-pyyaml\"",
          "2857: description = \"Typing stubs for PyYAML\"",
          "2858: optional = false",
          "2859: python-versions = \">=3.8\"",
          "2860: files = [",
          "2863: ]",
          "2865: [[package]]",
          "",
          "[Removed Lines]",
          "2856: version = \"6.0.12.20240311\"",
          "2861:     {file = \"types-PyYAML-6.0.12.20240311.tar.gz\", hash = \"sha256:a9e0f0f88dc835739b0c1ca51ee90d04ca2a897a71af79de9aec5f38cb0a5342\"},",
          "2862:     {file = \"types_PyYAML-6.0.12.20240311-py3-none-any.whl\", hash = \"sha256:b845b06a1c7e54b8e5b4c683043de0d9caf205e7434b3edc678ff2411979b8f6\"},",
          "",
          "[Added Lines]",
          "2860: version = \"6.0.12.20240724\"",
          "2865:     {file = \"types-PyYAML-6.0.12.20240724.tar.gz\", hash = \"sha256:cf7b31ae67e0c5b2919c703d2affc415485099d3fe6666a6912f040fd05cb67f\"},",
          "2866:     {file = \"types_PyYAML-6.0.12.20240724-py3-none-any.whl\", hash = \"sha256:e5becec598f3aa3a2ddf671de4a75fa1c6856fbf73b2840286c9d50fae2d5d48\"},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3044: [metadata]",
          "3045: lock-version = \"2.0\"",
          "3046: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "3047: content-hash = \"8db47de0615d9a5324dc0e28f6110908e9b16ccfee699aeafef21f68c879e62a\"",
          "",
          "[Added Lines]",
          "3051: content-hash = \"74434689496616068607618a26e7de242b0bb5c3123463566f4976ab28cc747f\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "387284c25995fdfc2efc44fb86179ed0c5e5d94c",
      "candidate_info": {
        "commit_hash": "387284c25995fdfc2efc44fb86179ed0c5e5d94c",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/387284c25995fdfc2efc44fb86179ed0c5e5d94c",
        "files": [
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml"
        ],
        "message": "core: release 0.3.25 (#28718)",
        "before_after_code_files": [
          "libs/core/poetry.lock||libs/core/poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455: [[package]]",
          "456: name = \"debugpy\"",
          "458: description = \"An implementation of the Debug Adapter Protocol for Python\"",
          "459: optional = false",
          "460: python-versions = \">=3.8\"",
          "461: files = [",
          "488: ]",
          "490: [[package]]",
          "",
          "[Removed Lines]",
          "457: version = \"1.8.9\"",
          "462:     {file = \"debugpy-1.8.9-cp310-cp310-macosx_14_0_x86_64.whl\", hash = \"sha256:cfe1e6c6ad7178265f74981edf1154ffce97b69005212fbc90ca22ddfe3d017e\"},",
          "463:     {file = \"debugpy-1.8.9-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ada7fb65102a4d2c9ab62e8908e9e9f12aed9d76ef44880367bc9308ebe49a0f\"},",
          "464:     {file = \"debugpy-1.8.9-cp310-cp310-win32.whl\", hash = \"sha256:c36856343cbaa448171cba62a721531e10e7ffb0abff838004701454149bc037\"},",
          "465:     {file = \"debugpy-1.8.9-cp310-cp310-win_amd64.whl\", hash = \"sha256:17c5e0297678442511cf00a745c9709e928ea4ca263d764e90d233208889a19e\"},",
          "466:     {file = \"debugpy-1.8.9-cp311-cp311-macosx_14_0_universal2.whl\", hash = \"sha256:b74a49753e21e33e7cf030883a92fa607bddc4ede1aa4145172debc637780040\"},",
          "467:     {file = \"debugpy-1.8.9-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:62d22dacdb0e296966d7d74a7141aaab4bec123fa43d1a35ddcb39bf9fd29d70\"},",
          "468:     {file = \"debugpy-1.8.9-cp311-cp311-win32.whl\", hash = \"sha256:8138efff315cd09b8dcd14226a21afda4ca582284bf4215126d87342bba1cc66\"},",
          "469:     {file = \"debugpy-1.8.9-cp311-cp311-win_amd64.whl\", hash = \"sha256:ff54ef77ad9f5c425398efb150239f6fe8e20c53ae2f68367eba7ece1e96226d\"},",
          "470:     {file = \"debugpy-1.8.9-cp312-cp312-macosx_14_0_universal2.whl\", hash = \"sha256:957363d9a7a6612a37458d9a15e72d03a635047f946e5fceee74b50d52a9c8e2\"},",
          "471:     {file = \"debugpy-1.8.9-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5e565fc54b680292b418bb809f1386f17081d1346dca9a871bf69a8ac4071afe\"},",
          "472:     {file = \"debugpy-1.8.9-cp312-cp312-win32.whl\", hash = \"sha256:3e59842d6c4569c65ceb3751075ff8d7e6a6ada209ceca6308c9bde932bcef11\"},",
          "473:     {file = \"debugpy-1.8.9-cp312-cp312-win_amd64.whl\", hash = \"sha256:66eeae42f3137eb428ea3a86d4a55f28da9bd5a4a3d369ba95ecc3a92c1bba53\"},",
          "474:     {file = \"debugpy-1.8.9-cp313-cp313-macosx_14_0_universal2.whl\", hash = \"sha256:957ecffff80d47cafa9b6545de9e016ae8c9547c98a538ee96ab5947115fb3dd\"},",
          "475:     {file = \"debugpy-1.8.9-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:1efbb3ff61487e2c16b3e033bc8595aea578222c08aaf3c4bf0f93fadbd662ee\"},",
          "476:     {file = \"debugpy-1.8.9-cp313-cp313-win32.whl\", hash = \"sha256:7c4d65d03bee875bcb211c76c1d8f10f600c305dbd734beaed4077e902606fee\"},",
          "477:     {file = \"debugpy-1.8.9-cp313-cp313-win_amd64.whl\", hash = \"sha256:e46b420dc1bea64e5bbedd678148be512442bc589b0111bd799367cde051e71a\"},",
          "478:     {file = \"debugpy-1.8.9-cp38-cp38-macosx_14_0_x86_64.whl\", hash = \"sha256:472a3994999fe6c0756945ffa359e9e7e2d690fb55d251639d07208dbc37caea\"},",
          "479:     {file = \"debugpy-1.8.9-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:365e556a4772d7d0d151d7eb0e77ec4db03bcd95f26b67b15742b88cacff88e9\"},",
          "480:     {file = \"debugpy-1.8.9-cp38-cp38-win32.whl\", hash = \"sha256:54a7e6d3014c408eb37b0b06021366ee985f1539e12fe49ca2ee0d392d9ceca5\"},",
          "481:     {file = \"debugpy-1.8.9-cp38-cp38-win_amd64.whl\", hash = \"sha256:8e99c0b1cc7bf86d83fb95d5ccdc4ad0586d4432d489d1f54e4055bcc795f693\"},",
          "482:     {file = \"debugpy-1.8.9-cp39-cp39-macosx_14_0_x86_64.whl\", hash = \"sha256:7e8b079323a56f719977fde9d8115590cb5e7a1cba2fcee0986ef8817116e7c1\"},",
          "483:     {file = \"debugpy-1.8.9-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6953b335b804a41f16a192fa2e7851bdcfd92173cbb2f9f777bb934f49baab65\"},",
          "484:     {file = \"debugpy-1.8.9-cp39-cp39-win32.whl\", hash = \"sha256:7e646e62d4602bb8956db88b1e72fe63172148c1e25c041e03b103a25f36673c\"},",
          "485:     {file = \"debugpy-1.8.9-cp39-cp39-win_amd64.whl\", hash = \"sha256:3d9755e77a2d680ce3d2c5394a444cf42be4a592caaf246dbfbdd100ffcf7ae5\"},",
          "486:     {file = \"debugpy-1.8.9-py2.py3-none-any.whl\", hash = \"sha256:cc37a6c9987ad743d9c3a14fa1b1a14b7e4e6041f9dd0c8abf8895fe7a97b899\"},",
          "487:     {file = \"debugpy-1.8.9.zip\", hash = \"sha256:1339e14c7d980407248f09824d1b25ff5c5616651689f1e0f0e51bdead3ea13e\"},",
          "",
          "[Added Lines]",
          "457: version = \"1.8.11\"",
          "462:     {file = \"debugpy-1.8.11-cp310-cp310-macosx_14_0_x86_64.whl\", hash = \"sha256:2b26fefc4e31ff85593d68b9022e35e8925714a10ab4858fb1b577a8a48cb8cd\"},",
          "463:     {file = \"debugpy-1.8.11-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:61bc8b3b265e6949855300e84dc93d02d7a3a637f2aec6d382afd4ceb9120c9f\"},",
          "464:     {file = \"debugpy-1.8.11-cp310-cp310-win32.whl\", hash = \"sha256:c928bbf47f65288574b78518449edaa46c82572d340e2750889bbf8cd92f3737\"},",
          "465:     {file = \"debugpy-1.8.11-cp310-cp310-win_amd64.whl\", hash = \"sha256:8da1db4ca4f22583e834dcabdc7832e56fe16275253ee53ba66627b86e304da1\"},",
          "466:     {file = \"debugpy-1.8.11-cp311-cp311-macosx_14_0_universal2.whl\", hash = \"sha256:85de8474ad53ad546ff1c7c7c89230db215b9b8a02754d41cb5a76f70d0be296\"},",
          "467:     {file = \"debugpy-1.8.11-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:8ffc382e4afa4aee367bf413f55ed17bd91b191dcaf979890af239dda435f2a1\"},",
          "468:     {file = \"debugpy-1.8.11-cp311-cp311-win32.whl\", hash = \"sha256:40499a9979c55f72f4eb2fc38695419546b62594f8af194b879d2a18439c97a9\"},",
          "469:     {file = \"debugpy-1.8.11-cp311-cp311-win_amd64.whl\", hash = \"sha256:987bce16e86efa86f747d5151c54e91b3c1e36acc03ce1ddb50f9d09d16ded0e\"},",
          "470:     {file = \"debugpy-1.8.11-cp312-cp312-macosx_14_0_universal2.whl\", hash = \"sha256:84e511a7545d11683d32cdb8f809ef63fc17ea2a00455cc62d0a4dbb4ed1c308\"},",
          "471:     {file = \"debugpy-1.8.11-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ce291a5aca4985d82875d6779f61375e959208cdf09fcec40001e65fb0a54768\"},",
          "472:     {file = \"debugpy-1.8.11-cp312-cp312-win32.whl\", hash = \"sha256:28e45b3f827d3bf2592f3cf7ae63282e859f3259db44ed2b129093ca0ac7940b\"},",
          "473:     {file = \"debugpy-1.8.11-cp312-cp312-win_amd64.whl\", hash = \"sha256:44b1b8e6253bceada11f714acf4309ffb98bfa9ac55e4fce14f9e5d4484287a1\"},",
          "474:     {file = \"debugpy-1.8.11-cp313-cp313-macosx_14_0_universal2.whl\", hash = \"sha256:8988f7163e4381b0da7696f37eec7aca19deb02e500245df68a7159739bbd0d3\"},",
          "475:     {file = \"debugpy-1.8.11-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6c1f6a173d1140e557347419767d2b14ac1c9cd847e0b4c5444c7f3144697e4e\"},",
          "476:     {file = \"debugpy-1.8.11-cp313-cp313-win32.whl\", hash = \"sha256:bb3b15e25891f38da3ca0740271e63ab9db61f41d4d8541745cfc1824252cb28\"},",
          "477:     {file = \"debugpy-1.8.11-cp313-cp313-win_amd64.whl\", hash = \"sha256:d8768edcbeb34da9e11bcb8b5c2e0958d25218df7a6e56adf415ef262cd7b6d1\"},",
          "478:     {file = \"debugpy-1.8.11-cp38-cp38-macosx_14_0_x86_64.whl\", hash = \"sha256:ad7efe588c8f5cf940f40c3de0cd683cc5b76819446abaa50dc0829a30c094db\"},",
          "479:     {file = \"debugpy-1.8.11-cp38-cp38-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:189058d03a40103a57144752652b3ab08ff02b7595d0ce1f651b9acc3a3a35a0\"},",
          "480:     {file = \"debugpy-1.8.11-cp38-cp38-win32.whl\", hash = \"sha256:32db46ba45849daed7ccf3f2e26f7a386867b077f39b2a974bb5c4c2c3b0a280\"},",
          "481:     {file = \"debugpy-1.8.11-cp38-cp38-win_amd64.whl\", hash = \"sha256:116bf8342062246ca749013df4f6ea106f23bc159305843491f64672a55af2e5\"},",
          "482:     {file = \"debugpy-1.8.11-cp39-cp39-macosx_14_0_x86_64.whl\", hash = \"sha256:654130ca6ad5de73d978057eaf9e582244ff72d4574b3e106fb8d3d2a0d32458\"},",
          "483:     {file = \"debugpy-1.8.11-cp39-cp39-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:23dc34c5e03b0212fa3c49a874df2b8b1b8fda95160bd79c01eb3ab51ea8d851\"},",
          "484:     {file = \"debugpy-1.8.11-cp39-cp39-win32.whl\", hash = \"sha256:52d8a3166c9f2815bfae05f386114b0b2d274456980d41f320299a8d9a5615a7\"},",
          "485:     {file = \"debugpy-1.8.11-cp39-cp39-win_amd64.whl\", hash = \"sha256:52c3cf9ecda273a19cc092961ee34eb9ba8687d67ba34cc7b79a521c1c64c4c0\"},",
          "486:     {file = \"debugpy-1.8.11-py2.py3-none-any.whl\", hash = \"sha256:0e22f846f4211383e6a416d04b4c13ed174d24cc5d43f5fd52e7821d0ebc8920\"},",
          "487:     {file = \"debugpy-1.8.11.tar.gz\", hash = \"sha256:6ad2688b69235c43b020e04fecccdf6a96c8943ca9c2fb340b8adc103c655e57\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1228: [[package]]",
          "1229: name = \"langsmith\"",
          "1231: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "1232: optional = false",
          "1233: python-versions = \"<4.0,>=3.9\"",
          "1234: files = [",
          "1237: ]",
          "1239: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1230: version = \"0.2.1\"",
          "1235:     {file = \"langsmith-0.2.1-py3-none-any.whl\", hash = \"sha256:9619c2d82a6d35cb6e2ff4472686415bb5bc238b12e2ed95b3e87b134228d7b4\"},",
          "1236:     {file = \"langsmith-0.2.1.tar.gz\", hash = \"sha256:2374dfa98fb43bb17d3446889559df36573a7fe2dddc09420b514b183512125d\"},",
          "",
          "[Added Lines]",
          "1230: version = \"0.2.3\"",
          "1235:     {file = \"langsmith-0.2.3-py3-none-any.whl\", hash = \"sha256:4958b6e918f57fedba6ddc55b8534d1e06478bb44c779aa73713ce898ca6ae87\"},",
          "1236:     {file = \"langsmith-0.2.3.tar.gz\", hash = \"sha256:54c231b07fdeb0f8472925074a0ec0ed2cb654a0437d63c6ccf76a9da635900d\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2177: [[package]]",
          "2178: name = \"python-json-logger\"",
          "2181: optional = false",
          "2183: files = [",
          "2186: ]",
          "2188: [[package]]",
          "2189: name = \"pywin32\"",
          "2190: version = \"308\"",
          "",
          "[Removed Lines]",
          "2179: version = \"2.0.7\"",
          "2180: description = \"A python library adding a json log formatter\"",
          "2182: python-versions = \">=3.6\"",
          "2184:     {file = \"python-json-logger-2.0.7.tar.gz\", hash = \"sha256:23e7ec02d34237c5aa1e29a070193a4ea87583bb4e7f8fd06d3de8264c4b2e1c\"},",
          "2185:     {file = \"python_json_logger-2.0.7-py3-none-any.whl\", hash = \"sha256:f380b826a991ebbe3de4d897aeec42760035ac760345e57b812938dc8b35e2bd\"},",
          "",
          "[Added Lines]",
          "2179: version = \"3.2.0\"",
          "2180: description = \"JSON Log Formatter for the Python Logging Package\"",
          "2182: python-versions = \">=3.8\"",
          "2184:     {file = \"python_json_logger-3.2.0-py3-none-any.whl\", hash = \"sha256:d73522ddcfc6d0461394120feaddea9025dc64bf804d96357dd42fa878cc5fe8\"},",
          "2185:     {file = \"python_json_logger-3.2.0.tar.gz\", hash = \"sha256:2c11056458d3f56614480b24e9cb28f7aba69cbfbebddbb77c92f0ec0d4947ab\"},",
          "2188: [package.dependencies]",
          "2189: typing_extensions = {version = \"*\", markers = \"python_version < \\\"3.10\\\"\"}",
          "2191: [package.extras]",
          "2192: dev = [\"backports.zoneinfo\", \"black\", \"build\", \"freezegun\", \"mdx_truly_sane_lists\", \"mike\", \"mkdocs\", \"mkdocs-awesome-pages-plugin\", \"mkdocs-gen-files\", \"mkdocs-literate-nav\", \"mkdocs-material (>=8.5)\", \"mkdocstrings[python]\", \"msgspec\", \"msgspec-python313-pre\", \"mypy\", \"orjson\", \"pylint\", \"pytest\", \"tzdata\", \"validate-pyproject[all]\"]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4ca93741f735e8e0c4e455efc0e40192af16fa5c",
      "candidate_info": {
        "commit_hash": "4ca93741f735e8e0c4e455efc0e40192af16fa5c",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/4ca93741f735e8e0c4e455efc0e40192af16fa5c",
        "files": [
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml"
        ],
        "message": "x",
        "before_after_code_files": [
          "libs/core/poetry.lock||libs/core/poetry.lock"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.6.1 and should not be changed by hand.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244: [[package]]",
          "245: name = \"certifi\"",
          "247: description = \"Python package for providing Mozilla's CA Bundle.\"",
          "248: optional = false",
          "249: python-versions = \">=3.6\"",
          "250: files = [",
          "253: ]",
          "255: [[package]]",
          "",
          "[Removed Lines]",
          "246: version = \"2024.2.2\"",
          "251:     {file = \"certifi-2024.2.2-py3-none-any.whl\", hash = \"sha256:dc383c07b76109f368f6106eee2b593b04a011ea4d55f652c6ca24a754d1cdd1\"},",
          "252:     {file = \"certifi-2024.2.2.tar.gz\", hash = \"sha256:0569859f95fc761b18b45ef421b1290a0f65f147e92a1e5eb3e635f9a5e4e66f\"},",
          "",
          "[Added Lines]",
          "246: version = \"2024.6.2\"",
          "251:     {file = \"certifi-2024.6.2-py3-none-any.whl\", hash = \"sha256:ddc6c8ce995e6987e7faf5e3f1b02b302836a0e5d98ece18392cb1a36c72ad56\"},",
          "252:     {file = \"certifi-2024.6.2.tar.gz\", hash = \"sha256:3cd43f1c6fa7dedc5899d69d3ad0398fd018ad1a17fba83ddaf78aa46c747516\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1061: [[package]]",
          "1062: name = \"jupyter-server\"",
          "1064: description = \"The backend\u2014i.e. core services, APIs, and REST endpoints\u2014to Jupyter web applications.\"",
          "1065: optional = false",
          "1066: python-versions = \">=3.8\"",
          "1067: files = [",
          "1070: ]",
          "1072: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1063: version = \"2.14.0\"",
          "1068:     {file = \"jupyter_server-2.14.0-py3-none-any.whl\", hash = \"sha256:fb6be52c713e80e004fac34b35a0990d6d36ba06fd0a2b2ed82b899143a64210\"},",
          "1069:     {file = \"jupyter_server-2.14.0.tar.gz\", hash = \"sha256:659154cea512083434fd7c93b7fe0897af7a2fd0b9dd4749282b42eaac4ae677\"},",
          "",
          "[Added Lines]",
          "1063: version = \"2.14.1\"",
          "1068:     {file = \"jupyter_server-2.14.1-py3-none-any.whl\", hash = \"sha256:16f7177c3a4ea8fe37784e2d31271981a812f0b2874af17339031dc3510cc2a5\"},",
          "1069:     {file = \"jupyter_server-2.14.1.tar.gz\", hash = \"sha256:12558d158ec7a0653bf96cc272bc7ad79e0127d503b982ed144399346694f726\"},",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1091: websocket-client = \">=1.7\"",
          "1093: [package.extras]",
          "1095: test = [\"flaky\", \"ipykernel\", \"pre-commit\", \"pytest (>=7.0,<9)\", \"pytest-console-scripts\", \"pytest-jupyter[server] (>=0.7)\", \"pytest-timeout\", \"requests\"]",
          "1097: [[package]]",
          "",
          "[Removed Lines]",
          "1094: docs = [\"ipykernel\", \"jinja2\", \"jupyter-client\", \"jupyter-server\", \"myst-parser\", \"nbformat\", \"prometheus-client\", \"pydata-sphinx-theme\", \"send2trash\", \"sphinx-autodoc-typehints\", \"sphinxcontrib-github-alt\", \"sphinxcontrib-openapi (>=0.8.0)\", \"sphinxcontrib-spelling\", \"sphinxemoji\", \"tornado\", \"typing-extensions\"]",
          "",
          "[Added Lines]",
          "1094: docs = [\"ipykernel\", \"jinja2\", \"jupyter-client\", \"myst-parser\", \"nbformat\", \"prometheus-client\", \"pydata-sphinx-theme\", \"send2trash\", \"sphinx-autodoc-typehints\", \"sphinxcontrib-github-alt\", \"sphinxcontrib-openapi (>=0.8.0)\", \"sphinxcontrib-spelling\", \"sphinxemoji\", \"tornado\", \"typing-extensions\"]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1199: [[package]]",
          "1200: name = \"langchain-text-splitters\"",
          "1202: description = \"LangChain text splitting utilities\"",
          "1203: optional = false",
          "1204: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "1201: version = \"0.2.0\"",
          "",
          "[Added Lines]",
          "1201: version = \"0.2.1\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1218: [[package]]",
          "1219: name = \"langsmith\"",
          "1221: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "1222: optional = false",
          "1223: python-versions = \"<4.0,>=3.8.1\"",
          "1224: files = [",
          "1227: ]",
          "1229: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1220: version = \"0.1.69\"",
          "1225:     {file = \"langsmith-0.1.69-py3-none-any.whl\", hash = \"sha256:3d7bd6fadb0852fc4cd2e7cf8a1593306046900052da3970bb2b48ed21cc73d8\"},",
          "1226:     {file = \"langsmith-0.1.69.tar.gz\", hash = \"sha256:0146764904a8e479620b7e73efcba1cf172b621799564dd7e7342859c05c264a\"},",
          "",
          "[Added Lines]",
          "1220: version = \"0.1.72\"",
          "1225:     {file = \"langsmith-0.1.72-py3-none-any.whl\", hash = \"sha256:a4456707669521bd75b7431b9205a6b99579fb9ff01bd338f52d29df11a7662d\"},",
          "1226:     {file = \"langsmith-0.1.72.tar.gz\", hash = \"sha256:262ae9e8aceaba50f3a0f5b6eb559d6110886f0afc6b0ed5270e7d3d3f1fd8d6\"},",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1739: [[package]]",
          "1740: name = \"prompt-toolkit\"",
          "1742: description = \"Library for building powerful interactive command lines in Python\"",
          "1743: optional = false",
          "1744: python-versions = \">=3.7.0\"",
          "1745: files = [",
          "1748: ]",
          "1750: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1741: version = \"3.0.45\"",
          "1746:     {file = \"prompt_toolkit-3.0.45-py3-none-any.whl\", hash = \"sha256:a29b89160e494e3ea8622b09fa5897610b437884dcdcd054fdc1308883326c2a\"},",
          "1747:     {file = \"prompt_toolkit-3.0.45.tar.gz\", hash = \"sha256:07c60ee4ab7b7e90824b61afa840c8f5aad2d46b3e2e10acc33d8ecc94a49089\"},",
          "",
          "[Added Lines]",
          "1741: version = \"3.0.46\"",
          "1746:     {file = \"prompt_toolkit-3.0.46-py3-none-any.whl\", hash = \"sha256:45abe60a8300f3c618b23c16c4bb98c6fc80af8ce8b17c7ae92db48db3ee63c1\"},",
          "1747:     {file = \"prompt_toolkit-3.0.46.tar.gz\", hash = \"sha256:869c50d682152336e23c4db7f74667639b5047494202ffe7670817053fd57795\"},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1817: [[package]]",
          "1818: name = \"pydantic\"",
          "1820: description = \"Data validation using Python type hints\"",
          "1821: optional = false",
          "1822: python-versions = \">=3.8\"",
          "1823: files = [",
          "1826: ]",
          "1828: [package.dependencies]",
          "1829: annotated-types = \">=0.4.0\"",
          "1831: typing-extensions = \">=4.6.1\"",
          "1833: [package.extras]",
          "",
          "[Removed Lines]",
          "1819: version = \"2.7.2\"",
          "1824:     {file = \"pydantic-2.7.2-py3-none-any.whl\", hash = \"sha256:834ab954175f94e6e68258537dc49402c4a5e9d0409b9f1b86b7e934a8372de7\"},",
          "1825:     {file = \"pydantic-2.7.2.tar.gz\", hash = \"sha256:71b2945998f9c9b7919a45bde9a50397b289937d215ae141c1d0903ba7149fd7\"},",
          "1830: pydantic-core = \"2.18.3\"",
          "",
          "[Added Lines]",
          "1819: version = \"2.7.3\"",
          "1824:     {file = \"pydantic-2.7.3-py3-none-any.whl\", hash = \"sha256:ea91b002777bf643bb20dd717c028ec43216b24a6001a280f83877fd2655d0b4\"},",
          "1825:     {file = \"pydantic-2.7.3.tar.gz\", hash = \"sha256:c46c76a40bb1296728d7a8b99aa73dd70a48c3510111ff290034f860c99c419e\"},",
          "1830: pydantic-core = \"2.18.4\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1836: [[package]]",
          "1837: name = \"pydantic-core\"",
          "1839: description = \"Core functionality for Pydantic validation and serialization\"",
          "1840: optional = false",
          "1841: python-versions = \">=3.8\"",
          "1842: files = [",
          "1922: ]",
          "1924: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1838: version = \"2.18.3\"",
          "1843:     {file = \"pydantic_core-2.18.3-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:744697428fcdec6be5670460b578161d1ffe34743a5c15656be7ea82b008197c\"},",
          "1844:     {file = \"pydantic_core-2.18.3-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:37b40c05ced1ba4218b14986fe6f283d22e1ae2ff4c8e28881a70fb81fbfcda7\"},",
          "1845:     {file = \"pydantic_core-2.18.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:544a9a75622357076efb6b311983ff190fbfb3c12fc3a853122b34d3d358126c\"},",
          "1846:     {file = \"pydantic_core-2.18.3-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:e2e253af04ceaebde8eb201eb3f3e3e7e390f2d275a88300d6a1959d710539e2\"},",
          "1847:     {file = \"pydantic_core-2.18.3-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:855ec66589c68aa367d989da5c4755bb74ee92ccad4fdb6af942c3612c067e34\"},",
          "1848:     {file = \"pydantic_core-2.18.3-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:3d3e42bb54e7e9d72c13ce112e02eb1b3b55681ee948d748842171201a03a98a\"},",
          "1849:     {file = \"pydantic_core-2.18.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c6ac9ffccc9d2e69d9fba841441d4259cb668ac180e51b30d3632cd7abca2b9b\"},",
          "1850:     {file = \"pydantic_core-2.18.3-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:c56eca1686539fa0c9bda992e7bd6a37583f20083c37590413381acfc5f192d6\"},",
          "1851:     {file = \"pydantic_core-2.18.3-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:17954d784bf8abfc0ec2a633108207ebc4fa2df1a0e4c0c3ccbaa9bb01d2c426\"},",
          "1852:     {file = \"pydantic_core-2.18.3-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:98ed737567d8f2ecd54f7c8d4f8572ca7c7921ede93a2e52939416170d357812\"},",
          "1853:     {file = \"pydantic_core-2.18.3-cp310-none-win32.whl\", hash = \"sha256:9f9e04afebd3ed8c15d67a564ed0a34b54e52136c6d40d14c5547b238390e779\"},",
          "1854:     {file = \"pydantic_core-2.18.3-cp310-none-win_amd64.whl\", hash = \"sha256:45e4ffbae34f7ae30d0047697e724e534a7ec0a82ef9994b7913a412c21462a0\"},",
          "1855:     {file = \"pydantic_core-2.18.3-cp311-cp311-macosx_10_12_x86_64.whl\", hash = \"sha256:b9ebe8231726c49518b16b237b9fe0d7d361dd221302af511a83d4ada01183ab\"},",
          "1856:     {file = \"pydantic_core-2.18.3-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:b8e20e15d18bf7dbb453be78a2d858f946f5cdf06c5072453dace00ab652e2b2\"},",
          "1857:     {file = \"pydantic_core-2.18.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c0d9ff283cd3459fa0bf9b0256a2b6f01ac1ff9ffb034e24457b9035f75587cb\"},",
          "1858:     {file = \"pydantic_core-2.18.3-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:2f7ef5f0ebb77ba24c9970da18b771711edc5feaf00c10b18461e0f5f5949231\"},",
          "1859:     {file = \"pydantic_core-2.18.3-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:73038d66614d2e5cde30435b5afdced2b473b4c77d4ca3a8624dd3e41a9c19be\"},",
          "1860:     {file = \"pydantic_core-2.18.3-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:6afd5c867a74c4d314c557b5ea9520183fadfbd1df4c2d6e09fd0d990ce412cd\"},",
          "1861:     {file = \"pydantic_core-2.18.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bd7df92f28d351bb9f12470f4c533cf03d1b52ec5a6e5c58c65b183055a60106\"},",
          "1862:     {file = \"pydantic_core-2.18.3-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:80aea0ffeb1049336043d07799eace1c9602519fb3192916ff525b0287b2b1e4\"},",
          "1863:     {file = \"pydantic_core-2.18.3-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:aaee40f25bba38132e655ffa3d1998a6d576ba7cf81deff8bfa189fb43fd2bbe\"},",
          "1864:     {file = \"pydantic_core-2.18.3-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:9128089da8f4fe73f7a91973895ebf2502539d627891a14034e45fb9e707e26d\"},",
          "1865:     {file = \"pydantic_core-2.18.3-cp311-none-win32.whl\", hash = \"sha256:fec02527e1e03257aa25b1a4dcbe697b40a22f1229f5d026503e8b7ff6d2eda7\"},",
          "1866:     {file = \"pydantic_core-2.18.3-cp311-none-win_amd64.whl\", hash = \"sha256:58ff8631dbab6c7c982e6425da8347108449321f61fe427c52ddfadd66642af7\"},",
          "1867:     {file = \"pydantic_core-2.18.3-cp311-none-win_arm64.whl\", hash = \"sha256:3fc1c7f67f34c6c2ef9c213e0f2a351797cda98249d9ca56a70ce4ebcaba45f4\"},",
          "1868:     {file = \"pydantic_core-2.18.3-cp312-cp312-macosx_10_12_x86_64.whl\", hash = \"sha256:f0928cde2ae416a2d1ebe6dee324709c6f73e93494d8c7aea92df99aab1fc40f\"},",
          "1869:     {file = \"pydantic_core-2.18.3-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:0bee9bb305a562f8b9271855afb6ce00223f545de3d68560b3c1649c7c5295e9\"},",
          "1870:     {file = \"pydantic_core-2.18.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e862823be114387257dacbfa7d78547165a85d7add33b446ca4f4fae92c7ff5c\"},",
          "1871:     {file = \"pydantic_core-2.18.3-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:6a36f78674cbddc165abab0df961b5f96b14461d05feec5e1f78da58808b97e7\"},",
          "1872:     {file = \"pydantic_core-2.18.3-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:ba905d184f62e7ddbb7a5a751d8a5c805463511c7b08d1aca4a3e8c11f2e5048\"},",
          "1873:     {file = \"pydantic_core-2.18.3-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:7fdd362f6a586e681ff86550b2379e532fee63c52def1c666887956748eaa326\"},",
          "1874:     {file = \"pydantic_core-2.18.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:24b214b7ee3bd3b865e963dbed0f8bc5375f49449d70e8d407b567af3222aae4\"},",
          "1875:     {file = \"pydantic_core-2.18.3-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:691018785779766127f531674fa82bb368df5b36b461622b12e176c18e119022\"},",
          "1876:     {file = \"pydantic_core-2.18.3-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:60e4c625e6f7155d7d0dcac151edf5858102bc61bf959d04469ca6ee4e8381bd\"},",
          "1877:     {file = \"pydantic_core-2.18.3-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:a4e651e47d981c1b701dcc74ab8fec5a60a5b004650416b4abbef13db23bc7be\"},",
          "1878:     {file = \"pydantic_core-2.18.3-cp312-none-win32.whl\", hash = \"sha256:ffecbb5edb7f5ffae13599aec33b735e9e4c7676ca1633c60f2c606beb17efc5\"},",
          "1879:     {file = \"pydantic_core-2.18.3-cp312-none-win_amd64.whl\", hash = \"sha256:2c8333f6e934733483c7eddffdb094c143b9463d2af7e6bd85ebcb2d4a1b82c6\"},",
          "1880:     {file = \"pydantic_core-2.18.3-cp312-none-win_arm64.whl\", hash = \"sha256:7a20dded653e516a4655f4c98e97ccafb13753987434fe7cf044aa25f5b7d417\"},",
          "1881:     {file = \"pydantic_core-2.18.3-cp38-cp38-macosx_10_12_x86_64.whl\", hash = \"sha256:eecf63195be644b0396f972c82598cd15693550f0ff236dcf7ab92e2eb6d3522\"},",
          "1882:     {file = \"pydantic_core-2.18.3-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:2c44efdd3b6125419c28821590d7ec891c9cb0dff33a7a78d9d5c8b6f66b9702\"},",
          "1883:     {file = \"pydantic_core-2.18.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6e59fca51ffbdd1638b3856779342ed69bcecb8484c1d4b8bdb237d0eb5a45e2\"},",
          "1884:     {file = \"pydantic_core-2.18.3-cp38-cp38-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:70cf099197d6b98953468461d753563b28e73cf1eade2ffe069675d2657ed1d5\"},",
          "1885:     {file = \"pydantic_core-2.18.3-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:63081a49dddc6124754b32a3774331467bfc3d2bd5ff8f10df36a95602560361\"},",
          "1886:     {file = \"pydantic_core-2.18.3-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:370059b7883485c9edb9655355ff46d912f4b03b009d929220d9294c7fd9fd60\"},",
          "1887:     {file = \"pydantic_core-2.18.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5a64faeedfd8254f05f5cf6fc755023a7e1606af3959cfc1a9285744cc711044\"},",
          "1888:     {file = \"pydantic_core-2.18.3-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:19d2e725de0f90d8671f89e420d36c3dd97639b98145e42fcc0e1f6d492a46dc\"},",
          "1889:     {file = \"pydantic_core-2.18.3-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:67bc078025d70ec5aefe6200ef094576c9d86bd36982df1301c758a9fff7d7f4\"},",
          "1890:     {file = \"pydantic_core-2.18.3-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:adf952c3f4100e203cbaf8e0c907c835d3e28f9041474e52b651761dc248a3c0\"},",
          "1891:     {file = \"pydantic_core-2.18.3-cp38-none-win32.whl\", hash = \"sha256:9a46795b1f3beb167eaee91736d5d17ac3a994bf2215a996aed825a45f897558\"},",
          "1892:     {file = \"pydantic_core-2.18.3-cp38-none-win_amd64.whl\", hash = \"sha256:200ad4e3133cb99ed82342a101a5abf3d924722e71cd581cc113fe828f727fbc\"},",
          "1893:     {file = \"pydantic_core-2.18.3-cp39-cp39-macosx_10_12_x86_64.whl\", hash = \"sha256:304378b7bf92206036c8ddd83a2ba7b7d1a5b425acafff637172a3aa72ad7083\"},",
          "1894:     {file = \"pydantic_core-2.18.3-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:c826870b277143e701c9ccf34ebc33ddb4d072612683a044e7cce2d52f6c3fef\"},",
          "1895:     {file = \"pydantic_core-2.18.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e201935d282707394f3668380e41ccf25b5794d1b131cdd96b07f615a33ca4b1\"},",
          "1896:     {file = \"pydantic_core-2.18.3-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:5560dda746c44b48bf82b3d191d74fe8efc5686a9ef18e69bdabccbbb9ad9442\"},",
          "1897:     {file = \"pydantic_core-2.18.3-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:6b32c2a1f8032570842257e4c19288eba9a2bba4712af542327de9a1204faff8\"},",
          "1898:     {file = \"pydantic_core-2.18.3-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:929c24e9dea3990bc8bcd27c5f2d3916c0c86f5511d2caa69e0d5290115344a9\"},",
          "1899:     {file = \"pydantic_core-2.18.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e1a8376fef60790152564b0eab376b3e23dd6e54f29d84aad46f7b264ecca943\"},",
          "1900:     {file = \"pydantic_core-2.18.3-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:dccf3ef1400390ddd1fb55bf0632209d39140552d068ee5ac45553b556780e06\"},",
          "1901:     {file = \"pydantic_core-2.18.3-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:41dbdcb0c7252b58fa931fec47937edb422c9cb22528f41cb8963665c372caf6\"},",
          "1902:     {file = \"pydantic_core-2.18.3-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:666e45cf071669fde468886654742fa10b0e74cd0fa0430a46ba6056b24fb0af\"},",
          "1903:     {file = \"pydantic_core-2.18.3-cp39-none-win32.whl\", hash = \"sha256:f9c08cabff68704a1b4667d33f534d544b8a07b8e5d039c37067fceb18789e78\"},",
          "1904:     {file = \"pydantic_core-2.18.3-cp39-none-win_amd64.whl\", hash = \"sha256:4afa5f5973e8572b5c0dcb4e2d4fda7890e7cd63329bd5cc3263a25c92ef0026\"},",
          "1905:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:77319771a026f7c7d29c6ebc623de889e9563b7087911b46fd06c044a12aa5e9\"},",
          "1906:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:df11fa992e9f576473038510d66dd305bcd51d7dd508c163a8c8fe148454e059\"},",
          "1907:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d531076bdfb65af593326ffd567e6ab3da145020dafb9187a1d131064a55f97c\"},",
          "1908:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d33ce258e4e6e6038f2b9e8b8a631d17d017567db43483314993b3ca345dcbbb\"},",
          "1909:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:1f9cd7f5635b719939019be9bda47ecb56e165e51dd26c9a217a433e3d0d59a9\"},",
          "1910:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:cd4a032bb65cc132cae1fe3e52877daecc2097965cd3914e44fbd12b00dae7c5\"},",
          "1911:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:82f2718430098bcdf60402136c845e4126a189959d103900ebabb6774a5d9fdb\"},",
          "1912:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:c0037a92cf0c580ed14e10953cdd26528e8796307bb8bb312dc65f71547df04d\"},",
          "1913:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:b95a0972fac2b1ff3c94629fc9081b16371dad870959f1408cc33b2f78ad347a\"},",
          "1914:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:a62e437d687cc148381bdd5f51e3e81f5b20a735c55f690c5be94e05da2b0d5c\"},",
          "1915:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b367a73a414bbb08507da102dc2cde0fa7afe57d09b3240ce82a16d608a7679c\"},",
          "1916:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0ecce4b2360aa3f008da3327d652e74a0e743908eac306198b47e1c58b03dd2b\"},",
          "1917:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:bd4435b8d83f0c9561a2a9585b1de78f1abb17cb0cef5f39bf6a4b47d19bafe3\"},",
          "1918:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:616221a6d473c5b9aa83fa8982745441f6a4a62a66436be9445c65f241b86c94\"},",
          "1919:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:7e6382ce89a92bc1d0c0c5edd51e931432202b9080dc921d8d003e616402efd1\"},",
          "1920:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:ff58f379345603d940e461eae474b6bbb6dab66ed9a851ecd3cb3709bf4dcf6a\"},",
          "1921:     {file = \"pydantic_core-2.18.3.tar.gz\", hash = \"sha256:432e999088d85c8f36b9a3f769a8e2b57aabd817bbb729a90d1fe7f18f6f1f39\"},",
          "",
          "[Added Lines]",
          "1838: version = \"2.18.4\"",
          "1843:     {file = \"pydantic_core-2.18.4-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:f76d0ad001edd426b92233d45c746fd08f467d56100fd8f30e9ace4b005266e4\"},",
          "1844:     {file = \"pydantic_core-2.18.4-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:59ff3e89f4eaf14050c8022011862df275b552caef8082e37b542b066ce1ff26\"},",
          "1845:     {file = \"pydantic_core-2.18.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a55b5b16c839df1070bc113c1f7f94a0af4433fcfa1b41799ce7606e5c79ce0a\"},",
          "1846:     {file = \"pydantic_core-2.18.4-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:4d0dcc59664fcb8974b356fe0a18a672d6d7cf9f54746c05f43275fc48636851\"},",
          "1847:     {file = \"pydantic_core-2.18.4-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:8951eee36c57cd128f779e641e21eb40bc5073eb28b2d23f33eb0ef14ffb3f5d\"},",
          "1848:     {file = \"pydantic_core-2.18.4-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:4701b19f7e3a06ea655513f7938de6f108123bf7c86bbebb1196eb9bd35cf724\"},",
          "1849:     {file = \"pydantic_core-2.18.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e00a3f196329e08e43d99b79b286d60ce46bed10f2280d25a1718399457e06be\"},",
          "1850:     {file = \"pydantic_core-2.18.4-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:97736815b9cc893b2b7f663628e63f436018b75f44854c8027040e05230eeddb\"},",
          "1851:     {file = \"pydantic_core-2.18.4-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:6891a2ae0e8692679c07728819b6e2b822fb30ca7445f67bbf6509b25a96332c\"},",
          "1852:     {file = \"pydantic_core-2.18.4-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:bc4ff9805858bd54d1a20efff925ccd89c9d2e7cf4986144b30802bf78091c3e\"},",
          "1853:     {file = \"pydantic_core-2.18.4-cp310-none-win32.whl\", hash = \"sha256:1b4de2e51bbcb61fdebd0ab86ef28062704f62c82bbf4addc4e37fa4b00b7cbc\"},",
          "1854:     {file = \"pydantic_core-2.18.4-cp310-none-win_amd64.whl\", hash = \"sha256:6a750aec7bf431517a9fd78cb93c97b9b0c496090fee84a47a0d23668976b4b0\"},",
          "1855:     {file = \"pydantic_core-2.18.4-cp311-cp311-macosx_10_12_x86_64.whl\", hash = \"sha256:942ba11e7dfb66dc70f9ae66b33452f51ac7bb90676da39a7345e99ffb55402d\"},",
          "1856:     {file = \"pydantic_core-2.18.4-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:b2ebef0e0b4454320274f5e83a41844c63438fdc874ea40a8b5b4ecb7693f1c4\"},",
          "1857:     {file = \"pydantic_core-2.18.4-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a642295cd0c8df1b86fc3dced1d067874c353a188dc8e0f744626d49e9aa51c4\"},",
          "1858:     {file = \"pydantic_core-2.18.4-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:5f09baa656c904807e832cf9cce799c6460c450c4ad80803517032da0cd062e2\"},",
          "1859:     {file = \"pydantic_core-2.18.4-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:98906207f29bc2c459ff64fa007afd10a8c8ac080f7e4d5beff4c97086a3dabd\"},",
          "1860:     {file = \"pydantic_core-2.18.4-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:19894b95aacfa98e7cb093cd7881a0c76f55731efad31073db4521e2b6ff5b7d\"},",
          "1861:     {file = \"pydantic_core-2.18.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0fbbdc827fe5e42e4d196c746b890b3d72876bdbf160b0eafe9f0334525119c8\"},",
          "1862:     {file = \"pydantic_core-2.18.4-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:f85d05aa0918283cf29a30b547b4df2fbb56b45b135f9e35b6807cb28bc47951\"},",
          "1863:     {file = \"pydantic_core-2.18.4-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:e85637bc8fe81ddb73fda9e56bab24560bdddfa98aa64f87aaa4e4b6730c23d2\"},",
          "1864:     {file = \"pydantic_core-2.18.4-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:2f5966897e5461f818e136b8451d0551a2e77259eb0f73a837027b47dc95dab9\"},",
          "1865:     {file = \"pydantic_core-2.18.4-cp311-none-win32.whl\", hash = \"sha256:44c7486a4228413c317952e9d89598bcdfb06399735e49e0f8df643e1ccd0558\"},",
          "1866:     {file = \"pydantic_core-2.18.4-cp311-none-win_amd64.whl\", hash = \"sha256:8a7164fe2005d03c64fd3b85649891cd4953a8de53107940bf272500ba8a788b\"},",
          "1867:     {file = \"pydantic_core-2.18.4-cp311-none-win_arm64.whl\", hash = \"sha256:4e99bc050fe65c450344421017f98298a97cefc18c53bb2f7b3531eb39bc7805\"},",
          "1868:     {file = \"pydantic_core-2.18.4-cp312-cp312-macosx_10_12_x86_64.whl\", hash = \"sha256:6f5c4d41b2771c730ea1c34e458e781b18cc668d194958e0112455fff4e402b2\"},",
          "1869:     {file = \"pydantic_core-2.18.4-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:2fdf2156aa3d017fddf8aea5adfba9f777db1d6022d392b682d2a8329e087cef\"},",
          "1870:     {file = \"pydantic_core-2.18.4-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:4748321b5078216070b151d5271ef3e7cc905ab170bbfd27d5c83ee3ec436695\"},",
          "1871:     {file = \"pydantic_core-2.18.4-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:847a35c4d58721c5dc3dba599878ebbdfd96784f3fb8bb2c356e123bdcd73f34\"},",
          "1872:     {file = \"pydantic_core-2.18.4-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:3c40d4eaad41f78e3bbda31b89edc46a3f3dc6e171bf0ecf097ff7a0ffff7cb1\"},",
          "1873:     {file = \"pydantic_core-2.18.4-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:21a5e440dbe315ab9825fcd459b8814bb92b27c974cbc23c3e8baa2b76890077\"},",
          "1874:     {file = \"pydantic_core-2.18.4-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:01dd777215e2aa86dfd664daed5957704b769e726626393438f9c87690ce78c3\"},",
          "1875:     {file = \"pydantic_core-2.18.4-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:4b06beb3b3f1479d32befd1f3079cc47b34fa2da62457cdf6c963393340b56e9\"},",
          "1876:     {file = \"pydantic_core-2.18.4-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:564d7922e4b13a16b98772441879fcdcbe82ff50daa622d681dd682175ea918c\"},",
          "1877:     {file = \"pydantic_core-2.18.4-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:0eb2a4f660fcd8e2b1c90ad566db2b98d7f3f4717c64fe0a83e0adb39766d5b8\"},",
          "1878:     {file = \"pydantic_core-2.18.4-cp312-none-win32.whl\", hash = \"sha256:8b8bab4c97248095ae0c4455b5a1cd1cdd96e4e4769306ab19dda135ea4cdb07\"},",
          "1879:     {file = \"pydantic_core-2.18.4-cp312-none-win_amd64.whl\", hash = \"sha256:14601cdb733d741b8958224030e2bfe21a4a881fb3dd6fbb21f071cabd48fa0a\"},",
          "1880:     {file = \"pydantic_core-2.18.4-cp312-none-win_arm64.whl\", hash = \"sha256:c1322d7dd74713dcc157a2b7898a564ab091ca6c58302d5c7b4c07296e3fd00f\"},",
          "1881:     {file = \"pydantic_core-2.18.4-cp38-cp38-macosx_10_12_x86_64.whl\", hash = \"sha256:823be1deb01793da05ecb0484d6c9e20baebb39bd42b5d72636ae9cf8350dbd2\"},",
          "1882:     {file = \"pydantic_core-2.18.4-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:ebef0dd9bf9b812bf75bda96743f2a6c5734a02092ae7f721c048d156d5fabae\"},",
          "1883:     {file = \"pydantic_core-2.18.4-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:ae1d6df168efb88d7d522664693607b80b4080be6750c913eefb77e34c12c71a\"},",
          "1884:     {file = \"pydantic_core-2.18.4-cp38-cp38-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:f9899c94762343f2cc2fc64c13e7cae4c3cc65cdfc87dd810a31654c9b7358cc\"},",
          "1885:     {file = \"pydantic_core-2.18.4-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:99457f184ad90235cfe8461c4d70ab7dd2680e28821c29eca00252ba90308c78\"},",
          "1886:     {file = \"pydantic_core-2.18.4-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:18f469a3d2a2fdafe99296a87e8a4c37748b5080a26b806a707f25a902c040a8\"},",
          "1887:     {file = \"pydantic_core-2.18.4-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b7cdf28938ac6b8b49ae5e92f2735056a7ba99c9b110a474473fd71185c1af5d\"},",
          "1888:     {file = \"pydantic_core-2.18.4-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:938cb21650855054dc54dfd9120a851c974f95450f00683399006aa6e8abb057\"},",
          "1889:     {file = \"pydantic_core-2.18.4-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:44cd83ab6a51da80fb5adbd9560e26018e2ac7826f9626bc06ca3dc074cd198b\"},",
          "1890:     {file = \"pydantic_core-2.18.4-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:972658f4a72d02b8abfa2581d92d59f59897d2e9f7e708fdabe922f9087773af\"},",
          "1891:     {file = \"pydantic_core-2.18.4-cp38-none-win32.whl\", hash = \"sha256:1d886dc848e60cb7666f771e406acae54ab279b9f1e4143babc9c2258213daa2\"},",
          "1892:     {file = \"pydantic_core-2.18.4-cp38-none-win_amd64.whl\", hash = \"sha256:bb4462bd43c2460774914b8525f79b00f8f407c945d50881568f294c1d9b4443\"},",
          "1893:     {file = \"pydantic_core-2.18.4-cp39-cp39-macosx_10_12_x86_64.whl\", hash = \"sha256:44a688331d4a4e2129140a8118479443bd6f1905231138971372fcde37e43528\"},",
          "1894:     {file = \"pydantic_core-2.18.4-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:a2fdd81edd64342c85ac7cf2753ccae0b79bf2dfa063785503cb85a7d3593223\"},",
          "1895:     {file = \"pydantic_core-2.18.4-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:86110d7e1907ab36691f80b33eb2da87d780f4739ae773e5fc83fb272f88825f\"},",
          "1896:     {file = \"pydantic_core-2.18.4-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:46387e38bd641b3ee5ce247563b60c5ca098da9c56c75c157a05eaa0933ed154\"},",
          "1897:     {file = \"pydantic_core-2.18.4-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:123c3cec203e3f5ac7b000bd82235f1a3eced8665b63d18be751f115588fea30\"},",
          "1898:     {file = \"pydantic_core-2.18.4-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:dc1803ac5c32ec324c5261c7209e8f8ce88e83254c4e1aebdc8b0a39f9ddb443\"},",
          "1899:     {file = \"pydantic_core-2.18.4-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:53db086f9f6ab2b4061958d9c276d1dbe3690e8dd727d6abf2321d6cce37fa94\"},",
          "1900:     {file = \"pydantic_core-2.18.4-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:abc267fa9837245cc28ea6929f19fa335f3dc330a35d2e45509b6566dc18be23\"},",
          "1901:     {file = \"pydantic_core-2.18.4-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:a0d829524aaefdebccb869eed855e2d04c21d2d7479b6cada7ace5448416597b\"},",
          "1902:     {file = \"pydantic_core-2.18.4-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:509daade3b8649f80d4e5ff21aa5673e4ebe58590b25fe42fac5f0f52c6f034a\"},",
          "1903:     {file = \"pydantic_core-2.18.4-cp39-none-win32.whl\", hash = \"sha256:ca26a1e73c48cfc54c4a76ff78df3727b9d9f4ccc8dbee4ae3f73306a591676d\"},",
          "1904:     {file = \"pydantic_core-2.18.4-cp39-none-win_amd64.whl\", hash = \"sha256:c67598100338d5d985db1b3d21f3619ef392e185e71b8d52bceacc4a7771ea7e\"},",
          "1905:     {file = \"pydantic_core-2.18.4-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:574d92eac874f7f4db0ca653514d823a0d22e2354359d0759e3f6a406db5d55d\"},",
          "1906:     {file = \"pydantic_core-2.18.4-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:1f4d26ceb5eb9eed4af91bebeae4b06c3fb28966ca3a8fb765208cf6b51102ab\"},",
          "1907:     {file = \"pydantic_core-2.18.4-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:77450e6d20016ec41f43ca4a6c63e9fdde03f0ae3fe90e7c27bdbeaece8b1ed4\"},",
          "1908:     {file = \"pydantic_core-2.18.4-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d323a01da91851a4f17bf592faf46149c9169d68430b3146dcba2bb5e5719abc\"},",
          "1909:     {file = \"pydantic_core-2.18.4-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:43d447dd2ae072a0065389092a231283f62d960030ecd27565672bd40746c507\"},",
          "1910:     {file = \"pydantic_core-2.18.4-pp310-pypy310_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:578e24f761f3b425834f297b9935e1ce2e30f51400964ce4801002435a1b41ef\"},",
          "1911:     {file = \"pydantic_core-2.18.4-pp310-pypy310_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:81b5efb2f126454586d0f40c4d834010979cb80785173d1586df845a632e4e6d\"},",
          "1912:     {file = \"pydantic_core-2.18.4-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:ab86ce7c8f9bea87b9d12c7f0af71102acbf5ecbc66c17796cff45dae54ef9a5\"},",
          "1913:     {file = \"pydantic_core-2.18.4-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:90afc12421df2b1b4dcc975f814e21bc1754640d502a2fbcc6d41e77af5ec312\"},",
          "1914:     {file = \"pydantic_core-2.18.4-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:51991a89639a912c17bef4b45c87bd83593aee0437d8102556af4885811d59f5\"},",
          "1915:     {file = \"pydantic_core-2.18.4-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:293afe532740370aba8c060882f7d26cfd00c94cae32fd2e212a3a6e3b7bc15e\"},",
          "1916:     {file = \"pydantic_core-2.18.4-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:b48ece5bde2e768197a2d0f6e925f9d7e3e826f0ad2271120f8144a9db18d5c8\"},",
          "1917:     {file = \"pydantic_core-2.18.4-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:eae237477a873ab46e8dd748e515c72c0c804fb380fbe6c85533c7de51f23a8f\"},",
          "1918:     {file = \"pydantic_core-2.18.4-pp39-pypy39_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:834b5230b5dfc0c1ec37b2fda433b271cbbc0e507560b5d1588e2cc1148cf1ce\"},",
          "1919:     {file = \"pydantic_core-2.18.4-pp39-pypy39_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:e858ac0a25074ba4bce653f9b5d0a85b7456eaddadc0ce82d3878c22489fa4ee\"},",
          "1920:     {file = \"pydantic_core-2.18.4-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:2fd41f6eff4c20778d717af1cc50eca52f5afe7805ee530a4fbd0bae284f16e9\"},",
          "1921:     {file = \"pydantic_core-2.18.4.tar.gz\", hash = \"sha256:ec3beeada09ff865c344ff3bc2f427f5e6c26401cc6113d77e372c3fdac73864\"},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2142:     {file = \"PyYAML-6.0.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:bf07ee2fef7014951eeb99f56f39c9bb4af143d8aa3c21b1677805985307da34\"},",
          "2143:     {file = \"PyYAML-6.0.1-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:855fb52b0dc35af121542a76b9a84f8d1cd886ea97c84703eaa6d88e37a2ad28\"},",
          "2144:     {file = \"PyYAML-6.0.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:40df9b996c2b73138957fe23a16a4f0ba614f4c0efce1e9406a184b6d07fa3a9\"},",
          "2146:     {file = \"PyYAML-6.0.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6c22bec3fbe2524cde73d7ada88f6566758a8f7227bfbf93a408a9d86bcc12a0\"},",
          "2147:     {file = \"PyYAML-6.0.1-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:8d4e9c88387b0f5c7d5f281e55304de64cf7f9c0021a3525bd3b1c542da3b0e4\"},",
          "2148:     {file = \"PyYAML-6.0.1-cp312-cp312-win32.whl\", hash = \"sha256:d483d2cdf104e7c9fa60c544d92981f12ad66a457afae824d146093b8c294c54\"},",
          "",
          "[Removed Lines]",
          "2145:     {file = \"PyYAML-6.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a08c6f0fe150303c1c6b71ebcd7213c2858041a7e01975da3a99aed1e7a378ef\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2781: [[package]]",
          "2782: name = \"types-requests\"",
          "2784: description = \"Typing stubs for requests\"",
          "2785: optional = false",
          "2786: python-versions = \">=3.8\"",
          "2787: files = [",
          "2790: ]",
          "2792: [package.dependencies]",
          "",
          "[Removed Lines]",
          "2783: version = \"2.32.0.20240523\"",
          "2788:     {file = \"types-requests-2.32.0.20240523.tar.gz\", hash = \"sha256:26b8a6de32d9f561192b9942b41c0ab2d8010df5677ca8aa146289d11d505f57\"},",
          "2789:     {file = \"types_requests-2.32.0.20240523-py3-none-any.whl\", hash = \"sha256:f19ed0e2daa74302069bbbbf9e82902854ffa780bc790742a810a9aaa52f65ec\"},",
          "",
          "[Added Lines]",
          "2782: version = \"2.32.0.20240602\"",
          "2787:     {file = \"types-requests-2.32.0.20240602.tar.gz\", hash = \"sha256:3f98d7bbd0dd94ebd10ff43a7fbe20c3b8528acace6d8efafef0b6a184793f06\"},",
          "2788:     {file = \"types_requests-2.32.0.20240602-py3-none-any.whl\", hash = \"sha256:ed3946063ea9fbc6b5fc0c44fa279188bae42d582cb63760be6cb4b9d06c3de8\"},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2795: [[package]]",
          "2796: name = \"typing-extensions\"",
          "2798: description = \"Backported and Experimental Type Hints for Python 3.8+\"",
          "2799: optional = false",
          "2800: python-versions = \">=3.8\"",
          "2801: files = [",
          "2804: ]",
          "2806: [[package]]",
          "",
          "[Removed Lines]",
          "2797: version = \"4.12.0\"",
          "2802:     {file = \"typing_extensions-4.12.0-py3-none-any.whl\", hash = \"sha256:b349c66bea9016ac22978d800cfff206d5f9816951f12a7d0ec5578b0a819594\"},",
          "2803:     {file = \"typing_extensions-4.12.0.tar.gz\", hash = \"sha256:8cbcdc8606ebcb0d95453ad7dc5065e6237b6aa230a31e81d0f440c30fed5fd8\"},",
          "",
          "[Added Lines]",
          "2796: version = \"4.12.1\"",
          "2801:     {file = \"typing_extensions-4.12.1-py3-none-any.whl\", hash = \"sha256:6024b58b69089e5a89c347397254e35f1bf02a907728ec7fee9bf0fe837d203a\"},",
          "2802:     {file = \"typing_extensions-4.12.1.tar.gz\", hash = \"sha256:915f5e35ff76f56588223f15fdd5938f9a1cf9195c0de25130c627e4d597f6d1\"},",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2945: [[package]]",
          "2946: name = \"zipp\"",
          "2948: description = \"Backport of pathlib-compatible object wrapper for zip files\"",
          "2949: optional = false",
          "2950: python-versions = \">=3.8\"",
          "2951: files = [",
          "2954: ]",
          "2956: [package.extras]",
          "2960: [extras]",
          "2961: extended-testing = [\"jinja2\"]",
          "",
          "[Removed Lines]",
          "2947: version = \"3.19.0\"",
          "2952:     {file = \"zipp-3.19.0-py3-none-any.whl\", hash = \"sha256:96dc6ad62f1441bcaccef23b274ec471518daf4fbbc580341204936a5a3dddec\"},",
          "2953:     {file = \"zipp-3.19.0.tar.gz\", hash = \"sha256:952df858fb3164426c976d9338d3961e8e8b3758e2e059e0f754b8c4262625ee\"},",
          "2957: docs = [\"furo\", \"jaraco.packaging (>=9.3)\", \"jaraco.tidelift (>=1.4)\", \"rst.linker (>=1.9)\", \"sphinx (>=3.5)\", \"sphinx-lint\"]",
          "2958: testing = [\"big-O\", \"jaraco.functools\", \"jaraco.itertools\", \"jaraco.test\", \"more-itertools\", \"pytest (>=6,!=8.1.*)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-ignore-flaky\", \"pytest-mypy\", \"pytest-ruff (>=0.2.1)\"]",
          "",
          "[Added Lines]",
          "2946: version = \"3.19.2\"",
          "2951:     {file = \"zipp-3.19.2-py3-none-any.whl\", hash = \"sha256:f091755f667055f2d02b32c53771a7a6c8b47e1fdbc4b72a8b9072b3eef8015c\"},",
          "2952:     {file = \"zipp-3.19.2.tar.gz\", hash = \"sha256:bf1dcf6450f873a13e952a29504887c89e6de7506209e5b1bcc3460135d4de19\"},",
          "2956: doc = [\"furo\", \"jaraco.packaging (>=9.3)\", \"jaraco.tidelift (>=1.4)\", \"rst.linker (>=1.9)\", \"sphinx (>=3.5)\", \"sphinx-lint\"]",
          "2957: test = [\"big-O\", \"importlib-resources\", \"jaraco.functools\", \"jaraco.itertools\", \"jaraco.test\", \"more-itertools\", \"pytest (>=6,!=8.1.*)\", \"pytest-checkdocs (>=2.4)\", \"pytest-cov\", \"pytest-enabler (>=2.2)\", \"pytest-ignore-flaky\", \"pytest-mypy\", \"pytest-ruff (>=0.2.1)\"]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2963: [metadata]",
          "2964: lock-version = \"2.0\"",
          "2965: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "2966: content-hash = \"40745c3aae8f648b7bc63bff85e26e5658567dec39f57149a7b1ba7637c93751\"",
          "",
          "[Added Lines]",
          "2965: content-hash = \"6c27c12469c753fbb82e0b7c9d6f3dfc634fe521ba8cb7e03e61bdaa5142199c\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0446b0e191c3033c6a4e25b0da513c97f4da65e9",
      "candidate_info": {
        "commit_hash": "0446b0e191c3033c6a4e25b0da513c97f4da65e9",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/0446b0e191c3033c6a4e25b0da513c97f4da65e9",
        "files": [
          "libs/core/langchain_core/callbacks/manager.py",
          "libs/core/langchain_core/runnables/base.py",
          "libs/core/langchain_core/runnables/config.py",
          "libs/core/langchain_core/tools.py",
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml",
          "libs/core/tests/unit_tests/runnables/test_tracing_interops.py"
        ],
        "message": "[Core] Update Tracing Interops (#22318)\n\nLangSmith and LangChain context var handling evolved in parallel since\noriginally we didn't expect people to want to interweave the decorator\nand langchain code.\n\nOnce we get a new langsmith release, this PR will let you seemlessly\nhand off between @traceable context and runnable config context so you\ncan arbitrarily nest code.\n\nIt's expected that this fails right now until we get another release of\nthe SDK",
        "before_after_code_files": [
          "libs/core/langchain_core/callbacks/manager.py||libs/core/langchain_core/callbacks/manager.py",
          "libs/core/langchain_core/runnables/base.py||libs/core/langchain_core/runnables/base.py",
          "libs/core/langchain_core/runnables/config.py||libs/core/langchain_core/runnables/config.py",
          "libs/core/langchain_core/tools.py||libs/core/langchain_core/tools.py",
          "libs/core/poetry.lock||libs/core/poetry.lock",
          "libs/core/tests/unit_tests/runnables/test_tracing_interops.py||libs/core/tests/unit_tests/runnables/test_tracing_interops.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/langchain_core/callbacks/manager.py||libs/core/langchain_core/callbacks/manager.py": [
          "File: libs/core/langchain_core/callbacks/manager.py -> libs/core/langchain_core/callbacks/manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1918:     )",
          "1920:     run_tree = get_run_tree_context()",
          "1922:     callback_manager = callback_manager_cls(handlers=[], parent_run_id=parent_run_id)",
          "1923:     if inheritable_callbacks or local_callbacks:",
          "1924:         if isinstance(inheritable_callbacks, list) or inheritable_callbacks is None:",
          "",
          "[Removed Lines]",
          "1921:     parent_run_id = None if run_tree is None else getattr(run_tree, \"id\")",
          "",
          "[Added Lines]",
          "1921:     parent_run_id = None if run_tree is None else run_tree.id",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1929:                 parent_run_id=parent_run_id,",
          "1930:             )",
          "1931:         else:",
          "1932:             callback_manager = callback_manager_cls(",
          "1933:                 handlers=inheritable_callbacks.handlers.copy(),",
          "1934:                 inheritable_handlers=inheritable_callbacks.inheritable_handlers.copy(),",
          "1936:                 tags=inheritable_callbacks.tags.copy(),",
          "1937:                 inheritable_tags=inheritable_callbacks.inheritable_tags.copy(),",
          "1938:                 metadata=inheritable_callbacks.metadata.copy(),",
          "",
          "[Removed Lines]",
          "1935:                 parent_run_id=inheritable_callbacks.parent_run_id,",
          "",
          "[Added Lines]",
          "1932:             parent_run_id_ = inheritable_callbacks.parent_run_id",
          "1933:             # Break ties between the external tracing context and inherited context",
          "1934:             if parent_run_id is not None:",
          "1935:                 if parent_run_id_ is None:",
          "1936:                     parent_run_id_ = parent_run_id",
          "1937:                 # If the LC parent has already been reflected",
          "1938:                 # in the run tree, we know the run_tree is either the",
          "1939:                 # same parent or a child of the parent.",
          "1940:                 elif run_tree and str(parent_run_id_) in run_tree.dotted_order:",
          "1941:                     parent_run_id_ = parent_run_id",
          "1942:                 # Otherwise, we assume the LC context has progressed",
          "1943:                 # beyond the run tree and we should not inherit the parent.",
          "1947:                 parent_run_id=parent_run_id_,",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/runnables/base.py||libs/core/langchain_core/runnables/base.py": [
          "File: libs/core/langchain_core/runnables/base.py -> libs/core/langchain_core/runnables/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: from langchain_core.pydantic_v1 import BaseModel, Field",
          "46: from langchain_core.runnables.config import (",
          "47:     RunnableConfig,",
          "48:     acall_func_with_variable_args,",
          "49:     call_func_with_variable_args,",
          "50:     ensure_config,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:     _set_config_context,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:     merge_configs,",
          "56:     patch_config,",
          "57:     run_in_executor,",
          "59: )",
          "60: from langchain_core.runnables.graph import Graph",
          "61: from langchain_core.runnables.schema import StreamEvent",
          "",
          "[Removed Lines]",
          "58:     var_child_runnable_config,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1503:         try:",
          "1504:             child_config = patch_config(config, callbacks=run_manager.get_child())",
          "1505:             context = copy_context()",
          "1507:             output = cast(",
          "1508:                 Output,",
          "1509:                 context.run(",
          "",
          "[Removed Lines]",
          "1506:             context.run(var_child_runnable_config.set, child_config)",
          "",
          "[Added Lines]",
          "1506:             context.run(_set_config_context, child_config)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1551:         try:",
          "1552:             child_config = patch_config(config, callbacks=run_manager.get_child())",
          "1553:             context = copy_context()",
          "1555:             coro = acall_func_with_variable_args(",
          "1556:                 func, input, config, run_manager, **kwargs",
          "1557:             )",
          "",
          "[Removed Lines]",
          "1554:             context.run(var_child_runnable_config.set, child_config)",
          "",
          "[Added Lines]",
          "1554:             context.run(_set_config_context, child_config)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1760:             if accepts_run_manager(transformer):",
          "1761:                 kwargs[\"run_manager\"] = run_manager",
          "1762:             context = copy_context()",
          "1764:             iterator = context.run(transformer, input_for_transform, **kwargs)  # type: ignore[arg-type]",
          "1765:             if stream_handler := next(",
          "1766:                 (",
          "",
          "[Removed Lines]",
          "1763:             context.run(var_child_runnable_config.set, child_config)",
          "",
          "[Added Lines]",
          "1763:             context.run(_set_config_context, child_config)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1860:             if accepts_run_manager(transformer):",
          "1861:                 kwargs[\"run_manager\"] = run_manager",
          "1862:             context = copy_context()",
          "1864:             iterator = context.run(transformer, input_for_transform, **kwargs)  # type: ignore[arg-type]",
          "1866:             if stream_handler := next(",
          "",
          "[Removed Lines]",
          "1863:             context.run(var_child_runnable_config.set, child_config)",
          "",
          "[Added Lines]",
          "1863:             context.run(_set_config_context, child_config)",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/runnables/config.py||libs/core/langchain_core/runnables/config.py": [
          "File: libs/core/langchain_core/runnables/config.py -> libs/core/langchain_core/runnables/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: )",
          "112: def ensure_config(config: Optional[RunnableConfig] = None) -> RunnableConfig:",
          "113:     \"\"\"Ensure that a config is a dict with all keys present.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: def _set_config_context(config: RunnableConfig) -> None:",
          "113:     \"\"\"Set the child runnable config + tracing context",
          "115:     Args:",
          "116:         config (RunnableConfig): The config to set.",
          "117:     \"\"\"",
          "118:     from langsmith import (",
          "119:         RunTree,  # type: ignore",
          "120:         run_helpers,  # type: ignore",
          "121:     )",
          "123:     var_child_runnable_config.set(config)",
          "124:     if hasattr(RunTree, \"from_runnable_config\"):",
          "125:         # import _set_tracing_context, get_tracing_context",
          "126:         rt = RunTree.from_runnable_config(dict(config))",
          "127:         tc = run_helpers.get_tracing_context()",
          "128:         run_helpers._set_tracing_context({**tc, \"parent\": rt})",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/tools.py||libs/core/langchain_core/tools.py": [
          "File: libs/core/langchain_core/tools.py -> libs/core/langchain_core/tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     ensure_config,",
          "78: )",
          "79: from langchain_core.runnables.config import (",
          "80:     patch_config,",
          "81:     run_in_executor,",
          "83: )",
          "84: from langchain_core.runnables.utils import accepts_context",
          "",
          "[Removed Lines]",
          "82:     var_child_runnable_config,",
          "",
          "[Added Lines]",
          "80:     _set_config_context,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:                 callbacks=run_manager.get_child(),",
          "445:             )",
          "446:             context = copy_context()",
          "448:             parsed_input = self._parse_input(tool_input)",
          "449:             tool_args, tool_kwargs = self._to_args_and_kwargs(parsed_input)",
          "450:             observation = (",
          "",
          "[Removed Lines]",
          "447:             context.run(var_child_runnable_config.set, child_config)",
          "",
          "[Added Lines]",
          "447:             context.run(_set_config_context, child_config)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "544:                 callbacks=run_manager.get_child(),",
          "545:             )",
          "546:             context = copy_context()",
          "548:             coro = (",
          "549:                 context.run(",
          "550:                     self._arun, *tool_args, run_manager=run_manager, **tool_kwargs",
          "",
          "[Removed Lines]",
          "547:             context.run(var_child_runnable_config.set, child_config)",
          "",
          "[Added Lines]",
          "547:             context.run(_set_config_context, child_config)",
          "",
          "---------------"
        ],
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: [[package]]",
          "4: name = \"annotated-types\"",
          "6: description = \"Reusable constraint types to use with typing.Annotated\"",
          "7: optional = false",
          "8: python-versions = \">=3.8\"",
          "9: files = [",
          "12: ]",
          "14: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.2 and should not be changed by hand.",
          "5: version = \"0.6.0\"",
          "10:     {file = \"annotated_types-0.6.0-py3-none-any.whl\", hash = \"sha256:0641064de18ba7a25dee8f96403ebc39113d0cb953a01429249d5c7564666a43\"},",
          "11:     {file = \"annotated_types-0.6.0.tar.gz\", hash = \"sha256:563339e807e53ffd9c267e99fc6d9ea23eb8443c08f112651963e24e22f84a5d\"},",
          "",
          "[Added Lines]",
          "1: # This file is automatically @generated by Poetry 1.8.3 and should not be changed by hand.",
          "5: version = \"0.7.0\"",
          "10:     {file = \"annotated_types-0.7.0-py3-none-any.whl\", hash = \"sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53\"},",
          "11:     {file = \"annotated_types-0.7.0.tar.gz\", hash = \"sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89\"},",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: [[package]]",
          "18: name = \"anyio\"",
          "20: description = \"High level compatibility layer for multiple asynchronous event loop implementations\"",
          "21: optional = false",
          "22: python-versions = \">=3.8\"",
          "23: files = [",
          "26: ]",
          "28: [package.dependencies]",
          "",
          "[Removed Lines]",
          "19: version = \"4.3.0\"",
          "24:     {file = \"anyio-4.3.0-py3-none-any.whl\", hash = \"sha256:048e05d0f6caeed70d731f3db756d35dcc1f35747c8c403364a8332c630441b8\"},",
          "25:     {file = \"anyio-4.3.0.tar.gz\", hash = \"sha256:f75253795a87df48568485fd18cdd2a3fa5c4f7c5be8e5e36637733fce06fed6\"},",
          "",
          "[Added Lines]",
          "19: version = \"4.4.0\"",
          "24:     {file = \"anyio-4.4.0-py3-none-any.whl\", hash = \"sha256:c1b2d8f46a8a812513012e1107cb0e68c17159a7a594208005a57dc776e1bdc7\"},",
          "25:     {file = \"anyio-4.4.0.tar.gz\", hash = \"sha256:5aadc6a1bbb7cdb0bede386cac5e2940f5e2ff3aa20277e991cf028e0585ce94\"},",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "781: [[package]]",
          "782: name = \"ipywidgets\"",
          "784: description = \"Jupyter interactive widgets\"",
          "785: optional = false",
          "786: python-versions = \">=3.7\"",
          "787: files = [",
          "790: ]",
          "792: [package.dependencies]",
          "793: comm = \">=0.1.3\"",
          "794: ipython = \">=6.1.0\"",
          "796: traitlets = \">=4.3.1\"",
          "799: [package.extras]",
          "800: test = [\"ipykernel\", \"jsonschema\", \"pytest (>=3.6.0)\", \"pytest-cov\", \"pytz\"]",
          "",
          "[Removed Lines]",
          "783: version = \"8.1.2\"",
          "788:     {file = \"ipywidgets-8.1.2-py3-none-any.whl\", hash = \"sha256:bbe43850d79fb5e906b14801d6c01402857996864d1e5b6fa62dd2ee35559f60\"},",
          "789:     {file = \"ipywidgets-8.1.2.tar.gz\", hash = \"sha256:d0b9b41e49bae926a866e613a39b0f0097745d2b9f1f3dd406641b4a57ec42c9\"},",
          "795: jupyterlab-widgets = \">=3.0.10,<3.1.0\"",
          "797: widgetsnbextension = \">=4.0.10,<4.1.0\"",
          "",
          "[Added Lines]",
          "783: version = \"8.1.3\"",
          "788:     {file = \"ipywidgets-8.1.3-py3-none-any.whl\", hash = \"sha256:efafd18f7a142248f7cb0ba890a68b96abd4d6e88ddbda483c9130d12667eaf2\"},",
          "789:     {file = \"ipywidgets-8.1.3.tar.gz\", hash = \"sha256:f5f9eeaae082b1823ce9eac2575272952f40d748893972956dc09700a6392d9c\"},",
          "795: jupyterlab-widgets = \">=3.0.11,<3.1.0\"",
          "797: widgetsnbextension = \">=4.0.11,<4.1.0\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "882: python-versions = \">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, !=3.6.*\"",
          "883: files = [",
          "884:     {file = \"jsonpointer-2.4-py2.py3-none-any.whl\", hash = \"sha256:15d51bba20eea3165644553647711d150376234112651b4f1811022aecad7d7a\"},",
          "886: ]",
          "888: [[package]]",
          "",
          "[Removed Lines]",
          "885:     {file = \"jsonpointer-2.4.tar.gz\", hash = \"sha256:585cee82b70211fa9e6043b7bb89db6e1aa49524340dde8ad6b63206ea689d88\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "954: [[package]]",
          "955: name = \"jupyter-client\"",
          "957: description = \"Jupyter protocol implementation and client libraries\"",
          "958: optional = false",
          "959: python-versions = \">=3.8\"",
          "960: files = [",
          "963: ]",
          "965: [package.dependencies]",
          "",
          "[Removed Lines]",
          "956: version = \"8.6.1\"",
          "961:     {file = \"jupyter_client-8.6.1-py3-none-any.whl\", hash = \"sha256:3b7bd22f058434e3b9a7ea4b1500ed47de2713872288c0d511d19926f99b459f\"},",
          "962:     {file = \"jupyter_client-8.6.1.tar.gz\", hash = \"sha256:e842515e2bab8e19186d89fdfea7abd15e39dd581f94e399f00e2af5a1652d3f\"},",
          "",
          "[Added Lines]",
          "955: version = \"8.6.2\"",
          "960:     {file = \"jupyter_client-8.6.2-py3-none-any.whl\", hash = \"sha256:50cbc5c66fd1b8f65ecb66bc490ab73217993632809b6e505687de18e9dea39f\"},",
          "961:     {file = \"jupyter_client-8.6.2.tar.gz\", hash = \"sha256:2bda14d55ee5ba58552a8c53ae43d215ad9868853489213f37da060ced54d8df\"},",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "973: [package.extras]",
          "974: docs = [\"ipykernel\", \"myst-parser\", \"pydata-sphinx-theme\", \"sphinx (>=4)\", \"sphinx-autodoc-typehints\", \"sphinxcontrib-github-alt\", \"sphinxcontrib-spelling\"]",
          "977: [[package]]",
          "978: name = \"jupyter-console\"",
          "",
          "[Removed Lines]",
          "975: test = [\"coverage\", \"ipykernel (>=6.14)\", \"mypy\", \"paramiko\", \"pre-commit\", \"pytest\", \"pytest-cov\", \"pytest-jupyter[client] (>=0.4.1)\", \"pytest-timeout\"]",
          "",
          "[Added Lines]",
          "974: test = [\"coverage\", \"ipykernel (>=6.14)\", \"mypy\", \"paramiko\", \"pre-commit\", \"pytest (<8.2.0)\", \"pytest-cov\", \"pytest-jupyter[client] (>=0.4.1)\", \"pytest-timeout\"]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1116: [[package]]",
          "1117: name = \"jupyterlab\"",
          "1119: description = \"JupyterLab computational environment\"",
          "1120: optional = false",
          "1121: python-versions = \">=3.8\"",
          "1122: files = [",
          "1125: ]",
          "1127: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1118: version = \"4.2.0\"",
          "1123:     {file = \"jupyterlab-4.2.0-py3-none-any.whl\", hash = \"sha256:0dfe9278e25a145362289c555d9beb505697d269c10e99909766af7c440ad3cc\"},",
          "1124:     {file = \"jupyterlab-4.2.0.tar.gz\", hash = \"sha256:356e9205a6a2ab689c47c8fe4919dba6c076e376d03f26baadc05748c2435dd5\"},",
          "",
          "[Added Lines]",
          "1117: version = \"4.2.1\"",
          "1122:     {file = \"jupyterlab-4.2.1-py3-none-any.whl\", hash = \"sha256:6ac6e3827b3c890e6e549800e8a4f4aaea6a69321e2240007902aa7a0c56a8e4\"},",
          "1123:     {file = \"jupyterlab-4.2.1.tar.gz\", hash = \"sha256:a10fb71085a6900820c62d43324005046402ffc8f0fde696103e37238a839507\"},",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1162: [[package]]",
          "1163: name = \"jupyterlab-server\"",
          "1165: description = \"A set of server components for JupyterLab and JupyterLab like applications.\"",
          "1166: optional = false",
          "1167: python-versions = \">=3.8\"",
          "1168: files = [",
          "1171: ]",
          "1173: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1164: version = \"2.27.1\"",
          "1169:     {file = \"jupyterlab_server-2.27.1-py3-none-any.whl\", hash = \"sha256:f5e26156e5258b24d532c84e7c74cc212e203bff93eb856f81c24c16daeecc75\"},",
          "1170:     {file = \"jupyterlab_server-2.27.1.tar.gz\", hash = \"sha256:097b5ac709b676c7284ac9c5e373f11930a561f52cd5a86e4fc7e5a9c8a8631d\"},",
          "",
          "[Added Lines]",
          "1163: version = \"2.27.2\"",
          "1168:     {file = \"jupyterlab_server-2.27.2-py3-none-any.whl\", hash = \"sha256:54aa2d64fd86383b5438d9f0c032f043c4d8c0264b8af9f60bd061157466ea43\"},",
          "1169:     {file = \"jupyterlab_server-2.27.2.tar.gz\", hash = \"sha256:15cbb349dc45e954e09bacf81b9f9bcb10815ff660fb2034ecd7417db3a7ea27\"},",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1188: [[package]]",
          "1189: name = \"jupyterlab-widgets\"",
          "1191: description = \"Jupyter interactive widgets for JupyterLab\"",
          "1192: optional = false",
          "1193: python-versions = \">=3.7\"",
          "1194: files = [",
          "1197: ]",
          "1199: [[package]]",
          "",
          "[Removed Lines]",
          "1190: version = \"3.0.10\"",
          "1195:     {file = \"jupyterlab_widgets-3.0.10-py3-none-any.whl\", hash = \"sha256:dd61f3ae7a5a7f80299e14585ce6cf3d6925a96c9103c978eda293197730cb64\"},",
          "1196:     {file = \"jupyterlab_widgets-3.0.10.tar.gz\", hash = \"sha256:04f2ac04976727e4f9d0fa91cdc2f1ab860f965e504c29dbd6a65c882c9d04c0\"},",
          "",
          "[Added Lines]",
          "1189: version = \"3.0.11\"",
          "1194:     {file = \"jupyterlab_widgets-3.0.11-py3-none-any.whl\", hash = \"sha256:78287fd86d20744ace330a61625024cf5521e1c012a352ddc0a3cdc2348becd0\"},",
          "1195:     {file = \"jupyterlab_widgets-3.0.11.tar.gz\", hash = \"sha256:dd5ac679593c969af29c9bed054c24f26842baa51352114736756bc035deee27\"},",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1218: [[package]]",
          "1219: name = \"langsmith\"",
          "1221: description = \"Client library to connect to the LangSmith LLM Tracing and Evaluation Platform.\"",
          "1222: optional = false",
          "1223: python-versions = \"<4.0,>=3.8.1\"",
          "1224: files = [",
          "1227: ]",
          "1229: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1220: version = \"0.1.59\"",
          "1225:     {file = \"langsmith-0.1.59-py3-none-any.whl\", hash = \"sha256:445e3bc1d3baa1e5340cd979907a19483b9763a2ed37b863a01113d406f69345\"},",
          "1226:     {file = \"langsmith-0.1.59.tar.gz\", hash = \"sha256:e748a89f4dd6aa441349143e49e546c03b5dfb43376a25bfef6a5ca792fe1437\"},",
          "",
          "[Added Lines]",
          "1219: version = \"0.1.65\"",
          "1224:     {file = \"langsmith-0.1.65-py3-none-any.whl\", hash = \"sha256:ab4487029240e69cca30da1065f1e9138e5a7ca2bbe8c697f0bd7d5839f71cf7\"},",
          "1225:     {file = \"langsmith-0.1.65.tar.gz\", hash = \"sha256:d3c2eb2391478bd79989f02652cf66e29a7959d677614b6993a47cef43f7f43b\"},",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1739: [[package]]",
          "1740: name = \"prompt-toolkit\"",
          "1742: description = \"Library for building powerful interactive command lines in Python\"",
          "1743: optional = false",
          "1744: python-versions = \">=3.7.0\"",
          "1745: files = [",
          "1748: ]",
          "1750: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1741: version = \"3.0.43\"",
          "1746:     {file = \"prompt_toolkit-3.0.43-py3-none-any.whl\", hash = \"sha256:a11a29cb3bf0a28a387fe5122cdb649816a957cd9261dcedf8c9f1fef33eacf6\"},",
          "1747:     {file = \"prompt_toolkit-3.0.43.tar.gz\", hash = \"sha256:3527b7af26106cbc65a040bcc84839a3566ec1b051bb0bfe953631e704b0ff7d\"},",
          "",
          "[Added Lines]",
          "1740: version = \"3.0.45\"",
          "1745:     {file = \"prompt_toolkit-3.0.45-py3-none-any.whl\", hash = \"sha256:a29b89160e494e3ea8622b09fa5897610b437884dcdcd054fdc1308883326c2a\"},",
          "1746:     {file = \"prompt_toolkit-3.0.45.tar.gz\", hash = \"sha256:07c60ee4ab7b7e90824b61afa840c8f5aad2d46b3e2e10acc33d8ecc94a49089\"},",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1817: [[package]]",
          "1818: name = \"pydantic\"",
          "1820: description = \"Data validation using Python type hints\"",
          "1821: optional = false",
          "1822: python-versions = \">=3.8\"",
          "1823: files = [",
          "1826: ]",
          "1828: [package.dependencies]",
          "1829: annotated-types = \">=0.4.0\"",
          "1831: typing-extensions = \">=4.6.1\"",
          "1833: [package.extras]",
          "",
          "[Removed Lines]",
          "1819: version = \"2.7.1\"",
          "1824:     {file = \"pydantic-2.7.1-py3-none-any.whl\", hash = \"sha256:e029badca45266732a9a79898a15ae2e8b14840b1eabbb25844be28f0b33f3d5\"},",
          "1825:     {file = \"pydantic-2.7.1.tar.gz\", hash = \"sha256:e9dbb5eada8abe4d9ae5f46b9939aead650cd2b68f249bb3a8139dbe125803cc\"},",
          "1830: pydantic-core = \"2.18.2\"",
          "",
          "[Added Lines]",
          "1818: version = \"2.7.2\"",
          "1823:     {file = \"pydantic-2.7.2-py3-none-any.whl\", hash = \"sha256:834ab954175f94e6e68258537dc49402c4a5e9d0409b9f1b86b7e934a8372de7\"},",
          "1824:     {file = \"pydantic-2.7.2.tar.gz\", hash = \"sha256:71b2945998f9c9b7919a45bde9a50397b289937d215ae141c1d0903ba7149fd7\"},",
          "1829: pydantic-core = \"2.18.3\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1836: [[package]]",
          "1837: name = \"pydantic-core\"",
          "1839: description = \"Core functionality for Pydantic validation and serialization\"",
          "1840: optional = false",
          "1841: python-versions = \">=3.8\"",
          "1842: files = [",
          "1922: ]",
          "1924: [package.dependencies]",
          "",
          "[Removed Lines]",
          "1838: version = \"2.18.2\"",
          "1843:     {file = \"pydantic_core-2.18.2-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:9e08e867b306f525802df7cd16c44ff5ebbe747ff0ca6cf3fde7f36c05a59a81\"},",
          "1844:     {file = \"pydantic_core-2.18.2-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:f0a21cbaa69900cbe1a2e7cad2aa74ac3cf21b10c3efb0fa0b80305274c0e8a2\"},",
          "1845:     {file = \"pydantic_core-2.18.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:0680b1f1f11fda801397de52c36ce38ef1c1dc841a0927a94f226dea29c3ae3d\"},",
          "1846:     {file = \"pydantic_core-2.18.2-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:95b9d5e72481d3780ba3442eac863eae92ae43a5f3adb5b4d0a1de89d42bb250\"},",
          "1847:     {file = \"pydantic_core-2.18.2-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:c4fcf5cd9c4b655ad666ca332b9a081112cd7a58a8b5a6ca7a3104bc950f2038\"},",
          "1848:     {file = \"pydantic_core-2.18.2-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:9b5155ff768083cb1d62f3e143b49a8a3432e6789a3abee8acd005c3c7af1c74\"},",
          "1849:     {file = \"pydantic_core-2.18.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:553ef617b6836fc7e4df130bb851e32fe357ce36336d897fd6646d6058d980af\"},",
          "1850:     {file = \"pydantic_core-2.18.2-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:b89ed9eb7d616ef5714e5590e6cf7f23b02d0d539767d33561e3675d6f9e3857\"},",
          "1851:     {file = \"pydantic_core-2.18.2-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:75f7e9488238e920ab6204399ded280dc4c307d034f3924cd7f90a38b1829563\"},",
          "1852:     {file = \"pydantic_core-2.18.2-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:ef26c9e94a8c04a1b2924149a9cb081836913818e55681722d7f29af88fe7b38\"},",
          "1853:     {file = \"pydantic_core-2.18.2-cp310-none-win32.whl\", hash = \"sha256:182245ff6b0039e82b6bb585ed55a64d7c81c560715d1bad0cbad6dfa07b4027\"},",
          "1854:     {file = \"pydantic_core-2.18.2-cp310-none-win_amd64.whl\", hash = \"sha256:e23ec367a948b6d812301afc1b13f8094ab7b2c280af66ef450efc357d2ae543\"},",
          "1855:     {file = \"pydantic_core-2.18.2-cp311-cp311-macosx_10_12_x86_64.whl\", hash = \"sha256:219da3f096d50a157f33645a1cf31c0ad1fe829a92181dd1311022f986e5fbe3\"},",
          "1856:     {file = \"pydantic_core-2.18.2-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:cc1cfd88a64e012b74e94cd00bbe0f9c6df57049c97f02bb07d39e9c852e19a4\"},",
          "1857:     {file = \"pydantic_core-2.18.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:05b7133a6e6aeb8df37d6f413f7705a37ab4031597f64ab56384c94d98fa0e90\"},",
          "1858:     {file = \"pydantic_core-2.18.2-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:224c421235f6102e8737032483f43c1a8cfb1d2f45740c44166219599358c2cd\"},",
          "1859:     {file = \"pydantic_core-2.18.2-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:b14d82cdb934e99dda6d9d60dc84a24379820176cc4a0d123f88df319ae9c150\"},",
          "1860:     {file = \"pydantic_core-2.18.2-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:2728b01246a3bba6de144f9e3115b532ee44bd6cf39795194fb75491824a1413\"},",
          "1861:     {file = \"pydantic_core-2.18.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:470b94480bb5ee929f5acba6995251ada5e059a5ef3e0dfc63cca287283ebfa6\"},",
          "1862:     {file = \"pydantic_core-2.18.2-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:997abc4df705d1295a42f95b4eec4950a37ad8ae46d913caeee117b6b198811c\"},",
          "1863:     {file = \"pydantic_core-2.18.2-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:75250dbc5290e3f1a0f4618db35e51a165186f9034eff158f3d490b3fed9f8a0\"},",
          "1864:     {file = \"pydantic_core-2.18.2-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:4456f2dca97c425231d7315737d45239b2b51a50dc2b6f0c2bb181fce6207664\"},",
          "1865:     {file = \"pydantic_core-2.18.2-cp311-none-win32.whl\", hash = \"sha256:269322dcc3d8bdb69f054681edff86276b2ff972447863cf34c8b860f5188e2e\"},",
          "1866:     {file = \"pydantic_core-2.18.2-cp311-none-win_amd64.whl\", hash = \"sha256:800d60565aec896f25bc3cfa56d2277d52d5182af08162f7954f938c06dc4ee3\"},",
          "1867:     {file = \"pydantic_core-2.18.2-cp311-none-win_arm64.whl\", hash = \"sha256:1404c69d6a676245199767ba4f633cce5f4ad4181f9d0ccb0577e1f66cf4c46d\"},",
          "1868:     {file = \"pydantic_core-2.18.2-cp312-cp312-macosx_10_12_x86_64.whl\", hash = \"sha256:fb2bd7be70c0fe4dfd32c951bc813d9fe6ebcbfdd15a07527796c8204bd36242\"},",
          "1869:     {file = \"pydantic_core-2.18.2-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:6132dd3bd52838acddca05a72aafb6eab6536aa145e923bb50f45e78b7251043\"},",
          "1870:     {file = \"pydantic_core-2.18.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d7d904828195733c183d20a54230c0df0eb46ec746ea1a666730787353e87182\"},",
          "1871:     {file = \"pydantic_core-2.18.2-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:c9bd70772c720142be1020eac55f8143a34ec9f82d75a8e7a07852023e46617f\"},",
          "1872:     {file = \"pydantic_core-2.18.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:2b8ed04b3582771764538f7ee7001b02e1170223cf9b75dff0bc698fadb00cf3\"},",
          "1873:     {file = \"pydantic_core-2.18.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:e6dac87ddb34aaec85f873d737e9d06a3555a1cc1a8e0c44b7f8d5daeb89d86f\"},",
          "1874:     {file = \"pydantic_core-2.18.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7ca4ae5a27ad7a4ee5170aebce1574b375de390bc01284f87b18d43a3984df72\"},",
          "1875:     {file = \"pydantic_core-2.18.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:886eec03591b7cf058467a70a87733b35f44707bd86cf64a615584fd72488b7c\"},",
          "1876:     {file = \"pydantic_core-2.18.2-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:ca7b0c1f1c983e064caa85f3792dd2fe3526b3505378874afa84baf662e12241\"},",
          "1877:     {file = \"pydantic_core-2.18.2-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:4b4356d3538c3649337df4074e81b85f0616b79731fe22dd11b99499b2ebbdf3\"},",
          "1878:     {file = \"pydantic_core-2.18.2-cp312-none-win32.whl\", hash = \"sha256:8b172601454f2d7701121bbec3425dd71efcb787a027edf49724c9cefc14c038\"},",
          "1879:     {file = \"pydantic_core-2.18.2-cp312-none-win_amd64.whl\", hash = \"sha256:b1bd7e47b1558ea872bd16c8502c414f9e90dcf12f1395129d7bb42a09a95438\"},",
          "1880:     {file = \"pydantic_core-2.18.2-cp312-none-win_arm64.whl\", hash = \"sha256:98758d627ff397e752bc339272c14c98199c613f922d4a384ddc07526c86a2ec\"},",
          "1881:     {file = \"pydantic_core-2.18.2-cp38-cp38-macosx_10_12_x86_64.whl\", hash = \"sha256:9fdad8e35f278b2c3eb77cbdc5c0a49dada440657bf738d6905ce106dc1de439\"},",
          "1882:     {file = \"pydantic_core-2.18.2-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:1d90c3265ae107f91a4f279f4d6f6f1d4907ac76c6868b27dc7fb33688cfb347\"},",
          "1883:     {file = \"pydantic_core-2.18.2-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:390193c770399861d8df9670fb0d1874f330c79caaca4642332df7c682bf6b91\"},",
          "1884:     {file = \"pydantic_core-2.18.2-cp38-cp38-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:82d5d4d78e4448683cb467897fe24e2b74bb7b973a541ea1dcfec1d3cbce39fb\"},",
          "1885:     {file = \"pydantic_core-2.18.2-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:4774f3184d2ef3e14e8693194f661dea5a4d6ca4e3dc8e39786d33a94865cefd\"},",
          "1886:     {file = \"pydantic_core-2.18.2-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:d4d938ec0adf5167cb335acb25a4ee69a8107e4984f8fbd2e897021d9e4ca21b\"},",
          "1887:     {file = \"pydantic_core-2.18.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e0e8b1be28239fc64a88a8189d1df7fad8be8c1ae47fcc33e43d4be15f99cc70\"},",
          "1888:     {file = \"pydantic_core-2.18.2-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:868649da93e5a3d5eacc2b5b3b9235c98ccdbfd443832f31e075f54419e1b96b\"},",
          "1889:     {file = \"pydantic_core-2.18.2-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:78363590ef93d5d226ba21a90a03ea89a20738ee5b7da83d771d283fd8a56761\"},",
          "1890:     {file = \"pydantic_core-2.18.2-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:852e966fbd035a6468fc0a3496589b45e2208ec7ca95c26470a54daed82a0788\"},",
          "1891:     {file = \"pydantic_core-2.18.2-cp38-none-win32.whl\", hash = \"sha256:6a46e22a707e7ad4484ac9ee9f290f9d501df45954184e23fc29408dfad61350\"},",
          "1892:     {file = \"pydantic_core-2.18.2-cp38-none-win_amd64.whl\", hash = \"sha256:d91cb5ea8b11607cc757675051f61b3d93f15eca3cefb3e6c704a5d6e8440f4e\"},",
          "1893:     {file = \"pydantic_core-2.18.2-cp39-cp39-macosx_10_12_x86_64.whl\", hash = \"sha256:ae0a8a797a5e56c053610fa7be147993fe50960fa43609ff2a9552b0e07013e8\"},",
          "1894:     {file = \"pydantic_core-2.18.2-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:042473b6280246b1dbf530559246f6842b56119c2926d1e52b631bdc46075f2a\"},",
          "1895:     {file = \"pydantic_core-2.18.2-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1a388a77e629b9ec814c1b1e6b3b595fe521d2cdc625fcca26fbc2d44c816804\"},",
          "1896:     {file = \"pydantic_core-2.18.2-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:e25add29b8f3b233ae90ccef2d902d0ae0432eb0d45370fe315d1a5cf231004b\"},",
          "1897:     {file = \"pydantic_core-2.18.2-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:f459a5ce8434614dfd39bbebf1041952ae01da6bed9855008cb33b875cb024c0\"},",
          "1898:     {file = \"pydantic_core-2.18.2-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:eff2de745698eb46eeb51193a9f41d67d834d50e424aef27df2fcdee1b153845\"},",
          "1899:     {file = \"pydantic_core-2.18.2-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:a8309f67285bdfe65c372ea3722b7a5642680f3dba538566340a9d36e920b5f0\"},",
          "1900:     {file = \"pydantic_core-2.18.2-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:f93a8a2e3938ff656a7c1bc57193b1319960ac015b6e87d76c76bf14fe0244b4\"},",
          "1901:     {file = \"pydantic_core-2.18.2-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:22057013c8c1e272eb8d0eebc796701167d8377441ec894a8fed1af64a0bf399\"},",
          "1902:     {file = \"pydantic_core-2.18.2-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:cfeecd1ac6cc1fb2692c3d5110781c965aabd4ec5d32799773ca7b1456ac636b\"},",
          "1903:     {file = \"pydantic_core-2.18.2-cp39-none-win32.whl\", hash = \"sha256:0d69b4c2f6bb3e130dba60d34c0845ba31b69babdd3f78f7c0c8fae5021a253e\"},",
          "1904:     {file = \"pydantic_core-2.18.2-cp39-none-win_amd64.whl\", hash = \"sha256:d9319e499827271b09b4e411905b24a426b8fb69464dfa1696258f53a3334641\"},",
          "1905:     {file = \"pydantic_core-2.18.2-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:a1874c6dd4113308bd0eb568418e6114b252afe44319ead2b4081e9b9521fe75\"},",
          "1906:     {file = \"pydantic_core-2.18.2-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:ccdd111c03bfd3666bd2472b674c6899550e09e9f298954cfc896ab92b5b0e6d\"},",
          "1907:     {file = \"pydantic_core-2.18.2-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e18609ceaa6eed63753037fc06ebb16041d17d28199ae5aba0052c51449650a9\"},",
          "1908:     {file = \"pydantic_core-2.18.2-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6e5c584d357c4e2baf0ff7baf44f4994be121e16a2c88918a5817331fc7599d7\"},",
          "1909:     {file = \"pydantic_core-2.18.2-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:43f0f463cf89ace478de71a318b1b4f05ebc456a9b9300d027b4b57c1a2064fb\"},",
          "1910:     {file = \"pydantic_core-2.18.2-pp310-pypy310_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:e1b395e58b10b73b07b7cf740d728dd4ff9365ac46c18751bf8b3d8cca8f625a\"},",
          "1911:     {file = \"pydantic_core-2.18.2-pp310-pypy310_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:0098300eebb1c837271d3d1a2cd2911e7c11b396eac9661655ee524a7f10587b\"},",
          "1912:     {file = \"pydantic_core-2.18.2-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:36789b70d613fbac0a25bb07ab3d9dba4d2e38af609c020cf4d888d165ee0bf3\"},",
          "1913:     {file = \"pydantic_core-2.18.2-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:3f9a801e7c8f1ef8718da265bba008fa121243dfe37c1cea17840b0944dfd72c\"},",
          "1914:     {file = \"pydantic_core-2.18.2-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:3a6515ebc6e69d85502b4951d89131ca4e036078ea35533bb76327f8424531ce\"},",
          "1915:     {file = \"pydantic_core-2.18.2-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:20aca1e2298c56ececfd8ed159ae4dde2df0781988c97ef77d5c16ff4bd5b400\"},",
          "1916:     {file = \"pydantic_core-2.18.2-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:223ee893d77a310a0391dca6df00f70bbc2f36a71a895cecd9a0e762dc37b349\"},",
          "1917:     {file = \"pydantic_core-2.18.2-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:2334ce8c673ee93a1d6a65bd90327588387ba073c17e61bf19b4fd97d688d63c\"},",
          "1918:     {file = \"pydantic_core-2.18.2-pp39-pypy39_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:cbca948f2d14b09d20268cda7b0367723d79063f26c4ffc523af9042cad95592\"},",
          "1919:     {file = \"pydantic_core-2.18.2-pp39-pypy39_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:b3ef08e20ec49e02d5c6717a91bb5af9b20f1805583cb0adfe9ba2c6b505b5ae\"},",
          "1920:     {file = \"pydantic_core-2.18.2-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:c6fdc8627910eed0c01aed6a390a252fe3ea6d472ee70fdde56273f198938374\"},",
          "1921:     {file = \"pydantic_core-2.18.2.tar.gz\", hash = \"sha256:2e29d20810dfc3043ee13ac7d9e25105799817683348823f305ab3f349b9386e\"},",
          "",
          "[Added Lines]",
          "1837: version = \"2.18.3\"",
          "1842:     {file = \"pydantic_core-2.18.3-cp310-cp310-macosx_10_12_x86_64.whl\", hash = \"sha256:744697428fcdec6be5670460b578161d1ffe34743a5c15656be7ea82b008197c\"},",
          "1843:     {file = \"pydantic_core-2.18.3-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:37b40c05ced1ba4218b14986fe6f283d22e1ae2ff4c8e28881a70fb81fbfcda7\"},",
          "1844:     {file = \"pydantic_core-2.18.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:544a9a75622357076efb6b311983ff190fbfb3c12fc3a853122b34d3d358126c\"},",
          "1845:     {file = \"pydantic_core-2.18.3-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:e2e253af04ceaebde8eb201eb3f3e3e7e390f2d275a88300d6a1959d710539e2\"},",
          "1846:     {file = \"pydantic_core-2.18.3-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:855ec66589c68aa367d989da5c4755bb74ee92ccad4fdb6af942c3612c067e34\"},",
          "1847:     {file = \"pydantic_core-2.18.3-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:3d3e42bb54e7e9d72c13ce112e02eb1b3b55681ee948d748842171201a03a98a\"},",
          "1848:     {file = \"pydantic_core-2.18.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:c6ac9ffccc9d2e69d9fba841441d4259cb668ac180e51b30d3632cd7abca2b9b\"},",
          "1849:     {file = \"pydantic_core-2.18.3-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:c56eca1686539fa0c9bda992e7bd6a37583f20083c37590413381acfc5f192d6\"},",
          "1850:     {file = \"pydantic_core-2.18.3-cp310-cp310-musllinux_1_1_aarch64.whl\", hash = \"sha256:17954d784bf8abfc0ec2a633108207ebc4fa2df1a0e4c0c3ccbaa9bb01d2c426\"},",
          "1851:     {file = \"pydantic_core-2.18.3-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:98ed737567d8f2ecd54f7c8d4f8572ca7c7921ede93a2e52939416170d357812\"},",
          "1852:     {file = \"pydantic_core-2.18.3-cp310-none-win32.whl\", hash = \"sha256:9f9e04afebd3ed8c15d67a564ed0a34b54e52136c6d40d14c5547b238390e779\"},",
          "1853:     {file = \"pydantic_core-2.18.3-cp310-none-win_amd64.whl\", hash = \"sha256:45e4ffbae34f7ae30d0047697e724e534a7ec0a82ef9994b7913a412c21462a0\"},",
          "1854:     {file = \"pydantic_core-2.18.3-cp311-cp311-macosx_10_12_x86_64.whl\", hash = \"sha256:b9ebe8231726c49518b16b237b9fe0d7d361dd221302af511a83d4ada01183ab\"},",
          "1855:     {file = \"pydantic_core-2.18.3-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:b8e20e15d18bf7dbb453be78a2d858f946f5cdf06c5072453dace00ab652e2b2\"},",
          "1856:     {file = \"pydantic_core-2.18.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:c0d9ff283cd3459fa0bf9b0256a2b6f01ac1ff9ffb034e24457b9035f75587cb\"},",
          "1857:     {file = \"pydantic_core-2.18.3-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:2f7ef5f0ebb77ba24c9970da18b771711edc5feaf00c10b18461e0f5f5949231\"},",
          "1858:     {file = \"pydantic_core-2.18.3-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:73038d66614d2e5cde30435b5afdced2b473b4c77d4ca3a8624dd3e41a9c19be\"},",
          "1859:     {file = \"pydantic_core-2.18.3-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:6afd5c867a74c4d314c557b5ea9520183fadfbd1df4c2d6e09fd0d990ce412cd\"},",
          "1860:     {file = \"pydantic_core-2.18.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bd7df92f28d351bb9f12470f4c533cf03d1b52ec5a6e5c58c65b183055a60106\"},",
          "1861:     {file = \"pydantic_core-2.18.3-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:80aea0ffeb1049336043d07799eace1c9602519fb3192916ff525b0287b2b1e4\"},",
          "1862:     {file = \"pydantic_core-2.18.3-cp311-cp311-musllinux_1_1_aarch64.whl\", hash = \"sha256:aaee40f25bba38132e655ffa3d1998a6d576ba7cf81deff8bfa189fb43fd2bbe\"},",
          "1863:     {file = \"pydantic_core-2.18.3-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:9128089da8f4fe73f7a91973895ebf2502539d627891a14034e45fb9e707e26d\"},",
          "1864:     {file = \"pydantic_core-2.18.3-cp311-none-win32.whl\", hash = \"sha256:fec02527e1e03257aa25b1a4dcbe697b40a22f1229f5d026503e8b7ff6d2eda7\"},",
          "1865:     {file = \"pydantic_core-2.18.3-cp311-none-win_amd64.whl\", hash = \"sha256:58ff8631dbab6c7c982e6425da8347108449321f61fe427c52ddfadd66642af7\"},",
          "1866:     {file = \"pydantic_core-2.18.3-cp311-none-win_arm64.whl\", hash = \"sha256:3fc1c7f67f34c6c2ef9c213e0f2a351797cda98249d9ca56a70ce4ebcaba45f4\"},",
          "1867:     {file = \"pydantic_core-2.18.3-cp312-cp312-macosx_10_12_x86_64.whl\", hash = \"sha256:f0928cde2ae416a2d1ebe6dee324709c6f73e93494d8c7aea92df99aab1fc40f\"},",
          "1868:     {file = \"pydantic_core-2.18.3-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:0bee9bb305a562f8b9271855afb6ce00223f545de3d68560b3c1649c7c5295e9\"},",
          "1869:     {file = \"pydantic_core-2.18.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e862823be114387257dacbfa7d78547165a85d7add33b446ca4f4fae92c7ff5c\"},",
          "1870:     {file = \"pydantic_core-2.18.3-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:6a36f78674cbddc165abab0df961b5f96b14461d05feec5e1f78da58808b97e7\"},",
          "1871:     {file = \"pydantic_core-2.18.3-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:ba905d184f62e7ddbb7a5a751d8a5c805463511c7b08d1aca4a3e8c11f2e5048\"},",
          "1872:     {file = \"pydantic_core-2.18.3-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:7fdd362f6a586e681ff86550b2379e532fee63c52def1c666887956748eaa326\"},",
          "1873:     {file = \"pydantic_core-2.18.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:24b214b7ee3bd3b865e963dbed0f8bc5375f49449d70e8d407b567af3222aae4\"},",
          "1874:     {file = \"pydantic_core-2.18.3-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:691018785779766127f531674fa82bb368df5b36b461622b12e176c18e119022\"},",
          "1875:     {file = \"pydantic_core-2.18.3-cp312-cp312-musllinux_1_1_aarch64.whl\", hash = \"sha256:60e4c625e6f7155d7d0dcac151edf5858102bc61bf959d04469ca6ee4e8381bd\"},",
          "1876:     {file = \"pydantic_core-2.18.3-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:a4e651e47d981c1b701dcc74ab8fec5a60a5b004650416b4abbef13db23bc7be\"},",
          "1877:     {file = \"pydantic_core-2.18.3-cp312-none-win32.whl\", hash = \"sha256:ffecbb5edb7f5ffae13599aec33b735e9e4c7676ca1633c60f2c606beb17efc5\"},",
          "1878:     {file = \"pydantic_core-2.18.3-cp312-none-win_amd64.whl\", hash = \"sha256:2c8333f6e934733483c7eddffdb094c143b9463d2af7e6bd85ebcb2d4a1b82c6\"},",
          "1879:     {file = \"pydantic_core-2.18.3-cp312-none-win_arm64.whl\", hash = \"sha256:7a20dded653e516a4655f4c98e97ccafb13753987434fe7cf044aa25f5b7d417\"},",
          "1880:     {file = \"pydantic_core-2.18.3-cp38-cp38-macosx_10_12_x86_64.whl\", hash = \"sha256:eecf63195be644b0396f972c82598cd15693550f0ff236dcf7ab92e2eb6d3522\"},",
          "1881:     {file = \"pydantic_core-2.18.3-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:2c44efdd3b6125419c28821590d7ec891c9cb0dff33a7a78d9d5c8b6f66b9702\"},",
          "1882:     {file = \"pydantic_core-2.18.3-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:6e59fca51ffbdd1638b3856779342ed69bcecb8484c1d4b8bdb237d0eb5a45e2\"},",
          "1883:     {file = \"pydantic_core-2.18.3-cp38-cp38-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:70cf099197d6b98953468461d753563b28e73cf1eade2ffe069675d2657ed1d5\"},",
          "1884:     {file = \"pydantic_core-2.18.3-cp38-cp38-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:63081a49dddc6124754b32a3774331467bfc3d2bd5ff8f10df36a95602560361\"},",
          "1885:     {file = \"pydantic_core-2.18.3-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:370059b7883485c9edb9655355ff46d912f4b03b009d929220d9294c7fd9fd60\"},",
          "1886:     {file = \"pydantic_core-2.18.3-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:5a64faeedfd8254f05f5cf6fc755023a7e1606af3959cfc1a9285744cc711044\"},",
          "1887:     {file = \"pydantic_core-2.18.3-cp38-cp38-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:19d2e725de0f90d8671f89e420d36c3dd97639b98145e42fcc0e1f6d492a46dc\"},",
          "1888:     {file = \"pydantic_core-2.18.3-cp38-cp38-musllinux_1_1_aarch64.whl\", hash = \"sha256:67bc078025d70ec5aefe6200ef094576c9d86bd36982df1301c758a9fff7d7f4\"},",
          "1889:     {file = \"pydantic_core-2.18.3-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:adf952c3f4100e203cbaf8e0c907c835d3e28f9041474e52b651761dc248a3c0\"},",
          "1890:     {file = \"pydantic_core-2.18.3-cp38-none-win32.whl\", hash = \"sha256:9a46795b1f3beb167eaee91736d5d17ac3a994bf2215a996aed825a45f897558\"},",
          "1891:     {file = \"pydantic_core-2.18.3-cp38-none-win_amd64.whl\", hash = \"sha256:200ad4e3133cb99ed82342a101a5abf3d924722e71cd581cc113fe828f727fbc\"},",
          "1892:     {file = \"pydantic_core-2.18.3-cp39-cp39-macosx_10_12_x86_64.whl\", hash = \"sha256:304378b7bf92206036c8ddd83a2ba7b7d1a5b425acafff637172a3aa72ad7083\"},",
          "1893:     {file = \"pydantic_core-2.18.3-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:c826870b277143e701c9ccf34ebc33ddb4d072612683a044e7cce2d52f6c3fef\"},",
          "1894:     {file = \"pydantic_core-2.18.3-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:e201935d282707394f3668380e41ccf25b5794d1b131cdd96b07f615a33ca4b1\"},",
          "1895:     {file = \"pydantic_core-2.18.3-cp39-cp39-manylinux_2_17_armv7l.manylinux2014_armv7l.whl\", hash = \"sha256:5560dda746c44b48bf82b3d191d74fe8efc5686a9ef18e69bdabccbbb9ad9442\"},",
          "1896:     {file = \"pydantic_core-2.18.3-cp39-cp39-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl\", hash = \"sha256:6b32c2a1f8032570842257e4c19288eba9a2bba4712af542327de9a1204faff8\"},",
          "1897:     {file = \"pydantic_core-2.18.3-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:929c24e9dea3990bc8bcd27c5f2d3916c0c86f5511d2caa69e0d5290115344a9\"},",
          "1898:     {file = \"pydantic_core-2.18.3-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:e1a8376fef60790152564b0eab376b3e23dd6e54f29d84aad46f7b264ecca943\"},",
          "1899:     {file = \"pydantic_core-2.18.3-cp39-cp39-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:dccf3ef1400390ddd1fb55bf0632209d39140552d068ee5ac45553b556780e06\"},",
          "1900:     {file = \"pydantic_core-2.18.3-cp39-cp39-musllinux_1_1_aarch64.whl\", hash = \"sha256:41dbdcb0c7252b58fa931fec47937edb422c9cb22528f41cb8963665c372caf6\"},",
          "1901:     {file = \"pydantic_core-2.18.3-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:666e45cf071669fde468886654742fa10b0e74cd0fa0430a46ba6056b24fb0af\"},",
          "1902:     {file = \"pydantic_core-2.18.3-cp39-none-win32.whl\", hash = \"sha256:f9c08cabff68704a1b4667d33f534d544b8a07b8e5d039c37067fceb18789e78\"},",
          "1903:     {file = \"pydantic_core-2.18.3-cp39-none-win_amd64.whl\", hash = \"sha256:4afa5f5973e8572b5c0dcb4e2d4fda7890e7cd63329bd5cc3263a25c92ef0026\"},",
          "1904:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:77319771a026f7c7d29c6ebc623de889e9563b7087911b46fd06c044a12aa5e9\"},",
          "1905:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:df11fa992e9f576473038510d66dd305bcd51d7dd508c163a8c8fe148454e059\"},",
          "1906:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:d531076bdfb65af593326ffd567e6ab3da145020dafb9187a1d131064a55f97c\"},",
          "1907:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d33ce258e4e6e6038f2b9e8b8a631d17d017567db43483314993b3ca345dcbbb\"},",
          "1908:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:1f9cd7f5635b719939019be9bda47ecb56e165e51dd26c9a217a433e3d0d59a9\"},",
          "1909:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:cd4a032bb65cc132cae1fe3e52877daecc2097965cd3914e44fbd12b00dae7c5\"},",
          "1910:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:82f2718430098bcdf60402136c845e4126a189959d103900ebabb6774a5d9fdb\"},",
          "1911:     {file = \"pydantic_core-2.18.3-pp310-pypy310_pp73-win_amd64.whl\", hash = \"sha256:c0037a92cf0c580ed14e10953cdd26528e8796307bb8bb312dc65f71547df04d\"},",
          "1912:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-macosx_10_12_x86_64.whl\", hash = \"sha256:b95a0972fac2b1ff3c94629fc9081b16371dad870959f1408cc33b2f78ad347a\"},",
          "1913:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:a62e437d687cc148381bdd5f51e3e81f5b20a735c55f690c5be94e05da2b0d5c\"},",
          "1914:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:b367a73a414bbb08507da102dc2cde0fa7afe57d09b3240ce82a16d608a7679c\"},",
          "1915:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:0ecce4b2360aa3f008da3327d652e74a0e743908eac306198b47e1c58b03dd2b\"},",
          "1916:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-manylinux_2_5_i686.manylinux1_i686.whl\", hash = \"sha256:bd4435b8d83f0c9561a2a9585b1de78f1abb17cb0cef5f39bf6a4b47d19bafe3\"},",
          "1917:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-musllinux_1_1_aarch64.whl\", hash = \"sha256:616221a6d473c5b9aa83fa8982745441f6a4a62a66436be9445c65f241b86c94\"},",
          "1918:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-musllinux_1_1_x86_64.whl\", hash = \"sha256:7e6382ce89a92bc1d0c0c5edd51e931432202b9080dc921d8d003e616402efd1\"},",
          "1919:     {file = \"pydantic_core-2.18.3-pp39-pypy39_pp73-win_amd64.whl\", hash = \"sha256:ff58f379345603d940e461eae474b6bbb6dab66ed9a851ecd3cb3709bf4dcf6a\"},",
          "1920:     {file = \"pydantic_core-2.18.3.tar.gz\", hash = \"sha256:432e999088d85c8f36b9a3f769a8e2b57aabd817bbb729a90d1fe7f18f6f1f39\"},",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2129:     {file = \"PyYAML-6.0.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:69b023b2b4daa7548bcfbd4aa3da05b3a74b772db9e23b982788168117739938\"},",
          "2130:     {file = \"PyYAML-6.0.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:81e0b275a9ecc9c0c0c07b4b90ba548307583c125f54d5b6946cfee6360c733d\"},",
          "2131:     {file = \"PyYAML-6.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:ba336e390cd8e4d1739f42dfe9bb83a3cc2e80f567d8805e11b46f4a943f5515\"},",
          "2133:     {file = \"PyYAML-6.0.1-cp310-cp310-win32.whl\", hash = \"sha256:bd4af7373a854424dabd882decdc5579653d7868b8fb26dc7d0e99f823aa5924\"},",
          "2134:     {file = \"PyYAML-6.0.1-cp310-cp310-win_amd64.whl\", hash = \"sha256:fd1592b3fdf65fff2ad0004b5e363300ef59ced41c2e6b3a99d4089fa8c5435d\"},",
          "2135:     {file = \"PyYAML-6.0.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:6965a7bc3cf88e5a1c3bd2e0b5c22f8d677dc88a455344035f03399034eb3007\"},",
          "",
          "[Removed Lines]",
          "2132:     {file = \"PyYAML-6.0.1-cp310-cp310-musllinux_1_1_x86_64.whl\", hash = \"sha256:326c013efe8048858a6d312ddd31d56e468118ad4cdeda36c719bf5bb6192290\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2137:     {file = \"PyYAML-6.0.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:42f8152b8dbc4fe7d96729ec2b99c7097d656dc1213a3229ca5383f973a5ed6d\"},",
          "2138:     {file = \"PyYAML-6.0.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:062582fca9fabdd2c8b54a3ef1c978d786e0f6b3a1510e0ac93ef59e0ddae2bc\"},",
          "2139:     {file = \"PyYAML-6.0.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:d2b04aac4d386b172d5b9692e2d2da8de7bfb6c387fa4f801fbf6fb2e6ba4673\"},",
          "2141:     {file = \"PyYAML-6.0.1-cp311-cp311-win32.whl\", hash = \"sha256:1635fd110e8d85d55237ab316b5b011de701ea0f29d07611174a1b42f1444741\"},",
          "2142:     {file = \"PyYAML-6.0.1-cp311-cp311-win_amd64.whl\", hash = \"sha256:bf07ee2fef7014951eeb99f56f39c9bb4af143d8aa3c21b1677805985307da34\"},",
          "2150:     {file = \"PyYAML-6.0.1-cp36-cp36m-macosx_10_9_x86_64.whl\", hash = \"sha256:50550eb667afee136e9a77d6dc71ae76a44df8b3e51e41b77f6de2932bfe0f47\"},",
          "2151:     {file = \"PyYAML-6.0.1-cp36-cp36m-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:1fe35611261b29bd1de0070f0b2f47cb6ff71fa6595c077e42bd0c419fa27b98\"},",
          "2152:     {file = \"PyYAML-6.0.1-cp36-cp36m-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:704219a11b772aea0d8ecd7058d0082713c3562b4e271b849ad7dc4a5c90c13c\"},",
          "",
          "[Removed Lines]",
          "2140:     {file = \"PyYAML-6.0.1-cp311-cp311-musllinux_1_1_x86_64.whl\", hash = \"sha256:e7d73685e87afe9f3b36c799222440d6cf362062f78be1013661b00c5c6f678b\"},",
          "2143:     {file = \"PyYAML-6.0.1-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:855fb52b0dc35af121542a76b9a84f8d1cd886ea97c84703eaa6d88e37a2ad28\"},",
          "2144:     {file = \"PyYAML-6.0.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:40df9b996c2b73138957fe23a16a4f0ba614f4c0efce1e9406a184b6d07fa3a9\"},",
          "2145:     {file = \"PyYAML-6.0.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a08c6f0fe150303c1c6b71ebcd7213c2858041a7e01975da3a99aed1e7a378ef\"},",
          "2146:     {file = \"PyYAML-6.0.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:6c22bec3fbe2524cde73d7ada88f6566758a8f7227bfbf93a408a9d86bcc12a0\"},",
          "2147:     {file = \"PyYAML-6.0.1-cp312-cp312-musllinux_1_1_x86_64.whl\", hash = \"sha256:8d4e9c88387b0f5c7d5f281e55304de64cf7f9c0021a3525bd3b1c542da3b0e4\"},",
          "2148:     {file = \"PyYAML-6.0.1-cp312-cp312-win32.whl\", hash = \"sha256:d483d2cdf104e7c9fa60c544d92981f12ad66a457afae824d146093b8c294c54\"},",
          "2149:     {file = \"PyYAML-6.0.1-cp312-cp312-win_amd64.whl\", hash = \"sha256:0d3304d8c0adc42be59c5f8a4d9e3d7379e6955ad754aa9d6ab7a398b59dd1df\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2163:     {file = \"PyYAML-6.0.1-cp38-cp38-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:a0cd17c15d3bb3fa06978b4e8958dcdc6e0174ccea823003a106c7d4d7899ac5\"},",
          "2164:     {file = \"PyYAML-6.0.1-cp38-cp38-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:28c119d996beec18c05208a8bd78cbe4007878c6dd15091efb73a30e90539696\"},",
          "2165:     {file = \"PyYAML-6.0.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:7e07cbde391ba96ab58e532ff4803f79c4129397514e1413a7dc761ccd755735\"},",
          "2167:     {file = \"PyYAML-6.0.1-cp38-cp38-win32.whl\", hash = \"sha256:184c5108a2aca3c5b3d3bf9395d50893a7ab82a38004c8f61c258d4428e80206\"},",
          "2168:     {file = \"PyYAML-6.0.1-cp38-cp38-win_amd64.whl\", hash = \"sha256:1e2722cc9fbb45d9b87631ac70924c11d3a401b2d7f410cc0e3bbf249f2dca62\"},",
          "2169:     {file = \"PyYAML-6.0.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:9eb6caa9a297fc2c2fb8862bc5370d0303ddba53ba97e71f08023b6cd73d16a8\"},",
          "",
          "[Removed Lines]",
          "2166:     {file = \"PyYAML-6.0.1-cp38-cp38-musllinux_1_1_x86_64.whl\", hash = \"sha256:49a183be227561de579b4a36efbb21b3eab9651dd81b1858589f796549873dd6\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2171:     {file = \"PyYAML-6.0.1-cp39-cp39-manylinux_2_17_aarch64.manylinux2014_aarch64.whl\", hash = \"sha256:5773183b6446b2c99bb77e77595dd486303b4faab2b086e7b17bc6bef28865f6\"},",
          "2172:     {file = \"PyYAML-6.0.1-cp39-cp39-manylinux_2_17_s390x.manylinux2014_s390x.whl\", hash = \"sha256:b786eecbdf8499b9ca1d697215862083bd6d2a99965554781d0d8d1ad31e13a0\"},",
          "2173:     {file = \"PyYAML-6.0.1-cp39-cp39-manylinux_2_17_x86_64.manylinux2014_x86_64.whl\", hash = \"sha256:bc1bf2925a1ecd43da378f4db9e4f799775d6367bdb94671027b73b393a7c42c\"},",
          "2175:     {file = \"PyYAML-6.0.1-cp39-cp39-win32.whl\", hash = \"sha256:faca3bdcf85b2fc05d06ff3fbc1f83e1391b3e724afa3feba7d13eeab355484c\"},",
          "2176:     {file = \"PyYAML-6.0.1-cp39-cp39-win_amd64.whl\", hash = \"sha256:510c9deebc5c0225e8c96813043e62b680ba2f9c50a08d3724c7f28a747d1486\"},",
          "2177:     {file = \"PyYAML-6.0.1.tar.gz\", hash = \"sha256:bfdf460b1736c775f2ba9f6a92bca30bc2095067b8a9d77876d1fad6cc3b4a43\"},",
          "",
          "[Removed Lines]",
          "2174:     {file = \"PyYAML-6.0.1-cp39-cp39-musllinux_1_1_x86_64.whl\", hash = \"sha256:04ac92ad1925b2cff1db0cfebffb6ffc43457495c9b3c39d3fcae417d7125dc5\"},",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2337: [[package]]",
          "2338: name = \"requests\"",
          "2340: description = \"Python HTTP for Humans.\"",
          "2341: optional = false",
          "2343: files = [",
          "2346: ]",
          "2348: [package.dependencies]",
          "",
          "[Removed Lines]",
          "2339: version = \"2.31.0\"",
          "2342: python-versions = \">=3.7\"",
          "2344:     {file = \"requests-2.31.0-py3-none-any.whl\", hash = \"sha256:58cd2187c01e70e6e26505bca751777aa9f2ee0b7f4300988b709f44e013003f\"},",
          "2345:     {file = \"requests-2.31.0.tar.gz\", hash = \"sha256:942c5a758f98d790eaed1a29cb6eefc7ffb0d1cf7af05c3d2791656dbd6ad1e1\"},",
          "",
          "[Added Lines]",
          "2327: version = \"2.32.3\"",
          "2330: python-versions = \">=3.8\"",
          "2332:     {file = \"requests-2.32.3-py3-none-any.whl\", hash = \"sha256:70761cfe03c773ceb22aa2f671b4757976145175cdfca038c02654d061d6dcc6\"},",
          "2333:     {file = \"requests-2.32.3.tar.gz\", hash = \"sha256:55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760\"},",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2781: [[package]]",
          "2782: name = \"types-requests\"",
          "2784: description = \"Typing stubs for requests\"",
          "2785: optional = false",
          "2786: python-versions = \">=3.8\"",
          "2787: files = [",
          "2790: ]",
          "2792: [package.dependencies]",
          "",
          "[Removed Lines]",
          "2783: version = \"2.31.0.20240406\"",
          "2788:     {file = \"types-requests-2.31.0.20240406.tar.gz\", hash = \"sha256:4428df33c5503945c74b3f42e82b181e86ec7b724620419a2966e2de604ce1a1\"},",
          "2789:     {file = \"types_requests-2.31.0.20240406-py3-none-any.whl\", hash = \"sha256:6216cdac377c6b9a040ac1c0404f7284bd13199c0e1bb235f4324627e8898cf5\"},",
          "",
          "[Added Lines]",
          "2771: version = \"2.32.0.20240523\"",
          "2776:     {file = \"types-requests-2.32.0.20240523.tar.gz\", hash = \"sha256:26b8a6de32d9f561192b9942b41c0ab2d8010df5677ca8aa146289d11d505f57\"},",
          "2777:     {file = \"types_requests-2.32.0.20240523-py3-none-any.whl\", hash = \"sha256:f19ed0e2daa74302069bbbbf9e82902854ffa780bc790742a810a9aaa52f65ec\"},",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2795: [[package]]",
          "2796: name = \"typing-extensions\"",
          "2798: description = \"Backported and Experimental Type Hints for Python 3.8+\"",
          "2799: optional = false",
          "2800: python-versions = \">=3.8\"",
          "2801: files = [",
          "2804: ]",
          "2806: [[package]]",
          "",
          "[Removed Lines]",
          "2797: version = \"4.11.0\"",
          "2802:     {file = \"typing_extensions-4.11.0-py3-none-any.whl\", hash = \"sha256:c1f94d72897edaf4ce775bb7558d5b79d8126906a14ea5ed1635921406c0387a\"},",
          "2803:     {file = \"typing_extensions-4.11.0.tar.gz\", hash = \"sha256:83f085bd5ca59c80295fc2a82ab5dac679cbe02b9f33f7d83af68e241bea51b0\"},",
          "",
          "[Added Lines]",
          "2785: version = \"4.12.0\"",
          "2790:     {file = \"typing_extensions-4.12.0-py3-none-any.whl\", hash = \"sha256:b349c66bea9016ac22978d800cfff206d5f9816951f12a7d0ec5578b0a819594\"},",
          "2791:     {file = \"typing_extensions-4.12.0.tar.gz\", hash = \"sha256:8cbcdc8606ebcb0d95453ad7dc5065e6237b6aa230a31e81d0f440c30fed5fd8\"},",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2837: [[package]]",
          "2838: name = \"watchdog\"",
          "2840: description = \"Filesystem events monitoring\"",
          "2841: optional = false",
          "2842: python-versions = \">=3.8\"",
          "2843: files = [",
          "2873: ]",
          "2875: [package.extras]",
          "",
          "[Removed Lines]",
          "2839: version = \"4.0.0\"",
          "2844:     {file = \"watchdog-4.0.0-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:39cb34b1f1afbf23e9562501673e7146777efe95da24fab5707b88f7fb11649b\"},",
          "2845:     {file = \"watchdog-4.0.0-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:c522392acc5e962bcac3b22b9592493ffd06d1fc5d755954e6be9f4990de932b\"},",
          "2846:     {file = \"watchdog-4.0.0-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:6c47bdd680009b11c9ac382163e05ca43baf4127954c5f6d0250e7d772d2b80c\"},",
          "2847:     {file = \"watchdog-4.0.0-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:8350d4055505412a426b6ad8c521bc7d367d1637a762c70fdd93a3a0d595990b\"},",
          "2848:     {file = \"watchdog-4.0.0-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:c17d98799f32e3f55f181f19dd2021d762eb38fdd381b4a748b9f5a36738e935\"},",
          "2849:     {file = \"watchdog-4.0.0-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:4986db5e8880b0e6b7cd52ba36255d4793bf5cdc95bd6264806c233173b1ec0b\"},",
          "2850:     {file = \"watchdog-4.0.0-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:11e12fafb13372e18ca1bbf12d50f593e7280646687463dd47730fd4f4d5d257\"},",
          "2851:     {file = \"watchdog-4.0.0-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:5369136a6474678e02426bd984466343924d1df8e2fd94a9b443cb7e3aa20d19\"},",
          "2852:     {file = \"watchdog-4.0.0-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:76ad8484379695f3fe46228962017a7e1337e9acadafed67eb20aabb175df98b\"},",
          "2853:     {file = \"watchdog-4.0.0-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:45cc09cc4c3b43fb10b59ef4d07318d9a3ecdbff03abd2e36e77b6dd9f9a5c85\"},",
          "2854:     {file = \"watchdog-4.0.0-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:eed82cdf79cd7f0232e2fdc1ad05b06a5e102a43e331f7d041e5f0e0a34a51c4\"},",
          "2855:     {file = \"watchdog-4.0.0-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:ba30a896166f0fee83183cec913298151b73164160d965af2e93a20bbd2ab605\"},",
          "2856:     {file = \"watchdog-4.0.0-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:d18d7f18a47de6863cd480734613502904611730f8def45fc52a5d97503e5101\"},",
          "2857:     {file = \"watchdog-4.0.0-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:2895bf0518361a9728773083908801a376743bcc37dfa252b801af8fd281b1ca\"},",
          "2858:     {file = \"watchdog-4.0.0-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:87e9df830022488e235dd601478c15ad73a0389628588ba0b028cb74eb72fed8\"},",
          "2859:     {file = \"watchdog-4.0.0-pp310-pypy310_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:6e949a8a94186bced05b6508faa61b7adacc911115664ccb1923b9ad1f1ccf7b\"},",
          "2860:     {file = \"watchdog-4.0.0-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:6a4db54edea37d1058b08947c789a2354ee02972ed5d1e0dca9b0b820f4c7f92\"},",
          "2861:     {file = \"watchdog-4.0.0-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:d31481ccf4694a8416b681544c23bd271f5a123162ab603c7d7d2dd7dd901a07\"},",
          "2862:     {file = \"watchdog-4.0.0-py3-none-manylinux2014_aarch64.whl\", hash = \"sha256:8fec441f5adcf81dd240a5fe78e3d83767999771630b5ddfc5867827a34fa3d3\"},",
          "2863:     {file = \"watchdog-4.0.0-py3-none-manylinux2014_armv7l.whl\", hash = \"sha256:6a9c71a0b02985b4b0b6d14b875a6c86ddea2fdbebd0c9a720a806a8bbffc69f\"},",
          "2864:     {file = \"watchdog-4.0.0-py3-none-manylinux2014_i686.whl\", hash = \"sha256:557ba04c816d23ce98a06e70af6abaa0485f6d94994ec78a42b05d1c03dcbd50\"},",
          "2865:     {file = \"watchdog-4.0.0-py3-none-manylinux2014_ppc64.whl\", hash = \"sha256:d0f9bd1fd919134d459d8abf954f63886745f4660ef66480b9d753a7c9d40927\"},",
          "2866:     {file = \"watchdog-4.0.0-py3-none-manylinux2014_ppc64le.whl\", hash = \"sha256:f9b2fdca47dc855516b2d66eef3c39f2672cbf7e7a42e7e67ad2cbfcd6ba107d\"},",
          "2867:     {file = \"watchdog-4.0.0-py3-none-manylinux2014_s390x.whl\", hash = \"sha256:73c7a935e62033bd5e8f0da33a4dcb763da2361921a69a5a95aaf6c93aa03a87\"},",
          "2868:     {file = \"watchdog-4.0.0-py3-none-manylinux2014_x86_64.whl\", hash = \"sha256:6a80d5cae8c265842c7419c560b9961561556c4361b297b4c431903f8c33b269\"},",
          "2869:     {file = \"watchdog-4.0.0-py3-none-win32.whl\", hash = \"sha256:8f9a542c979df62098ae9c58b19e03ad3df1c9d8c6895d96c0d51da17b243b1c\"},",
          "2870:     {file = \"watchdog-4.0.0-py3-none-win_amd64.whl\", hash = \"sha256:f970663fa4f7e80401a7b0cbeec00fa801bf0287d93d48368fc3e6fa32716245\"},",
          "2871:     {file = \"watchdog-4.0.0-py3-none-win_ia64.whl\", hash = \"sha256:9a03e16e55465177d416699331b0f3564138f1807ecc5f2de9d55d8f188d08c7\"},",
          "2872:     {file = \"watchdog-4.0.0.tar.gz\", hash = \"sha256:e3e7065cbdabe6183ab82199d7a4f6b3ba0a438c5a512a68559846ccb76a78ec\"},",
          "",
          "[Added Lines]",
          "2827: version = \"4.0.1\"",
          "2832:     {file = \"watchdog-4.0.1-cp310-cp310-macosx_10_9_universal2.whl\", hash = \"sha256:da2dfdaa8006eb6a71051795856bedd97e5b03e57da96f98e375682c48850645\"},",
          "2833:     {file = \"watchdog-4.0.1-cp310-cp310-macosx_10_9_x86_64.whl\", hash = \"sha256:e93f451f2dfa433d97765ca2634628b789b49ba8b504fdde5837cdcf25fdb53b\"},",
          "2834:     {file = \"watchdog-4.0.1-cp310-cp310-macosx_11_0_arm64.whl\", hash = \"sha256:ef0107bbb6a55f5be727cfc2ef945d5676b97bffb8425650dadbb184be9f9a2b\"},",
          "2835:     {file = \"watchdog-4.0.1-cp311-cp311-macosx_10_9_universal2.whl\", hash = \"sha256:17e32f147d8bf9657e0922c0940bcde863b894cd871dbb694beb6704cfbd2fb5\"},",
          "2836:     {file = \"watchdog-4.0.1-cp311-cp311-macosx_10_9_x86_64.whl\", hash = \"sha256:03e70d2df2258fb6cb0e95bbdbe06c16e608af94a3ffbd2b90c3f1e83eb10767\"},",
          "2837:     {file = \"watchdog-4.0.1-cp311-cp311-macosx_11_0_arm64.whl\", hash = \"sha256:123587af84260c991dc5f62a6e7ef3d1c57dfddc99faacee508c71d287248459\"},",
          "2838:     {file = \"watchdog-4.0.1-cp312-cp312-macosx_10_9_universal2.whl\", hash = \"sha256:093b23e6906a8b97051191a4a0c73a77ecc958121d42346274c6af6520dec175\"},",
          "2839:     {file = \"watchdog-4.0.1-cp312-cp312-macosx_10_9_x86_64.whl\", hash = \"sha256:611be3904f9843f0529c35a3ff3fd617449463cb4b73b1633950b3d97fa4bfb7\"},",
          "2840:     {file = \"watchdog-4.0.1-cp312-cp312-macosx_11_0_arm64.whl\", hash = \"sha256:62c613ad689ddcb11707f030e722fa929f322ef7e4f18f5335d2b73c61a85c28\"},",
          "2841:     {file = \"watchdog-4.0.1-cp38-cp38-macosx_10_9_universal2.whl\", hash = \"sha256:d4925e4bf7b9bddd1c3de13c9b8a2cdb89a468f640e66fbfabaf735bd85b3e35\"},",
          "2842:     {file = \"watchdog-4.0.1-cp38-cp38-macosx_10_9_x86_64.whl\", hash = \"sha256:cad0bbd66cd59fc474b4a4376bc5ac3fc698723510cbb64091c2a793b18654db\"},",
          "2843:     {file = \"watchdog-4.0.1-cp38-cp38-macosx_11_0_arm64.whl\", hash = \"sha256:a3c2c317a8fb53e5b3d25790553796105501a235343f5d2bf23bb8649c2c8709\"},",
          "2844:     {file = \"watchdog-4.0.1-cp39-cp39-macosx_10_9_universal2.whl\", hash = \"sha256:c9904904b6564d4ee8a1ed820db76185a3c96e05560c776c79a6ce5ab71888ba\"},",
          "2845:     {file = \"watchdog-4.0.1-cp39-cp39-macosx_10_9_x86_64.whl\", hash = \"sha256:667f3c579e813fcbad1b784db7a1aaa96524bed53437e119f6a2f5de4db04235\"},",
          "2846:     {file = \"watchdog-4.0.1-cp39-cp39-macosx_11_0_arm64.whl\", hash = \"sha256:d10a681c9a1d5a77e75c48a3b8e1a9f2ae2928eda463e8d33660437705659682\"},",
          "2847:     {file = \"watchdog-4.0.1-pp310-pypy310_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:0144c0ea9997b92615af1d94afc0c217e07ce2c14912c7b1a5731776329fcfc7\"},",
          "2848:     {file = \"watchdog-4.0.1-pp310-pypy310_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:998d2be6976a0ee3a81fb8e2777900c28641fb5bfbd0c84717d89bca0addcdc5\"},",
          "2849:     {file = \"watchdog-4.0.1-pp38-pypy38_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:e7921319fe4430b11278d924ef66d4daa469fafb1da679a2e48c935fa27af193\"},",
          "2850:     {file = \"watchdog-4.0.1-pp38-pypy38_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:f0de0f284248ab40188f23380b03b59126d1479cd59940f2a34f8852db710625\"},",
          "2851:     {file = \"watchdog-4.0.1-pp39-pypy39_pp73-macosx_10_9_x86_64.whl\", hash = \"sha256:bca36be5707e81b9e6ce3208d92d95540d4ca244c006b61511753583c81c70dd\"},",
          "2852:     {file = \"watchdog-4.0.1-pp39-pypy39_pp73-macosx_11_0_arm64.whl\", hash = \"sha256:ab998f567ebdf6b1da7dc1e5accfaa7c6992244629c0fdaef062f43249bd8dee\"},",
          "2853:     {file = \"watchdog-4.0.1-py3-none-manylinux2014_aarch64.whl\", hash = \"sha256:dddba7ca1c807045323b6af4ff80f5ddc4d654c8bce8317dde1bd96b128ed253\"},",
          "2854:     {file = \"watchdog-4.0.1-py3-none-manylinux2014_armv7l.whl\", hash = \"sha256:4513ec234c68b14d4161440e07f995f231be21a09329051e67a2118a7a612d2d\"},",
          "2855:     {file = \"watchdog-4.0.1-py3-none-manylinux2014_i686.whl\", hash = \"sha256:4107ac5ab936a63952dea2a46a734a23230aa2f6f9db1291bf171dac3ebd53c6\"},",
          "2856:     {file = \"watchdog-4.0.1-py3-none-manylinux2014_ppc64.whl\", hash = \"sha256:6e8c70d2cd745daec2a08734d9f63092b793ad97612470a0ee4cbb8f5f705c57\"},",
          "2857:     {file = \"watchdog-4.0.1-py3-none-manylinux2014_ppc64le.whl\", hash = \"sha256:f27279d060e2ab24c0aa98363ff906d2386aa6c4dc2f1a374655d4e02a6c5e5e\"},",
          "2858:     {file = \"watchdog-4.0.1-py3-none-manylinux2014_s390x.whl\", hash = \"sha256:f8affdf3c0f0466e69f5b3917cdd042f89c8c63aebdb9f7c078996f607cdb0f5\"},",
          "2859:     {file = \"watchdog-4.0.1-py3-none-manylinux2014_x86_64.whl\", hash = \"sha256:ac7041b385f04c047fcc2951dc001671dee1b7e0615cde772e84b01fbf68ee84\"},",
          "2860:     {file = \"watchdog-4.0.1-py3-none-win32.whl\", hash = \"sha256:206afc3d964f9a233e6ad34618ec60b9837d0582b500b63687e34011e15bb429\"},",
          "2861:     {file = \"watchdog-4.0.1-py3-none-win_amd64.whl\", hash = \"sha256:7577b3c43e5909623149f76b099ac49a1a01ca4e167d1785c76eb52fa585745a\"},",
          "2862:     {file = \"watchdog-4.0.1-py3-none-win_ia64.whl\", hash = \"sha256:d7b9f5f3299e8dd230880b6c55504a1f69cf1e4316275d1b215ebdd8187ec88d\"},",
          "2863:     {file = \"watchdog-4.0.1.tar.gz\", hash = \"sha256:eebaacf674fa25511e8867028d281e602ee6500045b57f43b08778082f7f8b44\"},",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2931: [[package]]",
          "2932: name = \"widgetsnbextension\"",
          "2934: description = \"Jupyter interactive widgets for Jupyter Notebook\"",
          "2935: optional = false",
          "2936: python-versions = \">=3.7\"",
          "2937: files = [",
          "2940: ]",
          "2942: [[package]]",
          "2943: name = \"zipp\"",
          "2945: description = \"Backport of pathlib-compatible object wrapper for zip files\"",
          "2946: optional = false",
          "2947: python-versions = \">=3.8\"",
          "2948: files = [",
          "2951: ]",
          "2953: [package.extras]",
          "",
          "[Removed Lines]",
          "2933: version = \"4.0.10\"",
          "2938:     {file = \"widgetsnbextension-4.0.10-py3-none-any.whl\", hash = \"sha256:d37c3724ec32d8c48400a435ecfa7d3e259995201fbefa37163124a9fcb393cc\"},",
          "2939:     {file = \"widgetsnbextension-4.0.10.tar.gz\", hash = \"sha256:64196c5ff3b9a9183a8e699a4227fb0b7002f252c814098e66c4d1cd0644688f\"},",
          "2944: version = \"3.18.2\"",
          "2949:     {file = \"zipp-3.18.2-py3-none-any.whl\", hash = \"sha256:dce197b859eb796242b0622af1b8beb0a722d52aa2f57133ead08edd5bf5374e\"},",
          "2950:     {file = \"zipp-3.18.2.tar.gz\", hash = \"sha256:6278d9ddbcfb1f1089a88fde84481528b07b0e10474e09dcfe53dad4069fa059\"},",
          "",
          "[Added Lines]",
          "2924: version = \"4.0.11\"",
          "2929:     {file = \"widgetsnbextension-4.0.11-py3-none-any.whl\", hash = \"sha256:55d4d6949d100e0d08b94948a42efc3ed6dfdc0e9468b2c4b128c9a2ce3a7a36\"},",
          "2930:     {file = \"widgetsnbextension-4.0.11.tar.gz\", hash = \"sha256:8b22a8f1910bfd188e596fe7fc05dcbd87e810c8a4ba010bdb3da86637398474\"},",
          "2935: version = \"3.19.0\"",
          "2940:     {file = \"zipp-3.19.0-py3-none-any.whl\", hash = \"sha256:96dc6ad62f1441bcaccef23b274ec471518daf4fbbc580341204936a5a3dddec\"},",
          "2941:     {file = \"zipp-3.19.0.tar.gz\", hash = \"sha256:952df858fb3164426c976d9338d3961e8e8b3758e2e059e0f754b8c4262625ee\"},",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2960: [metadata]",
          "2961: lock-version = \"2.0\"",
          "2962: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "2963: content-hash = \"c26c35cf1c6529b38924a1b9d3186fdefb3b3a1fecc5197559586451bb913f4a\"",
          "",
          "[Added Lines]",
          "2954: content-hash = \"4feba718f092ba77ab3263f6002898eddf6661fcfdae8b29b607936abb7e33c9\"",
          "",
          "---------------"
        ],
        "libs/core/tests/unit_tests/runnables/test_tracing_interops.py||libs/core/tests/unit_tests/runnables/test_tracing_interops.py": [
          "File: libs/core/tests/unit_tests/runnables/test_tracing_interops.py -> libs/core/tests/unit_tests/runnables/test_tracing_interops.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: import json",
          "2: import sys",
          "3: import time",
          "4: from unittest.mock import MagicMock",
          "6: import pytest",
          "7: from langsmith import Client, traceable",
          "9: from langchain_core.runnables.base import RunnableLambda",
          "10: from langchain_core.tracers.langchain import LangChainTracer",
          "13: def _get_posts(client: Client) -> list:",
          "14:     mock_calls = client.session.request.mock_calls  # type: ignore",
          "15:     posts = []",
          "16:     for call in mock_calls:",
          "17:         if call.args:",
          "18:             if call.args[0] != \"POST\":",
          "19:                 continue",
          "20:             assert call.args[0] == \"POST\"",
          "21:             assert call.args[1].startswith(\"https://api.smith.langchain.com\")",
          "22:             body = json.loads(call.kwargs[\"data\"])",
          "23:             assert body[\"post\"]",
          "24:             posts.extend(body[\"post\"])",
          "25:     return posts",
          "28: def test_config_traceable_handoff() -> None:",
          "29:     mock_session = MagicMock()",
          "30:     mock_client_ = Client(session=mock_session, api_key=\"test\")",
          "31:     tracer = LangChainTracer(client=mock_client_)",
          "33:     @traceable",
          "34:     def my_great_great_grandchild_function(a: int) -> int:",
          "35:         return a + 1",
          "37:     @RunnableLambda",
          "38:     def my_great_grandchild_function(a: int) -> int:",
          "39:         return my_great_great_grandchild_function(a)",
          "41:     @RunnableLambda",
          "42:     def my_grandchild_function(a: int) -> int:",
          "43:         return my_great_grandchild_function.invoke(a)",
          "45:     @traceable",
          "46:     def my_child_function(a: int) -> int:",
          "47:         return my_grandchild_function.invoke(a) * 3",
          "49:     @traceable()",
          "50:     def my_function(a: int) -> int:",
          "51:         return my_child_function(a)",
          "53:     def my_parent_function(a: int) -> int:",
          "54:         return my_function(a)",
          "56:     my_parent_runnable = RunnableLambda(my_parent_function)",
          "58:     assert my_parent_runnable.invoke(1, {\"callbacks\": [tracer]}) == 6",
          "59:     for _ in range(15):",
          "60:         time.sleep(0.1)",
          "61:         posts = _get_posts(mock_client_)",
          "62:         if len(posts) == 6:",
          "63:             break",
          "64:     # There should have been 6 runs created,",
          "65:     # one for each function invocation",
          "66:     assert len(posts) == 6",
          "67:     name_to_body = {post[\"name\"]: post for post in posts}",
          "68:     ordered_names = [",
          "69:         \"my_parent_function\",",
          "70:         \"my_function\",",
          "71:         \"my_child_function\",",
          "72:         \"my_grandchild_function\",",
          "73:         \"my_great_grandchild_function\",",
          "74:         \"my_great_great_grandchild_function\",",
          "75:     ]",
          "76:     trace_id = posts[0][\"trace_id\"]",
          "77:     last_dotted_order = None",
          "78:     parent_run_id = None",
          "79:     for name in ordered_names:",
          "80:         id_ = name_to_body[name][\"id\"]",
          "81:         parent_run_id_ = name_to_body[name][\"parent_run_id\"]",
          "82:         if parent_run_id_ is not None:",
          "83:             assert parent_run_id == parent_run_id_",
          "84:         assert name in name_to_body",
          "85:         # All within the same trace",
          "86:         assert name_to_body[name][\"trace_id\"] == trace_id",
          "87:         dotted_order: str = name_to_body[name][\"dotted_order\"]",
          "88:         assert dotted_order is not None",
          "89:         if last_dotted_order is not None:",
          "90:             assert dotted_order > last_dotted_order",
          "91:             assert dotted_order.startswith(last_dotted_order), (",
          "92:                 \"Unexpected dotted order for run\"",
          "93:                 f\" {name}\\n{dotted_order}\\n{last_dotted_order}\"",
          "94:             )",
          "95:         last_dotted_order = dotted_order",
          "96:         parent_run_id = id_",
          "99: @pytest.mark.skipif(",
          "100:     sys.version_info < (3, 11), reason=\"Asyncio context vars require Python 3.11+\"",
          "101: )",
          "102: async def test_config_traceable_async_handoff() -> None:",
          "103:     mock_session = MagicMock()",
          "104:     mock_client_ = Client(session=mock_session, api_key=\"test\")",
          "105:     tracer = LangChainTracer(client=mock_client_)",
          "107:     @traceable",
          "108:     def my_great_great_grandchild_function(a: int) -> int:",
          "109:         return a + 1",
          "111:     @RunnableLambda",
          "112:     def my_great_grandchild_function(a: int) -> int:",
          "113:         return my_great_great_grandchild_function(a)",
          "115:     @RunnableLambda  # type: ignore",
          "116:     async def my_grandchild_function(a: int) -> int:",
          "117:         return my_great_grandchild_function.invoke(a)",
          "119:     @traceable",
          "120:     async def my_child_function(a: int) -> int:",
          "121:         return await my_grandchild_function.ainvoke(a) * 3  # type: ignore",
          "123:     @traceable()",
          "124:     async def my_function(a: int) -> int:",
          "125:         return await my_child_function(a)",
          "127:     async def my_parent_function(a: int) -> int:",
          "128:         return await my_function(a)",
          "130:     my_parent_runnable = RunnableLambda(my_parent_function)  # type: ignore",
          "131:     result = await my_parent_runnable.ainvoke(1, {\"callbacks\": [tracer]})",
          "132:     assert result == 6",
          "133:     for _ in range(15):",
          "134:         time.sleep(0.1)",
          "135:         posts = _get_posts(mock_client_)",
          "136:         if len(posts) == 6:",
          "137:             break",
          "138:     # There should have been 6 runs created,",
          "139:     # one for each function invocation",
          "140:     assert len(posts) == 6",
          "141:     name_to_body = {post[\"name\"]: post for post in posts}",
          "142:     ordered_names = [",
          "143:         \"my_parent_function\",",
          "144:         \"my_function\",",
          "145:         \"my_child_function\",",
          "146:         \"my_grandchild_function\",",
          "147:         \"my_great_grandchild_function\",",
          "148:         \"my_great_great_grandchild_function\",",
          "149:     ]",
          "150:     trace_id = posts[0][\"trace_id\"]",
          "151:     last_dotted_order = None",
          "152:     parent_run_id = None",
          "153:     for name in ordered_names:",
          "154:         id_ = name_to_body[name][\"id\"]",
          "155:         parent_run_id_ = name_to_body[name][\"parent_run_id\"]",
          "156:         if parent_run_id_ is not None:",
          "157:             assert parent_run_id == parent_run_id_",
          "158:         assert name in name_to_body",
          "159:         # All within the same trace",
          "160:         assert name_to_body[name][\"trace_id\"] == trace_id",
          "161:         dotted_order: str = name_to_body[name][\"dotted_order\"]",
          "162:         assert dotted_order is not None",
          "163:         if last_dotted_order is not None:",
          "164:             assert dotted_order > last_dotted_order",
          "165:             assert dotted_order.startswith(last_dotted_order), (",
          "166:                 \"Unexpected dotted order for run\"",
          "167:                 f\" {name}\\n{dotted_order}\\n{last_dotted_order}\"",
          "168:             )",
          "169:         last_dotted_order = dotted_order",
          "170:         parent_run_id = id_",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8461934c2b017248d91882b9661ea7309073aa9e",
      "candidate_info": {
        "commit_hash": "8461934c2b017248d91882b9661ea7309073aa9e",
        "repo": "langchain-ai/langchain",
        "commit_url": "https://github.com/langchain-ai/langchain/commit/8461934c2b017248d91882b9661ea7309073aa9e",
        "files": [
          "docs/docs/how_to/structured_output.ipynb",
          "docs/docs/how_to/tool_calling.ipynb",
          "libs/core/langchain_core/language_models/chat_models.py",
          "libs/core/langchain_core/tools.py",
          "libs/core/langchain_core/utils/function_calling.py",
          "libs/core/langchain_core/utils/pydantic.py",
          "libs/core/poetry.lock",
          "libs/core/pyproject.toml",
          "libs/core/tests/unit_tests/utils/test_function_calling.py",
          "libs/partners/anthropic/langchain_anthropic/chat_models.py",
          "libs/partners/fireworks/langchain_fireworks/chat_models.py",
          "libs/partners/groq/langchain_groq/chat_models.py",
          "libs/partners/huggingface/langchain_huggingface/chat_models/huggingface.py",
          "libs/partners/mistralai/langchain_mistralai/chat_models.py",
          "libs/partners/ollama/langchain_ollama/chat_models.py",
          "libs/partners/openai/langchain_openai/chat_models/azure.py",
          "libs/partners/openai/langchain_openai/chat_models/base.py"
        ],
        "message": "core[patch], integrations[patch]: convert TypedDict to tool schema support (#24641)\n\nsupports following UX\n\n```python\n    class SubTool(TypedDict):\n        \"\"\"Subtool docstring\"\"\"\n\n        args: Annotated[Dict[str, Any], {}, \"this does bar\"]\n\n    class Tool(TypedDict):\n        \"\"\"Docstring\n        Args:\n            arg1: foo\n        \"\"\"\n\n        arg1: str\n        arg2: Union[int, str]\n        arg3: Optional[List[SubTool]]\n        arg4: Annotated[Literal[\"bar\", \"baz\"], ..., \"this does foo\"]\n        arg5: Annotated[Optional[float], None]\n```\n\n- can parse google style docstring\n- can use Annotated to specify default value (second arg)\n- can use Annotated to specify arg description (third arg)\n- can have nested complex types",
        "before_after_code_files": [
          "libs/core/langchain_core/language_models/chat_models.py||libs/core/langchain_core/language_models/chat_models.py",
          "libs/core/langchain_core/tools.py||libs/core/langchain_core/tools.py",
          "libs/core/langchain_core/utils/function_calling.py||libs/core/langchain_core/utils/function_calling.py",
          "libs/core/langchain_core/utils/pydantic.py||libs/core/langchain_core/utils/pydantic.py",
          "libs/core/poetry.lock||libs/core/poetry.lock",
          "libs/core/tests/unit_tests/utils/test_function_calling.py||libs/core/tests/unit_tests/utils/test_function_calling.py",
          "libs/partners/anthropic/langchain_anthropic/chat_models.py||libs/partners/anthropic/langchain_anthropic/chat_models.py",
          "libs/partners/fireworks/langchain_fireworks/chat_models.py||libs/partners/fireworks/langchain_fireworks/chat_models.py",
          "libs/partners/groq/langchain_groq/chat_models.py||libs/partners/groq/langchain_groq/chat_models.py",
          "libs/partners/huggingface/langchain_huggingface/chat_models/huggingface.py||libs/partners/huggingface/langchain_huggingface/chat_models/huggingface.py",
          "libs/partners/mistralai/langchain_mistralai/chat_models.py||libs/partners/mistralai/langchain_mistralai/chat_models.py",
          "libs/partners/ollama/langchain_ollama/chat_models.py||libs/partners/ollama/langchain_ollama/chat_models.py",
          "libs/partners/openai/langchain_openai/chat_models/azure.py||libs/partners/openai/langchain_openai/chat_models/azure.py",
          "libs/partners/openai/langchain_openai/chat_models/base.py||libs/partners/openai/langchain_openai/chat_models/base.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ],
          "candidate": [
            "libs/core/poetry.lock||libs/core/poetry.lock"
          ]
        }
      },
      "candidate_diff": {
        "libs/core/langchain_core/language_models/chat_models.py||libs/core/langchain_core/language_models/chat_models.py": [
          "File: libs/core/langchain_core/language_models/chat_models.py -> libs/core/langchain_core/language_models/chat_models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: from langchain_core.runnables.config import ensure_config, run_in_executor",
          "66: from langchain_core.tracers._streaming import _StreamingCallbackHandler",
          "67: from langchain_core.utils.function_calling import convert_to_openai_tool",
          "70: if TYPE_CHECKING:",
          "71:     from langchain_core.output_parsers.base import OutputParserLike",
          "",
          "[Removed Lines]",
          "68: from langchain_core.utils.pydantic import is_basemodel_subclass",
          "",
          "[Added Lines]",
          "68: from langchain_core.utils.pydantic import TypeBaseModel, is_basemodel_subclass",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1075:     def bind_tools(",
          "1076:         self,",
          "1079:     ) -> Runnable[LanguageModelInput, BaseMessage]:",
          "1080:         raise NotImplementedError()",
          "1082:     def with_structured_output(",
          "1083:         self,",
          "1086:         include_raw: bool = False,",
          "",
          "[Removed Lines]",
          "1077:         tools: Sequence[Union[Dict[str, Any], Type[BaseModel], Callable, BaseTool]],",
          "1084:         schema: Union[Dict, Type[BaseModel]],",
          "",
          "[Added Lines]",
          "1077:         tools: Sequence[Union[Dict[str, Any], Type, Callable, BaseTool]],",
          "1084:         schema: Union[Dict, Type],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1089:         \"\"\"Model wrapper that returns outputs formatted to match the given schema.",
          "1091:         Args:",
          "1099:                 an error occurs during model output parsing it will be raised. If True",
          "1100:                 then both the raw model response (a BaseMessage) and the parsed model",
          "1101:                 response will be returned. If an error occurs during output parsing it",
          "",
          "[Removed Lines]",
          "1092:             schema: The output schema as a dict or a Pydantic class. If a Pydantic class",
          "1093:                 then the model output will be an object of that class. If a dict then",
          "1094:                 the model output will be a dict. With a Pydantic class the returned",
          "1095:                 attributes will be validated, whereas with a dict they will not be. If",
          "1096:                 `method` is \"function_calling\" and `schema` is a dict, then the dict",
          "1097:                 must match the OpenAI function-calling spec.",
          "1098:             include_raw: If False then only the parsed structured output is returned. If",
          "",
          "[Added Lines]",
          "1092:             schema:",
          "1093:                 The output schema. Can be passed in as:",
          "1094:                     - an OpenAI function/tool schema,",
          "1095:                     - a JSON Schema,",
          "1096:                     - a TypedDict class (support added in 0.2.26),",
          "1097:                     - or a Pydantic class.",
          "1098:                 If ``schema`` is a Pydantic class then the model output will be a",
          "1099:                 Pydantic instance of that class, and the model-generated fields will be",
          "1100:                 validated by the Pydantic class. Otherwise the model output will be a",
          "1101:                 dict and will not be validated. See :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`",
          "1102:                 for more on how to properly specify types and descriptions of",
          "1103:                 schema fields when specifying a Pydantic or TypedDict class.",
          "1105:                 .. versionchanged:: 0.2.26",
          "1107:                         Added support for TypedDict class.",
          "1109:             include_raw:",
          "1110:                 If False then only the parsed structured output is returned. If",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1103:                 with keys \"raw\", \"parsed\", and \"parsing_error\".",
          "1105:         Returns:",
          "1122:             .. code-block:: python",
          "1124:                 from langchain_core.pydantic_v1 import BaseModel",
          "",
          "[Removed Lines]",
          "1106:             A Runnable that takes any ChatModel input and returns as output:",
          "1108:                 If include_raw is True then a dict with keys:",
          "1109:                     raw: BaseMessage",
          "1110:                     parsed: Optional[_DictOrPydantic]",
          "1111:                     parsing_error: Optional[BaseException]",
          "1113:                 If include_raw is False then just _DictOrPydantic is returned,",
          "1114:                 where _DictOrPydantic depends on the schema:",
          "1116:                 If schema is a Pydantic class then _DictOrPydantic is the Pydantic",
          "1117:                     class.",
          "1119:                 If schema is a dict then _DictOrPydantic is a dict.",
          "1121:         Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=False):",
          "",
          "[Added Lines]",
          "1118:             A Runnable that takes same inputs as a :class:`langchain_core.language_models.chat.BaseChatModel`.",
          "1120:             If ``include_raw`` is False and ``schema`` is a Pydantic class, Runnable outputs",
          "1121:             an instance of ``schema`` (i.e., a Pydantic object).",
          "1123:             Otherwise, if ``include_raw`` is False then Runnable outputs a dict.",
          "1125:             If ``include_raw`` is True, then Runnable outputs a dict with keys:",
          "1126:                 - ``\"raw\"``: BaseMessage",
          "1127:                 - ``\"parsed\"``: None if there was a parsing error, otherwise the type depends on the ``schema`` as described above.",
          "1128:                 - ``\"parsing_error\"``: Optional[BaseException]",
          "1130:         Example: Pydantic schema (include_raw=False):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1138:                 #     justification='Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.'",
          "1139:                 # )",
          "1142:             .. code-block:: python",
          "1144:                 from langchain_core.pydantic_v1 import BaseModel",
          "",
          "[Removed Lines]",
          "1141:         Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=True):",
          "",
          "[Added Lines]",
          "1150:         Example: Pydantic schema (include_raw=True):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1158:                 #     'parsing_error': None",
          "1159:                 # }",
          "1162:             .. code-block:: python",
          "1164:                 from langchain_core.pydantic_v1 import BaseModel",
          "",
          "[Removed Lines]",
          "1161:         Example: Function-calling, dict schema (method=\"function_calling\", include_raw=False):",
          "",
          "[Added Lines]",
          "1170:         Example: Dict schema (include_raw=False):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1194:         llm = self.bind_tools([schema], tool_choice=\"any\")",
          "1195:         if isinstance(schema, type) and is_basemodel_subclass(schema):",
          "1196:             output_parser: OutputParserLike = PydanticToolsParser(",
          "1198:             )",
          "1199:         else:",
          "1200:             key_name = convert_to_openai_tool(schema)[\"function\"][\"name\"]",
          "",
          "[Removed Lines]",
          "1197:                 tools=[schema], first_tool_only=True",
          "",
          "[Added Lines]",
          "1206:                 tools=[cast(TypeBaseModel, schema)], first_tool_only=True",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/tools.py||libs/core/langchain_core/tools.py": [
          "File: libs/core/langchain_core/tools.py -> libs/core/langchain_core/tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     run_in_executor,",
          "89: )",
          "90: from langchain_core.runnables.utils import accepts_context",
          "91: from langchain_core.utils.pydantic import (",
          "92:     TypeBaseModel,",
          "93:     _create_subset_model,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: from langchain_core.utils.function_calling import _parse_google_docstring",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:     Assumes the function docstring follows Google Python style guide.",
          "142:     \"\"\"",
          "146:     docstring = inspect.getdoc(function)",
          "189: def _validate_docstring_args_against_annotations(",
          "",
          "[Removed Lines]",
          "143:     invalid_docstring_error = ValueError(",
          "144:         f\"Found invalid Google-Style docstring for {function}.\"",
          "145:     )",
          "147:     if docstring:",
          "148:         docstring_blocks = docstring.split(\"\\n\\n\")",
          "149:         if error_on_invalid_docstring:",
          "150:             filtered_annotations = {",
          "151:                 arg for arg in annotations if arg not in (*(FILTERED_ARGS), \"return\")",
          "152:             }",
          "153:             if filtered_annotations and (",
          "154:                 len(docstring_blocks) < 2 or not docstring_blocks[1].startswith(\"Args:\")",
          "155:             ):",
          "156:                 raise (invalid_docstring_error)",
          "157:         descriptors = []",
          "158:         args_block = None",
          "159:         past_descriptors = False",
          "160:         for block in docstring_blocks:",
          "161:             if block.startswith(\"Args:\"):",
          "162:                 args_block = block",
          "163:                 break",
          "164:             elif block.startswith(\"Returns:\") or block.startswith(\"Example:\"):",
          "165:                 # Don't break in case Args come after",
          "166:                 past_descriptors = True",
          "167:             elif not past_descriptors:",
          "168:                 descriptors.append(block)",
          "169:             else:",
          "170:                 continue",
          "171:         description = \" \".join(descriptors)",
          "172:     else:",
          "173:         if error_on_invalid_docstring:",
          "174:             raise (invalid_docstring_error)",
          "175:         description = \"\"",
          "176:         args_block = None",
          "177:     arg_descriptions = {}",
          "178:     if args_block:",
          "179:         arg = None",
          "180:         for line in args_block.split(\"\\n\")[1:]:",
          "181:             if \":\" in line:",
          "182:                 arg, desc = line.split(\":\", maxsplit=1)",
          "183:                 arg_descriptions[arg.strip()] = desc.strip()",
          "184:             elif arg:",
          "185:                 arg_descriptions[arg.strip()] += \" \" + line.strip()",
          "186:     return description, arg_descriptions",
          "",
          "[Added Lines]",
          "145:     return _parse_google_docstring(",
          "146:         docstring,",
          "147:         list(annotations),",
          "148:         error_on_invalid_docstring=error_on_invalid_docstring,",
          "149:     )",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/utils/function_calling.py||libs/core/langchain_core/utils/function_calling.py": [
          "File: libs/core/langchain_core/utils/function_calling.py -> libs/core/langchain_core/utils/function_calling.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: from __future__ import annotations",
          "5: import logging",
          "6: import uuid",
          "7: from typing import (",
          "8:     TYPE_CHECKING,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import collections",
          "6: import inspect",
          "8: import typing",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12:     List,",
          "13:     Literal,",
          "14:     Optional,",
          "15:     Type,",
          "16:     Union,",
          "17:     cast,",
          "18: )",
          "22: from langchain_core._api import deprecated",
          "30: from langchain_core.utils.json_schema import dereference_refs",
          "31: from langchain_core.utils.pydantic import is_basemodel_subclass",
          "33: if TYPE_CHECKING:",
          "34:     from langchain_core.tools import BaseTool",
          "35: logger = logging.getLogger(__name__)",
          "36: PYTHON_TO_JSON_TYPES = {",
          "37:     \"str\": \"string\",",
          "38:     \"int\": \"integer\",",
          "",
          "[Removed Lines]",
          "20: from typing_extensions import TypedDict",
          "23: from langchain_core.messages import (",
          "24:     AIMessage,",
          "25:     BaseMessage,",
          "26:     HumanMessage,",
          "27:     ToolMessage,",
          "28: )",
          "29: from langchain_core.pydantic_v1 import BaseModel",
          "",
          "[Added Lines]",
          "18:     Set,",
          "19:     Tuple,",
          "25: from typing_extensions import Annotated, TypedDict, get_args, get_origin, is_typeddict",
          "28: from langchain_core.messages import AIMessage, BaseMessage, HumanMessage, ToolMessage",
          "29: from langchain_core.pydantic_v1 import BaseModel, Field, create_model",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "188:     )",
          "191: @deprecated(",
          "192:     \"0.1.16\",",
          "193:     alternative=\"langchain_core.utils.function_calling.convert_to_openai_function()\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193: def _convert_typed_dict_to_openai_function(typed_dict: Type) -> FunctionDescription:",
          "194:     visited: Dict = {}",
          "195:     model = cast(",
          "196:         Type[BaseModel],",
          "197:         _convert_any_typed_dicts_to_pydantic(typed_dict, visited=visited),",
          "198:     )",
          "199:     return convert_pydantic_to_openai_function(model)",
          "202: _MAX_TYPED_DICT_RECURSION = 25",
          "205: def _convert_any_typed_dicts_to_pydantic(",
          "206:     type_: Type,",
          "208:     visited: Dict,",
          "209:     depth: int = 0,",
          "210: ) -> Type:",
          "211:     if type_ in visited:",
          "212:         return visited[type_]",
          "213:     elif depth >= _MAX_TYPED_DICT_RECURSION:",
          "214:         return type_",
          "215:     elif is_typeddict(type_):",
          "216:         typed_dict = type_",
          "217:         docstring = inspect.getdoc(typed_dict)",
          "218:         annotations_ = typed_dict.__annotations__",
          "219:         description, arg_descriptions = _parse_google_docstring(",
          "220:             docstring, list(annotations_)",
          "221:         )",
          "222:         fields: dict = {}",
          "223:         for arg, arg_type in annotations_.items():",
          "224:             if get_origin(arg_type) is Annotated:",
          "225:                 annotated_args = get_args(arg_type)",
          "226:                 new_arg_type = _convert_any_typed_dicts_to_pydantic(",
          "227:                     annotated_args[0], depth=depth + 1, visited=visited",
          "228:                 )",
          "229:                 field_kwargs = {",
          "230:                     k: v for k, v in zip((\"default\", \"description\"), annotated_args[1:])",
          "231:                 }",
          "232:                 if (field_desc := field_kwargs.get(\"description\")) and not isinstance(",
          "233:                     field_desc, str",
          "234:                 ):",
          "235:                     raise ValueError(",
          "236:                         f\"Invalid annotation for field {arg}. Third argument to \"",
          "237:                         f\"Annotated must be a string description, received value of \"",
          "238:                         f\"type {type(field_desc)}.\"",
          "239:                     )",
          "240:                 elif arg_desc := arg_descriptions.get(arg):",
          "241:                     field_kwargs[\"description\"] = arg_desc",
          "242:                 else:",
          "243:                     pass",
          "244:                 fields[arg] = (new_arg_type, Field(**field_kwargs))",
          "245:             else:",
          "246:                 new_arg_type = _convert_any_typed_dicts_to_pydantic(",
          "247:                     arg_type, depth=depth + 1, visited=visited",
          "248:                 )",
          "249:                 field_kwargs = {\"default\": ...}",
          "250:                 if arg_desc := arg_descriptions.get(arg):",
          "251:                     field_kwargs[\"description\"] = arg_desc",
          "252:                 fields[arg] = (new_arg_type, Field(**field_kwargs))",
          "253:         model = create_model(typed_dict.__name__, **fields)",
          "254:         model.__doc__ = description",
          "255:         visited[typed_dict] = model",
          "256:         return model",
          "257:     elif (origin := get_origin(type_)) and (type_args := get_args(type_)):",
          "258:         subscriptable_origin = _py_38_safe_origin(origin)",
          "259:         type_args = tuple(",
          "260:             _convert_any_typed_dicts_to_pydantic(arg, depth=depth + 1, visited=visited)",
          "261:             for arg in type_args",
          "262:         )",
          "263:         return subscriptable_origin[type_args]",
          "264:     else:",
          "265:         return type_",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "246: def convert_to_openai_function(",
          "248: ) -> Dict[str, Any]:",
          "249:     \"\"\"Convert a raw function/class to an OpenAI function.",
          "251:     Args:",
          "257:     Returns:",
          "261:     Raises:",
          "263:     \"\"\"",
          "264:     from langchain_core.tools import BaseTool",
          "",
          "[Removed Lines]",
          "247:     function: Union[Dict[str, Any], Type[BaseModel], Callable, BaseTool],",
          "252:         function: Either a dictionary, a pydantic.BaseModel class, or a Python function.",
          "253:             If a dictionary is passed in, it is assumed to already be a valid OpenAI",
          "254:             function or a JSON schema with top-level 'title' and 'description' keys",
          "255:             specified.",
          "258:         A dict version of the passed in function which is compatible with the",
          "259:             OpenAI function-calling API.",
          "262:         ValueError: If the function is not in a supported format.",
          "",
          "[Added Lines]",
          "324:     function: Union[Dict[str, Any], Type, Callable, BaseTool],",
          "329:         function: A dictionary, Pydantic BaseModel class, TypedDict class, a LangChain",
          "330:             Tool object, or a Python function. If a dictionary is passed in, it is",
          "331:             assumed to already be a valid OpenAI function or a JSON schema with",
          "332:             top-level 'title' and 'description' keys specified.",
          "335:         A dict version of the passed in function which is compatible with the OpenAI",
          "336:         function-calling API.",
          "339:         ValueError: If function is not in a supported format.",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "280:         }",
          "281:     elif isinstance(function, type) and is_basemodel_subclass(function):",
          "282:         return cast(Dict, convert_pydantic_to_openai_function(function))",
          "283:     elif isinstance(function, BaseTool):",
          "284:         return cast(Dict, format_tool_to_openai_function(function))",
          "285:     elif callable(function):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360:     elif is_typeddict(function):",
          "361:         return cast(Dict, _convert_typed_dict_to_openai_function(cast(Type, function)))",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "405:     for output, tool_call_dict in zip(tool_outputs, openai_tool_calls):",
          "406:         messages.append(ToolMessage(content=output, tool_call_id=tool_call_dict[\"id\"]))  # type: ignore",
          "407:     return messages",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489: def _parse_google_docstring(",
          "490:     docstring: Optional[str],",
          "491:     args: List[str],",
          "493:     error_on_invalid_docstring: bool = False,",
          "494: ) -> Tuple[str, dict]:",
          "495:     \"\"\"Parse the function and argument descriptions from the docstring of a function.",
          "497:     Assumes the function docstring follows Google Python style guide.",
          "498:     \"\"\"",
          "499:     if docstring:",
          "500:         docstring_blocks = docstring.split(\"\\n\\n\")",
          "501:         if error_on_invalid_docstring:",
          "502:             filtered_annotations = {",
          "503:                 arg for arg in args if arg not in (\"run_manager\", \"callbacks\", \"return\")",
          "504:             }",
          "505:             if filtered_annotations and (",
          "506:                 len(docstring_blocks) < 2 or not docstring_blocks[1].startswith(\"Args:\")",
          "507:             ):",
          "508:                 raise ValueError(\"Found invalid Google-Style docstring.\")",
          "509:         descriptors = []",
          "510:         args_block = None",
          "511:         past_descriptors = False",
          "512:         for block in docstring_blocks:",
          "513:             if block.startswith(\"Args:\"):",
          "514:                 args_block = block",
          "515:                 break",
          "516:             elif block.startswith(\"Returns:\") or block.startswith(\"Example:\"):",
          "517:                 # Don't break in case Args come after",
          "518:                 past_descriptors = True",
          "519:             elif not past_descriptors:",
          "520:                 descriptors.append(block)",
          "521:             else:",
          "522:                 continue",
          "523:         description = \" \".join(descriptors)",
          "524:     else:",
          "525:         if error_on_invalid_docstring:",
          "526:             raise ValueError(\"Found invalid Google-Style docstring.\")",
          "527:         description = \"\"",
          "528:         args_block = None",
          "529:     arg_descriptions = {}",
          "530:     if args_block:",
          "531:         arg = None",
          "532:         for line in args_block.split(\"\\n\")[1:]:",
          "533:             if \":\" in line:",
          "534:                 arg, desc = line.split(\":\", maxsplit=1)",
          "535:                 arg_descriptions[arg.strip()] = desc.strip()",
          "536:             elif arg:",
          "537:                 arg_descriptions[arg.strip()] += \" \" + line.strip()",
          "538:     return description, arg_descriptions",
          "541: def _py_38_safe_origin(origin: Type) -> Type:",
          "542:     origin_map: Dict[Type, Any] = {",
          "543:         dict: Dict,",
          "544:         list: List,",
          "545:         tuple: Tuple,",
          "546:         set: Set,",
          "547:         collections.abc.Iterable: typing.Iterable,",
          "548:         collections.abc.Mapping: typing.Mapping,",
          "549:         collections.abc.Sequence: typing.Sequence,",
          "550:         collections.abc.MutableMapping: typing.MutableMapping,",
          "551:     }",
          "552:     return cast(Type, origin_map.get(origin, origin))",
          "",
          "---------------"
        ],
        "libs/core/langchain_core/utils/pydantic.py||libs/core/langchain_core/utils/pydantic.py": [
          "File: libs/core/langchain_core/utils/pydantic.py -> libs/core/langchain_core/utils/pydantic.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import pydantic  # pydantic: ignore",
          "18: def get_pydantic_major_version() -> int:",
          "",
          "[Removed Lines]",
          "12: from langchain_core.pydantic_v1 import (",
          "13:     BaseModel,",
          "14:     root_validator,",
          "15: )",
          "",
          "[Added Lines]",
          "12: from langchain_core.pydantic_v1 import BaseModel, root_validator",
          "",
          "---------------"
        ],
        "libs/core/poetry.lock||libs/core/poetry.lock": [
          "File: libs/core/poetry.lock -> libs/core/poetry.lock",
          "--- Hunk 1 ---",
          "[Context before]",
          "3048: [metadata]",
          "3049: lock-version = \"2.0\"",
          "3050: python-versions = \">=3.8.1,<4.0\"",
          "",
          "[Removed Lines]",
          "3051: content-hash = \"74434689496616068607618a26e7de242b0bb5c3123463566f4976ab28cc747f\"",
          "",
          "[Added Lines]",
          "3051: content-hash = \"982544b8c6dee38e7b8e7a124794f731881f38556ed1eb6c0c4f4182f55d2ecb\"",
          "",
          "---------------"
        ],
        "libs/core/tests/unit_tests/utils/test_function_calling.py||libs/core/tests/unit_tests/utils/test_function_calling.py": [
          "File: libs/core/tests/unit_tests/utils/test_function_calling.py -> libs/core/tests/unit_tests/utils/test_function_calling.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # mypy: disable-error-code=\"annotation-unchecked\"",
          "4: import pytest",
          "5: from pydantic import BaseModel as BaseModelV2Maybe  #  pydantic: ignore",
          "6: from pydantic import Field as FieldV2Maybe  #  pydantic: ignore",
          "9: from langchain_core.messages import AIMessage, HumanMessage, ToolMessage",
          "10: from langchain_core.pydantic_v1 import BaseModel, Field",
          "11: from langchain_core.runnables import Runnable, RunnableLambda",
          "12: from langchain_core.tools import BaseTool, tool",
          "13: from langchain_core.utils.function_calling import (",
          "14:     convert_to_openai_function,",
          "15:     tool_example_to_messages,",
          "16: )",
          "",
          "[Removed Lines]",
          "2: from typing import Any, Callable, Dict, List, Literal, Optional, Type",
          "7: from typing_extensions import Annotated, TypedDict",
          "",
          "[Added Lines]",
          "2: from typing import (",
          "3:     Any,",
          "4:     Callable,",
          "5:     Dict,",
          "6:     Iterable,",
          "7:     List,",
          "8:     Literal,",
          "9:     Mapping,",
          "10:     MutableMapping,",
          "11:     MutableSet,",
          "12:     Optional,",
          "13:     Sequence,",
          "14:     Set,",
          "15:     Tuple,",
          "16:     Type,",
          "17:     Union,",
          "18: )",
          "19: from typing import TypedDict as TypingTypedDict",
          "24: from typing_extensions import (",
          "25:     Annotated as ExtensionsAnnotated,",
          "26: )",
          "27: from typing_extensions import (",
          "28:     TypedDict as ExtensionsTypedDict,",
          "29: )",
          "31: try:",
          "32:     from typing import Annotated as TypingAnnotated  # type: ignore[attr-defined]",
          "33: except ImportError:",
          "34:     TypingAnnotated = ExtensionsAnnotated",
          "41:     _convert_typed_dict_to_openai_function,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: @pytest.fixture()",
          "32:     def dummy_function(",
          "35:     ) -> None:",
          "36:         \"\"\"dummy function\"\"\"",
          "37:         pass",
          "",
          "[Removed Lines]",
          "31: def annotated_function() -> Callable:",
          "33:         arg1: Annotated[int, \"foo\"],",
          "34:         arg2: Annotated[Literal[\"bar\", \"baz\"], \"one of 'bar', 'baz'\"],",
          "",
          "[Added Lines]",
          "59: def Annotated_function() -> Callable:",
          "61:         arg1: ExtensionsAnnotated[int, \"foo\"],",
          "62:         arg2: ExtensionsAnnotated[Literal[\"bar\", \"baz\"], \"one of 'bar', 'baz'\"],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56: @pytest.fixture()",
          "57: def runnable() -> Runnable:",
          "62:     def dummy_function(input_dict: Args) -> None:",
          "63:         pass",
          "",
          "[Removed Lines]",
          "58:     class Args(TypedDict):",
          "59:         arg1: Annotated[int, \"foo\"]",
          "60:         arg2: Annotated[Literal[\"bar\", \"baz\"], \"one of 'bar', 'baz'\"]",
          "",
          "[Added Lines]",
          "86:     class Args(ExtensionsTypedDict):",
          "87:         arg1: ExtensionsAnnotated[int, \"foo\"]",
          "88:         arg2: ExtensionsAnnotated[Literal[\"bar\", \"baz\"], \"one of 'bar', 'baz'\"]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "106:     return dummy_function",
          "109: @pytest.fixture()",
          "110: def json_schema() -> Dict:",
          "111:     return {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: @pytest.fixture()",
          "138: def dummy_typing_typed_dict() -> Type:",
          "139:     class dummy_function(TypingTypedDict):",
          "140:         \"\"\"dummy function\"\"\"",
          "142:         arg1: TypingAnnotated[int, ..., \"foo\"]  # noqa: F821",
          "143:         arg2: TypingAnnotated[Literal[\"bar\", \"baz\"], ..., \"one of 'bar', 'baz'\"]  # noqa: F722",
          "145:     return dummy_function",
          "148: @pytest.fixture()",
          "149: def dummy_typing_typed_dict_docstring() -> Type:",
          "150:     class dummy_function(TypingTypedDict):",
          "151:         \"\"\"dummy function",
          "153:         Args:",
          "154:             arg1: foo",
          "155:             arg2: one of 'bar', 'baz'",
          "156:         \"\"\"",
          "158:         arg1: int",
          "159:         arg2: Literal[\"bar\", \"baz\"]",
          "161:     return dummy_function",
          "164: @pytest.fixture()",
          "165: def dummy_extensions_typed_dict() -> Type:",
          "166:     class dummy_function(ExtensionsTypedDict):",
          "167:         \"\"\"dummy function\"\"\"",
          "169:         arg1: ExtensionsAnnotated[int, ..., \"foo\"]",
          "170:         arg2: ExtensionsAnnotated[Literal[\"bar\", \"baz\"], ..., \"one of 'bar', 'baz'\"]",
          "172:     return dummy_function",
          "175: @pytest.fixture()",
          "176: def dummy_extensions_typed_dict_docstring() -> Type:",
          "177:     class dummy_function(ExtensionsTypedDict):",
          "178:         \"\"\"dummy function",
          "180:         Args:",
          "181:             arg1: foo",
          "182:             arg2: one of 'bar', 'baz'",
          "183:         \"\"\"",
          "185:         arg1: int",
          "186:         arg2: Literal[\"bar\", \"baz\"]",
          "188:     return dummy_function",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "152:     function: Callable,",
          "153:     dummy_tool: BaseTool,",
          "154:     json_schema: Dict,",
          "156:     dummy_pydantic: Type[BaseModel],",
          "157:     runnable: Runnable,",
          "158: ) -> None:",
          "159:     expected = {",
          "160:         \"name\": \"dummy_function\",",
          "",
          "[Removed Lines]",
          "155:     annotated_function: Callable,",
          "",
          "[Added Lines]",
          "237:     Annotated_function: Callable,",
          "240:     dummy_typing_typed_dict: Type,",
          "241:     dummy_typing_typed_dict_docstring: Type,",
          "242:     dummy_extensions_typed_dict: Type,",
          "243:     dummy_extensions_typed_dict_docstring: Type,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "181:         expected,",
          "182:         Dummy.dummy_function,",
          "183:         DummyWithClassMethod.dummy_function,",
          "185:         dummy_pydantic,",
          "186:     ):",
          "187:         actual = convert_to_openai_function(fn)  # type: ignore",
          "188:         assert actual == expected",
          "",
          "[Removed Lines]",
          "184:         annotated_function,",
          "",
          "[Added Lines]",
          "270:         Annotated_function,",
          "272:         dummy_typing_typed_dict,",
          "273:         dummy_typing_typed_dict_docstring,",
          "274:         dummy_extensions_typed_dict,",
          "275:         dummy_extensions_typed_dict_docstring,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "356:         },",
          "357:     ]",
          "358:     assert messages[2].content == \"Output1\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451: @pytest.mark.parametrize(\"use_extension_typed_dict\", [True, False])",
          "452: @pytest.mark.parametrize(\"use_extension_annotated\", [True, False])",
          "453: def test__convert_typed_dict_to_openai_function(",
          "454:     use_extension_typed_dict: bool, use_extension_annotated: bool",
          "455: ) -> None:",
          "456:     if use_extension_typed_dict:",
          "457:         TypedDict = ExtensionsTypedDict",
          "458:     else:",
          "459:         TypedDict = TypingTypedDict",
          "460:     if use_extension_annotated:",
          "461:         Annotated = TypingAnnotated",
          "462:     else:",
          "463:         Annotated = TypingAnnotated",
          "465:     class SubTool(TypedDict):",
          "466:         \"\"\"Subtool docstring\"\"\"",
          "468:         args: Annotated[Dict[str, Any], {}, \"this does bar\"]  # noqa: F722  # type: ignore",
          "470:     class Tool(TypedDict):",
          "471:         \"\"\"Docstring",
          "473:         Args:",
          "474:             arg1: foo",
          "475:         \"\"\"",
          "477:         arg1: str",
          "478:         arg2: Union[int, str, bool]",
          "479:         arg3: Optional[List[SubTool]]",
          "480:         arg4: Annotated[Literal[\"bar\", \"baz\"], ..., \"this does foo\"]  # noqa: F722",
          "481:         arg5: Annotated[Optional[float], None]",
          "482:         arg6: Annotated[",
          "483:             Optional[Sequence[Mapping[str, Tuple[Iterable[Any], SubTool]]]], []",
          "484:         ]",
          "485:         arg7: Annotated[List[SubTool], ...]",
          "486:         arg8: Annotated[Tuple[SubTool], ...]",
          "487:         arg9: Annotated[Sequence[SubTool], ...]",
          "488:         arg10: Annotated[Iterable[SubTool], ...]",
          "489:         arg11: Annotated[Set[SubTool], ...]",
          "490:         arg12: Annotated[Dict[str, SubTool], ...]",
          "491:         arg13: Annotated[Mapping[str, SubTool], ...]",
          "492:         arg14: Annotated[MutableMapping[str, SubTool], ...]",
          "493:         arg15: Annotated[bool, False, \"flag\"]  # noqa: F821  # type: ignore",
          "495:     expected = {",
          "496:         \"name\": \"Tool\",",
          "497:         \"description\": \"Docstring\",",
          "498:         \"parameters\": {",
          "499:             \"type\": \"object\",",
          "500:             \"properties\": {",
          "501:                 \"arg1\": {\"description\": \"foo\", \"type\": \"string\"},",
          "502:                 \"arg2\": {",
          "503:                     \"anyOf\": [",
          "504:                         {\"type\": \"integer\"},",
          "505:                         {\"type\": \"string\"},",
          "506:                         {\"type\": \"boolean\"},",
          "507:                     ]",
          "508:                 },",
          "509:                 \"arg3\": {",
          "510:                     \"type\": \"array\",",
          "511:                     \"items\": {",
          "512:                         \"description\": \"Subtool docstring\",",
          "513:                         \"type\": \"object\",",
          "514:                         \"properties\": {",
          "515:                             \"args\": {",
          "516:                                 \"description\": \"this does bar\",",
          "517:                                 \"default\": {},",
          "518:                                 \"type\": \"object\",",
          "519:                             }",
          "520:                         },",
          "521:                     },",
          "522:                 },",
          "523:                 \"arg4\": {",
          "524:                     \"description\": \"this does foo\",",
          "525:                     \"enum\": [\"bar\", \"baz\"],",
          "526:                     \"type\": \"string\",",
          "527:                 },",
          "528:                 \"arg5\": {\"type\": \"number\"},",
          "529:                 \"arg6\": {",
          "530:                     \"default\": [],",
          "531:                     \"type\": \"array\",",
          "532:                     \"items\": {",
          "533:                         \"type\": \"object\",",
          "534:                         \"additionalProperties\": {",
          "535:                             \"type\": \"array\",",
          "536:                             \"minItems\": 2,",
          "537:                             \"maxItems\": 2,",
          "538:                             \"items\": [",
          "539:                                 {\"type\": \"array\", \"items\": {}},",
          "540:                                 {",
          "541:                                     \"title\": \"SubTool\",",
          "542:                                     \"description\": \"Subtool docstring\",",
          "543:                                     \"type\": \"object\",",
          "544:                                     \"properties\": {",
          "545:                                         \"args\": {",
          "546:                                             \"title\": \"Args\",",
          "547:                                             \"description\": \"this does bar\",",
          "548:                                             \"default\": {},",
          "549:                                             \"type\": \"object\",",
          "550:                                         }",
          "551:                                     },",
          "552:                                 },",
          "553:                             ],",
          "554:                         },",
          "555:                     },",
          "556:                 },",
          "557:                 \"arg7\": {",
          "558:                     \"type\": \"array\",",
          "559:                     \"items\": {",
          "560:                         \"description\": \"Subtool docstring\",",
          "561:                         \"type\": \"object\",",
          "562:                         \"properties\": {",
          "563:                             \"args\": {",
          "564:                                 \"description\": \"this does bar\",",
          "565:                                 \"default\": {},",
          "566:                                 \"type\": \"object\",",
          "567:                             }",
          "568:                         },",
          "569:                     },",
          "570:                 },",
          "571:                 \"arg8\": {",
          "572:                     \"type\": \"array\",",
          "573:                     \"minItems\": 1,",
          "574:                     \"maxItems\": 1,",
          "575:                     \"items\": [",
          "576:                         {",
          "577:                             \"title\": \"SubTool\",",
          "578:                             \"description\": \"Subtool docstring\",",
          "579:                             \"type\": \"object\",",
          "580:                             \"properties\": {",
          "581:                                 \"args\": {",
          "582:                                     \"title\": \"Args\",",
          "583:                                     \"description\": \"this does bar\",",
          "584:                                     \"default\": {},",
          "585:                                     \"type\": \"object\",",
          "586:                                 }",
          "587:                             },",
          "588:                         }",
          "589:                     ],",
          "590:                 },",
          "591:                 \"arg9\": {",
          "592:                     \"type\": \"array\",",
          "593:                     \"items\": {",
          "594:                         \"description\": \"Subtool docstring\",",
          "595:                         \"type\": \"object\",",
          "596:                         \"properties\": {",
          "597:                             \"args\": {",
          "598:                                 \"description\": \"this does bar\",",
          "599:                                 \"default\": {},",
          "600:                                 \"type\": \"object\",",
          "601:                             }",
          "602:                         },",
          "603:                     },",
          "604:                 },",
          "605:                 \"arg10\": {",
          "606:                     \"type\": \"array\",",
          "607:                     \"items\": {",
          "608:                         \"description\": \"Subtool docstring\",",
          "609:                         \"type\": \"object\",",
          "610:                         \"properties\": {",
          "611:                             \"args\": {",
          "612:                                 \"description\": \"this does bar\",",
          "613:                                 \"default\": {},",
          "614:                                 \"type\": \"object\",",
          "615:                             }",
          "616:                         },",
          "617:                     },",
          "618:                 },",
          "619:                 \"arg11\": {",
          "620:                     \"type\": \"array\",",
          "621:                     \"items\": {",
          "622:                         \"description\": \"Subtool docstring\",",
          "623:                         \"type\": \"object\",",
          "624:                         \"properties\": {",
          "625:                             \"args\": {",
          "626:                                 \"description\": \"this does bar\",",
          "627:                                 \"default\": {},",
          "628:                                 \"type\": \"object\",",
          "629:                             }",
          "630:                         },",
          "631:                     },",
          "632:                     \"uniqueItems\": True,",
          "633:                 },",
          "634:                 \"arg12\": {",
          "635:                     \"type\": \"object\",",
          "636:                     \"additionalProperties\": {",
          "637:                         \"description\": \"Subtool docstring\",",
          "638:                         \"type\": \"object\",",
          "639:                         \"properties\": {",
          "640:                             \"args\": {",
          "641:                                 \"description\": \"this does bar\",",
          "642:                                 \"default\": {},",
          "643:                                 \"type\": \"object\",",
          "644:                             }",
          "645:                         },",
          "646:                     },",
          "647:                 },",
          "648:                 \"arg13\": {",
          "649:                     \"type\": \"object\",",
          "650:                     \"additionalProperties\": {",
          "651:                         \"description\": \"Subtool docstring\",",
          "652:                         \"type\": \"object\",",
          "653:                         \"properties\": {",
          "654:                             \"args\": {",
          "655:                                 \"description\": \"this does bar\",",
          "656:                                 \"default\": {},",
          "657:                                 \"type\": \"object\",",
          "658:                             }",
          "659:                         },",
          "660:                     },",
          "661:                 },",
          "662:                 \"arg14\": {",
          "663:                     \"type\": \"object\",",
          "664:                     \"additionalProperties\": {",
          "665:                         \"description\": \"Subtool docstring\",",
          "666:                         \"type\": \"object\",",
          "667:                         \"properties\": {",
          "668:                             \"args\": {",
          "669:                                 \"description\": \"this does bar\",",
          "670:                                 \"default\": {},",
          "671:                                 \"type\": \"object\",",
          "672:                             }",
          "673:                         },",
          "674:                     },",
          "675:                 },",
          "676:                 \"arg15\": {\"description\": \"flag\", \"default\": False, \"type\": \"boolean\"},",
          "677:             },",
          "678:             \"required\": [",
          "679:                 \"arg1\",",
          "680:                 \"arg2\",",
          "681:                 \"arg3\",",
          "682:                 \"arg4\",",
          "683:                 \"arg7\",",
          "684:                 \"arg8\",",
          "685:                 \"arg9\",",
          "686:                 \"arg10\",",
          "687:                 \"arg11\",",
          "688:                 \"arg12\",",
          "689:                 \"arg13\",",
          "690:                 \"arg14\",",
          "691:             ],",
          "692:         },",
          "693:     }",
          "694:     actual = _convert_typed_dict_to_openai_function(Tool)",
          "695:     assert actual == expected",
          "698: @pytest.mark.parametrize(\"typed_dict\", [ExtensionsTypedDict, TypingTypedDict])",
          "699: def test__convert_typed_dict_to_openai_function_fail(typed_dict: Type) -> None:",
          "700:     class Tool(typed_dict):",
          "701:         arg1: MutableSet  # Pydantic doesn't support",
          "703:     with pytest.raises(TypeError):",
          "704:         _convert_typed_dict_to_openai_function(Tool)",
          "",
          "---------------"
        ],
        "libs/partners/anthropic/langchain_anthropic/chat_models.py||libs/partners/anthropic/langchain_anthropic/chat_models.py": [
          "File: libs/partners/anthropic/langchain_anthropic/chat_models.py -> libs/partners/anthropic/langchain_anthropic/chat_models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "783:     def bind_tools(",
          "784:         self,",
          "787:         tool_choice: Optional[",
          "788:             Union[Dict[str, str], Literal[\"any\", \"auto\"], str]",
          "",
          "[Removed Lines]",
          "785:         tools: Sequence[Union[Dict[str, Any], Type[BaseModel], Callable, BaseTool]],",
          "",
          "[Added Lines]",
          "785:         tools: Sequence[Union[Dict[str, Any], Type, Callable, BaseTool]],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "794:         Args:",
          "795:             tools: A list of tool definitions to bind to this chat model.",
          "799:             tool_choice: Which tool to require the model to call.",
          "800:                 Options are:",
          "810:         Example:",
          "811:             .. code-block:: python",
          "",
          "[Removed Lines]",
          "796:                 Can be  a dictionary, pydantic model, callable, or BaseTool. Pydantic",
          "797:                 models, callables, and BaseTools will be automatically converted to",
          "798:                 their schema dictionary representation.",
          "801:                     name of the tool (str): calls corresponding tool;",
          "802:                     \"auto\" or None: automatically selects a tool (including no tool);",
          "803:                     \"any\": force at least one tool to be called;",
          "804:                     or a dict of the form:",
          "805:                         {\"type\": \"tool\", \"name\": \"tool_name\"},",
          "806:                         or {\"type: \"any\"},",
          "807:                         or {\"type: \"auto\"};",
          "",
          "[Added Lines]",
          "796:                 Supports Anthropic format tool schemas and any tool definition handled",
          "797:                 by :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`.",
          "800:                     - name of the tool (str): calls corresponding tool;",
          "801:                     - ``\"auto\"`` or None: automatically selects a tool (including no tool);",
          "802:                     - ``\"any\"``: force at least one tool to be called;",
          "803:                     - or a dict of the form:",
          "804:                         ``{\"type\": \"tool\", \"name\": \"tool_name\"}``,",
          "805:                         or ``{\"type: \"any\"}``,",
          "806:                         or ``{\"type: \"auto\"}``;",
          "807:             kwargs: Any additional parameters are passed directly to",
          "808:                 ``self.bind(**kwargs)``.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "905:         \"\"\"Model wrapper that returns outputs formatted to match the given schema.",
          "907:         Args:",
          "913:                 an error occurs during model output parsing it will be raised. If True",
          "914:                 then both the raw model response (a BaseMessage) and the parsed model",
          "915:                 response will be returned. If an error occurs during output parsing it",
          "",
          "[Removed Lines]",
          "908:             schema: The output schema as a dict or a Pydantic class. If a Pydantic class",
          "909:                 then the model output will be an object of that class. If a dict then",
          "910:                 the model output will be a dict. With a Pydantic class the returned",
          "911:                 attributes will be validated, whereas with a dict they will not be.",
          "912:             include_raw: If False then only the parsed structured output is returned. If",
          "",
          "[Added Lines]",
          "908:             schema:",
          "909:                 The output schema. Can be passed in as:",
          "910:                     - an Anthropic tool schema,",
          "911:                     - an OpenAI function/tool schema,",
          "912:                     - a JSON Schema,",
          "913:                     - a TypedDict class (support added in 0.1.22),",
          "914:                     - or a Pydantic class.",
          "915:                 If ``schema`` is a Pydantic class then the model output will be a",
          "916:                 Pydantic instance of that class, and the model-generated fields will be",
          "917:                 validated by the Pydantic class. Otherwise the model output will be a",
          "918:                 dict and will not be validated. See :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`",
          "919:                 for more on how to properly specify types and descriptions of",
          "920:                 schema fields when specifying a Pydantic or TypedDict class.",
          "922:                 .. versionchanged:: 0.1.22",
          "924:                         Added support for TypedDict class.",
          "926:             include_raw:",
          "927:                 If False then only the parsed structured output is returned. If",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "917:                 with keys \"raw\", \"parsed\", and \"parsing_error\".",
          "919:         Returns:",
          "932:         Example: Pydantic schema (include_raw=False):",
          "933:             .. code-block:: python",
          "",
          "[Removed Lines]",
          "920:             A Runnable that takes any ChatModel input. The output type depends on",
          "921:             include_raw and schema.",
          "923:             If include_raw is True then output is a dict with keys:",
          "924:                 raw: BaseMessage,",
          "925:                 parsed: Optional[_DictOrPydantic],",
          "926:                 parsing_error: Optional[BaseException],",
          "928:             If include_raw is False and schema is a Dict then the runnable outputs a Dict.",
          "929:             If include_raw is False and schema is a Type[BaseModel] then the runnable",
          "930:             outputs a BaseModel.",
          "",
          "[Added Lines]",
          "935:             A Runnable that takes same inputs as a :class:`langchain_core.language_models.chat.BaseChatModel`.",
          "937:             If ``include_raw`` is False and ``schema`` is a Pydantic class, Runnable outputs",
          "938:             an instance of ``schema`` (i.e., a Pydantic object).",
          "940:             Otherwise, if ``include_raw`` is False then Runnable outputs a dict.",
          "942:             If ``include_raw`` is True, then Runnable outputs a dict with keys:",
          "943:                 - ``\"raw\"``: BaseMessage",
          "944:                 - ``\"parsed\"``: None if there was a parsing error, otherwise the type depends on the ``schema`` as described above.",
          "945:                 - ``\"parsing_error\"``: Optional[BaseException]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1034: def convert_to_anthropic_tool(",
          "1036: ) -> AnthropicTool:",
          "1037:     \"\"\"Convert a tool-like object to an Anthropic tool definition.\"\"\"",
          "1038:     # already in Anthropic tool format",
          "",
          "[Removed Lines]",
          "1035:     tool: Union[Dict[str, Any], Type[BaseModel], Callable, BaseTool],",
          "",
          "[Added Lines]",
          "1050:     tool: Union[Dict[str, Any], Type, Callable, BaseTool],",
          "",
          "---------------"
        ],
        "libs/partners/fireworks/langchain_fireworks/chat_models.py||libs/partners/fireworks/langchain_fireworks/chat_models.py": [
          "File: libs/partners/fireworks/langchain_fireworks/chat_models.py -> libs/partners/fireworks/langchain_fireworks/chat_models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "689:         Args:",
          "690:             tools: A list of tool definitions to bind to this chat model.",
          "694:             tool_choice: Which tool to require the model to call.",
          "695:                 Must be the name of the single provided function,",
          "696:                 \"auto\" to automatically determine which function to call",
          "",
          "[Removed Lines]",
          "691:                 Can be  a dictionary, pydantic model, callable, or BaseTool. Pydantic",
          "692:                 models, callables, and BaseTools will be automatically converted to",
          "693:                 their schema dictionary representation.",
          "",
          "[Added Lines]",
          "691:                 Supports any tool definition handled by",
          "692:                 :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "746:         \"\"\"Model wrapper that returns outputs formatted to match the given schema.",
          "748:         Args:",
          "756:                 or \"json_mode\". If \"function_calling\" then the schema will be converted",
          "759:                 used. Note that if using \"json_mode\" then you must include instructions",
          "760:                 for formatting the output into the desired schema into the model call.",
          "762:                 an error occurs during model output parsing it will be raised. If True",
          "763:                 then both the raw model response (a BaseMessage) and the parsed model",
          "764:                 response will be returned. If an error occurs during output parsing it",
          "",
          "[Removed Lines]",
          "749:             schema: The output schema as a dict or a Pydantic class. If a Pydantic class",
          "750:                 then the model output will be an object of that class. If a dict then",
          "751:                 the model output will be a dict. With a Pydantic class the returned",
          "752:                 attributes will be validated, whereas with a dict they will not be. If",
          "753:                 `method` is \"function_calling\" and `schema` is a dict, then the dict",
          "754:                 must match the Fireworks function-calling spec.",
          "755:             method: The method for steering model generation, either \"function_calling\"",
          "757:                 to a Fireworks function and the returned model will make use of the",
          "758:                 function-calling API. If \"json_mode\" then Fireworks's JSON mode will be",
          "761:             include_raw: If False then only the parsed structured output is returned. If",
          "",
          "[Added Lines]",
          "748:             schema:",
          "749:                 The output schema. Can be passed in as:",
          "750:                     - an OpenAI function/tool schema,",
          "751:                     - a JSON Schema,",
          "752:                     - a TypedDict class (support added in 0.1.7),",
          "753:                     - or a Pydantic class.",
          "754:                 If ``schema`` is a Pydantic class then the model output will be a",
          "755:                 Pydantic instance of that class, and the model-generated fields will be",
          "756:                 validated by the Pydantic class. Otherwise the model output will be a",
          "757:                 dict and will not be validated. See :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`",
          "758:                 for more on how to properly specify types and descriptions of",
          "759:                 schema fields when specifying a Pydantic or TypedDict class.",
          "761:                 .. versionchanged:: 0.1.7",
          "763:                         Added support for TypedDict class.",
          "765:             method:",
          "766:                 The method for steering model generation, either \"function_calling\"",
          "768:                 to an OpenAI function and the returned model will make use of the",
          "769:                 function-calling API. If \"json_mode\" then OpenAI's JSON mode will be",
          "772:             include_raw:",
          "773:                 If False then only the parsed structured output is returned. If",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "766:                 with keys \"raw\", \"parsed\", and \"parsing_error\".",
          "768:         Returns:",
          "785:             .. code-block:: python",
          "787:                 from langchain_fireworks import ChatFireworks",
          "790:                 class AnswerWithJustification(BaseModel):",
          "791:                     '''An answer to the user question along with justification for the answer.'''",
          "792:                     answer: str",
          "795:                 llm = ChatFireworks(model=\"accounts/fireworks/models/firefunction-v1\", temperature=0)",
          "796:                 structured_llm = llm.with_structured_output(AnswerWithJustification)",
          "800:                 # -> AnswerWithJustification(",
          "801:                 #     answer='They weigh the same',",
          "802:                 #     justification='Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.'",
          "803:                 # )",
          "806:             .. code-block:: python",
          "808:                 from langchain_fireworks import ChatFireworks",
          "809:                 from langchain_core.pydantic_v1 import BaseModel",
          "811:                 class AnswerWithJustification(BaseModel):",
          "812:                     '''An answer to the user question along with justification for the answer.'''",
          "813:                     answer: str",
          "814:                     justification: str",
          "816:                 llm = ChatFireworks(model=\"accounts/fireworks/models/firefunction-v1\", temperature=0)",
          "820:                 # -> {",
          "821:                 #     'raw': AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_Ao02pnFYXD6GN1yzc0uXPsvF', 'function': {'arguments': '{\"answer\":\"They weigh the same.\",\"justification\":\"Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.\"}', 'name': 'AnswerWithJustification'}, 'type': 'function'}]}),",
          "822:                 #     'parsed': AnswerWithJustification(answer='They weigh the same.', justification='Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.'),",
          "823:                 #     'parsing_error': None",
          "824:                 # }",
          "827:             .. code-block:: python",
          "829:                 from langchain_fireworks import ChatFireworks",
          "834:                     '''An answer to the user question along with justification for the answer.'''",
          "835:                     answer: str",
          "839:                 llm = ChatFireworks(model=\"accounts/fireworks/models/firefunction-v1\", temperature=0)",
          "843:                 # -> {",
          "844:                 #     'answer': 'They weigh the same',",
          "845:                 #     'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume and density of the two substances differ.'",
          "846:                 # }",
          "849:             .. code-block::",
          "851:                 from langchain_fireworks import ChatFireworks",
          "",
          "[Removed Lines]",
          "769:             A Runnable that takes any ChatModel input and returns as output:",
          "771:                 If include_raw is True then a dict with keys:",
          "772:                     raw: BaseMessage",
          "773:                     parsed: Optional[_DictOrPydantic]",
          "774:                     parsing_error: Optional[BaseException]",
          "776:                 If include_raw is False then just _DictOrPydantic is returned,",
          "777:                 where _DictOrPydantic depends on the schema:",
          "779:                 If schema is a Pydantic class then _DictOrPydantic is the Pydantic",
          "780:                     class.",
          "782:                 If schema is a dict then _DictOrPydantic is a dict.",
          "784:         Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=False):",
          "788:                 from langchain_core.pydantic_v1 import BaseModel",
          "793:                     justification: str",
          "798:                 structured_llm.invoke(\"What weighs more a pound of bricks or a pound of feathers\")",
          "805:         Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=True):",
          "817:                 structured_llm = llm.with_structured_output(AnswerWithJustification, include_raw=True)",
          "819:                 structured_llm.invoke(\"What weighs more a pound of bricks or a pound of feathers\")",
          "826:         Example: Function-calling, dict schema (method=\"function_calling\", include_raw=False):",
          "830:                 from langchain_core.pydantic_v1 import BaseModel",
          "831:                 from langchain_core.utils.function_calling import convert_to_openai_tool",
          "833:                 class AnswerWithJustification(BaseModel):",
          "836:                     justification: str",
          "838:                 dict_schema = convert_to_openai_tool(AnswerWithJustification)",
          "840:                 structured_llm = llm.with_structured_output(dict_schema)",
          "842:                 structured_llm.invoke(\"What weighs more a pound of bricks or a pound of feathers\")",
          "848:         Example: JSON mode, Pydantic schema (method=\"json_mode\", include_raw=True):",
          "",
          "[Added Lines]",
          "781:             A Runnable that takes same inputs as a :class:`langchain_core.language_models.chat.BaseChatModel`.",
          "783:             If ``include_raw`` is False and ``schema`` is a Pydantic class, Runnable outputs",
          "784:             an instance of ``schema`` (i.e., a Pydantic object).",
          "786:             Otherwise, if ``include_raw`` is False then Runnable outputs a dict.",
          "788:             If ``include_raw`` is True, then Runnable outputs a dict with keys:",
          "789:                 - ``\"raw\"``: BaseMessage",
          "790:                 - ``\"parsed\"``: None if there was a parsing error, otherwise the type depends on the ``schema`` as described above.",
          "791:                 - ``\"parsing_error\"``: Optional[BaseException]",
          "793:         Example: schema=Pydantic class, method=\"function_calling\", include_raw=False:",
          "796:                 from typing import Optional",
          "799:                 from langchain_core.pydantic_v1 import BaseModel, Field",
          "806:                     # If we provide default values and/or descriptions for fields, these will be passed",
          "807:                     # to the model. This is an important part of improving a model's ability to",
          "808:                     # correctly return structured outputs.",
          "809:                     justification: Optional[str] = Field(",
          "810:                         default=None, description=\"A justification for the answer.\"",
          "811:                     )",
          "817:                 structured_llm.invoke(",
          "818:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "819:                 )",
          "826:         Example: schema=Pydantic class, method=\"function_calling\", include_raw=True:",
          "841:                 structured_llm = llm.with_structured_output(",
          "842:                     AnswerWithJustification, include_raw=True",
          "843:                 )",
          "845:                 structured_llm.invoke(",
          "846:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "847:                 )",
          "854:         Example: schema=TypedDict class, method=\"function_calling\", include_raw=False:",
          "857:                 # IMPORTANT: If you are using Python <=3.8, you need to import Annotated",
          "858:                 # from typing_extensions, not from typing.",
          "859:                 from typing_extensions import Annotated, TypedDict",
          "864:                 class AnswerWithJustification(TypedDict):",
          "868:                     justification: Annotated[",
          "869:                         Optional[str], None, \"A justification for the answer.\"",
          "870:                     ]",
          "874:                 structured_llm = llm.with_structured_output(AnswerWithJustification)",
          "876:                 structured_llm.invoke(",
          "877:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "878:                 )",
          "884:         Example: schema=OpenAI function schema, method=\"function_calling\", include_raw=False:",
          "885:             .. code-block:: python",
          "887:                 from langchain_fireworks import ChatFireworks",
          "889:                 oai_schema = {",
          "890:                     'name': 'AnswerWithJustification',",
          "891:                     'description': 'An answer to the user question along with justification for the answer.',",
          "892:                     'parameters': {",
          "893:                         'type': 'object',",
          "894:                         'properties': {",
          "895:                             'answer': {'type': 'string'},",
          "896:                             'justification': {'description': 'A justification for the answer.', 'type': 'string'}",
          "897:                         },",
          "898:                        'required': ['answer']",
          "899:                    }",
          "900:                }",
          "902:                 llm = ChatFireworks(model=\"accounts/fireworks/models/firefunction-v1\", temperature=0)",
          "903:                 structured_llm = llm.with_structured_output(oai_schema)",
          "905:                 structured_llm.invoke(",
          "906:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "907:                 )",
          "908:                 # -> {",
          "909:                 #     'answer': 'They weigh the same',",
          "910:                 #     'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume and density of the two substances differ.'",
          "911:                 # }",
          "913:         Example: schema=Pydantic class, method=\"json_mode\", include_raw=True:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "873:                 #     'parsing_error': None",
          "874:                 # }",
          "877:             .. code-block::",
          "882:                 structured_llm = llm.with_structured_output(method=\"json_mode\", include_raw=True)",
          "884:                 structured_llm.invoke(",
          "",
          "[Removed Lines]",
          "876:         Example: JSON mode, no schema (schema=None, method=\"json_mode\", include_raw=True):",
          "879:                 from langchain_fireworks import ChatFireworks",
          "881:                 llm = ChatFireworks(model=\"accounts/fireworks/models/firefunction-v1\", temperature=0)",
          "",
          "[Added Lines]",
          "941:         Example: schema=None, method=\"json_mode\", include_raw=True:",
          "",
          "---------------"
        ],
        "libs/partners/groq/langchain_groq/chat_models.py||libs/partners/groq/langchain_groq/chat_models.py": [
          "File: libs/partners/groq/langchain_groq/chat_models.py -> libs/partners/groq/langchain_groq/chat_models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "790:         Args:",
          "791:             tools: A list of tool definitions to bind to this chat model.",
          "795:             tool_choice: Which tool to require the model to call.",
          "796:                 Must be the name of the single provided function,",
          "797:                 \"auto\" to automatically determine which function to call",
          "",
          "[Removed Lines]",
          "792:                 Can be  a dictionary, pydantic model, callable, or BaseTool. Pydantic",
          "793:                 models, callables, and BaseTools will be automatically converted to",
          "794:                 their schema dictionary representation.",
          "",
          "[Added Lines]",
          "792:                 Supports any tool definition handled by",
          "793:                 :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "856:         \"\"\"Model wrapper that returns outputs formatted to match the given schema.",
          "858:         Args:",
          "866:                 or \"json_mode\". If \"function_calling\" then the schema will be converted",
          "869:                 used. Note that if using \"json_mode\" then you must include instructions",
          "870:                 for formatting the output into the desired schema into the model call.",
          "872:                 an error occurs during model output parsing it will be raised. If True",
          "873:                 then both the raw model response (a BaseMessage) and the parsed model",
          "874:                 response will be returned. If an error occurs during output parsing it",
          "",
          "[Removed Lines]",
          "859:             schema: The output schema as a dict or a Pydantic class. If a Pydantic class",
          "860:                 then the model output will be an object of that class. If a dict then",
          "861:                 the model output will be a dict. With a Pydantic class the returned",
          "862:                 attributes will be validated, whereas with a dict they will not be. If",
          "863:                 `method` is \"function_calling\" and `schema` is a dict, then the dict",
          "864:                 must match the OpenAI function-calling spec.",
          "865:             method: The method for steering model generation, either \"function_calling\"",
          "867:                 to a OpenAI function and the returned model will make use of the",
          "868:                 function-calling API. If \"json_mode\" then Groq's JSON mode will be",
          "871:             include_raw: If False then only the parsed structured output is returned. If",
          "",
          "[Added Lines]",
          "858:             schema:",
          "859:                 The output schema. Can be passed in as:",
          "860:                     - an OpenAI function/tool schema,",
          "861:                     - a JSON Schema,",
          "862:                     - a TypedDict class (supported added in 0.1.9),",
          "863:                     - or a Pydantic class.",
          "864:                 If ``schema`` is a Pydantic class then the model output will be a",
          "865:                 Pydantic instance of that class, and the model-generated fields will be",
          "866:                 validated by the Pydantic class. Otherwise the model output will be a",
          "867:                 dict and will not be validated. See :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`",
          "868:                 for more on how to properly specify types and descriptions of",
          "869:                 schema fields when specifying a Pydantic or TypedDict class.",
          "871:                 .. versionchanged:: 0.1.9",
          "873:                     Added support for TypedDict class.",
          "874:             method:",
          "875:                 The method for steering model generation, either \"function_calling\"",
          "877:                 to an OpenAI function and the returned model will make use of the",
          "878:                 function-calling API. If \"json_mode\" then OpenAI's JSON mode will be",
          "881:             include_raw:",
          "882:                 If False then only the parsed structured output is returned. If",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "876:                 with keys \"raw\", \"parsed\", and \"parsing_error\".",
          "878:         Returns:",
          "895:             .. code-block:: python",
          "897:                 from langchain_groq import ChatGroq",
          "900:                 class AnswerWithJustification(BaseModel):",
          "901:                     '''An answer to the user question along with justification for the answer.'''",
          "902:                     answer: str",
          "906:                 structured_llm = llm.with_structured_output(AnswerWithJustification)",
          "909:                 # -> AnswerWithJustification(",
          "912:                 # )",
          "915:             .. code-block:: python",
          "917:                 from langchain_groq import ChatGroq",
          "918:                 from langchain_core.pydantic_v1 import BaseModel",
          "920:                 class AnswerWithJustification(BaseModel):",
          "921:                     '''An answer to the user question along with justification for the answer.'''",
          "922:                     answer: str",
          "923:                     justification: str",
          "929:                 # -> {",
          "932:                 #     'parsing_error': None",
          "933:                 # }",
          "936:             .. code-block:: python",
          "938:                 from langchain_groq import ChatGroq",
          "943:                     '''An answer to the user question along with justification for the answer.'''",
          "944:                     answer: str",
          "952:                 # -> {",
          "955:                 # }",
          "958:             .. code-block::",
          "960:                 from langchain_groq import ChatGroq",
          "",
          "[Removed Lines]",
          "879:             A Runnable that takes any ChatModel input and returns as output:",
          "881:                 If include_raw is True then a dict with keys:",
          "882:                     raw: BaseMessage",
          "883:                     parsed: Optional[_DictOrPydantic]",
          "884:                     parsing_error: Optional[BaseException]",
          "886:                 If include_raw is False then just _DictOrPydantic is returned,",
          "887:                 where _DictOrPydantic depends on the schema:",
          "889:                 If schema is a Pydantic class then _DictOrPydantic is the Pydantic",
          "890:                     class.",
          "892:                 If schema is a dict then _DictOrPydantic is a dict.",
          "894:         Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=False):",
          "898:                 from langchain_core.pydantic_v1 import BaseModel",
          "903:                     justification: str",
          "905:                 llm = ChatGroq(temperature=0)",
          "908:                 structured_llm.invoke(\"What weighs more a pound of bricks or a pound of feathers\")",
          "910:                 #     answer='A pound of bricks and a pound of feathers weigh the same.'",
          "911:                 #     justification=\"Both a pound of bricks and a pound of feathers have been defined to have the same weight. The 'pound' is a unit of weight, so any two things that are described as weighing a pound will weigh the same.\"",
          "914:         Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=True):",
          "925:                 llm = ChatGroq(temperature=0)",
          "926:                 structured_llm = llm.with_structured_output(AnswerWithJustification, include_raw=True)",
          "928:                 structured_llm.invoke(\"What weighs more a pound of bricks or a pound of feathers\")",
          "930:                 #     'raw': AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_01htjn3cspevxbqc1d7nkk8wab', 'function': {'arguments': '{\"answer\": \"A pound of bricks and a pound of feathers weigh the same.\", \"justification\": \"Both a pound of bricks and a pound of feathers have been defined to have the same weight. The \\'pound\\' is a unit of weight, so any two things that are described as weighing a pound will weigh the same.\", \"unit\": \"pounds\"}', 'name': 'AnswerWithJustification'}, 'type': 'function'}]}, id='run-456beee6-65f6-4e80-88af-a6065480822c-0'),",
          "931:                 #     'parsed': AnswerWithJustification(answer='A pound of bricks and a pound of feathers weigh the same.', justification=\"Both a pound of bricks and a pound of feathers have been defined to have the same weight. The 'pound' is a unit of weight, so any two things that are described as weighing a pound will weigh the same.\"),",
          "935:         Example: Function-calling, dict schema (method=\"function_calling\", include_raw=False):",
          "939:                 from langchain_core.pydantic_v1 import BaseModel",
          "940:                 from langchain_core.utils.function_calling import convert_to_openai_tool",
          "942:                 class AnswerWithJustification(BaseModel):",
          "945:                     justification: str",
          "947:                 dict_schema = convert_to_openai_tool(AnswerWithJustification)",
          "948:                 llm = ChatGroq(temperature=0)",
          "949:                 structured_llm = llm.with_structured_output(dict_schema)",
          "951:                 structured_llm.invoke(\"What weighs more a pound of bricks or a pound of feathers\")",
          "953:                 #     'answer': 'A pound of bricks and a pound of feathers weigh the same.',",
          "954:                 #     'justification': \"Both a pound of bricks and a pound of feathers have been defined to have the same weight. The 'pound' is a unit of weight, so any two things that are described as weighing a pound will weigh the same.\", 'unit': 'pounds'}",
          "957:         Example: JSON mode, Pydantic schema (method=\"json_mode\", include_raw=True):",
          "",
          "[Added Lines]",
          "890:             A Runnable that takes same inputs as a :class:`langchain_core.language_models.chat.BaseChatModel`.",
          "892:             If ``include_raw`` is False and ``schema`` is a Pydantic class, Runnable outputs",
          "893:             an instance of ``schema`` (i.e., a Pydantic object).",
          "895:             Otherwise, if ``include_raw`` is False then Runnable outputs a dict.",
          "897:             If ``include_raw`` is True, then Runnable outputs a dict with keys:",
          "898:                 - ``\"raw\"``: BaseMessage",
          "899:                 - ``\"parsed\"``: None if there was a parsing error, otherwise the type depends on the ``schema`` as described above.",
          "900:                 - ``\"parsing_error\"``: Optional[BaseException]",
          "902:         Example: schema=Pydantic class, method=\"function_calling\", include_raw=False:",
          "905:                 from typing import Optional",
          "908:                 from langchain_core.pydantic_v1 import BaseModel, Field",
          "915:                     # If we provide default values and/or descriptions for fields, these will be passed",
          "916:                     # to the model. This is an important part of improving a model's ability to",
          "917:                     # correctly return structured outputs.",
          "918:                     justification: Optional[str] = Field(",
          "919:                         default=None, description=\"A justification for the answer.\"",
          "920:                     )",
          "923:                 llm = ChatGroq(model=\"llama-3.1-405b-reasoning\", temperature=0)",
          "926:                 structured_llm.invoke(",
          "927:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "928:                 )",
          "931:                 #     answer='They weigh the same',",
          "932:                 #     justification='Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.'",
          "935:         Example: schema=Pydantic class, method=\"function_calling\", include_raw=True:",
          "949:                 llm = ChatGroq(model=\"llama-3.1-405b-reasoning\", temperature=0)",
          "950:                 structured_llm = llm.with_structured_output(",
          "951:                     AnswerWithJustification, include_raw=True",
          "952:                 )",
          "954:                 structured_llm.invoke(",
          "955:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "956:                 )",
          "958:                 #     'raw': AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_Ao02pnFYXD6GN1yzc0uXPsvF', 'function': {'arguments': '{\"answer\":\"They weigh the same.\",\"justification\":\"Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.\"}', 'name': 'AnswerWithJustification'}, 'type': 'function'}]}),",
          "959:                 #     'parsed': AnswerWithJustification(answer='They weigh the same.', justification='Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.'),",
          "963:         Example: schema=TypedDict class, method=\"function_calling\", include_raw=False:",
          "966:                 # IMPORTANT: If you are using Python <=3.8, you need to import Annotated",
          "967:                 # from typing_extensions, not from typing.",
          "968:                 from typing_extensions import Annotated, TypedDict",
          "973:                 class AnswerWithJustification(TypedDict):",
          "977:                     justification: Annotated[",
          "978:                         Optional[str], None, \"A justification for the answer.\"",
          "979:                     ]",
          "982:                 llm = ChatGroq(model=\"llama-3.1-405b-reasoning\", temperature=0)",
          "983:                 structured_llm = llm.with_structured_output(AnswerWithJustification)",
          "985:                 structured_llm.invoke(",
          "986:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "987:                 )",
          "989:                 #     'answer': 'They weigh the same',",
          "990:                 #     'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume and density of the two substances differ.'",
          "993:         Example: schema=OpenAI function schema, method=\"function_calling\", include_raw=False:",
          "994:             .. code-block:: python",
          "996:                 from langchain_groq import ChatGroq",
          "998:                 oai_schema = {",
          "999:                     'name': 'AnswerWithJustification',",
          "1000:                     'description': 'An answer to the user question along with justification for the answer.',",
          "1001:                     'parameters': {",
          "1002:                         'type': 'object',",
          "1003:                         'properties': {",
          "1004:                             'answer': {'type': 'string'},",
          "1005:                             'justification': {'description': 'A justification for the answer.', 'type': 'string'}",
          "1006:                         },",
          "1007:                        'required': ['answer']",
          "1008:                    }",
          "1009:                }",
          "1011:                 llm = ChatGroq(model=\"llama-3.1-405b-reasoning\", temperature=0)",
          "1012:                 structured_llm = llm.with_structured_output(oai_schema)",
          "1014:                 structured_llm.invoke(",
          "1015:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "1016:                 )",
          "1017:                 # -> {",
          "1018:                 #     'answer': 'They weigh the same',",
          "1019:                 #     'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume and density of the two substances differ.'",
          "1020:                 # }",
          "1022:         Example: schema=Pydantic class, method=\"json_mode\", include_raw=True:",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "964:                     answer: str",
          "965:                     justification: str",
          "968:                 structured_llm = llm.with_structured_output(",
          "969:                     AnswerWithJustification,",
          "970:                     method=\"json_mode\",",
          "",
          "[Removed Lines]",
          "967:                 llm = ChatGroq(temperature=0)",
          "",
          "[Added Lines]",
          "1032:                 llm = ChatGroq(model=\"llama-3.1-405b-reasoning\", temperature=0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "977:                     \"What's heavier a pound of bricks or a pound of feathers?\"",
          "978:                 )",
          "979:                 # -> {",
          "982:                 #     'parsing_error': None",
          "983:                 # }",
          "986:             .. code-block::",
          "991:                 structured_llm = llm.with_structured_output(method=\"json_mode\", include_raw=True)",
          "993:                 structured_llm.invoke(",
          "",
          "[Removed Lines]",
          "980:                 #     'raw': AIMessage(content='{\\n  \"answer\": \"A pound of bricks is the same weight as a pound of feathers.\",\\n  \"justification\": \"Both a pound of bricks and a pound of feathers weigh one pound. The material being weighed does not affect the weight, only the volume or number of items being weighed.\"\\n}', id='run-e5453bc5-5025-4833-95f9-4967bf6d5c4f-0'),",
          "981:                 #     'parsed': AnswerWithJustification(answer='A pound of bricks is the same weight as a pound of feathers.', justification='Both a pound of bricks and a pound of feathers weigh one pound. The material being weighed does not affect the weight, only the volume or number of items being weighed.'),",
          "985:         Example: JSON mode, no schema (schema=None, method=\"json_mode\", include_raw=True):",
          "988:                 from langchain_groq import ChatGroq",
          "990:                 llm = ChatGroq(temperature=0)",
          "",
          "[Added Lines]",
          "1045:                 #     'raw': AIMessage(content='{\\n    \"answer\": \"They are both the same weight.\",\\n    \"justification\": \"Both a pound of bricks and a pound of feathers weigh one pound. The difference lies in the volume and density of the materials, not the weight.\" \\n}'),",
          "1046:                 #     'parsed': AnswerWithJustification(answer='They are both the same weight.', justification='Both a pound of bricks and a pound of feathers weigh one pound. The difference lies in the volume and density of the materials, not the weight.'),",
          "1050:         Example: schema=None, method=\"json_mode\", include_raw=True:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "996:                     \"What's heavier a pound of bricks or a pound of feathers?\"",
          "997:                 )",
          "998:                 # -> {",
          "1000:                 #     'parsed': {",
          "1003:                 #     'parsing_error': None",
          "1004:                 # }",
          "1007:         \"\"\"  # noqa: E501",
          "1008:         if kwargs:",
          "1009:             raise ValueError(f\"Received unsupported arguments {kwargs}\")",
          "",
          "[Removed Lines]",
          "999:                 #     'raw': AIMessage(content='{\\n  \"answer\": \"A pound of bricks is the same weight as a pound of feathers.\",\\n  \"justification\": \"Both a pound of bricks and a pound of feathers weigh one pound. The material doesn\\'t change the weight, only the volume or space that the material takes up.\"\\n}', id='run-a4abbdb6-c20e-456f-bfff-da906a7e76b5-0'),",
          "1001:                 #         'answer': 'A pound of bricks is the same weight as a pound of feathers.',",
          "1002:                 #         'justification': \"Both a pound of bricks and a pound of feathers weigh one pound. The material doesn't change the weight, only the volume or space that the material takes up.\"},",
          "",
          "[Added Lines]",
          "1061:                 #     'raw': AIMessage(content='{\\n    \"answer\": \"They are both the same weight.\",\\n    \"justification\": \"Both a pound of bricks and a pound of feathers weigh one pound. The difference lies in the volume and density of the materials, not the weight.\" \\n}'),",
          "1063:                 #         'answer': 'They are both the same weight.',",
          "1064:                 #         'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The difference lies in the volume and density of the materials, not the weight.'",
          "1065:                 #     },",
          "",
          "---------------"
        ],
        "libs/partners/huggingface/langchain_huggingface/chat_models/huggingface.py||libs/partners/huggingface/langchain_huggingface/chat_models/huggingface.py": [
          "File: libs/partners/huggingface/langchain_huggingface/chat_models/huggingface.py -> libs/partners/huggingface/langchain_huggingface/chat_models/huggingface.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     ToolMessage,",
          "30: )",
          "31: from langchain_core.outputs import ChatGeneration, ChatResult, LLMResult",
          "33: from langchain_core.runnables import Runnable",
          "34: from langchain_core.tools import BaseTool",
          "35: from langchain_core.utils.function_calling import convert_to_openai_tool",
          "",
          "[Removed Lines]",
          "32: from langchain_core.pydantic_v1 import BaseModel, root_validator",
          "",
          "[Added Lines]",
          "32: from langchain_core.pydantic_v1 import root_validator",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "470:     def bind_tools(",
          "471:         self,",
          "474:         tool_choice: Optional[Union[dict, str, Literal[\"auto\", \"none\"], bool]] = None,",
          "",
          "[Removed Lines]",
          "472:         tools: Sequence[Union[Dict[str, Any], Type[BaseModel], Callable, BaseTool]],",
          "",
          "[Added Lines]",
          "472:         tools: Sequence[Union[Dict[str, Any], Type, Callable, BaseTool]],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "481:         Args:",
          "482:             tools: A list of tool definitions to bind to this chat model.",
          "486:             tool_choice: Which tool to require the model to call.",
          "487:                 Must be the name of the single provided function or",
          "488:                 \"auto\" to automatically determine which function to call",
          "",
          "[Removed Lines]",
          "483:                 Can be  a dictionary, pydantic model, callable, or BaseTool. Pydantic",
          "484:                 models, callables, and BaseTools will be automatically converted to",
          "485:                 their schema dictionary representation.",
          "",
          "[Added Lines]",
          "483:                 Supports any tool definition handled by",
          "484:                 :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`.",
          "",
          "---------------"
        ],
        "libs/partners/mistralai/langchain_mistralai/chat_models.py||libs/partners/mistralai/langchain_mistralai/chat_models.py": [
          "File: libs/partners/mistralai/langchain_mistralai/chat_models.py -> libs/partners/mistralai/langchain_mistralai/chat_models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "639:     def bind_tools(",
          "640:         self,",
          "643:     ) -> Runnable[LanguageModelInput, BaseMessage]:",
          "644:         \"\"\"Bind tool-like objects to this chat model.",
          "",
          "[Removed Lines]",
          "641:         tools: Sequence[Union[Dict[str, Any], Type[BaseModel], Callable, BaseTool]],",
          "",
          "[Added Lines]",
          "641:         tools: Sequence[Union[Dict[str, Any], Type, Callable, BaseTool]],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "648:         Args:",
          "649:             tools: A list of tool definitions to bind to this chat model.",
          "653:             tool_choice: Which tool to require the model to call.",
          "654:                 Must be the name of the single provided function or",
          "655:                 \"auto\" to automatically determine which function to call",
          "656:                 (if any), or a dict of the form:",
          "657:                 {\"type\": \"function\", \"function\": {\"name\": <<tool_name>>}}.",
          "660:         \"\"\"",
          "662:         formatted_tools = [convert_to_openai_tool(tool) for tool in tools]",
          "",
          "[Removed Lines]",
          "650:                 Can be  a dictionary, pydantic model, callable, or BaseTool. Pydantic",
          "651:                 models, callables, and BaseTools will be automatically converted to",
          "652:                 their schema dictionary representation.",
          "659:                 :class:`~langchain.runnable.Runnable` constructor.",
          "",
          "[Added Lines]",
          "650:                 Supports any tool definition handled by",
          "651:                 :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`.",
          "657:             kwargs: Any additional parameters are passed directly to",
          "658:                 ``self.bind(**kwargs)``.",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "665:     def with_structured_output(",
          "666:         self,",
          "669:         method: Literal[\"function_calling\", \"json_mode\"] = \"function_calling\",",
          "670:         include_raw: bool = False,",
          "",
          "[Removed Lines]",
          "667:         schema: Optional[Union[Dict, Type[BaseModel]]] = None,",
          "",
          "[Added Lines]",
          "666:         schema: Optional[Union[Dict, Type]] = None,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "673:         \"\"\"Model wrapper that returns outputs formatted to match the given schema.",
          "675:         Args:",
          "683:                 or \"json_mode\". If \"function_calling\" then the schema will be converted",
          "684:                 to an OpenAI function and the returned model will make use of the",
          "685:                 function-calling API. If \"json_mode\" then OpenAI's JSON mode will be",
          "686:                 used. Note that if using \"json_mode\" then you must include instructions",
          "687:                 for formatting the output into the desired schema into the model call.",
          "689:                 an error occurs during model output parsing it will be raised. If True",
          "690:                 then both the raw model response (a BaseMessage) and the parsed model",
          "691:                 response will be returned. If an error occurs during output parsing it",
          "",
          "[Removed Lines]",
          "676:             schema: The output schema as a dict or a Pydantic class. If a Pydantic class",
          "677:                 then the model output will be an object of that class. If a dict then",
          "678:                 the model output will be a dict. With a Pydantic class the returned",
          "679:                 attributes will be validated, whereas with a dict they will not be. If",
          "680:                 `method` is \"function_calling\" and `schema` is a dict, then the dict",
          "681:                 must match the OpenAI function-calling spec.",
          "682:             method: The method for steering model generation, either \"function_calling\"",
          "688:             include_raw: If False then only the parsed structured output is returned. If",
          "",
          "[Added Lines]",
          "675:             schema:",
          "676:                 The output schema. Can be passed in as:",
          "677:                     - an OpenAI function/tool schema,",
          "678:                     - a JSON Schema,",
          "679:                     - a TypedDict class (support added in 0.1.12),",
          "680:                     - or a Pydantic class.",
          "681:                 If ``schema`` is a Pydantic class then the model output will be a",
          "682:                 Pydantic instance of that class, and the model-generated fields will be",
          "683:                 validated by the Pydantic class. Otherwise the model output will be a",
          "684:                 dict and will not be validated. See :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`",
          "685:                 for more on how to properly specify types and descriptions of",
          "686:                 schema fields when specifying a Pydantic or TypedDict class.",
          "688:                 .. versionchanged:: 0.1.12",
          "690:                         Added support for TypedDict class.",
          "692:             method:",
          "693:                 The method for steering model generation, either \"function_calling\"",
          "699:             include_raw:",
          "700:                 If False then only the parsed structured output is returned. If",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "693:                 with keys \"raw\", \"parsed\", and \"parsing_error\".",
          "695:         Returns:",
          "712:             .. code-block:: python",
          "714:                 from langchain_mistralai import ChatMistralAI",
          "717:                 class AnswerWithJustification(BaseModel):",
          "718:                     '''An answer to the user question along with justification for the answer.'''",
          "719:                     answer: str",
          "722:                 llm = ChatMistralAI(model=\"mistral-large-latest\", temperature=0)",
          "723:                 structured_llm = llm.with_structured_output(AnswerWithJustification)",
          "727:                 # -> AnswerWithJustification(",
          "728:                 #     answer='They weigh the same',",
          "729:                 #     justification='Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.'",
          "730:                 # )",
          "733:             .. code-block:: python",
          "735:                 from langchain_mistralai import ChatMistralAI",
          "736:                 from langchain_core.pydantic_v1 import BaseModel",
          "738:                 class AnswerWithJustification(BaseModel):",
          "739:                     '''An answer to the user question along with justification for the answer.'''",
          "740:                     answer: str",
          "741:                     justification: str",
          "743:                 llm = ChatMistralAI(model=\"mistral-large-latest\", temperature=0)",
          "747:                 # -> {",
          "748:                 #     'raw': AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_Ao02pnFYXD6GN1yzc0uXPsvF', 'function': {'arguments': '{\"answer\":\"They weigh the same.\",\"justification\":\"Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.\"}', 'name': 'AnswerWithJustification'}, 'type': 'function'}]}),",
          "749:                 #     'parsed': AnswerWithJustification(answer='They weigh the same.', justification='Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.'),",
          "750:                 #     'parsing_error': None",
          "751:                 # }",
          "754:             .. code-block:: python",
          "756:                 from langchain_mistralai import ChatMistralAI",
          "761:                     '''An answer to the user question along with justification for the answer.'''",
          "762:                     answer: str",
          "766:                 llm = ChatMistralAI(model=\"mistral-large-latest\", temperature=0)",
          "770:                 # -> {",
          "771:                 #     'answer': 'They weigh the same',",
          "772:                 #     'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume and density of the two substances differ.'",
          "773:                 # }",
          "776:             .. code-block::",
          "778:                 from langchain_mistralai import ChatMistralAI",
          "",
          "[Removed Lines]",
          "696:             A Runnable that takes any ChatModel input and returns as output:",
          "698:                 If include_raw is True then a dict with keys:",
          "699:                     raw: BaseMessage",
          "700:                     parsed: Optional[_DictOrPydantic]",
          "701:                     parsing_error: Optional[BaseException]",
          "703:                 If include_raw is False then just _DictOrPydantic is returned,",
          "704:                 where _DictOrPydantic depends on the schema:",
          "706:                 If schema is a Pydantic class then _DictOrPydantic is the Pydantic",
          "707:                     class.",
          "709:                 If schema is a dict then _DictOrPydantic is a dict.",
          "711:         Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=False):",
          "715:                 from langchain_core.pydantic_v1 import BaseModel",
          "720:                     justification: str",
          "725:                 structured_llm.invoke(\"What weighs more a pound of bricks or a pound of feathers\")",
          "732:         Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=True):",
          "744:                 structured_llm = llm.with_structured_output(AnswerWithJustification, include_raw=True)",
          "746:                 structured_llm.invoke(\"What weighs more a pound of bricks or a pound of feathers\")",
          "753:         Example: Function-calling, dict schema (method=\"function_calling\", include_raw=False):",
          "757:                 from langchain_core.pydantic_v1 import BaseModel",
          "758:                 from langchain_core.utils.function_calling import convert_to_openai_tool",
          "760:                 class AnswerWithJustification(BaseModel):",
          "763:                     justification: str",
          "765:                 dict_schema = convert_to_openai_tool(AnswerWithJustification)",
          "767:                 structured_llm = llm.with_structured_output(dict_schema)",
          "769:                 structured_llm.invoke(\"What weighs more a pound of bricks or a pound of feathers\")",
          "775:         Example: JSON mode, Pydantic schema (method=\"json_mode\", include_raw=True):",
          "",
          "[Added Lines]",
          "708:             A Runnable that takes same inputs as a :class:`langchain_core.language_models.chat.BaseChatModel`.",
          "710:             If ``include_raw`` is False and ``schema`` is a Pydantic class, Runnable outputs",
          "711:             an instance of ``schema`` (i.e., a Pydantic object).",
          "713:             Otherwise, if ``include_raw`` is False then Runnable outputs a dict.",
          "715:             If ``include_raw`` is True, then Runnable outputs a dict with keys:",
          "716:                 - ``\"raw\"``: BaseMessage",
          "717:                 - ``\"parsed\"``: None if there was a parsing error, otherwise the type depends on the ``schema`` as described above.",
          "718:                 - ``\"parsing_error\"``: Optional[BaseException]",
          "720:         Example: schema=Pydantic class, method=\"function_calling\", include_raw=False:",
          "723:                 from typing import Optional",
          "726:                 from langchain_core.pydantic_v1 import BaseModel, Field",
          "733:                     # If we provide default values and/or descriptions for fields, these will be passed",
          "734:                     # to the model. This is an important part of improving a model's ability to",
          "735:                     # correctly return structured outputs.",
          "736:                     justification: Optional[str] = Field(",
          "737:                         default=None, description=\"A justification for the answer.\"",
          "738:                     )",
          "744:                 structured_llm.invoke(",
          "745:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "746:                 )",
          "753:         Example: schema=Pydantic class, method=\"function_calling\", include_raw=True:",
          "768:                 structured_llm = llm.with_structured_output(",
          "769:                     AnswerWithJustification, include_raw=True",
          "770:                 )",
          "772:                 structured_llm.invoke(",
          "773:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "774:                 )",
          "781:         Example: schema=TypedDict class, method=\"function_calling\", include_raw=False:",
          "784:                 # IMPORTANT: If you are using Python <=3.8, you need to import Annotated",
          "785:                 # from typing_extensions, not from typing.",
          "786:                 from typing_extensions import Annotated, TypedDict",
          "791:                 class AnswerWithJustification(TypedDict):",
          "795:                     justification: Annotated[",
          "796:                         Optional[str], None, \"A justification for the answer.\"",
          "797:                     ]",
          "801:                 structured_llm = llm.with_structured_output(AnswerWithJustification)",
          "803:                 structured_llm.invoke(",
          "804:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "805:                 )",
          "811:         Example: schema=OpenAI function schema, method=\"function_calling\", include_raw=False:",
          "812:             .. code-block:: python",
          "814:                 from langchain_mistralai import ChatMistralAI",
          "816:                 oai_schema = {",
          "817:                     'name': 'AnswerWithJustification',",
          "818:                     'description': 'An answer to the user question along with justification for the answer.',",
          "819:                     'parameters': {",
          "820:                         'type': 'object',",
          "821:                         'properties': {",
          "822:                             'answer': {'type': 'string'},",
          "823:                             'justification': {'description': 'A justification for the answer.', 'type': 'string'}",
          "824:                         },",
          "825:                        'required': ['answer']",
          "826:                    }",
          "827:                }",
          "829:                 llm = ChatMistralAI(model=\"mistral-large-latest\", temperature=0)",
          "830:                 structured_llm = llm.with_structured_output(oai_schema)",
          "832:                 structured_llm.invoke(",
          "833:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "834:                 )",
          "835:                 # -> {",
          "836:                 #     'answer': 'They weigh the same',",
          "837:                 #     'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume and density of the two substances differ.'",
          "838:                 # }",
          "840:         Example: schema=Pydantic class, method=\"json_mode\", include_raw=True:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "800:                 #     'parsing_error': None",
          "801:                 # }",
          "804:             .. code-block::",
          "808:                 structured_llm = llm.with_structured_output(method=\"json_mode\", include_raw=True)",
          "810:                 structured_llm.invoke(",
          "",
          "[Removed Lines]",
          "803:         Example: JSON mode, no schema (schema=None, method=\"json_mode\", include_raw=True):",
          "806:                 from langchain_mistralai import ChatMistralAI",
          "",
          "[Added Lines]",
          "868:         Example: schema=None, method=\"json_mode\", include_raw=True:",
          "",
          "---------------"
        ],
        "libs/partners/ollama/langchain_ollama/chat_models.py||libs/partners/ollama/langchain_ollama/chat_models.py": [
          "File: libs/partners/ollama/langchain_ollama/chat_models.py -> libs/partners/ollama/langchain_ollama/chat_models.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: from langchain_core.messages.ai import UsageMetadata",
          "36: from langchain_core.messages.tool import tool_call",
          "37: from langchain_core.outputs import ChatGeneration, ChatGenerationChunk, ChatResult",
          "39: from langchain_core.runnables import Runnable",
          "40: from langchain_core.tools import BaseTool",
          "41: from langchain_core.utils.function_calling import convert_to_openai_tool",
          "",
          "[Removed Lines]",
          "38: from langchain_core.pydantic_v1 import BaseModel",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "724:     def bind_tools(",
          "725:         self,",
          "728:     ) -> Runnable[LanguageModelInput, BaseMessage]:",
          "729:         formatted_tools = [convert_to_openai_tool(tool) for tool in tools]",
          "730:         return super().bind(tools=formatted_tools, **kwargs)",
          "",
          "[Removed Lines]",
          "726:         tools: Sequence[Union[Dict[str, Any], Type[BaseModel], Callable, BaseTool]],",
          "",
          "[Added Lines]",
          "725:         tools: Sequence[Union[Dict[str, Any], Type, Callable, BaseTool]],",
          "728:         \"\"\"Bind tool-like objects to this chat model.",
          "730:         Assumes model is compatible with OpenAI tool-calling API.",
          "732:         Args:",
          "733:             tools: A list of tool definitions to bind to this chat model.",
          "734:                 Supports any tool definition handled by",
          "735:                 :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`.",
          "736:             kwargs: Any additional parameters are passed directly to",
          "737:                 ``self.bind(**kwargs)``.",
          "738:         \"\"\"  # noqa: E501",
          "",
          "---------------"
        ],
        "libs/partners/openai/langchain_openai/chat_models/azure.py||libs/partners/openai/langchain_openai/chat_models/azure.py": [
          "File: libs/partners/openai/langchain_openai/chat_models/azure.py -> libs/partners/openai/langchain_openai/chat_models/azure.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "653:     def bind_tools(",
          "654:         self,",
          "657:         tool_choice: Optional[",
          "658:             Union[dict, str, Literal[\"auto\", \"none\", \"required\", \"any\"], bool]",
          "",
          "[Removed Lines]",
          "655:         tools: Sequence[Union[Dict[str, Any], Type[BaseModel], Callable, BaseTool]],",
          "",
          "[Added Lines]",
          "655:         tools: Sequence[Union[Dict[str, Any], Type, Callable, BaseTool]],",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "703:         \"\"\"Model wrapper that returns outputs formatted to match the given schema.",
          "705:         Args:",
          "714:                 or \"json_mode\". If \"function_calling\" then the schema will be converted",
          "715:                 to an OpenAI function and the returned model will make use of the",
          "716:                 function-calling API. If \"json_mode\" then OpenAI's JSON mode will be",
          "717:                 used. Note that if using \"json_mode\" then you must include instructions",
          "718:                 for formatting the output into the desired schema into the model call.",
          "720:                 an error occurs during model output parsing it will be raised. If True",
          "721:                 then both the raw model response (a BaseMessage) and the parsed model",
          "722:                 response will be returned. If an error occurs during output parsing it",
          "",
          "[Removed Lines]",
          "706:             schema: The output schema as a dict or a Pydantic class. If a Pydantic class",
          "707:                 then the model output will be an object of that class. If a dict then",
          "708:                 the model output will be a dict. With a Pydantic class the returned",
          "709:                 attributes will be validated, whereas with a dict they will not be. If",
          "710:                 `method` is \"function_calling\" and `schema` is a dict, then the dict",
          "711:                 must match the OpenAI function-calling spec or be a valid JSON schema",
          "712:                 with top level 'title' and 'description' keys specified.",
          "713:             method: The method for steering model generation, either \"function_calling\"",
          "719:             include_raw: If False then only the parsed structured output is returned. If",
          "",
          "[Added Lines]",
          "706:             schema:",
          "707:                 The output schema. Can be passed in as:",
          "708:                     - an OpenAI function/tool schema,",
          "709:                     - a JSON Schema,",
          "710:                     - a TypedDict class,",
          "711:                     - or a Pydantic class.",
          "712:                 If ``schema`` is a Pydantic class then the model output will be a",
          "713:                 Pydantic instance of that class, and the model-generated fields will be",
          "714:                 validated by the Pydantic class. Otherwise the model output will be a",
          "715:                 dict and will not be validated. See :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`",
          "716:                 for more on how to properly specify types and descriptions of",
          "717:                 schema fields when specifying a Pydantic or TypedDict class.",
          "718:             method:",
          "719:                 The method for steering model generation, either \"function_calling\"",
          "725:             include_raw:",
          "726:                 If False then only the parsed structured output is returned. If",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "724:                 with keys \"raw\", \"parsed\", and \"parsing_error\".",
          "726:         Returns:",
          "743:             .. code-block:: python",
          "745:                 from langchain_openai import AzureChatOpenAI",
          "749:                 class AnswerWithJustification(BaseModel):",
          "750:                     '''An answer to the user question along with justification for the answer.'''",
          "752:                     answer: str",
          "757:                 structured_llm = llm.with_structured_output(AnswerWithJustification)",
          "759:                 structured_llm.invoke(",
          "",
          "[Removed Lines]",
          "727:             A Runnable that takes any ChatModel input and returns as output:",
          "729:                 If include_raw is True then a dict with keys:",
          "730:                     raw: BaseMessage",
          "731:                     parsed: Optional[_DictOrPydantic]",
          "732:                     parsing_error: Optional[BaseException]",
          "734:                 If include_raw is False then just _DictOrPydantic is returned,",
          "735:                 where _DictOrPydantic depends on the schema:",
          "737:                 If schema is a Pydantic class then _DictOrPydantic is the Pydantic",
          "738:                     class.",
          "740:                 If schema is a dict then _DictOrPydantic is a dict.",
          "742:         Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=False):",
          "746:                 from langchain_core.pydantic_v1 import BaseModel",
          "753:                     justification: str",
          "756:                 llm = AzureChatOpenAI(azure_deployment=\"gpt-35-turbo\", temperature=0)",
          "",
          "[Added Lines]",
          "734:             A Runnable that takes same inputs as a :class:`langchain_core.language_models.chat.BaseChatModel`.",
          "736:             If ``include_raw`` is False and ``schema`` is a Pydantic class, Runnable outputs",
          "737:             an instance of ``schema`` (i.e., a Pydantic object).",
          "739:             Otherwise, if ``include_raw`` is False then Runnable outputs a dict.",
          "741:             If ``include_raw`` is True, then Runnable outputs a dict with keys:",
          "742:                 - ``\"raw\"``: BaseMessage",
          "743:                 - ``\"parsed\"``: None if there was a parsing error, otherwise the type depends on the ``schema`` as described above.",
          "744:                 - ``\"parsing_error\"``: Optional[BaseException]",
          "746:         Example: schema=Pydantic class, method=\"function_calling\", include_raw=False:",
          "749:                 from typing import Optional",
          "752:                 from langchain_core.pydantic_v1 import BaseModel, Field",
          "759:                     # If we provide default values and/or descriptions for fields, these will be passed",
          "760:                     # to the model. This is an important part of improving a model's ability to",
          "761:                     # correctly return structured outputs.",
          "762:                     justification: Optional[str] = Field(",
          "763:                         default=None, description=\"A justification for the answer.\"",
          "764:                     )",
          "767:                 llm = AzureChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "765:                 #     justification='Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.'",
          "766:                 # )",
          "769:             .. code-block:: python",
          "771:                 from langchain_openai import AzureChatOpenAI",
          "",
          "[Removed Lines]",
          "768:         Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=True):",
          "",
          "[Added Lines]",
          "779:         Example: schema=Pydantic class, method=\"function_calling\", include_raw=True:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "779:                     justification: str",
          "783:                 structured_llm = llm.with_structured_output(",
          "784:                     AnswerWithJustification, include_raw=True",
          "785:                 )",
          "",
          "[Removed Lines]",
          "782:                 llm = AzureChatOpenAI(azure_deployment=\"gpt-35-turbo\", temperature=0)",
          "",
          "[Added Lines]",
          "793:                 llm = AzureChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "793:                 #     'parsing_error': None",
          "794:                 # }",
          "797:             .. code-block:: python",
          "799:                 from langchain_openai import AzureChatOpenAI",
          "805:                     '''An answer to the user question along with justification for the answer.'''",
          "807:                     answer: str",
          "815:                 structured_llm.invoke(",
          "816:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "",
          "[Removed Lines]",
          "796:         Example: Function-calling, dict schema (method=\"function_calling\", include_raw=False):",
          "800:                 from langchain_core.pydantic_v1 import BaseModel",
          "801:                 from langchain_core.utils.function_calling import convert_to_openai_tool",
          "804:                 class AnswerWithJustification(BaseModel):",
          "808:                     justification: str",
          "811:                 dict_schema = convert_to_openai_tool(AnswerWithJustification)",
          "812:                 llm = AzureChatOpenAI(azure_deployment=\"gpt-35-turbo\", temperature=0)",
          "813:                 structured_llm = llm.with_structured_output(dict_schema)",
          "",
          "[Added Lines]",
          "807:         Example: schema=TypedDict class, method=\"function_calling\", include_raw=False:",
          "810:                 # IMPORTANT: If you are using Python <=3.8, you need to import Annotated",
          "811:                 # from typing_extensions, not from typing.",
          "812:                 from typing_extensions import Annotated, TypedDict",
          "817:                 class AnswerWithJustification(TypedDict):",
          "821:                     justification: Annotated[",
          "822:                         Optional[str], None, \"A justification for the answer.\"",
          "823:                     ]",
          "826:                 llm = AzureChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)",
          "827:                 structured_llm = llm.with_structured_output(AnswerWithJustification)",
          "829:                 structured_llm.invoke(",
          "830:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "831:                 )",
          "832:                 # -> {",
          "833:                 #     'answer': 'They weigh the same',",
          "834:                 #     'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume and density of the two substances differ.'",
          "835:                 # }",
          "837:         Example: schema=OpenAI function schema, method=\"function_calling\", include_raw=False:",
          "838:             .. code-block:: python",
          "840:                 from langchain_openai import AzureChatOpenAI",
          "842:                 oai_schema = {",
          "843:                     'name': 'AnswerWithJustification',",
          "844:                     'description': 'An answer to the user question along with justification for the answer.',",
          "845:                     'parameters': {",
          "846:                         'type': 'object',",
          "847:                         'properties': {",
          "848:                             'answer': {'type': 'string'},",
          "849:                             'justification': {'description': 'A justification for the answer.', 'type': 'string'}",
          "850:                         },",
          "851:                        'required': ['answer']",
          "852:                    }",
          "853:                }",
          "855:                 llm = AzureChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)",
          "856:                 structured_llm = llm.with_structured_output(oai_schema)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "820:                 #     'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume and density of the two substances differ.'",
          "821:                 # }",
          "824:             .. code-block::",
          "826:                 from langchain_openai import AzureChatOpenAI",
          "",
          "[Removed Lines]",
          "823:         Example: JSON mode, Pydantic schema (method=\"json_mode\", include_raw=True):",
          "",
          "[Added Lines]",
          "866:         Example: schema=Pydantic class, method=\"json_mode\", include_raw=True:",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "830:                     answer: str",
          "831:                     justification: str",
          "834:                 structured_llm = llm.with_structured_output(",
          "835:                     AnswerWithJustification,",
          "836:                     method=\"json_mode\",",
          "",
          "[Removed Lines]",
          "833:                 llm = AzureChatOpenAI(azure_deployment=\"gpt-35-turbo\", temperature=0)",
          "",
          "[Added Lines]",
          "876:                 llm = AzureChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "848:                 #     'parsing_error': None",
          "849:                 # }",
          "852:             .. code-block::",
          "854:                 structured_llm = llm.with_structured_output(method=\"json_mode\", include_raw=True)",
          "",
          "[Removed Lines]",
          "851:         Example: JSON mode, no schema (schema=None, method=\"json_mode\", include_raw=True):",
          "",
          "[Added Lines]",
          "894:         Example: schema=None, method=\"json_mode\", include_raw=True:",
          "",
          "---------------"
        ],
        "libs/partners/openai/langchain_openai/chat_models/base.py||libs/partners/openai/langchain_openai/chat_models/base.py": [
          "File: libs/partners/openai/langchain_openai/chat_models/base.py -> libs/partners/openai/langchain_openai/chat_models/base.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "287: _BM = TypeVar(\"_BM\", bound=BaseModel)",
          "289: _DictOrPydantic = Union[Dict, _BM]",
          "",
          "[Removed Lines]",
          "288: _DictOrPydanticClass = Union[Dict[str, Any], Type[_BM]]",
          "",
          "[Added Lines]",
          "288: _DictOrPydanticClass = Union[Dict[str, Any], Type[_BM], Type]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "948:     def bind_tools(",
          "949:         self,",
          "952:         tool_choice: Optional[",
          "953:             Union[dict, str, Literal[\"auto\", \"none\", \"required\", \"any\"], bool]",
          "",
          "[Removed Lines]",
          "950:         tools: Sequence[Union[Dict[str, Any], Type[BaseModel], Callable, BaseTool]],",
          "",
          "[Added Lines]",
          "950:         tools: Sequence[Union[Dict[str, Any], Type, Callable, BaseTool]],",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "961:         Args:",
          "962:             tools: A list of tool definitions to bind to this chat model.",
          "966:             tool_choice: Which tool to require the model to call.",
          "967:                 Options are:",
          "981:         formatted_tools = [convert_to_openai_tool(tool) for tool in tools]",
          "982:         if tool_choice:",
          "",
          "[Removed Lines]",
          "963:                 Can be  a dictionary, pydantic model, callable, or BaseTool. Pydantic",
          "964:                 models, callables, and BaseTools will be automatically converted to",
          "965:                 their schema dictionary representation.",
          "968:                 name of the tool (str): calls corresponding tool;",
          "969:                 \"auto\": automatically selects a tool (including no tool);",
          "970:                 \"none\": does not call a tool;",
          "971:                 \"any\" or \"required\": force at least one tool to be called;",
          "972:                 True: forces tool call (requires `tools` be length 1);",
          "973:                 False: no effect;",
          "975:                 or a dict of the form:",
          "976:                 {\"type\": \"function\", \"function\": {\"name\": <<tool_name>>}}.",
          "978:                 :class:`~langchain.runnable.Runnable` constructor.",
          "979:         \"\"\"",
          "",
          "[Added Lines]",
          "963:                 Supports any tool definition handled by",
          "964:                 :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`.",
          "967:                     - str of the form ``\"<<tool_name>>\"``: calls <<tool_name>> tool.",
          "968:                     - ``\"auto\"``: automatically selects a tool (including no tool).",
          "969:                     - ``\"none\"``: does not call a tool.",
          "970:                     - ``\"any\"`` or ``\"required\"`` or ``True``: force at least one tool to be called.",
          "971:                     - dict of the form ``{\"type\": \"function\", \"function\": {\"name\": <<tool_name>>}}``: calls <<tool_name>> tool.",
          "972:                     - ``False`` or ``None``: no effect, default OpenAI behavior.",
          "973:             kwargs: Any additional parameters are passed directly to",
          "974:                 ``self.bind(**kwargs)``.",
          "975:         \"\"\"  # noqa: E501",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1046:         \"\"\"Model wrapper that returns outputs formatted to match the given schema.",
          "1048:         Args:",
          "1057:                 or \"json_mode\". If \"function_calling\" then the schema will be converted",
          "1058:                 to an OpenAI function and the returned model will make use of the",
          "1059:                 function-calling API. If \"json_mode\" then OpenAI's JSON mode will be",
          "1060:                 used. Note that if using \"json_mode\" then you must include instructions",
          "1061:                 for formatting the output into the desired schema into the model call.",
          "1063:                 an error occurs during model output parsing it will be raised. If True",
          "1064:                 then both the raw model response (a BaseMessage) and the parsed model",
          "1065:                 response will be returned. If an error occurs during output parsing it",
          "",
          "[Removed Lines]",
          "1049:             schema: The output schema as a dict or a Pydantic class. If a Pydantic class",
          "1050:                 then the model output will be an object of that class. If a dict then",
          "1051:                 the model output will be a dict. With a Pydantic class the returned",
          "1052:                 attributes will be validated, whereas with a dict they will not be. If",
          "1053:                 `method` is \"function_calling\" and `schema` is a dict, then the dict",
          "1054:                 must match the OpenAI function-calling spec or be a valid JSON schema",
          "1055:                 with top level 'title' and 'description' keys specified.",
          "1056:             method: The method for steering model generation, either \"function_calling\"",
          "1062:             include_raw: If False then only the parsed structured output is returned. If",
          "",
          "[Added Lines]",
          "1045:             schema:",
          "1046:                 The output schema. Can be passed in as:",
          "1047:                     - an OpenAI function/tool schema,",
          "1048:                     - a JSON Schema,",
          "1049:                     - a TypedDict class (support added in 0.1.20),",
          "1050:                     - or a Pydantic class.",
          "1051:                 If ``schema`` is a Pydantic class then the model output will be a",
          "1052:                 Pydantic instance of that class, and the model-generated fields will be",
          "1053:                 validated by the Pydantic class. Otherwise the model output will be a",
          "1054:                 dict and will not be validated. See :meth:`langchain_core.utils.function_calling.convert_to_openai_tool`",
          "1055:                 for more on how to properly specify types and descriptions of",
          "1056:                 schema fields when specifying a Pydantic or TypedDict class.",
          "1058:                 .. versionchanged:: 0.1.20",
          "1060:                         Added support for TypedDict class.",
          "1062:             method:",
          "1063:                 The method for steering model generation, either \"function_calling\"",
          "1069:             include_raw:",
          "1070:                 If False then only the parsed structured output is returned. If",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1067:                 with keys \"raw\", \"parsed\", and \"parsing_error\".",
          "1069:         Returns:",
          "1086:             .. code-block:: python",
          "1088:                 from langchain_openai import ChatOpenAI",
          "1092:                 class AnswerWithJustification(BaseModel):",
          "1093:                     '''An answer to the user question along with justification for the answer.'''",
          "1095:                     answer: str",
          "1099:                 llm = ChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)",
          "",
          "[Removed Lines]",
          "1070:             A Runnable that takes any ChatModel input and returns as output:",
          "1072:                 If include_raw is True then a dict with keys:",
          "1073:                     raw: BaseMessage",
          "1074:                     parsed: Optional[_DictOrPydantic]",
          "1075:                     parsing_error: Optional[BaseException]",
          "1077:                 If include_raw is False then just _DictOrPydantic is returned,",
          "1078:                 where _DictOrPydantic depends on the schema:",
          "1080:                 If schema is a Pydantic class then _DictOrPydantic is the Pydantic",
          "1081:                     class.",
          "1083:                 If schema is a dict then _DictOrPydantic is a dict.",
          "1085:         Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=False):",
          "1089:                 from langchain_core.pydantic_v1 import BaseModel",
          "1096:                     justification: str",
          "",
          "[Added Lines]",
          "1078:             A Runnable that takes same inputs as a :class:`langchain_core.language_models.chat.BaseChatModel`.",
          "1080:             If ``include_raw`` is False and ``schema`` is a Pydantic class, Runnable outputs",
          "1081:             an instance of ``schema`` (i.e., a Pydantic object).",
          "1083:             Otherwise, if ``include_raw`` is False then Runnable outputs a dict.",
          "1085:             If ``include_raw`` is True, then Runnable outputs a dict with keys:",
          "1086:                 - ``\"raw\"``: BaseMessage",
          "1087:                 - ``\"parsed\"``: None if there was a parsing error, otherwise the type depends on the ``schema`` as described above.",
          "1088:                 - ``\"parsing_error\"``: Optional[BaseException]",
          "1090:         Example: schema=Pydantic class, method=\"function_calling\", include_raw=False:",
          "1093:                 from typing import Optional",
          "1096:                 from langchain_core.pydantic_v1 import BaseModel, Field",
          "1103:                     # If we provide default values and/or descriptions for fields, these will be passed",
          "1104:                     # to the model. This is an important part of improving a model's ability to",
          "1105:                     # correctly return structured outputs.",
          "1106:                     justification: Optional[str] = Field(",
          "1107:                         default=None, description=\"A justification for the answer.\"",
          "1108:                     )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1108:                 #     justification='Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume or density of the objects may differ.'",
          "1109:                 # )",
          "1112:             .. code-block:: python",
          "1114:                 from langchain_openai import ChatOpenAI",
          "",
          "[Removed Lines]",
          "1111:         Example: Function-calling, Pydantic schema (method=\"function_calling\", include_raw=True):",
          "",
          "[Added Lines]",
          "1123:         Example: schema=Pydantic class, method=\"function_calling\", include_raw=True:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1136:                 #     'parsing_error': None",
          "1137:                 # }",
          "1140:             .. code-block:: python",
          "1142:                 from langchain_openai import ChatOpenAI",
          "1148:                     '''An answer to the user question along with justification for the answer.'''",
          "1150:                     answer: str",
          "1155:                 llm = ChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)",
          "1158:                 structured_llm.invoke(",
          "1159:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "",
          "[Removed Lines]",
          "1139:         Example: Function-calling, dict schema (method=\"function_calling\", include_raw=False):",
          "1143:                 from langchain_core.pydantic_v1 import BaseModel",
          "1144:                 from langchain_core.utils.function_calling import convert_to_openai_tool",
          "1147:                 class AnswerWithJustification(BaseModel):",
          "1151:                     justification: str",
          "1154:                 dict_schema = convert_to_openai_tool(AnswerWithJustification)",
          "1156:                 structured_llm = llm.with_structured_output(dict_schema)",
          "",
          "[Added Lines]",
          "1151:         Example: schema=TypedDict class, method=\"function_calling\", include_raw=False:",
          "1154:                 # IMPORTANT: If you are using Python <=3.8, you need to import Annotated",
          "1155:                 # from typing_extensions, not from typing.",
          "1156:                 from typing_extensions import Annotated, TypedDict",
          "1161:                 class AnswerWithJustification(TypedDict):",
          "1165:                     justification: Annotated[",
          "1166:                         Optional[str], None, \"A justification for the answer.\"",
          "1167:                     ]",
          "1170:                 llm = ChatOpenAI(model=\"gpt-3.5-turbo-0125\", temperature=0)",
          "1171:                 structured_llm = llm.with_structured_output(AnswerWithJustification)",
          "1173:                 structured_llm.invoke(",
          "1174:                     \"What weighs more a pound of bricks or a pound of feathers\"",
          "1175:                 )",
          "1176:                 # -> {",
          "1177:                 #     'answer': 'They weigh the same',",
          "1178:                 #     'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume and density of the two substances differ.'",
          "1179:                 # }",
          "1181:         Example: schema=OpenAI function schema, method=\"function_calling\", include_raw=False:",
          "1182:             .. code-block:: python",
          "1184:                 from langchain_openai import ChatOpenAI",
          "1186:                 oai_schema = {",
          "1187:                     'name': 'AnswerWithJustification',",
          "1188:                     'description': 'An answer to the user question along with justification for the answer.',",
          "1189:                     'parameters': {",
          "1190:                         'type': 'object',",
          "1191:                         'properties': {",
          "1192:                             'answer': {'type': 'string'},",
          "1193:                             'justification': {'description': 'A justification for the answer.', 'type': 'string'}",
          "1194:                         },",
          "1195:                        'required': ['answer']",
          "1196:                    }",
          "1197:                }",
          "1200:                 structured_llm = llm.with_structured_output(oai_schema)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1163:                 #     'justification': 'Both a pound of bricks and a pound of feathers weigh one pound. The weight is the same, but the volume and density of the two substances differ.'",
          "1164:                 # }",
          "1167:             .. code-block::",
          "1169:                 from langchain_openai import ChatOpenAI",
          "",
          "[Removed Lines]",
          "1166:         Example: JSON mode, Pydantic schema (method=\"json_mode\", include_raw=True):",
          "",
          "[Added Lines]",
          "1210:         Example: schema=Pydantic class, method=\"json_mode\", include_raw=True:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1191:                 #     'parsing_error': None",
          "1192:                 # }",
          "1195:             .. code-block::",
          "1197:                 structured_llm = llm.with_structured_output(method=\"json_mode\", include_raw=True)",
          "",
          "[Removed Lines]",
          "1194:         Example: JSON mode, no schema (schema=None, method=\"json_mode\", include_raw=True):",
          "",
          "[Added Lines]",
          "1238:         Example: schema=None, method=\"json_mode\", include_raw=True:",
          "",
          "---------------"
        ]
      }
    }
  ]
}