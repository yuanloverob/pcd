{
  "cve_id": "CVE-2024-9701",
  "cve_desc": "A Remote Code Execution (RCE) vulnerability has been identified in the Kedro ShelveStore class (version 0.19.8). This vulnerability allows an attacker to execute arbitrary Python code via deserialization of malicious payloads, potentially leading to a full system compromise. The ShelveStore class uses Python's shelve module to manage session data, which relies on pickle for serialization. Crafting a malicious payload and storing it in the shelve file can lead to RCE when the payload is deserialized.",
  "repo": "kedro-org/kedro",
  "patch_hash": "66e5e074b2789469550370f370c8b486f638d975",
  "patch_info": {
    "commit_hash": "66e5e074b2789469550370f370c8b486f638d975",
    "repo": "kedro-org/kedro",
    "commit_url": "https://github.com/kedro-org/kedro/commit/66e5e074b2789469550370f370c8b486f638d975",
    "files": [
      "RELEASE.md",
      "docs/source/api/kedro.framework.session.shelvestore.ShelveStore.rst",
      "kedro/framework/session/shelvestore.py",
      "tests/framework/project/test_settings.py",
      "tests/framework/session/test_session.py",
      "tests/framework/session/test_store.py"
    ],
    "message": "Remove `ShelveStore` (#4148)\n\n* Remove ShelveStore\n\nSigned-off-by: Ankita Katiyar <ankitakatiyar2401@gmail.com>\n\n* Remove ShelveStore\n\nSigned-off-by: Ankita Katiyar <ankitakatiyar2401@gmail.com>\n\n---------\n\nSigned-off-by: Ankita Katiyar <ankitakatiyar2401@gmail.com>",
    "before_after_code_files": [
      "kedro/framework/session/shelvestore.py||kedro/framework/session/shelvestore.py",
      "tests/framework/project/test_settings.py||tests/framework/project/test_settings.py",
      "tests/framework/session/test_session.py||tests/framework/session/test_session.py",
      "tests/framework/session/test_store.py||tests/framework/session/test_store.py"
    ]
  },
  "patch_diff": {
    "kedro/framework/session/shelvestore.py||kedro/framework/session/shelvestore.py": [
      "File: kedro/framework/session/shelvestore.py -> kedro/framework/session/shelvestore.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/framework/project/test_settings.py||tests/framework/project/test_settings.py": [
      "File: tests/framework/project/test_settings.py -> tests/framework/project/test_settings.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: from kedro.config import OmegaConfigLoader",
      "8: from kedro.framework.context.context import KedroContext",
      "9: from kedro.framework.project import configure_project, settings, validate_settings",
      "11: from kedro.framework.session.store import BaseSessionStore",
      "12: from kedro.io import DataCatalog",
      "",
      "[Removed Lines]",
      "10: from kedro.framework.session.shelvestore import ShelveStore",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41:                 DISABLE_HOOKS_FOR_PLUGINS = (\"kedro-viz\",)",
      "45:                 SESSION_STORE_ARGS = {{",
      "46:                     \"path\": \"./sessions\"",
      "47:                 }}",
      "",
      "[Removed Lines]",
      "43:                 from kedro.framework.session.shelvestore import ShelveStore",
      "44:                 SESSION_STORE_CLASS = ShelveStore",
      "",
      "[Added Lines]",
      "42:                 from kedro.framework.session.store import BaseSessionStore",
      "43:                 SESSION_STORE_CLASS = BaseSessionStore",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "103:     configure_project(mock_package_name_with_settings_file)",
      "104:     assert len(settings.HOOKS) == 1 and isinstance(settings.HOOKS[0], ProjectHooks)",
      "105:     assert settings.DISABLE_HOOKS_FOR_PLUGINS.to_list() == [\"kedro-viz\"]",
      "107:     assert settings.SESSION_STORE_ARGS == {\"path\": \"./sessions\"}",
      "108:     assert settings.CONTEXT_CLASS is MyContext",
      "109:     assert settings.CONF_SOURCE == \"test_conf\"",
      "",
      "[Removed Lines]",
      "106:     assert settings.SESSION_STORE_CLASS is ShelveStore",
      "",
      "[Added Lines]",
      "105:     assert settings.SESSION_STORE_CLASS is BaseSessionStore",
      "",
      "---------------"
    ],
    "tests/framework/session/test_session.py||tests/framework/session/test_session.py": [
      "File: tests/framework/session/test_session.py -> tests/framework/session/test_session.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "22:     ValidationError,",
      "23:     Validator,",
      "24:     _HasSharedParentClassValidator,",
      "26:     _ProjectSettings,",
      "27: )",
      "28: from kedro.framework.session import KedroSession",
      "29: from kedro.framework.session.session import KedroSessionError",
      "31: from kedro.framework.session.store import BaseSessionStore",
      "32: from kedro.utils import _has_rich_handler",
      "",
      "[Removed Lines]",
      "25:     _IsSubclassValidator,",
      "30: from kedro.framework.session.shelvestore import ShelveStore",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "235:     )",
      "253: @pytest.fixture",
      "254: def fake_session_id(mocker):",
      "255:     session_id = \"fake_session_id\"",
      "",
      "[Removed Lines]",
      "238: @pytest.fixture",
      "239: def mock_settings_shelve_session_store(mocker, fake_project):",
      "240:     shelve_location = fake_project / \"nested\" / \"sessions\"",
      "242:     class MockSettings(_ProjectSettings):",
      "243:         _SESSION_STORE_CLASS = _IsSubclassValidator(",
      "244:             \"SESSION_STORE_CLASS\", default=lambda *_: ShelveStore",
      "245:         )",
      "246:         _SESSION_STORE_ARGS = Validator(",
      "247:             \"SESSION_STORE_ARGS\", default={\"path\": shelve_location.as_posix()}",
      "248:         )",
      "250:     return _mock_imported_settings_paths(mocker, MockSettings())",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "502:         ]",
      "503:         assert actual_log_messages == expected_log_messages",
      "525:     def test_wrong_store_type(self, mock_settings_file_bad_session_store_class):",
      "526:         pattern = (",
      "527:             \"Invalid value 'tests.framework.session.test_session.BadStore' received \"",
      "",
      "[Removed Lines]",
      "505:     @pytest.mark.usefixtures(\"mock_settings_shelve_session_store\")",
      "506:     def test_shelve_store(self, fake_project, fake_session_id, caplog, mocker):",
      "507:         mocker.patch(\"pathlib.Path.is_file\", return_value=True)",
      "508:         shelve_location = fake_project / \"nested\" / \"sessions\"",
      "509:         other = KedroSession.create(fake_project)",
      "510:         assert other._store.__class__ is ShelveStore",
      "511:         assert other._store._path == shelve_location.as_posix()",
      "512:         assert other._store._location == shelve_location / fake_session_id / \"store\"",
      "513:         assert other._store._session_id == fake_session_id",
      "514:         assert not shelve_location.is_dir()",
      "516:         other.close()  # session data persisted",
      "517:         assert shelve_location.is_dir()",
      "518:         actual_log_messages = [",
      "519:             rec.getMessage()",
      "520:             for rec in caplog.records",
      "521:             if rec.name == STORE_LOGGER_NAME and rec.levelno == logging.DEBUG",
      "522:         ]",
      "523:         assert not actual_log_messages",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "tests/framework/session/test_store.py||tests/framework/session/test_store.py": [
      "File: tests/framework/session/test_store.py -> tests/framework/session/test_store.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: import logging",
      "7: from kedro.framework.session.store import BaseSessionStore",
      "9: FAKE_SESSION_ID = \"fake_session_id\"",
      "",
      "[Removed Lines]",
      "2: from pathlib import Path",
      "4: import pytest",
      "6: from kedro.framework.session.shelvestore import ShelveStore",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:             if rec.name == STORE_LOGGER_NAME and rec.levelno == logging.DEBUG",
      "49:         ]",
      "50:         assert actual_debug_messages == expected_debug_messages",
      "",
      "[Removed Lines]",
      "53: @pytest.fixture",
      "54: def shelve_path(tmp_path):",
      "55:     return Path(tmp_path / \"path\" / \"to\" / \"sessions\")",
      "58: class TestShelveStore:",
      "59:     def test_empty(self, shelve_path):",
      "60:         shelve = ShelveStore(str(shelve_path), FAKE_SESSION_ID)",
      "61:         assert shelve == {}",
      "62:         assert shelve._location == shelve_path / FAKE_SESSION_ID / \"store\"",
      "63:         assert not shelve_path.exists()",
      "65:     def test_save(self, shelve_path):",
      "66:         assert not shelve_path.exists()",
      "68:         shelve = ShelveStore(str(shelve_path), FAKE_SESSION_ID)",
      "69:         shelve[\"shelve_path\"] = shelve_path",
      "70:         shelve.save()",
      "72:         assert (shelve_path / FAKE_SESSION_ID).is_dir()",
      "74:         reloaded = ShelveStore(str(shelve_path), FAKE_SESSION_ID)",
      "75:         assert reloaded == {\"shelve_path\": shelve_path}",
      "77:     def test_update(self, shelve_path):",
      "78:         shelve = ShelveStore(str(shelve_path), FAKE_SESSION_ID)",
      "79:         shelve[\"shelve_path\"] = shelve_path",
      "80:         shelve.save()",
      "82:         shelve.update(new_key=\"new_value\")",
      "83:         del shelve[\"shelve_path\"]",
      "84:         reloaded = ShelveStore(str(shelve_path), FAKE_SESSION_ID)",
      "85:         assert reloaded == {\"shelve_path\": shelve_path}  # changes not saved yet",
      "87:         shelve.save()",
      "88:         reloaded = ShelveStore(str(shelve_path), FAKE_SESSION_ID)",
      "89:         assert reloaded == {\"new_key\": \"new_value\"}",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "57854f22209ed8912e481ad742c79c445f56dc99",
      "candidate_info": {
        "commit_hash": "57854f22209ed8912e481ad742c79c445f56dc99",
        "repo": "kedro-org/kedro",
        "commit_url": "https://github.com/kedro-org/kedro/commit/57854f22209ed8912e481ad742c79c445f56dc99",
        "files": [
          "RELEASE.md",
          "kedro/framework/cli/catalog.py",
          "kedro/framework/session/session.py",
          "kedro/ipython/__init__.py",
          "tests/framework/cli/pipeline/test_pipeline.py",
          "tests/framework/session/conftest.py",
          "tests/framework/session/test_session.py",
          "tests/framework/session/test_session_extension_hooks.py",
          "tests/framework/session/test_session_hook_manager.py",
          "tests/ipython/test_ipython.py"
        ],
        "message": "Drop `package_name` argument in KedroSession.create (#3372)\n\n* remove package_name from KedroSession.create\n\nSigned-off-by: SajidAlamQB <90610031+SajidAlamQB@users.noreply.github.com>\n\n* fix tests\n\nSigned-off-by: SajidAlamQB <90610031+SajidAlamQB@users.noreply.github.com>\n\n* Update RELEASE.md\n\nSigned-off-by: SajidAlamQB <90610031+SajidAlamQB@users.noreply.github.com>\n\n* undo old release note change\n\nSigned-off-by: SajidAlamQB <90610031+SajidAlamQB@users.noreply.github.com>\n\n* update tests for package_name no longer existing\n\nSigned-off-by: SajidAlamQB <90610031+SajidAlamQB@users.noreply.github.com>\n\n* lint\n\nSigned-off-by: SajidAlamQB <90610031+SajidAlamQB@users.noreply.github.com>\n\n---------\n\nSigned-off-by: SajidAlamQB <90610031+SajidAlamQB@users.noreply.github.com>",
        "before_after_code_files": [
          "kedro/framework/cli/catalog.py||kedro/framework/cli/catalog.py",
          "kedro/framework/session/session.py||kedro/framework/session/session.py",
          "kedro/ipython/__init__.py||kedro/ipython/__init__.py",
          "tests/framework/cli/pipeline/test_pipeline.py||tests/framework/cli/pipeline/test_pipeline.py",
          "tests/framework/session/conftest.py||tests/framework/session/conftest.py",
          "tests/framework/session/test_session.py||tests/framework/session/test_session.py",
          "tests/framework/session/test_session_extension_hooks.py||tests/framework/session/test_session_extension_hooks.py",
          "tests/framework/session/test_session_hook_manager.py||tests/framework/session/test_session_hook_manager.py",
          "tests/ipython/test_ipython.py||tests/ipython/test_ipython.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/framework/session/test_session.py||tests/framework/session/test_session.py"
          ],
          "candidate": [
            "tests/framework/session/test_session.py||tests/framework/session/test_session.py"
          ]
        }
      },
      "candidate_diff": {
        "kedro/framework/cli/catalog.py||kedro/framework/cli/catalog.py": [
          "File: kedro/framework/cli/catalog.py -> kedro/framework/cli/catalog.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: def _create_session(package_name: str, **kwargs):",
          "17:     kwargs.setdefault(\"save_on_close\", False)",
          "21: # noqa: missing-function-docstring",
          "",
          "[Removed Lines]",
          "18:     return KedroSession.create(package_name, **kwargs)",
          "",
          "[Added Lines]",
          "18:     return KedroSession.create(**kwargs)",
          "",
          "---------------"
        ],
        "kedro/framework/session/session.py||kedro/framework/session/session.py": [
          "File: kedro/framework/session/session.py -> kedro/framework/session/session.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     @classmethod",
          "125:     def create(  # noqa: PLR0913",
          "126:         cls,",
          "128:         project_path: Path | str | None = None,",
          "129:         save_on_close: bool = True,",
          "130:         env: str = None,",
          "",
          "[Removed Lines]",
          "127:         package_name: str = None,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:         \"\"\"Create a new instance of ``KedroSession`` with the session data.",
          "136:         Args:",
          "139:             project_path: Path to the project root directory. Default is",
          "140:                 current working directory Path.cwd().",
          "141:             save_on_close: Whether or not to save the session when it's closed.",
          "",
          "[Removed Lines]",
          "137:             package_name: Package name for the Kedro project the session is",
          "138:                 created for. The package_name argument will be removed in Kedro `0.19.0`.",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152:         validate_settings()",
          "154:         session = cls(",
          "156:             project_path=project_path,",
          "157:             session_id=generate_timestamp(),",
          "158:             save_on_close=save_on_close,",
          "",
          "[Removed Lines]",
          "155:             package_name=package_name,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "162:         # have to explicitly type session_data otherwise mypy will complain",
          "163:         # possibly related to this: https://github.com/python/mypy/issues/1430",
          "164:         session_data: dict[str, Any] = {",
          "166:             \"project_path\": session._project_path,",
          "167:             \"session_id\": session.session_id,",
          "168:         }",
          "",
          "[Removed Lines]",
          "165:             \"package_name\": session._package_name,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kedro/ipython/__init__.py||kedro/ipython/__init__.py": [
          "File: kedro/ipython/__init__.py -> kedro/ipython/__init__.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     configure_project(metadata.package_name)",
          "97:     session = KedroSession.create(",
          "99:         project_path,",
          "100:         env=env,",
          "101:         extra_params=extra_params,",
          "",
          "[Removed Lines]",
          "98:         metadata.package_name,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tests/framework/cli/pipeline/test_pipeline.py||tests/framework/cli/pipeline/test_pipeline.py": [
          "File: tests/framework/cli/pipeline/test_pipeline.py -> tests/framework/cli/pipeline/test_pipeline.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:         with params_file.open(\"w\") as f:",
          "203:             yaml.dump(params_dict, f)",
          "206:             ctx = session.load_context()",
          "207:         assert isinstance(ctx.catalog._datasets[\"ds_from_pipeline\"], CSVDataset)",
          "208:         assert isinstance(ctx.catalog.load(\"ds_from_pipeline\"), DataFrame)",
          "",
          "[Removed Lines]",
          "205:         with KedroSession.create(PACKAGE_NAME) as session:",
          "",
          "[Added Lines]",
          "205:         with KedroSession.create() as session:",
          "",
          "---------------"
        ],
        "tests/framework/session/conftest.py||tests/framework/session/conftest.py": [
          "File: tests/framework/session/conftest.py -> tests/framework/session/conftest.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "372: @pytest.fixture",
          "373: def mock_session(mock_settings, mock_package_name, tmp_path):",
          "374:     configure_project(mock_package_name)",
          "378:     yield session",
          "379:     session.close()",
          "",
          "[Removed Lines]",
          "375:     session = KedroSession.create(",
          "376:         mock_package_name, tmp_path, extra_params={\"params:key\": \"value\"}",
          "377:     )",
          "",
          "[Added Lines]",
          "375:     session = KedroSession.create(tmp_path, extra_params={\"params:key\": \"value\"})",
          "",
          "---------------"
        ],
        "tests/framework/session/test_session.py||tests/framework/session/test_session.py": [
          "File: tests/framework/session/test_session.py -> tests/framework/session/test_session.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:         fake_project,",
          "299:         mock_context_class,",
          "300:         fake_session_id,",
          "302:         mocker,",
          "303:         env,",
          "304:         extra_params,",
          "",
          "[Removed Lines]",
          "301:         mock_package_name,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:     ):",
          "307:         mock_click_ctx = mocker.patch(\"click.get_current_context\").return_value",
          "308:         mocker.patch(\"sys.argv\", [\"kedro\", \"run\", \"--params=x\"])",
          "313:         expected_cli_data = {",
          "314:             \"args\": mock_click_ctx.args,",
          "",
          "[Removed Lines]",
          "309:         session = KedroSession.create(",
          "310:             mock_package_name, fake_project, env=env, extra_params=extra_params",
          "311:         )",
          "",
          "[Added Lines]",
          "308:         session = KedroSession.create(fake_project, env=env, extra_params=extra_params)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "319:         expected_store = {",
          "320:             \"project_path\": fake_project,",
          "321:             \"session_id\": fake_session_id,",
          "323:             \"cli\": expected_cli_data,",
          "324:         }",
          "325:         if env:",
          "",
          "[Removed Lines]",
          "322:             \"package_name\": mock_package_name,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "334:         assert isinstance(session._get_config_loader(), OmegaConfigLoader)",
          "336:     @pytest.mark.usefixtures(\"mock_settings\")",
          "340:                 pass",
          "342:     @pytest.mark.usefixtures(\"mock_settings_context_class\")",
          "",
          "[Removed Lines]",
          "337:     def test_create_multiple_sessions(self, fake_project, mock_package_name):",
          "338:         with KedroSession.create(mock_package_name, fake_project):",
          "339:             with KedroSession.create(mock_package_name, fake_project):",
          "",
          "[Added Lines]",
          "333:     def test_create_multiple_sessions(self, fake_project):",
          "334:         with KedroSession.create(fake_project):",
          "335:             with KedroSession.create(fake_project):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "345:         fake_project,",
          "346:         mock_context_class,",
          "347:         fake_session_id,",
          "349:         mocker,",
          "350:         fake_username,",
          "351:     ):",
          "352:         mock_click_ctx = mocker.patch(\"click.get_current_context\").return_value",
          "353:         mocker.patch(\"sys.argv\", [\"kedro\", \"run\", \"--params=x\"])",
          "356:         expected_cli_data = {",
          "357:             \"args\": mock_click_ctx.args,",
          "",
          "[Removed Lines]",
          "348:         mock_package_name,",
          "354:         session = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "349:         session = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "362:         expected_store = {",
          "363:             \"project_path\": fake_project,",
          "364:             \"session_id\": fake_session_id,",
          "366:             \"cli\": expected_cli_data,",
          "367:         }",
          "",
          "[Removed Lines]",
          "365:             \"package_name\": mock_package_name,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "373:         assert isinstance(session._get_config_loader(), OmegaConfigLoader)",
          "375:     @pytest.mark.usefixtures(\"mock_settings\")",
          "379:         monkeypatch.setenv(\"KEDRO_ENV\", \"my_fake_env\")",
          "382:         result = session.load_context()",
          "384:         assert isinstance(result, KedroContext)",
          "",
          "[Removed Lines]",
          "376:     def test_load_context_with_envvar(",
          "377:         self, fake_project, monkeypatch, mock_package_name, mocker",
          "378:     ):",
          "381:         session = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "370:     def test_load_context_with_envvar(self, fake_project, monkeypatch, mocker):",
          "373:         session = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "386:         assert result.env == \"my_fake_env\"",
          "388:     @pytest.mark.usefixtures(\"mock_settings\")",
          "392:         monkeypatch.setenv(\"KEDRO_ENV\", \"my_fake_env\")",
          "395:         result = session._get_config_loader()",
          "397:         assert isinstance(result, OmegaConfigLoader)",
          "",
          "[Removed Lines]",
          "389:     def test_load_config_loader_with_envvar(",
          "390:         self, fake_project, monkeypatch, mock_package_name",
          "391:     ):",
          "394:         session = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "381:     def test_load_config_loader_with_envvar(self, fake_project, monkeypatch):",
          "384:         session = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "399:         assert result.env == \"my_fake_env\"",
          "401:     @pytest.mark.usefixtures(\"mock_settings_custom_context_class\")",
          "404:         result = session.load_context()",
          "406:         assert isinstance(result, KedroContext)",
          "407:         assert result.__class__.__name__ == \"MyContext\"",
          "409:     @pytest.mark.usefixtures(\"mock_settings_custom_config_loader_class\")",
          "414:         result = session._get_config_loader()",
          "416:         assert isinstance(result, AbstractConfigLoader)",
          "417:         assert result.__class__.__name__ == \"MyConfigLoader\"",
          "419:     @pytest.mark.usefixtures(\"mock_settings_config_loader_args\")",
          "422:         result = session._get_config_loader()",
          "424:         assert isinstance(result, OmegaConfigLoader)",
          "",
          "[Removed Lines]",
          "402:     def test_load_context_custom_context_class(self, fake_project, mock_package_name):",
          "403:         session = KedroSession.create(mock_package_name, fake_project)",
          "410:     def test_load_config_loader_custom_config_loader_class(",
          "411:         self, fake_project, mock_package_name",
          "412:     ):",
          "413:         session = KedroSession.create(mock_package_name, fake_project)",
          "420:     def test_load_config_loader_args(self, fake_project, mock_package_name, mocker):",
          "421:         session = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "392:     def test_load_context_custom_context_class(self, fake_project):",
          "393:         session = KedroSession.create(fake_project)",
          "400:     def test_load_config_loader_custom_config_loader_class(self, fake_project):",
          "401:         session = KedroSession.create(fake_project)",
          "408:     def test_load_config_loader_args(self, fake_project, mocker):",
          "409:         session = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "435:         assert result[\"spark\"] == [\"spark/*\"]",
          "437:     @pytest.mark.usefixtures(\"mock_settings_config_loader_args\")",
          "442:         result = session._get_config_loader()",
          "444:         assert isinstance(result, OmegaConfigLoader)",
          "",
          "[Removed Lines]",
          "438:     def test_config_loader_args_no_env_overwrites_env(",
          "439:         self, fake_project, mock_package_name, mocker",
          "440:     ):",
          "441:         session = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "426:     def test_config_loader_args_no_env_overwrites_env(self, fake_project, mocker):",
          "427:         session = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "446:         assert result.default_run_env == \"\"",
          "448:     @pytest.mark.usefixtures(\"mock_settings_config_loader_args_env\")",
          "453:         result = session._get_config_loader()",
          "455:         assert isinstance(result, OmegaConfigLoader)",
          "",
          "[Removed Lines]",
          "449:     def test_config_loader_args_overwrite_env(",
          "450:         self, fake_project, mock_package_name, mocker",
          "451:     ):",
          "452:         session = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "435:     def test_config_loader_args_overwrite_env(self, fake_project, mocker):",
          "436:         session = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "468:         with pytest.raises(ValidationError, match=re.escape(pattern)):",
          "469:             assert mock_settings.CONFIG_LOADER_CLASS",
          "474:         caplog.set_level(logging.DEBUG, logger=\"kedro\")",
          "476:         mock_logging = mocker.patch.object(LOGGING, \"configure\")",
          "478:         session.close()",
          "480:         mock_logging.assert_not_called()",
          "482:     @pytest.mark.usefixtures(\"mock_settings_context_class\")",
          "486:         caplog.set_level(logging.DEBUG, logger=\"kedro\")",
          "489:         assert isinstance(session.store, dict)",
          "490:         assert session._store.__class__ is BaseSessionStore",
          "491:         assert session._store._path == (fake_project / \"sessions\").as_posix()",
          "",
          "[Removed Lines]",
          "471:     def test_logging_is_not_reconfigure(",
          "472:         self, fake_project, caplog, mock_package_name, mocker",
          "473:     ):",
          "477:         session = KedroSession.create(mock_package_name, fake_project)",
          "483:     def test_default_store(",
          "484:         self, fake_project, fake_session_id, caplog, mock_package_name",
          "485:     ):",
          "488:         session = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "455:     def test_logging_is_not_reconfigure(self, fake_project, caplog, mocker):",
          "459:         session = KedroSession.create(fake_project)",
          "465:     def test_default_store(self, fake_project, fake_session_id, caplog):",
          "468:         session = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "503:         assert actual_log_messages == expected_log_messages",
          "505:     @pytest.mark.usefixtures(\"mock_settings_shelve_session_store\")",
          "509:         mocker.patch(\"pathlib.Path.is_file\", return_value=True)",
          "510:         shelve_location = fake_project / \"nested\" / \"sessions\"",
          "512:         assert other._store.__class__ is ShelveStore",
          "513:         assert other._store._path == shelve_location.as_posix()",
          "514:         assert other._store._location == shelve_location / fake_session_id / \"store\"",
          "",
          "[Removed Lines]",
          "506:     def test_shelve_store(",
          "507:         self, fake_project, fake_session_id, caplog, mock_package_name, mocker",
          "508:     ):",
          "511:         other = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "486:     def test_shelve_store(self, fake_project, fake_session_id, caplog, mocker):",
          "489:         other = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "538:             assert mock_settings.SESSION_STORE_CLASS",
          "540:     @pytest.mark.usefixtures(\"mock_settings_bad_session_store_args\")",
          "542:         classpath = f\"{BaseSessionStore.__module__}.{BaseSessionStore.__qualname__}\"",
          "543:         pattern = (",
          "544:             f\"Store config must only contain arguments valid for \"",
          "545:             f\"the constructor of '{classpath}'.\"",
          "546:         )",
          "547:         with pytest.raises(ValueError, match=re.escape(pattern)):",
          "550:     def test_store_uncaught_error(",
          "551:         self,",
          "552:         fake_project,",
          "553:         fake_session_id,",
          "554:         mock_settings_uncaught_session_store_exception,",
          "556:     ):",
          "557:         classpath = f\"{BaseSessionStore.__module__}.{BaseSessionStore.__qualname__}\"",
          "558:         pattern = f\"Failed to instantiate session store of type '{classpath}'.\"",
          "559:         with pytest.raises(ValueError, match=re.escape(pattern)):",
          "562:         mock_settings_uncaught_session_store_exception.assert_called_once_with(",
          "563:             path=\"path\", session_id=fake_session_id",
          "",
          "[Removed Lines]",
          "541:     def test_wrong_store_args(self, fake_project, mock_package_name):",
          "548:             KedroSession.create(mock_package_name, fake_project)",
          "555:         mock_package_name,",
          "560:             KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "519:     def test_wrong_store_args(self, fake_project):",
          "526:             KedroSession.create(fake_project)",
          "537:             KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "567:     @pytest.mark.parametrize(\"fake_git_status\", [\"dirty\", \"\"])",
          "568:     @pytest.mark.parametrize(\"fake_commit_hash\", [\"fake_commit_hash\"])",
          "569:     def test_git_describe(",
          "571:     ):",
          "572:         \"\"\"Test that git information is added to the session store\"\"\"",
          "573:         mocker.patch(",
          "",
          "[Removed Lines]",
          "570:         self, fake_project, fake_commit_hash, fake_git_status, mock_package_name, mocker",
          "",
          "[Added Lines]",
          "547:         self, fake_project, fake_commit_hash, fake_git_status, mocker",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "575:             side_effect=[fake_commit_hash.encode(), fake_git_status.encode()],",
          "576:         )",
          "579:         expected_git_info = {",
          "580:             \"commit_sha\": fake_commit_hash,",
          "581:             \"dirty\": bool(fake_git_status),",
          "",
          "[Removed Lines]",
          "578:         session = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "555:         session = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "591:             NotADirectoryError,",
          "592:         ],",
          "593:     )",
          "597:         \"\"\"Test that git information is not added to the session store",
          "598:         if call to git fails",
          "599:         \"\"\"",
          "600:         caplog.set_level(logging.DEBUG, logger=\"kedro\")",
          "602:         mocker.patch(\"subprocess.check_output\", side_effect=exception)",
          "604:         assert \"git\" not in session.store",
          "606:         expected_log_message = f\"Unable to git describe {fake_project}\"",
          "",
          "[Removed Lines]",
          "594:     def test_git_describe_error(",
          "595:         self, fake_project, exception, mock_package_name, mocker, caplog",
          "596:     ):",
          "603:         session = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "571:     def test_git_describe_error(self, fake_project, exception, mocker, caplog):",
          "578:         session = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "611:         ]",
          "612:         assert expected_log_message in actual_log_messages",
          "615:         \"\"\"Test that username information is not added to the session store",
          "616:         if call to getuser() fails",
          "617:         \"\"\"",
          "",
          "[Removed Lines]",
          "614:     def test_get_username_error(self, fake_project, mock_package_name, mocker, caplog):",
          "",
          "[Added Lines]",
          "589:     def test_get_username_error(self, fake_project, mocker, caplog):",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "620:         mocker.patch(\"subprocess.check_output\")",
          "621:         mocker.patch(\"getpass.getuser\", side_effect=FakeException(\"getuser error\"))",
          "623:         assert \"username\" not in session.store",
          "625:         expected_log_messages = [",
          "",
          "[Removed Lines]",
          "622:         session = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "597:         session = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "633:         assert actual_log_messages == expected_log_messages",
          "635:     @pytest.mark.usefixtures(\"mock_settings\")",
          "637:         \"\"\"Test logging the error by the session\"\"\"",
          "638:         # test that the error is not swallowed by the session",
          "642:             raise FakeException",
          "644:         exception = session.store[\"exception\"]",
          "",
          "[Removed Lines]",
          "636:     def test_log_error(self, fake_project, mock_package_name):",
          "639:         with pytest.raises(FakeException), KedroSession.create(",
          "640:             mock_package_name, fake_project",
          "641:         ) as session:",
          "",
          "[Added Lines]",
          "611:     def test_log_error(self, fake_project):",
          "614:         with pytest.raises(FakeException), KedroSession.create(fake_project) as session:",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "656:         fake_session_id,",
          "657:         fake_pipeline_name,",
          "658:         mock_context_class,",
          "660:         mock_runner,",
          "661:         mocker,",
          "662:     ):",
          "",
          "[Removed Lines]",
          "659:         mock_package_name,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "677:         mock_runner.__name__ = \"SequentialRunner\"",
          "678:         mock_pipeline = mock_pipelines.__getitem__.return_value.filter.return_value",
          "681:             session.run(runner=mock_runner, pipeline_name=fake_pipeline_name)",
          "683:         record_data = {",
          "",
          "[Removed Lines]",
          "680:         with KedroSession.create(mock_package_name, fake_project) as session:",
          "",
          "[Added Lines]",
          "652:         with KedroSession.create(fake_project) as session:",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "719:         fake_session_id,",
          "720:         fake_pipeline_name,",
          "721:         mock_context_class,",
          "723:         mock_runner,",
          "724:         mocker,",
          "725:     ):",
          "",
          "[Removed Lines]",
          "722:         mock_package_name,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "745:             \" executed per session.\"",
          "746:         )",
          "747:         with pytest.raises(Exception, match=message):",
          "749:                 session.run(runner=mock_runner, pipeline_name=fake_pipeline_name)",
          "750:                 session.run(runner=mock_runner, pipeline_name=fake_pipeline_name)",
          "",
          "[Removed Lines]",
          "748:             with KedroSession.create(mock_package_name, fake_project) as session:",
          "",
          "[Added Lines]",
          "719:             with KedroSession.create(fake_project) as session:",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "783:         )",
          "785:     @pytest.mark.usefixtures(\"mock_settings_context_class\")",
          "789:         pattern = (",
          "790:             \"Failed to find the pipeline named 'doesnotexist'. \"",
          "791:             \"It needs to be generated and returned \"",
          "792:             \"by the 'register_pipelines' function.\"",
          "793:         )",
          "794:         with pytest.raises(ValueError, match=re.escape(pattern)):",
          "796:                 session.run(runner=mock_runner, pipeline_name=\"doesnotexist\")",
          "798:     @pytest.mark.usefixtures(\"mock_settings_context_class\")",
          "",
          "[Removed Lines]",
          "786:     def test_run_non_existent_pipeline(",
          "787:         self, fake_project, mock_package_name, mock_runner",
          "788:     ):",
          "795:             with KedroSession.create(mock_package_name, fake_project) as session:",
          "",
          "[Added Lines]",
          "757:     def test_run_non_existent_pipeline(self, fake_project, mock_runner):",
          "764:             with KedroSession.create(fake_project) as session:",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "803:         fake_session_id,",
          "804:         fake_pipeline_name,",
          "805:         mock_context_class,",
          "807:         mock_runner,",
          "808:         mocker,",
          "809:     ):",
          "",
          "[Removed Lines]",
          "806:         mock_package_name,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "824:         mock_runner.run.side_effect = error  # runner.run() raises an error",
          "825:         mock_pipeline = mock_pipelines.__getitem__.return_value.filter.return_value",
          "830:             session.run(runner=mock_runner, pipeline_name=fake_pipeline_name)",
          "832:         record_data = {",
          "",
          "[Removed Lines]",
          "827:         with pytest.raises(FakeException), KedroSession.create(",
          "828:             mock_package_name, fake_project",
          "829:         ) as session:",
          "",
          "[Added Lines]",
          "795:         with pytest.raises(FakeException), KedroSession.create(fake_project) as session:",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "869:         fake_session_id,",
          "870:         fake_pipeline_name,",
          "871:         mock_context_class,",
          "873:         mock_runner,",
          "874:         mocker,",
          "875:     ):",
          "",
          "[Removed Lines]",
          "872:         mock_package_name,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "887:         )",
          "888:         mock_context = mock_context_class.return_value",
          "889:         mock_catalog = mock_context._get_catalog.return_value",
          "892:         broken_runner = mocker.patch(",
          "893:             \"kedro.runner.SequentialRunner\",",
          "",
          "[Removed Lines]",
          "890:         session = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "855:         session = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "948:     def test_session_raise_error_with_invalid_runner_instance(",
          "949:         self,",
          "950:         fake_project,",
          "952:         mocker,",
          "953:     ):",
          "954:         mocker.patch(",
          "",
          "[Removed Lines]",
          "951:         mock_package_name,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "959:         )",
          "960:         mock_runner_class = mocker.patch(\"kedro.runner.SequentialRunner\")",
          "963:         with pytest.raises(",
          "964:             KedroSessionError,",
          "965:             match=\"KedroSession expect an instance of Runner instead of a class.\",",
          "",
          "[Removed Lines]",
          "962:         session = KedroSession.create(mock_package_name, fake_project)",
          "",
          "[Added Lines]",
          "926:         session = KedroSession.create(fake_project)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "989: @pytest.mark.parametrize(\"params\", [\"a=1,b.c=2\", \"a=1,b=2,c=3\", \"\"])",
          "990: def test_no_DictConfig_in_store(",
          "991:     params,",
          "993:     fake_project,",
          "994: ):",
          "995:     extra_params = _split_params(None, None, params)",
          "1000:     assert not any(",
          "1001:         OmegaConf.is_config(value) for value in get_all_values(session._store)",
          "",
          "[Removed Lines]",
          "992:     mock_package_name,",
          "996:     session = KedroSession.create(",
          "997:         mock_package_name, fake_project, extra_params=extra_params",
          "998:     )",
          "",
          "[Added Lines]",
          "959:     session = KedroSession.create(fake_project, extra_params=extra_params)",
          "",
          "---------------"
        ],
        "tests/framework/session/test_session_extension_hooks.py||tests/framework/session/test_session_extension_hooks.py": [
          "File: tests/framework/session/test_session_extension_hooks.py -> tests/framework/session/test_session_extension_hooks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "437:         _HOOKS = Validator(\"HOOKS\", default=(project_hooks, BeforeNodeRunHook()))",
          "439:     _mock_imported_settings_paths(mocker, MockSettings())",
          "443: @pytest.fixture",
          "",
          "[Removed Lines]",
          "440:     return KedroSession.create(mock_package_name, tmp_path)",
          "",
          "[Added Lines]",
          "440:     return KedroSession.create(tmp_path)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "455:         _HOOKS = Validator(\"HOOKS\", default=(project_hooks, BeforeNodeRunHook()))",
          "457:     _mock_imported_settings_paths(mocker, MockSettings())",
          "461: class TestBeforeNodeRunHookWithInputUpdates:",
          "",
          "[Removed Lines]",
          "458:     return KedroSession.create(mock_package_name, tmp_path)",
          "",
          "[Added Lines]",
          "458:     return KedroSession.create(tmp_path)",
          "",
          "---------------"
        ],
        "tests/framework/session/test_session_hook_manager.py||tests/framework/session/test_session_hook_manager.py": [
          "File: tests/framework/session/test_session_hook_manager.py -> tests/framework/session/test_session_hook_manager.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:         unregister_mock = mocker.patch(\"pluggy._manager.PluginManager.unregister\")",
          "110:         # create a session that will use the mock_settings_with_disabled_hooks from the fixture.",
          "115:         mocked_distinfo.assert_called_once_with()",
          "116:         unregister_mock.assert_called_once_with(plugin=distinfo[0][0])",
          "",
          "[Removed Lines]",
          "111:         KedroSession.create(",
          "112:             mock_package_name, tmp_path, extra_params={\"params:key\": \"value\"}",
          "113:         )",
          "",
          "[Added Lines]",
          "111:         KedroSession.create(tmp_path, extra_params={\"params:key\": \"value\"})",
          "",
          "---------------"
        ],
        "tests/ipython/test_ipython.py||tests/ipython/test_ipython.py": [
          "File: tests/ipython/test_ipython.py -> tests/ipython/test_ipython.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:         reload_kedro()",
          "117:         mock_session_create.assert_called_once_with(",
          "119:             None,",
          "120:             env=None,",
          "121:             extra_params=None,",
          "",
          "[Removed Lines]",
          "118:             PACKAGE_NAME,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:         )",
          "155:         mock_session_create.assert_called_once_with(",
          "157:             fake_metadata.project_path,",
          "158:             env=dummy_env,",
          "159:             extra_params=dummy_dict,",
          "",
          "[Removed Lines]",
          "156:             PACKAGE_NAME,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3639bae79c4d63bb6854da61ff476275d1745f44",
      "candidate_info": {
        "commit_hash": "3639bae79c4d63bb6854da61ff476275d1745f44",
        "repo": "kedro-org/kedro",
        "commit_url": "https://github.com/kedro-org/kedro/commit/3639bae79c4d63bb6854da61ff476275d1745f44",
        "files": [
          "RELEASE.md",
          "kedro/io/data_catalog.py",
          "kedro/logging.py",
          "kedro/utils.py",
          "tests/framework/project/test_logging.py",
          "tests/framework/session/test_session.py"
        ],
        "message": "fix rich markup regression in 0.19.7 (#4097)\n\n* Move rich detecting and formatting to utils.py\n\nSigned-off-by: Laura Couto <laurarccouto@gmail.com>\n\n* Fix import on test for _has_rich_handler\n\nSigned-off-by: Laura Couto <laurarccouto@gmail.com>\n\n* Adjust tests for coverage\n\nSigned-off-by: Laura Couto <laurarccouto@gmail.com>\n\n* Adjust tests for coverage\n\nSigned-off-by: Laura Couto <laurarccouto@gmail.com>\n\n* Add failed import case to test\n\nSigned-off-by: Laura Couto <laurarccouto@gmail.com>\n\n* fix rich markup regression \u00e5\u00e7in 0.19.7\n\nSigned-off-by: Nok <nok.lam.chan@quantumblack.com>\n\n* Fix linter error\n\nSigned-off-by: Laura Couto <laurarccouto@gmail.com>\n\n* move test to session tests as rich handler has nothing to do with DataCatalog now\n\nSigned-off-by: Nok <nok.lam.chan@quantumblack.com>\n\n* format\n\nSigned-off-by: Nok <nok.lam.chan@quantumblack.com>\n\n---------\n\nSigned-off-by: Laura Couto <laurarccouto@gmail.com>\nSigned-off-by: Nok <nok.lam.chan@quantumblack.com>\nCo-authored-by: Laura Couto <laurarccouto@gmail.com>\nCo-authored-by: L. R. Couto <57910428+lrcouto@users.noreply.github.com>",
        "before_after_code_files": [
          "kedro/io/data_catalog.py||kedro/io/data_catalog.py",
          "kedro/logging.py||kedro/logging.py",
          "kedro/utils.py||kedro/utils.py",
          "tests/framework/project/test_logging.py||tests/framework/project/test_logging.py",
          "tests/framework/session/test_session.py||tests/framework/session/test_session.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/framework/session/test_session.py||tests/framework/session/test_session.py"
          ],
          "candidate": [
            "tests/framework/session/test_session.py||tests/framework/session/test_session.py"
          ]
        }
      },
      "candidate_diff": {
        "kedro/io/data_catalog.py||kedro/io/data_catalog.py": [
          "File: kedro/io/data_catalog.py -> kedro/io/data_catalog.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     generate_timestamp,",
          "26: )",
          "27: from kedro.io.memory_dataset import MemoryDataset",
          "30: Patterns = Dict[str, Dict[str, Any]]",
          "",
          "[Removed Lines]",
          "28: from kedro.logging import _format_rich, _has_rich_handler",
          "",
          "[Added Lines]",
          "28: from kedro.utils import _format_rich, _has_rich_handler",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:         self._load_versions = load_versions or {}",
          "214:         self._save_version = save_version",
          "215:         self._default_pattern = default_pattern or {}",
          "217:         if feed_dict:",
          "218:             self.add_feed_dict(feed_dict)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:         self._use_rich_markup = _has_rich_handler()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "537:         self._logger.info(",
          "538:             \"Loading data from %s (%s)...\",",
          "542:             type(dataset).__name__,",
          "543:             extra={\"markup\": True},",
          "544:         )",
          "",
          "[Removed Lines]",
          "539:             _format_rich(name, \"dark_orange\")",
          "540:             if _has_rich_handler(self._logger)",
          "541:             else name,",
          "",
          "[Added Lines]",
          "540:             _format_rich(name, \"dark_orange\") if self._use_rich_markup else name,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "581:         self._logger.info(",
          "582:             \"Saving data to %s (%s)...\",",
          "586:             type(dataset).__name__,",
          "587:             extra={\"markup\": True},",
          "588:         )",
          "",
          "[Removed Lines]",
          "583:             _format_rich(name, \"dark_orange\")",
          "584:             if _has_rich_handler(self._logger)",
          "585:             else name,",
          "",
          "[Added Lines]",
          "582:             _format_rich(name, \"dark_orange\") if self._use_rich_markup else name,",
          "",
          "---------------"
        ],
        "kedro/logging.py||kedro/logging.py": [
          "File: kedro/logging.py -> kedro/logging.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import logging",
          "2: import sys",
          "4: from pathlib import Path",
          "5: from typing import Any",
          "",
          "[Removed Lines]",
          "3: from functools import lru_cache",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:             # fixed on their side at some point, but until then we disable it.",
          "56:             # See https://github.com/Textualize/rich/issues/2455",
          "57:             rich.traceback.install(**traceback_install_kwargs)  # type: ignore[arg-type]",
          "",
          "[Removed Lines]",
          "60: @lru_cache(maxsize=None)",
          "61: def _has_rich_handler(logger: logging.Logger) -> bool:",
          "62:     \"\"\"Returns true if the logger has a RichHandler attached.\"\"\"",
          "63:     return any(isinstance(handler, RichHandler) for handler in logger.handlers)",
          "66: def _format_rich(value: str, markup: str) -> str:",
          "67:     \"\"\"Format string with rich markup\"\"\"",
          "68:     return f\"[{markup}]{value}[/{markup}]\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kedro/utils.py||kedro/utils.py": [
          "File: kedro/utils.py -> kedro/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: of kedro package.",
          "3: \"\"\"",
          "4: import importlib",
          "5: import os",
          "6: from pathlib import Path",
          "9: _PYPROJECT = \"pyproject.toml\"",
          "",
          "[Removed Lines]",
          "7: from typing import Any, Union",
          "",
          "[Added Lines]",
          "5: import logging",
          "8: from typing import Any, Optional, Union",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         if _is_project(parent_dir):",
          "79:             return parent_dir",
          "80:     return None",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: def _has_rich_handler(logger: Optional[logging.Logger] = None) -> bool:",
          "85:     \"\"\"Returns true if the logger has a RichHandler attached.\"\"\"",
          "86:     if not logger:",
          "87:         logger = logging.getLogger()  # User root by default",
          "88:     try:",
          "89:         from rich.logging import RichHandler",
          "90:     except ImportError:",
          "91:         return False",
          "92:     return any(isinstance(handler, RichHandler) for handler in logger.handlers)",
          "95: def _format_rich(value: str, markup: str) -> str:",
          "96:     \"\"\"Format string with rich markup\"\"\"",
          "97:     return f\"[{markup}]{value}[/{markup}]\"",
          "",
          "---------------"
        ],
        "tests/framework/project/test_logging.py||tests/framework/project/test_logging.py": [
          "File: tests/framework/project/test_logging.py -> tests/framework/project/test_logging.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import logging",
          "2: import sys",
          "3: from pathlib import Path",
          "5: import pytest",
          "6: import yaml",
          "8: from kedro.framework.project import LOGGING, configure_logging, configure_project",
          "12: @pytest.fixture",
          "",
          "[Removed Lines]",
          "9: from kedro.logging import RichHandler, _format_rich, _has_rich_handler",
          "",
          "[Added Lines]",
          "1: import importlib",
          "5: from unittest import mock",
          "11: from kedro.utils import _format_rich, _has_rich_handler",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157: def test_has_rich_handler():",
          "158:     test_logger = logging.getLogger(\"test_logger\")",
          "165: def test_default_logging_info_emission(monkeypatch, tmp_path, caplog):",
          "",
          "[Removed Lines]",
          "159:     assert not _has_rich_handler(test_logger)",
          "160:     _has_rich_handler.cache_clear()",
          "161:     test_logger.addHandler(RichHandler())",
          "162:     assert _has_rich_handler(test_logger)",
          "",
          "[Added Lines]",
          "161:     with mock.patch(\"builtins.__import__\", side_effect=ImportError):",
          "162:         assert not _has_rich_handler(test_logger)",
          "164:     if importlib.util.find_spec(\"rich\"):",
          "165:         from rich.logging import RichHandler",
          "167:         test_logger.addHandler(RichHandler())",
          "168:         assert _has_rich_handler(test_logger)",
          "169:     else:",
          "170:         assert not _has_rich_handler(test_logger)",
          "",
          "---------------"
        ],
        "tests/framework/session/test_session.py||tests/framework/session/test_session.py": [
          "File: tests/framework/session/test_session.py -> tests/framework/session/test_session.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: from kedro.framework.session.session import KedroSessionError",
          "30: from kedro.framework.session.shelvestore import ShelveStore",
          "31: from kedro.framework.session.store import BaseSessionStore",
          "33: _FAKE_PROJECT_NAME = \"fake_project\"",
          "34: _FAKE_PIPELINE_NAME = \"fake_pipeline\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: from kedro.utils import _has_rich_handler",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "948:             # Execute run with SequentialRunner class instead of SequentialRunner()",
          "949:             session.run(runner=mock_runner_class)",
          "952: @pytest.fixture",
          "953: def fake_project_with_logging_file_handler(fake_project):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "952:     def test_logging_rich_markup(self, fake_project):",
          "953:         # Make sure RichHandler is registered as root's handlers as in a Kedro Project.",
          "954:         KedroSession.create(fake_project)",
          "955:         assert _has_rich_handler()",
          "",
          "---------------"
        ]
      }
    }
  ]
}