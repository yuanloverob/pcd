{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c073b8b4eea0bf0b903012a12d1f6d434e467aa3",
      "candidate_info": {
        "commit_hash": "c073b8b4eea0bf0b903012a12d1f6d434e467aa3",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/c073b8b4eea0bf0b903012a12d1f6d434e467aa3",
        "files": [
          "backend/open_webui/retrieval/utils.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/retrieval/utils.py||backend/open_webui/retrieval/utils.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/retrieval/utils.py||backend/open_webui/retrieval/utils.py": [
          "File: backend/open_webui/retrieval/utils.py -> backend/open_webui/retrieval/utils.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:     # Initialize lists to store combined data",
          "155:     combined_documents = []",
          "156:     combined_metadatas = []",
          "158:     for data in get_results:",
          "159:         combined_documents.extend(data[\"documents\"][0])",
          "160:         combined_metadatas.extend(data[\"metadatas\"][0])",
          "162:     # Create the output dictionary",
          "163:     result = {",
          "164:         \"documents\": [combined_documents],",
          "165:         \"metadatas\": [combined_metadatas],",
          "166:     }",
          "168:     return result",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:     combined_ids = []",
          "162:         combined_ids.extend(data[\"ids\"][0])",
          "168:         \"ids\": [combined_ids],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "155dbd5a6692a3454f7d1f5a11d50fd108a4189b",
      "candidate_info": {
        "commit_hash": "155dbd5a6692a3454f7d1f5a11d50fd108a4189b",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/155dbd5a6692a3454f7d1f5a11d50fd108a4189b",
        "files": [
          "backend/open_webui/routers/retrieval.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/retrieval.py||backend/open_webui/routers/retrieval.py": [
          "File: backend/open_webui/routers/retrieval.py -> backend/open_webui/routers/retrieval.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:     url: str",
          "178:     query: str",
          "",
          "[Removed Lines]",
          "177: class SearchForm(CollectionNameForm):",
          "",
          "[Added Lines]",
          "177: class SearchForm(BaseModel):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1464:     log.debug(f\"web_results: {web_results}\")",
          "1466:     try:",
          "1471:         urls = [result.link for result in web_results]",
          "1472:         loader = get_web_loader(",
          "1473:             urls,",
          "",
          "[Removed Lines]",
          "1467:         collection_basename = form_data.collection_name",
          "1468:         if collection_basename == \"\" or collection_basename is None:",
          "1469:             collection_basename = \"web-search\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1476:             trust_env=request.app.state.config.RAG_WEB_SEARCH_TRUST_ENV,",
          "1477:         )",
          "1478:         docs = await loader.aload()",
          "1481:         if request.app.state.config.BYPASS_WEB_SEARCH_EMBEDDING_AND_RETRIEVAL:",
          "1482:             return {",
          "",
          "[Removed Lines]",
          "1479:         urls = [doc.metadata[\"source\"] for doc in docs] # only keep URLs which could be retrieved",
          "",
          "[Added Lines]",
          "1475:         urls = [",
          "1476:             doc.metadata[\"source\"] for doc in docs",
          "1477:         ]  # only keep URLs which could be retrieved",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1495:         else:",
          "1496:             collection_names = []",
          "1497:             for doc_idx, doc in enumerate(docs):",
          "1501:                 await run_in_threadpool(",
          "1502:                     save_docs_to_vector_db,",
          "1503:                     request,",
          "1504:                     [doc],",
          "1506:                     overwrite=True,",
          "1507:                     user=user,",
          "1508:                 )",
          "",
          "[Removed Lines]",
          "1498:                 collection_sha = calculate_sha256_string(f\"{form_data.query}-{urls[doc_idx]}\")",
          "1499:                 doc_collection_name = f\"{collection_basename}-{collection_sha}\"[:63]",
          "1500:                 collection_names.append(doc_collection_name)",
          "1505:                     doc_collection_name,",
          "",
          "[Added Lines]",
          "1496:                 collection_name = f\"web-search-{calculate_sha256_string(",
          "1497:                     f\"{form_data.query}-{urls[doc_idx]}\"",
          "1498:                 )}\"[:63]",
          "1499:                 collection_names.append(collection_name)",
          "1506:                     collection_name,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58ff221d1f3f2b329aef25737a42ec5869a560d8",
      "candidate_info": {
        "commit_hash": "58ff221d1f3f2b329aef25737a42ec5869a560d8",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/58ff221d1f3f2b329aef25737a42ec5869a560d8",
        "files": [
          "src/lib/components/admin/Users/Groups/EditGroupModal.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/admin/Users/Groups/EditGroupModal.svelte||src/lib/components/admin/Users/Groups/EditGroupModal.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/admin/Users/Groups/EditGroupModal.svelte||src/lib/components/admin/Users/Groups/EditGroupModal.svelte": [
          "File: src/lib/components/admin/Users/Groups/EditGroupModal.svelte -> src/lib/components/admin/Users/Groups/EditGroupModal.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "9:  import Users from './Users.svelte';",
          "10:  import UserPlusSolid from '$lib/components/icons/UserPlusSolid.svelte';",
          "11:  import WrenchSolid from '$lib/components/icons/WrenchSolid.svelte';",
          "13:  export let onSubmit: Function = () => {};",
          "14:  export let onDelete: Function = () => {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12:  import ConfirmDialog from '$lib/components/common/ConfirmDialog.svelte';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:  let selectedTab = 'general';",
          "27:  let loading = false;",
          "29:  export let name = '';",
          "30:  export let description = '';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:  let showDeleteConfirmDialog = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "88:  });",
          "89: </script>",
          "91: <Modal size=\"md\" bind:show>",
          "92:  <div>",
          "93:   <div class=\" flex justify-between dark:text-gray-100 px-5 pt-4 mb-1.5\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93: <ConfirmDialog",
          "94:  bind:show={showDeleteConfirmDialog}",
          "95:  on:confirm={() => {",
          "96:   onDelete();",
          "97:   show = false;",
          "98:  }}",
          "99: />",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:       {/if}",
          "264:      </div> -->",
          "267:       {#if edit}",
          "268:        <button",
          "269:         class=\"px-3.5 py-1.5 text-sm font-medium dark:bg-black dark:hover:bg-gray-900 dark:text-white bg-white text-black hover:bg-gray-100 transition rounded-full flex flex-row space-x-1 items-center\"",
          "270:         type=\"button\"",
          "271:         on:click={() => {",
          "274:         }}",
          "275:        >",
          "276:         {$i18n.t('Delete')}",
          "",
          "[Removed Lines]",
          "266:      <div class=\"flex justify-end pt-3 text-sm font-medium gap-1.5\">",
          "272:          onDelete();",
          "273:          show = false;",
          "",
          "[Added Lines]",
          "276:      <div class=\"flex justify-between pt-3 text-sm font-medium gap-1.5\">",
          "282:          showDeleteConfirmDialog = true;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "64a0b28dabb0672f2b8cba2e5a76c33541173550",
      "candidate_info": {
        "commit_hash": "64a0b28dabb0672f2b8cba2e5a76c33541173550",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/64a0b28dabb0672f2b8cba2e5a76c33541173550",
        "files": [
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "409:                         }",
          "410:                     )",
          "411:                 elif results.get(\"docs\"):",
          "413:                         files.append(",
          "414:                             {",
          "416:                                 \"name\": searchQuery,",
          "417:                                 \"type\": \"web_search\",",
          "419:                             }",
          "420:                         )",
          "",
          "[Removed Lines]",
          "412:                     for doc_idx, doc in enumerate(results[\"docs\"]):",
          "415:                                 \"docs\": [doc],",
          "418:                                 \"urls\": [results[\"filenames\"][doc_idx]],",
          "",
          "[Added Lines]",
          "412:                     # Invoked when bypass embedding and retrieval is set to True",
          "413:                     docs = results[\"docs\"]",
          "415:                     if len(docs) == len(results[\"filenames\"]):",
          "416:                         # the number of docs and filenames (urls) should be the same",
          "417:                         for doc_idx, doc in enumerate(docs):",
          "418:                             files.append(",
          "419:                                 {",
          "420:                                     \"docs\": [doc],",
          "421:                                     \"name\": searchQuery,",
          "422:                                     \"type\": \"web_search\",",
          "423:                                     \"urls\": [results[\"filenames\"][doc_idx]],",
          "424:                                 }",
          "425:                             )",
          "426:                     else:",
          "427:                         # edge case when the number of docs and filenames (urls) are not the same",
          "428:                         # this should not happen, but if it does, we will just append the docs",
          "431:                                 \"docs\": results.get(\"docs\", []),",
          "434:                                 \"urls\": results[\"filenames\"],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "63cf80a456e1c38af8c3c2bfa5f0f25da1c97a82",
      "candidate_info": {
        "commit_hash": "63cf80a456e1c38af8c3c2bfa5f0f25da1c97a82",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/63cf80a456e1c38af8c3c2bfa5f0f25da1c97a82",
        "files": [
          "backend/open_webui/env.py",
          "backend/open_webui/main.py",
          "backend/open_webui/routers/auths.py",
          "backend/open_webui/routers/channels.py",
          "backend/open_webui/utils/auth.py",
          "backend/open_webui/utils/middleware.py",
          "backend/open_webui/utils/oauth.py",
          "backend/open_webui/utils/webhook.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/env.py||backend/open_webui/env.py",
          "backend/open_webui/main.py||backend/open_webui/main.py",
          "backend/open_webui/routers/auths.py||backend/open_webui/routers/auths.py",
          "backend/open_webui/routers/channels.py||backend/open_webui/routers/channels.py",
          "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py",
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "backend/open_webui/utils/oauth.py||backend/open_webui/utils/oauth.py",
          "backend/open_webui/utils/webhook.py||backend/open_webui/utils/webhook.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/env.py||backend/open_webui/env.py": [
          "File: backend/open_webui/env.py -> backend/open_webui/env.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: WEBUI_FAVICON_URL = \"https://openwebui.com/favicon.png\"",
          "117: ####################################",
          "118: # ENV (dev,test,prod)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: TRUSTED_SIGNATURE_KEY = os.environ.get(\"TRUSTED_SIGNATURE_KEY\", \"\")",
          "",
          "---------------"
        ],
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: from open_webui.models.users import UserModel, Users",
          "90: from open_webui.config import (",
          "91:     # Ollama",
          "92:     ENABLE_OLLAMA_API,",
          "93:     OLLAMA_BASE_URLS,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:     LICENSE_KEY,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "314: from open_webui.utils.access_control import has_access",
          "316: from open_webui.utils.auth import (",
          "317:     decode_token,",
          "318:     get_admin_user,",
          "319:     get_verified_user,",
          "320: )",
          "322: from open_webui.utils.security_headers import SecurityHeadersMiddleware",
          "324: from open_webui.tasks import stop_task, list_tasks  # Import from tasks.py",
          "326: if SAFE_MODE:",
          "327:     print(\"SAFE MODE ENABLED\")",
          "328:     Functions.deactivate_all_functions()",
          "",
          "[Removed Lines]",
          "321: from open_webui.utils.oauth import oauth_manager",
          "",
          "[Added Lines]",
          "318:     verify_signature,",
          "323: from open_webui.utils.oauth import OAuthManager",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "369:     if RESET_CONFIG_ON_START:",
          "370:         reset_config()",
          "372:     asyncio.create_task(periodic_usage_pool_cleanup())",
          "373:     yield",
          "376: app = FastAPI(",
          "377:     docs_url=\"/docs\" if ENV == \"dev\" else None,",
          "378:     openapi_url=\"/openapi.json\" if ENV == \"dev\" else None,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375:     license_key = app.state.config.LICENSE_KEY",
          "376:     if license_key:",
          "377:         try:",
          "378:             response = requests.post(",
          "379:                 \"https://api.openwebui.com/api/v1/license\",",
          "380:                 json={\"key\": license_key, \"version\": \"1\"},",
          "381:                 timeout=5,",
          "382:             )",
          "383:             if response.ok:",
          "384:                 data = response.json()",
          "385:                 if \"payload\" in data and \"auth\" in data:",
          "386:                     if verify_signature(data[\"payload\"], data[\"auth\"]):",
          "387:                         exec(",
          "388:                             data[\"payload\"],",
          "389:                             {",
          "390:                                 \"__builtins__\": {},",
          "391:                                 \"override_static\": override_static,",
          "392:                                 \"USER_COUNT\": app.state.USER_COUNT,",
          "393:                                 \"WEBUI_NAME\": app.state.WEBUI_NAME,",
          "394:                             },",
          "395:                         )  # noqa",
          "396:             else:",
          "397:                 log.error(f\"Error fetching license: {response.text}\")",
          "398:         except Exception as e:",
          "399:             log.error(f\"Error during license check: {e}\")",
          "400:             pass",
          "406: def override_static(path: str, content: str):",
          "407:     # Ensure path is safe",
          "408:     if \"/\" in path:",
          "409:         log.error(f\"Invalid path: {path}\")",
          "410:         return",
          "412:     with open(f\"{STATIC_DIR}/{path}\", \"wb\") as f:",
          "413:         shutil.copyfileobj(content, f)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "380:     lifespan=lifespan,",
          "381: )",
          "383: app.state.config = AppConfig()",
          "386: ########################################",
          "387: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423: oauth_manager = OAuthManager(app)",
          "427: app.state.config.LICENSE_KEY = LICENSE_KEY",
          "429: app.state.WEBUI_NAME = WEBUI_NAME",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "483: app.state.AUTH_TRUSTED_EMAIL_HEADER = WEBUI_AUTH_TRUSTED_EMAIL_HEADER",
          "484: app.state.AUTH_TRUSTED_NAME_HEADER = WEBUI_AUTH_TRUSTED_NAME_HEADER",
          "486: app.state.TOOLS = {}",
          "487: app.state.FUNCTIONS = {}",
          "490: ########################################",
          "491: #",
          "492: # RETRIEVAL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531: app.state.USER_COUNT = None",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1071:     return {",
          "1073:         \"status\": True,",
          "1075:         \"version\": VERSION,",
          "1076:         \"default_locale\": str(DEFAULT_LOCALE),",
          "1077:         \"oauth\": {",
          "",
          "[Removed Lines]",
          "1074:         \"name\": WEBUI_NAME,",
          "",
          "[Added Lines]",
          "1119:         \"name\": app.state.WEBUI_NAME,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1207: @app.get(\"/oauth/{provider}/login\")",
          "1208: async def oauth_login(provider: str, request: Request):",
          "1212: # OAuth login logic is as follows:",
          "",
          "[Removed Lines]",
          "1209:     return await oauth_manager.handle_login(provider, request)",
          "",
          "[Added Lines]",
          "1254:     return await oauth_manager.handle_login(request, provider)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1217: #    - Email addresses are considered unique, so we fail registration if the email address is already taken",
          "1218: @app.get(\"/oauth/{provider}/callback\")",
          "1219: async def oauth_callback(provider: str, request: Request, response: Response):",
          "1223: @app.get(\"/manifest.json\")",
          "1224: async def get_manifest_json():",
          "1225:     return {",
          "1228:         \"description\": \"Open WebUI is an open, extensible, user-friendly interface for AI that adapts to your workflow.\",",
          "1229:         \"start_url\": \"/\",",
          "1230:         \"display\": \"standalone\",",
          "",
          "[Removed Lines]",
          "1220:     return await oauth_manager.handle_callback(provider, request, response)",
          "1226:         \"name\": WEBUI_NAME,",
          "1227:         \"short_name\": WEBUI_NAME,",
          "",
          "[Added Lines]",
          "1265:     return await oauth_manager.handle_callback(request, provider, response)",
          "1271:         \"name\": app.state.WEBUI_NAME,",
          "1272:         \"short_name\": app.state.WEBUI_NAME,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1251: async def get_opensearch_xml():",
          "1252:     xml_content = rf\"\"\"",
          "1253:     <OpenSearchDescription xmlns=\"http://a9.com/-/spec/opensearch/1.1/\" xmlns:moz=\"http://www.mozilla.org/2006/browser/search/\">",
          "1256:     <InputEncoding>UTF-8</InputEncoding>",
          "1257:     <Image width=\"16\" height=\"16\" type=\"image/x-icon\">{app.state.config.WEBUI_URL}/static/favicon.png</Image>",
          "1258:     <Url type=\"text/html\" method=\"get\" template=\"{app.state.config.WEBUI_URL}/?q={\"{searchTerms}\"}\"/>",
          "",
          "[Removed Lines]",
          "1254:     <ShortName>{WEBUI_NAME}</ShortName>",
          "1255:     <Description>Search {WEBUI_NAME}</Description>",
          "",
          "[Added Lines]",
          "1299:     <ShortName>{app.state.WEBUI_NAME}</ShortName>",
          "1300:     <Description>Search {app.state.WEBUI_NAME}</Description>",
          "",
          "---------------"
        ],
        "backend/open_webui/routers/auths.py||backend/open_webui/routers/auths.py": [
          "File: backend/open_webui/routers/auths.py -> backend/open_webui/routers/auths.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "251:             user = Users.get_user_by_email(mail)",
          "252:             if not user:",
          "253:                 try:",
          "254:                     role = (",
          "255:                         \"admin\"",
          "257:                         else request.app.state.config.DEFAULT_USER_ROLE",
          "258:                     )",
          "",
          "[Removed Lines]",
          "256:                         if Users.get_num_users() == 0",
          "",
          "[Added Lines]",
          "254:                     user_count = Users.get_num_users()",
          "255:                     if (",
          "256:                         request.app.state.USER_COUNT",
          "257:                         and user_count >= request.app.state.USER_COUNT",
          "258:                     ):",
          "259:                         raise HTTPException(",
          "260:                             status.HTTP_403_FORBIDDEN,",
          "261:                             detail=ERROR_MESSAGES.ACCESS_PROHIBITED,",
          "262:                         )",
          "266:                         if user_count == 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414: @router.post(\"/signup\", response_model=SessionUserResponse)",
          "415: async def signup(request: Request, response: Response, form_data: SignupForm):",
          "416:     if WEBUI_AUTH:",
          "417:         if (",
          "418:             not request.app.state.config.ENABLE_SIGNUP",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426:     user_count = Users.get_num_users()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:                 status.HTTP_403_FORBIDDEN, detail=ERROR_MESSAGES.ACCESS_PROHIBITED",
          "423:             )",
          "424:     else:",
          "426:             raise HTTPException(",
          "427:                 status.HTTP_403_FORBIDDEN, detail=ERROR_MESSAGES.ACCESS_PROHIBITED",
          "428:             )",
          "430:     if not validate_email_format(form_data.email.lower()):",
          "431:         raise HTTPException(",
          "432:             status.HTTP_400_BAD_REQUEST, detail=ERROR_MESSAGES.INVALID_EMAIL_FORMAT",
          "",
          "[Removed Lines]",
          "425:         if Users.get_num_users() != 0:",
          "",
          "[Added Lines]",
          "437:         if user_count != 0:",
          "442:     if request.app.state.USER_COUNT and user_count >= request.app.state.USER_COUNT:",
          "443:         raise HTTPException(",
          "444:             status.HTTP_403_FORBIDDEN, detail=ERROR_MESSAGES.ACCESS_PROHIBITED",
          "445:         )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "438:     try:",
          "439:         role = (",
          "443:         )",
          "446:             # Disable signup after the first user is created",
          "447:             request.app.state.config.ENABLE_SIGNUP = False",
          "",
          "[Removed Lines]",
          "440:             \"admin\"",
          "441:             if Users.get_num_users() == 0",
          "442:             else request.app.state.config.DEFAULT_USER_ROLE",
          "445:         if Users.get_num_users() == 0:",
          "",
          "[Added Lines]",
          "457:             \"admin\" if user_count == 0 else request.app.state.config.DEFAULT_USER_ROLE",
          "460:         if user_count == 0:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "485:             if request.app.state.config.WEBHOOK_URL:",
          "486:                 post_webhook(",
          "487:                     request.app.state.config.WEBHOOK_URL,",
          "488:                     WEBHOOK_MESSAGES.USER_SIGNUP(user.name),",
          "489:                     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "502:                     request.app.state.WEBUI_NAME,",
          "",
          "---------------"
        ],
        "backend/open_webui/routers/channels.py||backend/open_webui/routers/channels.py": [
          "File: backend/open_webui/routers/channels.py -> backend/open_webui/routers/channels.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "192: ############################",
          "196:     users = get_users_with_access(\"read\", channel.access_control)",
          "198:     for user in users:",
          "",
          "[Removed Lines]",
          "195: async def send_notification(webui_url, channel, message, active_user_ids):",
          "",
          "[Added Lines]",
          "195: async def send_notification(name, webui_url, channel, message, active_user_ids):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "207:                 if webhook_url:",
          "208:                     post_webhook(",
          "209:                         webhook_url,",
          "210:                         f\"#{channel.name} - {webui_url}/channels/{channel.id}\\n\\n{message.content}\",",
          "211:                         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "209:                         name,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "303:             background_tasks.add_task(",
          "304:                 send_notification,",
          "305:                 request.app.state.config.WEBUI_URL,",
          "306:                 channel,",
          "307:                 message,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:                 request.app.state.WEBUI_NAME,",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/auth.py||backend/open_webui/utils/auth.py": [
          "File: backend/open_webui/utils/auth.py -> backend/open_webui/utils/auth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: import logging",
          "2: import uuid",
          "3: import jwt",
          "5: from datetime import UTC, datetime, timedelta",
          "6: from typing import Optional, Union, List, Dict",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import base64",
          "5: import hmac",
          "6: import hashlib",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8: from open_webui.models.users import Users",
          "10: from open_webui.constants import ERROR_MESSAGES",
          "13: from fastapi import Depends, HTTPException, Request, Response, status",
          "14: from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer",
          "",
          "[Removed Lines]",
          "11: from open_webui.env import WEBUI_SECRET_KEY",
          "",
          "[Added Lines]",
          "14: from open_webui.env import WEBUI_SECRET_KEY, TRUSTED_SIGNATURE_KEY",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "24: # Auth Utils",
          "25: ##############",
          "27: bearer_security = HTTPBearer(auto_error=False)",
          "28: pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31: def verify_signature(payload: str, signature: str) -> bool:",
          "32:     \"\"\"",
          "33:     Verifies the HMAC signature of the received payload.",
          "34:     \"\"\"",
          "35:     try:",
          "36:         expected_signature = base64.b64encode(",
          "37:             hmac.new(TRUSTED_SIGNATURE_KEY, payload.encode(), hashlib.sha256).digest()",
          "38:         ).decode()",
          "40:         # Compare securely to prevent timing attacks",
          "41:         return hmac.compare_digest(expected_signature, signature)",
          "43:     except Exception:",
          "44:         return False",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1008:                         webhook_url = Users.get_user_webhook_url_by_id(user.id)",
          "1009:                         if webhook_url:",
          "1010:                             post_webhook(",
          "1011:                                 webhook_url,",
          "1012:                                 f\"{title} - {request.app.state.config.WEBUI_URL}/c/{metadata['chat_id']}\\n\\n{content}\",",
          "1013:                                 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:                                 request.app.state.WEBUI_NAME,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1873:                     webhook_url = Users.get_user_webhook_url_by_id(user.id)",
          "1874:                     if webhook_url:",
          "1875:                         post_webhook(",
          "1876:                             webhook_url,",
          "1877:                             f\"{title} - {request.app.state.config.WEBUI_URL}/c/{metadata['chat_id']}\\n\\n{content}\",",
          "1878:                             {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1877:                             request.app.state.WEBUI_NAME,",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/oauth.py||backend/open_webui/utils/oauth.py": [
          "File: backend/open_webui/utils/oauth.py -> backend/open_webui/utils/oauth.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     AppConfig,",
          "37: )",
          "38: from open_webui.constants import ERROR_MESSAGES, WEBHOOK_MESSAGES",
          "40: from open_webui.utils.misc import parse_duration",
          "41: from open_webui.utils.auth import get_password_hash, create_token",
          "42: from open_webui.utils.webhook import post_webhook",
          "",
          "[Removed Lines]",
          "39: from open_webui.env import WEBUI_AUTH_COOKIE_SAME_SITE, WEBUI_AUTH_COOKIE_SECURE",
          "",
          "[Added Lines]",
          "39: from open_webui.env import (",
          "40:     WEBUI_NAME,",
          "41:     WEBUI_AUTH_COOKIE_SAME_SITE,",
          "42:     WEBUI_AUTH_COOKIE_SECURE,",
          "43: )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: class OAuthManager:",
          "70:         self.oauth = OAuth()",
          "71:         for _, provider_config in OAUTH_PROVIDERS.items():",
          "72:             provider_config[\"register\"](self.oauth)",
          "",
          "[Removed Lines]",
          "69:     def __init__(self):",
          "",
          "[Added Lines]",
          "73:     def __init__(self, app):",
          "75:         self.app = app",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:                     id=group_model.id, form_data=update_form, overwrite=False",
          "201:                 )",
          "204:         if provider not in OAUTH_PROVIDERS:",
          "205:             raise HTTPException(404)",
          "206:         # If the provider has a custom redirect URL, use that, otherwise automatically generate one",
          "",
          "[Removed Lines]",
          "203:     async def handle_login(self, provider, request):",
          "",
          "[Added Lines]",
          "208:     async def handle_login(self, request, provider):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:             raise HTTPException(404)",
          "213:         return await client.authorize_redirect(request, redirect_uri)",
          "216:         if provider not in OAUTH_PROVIDERS:",
          "217:             raise HTTPException(404)",
          "218:         client = self.get_client(provider)",
          "",
          "[Removed Lines]",
          "215:     async def handle_callback(self, provider, request, response):",
          "",
          "[Added Lines]",
          "220:     async def handle_callback(self, request, provider, response):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "266:                 Users.update_user_role_by_id(user.id, determined_role)",
          "268:         if not user:",
          "269:             # If the user does not exist, check if signups are enabled",
          "270:             if auth_manager_config.ENABLE_OAUTH_SIGNUP:",
          "271:                 # Check if an existing user with the same email already exists",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:             user_count = Users.get_num_users()",
          "276:             if (",
          "277:                 request.app.state.USER_COUNT",
          "278:                 and user_count >= request.app.state.USER_COUNT",
          "279:             ):",
          "280:                 raise HTTPException(",
          "281:                     403,",
          "282:                     detail=ERROR_MESSAGES.ACCESS_PROHIBITED,",
          "283:                 )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "335:                 if auth_manager_config.WEBHOOK_URL:",
          "336:                     post_webhook(",
          "337:                         auth_manager_config.WEBHOOK_URL,",
          "338:                         WEBHOOK_MESSAGES.USER_SIGNUP(user.name),",
          "339:                         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:                         WEBUI_NAME,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "380:         # Redirect back to the frontend with the JWT token",
          "381:         redirect_url = f\"{request.base_url}auth#token={jwt_token}\"",
          "382:         return RedirectResponse(url=redirect_url, headers=response.headers)",
          "",
          "[Removed Lines]",
          "385: oauth_manager = OAuthManager()",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/webhook.py||backend/open_webui/utils/webhook.py": [
          "File: backend/open_webui/utils/webhook.py -> backend/open_webui/utils/webhook.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import logging",
          "4: import requests",
          "6: from open_webui.env import SRC_LOG_LEVELS, VERSION",
          "8: log = logging.getLogger(__name__)",
          "9: log.setLevel(SRC_LOG_LEVELS[\"WEBHOOK\"])",
          "13:     try:",
          "14:         log.debug(f\"post_webhook: {url}, {message}, {event_data}\")",
          "15:         payload = {}",
          "",
          "[Removed Lines]",
          "5: from open_webui.config import WEBUI_FAVICON_URL, WEBUI_NAME",
          "12: def post_webhook(url: str, message: str, event_data: dict) -> bool:",
          "",
          "[Added Lines]",
          "5: from open_webui.config import WEBUI_FAVICON_URL",
          "12: def post_webhook(name: str, url: str, message: str, event_data: dict) -> bool:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:                 \"sections\": [",
          "40:                     {",
          "41:                         \"activityTitle\": message,",
          "43:                         \"activityImage\": WEBUI_FAVICON_URL,",
          "44:                         \"facts\": facts,",
          "45:                         \"markdown\": True,",
          "",
          "[Removed Lines]",
          "42:                         \"activitySubtitle\": f\"{WEBUI_NAME} ({VERSION}) - {action}\",",
          "",
          "[Added Lines]",
          "42:                         \"activitySubtitle\": f\"{name} ({VERSION}) - {action}\",",
          "",
          "---------------"
        ]
      }
    }
  ]
}