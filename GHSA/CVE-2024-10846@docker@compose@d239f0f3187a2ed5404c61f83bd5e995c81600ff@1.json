{
  "cve_id": "CVE-2024-10846",
  "cve_desc": "The compose-go library component in versions v2.10-v2.4.0 allows an authorized user who sends malicious YAML payloads to cause the compose-go to consume excessive amount of Memory and CPU cycles while parsing YAML, such as used by Docker Compose from versions  v2.27.0 to v2.29.7 included",
  "repo": "docker/compose",
  "patch_hash": "d239f0f3187a2ed5404c61f83bd5e995c81600ff",
  "patch_info": {
    "commit_hash": "d239f0f3187a2ed5404c61f83bd5e995c81600ff",
    "repo": "docker/compose",
    "commit_url": "https://github.com/docker/compose/commit/d239f0f3187a2ed5404c61f83bd5e995c81600ff#diff-33ef32bf6c23acb95f5902d7097b7a1d5128ca061167ec0716715b0b9eeaa5f6R10",
    "files": [
      "cmd/compose/config.go",
      "go.mod",
      "go.sum",
      "pkg/compose/create.go",
      "pkg/e2e/container_name_test.go",
      "pkg/e2e/fixtures/container_name/compose.yaml"
    ],
    "message": "check container_name is not in use by another service we will create\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
    "before_after_code_files": [
      "cmd/compose/config.go||cmd/compose/config.go",
      "go.mod||go.mod",
      "go.sum||go.sum",
      "pkg/compose/create.go||pkg/compose/create.go",
      "pkg/e2e/container_name_test.go||pkg/e2e/container_name_test.go"
    ]
  },
  "patch_diff": {
    "cmd/compose/config.go||cmd/compose/config.go": [
      "File: cmd/compose/config.go -> cmd/compose/config.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "169:    return err",
      "170:   }",
      "172:   switch opts.Format {",
      "173:   case \"json\":",
      "174:    content, err = project.MarshalJSON()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:   if !opts.noConsistency {",
      "173:    err := project.CheckContainerNameUnicity()",
      "174:    if err != nil {",
      "175:     return err",
      "176:    }",
      "177:   }",
      "",
      "---------------"
    ],
    "go.mod||go.mod": [
      "File: go.mod -> go.mod",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:  github.com/Microsoft/go-winio v0.6.1",
      "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
      "9:  github.com/buger/goterm v1.0.4",
      "11:  github.com/containerd/console v1.0.4",
      "12:  github.com/containerd/containerd v1.7.13",
      "13:  github.com/davecgh/go-spew v1.1.1",
      "",
      "[Removed Lines]",
      "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39",
      "",
      "[Added Lines]",
      "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4",
      "",
      "---------------"
    ],
    "go.sum||go.sum": [
      "File: go.sum -> go.sum",
      "--- Hunk 1 ---",
      "[Context before]",
      "90: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
      "91: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
      "92: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
      "95: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
      "96: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
      "97: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
      "",
      "[Removed Lines]",
      "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39 h1:ZUpnv0xA75X9gy9Y7hjJm51nflGbr+2URaLXBtEic7A=",
      "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
      "",
      "[Added Lines]",
      "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4 h1:WYiZ9D0WBykHUJLlpt+w7NXX0hy+cQKKdVe7vmsNZvg=",
      "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
      "",
      "---------------"
    ],
    "pkg/compose/create.go||pkg/compose/create.go": [
      "File: pkg/compose/create.go -> pkg/compose/create.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:   options.Services = project.ServiceNames()",
      "78:  }",
      "80:  var observedState Containers",
      "82:  if err != nil {",
      "83:   return err",
      "84:  }",
      "",
      "[Removed Lines]",
      "81:  observedState, err := s.getContainers(ctx, project.Name, oneOffInclude, true)",
      "",
      "[Added Lines]",
      "80:  err := project.CheckContainerNameUnicity()",
      "81:  if err != nil {",
      "82:   return err",
      "83:  }",
      "86:  observedState, err = s.getContainers(ctx, project.Name, oneOffInclude, true)",
      "",
      "---------------"
    ],
    "pkg/e2e/container_name_test.go||pkg/e2e/container_name_test.go": [
      "File: pkg/e2e/container_name_test.go -> pkg/e2e/container_name_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:    Copyright 2022 Docker Compose CLI authors",
      "7:    Licensed under the Apache License, Version 2.0 (the \"License\");",
      "8:    you may not use this file except in compliance with the License.",
      "9:    You may obtain a copy of the License at",
      "11:        http://www.apache.org/licenses/LICENSE-2.0",
      "13:    Unless required by applicable law or agreed to in writing, software",
      "14:    distributed under the License is distributed on an \"AS IS\" BASIS,",
      "15:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "16:    See the License for the specific language governing permissions and",
      "17:    limitations under the License.",
      "20: package e2e",
      "22: import (",
      "23:  \"testing\"",
      "25:  \"gotest.tools/v3/icmd\"",
      "26: )",
      "28: func TestUpContainerNameConflict(t *testing.T) {",
      "29:  c := NewParallelCLI(t)",
      "30:  const projectName = \"e2e-container_name_conflict\"",
      "32:  t.Cleanup(func() {",
      "33:   c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "34:  })",
      "36:  res := c.RunDockerComposeCmdNoCheck(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\")",
      "37:  res.Assert(t, icmd.Expected{ExitCode: 1, Err: `container name \"test\" is already in use`})",
      "39:  c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "40:  c.RunDockerComposeCmd(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\", \"test\")",
      "42:  c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "43:  c.RunDockerComposeCmd(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\", \"another_test\")",
      "44: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cf608fa954ab7a4de1910d8b3f6245894c0df7a5",
      "candidate_info": {
        "commit_hash": "cf608fa954ab7a4de1910d8b3f6245894c0df7a5",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/cf608fa954ab7a4de1910d8b3f6245894c0df7a5",
        "files": [
          "go.mod",
          "go.sum",
          "pkg/compose/build.go",
          "pkg/compose/convergence.go",
          "pkg/compose/create.go",
          "pkg/compose/secrets.go",
          "pkg/e2e/configs_test.go",
          "pkg/e2e/fixtures/configs/compose.yaml",
          "pkg/e2e/fixtures/configs/config.txt"
        ],
        "message": "bump compose-go to v1.20.1\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/build.go||pkg/compose/build.go",
          "pkg/compose/convergence.go||pkg/compose/convergence.go",
          "pkg/compose/create.go||pkg/compose/create.go",
          "pkg/compose/secrets.go||pkg/compose/secrets.go",
          "pkg/e2e/configs_test.go||pkg/e2e/configs_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.7",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go v1.20.0",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go v1.20.1",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "138: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "139: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "142: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "143: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "144: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "140: github.com/compose-spec/compose-go v1.20.0 h1:h4ZKOst1EF/DwZp7dWkb+wbTVE4nEyT9Lc89to84Ol4=",
          "141: github.com/compose-spec/compose-go v1.20.0/go.mod h1:+MdqXV4RA7wdFsahh/Kb8U0pAJqkg7mr4PM9tFKU8RM=",
          "",
          "[Added Lines]",
          "140: github.com/compose-spec/compose-go v1.20.1 h1:I6gCMGLl96kEf8XZwaozeTwnNfxA2eVsO46W+5ciTEg=",
          "141: github.com/compose-spec/compose-go v1.20.1/go.mod h1:+MdqXV4RA7wdFsahh/Kb8U0pAJqkg7mr4PM9tFKU8RM=",
          "",
          "---------------"
        ],
        "pkg/compose/build.go||pkg/compose/build.go": [
          "File: pkg/compose/build.go -> pkg/compose/build.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:  \"github.com/docker/buildx/util/buildflags\"",
          "33:  xprogress \"github.com/docker/buildx/util/progress\"",
          "34:  \"github.com/docker/cli/cli/command\"",
          "39:  \"github.com/docker/docker/builder/remotecontext/urlutil\"",
          "40:  bclient \"github.com/moby/buildkit/client\"",
          "41:  \"github.com/moby/buildkit/session\"",
          "42:  \"github.com/moby/buildkit/session/auth/authprovider\"",
          "",
          "[Removed Lines]",
          "35:  \"github.com/docker/compose/v2/internal/tracing\"",
          "36:  \"github.com/docker/compose/v2/pkg/api\"",
          "37:  \"github.com/docker/compose/v2/pkg/progress\"",
          "38:  \"github.com/docker/compose/v2/pkg/utils\"",
          "",
          "[Added Lines]",
          "35:  cliopts \"github.com/docker/cli/opts\"",
          "37:  \"github.com/docker/go-units\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:  specs \"github.com/opencontainers/image-spec/specs-go/v1\"",
          "47:  \"github.com/sirupsen/logrus\"",
          "50:  _ \"github.com/docker/buildx/driver/docker\"",
          "51: )",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:  \"github.com/docker/compose/v2/internal/tracing\"",
          "48:  \"github.com/docker/compose/v2/pkg/api\"",
          "49:  \"github.com/docker/compose/v2/pkg/progress\"",
          "50:  \"github.com/docker/compose/v2/pkg/utils\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "407:   Labels:      imageLabels,",
          "408:   NetworkMode: service.Build.Network,",
          "409:   ExtraHosts:  service.Build.ExtraHosts.AsList(),",
          "410:   Session:     sessionConfig,",
          "411:   Allow:       allow,",
          "412:  }, nil",
          "413: }",
          "415: func flatten(in types.MappingWithEquals) types.Mapping {",
          "416:  out := types.Mapping{}",
          "417:  if len(in) == 0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "413:   Ulimits:     toUlimitOpt(service.Build.Ulimits),",
          "419: func toUlimitOpt(ulimits map[string]*types.UlimitsConfig) *cliopts.UlimitOpt {",
          "420:  ref := map[string]*units.Ulimit{}",
          "421:  for _, limit := range toUlimits(ulimits) {",
          "422:   ref[limit.Name] = &units.Ulimit{",
          "423:    Name: limit.Name,",
          "424:    Hard: limit.Hard,",
          "425:    Soft: limit.Soft,",
          "426:   }",
          "427:  }",
          "428:  return cliopts.NewUlimitOpt(&ref)",
          "429: }",
          "",
          "---------------"
        ],
        "pkg/compose/convergence.go||pkg/compose/convergence.go": [
          "File: pkg/compose/convergence.go -> pkg/compose/convergence.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:  }",
          "625:  err = s.injectSecrets(ctx, project, service, created.ID)",
          "626:  return created, err",
          "627: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:  if err != nil {",
          "627:   return created, err",
          "628:  }",
          "630:  err = s.injectConfigs(ctx, project, service, created.ID)",
          "",
          "---------------"
        ],
        "pkg/compose/create.go||pkg/compose/create.go": [
          "File: pkg/compose/create.go -> pkg/compose/create.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "521:   })",
          "522:  }",
          "525:   soft := u.Single",
          "526:   if u.Soft != 0 {",
          "527:    soft = u.Soft",
          "",
          "[Removed Lines]",
          "524:  for name, u := range s.Ulimits {",
          "",
          "[Added Lines]",
          "524:  ulimits := toUlimits(s.Ulimits)",
          "525:  resources.Ulimits = ulimits",
          "526:  return resources",
          "527: }",
          "529: func toUlimits(m map[string]*types.UlimitsConfig) []*units.Ulimit {",
          "530:  var ulimits []*units.Ulimit",
          "531:  for name, u := range m {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "530:   if u.Hard != 0 {",
          "531:    hard = u.Hard",
          "532:   }",
          "534:    Name: name,",
          "535:    Hard: int64(hard),",
          "536:    Soft: int64(soft),",
          "537:   })",
          "538:  }",
          "540: }",
          "542: func setReservations(reservations *types.Resource, resources *container.Resources) {",
          "",
          "[Removed Lines]",
          "533:   resources.Ulimits = append(resources.Ulimits, &units.Ulimit{",
          "539:  return resources",
          "",
          "[Added Lines]",
          "540:   ulimits = append(ulimits, &units.Ulimit{",
          "546:  return ulimits",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "812:    return nil, errors.New(\"Docker Compose does not support configs.*.template_driver\")",
          "813:   }",
          "815:   bindMount, err := buildMount(p, types.ServiceVolumeConfig{",
          "816:    Type:     types.VolumeTypeBind,",
          "817:    Source:   definedConfig.File,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "822:   if definedConfig.Environment != \"\" || definedConfig.Content != \"\" {",
          "823:    continue",
          "824:   }",
          "",
          "---------------"
        ],
        "pkg/compose/secrets.go||pkg/compose/secrets.go": [
          "File: pkg/compose/secrets.go -> pkg/compose/secrets.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   if !ok {",
          "40:    return fmt.Errorf(\"environment variable %q required by secret %q is not set\", secret.Environment, secret.Name)",
          "41:   }",
          "43:   if err != nil {",
          "44:    return err",
          "45:   }",
          "",
          "[Removed Lines]",
          "42:   b, err := createTar(env, config)",
          "",
          "[Added Lines]",
          "42:   b, err := createTar(env, types.FileReferenceConfig(config))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "54:  return nil",
          "55: }",
          "58:  value := []byte(env)",
          "59:  b := bytes.Buffer{}",
          "60:  tarWriter := tar.NewWriter(&b)",
          "",
          "[Removed Lines]",
          "57: func createTar(env string, config types.ServiceSecretConfig) (bytes.Buffer, error) {",
          "",
          "[Added Lines]",
          "57: func (s *composeService) injectConfigs(ctx context.Context, project *types.Project, service types.ServiceConfig, id string) error {",
          "58:  for _, config := range service.Configs {",
          "59:   secret := project.Configs[config.Source]",
          "60:   content := secret.Content",
          "61:   if secret.Environment != \"\" {",
          "62:    env, ok := project.Environment[secret.Environment]",
          "63:    if !ok {",
          "64:     return fmt.Errorf(\"environment variable %q required by secret %q is not set\", secret.Environment, secret.Name)",
          "65:    }",
          "66:    content = env",
          "67:   }",
          "68:   if content == \"\" {",
          "69:    continue",
          "70:   }",
          "72:   b, err := createTar(content, types.FileReferenceConfig(config))",
          "73:   if err != nil {",
          "74:    return err",
          "75:   }",
          "77:   err = s.apiClient().CopyToContainer(ctx, id, \"/\", &b, moby.CopyToContainerOptions{",
          "78:    CopyUIDGID: config.UID != \"\" || config.GID != \"\",",
          "79:   })",
          "80:   if err != nil {",
          "81:    return err",
          "82:   }",
          "83:  }",
          "84:  return nil",
          "85: }",
          "87: func createTar(env string, config types.FileReferenceConfig) (bytes.Buffer, error) {",
          "",
          "---------------"
        ],
        "pkg/e2e/configs_test.go||pkg/e2e/configs_test.go": [
          "File: pkg/e2e/configs_test.go -> pkg/e2e/configs_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    Copyright 2020 Docker Compose CLI authors",
          "4:    Licensed under the Apache License, Version 2.0 (the \"License\");",
          "5:    you may not use this file except in compliance with the License.",
          "6:    You may obtain a copy of the License at",
          "8:        http://www.apache.org/licenses/LICENSE-2.0",
          "10:    Unless required by applicable law or agreed to in writing, software",
          "11:    distributed under the License is distributed on an \"AS IS\" BASIS,",
          "12:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
          "13:    See the License for the specific language governing permissions and",
          "14:    limitations under the License.",
          "17: package e2e",
          "19: import (",
          "20:  \"testing\"",
          "22:  \"gotest.tools/v3/icmd\"",
          "23: )",
          "25: func TestConfigFromEnv(t *testing.T) {",
          "26:  c := NewParallelCLI(t)",
          "28:  t.Run(\"config from file\", func(t *testing.T) {",
          "29:   res := icmd.RunCmd(c.NewDockerComposeCmd(t, \"-f\", \"./fixtures/configs/compose.yaml\", \"run\", \"from_file\"))",
          "30:   res.Assert(t, icmd.Expected{Out: \"This is my config file\"})",
          "31:  })",
          "33:  t.Run(\"config from env\", func(t *testing.T) {",
          "34:   res := icmd.RunCmd(c.NewDockerComposeCmd(t, \"-f\", \"./fixtures/configs/compose.yaml\", \"run\", \"from_env\"),",
          "35:    func(cmd *icmd.Cmd) {",
          "36:     cmd.Env = append(cmd.Env, \"CONFIG=config\")",
          "37:    })",
          "38:   res.Assert(t, icmd.Expected{Out: \"config\"})",
          "39:  })",
          "41:  t.Run(\"config inlined\", func(t *testing.T) {",
          "42:   res := icmd.RunCmd(c.NewDockerComposeCmd(t, \"-f\", \"./fixtures/configs/compose.yaml\", \"run\", \"inlined\"),",
          "43:    func(cmd *icmd.Cmd) {",
          "44:     cmd.Env = append(cmd.Env, \"CONFIG=config\")",
          "45:    })",
          "46:   res.Assert(t, icmd.Expected{Out: \"This is my config\"})",
          "47:  })",
          "48: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "349d9f34d0f1746e4a6014ad1b34fa3ee01985eb",
      "candidate_info": {
        "commit_hash": "349d9f34d0f1746e4a6014ad1b34fa3ee01985eb",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/349d9f34d0f1746e4a6014ad1b34fa3ee01985eb",
        "files": [
          "cmd/compose/compose.go",
          "go.mod",
          "go.sum"
        ],
        "message": "bump compose-go to version v2.0.0-rc.8\n\nSigned-off-by: Guillaume Lours <705411+glours@users.noreply.github.com>",
        "before_after_code_files": [
          "cmd/compose/compose.go||cmd/compose/compose.go",
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "cmd/compose/compose.go||cmd/compose/compose.go": [
          "File: cmd/compose/compose.go -> cmd/compose/compose.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:   po = append(po, cli.WithResourceLoader(r))",
          "210:  }",
          "214:  options, err := o.toProjectOptions(po...)",
          "215:  if err != nil {",
          "216:   return nil, metrics, compose.WrapComposeError(err)",
          "",
          "[Removed Lines]",
          "212:  po = append(po, cli.WithContext(ctx))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:   api.Separator = \"_\"",
          "244:  }",
          "247:  if err != nil {",
          "248:   return nil, metrics, compose.WrapComposeError(err)",
          "249:  }",
          "",
          "[Removed Lines]",
          "246:  project, err := cli.ProjectFromOptions(options)",
          "",
          "[Added Lines]",
          "244:  project, err := cli.ProjectFromOptions(ctx, options)",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.12",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-rc.7",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-rc.8",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "88: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "91: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "92: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "93: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-rc.7 h1:koFIK+JwplWu1m/DscSO6MJw7hodaEHOaKQZPUSL4OY=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-rc.7/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "[Added Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-rc.8 h1:b7l+GqFF+2W4M4kLQUDRTGhqmTiRwT3bYd9X7xrxp5Q=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-rc.8/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26f687a12b67fb344148ec045f81a3de43b52f0b",
      "candidate_info": {
        "commit_hash": "26f687a12b67fb344148ec045f81a3de43b52f0b",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/26f687a12b67fb344148ec045f81a3de43b52f0b",
        "files": [
          "go.mod",
          "go.sum",
          "pkg/compose/create.go"
        ],
        "message": "Revert \"Bump compose-go to v2.0.1\"\n\nThis reverts commit ad414613090d031583181d34cf93f15024d0524c.\n\nSigned-off-by: Milas Bowman <milas.bowman@docker.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/create.go||pkg/compose/create.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.12",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.1",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "88: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "91: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "92: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "93: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.1 h1:XIvwK9RltlwAikI1d8aOaGGTr0/i2Jev3LoRn2nLEmA=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.1/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "[Added Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0 h1:RLI8GmNxRLg759CzZITh/kGYZTYhEak121FaVYdXTC8=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "---------------"
        ],
        "pkg/compose/create.go||pkg/compose/create.go": [
          "File: pkg/compose/create.go -> pkg/compose/create.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "710:  if limits.MemoryBytes != 0 {",
          "711:   resources.Memory = int64(limits.MemoryBytes)",
          "712:  }",
          "715:  }",
          "716:  if limits.Pids > 0 {",
          "717:   resources.PidsLimit = &limits.Pids",
          "",
          "[Removed Lines]",
          "713:  if limits.NanoCPUs != 0 {",
          "714:   resources.NanoCPUs = int64(limits.NanoCPUs * 1e9)",
          "",
          "[Added Lines]",
          "713:  if limits.NanoCPUs != \"\" {",
          "714:   if f, err := strconv.ParseFloat(limits.NanoCPUs, 64); err == nil {",
          "715:    resources.NanoCPUs = int64(f * 1e9)",
          "716:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb94ea034e9908ca02c8c6c5c173b41f47dad0e3",
      "candidate_info": {
        "commit_hash": "bb94ea034e9908ca02c8c6c5c173b41f47dad0e3",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/bb94ea034e9908ca02c8c6c5c173b41f47dad0e3",
        "files": [
          "go.mod",
          "go.sum",
          "pkg/compose/compose.go",
          "pkg/compose/convergence.go",
          "pkg/compose/convergence_test.go",
          "pkg/compose/create.go",
          "pkg/compose/create_test.go",
          "pkg/compose/dependencies.go",
          "pkg/compose/restart.go",
          "pkg/compose/start.go",
          "pkg/e2e/compose_run_test.go",
          "pkg/e2e/fixtures/dependencies/deps-not-required.yaml",
          "pkg/e2e/up_test.go"
        ],
        "message": "add support of depends_on.required attribute\n\nSigned-off-by: Guillaume Lours <705411+glours@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/compose.go||pkg/compose/compose.go",
          "pkg/compose/convergence.go||pkg/compose/convergence.go",
          "pkg/compose/convergence_test.go||pkg/compose/convergence_test.go",
          "pkg/compose/create.go||pkg/compose/create.go",
          "pkg/compose/create_test.go||pkg/compose/create_test.go",
          "pkg/compose/dependencies.go||pkg/compose/dependencies.go",
          "pkg/compose/restart.go||pkg/compose/restart.go",
          "pkg/compose/start.go||pkg/compose/start.go",
          "pkg/e2e/compose_run_test.go||pkg/e2e/compose_run_test.go",
          "pkg/e2e/up_test.go||pkg/e2e/up_test.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.2",
          "12:  github.com/cucumber/godog v0.0.0-00010101000000-000000000000 // replaced; see replace for the actual version used",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go v1.16.0",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go v1.17.0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:  go.opentelemetry.io/otel/metric v0.37.0 // indirect",
          "163:  go.opentelemetry.io/proto/otlp v0.19.0 // indirect",
          "164:  golang.org/x/crypto v0.7.0 // indirect",
          "166:  golang.org/x/net v0.9.0 // indirect",
          "167:  golang.org/x/oauth2 v0.7.0 // indirect",
          "168:  golang.org/x/sys v0.7.0 // indirect",
          "",
          "[Removed Lines]",
          "165:  golang.org/x/mod v0.9.0 // indirect",
          "",
          "[Added Lines]",
          "165:  golang.org/x/exp v0.0.0-20230713183714-613f0c0eb8a1 // indirect",
          "166:  golang.org/x/mod v0.11.0 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: github.com/cncf/xds/go v0.0.0-20211011173535-cb28da3451f1/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "132: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4 h1:/inchEIKaYC1Akx+H+gqO04wryn5h75LSazbRlnya1k=",
          "133: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "136: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "137: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "138: github.com/containerd/console v1.0.3/go.mod h1:7LqA/THxQ86k76b8c/EMSiaJ3h1eZkMkXar0TQ1gf3U=",
          "",
          "[Removed Lines]",
          "134: github.com/compose-spec/compose-go v1.16.0 h1:HYk4uYWXgArHh6NG+WE4yGYayOXw+hjqJ+eJxpjWWjk=",
          "135: github.com/compose-spec/compose-go v1.16.0/go.mod h1:3yngGBGfls6FHGQsg4B1z6gz8ej9SOvmAJtxCwgbcnc=",
          "",
          "[Added Lines]",
          "134: github.com/compose-spec/compose-go v1.17.0 h1:cvje90CU94dQyTnJoHJYjx9yE4Iggse1XmGcO3Qi5ts=",
          "135: github.com/compose-spec/compose-go v1.17.0/go.mod h1:zR2tP1+kZHi5vJz7PjpW6oMoDji/Js3GHjP+hfjf70Q=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "713: golang.org/x/exp v0.0.0-20200119233911-0405dc783f0a/go.mod h1:2RIsYlXP63K8oxa1u096TMicItID8zy7Y6sNkU49FU4=",
          "714: golang.org/x/exp v0.0.0-20200207192155-f17229e696bd/go.mod h1:J/WKrq2StrnmMY6+EHIKF9dgMWnmCNThgcyBT1FY9mM=",
          "715: golang.org/x/exp v0.0.0-20200224162631-6cc2880d07d6/go.mod h1:3jZMyOhIsHpP37uCMkUooju7aAi5cS1Q23tOzKc+0MU=",
          "716: golang.org/x/image v0.0.0-20190227222117-0694c2d4d067/go.mod h1:kZ7UVZpmo3dzQBMxlp+ypCbDeSB+sBbTgSJuh5dn5js=",
          "717: golang.org/x/image v0.0.0-20190802002840-cff245a6509b/go.mod h1:FeLwcggjj3mMvU+oOTbSwawSJRM1uh48EjtB4UJZlP0=",
          "718: golang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "716: golang.org/x/exp v0.0.0-20230713183714-613f0c0eb8a1 h1:MGwJjxBy0HJshjDNfLsYO8xppfqWlA5ZT9OhtUUhTNw=",
          "717: golang.org/x/exp v0.0.0-20230713183714-613f0c0eb8a1/go.mod h1:FXUEEKJgO7OQYeo8N01OfiKP8RXMtf6e8aTskBGqWdc=",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "738: golang.org/x/mod v0.4.1/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=",
          "739: golang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=",
          "740: golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=",
          "743: golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=",
          "744: golang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=",
          "745: golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=",
          "",
          "[Removed Lines]",
          "741: golang.org/x/mod v0.9.0 h1:KENHtAZL2y3NLMYZeHY9DW8HW8V+kQyJsY/V9JlKvCs=",
          "742: golang.org/x/mod v0.9.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=",
          "",
          "[Added Lines]",
          "743: golang.org/x/mod v0.11.0 h1:bUO06HqtnRcc/7l71XBe4WcqTZ+3AH1J59zWDDwLKgU=",
          "744: golang.org/x/mod v0.11.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=",
          "",
          "---------------"
        ],
        "pkg/compose/compose.go||pkg/compose/compose.go": [
          "File: pkg/compose/compose.go -> pkg/compose/compose.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     condition := ServiceConditionRunningOrHealthy",
          "205:     restart := true",
          "206:     dependency := dcArr[0]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:     required := true",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "212:       restart, _ = strconv.ParseBool(dcArr[2])",
          "213:      }",
          "214:     }",
          "216:    }",
          "217:   }",
          "218:   project.Services = append(project.Services, *service)",
          "",
          "[Removed Lines]",
          "215:     service.DependsOn[dependency] = types.ServiceDependency{Condition: condition, Restart: restart}",
          "",
          "[Added Lines]",
          "216:     service.DependsOn[dependency] = types.ServiceDependency{Condition: condition, Restart: restart, Required: required}",
          "",
          "---------------"
        ],
        "pkg/compose/convergence.go||pkg/compose/convergence.go": [
          "File: pkg/compose/convergence.go -> pkg/compose/convergence.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "362:     return false, nil",
          "363:    }",
          "364:   }",
          "365:   return false, err",
          "366:  } else if service.Scale == 0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:   if !dependencyConfig.Required {",
          "366:    return false, nil",
          "367:   }",
          "",
          "---------------"
        ],
        "pkg/compose/convergence_test.go||pkg/compose/convergence_test.go": [
          "File: pkg/compose/convergence_test.go -> pkg/compose/convergence_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "236:   redisService := types.ServiceConfig{Name: \"redis\", Scale: 1}",
          "237:   project := types.Project{Name: strings.ToLower(testProject), Services: []types.ServiceConfig{dbService, redisService}}",
          "238:   dependencies := types.DependsOnConfig{",
          "241:   }",
          "242:   assert.NilError(t, tested.waitDependencies(context.Background(), &project, dependencies, nil))",
          "243:  })",
          "",
          "[Removed Lines]",
          "239:    \"db\":    {Condition: types.ServiceConditionStarted},",
          "240:    \"redis\": {Condition: types.ServiceConditionStarted},",
          "",
          "[Added Lines]",
          "239:    \"db\":    {Condition: types.ServiceConditionStarted, Required: true},",
          "240:    \"redis\": {Condition: types.ServiceConditionStarted, Required: true},",
          "",
          "---------------"
        ],
        "pkg/compose/create.go||pkg/compose/create.go": [
          "File: pkg/compose/create.go -> pkg/compose/create.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:      p.Services[i].DependsOn[service.Name].Condition == \"\" {",
          "140:      p.Services[i].DependsOn[service.Name] = types.ServiceDependency{",
          "141:       Condition: types.ServiceConditionStarted,",
          "142:      }",
          "143:     }",
          "144:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:       Required:  true,",
          "",
          "---------------"
        ],
        "pkg/compose/create_test.go||pkg/compose/create_test.go": [
          "File: pkg/compose/create_test.go -> pkg/compose/create_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:      Name:        \"aService\",",
          "125:      VolumesFrom: []string{\"anotherService\"},",
          "126:      DependsOn: map[string]composetypes.ServiceDependency{",
          "128:      },",
          "129:     },",
          "130:     {",
          "",
          "[Removed Lines]",
          "127:       \"anotherService\": {Condition: composetypes.ServiceConditionHealthy},",
          "",
          "[Added Lines]",
          "127:       \"anotherService\": {Condition: composetypes.ServiceConditionHealthy, Required: true},",
          "",
          "---------------"
        ],
        "pkg/compose/dependencies.go||pkg/compose/dependencies.go": [
          "File: pkg/compose/dependencies.go -> pkg/compose/dependencies.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:   graph.AddVertex(s.Name, s.Name, initialStatus)",
          "269:  }",
          "272:   for _, name := range s.GetDependencies() {",
          "273:    err := graph.AddEdge(s.Name, name)",
          "274:    if err != nil {",
          "275:     if api.IsNotFoundError(err) {",
          "276:      ds, err := project.GetDisabledService(name)",
          "277:      if err == nil {",
          "",
          "[Removed Lines]",
          "271:  for _, s := range project.Services {",
          "",
          "[Added Lines]",
          "271:  for index, s := range project.Services {",
          "275:     if !s.DependsOn[name].Required {",
          "276:      delete(s.DependsOn, name)",
          "277:      project.Services[index] = s",
          "278:      continue",
          "279:     }",
          "",
          "---------------"
        ],
        "pkg/compose/restart.go||pkg/compose/restart.go": [
          "File: pkg/compose/restart.go -> pkg/compose/restart.go"
        ],
        "pkg/compose/start.go||pkg/compose/start.go": [
          "File: pkg/compose/start.go -> pkg/compose/start.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   for _, s := range project.Services {",
          "109:    depends[s.Name] = types.ServiceDependency{",
          "110:     Condition: getDependencyCondition(s, project),",
          "111:    }",
          "112:   }",
          "113:   if options.WaitTimeout > 0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:     Required:  true,",
          "",
          "---------------"
        ],
        "pkg/e2e/compose_run_test.go||pkg/e2e/compose_run_test.go": [
          "File: pkg/e2e/compose_run_test.go -> pkg/e2e/compose_run_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   c.RunDockerComposeCmd(t, \"-f\", \"./fixtures/run-test/deps.yaml\", \"down\", \"--remove-orphans\")",
          "146:  })",
          "147: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:  t.Run(\"run with not required dependency\", func(t *testing.T) {",
          "149:   res := c.RunDockerComposeCmd(t, \"-f\", \"./fixtures/dependencies/deps-not-required.yaml\", \"run\", \"foo\")",
          "150:   assert.Assert(t, strings.Contains(res.Combined(), \"foo\"), res.Combined())",
          "151:   assert.Assert(t, !strings.Contains(res.Combined(), \"bar\"), res.Combined())",
          "153:   c.RunDockerComposeCmd(t, \"-f\", \"./fixtures/dependencies/deps-not-required.yaml\", \"down\", \"--remove-orphans\")",
          "154:  })",
          "",
          "---------------"
        ],
        "pkg/e2e/up_test.go||pkg/e2e/up_test.go": [
          "File: pkg/e2e/up_test.go -> pkg/e2e/up_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:  assert.Check(t, !strings.Contains(res.Combined(), \"Recreated\"))",
          "155: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: func TestUpWithDependencyNotRequired(t *testing.T) {",
          "158:  c := NewCLI(t)",
          "159:  const projectName = \"compose-e2e-dependency-not-required\"",
          "160:  t.Cleanup(func() {",
          "161:   c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
          "162:  })",
          "164:  res := c.RunDockerComposeCmd(t, \"-f\", \"./fixtures/dependencies/deps-not-required.yaml\", \"--project-name\", projectName,",
          "165:   \"up\", \"-d\")",
          "166:  assert.Assert(t, strings.Contains(res.Combined(), \"foo\"), res.Combined())",
          "167:  assert.Assert(t, !strings.Contains(res.Combined(), \"bar\"), res.Combined())",
          "168: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5c6924ec6f4ef00e456bfa63861c207a2e5eed1f",
      "candidate_info": {
        "commit_hash": "5c6924ec6f4ef00e456bfa63861c207a2e5eed1f",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/5c6924ec6f4ef00e456bfa63861c207a2e5eed1f",
        "files": [
          "cmd/compose/config.go",
          "go.mod",
          "go.sum",
          "pkg/compose/pull.go"
        ],
        "message": "fix --resolve-image-digests\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
        "before_after_code_files": [
          "cmd/compose/config.go||cmd/compose/config.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/pull.go||pkg/compose/pull.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/compose/config.go||cmd/compose/config.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "cmd/compose/config.go||cmd/compose/config.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "cmd/compose/config.go||cmd/compose/config.go": [
          "File: cmd/compose/config.go -> cmd/compose/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:  return cmd",
          "144: }",
          "147:  var content []byte",
          "148:  if opts.noInterpolate {",
          "163:   if err != nil {",
          "164:    return err",
          "165:   }",
          "166:  } else {",
          "187:   if err != nil {",
          "188:    return err",
          "189:   }",
          "",
          "[Removed Lines]",
          "146: func runConfig(ctx context.Context, dockerCli command.Cli, opts configOptions, services []string) error {",
          "150:   model, err := opts.ToModel(ctx, dockerCli, services)",
          "151:   if err != nil {",
          "152:    return err",
          "153:   }",
          "155:   if opts.resolveImageDigests {",
          "156:    err = resolveImageDigests(ctx, dockerCli, model)",
          "157:    if err != nil {",
          "158:     return err",
          "159:    }",
          "160:   }",
          "162:   content, err = formatModel(model, opts.Format)",
          "167:   project, err := opts.ToProject(ctx, dockerCli, services)",
          "168:   if err != nil {",
          "169:    return err",
          "170:   }",
          "172:   if !opts.noConsistency {",
          "173:    err := project.CheckContainerNameUnicity()",
          "174:    if err != nil {",
          "175:     return err",
          "176:    }",
          "177:   }",
          "179:   switch opts.Format {",
          "180:   case \"json\":",
          "181:    content, err = project.MarshalJSON()",
          "182:   case \"yaml\":",
          "183:    content, err = project.MarshalYAML()",
          "184:   default:",
          "185:    return fmt.Errorf(\"unsupported format %q\", opts.Format)",
          "186:   }",
          "",
          "[Added Lines]",
          "146: func runConfig(ctx context.Context, dockerCli command.Cli, opts configOptions, services []string) (err error) {",
          "149:   content, err = runConfigNoInterpolate(ctx, dockerCli, opts, services)",
          "154:   content, err = runConfigInterpolate(ctx, dockerCli, opts, services)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200:  if opts.Output != \"\" && len(content) > 0 {",
          "201:   return os.WriteFile(opts.Output, content, 0o666)",
          "202:  }",
          "204:  return err",
          "205: }",
          "207: func resolveImageDigests(ctx context.Context, dockerCli command.Cli, model map[string]any) (err error) {",
          "209:  p := &types.Project{",
          "",
          "[Removed Lines]",
          "203:  _, err := fmt.Fprint(dockerCli.Out(), string(content))",
          "",
          "[Added Lines]",
          "171:  _, err = fmt.Fprint(dockerCli.Out(), string(content))",
          "175: func runConfigInterpolate(ctx context.Context, dockerCli command.Cli, opts configOptions, services []string) ([]byte, error) {",
          "176:  project, err := opts.ToProject(ctx, dockerCli, services)",
          "177:  if err != nil {",
          "178:   return nil, err",
          "179:  }",
          "181:  if opts.resolveImageDigests {",
          "182:   project, err = project.WithImagesResolved(compose.ImageDigestResolver(ctx, dockerCli.ConfigFile(), dockerCli.Client()))",
          "183:   if err != nil {",
          "184:    return nil, err",
          "185:   }",
          "186:  }",
          "188:  if !opts.noConsistency {",
          "189:   err := project.CheckContainerNameUnicity()",
          "190:   if err != nil {",
          "191:    return nil, err",
          "192:   }",
          "193:  }",
          "195:  var content []byte",
          "196:  switch opts.Format {",
          "197:  case \"json\":",
          "198:   content, err = project.MarshalJSON()",
          "199:  case \"yaml\":",
          "200:   content, err = project.MarshalYAML()",
          "201:  default:",
          "202:   return nil, fmt.Errorf(\"unsupported format %q\", opts.Format)",
          "203:  }",
          "204:  if err != nil {",
          "205:   return nil, err",
          "206:  }",
          "207:  return content, nil",
          "208: }",
          "210: func runConfigNoInterpolate(ctx context.Context, dockerCli command.Cli, opts configOptions, services []string) ([]byte, error) {",
          "212:  model, err := opts.ToModel(ctx, dockerCli, services)",
          "213:  if err != nil {",
          "214:   return nil, err",
          "215:  }",
          "217:  if opts.resolveImageDigests {",
          "218:   err = resolveImageDigests(ctx, dockerCli, model)",
          "219:   if err != nil {",
          "220:    return nil, err",
          "221:   }",
          "222:  }",
          "224:  return formatModel(model, opts.Format)",
          "225: }",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  github.com/Microsoft/go-winio v0.6.2",
          "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
          "9:  github.com/buger/goterm v1.0.4",
          "11:  github.com/containerd/console v1.0.4",
          "12:  github.com/containerd/containerd v1.7.16",
          "13:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.1.0",
          "",
          "[Added Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.1.1-0.20240516145816-197e6352c64a",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "91: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "92: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "95: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "96: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "97: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
          "",
          "[Removed Lines]",
          "93: github.com/compose-spec/compose-go/v2 v2.1.0 h1:qdW2qISQlCQG8v1O2TChcdxgAWTUGgUX/CPSO+ES9+E=",
          "94: github.com/compose-spec/compose-go/v2 v2.1.0/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "[Added Lines]",
          "93: github.com/compose-spec/compose-go/v2 v2.1.1-0.20240516145816-197e6352c64a h1:R0ufvPulvRvFa8JaFEWzSJmkhjfeArXD9vKk0jpmpM4=",
          "94: github.com/compose-spec/compose-go/v2 v2.1.1-0.20240516145816-197e6352c64a/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
          "",
          "---------------"
        ],
        "pkg/compose/pull.go||pkg/compose/pull.go": [
          "File: pkg/compose/pull.go -> pkg/compose/pull.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:   }",
          "265:   inspect, err := apiClient.DistributionInspect(ctx, named.String(), auth)",
          "266:   if err != nil {",
          "268:   }",
          "269:   return inspect.Descriptor.Digest, nil",
          "270:  }",
          "",
          "[Removed Lines]",
          "267:    return \"\", err",
          "",
          "[Added Lines]",
          "267:    return \"\",",
          "268:     fmt.Errorf(\"failed ot resolve digest for %s: %w\", named.String(), err)",
          "",
          "---------------"
        ]
      }
    }
  ]
}