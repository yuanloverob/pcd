{
  "cve_id": "CVE-2024-10846",
  "cve_desc": "The compose-go library component in versions v2.10-v2.4.0 allows an authorized user who sends malicious YAML payloads to cause the compose-go to consume excessive amount of Memory and CPU cycles while parsing YAML, such as used by Docker Compose from versions  v2.27.0 to v2.29.7 included",
  "repo": "docker/compose",
  "patch_hash": "d239f0f3187a2ed5404c61f83bd5e995c81600ff",
  "patch_info": {
    "commit_hash": "d239f0f3187a2ed5404c61f83bd5e995c81600ff",
    "repo": "docker/compose",
    "commit_url": "https://github.com/docker/compose/commit/d239f0f3187a2ed5404c61f83bd5e995c81600ff#diff-33ef32bf6c23acb95f5902d7097b7a1d5128ca061167ec0716715b0b9eeaa5f6R10",
    "files": [
      "cmd/compose/config.go",
      "go.mod",
      "go.sum",
      "pkg/compose/create.go",
      "pkg/e2e/container_name_test.go",
      "pkg/e2e/fixtures/container_name/compose.yaml"
    ],
    "message": "check container_name is not in use by another service we will create\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
    "before_after_code_files": [
      "cmd/compose/config.go||cmd/compose/config.go",
      "go.mod||go.mod",
      "go.sum||go.sum",
      "pkg/compose/create.go||pkg/compose/create.go",
      "pkg/e2e/container_name_test.go||pkg/e2e/container_name_test.go"
    ]
  },
  "patch_diff": {
    "cmd/compose/config.go||cmd/compose/config.go": [
      "File: cmd/compose/config.go -> cmd/compose/config.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "169:    return err",
      "170:   }",
      "172:   switch opts.Format {",
      "173:   case \"json\":",
      "174:    content, err = project.MarshalJSON()",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "172:   if !opts.noConsistency {",
      "173:    err := project.CheckContainerNameUnicity()",
      "174:    if err != nil {",
      "175:     return err",
      "176:    }",
      "177:   }",
      "",
      "---------------"
    ],
    "go.mod||go.mod": [
      "File: go.mod -> go.mod",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:  github.com/Microsoft/go-winio v0.6.1",
      "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
      "9:  github.com/buger/goterm v1.0.4",
      "11:  github.com/containerd/console v1.0.4",
      "12:  github.com/containerd/containerd v1.7.13",
      "13:  github.com/davecgh/go-spew v1.1.1",
      "",
      "[Removed Lines]",
      "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39",
      "",
      "[Added Lines]",
      "10:  github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4",
      "",
      "---------------"
    ],
    "go.sum||go.sum": [
      "File: go.sum -> go.sum",
      "--- Hunk 1 ---",
      "[Context before]",
      "90: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
      "91: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
      "92: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
      "95: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
      "96: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
      "97: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
      "",
      "[Removed Lines]",
      "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39 h1:ZUpnv0xA75X9gy9Y7hjJm51nflGbr+2URaLXBtEic7A=",
      "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240407191136-f388192b8a39/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
      "",
      "[Added Lines]",
      "93: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4 h1:WYiZ9D0WBykHUJLlpt+w7NXX0hy+cQKKdVe7vmsNZvg=",
      "94: github.com/compose-spec/compose-go/v2 v2.0.3-0.20240416141209-60aa6409b2c4/go.mod h1:bEPizBkIojlQ20pi2vNluBa58tevvj0Y18oUSHPyfdc=",
      "",
      "---------------"
    ],
    "pkg/compose/create.go||pkg/compose/create.go": [
      "File: pkg/compose/create.go -> pkg/compose/create.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "77:   options.Services = project.ServiceNames()",
      "78:  }",
      "80:  var observedState Containers",
      "82:  if err != nil {",
      "83:   return err",
      "84:  }",
      "",
      "[Removed Lines]",
      "81:  observedState, err := s.getContainers(ctx, project.Name, oneOffInclude, true)",
      "",
      "[Added Lines]",
      "80:  err := project.CheckContainerNameUnicity()",
      "81:  if err != nil {",
      "82:   return err",
      "83:  }",
      "86:  observedState, err = s.getContainers(ctx, project.Name, oneOffInclude, true)",
      "",
      "---------------"
    ],
    "pkg/e2e/container_name_test.go||pkg/e2e/container_name_test.go": [
      "File: pkg/e2e/container_name_test.go -> pkg/e2e/container_name_test.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5:    Copyright 2022 Docker Compose CLI authors",
      "7:    Licensed under the Apache License, Version 2.0 (the \"License\");",
      "8:    you may not use this file except in compliance with the License.",
      "9:    You may obtain a copy of the License at",
      "11:        http://www.apache.org/licenses/LICENSE-2.0",
      "13:    Unless required by applicable law or agreed to in writing, software",
      "14:    distributed under the License is distributed on an \"AS IS\" BASIS,",
      "15:    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.",
      "16:    See the License for the specific language governing permissions and",
      "17:    limitations under the License.",
      "20: package e2e",
      "22: import (",
      "23:  \"testing\"",
      "25:  \"gotest.tools/v3/icmd\"",
      "26: )",
      "28: func TestUpContainerNameConflict(t *testing.T) {",
      "29:  c := NewParallelCLI(t)",
      "30:  const projectName = \"e2e-container_name_conflict\"",
      "32:  t.Cleanup(func() {",
      "33:   c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "34:  })",
      "36:  res := c.RunDockerComposeCmdNoCheck(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\")",
      "37:  res.Assert(t, icmd.Expected{ExitCode: 1, Err: `container name \"test\" is already in use`})",
      "39:  c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "40:  c.RunDockerComposeCmd(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\", \"test\")",
      "42:  c.RunDockerComposeCmd(t, \"--project-name\", projectName, \"down\")",
      "43:  c.RunDockerComposeCmd(t, \"-f\", \"fixtures/container_name/compose.yaml\", \"--project-name\", projectName, \"up\", \"another_test\")",
      "44: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "26aca867d8a225e61206650272dafec970e74239",
      "candidate_info": {
        "commit_hash": "26aca867d8a225e61206650272dafec970e74239",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/26aca867d8a225e61206650272dafec970e74239",
        "files": [
          "cmd/compose/compose.go",
          "cmd/compose/config.go",
          "cmd/compose/options.go",
          "cmd/compose/options_test.go",
          "cmd/compose/run.go",
          "cmd/compose/scale.go",
          "cmd/compose/up.go",
          "go.mod",
          "go.sum",
          "internal/sync/docker_cp.go",
          "pkg/api/api.go",
          "pkg/compose/build.go",
          "pkg/compose/compose.go",
          "pkg/compose/convergence.go",
          "pkg/compose/pull.go",
          "pkg/compose/viz_test.go",
          "pkg/e2e/e2e_config_plugin.go"
        ],
        "message": "avoid use of service.Name when iterating on project.Services\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
        "before_after_code_files": [
          "cmd/compose/compose.go||cmd/compose/compose.go",
          "cmd/compose/config.go||cmd/compose/config.go",
          "cmd/compose/options.go||cmd/compose/options.go",
          "cmd/compose/options_test.go||cmd/compose/options_test.go",
          "cmd/compose/run.go||cmd/compose/run.go",
          "cmd/compose/scale.go||cmd/compose/scale.go",
          "cmd/compose/up.go||cmd/compose/up.go",
          "go.mod||go.mod",
          "go.sum||go.sum",
          "internal/sync/docker_cp.go||internal/sync/docker_cp.go",
          "pkg/api/api.go||pkg/api/api.go",
          "pkg/compose/build.go||pkg/compose/build.go",
          "pkg/compose/compose.go||pkg/compose/compose.go",
          "pkg/compose/convergence.go||pkg/compose/convergence.go",
          "pkg/compose/pull.go||pkg/compose/pull.go",
          "pkg/compose/viz_test.go||pkg/compose/viz_test.go",
          "pkg/e2e/e2e_config_plugin.go||pkg/e2e/e2e_config_plugin.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "cmd/compose/config.go||cmd/compose/config.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "cmd/compose/config.go||cmd/compose/config.go",
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "cmd/compose/compose.go||cmd/compose/compose.go": [
          "File: cmd/compose/compose.go -> cmd/compose/compose.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:   return nil, err",
          "231:  }",
          "234:   s.CustomLabels = map[string]string{",
          "235:    api.ProjectLabel:     project.Name,",
          "237:    api.VersionLabel:     api.ComposeVersion,",
          "238:    api.WorkingDirLabel:  project.WorkingDir,",
          "239:    api.ConfigFilesLabel: strings.Join(project.ComposeFiles, \",\"),",
          "",
          "[Removed Lines]",
          "233:  for i, s := range project.Services {",
          "236:    api.ServiceLabel:     s.Name,",
          "",
          "[Added Lines]",
          "233:  for name, s := range project.Services {",
          "236:    api.ServiceLabel:     name,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:   if len(o.EnvFiles) != 0 {",
          "243:    s.CustomLabels[api.EnvironmentFileLabel] = strings.Join(o.EnvFiles, \",\")",
          "244:   }",
          "246:  }",
          "248:  project.WithoutUnnecessaryResources()",
          "",
          "[Removed Lines]",
          "245:   project.Services[i] = s",
          "",
          "[Added Lines]",
          "245:   project.Services[name] = s",
          "",
          "---------------"
        ],
        "cmd/compose/config.go||cmd/compose/config.go": [
          "File: cmd/compose/config.go -> cmd/compose/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "210:   if err != nil {",
          "211:    return err",
          "212:   }",
          "214:  }",
          "215:  return nil",
          "216: }",
          "",
          "[Removed Lines]",
          "213:   fmt.Fprintf(dockerCli.Out(), \"%s %s\\n\", s.Name, hash)",
          "",
          "[Added Lines]",
          "213:   fmt.Fprintf(dockerCli.Out(), \"%s %s\\n\", name, hash)",
          "",
          "---------------"
        ],
        "cmd/compose/options.go||cmd/compose/options.go": [
          "File: cmd/compose/options.go -> cmd/compose/options.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: func applyPlatforms(project *types.Project, buildForSinglePlatform bool) error {",
          "27:  defaultPlatform := project.Environment[\"DOCKER_DEFAULT_PLATFORM\"]",
          "29:   if service.Build == nil {",
          "30:    continue",
          "31:   }",
          "",
          "[Removed Lines]",
          "28:  for _, service := range project.Services {",
          "",
          "[Added Lines]",
          "28:  for name, service := range project.Services {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:   if defaultPlatform != \"\" && service.Platform == \"\" {",
          "35:    if len(service.Build.Platforms) > 0 && !utils.StringContains(service.Build.Platforms, defaultPlatform) {",
          "37:    }",
          "38:    service.Platform = defaultPlatform",
          "39:   }",
          "",
          "[Removed Lines]",
          "36:     return fmt.Errorf(\"service %q build.platforms does not support value set by DOCKER_DEFAULT_PLATFORM: %s\", service.Name, defaultPlatform)",
          "",
          "[Added Lines]",
          "36:     return fmt.Errorf(\"service %q build.platforms does not support value set by DOCKER_DEFAULT_PLATFORM: %s\", name, defaultPlatform)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:   if service.Platform != \"\" {",
          "42:    if len(service.Build.Platforms) > 0 {",
          "43:     if !utils.StringContains(service.Build.Platforms, service.Platform) {",
          "45:     }",
          "46:    }",
          "",
          "[Removed Lines]",
          "44:      return fmt.Errorf(\"service %q build configuration does not support platform: %s\", service.Name, service.Platform)",
          "",
          "[Added Lines]",
          "44:      return fmt.Errorf(\"service %q build configuration does not support platform: %s\", name, service.Platform)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "69:    service.Build.Platforms = nil",
          "70:   }",
          "71:  }",
          "72:  return nil",
          "73: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:   project.Services[name] = service",
          "",
          "---------------"
        ],
        "cmd/compose/options_test.go||cmd/compose/options_test.go": [
          "File: cmd/compose/options_test.go -> cmd/compose/options_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:     \"DOCKER_DEFAULT_PLATFORM\": \"commodore/64\",",
          "102:    },",
          "103:    Services: types.Services{",
          "105:      Name:  \"test\",",
          "106:      Image: \"foo\",",
          "107:      Build: &types.BuildConfig{",
          "",
          "[Removed Lines]",
          "104:     \"foo\": {",
          "",
          "[Added Lines]",
          "104:     \"test\": {",
          "",
          "---------------"
        ],
        "cmd/compose/run.go||cmd/compose/run.go": [
          "File: cmd/compose/run.go -> cmd/compose/run.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:   target.Volumes = append(target.Volumes, volume)",
          "106:  }",
          "111:    break",
          "112:   }",
          "113:  }",
          "",
          "[Removed Lines]",
          "108:  for i, s := range project.Services {",
          "109:   if s.Name == options.Service {",
          "110:    project.Services[i] = target",
          "",
          "[Added Lines]",
          "108:  for name := range project.Services {",
          "109:   if name == options.Service {",
          "110:    project.Services[name] = target",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:   QuietPull:         options.quietPull,",
          "280:  }",
          "284:    service.StdinOpen = options.interactive",
          "286:   }",
          "287:  }",
          "",
          "[Removed Lines]",
          "282:  for i, service := range project.Services {",
          "283:   if service.Name == options.Service {",
          "285:    project.Services[i] = service",
          "",
          "[Added Lines]",
          "282:  for name, service := range project.Services {",
          "283:   if name == options.Service {",
          "285:    project.Services[name] = service",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "301:  dependencies := types.Services{}",
          "302:  var requestedService types.ServiceConfig",
          "303:  for name, service := range project.Services {",
          "305:    dependencies[name] = service",
          "306:   } else {",
          "307:    requestedService = service",
          "",
          "[Removed Lines]",
          "304:   if service.Name != requestedServiceName {",
          "",
          "[Added Lines]",
          "304:   if name != requestedServiceName {",
          "",
          "---------------"
        ],
        "cmd/compose/scale.go||cmd/compose/scale.go": [
          "File: cmd/compose/scale.go -> cmd/compose/scale.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:  }",
          "75:  for key, value := range serviceReplicaTuples {",
          "87:   }",
          "88:  }",
          "90:  return backend.Scale(ctx, project, api.ScaleOptions{Services: services})",
          "",
          "[Removed Lines]",
          "76:   for i, service := range project.Services {",
          "77:    if service.Name != key {",
          "78:     continue",
          "79:    }",
          "80:    value := value",
          "81:    service.Scale = &value",
          "82:    if service.Deploy != nil {",
          "83:     service.Deploy.Replicas = &value",
          "84:    }",
          "85:    project.Services[i] = service",
          "86:    break",
          "",
          "[Added Lines]",
          "76:   service, err := project.GetService(key)",
          "77:   if err != nil {",
          "78:    return err",
          "80:   service.SetScale(value)",
          "81:   project.Services[key] = service",
          "",
          "---------------"
        ],
        "cmd/compose/up.go||cmd/compose/up.go": [
          "File: cmd/compose/up.go -> cmd/compose/up.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: }",
          "262: func setServiceScale(project *types.Project, name string, replicas int) error {",
          "278:  }",
          "280: }",
          "",
          "[Removed Lines]",
          "263:  for i, s := range project.Services {",
          "264:   if s.Name != name {",
          "265:    continue",
          "266:   }",
          "268:   service, err := project.GetService(name)",
          "269:   if err != nil {",
          "270:    return err",
          "271:   }",
          "272:   service.Scale = &replicas",
          "273:   if service.Deploy != nil {",
          "274:    service.Deploy.Replicas = &replicas",
          "275:   }",
          "276:   project.Services[i] = service",
          "277:   return nil",
          "279:  return fmt.Errorf(\"unknown service %q\", name)",
          "",
          "[Added Lines]",
          "263:  service, err := project.GetService(name)",
          "264:  if err != nil {",
          "265:   return err",
          "267:  service.SetScale(replicas)",
          "268:  project.Services[name] = service",
          "269:  return nil",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.7",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-20231123162526-11ef9572f1a4",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-beta.1",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "133: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "134: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "137: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "138: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "139: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "135: github.com/compose-spec/compose-go/v2 v2.0.0-20231123162526-11ef9572f1a4 h1:Lr78By808iuG+2gTyxIDslRpKQCk/lcRqElKsrhzp+U=",
          "136: github.com/compose-spec/compose-go/v2 v2.0.0-20231123162526-11ef9572f1a4/go.mod h1:PWCgeD8cxiI/DmdpBM407CuLDrZ2W4xuS6/Z9jAi0YQ=",
          "",
          "[Added Lines]",
          "135: github.com/compose-spec/compose-go/v2 v2.0.0-beta.1 h1:/A+2QMQVSsAmr9Gn5fm6YwaufjRZmWBnHYjr0oCyGiw=",
          "136: github.com/compose-spec/compose-go/v2 v2.0.0-beta.1/go.mod h1:PWCgeD8cxiI/DmdpBM407CuLDrZ2W4xuS6/Z9jAi0YQ=",
          "",
          "---------------"
        ],
        "internal/sync/docker_cp.go||internal/sync/docker_cp.go": [
          "File: internal/sync/docker_cp.go -> internal/sync/docker_cp.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "62: }",
          "64: func (d *DockerCopy) sync(ctx context.Context, service types.ServiceConfig, pathMapping PathMapping) error {",
          "70:  if fi, statErr := os.Stat(pathMapping.HostPath); statErr == nil {",
          "71:   if fi.IsDir() {",
          "",
          "[Removed Lines]",
          "65:  scale := 1",
          "66:  if service.Scale != nil {",
          "67:   scale = *service.Scale",
          "68:  }",
          "",
          "[Added Lines]",
          "65:  scale := service.GetScale()",
          "",
          "---------------"
        ],
        "pkg/api/api.go||pkg/api/api.go": [
          "File: pkg/api/api.go -> pkg/api/api.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "147: func (o BuildOptions) Apply(project *types.Project) error {",
          "148:  platform := project.Environment[\"DOCKER_DEFAULT_PLATFORM\"]",
          "150:   if service.Image == \"\" && service.Build == nil {",
          "152:   }",
          "154:   if service.Build == nil {",
          "",
          "[Removed Lines]",
          "149:  for i, service := range project.Services {",
          "151:    return fmt.Errorf(\"invalid service %q. Must specify either image or build\", service.Name)",
          "",
          "[Added Lines]",
          "149:  for name, service := range project.Services {",
          "151:    return fmt.Errorf(\"invalid service %q. Must specify either image or build\", name)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "156:   }",
          "157:   if platform != \"\" {",
          "158:    if len(service.Build.Platforms) > 0 && !utils.StringContains(service.Build.Platforms, platform) {",
          "160:    }",
          "161:    service.Platform = platform",
          "162:   }",
          "163:   if service.Platform != \"\" {",
          "164:    if len(service.Build.Platforms) > 0 && !utils.StringContains(service.Build.Platforms, service.Platform) {",
          "166:    }",
          "167:   }",
          "169:   service.Build.Pull = service.Build.Pull || o.Pull",
          "170:   service.Build.NoCache = service.Build.NoCache || o.NoCache",
          "173:  }",
          "174:  return nil",
          "175: }",
          "",
          "[Removed Lines]",
          "159:     return fmt.Errorf(\"service %q build.platforms does not support value set by DOCKER_DEFAULT_PLATFORM: %s\", service.Name, platform)",
          "165:     return fmt.Errorf(\"service %q build configuration does not support platform: %s\", service.Name, service.Platform)",
          "172:   project.Services[i] = service",
          "",
          "[Added Lines]",
          "159:     return fmt.Errorf(\"service %q build.platforms does not support value set by DOCKER_DEFAULT_PLATFORM: %s\", name, platform)",
          "165:     return fmt.Errorf(\"service %q build configuration does not support platform: %s\", name, service.Platform)",
          "172:   project.Services[name] = service",
          "",
          "---------------"
        ],
        "pkg/compose/build.go||pkg/compose/build.go": [
          "File: pkg/compose/build.go -> pkg/compose/build.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "189:    return err",
          "190:   }",
          "193:   if err != nil {",
          "194:    return err",
          "195:   }",
          "",
          "[Removed Lines]",
          "192:   digest, err := s.doBuildBuildkit(ctx, service.Name, buildOptions, w, nodes)",
          "",
          "[Added Lines]",
          "192:   digest, err := s.doBuildBuildkit(ctx, name, buildOptions, w, nodes)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221: }",
          "223: func (s *composeService) ensureImagesExists(ctx context.Context, project *types.Project, buildOpts *api.BuildOptions, quietPull bool) error {",
          "225:   if service.Image == \"\" && service.Build == nil {",
          "227:   }",
          "228:  }",
          "",
          "[Removed Lines]",
          "224:  for _, service := range project.Services {",
          "226:    return fmt.Errorf(\"invalid service %q. Must specify either image or build\", service.Name)",
          "",
          "[Added Lines]",
          "224:  for name, service := range project.Services {",
          "226:    return fmt.Errorf(\"invalid service %q. Must specify either image or build\", name)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "261:  }",
          "265:   image := api.GetImageNameOrDefault(service, project.Name)",
          "266:   digest, ok := images[image]",
          "267:   if ok {",
          "",
          "[Removed Lines]",
          "264:  for _, service := range project.Services {",
          "",
          "[Added Lines]",
          "264:  for name, service := range project.Services {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "270:    }",
          "271:    service.CustomLabels.Add(api.ImageDigestLabel, digest)",
          "272:   }",
          "273:  }",
          "274:  return nil",
          "275: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273:   project.Services[name] = service",
          "",
          "---------------"
        ],
        "pkg/compose/compose.go||pkg/compose/compose.go": [
          "File: pkg/compose/compose.go -> pkg/compose/compose.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:     Image:  c.Image,",
          "194:     Labels: c.Labels,",
          "195:    }",
          "197:   }",
          "198:   service.Scale = increment(service.Scale)",
          "199:  }",
          "200:  for name, service := range set {",
          "201:   dependencies := service.Labels[api.DependenciesLabel]",
          "",
          "[Removed Lines]",
          "196:    set[serviceLabel] = service",
          "",
          "[Added Lines]",
          "199:   set[serviceLabel] = service",
          "",
          "---------------"
        ],
        "pkg/compose/convergence.go||pkg/compose/convergence.go": [
          "File: pkg/compose/convergence.go -> pkg/compose/convergence.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:  return err",
          "206: }",
          "209: func (c *convergence) resolveServiceReferences(service *types.ServiceConfig) error {",
          "210:  err := c.resolveVolumeFrom(service)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208: func getScale(config types.ServiceConfig) (int, error) {",
          "209:  scale := config.GetScale()",
          "210:  if scale > 1 && config.ContainerName != \"\" {",
          "211:   return 0, fmt.Errorf(doubledContainerNameWarning,",
          "212:    config.Name,",
          "213:    config.ContainerName)",
          "214:  }",
          "215:  return scale, nil",
          "216: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "428:    }",
          "429:   }",
          "430:   return false, err",
          "433:   return false, nil",
          "434:  }",
          "",
          "[Removed Lines]",
          "431:  } else if service.Scale != nil && *service.Scale == 0 {",
          "",
          "[Added Lines]",
          "441:  } else if service.GetScale() == 0 {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "456: }",
          "474: func (s *composeService) createContainer(ctx context.Context, project *types.Project, service types.ServiceConfig,",
          "475:  name string, number int, opts createOptions) (container moby.Container, err error) {",
          "476:  w := progress.ContextWriter(ctx)",
          "",
          "[Removed Lines]",
          "458: func getScale(config types.ServiceConfig) (int, error) {",
          "459:  scale := 1",
          "460:  if config.Scale != nil {",
          "461:   scale = *config.Scale",
          "462:  } else if config.Deploy != nil && config.Deploy.Replicas != nil {",
          "464:   scale = *config.Deploy.Replicas",
          "465:  }",
          "466:  if scale > 1 && config.ContainerName != \"\" {",
          "467:   return 0, fmt.Errorf(doubledContainerNameWarning,",
          "468:    config.Name,",
          "469:    config.ContainerName)",
          "470:  }",
          "471:  return scale, nil",
          "472: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "754:  }",
          "756:  if len(containers) == 0 {",
          "758:    return nil",
          "759:   }",
          "760:   return fmt.Errorf(\"service %q has no container to start\", service.Name)",
          "",
          "[Removed Lines]",
          "757:   if scale, err := getScale(service); err != nil && scale == 0 {",
          "",
          "[Added Lines]",
          "751:   if service.GetScale() == 0 {",
          "",
          "---------------"
        ],
        "pkg/compose/pull.go||pkg/compose/pull.go": [
          "File: pkg/compose/pull.go -> pkg/compose/pull.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:  )",
          "66:  i := 0",
          "68:   if service.Image == \"\" {",
          "69:    w.Event(progress.Event{",
          "71:     Status: progress.Done,",
          "72:     Text:   \"Skipped - No image to be pulled\",",
          "73:    })",
          "",
          "[Removed Lines]",
          "67:  for _, service := range project.Services {",
          "70:     ID:     service.Name,",
          "",
          "[Added Lines]",
          "67:  for name, service := range project.Services {",
          "70:     ID:     name,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:   switch service.PullPolicy {",
          "78:   case types.PullPolicyNever, types.PullPolicyBuild:",
          "79:    w.Event(progress.Event{",
          "81:     Status: progress.Done,",
          "82:     Text:   \"Skipped\",",
          "83:    })",
          "",
          "[Removed Lines]",
          "80:     ID:     service.Name,",
          "",
          "[Added Lines]",
          "80:     ID:     name,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85:   case types.PullPolicyMissing, types.PullPolicyIfNotPresent:",
          "86:    if imageAlreadyPresent(service.Image, images) {",
          "87:     w.Event(progress.Event{",
          "89:      Status: progress.Done,",
          "90:      Text:   \"Skipped - Image is already present locally\",",
          "91:     })",
          "",
          "[Removed Lines]",
          "88:      ID:     service.Name,",
          "",
          "[Added Lines]",
          "88:      ID:     name,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "96:   if service.Build != nil && opts.IgnoreBuildable {",
          "97:    w.Event(progress.Event{",
          "99:     Status: progress.Done,",
          "100:     Text:   \"Skipped - Image can be built\",",
          "101:    })",
          "",
          "[Removed Lines]",
          "98:     ID:     service.Name,",
          "",
          "[Added Lines]",
          "98:     ID:     name,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "105:   if s, ok := imagesBeingPulled[service.Image]; ok {",
          "106:    w.Event(progress.Event{",
          "108:     Status: progress.Done,",
          "109:     Text:   fmt.Sprintf(\"Skipped - Image is already being pulled by %v\", s),",
          "110:    })",
          "",
          "[Removed Lines]",
          "107:     ID:     service.Name,",
          "",
          "[Added Lines]",
          "107:     ID:     name,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "114:   imagesBeingPulled[service.Image] = service.Name",
          "117:   eg.Go(func() error {",
          "118:    _, err := s.pullServiceImage(ctx, service, s.configFile(), w, false, project.Environment[\"DOCKER_DEFAULT_PLATFORM\"])",
          "119:    if err != nil {",
          "",
          "[Removed Lines]",
          "116:   idx, service := i, service",
          "",
          "[Added Lines]",
          "116:   idx, name, service := i, name, service",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "124:     if !opts.IgnoreFailures && service.Build == nil {",
          "125:      if s.dryRun {",
          "126:       w.Event(progress.Event{",
          "128:        Status: progress.Error,",
          "129:        Text:   fmt.Sprintf(\" - Pull error for image: %s\", service.Image),",
          "130:       })",
          "",
          "[Removed Lines]",
          "127:        ID:     service.Name,",
          "",
          "[Added Lines]",
          "127:        ID:     name,",
          "",
          "---------------"
        ],
        "pkg/compose/viz_test.go||pkg/compose/viz_test.go": [
          "File: pkg/compose/viz_test.go -> pkg/compose/viz_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:   allowedEdges := make(map[string][]string)",
          "154:    for depName := range service.DependsOn {",
          "156:    }",
          "157:   }",
          "158:   for serviceName, dependencies := range allowedEdges {",
          "159:    for _, dependencyName := range dependencies {",
          "",
          "[Removed Lines]",
          "152:   for _, service := range project.Services {",
          "153:    allowedEdges[service.Name] = make([]string, 0, len(service.DependsOn))",
          "155:     allowedEdges[service.Name] = append(allowedEdges[service.Name], depName)",
          "",
          "[Added Lines]",
          "152:   for name, service := range project.Services {",
          "153:    allowed := make([]string, 0, len(service.DependsOn))",
          "155:     allowed = append(allowed, depName)",
          "157:    allowedEdges[name] = allowed",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   forbiddenEdges := make(map[string][]string)",
          "168:    for _, serviceName := range project.ServiceNames() {",
          "169:     _, edgeExists := service.DependsOn[serviceName]",
          "170:     if !edgeExists {",
          "172:     }",
          "173:    }",
          "174:   }",
          "",
          "[Removed Lines]",
          "166:   for _, service := range project.Services {",
          "167:    forbiddenEdges[service.Name] = make([]string, 0, len(project.ServiceNames())-len(service.DependsOn))",
          "171:      forbiddenEdges[service.Name] = append(forbiddenEdges[service.Name], serviceName)",
          "",
          "[Added Lines]",
          "167:   for name, service := range project.Services {",
          "168:    forbiddenEdges[name] = make([]string, 0, len(project.ServiceNames())-len(service.DependsOn))",
          "172:      forbiddenEdges[name] = append(forbiddenEdges[name], serviceName)",
          "",
          "---------------"
        ],
        "pkg/e2e/e2e_config_plugin.go||pkg/e2e/e2e_config_plugin.go": [
          "File: pkg/e2e/e2e_config_plugin.go -> pkg/e2e/e2e_config_plugin.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: package e2e",
          "",
          "[Removed Lines]",
          "21: const composeStandaloneMode = false",
          "",
          "[Added Lines]",
          "21: const composeStandaloneMode = true",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8db0cba0af23d1cc4df0726d9aba525e8c9f95ad",
      "candidate_info": {
        "commit_hash": "8db0cba0af23d1cc4df0726d9aba525e8c9f95ad",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/8db0cba0af23d1cc4df0726d9aba525e8c9f95ad",
        "files": [
          ".github/workflows/ci.yml",
          "go.mod",
          "go.sum",
          "pkg/compose/create.go"
        ],
        "message": "bump compose-go to version v2.2.0\n\nSigned-off-by: Guillaume Lours <705411+glours@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/create.go||pkg/compose/create.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  github.com/Microsoft/go-winio v0.6.2",
          "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
          "9:  github.com/buger/goterm v1.0.4",
          "11:  github.com/containerd/containerd v1.7.22",
          "12:  github.com/containerd/platforms v0.2.1",
          "13:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.1.6",
          "",
          "[Added Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.2.0",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: github.com/cncf/xds/go v0.0.0-20231128003011-0fa0005c9caa/go.mod h1:x/1Gn8zydmfq8dk6e9PdstVsDgu9RuyIIJqAaF//0IM=",
          "86: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "90: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "91: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "92: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
          "",
          "[Removed Lines]",
          "88: github.com/compose-spec/compose-go/v2 v2.1.6 h1:d0Cs0DffmOwmSzs0YPHwKCskknGq2jfGg4uGowlEpps=",
          "89: github.com/compose-spec/compose-go/v2 v2.1.6/go.mod h1:lFN0DrMxIncJGYAXTfWuajfwj5haBJqrBkarHcnjJKc=",
          "",
          "[Added Lines]",
          "88: github.com/compose-spec/compose-go/v2 v2.2.0 h1:VsQosGhuO+H9wh5laiIiAe4TVd73kQ5NWwmNrdm0HRA=",
          "89: github.com/compose-spec/compose-go/v2 v2.2.0/go.mod h1:lFN0DrMxIncJGYAXTfWuajfwj5haBJqrBkarHcnjJKc=",
          "",
          "---------------"
        ],
        "pkg/compose/create.go||pkg/compose/create.go": [
          "File: pkg/compose/create.go -> pkg/compose/create.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "646:  }",
          "648:  for _, device := range s.Devices {",
          "667:   resources.Devices = append(resources.Devices, container.DeviceMapping{",
          "671:   })",
          "672:  }",
          "",
          "[Removed Lines]",
          "650:   src := \"\"",
          "651:   dst := \"\"",
          "652:   permissions := \"rwm\"",
          "653:   arr := strings.Split(device, \":\")",
          "654:   switch len(arr) {",
          "655:   case 3:",
          "656:    permissions = arr[2]",
          "657:    fallthrough",
          "658:   case 2:",
          "659:    dst = arr[1]",
          "660:    fallthrough",
          "661:   case 1:",
          "662:    src = arr[0]",
          "663:   }",
          "664:   if dst == \"\" {",
          "665:    dst = src",
          "666:   }",
          "668:    PathOnHost:        src,",
          "669:    PathInContainer:   dst,",
          "670:    CgroupPermissions: permissions,",
          "",
          "[Added Lines]",
          "650:    PathOnHost:        device.Source,",
          "651:    PathInContainer:   device.Target,",
          "652:    CgroupPermissions: device.Permissions,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a000dcff1300e137bb52467d3934e9211a017ed",
      "candidate_info": {
        "commit_hash": "6a000dcff1300e137bb52467d3934e9211a017ed",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/6a000dcff1300e137bb52467d3934e9211a017ed",
        "files": [
          "go.mod",
          "go.sum",
          "pkg/compose/create.go"
        ],
        "message": "go.mod: github.com/compose-spec/compose-go v2.1.3\n\nfull diff:\n\n- https://github.com/compose-spec/compose-go/compare/v2.1.2...v2.1.3\n\nSigned-off-by: Albin Kerouanton <albinker@gmail.com>\nSigned-off-by: Sebastiaan van Stijn <github@gone.nl>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/compose/create.go||pkg/compose/create.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum",
            "pkg/compose/create.go||pkg/compose/create.go"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:  github.com/Microsoft/go-winio v0.6.2",
          "8:  github.com/acarl005/stripansi v0.0.0-20180116102854-5a71ef0e047d",
          "9:  github.com/buger/goterm v1.0.4",
          "11:  github.com/containerd/console v1.0.4",
          "12:  github.com/containerd/containerd v1.7.18",
          "13:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.1.2",
          "",
          "[Added Lines]",
          "10:  github.com/compose-spec/compose-go/v2 v2.1.3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:  github.com/matttproud/golang_protobuf_extensions v1.0.4 // indirect",
          "128:  github.com/mgutz/ansi v0.0.0-20170206155736-9520e82c474b // indirect",
          "129:  github.com/miekg/pkcs11 v1.1.1 // indirect",
          "132:  github.com/moby/docker-image-spec v1.3.1 // indirect",
          "133:  github.com/moby/locker v1.0.1 // indirect",
          "134:  github.com/moby/spdystream v0.2.0 // indirect",
          "",
          "[Removed Lines]",
          "130:  github.com/mitchellh/copystructure v1.2.0 // indirect",
          "131:  github.com/mitchellh/reflectwalk v1.0.2 // indirect",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "88: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "91: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "92: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "93: github.com/containerd/console v1.0.4 h1:F2g4+oChYvBTsASRTz8NP6iIAi97J3TtSAsLbIFn4ro=",
          "",
          "[Removed Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.1.2 h1:N2XmNYg5jHNBaU+4/zSAe2UrZLq7Kkp1eSsOHfAHbxQ=",
          "90: github.com/compose-spec/compose-go/v2 v2.1.2/go.mod h1:NJGRGazJfh0tD7d13h66KDVvyOHK49Wil2CIhoffiD0=",
          "",
          "[Added Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.1.3 h1:bD67uqLuL/XgkAK6ir3xZvNLFPxPScEi1KW7R5esrLE=",
          "90: github.com/compose-spec/compose-go/v2 v2.1.3/go.mod h1:lFN0DrMxIncJGYAXTfWuajfwj5haBJqrBkarHcnjJKc=",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312: github.com/miekg/pkcs11 v1.0.2/go.mod h1:XsNlhZGX73bx86s2hdc/FuaLm2CPZJemRLMA+WTFxgs=",
          "313: github.com/miekg/pkcs11 v1.1.1 h1:Ugu9pdy6vAYku5DEpVWVFPYnzV+bxB+iRdbuFSu7TvU=",
          "314: github.com/miekg/pkcs11 v1.1.1/go.mod h1:XsNlhZGX73bx86s2hdc/FuaLm2CPZJemRLMA+WTFxgs=",
          "317: github.com/mitchellh/go-ps v1.0.0 h1:i6ampVEEF4wQFF+bkYfwYgY+F/uYJDktmvLPf7qIgjc=",
          "318: github.com/mitchellh/go-ps v1.0.0/go.mod h1:J4lOc8z8yJs6vUwklHw2XEIiT4z4C40KtWVN3nvg8Pg=",
          "319: github.com/mitchellh/mapstructure v0.0.0-20150613213606-2caf8efc9366/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=",
          "320: github.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=",
          "321: github.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=",
          "324: github.com/moby/buildkit v0.14.1 h1:2epLCZTkn4CikdImtsLtIa++7DzCimrrZCT1sway+oI=",
          "325: github.com/moby/buildkit v0.14.1/go.mod h1:1XssG7cAqv5Bz1xcGMxJL123iCv5TYN4Z/qf647gfuk=",
          "326: github.com/moby/docker-image-spec v1.3.1 h1:jMKff3w6PgbfSa69GfNg+zN/XLhfXJGnEx3Nl2EsFP0=",
          "",
          "[Removed Lines]",
          "315: github.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=",
          "316: github.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=",
          "322: github.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=",
          "323: github.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "pkg/compose/create.go||pkg/compose/create.go": [
          "File: pkg/compose/create.go -> pkg/compose/create.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:   WorkingDir:      service.WorkingDir,",
          "270:   Entrypoint:      entrypoint,",
          "271:   NetworkDisabled: service.NetworkMode == \"disabled\",",
          "273:   Labels:          labels,",
          "274:   StopSignal:      service.StopSignal,",
          "275:   Env:             ToMobyEnv(env),",
          "",
          "[Removed Lines]",
          "272:   MacAddress:      macAddress, //nolint:staticcheck // ignore SA1019: field is deprecated, but still used on API < v1.44.",
          "",
          "[Added Lines]",
          "272:   MacAddress:      macAddress,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1258:   Internal:   n.Internal,",
          "1259:   Attachable: n.Attachable,",
          "1260:   IPAM:       ipam,",
          "1262:  }",
          "1264:  if n.Ipam.Driver != \"\" || len(n.Ipam.Config) > 0 {",
          "",
          "[Removed Lines]",
          "1261:   EnableIPv6: &n.EnableIPv6,",
          "",
          "[Added Lines]",
          "1261:   EnableIPv6: n.EnableIPv6,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb4249ece4886de93d7c9ee54723aad77d77e560",
      "candidate_info": {
        "commit_hash": "eb4249ece4886de93d7c9ee54723aad77d77e560",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/eb4249ece4886de93d7c9ee54723aad77d77e560",
        "files": [
          "go.mod",
          "go.sum",
          "pkg/remote/git.go",
          "pkg/remote/oci.go"
        ],
        "message": "bump compose-go to v2.0.0-rc.2\n\nSigned-off-by: Nicolas De Loof <nicolas.deloof@gmail.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum",
          "pkg/remote/git.go||pkg/remote/git.go",
          "pkg/remote/oci.go||pkg/remote/oci.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.12",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-rc.1",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-rc.2",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "88: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "91: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "92: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "93: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-rc.1 h1:0nnSpdYg29uaQOU/YJ1YSgYgwkQr/XNZ0QAFtEPTtIA=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-rc.1/go.mod h1:IVsvFyGVhw4FASzUtlWNVaAOhYmakXAFY9IlZ7LAuD8=",
          "",
          "[Added Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-rc.2 h1:eJ01FpliL/02KvsaPyH1bSLbM1S70yWQUojHVRbyvy4=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-rc.2/go.mod h1:IVsvFyGVhw4FASzUtlWNVaAOhYmakXAFY9IlZ7LAuD8=",
          "",
          "---------------"
        ],
        "pkg/remote/git.go||pkg/remote/git.go": [
          "File: pkg/remote/git.go -> pkg/remote/git.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: func NewGitRemoteLoader(offline bool) loader.ResourceLoader {",
          "49:  return gitRemoteLoader{",
          "50:   offline: offline,",
          "51:  }",
          "52: }",
          "54: type gitRemoteLoader struct {",
          "55:  offline bool",
          "56: }",
          "58: func (g gitRemoteLoader) Accept(path string) bool {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:   known:   map[string]string{},",
          "57:  known   map[string]string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   return \"\", err",
          "77:  }",
          "97:   }",
          "99:   if err != nil {",
          "100:    return \"\", err",
          "101:   }",
          "104:  if ref.SubDir != \"\" {",
          "105:   local = filepath.Join(local, ref.SubDir)",
          "106:  }",
          "",
          "[Removed Lines]",
          "79:  if ref.Commit == \"\" {",
          "80:   ref.Commit = \"HEAD\" // default branch",
          "81:  }",
          "83:  err = g.resolveGitRef(ctx, path, ref)",
          "84:  if err != nil {",
          "85:   return \"\", err",
          "86:  }",
          "88:  cache, err := cacheDir()",
          "89:  if err != nil {",
          "90:   return \"\", fmt.Errorf(\"initializing remote resource cache: %w\", err)",
          "91:  }",
          "93:  local := filepath.Join(cache, ref.Commit)",
          "94:  if _, err := os.Stat(local); os.IsNotExist(err) {",
          "95:   if g.offline {",
          "96:    return \"\", nil",
          "98:   err = g.checkout(ctx, local, ref)",
          "102:  }",
          "",
          "[Added Lines]",
          "81:  local, ok := g.known[path]",
          "82:  if !ok {",
          "83:   if ref.Commit == \"\" {",
          "84:    ref.Commit = \"HEAD\" // default branch",
          "87:   err = g.resolveGitRef(ctx, path, ref)",
          "92:   cache, err := cacheDir()",
          "93:   if err != nil {",
          "94:    return \"\", fmt.Errorf(\"initializing remote resource cache: %w\", err)",
          "95:   }",
          "97:   local = filepath.Join(cache, ref.Commit)",
          "98:   if _, err := os.Stat(local); os.IsNotExist(err) {",
          "99:    if g.offline {",
          "100:     return \"\", nil",
          "101:    }",
          "102:    err = g.checkout(ctx, local, ref)",
          "103:    if err != nil {",
          "104:     return \"\", err",
          "105:    }",
          "106:   }",
          "107:   g.known[path] = local",
          "108:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "114:  return local, err",
          "115: }",
          "117: func (g gitRemoteLoader) resolveGitRef(ctx context.Context, path string, ref *gitutil.GitRef) error {",
          "118:  if !commitSHA.MatchString(ref.Commit) {",
          "119:   cmd := exec.CommandContext(ctx, \"git\", \"ls-remote\", \"--exit-code\", ref.Remote, ref.Commit)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: func (g gitRemoteLoader) Dir(path string) string {",
          "123:  return g.known[path]",
          "124: }",
          "",
          "---------------"
        ],
        "pkg/remote/oci.go||pkg/remote/oci.go": [
          "File: pkg/remote/oci.go -> pkg/remote/oci.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:  return ociRemoteLoader{",
          "51:   dockerCli: dockerCli,",
          "52:   offline:   offline,",
          "53:  }",
          "54: }",
          "56: type ociRemoteLoader struct {",
          "57:  dockerCli command.Cli",
          "58:  offline   bool",
          "59: }",
          "61: const prefix = \"oci://\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:   known:     map[string]string{},",
          "60:  known     map[string]string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:   return \"\", nil",
          "78:  }",
          "106:   if err != nil {",
          "107:    return \"\", err",
          "108:   }",
          "113:   }",
          "114:  }",
          "116: }",
          "118: func (g ociRemoteLoader) pullComposeFiles(ctx context.Context, local string, composeFile string, manifest v1.Manifest, ref reference.Named, resolver *imagetools.Resolver) error {",
          "",
          "[Removed Lines]",
          "80:  ref, err := reference.ParseDockerRef(path[len(prefix):])",
          "81:  if err != nil {",
          "82:   return \"\", err",
          "83:  }",
          "85:  opt, err := storeutil.GetImageConfig(g.dockerCli, nil)",
          "86:  if err != nil {",
          "87:   return \"\", err",
          "88:  }",
          "89:  resolver := imagetools.New(opt)",
          "91:  content, descriptor, err := resolver.Get(ctx, ref.String())",
          "92:  if err != nil {",
          "93:   return \"\", err",
          "94:  }",
          "96:  cache, err := cacheDir()",
          "97:  if err != nil {",
          "98:   return \"\", fmt.Errorf(\"initializing remote resource cache: %w\", err)",
          "99:  }",
          "101:  local := filepath.Join(cache, descriptor.Digest.Hex())",
          "102:  composeFile := filepath.Join(local, \"compose.yaml\")",
          "103:  if _, err = os.Stat(local); os.IsNotExist(err) {",
          "104:   var manifest v1.Manifest",
          "105:   err = json.Unmarshal(content, &manifest)",
          "110:   err2 := g.pullComposeFiles(ctx, local, composeFile, manifest, ref, resolver)",
          "111:   if err2 != nil {",
          "112:    return \"\", err2",
          "115:  return composeFile, nil",
          "",
          "[Added Lines]",
          "82:  local, ok := g.known[path]",
          "83:  if !ok {",
          "84:   ref, err := reference.ParseDockerRef(path[len(prefix):])",
          "85:   if err != nil {",
          "86:    return \"\", err",
          "87:   }",
          "89:   opt, err := storeutil.GetImageConfig(g.dockerCli, nil)",
          "90:   if err != nil {",
          "91:    return \"\", err",
          "92:   }",
          "93:   resolver := imagetools.New(opt)",
          "95:   content, descriptor, err := resolver.Get(ctx, ref.String())",
          "100:   cache, err := cacheDir()",
          "101:   if err != nil {",
          "102:    return \"\", fmt.Errorf(\"initializing remote resource cache: %w\", err)",
          "103:   }",
          "105:   local = filepath.Join(cache, descriptor.Digest.Hex())",
          "106:   composeFile := filepath.Join(local, \"compose.yaml\")",
          "107:   if _, err = os.Stat(local); os.IsNotExist(err) {",
          "108:    var manifest v1.Manifest",
          "109:    err = json.Unmarshal(content, &manifest)",
          "110:    if err != nil {",
          "111:     return \"\", err",
          "112:    }",
          "114:    err2 := g.pullComposeFiles(ctx, local, composeFile, manifest, ref, resolver)",
          "115:    if err2 != nil {",
          "116:     return \"\", err2",
          "117:    }",
          "119:   g.known[path] = local",
          "122:  return filepath.Join(local, \"compose.yaml\"), nil",
          "123: }",
          "125: func (g ociRemoteLoader) Dir(path string) string {",
          "126:  return g.known[path]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c28bf5227aafe47db68423437cc1371786d3c577",
      "candidate_info": {
        "commit_hash": "c28bf5227aafe47db68423437cc1371786d3c577",
        "repo": "docker/compose",
        "commit_url": "https://github.com/docker/compose/commit/c28bf5227aafe47db68423437cc1371786d3c577",
        "files": [
          "go.mod",
          "go.sum"
        ],
        "message": "bump version of compose-go to v2.0.0-rc.1\n\nSigned-off-by: Guillaume Lours <705411+glours@users.noreply.github.com>",
        "before_after_code_files": [
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ],
          "candidate": [
            "go.mod||go.mod",
            "go.sum||go.sum"
          ]
        }
      },
      "candidate_diff": {
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:  github.com/AlecAivazis/survey/v2 v2.3.7",
          "7:  github.com/Microsoft/go-winio v0.6.1",
          "8:  github.com/buger/goterm v1.0.4",
          "10:  github.com/containerd/console v1.0.3",
          "11:  github.com/containerd/containerd v1.7.12",
          "12:  github.com/davecgh/go-spew v1.1.1",
          "",
          "[Removed Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-beta.3",
          "",
          "[Added Lines]",
          "9:  github.com/compose-spec/compose-go/v2 v2.0.0-rc.1",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: github.com/cncf/xds/go v0.0.0-20230607035331-e9ce68804cb4/go.mod h1:eXthEFrGJvWHgFFCl3hGmgk+/aYT6PnTQLykKQRLhEs=",
          "87: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb h1:EDmT6Q9Zs+SbUoc7Ik9EfrFqcylYqgPZ9ANSbTAntnE=",
          "88: github.com/codahale/rfc6979 v0.0.0-20141003034818-6a90f24967eb/go.mod h1:ZjrT6AXHbDs86ZSdt/osfBi5qfexBrKUdONk989Wnk4=",
          "91: github.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=",
          "92: github.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=",
          "93: github.com/containerd/console v1.0.3 h1:lIr7SlA5PxZyMV30bDW0MGbiOPXwc63yRuCP0ARubLw=",
          "",
          "[Removed Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-beta.3 h1:9MsMdwLaHE0uplnF2baXtM3yExD8Yaw3HUGlwm8Z+fQ=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-beta.3/go.mod h1:IVsvFyGVhw4FASzUtlWNVaAOhYmakXAFY9IlZ7LAuD8=",
          "",
          "[Added Lines]",
          "89: github.com/compose-spec/compose-go/v2 v2.0.0-rc.1 h1:0nnSpdYg29uaQOU/YJ1YSgYgwkQr/XNZ0QAFtEPTtIA=",
          "90: github.com/compose-spec/compose-go/v2 v2.0.0-rc.1/go.mod h1:IVsvFyGVhw4FASzUtlWNVaAOhYmakXAFY9IlZ7LAuD8=",
          "",
          "---------------"
        ]
      }
    }
  ]
}