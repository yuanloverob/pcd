{
  "cve_id": "CVE-2024-28864",
  "cve_desc": "SecureProps is a PHP library designed to simplify the encryption and decryption of property data in objects. A vulnerability in SecureProps version 1.2.0 and 1.2.1 involves a regex failing to detect tags during decryption of encrypted data. This occurs when the encrypted data has been encoded with `NullEncoder` and passed to `TagAwareCipher`, and contains special characters such as `\\n`. As a result, the decryption process is skipped since the tags are not detected. This causes the encrypted data to be returned in plain format.  The vulnerability affects users who implement `TagAwareCipher` with any base cipher that has `NullEncoder` (not default). The patch for the issue has been released. Users are advised to update to version 1.2.2. As a workaround, one may use the default `Base64Encoder` with the base cipher decorated with `TagAwareCipher` to prevent special characters in the encrypted string from interfering with regex tag detection logic.  This workaround is safe but may involve double encoding since `TagAwareCipher` uses `NullEncoder` by default.",
  "repo": "IlicMiljan/Secure-Props",
  "patch_hash": "ab7b561040cd37fda3dbf9a6cab01fefcaa16627",
  "patch_info": {
    "commit_hash": "ab7b561040cd37fda3dbf9a6cab01fefcaa16627",
    "repo": "IlicMiljan/Secure-Props",
    "commit_url": "https://github.com/IlicMiljan/Secure-Props/commit/ab7b561040cd37fda3dbf9a6cab01fefcaa16627",
    "files": [
      "src/Cipher/TagAwareCipher.php"
    ],
    "message": "Merge pull request #21 from IlicMiljan/fix-parsing-tagged-encrypted-data\n\nFix Parsing Tagged Encrypted Data",
    "before_after_code_files": [
      "src/Cipher/TagAwareCipher.php||src/Cipher/TagAwareCipher.php"
    ]
  },
  "patch_diff": {
    "src/Cipher/TagAwareCipher.php||src/Cipher/TagAwareCipher.php": [
      "File: src/Cipher/TagAwareCipher.php -> src/Cipher/TagAwareCipher.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "9: class TagAwareCipher implements Cipher",
      "10: {",
      "11:     private Encoder $encoder;",
      "13:     public function __construct(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11:     private const START_TAG = '<ENC>';",
      "12:     private const END_TAG = '</ENC>';",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "25:     {",
      "26:         $encryptedString = $this->cipher->encrypt($string);",
      "29:     }",
      "31:     public function decrypt(#[SensitiveParameter] string $string): string",
      "",
      "[Removed Lines]",
      "28:         return $this->encoder->encode('<ENC>' . $encryptedString . '</ENC>');",
      "",
      "[Added Lines]",
      "31:         return $this->encoder->encode(self::START_TAG . $encryptedString . self::END_TAG);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "36:             return $string;",
      "37:         }",
      "42:     }",
      "44:     private function shouldDecrypt(string $string): bool",
      "45:     {",
      "47:     }",
      "48: }",
      "",
      "[Removed Lines]",
      "39:         preg_match('/^<ENC>(.*)<\\/ENC>$/', $data, $matches);",
      "41:         return $this->cipher->decrypt($matches[1]);",
      "46:         return preg_match('/^<ENC>(.*)<\\/ENC>$/', $string) === 1;",
      "",
      "[Added Lines]",
      "42:         return $this->cipher->decrypt($this->extractTaggedValue($data));",
      "47:         return str_contains($string, self::START_TAG) && str_contains($string, self::END_TAG);",
      "48:     }",
      "50:     private function extractTaggedValue(string $string): string",
      "51:     {",
      "52:         $startPos = strpos($string, self::START_TAG);",
      "53:         $endPos = strpos($string, self::END_TAG);",
      "55:         $startPos += strlen(self::START_TAG);",
      "56:         return substr($string, $startPos, $endPos - $startPos);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "658e0b52e74cb36e10d99a05371cd6d2e2196ab2",
      "candidate_info": {
        "commit_hash": "658e0b52e74cb36e10d99a05371cd6d2e2196ab2",
        "repo": "IlicMiljan/Secure-Props",
        "commit_url": "https://github.com/IlicMiljan/Secure-Props/commit/658e0b52e74cb36e10d99a05371cd6d2e2196ab2",
        "files": [
          "src/Cipher/TagAwareCipher.php"
        ],
        "message": "Replace Regex Tag Detection With substr() Logic",
        "before_after_code_files": [
          "src/Cipher/TagAwareCipher.php||src/Cipher/TagAwareCipher.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/ilicmiljan/secure-props/pull/21"
        ],
        "olp_code_files": {
          "patch": [
            "src/Cipher/TagAwareCipher.php||src/Cipher/TagAwareCipher.php"
          ],
          "candidate": [
            "src/Cipher/TagAwareCipher.php||src/Cipher/TagAwareCipher.php"
          ]
        }
      },
      "candidate_diff": {
        "src/Cipher/TagAwareCipher.php||src/Cipher/TagAwareCipher.php": [
          "File: src/Cipher/TagAwareCipher.php -> src/Cipher/TagAwareCipher.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: class TagAwareCipher implements Cipher",
          "10: {",
          "11:     private Encoder $encoder;",
          "13:     public function __construct(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11:     private const START_TAG = '<ENC>';",
          "12:     private const END_TAG = '</ENC>';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:     {",
          "26:         $encryptedString = $this->cipher->encrypt($string);",
          "29:     }",
          "31:     public function decrypt(#[SensitiveParameter] string $string): string",
          "",
          "[Removed Lines]",
          "28:         return $this->encoder->encode('<ENC>' . $encryptedString . '</ENC>');",
          "",
          "[Added Lines]",
          "31:         return $this->encoder->encode(self::START_TAG . $encryptedString . self::END_TAG);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:             return $string;",
          "37:         }",
          "42:     }",
          "44:     private function shouldDecrypt(string $string): bool",
          "45:     {",
          "47:     }",
          "48: }",
          "",
          "[Removed Lines]",
          "39:         preg_match('/^<ENC>(.*)<\\/ENC>$/', $data, $matches);",
          "41:         return $this->cipher->decrypt($matches[1]);",
          "46:         return preg_match('/^<ENC>(.*)<\\/ENC>$/', $string) === 1;",
          "",
          "[Added Lines]",
          "42:         return $this->cipher->decrypt($this->extractTaggedValue($data));",
          "47:         return str_contains($string, self::START_TAG) && str_contains($string, self::END_TAG);",
          "48:     }",
          "50:     private function extractTaggedValue(string $string): string",
          "51:     {",
          "52:         $startPos = strpos($string, self::START_TAG);",
          "53:         $endPos = strpos($string, self::END_TAG);",
          "55:         $startPos += strlen(self::START_TAG);",
          "56:         return substr($string, $startPos, $endPos - $startPos);",
          "",
          "---------------"
        ]
      }
    }
  ]
}