{
  "cve_id": "CVE-2024-9900",
  "cve_desc": "mudler/localai version v2.21.1 contains a Cross-Site Scripting (XSS) vulnerability in its search functionality. The vulnerability arises due to improper sanitization of user input, allowing the injection and execution of arbitrary JavaScript code. This can lead to the execution of malicious scripts in the context of the victim's browser, potentially compromising user sessions, stealing session cookies, redirecting users to malicious websites, or manipulating the DOM.",
  "repo": "mudler/localai",
  "patch_hash": "a1634b219a4e52813e70ff07e6376a01449c4515",
  "patch_info": {
    "commit_hash": "a1634b219a4e52813e70ff07e6376a01449c4515",
    "repo": "mudler/localai",
    "commit_url": "https://github.com/mudler/localai/commit/a1634b219a4e52813e70ff07e6376a01449c4515",
    "files": [
      ".github/ci/modelslist.go",
      "core/http/elements/gallery.go",
      "core/http/endpoints/openai/assistant.go",
      "core/http/endpoints/openai/files.go",
      "core/http/middleware/auth.go",
      "core/http/routes/ui.go"
    ],
    "message": "fix: roll out bluemonday Sanitize more widely (#3794)\n\n* initial pass: roll out bluemonday sanitization more widely\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n* add one additional sanitize - the overall modelslist used by the docs site\n\nSigned-off-by: Dave Lee <dave@gray101.com>\n\n---------\n\nSigned-off-by: Dave Lee <dave@gray101.com>",
    "before_after_code_files": [
      ".github/ci/modelslist.go||.github/ci/modelslist.go",
      "core/http/elements/gallery.go||core/http/elements/gallery.go",
      "core/http/endpoints/openai/assistant.go||core/http/endpoints/openai/assistant.go",
      "core/http/endpoints/openai/files.go||core/http/endpoints/openai/files.go",
      "core/http/middleware/auth.go||core/http/middleware/auth.go",
      "core/http/routes/ui.go||core/http/routes/ui.go"
    ]
  },
  "patch_diff": {
    ".github/ci/modelslist.go||.github/ci/modelslist.go": [
      "File: .github/ci/modelslist.go -> .github/ci/modelslist.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "6:  \"io/ioutil\"",
      "7:  \"os\"",
      "9:  \"gopkg.in/yaml.v3\"",
      "10: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9:  \"github.com/microcosm-cc/bluemonday\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "279:   return",
      "280:  }",
      "283:  data := struct {",
      "284:   Models          []*GalleryModel",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "284:  for i, m := range models {",
      "285:   models[i].Name = bluemonday.StrictPolicy().Sanitize(m.Name)",
      "286:   models[i].Description = bluemonday.StrictPolicy().Sanitize(m.Description)",
      "287:  }",
      "",
      "---------------"
    ],
    "core/http/elements/gallery.go||core/http/elements/gallery.go": [
      "File: core/http/elements/gallery.go -> core/http/elements/gallery.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:  \"github.com/chasefleming/elem-go\"",
      "8:  \"github.com/chasefleming/elem-go/attrs\"",
      "9:  \"github.com/mudler/LocalAI/core/gallery\"",
      "10:  \"github.com/mudler/LocalAI/core/p2p\"",
      "11:  \"github.com/mudler/LocalAI/core/services\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9:  \"github.com/microcosm-cc/bluemonday\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41:     \"tabindex\":  \"-1\",",
      "42:     \"autofocus\": \"\",",
      "43:    },",
      "45:   ),",
      "46:   elem.If(showDelete, deleteButton(galleryID, modelName), reInstallButton(galleryID)),",
      "47:  ).Render()",
      "",
      "[Removed Lines]",
      "44:    elem.Text(text),",
      "",
      "[Added Lines]",
      "45:    elem.Text(bluemonday.StrictPolicy().Sanitize(text)),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "57:     \"tabindex\":  \"-1\",",
      "58:     \"autofocus\": \"\",",
      "59:    },",
      "61:   ),",
      "62:   installButton(galleryName),",
      "63:  ).Render()",
      "",
      "[Removed Lines]",
      "60:    elem.Text(\"Error \"+err),",
      "",
      "[Added Lines]",
      "61:    elem.Text(\"Error \"+bluemonday.StrictPolicy().Sanitize(err)),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "170:       attrs.Props{",
      "171:        \"class\": \"text-gray-200 font-semibold ml-2 mr-1\",",
      "172:       },",
      "174:      ),",
      "175:      elem.Text(\"Status: \"),",
      "176:      elem.If(",
      "",
      "[Removed Lines]",
      "173:       elem.Text(n.ID),",
      "",
      "[Added Lines]",
      "174:       elem.Text(bluemonday.StrictPolicy().Sanitize(n.ID)),",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "227:     \"tabindex\":  \"-1\",",
      "228:     \"autofocus\": \"\",",
      "229:    },",
      "231:    elem.Div(attrs.Props{",
      "232:     \"hx-get\":     \"/browse/job/progress/\" + uid,",
      "233:     \"hx-trigger\": \"every 600ms\",",
      "",
      "[Removed Lines]",
      "230:    elem.Text(text),",
      "",
      "[Added Lines]",
      "231:    elem.Text(bluemonday.StrictPolicy().Sanitize(text)), //Perhaps overly defensive",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "249:    \"class\": icon + \" pr-2\",",
      "250:   }),",
      "255:  )",
      "256: }",
      "",
      "[Removed Lines]",
      "252:   elem.Text(text),",
      "",
      "[Added Lines]",
      "253:   elem.Text(bluemonday.StrictPolicy().Sanitize(text)),",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "285:     elem.I(attrs.Props{",
      "286:      \"class\": icon + \" pr-2\",",
      "287:     }),",
      "289:    ),",
      "290:   ),",
      "293:  )",
      "294: }",
      "",
      "[Removed Lines]",
      "288:     elem.Text(text),",
      "",
      "[Added Lines]",
      "287:     elem.Text(bluemonday.StrictPolicy().Sanitize(text)),",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "303:   elem.I(attrs.Props{",
      "304:    \"class\": \"fas fa-link pr-2\",",
      "305:   }),",
      "307:  )",
      "308: }",
      "309: func installButton(galleryName string) elem.Node {",
      "",
      "[Removed Lines]",
      "306:   elem.Text(text),",
      "",
      "[Added Lines]",
      "303:   elem.Text(bluemonday.StrictPolicy().Sanitize(text)),",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "387:     attrs.Props{",
      "388:      \"class\": \"mb-2 text-xl font-bold leading-tight\",",
      "389:     },",
      "391:    ),",
      "392:    elem.P(",
      "393:     attrs.Props{",
      "394:      \"class\": \"mb-4 text-sm [&:not(:hover)]:truncate text-base\",",
      "395:     },",
      "397:    ),",
      "398:   )",
      "399:  }",
      "",
      "[Removed Lines]",
      "390:     elem.Text(m.Name),",
      "396:     elem.Text(m.Description),",
      "",
      "[Added Lines]",
      "387:     elem.Text(bluemonday.StrictPolicy().Sanitize(m.Name)),",
      "393:     elem.Text(bluemonday.StrictPolicy().Sanitize(m.Description)),",
      "",
      "---------------"
    ],
    "core/http/endpoints/openai/assistant.go||core/http/endpoints/openai/assistant.go": [
      "File: core/http/endpoints/openai/assistant.go -> core/http/endpoints/openai/assistant.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "10:  \"time\"",
      "12:  \"github.com/gofiber/fiber/v2\"",
      "13:  \"github.com/mudler/LocalAI/core/config\"",
      "14:  \"github.com/mudler/LocalAI/core/schema\"",
      "15:  \"github.com/mudler/LocalAI/core/services\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13:  \"github.com/microcosm-cc/bluemonday\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:   if !modelExists(cl, ml, request.Model) {",
      "85:    log.Warn().Msgf(\"Model: %s was not found in list of models.\", request.Model)",
      "87:   }",
      "89:   if request.Tools == nil {",
      "",
      "[Removed Lines]",
      "86:    return c.Status(fiber.StatusBadRequest).SendString(\"Model \" + request.Model + \" not found\")",
      "",
      "[Added Lines]",
      "87:    return c.Status(fiber.StatusBadRequest).SendString(bluemonday.StrictPolicy().Sanitize(fmt.Sprintf(\"Model %q not found\", request.Model)))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "148:   limit, err := strconv.Atoi(limitQuery)",
      "149:   if err != nil {",
      "151:   }",
      "",
      "[Removed Lines]",
      "150:    return c.Status(http.StatusBadRequest).SendString(fmt.Sprintf(\"Invalid limit query value: %s\", limitQuery))",
      "",
      "[Added Lines]",
      "151:    return c.Status(http.StatusBadRequest).SendString(bluemonday.StrictPolicy().Sanitize(fmt.Sprintf(\"Invalid limit query value: %s\", limitQuery)))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "288:    }",
      "289:   }",
      "292:  }",
      "293: }",
      "",
      "[Removed Lines]",
      "291:   return c.Status(fiber.StatusNotFound).SendString(fmt.Sprintf(\"Unable to find assistant with id: %s\", assistantID))",
      "",
      "[Added Lines]",
      "292:   return c.Status(fiber.StatusNotFound).SendString(bluemonday.StrictPolicy().Sanitize(fmt.Sprintf(\"Unable to find assistant with id: %s\", assistantID)))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "337:      }",
      "338:     }",
      "341:    }",
      "342:   }",
      "345:  }",
      "346: }",
      "",
      "[Removed Lines]",
      "340:     return c.Status(fiber.StatusNotFound).SendString(fmt.Sprintf(\"Unable to find file_id: %s\", request.FileID))",
      "344:   return c.Status(fiber.StatusNotFound).SendString(fmt.Sprintf(\"Unable to find %q\", assistantID))",
      "",
      "[Added Lines]",
      "341:     return c.Status(fiber.StatusNotFound).SendString(bluemonday.StrictPolicy().Sanitize(fmt.Sprintf(\"Unable to find file_id: %s\", request.FileID)))",
      "345:   return c.Status(fiber.StatusNotFound).SendString(bluemonday.StrictPolicy().Sanitize(fmt.Sprintf(\"Unable to find %q\", assistantID)))",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "442:     return c.Status(fiber.StatusOK).JSON(newAssistant)",
      "443:    }",
      "444:   }",
      "446:  }",
      "447: }",
      "",
      "[Removed Lines]",
      "445:   return c.Status(fiber.StatusNotFound).SendString(fmt.Sprintf(\"Unable to find assistant with id: %s\", assistantID))",
      "",
      "[Added Lines]",
      "446:   return c.Status(fiber.StatusNotFound).SendString(bluemonday.StrictPolicy().Sanitize(fmt.Sprintf(\"Unable to find assistant with id: %s\", assistantID)))",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "513:     if assistantFile.ID == fileId {",
      "514:      return c.Status(fiber.StatusOK).JSON(assistantFile)",
      "515:     }",
      "517:    }",
      "518:   }",
      "520:  }",
      "521: }",
      "",
      "[Removed Lines]",
      "516:     return c.Status(fiber.StatusNotFound).SendString(fmt.Sprintf(\"Unable to find assistant file with file_id: %s\", fileId))",
      "519:   return c.Status(fiber.StatusNotFound).SendString(fmt.Sprintf(\"Unable to find assistant file with assistant_id: %s\", assistantID))",
      "",
      "[Added Lines]",
      "517:     return c.Status(fiber.StatusNotFound).SendString(bluemonday.StrictPolicy().Sanitize(fmt.Sprintf(\"Unable to find assistant file with file_id: %s\", fileId)))",
      "520:   return c.Status(fiber.StatusNotFound).SendString(bluemonday.StrictPolicy().Sanitize(fmt.Sprintf(\"Unable to find assistant file with assistant_id: %s\", assistantID)))",
      "",
      "---------------"
    ],
    "core/http/endpoints/openai/files.go||core/http/endpoints/openai/files.go": [
      "File: core/http/endpoints/openai/files.go -> core/http/endpoints/openai/files.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "8:  \"sync/atomic\"",
      "9:  \"time\"",
      "11:  \"github.com/mudler/LocalAI/core/config\"",
      "12:  \"github.com/mudler/LocalAI/core/schema\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "11:  \"github.com/microcosm-cc/bluemonday\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "50:   err = c.SaveFile(file, savePath)",
      "51:   if err != nil {",
      "53:   }",
      "55:   f := schema.File{",
      "",
      "[Removed Lines]",
      "52:    return c.Status(fiber.StatusInternalServerError).SendString(\"Failed to save file: \" + err.Error())",
      "",
      "[Added Lines]",
      "53:    return c.Status(fiber.StatusInternalServerError).SendString(\"Failed to save file: \" + bluemonday.StrictPolicy().Sanitize(err.Error()))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:  return func(c *fiber.Ctx) error {",
      "122:   file, err := getFileFromRequest(c)",
      "123:   if err != nil {",
      "125:   }",
      "127:   return c.JSON(file)",
      "",
      "[Removed Lines]",
      "124:    return c.Status(fiber.StatusInternalServerError).SendString(err.Error())",
      "",
      "[Added Lines]",
      "125:    return c.Status(fiber.StatusInternalServerError).SendString(bluemonday.StrictPolicy().Sanitize(err.Error()))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "143:  return func(c *fiber.Ctx) error {",
      "144:   file, err := getFileFromRequest(c)",
      "145:   if err != nil {",
      "147:   }",
      "149:   err = os.Remove(filepath.Join(appConfig.UploadDir, file.Filename))",
      "150:   if err != nil {",
      "152:    if !errors.Is(err, os.ErrNotExist) {",
      "154:    }",
      "155:   }",
      "",
      "[Removed Lines]",
      "146:    return c.Status(fiber.StatusInternalServerError).SendString(err.Error())",
      "153:     return c.Status(fiber.StatusInternalServerError).SendString(fmt.Sprintf(\"Unable to delete file: %s, %v\", file.Filename, err))",
      "",
      "[Added Lines]",
      "147:    return c.Status(fiber.StatusInternalServerError).SendString(bluemonday.StrictPolicy().Sanitize(err.Error()))",
      "154:     return c.Status(fiber.StatusInternalServerError).SendString(bluemonday.StrictPolicy().Sanitize(fmt.Sprintf(\"Unable to delete file: %s, %v\", file.Filename, err)))",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "180:  return func(c *fiber.Ctx) error {",
      "181:   file, err := getFileFromRequest(c)",
      "182:   if err != nil {",
      "184:   }",
      "186:   fileContents, err := os.ReadFile(filepath.Join(appConfig.UploadDir, file.Filename))",
      "187:   if err != nil {",
      "189:   }",
      "191:   return c.Send(fileContents)",
      "",
      "[Removed Lines]",
      "183:    return c.Status(fiber.StatusInternalServerError).SendString(err.Error())",
      "188:    return c.Status(fiber.StatusInternalServerError).SendString(err.Error())",
      "",
      "[Added Lines]",
      "184:    return c.Status(fiber.StatusInternalServerError).SendString(bluemonday.StrictPolicy().Sanitize(err.Error()))",
      "189:    return c.Status(fiber.StatusInternalServerError).SendString(bluemonday.StrictPolicy().Sanitize(err.Error()))",
      "",
      "---------------"
    ],
    "core/http/middleware/auth.go||core/http/middleware/auth.go": [
      "File: core/http/middleware/auth.go -> core/http/middleware/auth.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "7:  \"github.com/dave-gray101/v2keyauth\"",
      "8:  \"github.com/gofiber/fiber/v2\"",
      "9:  \"github.com/gofiber/fiber/v2/middleware/keyauth\"",
      "10:  \"github.com/mudler/LocalAI/core/config\"",
      "11: )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "10:  \"github.com/microcosm-cc/bluemonday\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38:    if applicationConfig.OpaqueErrors {",
      "39:     return ctx.SendStatus(403)",
      "40:    }",
      "42:   }",
      "43:   if applicationConfig.OpaqueErrors {",
      "44:    return ctx.SendStatus(500)",
      "",
      "[Removed Lines]",
      "41:    return ctx.Status(403).SendString(err.Error())",
      "",
      "[Added Lines]",
      "42:    return ctx.Status(403).SendString(bluemonday.StrictPolicy().Sanitize(err.Error()))",
      "",
      "---------------"
    ],
    "core/http/routes/ui.go||core/http/routes/ui.go": [
      "File: core/http/routes/ui.go -> core/http/routes/ui.go",
      "--- Hunk 1 ---",
      "[Context before]",
      "6:  \"sort\"",
      "7:  \"strings\"",
      "9:  \"github.com/mudler/LocalAI/core/config\"",
      "10:  \"github.com/mudler/LocalAI/core/gallery\"",
      "11:  \"github.com/mudler/LocalAI/core/http/elements\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9:  \"github.com/microcosm-cc/bluemonday\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "171:     Search string `form:\"search\"`",
      "172:    }{}",
      "173:    if err := c.BodyParser(&form); err != nil {",
      "175:    }",
      "177:    models, _ := gallery.AvailableGalleryModels(appConfig.Galleries, appConfig.ModelPath)",
      "",
      "[Removed Lines]",
      "174:     return c.Status(fiber.StatusBadRequest).SendString(err.Error())",
      "",
      "[Added Lines]",
      "175:     return c.Status(fiber.StatusBadRequest).SendString(bluemonday.StrictPolicy().Sanitize(err.Error()))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2d7913b3bef9d6135510572e660e72dfbda29050",
      "candidate_info": {
        "commit_hash": "2d7913b3bef9d6135510572e660e72dfbda29050",
        "repo": "mudler/localai",
        "commit_url": "https://github.com/mudler/localai/commit/2d7913b3bef9d6135510572e660e72dfbda29050",
        "files": [
          "core/config/application_config.go",
          "core/http/api.go",
          "core/http/endpoints/openai/assistant.go",
          "core/http/endpoints/openai/assistant_test.go",
          "core/http/endpoints/openai/files.go",
          "core/http/endpoints/openai/files_test.go",
          "main.go",
          "pkg/utils/config.go"
        ],
        "message": "feat(assistant): Assistant and AssistantFiles api (#1803)\n\n* Initial implementation of assistants api\n\n* Move load/save configs to utils\n\n* Save assistant and assistantfiles config to disk.\n\n* Add tsets for assistant api\n\n* Fix models path spelling mistake.\n\n* Remove personal go.mod information\n\n---------\n\nCo-authored-by: Ettore Di Giacinto <mudler@users.noreply.github.com>",
        "before_after_code_files": [
          "core/config/application_config.go||core/config/application_config.go",
          "core/http/api.go||core/http/api.go",
          "core/http/endpoints/openai/assistant.go||core/http/endpoints/openai/assistant.go",
          "core/http/endpoints/openai/assistant_test.go||core/http/endpoints/openai/assistant_test.go",
          "core/http/endpoints/openai/files.go||core/http/endpoints/openai/files.go",
          "core/http/endpoints/openai/files_test.go||core/http/endpoints/openai/files_test.go",
          "main.go||main.go",
          "pkg/utils/config.go||pkg/utils/config.go"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/http/endpoints/openai/assistant.go||core/http/endpoints/openai/assistant.go",
            "core/http/endpoints/openai/files.go||core/http/endpoints/openai/files.go"
          ],
          "candidate": [
            "core/http/endpoints/openai/assistant.go||core/http/endpoints/openai/assistant.go",
            "core/http/endpoints/openai/files.go||core/http/endpoints/openai/files.go"
          ]
        }
      },
      "candidate_diff": {
        "core/config/application_config.go||core/config/application_config.go": [
          "File: core/config/application_config.go -> core/config/application_config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:  ImageDir                            string",
          "21:  AudioDir                            string",
          "22:  UploadDir                           string",
          "23:  CORS                                bool",
          "24:  PreloadJSONModels                   string",
          "25:  PreloadModelsFromPath               string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23:  ConfigsDir                          string",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "252:  }",
          "253: }",
          "255: func WithApiKeys(apiKeys []string) AppOption {",
          "256:  return func(o *ApplicationConfig) {",
          "257:   o.ApiKeys = apiKeys",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256: func WithConfigsDir(configsDir string) AppOption {",
          "257:  return func(o *ApplicationConfig) {",
          "258:   o.ConfigsDir = configsDir",
          "259:  }",
          "260: }",
          "",
          "---------------"
        ],
        "core/http/api.go||core/http/api.go": [
          "File: core/http/api.go -> core/http/api.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"encoding/json\"",
          "5:  \"errors\"",
          "6:  \"os\"",
          "7:  \"strings\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"github.com/go-skynet/LocalAI/pkg/utils\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:   }{Version: internal.PrintableVersion()})",
          "156:  })",
          "161:  modelGalleryEndpointService := localai.CreateModelGalleryEndpointService(appConfig.Galleries, appConfig.ModelPath, galleryService)",
          "162:  app.Post(\"/models/apply\", auth, modelGalleryEndpointService.ApplyModelGalleryEndpoint())",
          "",
          "[Removed Lines]",
          "159:  openai.LoadUploadConfig(appConfig.UploadDir)",
          "",
          "[Added Lines]",
          "160:  os.MkdirAll(appConfig.ImageDir, 0755)",
          "161:  os.MkdirAll(appConfig.AudioDir, 0755)",
          "162:  os.MkdirAll(appConfig.UploadDir, 0755)",
          "163:  os.MkdirAll(appConfig.ConfigsDir, 0755)",
          "164:  os.MkdirAll(appConfig.ModelPath, 0755)",
          "167:  utils.LoadConfig(appConfig.UploadDir, openai.UploadedFilesFile, &openai.UploadedFiles)",
          "168:  utils.LoadConfig(appConfig.ConfigsDir, openai.AssistantsConfigFile, &openai.Assistants)",
          "169:  utils.LoadConfig(appConfig.ConfigsDir, openai.AssistantsFileConfigFile, &openai.AssistantFiles)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:  app.Post(\"/v1/edits\", auth, openai.EditEndpoint(cl, ml, appConfig))",
          "190:  app.Post(\"/edits\", auth, openai.EditEndpoint(cl, ml, appConfig))",
          "193:  app.Post(\"/v1/files\", auth, openai.UploadFilesEndpoint(cl, appConfig))",
          "194:  app.Post(\"/files\", auth, openai.UploadFilesEndpoint(cl, appConfig))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:  app.Get(\"/v1/assistants\", openai.ListAssistantsEndpoint(cl, ml, appConfig))",
          "204:  app.Get(\"/assistants\", openai.ListAssistantsEndpoint(cl, ml, appConfig))",
          "205:  app.Post(\"/v1/assistants\", openai.CreateAssistantEndpoint(cl, ml, appConfig))",
          "206:  app.Post(\"/assistants\", openai.CreateAssistantEndpoint(cl, ml, appConfig))",
          "207:  app.Delete(\"/v1/assistants/:assistant_id\", openai.DeleteAssistantEndpoint(cl, ml, appConfig))",
          "208:  app.Delete(\"/assistants/:assistant_id\", openai.DeleteAssistantEndpoint(cl, ml, appConfig))",
          "209:  app.Get(\"/v1/assistants/:assistant_id\", openai.GetAssistantEndpoint(cl, ml, appConfig))",
          "210:  app.Get(\"/assistants/:assistant_id\", openai.GetAssistantEndpoint(cl, ml, appConfig))",
          "211:  app.Post(\"/v1/assistants/:assistant_id\", openai.ModifyAssistantEndpoint(cl, ml, appConfig))",
          "212:  app.Post(\"/assistants/:assistant_id\", openai.ModifyAssistantEndpoint(cl, ml, appConfig))",
          "213:  app.Get(\"/v1/assistants/:assistant_id/files\", openai.ListAssistantFilesEndpoint(cl, ml, appConfig))",
          "214:  app.Get(\"/assistants/:assistant_id/files\", openai.ListAssistantFilesEndpoint(cl, ml, appConfig))",
          "215:  app.Post(\"/v1/assistants/:assistant_id/files\", openai.CreateAssistantFileEndpoint(cl, ml, appConfig))",
          "216:  app.Post(\"/assistants/:assistant_id/files\", openai.CreateAssistantFileEndpoint(cl, ml, appConfig))",
          "217:  app.Delete(\"/v1/assistants/:assistant_id/files/:file_id\", openai.DeleteAssistantFileEndpoint(cl, ml, appConfig))",
          "218:  app.Delete(\"/assistants/:assistant_id/files/:file_id\", openai.DeleteAssistantFileEndpoint(cl, ml, appConfig))",
          "219:  app.Get(\"/v1/assistants/:assistant_id/files/:file_id\", openai.GetAssistantFileEndpoint(cl, ml, appConfig))",
          "220:  app.Get(\"/assistants/:assistant_id/files/:file_id\", openai.GetAssistantFileEndpoint(cl, ml, appConfig))",
          "",
          "---------------"
        ],
        "core/http/endpoints/openai/assistant.go||core/http/endpoints/openai/assistant.go": [
          "File: core/http/endpoints/openai/assistant.go -> core/http/endpoints/openai/assistant.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package openai",
          "3: import (",
          "4:  \"fmt\"",
          "5:  \"github.com/go-skynet/LocalAI/core/config\"",
          "6:  model \"github.com/go-skynet/LocalAI/pkg/model\"",
          "7:  \"github.com/go-skynet/LocalAI/pkg/utils\"",
          "8:  \"github.com/gofiber/fiber/v2\"",
          "9:  \"github.com/rs/zerolog/log\"",
          "10:  \"net/http\"",
          "11:  \"sort\"",
          "12:  \"strconv\"",
          "13:  \"strings\"",
          "14:  \"sync/atomic\"",
          "15:  \"time\"",
          "16: )",
          "19: type ToolType string",
          "21: const (",
          "22:  CodeInterpreter ToolType = \"code_interpreter\"",
          "23:  Retrieval       ToolType = \"retrieval\"",
          "24:  Function        ToolType = \"function\"",
          "26:  MaxCharacterInstructions  = 32768",
          "27:  MaxCharacterDescription   = 512",
          "28:  MaxCharacterName          = 256",
          "29:  MaxToolsSize              = 128",
          "30:  MaxFileIdSize             = 20",
          "31:  MaxCharacterMetadataKey   = 64",
          "32:  MaxCharacterMetadataValue = 512",
          "33: )",
          "35: type Tool struct {",
          "36:  Type ToolType `json:\"type\"`",
          "37: }",
          "40: type Assistant struct {",
          "41:  ID           string            `json:\"id\"`                     // The unique identifier of the assistant.",
          "42:  Object       string            `json:\"object\"`                 // Object type, which is \"assistant\".",
          "43:  Created      int64             `json:\"created\"`                // The time at which the assistant was created.",
          "44:  Model        string            `json:\"model\"`                  // The model ID used by the assistant.",
          "45:  Name         string            `json:\"name,omitempty\"`         // The name of the assistant.",
          "46:  Description  string            `json:\"description,omitempty\"`  // The description of the assistant.",
          "47:  Instructions string            `json:\"instructions,omitempty\"` // The system instructions that the assistant uses.",
          "48:  Tools        []Tool            `json:\"tools,omitempty\"`        // A list of tools enabled on the assistant.",
          "49:  FileIDs      []string          `json:\"file_ids,omitempty\"`     // A list of file IDs attached to this assistant.",
          "50:  Metadata     map[string]string `json:\"metadata,omitempty\"`     // Set of key-value pairs attached to the assistant.",
          "51: }",
          "53: var (",
          "54:  Assistants           = []Assistant{} // better to return empty array instead of \"null\"",
          "55:  AssistantsConfigFile = \"assistants.json\"",
          "56: )",
          "58: type AssistantRequest struct {",
          "59:  Model        string            `json:\"model\"`",
          "60:  Name         string            `json:\"name,omitempty\"`",
          "61:  Description  string            `json:\"description,omitempty\"`",
          "62:  Instructions string            `json:\"instructions,omitempty\"`",
          "63:  Tools        []Tool            `json:\"tools,omitempty\"`",
          "64:  FileIDs      []string          `json:\"file_ids,omitempty\"`",
          "65:  Metadata     map[string]string `json:\"metadata,omitempty\"`",
          "66: }",
          "68: func CreateAssistantEndpoint(cl *config.BackendConfigLoader, ml *model.ModelLoader, appConfig *config.ApplicationConfig) func(c *fiber.Ctx) error {",
          "69:  return func(c *fiber.Ctx) error {",
          "70:   request := new(AssistantRequest)",
          "71:   if err := c.BodyParser(request); err != nil {",
          "72:    log.Warn().AnErr(\"Unable to parse AssistantRequest\", err)",
          "73:    return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\"error\": \"Cannot parse JSON\"})",
          "74:   }",
          "76:   if !modelExists(ml, request.Model) {",
          "77:    log.Warn().Msgf(\"Model: %s was not found in list of models.\", request.Model)",
          "78:    return c.Status(fiber.StatusBadRequest).SendString(\"Model \" + request.Model + \" not found\")",
          "79:   }",
          "81:   if request.Tools == nil {",
          "82:    request.Tools = []Tool{}",
          "83:   }",
          "85:   if request.FileIDs == nil {",
          "86:    request.FileIDs = []string{}",
          "87:   }",
          "89:   if request.Metadata == nil {",
          "90:    request.Metadata = make(map[string]string)",
          "91:   }",
          "93:   id := \"asst_\" + strconv.FormatInt(generateRandomID(), 10)",
          "95:   assistant := Assistant{",
          "96:    ID:           id,",
          "97:    Object:       \"assistant\",",
          "98:    Created:      time.Now().Unix(),",
          "99:    Model:        request.Model,",
          "100:    Name:         request.Name,",
          "101:    Description:  request.Description,",
          "102:    Instructions: request.Instructions,",
          "103:    Tools:        request.Tools,",
          "104:    FileIDs:      request.FileIDs,",
          "105:    Metadata:     request.Metadata,",
          "106:   }",
          "108:   Assistants = append(Assistants, assistant)",
          "109:   utils.SaveConfig(appConfig.ConfigsDir, AssistantsConfigFile, Assistants)",
          "110:   return c.Status(fiber.StatusOK).JSON(assistant)",
          "111:  }",
          "112: }",
          "114: var currentId int64 = 0",
          "116: func generateRandomID() int64 {",
          "117:  atomic.AddInt64(&currentId, 1)",
          "118:  return currentId",
          "119: }",
          "121: func ListAssistantsEndpoint(cl *config.BackendConfigLoader, ml *model.ModelLoader, appConfig *config.ApplicationConfig) func(c *fiber.Ctx) error {",
          "122:  return func(c *fiber.Ctx) error {",
          "124:   returnAssistants := Assistants",
          "126:   limitQuery := c.Query(\"limit\", \"20\")",
          "127:   orderQuery := c.Query(\"order\", \"desc\")",
          "128:   afterQuery := c.Query(\"after\")",
          "129:   beforeQuery := c.Query(\"before\")",
          "132:   limit, err := strconv.Atoi(limitQuery)",
          "133:   if err != nil {",
          "134:    return c.Status(http.StatusBadRequest).SendString(fmt.Sprintf(\"Invalid limit query value: %s\", limitQuery))",
          "135:   }",
          "138:   sort.SliceStable(returnAssistants, func(i, j int) bool {",
          "139:    if orderQuery == \"asc\" {",
          "140:     return returnAssistants[i].Created < returnAssistants[j].Created",
          "141:    }",
          "142:    return returnAssistants[i].Created > returnAssistants[j].Created",
          "143:   })",
          "146:   if afterQuery != \"\" {",
          "147:    returnAssistants = filterAssistantsAfterID(returnAssistants, afterQuery)",
          "148:   }",
          "149:   if beforeQuery != \"\" {",
          "150:    returnAssistants = filterAssistantsBeforeID(returnAssistants, beforeQuery)",
          "151:   }",
          "154:   if limit < len(returnAssistants) {",
          "155:    returnAssistants = returnAssistants[:limit]",
          "156:   }",
          "158:   return c.JSON(returnAssistants)",
          "159:  }",
          "160: }",
          "164: func filterAssistantsBeforeID(assistants []Assistant, id string) []Assistant {",
          "165:  idInt, err := strconv.Atoi(id)",
          "166:  if err != nil {",
          "167:   return assistants // Return original slice if invalid id format is provided",
          "168:  }",
          "170:  var filteredAssistants []Assistant",
          "172:  for _, assistant := range assistants {",
          "173:   aid, err := strconv.Atoi(strings.TrimPrefix(assistant.ID, \"asst_\"))",
          "174:   if err != nil {",
          "175:    continue // Skip if invalid id in assistant",
          "176:   }",
          "178:   if aid < idInt {",
          "179:    filteredAssistants = append(filteredAssistants, assistant)",
          "180:   }",
          "181:  }",
          "183:  return filteredAssistants",
          "184: }",
          "188: func filterAssistantsAfterID(assistants []Assistant, id string) []Assistant {",
          "189:  idInt, err := strconv.Atoi(id)",
          "190:  if err != nil {",
          "191:   return assistants // Return original slice if invalid id format is provided",
          "192:  }",
          "194:  var filteredAssistants []Assistant",
          "196:  for _, assistant := range assistants {",
          "197:   aid, err := strconv.Atoi(strings.TrimPrefix(assistant.ID, \"asst_\"))",
          "198:   if err != nil {",
          "199:    continue // Skip if invalid id in assistant",
          "200:   }",
          "202:   if aid > idInt {",
          "203:    filteredAssistants = append(filteredAssistants, assistant)",
          "204:   }",
          "205:  }",
          "207:  return filteredAssistants",
          "208: }",
          "210: func modelExists(ml *model.ModelLoader, modelName string) (found bool) {",
          "211:  found = false",
          "212:  models, err := ml.ListModels()",
          "213:  if err != nil {",
          "214:   return",
          "215:  }",
          "217:  for _, model := range models {",
          "218:   if model == modelName {",
          "219:    found = true",
          "220:    return",
          "221:   }",
          "222:  }",
          "223:  return",
          "224: }",
          "226: func DeleteAssistantEndpoint(cl *config.BackendConfigLoader, ml *model.ModelLoader, appConfig *config.ApplicationConfig) func(c *fiber.Ctx) error {",
          "227:  type DeleteAssistantResponse struct {",
          "228:   ID      string `json:\"id\"`",
          "229:   Object  string `json:\"object\"`",
          "230:   Deleted bool   `json:\"deleted\"`",
          "231:  }",
          "233:  return func(c *fiber.Ctx) error {",
          "234:   assistantID := c.Params(\"assistant_id\")",
          "235:   if assistantID == \"\" {",
          "236:    return c.Status(fiber.StatusBadRequest).SendString(\"parameter assistant_id is required\")",
          "237:   }",
          "239:   for i, assistant := range Assistants {",
          "240:    if assistant.ID == assistantID {",
          "241:     Assistants = append(Assistants[:i], Assistants[i+1:]...)",
          "242:     utils.SaveConfig(appConfig.ConfigsDir, AssistantsConfigFile, Assistants)",
          "243:     return c.Status(fiber.StatusOK).JSON(DeleteAssistantResponse{",
          "244:      ID:      assistantID,",
          "245:      Object:  \"assistant.deleted\",",
          "246:      Deleted: true,",
          "247:     })",
          "248:    }",
          "249:   }",
          "251:   log.Warn().Msgf(\"Unable to find assistant %s for deletion\", assistantID)",
          "252:   return c.Status(fiber.StatusNotFound).JSON(DeleteAssistantResponse{",
          "253:    ID:      assistantID,",
          "254:    Object:  \"assistant.deleted\",",
          "255:    Deleted: false,",
          "256:   })",
          "257:  }",
          "258: }",
          "260: func GetAssistantEndpoint(cl *config.BackendConfigLoader, ml *model.ModelLoader, appConfig *config.ApplicationConfig) func(c *fiber.Ctx) error {",
          "261:  return func(c *fiber.Ctx) error {",
          "262:   assistantID := c.Params(\"assistant_id\")",
          "263:   if assistantID == \"\" {",
          "264:    return c.Status(fiber.StatusBadRequest).SendString(\"parameter assistant_id is required\")",
          "265:   }",
          "267:   for _, assistant := range Assistants {",
          "268:    if assistant.ID == assistantID {",
          "269:     return c.Status(fiber.StatusOK).JSON(assistant)",
          "270:    }",
          "271:   }",
          "273:   return c.Status(fiber.StatusNotFound).SendString(fmt.Sprintf(\"Unable to find assistant with id: %s\", assistantID))",
          "274:  }",
          "275: }",
          "277: type AssistantFile struct {",
          "278:  ID          string `json:\"id\"`",
          "279:  Object      string `json:\"object\"`",
          "280:  CreatedAt   int64  `json:\"created_at\"`",
          "281:  AssistantID string `json:\"assistant_id\"`",
          "282: }",
          "284: var (",
          "285:  AssistantFiles           []AssistantFile",
          "286:  AssistantsFileConfigFile = \"assistantsFile.json\"",
          "287: )",
          "289: type AssistantFileRequest struct {",
          "290:  FileID string `json:\"file_id\"`",
          "291: }",
          "293: type DeleteAssistantFileResponse struct {",
          "294:  ID      string `json:\"id\"`",
          "295:  Object  string `json:\"object\"`",
          "296:  Deleted bool   `json:\"deleted\"`",
          "297: }",
          "299: func CreateAssistantFileEndpoint(cl *config.BackendConfigLoader, ml *model.ModelLoader, appConfig *config.ApplicationConfig) func(c *fiber.Ctx) error {",
          "300:  return func(c *fiber.Ctx) error {",
          "301:   request := new(AssistantFileRequest)",
          "302:   if err := c.BodyParser(request); err != nil {",
          "303:    return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\"error\": \"Cannot parse JSON\"})",
          "304:   }",
          "306:   assistantID := c.Params(\"assistant_id\")",
          "307:   if assistantID == \"\" {",
          "308:    return c.Status(fiber.StatusBadRequest).SendString(\"parameter assistant_id is required\")",
          "309:   }",
          "311:   for _, assistant := range Assistants {",
          "312:    if assistant.ID == assistantID {",
          "313:     if len(assistant.FileIDs) > MaxFileIdSize {",
          "314:      return c.Status(fiber.StatusBadRequest).SendString(fmt.Sprintf(\"Max files %d for assistant %s reached.\", MaxFileIdSize, assistant.Name))",
          "315:     }",
          "317:     for _, file := range UploadedFiles {",
          "318:      if file.ID == request.FileID {",
          "319:       assistant.FileIDs = append(assistant.FileIDs, request.FileID)",
          "320:       assistantFile := AssistantFile{",
          "321:        ID:          file.ID,",
          "322:        Object:      \"assistant.file\",",
          "323:        CreatedAt:   time.Now().Unix(),",
          "324:        AssistantID: assistant.ID,",
          "325:       }",
          "326:       AssistantFiles = append(AssistantFiles, assistantFile)",
          "327:       utils.SaveConfig(appConfig.ConfigsDir, AssistantsFileConfigFile, AssistantFiles)",
          "328:       return c.Status(fiber.StatusOK).JSON(assistantFile)",
          "329:      }",
          "330:     }",
          "332:     return c.Status(fiber.StatusNotFound).SendString(fmt.Sprintf(\"Unable to find file_id: %s\", request.FileID))",
          "333:    }",
          "334:   }",
          "336:   return c.Status(fiber.StatusNotFound).SendString(fmt.Sprintf(\"Unable to find \"))",
          "337:  }",
          "338: }",
          "340: func ListAssistantFilesEndpoint(cl *config.BackendConfigLoader, ml *model.ModelLoader, appConfig *config.ApplicationConfig) func(c *fiber.Ctx) error {",
          "341:  type ListAssistantFiles struct {",
          "342:   Data   []File",
          "343:   Object string",
          "344:  }",
          "346:  return func(c *fiber.Ctx) error {",
          "347:   assistantID := c.Params(\"assistant_id\")",
          "348:   if assistantID == \"\" {",
          "349:    return c.Status(fiber.StatusBadRequest).SendString(\"parameter assistant_id is required\")",
          "350:   }",
          "352:   limitQuery := c.Query(\"limit\", \"20\")",
          "353:   order := c.Query(\"order\", \"desc\")",
          "354:   limit, err := strconv.Atoi(limitQuery)",
          "355:   if err != nil || limit < 1 || limit > 100 {",
          "356:    limit = 20 // Default to 20 if there's an error or the limit is out of bounds",
          "357:   }",
          "360:   if order == \"asc\" {",
          "361:    sort.Slice(AssistantFiles, func(i, j int) bool {",
          "362:     return AssistantFiles[i].CreatedAt < AssistantFiles[j].CreatedAt",
          "363:    })",
          "364:   } else { // default to \"desc\"",
          "365:    sort.Slice(AssistantFiles, func(i, j int) bool {",
          "366:     return AssistantFiles[i].CreatedAt > AssistantFiles[j].CreatedAt",
          "367:    })",
          "368:   }",
          "371:   var limitedFiles []AssistantFile",
          "372:   hasMore := false",
          "373:   if len(AssistantFiles) > limit {",
          "374:    hasMore = true",
          "375:    limitedFiles = AssistantFiles[:limit]",
          "376:   } else {",
          "377:    limitedFiles = AssistantFiles",
          "378:   }",
          "380:   response := map[string]interface{}{",
          "381:    \"object\": \"list\",",
          "382:    \"data\":   limitedFiles,",
          "383:    \"first_id\": func() string {",
          "384:     if len(limitedFiles) > 0 {",
          "385:      return limitedFiles[0].ID",
          "386:     }",
          "387:     return \"\"",
          "388:    }(),",
          "389:    \"last_id\": func() string {",
          "390:     if len(limitedFiles) > 0 {",
          "391:      return limitedFiles[len(limitedFiles)-1].ID",
          "392:     }",
          "393:     return \"\"",
          "394:    }(),",
          "395:    \"has_more\": hasMore,",
          "396:   }",
          "398:   return c.Status(fiber.StatusOK).JSON(response)",
          "399:  }",
          "400: }",
          "402: func ModifyAssistantEndpoint(cl *config.BackendConfigLoader, ml *model.ModelLoader, appConfig *config.ApplicationConfig) func(c *fiber.Ctx) error {",
          "403:  return func(c *fiber.Ctx) error {",
          "404:   request := new(AssistantRequest)",
          "405:   if err := c.BodyParser(request); err != nil {",
          "406:    log.Warn().AnErr(\"Unable to parse AssistantRequest\", err)",
          "407:    return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{\"error\": \"Cannot parse JSON\"})",
          "408:   }",
          "410:   assistantID := c.Params(\"assistant_id\")",
          "411:   if assistantID == \"\" {",
          "412:    return c.Status(fiber.StatusBadRequest).SendString(\"parameter assistant_id is required\")",
          "413:   }",
          "415:   for i, assistant := range Assistants {",
          "416:    if assistant.ID == assistantID {",
          "417:     newAssistant := Assistant{",
          "418:      ID:           assistantID,",
          "419:      Object:       assistant.Object,",
          "420:      Created:      assistant.Created,",
          "421:      Model:        request.Model,",
          "422:      Name:         request.Name,",
          "423:      Description:  request.Description,",
          "424:      Instructions: request.Instructions,",
          "425:      Tools:        request.Tools,",
          "426:      FileIDs:      request.FileIDs, // todo: should probably verify fileids exist",
          "427:      Metadata:     request.Metadata,",
          "428:     }",
          "431:     Assistants = append(Assistants[:i], Assistants[i+1:]...)",
          "432:     Assistants = append(Assistants, newAssistant)",
          "433:     utils.SaveConfig(appConfig.ConfigsDir, AssistantsConfigFile, Assistants)",
          "434:     return c.Status(fiber.StatusOK).JSON(newAssistant)",
          "435:    }",
          "436:   }",
          "437:   return c.Status(fiber.StatusNotFound).SendString(fmt.Sprintf(\"Unable to find assistant with id: %s\", assistantID))",
          "438:  }",
          "439: }",
          "441: func DeleteAssistantFileEndpoint(cl *config.BackendConfigLoader, ml *model.ModelLoader, appConfig *config.ApplicationConfig) func(c *fiber.Ctx) error {",
          "442:  return func(c *fiber.Ctx) error {",
          "443:   assistantID := c.Params(\"assistant_id\")",
          "444:   fileId := c.Params(\"file_id\")",
          "445:   if assistantID == \"\" {",
          "446:    return c.Status(fiber.StatusBadRequest).SendString(\"parameter assistant_id and file_id are required\")",
          "447:   }",
          "449:   for i, assistant := range Assistants {",
          "450:    if assistant.ID == assistantID {",
          "451:     for j, fileId := range assistant.FileIDs {",
          "452:      if fileId == fileId {",
          "453:       Assistants[i].FileIDs = append(Assistants[i].FileIDs[:j], Assistants[i].FileIDs[j+1:]...)",
          "456:       for i, assistantFile := range AssistantFiles {",
          "457:        if assistantFile.ID == fileId {",
          "459:         AssistantFiles = append(AssistantFiles[:i], AssistantFiles[i+1:]...)",
          "460:         utils.SaveConfig(appConfig.ConfigsDir, AssistantsFileConfigFile, AssistantFiles)",
          "461:         return c.Status(fiber.StatusOK).JSON(DeleteAssistantFileResponse{",
          "462:          ID:      fileId,",
          "463:          Object:  \"assistant.file.deleted\",",
          "464:          Deleted: true,",
          "465:         })",
          "466:        }",
          "467:       }",
          "468:      }",
          "469:     }",
          "471:     log.Warn().Msgf(\"Unable to locate file_id: %s in assistants: %s. Continuing to delete assistant file.\", fileId, assistantID)",
          "472:     for i, assistantFile := range AssistantFiles {",
          "473:      if assistantFile.AssistantID == assistantID {",
          "475:       AssistantFiles = append(AssistantFiles[:i], AssistantFiles[i+1:]...)",
          "476:       utils.SaveConfig(appConfig.ConfigsDir, AssistantsFileConfigFile, AssistantFiles)",
          "478:       return c.Status(fiber.StatusNotFound).JSON(DeleteAssistantFileResponse{",
          "479:        ID:      fileId,",
          "480:        Object:  \"assistant.file.deleted\",",
          "481:        Deleted: true,",
          "482:       })",
          "483:      }",
          "484:     }",
          "485:    }",
          "486:   }",
          "487:   log.Warn().Msgf(\"Unable to find assistant: %s\", assistantID)",
          "489:   return c.Status(fiber.StatusNotFound).JSON(DeleteAssistantFileResponse{",
          "490:    ID:      fileId,",
          "491:    Object:  \"assistant.file.deleted\",",
          "492:    Deleted: false,",
          "493:   })",
          "494:  }",
          "495: }",
          "497: func GetAssistantFileEndpoint(cl *config.BackendConfigLoader, ml *model.ModelLoader, appConfig *config.ApplicationConfig) func(c *fiber.Ctx) error {",
          "498:  return func(c *fiber.Ctx) error {",
          "499:   assistantID := c.Params(\"assistant_id\")",
          "500:   fileId := c.Params(\"file_id\")",
          "501:   if assistantID == \"\" {",
          "502:    return c.Status(fiber.StatusBadRequest).SendString(\"parameter assistant_id and file_id are required\")",
          "503:   }",
          "505:   for _, assistantFile := range AssistantFiles {",
          "506:    if assistantFile.AssistantID == assistantID {",
          "507:     if assistantFile.ID == fileId {",
          "508:      return c.Status(fiber.StatusOK).JSON(assistantFile)",
          "509:     }",
          "510:     return c.Status(fiber.StatusNotFound).SendString(fmt.Sprintf(\"Unable to find assistant file with file_id: %s\", fileId))",
          "511:    }",
          "512:   }",
          "513:   return c.Status(fiber.StatusNotFound).SendString(fmt.Sprintf(\"Unable to find assistant file with assistant_id: %s\", assistantID))",
          "514:  }",
          "515: }",
          "",
          "---------------"
        ],
        "core/http/endpoints/openai/assistant_test.go||core/http/endpoints/openai/assistant_test.go": [
          "File: core/http/endpoints/openai/assistant_test.go -> core/http/endpoints/openai/assistant_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package openai",
          "3: import (",
          "4:  \"encoding/json\"",
          "5:  \"fmt\"",
          "6:  \"github.com/go-skynet/LocalAI/core/config\"",
          "7:  \"github.com/go-skynet/LocalAI/pkg/model\"",
          "8:  \"github.com/gofiber/fiber/v2\"",
          "9:  \"github.com/stretchr/testify/assert\"",
          "10:  \"io\"",
          "11:  \"io/ioutil\"",
          "12:  \"net/http\"",
          "13:  \"net/http/httptest\"",
          "14:  \"os\"",
          "15:  \"path/filepath\"",
          "16:  \"strings\"",
          "17:  \"testing\"",
          "18:  \"time\"",
          "19: )",
          "21: var configsDir string = \"/tmp/localai/configs\"",
          "23: type MockLoader struct {",
          "24:  models []string",
          "25: }",
          "27: func tearDown() func() {",
          "28:  return func() {",
          "29:   UploadedFiles = []File{}",
          "30:   Assistants = []Assistant{}",
          "31:   AssistantFiles = []AssistantFile{}",
          "32:   _ = os.Remove(filepath.Join(configsDir, AssistantsConfigFile))",
          "33:   _ = os.Remove(filepath.Join(configsDir, AssistantsFileConfigFile))",
          "34:  }",
          "35: }",
          "37: func TestAssistantEndpoints(t *testing.T) {",
          "39:  cl := &config.BackendConfigLoader{}",
          "41:  modelPath := \"/tmp/localai/model\"",
          "42:  var ml = model.NewModelLoader(modelPath)",
          "44:  appConfig := &config.ApplicationConfig{",
          "45:   ConfigsDir:    configsDir,",
          "46:   UploadLimitMB: 10,",
          "47:   UploadDir:     \"test_dir\",",
          "48:   ModelPath:     modelPath,",
          "49:  }",
          "51:  _ = os.RemoveAll(appConfig.ConfigsDir)",
          "52:  _ = os.MkdirAll(appConfig.ConfigsDir, 0755)",
          "53:  _ = os.MkdirAll(modelPath, 0755)",
          "54:  os.Create(filepath.Join(modelPath, \"ggml-gpt4all-j\"))",
          "56:  app := fiber.New(fiber.Config{",
          "57:   BodyLimit: 20 * 1024 * 1024, // sets the limit to 20MB.",
          "58:  })",
          "61:  app.Get(\"/assistants\", ListAssistantsEndpoint(cl, ml, appConfig))",
          "62:  app.Post(\"/assistants\", CreateAssistantEndpoint(cl, ml, appConfig))",
          "63:  app.Delete(\"/assistants/:assistant_id\", DeleteAssistantEndpoint(cl, ml, appConfig))",
          "64:  app.Get(\"/assistants/:assistant_id\", GetAssistantEndpoint(cl, ml, appConfig))",
          "65:  app.Post(\"/assistants/:assistant_id\", ModifyAssistantEndpoint(cl, ml, appConfig))",
          "67:  app.Post(\"/files\", UploadFilesEndpoint(cl, appConfig))",
          "68:  app.Get(\"/assistants/:assistant_id/files\", ListAssistantFilesEndpoint(cl, ml, appConfig))",
          "69:  app.Post(\"/assistants/:assistant_id/files\", CreateAssistantFileEndpoint(cl, ml, appConfig))",
          "70:  app.Delete(\"/assistants/:assistant_id/files/:file_id\", DeleteAssistantFileEndpoint(cl, ml, appConfig))",
          "71:  app.Get(\"/assistants/:assistant_id/files/:file_id\", GetAssistantFileEndpoint(cl, ml, appConfig))",
          "73:  t.Run(\"CreateAssistantEndpoint\", func(t *testing.T) {",
          "74:   t.Cleanup(tearDown())",
          "75:   ar := &AssistantRequest{",
          "76:    Model:        \"ggml-gpt4all-j\",",
          "77:    Name:         \"3.5-turbo\",",
          "78:    Description:  \"Test Assistant\",",
          "79:    Instructions: \"You are computer science teacher answering student questions\",",
          "80:    Tools:        []Tool{{Type: Function}},",
          "81:    FileIDs:      nil,",
          "82:    Metadata:     nil,",
          "83:   }",
          "85:   resultAssistant, resp, err := createAssistant(app, *ar)",
          "86:   assert.NoError(t, err)",
          "87:   assert.Equal(t, fiber.StatusOK, resp.StatusCode)",
          "89:   assert.Equal(t, 1, len(Assistants))",
          "92:   assert.Equal(t, ar.Name, resultAssistant.Name)",
          "93:   assert.Equal(t, ar.Model, resultAssistant.Model)",
          "94:   assert.Equal(t, ar.Tools, resultAssistant.Tools)",
          "95:   assert.Equal(t, ar.Description, resultAssistant.Description)",
          "96:   assert.Equal(t, ar.Instructions, resultAssistant.Instructions)",
          "97:   assert.Equal(t, ar.FileIDs, resultAssistant.FileIDs)",
          "98:   assert.Equal(t, ar.Metadata, resultAssistant.Metadata)",
          "99:  })",
          "101:  t.Run(\"ListAssistantsEndpoint\", func(t *testing.T) {",
          "102:   var ids []string",
          "103:   var resultAssistant []Assistant",
          "104:   for i := 0; i < 4; i++ {",
          "105:    ar := &AssistantRequest{",
          "106:     Model:        \"ggml-gpt4all-j\",",
          "107:     Name:         fmt.Sprintf(\"3.5-turbo-%d\", i),",
          "108:     Description:  fmt.Sprintf(\"Test Assistant - %d\", i),",
          "109:     Instructions: fmt.Sprintf(\"You are computer science teacher answering student questions - %d\", i),",
          "110:     Tools:        []Tool{{Type: Function}},",
          "111:     FileIDs:      []string{\"fid-1234\"},",
          "112:     Metadata:     map[string]string{\"meta\": \"data\"},",
          "113:    }",
          "116:    ra, _, err := createAssistant(app, *ar)",
          "118:    time.Sleep(time.Second)",
          "119:    resultAssistant = append(resultAssistant, ra)",
          "120:    assert.NoError(t, err)",
          "121:    ids = append(ids, resultAssistant[i].ID)",
          "122:   }",
          "124:   t.Cleanup(cleanupAllAssistants(t, app, ids))",
          "126:   tests := []struct {",
          "127:    name                 string",
          "128:    reqURL               string",
          "129:    expectedStatus       int",
          "130:    expectedResult       []Assistant",
          "131:    expectedStringResult string",
          "132:   }{",
          "133:    {",
          "134:     name:           \"Valid Usage - limit only\",",
          "135:     reqURL:         \"/assistants?limit=2\",",
          "136:     expectedStatus: http.StatusOK,",
          "137:     expectedResult: Assistants[:2], // Expecting the first two assistants",
          "138:    },",
          "139:    {",
          "140:     name:           \"Valid Usage - order asc\",",
          "141:     reqURL:         \"/assistants?order=asc\",",
          "142:     expectedStatus: http.StatusOK,",
          "143:     expectedResult: Assistants, // Expecting all assistants in ascending order",
          "144:    },",
          "145:    {",
          "146:     name:           \"Valid Usage - order desc\",",
          "147:     reqURL:         \"/assistants?order=desc\",",
          "148:     expectedStatus: http.StatusOK,",
          "149:     expectedResult: []Assistant{Assistants[3], Assistants[2], Assistants[1], Assistants[0]}, // Expecting all assistants in descending order",
          "150:    },",
          "151:    {",
          "152:     name:           \"Valid Usage - after specific ID\",",
          "153:     reqURL:         \"/assistants?after=2\",",
          "154:     expectedStatus: http.StatusOK,",
          "156:     expectedResult: Assistants[:3], // Expecting assistants after (excluding) ID 2",
          "157:    },",
          "158:    {",
          "159:     name:           \"Valid Usage - before specific ID\",",
          "160:     reqURL:         \"/assistants?before=4\",",
          "161:     expectedStatus: http.StatusOK,",
          "162:     expectedResult: Assistants[2:], // Expecting assistants before (excluding) ID 3.",
          "163:    },",
          "164:    {",
          "165:     name:                 \"Invalid Usage - non-integer limit\",",
          "166:     reqURL:               \"/assistants?limit=two\",",
          "167:     expectedStatus:       http.StatusBadRequest,",
          "168:     expectedStringResult: \"Invalid limit query value: two\",",
          "169:    },",
          "170:    {",
          "171:     name:           \"Invalid Usage - non-existing id in after\",",
          "172:     reqURL:         \"/assistants?after=100\",",
          "173:     expectedStatus: http.StatusOK,",
          "174:     expectedResult: []Assistant(nil), // Expecting empty list as there are no IDs above 100",
          "175:    },",
          "176:   }",
          "178:   for _, tt := range tests {",
          "179:    t.Run(tt.name, func(t *testing.T) {",
          "180:     request := httptest.NewRequest(http.MethodGet, tt.reqURL, nil)",
          "181:     response, err := app.Test(request)",
          "182:     assert.NoError(t, err)",
          "183:     assert.Equal(t, tt.expectedStatus, response.StatusCode)",
          "184:     if tt.expectedStatus != fiber.StatusOK {",
          "185:      all, _ := ioutil.ReadAll(response.Body)",
          "186:      assert.Equal(t, tt.expectedStringResult, string(all))",
          "187:     } else {",
          "188:      var result []Assistant",
          "189:      err = json.NewDecoder(response.Body).Decode(&result)",
          "190:      assert.NoError(t, err)",
          "192:      assert.Equal(t, tt.expectedResult, result)",
          "193:     }",
          "194:    })",
          "195:   }",
          "196:  })",
          "198:  t.Run(\"DeleteAssistantEndpoint\", func(t *testing.T) {",
          "199:   ar := &AssistantRequest{",
          "200:    Model:        \"ggml-gpt4all-j\",",
          "201:    Name:         \"3.5-turbo\",",
          "202:    Description:  \"Test Assistant\",",
          "203:    Instructions: \"You are computer science teacher answering student questions\",",
          "204:    Tools:        []Tool{{Type: Function}},",
          "205:    FileIDs:      nil,",
          "206:    Metadata:     nil,",
          "207:   }",
          "209:   resultAssistant, _, err := createAssistant(app, *ar)",
          "210:   assert.NoError(t, err)",
          "212:   target := fmt.Sprintf(\"/assistants/%s\", resultAssistant.ID)",
          "213:   deleteReq := httptest.NewRequest(http.MethodDelete, target, nil)",
          "214:   _, err = app.Test(deleteReq)",
          "215:   assert.NoError(t, err)",
          "216:   assert.Equal(t, 0, len(Assistants))",
          "217:  })",
          "219:  t.Run(\"GetAssistantEndpoint\", func(t *testing.T) {",
          "220:   ar := &AssistantRequest{",
          "221:    Model:        \"ggml-gpt4all-j\",",
          "222:    Name:         \"3.5-turbo\",",
          "223:    Description:  \"Test Assistant\",",
          "224:    Instructions: \"You are computer science teacher answering student questions\",",
          "225:    Tools:        []Tool{{Type: Function}},",
          "226:    FileIDs:      nil,",
          "227:    Metadata:     nil,",
          "228:   }",
          "230:   resultAssistant, _, err := createAssistant(app, *ar)",
          "231:   assert.NoError(t, err)",
          "232:   t.Cleanup(cleanupAllAssistants(t, app, []string{resultAssistant.ID}))",
          "234:   target := fmt.Sprintf(\"/assistants/%s\", resultAssistant.ID)",
          "235:   request := httptest.NewRequest(http.MethodGet, target, nil)",
          "236:   response, err := app.Test(request)",
          "237:   assert.NoError(t, err)",
          "239:   var getAssistant Assistant",
          "240:   err = json.NewDecoder(response.Body).Decode(&getAssistant)",
          "241:   assert.NoError(t, err)",
          "243:   assert.Equal(t, resultAssistant.ID, getAssistant.ID)",
          "244:  })",
          "246:  t.Run(\"ModifyAssistantEndpoint\", func(t *testing.T) {",
          "247:   ar := &AssistantRequest{",
          "248:    Model:        \"ggml-gpt4all-j\",",
          "249:    Name:         \"3.5-turbo\",",
          "250:    Description:  \"Test Assistant\",",
          "251:    Instructions: \"You are computer science teacher answering student questions\",",
          "252:    Tools:        []Tool{{Type: Function}},",
          "253:    FileIDs:      nil,",
          "254:    Metadata:     nil,",
          "255:   }",
          "257:   resultAssistant, _, err := createAssistant(app, *ar)",
          "258:   assert.NoError(t, err)",
          "260:   modifiedAr := &AssistantRequest{",
          "261:    Model:        \"ggml-gpt4all-j\",",
          "262:    Name:         \"4.0-turbo\",",
          "263:    Description:  \"Modified Test Assistant\",",
          "264:    Instructions: \"You are math teacher answering student questions\",",
          "265:    Tools:        []Tool{{Type: CodeInterpreter}},",
          "266:    FileIDs:      nil,",
          "267:    Metadata:     nil,",
          "268:   }",
          "270:   modifiedArJson, err := json.Marshal(modifiedAr)",
          "271:   assert.NoError(t, err)",
          "273:   target := fmt.Sprintf(\"/assistants/%s\", resultAssistant.ID)",
          "274:   request := httptest.NewRequest(http.MethodPost, target, strings.NewReader(string(modifiedArJson)))",
          "275:   request.Header.Set(fiber.HeaderContentType, \"application/json\")",
          "277:   modifyResponse, err := app.Test(request)",
          "278:   assert.NoError(t, err)",
          "279:   var getAssistant Assistant",
          "280:   err = json.NewDecoder(modifyResponse.Body).Decode(&getAssistant)",
          "282:   t.Cleanup(cleanupAllAssistants(t, app, []string{getAssistant.ID}))",
          "284:   assert.Equal(t, resultAssistant.ID, getAssistant.ID) // IDs should match even if contents change",
          "285:   assert.Equal(t, modifiedAr.Tools, getAssistant.Tools)",
          "286:   assert.Equal(t, modifiedAr.Name, getAssistant.Name)",
          "287:   assert.Equal(t, modifiedAr.Instructions, getAssistant.Instructions)",
          "288:   assert.Equal(t, modifiedAr.Description, getAssistant.Description)",
          "289:  })",
          "291:  t.Run(\"CreateAssistantFileEndpoint\", func(t *testing.T) {",
          "292:   t.Cleanup(tearDown())",
          "293:   file, assistant, err := createFileAndAssistant(t, app, appConfig)",
          "294:   assert.NoError(t, err)",
          "296:   afr := AssistantFileRequest{FileID: file.ID}",
          "297:   af, _, err := createAssistantFile(app, afr, assistant.ID)",
          "299:   assert.NoError(t, err)",
          "300:   assert.Equal(t, assistant.ID, af.AssistantID)",
          "301:  })",
          "302:  t.Run(\"ListAssistantFilesEndpoint\", func(t *testing.T) {",
          "303:   t.Cleanup(tearDown())",
          "304:   file, assistant, err := createFileAndAssistant(t, app, appConfig)",
          "305:   assert.NoError(t, err)",
          "307:   afr := AssistantFileRequest{FileID: file.ID}",
          "308:   af, _, err := createAssistantFile(app, afr, assistant.ID)",
          "309:   assert.NoError(t, err)",
          "311:   assert.Equal(t, assistant.ID, af.AssistantID)",
          "312:  })",
          "313:  t.Run(\"GetAssistantFileEndpoint\", func(t *testing.T) {",
          "314:   t.Cleanup(tearDown())",
          "315:   file, assistant, err := createFileAndAssistant(t, app, appConfig)",
          "316:   assert.NoError(t, err)",
          "318:   afr := AssistantFileRequest{FileID: file.ID}",
          "319:   af, _, err := createAssistantFile(app, afr, assistant.ID)",
          "320:   assert.NoError(t, err)",
          "321:   t.Cleanup(cleanupAssistantFile(t, app, af.ID, af.AssistantID))",
          "323:   target := fmt.Sprintf(\"/assistants/%s/files/%s\", assistant.ID, file.ID)",
          "324:   request := httptest.NewRequest(http.MethodGet, target, nil)",
          "325:   response, err := app.Test(request)",
          "326:   assert.NoError(t, err)",
          "328:   var assistantFile AssistantFile",
          "329:   err = json.NewDecoder(response.Body).Decode(&assistantFile)",
          "330:   assert.NoError(t, err)",
          "332:   assert.Equal(t, af.ID, assistantFile.ID)",
          "333:   assert.Equal(t, af.AssistantID, assistantFile.AssistantID)",
          "334:  })",
          "335:  t.Run(\"DeleteAssistantFileEndpoint\", func(t *testing.T) {",
          "336:   t.Cleanup(tearDown())",
          "337:   file, assistant, err := createFileAndAssistant(t, app, appConfig)",
          "338:   assert.NoError(t, err)",
          "340:   afr := AssistantFileRequest{FileID: file.ID}",
          "341:   af, _, err := createAssistantFile(app, afr, assistant.ID)",
          "342:   assert.NoError(t, err)",
          "344:   cleanupAssistantFile(t, app, af.ID, af.AssistantID)()",
          "346:   assert.Empty(t, AssistantFiles)",
          "347:  })",
          "349: }",
          "351: func createFileAndAssistant(t *testing.T, app *fiber.App, o *config.ApplicationConfig) (File, Assistant, error) {",
          "352:  ar := &AssistantRequest{",
          "353:   Model:        \"ggml-gpt4all-j\",",
          "354:   Name:         \"3.5-turbo\",",
          "355:   Description:  \"Test Assistant\",",
          "356:   Instructions: \"You are computer science teacher answering student questions\",",
          "357:   Tools:        []Tool{{Type: Function}},",
          "358:   FileIDs:      nil,",
          "359:   Metadata:     nil,",
          "360:  }",
          "362:  assistant, _, err := createAssistant(app, *ar)",
          "363:  if err != nil {",
          "364:   return File{}, Assistant{}, err",
          "365:  }",
          "366:  t.Cleanup(cleanupAllAssistants(t, app, []string{assistant.ID}))",
          "368:  file := CallFilesUploadEndpointWithCleanup(t, app, \"test.txt\", \"file\", \"fine-tune\", 5, o)",
          "369:  t.Cleanup(func() {",
          "370:   _, err := CallFilesDeleteEndpoint(t, app, file.ID)",
          "371:   assert.NoError(t, err)",
          "372:  })",
          "373:  return file, assistant, nil",
          "374: }",
          "376: func createAssistantFile(app *fiber.App, afr AssistantFileRequest, assistantId string) (AssistantFile, *http.Response, error) {",
          "377:  afrJson, err := json.Marshal(afr)",
          "378:  if err != nil {",
          "379:   return AssistantFile{}, nil, err",
          "380:  }",
          "382:  target := fmt.Sprintf(\"/assistants/%s/files\", assistantId)",
          "383:  request := httptest.NewRequest(http.MethodPost, target, strings.NewReader(string(afrJson)))",
          "384:  request.Header.Set(fiber.HeaderContentType, \"application/json\")",
          "385:  request.Header.Set(\"OpenAi-Beta\", \"assistants=v1\")",
          "387:  resp, err := app.Test(request)",
          "388:  if err != nil {",
          "389:   return AssistantFile{}, resp, err",
          "390:  }",
          "392:  var assistantFile AssistantFile",
          "393:  all, err := ioutil.ReadAll(resp.Body)",
          "394:  err = json.NewDecoder(strings.NewReader(string(all))).Decode(&assistantFile)",
          "395:  if err != nil {",
          "396:   return AssistantFile{}, resp, err",
          "397:  }",
          "399:  return assistantFile, resp, nil",
          "400: }",
          "402: func createAssistant(app *fiber.App, ar AssistantRequest) (Assistant, *http.Response, error) {",
          "403:  assistant, err := json.Marshal(ar)",
          "404:  if err != nil {",
          "405:   return Assistant{}, nil, err",
          "406:  }",
          "408:  request := httptest.NewRequest(http.MethodPost, \"/assistants\", strings.NewReader(string(assistant)))",
          "409:  request.Header.Set(fiber.HeaderContentType, \"application/json\")",
          "410:  request.Header.Set(\"OpenAi-Beta\", \"assistants=v1\")",
          "412:  resp, err := app.Test(request)",
          "413:  if err != nil {",
          "414:   return Assistant{}, resp, err",
          "415:  }",
          "417:  bodyString, err := io.ReadAll(resp.Body)",
          "418:  if err != nil {",
          "419:   return Assistant{}, resp, err",
          "420:  }",
          "422:  var resultAssistant Assistant",
          "423:  err = json.NewDecoder(strings.NewReader(string(bodyString))).Decode(&resultAssistant)",
          "425:  return resultAssistant, resp, nil",
          "426: }",
          "428: func cleanupAllAssistants(t *testing.T, app *fiber.App, ids []string) func() {",
          "429:  return func() {",
          "430:   for _, assistant := range ids {",
          "431:    target := fmt.Sprintf(\"/assistants/%s\", assistant)",
          "432:    deleteReq := httptest.NewRequest(http.MethodDelete, target, nil)",
          "433:    _, err := app.Test(deleteReq)",
          "434:    if err != nil {",
          "435:     t.Fatalf(\"Failed to delete assistant %s: %v\", assistant, err)",
          "436:    }",
          "437:   }",
          "438:  }",
          "439: }",
          "441: func cleanupAssistantFile(t *testing.T, app *fiber.App, fileId, assistantId string) func() {",
          "442:  return func() {",
          "443:   target := fmt.Sprintf(\"/assistants/%s/files/%s\", assistantId, fileId)",
          "444:   request := httptest.NewRequest(http.MethodDelete, target, nil)",
          "445:   request.Header.Set(fiber.HeaderContentType, \"application/json\")",
          "446:   request.Header.Set(\"OpenAi-Beta\", \"assistants=v1\")",
          "448:   resp, err := app.Test(request)",
          "449:   assert.NoError(t, err)",
          "451:   var dafr DeleteAssistantFileResponse",
          "452:   err = json.NewDecoder(resp.Body).Decode(&dafr)",
          "453:   assert.NoError(t, err)",
          "454:   assert.True(t, dafr.Deleted)",
          "455:  }",
          "456: }",
          "",
          "---------------"
        ],
        "core/http/endpoints/openai/files.go||core/http/endpoints/openai/files.go": [
          "File: core/http/endpoints/openai/files.go -> core/http/endpoints/openai/files.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package openai",
          "3: import (",
          "5:  \"errors\"",
          "6:  \"fmt\"",
          "7:  \"os\"",
          "8:  \"path/filepath\"",
          "9:  \"time\"",
          "11:  \"github.com/go-skynet/LocalAI/core/config\"",
          "13:  \"github.com/go-skynet/LocalAI/pkg/utils\"",
          "14:  \"github.com/gofiber/fiber/v2\"",
          "16: )",
          "23: type File struct {",
          "",
          "[Removed Lines]",
          "4:  \"encoding/json\"",
          "15:  \"github.com/rs/zerolog/log\"",
          "18: var uploadedFiles []File",
          "20: const uploadedFilesFile = \"uploadedFiles.json\"",
          "",
          "[Added Lines]",
          "8:  \"sync/atomic\"",
          "17: var UploadedFiles []File",
          "19: const UploadedFilesFile = \"uploadedFiles.json\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:  Purpose   string    `json:\"purpose\"`    // The purpose of the file (e.g., \"fine-tune\", \"classifications\", etc.)",
          "30: }",
          "65: func UploadFilesEndpoint(cm *config.BackendConfigLoader, appConfig *config.ApplicationConfig) func(c *fiber.Ctx) error {",
          "66:  return func(c *fiber.Ctx) error {",
          "",
          "[Removed Lines]",
          "32: func saveUploadConfig(uploadDir string) {",
          "33:  file, err := json.MarshalIndent(uploadedFiles, \"\", \" \")",
          "34:  if err != nil {",
          "35:   log.Error().Msgf(\"Failed to JSON marshal the uploadedFiles: %s\", err)",
          "36:  }",
          "38:  err = os.WriteFile(filepath.Join(uploadDir, uploadedFilesFile), file, 0644)",
          "39:  if err != nil {",
          "40:   log.Error().Msgf(\"Failed to save uploadedFiles to file: %s\", err)",
          "41:  }",
          "42: }",
          "44: func LoadUploadConfig(uploadPath string) {",
          "45:  uploadFilePath := filepath.Join(uploadPath, uploadedFilesFile)",
          "47:  _, err := os.Stat(uploadFilePath)",
          "48:  if os.IsNotExist(err) {",
          "49:   log.Debug().Msgf(\"No uploadedFiles file found at %s\", uploadFilePath)",
          "50:   return",
          "51:  }",
          "53:  file, err := os.ReadFile(uploadFilePath)",
          "54:  if err != nil {",
          "55:   log.Error().Msgf(\"Failed to read file: %s\", err)",
          "56:  } else {",
          "57:   err = json.Unmarshal(file, &uploadedFiles)",
          "58:   if err != nil {",
          "59:    log.Error().Msgf(\"Failed to JSON unmarshal the file into uploadedFiles: %s\", err)",
          "60:   }",
          "61:  }",
          "62: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:   }",
          "97:   f := File{",
          "99:    Object:    \"file\",",
          "100:    Bytes:     int(file.Size),",
          "101:    CreatedAt: time.Now(),",
          "",
          "[Removed Lines]",
          "98:    ID:        fmt.Sprintf(\"file-%d\", time.Now().Unix()),",
          "",
          "[Added Lines]",
          "65:    ID:        fmt.Sprintf(\"file-%d\", getNextFileId()),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:    Purpose:   purpose,",
          "104:   }",
          "108:   return c.Status(fiber.StatusOK).JSON(f)",
          "109:  }",
          "110: }",
          "113: func ListFilesEndpoint(cm *config.BackendConfigLoader, appConfig *config.ApplicationConfig) func(c *fiber.Ctx) error {",
          "114:  type ListFiles struct {",
          "",
          "[Removed Lines]",
          "106:   uploadedFiles = append(uploadedFiles, f)",
          "107:   saveUploadConfig(appConfig.UploadDir)",
          "",
          "[Added Lines]",
          "73:   UploadedFiles = append(UploadedFiles, f)",
          "74:   utils.SaveConfig(appConfig.UploadDir, UploadedFilesFile, UploadedFiles)",
          "79: var currentFileId int64 = 0",
          "81: func getNextFileId() int64 {",
          "82:  atomic.AddInt64(&currentId, 1)",
          "83:  return currentId",
          "84: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "122:   purpose := c.Query(\"purpose\")",
          "123:   if purpose == \"\" {",
          "125:   } else {",
          "127:     if purpose == f.Purpose {",
          "128:      listFiles.Data = append(listFiles.Data, f)",
          "129:     }",
          "",
          "[Removed Lines]",
          "124:    listFiles.Data = uploadedFiles",
          "126:    for _, f := range uploadedFiles {",
          "",
          "[Added Lines]",
          "98:    listFiles.Data = UploadedFiles",
          "100:    for _, f := range UploadedFiles {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "140:   return nil, fmt.Errorf(\"file_id parameter is required\")",
          "141:  }",
          "144:   if id == f.ID {",
          "145:    return &f, nil",
          "146:   }",
          "",
          "[Removed Lines]",
          "143:  for _, f := range uploadedFiles {",
          "",
          "[Added Lines]",
          "117:  for _, f := range UploadedFiles {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "184:   }",
          "188:    if f.ID == file.ID {",
          "190:     break",
          "191:    }",
          "192:   }",
          "195:   return c.JSON(DeleteStatus{",
          "196:    Id:      file.ID,",
          "197:    Object:  \"file\",",
          "",
          "[Removed Lines]",
          "187:   for i, f := range uploadedFiles {",
          "189:     uploadedFiles = append(uploadedFiles[:i], uploadedFiles[i+1:]...)",
          "194:   saveUploadConfig(appConfig.UploadDir)",
          "",
          "[Added Lines]",
          "161:   for i, f := range UploadedFiles {",
          "163:     UploadedFiles = append(UploadedFiles[:i], UploadedFiles[i+1:]...)",
          "168:   utils.SaveConfig(appConfig.UploadDir, UploadedFilesFile, UploadedFiles)",
          "",
          "---------------"
        ],
        "core/http/endpoints/openai/files_test.go||core/http/endpoints/openai/files_test.go": [
          "File: core/http/endpoints/openai/files_test.go -> core/http/endpoints/openai/files_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"encoding/json\"",
          "5:  \"fmt\"",
          "6:  \"io\"",
          "7:  \"mime/multipart\"",
          "8:  \"net/http\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6:  \"github.com/rs/zerolog/log\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:  app.Get(\"/files/:file_id/content\", GetFilesContentsEndpoint(loader, option))",
          "75:  t.Run(\"UploadFilesEndpoint file size exceeds limit\", func(t *testing.T) {",
          "76:   resp, err := CallFilesUploadEndpoint(t, app, \"foo.txt\", \"file\", \"fine-tune\", 11, option)",
          "77:   assert.NoError(t, err)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:   t.Cleanup(tearDown())",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:   assert.Contains(t, bodyToString(resp, t), \"exceeds upload limit\")",
          "81:  })",
          "82:  t.Run(\"UploadFilesEndpoint purpose not defined\", func(t *testing.T) {",
          "83:   resp, _ := CallFilesUploadEndpoint(t, app, \"foo.txt\", \"file\", \"\", 5, option)",
          "85:   assert.Equal(t, fiber.StatusBadRequest, resp.StatusCode)",
          "86:   assert.Contains(t, bodyToString(resp, t), \"Purpose is not defined\")",
          "87:  })",
          "88:  t.Run(\"UploadFilesEndpoint file already exists\", func(t *testing.T) {",
          "89:   f1 := CallFilesUploadEndpointWithCleanup(t, app, \"foo.txt\", \"file\", \"fine-tune\", 5, option)",
          "91:   resp, err := CallFilesUploadEndpoint(t, app, \"foo.txt\", \"file\", \"fine-tune\", 5, option)",
          "92:   fmt.Println(f1)",
          "95:   assert.Equal(t, fiber.StatusBadRequest, resp.StatusCode)",
          "96:   assert.Contains(t, bodyToString(resp, t), \"File already exists\")",
          "97:  })",
          "98:  t.Run(\"UploadFilesEndpoint file uploaded successfully\", func(t *testing.T) {",
          "99:   file := CallFilesUploadEndpointWithCleanup(t, app, \"test.txt\", \"file\", \"fine-tune\", 5, option)",
          "103:   _, err := os.Stat(filePath)",
          "105:   assert.False(t, os.IsNotExist(err))",
          "106:   assert.Equal(t, file.Bytes, 5242880)",
          "107:   assert.NotEmpty(t, file.CreatedAt)",
          "109:   assert.Equal(t, file.Purpose, \"fine-tune\")",
          "110:  })",
          "111:  t.Run(\"ListFilesEndpoint without purpose parameter\", func(t *testing.T) {",
          "112:   resp, err := CallListFilesEndpoint(t, app, \"\")",
          "113:   assert.NoError(t, err)",
          "115:   assert.Equal(t, 200, resp.StatusCode)",
          "117:   listFiles := responseToListFile(t, resp)",
          "120:   }",
          "121:  })",
          "122:  t.Run(\"ListFilesEndpoint with valid purpose parameter\", func(t *testing.T) {",
          "123:   _ = CallFilesUploadEndpointWithCleanup(t, app, \"test.txt\", \"file\", \"fine-tune\", 5, option)",
          "125:   resp, err := CallListFilesEndpoint(t, app, \"fine-tune\")",
          "",
          "[Removed Lines]",
          "93:   fmt.Printf(\"ERror: %v\", err)",
          "102:   filePath := filepath.Join(option.UploadDir, utils2.SanitizeFileName(\"test.txt\"))",
          "108:   assert.Equal(t, file.Filename, \"test.txt\")",
          "118:   if len(listFiles.Data) != len(uploadedFiles) {",
          "119:    t.Errorf(\"Expected %v files, got %v files\", len(uploadedFiles), len(listFiles.Data))",
          "",
          "[Added Lines]",
          "85:   t.Cleanup(tearDown())",
          "92:   t.Cleanup(tearDown())",
          "97:   fmt.Printf(\"ERror: %v\\n\", err)",
          "98:   fmt.Printf(\"resp: %+v\\n\", resp)",
          "104:   t.Cleanup(tearDown())",
          "108:   testName := strings.Split(t.Name(), \"/\")[1]",
          "109:   fileName := testName + \"-test.txt\"",
          "110:   filePath := filepath.Join(option.UploadDir, utils2.SanitizeFileName(fileName))",
          "116:   assert.Equal(t, file.Filename, fileName)",
          "120:   t.Cleanup(tearDown())",
          "127:   if len(listFiles.Data) != len(UploadedFiles) {",
          "128:    t.Errorf(\"Expected %v files, got %v files\", len(UploadedFiles), len(listFiles.Data))",
          "132:   t.Cleanup(tearDown())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:   }",
          "132:  })",
          "133:  t.Run(\"ListFilesEndpoint with invalid query parameter\", func(t *testing.T) {",
          "134:   resp, err := CallListFilesEndpoint(t, app, \"not-so-fine-tune\")",
          "135:   assert.NoError(t, err)",
          "136:   assert.Equal(t, 200, resp.StatusCode)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:   t.Cleanup(tearDown())",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "142:   }",
          "143:  })",
          "144:  t.Run(\"GetFilesContentsEndpoint get file content\", func(t *testing.T) {",
          "145:   req := httptest.NewRequest(\"GET\", \"/files\", nil)",
          "146:   resp, _ := app.Test(req)",
          "147:   assert.Equal(t, 200, resp.StatusCode)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:   t.Cleanup(tearDown())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "175: }",
          "177: func CallFilesUploadEndpoint(t *testing.T, app *fiber.App, fileName, tag, purpose string, fileSize int, appConfig *config.ApplicationConfig) (*http.Response, error) {",
          "182:  body, writer := newMultipartFile(file.Name(), tag, purpose)",
          "",
          "[Removed Lines]",
          "179:  file := createTestFile(t, fileName, fileSize, appConfig)",
          "",
          "[Added Lines]",
          "190:  testName := strings.Split(t.Name(), \"/\")[1]",
          "193:  file := createTestFile(t, testName+\"-\"+fileName, fileSize, appConfig)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "189: func CallFilesUploadEndpointWithCleanup(t *testing.T, app *fiber.App, fileName, tag, purpose string, fileSize int, appConfig *config.ApplicationConfig) File {",
          "194:  body, writer := newMultipartFile(file.Name(), tag, purpose)",
          "",
          "[Removed Lines]",
          "191:  file := createTestFile(t, fileName, fileSize, appConfig)",
          "",
          "[Added Lines]",
          "205:  testName := strings.Split(t.Name(), \"/\")[1]",
          "206:  file := createTestFile(t, testName+\"-\"+fileName, fileSize, appConfig)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "199:  assert.NoError(t, err)",
          "200:  f := responseToFile(t, resp)",
          "208:  return f",
          "",
          "[Removed Lines]",
          "202:  id := f.ID",
          "203:  t.Cleanup(func() {",
          "204:   _, err := CallFilesDeleteEndpoint(t, app, id)",
          "205:   assert.NoError(t, err)",
          "206:  })",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "240:   t.Fatalf(\"Error MKDIR: %v\", err)",
          "241:  }",
          "244:  file.WriteString(strings.Repeat(\"a\", sizeMB*1024*1024)) // sizeMB MB File",
          "246:  t.Cleanup(func() {",
          "",
          "[Removed Lines]",
          "243:  file, _ := os.Create(name)",
          "",
          "[Added Lines]",
          "259:  file, err := os.Create(name)",
          "260:  assert.NoError(t, err)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "281:  err := json.NewDecoder(strings.NewReader(responseToString)).Decode(&listFiles)",
          "282:  if err != nil {",
          "284:  }",
          "286:  return listFiles",
          "",
          "[Removed Lines]",
          "283:   fmt.Printf(\"Failed to decode response: %s\", err)",
          "",
          "[Added Lines]",
          "300:   log.Error().Msgf(\"Failed to decode response: %s\", err)",
          "",
          "---------------"
        ],
        "main.go||main.go": [
          "File: main.go -> main.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:     EnvVars: []string{\"UPLOAD_PATH\"},",
          "150:     Value:   \"/tmp/localai/upload\",",
          "151:    },",
          "152:    &cli.StringFlag{",
          "153:     Name:    \"backend-assets-path\",",
          "154:     Usage:   \"Path used to extract libraries that are required by some of the backends in runtime.\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:    &cli.StringFlag{",
          "153:     Name:    \"config-path\",",
          "154:     Usage:   \"Path to store uploads from files api\",",
          "155:     EnvVars: []string{\"CONFIG_PATH\"},",
          "156:     Value:   \"/tmp/localai/config\",",
          "157:    },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:     config.WithImageDir(ctx.String(\"image-path\")),",
          "242:     config.WithAudioDir(ctx.String(\"audio-path\")),",
          "243:     config.WithUploadDir(ctx.String(\"upload-path\")),",
          "244:     config.WithF16(ctx.Bool(\"f16\")),",
          "245:     config.WithStringGalleries(ctx.String(\"galleries\")),",
          "246:     config.WithModelLibraryURL(ctx.String(\"remote-library\")),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "250:     config.WithConfigsDir(ctx.String(\"config-path\")),",
          "",
          "---------------"
        ],
        "pkg/utils/config.go||pkg/utils/config.go": [
          "File: pkg/utils/config.go -> pkg/utils/config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package utils",
          "3: import (",
          "4:  \"encoding/json\"",
          "5:  \"github.com/rs/zerolog/log\"",
          "6:  \"os\"",
          "7:  \"path/filepath\"",
          "8: )",
          "10: func SaveConfig(filePath, fileName string, obj any) {",
          "11:  file, err := json.MarshalIndent(obj, \"\", \" \")",
          "12:  if err != nil {",
          "13:   log.Error().Msgf(\"Failed to JSON marshal the uploadedFiles: %s\", err)",
          "14:  }",
          "16:  absolutePath := filepath.Join(filePath, fileName)",
          "17:  err = os.WriteFile(absolutePath, file, 0644)",
          "18:  if err != nil {",
          "19:   log.Error().Msgf(\"Failed to save configuration file to %s: %s\", absolutePath, err)",
          "20:  }",
          "21: }",
          "23: func LoadConfig(filePath, fileName string, obj interface{}) {",
          "24:  uploadFilePath := filepath.Join(filePath, fileName)",
          "26:  _, err := os.Stat(uploadFilePath)",
          "27:  if os.IsNotExist(err) {",
          "28:   log.Debug().Msgf(\"No configuration file found at %s\", uploadFilePath)",
          "29:   return",
          "30:  }",
          "32:  file, err := os.ReadFile(uploadFilePath)",
          "33:  if err != nil {",
          "34:   log.Error().Msgf(\"Failed to read file: %s\", err)",
          "35:  } else {",
          "36:   err = json.Unmarshal(file, &obj)",
          "37:   if err != nil {",
          "38:    log.Error().Msgf(\"Failed to JSON unmarshal the file %s: %v\", uploadFilePath, err)",
          "39:   }",
          "40:  }",
          "41: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de148cb2ad08adda4d62275f2e16028647bc0c1e",
      "candidate_info": {
        "commit_hash": "de148cb2ad08adda4d62275f2e16028647bc0c1e",
        "repo": "mudler/localai",
        "commit_url": "https://github.com/mudler/localai/commit/de148cb2ad08adda4d62275f2e16028647bc0c1e",
        "files": [
          "core/http/app_test.go",
          "core/http/middleware/auth.go",
          "core/http/views/login.html"
        ],
        "message": "feat: add WebUI API token authorization (#4197)\n\n* return 401 instead of 403, provide www-authenticate header, redirect to the login page, add cookie token support\n\n* set cookies completely through js in auth page",
        "before_after_code_files": [
          "core/http/app_test.go||core/http/app_test.go",
          "core/http/middleware/auth.go||core/http/middleware/auth.go",
          "core/http/views/login.html||core/http/views/login.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/http/middleware/auth.go||core/http/middleware/auth.go"
          ],
          "candidate": [
            "core/http/middleware/auth.go||core/http/middleware/auth.go"
          ]
        }
      },
      "candidate_diff": {
        "core/http/app_test.go||core/http/app_test.go": [
          "File: core/http/app_test.go -> core/http/app_test.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "345:    It(\"Should fail if the api key is missing\", func() {",
          "346:     err, sc := postInvalidRequest(\"http://127.0.0.1:9090/models/available\")",
          "347:     Expect(err).ToNot(BeNil())",
          "349:    })",
          "350:   })",
          "",
          "[Removed Lines]",
          "348:     Expect(sc).To(Equal(403))",
          "",
          "[Added Lines]",
          "348:     Expect(sc).To(Equal(401))",
          "",
          "---------------"
        ],
        "core/http/middleware/auth.go||core/http/middleware/auth.go": [
          "File: core/http/middleware/auth.go -> core/http/middleware/auth.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: package middleware",
          "3: import (",
          "4:  \"crypto/subtle\"",
          "5:  \"errors\"",
          "7:  \"github.com/dave-gray101/v2keyauth\"",
          "8:  \"github.com/gofiber/fiber/v2\"",
          "9:  \"github.com/gofiber/fiber/v2/middleware/keyauth\"",
          "10:  \"github.com/microcosm-cc/bluemonday\"",
          "11:  \"github.com/mudler/LocalAI/core/config\"",
          "12: )",
          "18: func GetKeyAuthConfig(applicationConfig *config.ApplicationConfig) (*v2keyauth.Config, error) {",
          "19:  customLookup, err := v2keyauth.MultipleKeySourceLookup([]string{\"header:Authorization\", \"header:x-api-key\", \"header:xi-api-key\"}, keyauth.ConfigDefault.AuthScheme)",
          "20:  if err != nil {",
          "21:   return nil, err",
          "22:  }",
          "24:  return &v2keyauth.Config{",
          "25:   CustomKeyLookup: customLookup,",
          "26:   Next:            getApiKeyRequiredFilterFunction(applicationConfig),",
          "27:   Validator:       getApiKeyValidationFunction(applicationConfig),",
          "28:   ErrorHandler:    getApiKeyErrorHandler(applicationConfig),",
          "29:   AuthScheme:      \"Bearer\",",
          "30:  }, nil",
          "31: }",
          "33: func getApiKeyErrorHandler(applicationConfig *config.ApplicationConfig) fiber.ErrorHandler {",
          "34:  return func(ctx *fiber.Ctx, err error) error {",
          "35:   if errors.Is(err, v2keyauth.ErrMissingOrMalformedAPIKey) {",
          "36:    if len(applicationConfig.ApiKeys) == 0 {",
          "37:     return ctx.Next() // if no keys are set up, any error we get here is not an error.",
          "38:    }",
          "39:    if applicationConfig.OpaqueErrors {",
          "40:     return ctx.SendStatus(403)",
          "41:    }",
          "42:    return ctx.Status(403).SendString(bluemonday.StrictPolicy().Sanitize(err.Error()))",
          "43:   }",
          "44:   if applicationConfig.OpaqueErrors {",
          "45:    return ctx.SendStatus(500)",
          "46:   }",
          "47:   return err",
          "48:  }",
          "49: }",
          "51: func getApiKeyValidationFunction(applicationConfig *config.ApplicationConfig) func(*fiber.Ctx, string) (bool, error) {",
          "53:  if applicationConfig.UseSubtleKeyComparison {",
          "54:   return func(ctx *fiber.Ctx, apiKey string) (bool, error) {",
          "55:    if len(applicationConfig.ApiKeys) == 0 {",
          "56:     return true, nil // If no keys are setup, accept everything",
          "57:    }",
          "58:    for _, validKey := range applicationConfig.ApiKeys {",
          "59:     if subtle.ConstantTimeCompare([]byte(apiKey), []byte(validKey)) == 1 {",
          "60:      return true, nil",
          "61:     }",
          "62:    }",
          "63:    return false, v2keyauth.ErrMissingOrMalformedAPIKey",
          "64:   }",
          "65:  }",
          "67:  return func(ctx *fiber.Ctx, apiKey string) (bool, error) {",
          "68:   if len(applicationConfig.ApiKeys) == 0 {",
          "69:    return true, nil // If no keys are setup, accept everything",
          "70:   }",
          "71:   for _, validKey := range applicationConfig.ApiKeys {",
          "72:    if apiKey == validKey {",
          "73:     return true, nil",
          "74:    }",
          "75:   }",
          "76:   return false, v2keyauth.ErrMissingOrMalformedAPIKey",
          "77:  }",
          "78: }",
          "80: func getApiKeyRequiredFilterFunction(applicationConfig *config.ApplicationConfig) func(*fiber.Ctx) bool {",
          "81:  if applicationConfig.DisableApiKeyRequirementForHttpGet {",
          "82:   return func(c *fiber.Ctx) bool {",
          "83:    if c.Method() != \"GET\" {",
          "84:     return false",
          "85:    }",
          "86:    for _, rx := range applicationConfig.HttpGetExemptedEndpoints {",
          "87:     if rx.MatchString(c.Path()) {",
          "88:      return true",
          "89:     }",
          "90:    }",
          "91:    return false",
          "92:   }",
          "93:  }",
          "94:  return func(c *fiber.Ctx) bool { return false }",
          "95: }",
          "",
          "[Added Lines]",
          "1: package middleware",
          "3: import (",
          "4:  \"crypto/subtle\"",
          "5:  \"errors\"",
          "7:  \"github.com/dave-gray101/v2keyauth\"",
          "8:  \"github.com/gofiber/fiber/v2\"",
          "9:  \"github.com/gofiber/fiber/v2/middleware/keyauth\"",
          "10:  \"github.com/mudler/LocalAI/core/config\"",
          "11: )",
          "17: func GetKeyAuthConfig(applicationConfig *config.ApplicationConfig) (*v2keyauth.Config, error) {",
          "18:  customLookup, err := v2keyauth.MultipleKeySourceLookup([]string{\"header:Authorization\", \"header:x-api-key\", \"header:xi-api-key\", \"cookie:token\"}, keyauth.ConfigDefault.AuthScheme)",
          "19:  if err != nil {",
          "20:   return nil, err",
          "21:  }",
          "23:  return &v2keyauth.Config{",
          "24:   CustomKeyLookup: customLookup,",
          "25:   Next:            getApiKeyRequiredFilterFunction(applicationConfig),",
          "26:   Validator:       getApiKeyValidationFunction(applicationConfig),",
          "27:   ErrorHandler:    getApiKeyErrorHandler(applicationConfig),",
          "28:   AuthScheme:      \"Bearer\",",
          "29:  }, nil",
          "30: }",
          "32: func getApiKeyErrorHandler(applicationConfig *config.ApplicationConfig) fiber.ErrorHandler {",
          "33:  return func(ctx *fiber.Ctx, err error) error {",
          "34:   if errors.Is(err, v2keyauth.ErrMissingOrMalformedAPIKey) {",
          "35:    if len(applicationConfig.ApiKeys) == 0 {",
          "36:     return ctx.Next() // if no keys are set up, any error we get here is not an error.",
          "37:    }",
          "38:    ctx.Set(\"WWW-Authenticate\", \"Bearer\")",
          "39:    if applicationConfig.OpaqueErrors {",
          "40:     return ctx.SendStatus(401)",
          "41:    }",
          "42:    return ctx.Status(401).Render(\"views/login\", nil)",
          "43:   }",
          "44:   if applicationConfig.OpaqueErrors {",
          "45:    return ctx.SendStatus(500)",
          "46:   }",
          "47:   return err",
          "48:  }",
          "49: }",
          "51: func getApiKeyValidationFunction(applicationConfig *config.ApplicationConfig) func(*fiber.Ctx, string) (bool, error) {",
          "53:  if applicationConfig.UseSubtleKeyComparison {",
          "54:   return func(ctx *fiber.Ctx, apiKey string) (bool, error) {",
          "55:    if len(applicationConfig.ApiKeys) == 0 {",
          "56:     return true, nil // If no keys are setup, accept everything",
          "57:    }",
          "58:    for _, validKey := range applicationConfig.ApiKeys {",
          "59:     if subtle.ConstantTimeCompare([]byte(apiKey), []byte(validKey)) == 1 {",
          "60:      return true, nil",
          "61:     }",
          "62:    }",
          "63:    return false, v2keyauth.ErrMissingOrMalformedAPIKey",
          "64:   }",
          "65:  }",
          "67:  return func(ctx *fiber.Ctx, apiKey string) (bool, error) {",
          "68:   if len(applicationConfig.ApiKeys) == 0 {",
          "69:    return true, nil // If no keys are setup, accept everything",
          "70:   }",
          "71:   for _, validKey := range applicationConfig.ApiKeys {",
          "72:    if apiKey == validKey {",
          "73:     return true, nil",
          "74:    }",
          "75:   }",
          "76:   return false, v2keyauth.ErrMissingOrMalformedAPIKey",
          "77:  }",
          "78: }",
          "80: func getApiKeyRequiredFilterFunction(applicationConfig *config.ApplicationConfig) func(*fiber.Ctx) bool {",
          "81:  if applicationConfig.DisableApiKeyRequirementForHttpGet {",
          "82:   return func(c *fiber.Ctx) bool {",
          "83:    if c.Method() != \"GET\" {",
          "84:     return false",
          "85:    }",
          "86:    for _, rx := range applicationConfig.HttpGetExemptedEndpoints {",
          "87:     if rx.MatchString(c.Path()) {",
          "88:      return true",
          "89:     }",
          "90:    }",
          "91:    return false",
          "92:   }",
          "93:  }",
          "94:  return func(c *fiber.Ctx) bool { return false }",
          "95: }",
          "",
          "---------------"
        ],
        "core/http/views/login.html||core/http/views/login.html": [
          "File: core/http/views/login.html -> core/http/views/login.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <!DOCTYPE html>",
          "2: <html lang=\"en\">",
          "3: <head>",
          "4:     <meta charset=\"UTF-8\">",
          "5:     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
          "6:     <title>Open Authenticated Website</title>",
          "7: </head>",
          "8: <body>",
          "9:     <h1>Authorization is required</h1>",
          "10:     <input type=\"text\" id=\"token\" placeholder=\"Token\" />",
          "11:     <button onclick=\"login()\">Login</button>",
          "12:     <script>",
          "13:         function login() {",
          "14:             const token = document.getElementById('token').value;",
          "15:             var date = new Date();",
          "16:             date.setTime(date.getTime() + (24*60*60*1000));",
          "17:             document.cookie = `token=${token}; expires=${date.toGMTString()}`;",
          "19:             window.location.reload();",
          "20:         }",
          "21:     </script>",
          "22: </body>",
          "23: </html>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db1159b6511e8fa09e594f9db0fec6ab4e142468",
      "candidate_info": {
        "commit_hash": "db1159b6511e8fa09e594f9db0fec6ab4e142468",
        "repo": "mudler/localai",
        "commit_url": "https://github.com/mudler/localai/commit/db1159b6511e8fa09e594f9db0fec6ab4e142468",
        "files": [
          "core/cli/run.go",
          "core/config/application_config.go",
          "core/http/app.go",
          "core/http/middleware/auth.go",
          "core/http/routes/elevenlabs.go",
          "core/http/routes/jina.go",
          "core/http/routes/localai.go",
          "core/http/routes/openai.go",
          "core/http/routes/ui.go",
          "go.mod",
          "go.sum"
        ],
        "message": "feat: auth v2 - supersedes #2894 (#3476)\n\nfeat: auth v2 - supercedes #2894, metrics to follow later\n\nSigned-off-by: Dave Lee <dave@gray101.com>",
        "before_after_code_files": [
          "core/cli/run.go||core/cli/run.go",
          "core/config/application_config.go||core/config/application_config.go",
          "core/http/app.go||core/http/app.go",
          "core/http/middleware/auth.go||core/http/middleware/auth.go",
          "core/http/routes/elevenlabs.go||core/http/routes/elevenlabs.go",
          "core/http/routes/jina.go||core/http/routes/jina.go",
          "core/http/routes/localai.go||core/http/routes/localai.go",
          "core/http/routes/openai.go||core/http/routes/openai.go",
          "core/http/routes/ui.go||core/http/routes/ui.go",
          "go.mod||go.mod",
          "go.sum||go.sum"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/http/middleware/auth.go||core/http/middleware/auth.go",
            "core/http/routes/ui.go||core/http/routes/ui.go"
          ],
          "candidate": [
            "core/http/middleware/auth.go||core/http/middleware/auth.go",
            "core/http/routes/ui.go||core/http/routes/ui.go"
          ]
        }
      },
      "candidate_diff": {
        "core/cli/run.go||core/cli/run.go": [
          "File: core/cli/run.go -> core/cli/run.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:  Threads     int  `env:\"LOCALAI_THREADS,THREADS\" short:\"t\" help:\"Number of threads used for parallel computation. Usage of the number of physical cores in the system is suggested\" group:\"performance\"`",
          "42:  ContextSize int  `env:\"LOCALAI_CONTEXT_SIZE,CONTEXT_SIZE\" default:\"512\" help:\"Default context size for models\" group:\"performance\"`",
          "69: }",
          "71: func (r *RunCMD) Run(ctx *cliContext.Context) error {",
          "",
          "[Removed Lines]",
          "44:  Address                string   `env:\"LOCALAI_ADDRESS,ADDRESS\" default:\":8080\" help:\"Bind address for the API server\" group:\"api\"`",
          "45:  CORS                   bool     `env:\"LOCALAI_CORS,CORS\" help:\"\" group:\"api\"`",
          "46:  CORSAllowOrigins       string   `env:\"LOCALAI_CORS_ALLOW_ORIGINS,CORS_ALLOW_ORIGINS\" group:\"api\"`",
          "47:  LibraryPath            string   `env:\"LOCALAI_LIBRARY_PATH,LIBRARY_PATH\" help:\"Path to the library directory (for e.g. external libraries used by backends)\" default:\"/usr/share/local-ai/libs\" group:\"backends\"`",
          "48:  CSRF                   bool     `env:\"LOCALAI_CSRF\" help:\"Enables fiber CSRF middleware\" group:\"api\"`",
          "49:  UploadLimit            int      `env:\"LOCALAI_UPLOAD_LIMIT,UPLOAD_LIMIT\" default:\"15\" help:\"Default upload-limit in MB\" group:\"api\"`",
          "50:  APIKeys                []string `env:\"LOCALAI_API_KEY,API_KEY\" help:\"List of API Keys to enable API authentication. When this is set, all the requests must be authenticated with one of these API keys\" group:\"api\"`",
          "51:  DisableWebUI           bool     `env:\"LOCALAI_DISABLE_WEBUI,DISABLE_WEBUI\" default:\"false\" help:\"Disable webui\" group:\"api\"`",
          "52:  DisablePredownloadScan bool     `env:\"LOCALAI_DISABLE_PREDOWNLOAD_SCAN\" help:\"If true, disables the best-effort security scanner before downloading any files.\" group:\"hardening\" default:\"false\"`",
          "53:  OpaqueErrors           bool     `env:\"LOCALAI_OPAQUE_ERRORS\" default:\"false\" help:\"If true, all error responses are replaced with blank 500 errors. This is intended only for hardening against information leaks and is normally not recommended.\" group:\"hardening\"`",
          "54:  Peer2Peer              bool     `env:\"LOCALAI_P2P,P2P\" name:\"p2p\" default:\"false\" help:\"Enable P2P mode\" group:\"p2p\"`",
          "55:  Peer2PeerDHTInterval   int      `env:\"LOCALAI_P2P_DHT_INTERVAL,P2P_DHT_INTERVAL\" default:\"360\" name:\"p2p-dht-interval\" help:\"Interval for DHT refresh (used during token generation)\" group:\"p2p\"`",
          "56:  Peer2PeerOTPInterval   int      `env:\"LOCALAI_P2P_OTP_INTERVAL,P2P_OTP_INTERVAL\" default:\"9000\" name:\"p2p-otp-interval\" help:\"Interval for OTP refresh (used during token generation)\" group:\"p2p\"`",
          "57:  Peer2PeerToken         string   `env:\"LOCALAI_P2P_TOKEN,P2P_TOKEN,TOKEN\" name:\"p2ptoken\" help:\"Token for P2P mode (optional)\" group:\"p2p\"`",
          "58:  Peer2PeerNetworkID     string   `env:\"LOCALAI_P2P_NETWORK_ID,P2P_NETWORK_ID\" help:\"Network ID for P2P mode, can be set arbitrarly by the user for grouping a set of instances\" group:\"p2p\"`",
          "59:  ParallelRequests       bool     `env:\"LOCALAI_PARALLEL_REQUESTS,PARALLEL_REQUESTS\" help:\"Enable backends to handle multiple requests in parallel if they support it (e.g.: llama.cpp or vllm)\" group:\"backends\"`",
          "60:  SingleActiveBackend    bool     `env:\"LOCALAI_SINGLE_ACTIVE_BACKEND,SINGLE_ACTIVE_BACKEND\" help:\"Allow only one backend to be run at a time\" group:\"backends\"`",
          "61:  PreloadBackendOnly     bool     `env:\"LOCALAI_PRELOAD_BACKEND_ONLY,PRELOAD_BACKEND_ONLY\" default:\"false\" help:\"Do not launch the API services, only the preloaded models / backends are started (useful for multi-node setups)\" group:\"backends\"`",
          "62:  ExternalGRPCBackends   []string `env:\"LOCALAI_EXTERNAL_GRPC_BACKENDS,EXTERNAL_GRPC_BACKENDS\" help:\"A list of external grpc backends\" group:\"backends\"`",
          "63:  EnableWatchdogIdle     bool     `env:\"LOCALAI_WATCHDOG_IDLE,WATCHDOG_IDLE\" default:\"false\" help:\"Enable watchdog for stopping backends that are idle longer than the watchdog-idle-timeout\" group:\"backends\"`",
          "64:  WatchdogIdleTimeout    string   `env:\"LOCALAI_WATCHDOG_IDLE_TIMEOUT,WATCHDOG_IDLE_TIMEOUT\" default:\"15m\" help:\"Threshold beyond which an idle backend should be stopped\" group:\"backends\"`",
          "65:  EnableWatchdogBusy     bool     `env:\"LOCALAI_WATCHDOG_BUSY,WATCHDOG_BUSY\" default:\"false\" help:\"Enable watchdog for stopping backends that are busy longer than the watchdog-busy-timeout\" group:\"backends\"`",
          "66:  WatchdogBusyTimeout    string   `env:\"LOCALAI_WATCHDOG_BUSY_TIMEOUT,WATCHDOG_BUSY_TIMEOUT\" default:\"5m\" help:\"Threshold beyond which a busy backend should be stopped\" group:\"backends\"`",
          "67:  Federated              bool     `env:\"LOCALAI_FEDERATED,FEDERATED\" help:\"Enable federated instance\" group:\"federated\"`",
          "68:  DisableGalleryEndpoint bool     `env:\"LOCALAI_DISABLE_GALLERY_ENDPOINT,DISABLE_GALLERY_ENDPOINT\" help:\"Disable the gallery endpoints\" group:\"api\"`",
          "",
          "[Added Lines]",
          "44:  Address                            string   `env:\"LOCALAI_ADDRESS,ADDRESS\" default:\":8080\" help:\"Bind address for the API server\" group:\"api\"`",
          "45:  CORS                               bool     `env:\"LOCALAI_CORS,CORS\" help:\"\" group:\"api\"`",
          "46:  CORSAllowOrigins                   string   `env:\"LOCALAI_CORS_ALLOW_ORIGINS,CORS_ALLOW_ORIGINS\" group:\"api\"`",
          "47:  LibraryPath                        string   `env:\"LOCALAI_LIBRARY_PATH,LIBRARY_PATH\" help:\"Path to the library directory (for e.g. external libraries used by backends)\" default:\"/usr/share/local-ai/libs\" group:\"backends\"`",
          "48:  CSRF                               bool     `env:\"LOCALAI_CSRF\" help:\"Enables fiber CSRF middleware\" group:\"api\"`",
          "49:  UploadLimit                        int      `env:\"LOCALAI_UPLOAD_LIMIT,UPLOAD_LIMIT\" default:\"15\" help:\"Default upload-limit in MB\" group:\"api\"`",
          "50:  APIKeys                            []string `env:\"LOCALAI_API_KEY,API_KEY\" help:\"List of API Keys to enable API authentication. When this is set, all the requests must be authenticated with one of these API keys\" group:\"api\"`",
          "51:  DisableWebUI                       bool     `env:\"LOCALAI_DISABLE_WEBUI,DISABLE_WEBUI\" default:\"false\" help:\"Disable webui\" group:\"api\"`",
          "52:  DisablePredownloadScan             bool     `env:\"LOCALAI_DISABLE_PREDOWNLOAD_SCAN\" help:\"If true, disables the best-effort security scanner before downloading any files.\" group:\"hardening\" default:\"false\"`",
          "53:  OpaqueErrors                       bool     `env:\"LOCALAI_OPAQUE_ERRORS\" default:\"false\" help:\"If true, all error responses are replaced with blank 500 errors. This is intended only for hardening against information leaks and is normally not recommended.\" group:\"hardening\"`",
          "54:  UseSubtleKeyComparison             bool     `env:\"LOCALAI_SUBTLE_KEY_COMPARISON\" default:\"false\" help:\"If true, API Key validation comparisons will be performed using constant-time comparisons rather than simple equality. This trades off performance on each request for resiliancy against timing attacks.\" group:\"hardening\"`",
          "55:  DisableApiKeyRequirementForHttpGet bool     `env:\"LOCALAI_DISABLE_API_KEY_REQUIREMENT_FOR_HTTP_GET\" default:\"false\" help:\"If true, a valid API key is not required to issue GET requests to portions of the web ui. This should only be enabled in secure testing environments\" group:\"hardening\"`",
          "56:  HttpGetExemptedEndpoints           []string `env:\"LOCALAI_HTTP_GET_EXEMPTED_ENDPOINTS\" default:\"^/$,^/browse/?$,^/talk/?$,^/p2p/?$,^/chat/?$,^/text2image/?$,^/tts/?$,^/static/.*$,^/swagger.*$\" help:\"If LOCALAI_DISABLE_API_KEY_REQUIREMENT_FOR_HTTP_GET is overriden to true, this is the list of endpoints to exempt. Only adjust this in case of a security incident or as a result of a personal security posture review\" group:\"hardening\"`",
          "57:  Peer2Peer                          bool     `env:\"LOCALAI_P2P,P2P\" name:\"p2p\" default:\"false\" help:\"Enable P2P mode\" group:\"p2p\"`",
          "58:  Peer2PeerDHTInterval               int      `env:\"LOCALAI_P2P_DHT_INTERVAL,P2P_DHT_INTERVAL\" default:\"360\" name:\"p2p-dht-interval\" help:\"Interval for DHT refresh (used during token generation)\" group:\"p2p\"`",
          "59:  Peer2PeerOTPInterval               int      `env:\"LOCALAI_P2P_OTP_INTERVAL,P2P_OTP_INTERVAL\" default:\"9000\" name:\"p2p-otp-interval\" help:\"Interval for OTP refresh (used during token generation)\" group:\"p2p\"`",
          "60:  Peer2PeerToken                     string   `env:\"LOCALAI_P2P_TOKEN,P2P_TOKEN,TOKEN\" name:\"p2ptoken\" help:\"Token for P2P mode (optional)\" group:\"p2p\"`",
          "61:  Peer2PeerNetworkID                 string   `env:\"LOCALAI_P2P_NETWORK_ID,P2P_NETWORK_ID\" help:\"Network ID for P2P mode, can be set arbitrarly by the user for grouping a set of instances\" group:\"p2p\"`",
          "62:  ParallelRequests                   bool     `env:\"LOCALAI_PARALLEL_REQUESTS,PARALLEL_REQUESTS\" help:\"Enable backends to handle multiple requests in parallel if they support it (e.g.: llama.cpp or vllm)\" group:\"backends\"`",
          "63:  SingleActiveBackend                bool     `env:\"LOCALAI_SINGLE_ACTIVE_BACKEND,SINGLE_ACTIVE_BACKEND\" help:\"Allow only one backend to be run at a time\" group:\"backends\"`",
          "64:  PreloadBackendOnly                 bool     `env:\"LOCALAI_PRELOAD_BACKEND_ONLY,PRELOAD_BACKEND_ONLY\" default:\"false\" help:\"Do not launch the API services, only the preloaded models / backends are started (useful for multi-node setups)\" group:\"backends\"`",
          "65:  ExternalGRPCBackends               []string `env:\"LOCALAI_EXTERNAL_GRPC_BACKENDS,EXTERNAL_GRPC_BACKENDS\" help:\"A list of external grpc backends\" group:\"backends\"`",
          "66:  EnableWatchdogIdle                 bool     `env:\"LOCALAI_WATCHDOG_IDLE,WATCHDOG_IDLE\" default:\"false\" help:\"Enable watchdog for stopping backends that are idle longer than the watchdog-idle-timeout\" group:\"backends\"`",
          "67:  WatchdogIdleTimeout                string   `env:\"LOCALAI_WATCHDOG_IDLE_TIMEOUT,WATCHDOG_IDLE_TIMEOUT\" default:\"15m\" help:\"Threshold beyond which an idle backend should be stopped\" group:\"backends\"`",
          "68:  EnableWatchdogBusy                 bool     `env:\"LOCALAI_WATCHDOG_BUSY,WATCHDOG_BUSY\" default:\"false\" help:\"Enable watchdog for stopping backends that are busy longer than the watchdog-busy-timeout\" group:\"backends\"`",
          "69:  WatchdogBusyTimeout                string   `env:\"LOCALAI_WATCHDOG_BUSY_TIMEOUT,WATCHDOG_BUSY_TIMEOUT\" default:\"5m\" help:\"Threshold beyond which a busy backend should be stopped\" group:\"backends\"`",
          "70:  Federated                          bool     `env:\"LOCALAI_FEDERATED,FEDERATED\" help:\"Enable federated instance\" group:\"federated\"`",
          "71:  DisableGalleryEndpoint             bool     `env:\"LOCALAI_DISABLE_GALLERY_ENDPOINT,DISABLE_GALLERY_ENDPOINT\" help:\"Disable the gallery endpoints\" group:\"api\"`",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:   config.WithModelsURL(append(r.Models, r.ModelArgs...)...),",
          "98:   config.WithOpaqueErrors(r.OpaqueErrors),",
          "99:   config.WithEnforcedPredownloadScans(!r.DisablePredownloadScan),",
          "100:   config.WithP2PNetworkID(r.Peer2PeerNetworkID),",
          "101:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "103:   config.WithSubtleKeyComparison(r.UseSubtleKeyComparison),",
          "104:   config.WithDisableApiKeyRequirementForHttpGet(r.DisableApiKeyRequirementForHttpGet),",
          "105:   config.WithHttpGetExemptedEndpoints(r.HttpGetExemptedEndpoints),",
          "",
          "---------------"
        ],
        "core/config/application_config.go||core/config/application_config.go": [
          "File: core/config/application_config.go -> core/config/application_config.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "4:  \"context\"",
          "5:  \"embed\"",
          "6:  \"encoding/json\"",
          "7:  \"time\"",
          "9:  \"github.com/mudler/LocalAI/pkg/xsysinfo\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7:  \"regexp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:  ModelPath                           string",
          "17:  LibPath                             string",
          "18:  UploadLimitMB, Threads, ContextSize int",
          "20:  F16                                 bool",
          "21:  Debug                               bool",
          "22:  ImageDir                            string",
          "",
          "[Removed Lines]",
          "19:  DisableWebUI                        bool",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "31:  PreloadModelsFromPath               string",
          "32:  CORSAllowOrigins                    string",
          "33:  ApiKeys                             []string",
          "36:  P2PToken                            string",
          "37:  P2PNetworkID                        string",
          "39:  ModelLibraryURL string",
          "41:  Galleries []Gallery",
          "",
          "[Removed Lines]",
          "34:  EnforcePredownloadScans             bool",
          "35:  OpaqueErrors                        bool",
          "",
          "[Added Lines]",
          "37:  DisableWebUI                       bool",
          "38:  EnforcePredownloadScans            bool",
          "39:  OpaqueErrors                       bool",
          "40:  UseSubtleKeyComparison             bool",
          "41:  DisableApiKeyRequirementForHttpGet bool",
          "42:  HttpGetExemptedEndpoints           []*regexp.Regexp",
          "43:  DisableGalleryEndpoint             bool",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "57:  ModelsURL []string",
          "59:  WatchDogBusyTimeout, WatchDogIdleTimeout time.Duration",
          "62: }",
          "64: type AppOption func(*ApplicationConfig)",
          "",
          "[Removed Lines]",
          "61:  DisableGalleryEndpoint bool",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "327:  }",
          "328: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334: func WithSubtleKeyComparison(subtle bool) AppOption {",
          "335:  return func(o *ApplicationConfig) {",
          "336:   o.UseSubtleKeyComparison = subtle",
          "337:  }",
          "338: }",
          "340: func WithDisableApiKeyRequirementForHttpGet(required bool) AppOption {",
          "341:  return func(o *ApplicationConfig) {",
          "342:   o.DisableApiKeyRequirementForHttpGet = required",
          "343:  }",
          "344: }",
          "346: func WithHttpGetExemptedEndpoints(endpoints []string) AppOption {",
          "347:  return func(o *ApplicationConfig) {",
          "348:   o.HttpGetExemptedEndpoints = []*regexp.Regexp{}",
          "349:   for _, epr := range endpoints {",
          "350:    r, err := regexp.Compile(epr)",
          "351:    if err == nil && r != nil {",
          "352:     o.HttpGetExemptedEndpoints = append(o.HttpGetExemptedEndpoints, r)",
          "353:    } else {",
          "354:     log.Warn().Err(err).Str(\"regex\", epr).Msg(\"Error while compiling HTTP Get Exemption regex, skipping this entry.\")",
          "355:    }",
          "356:   }",
          "357:  }",
          "358: }",
          "",
          "---------------"
        ],
        "core/http/app.go||core/http/app.go": [
          "File: core/http/app.go -> core/http/app.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"embed\"",
          "5:  \"errors\"",
          "6:  \"net/http\"",
          "9:  \"github.com/mudler/LocalAI/pkg/utils\"",
          "11:  \"github.com/mudler/LocalAI/core/http/endpoints/localai\"",
          "12:  \"github.com/mudler/LocalAI/core/http/endpoints/openai\"",
          "13:  \"github.com/mudler/LocalAI/core/http/routes\"",
          "15:  \"github.com/mudler/LocalAI/core/config\"",
          "",
          "[Removed Lines]",
          "7:  \"strings\"",
          "",
          "[Added Lines]",
          "6:  \"fmt\"",
          "9:  \"github.com/dave-gray101/v2keyauth\"",
          "14:  \"github.com/mudler/LocalAI/core/http/middleware\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:   })",
          "138:  }",
          "169:  }",
          "171:  if appConfig.CORS {",
          "172:   var c func(ctx *fiber.Ctx) error",
          "173:   if appConfig.CORSAllowOrigins == \"\" {",
          "",
          "[Removed Lines]",
          "141:  auth := func(c *fiber.Ctx) error {",
          "142:   if len(appConfig.ApiKeys) == 0 {",
          "143:    return c.Next()",
          "144:   }",
          "146:   if len(appConfig.ApiKeys) == 0 {",
          "147:    return c.Next()",
          "148:   }",
          "150:   authHeader := readAuthHeader(c)",
          "151:   if authHeader == \"\" {",
          "152:    return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\"message\": \"Authorization header missing\"})",
          "153:   }",
          "156:   authHeaderParts := strings.Split(authHeader, \" \")",
          "157:   if len(authHeaderParts) != 2 || authHeaderParts[0] != \"Bearer\" {",
          "158:    return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\"message\": \"Invalid Authorization header format\"})",
          "159:   }",
          "161:   apiKey := authHeaderParts[1]",
          "162:   for _, key := range appConfig.ApiKeys {",
          "163:    if apiKey == key {",
          "164:     return c.Next()",
          "165:    }",
          "166:   }",
          "168:   return c.Status(fiber.StatusUnauthorized).JSON(fiber.Map{\"message\": \"Invalid API key\"})",
          "",
          "[Added Lines]",
          "142:  kaConfig, err := middleware.GetKeyAuthConfig(appConfig)",
          "143:  if err != nil || kaConfig == nil {",
          "144:   return nil, fmt.Errorf(\"failed to create key auth config: %w\", err)",
          "148:  app.Use(v2keyauth.New(*kaConfig))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "192:  galleryService := services.NewGalleryService(appConfig)",
          "193:  galleryService.Start(appConfig.Context, cl)",
          "198:  if !appConfig.DisableWebUI {",
          "200:  }",
          "203:  httpFS := http.FS(embedDirStatic)",
          "",
          "[Removed Lines]",
          "195:  routes.RegisterElevenLabsRoutes(app, cl, ml, appConfig, auth)",
          "196:  routes.RegisterLocalAIRoutes(app, cl, ml, appConfig, galleryService, auth)",
          "197:  routes.RegisterOpenAIRoutes(app, cl, ml, appConfig, auth)",
          "199:   routes.RegisterUIRoutes(app, cl, ml, appConfig, galleryService, auth)",
          "201:  routes.RegisterJINARoutes(app, cl, ml, appConfig, auth)",
          "",
          "[Added Lines]",
          "174:  routes.RegisterElevenLabsRoutes(app, cl, ml, appConfig)",
          "175:  routes.RegisterLocalAIRoutes(app, cl, ml, appConfig, galleryService)",
          "176:  routes.RegisterOpenAIRoutes(app, cl, ml, appConfig)",
          "178:   routes.RegisterUIRoutes(app, cl, ml, appConfig, galleryService)",
          "180:  routes.RegisterJINARoutes(app, cl, ml, appConfig)",
          "",
          "---------------"
        ],
        "core/http/middleware/auth.go||core/http/middleware/auth.go": [
          "File: core/http/middleware/auth.go -> core/http/middleware/auth.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package middleware",
          "3: import (",
          "4:  \"crypto/subtle\"",
          "5:  \"errors\"",
          "7:  \"github.com/dave-gray101/v2keyauth\"",
          "8:  \"github.com/gofiber/fiber/v2\"",
          "9:  \"github.com/gofiber/fiber/v2/middleware/keyauth\"",
          "10:  \"github.com/mudler/LocalAI/core/config\"",
          "11: )",
          "17: func GetKeyAuthConfig(applicationConfig *config.ApplicationConfig) (*v2keyauth.Config, error) {",
          "18:  customLookup, err := v2keyauth.MultipleKeySourceLookup([]string{\"header:Authorization\", \"header:x-api-key\", \"header:xi-api-key\"}, keyauth.ConfigDefault.AuthScheme)",
          "19:  if err != nil {",
          "20:   return nil, err",
          "21:  }",
          "23:  return &v2keyauth.Config{",
          "24:   CustomKeyLookup: customLookup,",
          "25:   Next:            getApiKeyRequiredFilterFunction(applicationConfig),",
          "26:   Validator:       getApiKeyValidationFunction(applicationConfig),",
          "27:   ErrorHandler:    getApiKeyErrorHandler(applicationConfig),",
          "28:   AuthScheme:      \"Bearer\",",
          "29:  }, nil",
          "30: }",
          "32: func getApiKeyErrorHandler(applicationConfig *config.ApplicationConfig) fiber.ErrorHandler {",
          "33:  return func(ctx *fiber.Ctx, err error) error {",
          "34:   if errors.Is(err, v2keyauth.ErrMissingOrMalformedAPIKey) {",
          "35:    if len(applicationConfig.ApiKeys) == 0 {",
          "36:     return ctx.Next() // if no keys are set up, any error we get here is not an error.",
          "37:    }",
          "38:    if applicationConfig.OpaqueErrors {",
          "39:     return ctx.SendStatus(403)",
          "40:    }",
          "41:   }",
          "42:   if applicationConfig.OpaqueErrors {",
          "43:    return ctx.SendStatus(500)",
          "44:   }",
          "45:   return err",
          "46:  }",
          "47: }",
          "49: func getApiKeyValidationFunction(applicationConfig *config.ApplicationConfig) func(*fiber.Ctx, string) (bool, error) {",
          "51:  if applicationConfig.UseSubtleKeyComparison {",
          "52:   return func(ctx *fiber.Ctx, apiKey string) (bool, error) {",
          "53:    if len(applicationConfig.ApiKeys) == 0 {",
          "54:     return true, nil // If no keys are setup, accept everything",
          "55:    }",
          "56:    for _, validKey := range applicationConfig.ApiKeys {",
          "57:     if subtle.ConstantTimeCompare([]byte(apiKey), []byte(validKey)) == 1 {",
          "58:      return true, nil",
          "59:     }",
          "60:    }",
          "61:    return false, v2keyauth.ErrMissingOrMalformedAPIKey",
          "62:   }",
          "63:  }",
          "65:  return func(ctx *fiber.Ctx, apiKey string) (bool, error) {",
          "66:   if len(applicationConfig.ApiKeys) == 0 {",
          "67:    return true, nil // If no keys are setup, accept everything",
          "68:   }",
          "69:   for _, validKey := range applicationConfig.ApiKeys {",
          "70:    if apiKey == validKey {",
          "71:     return true, nil",
          "72:    }",
          "73:   }",
          "74:   return false, v2keyauth.ErrMissingOrMalformedAPIKey",
          "75:  }",
          "76: }",
          "78: func getApiKeyRequiredFilterFunction(applicationConfig *config.ApplicationConfig) func(*fiber.Ctx) bool {",
          "79:  if applicationConfig.DisableApiKeyRequirementForHttpGet {",
          "80:   return func(c *fiber.Ctx) bool {",
          "81:    if c.Method() != \"GET\" {",
          "82:     return false",
          "83:    }",
          "84:    for _, rx := range applicationConfig.HttpGetExemptedEndpoints {",
          "85:     if rx.MatchString(c.Path()) {",
          "86:      return true",
          "87:     }",
          "88:    }",
          "89:    return false",
          "90:   }",
          "91:  }",
          "92:  return func(c *fiber.Ctx) bool { return false }",
          "93: }",
          "",
          "---------------"
        ],
        "core/http/routes/elevenlabs.go||core/http/routes/elevenlabs.go": [
          "File: core/http/routes/elevenlabs.go -> core/http/routes/elevenlabs.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: func RegisterElevenLabsRoutes(app *fiber.App,",
          "11:  cl *config.BackendConfigLoader,",
          "12:  ml *model.ModelLoader,",
          "21: }",
          "",
          "[Removed Lines]",
          "13:  appConfig *config.ApplicationConfig,",
          "14:  auth func(*fiber.Ctx) error) {",
          "17:  app.Post(\"/v1/text-to-speech/:voice-id\", auth, elevenlabs.TTSEndpoint(cl, ml, appConfig))",
          "19:  app.Post(\"/v1/sound-generation\", auth, elevenlabs.SoundGenerationEndpoint(cl, ml, appConfig))",
          "",
          "[Added Lines]",
          "13:  appConfig *config.ApplicationConfig) {",
          "16:  app.Post(\"/v1/text-to-speech/:voice-id\", elevenlabs.TTSEndpoint(cl, ml, appConfig))",
          "18:  app.Post(\"/v1/sound-generation\", elevenlabs.SoundGenerationEndpoint(cl, ml, appConfig))",
          "",
          "---------------"
        ],
        "core/http/routes/jina.go||core/http/routes/jina.go": [
          "File: core/http/routes/jina.go -> core/http/routes/jina.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: func RegisterJINARoutes(app *fiber.App,",
          "12:  cl *config.BackendConfigLoader,",
          "13:  ml *model.ModelLoader,",
          "18:  app.Post(\"/v1/rerank\", jina.JINARerankEndpoint(cl, ml, appConfig))",
          "",
          "[Removed Lines]",
          "14:  appConfig *config.ApplicationConfig,",
          "15:  auth func(*fiber.Ctx) error) {",
          "",
          "[Added Lines]",
          "14:  appConfig *config.ApplicationConfig) {",
          "",
          "---------------"
        ],
        "core/http/routes/localai.go||core/http/routes/localai.go": [
          "File: core/http/routes/localai.go -> core/http/routes/localai.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:  cl *config.BackendConfigLoader,",
          "16:  ml *model.ModelLoader,",
          "17:  appConfig *config.ApplicationConfig,",
          "21:  app.Get(\"/swagger/*\", swagger.HandlerDefault) // default",
          "24:  if !appConfig.DisableGalleryEndpoint {",
          "25:   modelGalleryEndpointService := localai.CreateModelGalleryEndpointService(appConfig.Galleries, appConfig.ModelPath, galleryService)",
          "35:  }",
          "40:  sl := model.NewModelLoader(\"\")",
          "47:  ok := func(c *fiber.Ctx) error {",
          "",
          "[Removed Lines]",
          "18:  galleryService *services.GalleryService,",
          "19:  auth func(*fiber.Ctx) error) {",
          "26:   app.Post(\"/models/apply\", auth, modelGalleryEndpointService.ApplyModelGalleryEndpoint())",
          "27:   app.Post(\"/models/delete/:name\", auth, modelGalleryEndpointService.DeleteModelGalleryEndpoint())",
          "29:   app.Get(\"/models/available\", auth, modelGalleryEndpointService.ListModelFromGalleryEndpoint())",
          "30:   app.Get(\"/models/galleries\", auth, modelGalleryEndpointService.ListModelGalleriesEndpoint())",
          "31:   app.Post(\"/models/galleries\", auth, modelGalleryEndpointService.AddModelGalleryEndpoint())",
          "32:   app.Delete(\"/models/galleries\", auth, modelGalleryEndpointService.RemoveModelGalleryEndpoint())",
          "33:   app.Get(\"/models/jobs/:uuid\", auth, modelGalleryEndpointService.GetOpStatusEndpoint())",
          "34:   app.Get(\"/models/jobs\", auth, modelGalleryEndpointService.GetAllStatusEndpoint())",
          "37:  app.Post(\"/tts\", auth, localai.TTSEndpoint(cl, ml, appConfig))",
          "41:  app.Post(\"/stores/set\", auth, localai.StoresSetEndpoint(sl, appConfig))",
          "42:  app.Post(\"/stores/delete\", auth, localai.StoresDeleteEndpoint(sl, appConfig))",
          "43:  app.Post(\"/stores/get\", auth, localai.StoresGetEndpoint(sl, appConfig))",
          "44:  app.Post(\"/stores/find\", auth, localai.StoresFindEndpoint(sl, appConfig))",
          "",
          "[Added Lines]",
          "18:  galleryService *services.GalleryService) {",
          "25:   app.Post(\"/models/apply\", modelGalleryEndpointService.ApplyModelGalleryEndpoint())",
          "26:   app.Post(\"/models/delete/:name\", modelGalleryEndpointService.DeleteModelGalleryEndpoint())",
          "28:   app.Get(\"/models/available\", modelGalleryEndpointService.ListModelFromGalleryEndpoint())",
          "29:   app.Get(\"/models/galleries\", modelGalleryEndpointService.ListModelGalleriesEndpoint())",
          "30:   app.Post(\"/models/galleries\", modelGalleryEndpointService.AddModelGalleryEndpoint())",
          "31:   app.Delete(\"/models/galleries\", modelGalleryEndpointService.RemoveModelGalleryEndpoint())",
          "32:   app.Get(\"/models/jobs/:uuid\", modelGalleryEndpointService.GetOpStatusEndpoint())",
          "33:   app.Get(\"/models/jobs\", modelGalleryEndpointService.GetAllStatusEndpoint())",
          "36:  app.Post(\"/tts\", localai.TTSEndpoint(cl, ml, appConfig))",
          "40:  app.Post(\"/stores/set\", localai.StoresSetEndpoint(sl, appConfig))",
          "41:  app.Post(\"/stores/delete\", localai.StoresDeleteEndpoint(sl, appConfig))",
          "42:  app.Post(\"/stores/get\", localai.StoresGetEndpoint(sl, appConfig))",
          "43:  app.Post(\"/stores/find\", localai.StoresFindEndpoint(sl, appConfig))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:  app.Get(\"/healthz\", ok)",
          "52:  app.Get(\"/readyz\", ok)",
          "57:  backendMonitorService := services.NewBackendMonitorService(ml, cl, appConfig) // Split out for now",
          "62:  if p2p.IsP2PEnabled() {",
          "65:  }",
          "68:   return c.JSON(struct {",
          "69:    Version string `json:\"version\"`",
          "70:   }{Version: internal.PrintableVersion()})",
          "",
          "[Removed Lines]",
          "54:  app.Get(\"/metrics\", auth, localai.LocalAIMetricsEndpoint())",
          "58:  app.Get(\"/backend/monitor\", auth, localai.BackendMonitorEndpoint(backendMonitorService))",
          "59:  app.Post(\"/backend/shutdown\", auth, localai.BackendShutdownEndpoint(backendMonitorService))",
          "63:   app.Get(\"/api/p2p\", auth, localai.ShowP2PNodes(appConfig))",
          "64:   app.Get(\"/api/p2p/token\", auth, localai.ShowP2PToken(appConfig))",
          "67:  app.Get(\"/version\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "53:  app.Get(\"/metrics\", localai.LocalAIMetricsEndpoint())",
          "57:  app.Get(\"/backend/monitor\", localai.BackendMonitorEndpoint(backendMonitorService))",
          "58:  app.Post(\"/backend/shutdown\", localai.BackendShutdownEndpoint(backendMonitorService))",
          "62:   app.Get(\"/api/p2p\", localai.ShowP2PNodes(appConfig))",
          "63:   app.Get(\"/api/p2p/token\", localai.ShowP2PToken(appConfig))",
          "66:  app.Get(\"/version\", func(c *fiber.Ctx) error {",
          "",
          "---------------"
        ],
        "core/http/routes/openai.go||core/http/routes/openai.go": [
          "File: core/http/routes/openai.go -> core/http/routes/openai.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: func RegisterOpenAIRoutes(app *fiber.App,",
          "12:  cl *config.BackendConfigLoader,",
          "13:  ml *model.ModelLoader,",
          "75:  if appConfig.ImageDir != \"\" {",
          "76:   app.Static(\"/generated-images\", appConfig.ImageDir)",
          "",
          "[Removed Lines]",
          "14:  appConfig *config.ApplicationConfig,",
          "15:  auth func(*fiber.Ctx) error) {",
          "19:  app.Post(\"/v1/chat/completions\", auth, openai.ChatEndpoint(cl, ml, appConfig))",
          "20:  app.Post(\"/chat/completions\", auth, openai.ChatEndpoint(cl, ml, appConfig))",
          "23:  app.Post(\"/v1/edits\", auth, openai.EditEndpoint(cl, ml, appConfig))",
          "24:  app.Post(\"/edits\", auth, openai.EditEndpoint(cl, ml, appConfig))",
          "27:  app.Get(\"/v1/assistants\", auth, openai.ListAssistantsEndpoint(cl, ml, appConfig))",
          "28:  app.Get(\"/assistants\", auth, openai.ListAssistantsEndpoint(cl, ml, appConfig))",
          "29:  app.Post(\"/v1/assistants\", auth, openai.CreateAssistantEndpoint(cl, ml, appConfig))",
          "30:  app.Post(\"/assistants\", auth, openai.CreateAssistantEndpoint(cl, ml, appConfig))",
          "31:  app.Delete(\"/v1/assistants/:assistant_id\", auth, openai.DeleteAssistantEndpoint(cl, ml, appConfig))",
          "32:  app.Delete(\"/assistants/:assistant_id\", auth, openai.DeleteAssistantEndpoint(cl, ml, appConfig))",
          "33:  app.Get(\"/v1/assistants/:assistant_id\", auth, openai.GetAssistantEndpoint(cl, ml, appConfig))",
          "34:  app.Get(\"/assistants/:assistant_id\", auth, openai.GetAssistantEndpoint(cl, ml, appConfig))",
          "35:  app.Post(\"/v1/assistants/:assistant_id\", auth, openai.ModifyAssistantEndpoint(cl, ml, appConfig))",
          "36:  app.Post(\"/assistants/:assistant_id\", auth, openai.ModifyAssistantEndpoint(cl, ml, appConfig))",
          "37:  app.Get(\"/v1/assistants/:assistant_id/files\", auth, openai.ListAssistantFilesEndpoint(cl, ml, appConfig))",
          "38:  app.Get(\"/assistants/:assistant_id/files\", auth, openai.ListAssistantFilesEndpoint(cl, ml, appConfig))",
          "39:  app.Post(\"/v1/assistants/:assistant_id/files\", auth, openai.CreateAssistantFileEndpoint(cl, ml, appConfig))",
          "40:  app.Post(\"/assistants/:assistant_id/files\", auth, openai.CreateAssistantFileEndpoint(cl, ml, appConfig))",
          "41:  app.Delete(\"/v1/assistants/:assistant_id/files/:file_id\", auth, openai.DeleteAssistantFileEndpoint(cl, ml, appConfig))",
          "42:  app.Delete(\"/assistants/:assistant_id/files/:file_id\", auth, openai.DeleteAssistantFileEndpoint(cl, ml, appConfig))",
          "43:  app.Get(\"/v1/assistants/:assistant_id/files/:file_id\", auth, openai.GetAssistantFileEndpoint(cl, ml, appConfig))",
          "44:  app.Get(\"/assistants/:assistant_id/files/:file_id\", auth, openai.GetAssistantFileEndpoint(cl, ml, appConfig))",
          "47:  app.Post(\"/v1/files\", auth, openai.UploadFilesEndpoint(cl, appConfig))",
          "48:  app.Post(\"/files\", auth, openai.UploadFilesEndpoint(cl, appConfig))",
          "49:  app.Get(\"/v1/files\", auth, openai.ListFilesEndpoint(cl, appConfig))",
          "50:  app.Get(\"/files\", auth, openai.ListFilesEndpoint(cl, appConfig))",
          "51:  app.Get(\"/v1/files/:file_id\", auth, openai.GetFilesEndpoint(cl, appConfig))",
          "52:  app.Get(\"/files/:file_id\", auth, openai.GetFilesEndpoint(cl, appConfig))",
          "53:  app.Delete(\"/v1/files/:file_id\", auth, openai.DeleteFilesEndpoint(cl, appConfig))",
          "54:  app.Delete(\"/files/:file_id\", auth, openai.DeleteFilesEndpoint(cl, appConfig))",
          "55:  app.Get(\"/v1/files/:file_id/content\", auth, openai.GetFilesContentsEndpoint(cl, appConfig))",
          "56:  app.Get(\"/files/:file_id/content\", auth, openai.GetFilesContentsEndpoint(cl, appConfig))",
          "59:  app.Post(\"/v1/completions\", auth, openai.CompletionEndpoint(cl, ml, appConfig))",
          "60:  app.Post(\"/completions\", auth, openai.CompletionEndpoint(cl, ml, appConfig))",
          "61:  app.Post(\"/v1/engines/:model/completions\", auth, openai.CompletionEndpoint(cl, ml, appConfig))",
          "64:  app.Post(\"/v1/embeddings\", auth, openai.EmbeddingsEndpoint(cl, ml, appConfig))",
          "65:  app.Post(\"/embeddings\", auth, openai.EmbeddingsEndpoint(cl, ml, appConfig))",
          "66:  app.Post(\"/v1/engines/:model/embeddings\", auth, openai.EmbeddingsEndpoint(cl, ml, appConfig))",
          "69:  app.Post(\"/v1/audio/transcriptions\", auth, openai.TranscriptEndpoint(cl, ml, appConfig))",
          "70:  app.Post(\"/v1/audio/speech\", auth, localai.TTSEndpoint(cl, ml, appConfig))",
          "73:  app.Post(\"/v1/images/generations\", auth, openai.ImageEndpoint(cl, ml, appConfig))",
          "",
          "[Added Lines]",
          "14:  appConfig *config.ApplicationConfig) {",
          "18:  app.Post(\"/v1/chat/completions\", openai.ChatEndpoint(cl, ml, appConfig))",
          "19:  app.Post(\"/chat/completions\", openai.ChatEndpoint(cl, ml, appConfig))",
          "22:  app.Post(\"/v1/edits\", openai.EditEndpoint(cl, ml, appConfig))",
          "23:  app.Post(\"/edits\", openai.EditEndpoint(cl, ml, appConfig))",
          "26:  app.Get(\"/v1/assistants\", openai.ListAssistantsEndpoint(cl, ml, appConfig))",
          "27:  app.Get(\"/assistants\", openai.ListAssistantsEndpoint(cl, ml, appConfig))",
          "28:  app.Post(\"/v1/assistants\", openai.CreateAssistantEndpoint(cl, ml, appConfig))",
          "29:  app.Post(\"/assistants\", openai.CreateAssistantEndpoint(cl, ml, appConfig))",
          "30:  app.Delete(\"/v1/assistants/:assistant_id\", openai.DeleteAssistantEndpoint(cl, ml, appConfig))",
          "31:  app.Delete(\"/assistants/:assistant_id\", openai.DeleteAssistantEndpoint(cl, ml, appConfig))",
          "32:  app.Get(\"/v1/assistants/:assistant_id\", openai.GetAssistantEndpoint(cl, ml, appConfig))",
          "33:  app.Get(\"/assistants/:assistant_id\", openai.GetAssistantEndpoint(cl, ml, appConfig))",
          "34:  app.Post(\"/v1/assistants/:assistant_id\", openai.ModifyAssistantEndpoint(cl, ml, appConfig))",
          "35:  app.Post(\"/assistants/:assistant_id\", openai.ModifyAssistantEndpoint(cl, ml, appConfig))",
          "36:  app.Get(\"/v1/assistants/:assistant_id/files\", openai.ListAssistantFilesEndpoint(cl, ml, appConfig))",
          "37:  app.Get(\"/assistants/:assistant_id/files\", openai.ListAssistantFilesEndpoint(cl, ml, appConfig))",
          "38:  app.Post(\"/v1/assistants/:assistant_id/files\", openai.CreateAssistantFileEndpoint(cl, ml, appConfig))",
          "39:  app.Post(\"/assistants/:assistant_id/files\", openai.CreateAssistantFileEndpoint(cl, ml, appConfig))",
          "40:  app.Delete(\"/v1/assistants/:assistant_id/files/:file_id\", openai.DeleteAssistantFileEndpoint(cl, ml, appConfig))",
          "41:  app.Delete(\"/assistants/:assistant_id/files/:file_id\", openai.DeleteAssistantFileEndpoint(cl, ml, appConfig))",
          "42:  app.Get(\"/v1/assistants/:assistant_id/files/:file_id\", openai.GetAssistantFileEndpoint(cl, ml, appConfig))",
          "43:  app.Get(\"/assistants/:assistant_id/files/:file_id\", openai.GetAssistantFileEndpoint(cl, ml, appConfig))",
          "46:  app.Post(\"/v1/files\", openai.UploadFilesEndpoint(cl, appConfig))",
          "47:  app.Post(\"/files\", openai.UploadFilesEndpoint(cl, appConfig))",
          "48:  app.Get(\"/v1/files\", openai.ListFilesEndpoint(cl, appConfig))",
          "49:  app.Get(\"/files\", openai.ListFilesEndpoint(cl, appConfig))",
          "50:  app.Get(\"/v1/files/:file_id\", openai.GetFilesEndpoint(cl, appConfig))",
          "51:  app.Get(\"/files/:file_id\", openai.GetFilesEndpoint(cl, appConfig))",
          "52:  app.Delete(\"/v1/files/:file_id\", openai.DeleteFilesEndpoint(cl, appConfig))",
          "53:  app.Delete(\"/files/:file_id\", openai.DeleteFilesEndpoint(cl, appConfig))",
          "54:  app.Get(\"/v1/files/:file_id/content\", openai.GetFilesContentsEndpoint(cl, appConfig))",
          "55:  app.Get(\"/files/:file_id/content\", openai.GetFilesContentsEndpoint(cl, appConfig))",
          "58:  app.Post(\"/v1/completions\", openai.CompletionEndpoint(cl, ml, appConfig))",
          "59:  app.Post(\"/completions\", openai.CompletionEndpoint(cl, ml, appConfig))",
          "60:  app.Post(\"/v1/engines/:model/completions\", openai.CompletionEndpoint(cl, ml, appConfig))",
          "63:  app.Post(\"/v1/embeddings\", openai.EmbeddingsEndpoint(cl, ml, appConfig))",
          "64:  app.Post(\"/embeddings\", openai.EmbeddingsEndpoint(cl, ml, appConfig))",
          "65:  app.Post(\"/v1/engines/:model/embeddings\", openai.EmbeddingsEndpoint(cl, ml, appConfig))",
          "68:  app.Post(\"/v1/audio/transcriptions\", openai.TranscriptEndpoint(cl, ml, appConfig))",
          "69:  app.Post(\"/v1/audio/speech\", localai.TTSEndpoint(cl, ml, appConfig))",
          "72:  app.Post(\"/v1/images/generations\", openai.ImageEndpoint(cl, ml, appConfig))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:  }",
          "86: }",
          "",
          "[Removed Lines]",
          "84:  app.Get(\"/v1/models\", auth, openai.ListModelsEndpoint(cl, ml))",
          "85:  app.Get(\"/models\", auth, openai.ListModelsEndpoint(cl, ml))",
          "",
          "[Added Lines]",
          "83:  app.Get(\"/v1/models\", openai.ListModelsEndpoint(cl, ml))",
          "84:  app.Get(\"/models\", openai.ListModelsEndpoint(cl, ml))",
          "",
          "---------------"
        ],
        "core/http/routes/ui.go||core/http/routes/ui.go": [
          "File: core/http/routes/ui.go -> core/http/routes/ui.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  cl *config.BackendConfigLoader,",
          "60:  ml *model.ModelLoader,",
          "61:  appConfig *config.ApplicationConfig,",
          "66:  var processingModels = NewModelOpCache()",
          "",
          "[Removed Lines]",
          "62:  galleryService *services.GalleryService,",
          "63:  auth func(*fiber.Ctx) error) {",
          "",
          "[Added Lines]",
          "62:  galleryService *services.GalleryService) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:   return processingModelsData, taskTypes",
          "86:  }",
          "90:  if p2p.IsP2PEnabled() {",
          "92:    summary := fiber.Map{",
          "93:     \"Title\":   \"LocalAI - P2P dashboard\",",
          "94:     \"Version\": internal.PrintableVersion(),",
          "",
          "[Removed Lines]",
          "88:  app.Get(\"/\", auth, localai.WelcomeEndpoint(appConfig, cl, ml, modelStatus))",
          "91:   app.Get(\"/p2p\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "87:  app.Get(\"/\", localai.WelcomeEndpoint(appConfig, cl, ml, modelStatus))",
          "90:   app.Get(\"/p2p\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "104:   })",
          "108:    return c.SendString(elements.P2PNodeBoxes(p2p.GetAvailableNodes(p2p.NetworkID(appConfig.P2PNetworkID, p2p.WorkerID))))",
          "109:   })",
          "111:    return c.SendString(elements.P2PNodeBoxes(p2p.GetAvailableNodes(p2p.NetworkID(appConfig.P2PNetworkID, p2p.FederatedID))))",
          "112:   })",
          "115:    return c.SendString(elements.P2PNodeStats(p2p.GetAvailableNodes(p2p.NetworkID(appConfig.P2PNetworkID, p2p.WorkerID))))",
          "116:   })",
          "118:    return c.SendString(elements.P2PNodeStats(p2p.GetAvailableNodes(p2p.NetworkID(appConfig.P2PNetworkID, p2p.FederatedID))))",
          "119:   })",
          "120:  }",
          "",
          "[Removed Lines]",
          "107:   app.Get(\"/p2p/ui/workers\", auth, func(c *fiber.Ctx) error {",
          "110:   app.Get(\"/p2p/ui/workers-federation\", auth, func(c *fiber.Ctx) error {",
          "114:   app.Get(\"/p2p/ui/workers-stats\", auth, func(c *fiber.Ctx) error {",
          "117:   app.Get(\"/p2p/ui/workers-federation-stats\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "106:   app.Get(\"/p2p/ui/workers\", func(c *fiber.Ctx) error {",
          "109:   app.Get(\"/p2p/ui/workers-federation\", func(c *fiber.Ctx) error {",
          "113:   app.Get(\"/p2p/ui/workers-stats\", func(c *fiber.Ctx) error {",
          "116:   app.Get(\"/p2p/ui/workers-federation-stats\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:  if !appConfig.DisableGalleryEndpoint {",
          "126:    term := c.Query(\"term\")",
          "128:    models, _ := gallery.AvailableGalleryModels(appConfig.Galleries, appConfig.ModelPath)",
          "",
          "[Removed Lines]",
          "125:   app.Get(\"/browse\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "124:   app.Get(\"/browse\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "171:    form := struct {",
          "172:     Search string `form:\"search\"`",
          "173:    }{}",
          "",
          "[Removed Lines]",
          "170:   app.Post(\"/browse/search/models\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "169:   app.Post(\"/browse/search/models\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "192:    galleryID := strings.Clone(c.Params(\"id\")) // note: strings.Clone is required for multiple requests!",
          "193:    log.Debug().Msgf(\"UI job submitted to install  : %+v\\n\", galleryID)",
          "",
          "[Removed Lines]",
          "191:   app.Post(\"/browse/install/model/:id\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "190:   app.Post(\"/browse/install/model/:id\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "219:    galleryID := strings.Clone(c.Params(\"id\")) // note: strings.Clone is required for multiple requests!",
          "220:    log.Debug().Msgf(\"UI job submitted to delete  : %+v\\n\", galleryID)",
          "221:    var galleryName = galleryID",
          "",
          "[Removed Lines]",
          "218:   app.Post(\"/browse/delete/model/:id\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "217:   app.Post(\"/browse/delete/model/:id\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "259:    jobUID := strings.Clone(c.Params(\"uid\")) // note: strings.Clone is required for multiple requests!",
          "261:    status := galleryService.GetStatus(jobUID)",
          "",
          "[Removed Lines]",
          "258:   app.Get(\"/browse/job/progress/:uid\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "257:   app.Get(\"/browse/job/progress/:uid\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "283:    jobUID := strings.Clone(c.Params(\"uid\")) // note: strings.Clone is required for multiple requests!",
          "285:    status := galleryService.GetStatus(jobUID)",
          "",
          "[Removed Lines]",
          "282:   app.Get(\"/browse/job/:uid\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "281:   app.Get(\"/browse/job/:uid\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "303:  }",
          "307:   backendConfigs, _ := services.ListModels(cl, ml, \"\", true)",
          "309:   summary := fiber.Map{",
          "",
          "[Removed Lines]",
          "306:  app.Get(\"/chat/:model\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "305:  app.Get(\"/chat/:model\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "318:   return c.Render(\"views/chat\", summary)",
          "319:  })",
          "322:   backendConfigs, _ := services.ListModels(cl, ml, \"\", true)",
          "324:   if len(backendConfigs) == 0 {",
          "",
          "[Removed Lines]",
          "321:  app.Get(\"/talk/\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "320:  app.Get(\"/talk/\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "338:   return c.Render(\"views/talk\", summary)",
          "339:  })",
          "343:   backendConfigs, _ := services.ListModels(cl, ml, \"\", true)",
          "",
          "[Removed Lines]",
          "341:  app.Get(\"/chat/\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "340:  app.Get(\"/chat/\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "359:   return c.Render(\"views/chat\", summary)",
          "360:  })",
          "363:   backendConfigs := cl.GetAllBackendConfigs()",
          "365:   summary := fiber.Map{",
          "",
          "[Removed Lines]",
          "362:  app.Get(\"/text2image/:model\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "361:  app.Get(\"/text2image/:model\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "374:   return c.Render(\"views/text2image\", summary)",
          "375:  })",
          "379:   backendConfigs := cl.GetAllBackendConfigs()",
          "",
          "[Removed Lines]",
          "377:  app.Get(\"/text2image/\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "376:  app.Get(\"/text2image/\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "395:   return c.Render(\"views/text2image\", summary)",
          "396:  })",
          "399:   backendConfigs := cl.GetAllBackendConfigs()",
          "401:   summary := fiber.Map{",
          "",
          "[Removed Lines]",
          "398:  app.Get(\"/tts/:model\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "397:  app.Get(\"/tts/:model\", func(c *fiber.Ctx) error {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "410:   return c.Render(\"views/tts\", summary)",
          "411:  })",
          "415:   backendConfigs := cl.GetAllBackendConfigs()",
          "",
          "[Removed Lines]",
          "413:  app.Get(\"/tts/\", auth, func(c *fiber.Ctx) error {",
          "",
          "[Added Lines]",
          "412:  app.Get(\"/tts/\", func(c *fiber.Ctx) error {",
          "",
          "---------------"
        ],
        "go.mod||go.mod": [
          "File: go.mod -> go.mod",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:  cloud.google.com/go/auth/oauth2adapt v0.2.2 // indirect",
          "75:  cloud.google.com/go/compute/metadata v0.3.0 // indirect",
          "76:  github.com/cpuguy83/go-md2man/v2 v2.0.4 // indirect",
          "77:  github.com/envoyproxy/protoc-gen-validate v1.0.4 // indirect",
          "78:  github.com/felixge/httpsnoop v1.0.4 // indirect",
          "79:  github.com/go-task/slim-sprig/v3 v3.0.0 // indirect",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:  github.com/dave-gray101/v2keyauth v0.0.0-20240624150259-c45d584d25e2 // indirect",
          "",
          "---------------"
        ],
        "go.sum||go.sum": [
          "File: go.sum -> go.sum",
          "--- Hunk 1 ---",
          "[Context before]",
          "110: github.com/creachadair/otp v0.4.2/go.mod h1:DqV9hJyUbcUme0pooYfiFvvMe72Aua5sfhNzwfZvk40=",
          "111: github.com/creack/pty v1.1.18 h1:n56/Zwd5o6whRC5PMGretI4IdRLlmBXYNjScPaBgsbY=",
          "112: github.com/creack/pty v1.1.18/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=",
          "113: github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=",
          "114: github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=",
          "115: github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113: github.com/dave-gray101/v2keyauth v0.0.0-20240624150259-c45d584d25e2 h1:flLYmnQFZNo04x2NPehMbf30m7Pli57xwZ0NFqR/hb0=",
          "114: github.com/dave-gray101/v2keyauth v0.0.0-20240624150259-c45d584d25e2/go.mod h1:NtWqRzAp/1tw+twkW8uuBenEVVYndEAZACWU3F3xdoQ=",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c041a2077854c955a4ae68d5ef486746eb6e356",
      "candidate_info": {
        "commit_hash": "2c041a2077854c955a4ae68d5ef486746eb6e356",
        "repo": "mudler/localai",
        "commit_url": "https://github.com/mudler/localai/commit/2c041a2077854c955a4ae68d5ef486746eb6e356",
        "files": [
          "core/http/elements/buttons.go",
          "core/http/elements/gallery.go",
          "core/http/elements/p2p.go",
          "core/http/elements/progressbar.go",
          "core/http/static/assets/flowbite.min.js",
          "core/http/views/partials/head.html",
          "embedded/webui_static.yaml"
        ],
        "message": "feat(ui): move model detailed info to a modal  (#4086)\n\n* feat(ui): move model detailed info to a modal\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>\n\n* chore: add static asset\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>\n\n---------\n\nSigned-off-by: Ettore Di Giacinto <mudler@localai.io>",
        "before_after_code_files": [
          "core/http/elements/buttons.go||core/http/elements/buttons.go",
          "core/http/elements/gallery.go||core/http/elements/gallery.go",
          "core/http/elements/p2p.go||core/http/elements/p2p.go",
          "core/http/elements/progressbar.go||core/http/elements/progressbar.go",
          "core/http/static/assets/flowbite.min.js||core/http/static/assets/flowbite.min.js",
          "core/http/views/partials/head.html||core/http/views/partials/head.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/http/elements/gallery.go||core/http/elements/gallery.go"
          ],
          "candidate": [
            "core/http/elements/gallery.go||core/http/elements/gallery.go"
          ]
        }
      },
      "candidate_diff": {
        "core/http/elements/buttons.go||core/http/elements/buttons.go": [
          "File: core/http/elements/buttons.go -> core/http/elements/buttons.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package elements",
          "3: import (",
          "4:  \"strings\"",
          "6:  \"github.com/chasefleming/elem-go\"",
          "7:  \"github.com/chasefleming/elem-go/attrs\"",
          "8:  \"github.com/mudler/LocalAI/core/gallery\"",
          "9: )",
          "11: func installButton(galleryName string) elem.Node {",
          "12:  return elem.Button(",
          "13:   attrs.Props{",
          "14:    \"data-twe-ripple-init\":  \"\",",
          "15:    \"data-twe-ripple-color\": \"light\",",
          "16:    \"class\":                 \"float-right inline-block rounded bg-primary px-6 pb-2.5 mb-3 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-primary-3 transition duration-150 ease-in-out hover:bg-primary-accent-300 hover:shadow-primary-2 focus:bg-primary-accent-300 focus:shadow-primary-2 focus:outline-none focus:ring-0 active:bg-primary-600 active:shadow-primary-2 dark:shadow-black/30 dark:hover:shadow-dark-strong dark:focus:shadow-dark-strong dark:active:shadow-dark-strong\",",
          "17:    \"hx-swap\":               \"outerHTML\",",
          "19:    \"hx-post\": \"/browse/install/model/\" + galleryName,",
          "20:   },",
          "21:   elem.I(",
          "22:    attrs.Props{",
          "23:     \"class\": \"fa-solid fa-download pr-2\",",
          "24:    },",
          "25:   ),",
          "26:   elem.Text(\"Install\"),",
          "27:  )",
          "28: }",
          "30: func reInstallButton(galleryName string) elem.Node {",
          "31:  return elem.Button(",
          "32:   attrs.Props{",
          "33:    \"data-twe-ripple-init\":  \"\",",
          "34:    \"data-twe-ripple-color\": \"light\",",
          "35:    \"class\":                 \"float-right inline-block rounded bg-primary ml-2 px-6 pb-2.5 mb-3 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-primary-3 transition duration-150 ease-in-out hover:bg-primary-accent-300 hover:shadow-primary-2 focus:bg-primary-accent-300 focus:shadow-primary-2 focus:outline-none focus:ring-0 active:bg-primary-600 active:shadow-primary-2 dark:shadow-black/30 dark:hover:shadow-dark-strong dark:focus:shadow-dark-strong dark:active:shadow-dark-strong\",",
          "36:    \"hx-target\":             \"#action-div-\" + dropBadChars(galleryName),",
          "37:    \"hx-swap\":               \"outerHTML\",",
          "39:    \"hx-post\": \"/browse/install/model/\" + galleryName,",
          "40:   },",
          "41:   elem.I(",
          "42:    attrs.Props{",
          "43:     \"class\": \"fa-solid fa-arrow-rotate-right pr-2\",",
          "44:    },",
          "45:   ),",
          "46:   elem.Text(\"Reinstall\"),",
          "47:  )",
          "48: }",
          "50: func infoButton(m *gallery.GalleryModel) elem.Node {",
          "51:  return elem.Button(",
          "52:   attrs.Props{",
          "53:    \"data-twe-ripple-init\":  \"\",",
          "54:    \"data-twe-ripple-color\": \"light\",",
          "55:    \"class\":                 \"float-left inline-block rounded bg-primary px-6 pb-2.5 mb-3 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-primary-3 transition duration-150 ease-in-out hover:bg-primary-accent-300 hover:shadow-primary-2 focus:bg-primary-accent-300 focus:shadow-primary-2 focus:outline-none focus:ring-0 active:bg-primary-600 active:shadow-primary-2 dark:shadow-black/30 dark:hover:shadow-dark-strong dark:focus:shadow-dark-strong dark:active:shadow-dark-strong\",",
          "56:    \"data-modal-target\":     modalName(m),",
          "57:    \"data-modal-toggle\":     modalName(m),",
          "58:   },",
          "59:   elem.P(",
          "60:    attrs.Props{",
          "61:     \"class\": \"flex items-center\",",
          "62:    },",
          "63:    elem.I(",
          "64:     attrs.Props{",
          "65:      \"class\": \"fas fa-info-circle pr-2\",",
          "66:     },",
          "67:    ),",
          "68:    elem.Text(\"Info\"),",
          "69:   ),",
          "70:  )",
          "71: }",
          "73: func deleteButton(galleryID string) elem.Node {",
          "74:  return elem.Button(",
          "75:   attrs.Props{",
          "76:    \"data-twe-ripple-init\":  \"\",",
          "77:    \"data-twe-ripple-color\": \"light\",",
          "78:    \"hx-confirm\":            \"Are you sure you wish to delete the model?\",",
          "79:    \"class\":                 \"float-right inline-block rounded bg-red-800 px-6 pb-2.5 mb-3 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-primary-3 transition duration-150 ease-in-out hover:bg-red-accent-300 hover:shadow-red-2 focus:bg-red-accent-300 focus:shadow-primary-2 focus:outline-none focus:ring-0 active:bg-red-600 active:shadow-primary-2 dark:shadow-black/30 dark:hover:shadow-dark-strong dark:focus:shadow-dark-strong dark:active:shadow-dark-strong\",",
          "80:    \"hx-target\":             \"#action-div-\" + dropBadChars(galleryID),",
          "81:    \"hx-swap\":               \"outerHTML\",",
          "83:    \"hx-post\": \"/browse/delete/model/\" + galleryID,",
          "84:   },",
          "85:   elem.I(",
          "86:    attrs.Props{",
          "87:     \"class\": \"fa-solid fa-cancel pr-2\",",
          "88:    },",
          "89:   ),",
          "90:   elem.Text(\"Delete\"),",
          "91:  )",
          "92: }",
          "95: func dropBadChars(s string) string {",
          "96:  return strings.ReplaceAll(s, \"@\", \"__\")",
          "97: }",
          "",
          "---------------"
        ],
        "core/http/elements/gallery.go||core/http/elements/gallery.go": [
          "File: core/http/elements/gallery.go -> core/http/elements/gallery.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: import (",
          "4:  \"fmt\"",
          "7:  \"github.com/chasefleming/elem-go\"",
          "8:  \"github.com/chasefleming/elem-go/attrs\"",
          "9:  \"github.com/microcosm-cc/bluemonday\"",
          "10:  \"github.com/mudler/LocalAI/core/gallery\"",
          "12:  \"github.com/mudler/LocalAI/core/services\"",
          "13: )",
          "",
          "[Removed Lines]",
          "5:  \"strings\"",
          "11:  \"github.com/mudler/LocalAI/core/p2p\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "16:  noImage = \"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"",
          "17: )",
          "244: func cardSpan(text, icon string) elem.Node {",
          "245:  return elem.Span(",
          "246:   attrs.Props{",
          "",
          "[Removed Lines]",
          "19: func renderElements(n []elem.Node) string {",
          "20:  render := \"\"",
          "21:  for _, r := range n {",
          "22:   render += r.Render()",
          "23:  }",
          "24:  return render",
          "25: }",
          "27: func DoneProgress(galleryID, text string, showDelete bool) string {",
          "28:  var modelName = galleryID",
          "30:  if strings.Contains(galleryID, \"@\") {",
          "31:   modelName = strings.Split(galleryID, \"@\")[1]",
          "32:  }",
          "34:  return elem.Div(",
          "35:   attrs.Props{",
          "36:    \"id\": \"action-div-\" + dropBadChars(galleryID),",
          "37:   },",
          "38:   elem.H3(",
          "39:    attrs.Props{",
          "40:     \"role\":      \"status\",",
          "41:     \"id\":        \"pblabel\",",
          "42:     \"tabindex\":  \"-1\",",
          "43:     \"autofocus\": \"\",",
          "44:    },",
          "45:    elem.Text(bluemonday.StrictPolicy().Sanitize(text)),",
          "46:   ),",
          "47:   elem.If(showDelete, deleteButton(galleryID, modelName), reInstallButton(galleryID)),",
          "48:  ).Render()",
          "49: }",
          "51: func ErrorProgress(err, galleryName string) string {",
          "52:  return elem.Div(",
          "53:   attrs.Props{},",
          "54:   elem.H3(",
          "55:    attrs.Props{",
          "56:     \"role\":      \"status\",",
          "57:     \"id\":        \"pblabel\",",
          "58:     \"tabindex\":  \"-1\",",
          "59:     \"autofocus\": \"\",",
          "60:    },",
          "61:    elem.Text(\"Error \"+bluemonday.StrictPolicy().Sanitize(err)),",
          "62:   ),",
          "63:   installButton(galleryName),",
          "64:  ).Render()",
          "65: }",
          "67: func ProgressBar(progress string) string {",
          "68:  return elem.Div(attrs.Props{",
          "69:   \"class\":           \"progress\",",
          "70:   \"role\":            \"progressbar\",",
          "71:   \"aria-valuemin\":   \"0\",",
          "72:   \"aria-valuemax\":   \"100\",",
          "73:   \"aria-valuenow\":   \"0\",",
          "74:   \"aria-labelledby\": \"pblabel\",",
          "75:  },",
          "76:   elem.Div(attrs.Props{",
          "77:    \"id\":    \"pb\",",
          "78:    \"class\": \"progress-bar\",",
          "79:    \"style\": \"width:\" + progress + \"%\",",
          "80:   }),",
          "81:  ).Render()",
          "82: }",
          "84: func P2PNodeStats(nodes []p2p.NodeData) string {",
          "86:     <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg text-left\">",
          "87:                         <p class=\"text-xl font-semibold text-gray-200\">Total Workers Detected: {{ len .Nodes }}</p>",
          "88:                         {{ $online := 0 }}",
          "89:                         {{ range .Nodes }}",
          "90:                             {{ if .IsOnline }}",
          "91:                                 {{ $online = add $online 1 }}",
          "92:                             {{ end }}",
          "93:                         {{ end }}",
          "94:                         <p class=\"text-xl font-semibold text-gray-200\">Total Online Workers: {{$online}}</p>",
          "95:                     </div>",
          "98:  online := 0",
          "99:  for _, n := range nodes {",
          "100:   if n.IsOnline() {",
          "101:    online++",
          "102:   }",
          "103:  }",
          "105:  class := \"text-green-500\"",
          "106:  if online == 0 {",
          "107:   class = \"text-red-500\"",
          "108:  }",
          "110:     <i class=\"fas fa-circle animate-pulse text-green-500 ml-2 mr-1\"></i>",
          "112:  circle := elem.I(attrs.Props{",
          "113:   \"class\": \"fas fa-circle animate-pulse \" + class + \" ml-2 mr-1\",",
          "114:  })",
          "115:  nodesElements := []elem.Node{",
          "116:   elem.Span(",
          "117:    attrs.Props{",
          "118:     \"class\": class,",
          "119:    },",
          "120:    circle,",
          "121:    elem.Text(fmt.Sprintf(\"%d\", online)),",
          "122:   ),",
          "123:   elem.Span(",
          "124:    attrs.Props{",
          "125:     \"class\": \"text-gray-200\",",
          "126:    },",
          "127:    elem.Text(fmt.Sprintf(\"/%d\", len(nodes))),",
          "128:   ),",
          "129:  }",
          "131:  return renderElements(nodesElements)",
          "132: }",
          "134: func P2PNodeBoxes(nodes []p2p.NodeData) string {",
          "136:    <div class=\"bg-gray-800 p-4 rounded-lg shadow-lg text-left\">",
          "137:    <div class=\"flex items-center mb-2\">",
          "138:     <i class=\"fas fa-desktop text-gray-400 mr-2\"></i>",
          "139:     <span class=\"text-gray-200 font-semibold\">{{.ID}}</span>",
          "140:    </div>",
          "141:    <p class=\"text-sm text-gray-400 mt-2 flex items-center\">",
          "142:     Status:",
          "143:     <i class=\"fas fa-circle {{ if .IsOnline }}text-green-500{{ else }}text-red-500{{ end }} ml-2 mr-1\"></i>",
          "144:     <span class=\"{{ if .IsOnline }}text-green-400{{ else }}text-red-400{{ end }}\">",
          "145:      {{ if .IsOnline }}Online{{ else }}Offline{{ end }}",
          "146:     </span>",
          "147:    </p>",
          "148:   </div>",
          "151:  nodesElements := []elem.Node{}",
          "153:  for _, n := range nodes {",
          "155:   nodesElements = append(nodesElements,",
          "156:    elem.Div(",
          "157:     attrs.Props{",
          "158:      \"class\": \"bg-gray-700 p-6 rounded-lg shadow-lg text-left\",",
          "159:     },",
          "160:     elem.P(",
          "161:      attrs.Props{",
          "162:       \"class\": \"text-sm text-gray-400 mt-2 flex\",",
          "163:      },",
          "164:      elem.I(",
          "165:       attrs.Props{",
          "166:        \"class\": \"fas fa-desktop text-gray-400 mr-2\",",
          "167:       },",
          "168:      ),",
          "169:      elem.Text(\"Name: \"),",
          "170:      elem.Span(",
          "171:       attrs.Props{",
          "172:        \"class\": \"text-gray-200 font-semibold ml-2 mr-1\",",
          "173:       },",
          "174:       elem.Text(bluemonday.StrictPolicy().Sanitize(n.ID)),",
          "175:      ),",
          "176:      elem.Text(\"Status: \"),",
          "177:      elem.If(",
          "178:       n.IsOnline(),",
          "179:       elem.I(",
          "180:        attrs.Props{",
          "181:         \"class\": \"fas fa-circle animate-pulse text-green-500 ml-2 mr-1\",",
          "182:        },",
          "183:       ),",
          "184:       elem.I(",
          "185:        attrs.Props{",
          "186:         \"class\": \"fas fa-circle animate-pulse text-red-500 ml-2 mr-1\",",
          "187:        },",
          "188:       ),",
          "189:      ),",
          "190:      elem.If(",
          "191:       n.IsOnline(),",
          "192:       elem.Span(",
          "193:        attrs.Props{",
          "194:         \"class\": \"text-green-400\",",
          "195:        },",
          "197:        elem.Text(\"Online\"),",
          "198:       ),",
          "199:       elem.Span(",
          "200:        attrs.Props{",
          "201:         \"class\": \"text-red-400\",",
          "202:        },",
          "203:        elem.Text(\"Offline\"),",
          "204:       ),",
          "205:      ),",
          "206:     ),",
          "207:    ))",
          "208:  }",
          "210:  return renderElements(nodesElements)",
          "211: }",
          "213: func StartProgressBar(uid, progress, text string) string {",
          "214:  if progress == \"\" {",
          "215:   progress = \"0\"",
          "216:  }",
          "217:  return elem.Div(",
          "218:   attrs.Props{",
          "219:    \"hx-trigger\": \"done\",",
          "220:    \"hx-get\":     \"/browse/job/\" + uid,",
          "221:    \"hx-swap\":    \"outerHTML\",",
          "222:    \"hx-target\":  \"this\",",
          "223:   },",
          "224:   elem.H3(",
          "225:    attrs.Props{",
          "226:     \"role\":      \"status\",",
          "227:     \"id\":        \"pblabel\",",
          "228:     \"tabindex\":  \"-1\",",
          "229:     \"autofocus\": \"\",",
          "230:    },",
          "231:    elem.Text(bluemonday.StrictPolicy().Sanitize(text)), //Perhaps overly defensive",
          "232:    elem.Div(attrs.Props{",
          "233:     \"hx-get\":     \"/browse/job/progress/\" + uid,",
          "234:     \"hx-trigger\": \"every 600ms\",",
          "235:     \"hx-target\":  \"this\",",
          "236:     \"hx-swap\":    \"innerHTML\",",
          "237:    },",
          "238:     elem.Raw(ProgressBar(progress)),",
          "239:    ),",
          "240:   ),",
          "241:  ).Render()",
          "242: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "290:  )",
          "291: }",
          "294:  return elem.A(",
          "295:   attrs.Props{",
          "296:    \"class\":  \"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2 hover:bg-gray-300 hover:shadow-gray-2\",",
          "",
          "[Removed Lines]",
          "293: func link(text, url string) elem.Node {",
          "",
          "[Added Lines]",
          "66: func buttonLink(text, url string) elem.Node {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "303:   elem.Text(bluemonday.StrictPolicy().Sanitize(text)),",
          "304:  )",
          "305: }",
          "308:   attrs.Props{",
          "315:   },",
          "322:  )",
          "323: }",
          "327:   attrs.Props{",
          "335:   },",
          "337:    attrs.Props{",
          "339:    },",
          "340:   ),",
          "358:    attrs.Props{",
          "360:    },",
          "361:   ),",
          "380:    attrs.Props{",
          "382:    },",
          "390:     attrs.Props{",
          "392:     },",
          "394:    ),",
          "421:   }",
          "430:   nodes = append(nodes,",
          "437:   )",
          "451:    attrs.Props{",
          "453:    },",
          "460:    elem.Div(",
          "461:     attrs.Props{",
          "463:     },",
          "464:     elem.If(",
          "465:      currentlyProcessing,",
          "",
          "[Removed Lines]",
          "306: func installButton(galleryName string) elem.Node {",
          "307:  return elem.Button(",
          "309:    \"data-twe-ripple-init\":  \"\",",
          "310:    \"data-twe-ripple-color\": \"light\",",
          "311:    \"class\":                 \"float-right inline-block rounded bg-primary px-6 pb-2.5 mb-3 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-primary-3 transition duration-150 ease-in-out hover:bg-primary-accent-300 hover:shadow-primary-2 focus:bg-primary-accent-300 focus:shadow-primary-2 focus:outline-none focus:ring-0 active:bg-primary-600 active:shadow-primary-2 dark:shadow-black/30 dark:hover:shadow-dark-strong dark:focus:shadow-dark-strong dark:active:shadow-dark-strong\",",
          "312:    \"hx-swap\":               \"outerHTML\",",
          "314:    \"hx-post\": \"/browse/install/model/\" + galleryName,",
          "316:   elem.I(",
          "317:    attrs.Props{",
          "318:     \"class\": \"fa-solid fa-download pr-2\",",
          "319:    },",
          "320:   ),",
          "321:   elem.Text(\"Install\"),",
          "325: func reInstallButton(galleryName string) elem.Node {",
          "326:  return elem.Button(",
          "328:    \"data-twe-ripple-init\":  \"\",",
          "329:    \"data-twe-ripple-color\": \"light\",",
          "330:    \"class\":                 \"float-right inline-block rounded bg-primary ml-2 px-6 pb-2.5 mb-3 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-primary-3 transition duration-150 ease-in-out hover:bg-primary-accent-300 hover:shadow-primary-2 focus:bg-primary-accent-300 focus:shadow-primary-2 focus:outline-none focus:ring-0 active:bg-primary-600 active:shadow-primary-2 dark:shadow-black/30 dark:hover:shadow-dark-strong dark:focus:shadow-dark-strong dark:active:shadow-dark-strong\",",
          "331:    \"hx-target\":             \"#action-div-\" + dropBadChars(galleryName),",
          "332:    \"hx-swap\":               \"outerHTML\",",
          "334:    \"hx-post\": \"/browse/install/model/\" + galleryName,",
          "336:   elem.I(",
          "338:     \"class\": \"fa-solid fa-arrow-rotate-right pr-2\",",
          "341:   elem.Text(\"Reinstall\"),",
          "342:  )",
          "343: }",
          "345: func deleteButton(galleryID, modelName string) elem.Node {",
          "346:  return elem.Button(",
          "347:   attrs.Props{",
          "348:    \"data-twe-ripple-init\":  \"\",",
          "349:    \"data-twe-ripple-color\": \"light\",",
          "350:    \"hx-confirm\":            \"Are you sure you wish to delete the model?\",",
          "351:    \"class\":                 \"float-right inline-block rounded bg-red-800 px-6 pb-2.5 mb-3 pt-2.5 text-xs font-medium uppercase leading-normal text-white shadow-primary-3 transition duration-150 ease-in-out hover:bg-red-accent-300 hover:shadow-red-2 focus:bg-red-accent-300 focus:shadow-primary-2 focus:outline-none focus:ring-0 active:bg-red-600 active:shadow-primary-2 dark:shadow-black/30 dark:hover:shadow-dark-strong dark:focus:shadow-dark-strong dark:active:shadow-dark-strong\",",
          "352:    \"hx-target\":             \"#action-div-\" + dropBadChars(galleryID),",
          "353:    \"hx-swap\":               \"outerHTML\",",
          "355:    \"hx-post\": \"/browse/delete/model/\" + galleryID,",
          "356:   },",
          "357:   elem.I(",
          "359:     \"class\": \"fa-solid fa-cancel pr-2\",",
          "362:   elem.Text(\"Delete\"),",
          "363:  )",
          "364: }",
          "367: func dropBadChars(s string) string {",
          "368:  return strings.ReplaceAll(s, \"@\", \"__\")",
          "369: }",
          "371: type ProcessTracker interface {",
          "372:  Exists(string) bool",
          "373:  Get(string) string",
          "374: }",
          "376: func ListModels(models []*gallery.GalleryModel, processTracker ProcessTracker, galleryService *services.GalleryService) string {",
          "377:  modelsElements := []elem.Node{}",
          "378:  descriptionDiv := func(m *gallery.GalleryModel) elem.Node {",
          "379:   return elem.Div(",
          "381:     \"class\": \"p-6 text-surface dark:text-white\",",
          "383:    elem.H5(",
          "384:     attrs.Props{",
          "385:      \"class\": \"mb-2 text-xl font-bold leading-tight\",",
          "386:     },",
          "387:     elem.Text(bluemonday.StrictPolicy().Sanitize(m.Name)),",
          "388:    ),",
          "389:    elem.P(",
          "391:      \"class\": \"mb-4 text-sm [&:not(:hover)]:truncate text-base\",",
          "393:     elem.Text(bluemonday.StrictPolicy().Sanitize(m.Description)),",
          "395:   )",
          "396:  }",
          "398:  actionDiv := func(m *gallery.GalleryModel) elem.Node {",
          "399:   galleryID := fmt.Sprintf(\"%s@%s\", m.Gallery.Name, m.Name)",
          "400:   currentlyProcessing := processTracker.Exists(galleryID)",
          "401:   jobID := \"\"",
          "402:   isDeletionOp := false",
          "403:   if currentlyProcessing {",
          "404:    status := galleryService.GetStatus(galleryID)",
          "405:    if status != nil && status.Deletion {",
          "406:     isDeletionOp = true",
          "407:    }",
          "408:    jobID = processTracker.Get(galleryID)",
          "411:   }",
          "413:   nodes := []elem.Node{",
          "414:    cardSpan(\"Repository: \"+m.Gallery.Name, \"fa-brands fa-git-alt\"),",
          "415:   }",
          "417:   if m.License != \"\" {",
          "418:    nodes = append(nodes,",
          "419:     cardSpan(\"License: \"+m.License, \"fas fa-book\"),",
          "420:    )",
          "423:   tagsNodes := []elem.Node{}",
          "424:   for _, tag := range m.Tags {",
          "425:    tagsNodes = append(tagsNodes,",
          "426:     searchableElement(tag, \"fas fa-tag\"),",
          "427:    )",
          "428:   }",
          "431:    elem.Div(",
          "432:     attrs.Props{",
          "433:      \"class\": \"flex flex-row flex-wrap content-center\",",
          "434:     },",
          "435:     tagsNodes...,",
          "436:    ),",
          "439:   for i, url := range m.URLs {",
          "440:    nodes = append(nodes,",
          "441:     link(\"Link #\"+fmt.Sprintf(\"%d\", i+1), url),",
          "442:    )",
          "443:   }",
          "445:   progressMessage := \"Installation\"",
          "446:   if isDeletionOp {",
          "447:    progressMessage = \"Deletion\"",
          "448:   }",
          "450:   return elem.Div(",
          "452:     \"class\": \"px-6 pt-4 pb-2\",",
          "454:    elem.P(",
          "455:     attrs.Props{",
          "456:      \"class\": \"mb-4 text-base\",",
          "457:     },",
          "458:     nodes...,",
          "459:    ),",
          "462:      \"id\": \"action-div-\" + dropBadChars(galleryID),",
          "",
          "[Added Lines]",
          "81: func link(text, url string) elem.Node {",
          "82:  return elem.A(",
          "84:    \"class\":  \"text-base leading-relaxed text-gray-500 dark:text-gray-400\",",
          "85:    \"href\":   url,",
          "86:    \"target\": \"_blank\",",
          "88:   elem.I(attrs.Props{",
          "89:    \"class\": \"fas fa-link pr-2\",",
          "90:   }),",
          "91:   elem.Text(bluemonday.StrictPolicy().Sanitize(text)),",
          "95: type ProcessTracker interface {",
          "96:  Exists(string) bool",
          "97:  Get(string) string",
          "98: }",
          "100: func modalName(m *gallery.GalleryModel) string {",
          "101:  return m.Name + \"-modal\"",
          "102: }",
          "104: func modelDescription(m *gallery.GalleryModel) elem.Node {",
          "105:  urls := []elem.Node{}",
          "106:  for _, url := range m.URLs {",
          "107:   urls = append(urls,",
          "108:    elem.Li(attrs.Props{}, link(url, url)),",
          "109:   )",
          "110:  }",
          "112:  tagsNodes := []elem.Node{}",
          "113:  for _, tag := range m.Tags {",
          "114:   tagsNodes = append(tagsNodes,",
          "115:    searchableElement(tag, \"fas fa-tag\"),",
          "116:   )",
          "117:  }",
          "119:  return elem.Div(",
          "121:    \"class\": \"p-6 text-surface dark:text-white\",",
          "123:   elem.H5(",
          "125:     \"class\": \"mb-2 text-xl font-bold leading-tight\",",
          "127:    elem.Text(bluemonday.StrictPolicy().Sanitize(m.Name)),",
          "129:   elem.Div( // small description",
          "131:     \"class\": \"mb-4 text-sm truncate text-base\",",
          "133:    elem.Text(bluemonday.StrictPolicy().Sanitize(m.Description)),",
          "136:   elem.Div(",
          "138:     \"id\":          modalName(m),",
          "139:     \"tabindex\":    \"-1\",",
          "140:     \"aria-hidden\": \"true\",",
          "141:     \"class\":       \"hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full\",",
          "143:    elem.Div(",
          "145:      \"class\": \"relative p-4 w-full max-w-2xl max-h-full\",",
          "147:     elem.Div(",
          "148:      attrs.Props{",
          "149:       \"class\": \"relative p-4 w-full max-w-2xl max-h-full bg-white rounded-lg shadow dark:bg-gray-700\",",
          "150:      },",
          "152:      elem.Div(",
          "153:       attrs.Props{",
          "154:        \"class\": \"flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600\",",
          "155:       },",
          "156:       elem.H3(",
          "157:        attrs.Props{",
          "158:         \"class\": \"text-xl font-semibold text-gray-900 dark:text-white\",",
          "159:        },",
          "160:        elem.Text(bluemonday.StrictPolicy().Sanitize(m.Name)),",
          "161:       ),",
          "162:       elem.Button( // close button",
          "163:        attrs.Props{",
          "164:         \"class\":           \"text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white\",",
          "165:         \"data-modal-hide\": modalName(m),",
          "166:        },",
          "167:        elem.Raw(",
          "168:         `<svg class=\"w-3 h-3\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 14 14\">",
          "169:          <path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6\"/>",
          "170:         </svg>`,",
          "171:        ),",
          "172:        elem.Span(",
          "173:         attrs.Props{",
          "174:          \"class\": \"sr-only\",",
          "175:         },",
          "176:         elem.Text(\"Close modal\"),",
          "177:        ),",
          "178:       ),",
          "179:      ),",
          "181:      elem.Div(",
          "182:       attrs.Props{",
          "183:        \"class\": \"p-4 md:p-5 space-y-4\",",
          "184:       },",
          "185:       elem.Div(",
          "186:        attrs.Props{",
          "187:         \"class\": \"flex justify-center items-center\",",
          "188:        },",
          "189:        elem.Img(attrs.Props{",
          "191:         \"class\":   \"lazy rounded-t-lg max-h-48 max-w-96 object-cover mt-3 entered loaded\",",
          "192:         \"src\":     m.Icon,",
          "193:         \"loading\": \"lazy\",",
          "194:        }),",
          "195:       ),",
          "196:       elem.P(",
          "197:        attrs.Props{",
          "198:         \"class\": \"text-base leading-relaxed text-gray-500 dark:text-gray-400\",",
          "199:        },",
          "200:        elem.Text(bluemonday.StrictPolicy().Sanitize(m.Description)),",
          "201:       ),",
          "202:       elem.Hr(",
          "203:        attrs.Props{},",
          "204:       ),",
          "205:       elem.P(",
          "206:        attrs.Props{",
          "207:         \"class\": \"text-sm font-semibold text-gray-900 dark:text-white\",",
          "208:        },",
          "209:        elem.Text(\"Links\"),",
          "210:       ),",
          "211:       elem.Ul(",
          "212:        attrs.Props{},",
          "213:        urls...,",
          "214:       ),",
          "215:       elem.If(",
          "216:        len(m.Tags) > 0,",
          "217:        elem.Div(",
          "218:         attrs.Props{},",
          "219:         elem.P(",
          "220:          attrs.Props{",
          "221:           \"class\": \"text-sm mb-5 font-semibold text-gray-900 dark:text-white\",",
          "222:          },",
          "223:          elem.Text(\"Tags\"),",
          "224:         ),",
          "225:         elem.Div(",
          "226:          attrs.Props{",
          "227:           \"class\": \"flex flex-row flex-wrap content-center\",",
          "228:          },",
          "229:          tagsNodes...,",
          "230:         ),",
          "231:        ),",
          "232:        elem.Div(attrs.Props{}),",
          "233:       ),",
          "234:      ),",
          "236:      elem.Div(",
          "237:       attrs.Props{",
          "238:        \"class\": \"flex items-center p-4 md:p-5 border-t border-gray-200 rounded-b dark:border-gray-600\",",
          "239:       },",
          "240:       elem.Button(",
          "241:        attrs.Props{",
          "242:         \"data-modal-hide\": modalName(m),",
          "243:         \"class\":           \"py-2.5 px-5 ms-3 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700\",",
          "244:        },",
          "245:        elem.Text(\"Close\"),",
          "246:       ),",
          "247:      ),",
          "248:     ),",
          "250:   ),",
          "251:  )",
          "252: }",
          "254: func modelActionItems(m *gallery.GalleryModel, processTracker ProcessTracker, galleryService *services.GalleryService) elem.Node {",
          "255:  galleryID := fmt.Sprintf(\"%s@%s\", m.Gallery.Name, m.Name)",
          "256:  currentlyProcessing := processTracker.Exists(galleryID)",
          "257:  jobID := \"\"",
          "258:  isDeletionOp := false",
          "259:  if currentlyProcessing {",
          "260:   status := galleryService.GetStatus(galleryID)",
          "261:   if status != nil && status.Deletion {",
          "262:    isDeletionOp = true",
          "264:   jobID = processTracker.Get(galleryID)",
          "267:  }",
          "269:  nodes := []elem.Node{",
          "270:   cardSpan(\"Repository: \"+m.Gallery.Name, \"fa-brands fa-git-alt\"),",
          "271:  }",
          "273:  if m.License != \"\" {",
          "275:    cardSpan(\"License: \"+m.License, \"fas fa-book\"),",
          "277:  }",
          "279:   tagsNodes := []elem.Node{}",
          "281:    for _, tag := range m.Tags {",
          "282:     tagsNodes = append(tagsNodes,",
          "283:      searchableElement(tag, \"fas fa-tag\"),",
          "284:     )",
          "285:    }",
          "288:     nodes = append(nodes,",
          "289:      elem.Div(",
          "290:       attrs.Props{",
          "291:        \"class\": \"flex flex-row flex-wrap content-center\",",
          "292:       },",
          "293:       tagsNodes...,",
          "294:      ),",
          "295:     )",
          "297:     for i, url := range m.URLs {",
          "298:      nodes = append(nodes,",
          "299:       buttonLink(\"Link #\"+fmt.Sprintf(\"%d\", i+1), url),",
          "300:      )",
          "301:     }",
          "304:  progressMessage := \"Installation\"",
          "305:  if isDeletionOp {",
          "306:   progressMessage = \"Deletion\"",
          "307:  }",
          "309:  return elem.Div(",
          "310:   attrs.Props{",
          "311:    \"class\": \"px-6 pt-4 pb-2\",",
          "312:   },",
          "313:   elem.P(",
          "315:     \"class\": \"mb-4 text-base\",",
          "317:    nodes...,",
          "318:   ),",
          "319:   elem.Div(",
          "320:    attrs.Props{",
          "321:     \"id\":    \"action-div-\" + dropBadChars(galleryID),",
          "322:     \"class\": \"flow-root\", // To order buttons left and right",
          "323:    },",
          "324:    infoButton(m),",
          "327:      \"class\": \"float-right\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "470:       elem.Node(elem.Div(",
          "471:        attrs.Props{},",
          "472:        reInstallButton(m.ID()),",
          "474:       )),",
          "475:       installButton(m.ID()),",
          "476:      ),",
          "477:     ),",
          "478:    ),",
          "482:  for _, m := range models {",
          "483:   elems := []elem.Node{}",
          "",
          "[Removed Lines]",
          "473:        deleteButton(m.ID(), m.Name),",
          "479:   )",
          "480:  }",
          "",
          "[Added Lines]",
          "338:        deleteButton(m.ID()),",
          "344:   ),",
          "345:  )",
          "346: }",
          "348: func ListModels(models []*gallery.GalleryModel, processTracker ProcessTracker, galleryService *services.GalleryService) string {",
          "349:  modelsElements := []elem.Node{}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "521:    ))",
          "522:   }",
          "525:   modelsElements = append(modelsElements,",
          "526:    elem.Div(",
          "527:     attrs.Props{",
          "",
          "[Removed Lines]",
          "524:   elems = append(elems, descriptionDiv(m), actionDiv(m))",
          "",
          "[Added Lines]",
          "393:   elems = append(elems,",
          "394:    modelDescription(m),",
          "395:    modelActionItems(m, processTracker, galleryService),",
          "396:   )",
          "",
          "---------------"
        ],
        "core/http/elements/p2p.go||core/http/elements/p2p.go": [
          "File: core/http/elements/p2p.go -> core/http/elements/p2p.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package elements",
          "3: import (",
          "4:  \"fmt\"",
          "6:  \"github.com/chasefleming/elem-go\"",
          "7:  \"github.com/chasefleming/elem-go/attrs\"",
          "8:  \"github.com/microcosm-cc/bluemonday\"",
          "9:  \"github.com/mudler/LocalAI/core/p2p\"",
          "10: )",
          "12: func renderElements(n []elem.Node) string {",
          "13:  render := \"\"",
          "14:  for _, r := range n {",
          "15:   render += r.Render()",
          "16:  }",
          "17:  return render",
          "18: }",
          "20: func P2PNodeStats(nodes []p2p.NodeData) string {",
          "22:     <div class=\"bg-gray-800 p-6 rounded-lg shadow-lg text-left\">",
          "23:                         <p class=\"text-xl font-semibold text-gray-200\">Total Workers Detected: {{ len .Nodes }}</p>",
          "24:                         {{ $online := 0 }}",
          "25:                         {{ range .Nodes }}",
          "26:                             {{ if .IsOnline }}",
          "27:                                 {{ $online = add $online 1 }}",
          "28:                             {{ end }}",
          "29:                         {{ end }}",
          "30:                         <p class=\"text-xl font-semibold text-gray-200\">Total Online Workers: {{$online}}</p>",
          "31:                     </div>",
          "34:  online := 0",
          "35:  for _, n := range nodes {",
          "36:   if n.IsOnline() {",
          "37:    online++",
          "38:   }",
          "39:  }",
          "41:  class := \"text-green-500\"",
          "42:  if online == 0 {",
          "43:   class = \"text-red-500\"",
          "44:  }",
          "46:     <i class=\"fas fa-circle animate-pulse text-green-500 ml-2 mr-1\"></i>",
          "48:  circle := elem.I(attrs.Props{",
          "49:   \"class\": \"fas fa-circle animate-pulse \" + class + \" ml-2 mr-1\",",
          "50:  })",
          "51:  nodesElements := []elem.Node{",
          "52:   elem.Span(",
          "53:    attrs.Props{",
          "54:     \"class\": class,",
          "55:    },",
          "56:    circle,",
          "57:    elem.Text(fmt.Sprintf(\"%d\", online)),",
          "58:   ),",
          "59:   elem.Span(",
          "60:    attrs.Props{",
          "61:     \"class\": \"text-gray-200\",",
          "62:    },",
          "63:    elem.Text(fmt.Sprintf(\"/%d\", len(nodes))),",
          "64:   ),",
          "65:  }",
          "67:  return renderElements(nodesElements)",
          "68: }",
          "70: func P2PNodeBoxes(nodes []p2p.NodeData) string {",
          "72:    <div class=\"bg-gray-800 p-4 rounded-lg shadow-lg text-left\">",
          "73:    <div class=\"flex items-center mb-2\">",
          "74:     <i class=\"fas fa-desktop text-gray-400 mr-2\"></i>",
          "75:     <span class=\"text-gray-200 font-semibold\">{{.ID}}</span>",
          "76:    </div>",
          "77:    <p class=\"text-sm text-gray-400 mt-2 flex items-center\">",
          "78:     Status:",
          "79:     <i class=\"fas fa-circle {{ if .IsOnline }}text-green-500{{ else }}text-red-500{{ end }} ml-2 mr-1\"></i>",
          "80:     <span class=\"{{ if .IsOnline }}text-green-400{{ else }}text-red-400{{ end }}\">",
          "81:      {{ if .IsOnline }}Online{{ else }}Offline{{ end }}",
          "82:     </span>",
          "83:    </p>",
          "84:   </div>",
          "87:  nodesElements := []elem.Node{}",
          "89:  for _, n := range nodes {",
          "91:   nodesElements = append(nodesElements,",
          "92:    elem.Div(",
          "93:     attrs.Props{",
          "94:      \"class\": \"bg-gray-700 p-6 rounded-lg shadow-lg text-left\",",
          "95:     },",
          "96:     elem.P(",
          "97:      attrs.Props{",
          "98:       \"class\": \"text-sm text-gray-400 mt-2 flex\",",
          "99:      },",
          "100:      elem.I(",
          "101:       attrs.Props{",
          "102:        \"class\": \"fas fa-desktop text-gray-400 mr-2\",",
          "103:       },",
          "104:      ),",
          "105:      elem.Text(\"Name: \"),",
          "106:      elem.Span(",
          "107:       attrs.Props{",
          "108:        \"class\": \"text-gray-200 font-semibold ml-2 mr-1\",",
          "109:       },",
          "110:       elem.Text(bluemonday.StrictPolicy().Sanitize(n.ID)),",
          "111:      ),",
          "112:      elem.Text(\"Status: \"),",
          "113:      elem.If(",
          "114:       n.IsOnline(),",
          "115:       elem.I(",
          "116:        attrs.Props{",
          "117:         \"class\": \"fas fa-circle animate-pulse text-green-500 ml-2 mr-1\",",
          "118:        },",
          "119:       ),",
          "120:       elem.I(",
          "121:        attrs.Props{",
          "122:         \"class\": \"fas fa-circle animate-pulse text-red-500 ml-2 mr-1\",",
          "123:        },",
          "124:       ),",
          "125:      ),",
          "126:      elem.If(",
          "127:       n.IsOnline(),",
          "128:       elem.Span(",
          "129:        attrs.Props{",
          "130:         \"class\": \"text-green-400\",",
          "131:        },",
          "133:        elem.Text(\"Online\"),",
          "134:       ),",
          "135:       elem.Span(",
          "136:        attrs.Props{",
          "137:         \"class\": \"text-red-400\",",
          "138:        },",
          "139:        elem.Text(\"Offline\"),",
          "140:       ),",
          "141:      ),",
          "142:     ),",
          "143:    ))",
          "144:  }",
          "146:  return renderElements(nodesElements)",
          "147: }",
          "",
          "---------------"
        ],
        "core/http/elements/progressbar.go||core/http/elements/progressbar.go": [
          "File: core/http/elements/progressbar.go -> core/http/elements/progressbar.go",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package elements",
          "3: import (",
          "4:  \"github.com/chasefleming/elem-go\"",
          "5:  \"github.com/chasefleming/elem-go/attrs\"",
          "6:  \"github.com/microcosm-cc/bluemonday\"",
          "7: )",
          "9: func DoneProgress(galleryID, text string, showDelete bool) string {",
          "10:  return elem.Div(",
          "11:   attrs.Props{",
          "12:    \"id\": \"action-div-\" + dropBadChars(galleryID),",
          "13:   },",
          "14:   elem.H3(",
          "15:    attrs.Props{",
          "16:     \"role\":      \"status\",",
          "17:     \"id\":        \"pblabel\",",
          "18:     \"tabindex\":  \"-1\",",
          "19:     \"autofocus\": \"\",",
          "20:    },",
          "21:    elem.Text(bluemonday.StrictPolicy().Sanitize(text)),",
          "22:   ),",
          "23:   elem.If(showDelete, deleteButton(galleryID), reInstallButton(galleryID)),",
          "24:  ).Render()",
          "25: }",
          "27: func ErrorProgress(err, galleryName string) string {",
          "28:  return elem.Div(",
          "29:   attrs.Props{},",
          "30:   elem.H3(",
          "31:    attrs.Props{",
          "32:     \"role\":      \"status\",",
          "33:     \"id\":        \"pblabel\",",
          "34:     \"tabindex\":  \"-1\",",
          "35:     \"autofocus\": \"\",",
          "36:    },",
          "37:    elem.Text(\"Error \"+bluemonday.StrictPolicy().Sanitize(err)),",
          "38:   ),",
          "39:   installButton(galleryName),",
          "40:  ).Render()",
          "41: }",
          "43: func ProgressBar(progress string) string {",
          "44:  return elem.Div(attrs.Props{",
          "45:   \"class\":           \"progress\",",
          "46:   \"role\":            \"progressbar\",",
          "47:   \"aria-valuemin\":   \"0\",",
          "48:   \"aria-valuemax\":   \"100\",",
          "49:   \"aria-valuenow\":   \"0\",",
          "50:   \"aria-labelledby\": \"pblabel\",",
          "51:  },",
          "52:   elem.Div(attrs.Props{",
          "53:    \"id\":    \"pb\",",
          "54:    \"class\": \"progress-bar\",",
          "55:    \"style\": \"width:\" + progress + \"%\",",
          "56:   }),",
          "57:  ).Render()",
          "58: }",
          "60: func StartProgressBar(uid, progress, text string) string {",
          "61:  if progress == \"\" {",
          "62:   progress = \"0\"",
          "63:  }",
          "64:  return elem.Div(",
          "65:   attrs.Props{",
          "66:    \"hx-trigger\": \"done\",",
          "67:    \"hx-get\":     \"/browse/job/\" + uid,",
          "68:    \"hx-swap\":    \"outerHTML\",",
          "69:    \"hx-target\":  \"this\",",
          "70:   },",
          "71:   elem.H3(",
          "72:    attrs.Props{",
          "73:     \"role\":      \"status\",",
          "74:     \"id\":        \"pblabel\",",
          "75:     \"tabindex\":  \"-1\",",
          "76:     \"autofocus\": \"\",",
          "77:    },",
          "78:    elem.Text(bluemonday.StrictPolicy().Sanitize(text)), //Perhaps overly defensive",
          "79:    elem.Div(attrs.Props{",
          "80:     \"hx-get\":     \"/browse/job/progress/\" + uid,",
          "81:     \"hx-trigger\": \"every 600ms\",",
          "82:     \"hx-target\":  \"this\",",
          "83:     \"hx-swap\":    \"innerHTML\",",
          "84:    },",
          "85:     elem.Raw(ProgressBar(progress)),",
          "86:    ),",
          "87:   ),",
          "88:  ).Render()",
          "89: }",
          "",
          "---------------"
        ],
        "core/http/static/assets/flowbite.min.js||core/http/static/assets/flowbite.min.js": [
          "File: core/http/static/assets/flowbite.min.js -> core/http/static/assets/flowbite.min.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: !function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(\"Flowbite\",[],e):\"object\"==typeof exports?exports.Flowbite=e():t.Flowbite=e()}(self,(function(){return function(){\"use strict\";var t={647:function(t,e,i){i.r(e)},853:function(t,e,i){i.r(e),i.d(e,{afterMain:function(){return w},afterRead:function(){return y},afterWrite:function(){return O},applyStyles:function(){return P},arrow:function(){return Q},auto:function(){return a},basePlacements:function(){return c},beforeMain:function(){return b},beforeRead:function(){return _},beforeWrite:function(){return L},bottom:function(){return o},clippingParents:function(){return u},computeStyles:function(){return it},createPopper:function(){return Pt},createPopperBase:function(){return Ht},createPopperLite:function(){return St},detectOverflow:function(){return mt},end:function(){return l},eventListeners:function(){return ot},flip:function(){return yt},hide:function(){return wt},left:function(){return s},main:function(){return E},modifierPhases:function(){return k},offset:function(){return Lt},placements:function(){return g},popper:function(){return h},popperGenerator:function(){return Tt},popperOffsets:function(){return It},preventOverflow:function(){return Ot},read:function(){return m},reference:function(){return f},right:function(){return r},start:function(){return d},top:function(){return n},variationPlacements:function(){return v},viewport:function(){return p},write:function(){return I}});var n=\"top\",o=\"bottom\",r=\"right\",s=\"left\",a=\"auto\",c=[n,o,r,s],d=\"start\",l=\"end\",u=\"clippingParents\",p=\"viewport\",h=\"popper\",f=\"reference\",v=c.reduce((function(t,e){return t.concat([e+\"-\"+d,e+\"-\"+l])}),[]),g=[].concat(c,[a]).reduce((function(t,e){return t.concat([e,e+\"-\"+d,e+\"-\"+l])}),[]),_=\"beforeRead\",m=\"read\",y=\"afterRead\",b=\"beforeMain\",E=\"main\",w=\"afterMain\",L=\"beforeWrite\",I=\"write\",O=\"afterWrite\",k=[_,m,y,b,E,w,L,I,O];function x(t){return t?(t.nodeName||\"\").toLowerCase():null}function A(t){if(null==t)return window;if(\"[object Window]\"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function C(t){return t instanceof A(t).Element||t instanceof Element}function T(t){return t instanceof A(t).HTMLElement||t instanceof HTMLElement}function H(t){return\"undefined\"!=typeof ShadowRoot&&(t instanceof A(t).ShadowRoot||t instanceof ShadowRoot)}var P={name:\"applyStyles\",enabled:!0,phase:\"write\",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var i=e.styles[t]||{},n=e.attributes[t]||{},o=e.elements[t];T(o)&&x(o)&&(Object.assign(o.style,i),Object.keys(n).forEach((function(t){var e=n[t];!1===e?o.removeAttribute(t):o.setAttribute(t,!0===e?\"\":e)})))}))},effect:function(t){var e=t.state,i={popper:{position:e.options.strategy,left:\"0\",top:\"0\",margin:\"0\"},arrow:{position:\"absolute\"},reference:{}};return Object.assign(e.elements.popper.style,i.popper),e.styles=i,e.elements.arrow&&Object.assign(e.elements.arrow.style,i.arrow),function(){Object.keys(e.elements).forEach((function(t){var n=e.elements[t],o=e.attributes[t]||{},r=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:i[t]).reduce((function(t,e){return t[e]=\"\",t}),{});T(n)&&x(n)&&(Object.assign(n.style,r),Object.keys(o).forEach((function(t){n.removeAttribute(t)})))}))}},requires:[\"computeStyles\"]};function S(t){return t.split(\"-\")[0]}var j=Math.max,D=Math.min,z=Math.round;function M(){var t=navigator.userAgentData;return null!=t&&t.brands?t.brands.map((function(t){return t.brand+\"/\"+t.version})).join(\" \"):navigator.userAgent}function q(){return!/^((?!chrome|android).)*safari/i.test(M())}function V(t,e,i){void 0===e&&(e=!1),void 0===i&&(i=!1);var n=t.getBoundingClientRect(),o=1,r=1;e&&T(t)&&(o=t.offsetWidth>0&&z(n.width)/t.offsetWidth||1,r=t.offsetHeight>0&&z(n.height)/t.offsetHeight||1);var s=(C(t)?A(t):window).visualViewport,a=!q()&&i,c=(n.left+(a&&s?s.offsetLeft:0))/o,d=(n.top+(a&&s?s.offsetTop:0))/r,l=n.width/o,u=n.height/r;return{width:l,height:u,top:d,right:c+l,bottom:d+u,left:c,x:c,y:d}}function B(t){var e=V(t),i=t.offsetWidth,n=t.offsetHeight;return Math.abs(e.width-i)<=1&&(i=e.width),Math.abs(e.height-n)<=1&&(n=e.height),{x:t.offsetLeft,y:t.offsetTop,width:i,height:n}}function R(t,e){var i=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(i&&H(i)){var n=e;do{if(n&&t.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function W(t){return A(t).getComputedStyle(t)}function F(t){return[\"table\",\"td\",\"th\"].indexOf(x(t))>=0}function K(t){return((C(t)?t.ownerDocument:t.document)||window.document).documentElement}function N(t){return\"html\"===x(t)?t:t.assignedSlot||t.parentNode||(H(t)?t.host:null)||K(t)}function U(t){return T(t)&&\"fixed\"!==W(t).position?t.offsetParent:null}function X(t){for(var e=A(t),i=U(t);i&&F(i)&&\"static\"===W(i).position;)i=U(i);return i&&(\"html\"===x(i)||\"body\"===x(i)&&\"static\"===W(i).position)?e:i||function(t){var e=/firefox/i.test(M());if(/Trident/i.test(M())&&T(t)&&\"fixed\"===W(t).position)return null;var i=N(t);for(H(i)&&(i=i.host);T(i)&&[\"html\",\"body\"].indexOf(x(i))<0;){var n=W(i);if(\"none\"!==n.transform||\"none\"!==n.perspective||\"paint\"===n.contain||-1!==[\"transform\",\"perspective\"].indexOf(n.willChange)||e&&\"filter\"===n.willChange||e&&n.filter&&\"none\"!==n.filter)return i;i=i.parentNode}return null}(t)||e}function Y(t){return[\"top\",\"bottom\"].indexOf(t)>=0?\"x\":\"y\"}function G(t,e,i){return j(t,D(e,i))}function $(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function J(t,e){return e.reduce((function(e,i){return e[i]=t,e}),{})}var Q={name:\"arrow\",enabled:!0,phase:\"main\",fn:function(t){var e,i=t.state,a=t.name,d=t.options,l=i.elements.arrow,u=i.modifiersData.popperOffsets,p=S(i.placement),h=Y(p),f=[s,r].indexOf(p)>=0?\"height\":\"width\";if(l&&u){var v=function(t,e){return $(\"number\"!=typeof(t=\"function\"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:J(t,c))}(d.padding,i),g=B(l),_=\"y\"===h?n:s,m=\"y\"===h?o:r,y=i.rects.reference[f]+i.rects.reference[h]-u[h]-i.rects.popper[f],b=u[h]-i.rects.reference[h],E=X(l),w=E?\"y\"===h?E.clientHeight||0:E.clientWidth||0:0,L=y/2-b/2,I=v[_],O=w-g[f]-v[m],k=w/2-g[f]/2+L,x=G(I,k,O),A=h;i.modifiersData[a]=((e={})[A]=x,e.centerOffset=x-k,e)}},effect:function(t){var e=t.state,i=t.options.element,n=void 0===i?\"[data-popper-arrow]\":i;null!=n&&(\"string\"!=typeof n||(n=e.elements.popper.querySelector(n)))&&R(e.elements.popper,n)&&(e.elements.arrow=n)},requires:[\"popperOffsets\"],requiresIfExists:[\"preventOverflow\"]};function Z(t){return t.split(\"-\")[1]}var tt={top:\"auto\",right:\"auto\",bottom:\"auto\",left:\"auto\"};function et(t){var e,i=t.popper,a=t.popperRect,c=t.placement,d=t.variation,u=t.offsets,p=t.position,h=t.gpuAcceleration,f=t.adaptive,v=t.roundOffsets,g=t.isFixed,_=u.x,m=void 0===_?0:_,y=u.y,b=void 0===y?0:y,E=\"function\"==typeof v?v({x:m,y:b}):{x:m,y:b};m=E.x,b=E.y;var w=u.hasOwnProperty(\"x\"),L=u.hasOwnProperty(\"y\"),I=s,O=n,k=window;if(f){var x=X(i),C=\"clientHeight\",T=\"clientWidth\";if(x===A(i)&&\"static\"!==W(x=K(i)).position&&\"absolute\"===p&&(C=\"scrollHeight\",T=\"scrollWidth\"),c===n||(c===s||c===r)&&d===l)O=o,b-=(g&&x===k&&k.visualViewport?k.visualViewport.height:x[C])-a.height,b*=h?1:-1;if(c===s||(c===n||c===o)&&d===l)I=r,m-=(g&&x===k&&k.visualViewport?k.visualViewport.width:x[T])-a.width,m*=h?1:-1}var H,P=Object.assign({position:p},f&&tt),S=!0===v?function(t){var e=t.x,i=t.y,n=window.devicePixelRatio||1;return{x:z(e*n)/n||0,y:z(i*n)/n||0}}({x:m,y:b}):{x:m,y:b};return m=S.x,b=S.y,h?Object.assign({},P,((H={})[O]=L?\"0\":\"\",H[I]=w?\"0\":\"\",H.transform=(k.devicePixelRatio||1)<=1?\"translate(\"+m+\"px, \"+b+\"px)\":\"translate3d(\"+m+\"px, \"+b+\"px, 0)\",H)):Object.assign({},P,((e={})[O]=L?b+\"px\":\"\",e[I]=w?m+\"px\":\"\",e.transform=\"\",e))}var it={name:\"computeStyles\",enabled:!0,phase:\"beforeWrite\",fn:function(t){var e=t.state,i=t.options,n=i.gpuAcceleration,o=void 0===n||n,r=i.adaptive,s=void 0===r||r,a=i.roundOffsets,c=void 0===a||a,d={placement:S(e.placement),variation:Z(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:o,isFixed:\"fixed\"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,et(Object.assign({},d,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:s,roundOffsets:c})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,et(Object.assign({},d,{offsets:e.modifiersData.arrow,position:\"absolute\",adaptive:!1,roundOffsets:c})))),e.attributes.popper=Object.assign({},e.attributes.popper,{\"data-popper-placement\":e.placement})},data:{}},nt={passive:!0};var ot={name:\"eventListeners\",enabled:!0,phase:\"write\",fn:function(){},effect:function(t){var e=t.state,i=t.instance,n=t.options,o=n.scroll,r=void 0===o||o,s=n.resize,a=void 0===s||s,c=A(e.elements.popper),d=[].concat(e.scrollParents.reference,e.scrollParents.popper);return r&&d.forEach((function(t){t.addEventListener(\"scroll\",i.update,nt)})),a&&c.addEventListener(\"resize\",i.update,nt),function(){r&&d.forEach((function(t){t.removeEventListener(\"scroll\",i.update,nt)})),a&&c.removeEventListener(\"resize\",i.update,nt)}},data:{}},rt={left:\"right\",right:\"left\",bottom:\"top\",top:\"bottom\"};function st(t){return t.replace(/left|right|bottom|top/g,(function(t){return rt[t]}))}var at={start:\"end\",end:\"start\"};function ct(t){return t.replace(/start|end/g,(function(t){return at[t]}))}function dt(t){var e=A(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function lt(t){return V(K(t)).left+dt(t).scrollLeft}function ut(t){var e=W(t),i=e.overflow,n=e.overflowX,o=e.overflowY;return/auto|scroll|overlay|hidden/.test(i+o+n)}function pt(t){return[\"html\",\"body\",\"#document\"].indexOf(x(t))>=0?t.ownerDocument.body:T(t)&&ut(t)?t:pt(N(t))}function ht(t,e){var i;void 0===e&&(e=[]);var n=pt(t),o=n===(null==(i=t.ownerDocument)?void 0:i.body),r=A(n),s=o?[r].concat(r.visualViewport||[],ut(n)?n:[]):n,a=e.concat(s);return o?a:a.concat(ht(N(s)))}function ft(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function vt(t,e,i){return e===p?ft(function(t,e){var i=A(t),n=K(t),o=i.visualViewport,r=n.clientWidth,s=n.clientHeight,a=0,c=0;if(o){r=o.width,s=o.height;var d=q();(d||!d&&\"fixed\"===e)&&(a=o.offsetLeft,c=o.offsetTop)}return{width:r,height:s,x:a+lt(t),y:c}}(t,i)):C(e)?function(t,e){var i=V(t,!1,\"fixed\"===e);return i.top=i.top+t.clientTop,i.left=i.left+t.clientLeft,i.bottom=i.top+t.clientHeight,i.right=i.left+t.clientWidth,i.width=t.clientWidth,i.height=t.clientHeight,i.x=i.left,i.y=i.top,i}(e,i):ft(function(t){var e,i=K(t),n=dt(t),o=null==(e=t.ownerDocument)?void 0:e.body,r=j(i.scrollWidth,i.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),s=j(i.scrollHeight,i.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),a=-n.scrollLeft+lt(t),c=-n.scrollTop;return\"rtl\"===W(o||i).direction&&(a+=j(i.clientWidth,o?o.clientWidth:0)-r),{width:r,height:s,x:a,y:c}}(K(t)))}function gt(t,e,i,n){var o=\"clippingParents\"===e?function(t){var e=ht(N(t)),i=[\"absolute\",\"fixed\"].indexOf(W(t).position)>=0&&T(t)?X(t):t;return C(i)?e.filter((function(t){return C(t)&&R(t,i)&&\"body\"!==x(t)})):[]}(t):[].concat(e),r=[].concat(o,[i]),s=r[0],a=r.reduce((function(e,i){var o=vt(t,i,n);return e.top=j(o.top,e.top),e.right=D(o.right,e.right),e.bottom=D(o.bottom,e.bottom),e.left=j(o.left,e.left),e}),vt(t,s,n));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}function _t(t){var e,i=t.reference,a=t.element,c=t.placement,u=c?S(c):null,p=c?Z(c):null,h=i.x+i.width/2-a.width/2,f=i.y+i.height/2-a.height/2;switch(u){case n:e={x:h,y:i.y-a.height};break;case o:e={x:h,y:i.y+i.height};break;case r:e={x:i.x+i.width,y:f};break;case s:e={x:i.x-a.width,y:f};break;default:e={x:i.x,y:i.y}}var v=u?Y(u):null;if(null!=v){var g=\"y\"===v?\"height\":\"width\";switch(p){case d:e[v]=e[v]-(i[g]/2-a[g]/2);break;case l:e[v]=e[v]+(i[g]/2-a[g]/2)}}return e}function mt(t,e){void 0===e&&(e={});var i=e,s=i.placement,a=void 0===s?t.placement:s,d=i.strategy,l=void 0===d?t.strategy:d,v=i.boundary,g=void 0===v?u:v,_=i.rootBoundary,m=void 0===_?p:_,y=i.elementContext,b=void 0===y?h:y,E=i.altBoundary,w=void 0!==E&&E,L=i.padding,I=void 0===L?0:L,O=$(\"number\"!=typeof I?I:J(I,c)),k=b===h?f:h,x=t.rects.popper,A=t.elements[w?k:b],T=gt(C(A)?A:A.contextElement||K(t.elements.popper),g,m,l),H=V(t.elements.reference),P=_t({reference:H,element:x,strategy:\"absolute\",placement:a}),S=ft(Object.assign({},x,P)),j=b===h?S:H,D={top:T.top-j.top+O.top,bottom:j.bottom-T.bottom+O.bottom,left:T.left-j.left+O.left,right:j.right-T.right+O.right},z=t.modifiersData.offset;if(b===h&&z){var M=z[a];Object.keys(D).forEach((function(t){var e=[r,o].indexOf(t)>=0?1:-1,i=[n,o].indexOf(t)>=0?\"y\":\"x\";D[t]+=M[i]*e}))}return D}var yt={name:\"flip\",enabled:!0,phase:\"main\",fn:function(t){var e=t.state,i=t.options,l=t.name;if(!e.modifiersData[l]._skip){for(var u=i.mainAxis,p=void 0===u||u,h=i.altAxis,f=void 0===h||h,_=i.fallbackPlacements,m=i.padding,y=i.boundary,b=i.rootBoundary,E=i.altBoundary,w=i.flipVariations,L=void 0===w||w,I=i.allowedAutoPlacements,O=e.options.placement,k=S(O),x=_||(k===O||!L?[st(O)]:function(t){if(S(t)===a)return[];var e=st(t);return[ct(t),e,ct(e)]}(O)),A=[O].concat(x).reduce((function(t,i){return t.concat(S(i)===a?function(t,e){void 0===e&&(e={});var i=e,n=i.placement,o=i.boundary,r=i.rootBoundary,s=i.padding,a=i.flipVariations,d=i.allowedAutoPlacements,l=void 0===d?g:d,u=Z(n),p=u?a?v:v.filter((function(t){return Z(t)===u})):c,h=p.filter((function(t){return l.indexOf(t)>=0}));0===h.length&&(h=p);var f=h.reduce((function(e,i){return e[i]=mt(t,{placement:i,boundary:o,rootBoundary:r,padding:s})[S(i)],e}),{});return Object.keys(f).sort((function(t,e){return f[t]-f[e]}))}(e,{placement:i,boundary:y,rootBoundary:b,padding:m,flipVariations:L,allowedAutoPlacements:I}):i)}),[]),C=e.rects.reference,T=e.rects.popper,H=new Map,P=!0,j=A[0],D=0;D<A.length;D++){var z=A[D],M=S(z),q=Z(z)===d,V=[n,o].indexOf(M)>=0,B=V?\"width\":\"height\",R=mt(e,{placement:z,boundary:y,rootBoundary:b,altBoundary:E,padding:m}),W=V?q?r:s:q?o:n;C[B]>T[B]&&(W=st(W));var F=st(W),K=[];if(p&&K.push(R[M]<=0),f&&K.push(R[W]<=0,R[F]<=0),K.every((function(t){return t}))){j=z,P=!1;break}H.set(z,K)}if(P)for(var N=function(t){var e=A.find((function(e){var i=H.get(e);if(i)return i.slice(0,t).every((function(t){return t}))}));if(e)return j=e,\"break\"},U=L?3:1;U>0;U--){if(\"break\"===N(U))break}e.placement!==j&&(e.modifiersData[l]._skip=!0,e.placement=j,e.reset=!0)}},requiresIfExists:[\"offset\"],data:{_skip:!1}};function bt(t,e,i){return void 0===i&&(i={x:0,y:0}),{top:t.top-e.height-i.y,right:t.right-e.width+i.x,bottom:t.bottom-e.height+i.y,left:t.left-e.width-i.x}}function Et(t){return[n,r,o,s].some((function(e){return t[e]>=0}))}var wt={name:\"hide\",enabled:!0,phase:\"main\",requiresIfExists:[\"preventOverflow\"],fn:function(t){var e=t.state,i=t.name,n=e.rects.reference,o=e.rects.popper,r=e.modifiersData.preventOverflow,s=mt(e,{elementContext:\"reference\"}),a=mt(e,{altBoundary:!0}),c=bt(s,n),d=bt(a,o,r),l=Et(c),u=Et(d);e.modifiersData[i]={referenceClippingOffsets:c,popperEscapeOffsets:d,isReferenceHidden:l,hasPopperEscaped:u},e.attributes.popper=Object.assign({},e.attributes.popper,{\"data-popper-reference-hidden\":l,\"data-popper-escaped\":u})}};var Lt={name:\"offset\",enabled:!0,phase:\"main\",requires:[\"popperOffsets\"],fn:function(t){var e=t.state,i=t.options,o=t.name,a=i.offset,c=void 0===a?[0,0]:a,d=g.reduce((function(t,i){return t[i]=function(t,e,i){var o=S(t),a=[s,n].indexOf(o)>=0?-1:1,c=\"function\"==typeof i?i(Object.assign({},e,{placement:t})):i,d=c[0],l=c[1];return d=d||0,l=(l||0)*a,[s,r].indexOf(o)>=0?{x:l,y:d}:{x:d,y:l}}(i,e.rects,c),t}),{}),l=d[e.placement],u=l.x,p=l.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=u,e.modifiersData.popperOffsets.y+=p),e.modifiersData[o]=d}};var It={name:\"popperOffsets\",enabled:!0,phase:\"read\",fn:function(t){var e=t.state,i=t.name;e.modifiersData[i]=_t({reference:e.rects.reference,element:e.rects.popper,strategy:\"absolute\",placement:e.placement})},data:{}};var Ot={name:\"preventOverflow\",enabled:!0,phase:\"main\",fn:function(t){var e=t.state,i=t.options,a=t.name,c=i.mainAxis,l=void 0===c||c,u=i.altAxis,p=void 0!==u&&u,h=i.boundary,f=i.rootBoundary,v=i.altBoundary,g=i.padding,_=i.tether,m=void 0===_||_,y=i.tetherOffset,b=void 0===y?0:y,E=mt(e,{boundary:h,rootBoundary:f,padding:g,altBoundary:v}),w=S(e.placement),L=Z(e.placement),I=!L,O=Y(w),k=\"x\"===O?\"y\":\"x\",x=e.modifiersData.popperOffsets,A=e.rects.reference,C=e.rects.popper,T=\"function\"==typeof b?b(Object.assign({},e.rects,{placement:e.placement})):b,H=\"number\"==typeof T?{mainAxis:T,altAxis:T}:Object.assign({mainAxis:0,altAxis:0},T),P=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,z={x:0,y:0};if(x){if(l){var M,q=\"y\"===O?n:s,V=\"y\"===O?o:r,R=\"y\"===O?\"height\":\"width\",W=x[O],F=W+E[q],K=W-E[V],N=m?-C[R]/2:0,U=L===d?A[R]:C[R],$=L===d?-C[R]:-A[R],J=e.elements.arrow,Q=m&&J?B(J):{width:0,height:0},tt=e.modifiersData[\"arrow#persistent\"]?e.modifiersData[\"arrow#persistent\"].padding:{top:0,right:0,bottom:0,left:0},et=tt[q],it=tt[V],nt=G(0,A[R],Q[R]),ot=I?A[R]/2-N-nt-et-H.mainAxis:U-nt-et-H.mainAxis,rt=I?-A[R]/2+N+nt+it+H.mainAxis:$+nt+it+H.mainAxis,st=e.elements.arrow&&X(e.elements.arrow),at=st?\"y\"===O?st.clientTop||0:st.clientLeft||0:0,ct=null!=(M=null==P?void 0:P[O])?M:0,dt=W+rt-ct,lt=G(m?D(F,W+ot-ct-at):F,W,m?j(K,dt):K);x[O]=lt,z[O]=lt-W}if(p){var ut,pt=\"x\"===O?n:s,ht=\"x\"===O?o:r,ft=x[k],vt=\"y\"===k?\"height\":\"width\",gt=ft+E[pt],_t=ft-E[ht],yt=-1!==[n,s].indexOf(w),bt=null!=(ut=null==P?void 0:P[k])?ut:0,Et=yt?gt:ft-A[vt]-C[vt]-bt+H.altAxis,wt=yt?ft+A[vt]+C[vt]-bt-H.altAxis:_t,Lt=m&&yt?function(t,e,i){var n=G(t,e,i);return n>i?i:n}(Et,ft,wt):G(m?Et:gt,ft,m?wt:_t);x[k]=Lt,z[k]=Lt-ft}e.modifiersData[a]=z}},requiresIfExists:[\"offset\"]};function kt(t,e,i){void 0===i&&(i=!1);var n,o,r=T(e),s=T(e)&&function(t){var e=t.getBoundingClientRect(),i=z(e.width)/t.offsetWidth||1,n=z(e.height)/t.offsetHeight||1;return 1!==i||1!==n}(e),a=K(e),c=V(t,s,i),d={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(r||!r&&!i)&&((\"body\"!==x(e)||ut(a))&&(d=(n=e)!==A(n)&&T(n)?{scrollLeft:(o=n).scrollLeft,scrollTop:o.scrollTop}:dt(n)),T(e)?((l=V(e,!0)).x+=e.clientLeft,l.y+=e.clientTop):a&&(l.x=lt(a))),{x:c.left+d.scrollLeft-l.x,y:c.top+d.scrollTop-l.y,width:c.width,height:c.height}}function xt(t){var e=new Map,i=new Set,n=[];function o(t){i.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!i.has(t)){var n=e.get(t);n&&o(n)}})),n.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){i.has(t.name)||o(t)})),n}var At={placement:\"bottom\",modifiers:[],strategy:\"absolute\"};function Ct(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];return!e.some((function(t){return!(t&&\"function\"==typeof t.getBoundingClientRect)}))}function Tt(t){void 0===t&&(t={});var e=t,i=e.defaultModifiers,n=void 0===i?[]:i,o=e.defaultOptions,r=void 0===o?At:o;return function(t,e,i){void 0===i&&(i=r);var o,s,a={placement:\"bottom\",orderedModifiers:[],options:Object.assign({},At,r),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},c=[],d=!1,l={state:a,setOptions:function(i){var o=\"function\"==typeof i?i(a.options):i;u(),a.options=Object.assign({},r,a.options,o),a.scrollParents={reference:C(t)?ht(t):t.contextElement?ht(t.contextElement):[],popper:ht(e)};var s=function(t){var e=xt(t);return k.reduce((function(t,i){return t.concat(e.filter((function(t){return t.phase===i})))}),[])}(function(t){var e=t.reduce((function(t,e){var i=t[e.name];return t[e.name]=i?Object.assign({},i,e,{options:Object.assign({},i.options,e.options),data:Object.assign({},i.data,e.data)}):e,t}),{});return Object.keys(e).map((function(t){return e[t]}))}([].concat(n,a.options.modifiers)));return a.orderedModifiers=s.filter((function(t){return t.enabled})),a.orderedModifiers.forEach((function(t){var e=t.name,i=t.options,n=void 0===i?{}:i,o=t.effect;if(\"function\"==typeof o){var r=o({state:a,name:e,instance:l,options:n}),s=function(){};c.push(r||s)}})),l.update()},forceUpdate:function(){if(!d){var t=a.elements,e=t.reference,i=t.popper;if(Ct(e,i)){a.rects={reference:kt(e,X(i),\"fixed\"===a.options.strategy),popper:B(i)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(t){return a.modifiersData[t.name]=Object.assign({},t.data)}));for(var n=0;n<a.orderedModifiers.length;n++)if(!0!==a.reset){var o=a.orderedModifiers[n],r=o.fn,s=o.options,c=void 0===s?{}:s,u=o.name;\"function\"==typeof r&&(a=r({state:a,options:c,name:u,instance:l})||a)}else a.reset=!1,n=-1}}},update:(o=function(){return new Promise((function(t){l.forceUpdate(),t(a)}))},function(){return s||(s=new Promise((function(t){Promise.resolve().then((function(){s=void 0,t(o())}))}))),s}),destroy:function(){u(),d=!0}};if(!Ct(t,e))return l;function u(){c.forEach((function(t){return t()})),c=[]}return l.setOptions(i).then((function(t){!d&&i.onFirstUpdate&&i.onFirstUpdate(t)})),l}}var Ht=Tt(),Pt=Tt({defaultModifiers:[ot,It,it,P,Lt,yt,Ot,Q,wt]}),St=Tt({defaultModifiers:[ot,It,it,P]})},902:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initAccordions=void 0;var o=i(423),r={alwaysOpen:!1,activeClasses:\"bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white\",inactiveClasses:\"text-gray-500 dark:text-gray-400\",onOpen:function(){},onClose:function(){},onToggle:function(){}},s={id:null,override:!0},a=function(){function t(t,e,i,a){void 0===t&&(t=null),void 0===e&&(e=[]),void 0===i&&(i=r),void 0===a&&(a=s),this._instanceId=a.id?a.id:t.id,this._accordionEl=t,this._items=e,this._options=n(n({},r),i),this._initialized=!1,this.init(),o.default.addInstance(\"Accordion\",this,this._instanceId,a.override)}return t.prototype.init=function(){var t=this;this._items.length&&!this._initialized&&(this._items.forEach((function(e){e.active&&t.open(e.id);var i=function(){t.toggle(e.id)};e.triggerEl.addEventListener(\"click\",i),e.clickHandler=i})),this._initialized=!0)},t.prototype.destroy=function(){this._items.length&&this._initialized&&(this._items.forEach((function(t){t.triggerEl.removeEventListener(\"click\",t.clickHandler),delete t.clickHandler})),this._initialized=!1)},t.prototype.removeInstance=function(){o.default.removeInstance(\"Accordion\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype.getItem=function(t){return this._items.filter((function(e){return e.id===t}))[0]},t.prototype.open=function(t){var e,i,n=this,o=this.getItem(t);this._options.alwaysOpen||this._items.map((function(t){var e,i;t!==o&&((e=t.triggerEl.classList).remove.apply(e,n._options.activeClasses.split(\" \")),(i=t.triggerEl.classList).add.apply(i,n._options.inactiveClasses.split(\" \")),t.targetEl.classList.add(\"hidden\"),t.triggerEl.setAttribute(\"aria-expanded\",\"false\"),t.active=!1,t.iconEl&&t.iconEl.classList.add(\"rotate-180\"))})),(e=o.triggerEl.classList).add.apply(e,this._options.activeClasses.split(\" \")),(i=o.triggerEl.classList).remove.apply(i,this._options.inactiveClasses.split(\" \")),o.triggerEl.setAttribute(\"aria-expanded\",\"true\"),o.targetEl.classList.remove(\"hidden\"),o.active=!0,o.iconEl&&o.iconEl.classList.remove(\"rotate-180\"),this._options.onOpen(this,o)},t.prototype.toggle=function(t){var e=this.getItem(t);e.active?this.close(t):this.open(t),this._options.onToggle(this,e)},t.prototype.close=function(t){var e,i,n=this.getItem(t);(e=n.triggerEl.classList).remove.apply(e,this._options.activeClasses.split(\" \")),(i=n.triggerEl.classList).add.apply(i,this._options.inactiveClasses.split(\" \")),n.targetEl.classList.add(\"hidden\"),n.triggerEl.setAttribute(\"aria-expanded\",\"false\"),n.active=!1,n.iconEl&&n.iconEl.classList.add(\"rotate-180\"),this._options.onClose(this,n)},t.prototype.updateOnOpen=function(t){this._options.onOpen=t},t.prototype.updateOnClose=function(t){this._options.onClose=t},t.prototype.updateOnToggle=function(t){this._options.onToggle=t},t}();function c(){document.querySelectorAll(\"[data-accordion]\").forEach((function(t){var e=t.getAttribute(\"data-accordion\"),i=t.getAttribute(\"data-active-classes\"),n=t.getAttribute(\"data-inactive-classes\"),o=[];t.querySelectorAll(\"[data-accordion-target]\").forEach((function(e){if(e.closest(\"[data-accordion]\")===t){var i={id:e.getAttribute(\"data-accordion-target\"),triggerEl:e,targetEl:document.querySelector(e.getAttribute(\"data-accordion-target\")),iconEl:e.querySelector(\"[data-accordion-icon]\"),active:\"true\"===e.getAttribute(\"aria-expanded\")};o.push(i)}})),new a(t,o,{alwaysOpen:\"open\"===e,activeClasses:i||r.activeClasses,inactiveClasses:n||r.inactiveClasses})}))}e.initAccordions=c,\"undefined\"!=typeof window&&(window.Accordion=a,window.initAccordions=c),e.default=a},33:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initCarousels=void 0;var o=i(423),r={defaultPosition:0,indicators:{items:[],activeClasses:\"bg-white dark:bg-gray-800\",inactiveClasses:\"bg-white/50 dark:bg-gray-800/50 hover:bg-white dark:hover:bg-gray-800\"},interval:3e3,onNext:function(){},onPrev:function(){},onChange:function(){}},s={id:null,override:!0},a=function(){function t(t,e,i,a){void 0===t&&(t=null),void 0===e&&(e=[]),void 0===i&&(i=r),void 0===a&&(a=s),this._instanceId=a.id?a.id:t.id,this._carouselEl=t,this._items=e,this._options=n(n(n({},r),i),{indicators:n(n({},r.indicators),i.indicators)}),this._activeItem=this.getItem(this._options.defaultPosition),this._indicators=this._options.indicators.items,this._intervalDuration=this._options.interval,this._intervalInstance=null,this._initialized=!1,this.init(),o.default.addInstance(\"Carousel\",this,this._instanceId,a.override)}return t.prototype.init=function(){var t=this;this._items.length&&!this._initialized&&(this._items.map((function(t){t.el.classList.add(\"absolute\",\"inset-0\",\"transition-transform\",\"transform\")})),this.getActiveItem()?this.slideTo(this.getActiveItem().position):this.slideTo(0),this._indicators.map((function(e,i){e.el.addEventListener(\"click\",(function(){t.slideTo(i)}))})),this._initialized=!0)},t.prototype.destroy=function(){this._initialized&&(this._initialized=!1)},t.prototype.removeInstance=function(){o.default.removeInstance(\"Carousel\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype.getItem=function(t){return this._items[t]},t.prototype.slideTo=function(t){var e=this._items[t],i={left:0===e.position?this._items[this._items.length-1]:this._items[e.position-1],middle:e,right:e.position===this._items.length-1?this._items[0]:this._items[e.position+1]};this._rotate(i),this._setActiveItem(e),this._intervalInstance&&(this.pause(),this.cycle()),this._options.onChange(this)},t.prototype.next=function(){var t=this.getActiveItem(),e=null;e=t.position===this._items.length-1?this._items[0]:this._items[t.position+1],this.slideTo(e.position),this._options.onNext(this)},t.prototype.prev=function(){var t=this.getActiveItem(),e=null;e=0===t.position?this._items[this._items.length-1]:this._items[t.position-1],this.slideTo(e.position),this._options.onPrev(this)},t.prototype._rotate=function(t){if(this._items.map((function(t){t.el.classList.add(\"hidden\")})),1===this._items.length)return t.middle.el.classList.remove(\"-translate-x-full\",\"translate-x-full\",\"translate-x-0\",\"hidden\",\"z-10\"),void t.middle.el.classList.add(\"translate-x-0\",\"z-20\");t.left.el.classList.remove(\"-translate-x-full\",\"translate-x-full\",\"translate-x-0\",\"hidden\",\"z-20\"),t.left.el.classList.add(\"-translate-x-full\",\"z-10\"),t.middle.el.classList.remove(\"-translate-x-full\",\"translate-x-full\",\"translate-x-0\",\"hidden\",\"z-10\"),t.middle.el.classList.add(\"translate-x-0\",\"z-30\"),t.right.el.classList.remove(\"-translate-x-full\",\"translate-x-full\",\"translate-x-0\",\"hidden\",\"z-30\"),t.right.el.classList.add(\"translate-x-full\",\"z-20\")},t.prototype.cycle=function(){var t=this;\"undefined\"!=typeof window&&(this._intervalInstance=window.setInterval((function(){t.next()}),this._intervalDuration))},t.prototype.pause=function(){clearInterval(this._intervalInstance)},t.prototype.getActiveItem=function(){return this._activeItem},t.prototype._setActiveItem=function(t){var e,i,n=this;this._activeItem=t;var o=t.position;this._indicators.length&&(this._indicators.map((function(t){var e,i;t.el.setAttribute(\"aria-current\",\"false\"),(e=t.el.classList).remove.apply(e,n._options.indicators.activeClasses.split(\" \")),(i=t.el.classList).add.apply(i,n._options.indicators.inactiveClasses.split(\" \"))})),(e=this._indicators[o].el.classList).add.apply(e,this._options.indicators.activeClasses.split(\" \")),(i=this._indicators[o].el.classList).remove.apply(i,this._options.indicators.inactiveClasses.split(\" \")),this._indicators[o].el.setAttribute(\"aria-current\",\"true\"))},t.prototype.updateOnNext=function(t){this._options.onNext=t},t.prototype.updateOnPrev=function(t){this._options.onPrev=t},t.prototype.updateOnChange=function(t){this._options.onChange=t},t}();function c(){document.querySelectorAll(\"[data-carousel]\").forEach((function(t){var e=t.getAttribute(\"data-carousel-interval\"),i=\"slide\"===t.getAttribute(\"data-carousel\"),n=[],o=0;t.querySelectorAll(\"[data-carousel-item]\").length&&Array.from(t.querySelectorAll(\"[data-carousel-item]\")).map((function(t,e){n.push({position:e,el:t}),\"active\"===t.getAttribute(\"data-carousel-item\")&&(o=e)}));var s=[];t.querySelectorAll(\"[data-carousel-slide-to]\").length&&Array.from(t.querySelectorAll(\"[data-carousel-slide-to]\")).map((function(t){s.push({position:parseInt(t.getAttribute(\"data-carousel-slide-to\")),el:t})}));var c=new a(t,n,{defaultPosition:o,indicators:{items:s},interval:e||r.interval});i&&c.cycle();var d=t.querySelector(\"[data-carousel-next]\"),l=t.querySelector(\"[data-carousel-prev]\");d&&d.addEventListener(\"click\",(function(){c.next()})),l&&l.addEventListener(\"click\",(function(){c.prev()}))}))}e.initCarousels=c,\"undefined\"!=typeof window&&(window.Carousel=a,window.initCarousels=c),e.default=a},673:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initCopyClipboards=void 0;var o=i(423),r={htmlEntities:!1,contentType:\"input\",onCopy:function(){}},s={id:null,override:!0},a=function(){function t(t,e,i,a){void 0===t&&(t=null),void 0===e&&(e=null),void 0===i&&(i=r),void 0===a&&(a=s),this._instanceId=a.id?a.id:e.id,this._triggerEl=t,this._targetEl=e,this._options=n(n({},r),i),this._initialized=!1,this.init(),o.default.addInstance(\"CopyClipboard\",this,this._instanceId,a.override)}return t.prototype.init=function(){var t=this;this._targetEl&&this._triggerEl&&!this._initialized&&(this._triggerElClickHandler=function(){t.copy()},this._triggerEl&&this._triggerEl.addEventListener(\"click\",this._triggerElClickHandler),this._initialized=!0)},t.prototype.destroy=function(){this._triggerEl&&this._targetEl&&this._initialized&&(this._triggerEl&&this._triggerEl.removeEventListener(\"click\",this._triggerElClickHandler),this._initialized=!1)},t.prototype.removeInstance=function(){o.default.removeInstance(\"CopyClipboard\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype.getTargetValue=function(){return\"input\"===this._options.contentType?this._targetEl.value:\"innerHTML\"===this._options.contentType?this._targetEl.innerHTML:\"textContent\"===this._options.contentType?this._targetEl.textContent.replace(/\\s+/g,\" \").trim():void 0},t.prototype.copy=function(){var t=this.getTargetValue();this._options.htmlEntities&&(t=this.decodeHTML(t));var e=document.createElement(\"textarea\");return e.value=t,document.body.appendChild(e),e.select(),document.execCommand(\"copy\"),document.body.removeChild(e),this._options.onCopy(this),t},t.prototype.decodeHTML=function(t){var e=document.createElement(\"textarea\");return e.innerHTML=t,e.textContent},t.prototype.updateOnCopyCallback=function(t){this._options.onCopy=t},t}();function c(){document.querySelectorAll(\"[data-copy-to-clipboard-target]\").forEach((function(t){var e=t.getAttribute(\"data-copy-to-clipboard-target\"),i=document.getElementById(e),n=t.getAttribute(\"data-copy-to-clipboard-content-type\"),s=t.getAttribute(\"data-copy-to-clipboard-html-entities\");i?o.default.instanceExists(\"CopyClipboard\",i.getAttribute(\"id\"))||new a(t,i,{htmlEntities:!(!s||\"true\"!==s)||r.htmlEntities,contentType:n||r.contentType}):console.error('The target element with id \"'.concat(e,'\" does not exist. Please check the data-copy-to-clipboard-target attribute.'))}))}e.initCopyClipboards=c,\"undefined\"!=typeof window&&(window.CopyClipboard=a,window.initClipboards=c),e.default=a},922:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initCollapses=void 0;var o=i(423),r={onCollapse:function(){},onExpand:function(){},onToggle:function(){}},s={id:null,override:!0},a=function(){function t(t,e,i,a){void 0===t&&(t=null),void 0===e&&(e=null),void 0===i&&(i=r),void 0===a&&(a=s),this._instanceId=a.id?a.id:t.id,this._targetEl=t,this._triggerEl=e,this._options=n(n({},r),i),this._visible=!1,this._initialized=!1,this.init(),o.default.addInstance(\"Collapse\",this,this._instanceId,a.override)}return t.prototype.init=function(){var t=this;this._triggerEl&&this._targetEl&&!this._initialized&&(this._triggerEl.hasAttribute(\"aria-expanded\")?this._visible=\"true\"===this._triggerEl.getAttribute(\"aria-expanded\"):this._visible=!this._targetEl.classList.contains(\"hidden\"),this._clickHandler=function(){t.toggle()},this._triggerEl.addEventListener(\"click\",this._clickHandler),this._initialized=!0)},t.prototype.destroy=function(){this._triggerEl&&this._initialized&&(this._triggerEl.removeEventListener(\"click\",this._clickHandler),this._initialized=!1)},t.prototype.removeInstance=function(){o.default.removeInstance(\"Collapse\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype.collapse=function(){this._targetEl.classList.add(\"hidden\"),this._triggerEl&&this._triggerEl.setAttribute(\"aria-expanded\",\"false\"),this._visible=!1,this._options.onCollapse(this)},t.prototype.expand=function(){this._targetEl.classList.remove(\"hidden\"),this._triggerEl&&this._triggerEl.setAttribute(\"aria-expanded\",\"true\"),this._visible=!0,this._options.onExpand(this)},t.prototype.toggle=function(){this._visible?this.collapse():this.expand(),this._options.onToggle(this)},t.prototype.updateOnCollapse=function(t){this._options.onCollapse=t},t.prototype.updateOnExpand=function(t){this._options.onExpand=t},t.prototype.updateOnToggle=function(t){this._options.onToggle=t},t}();function c(){document.querySelectorAll(\"[data-collapse-toggle]\").forEach((function(t){var e=t.getAttribute(\"data-collapse-toggle\"),i=document.getElementById(e);i?o.default.instanceExists(\"Collapse\",i.getAttribute(\"id\"))?new a(i,t,{},{id:i.getAttribute(\"id\")+\"_\"+o.default._generateRandomId()}):new a(i,t):console.error('The target element with id \"'.concat(e,'\" does not exist. Please check the data-collapse-toggle attribute.'))}))}e.initCollapses=c,\"undefined\"!=typeof window&&(window.Collapse=a,window.initCollapses=c),e.default=a},556:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initDials=void 0;var o=i(423),r={triggerType:\"hover\",onShow:function(){},onHide:function(){},onToggle:function(){}},s={id:null,override:!0},a=function(){function t(t,e,i,a,c){void 0===t&&(t=null),void 0===e&&(e=null),void 0===i&&(i=null),void 0===a&&(a=r),void 0===c&&(c=s),this._instanceId=c.id?c.id:i.id,this._parentEl=t,this._triggerEl=e,this._targetEl=i,this._options=n(n({},r),a),this._visible=!1,this._initialized=!1,this.init(),o.default.addInstance(\"Dial\",this,this._instanceId,c.override)}return t.prototype.init=function(){var t=this;if(this._triggerEl&&this._targetEl&&!this._initialized){var e=this._getTriggerEventTypes(this._options.triggerType);this._showEventHandler=function(){t.show()},e.showEvents.forEach((function(e){t._triggerEl.addEventListener(e,t._showEventHandler),t._targetEl.addEventListener(e,t._showEventHandler)})),this._hideEventHandler=function(){t._parentEl.matches(\":hover\")||t.hide()},e.hideEvents.forEach((function(e){t._parentEl.addEventListener(e,t._hideEventHandler)})),this._initialized=!0}},t.prototype.destroy=function(){var t=this;if(this._initialized){var e=this._getTriggerEventTypes(this._options.triggerType);e.showEvents.forEach((function(e){t._triggerEl.removeEventListener(e,t._showEventHandler),t._targetEl.removeEventListener(e,t._showEventHandler)})),e.hideEvents.forEach((function(e){t._parentEl.removeEventListener(e,t._hideEventHandler)})),this._initialized=!1}},t.prototype.removeInstance=function(){o.default.removeInstance(\"Dial\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype.hide=function(){this._targetEl.classList.add(\"hidden\"),this._triggerEl&&this._triggerEl.setAttribute(\"aria-expanded\",\"false\"),this._visible=!1,this._options.onHide(this)},t.prototype.show=function(){this._targetEl.classList.remove(\"hidden\"),this._triggerEl&&this._triggerEl.setAttribute(\"aria-expanded\",\"true\"),this._visible=!0,this._options.onShow(this)},t.prototype.toggle=function(){this._visible?this.hide():this.show()},t.prototype.isHidden=function(){return!this._visible},t.prototype.isVisible=function(){return this._visible},t.prototype._getTriggerEventTypes=function(t){switch(t){case\"hover\":default:return{showEvents:[\"mouseenter\",\"focus\"],hideEvents:[\"mouseleave\",\"blur\"]};case\"click\":return{showEvents:[\"click\",\"focus\"],hideEvents:[\"focusout\",\"blur\"]};case\"none\":return{showEvents:[],hideEvents:[]}}},t.prototype.updateOnShow=function(t){this._options.onShow=t},t.prototype.updateOnHide=function(t){this._options.onHide=t},t.prototype.updateOnToggle=function(t){this._options.onToggle=t},t}();function c(){document.querySelectorAll(\"[data-dial-init]\").forEach((function(t){var e=t.querySelector(\"[data-dial-toggle]\");if(e){var i=e.getAttribute(\"data-dial-toggle\"),n=document.getElementById(i);if(n){var o=e.getAttribute(\"data-dial-trigger\");new a(t,e,n,{triggerType:o||r.triggerType})}else console.error(\"Dial with id \".concat(i,\" does not exist. Are you sure that the data-dial-toggle attribute points to the correct modal id?\"))}else console.error(\"Dial with id \".concat(t.id,\" does not have a trigger element. Are you sure that the data-dial-toggle attribute exists?\"))}))}e.initDials=c,\"undefined\"!=typeof window&&(window.Dial=a,window.initDials=c),e.default=a},791:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initDismisses=void 0;var o=i(423),r={transition:\"transition-opacity\",duration:300,timing:\"ease-out\",onHide:function(){}},s={id:null,override:!0},a=function(){function t(t,e,i,a){void 0===t&&(t=null),void 0===e&&(e=null),void 0===i&&(i=r),void 0===a&&(a=s),this._instanceId=a.id?a.id:t.id,this._targetEl=t,this._triggerEl=e,this._options=n(n({},r),i),this._initialized=!1,this.init(),o.default.addInstance(\"Dismiss\",this,this._instanceId,a.override)}return t.prototype.init=function(){var t=this;this._triggerEl&&this._targetEl&&!this._initialized&&(this._clickHandler=function(){t.hide()},this._triggerEl.addEventListener(\"click\",this._clickHandler),this._initialized=!0)},t.prototype.destroy=function(){this._triggerEl&&this._initialized&&(this._triggerEl.removeEventListener(\"click\",this._clickHandler),this._initialized=!1)},t.prototype.removeInstance=function(){o.default.removeInstance(\"Dismiss\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype.hide=function(){var t=this;this._targetEl.classList.add(this._options.transition,\"duration-\".concat(this._options.duration),this._options.timing,\"opacity-0\"),setTimeout((function(){t._targetEl.classList.add(\"hidden\")}),this._options.duration),this._options.onHide(this,this._targetEl)},t.prototype.updateOnHide=function(t){this._options.onHide=t},t}();function c(){document.querySelectorAll(\"[data-dismiss-target]\").forEach((function(t){var e=t.getAttribute(\"data-dismiss-target\"),i=document.querySelector(e);i?new a(i,t):console.error('The dismiss element with id \"'.concat(e,'\" does not exist. Please check the data-dismiss-target attribute.'))}))}e.initDismisses=c,\"undefined\"!=typeof window&&(window.Dismiss=a,window.initDismisses=c),e.default=a},340:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initDrawers=void 0;var o=i(423),r={placement:\"left\",bodyScrolling:!1,backdrop:!0,edge:!1,edgeOffset:\"bottom-[60px]\",backdropClasses:\"bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-30\",onShow:function(){},onHide:function(){},onToggle:function(){}},s={id:null,override:!0},a=function(){function t(t,e,i){void 0===t&&(t=null),void 0===e&&(e=r),void 0===i&&(i=s),this._eventListenerInstances=[],this._instanceId=i.id?i.id:t.id,this._targetEl=t,this._options=n(n({},r),e),this._visible=!1,this._initialized=!1,this.init(),o.default.addInstance(\"Drawer\",this,this._instanceId,i.override)}return t.prototype.init=function(){var t=this;this._targetEl&&!this._initialized&&(this._targetEl.setAttribute(\"aria-hidden\",\"true\"),this._targetEl.classList.add(\"transition-transform\"),this._getPlacementClasses(this._options.placement).base.map((function(e){t._targetEl.classList.add(e)})),this._handleEscapeKey=function(e){\"Escape\"===e.key&&t.isVisible()&&t.hide()},document.addEventListener(\"keydown\",this._handleEscapeKey),this._initialized=!0)},t.prototype.destroy=function(){this._initialized&&(this.removeAllEventListenerInstances(),this._destroyBackdropEl(),document.removeEventListener(\"keydown\",this._handleEscapeKey),this._initialized=!1)},t.prototype.removeInstance=function(){o.default.removeInstance(\"Drawer\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype.hide=function(){var t=this;this._options.edge?(this._getPlacementClasses(this._options.placement+\"-edge\").active.map((function(e){t._targetEl.classList.remove(e)})),this._getPlacementClasses(this._options.placement+\"-edge\").inactive.map((function(e){t._targetEl.classList.add(e)}))):(this._getPlacementClasses(this._options.placement).active.map((function(e){t._targetEl.classList.remove(e)})),this._getPlacementClasses(this._options.placement).inactive.map((function(e){t._targetEl.classList.add(e)}))),this._targetEl.setAttribute(\"aria-hidden\",\"true\"),this._targetEl.removeAttribute(\"aria-modal\"),this._targetEl.removeAttribute(\"role\"),this._options.bodyScrolling||document.body.classList.remove(\"overflow-hidden\"),this._options.backdrop&&this._destroyBackdropEl(),this._visible=!1,this._options.onHide(this)},t.prototype.show=function(){var t=this;this._options.edge?(this._getPlacementClasses(this._options.placement+\"-edge\").active.map((function(e){t._targetEl.classList.add(e)})),this._getPlacementClasses(this._options.placement+\"-edge\").inactive.map((function(e){t._targetEl.classList.remove(e)}))):(this._getPlacementClasses(this._options.placement).active.map((function(e){t._targetEl.classList.add(e)})),this._getPlacementClasses(this._options.placement).inactive.map((function(e){t._targetEl.classList.remove(e)}))),this._targetEl.setAttribute(\"aria-modal\",\"true\"),this._targetEl.setAttribute(\"role\",\"dialog\"),this._targetEl.removeAttribute(\"aria-hidden\"),this._options.bodyScrolling||document.body.classList.add(\"overflow-hidden\"),this._options.backdrop&&this._createBackdrop(),this._visible=!0,this._options.onShow(this)},t.prototype.toggle=function(){this.isVisible()?this.hide():this.show()},t.prototype._createBackdrop=function(){var t,e=this;if(!this._visible){var i=document.createElement(\"div\");i.setAttribute(\"drawer-backdrop\",\"\"),(t=i.classList).add.apply(t,this._options.backdropClasses.split(\" \")),document.querySelector(\"body\").append(i),i.addEventListener(\"click\",(function(){e.hide()}))}},t.prototype._destroyBackdropEl=function(){this._visible&&null!==document.querySelector(\"[drawer-backdrop]\")&&document.querySelector(\"[drawer-backdrop]\").remove()},t.prototype._getPlacementClasses=function(t){switch(t){case\"top\":return{base:[\"top-0\",\"left-0\",\"right-0\"],active:[\"transform-none\"],inactive:[\"-translate-y-full\"]};case\"right\":return{base:[\"right-0\",\"top-0\"],active:[\"transform-none\"],inactive:[\"translate-x-full\"]};case\"bottom\":return{base:[\"bottom-0\",\"left-0\",\"right-0\"],active:[\"transform-none\"],inactive:[\"translate-y-full\"]};case\"left\":default:return{base:[\"left-0\",\"top-0\"],active:[\"transform-none\"],inactive:[\"-translate-x-full\"]};case\"bottom-edge\":return{base:[\"left-0\",\"top-0\"],active:[\"transform-none\"],inactive:[\"translate-y-full\",this._options.edgeOffset]}}},t.prototype.isHidden=function(){return!this._visible},t.prototype.isVisible=function(){return this._visible},t.prototype.addEventListenerInstance=function(t,e,i){this._eventListenerInstances.push({element:t,type:e,handler:i})},t.prototype.removeAllEventListenerInstances=function(){this._eventListenerInstances.map((function(t){t.element.removeEventListener(t.type,t.handler)})),this._eventListenerInstances=[]},t.prototype.getAllEventListenerInstances=function(){return this._eventListenerInstances},t.prototype.updateOnShow=function(t){this._options.onShow=t},t.prototype.updateOnHide=function(t){this._options.onHide=t},t.prototype.updateOnToggle=function(t){this._options.onToggle=t},t}();function c(){document.querySelectorAll(\"[data-drawer-target]\").forEach((function(t){var e=t.getAttribute(\"data-drawer-target\"),i=document.getElementById(e);if(i){var n=t.getAttribute(\"data-drawer-placement\"),o=t.getAttribute(\"data-drawer-body-scrolling\"),s=t.getAttribute(\"data-drawer-backdrop\"),c=t.getAttribute(\"data-drawer-edge\"),d=t.getAttribute(\"data-drawer-edge-offset\");new a(i,{placement:n||r.placement,bodyScrolling:o?\"true\"===o:r.bodyScrolling,backdrop:s?\"true\"===s:r.backdrop,edge:c?\"true\"===c:r.edge,edgeOffset:d||r.edgeOffset})}else console.error(\"Drawer with id \".concat(e,\" not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?\"))})),document.querySelectorAll(\"[data-drawer-toggle]\").forEach((function(t){var e=t.getAttribute(\"data-drawer-toggle\");if(document.getElementById(e)){var i=o.default.getInstance(\"Drawer\",e);if(i){var n=function(){i.toggle()};t.addEventListener(\"click\",n),i.addEventListenerInstance(t,\"click\",n)}else console.error(\"Drawer with id \".concat(e,\" has not been initialized. Please initialize it using the data-drawer-target attribute.\"))}else console.error(\"Drawer with id \".concat(e,\" not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?\"))})),document.querySelectorAll(\"[data-drawer-dismiss], [data-drawer-hide]\").forEach((function(t){var e=t.getAttribute(\"data-drawer-dismiss\")?t.getAttribute(\"data-drawer-dismiss\"):t.getAttribute(\"data-drawer-hide\");if(document.getElementById(e)){var i=o.default.getInstance(\"Drawer\",e);if(i){var n=function(){i.hide()};t.addEventListener(\"click\",n),i.addEventListenerInstance(t,\"click\",n)}else console.error(\"Drawer with id \".concat(e,\" has not been initialized. Please initialize it using the data-drawer-target attribute.\"))}else console.error(\"Drawer with id \".concat(e,\" not found. Are you sure that the data-drawer-target attribute points to the correct drawer id\"))})),document.querySelectorAll(\"[data-drawer-show]\").forEach((function(t){var e=t.getAttribute(\"data-drawer-show\");if(document.getElementById(e)){var i=o.default.getInstance(\"Drawer\",e);if(i){var n=function(){i.show()};t.addEventListener(\"click\",n),i.addEventListenerInstance(t,\"click\",n)}else console.error(\"Drawer with id \".concat(e,\" has not been initialized. Please initialize it using the data-drawer-target attribute.\"))}else console.error(\"Drawer with id \".concat(e,\" not found. Are you sure that the data-drawer-target attribute points to the correct drawer id?\"))}))}e.initDrawers=c,\"undefined\"!=typeof window&&(window.Drawer=a,window.initDrawers=c),e.default=a},316:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)},o=this&&this.__spreadArray||function(t,e,i){if(i||2===arguments.length)for(var n,o=0,r=e.length;o<r;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initDropdowns=void 0;var r=i(853),s=i(423),a={placement:\"bottom\",triggerType:\"click\",offsetSkidding:0,offsetDistance:10,delay:300,ignoreClickOutsideClass:!1,onShow:function(){},onHide:function(){},onToggle:function(){}},c={id:null,override:!0},d=function(){function t(t,e,i,o){void 0===t&&(t=null),void 0===e&&(e=null),void 0===i&&(i=a),void 0===o&&(o=c),this._instanceId=o.id?o.id:t.id,this._targetEl=t,this._triggerEl=e,this._options=n(n({},a),i),this._popperInstance=null,this._visible=!1,this._initialized=!1,this.init(),s.default.addInstance(\"Dropdown\",this,this._instanceId,o.override)}return t.prototype.init=function(){this._triggerEl&&this._targetEl&&!this._initialized&&(this._popperInstance=this._createPopperInstance(),this._setupEventListeners(),this._initialized=!0)},t.prototype.destroy=function(){var t=this,e=this._getTriggerEvents();\"click\"===this._options.triggerType&&e.showEvents.forEach((function(e){t._triggerEl.removeEventListener(e,t._clickHandler)})),\"hover\"===this._options.triggerType&&(e.showEvents.forEach((function(e){t._triggerEl.removeEventListener(e,t._hoverShowTriggerElHandler),t._targetEl.removeEventListener(e,t._hoverShowTargetElHandler)})),e.hideEvents.forEach((function(e){t._triggerEl.removeEventListener(e,t._hoverHideHandler),t._targetEl.removeEventListener(e,t._hoverHideHandler)}))),this._popperInstance.destroy(),this._initialized=!1},t.prototype.removeInstance=function(){s.default.removeInstance(\"Dropdown\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype._setupEventListeners=function(){var t=this,e=this._getTriggerEvents();this._clickHandler=function(){t.toggle()},\"click\"===this._options.triggerType&&e.showEvents.forEach((function(e){t._triggerEl.addEventListener(e,t._clickHandler)})),this._hoverShowTriggerElHandler=function(e){\"click\"===e.type?t.toggle():setTimeout((function(){t.show()}),t._options.delay)},this._hoverShowTargetElHandler=function(){t.show()},this._hoverHideHandler=function(){setTimeout((function(){t._targetEl.matches(\":hover\")||t.hide()}),t._options.delay)},\"hover\"===this._options.triggerType&&(e.showEvents.forEach((function(e){t._triggerEl.addEventListener(e,t._hoverShowTriggerElHandler),t._targetEl.addEventListener(e,t._hoverShowTargetElHandler)})),e.hideEvents.forEach((function(e){t._triggerEl.addEventListener(e,t._hoverHideHandler),t._targetEl.addEventListener(e,t._hoverHideHandler)})))},t.prototype._createPopperInstance=function(){return(0,r.createPopper)(this._triggerEl,this._targetEl,{placement:this._options.placement,modifiers:[{name:\"offset\",options:{offset:[this._options.offsetSkidding,this._options.offsetDistance]}}]})},t.prototype._setupClickOutsideListener=function(){var t=this;this._clickOutsideEventListener=function(e){t._handleClickOutside(e,t._targetEl)},document.body.addEventListener(\"click\",this._clickOutsideEventListener,!0)},t.prototype._removeClickOutsideListener=function(){document.body.removeEventListener(\"click\",this._clickOutsideEventListener,!0)},t.prototype._handleClickOutside=function(t,e){var i=t.target,n=this._options.ignoreClickOutsideClass,o=!1;n&&document.querySelectorAll(\".\".concat(n)).forEach((function(t){t.contains(i)&&(o=!0)}));i===e||e.contains(i)||this._triggerEl.contains(i)||o||!this.isVisible()||this.hide()},t.prototype._getTriggerEvents=function(){switch(this._options.triggerType){case\"hover\":return{showEvents:[\"mouseenter\",\"click\"],hideEvents:[\"mouseleave\"]};case\"click\":default:return{showEvents:[\"click\"],hideEvents:[]};case\"none\":return{showEvents:[],hideEvents:[]}}},t.prototype.toggle=function(){this.isVisible()?this.hide():this.show(),this._options.onToggle(this)},t.prototype.isVisible=function(){return this._visible},t.prototype.show=function(){this._targetEl.classList.remove(\"hidden\"),this._targetEl.classList.add(\"block\"),this._popperInstance.setOptions((function(t){return n(n({},t),{modifiers:o(o([],t.modifiers,!0),[{name:\"eventListeners\",enabled:!0}],!1)})})),this._setupClickOutsideListener(),this._popperInstance.update(),this._visible=!0,this._options.onShow(this)},t.prototype.hide=function(){this._targetEl.classList.remove(\"block\"),this._targetEl.classList.add(\"hidden\"),this._popperInstance.setOptions((function(t){return n(n({},t),{modifiers:o(o([],t.modifiers,!0),[{name:\"eventListeners\",enabled:!1}],!1)})})),this._visible=!1,this._removeClickOutsideListener(),this._options.onHide(this)},t.prototype.updateOnShow=function(t){this._options.onShow=t},t.prototype.updateOnHide=function(t){this._options.onHide=t},t.prototype.updateOnToggle=function(t){this._options.onToggle=t},t}();function l(){document.querySelectorAll(\"[data-dropdown-toggle]\").forEach((function(t){var e=t.getAttribute(\"data-dropdown-toggle\"),i=document.getElementById(e);if(i){var n=t.getAttribute(\"data-dropdown-placement\"),o=t.getAttribute(\"data-dropdown-offset-skidding\"),r=t.getAttribute(\"data-dropdown-offset-distance\"),s=t.getAttribute(\"data-dropdown-trigger\"),c=t.getAttribute(\"data-dropdown-delay\"),l=t.getAttribute(\"data-dropdown-ignore-click-outside-class\");new d(i,t,{placement:n||a.placement,triggerType:s||a.triggerType,offsetSkidding:o?parseInt(o):a.offsetSkidding,offsetDistance:r?parseInt(r):a.offsetDistance,delay:c?parseInt(c):a.delay,ignoreClickOutsideClass:l||a.ignoreClickOutsideClass})}else console.error('The dropdown element with id \"'.concat(e,'\" does not exist. Please check the data-dropdown-toggle attribute.'))}))}e.initDropdowns=l,\"undefined\"!=typeof window&&(window.Dropdown=d,window.initDropdowns=l),e.default=d},311:function(t,e,i){Object.defineProperty(e,\"__esModule\",{value:!0}),e.initFlowbite=void 0;var n=i(902),o=i(33),r=i(673),s=i(922),a=i(556),c=i(791),d=i(340),l=i(316),u=i(656),p=i(16),h=i(903),f=i(247),v=i(671);function g(){(0,n.initAccordions)(),(0,s.initCollapses)(),(0,o.initCarousels)(),(0,c.initDismisses)(),(0,l.initDropdowns)(),(0,p.initModals)(),(0,d.initDrawers)(),(0,f.initTabs)(),(0,v.initTooltips)(),(0,h.initPopovers)(),(0,a.initDials)(),(0,u.initInputCounters)(),(0,r.initCopyClipboards)()}e.initFlowbite=g,\"undefined\"!=typeof window&&(window.initFlowbite=g)},656:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initInputCounters=void 0;var o=i(423),r={minValue:null,maxValue:null,onIncrement:function(){},onDecrement:function(){}},s={id:null,override:!0},a=function(){function t(t,e,i,a,c){void 0===t&&(t=null),void 0===e&&(e=null),void 0===i&&(i=null),void 0===a&&(a=r),void 0===c&&(c=s),this._instanceId=c.id?c.id:t.id,this._targetEl=t,this._incrementEl=e,this._decrementEl=i,this._options=n(n({},r),a),this._initialized=!1,this.init(),o.default.addInstance(\"InputCounter\",this,this._instanceId,c.override)}return t.prototype.init=function(){var t=this;this._targetEl&&!this._initialized&&(this._inputHandler=function(e){var i=e.target;/^\\d*$/.test(i.value)||(i.value=i.value.replace(/[^\\d]/g,\"\")),null!==t._options.maxValue&&parseInt(i.value)>t._options.maxValue&&(i.value=t._options.maxValue.toString()),null!==t._options.minValue&&parseInt(i.value)<t._options.minValue&&(i.value=t._options.minValue.toString())},this._incrementClickHandler=function(){t.increment()},this._decrementClickHandler=function(){t.decrement()},this._targetEl.addEventListener(\"input\",this._inputHandler),this._incrementEl&&this._incrementEl.addEventListener(\"click\",this._incrementClickHandler),this._decrementEl&&this._decrementEl.addEventListener(\"click\",this._decrementClickHandler),this._initialized=!0)},t.prototype.destroy=function(){this._targetEl&&this._initialized&&(this._targetEl.removeEventListener(\"input\",this._inputHandler),this._incrementEl&&this._incrementEl.removeEventListener(\"click\",this._incrementClickHandler),this._decrementEl&&this._decrementEl.removeEventListener(\"click\",this._decrementClickHandler),this._initialized=!1)},t.prototype.removeInstance=function(){o.default.removeInstance(\"InputCounter\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype.getCurrentValue=function(){return parseInt(this._targetEl.value)||0},t.prototype.increment=function(){null!==this._options.maxValue&&this.getCurrentValue()>=this._options.maxValue||(this._targetEl.value=(this.getCurrentValue()+1).toString(),this._options.onIncrement(this))},t.prototype.decrement=function(){null!==this._options.minValue&&this.getCurrentValue()<=this._options.minValue||(this._targetEl.value=(this.getCurrentValue()-1).toString(),this._options.onDecrement(this))},t.prototype.updateOnIncrement=function(t){this._options.onIncrement=t},t.prototype.updateOnDecrement=function(t){this._options.onDecrement=t},t}();function c(){document.querySelectorAll(\"[data-input-counter]\").forEach((function(t){var e=t.id,i=document.querySelector('[data-input-counter-increment=\"'+e+'\"]'),n=document.querySelector('[data-input-counter-decrement=\"'+e+'\"]'),r=t.getAttribute(\"data-input-counter-min\"),s=t.getAttribute(\"data-input-counter-max\");t?o.default.instanceExists(\"InputCounter\",t.getAttribute(\"id\"))||new a(t,i||null,n||null,{minValue:r?parseInt(r):null,maxValue:s?parseInt(s):null}):console.error('The target element with id \"'.concat(e,'\" does not exist. Please check the data-input-counter attribute.'))}))}e.initInputCounters=c,\"undefined\"!=typeof window&&(window.InputCounter=a,window.initInputCounters=c),e.default=a},16:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initModals=void 0;var o=i(423),r={placement:\"center\",backdropClasses:\"bg-gray-900/50 dark:bg-gray-900/80 fixed inset-0 z-40\",backdrop:\"dynamic\",closable:!0,onHide:function(){},onShow:function(){},onToggle:function(){}},s={id:null,override:!0},a=function(){function t(t,e,i){void 0===t&&(t=null),void 0===e&&(e=r),void 0===i&&(i=s),this._eventListenerInstances=[],this._instanceId=i.id?i.id:t.id,this._targetEl=t,this._options=n(n({},r),e),this._isHidden=!0,this._backdropEl=null,this._initialized=!1,this.init(),o.default.addInstance(\"Modal\",this,this._instanceId,i.override)}return t.prototype.init=function(){var t=this;this._targetEl&&!this._initialized&&(this._getPlacementClasses().map((function(e){t._targetEl.classList.add(e)})),this._initialized=!0)},t.prototype.destroy=function(){this._initialized&&(this.removeAllEventListenerInstances(),this._destroyBackdropEl(),this._initialized=!1)},t.prototype.removeInstance=function(){o.default.removeInstance(\"Modal\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype._createBackdrop=function(){var t;if(this._isHidden){var e=document.createElement(\"div\");e.setAttribute(\"modal-backdrop\",\"\"),(t=e.classList).add.apply(t,this._options.backdropClasses.split(\" \")),document.querySelector(\"body\").append(e),this._backdropEl=e}},t.prototype._destroyBackdropEl=function(){this._isHidden||document.querySelector(\"[modal-backdrop]\").remove()},t.prototype._setupModalCloseEventListeners=function(){var t=this;\"dynamic\"===this._options.backdrop&&(this._clickOutsideEventListener=function(e){t._handleOutsideClick(e.target)},this._targetEl.addEventListener(\"click\",this._clickOutsideEventListener,!0)),this._keydownEventListener=function(e){\"Escape\"===e.key&&t.hide()},document.body.addEventListener(\"keydown\",this._keydownEventListener,!0)},t.prototype._removeModalCloseEventListeners=function(){\"dynamic\"===this._options.backdrop&&this._targetEl.removeEventListener(\"click\",this._clickOutsideEventListener,!0),document.body.removeEventListener(\"keydown\",this._keydownEventListener,!0)},t.prototype._handleOutsideClick=function(t){(t===this._targetEl||t===this._backdropEl&&this.isVisible())&&this.hide()},t.prototype._getPlacementClasses=function(){switch(this._options.placement){case\"top-left\":return[\"justify-start\",\"items-start\"];case\"top-center\":return[\"justify-center\",\"items-start\"];case\"top-right\":return[\"justify-end\",\"items-start\"];case\"center-left\":return[\"justify-start\",\"items-center\"];case\"center\":default:return[\"justify-center\",\"items-center\"];case\"center-right\":return[\"justify-end\",\"items-center\"];case\"bottom-left\":return[\"justify-start\",\"items-end\"];case\"bottom-center\":return[\"justify-center\",\"items-end\"];case\"bottom-right\":return[\"justify-end\",\"items-end\"]}},t.prototype.toggle=function(){this._isHidden?this.show():this.hide(),this._options.onToggle(this)},t.prototype.show=function(){this.isHidden&&(this._targetEl.classList.add(\"flex\"),this._targetEl.classList.remove(\"hidden\"),this._targetEl.setAttribute(\"aria-modal\",\"true\"),this._targetEl.setAttribute(\"role\",\"dialog\"),this._targetEl.removeAttribute(\"aria-hidden\"),this._createBackdrop(),this._isHidden=!1,this._options.closable&&this._setupModalCloseEventListeners(),document.body.classList.add(\"overflow-hidden\"),this._options.onShow(this))},t.prototype.hide=function(){this.isVisible&&(this._targetEl.classList.add(\"hidden\"),this._targetEl.classList.remove(\"flex\"),this._targetEl.setAttribute(\"aria-hidden\",\"true\"),this._targetEl.removeAttribute(\"aria-modal\"),this._targetEl.removeAttribute(\"role\"),this._destroyBackdropEl(),this._isHidden=!0,document.body.classList.remove(\"overflow-hidden\"),this._options.closable&&this._removeModalCloseEventListeners(),this._options.onHide(this))},t.prototype.isVisible=function(){return!this._isHidden},t.prototype.isHidden=function(){return this._isHidden},t.prototype.addEventListenerInstance=function(t,e,i){this._eventListenerInstances.push({element:t,type:e,handler:i})},t.prototype.removeAllEventListenerInstances=function(){this._eventListenerInstances.map((function(t){t.element.removeEventListener(t.type,t.handler)})),this._eventListenerInstances=[]},t.prototype.getAllEventListenerInstances=function(){return this._eventListenerInstances},t.prototype.updateOnShow=function(t){this._options.onShow=t},t.prototype.updateOnHide=function(t){this._options.onHide=t},t.prototype.updateOnToggle=function(t){this._options.onToggle=t},t}();function c(){document.querySelectorAll(\"[data-modal-target]\").forEach((function(t){var e=t.getAttribute(\"data-modal-target\"),i=document.getElementById(e);if(i){var n=i.getAttribute(\"data-modal-placement\"),o=i.getAttribute(\"data-modal-backdrop\");new a(i,{placement:n||r.placement,backdrop:o||r.backdrop})}else console.error(\"Modal with id \".concat(e,\" does not exist. Are you sure that the data-modal-target attribute points to the correct modal id?.\"))})),document.querySelectorAll(\"[data-modal-toggle]\").forEach((function(t){var e=t.getAttribute(\"data-modal-toggle\");if(document.getElementById(e)){var i=o.default.getInstance(\"Modal\",e);if(i){var n=function(){i.toggle()};t.addEventListener(\"click\",n),i.addEventListenerInstance(t,\"click\",n)}else console.error(\"Modal with id \".concat(e,\" has not been initialized. Please initialize it using the data-modal-target attribute.\"))}else console.error(\"Modal with id \".concat(e,\" does not exist. Are you sure that the data-modal-toggle attribute points to the correct modal id?\"))})),document.querySelectorAll(\"[data-modal-show]\").forEach((function(t){var e=t.getAttribute(\"data-modal-show\");if(document.getElementById(e)){var i=o.default.getInstance(\"Modal\",e);if(i){var n=function(){i.show()};t.addEventListener(\"click\",n),i.addEventListenerInstance(t,\"click\",n)}else console.error(\"Modal with id \".concat(e,\" has not been initialized. Please initialize it using the data-modal-target attribute.\"))}else console.error(\"Modal with id \".concat(e,\" does not exist. Are you sure that the data-modal-show attribute points to the correct modal id?\"))})),document.querySelectorAll(\"[data-modal-hide]\").forEach((function(t){var e=t.getAttribute(\"data-modal-hide\");if(document.getElementById(e)){var i=o.default.getInstance(\"Modal\",e);if(i){var n=function(){i.hide()};t.addEventListener(\"click\",n),i.addEventListenerInstance(t,\"click\",n)}else console.error(\"Modal with id \".concat(e,\" has not been initialized. Please initialize it using the data-modal-target attribute.\"))}else console.error(\"Modal with id \".concat(e,\" does not exist. Are you sure that the data-modal-hide attribute points to the correct modal id?\"))}))}e.initModals=c,\"undefined\"!=typeof window&&(window.Modal=a,window.initModals=c),e.default=a},903:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)},o=this&&this.__spreadArray||function(t,e,i){if(i||2===arguments.length)for(var n,o=0,r=e.length;o<r;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initPopovers=void 0;var r=i(853),s=i(423),a={placement:\"top\",offset:10,triggerType:\"hover\",onShow:function(){},onHide:function(){},onToggle:function(){}},c={id:null,override:!0},d=function(){function t(t,e,i,o){void 0===t&&(t=null),void 0===e&&(e=null),void 0===i&&(i=a),void 0===o&&(o=c),this._instanceId=o.id?o.id:t.id,this._targetEl=t,this._triggerEl=e,this._options=n(n({},a),i),this._popperInstance=null,this._visible=!1,this._initialized=!1,this.init(),s.default.addInstance(\"Popover\",this,o.id?o.id:this._targetEl.id,o.override)}return t.prototype.init=function(){this._triggerEl&&this._targetEl&&!this._initialized&&(this._setupEventListeners(),this._popperInstance=this._createPopperInstance(),this._initialized=!0)},t.prototype.destroy=function(){var t=this;if(this._initialized){var e=this._getTriggerEvents();e.showEvents.forEach((function(e){t._triggerEl.removeEventListener(e,t._showHandler),t._targetEl.removeEventListener(e,t._showHandler)})),e.hideEvents.forEach((function(e){t._triggerEl.removeEventListener(e,t._hideHandler),t._targetEl.removeEventListener(e,t._hideHandler)})),this._removeKeydownListener(),this._removeClickOutsideListener(),this._popperInstance&&this._popperInstance.destroy(),this._initialized=!1}},t.prototype.removeInstance=function(){s.default.removeInstance(\"Popover\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype._setupEventListeners=function(){var t=this,e=this._getTriggerEvents();this._showHandler=function(){t.show()},this._hideHandler=function(){setTimeout((function(){t._targetEl.matches(\":hover\")||t.hide()}),100)},e.showEvents.forEach((function(e){t._triggerEl.addEventListener(e,t._showHandler),t._targetEl.addEventListener(e,t._showHandler)})),e.hideEvents.forEach((function(e){t._triggerEl.addEventListener(e,t._hideHandler),t._targetEl.addEventListener(e,t._hideHandler)}))},t.prototype._createPopperInstance=function(){return(0,r.createPopper)(this._triggerEl,this._targetEl,{placement:this._options.placement,modifiers:[{name:\"offset\",options:{offset:[0,this._options.offset]}}]})},t.prototype._getTriggerEvents=function(){switch(this._options.triggerType){case\"hover\":default:return{showEvents:[\"mouseenter\",\"focus\"],hideEvents:[\"mouseleave\",\"blur\"]};case\"click\":return{showEvents:[\"click\",\"focus\"],hideEvents:[\"focusout\",\"blur\"]};case\"none\":return{showEvents:[],hideEvents:[]}}},t.prototype._setupKeydownListener=function(){var t=this;this._keydownEventListener=function(e){\"Escape\"===e.key&&t.hide()},document.body.addEventListener(\"keydown\",this._keydownEventListener,!0)},t.prototype._removeKeydownListener=function(){document.body.removeEventListener(\"keydown\",this._keydownEventListener,!0)},t.prototype._setupClickOutsideListener=function(){var t=this;this._clickOutsideEventListener=function(e){t._handleClickOutside(e,t._targetEl)},document.body.addEventListener(\"click\",this._clickOutsideEventListener,!0)},t.prototype._removeClickOutsideListener=function(){document.body.removeEventListener(\"click\",this._clickOutsideEventListener,!0)},t.prototype._handleClickOutside=function(t,e){var i=t.target;i===e||e.contains(i)||this._triggerEl.contains(i)||!this.isVisible()||this.hide()},t.prototype.isVisible=function(){return this._visible},t.prototype.toggle=function(){this.isVisible()?this.hide():this.show(),this._options.onToggle(this)},t.prototype.show=function(){this._targetEl.classList.remove(\"opacity-0\",\"invisible\"),this._targetEl.classList.add(\"opacity-100\",\"visible\"),this._popperInstance.setOptions((function(t){return n(n({},t),{modifiers:o(o([],t.modifiers,!0),[{name:\"eventListeners\",enabled:!0}],!1)})})),this._setupClickOutsideListener(),this._setupKeydownListener(),this._popperInstance.update(),this._visible=!0,this._options.onShow(this)},t.prototype.hide=function(){this._targetEl.classList.remove(\"opacity-100\",\"visible\"),this._targetEl.classList.add(\"opacity-0\",\"invisible\"),this._popperInstance.setOptions((function(t){return n(n({},t),{modifiers:o(o([],t.modifiers,!0),[{name:\"eventListeners\",enabled:!1}],!1)})})),this._removeClickOutsideListener(),this._removeKeydownListener(),this._visible=!1,this._options.onHide(this)},t.prototype.updateOnShow=function(t){this._options.onShow=t},t.prototype.updateOnHide=function(t){this._options.onHide=t},t.prototype.updateOnToggle=function(t){this._options.onToggle=t},t}();function l(){document.querySelectorAll(\"[data-popover-target]\").forEach((function(t){var e=t.getAttribute(\"data-popover-target\"),i=document.getElementById(e);if(i){var n=t.getAttribute(\"data-popover-trigger\"),o=t.getAttribute(\"data-popover-placement\"),r=t.getAttribute(\"data-popover-offset\");new d(i,t,{placement:o||a.placement,offset:r?parseInt(r):a.offset,triggerType:n||a.triggerType})}else console.error('The popover element with id \"'.concat(e,'\" does not exist. Please check the data-popover-target attribute.'))}))}e.initPopovers=l,\"undefined\"!=typeof window&&(window.Popover=d,window.initPopovers=l),e.default=d},247:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initTabs=void 0;var o=i(423),r={defaultTabId:null,activeClasses:\"text-blue-600 hover:text-blue-600 dark:text-blue-500 dark:hover:text-blue-500 border-blue-600 dark:border-blue-500\",inactiveClasses:\"dark:border-transparent text-gray-500 hover:text-gray-600 dark:text-gray-400 border-gray-100 hover:border-gray-300 dark:border-gray-700 dark:hover:text-gray-300\",onShow:function(){}},s={id:null,override:!0},a=function(){function t(t,e,i,a){void 0===t&&(t=null),void 0===e&&(e=[]),void 0===i&&(i=r),void 0===a&&(a=s),this._instanceId=a.id?a.id:t.id,this._tabsEl=t,this._items=e,this._activeTab=i?this.getTab(i.defaultTabId):null,this._options=n(n({},r),i),this._initialized=!1,this.init(),o.default.addInstance(\"Tabs\",this,this._tabsEl.id,!0),o.default.addInstance(\"Tabs\",this,this._instanceId,a.override)}return t.prototype.init=function(){var t=this;this._items.length&&!this._initialized&&(this._activeTab||this.setActiveTab(this._items[0]),this.show(this._activeTab.id,!0),this._items.map((function(e){e.triggerEl.addEventListener(\"click\",(function(i){i.preventDefault(),t.show(e.id)}))})))},t.prototype.destroy=function(){this._initialized&&(this._initialized=!1)},t.prototype.removeInstance=function(){this.destroy(),o.default.removeInstance(\"Tabs\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype.getActiveTab=function(){return this._activeTab},t.prototype.setActiveTab=function(t){this._activeTab=t},t.prototype.getTab=function(t){return this._items.filter((function(e){return e.id===t}))[0]},t.prototype.show=function(t,e){var i,n,o=this;void 0===e&&(e=!1);var r=this.getTab(t);(r!==this._activeTab||e)&&(this._items.map((function(t){var e,i;t!==r&&((e=t.triggerEl.classList).remove.apply(e,o._options.activeClasses.split(\" \")),(i=t.triggerEl.classList).add.apply(i,o._options.inactiveClasses.split(\" \")),t.targetEl.classList.add(\"hidden\"),t.triggerEl.setAttribute(\"aria-selected\",\"false\"))})),(i=r.triggerEl.classList).add.apply(i,this._options.activeClasses.split(\" \")),(n=r.triggerEl.classList).remove.apply(n,this._options.inactiveClasses.split(\" \")),r.triggerEl.setAttribute(\"aria-selected\",\"true\"),r.targetEl.classList.remove(\"hidden\"),this.setActiveTab(r),this._options.onShow(this,r))},t.prototype.updateOnShow=function(t){this._options.onShow=t},t}();function c(){document.querySelectorAll(\"[data-tabs-toggle]\").forEach((function(t){var e=[],i=t.getAttribute(\"data-tabs-active-classes\"),n=t.getAttribute(\"data-tabs-inactive-classes\"),o=null;t.querySelectorAll('[role=\"tab\"]').forEach((function(t){var i=\"true\"===t.getAttribute(\"aria-selected\"),n={id:t.getAttribute(\"data-tabs-target\"),triggerEl:t,targetEl:document.querySelector(t.getAttribute(\"data-tabs-target\"))};e.push(n),i&&(o=n.id)})),new a(t,e,{defaultTabId:o,activeClasses:i||r.activeClasses,inactiveClasses:n||r.inactiveClasses})}))}e.initTabs=c,\"undefined\"!=typeof window&&(window.Tabs=a,window.initTabs=c),e.default=a},671:function(t,e,i){var n=this&&this.__assign||function(){return n=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var o in e=arguments[i])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},n.apply(this,arguments)},o=this&&this.__spreadArray||function(t,e,i){if(i||2===arguments.length)for(var n,o=0,r=e.length;o<r;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))};Object.defineProperty(e,\"__esModule\",{value:!0}),e.initTooltips=void 0;var r=i(853),s=i(423),a={placement:\"top\",triggerType:\"hover\",onShow:function(){},onHide:function(){},onToggle:function(){}},c={id:null,override:!0},d=function(){function t(t,e,i,o){void 0===t&&(t=null),void 0===e&&(e=null),void 0===i&&(i=a),void 0===o&&(o=c),this._instanceId=o.id?o.id:t.id,this._targetEl=t,this._triggerEl=e,this._options=n(n({},a),i),this._popperInstance=null,this._visible=!1,this._initialized=!1,this.init(),s.default.addInstance(\"Tooltip\",this,this._instanceId,o.override)}return t.prototype.init=function(){this._triggerEl&&this._targetEl&&!this._initialized&&(this._setupEventListeners(),this._popperInstance=this._createPopperInstance(),this._initialized=!0)},t.prototype.destroy=function(){var t=this;if(this._initialized){var e=this._getTriggerEvents();e.showEvents.forEach((function(e){t._triggerEl.removeEventListener(e,t._showHandler)})),e.hideEvents.forEach((function(e){t._triggerEl.removeEventListener(e,t._hideHandler)})),this._removeKeydownListener(),this._removeClickOutsideListener(),this._popperInstance&&this._popperInstance.destroy(),this._initialized=!1}},t.prototype.removeInstance=function(){s.default.removeInstance(\"Tooltip\",this._instanceId)},t.prototype.destroyAndRemoveInstance=function(){this.destroy(),this.removeInstance()},t.prototype._setupEventListeners=function(){var t=this,e=this._getTriggerEvents();this._showHandler=function(){t.show()},this._hideHandler=function(){t.hide()},e.showEvents.forEach((function(e){t._triggerEl.addEventListener(e,t._showHandler)})),e.hideEvents.forEach((function(e){t._triggerEl.addEventListener(e,t._hideHandler)}))},t.prototype._createPopperInstance=function(){return(0,r.createPopper)(this._triggerEl,this._targetEl,{placement:this._options.placement,modifiers:[{name:\"offset\",options:{offset:[0,8]}}]})},t.prototype._getTriggerEvents=function(){switch(this._options.triggerType){case\"hover\":default:return{showEvents:[\"mouseenter\",\"focus\"],hideEvents:[\"mouseleave\",\"blur\"]};case\"click\":return{showEvents:[\"click\",\"focus\"],hideEvents:[\"focusout\",\"blur\"]};case\"none\":return{showEvents:[],hideEvents:[]}}},t.prototype._setupKeydownListener=function(){var t=this;this._keydownEventListener=function(e){\"Escape\"===e.key&&t.hide()},document.body.addEventListener(\"keydown\",this._keydownEventListener,!0)},t.prototype._removeKeydownListener=function(){document.body.removeEventListener(\"keydown\",this._keydownEventListener,!0)},t.prototype._setupClickOutsideListener=function(){var t=this;this._clickOutsideEventListener=function(e){t._handleClickOutside(e,t._targetEl)},document.body.addEventListener(\"click\",this._clickOutsideEventListener,!0)},t.prototype._removeClickOutsideListener=function(){document.body.removeEventListener(\"click\",this._clickOutsideEventListener,!0)},t.prototype._handleClickOutside=function(t,e){var i=t.target;i===e||e.contains(i)||this._triggerEl.contains(i)||!this.isVisible()||this.hide()},t.prototype.isVisible=function(){return this._visible},t.prototype.toggle=function(){this.isVisible()?this.hide():this.show()},t.prototype.show=function(){this._targetEl.classList.remove(\"opacity-0\",\"invisible\"),this._targetEl.classList.add(\"opacity-100\",\"visible\"),this._popperInstance.setOptions((function(t){return n(n({},t),{modifiers:o(o([],t.modifiers,!0),[{name:\"eventListeners\",enabled:!0}],!1)})})),this._setupClickOutsideListener(),this._setupKeydownListener(),this._popperInstance.update(),this._visible=!0,this._options.onShow(this)},t.prototype.hide=function(){this._targetEl.classList.remove(\"opacity-100\",\"visible\"),this._targetEl.classList.add(\"opacity-0\",\"invisible\"),this._popperInstance.setOptions((function(t){return n(n({},t),{modifiers:o(o([],t.modifiers,!0),[{name:\"eventListeners\",enabled:!1}],!1)})})),this._removeClickOutsideListener(),this._removeKeydownListener(),this._visible=!1,this._options.onHide(this)},t.prototype.updateOnShow=function(t){this._options.onShow=t},t.prototype.updateOnHide=function(t){this._options.onHide=t},t.prototype.updateOnToggle=function(t){this._options.onToggle=t},t}();function l(){document.querySelectorAll(\"[data-tooltip-target]\").forEach((function(t){var e=t.getAttribute(\"data-tooltip-target\"),i=document.getElementById(e);if(i){var n=t.getAttribute(\"data-tooltip-trigger\"),o=t.getAttribute(\"data-tooltip-placement\");new d(i,t,{placement:o||a.placement,triggerType:n||a.triggerType})}else console.error('The tooltip element with id \"'.concat(e,'\" does not exist. Please check the data-tooltip-target attribute.'))}))}e.initTooltips=l,\"undefined\"!=typeof window&&(window.Tooltip=d,window.initTooltips=l),e.default=d},947:function(t,e){Object.defineProperty(e,\"__esModule\",{value:!0});var i=function(){function t(t,e){void 0===e&&(e=[]),this._eventType=t,this._eventFunctions=e}return t.prototype.init=function(){var t=this;this._eventFunctions.forEach((function(e){\"undefined\"!=typeof window&&window.addEventListener(t._eventType,e)}))},t}();e.default=i},423:function(t,e){Object.defineProperty(e,\"__esModule\",{value:!0});var i=new(function(){function t(){this._instances={Accordion:{},Carousel:{},Collapse:{},Dial:{},Dismiss:{},Drawer:{},Dropdown:{},Modal:{},Popover:{},Tabs:{},Tooltip:{},InputCounter:{},CopyClipboard:{}}}return t.prototype.addInstance=function(t,e,i,n){if(void 0===n&&(n=!1),!this._instances[t])return console.warn(\"Flowbite: Component \".concat(t,\" does not exist.\")),!1;!this._instances[t][i]||n?(n&&this._instances[t][i]&&this._instances[t][i].destroyAndRemoveInstance(),this._instances[t][i||this._generateRandomId()]=e):console.warn(\"Flowbite: Instance with ID \".concat(i,\" already exists.\"))},t.prototype.getAllInstances=function(){return this._instances},t.prototype.getInstances=function(t){return this._instances[t]?this._instances[t]:(console.warn(\"Flowbite: Component \".concat(t,\" does not exist.\")),!1)},t.prototype.getInstance=function(t,e){if(this._componentAndInstanceCheck(t,e)){if(this._instances[t][e])return this._instances[t][e];console.warn(\"Flowbite: Instance with ID \".concat(e,\" does not exist.\"))}},t.prototype.destroyAndRemoveInstance=function(t,e){this._componentAndInstanceCheck(t,e)&&(this.destroyInstanceObject(t,e),this.removeInstance(t,e))},t.prototype.removeInstance=function(t,e){this._componentAndInstanceCheck(t,e)&&delete this._instances[t][e]},t.prototype.destroyInstanceObject=function(t,e){this._componentAndInstanceCheck(t,e)&&this._instances[t][e].destroy()},t.prototype.instanceExists=function(t,e){return!!this._instances[t]&&!!this._instances[t][e]},t.prototype._generateRandomId=function(){return Math.random().toString(36).substr(2,9)},t.prototype._componentAndInstanceCheck=function(t,e){return this._instances[t]?!!this._instances[t][e]||(console.warn(\"Flowbite: Instance with ID \".concat(e,\" does not exist.\")),!1):(console.warn(\"Flowbite: Component \".concat(t,\" does not exist.\")),!1)},t}());e.default=i,\"undefined\"!=typeof window&&(window.FlowbiteInstances=i)}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={exports:{}};return t[n].call(r.exports,r,r.exports,i),r.exports}i.d=function(t,e){for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})};var n={};return function(){var t=n;Object.defineProperty(t,\"__esModule\",{value:!0}),i(647);var e=i(902),o=i(33),r=i(922),s=i(556),a=i(791),c=i(340),d=i(316),l=i(16),u=i(903),p=i(247),h=i(671),f=i(656),v=i(673);i(311);var g=i(947);new g.default(\"load\",[e.initAccordions,r.initCollapses,o.initCarousels,a.initDismisses,d.initDropdowns,l.initModals,c.initDrawers,p.initTabs,h.initTooltips,u.initPopovers,s.initDials,v.initCopyClipboards,f.initInputCounters]).init(),t.default={Accordion:e.default,Carousel:o.default,Collapse:r.default,Dial:s.default,Drawer:c.default,Dismiss:a.default,Dropdown:d.default,Modal:l.default,Popover:u.default,Tabs:p.default,Tooltip:h.default,InputCounter:f.default,CopyClipboard:v.default,Events:g.default}}(),n}()}));",
          "",
          "---------------"
        ],
        "core/http/views/partials/head.html||core/http/views/partials/head.html": [
          "File: core/http/views/partials/head.html -> core/http/views/partials/head.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   <link href=\"/static/assets/fontawesome/css/fontawesome.css\" rel=\"stylesheet\" />",
          "58:   <link href=\"/static/assets/fontawesome/css/brands.css\" rel=\"stylesheet\" />",
          "59:   <link href=\"/static/assets/fontawesome/css/solid.css\" rel=\"stylesheet\" />",
          "60:   <script src=\"/static/assets/htmx.js\" crossorigin=\"anonymous\"></script>",
          "61:   <!-- P2P Animation START -->",
          "62:   <style>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:   <script src=\"/static/assets/flowbite.min.js\"></script>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:         }",
          "120:   </style>",
          "121: </head>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "123:   <!-- https://stackoverflow.com/questions/76051980/flowbite-component-not-working-when-loaded-via-htmx-django-project -->",
          "124:   <script>",
          "125:       htmx.onLoad(function(content) {",
          "126:           initFlowbite();",
          "127:       })",
          "128:   </script>",
          "",
          "---------------"
        ]
      }
    }
  ]
}