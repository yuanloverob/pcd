{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fe59b7f39cc07ea002f4d63dd476243fc1211edf",
      "candidate_info": {
        "commit_hash": "fe59b7f39cc07ea002f4d63dd476243fc1211edf",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/fe59b7f39cc07ea002f4d63dd476243fc1211edf",
        "files": [
          "backend/open_webui/routers/chats.py",
          "src/lib/apis/chats/index.ts",
          "src/lib/components/chat/Messages.svelte",
          "src/routes/s/[id]/+page.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/chats.py||backend/open_webui/routers/chats.py",
          "src/lib/apis/chats/index.ts||src/lib/apis/chats/index.ts",
          "src/lib/components/chat/Messages.svelte||src/lib/components/chat/Messages.svelte",
          "src/routes/s/[id]/+page.svelte||src/routes/s/[id]/+page.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/chats.py||backend/open_webui/routers/chats.py": [
          "File: backend/open_webui/routers/chats.py -> backend/open_webui/routers/chats.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "466: ############################",
          "468: ############################",
          "474:     if chat:",
          "475:         updated_chat = {",
          "",
          "[Removed Lines]",
          "467: # CloneChatByShareId",
          "471: @router.post(\"/{share_id}/clone_shared\", response_model=Optional[ChatResponse])",
          "472: async def clone_chat_by_share_id(share_id: str, user=Depends(get_verified_user)):",
          "473:     chat = Chats.get_chat_by_share_id(share_id)",
          "",
          "[Added Lines]",
          "467: # CloneSharedChatById",
          "471: @router.post(\"/{id}/clone/shared\", response_model=Optional[ChatResponse])",
          "472: async def clone_shared_chat_by_id(id: str, user=Depends(get_verified_user)):",
          "473:     chat = Chats.get_chat_by_share_id(id)",
          "",
          "---------------"
        ],
        "src/lib/apis/chats/index.ts||src/lib/apis/chats/index.ts": [
          "File: src/lib/apis/chats/index.ts -> src/lib/apis/chats/index.ts",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:  return res;",
          "619: };",
          "622:  let error = null;",
          "625:   method: 'POST',",
          "626:   headers: {",
          "627:    Accept: 'application/json',",
          "",
          "[Removed Lines]",
          "621: export const cloneChatByShareId = async (token: string, share_id: string) => {",
          "624:  const res = await fetch(`${WEBUI_API_BASE_URL}/chats/${share_id}/clone_shared`, {",
          "",
          "[Added Lines]",
          "621: export const cloneSharedChatById = async (token: string, id: string) => {",
          "624:  const res = await fetch(`${WEBUI_API_BASE_URL}/chats/${id}/clone/shared`, {",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Messages.svelte||src/lib/components/chat/Messages.svelte": [
          "File: src/lib/components/chat/Messages.svelte -> src/lib/components/chat/Messages.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:  const i18n = getContext('i18n');",
          "19:  export let chatId = '';",
          "20:  export let user = $_user;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19:  export let className = 'h-full flex pt-8';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:  };",
          "334: </script>",
          "337:  {#if Object.keys(history?.messages ?? {}).length == 0}",
          "338:   <ChatPlaceholder",
          "339:    modelIds={selectedModels}",
          "",
          "[Removed Lines]",
          "336: <div class=\"h-full flex pt-8\">",
          "",
          "[Added Lines]",
          "338: <div class={className}>",
          "",
          "---------------"
        ],
        "src/routes/s/[id]/+page.svelte||src/routes/s/[id]/+page.svelte": [
          "File: src/routes/s/[id]/+page.svelte -> src/routes/s/[id]/+page.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "8:  import { settings, chatId, WEBUI_NAME, models } from '$lib/stores';",
          "9:  import { convertMessagesToHistory, createMessagesList } from '$lib/utils';",
          "13:  import Messages from '$lib/components/chat/Messages.svelte';",
          "14:  import Navbar from '$lib/components/layout/Navbar.svelte';",
          "15:  import { getUserById } from '$lib/apis/users';",
          "17:  import { getModels } from '$lib/apis';",
          "18:  import { toast } from 'svelte-sonner';",
          "",
          "[Removed Lines]",
          "11:  import { getChatByShareId, cloneChatByShareId } from '$lib/apis/chats';",
          "16:  import { error } from '@sveltejs/kit';",
          "",
          "[Added Lines]",
          "11:  import { getChatByShareId, cloneSharedChatById } from '$lib/apis/chats';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:  const cloneSharedChat = async () => {",
          "106:   if (!chat) return;",
          "109:    toast.error(error);",
          "110:    return null;",
          "111:   });",
          "",
          "[Removed Lines]",
          "108:   const res = await cloneChatByShareId(localStorage.token, chat.id).catch((error) => {",
          "",
          "[Added Lines]",
          "108:   const res = await cloneSharedChatById(localStorage.token, chat.id).catch((error) => {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  <div",
          "129:   class=\"min-h-screen max-h-screen w-full flex flex-col text-gray-700 dark:text-gray-100 bg-white dark:bg-gray-900\"",
          "130:  >",
          "141:       </div>",
          "148:      </div>",
          "149:     </div>",
          "157:       <Messages",
          "158:        {user}",
          "159:        chatId={$chatId}",
          "160:        readOnly={true}",
          "",
          "[Removed Lines]",
          "131:   <div class=\"flex flex-col flex-auto justify-center py-8\">",
          "132:    <div class=\"px-3 w-full max-w-5xl mx-auto\">",
          "133:     <div>",
          "134:      <div class=\" text-3xl font-semibold line-clamp-1\">",
          "135:       {title}",
          "136:      </div>",
          "138:      <div class=\"flex justify-between items-center mt-1\">",
          "139:       <div class=\"text-gray-400\">",
          "140:        {dayjs(chat.chat.timestamp).format($i18n.t('MMMM DD, YYYY'))}",
          "142:       <button",
          "143:        class=\"px-4 py-2 text-sm font-medium bg-emerald-600 hover:bg-emerald-500 text-white rounded-xl transition\"",
          "144:        on:click={cloneSharedChat}",
          "145:       >",
          "146:        {$i18n.t('Clone in OpenWebUI')}",
          "147:       </button>",
          "151:     <hr class=\"border-gray-50 dark:border-gray-850 mt-6 mb-2\" />",
          "152:    </div>",
          "154:    <div class=\" flex flex-col w-full flex-auto overflow-auto h-0\" id=\"messages-container\">",
          "155:     <div class=\" h-full w-full flex flex-col py-4\">",
          "156:      <div class=\"py-2\">",
          "",
          "[Added Lines]",
          "131:   <div class=\"flex flex-col flex-auto justify-center relative\">",
          "132:    <div class=\" flex flex-col w-full flex-auto overflow-auto h-0\" id=\"messages-container\">",
          "133:     <div class=\"pt-5 px-2 w-full max-w-5xl mx-auto\">",
          "134:      <div class=\"px-3\">",
          "135:       <div class=\" text-2xl font-semibold line-clamp-1\">",
          "136:        {title}",
          "137:       </div>",
          "139:       <div class=\"flex text-sm justify-between items-center mt-1\">",
          "140:        <div class=\"text-gray-400\">",
          "141:         {dayjs(chat.chat.timestamp).format($i18n.t('MMMM DD, YYYY'))}",
          "142:        </div>",
          "147:     <div class=\" h-full w-full flex flex-col py-2\">",
          "148:      <div class=\"\">",
          "150:        className=\"h-full flex pt-4 pb-8\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "171:      </div>",
          "172:     </div>",
          "173:    </div>",
          "174:   </div>",
          "175:  </div>",
          "176: {/if}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:    <div",
          "169:     class=\"absolute bottom-0 right-0 left-0 flex justify-center w-full bg-gradient-to-b from-transparent to-gray-900\"",
          "170:    >",
          "171:     <div class=\"pb-5\">",
          "172:      <button",
          "173:       class=\"px-4 py-2 text-sm font-medium bg-black hover:bg-gray-900 text-white dark:bg-white dark:text-black dark:hover:bg-gray-100 transition rounded-full\"",
          "174:       on:click={cloneSharedChat}",
          "175:      >",
          "176:       {$i18n.t('Clone Chat')}",
          "177:      </button>",
          "178:     </div>",
          "179:    </div>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83e5db7be74879cdc97460cb7ef2763543e744d9",
      "candidate_info": {
        "commit_hash": "83e5db7be74879cdc97460cb7ef2763543e744d9",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/83e5db7be74879cdc97460cb7ef2763543e744d9",
        "files": [
          "backend/open_webui/routers/tasks.py",
          "backend/open_webui/utils/chat.py",
          "backend/open_webui/utils/middleware.py",
          "src/routes/+layout.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/routers/tasks.py||backend/open_webui/routers/tasks.py",
          "backend/open_webui/utils/chat.py||backend/open_webui/utils/chat.py",
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "src/routes/+layout.svelte||src/routes/+layout.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/routers/tasks.py||backend/open_webui/routers/tasks.py": [
          "File: backend/open_webui/routers/tasks.py -> backend/open_webui/routers/tasks.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: async def generate_title(",
          "140:     request: Request, form_data: dict, user=Depends(get_verified_user)",
          "141: ):",
          "143:         models = {",
          "144:             request.state.model[\"id\"]: request.state.model,",
          "145:         }",
          "",
          "[Removed Lines]",
          "142:     if request.state.direct and request.state.model:",
          "",
          "[Added Lines]",
          "142:     if getattr(request.state, \"direct\", False) and hasattr(request.state, \"model\"):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:             content={\"detail\": \"Tags generation is disabled\"},",
          "232:         )",
          "235:         models = {",
          "236:             request.state.model[\"id\"]: request.state.model,",
          "237:         }",
          "",
          "[Removed Lines]",
          "234:     if request.state.direct and request.state.model:",
          "",
          "[Added Lines]",
          "234:     if getattr(request.state, \"direct\", False) and hasattr(request.state, \"model\"):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "293: async def generate_image_prompt(",
          "294:     request: Request, form_data: dict, user=Depends(get_verified_user)",
          "295: ):",
          "297:         models = {",
          "298:             request.state.model[\"id\"]: request.state.model,",
          "299:         }",
          "",
          "[Removed Lines]",
          "296:     if request.state.direct and request.state.model:",
          "",
          "[Added Lines]",
          "296:     if getattr(request.state, \"direct\", False) and hasattr(request.state, \"model\"):",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "374:                 detail=f\"Query generation is disabled\",",
          "375:             )",
          "378:         models = {",
          "379:             request.state.model[\"id\"]: request.state.model,",
          "380:         }",
          "",
          "[Removed Lines]",
          "377:     if request.state.direct and request.state.model:",
          "",
          "[Added Lines]",
          "377:     if getattr(request.state, \"direct\", False) and hasattr(request.state, \"model\"):",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "455:                 detail=f\"Input prompt exceeds maximum length of {request.app.state.config.AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH}\",",
          "456:             )",
          "459:         models = {",
          "460:             request.state.model[\"id\"]: request.state.model,",
          "461:         }",
          "",
          "[Removed Lines]",
          "458:     if request.state.direct and request.state.model:",
          "",
          "[Added Lines]",
          "458:     if getattr(request.state, \"direct\", False) and hasattr(request.state, \"model\"):",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "518:     request: Request, form_data: dict, user=Depends(get_verified_user)",
          "519: ):",
          "522:         models = {",
          "523:             request.state.model[\"id\"]: request.state.model,",
          "524:         }",
          "",
          "[Removed Lines]",
          "521:     if request.state.direct and request.state.model:",
          "",
          "[Added Lines]",
          "521:     if getattr(request.state, \"direct\", False) and hasattr(request.state, \"model\"):",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "587:     request: Request, form_data: dict, user=Depends(get_verified_user)",
          "588: ):",
          "591:         models = {",
          "592:             request.state.model[\"id\"]: request.state.model,",
          "593:         }",
          "",
          "[Removed Lines]",
          "590:     if request.state.direct and request.state.model:",
          "",
          "[Added Lines]",
          "590:     if getattr(request.state, \"direct\", False) and hasattr(request.state, \"model\"):",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/chat.py||backend/open_webui/utils/chat.py": [
          "File: backend/open_webui/utils/chat.py -> backend/open_webui/utils/chat.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:     if BYPASS_MODEL_ACCESS_CONTROL:",
          "166:         bypass_filter = True",
          "169:         models = {",
          "170:             request.state.model[\"id\"]: request.state.model,",
          "171:         }",
          "",
          "[Removed Lines]",
          "168:     if request.state.direct and request.state.model:",
          "",
          "[Added Lines]",
          "168:     if getattr(request.state, \"direct\", False) and hasattr(request.state, \"model\"):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "284:     if not request.app.state.MODELS:",
          "285:         await get_all_models(request)",
          "288:         models = {",
          "289:             request.state.model[\"id\"]: request.state.model,",
          "290:         }",
          "",
          "[Removed Lines]",
          "287:     if request.state.direct and request.state.model:",
          "",
          "[Added Lines]",
          "287:     if getattr(request.state, \"direct\", False) and hasattr(request.state, \"model\"):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "350:     if not request.app.state.MODELS:",
          "351:         await get_all_models(request)",
          "354:         models = {",
          "355:             request.state.model[\"id\"]: request.state.model,",
          "356:         }",
          "",
          "[Removed Lines]",
          "353:     if request.state.direct and request.state.model:",
          "",
          "[Added Lines]",
          "353:     if getattr(request.state, \"direct\", False) and hasattr(request.state, \"model\"):",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:     # Initialize events to store additional event to be sent to the client",
          "624:     # Initialize contexts and citation",
          "626:         models = {",
          "627:             request.state.model[\"id\"]: request.state.model,",
          "628:         }",
          "",
          "[Removed Lines]",
          "625:     if request.state.direct and request.state.model:",
          "",
          "[Added Lines]",
          "625:     if getattr(request.state, \"direct\", False) and hasattr(request.state, \"model\"):",
          "",
          "---------------"
        ],
        "src/routes/+layout.svelte||src/routes/+layout.svelte": [
          "File: src/routes/+layout.svelte -> src/routes/+layout.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:       const API_CONFIG = directConnections.OPENAI_API_CONFIGS[urlIdx];",
          "275:       try {",
          "276:        const [res, controller] = await chatCompletion(",
          "277:         OPENAI_API_KEY,",
          "278:         form_data,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "276:        if (API_CONFIG?.prefix_id) {",
          "277:         const prefixId = API_CONFIG.prefix_id;",
          "278:         form_data['model'] = form_data['model'].replace(`${prefixId}.`, ``);",
          "279:        }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7c501677cd9553d37c67106295c17900c1d690c",
      "candidate_info": {
        "commit_hash": "e7c501677cd9553d37c67106295c17900c1d690c",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/e7c501677cd9553d37c67106295c17900c1d690c",
        "files": [
          "src/lib/components/channel/Channel.svelte",
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/channel/Channel.svelte||src/lib/components/channel/Channel.svelte",
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/channel/Channel.svelte||src/lib/components/channel/Channel.svelte": [
          "File: src/lib/components/channel/Channel.svelte -> src/lib/components/channel/Channel.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:  });",
          "192:  onDestroy(() => {",
          "194:  });",
          "195: </script>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:   $socket?.off('channel-events', channelEventHandler);",
          "",
          "---------------"
        ],
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:  onDestroy(() => {",
          "428:   chatIdUnsubscriber?.();",
          "429:   window.removeEventListener('message', onMessageHandler);",
          "431:  });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:   $socket?.off('chat-events', chatEventHandler);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc17511a0567a4a6ca576321ae3653af793b4e8d",
      "candidate_info": {
        "commit_hash": "bc17511a0567a4a6ca576321ae3653af793b4e8d",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/bc17511a0567a4a6ca576321ae3653af793b4e8d",
        "files": [
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte||src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte": [
          "File: src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte -> src/lib/components/chat/Messages/Markdown/MarkdownTokens.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   </p>",
          "296:  {:else if token.type === 'text'}",
          "297:   {#if top}",
          "299:     {#if token.tokens}",
          "300:      <MarkdownInlineTokens id={`${id}-${tokenIdx}-t`} tokens={token.tokens} {onSourceClick} />",
          "301:     {:else}",
          "",
          "[Removed Lines]",
          "298:    <p dir=\"auto\">",
          "",
          "[Added Lines]",
          "298:    <p>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c85ce07f92e440eea4f5dfec35e718723d5031a4",
      "candidate_info": {
        "commit_hash": "c85ce07f92e440eea4f5dfec35e718723d5031a4",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/c85ce07f92e440eea4f5dfec35e718723d5031a4",
        "files": [
          "backend/open_webui/main.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/main.py||backend/open_webui/main.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1066: @app.get(\"/api/version/updates\")",
          "1068:     if OFFLINE_MODE:",
          "1069:         log.debug(",
          "1070:             f\"Offline mode is enabled, returning current version as latest version\"",
          "",
          "[Removed Lines]",
          "1067: async def get_app_latest_release_version():",
          "",
          "[Added Lines]",
          "1067: async def get_app_latest_release_version(user=Depends(get_verified_user)):",
          "",
          "---------------"
        ]
      }
    }
  ]
}