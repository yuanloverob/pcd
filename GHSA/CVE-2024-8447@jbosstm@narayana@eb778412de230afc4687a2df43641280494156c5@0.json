{
  "cve_id": "CVE-2024-8447",
  "cve_desc": "A security issue was discovered in the LRA Coordinator component of Narayana. When Cancel is called in LRA, an execution time of approximately 2 seconds occurs. If Join is called with the same LRA ID within that timeframe, the application may crash or hang indefinitely, leading to a denial of service.",
  "repo": "jbosstm/narayana",
  "patch_hash": "eb778412de230afc4687a2df43641280494156c5",
  "patch_info": {
    "commit_hash": "eb778412de230afc4687a2df43641280494156c5",
    "repo": "jbosstm/narayana",
    "commit_url": "https://github.com/jbosstm/narayana/commit/eb778412de230afc4687a2df43641280494156c5",
    "files": [
      "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
      "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
      "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
    ],
    "message": "JBTM-3911 Replace synchronized in favor of Reentrant Lock\n\nin LRAService joinLRA method",
    "before_after_code_files": [
      "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
      "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
      "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
      "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
    ]
  },
  "patch_diff": {
    "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java": [
      "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "727:     public LRAParticipantRecord enlistParticipant(URI coordinatorUrl, String participantUrl, String recoveryUrlBase,",
      "728:                                                   long timeLimit, String compensatorData) throws UnsupportedEncodingException {",
      "743:         }",
      "746:     }",
      "748:     private LRAParticipantRecord doEnlistParticipant(URI coordinatorUrl, String participantUrl, String recoveryUrlBase,",
      "",
      "[Removed Lines]",
      "729:         LRAParticipantRecord participant = findLRAParticipant(participantUrl, false);",
      "731:         if (participant != null) {",
      "732:             participant.setCompensatorData(compensatorData);",
      "733:             return participant; // must have already been enlisted",
      "734:         }",
      "736:         participant = doEnlistParticipant(coordinatorUrl, participantUrl, recoveryUrlBase,",
      "737:                 timeLimit, compensatorData);",
      "739:         if (participant != null) {",
      "741:             deactivate(); // if it fails the superclass will have logged a warning",
      "742:             savedIntentionList = true; // need this clean up if the LRA times out",
      "745:         return participant;",
      "",
      "[Added Lines]",
      "729:         ReentrantLock lock = tryLockTransaction();",
      "730:         if (lock == null) {",
      "731:             LRALogger.i18nLogger.warn_enlistment();",
      "732:             return null;",
      "733:         }",
      "734:         else {",
      "735:             try {",
      "736:                 LRAParticipantRecord participant = findLRAParticipant(participantUrl, false);",
      "737:                 if (participant != null) {",
      "738:                     participant.setCompensatorData(compensatorData);",
      "739:                     return participant; // must have already been enlisted",
      "740:                 }",
      "741:                 participant = doEnlistParticipant(coordinatorUrl, participantUrl, recoveryUrlBase, timeLimit,",
      "742:                         compensatorData);",
      "743:                 if (participant != null) {",
      "745:                     deactivate(); // if it fails the superclass will have logged a warning",
      "746:                     savedIntentionList = true; // need this clean up if the LRA times out",
      "747:                 }",
      "748:                 return participant;",
      "749:             }",
      "750:             finally {",
      "751:                 lock.unlock();",
      "752:             }",
      "",
      "---------------"
    ],
    "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java": [
      "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:         }",
      "329:     }",
      "332:                                     String compensatorUrl, String linkHeader, String recoveryUrlBase,",
      "333:                                     StringBuilder compensatorData) {",
      "334:         if (lra ==  null) {",
      "",
      "[Removed Lines]",
      "331:     public synchronized int joinLRA(StringBuilder recoveryUrl, URI lra, long timeLimit,",
      "",
      "[Added Lines]",
      "331:     public int joinLRA(StringBuilder recoveryUrl, URI lra, long timeLimit,",
      "",
      "---------------"
    ],
    "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java": [
      "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: package io.narayana.lra.coordinator.domain.model;",
      "21: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
      "24: import org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer;",
      "25: import org.jboss.resteasy.test.TestPortProvider;",
      "26: import org.junit.After;",
      "",
      "[Removed Lines]",
      "8: import com.arjuna.ats.arjuna.common.arjPropertyManager;",
      "9: import io.narayana.lra.LRAData;",
      "10: import io.narayana.lra.client.NarayanaLRAClient;",
      "11: import io.narayana.lra.coordinator.api.Coordinator;",
      "12: import io.narayana.lra.coordinator.domain.service.LRAService;",
      "13: import io.narayana.lra.coordinator.internal.LRARecoveryModule;",
      "14: import io.narayana.lra.filter.ServerLRAFilter;",
      "15: import io.narayana.lra.logging.LRALogger;",
      "16: import io.narayana.lra.provider.ParticipantStatusOctetStreamProvider;",
      "17: import org.eclipse.microprofile.lra.annotation.AfterLRA;",
      "18: import org.eclipse.microprofile.lra.annotation.Compensate;",
      "19: import org.eclipse.microprofile.lra.annotation.Complete;",
      "20: import org.eclipse.microprofile.lra.annotation.Forget;",
      "22: import org.eclipse.microprofile.lra.annotation.ParticipantStatus;",
      "23: import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;",
      "",
      "[Added Lines]",
      "8: import static io.narayana.lra.LRAConstants.COORDINATOR_PATH_NAME;",
      "9: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
      "10: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
      "11: import static org.junit.Assert.assertEquals;",
      "12: import static org.junit.Assert.assertFalse;",
      "13: import static org.junit.Assert.assertNotNull;",
      "14: import static org.junit.Assert.assertNull;",
      "15: import static org.junit.Assert.assertTrue;",
      "16: import static org.junit.Assert.fail;",
      "18: import java.net.URI;",
      "19: import java.net.URISyntaxException;",
      "20: import java.time.temporal.ChronoUnit;",
      "21: import java.util.Arrays;",
      "22: import java.util.HashSet;",
      "23: import java.util.List;",
      "24: import java.util.Set;",
      "25: import java.util.StringTokenizer;",
      "26: import java.util.concurrent.TimeUnit;",
      "27: import java.util.stream.IntStream;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31: import org.junit.Test;",
      "32: import org.junit.rules.TestName;",
      "34: import jakarta.ws.rs.ApplicationPath;",
      "39: import jakarta.ws.rs.NotFoundException;",
      "44: import jakarta.ws.rs.WebApplicationException;",
      "45: import jakarta.ws.rs.client.Client;",
      "46: import jakarta.ws.rs.client.ClientBuilder;",
      "",
      "[Removed Lines]",
      "35: import jakarta.ws.rs.DELETE;",
      "36: import jakarta.ws.rs.DefaultValue;",
      "37: import jakarta.ws.rs.GET;",
      "38: import jakarta.ws.rs.HeaderParam;",
      "40: import jakarta.ws.rs.PUT;",
      "41: import jakarta.ws.rs.Path;",
      "42: import jakarta.ws.rs.Produces;",
      "43: import jakarta.ws.rs.QueryParam;",
      "",
      "[Added Lines]",
      "40: import io.narayana.lra.LRAData;",
      "41: import io.narayana.lra.client.NarayanaLRAClient;",
      "42: import io.narayana.lra.coordinator.api.Coordinator;",
      "43: import io.narayana.lra.coordinator.domain.service.LRAService;",
      "44: import io.narayana.lra.coordinator.internal.LRARecoveryModule;",
      "45: import io.narayana.lra.filter.ServerLRAFilter;",
      "46: import io.narayana.lra.logging.LRALogger;",
      "47: import io.narayana.lra.provider.ParticipantStatusOctetStreamProvider;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "50: import jakarta.ws.rs.core.Link;",
      "51: import jakarta.ws.rs.core.MediaType;",
      "52: import jakarta.ws.rs.core.Response;",
      "80:     private static LRAService service;",
      "91:     private NarayanaLRAClient lraClient;",
      "92:     private Client client;",
      "93:     private String coordinatorPath;",
      "",
      "[Removed Lines]",
      "53: import java.io.File;",
      "54: import java.net.URI;",
      "55: import java.net.URISyntaxException;",
      "56: import java.time.temporal.ChronoUnit;",
      "57: import java.util.Arrays;",
      "58: import java.util.HashSet;",
      "59: import java.util.List;",
      "60: import java.util.Objects;",
      "61: import java.util.Set;",
      "62: import java.util.StringTokenizer;",
      "63: import java.util.concurrent.TimeUnit;",
      "64: import java.util.concurrent.atomic.AtomicInteger;",
      "65: import java.util.stream.IntStream;",
      "67: import static io.narayana.lra.LRAConstants.COORDINATOR_PATH_NAME;",
      "68: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
      "69: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_PARENT_CONTEXT_HEADER;",
      "70: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
      "71: import static org.junit.Assert.assertEquals;",
      "72: import static org.junit.Assert.assertFalse;",
      "73: import static org.junit.Assert.assertNotNull;",
      "74: import static org.junit.Assert.assertNull;",
      "75: import static org.junit.Assert.assertTrue;",
      "76: import static org.junit.Assert.fail;",
      "78: public class LRATest {",
      "79:     private static UndertowJaxrsServer server;",
      "82:     static final AtomicInteger compensateCount = new AtomicInteger(0);",
      "83:     static final AtomicInteger completeCount = new AtomicInteger(0);",
      "84:     static final AtomicInteger forgetCount = new AtomicInteger(0);",
      "86:     static final long LRA_SHORT_TIMELIMIT = 10L;",
      "88:     private static LRAStatus status = LRAStatus.Active;",
      "89:     private static final AtomicInteger acceptCount = new AtomicInteger(0);",
      "",
      "[Added Lines]",
      "60: public class LRATest extends LRATestBase {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "95:     @Rule",
      "96:     public TestName testName = new TestName();",
      "304:     @ApplicationPath(\"base\")",
      "305:     public static class LRAParticipant extends Application {",
      "306:         @Override",
      "",
      "[Removed Lines]",
      "98:     @Path(\"/test\")",
      "99:     public static class Participant {",
      "100:         private Response getResult(boolean cancel, URI lraId) {",
      "101:             Response.Status status = cancel ? Response.Status.INTERNAL_SERVER_ERROR : Response.Status.OK;",
      "103:             return Response.status(status).entity(lraId.toASCIIString()).build();",
      "104:         }",
      "106:         @GET",
      "107:         @Path(\"start-end\")",
      "108:         @LRA(value = LRA.Type.REQUIRED)",
      "109:         public Response doInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "110:                                 @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
      "111:                                 @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "112:             LRATest.acceptCount.set(acceptCount);",
      "114:             return getResult(cancel, contextId);",
      "115:         }",
      "117:         @GET",
      "118:         @Path(\"start\")",
      "119:         @LRA(value = LRA.Type.REQUIRED, end = false)",
      "120:         public Response startInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "121:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
      "122:                                    @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
      "123:                                    @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "124:             LRATest.acceptCount.set(acceptCount);",
      "126:             return getResult(cancel, contextId);",
      "127:         }",
      "129:         @PUT",
      "130:         @Path(\"end\")",
      "131:         @LRA(value = LRA.Type.MANDATORY,",
      "132:                 cancelOnFamily = Response.Status.Family.SERVER_ERROR)",
      "133:         public Response endLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "134:                                @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
      "135:                                @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
      "136:                                @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "137:             LRATest.acceptCount.set(acceptCount);",
      "139:             return getResult(cancel, contextId);",
      "140:         }",
      "142:         @GET",
      "143:         @Path(\"time-limit\")",
      "144:         @Produces(MediaType.APPLICATION_JSON)",
      "145:         @LRA(value = LRA.Type.REQUIRED, timeLimit = 500, timeUnit = ChronoUnit.MILLIS)",
      "146:         public Response timeLimit(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {",
      "147:             try {",
      "150:                 Thread.sleep(2000);",
      "151:             } catch (InterruptedException e) {",
      "152:                 LRALogger.logger.debugf(\"Interrupted because time limit elapsed\", e);",
      "153:             }",
      "154:             return Response.status(Response.Status.OK).entity(lraId.toASCIIString()).build();",
      "155:         }",
      "157:         @GET",
      "158:         @Path(\"timed-action\")",
      "159:         @LRA(value = LRA.Type.REQUIRED, end = false, timeLimit = LRA_SHORT_TIMELIMIT) // the default unit is SECONDS",
      "160:         public Response actionWithLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "161:                                       @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "162:             status = LRAStatus.Active;",
      "164:             server.stop(); //simulate a server crash",
      "166:             return getResult(cancel, contextId);",
      "167:         }",
      "169:         @LRA(value = LRA.Type.NESTED, end = false)",
      "170:         @PUT",
      "171:         @Path(\"nested\")",
      "172:         public Response nestedLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "173:                                   @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
      "174:                                   @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "175:             return getResult(cancel, contextId);",
      "176:         }",
      "178:         @LRA(value = LRA.Type.NESTED)",
      "179:         @PUT",
      "180:         @Path(\"nested-with-close\")",
      "181:         public Response nestedLRAWithClose(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "182:                                            @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentId,",
      "183:                                            @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "184:             return getResult(cancel, contextId);",
      "185:         }",
      "187:         @PUT",
      "188:         @Path(\"multiLevelNestedActivity\")",
      "189:         @LRA(value = LRA.Type.MANDATORY, end = false)",
      "190:         public Response multiLevelNestedActivity(",
      "191:                 @HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
      "192:                 @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI nestedLRAId,",
      "193:                 @QueryParam(\"nestedCnt\") @DefaultValue(\"1\") Integer nestedCnt) {",
      "195:             String[] lras = new String[nestedCnt + 1];",
      "196:             lras[0] = nestedLRAId.toASCIIString();",
      "197:             IntStream.range(1, lras.length).forEach(i -> lras[i] = restPutInvocation(nestedLRAId,\"nestedActivity\", \"\"));",
      "199:             return Response.ok(String.join(\",\", lras)).build();",
      "200:         }",
      "202:         @PUT",
      "203:         @Path(\"nestedActivity\")",
      "204:         @LRA(value = LRA.Type.NESTED, end = true)",
      "205:         public Response nestedActivity(@HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
      "206:                                        @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI nestedLRAId) {",
      "207:             return Response.ok(nestedLRAId.toASCIIString()).build();",
      "208:         }",
      "210:         @GET",
      "211:         @Path(\"status\")",
      "212:         public Response getStatus() {",
      "213:             return Response.ok(status.name()).build();",
      "214:         }",
      "216:         @PUT",
      "217:         @Path(\"/complete\")",
      "218:         @Complete",
      "219:         public Response complete(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
      "220:                                  @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
      "221:             if (acceptCount.getAndDecrement() <= 0) {",
      "222:                 completeCount.incrementAndGet();",
      "223:                 acceptCount.set(0);",
      "224:                 return Response.status(Response.Status.OK).entity(ParticipantStatus.Completed).build();",
      "225:             }",
      "227:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Completing).build();",
      "228:         }",
      "230:         @PUT",
      "231:         @Path(\"/compensate\")",
      "232:         @Compensate",
      "233:         public Response compensate(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
      "234:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
      "235:             if (acceptCount.getAndDecrement() <= 0) {",
      "236:                 compensateCount.incrementAndGet();",
      "237:                 acceptCount.set(0);",
      "238:                 return Response.status(Response.Status.OK).entity(ParticipantStatus.Compensated).build();",
      "239:             }",
      "241:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Compensating).build();",
      "242:         }",
      "244:         @PUT",
      "245:         @Path(\"after\")",
      "246:         @AfterLRA",
      "247:         public Response lraEndStatus(LRAStatus endStatus) {",
      "248:             status = endStatus;",
      "250:             return Response.ok().build();",
      "251:         }",
      "253:         @DELETE",
      "254:         @Path(\"/forget\")",
      "255:         @Produces(MediaType.APPLICATION_JSON)",
      "256:         @Forget",
      "257:         public Response forgetWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,",
      "258:                                    @HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId) {",
      "259:             forgetCount.incrementAndGet();",
      "261:             return Response.ok().build();",
      "262:         }",
      "264:         @GET",
      "265:         @Path(\"forget-count\")",
      "266:         public int getForgetCount() {",
      "267:             return forgetCount.get();",
      "268:         }",
      "270:         @PUT",
      "271:         @Path(\"reset-accepted\")",
      "272:         public Response reset() {",
      "273:             LRATest.acceptCount.set(0);",
      "275:             return Response.ok(\"\").build();",
      "276:         }",
      "278:         private String restPutInvocation(URI lraURI, String path, String bodyText) {",
      "279:             String id = \"\";",
      "280:             Client client = ClientBuilder.newClient();",
      "281:             try {",
      "282:                 try (Response response = client",
      "283:                         .target(TestPortProvider.generateURL(\"/base/test\"))",
      "284:                         .path(path)",
      "285:                         .request()",
      "286:                         .header(LRA_HTTP_CONTEXT_HEADER, lraURI)",
      "287:                         .put(Entity.text(bodyText))) {",
      "288:                     if (response.hasEntity()) { // read the entity (to force close on the response)",
      "289:                         id = response.readEntity(String.class);",
      "290:                     }",
      "291:                     if (response.getStatus() != Response.Status.OK.getStatusCode()) {",
      "292:                         throw new WebApplicationException(id + \": error on REST PUT for LRA '\" + lraURI",
      "293:                                 + \"' at path '\" + path + \"' and body '\" + bodyText + \"'\", response);",
      "294:                     }",
      "295:                 }",
      "297:                 return id;",
      "298:             } finally {",
      "299:                 client.close();",
      "300:             }",
      "301:         }",
      "302:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "333:         LRALogger.logger.debugf(\"Starting test %s\", testName);",
      "334:         server = new UndertowJaxrsServer().start();",
      "337:         lraClient = new NarayanaLRAClient();",
      "339:         compensateCount.set(0);",
      "",
      "[Removed Lines]",
      "336:         clearObjectStore();",
      "",
      "[Added Lines]",
      "103:         clearObjectStore(testName);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "353:         LRALogger.logger.debugf(\"Finished test %s\", testName);",
      "354:         lraClient.close();",
      "355:         client.close();",
      "357:         server.stop();",
      "358:     }",
      "",
      "[Removed Lines]",
      "356:         clearObjectStore();",
      "",
      "[Added Lines]",
      "123:         clearObjectStore(testName);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "904:                 .build().toString();",
      "905:     }",
      "929: }",
      "",
      "[Removed Lines]",
      "907:     private void clearObjectStore() {",
      "908:         final String objectStorePath = arjPropertyManager.getObjectStoreEnvironmentBean().getObjectStoreDir();",
      "909:         final File objectStoreDirectory = new File(objectStorePath);",
      "911:         clearDirectory(objectStoreDirectory);",
      "912:     }",
      "914:     private void clearDirectory(final File directory) {",
      "915:         final File[] files = directory.listFiles();",
      "917:         if (files != null) {",
      "918:             for (final File file : Objects.requireNonNull(directory.listFiles())) {",
      "919:                 if (file.isDirectory()) {",
      "920:                     clearDirectory(file);",
      "921:                 }",
      "923:                 if (!file.delete()) {",
      "924:                     LRALogger.logger.infof(\"%s: unable to delete file %s\", testName, file.getName());",
      "925:                 }",
      "926:             }",
      "927:         }",
      "928:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java": [
      "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2:    Copyright The Narayana Authors",
      "3:    SPDX-License-Identifier: Apache-2.0",
      "6: package io.narayana.lra.coordinator.domain.model;",
      "8: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
      "9: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_PARENT_CONTEXT_HEADER;",
      "10: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
      "12: import java.io.File;",
      "13: import java.net.URI;",
      "14: import java.time.temporal.ChronoUnit;",
      "15: import java.util.Objects;",
      "16: import java.util.concurrent.atomic.AtomicInteger;",
      "17: import java.util.stream.IntStream;",
      "19: import org.eclipse.microprofile.lra.annotation.AfterLRA;",
      "20: import org.eclipse.microprofile.lra.annotation.Compensate;",
      "21: import org.eclipse.microprofile.lra.annotation.Complete;",
      "22: import org.eclipse.microprofile.lra.annotation.Forget;",
      "23: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
      "24: import org.eclipse.microprofile.lra.annotation.ParticipantStatus;",
      "25: import org.eclipse.microprofile.lra.annotation.ws.rs.LRA;",
      "26: import org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer;",
      "27: import org.jboss.resteasy.test.TestPortProvider;",
      "28: import org.junit.rules.TestName;",
      "30: import com.arjuna.ats.arjuna.common.arjPropertyManager;",
      "32: import io.narayana.lra.logging.LRALogger;",
      "33: import jakarta.ws.rs.DELETE;",
      "34: import jakarta.ws.rs.DefaultValue;",
      "35: import jakarta.ws.rs.GET;",
      "36: import jakarta.ws.rs.HeaderParam;",
      "37: import jakarta.ws.rs.PUT;",
      "38: import jakarta.ws.rs.Path;",
      "39: import jakarta.ws.rs.Produces;",
      "40: import jakarta.ws.rs.QueryParam;",
      "41: import jakarta.ws.rs.WebApplicationException;",
      "42: import jakarta.ws.rs.client.Client;",
      "43: import jakarta.ws.rs.client.ClientBuilder;",
      "44: import jakarta.ws.rs.client.Entity;",
      "45: import jakarta.ws.rs.core.MediaType;",
      "46: import jakarta.ws.rs.core.Response;",
      "48: public class LRATestBase {",
      "50:     protected static UndertowJaxrsServer server;",
      "51:     static final AtomicInteger compensateCount = new AtomicInteger(0);",
      "52:     static final AtomicInteger completeCount = new AtomicInteger(0);",
      "53:     static final AtomicInteger forgetCount = new AtomicInteger(0);",
      "54:     static final long LRA_SHORT_TIMELIMIT = 10L;",
      "55:     private static LRAStatus status = LRAStatus.Active;",
      "56:     private static final AtomicInteger acceptCount = new AtomicInteger(0);",
      "58:     @Path(\"/test\")",
      "59:     public static class Participant {",
      "60:         private Response getResult(boolean cancel, URI lraId) {",
      "61:             Response.Status status = cancel ? Response.Status.INTERNAL_SERVER_ERROR : Response.Status.OK;",
      "63:             return Response.status(status).entity(lraId.toASCIIString()).build();",
      "64:         }",
      "66:         @GET",
      "67:         @Path(\"start-end\")",
      "68:         @LRA(value = LRA.Type.REQUIRED)",
      "69:         public Response doInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "70:                                 @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
      "71:                                 @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "72:             LRATestBase.acceptCount.set(acceptCount);",
      "74:             return getResult(cancel, contextId);",
      "75:         }",
      "77:         @GET",
      "78:         @Path(\"start\")",
      "79:         @LRA(value = LRA.Type.REQUIRED, end = false)",
      "80:         public Response startInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "81:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
      "82:                                    @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
      "83:                                    @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "84:             LRATestBase.acceptCount.set(acceptCount);",
      "86:             return getResult(cancel, contextId);",
      "87:         }",
      "89:         @PUT",
      "90:         @Path(\"end\")",
      "91:         @LRA(value = LRA.Type.MANDATORY,",
      "92:                 cancelOnFamily = Response.Status.Family.SERVER_ERROR)",
      "93:         public Response endLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "94:                                @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
      "95:                                @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
      "96:                                @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "97:             LRATestBase.acceptCount.set(acceptCount);",
      "99:             return getResult(cancel, contextId);",
      "100:         }",
      "102:         @GET",
      "103:         @Path(\"time-limit\")",
      "104:         @Produces(MediaType.APPLICATION_JSON)",
      "105:         @LRA(value = LRA.Type.REQUIRED, timeLimit = 500, timeUnit = ChronoUnit.MILLIS)",
      "106:         public Response timeLimit(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {",
      "107:             try {",
      "110:                 Thread.sleep(2000);",
      "111:             } catch (InterruptedException e) {",
      "112:                 LRALogger.logger.debugf(\"Interrupted because time limit elapsed\", e);",
      "113:             }",
      "114:             return Response.status(Response.Status.OK).entity(lraId.toASCIIString()).build();",
      "115:         }",
      "117:         @GET",
      "118:         @Path(\"timed-action\")",
      "119:         @LRA(value = LRA.Type.REQUIRED, end = false, timeLimit = LRA_SHORT_TIMELIMIT) // the default unit is SECONDS",
      "120:         public Response actionWithLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "121:                                       @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "122:             status = LRAStatus.Active;",
      "124:             server.stop(); //simulate a server crash",
      "126:             return getResult(cancel, contextId);",
      "127:         }",
      "129:         @LRA(value = LRA.Type.NESTED, end = false)",
      "130:         @PUT",
      "131:         @Path(\"nested\")",
      "132:         public Response nestedLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "133:                                   @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
      "134:                                   @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "135:             return getResult(cancel, contextId);",
      "136:         }",
      "138:         @LRA(value = LRA.Type.NESTED)",
      "139:         @PUT",
      "140:         @Path(\"nested-with-close\")",
      "141:         public Response nestedLRAWithClose(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
      "142:                                            @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentId,",
      "143:                                            @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
      "144:             return getResult(cancel, contextId);",
      "145:         }",
      "147:         @PUT",
      "148:         @Path(\"multiLevelNestedActivity\")",
      "149:         @LRA(value = LRA.Type.MANDATORY, end = false)",
      "150:         public Response multiLevelNestedActivity(",
      "151:                 @HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
      "152:                 @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI nestedLRAId,",
      "153:                 @QueryParam(\"nestedCnt\") @DefaultValue(\"1\") Integer nestedCnt) {",
      "155:             String[] lras = new String[nestedCnt + 1];",
      "156:             lras[0] = nestedLRAId.toASCIIString();",
      "157:             IntStream.range(1, lras.length).forEach(i -> lras[i] = restPutInvocation(nestedLRAId,\"nestedActivity\", \"\"));",
      "159:             return Response.ok(String.join(\",\", lras)).build();",
      "160:         }",
      "162:         @PUT",
      "163:         @Path(\"nestedActivity\")",
      "164:         @LRA(value = LRA.Type.NESTED, end = true)",
      "165:         public Response nestedActivity(@HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId,",
      "166:                                        @HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI nestedLRAId) {",
      "167:             return Response.ok(nestedLRAId.toASCIIString()).build();",
      "168:         }",
      "170:         @GET",
      "171:         @Path(\"status\")",
      "172:         public Response getStatus() {",
      "173:             return Response.ok(status.name()).build();",
      "174:         }",
      "176:         @PUT",
      "177:         @Path(\"/complete\")",
      "178:         @Complete",
      "179:         public Response complete(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
      "180:                                  @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
      "181:             if (acceptCount.getAndDecrement() <= 0) {",
      "182:                 completeCount.incrementAndGet();",
      "183:                 acceptCount.set(0);",
      "184:                 return Response.status(Response.Status.OK).entity(ParticipantStatus.Completed).build();",
      "185:             }",
      "187:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Completing).build();",
      "188:         }",
      "190:         @PUT",
      "191:         @Path(\"/compensate\")",
      "192:         @Compensate",
      "193:         public Response compensate(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
      "194:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
      "195:             if (acceptCount.getAndDecrement() <= 0) {",
      "196:                 compensateCount.incrementAndGet();",
      "197:                 acceptCount.set(0);",
      "198:                 return Response.status(Response.Status.OK).entity(ParticipantStatus.Compensated).build();",
      "199:             }",
      "201:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Compensating).build();",
      "202:         }",
      "204:         @PUT",
      "205:         @Path(\"after\")",
      "206:         @AfterLRA",
      "207:         public Response lraEndStatus(LRAStatus endStatus) {",
      "208:             status = endStatus;",
      "210:             return Response.ok().build();",
      "211:         }",
      "213:         @DELETE",
      "214:         @Path(\"/forget\")",
      "215:         @Produces(MediaType.APPLICATION_JSON)",
      "216:         @Forget",
      "217:         public Response forgetWork(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId,",
      "218:                                    @HeaderParam(LRA_HTTP_RECOVERY_HEADER) URI recoveryId) {",
      "219:             forgetCount.incrementAndGet();",
      "221:             return Response.ok().build();",
      "222:         }",
      "224:         @GET",
      "225:         @Path(\"forget-count\")",
      "226:         public int getForgetCount() {",
      "227:             return forgetCount.get();",
      "228:         }",
      "230:         @PUT",
      "231:         @Path(\"reset-accepted\")",
      "232:         public Response reset() {",
      "233:             LRATestBase.acceptCount.set(0);",
      "235:             return Response.ok(\"\").build();",
      "236:         }",
      "238:         private String restPutInvocation(URI lraURI, String path, String bodyText) {",
      "239:             String id = \"\";",
      "240:             Client client = ClientBuilder.newClient();",
      "241:             try {",
      "242:                 try (Response response = client",
      "243:                         .target(TestPortProvider.generateURL(\"/base/test\"))",
      "244:                         .path(path)",
      "245:                         .request()",
      "246:                         .header(LRA_HTTP_CONTEXT_HEADER, lraURI)",
      "247:                         .put(Entity.text(bodyText))) {",
      "248:                     if (response.hasEntity()) { // read the entity (to force close on the response)",
      "249:                         id = response.readEntity(String.class);",
      "250:                     }",
      "251:                     if (response.getStatus() != Response.Status.OK.getStatusCode()) {",
      "252:                         throw new WebApplicationException(id + \": error on REST PUT for LRA '\" + lraURI",
      "253:                                 + \"' at path '\" + path + \"' and body '\" + bodyText + \"'\", response);",
      "254:                     }",
      "255:                 }",
      "257:                 return id;",
      "258:             } finally {",
      "259:                 client.close();",
      "260:             }",
      "261:         }",
      "262:     }",
      "264:     protected void clearObjectStore(TestName testName) {",
      "265:         final String objectStorePath = arjPropertyManager.getObjectStoreEnvironmentBean().getObjectStoreDir();",
      "266:         final File objectStoreDirectory = new File(objectStorePath);",
      "268:         clearDirectory(objectStoreDirectory, testName);",
      "269:     }",
      "271:     protected void clearDirectory(final File directory, TestName testName) {",
      "272:         final File[] files = directory.listFiles();",
      "274:         if (files != null) {",
      "275:             for (final File file : Objects.requireNonNull(directory.listFiles())) {",
      "276:                 if (file.isDirectory()) {",
      "277:                     clearDirectory(file, testName);",
      "278:                 }",
      "280:                 if (!file.delete()) {",
      "281:                     LRALogger.logger.infof(\"%s: unable to delete file %s\", testName, file.getName());",
      "282:                 }",
      "283:             }",
      "284:         }",
      "285:     }",
      "286: }",
      "",
      "---------------"
    ],
    "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java": [
      "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRAWithParticipantsTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2:    Copyright The Narayana Authors",
      "3:    SPDX-License-Identifier: Apache-2.0",
      "5: package io.narayana.lra.coordinator.domain.model;",
      "7: import static io.narayana.lra.LRAConstants.COORDINATOR_PATH_NAME;",
      "8: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
      "9: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_PARENT_CONTEXT_HEADER;",
      "10: import static org.junit.Assert.assertThrows;",
      "11: import static org.junit.Assert.fail;",
      "13: import java.net.URI;",
      "14: import java.time.temporal.ChronoUnit;",
      "15: import java.util.HashSet;",
      "16: import java.util.Set;",
      "17: import java.util.concurrent.TimeUnit;",
      "18: import java.util.concurrent.locks.ReentrantLock;",
      "20: import org.eclipse.microprofile.lra.annotation.Compensate;",
      "21: import org.eclipse.microprofile.lra.annotation.ParticipantStatus;",
      "22: import org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer;",
      "23: import org.jboss.resteasy.test.TestPortProvider;",
      "24: import org.junit.After;",
      "25: import org.junit.Before;",
      "26: import org.junit.BeforeClass;",
      "27: import org.junit.Rule;",
      "28: import org.junit.Test;",
      "29: import org.junit.rules.TestName;",
      "31: import io.narayana.lra.client.NarayanaLRAClient;",
      "32: import io.narayana.lra.coordinator.api.Coordinator;",
      "33: import io.narayana.lra.filter.ServerLRAFilter;",
      "34: import io.narayana.lra.logging.LRALogger;",
      "35: import io.narayana.lra.provider.ParticipantStatusOctetStreamProvider;",
      "36: import jakarta.ws.rs.ApplicationPath;",
      "37: import jakarta.ws.rs.HeaderParam;",
      "38: import jakarta.ws.rs.PUT;",
      "39: import jakarta.ws.rs.Path;",
      "40: import jakarta.ws.rs.WebApplicationException;",
      "41: import jakarta.ws.rs.core.Application;",
      "42: import jakarta.ws.rs.core.Response;",
      "44: public class LRAWithParticipantsTest extends LRATestBase {",
      "46:     @Rule",
      "47:     public TestName testName = new TestName();",
      "48:     private UndertowJaxrsServer server;",
      "49:     private NarayanaLRAClient lraClient;",
      "50:     private static ReentrantLock lock = new ReentrantLock();",
      "51:     private static boolean joinAttempted;",
      "52:     private static boolean compensateCalled;",
      "53:     @Path(\"/test\")",
      "54:     public static class ParticipantExtended extends Participant {",
      "56:         @PUT",
      "57:         @Path(\"/compensate\")",
      "58:         @Compensate",
      "59:         public Response compensate(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
      "60:                 @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
      "61:             synchronized (lock) {",
      "62:                 compensateCalled = true;",
      "63:                 lock.notify();",
      "64:             }",
      "65:             synchronized (lock) {",
      "66:                 while (!joinAttempted) {",
      "67:                     try {",
      "68:                         lock.wait();",
      "69:                     }",
      "70:                     catch (InterruptedException e) {",
      "71:                         fail(\"Could not wait\");",
      "72:                     }",
      "73:                 }",
      "74:             }",
      "75:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Compensating).build();",
      "76:         }",
      "77:     }",
      "78:     @ApplicationPath(\"service2\")",
      "79:     public static class Service2 extends Application {",
      "81:         @Override",
      "82:         public Set<Class<?>> getClasses() {",
      "83:             HashSet<Class<?>> classes = new HashSet<>();",
      "84:             classes.add(ParticipantExtended.class);",
      "85:             classes.add(ServerLRAFilter.class);",
      "86:             classes.add(ParticipantStatusOctetStreamProvider.class);",
      "87:             return classes;",
      "88:         }",
      "89:     }",
      "90:     @ApplicationPath(\"service3\")",
      "91:     public static class Service3 extends Service2 {",
      "92:     }",
      "93:     @ApplicationPath(\"service4\")",
      "94:     public static class Service4 extends Service2 {",
      "95:     }",
      "96:     @ApplicationPath(\"/\")",
      "97:     public static class LRACoordinator extends Application {",
      "99:         @Override",
      "100:         public Set<Class<?>> getClasses() {",
      "101:             HashSet<Class<?>> classes = new HashSet<>();",
      "102:             classes.add(Coordinator.class);",
      "103:             return classes;",
      "104:         }",
      "105:     }",
      "106:     @BeforeClass",
      "107:     public static void start() {",
      "108:         System.setProperty(\"lra.coordinator.url\", TestPortProvider.generateURL('/' + COORDINATOR_PATH_NAME));",
      "109:     }",
      "111:     @Before",
      "112:     public void before() {",
      "113:         LRALogger.logger.debugf(\"Starting test %s\", testName);",
      "114:         server = new UndertowJaxrsServer().start();",
      "115:         clearObjectStore(testName);",
      "116:         lraClient = new NarayanaLRAClient();",
      "117:         server.deploy(LRACoordinator.class);",
      "118:         server.deployOldStyle(Service2.class);",
      "119:         server.deployOldStyle(Service3.class);",
      "120:         server.deployOldStyle(Service4.class);",
      "121:     }",
      "123:     @After",
      "124:     public void after() {",
      "125:         LRALogger.logger.debugf(\"Finished test %s\", testName);",
      "126:         lraClient.close();",
      "127:         clearObjectStore(testName);",
      "128:         server.stop();",
      "129:     }",
      "131:     @Test",
      "132:     public void testJoinAfterTimeout() {",
      "135:         URI lraId = lraClient.startLRA(null, \"testTimeLimit\", 1000L, ChronoUnit.MILLIS);",
      "137:         lraClient.joinLRA(lraId, null, URI.create(\"http://localhost:8081/service2/test\"), null);",
      "139:         lraClient.joinLRA(lraId, null, URI.create(\"http://localhost:8081/service3/test\"), null);",
      "144:         try {",
      "145:             TimeUnit.SECONDS.sleep(1);",
      "146:         }",
      "147:         catch (InterruptedException e) {",
      "148:             throw new RuntimeException(e);",
      "149:         }",
      "150:         synchronized (lock) {",
      "151:             while (!compensateCalled) {",
      "152:                 try {",
      "153:                     lock.wait();",
      "154:                 }",
      "155:                 catch (InterruptedException e) {",
      "156:                     fail(\"Could not wait\");",
      "157:                 }",
      "158:             }",
      "163:             assertThrows(WebApplicationException.class, () -> {",
      "164:                 lraClient.joinLRA(lraId, null, URI.create(\"http://localhost:8081/service4/test\"), null);",
      "165:             });",
      "166:             joinAttempted = true;",
      "167:             lock.notify();",
      "168:         }",
      "169:     }",
      "170: }",
      "",
      "---------------"
    ],
    "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java": [
      "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "91:     @Test",
      "92:     public void lraMBeanRemoval() throws Exception {",
      "94:         OSEntryBean lraOSEntryBean = null;",
      "95:         try {",
      "96:             lra.begin(Long.MAX_VALUE); // Creating the LRA records in the log store.",
      "",
      "[Removed Lines]",
      "93:         LongRunningAction lra = new LongRunningAction(new Uid());",
      "",
      "[Added Lines]",
      "93:         String lraUrl = \"http://localhost:8080/lra\";",
      "94:         LongRunningAction lra = LRARecoveryModule.getService().startLRA(lraUrl, null, \"client\", Long.MAX_VALUE);",
      "",
      "---------------"
    ],
    "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java": [
      "File: rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java -> rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "165:     @Message(id = 25039, value = \"Invalid argument passed to method: %s\")",
      "166:     String error_invalidArgument(String reason);",
      "169:         Allocate new messages directly above this notice.",
      "170:           - id: use the next id number in numeric sequence. Don't reuse ids.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "168:     @LogMessage(level = WARN)",
      "169:     @Message(id = 25040, value = \"Lock not acquired, enlistment failed: cannot enlist participant, cannot lock transaction\")",
      "170:     void warn_enlistment();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3acf8b9acedca86979213b3f5016d15925700ca6",
      "candidate_info": {
        "commit_hash": "3acf8b9acedca86979213b3f5016d15925700ca6",
        "repo": "jbosstm/narayana",
        "commit_url": "https://github.com/jbosstm/narayana/commit/3acf8b9acedca86979213b3f5016d15925700ca6",
        "files": [
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
          "rts/lra/service-base/src/main/java/io/narayana/lra/LRAConstants.java",
          "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java",
          "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/api/CoordinatorApiIT.java"
        ],
        "message": "JBTM-3929 Participant failover support",
        "before_after_code_files": [
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
          "rts/lra/service-base/src/main/java/io/narayana/lra/LRAConstants.java||rts/lra/service-base/src/main/java/io/narayana/lra/LRAConstants.java",
          "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java",
          "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/api/CoordinatorApiIT.java||rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/api/CoordinatorApiIT.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
            "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
          ],
          "candidate": [
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
            "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java"
          ]
        }
      },
      "candidate_diff": {
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/Coordinator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "641:         }",
          "643:         StringBuilder recoveryUrl = new StringBuilder();",
          "646:         try {",
          "647:             return Response.status(status)",
          "",
          "[Removed Lines]",
          "644:         int status = lraService.joinLRA(recoveryUrl, lraId, timeLimit, null, linkHeader, recoveryUrlBase, userData);",
          "",
          "[Added Lines]",
          "644:         int status = lraService.joinLRA(recoveryUrl, lraId, timeLimit, null, linkHeader, recoveryUrlBase, userData, version);",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/api/RecoveryCoordinator.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: @Tag(name = \"LRA Recovery\")",
          "43: public class RecoveryCoordinator {",
          "47:     private final LRAService lraService;",
          "49:     public RecoveryCoordinator() {",
          "",
          "[Removed Lines]",
          "44:     @Context",
          "45:     private UriInfo context;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:             @Parameter(name = \"RecCoordId\",",
          "68:                 description = \"An identifier that was returned by the coordinator when a participant joined the LRA\",",
          "69:                 required = true)",
          "74:         if (compensatorUrl == null) {",
          "75:             String errorMsg = LRALogger.i18nLogger.warn_cannotFoundCompensatorUrl(rcvCoordId, lraId);",
          "",
          "[Removed Lines]",
          "70:             @PathParam(\"RecCoordId\") String rcvCoordId) throws NotFoundException {",
          "72:         String compensatorUrl = lraService.getParticipant(rcvCoordId);",
          "",
          "[Added Lines]",
          "67:             @PathParam(\"RecCoordId\") String rcvCoordId,",
          "68:             @Context UriInfo uriInfo) throws NotFoundException {",
          "70:         String context = uriInfo.getRequestUri().toASCIIString();",
          "71:         String compensatorUrl = lraService.getParticipant(context);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "102:                 description = \"An identifier that was returned by the coordinator when a participant joined the LRA\",",
          "103:                 required = true)",
          "104:             @PathParam(\"RecCoordId\") String rcvCoordId,",
          "105:             String newCompensatorUrl) throws NotFoundException {",
          "108:         if (compensatorUrl != null) {",
          "109:             URI lra;",
          "",
          "[Removed Lines]",
          "106:         String compensatorUrl = lraService.getParticipant(rcvCoordId);",
          "",
          "[Added Lines]",
          "104:             @Context UriInfo uriInfo,",
          "106:         String context = uriInfo.getRequestUri().toASCIIString();",
          "107:         String compensatorUrl = lraService.getParticipant(context);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117:                         Response.status(INTERNAL_SERVER_ERROR.getStatusCode()).entity(errMsg).build());",
          "118:             }",
          "123:         }",
          "125:         String errorMsg = LRALogger.i18nLogger.warn_cannotFoundCompensatorUrl(rcvCoordId, lraId);",
          "",
          "[Removed Lines]",
          "120:             lraService.updateRecoveryURI(lra, newCompensatorUrl, rcvCoordId, true);",
          "122:             return context.getRequestUri().toASCIIString();",
          "",
          "[Added Lines]",
          "121:             lraService.updateRecoveryURI(lra, newCompensatorUrl, context, true);",
          "123:             return context;",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParticipantRecord.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1014:         return participantPath;",
          "1015:     }",
          "1017:     void setRecoveryURI(String recoveryURI) {",
          "1018:         try {",
          "1019:             this.recoveryURI = new URI(recoveryURI);",
          "1020:         } catch (URISyntaxException e) {",
          "1021:             String errorMsg = LRALogger.i18nLogger.error_invalidRecoveryUrlToJoinLRAURI(recoveryURI, lraId);",
          "1025:             throw new WebApplicationException(errorMsg, e,",
          "1026:                     Response.status(BAD_REQUEST).entity(errorMsg).build());",
          "1027:         }",
          "1028:     }",
          "1032:     }",
          "1034:     public String getCompensator() {",
          "",
          "[Removed Lines]",
          "1023:             LRALogger.logger.info(errorMsg);",
          "1030:     void setRecoveryURI(String recoveryUrlBase, String txId, String coordinatorId) {",
          "1031:         setRecoveryURI(recoveryUrlBase + txId + '/' + coordinatorId);",
          "",
          "[Added Lines]",
          "1018:     void updateCallbacks(String linkStr) {",
          "1019:         Exception e = parseLink(linkStr);",
          "1021:         if (e != null) {",
          "1022:             String errorMsg = LRALogger.i18nLogger.warn_invalid_compensator(e.getMessage(), linkStr);",
          "1024:             throw new WebApplicationException(errorMsg, e,",
          "1025:                     Response.status(BAD_REQUEST).entity(errorMsg).build());",
          "1026:         }",
          "1027:     }",
          "1035:             if (LRALogger.logger.isDebugEnabled()) {",
          "1036:                 LRALogger.logger.debugf(errorMsg);",
          "1037:             }",
          "1044:     void setRecoveryURI(String recoveryUrlBase, String txId, String participantId) {",
          "1045:         setRecoveryURI(String.format(\"%s/%s/%s\", recoveryUrlBase, txId, participantId));",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: import com.arjuna.ats.arjuna.coordinator.RecordListIterator;",
          "15: import com.arjuna.ats.arjuna.coordinator.RecordType;",
          "16: import io.narayana.lra.Current;",
          "17: import io.narayana.lra.LRAData;",
          "18: import io.narayana.lra.logging.LRALogger;",
          "19: import com.arjuna.ats.arjuna.state.InputObjectState;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: import io.narayana.lra.LRAConstants;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "725:     }",
          "727:     public LRAParticipantRecord enlistParticipant(URI coordinatorUrl, String participantUrl, String recoveryUrlBase,",
          "729:         ReentrantLock lock = tryLockTransaction();",
          "730:         if (lock == null) {",
          "731:             LRALogger.i18nLogger.warn_enlistment();",
          "",
          "[Removed Lines]",
          "728:                                                   long timeLimit, String compensatorData) throws UnsupportedEncodingException {",
          "",
          "[Added Lines]",
          "729:                                                   long timeLimit, String compensatorData, String version)",
          "730:             throws UnsupportedEncodingException {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "739:                     return participant; // must have already been enlisted",
          "740:                 }",
          "741:                 participant = doEnlistParticipant(coordinatorUrl, participantUrl, recoveryUrlBase, timeLimit,",
          "743:                 if (participant != null) {",
          "745:                     deactivate(); // if it fails the superclass will have logged a warning",
          "",
          "[Removed Lines]",
          "742:                         compensatorData);",
          "",
          "[Added Lines]",
          "744:                         compensatorData, version);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "755:     }",
          "757:     private LRAParticipantRecord doEnlistParticipant(URI coordinatorUrl, String participantUrl, String recoveryUrlBase,",
          "759:         LRAParticipantRecord p = new LRAParticipantRecord(this, lraService, participantUrl, compensatorData);",
          "760:         String pid = p.get_uid().fileStringForm();",
          "766:         if (add(p) != AddOutcome.AR_REJECTED) {",
          "767:             setTimeLimit(timeLimit);",
          "",
          "[Removed Lines]",
          "758:                                                    long timeLimit, String compensatorData) {",
          "762:         String txId = URLEncoder.encode(coordinatorUrl.toASCIIString(), StandardCharsets.UTF_8);",
          "764:         p.setRecoveryURI(recoveryUrlBase, txId, pid);",
          "",
          "[Added Lines]",
          "760:                                                    long timeLimit, String compensatorData, String version) {",
          "772:         if (version != null && (version.equals(LRAConstants.API_VERSION_1_0) || version.equals(LRAConstants.API_VERSION_1_1))) {",
          "774:             String txId = URLEncoder.encode(coordinatorUrl.toASCIIString(), StandardCharsets.UTF_8);",
          "776:             if (LRALogger.logger.isDebugEnabled()) {",
          "777:                 LRALogger.logger.debugf(",
          "778:                         \"LongRunningAction enlist: using old style recovery URL (txId=%s participantId=%s)\",",
          "779:                         coordinatorUrl, txId);",
          "780:             }",
          "782:             p.setRecoveryURI(recoveryUrlBase, txId, pid);",
          "783:         } else {",
          "785:             p.setRecoveryURI(recoveryUrlBase, this.get_uid().fileStringForm(), pid);",
          "786:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1101:         }",
          "1102:     }",
          "1107:         if (lraRecord != null) {",
          "1108:             try {",
          "1109:                 lraRecord.setRecoveryURI(recoveryUri);",
          "1112:                 if (!deactivate()) {",
          "1113:                     if (LRALogger.logger.isInfoEnabled()) {",
          "",
          "[Removed Lines]",
          "1104:     public void updateRecoveryURI(String compensatorUri, String recoveryUri) {",
          "1105:         LRAParticipantRecord lraRecord = findLRAParticipant(compensatorUri, false);",
          "",
          "[Added Lines]",
          "1126:     public void updateRecoveryURI(String linkHeader, String recoveryUri) {",
          "1127:         LRAParticipantRecord lraRecord = findLRAParticipant(recoveryUri, false);",
          "1132:                 lraRecord.updateCallbacks(linkHeader);",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/service/LRAService.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:                     .entity(errorMsg).build());",
          "328:         }",
          "329:     }",
          "331:     public int joinLRA(StringBuilder recoveryUrl, URI lra, long timeLimit,",
          "332:                                     String compensatorUrl, String linkHeader, String recoveryUrlBase,",
          "333:                                     StringBuilder compensatorData) {",
          "334:         if (lra ==  null) {",
          "335:             lraTrace(null, \"Error missing LRA header in join request\");",
          "336:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "333:         return joinLRA(recoveryUrl, lra,timeLimit,  compensatorUrl, linkHeader, recoveryUrlBase, compensatorData, null);",
          "334:     }",
          "336:     public int joinLRA(StringBuilder recoveryUrl, URI lra, long timeLimit,",
          "337:                                     String compensatorUrl, String linkHeader, String recoveryUrlBase,",
          "338:                                     StringBuilder compensatorData, String version) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "374:             if (compensatorData != null) {",
          "375:                 participant = transaction.enlistParticipant(lra,",
          "376:                         linkHeader != null ? linkHeader : compensatorUrl, recoveryUrlBase,",
          "379:                 compensatorData.setLength(0);",
          "",
          "[Removed Lines]",
          "377:                         timeLimit, compensatorData.toString());",
          "",
          "[Added Lines]",
          "382:                         timeLimit, compensatorData.toString(), version);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:             } else {",
          "385:                 participant = transaction.enlistParticipant(lra,",
          "386:                         linkHeader != null ? linkHeader : compensatorUrl, recoveryUrlBase,",
          "388:             }",
          "389:         } catch (UnsupportedEncodingException e) {",
          "390:             return Response.Status.PRECONDITION_FAILED.getStatusCode();",
          "",
          "[Removed Lines]",
          "387:                         timeLimit, null);",
          "",
          "[Added Lines]",
          "392:                         timeLimit, null, version);",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: import static io.narayana.lra.LRAConstants.COORDINATOR_PATH_NAME;",
          "9: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
          "10: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
          "11: import static org.junit.Assert.assertEquals;",
          "12: import static org.junit.Assert.assertFalse;",
          "13: import static org.junit.Assert.assertNotNull;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: import static org.hamcrest.Matchers.containsString;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: import java.net.URI;",
          "19: import java.net.URISyntaxException;",
          "20: import java.time.temporal.ChronoUnit;",
          "21: import java.util.Arrays;",
          "22: import java.util.HashSet;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: import java.net.URLEncoder;",
          "22: import java.nio.charset.StandardCharsets;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "26: import java.util.concurrent.TimeUnit;",
          "27: import java.util.stream.IntStream;",
          "29: import org.eclipse.microprofile.lra.annotation.LRAStatus;",
          "30: import org.jboss.resteasy.plugins.server.undertow.UndertowJaxrsServer;",
          "31: import org.jboss.resteasy.test.TestPortProvider;",
          "32: import org.junit.After;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: import io.narayana.lra.LRAConstants;",
          "34: import org.hamcrest.MatcherAssert;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "58: import jakarta.ws.rs.core.Response;",
          "60: public class LRATest extends LRATestBase {",
          "62:     private static LRAService service;",
          "64:     private NarayanaLRAClient lraClient;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     static final String LRA_API_VERSION_HEADER_NAME = \"Narayana-LRA-API-version\";",
          "67:     static final String RECOVERY_HEADER_NAME = \"Long-Running-Action-Recovery\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "124:         server.stop();",
          "125:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "133:     @Test",
          "134:     public void joinWithVersionTest() {",
          "135:         URI lraId = lraClient.startLRA(\"joinLRAWithBody\");",
          "136:         String version = LRAConstants.API_VERSION_1_2;",
          "137:         String encodedLraId = URLEncoder.encode(lraId.toString(), StandardCharsets.UTF_8); // must be valid",
          "139:         try (Response response = client.target(coordinatorPath)",
          "140:                 .path(encodedLraId)",
          "141:                 .request()",
          "142:                 .header(LRA_API_VERSION_HEADER_NAME, version)",
          "144:                 .put(Entity.text(\"\"))) {",
          "145:             Assert.assertEquals(\"Expected joining LRA succeeded, PUT/200 is expected.\",",
          "146:                     Response.Status.OK.getStatusCode(), response.getStatus());",
          "147:             Assert.assertEquals(\"Expected API header to be returned with the version provided in request\",",
          "148:                     version, response.getHeaderString(LRA_API_VERSION_HEADER_NAME));",
          "149:             String recoveryHeaderUrlMessage = response.getHeaderString(RECOVERY_HEADER_NAME);",
          "150:             String recoveryUrlBody = response.readEntity(String.class);",
          "151:             URI recoveryUrlLocation = response.getLocation();",
          "152:             Assert.assertEquals(\"Expecting returned body and recovery header have got the same content\",",
          "153:                     recoveryUrlBody, recoveryHeaderUrlMessage);",
          "154:             Assert.assertEquals(\"Expecting returned body and location have got the same content\",",
          "155:                     recoveryUrlBody, recoveryUrlLocation.toString());",
          "156:             MatcherAssert.assertThat(\"Expected returned message contains the sub-path of LRA recovery URL\",",
          "157:                     recoveryUrlBody, containsString(\"lra-coordinator/recovery\"));",
          "159:             MatcherAssert.assertThat(\"Expected returned message contains the LRA id\",",
          "160:                     recoveryUrlBody, containsString(LRAConstants.getLRAUid(lraId)));",
          "161:         } finally {",
          "162:             lraClient.cancelLRA(lraId);",
          "163:         }",
          "164:     }",
          "166:     @Test",
          "167:     public void joinWithOldVersionTest() {",
          "168:         URI lraId = lraClient.startLRA(\"joinLRAWithBody\");",
          "169:         String version = LRAConstants.API_VERSION_1_1;",
          "170:         String encodedLraId = URLEncoder.encode(lraId.toString(), StandardCharsets.UTF_8); // must be valid",
          "172:         try (Response response = client.target(coordinatorPath)",
          "173:                 .path(encodedLraId)",
          "174:                 .request()",
          "175:                 .header(LRA_API_VERSION_HEADER_NAME, version)",
          "177:                 .put(Entity.text(\"\"))) {",
          "178:             Assert.assertEquals(\"Expected joining LRA succeeded, PUT/200 is expected.\",",
          "179:                     Response.Status.OK.getStatusCode(), response.getStatus());",
          "180:             Assert.assertEquals(\"Expected API header to be returned with the version provided in request\",",
          "181:                     version, response.getHeaderString(LRA_API_VERSION_HEADER_NAME));",
          "182:             String recoveryHeaderUrlMessage = response.getHeaderString(RECOVERY_HEADER_NAME);",
          "183:             String recoveryUrlBody = response.readEntity(String.class);",
          "184:             URI recoveryUrlLocation = response.getLocation();",
          "185:             Assert.assertEquals(\"Expecting returned body and recovery header have got the same content\",",
          "186:                     recoveryUrlBody, recoveryHeaderUrlMessage);",
          "187:             Assert.assertEquals(\"Expecting returned body and location have got the same content\",",
          "188:                     recoveryUrlBody, recoveryUrlLocation.toString());",
          "189:             MatcherAssert.assertThat(\"Expected returned message contains the sub-path of LRA recovery URL\",",
          "190:                     recoveryUrlBody, containsString(\"lra-coordinator/recovery\"));",
          "191:             MatcherAssert.assertThat(\"Expected returned message contains the LRA id\",",
          "192:                     recoveryUrlBody, containsString(encodedLraId));",
          "193:         } finally {",
          "194:             lraClient.cancelLRA(lraId);",
          "195:         }",
          "196:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "165:         assertTrue(\"LRA should have closed\", status == null || status == LRAStatus.Closed);",
          "166:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:     @Test",
          "244:     public void testReplaceCompensator() throws URISyntaxException {",
          "246:         int fallbackCompensations = fallbackCompensateCount.get();",
          "248:         String urls = client.target(TestPortProvider.generateURL(\"/base/test/start-with-recovery\")).request().get(String.class);",
          "249:         String[] tokens = urls.split(\",\");",
          "250:         assertTrue(\"response is missing components for the lraId and/or recoveryId\",",
          "251:                 tokens.length >= 2);",
          "253:         String lraUrl = tokens[tokens.length - 2];",
          "254:         String recoveryUrl = tokens[tokens.length - 1];",
          "258:         String newCompensateCallback = TestPortProvider.generateURL(\"/base/test/fallback-compensate\");",
          "260:         String newCompensator = String.format(\"<%s>; rel=compensate\", newCompensateCallback);",
          "263:         try (Response r1 = client.target(recoveryUrl).request().get()) {",
          "264:             int res = r1.getStatus();",
          "265:             if (res != Response.Status.OK.getStatusCode()) {",
          "267:                 fail(\"get recovery url failed: \" + res);",
          "268:             }",
          "270:             String linkHeader = r1.readEntity(String.class);",
          "273:             String compensateRelationType = \"rel=\\\"compensate\\\"\";",
          "275:             MatcherAssert.assertThat(\"Compensator link header is missing the compensate rel type\",",
          "276:                     linkHeader, containsString(compensateRelationType));",
          "277:         }",
          "280:         try (Response r1 = client.target(recoveryUrl).request().put(Entity.text(newCompensator))) {",
          "281:             int res = r1.getStatus();",
          "282:             if (res != Response.Status.OK.getStatusCode()) {",
          "284:                 try (Response r = client.target(String.format(\"%s/cancel\", lraUrl)).request().put(null)) {",
          "285:                     if (r.getStatus() != Response.Status.OK.getStatusCode()) {",
          "286:                         fail(\"move and cancel failed\");",
          "287:                     }",
          "288:                 }",
          "289:                 fail(\"move failed\");",
          "290:             }",
          "291:         }",
          "294:         try (Response r2 = client.target(String.format(\"%s/cancel\", lraUrl)).request().put(null)) {",
          "295:             int res = r2.getStatus();",
          "296:             if (res != Response.Status.OK.getStatusCode()) {",
          "297:                 fail(\"unable to cleanup: \" + res);",
          "298:             }",
          "299:         }",
          "302:         assertEquals(fallbackCompensations + 1, fallbackCompensateCount.get());",
          "303:         LRAStatus status = getStatus(new URI(lraUrl));",
          "304:         assertTrue(\"LRA should have cancelled\", status == null || status == LRAStatus.Cancelled);",
          "305:     }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     protected static UndertowJaxrsServer server;",
          "51:     static final AtomicInteger compensateCount = new AtomicInteger(0);",
          "52:     static final AtomicInteger completeCount = new AtomicInteger(0);",
          "53:     static final AtomicInteger forgetCount = new AtomicInteger(0);",
          "54:     static final long LRA_SHORT_TIMELIMIT = 10L;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52:     static final AtomicInteger fallbackCompensateCount = new AtomicInteger(0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:         @LRA(value = LRA.Type.REQUIRED, end = false)",
          "80:         public Response startInLRA(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "81:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
          "82:                                    @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
          "83:                                    @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "84:             LRATestBase.acceptCount.set(acceptCount);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:                                    @HeaderParam(LRA_HTTP_RECOVERY_HEADER) String recoveryId,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "86:             return getResult(cancel, contextId);",
          "87:         }",
          "89:         @PUT",
          "90:         @Path(\"end\")",
          "91:         @LRA(value = LRA.Type.MANDATORY,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:         @GET",
          "92:         @Path(\"start-with-recovery\")",
          "93:         @LRA(value = LRA.Type.REQUIRED, end = false)",
          "94:         public Response startInLRAWithRecovery(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextId,",
          "95:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA,",
          "96:                                    @HeaderParam(LRA_HTTP_RECOVERY_HEADER) String recoveryId,",
          "97:                                    @DefaultValue(\"0\") @QueryParam(\"accept\") Integer acceptCount,",
          "98:                                    @DefaultValue(\"false\") @QueryParam(\"cancel\") Boolean cancel) {",
          "99:             LRATestBase.acceptCount.set(acceptCount);",
          "101:             Response.Status status = cancel ? Response.Status.INTERNAL_SERVER_ERROR : Response.Status.OK;",
          "104:             return Response.status(status).entity(String.format(\"%s,%s\", contextId, recoveryId)).build();",
          "105:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "201:             return Response.status(Response.Status.ACCEPTED).entity(ParticipantStatus.Compensating).build();",
          "202:         }",
          "204:         @PUT",
          "205:         @Path(\"after\")",
          "206:         @AfterLRA",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:         @PUT",
          "223:         @Path(\"/fallback-compensate\")",
          "224:         public Response alternateCompensate(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI contextLRA,",
          "225:                                    @HeaderParam(LRA_HTTP_PARENT_CONTEXT_HEADER) URI parentLRA) {",
          "226:             Response r = compensate(contextLRA, parentLRA);",
          "228:             if (r.getStatus() == Response.Status.OK.getStatusCode()) {",
          "229:                 fallbackCompensateCount.incrementAndGet();",
          "230:             }",
          "232:             return r;",
          "233:         }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/tools/osb/mbean/ObjStoreBrowserLRATest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:             String coordinatorUrl = \"http://localhost:8080/lra-coordinator\";",
          "99:             String participantUrl = \"http://localhost:8080/lra-participant\";",
          "100:             LRAParticipantRecord lraParticipant = lra.enlistParticipant(URI.create(coordinatorUrl), participantUrl,",
          "103:             osb.probe();",
          "",
          "[Removed Lines]",
          "101:                     \"/recover\", Long.MAX_VALUE, null);",
          "",
          "[Added Lines]",
          "101:                     \"/recover\", Long.MAX_VALUE, null, null);",
          "",
          "---------------"
        ],
        "rts/lra/service-base/src/main/java/io/narayana/lra/LRAConstants.java||rts/lra/service-base/src/main/java/io/narayana/lra/LRAConstants.java": [
          "File: rts/lra/service-base/src/main/java/io/narayana/lra/LRAConstants.java -> rts/lra/service-base/src/main/java/io/narayana/lra/LRAConstants.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "32:     public static final String API_VERSION_1_0 = \"1.0\";",
          "33:     public static final String API_VERSION_1_1 = \"1.1\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:     public static final String API_VERSION_1_2 = \"1.2\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     public static final String[] NARAYANA_LRA_API_SUPPORTED_VERSIONS = new String[] {",
          "43:             API_VERSION_1_0,",
          "45:     };",
          "53:     public static final String NARAYANA_LRA_API_VERSION_HEADER_NAME = \"Narayana-LRA-API-version\";",
          "",
          "[Removed Lines]",
          "44:             API_VERSION_1_1",
          "51:     public static final String CURRENT_API_VERSION_STRING = API_VERSION_1_1;",
          "",
          "[Added Lines]",
          "45:             API_VERSION_1_1,",
          "46:             API_VERSION_1_2",
          "53:     public static final String CURRENT_API_VERSION_STRING = API_VERSION_1_2;",
          "",
          "---------------"
        ],
        "rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java||rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java": [
          "File: rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java -> rts/lra/service-base/src/main/java/io/narayana/lra/logging/LraI18nLogger.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     @LogMessage(level = WARN)",
          "169:     @Message(id = 25040, value = \"Lock not acquired, enlistment failed: cannot enlist participant, cannot lock transaction\")",
          "170:     void warn_enlistment();",
          "172:         Allocate new messages directly above this notice.",
          "173:           - id: use the next id number in numeric sequence. Don't reuse ids.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:     @Message(id = 25041, value = \"Participant provided invalid callback endpoints, reason: %s link: %s\")",
          "173:     String warn_invalid_compensator(String reason, String linkStr);",
          "",
          "---------------"
        ],
        "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/api/CoordinatorApiIT.java||rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/api/CoordinatorApiIT.java": [
          "File: rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/api/CoordinatorApiIT.java -> rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/api/CoordinatorApiIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import java.util.Optional;",
          "37: import java.util.stream.Collectors;",
          "39: import static org.hamcrest.Matchers.containsString;",
          "40: import static org.hamcrest.Matchers.emptyCollectionOf;",
          "41: import static org.hamcrest.Matchers.greaterThan;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import static io.narayana.lra.LRAConstants.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "557:     @Test",
          "558:     public void joinLRAWithBody() {",
          "559:         URI lraId = lraClient.startLRA(testRule.getMethodName());",
          "560:         lrasToAfterFinish.add(lraId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "559:     @ValidTestVersions({API_VERSION_1_0, API_VERSION_1_1}) // the recovery url was unusable in previous versions",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "584:         }",
          "585:     }",
          "591:     @Test",
          "592:     public void joinLRAWithLinkSimple() {",
          "593:         URI lraId = lraClient.startLRA(testRule.getMethodName());",
          "594:         lrasToAfterFinish.add(lraId);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589:     @Test",
          "590:     @ValidTestVersions({API_VERSION_1_2}) // the recovery url is usable versions after API_VERSION_1_1",
          "592:     public void joinLRAWithBodyWithCorrectRecoveryHeader() {",
          "593:         URI lraId = lraClient.startLRA(testRule.getMethodName());",
          "594:         lrasToAfterFinish.add(lraId);",
          "595:         String encodedLraId = URLEncoder.encode(lraId.toString(), StandardCharsets.UTF_8); // must be valid",
          "597:         try (Response response = client.target(coordinatorUrl)",
          "598:                 .path(encodedLraId)",
          "599:                 .request()",
          "600:                 .header(LRA_API_VERSION_HEADER_NAME, version)",
          "602:                 .put(Entity.text(\"\"))) {",
          "603:             Assert.assertEquals(\"Expected joining LRA succeeded, PUT/200 is expected.\",",
          "604:                     Status.OK.getStatusCode(), response.getStatus());",
          "605:             Assert.assertEquals(\"Expected API header to be returned with the version provided in request\",",
          "606:                     version, response.getHeaderString(LRA_API_VERSION_HEADER_NAME));",
          "607:             String recoveryHeaderUrlMessage = response.getHeaderString(RECOVERY_HEADER_NAME);",
          "608:             String recoveryUrlBody = response.readEntity(String.class);",
          "609:             URI recoveryUrlLocation = response.getLocation();",
          "610:             Assert.assertEquals(\"Expecting returned body and recovery header have got the same content\",",
          "611:                     recoveryUrlBody, recoveryHeaderUrlMessage);",
          "612:             Assert.assertEquals(\"Expecting returned body and location have got the same content\",",
          "613:                     recoveryUrlBody, recoveryUrlLocation.toString());",
          "614:             MatcherAssert.assertThat(\"Expected returned message contains the sub-path of LRA recovery URL\",",
          "615:                     recoveryUrlBody, containsString(\"lra-coordinator/recovery\"));",
          "616:             MatcherAssert.assertThat(\"Expected returned message contains the LRA id\",",
          "617:                     recoveryUrlBody, containsString(LRAConstants.getLRAUid(lraId)));",
          "618:         }",
          "619:     }",
          "626:     @ValidTestVersions({API_VERSION_1_0, API_VERSION_1_1})",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "618:         }",
          "619:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656:     @Test",
          "657:     @ValidTestVersions({API_VERSION_1_2})",
          "658:     public void joinLRAWithLinkSimpleWithCorrectRecoveryHeader() {",
          "659:         URI lraId = lraClient.startLRA(testRule.getMethodName());",
          "660:         lrasToAfterFinish.add(lraId);",
          "662:         String encodedLraId = URLEncoder.encode(lraId.toString(), StandardCharsets.UTF_8);",
          "663:         try (Response response = client.target(coordinatorUrl)",
          "664:                 .path(encodedLraId)",
          "665:                 .request()",
          "666:                 .header(LRA_API_VERSION_HEADER_NAME, version)",
          "667:                 .header(\"Link\", \"http://compensator.url:8080\")",
          "668:                 .put(null)) {",
          "669:             Assert.assertEquals(\"Expected joining LRA succeeded, PUT/200 is expected.\",",
          "670:                     Status.OK.getStatusCode(), response.getStatus());",
          "671:             Assert.assertEquals(\"Expected API header to be returned with the version provided in request\",",
          "672:                     version, response.getHeaderString(LRA_API_VERSION_HEADER_NAME));",
          "673:             String recoveryHeaderUrlMessage = response.getHeaderString(RECOVERY_HEADER_NAME);",
          "674:             String recoveryUrlBody = response.readEntity(String.class);",
          "675:             URI recoveryUrlLocation = response.getLocation();",
          "676:             Assert.assertEquals(\"Expecting returned body and recovery header have got the same content\",",
          "677:                     recoveryUrlBody, recoveryHeaderUrlMessage);",
          "678:             Assert.assertEquals(\"Expecting returned body and location have got the same content\",",
          "679:                     recoveryUrlBody, recoveryUrlLocation.toString());",
          "680:             MatcherAssert.assertThat(\"Expected returned message contains the sub-path of LRA recovery URL\",",
          "681:                     recoveryUrlBody, containsString(\"lra-coordinator/recovery\"));",
          "682:             MatcherAssert.assertThat(\"Expected returned message contains the LRA id\",",
          "683:                     recoveryUrlBody, containsString(LRAConstants.getLRAUid(lraId)));",
          "684:         }",
          "685:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16362da100262aaaa876c835faffe60d6347852d",
      "candidate_info": {
        "commit_hash": "16362da100262aaaa876c835faffe60d6347852d",
        "repo": "jbosstm/narayana",
        "commit_url": "https://github.com/jbosstm/narayana/commit/16362da100262aaaa876c835faffe60d6347852d",
        "files": [
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java"
        ],
        "message": "JBTM-3331 Fix test for timeout during enlistment using a byteman rule to abort the LRA on entry to enlist method plus fix",
        "before_after_code_files": [
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java"
          ],
          "candidate": [
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java"
          ]
        }
      },
      "candidate_diff": {
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "416:     boolean isFinished() {",
          "417:         switch (status) {",
          "418:             case Closed:",
          "420:             case Cancelled:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:             case Active:",
          "419:                 return false; // this is not covered by the default arm of the switch if there are no participants",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "809:             p.setRecoveryURI(recoveryUrlBase, this.get_uid().fileStringForm(), pid);",
          "810:         }",
          "812:         if (add(p) != AddOutcome.AR_REJECTED) {",
          "813:             setTimeLimit(timeLimit);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "814:         if (isInEndState()) {",
          "815:             return null;",
          "816:         }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/BytemanHelper.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package io.narayana.lra.coordinator.domain.model;",
          "5: public class BytemanHelper {",
          "21:     }",
          "22: }",
          "",
          "[Removed Lines]",
          "3: import java.util.concurrent.atomic.AtomicBoolean;",
          "6:     static AtomicBoolean businessCalled = new AtomicBoolean(false);",
          "7:     public void rendezvousEnlistAbort() throws InterruptedException {",
          "8:         synchronized (businessCalled) {",
          "9:             businessCalled.set(true);",
          "10:             businessCalled.notifyAll();",
          "11:             businessCalled.wait();",
          "12:         }",
          "13:     }",
          "14:     public void rendezvousAbortEnlist() throws InterruptedException {",
          "15:         synchronized (businessCalled) {",
          "16:             while (!businessCalled.get()) {",
          "17:                 businessCalled.wait();",
          "18:             }",
          "19:             businessCalled.notify();",
          "20:         }",
          "",
          "[Added Lines]",
          "3: import java.lang.reflect.InvocationTargetException;",
          "4: import java.lang.reflect.Method;",
          "7:     public void abortLRA(LongRunningAction lra) throws NoSuchMethodException, InvocationTargetException,",
          "8:             IllegalAccessException {",
          "9:         Method method = lra.getClass().getDeclaredMethod(\"abortLRA\");",
          "10:         method.setAccessible(true);",
          "11:         method.invoke(lra);",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
          "11: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
          "12: import static org.hamcrest.Matchers.containsString;",
          "15: import java.net.URI;",
          "16: import java.net.URISyntaxException;",
          "",
          "[Removed Lines]",
          "13: import static org.junit.Assert.*;",
          "",
          "[Added Lines]",
          "13: import static org.junit.Assert.assertEquals;",
          "14: import static org.junit.Assert.assertNotEquals;",
          "15: import static org.junit.Assert.assertFalse;",
          "16: import static org.junit.Assert.assertNotNull;",
          "17: import static org.junit.Assert.assertNull;",
          "18: import static org.junit.Assert.assertTrue;",
          "19: import static org.junit.Assert.fail;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1016:     @Test",
          "1017:     @BMRules(rules={",
          "1024:     })",
          "1025:     public void testTimeoutWhileJoining() throws URISyntaxException {",
          "1026:         String target = TestPortProvider.generateURL(\"/base/test/timeout-while-joining\");",
          "",
          "[Removed Lines]",
          "1018:         @BMRule(name = \"Rendezvous doEnlistParticipant\", targetClass = \"io.narayana.lra.coordinator.domain.model.LongRunningAction\",",
          "1019:                 targetMethod = \"enlistParticipant\", targetLocation = \"ENTRY\", helper = \"io.narayana.lra.coordinator.domain.model.BytemanHelper\",",
          "1020:                 action = \"rendezvousEnlistAbort();\"),",
          "1021:         @BMRule(name = \"Rendezvous abortLRA\", targetClass = \"io.narayana.lra.coordinator.domain.model.LongRunningAction\",",
          "1022:                 targetMethod = \"abortLRA\", targetLocation = \"EXIT\", helper = \"io.narayana.lra.coordinator.domain.model.BytemanHelper\",",
          "1023:                 action = \"rendezvousAbortEnlist();\")",
          "",
          "[Added Lines]",
          "1025:             @BMRule(name = \"Rendezvous doEnlistParticipant\",",
          "1026:                     targetClass = \"io.narayana.lra.coordinator.domain.model.LongRunningAction\",",
          "1027:                     targetMethod = \"enlistParticipant\",",
          "1028:                     targetLocation = \"ENTRY\",",
          "1029:                     helper = \"io.narayana.lra.coordinator.domain.model.BytemanHelper\",",
          "1030:                     action = \"abortLRA($0)\")",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1031:                 .get()) {",
          "1032:             assertEquals(\"expected HTTP 410 Gone\", 410, response.getStatus());",
          "1035:             String methodResponse = response.readEntity(String.class);",
          "1040:             assertTrue(\"Expected LRA025025 but was \" + methodResponse, methodResponse.startsWith(\"LRA025025\"));",
          "1041:         }",
          "",
          "[Removed Lines]",
          "1037:             assertNotEquals(\"business method should not have been called\", \"success\", methodResponse);",
          "",
          "[Added Lines]",
          "1045:             assertNotEquals(\"business method should not have been called\",",
          "1046:                     TIMEOUT_BEFORE_JOIN_BUSINESS_DATA, methodResponse);",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     static final long LRA_SHORT_TIMELIMIT = 10L;",
          "58:     private static LRAStatus status = LRAStatus.Active;",
          "59:     private static final AtomicInteger acceptCount = new AtomicInteger(0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     static final String TIMEOUT_BEFORE_JOIN_BUSINESS_DATA = \"success\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:         @GET",
          "145:         @Path(\"timeout-while-joining\")",
          "147:         @LRA(value = LRA.Type.REQUIRED, timeLimit = 1000, timeUnit = ChronoUnit.MILLIS)",
          "148:         public Response timeoutBeforeJoin(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {",
          "150:         }",
          "152:         @GET",
          "",
          "[Removed Lines]",
          "146:         @Produces(MediaType.APPLICATION_JSON)",
          "149:             return Response.status(Response.Status.CONFLICT).entity(\"success\").build();",
          "",
          "[Added Lines]",
          "149:             return Response.status(Response.Status.OK).entity(TIMEOUT_BEFORE_JOIN_BUSINESS_DATA).build();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9da7020ce86d109fe997cb8006ff8c3d95a71a08",
      "candidate_info": {
        "commit_hash": "9da7020ce86d109fe997cb8006ff8c3d95a71a08",
        "repo": "jbosstm/narayana",
        "commit_url": "https://github.com/jbosstm/narayana/commit/9da7020ce86d109fe997cb8006ff8c3d95a71a08",
        "files": [
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAAsyncIT.java"
        ],
        "message": "JBTM-3089 Report a reason for test failures",
        "before_after_code_files": [
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAAsyncIT.java||rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAAsyncIT.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java"
          ],
          "candidate": [
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java"
          ]
        }
      },
      "candidate_diff": {
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "442:         try {",
          "443:             service.getLRA(lraId);",
          "444:         } catch (NotFoundException e) {",
          "446:         }",
          "",
          "[Removed Lines]",
          "445:             fail(\"testReplay: LRA should still have been completing\");",
          "",
          "[Added Lines]",
          "445:             fail(\"testReplay: LRA should still have been completing: \" + e.getMessage());",
          "",
          "---------------"
        ],
        "rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAAsyncIT.java||rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAAsyncIT.java": [
          "File: rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAAsyncIT.java -> rts/lra/test/basic/src/test/java/io/narayana/lra/arquillian/client/LRAAsyncIT.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:         } catch (InterruptedException | ExecutionException e) {",
          "109:             e.printStackTrace();",
          "111:         }",
          "112:     }",
          "",
          "[Removed Lines]",
          "110:             fail(\"Error in testChainOfInvocations method\");",
          "",
          "[Added Lines]",
          "110:             fail(\"Error in testChainOfInvocations method: \" + e.getMessage());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:             } catch (InterruptedException | ExecutionException e) {",
          "144:                 e.printStackTrace();",
          "146:             }",
          "147:     }",
          "",
          "[Removed Lines]",
          "145:                 fail(\"Error in testNoCurrent method\");",
          "",
          "[Added Lines]",
          "145:                 fail(\"Error in testNoCurrent method: \" + e.getMessage());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f99d720872629c6662fe0a1b5234b1b14e79134",
      "candidate_info": {
        "commit_hash": "3f99d720872629c6662fe0a1b5234b1b14e79134",
        "repo": "jbosstm/narayana",
        "commit_url": "https://github.com/jbosstm/narayana/commit/3f99d720872629c6662fe0a1b5234b1b14e79134",
        "files": [
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java"
        ],
        "message": "JBTM-3331 Test for early timeouts during enlistment",
        "before_after_code_files": [
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java"
          ],
          "candidate": [
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java"
          ]
        }
      },
      "candidate_diff": {
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_CONTEXT_HEADER;",
          "11: import static org.eclipse.microprofile.lra.annotation.ws.rs.LRA.LRA_HTTP_RECOVERY_HEADER;",
          "12: import static org.hamcrest.Matchers.containsString;",
          "20: import java.net.URI;",
          "21: import java.net.URISyntaxException;",
          "",
          "[Removed Lines]",
          "13: import static org.junit.Assert.assertEquals;",
          "14: import static org.junit.Assert.assertFalse;",
          "15: import static org.junit.Assert.assertNotNull;",
          "16: import static org.junit.Assert.assertNull;",
          "17: import static org.junit.Assert.assertTrue;",
          "18: import static org.junit.Assert.fail;",
          "",
          "[Added Lines]",
          "13: import static org.junit.Assert.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1012:         assertTrue(\"LRA should have cancelled\", status == null || status == LRAStatus.Cancelled);",
          "1013:     }",
          "1015:     @Test",
          "1016:     public void testTimeOutWithNoParticipants() {",
          "1017:         URI lraId = lraClient.startLRA(null, testName.getMethodName(), 100L, ChronoUnit.MILLIS);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1010:     @Test",
          "1011:     public void testTimeoutWhileJoining() throws URISyntaxException {",
          "1012:         String target = TestPortProvider.generateURL(\"/base/test/timeout-while-joining\");",
          "1013:         int compensations = compensateCount.get();",
          "1015:         try (Response response = client.target(target)",
          "1016:                 .request()",
          "1017:                 .get()) {",
          "1018:             assertEquals(\"expected HTTP 410 Gone\", 410, response.getStatus());",
          "1021:             String methodResponse = response.readEntity(String.class);",
          "1023:             assertNotEquals(\"business method should not have been called\", \"success\", methodResponse);",
          "1026:             assertTrue(\"Expected LRA025025 but was \" + methodResponse, methodResponse.startsWith(\"LRA025025\"));",
          "1027:         }",
          "1029:         assertEquals(\"participant should not have been enlisted\", compensations, compensateCount.get());",
          "1030:     }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATestBase.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:             return Response.status(Response.Status.OK).entity(lraId.toASCIIString()).build();",
          "142:         }",
          "144:         @GET",
          "145:         @Path(\"timed-action\")",
          "146:         @LRA(value = LRA.Type.REQUIRED, end = false, timeLimit = LRA_SHORT_TIMELIMIT) // the default unit is SECONDS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144:         @GET",
          "145:         @Path(\"timeout-while-joining\")",
          "146:         @Produces(MediaType.APPLICATION_JSON)",
          "147:         @LRA(value = LRA.Type.REQUIRED, timeLimit = 10, timeUnit = ChronoUnit.MILLIS)",
          "148:         public Response timeoutBeforeJoin(@HeaderParam(LRA_HTTP_CONTEXT_HEADER) URI lraId) {",
          "149:             try {",
          "150:                 Thread.sleep(10);",
          "151:             } catch (InterruptedException e) {",
          "152:                 LRALogger.logger.debugf(\"Interrupted because time limit elapsed\", e);",
          "153:             }",
          "154:             return Response.status(Response.Status.OK).entity(\"success\").build();",
          "155:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a271fd406385bc92dd01a3f7f3dc9c3b9174acf",
      "candidate_info": {
        "commit_hash": "7a271fd406385bc92dd01a3f7f3dc9c3b9174acf",
        "repo": "jbosstm/narayana",
        "commit_url": "https://github.com/jbosstm/narayana/commit/7a271fd406385bc92dd01a3f7f3dc9c3b9174acf",
        "files": [
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java"
        ],
        "message": "JBTM-3845 keep LRA cache up to date",
        "before_after_code_files": [
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java",
          "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java"
          ],
          "candidate": [
            "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
            "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java"
          ]
        }
      },
      "candidate_diff": {
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LRAParentAbstractRecord.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: import com.arjuna.ats.arjuna.coordinator.TwoPhaseOutcome;",
          "13: import com.arjuna.ats.arjuna.state.InputObjectState;",
          "14: import com.arjuna.ats.arjuna.state.OutputObjectState;",
          "15: import io.narayana.lra.coordinator.internal.LRARecoveryModule;",
          "16: import io.narayana.lra.logging.LRALogger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: import io.narayana.lra.coordinator.domain.service.LRAService;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     private boolean committed;",
          "29:     private URI parentId;",
          "30:     private URI childId;",
          "32:     public LRAParentAbstractRecord() {",
          "33:         super();",
          "34:     }",
          "37:         super(new Uid());",
          "",
          "[Removed Lines]",
          "36:     public LRAParentAbstractRecord(BasicAction parent, LongRunningAction child) {",
          "",
          "[Added Lines]",
          "32:     private LRAService lraService;",
          "38:     public LRAParentAbstractRecord(BasicAction parent, LongRunningAction child, LRAService lraService) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:             parentId = ((LongRunningAction) parent).getId();",
          "42:         }",
          "44:         childId = child.getId();",
          "45:         committed = false; // assume default as it's the safest route to take if something goes wrong",
          "46:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:         this.lraService = lraService;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140:     @Override",
          "141:     public int topLevelCommit() {",
          "142:         LongRunningAction parent = getParentLRA();",
          "145:         if (parent == null || child == null) {",
          "146:             return TwoPhaseOutcome.FINISH_ERROR;",
          "",
          "[Removed Lines]",
          "143:         LongRunningAction child = getChildLRA();",
          "",
          "[Added Lines]",
          "146:         LongRunningAction child;",
          "148:         try {",
          "149:             child = getChildLRA();",
          "150:         } catch (Exception e) {",
          "152:             child = null;",
          "153:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:             return TwoPhaseOutcome.HEURISTIC_HAZARD;",
          "161:         }",
          "163:         return TwoPhaseOutcome.FINISH_OK;",
          "164:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:         if (committed) {",
          "175:             lraService.finished(getChildLRA(), true);",
          "176:         }",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java||rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java": [
          "File: rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java -> rts/lra/coordinator/src/main/java/io/narayana/lra/coordinator/domain/model/LongRunningAction.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "609:         updateState(); // ensure the record is removed if it finished otherwise persisted the state",
          "611:         if (!isRecovering()) {",
          "613:         }",
          "615:         if (LRALogger.logger.isTraceEnabled()) {",
          "",
          "[Removed Lines]",
          "612:             lraService.finished(this, false);",
          "",
          "[Added Lines]",
          "612:             lraService.finished(this, nested && cancel);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "979:     }",
          "981:     private boolean linkChildWithParent(LongRunningAction localParent) {",
          "984:         if (localParent.add(par) != AddOutcome.AR_ADDED) {",
          "985:             return false;",
          "",
          "[Removed Lines]",
          "982:         par = new LRAParentAbstractRecord(localParent, this); // the new LRA we want parent to know about",
          "",
          "[Added Lines]",
          "982:         par = new LRAParentAbstractRecord(localParent, this, lraService); // the new LRA we want parent to know about",
          "",
          "---------------"
        ],
        "rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java||rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java": [
          "File: rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java -> rts/lra/coordinator/src/test/java/io/narayana/lra/coordinator/domain/model/LRATest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: package io.narayana.lra.coordinator.domain.model;",
          "8: import com.arjuna.ats.arjuna.common.arjPropertyManager;",
          "9: import io.narayana.lra.client.NarayanaLRAClient;",
          "10: import io.narayana.lra.coordinator.api.Coordinator;",
          "11: import io.narayana.lra.coordinator.domain.service.LRAService;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: import io.narayana.lra.LRAData;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: import java.time.temporal.ChronoUnit;",
          "56: import java.util.Arrays;",
          "57: import java.util.HashSet;",
          "58: import java.util.Objects;",
          "59: import java.util.Set;",
          "60: import java.util.StringTokenizer;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: import java.util.List;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "721:             assertEquals(\"multiLevelNestedActivity: step 9 (called test path \" +",
          "722:                     resourcePath.getUri() + \")\",1, compensateCount.get());",
          "723:         }",
          "724:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "729:         List<LRAData> lras = lraClient.getAllLRAs();",
          "730:         LRAData parentData = new LRAData();",
          "731:         parentData.setLraId(lra);",
          "732:         assertFalse(\"parent LRA should not have been returned\", lras.contains(parentData));",
          "734:         for (URI uri : uris) {",
          "735:             LRAData nestedData = new LRAData();",
          "736:             nestedData.setLraId(uri);",
          "737:             assertFalse(\"child LRA should not have been returned\", lras.contains(nestedData));",
          "738:         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}