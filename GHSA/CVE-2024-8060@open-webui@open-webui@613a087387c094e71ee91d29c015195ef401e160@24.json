{
  "cve_id": "CVE-2024-8060",
  "cve_desc": "OpenWebUI version 0.3.0 contains a vulnerability in the audio API endpoint `/audio/api/v1/transcriptions` that allows for arbitrary file upload. The application performs insufficient validation on the `file.content_type` and allows user-controlled filenames, leading to a path traversal vulnerability. This can be exploited by an authenticated user to overwrite critical files within the Docker container, potentially leading to remote code execution as the root user.",
  "repo": "open-webui/open-webui",
  "patch_hash": "613a087387c094e71ee91d29c015195ef401e160",
  "patch_info": {
    "commit_hash": "613a087387c094e71ee91d29c015195ef401e160",
    "repo": "open-webui/open-webui",
    "commit_url": "https://github.com/open-webui/open-webui/commit/613a087387c094e71ee91d29c015195ef401e160",
    "files": [
      "backend/open_webui/routers/audio.py"
    ],
    "message": "refac",
    "before_after_code_files": [
      "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py"
    ]
  },
  "patch_diff": {
    "backend/open_webui/routers/audio.py||backend/open_webui/routers/audio.py": [
      "File: backend/open_webui/routers/audio.py -> backend/open_webui/routers/audio.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "681:     available_models = []",
      "682:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "683:         # Use custom endpoint if not using the official OpenAI API URL",
      "685:             try:",
      "687:                 response.raise_for_status()",
      "688:                 data = response.json()",
      "689:                 available_models = data.get(\"models\", [])",
      "690:             except Exception as e:",
      "691:                 log.error(f\"Error fetching models from custom endpoint: {str(e)}\")",
      "693:         else:",
      "694:             available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "695:     elif request.app.state.config.TTS_ENGINE == \"elevenlabs\":",
      "",
      "[Removed Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "686:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\")",
      "692:                 available_models = []",
      "",
      "[Added Lines]",
      "684:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "685:             \"https://api.openai.com\"",
      "686:         ):",
      "688:                 response = requests.get(",
      "689:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/models\"",
      "690:                 )",
      "696:                 available_models = [{\"id\": \"tts-1\"}, {\"id\": \"tts-1-hd\"}]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "723:     available_voices = {}",
      "724:     if request.app.state.config.TTS_ENGINE == \"openai\":",
      "725:         # Use custom endpoint if not using the official OpenAI API URL",
      "727:             try:",
      "729:                 response.raise_for_status()",
      "730:                 data = response.json()",
      "731:                 voices_list = data.get(\"voices\", [])",
      "732:                 available_voices = {voice[\"id\"]: voice[\"name\"] for voice in voices_list}",
      "733:             except Exception as e:",
      "734:                 log.error(f\"Error fetching voices from custom endpoint: {str(e)}\")",
      "736:         else:",
      "737:             available_voices = {",
      "738:                 \"alloy\": \"alloy\",",
      "",
      "[Removed Lines]",
      "726:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(\"https://api.openai.com\"):",
      "728:                 response = requests.get(f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\")",
      "735:                 available_voices = {}",
      "",
      "[Added Lines]",
      "730:         if not request.app.state.config.TTS_OPENAI_API_BASE_URL.startswith(",
      "731:             \"https://api.openai.com\"",
      "732:         ):",
      "734:                 response = requests.get(",
      "735:                     f\"{request.app.state.config.TTS_OPENAI_API_BASE_URL}/audio/voices\"",
      "736:                 )",
      "743:                 available_voices = {",
      "744:                     \"alloy\": \"alloy\",",
      "745:                     \"echo\": \"echo\",",
      "746:                     \"fable\": \"fable\",",
      "747:                     \"onyx\": \"onyx\",",
      "748:                     \"nova\": \"nova\",",
      "749:                     \"shimmer\": \"shimmer\",",
      "750:                 }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fe4f760b4a3aea8184ee7d397c52d267b19cb22d",
      "candidate_info": {
        "commit_hash": "fe4f760b4a3aea8184ee7d397c52d267b19cb22d",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/fe4f760b4a3aea8184ee7d397c52d267b19cb22d",
        "files": [
          "src/lib/components/chat/Chat.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/lib/components/chat/Chat.svelte||src/lib/components/chat/Chat.svelte": [
          "File: src/lib/components/chat/Chat.svelte -> src/lib/components/chat/Chat.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "1322:    history.messages[messages.at(-1).id].childrenIds.push(userMessageId);",
          "1323:   }",
          "1326:   const chatInput = document.getElementById('chat-input');",
          "1327:   chatInput?.focus();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1325:   if (autoScroll) {",
          "1326:    scrollToBottom();",
          "1327:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b856b64ed039c2c6e683bc85423819a12226515",
      "candidate_info": {
        "commit_hash": "3b856b64ed039c2c6e683bc85423819a12226515",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/3b856b64ed039c2c6e683bc85423819a12226515",
        "files": [
          "backend/open_webui/config.py",
          "backend/open_webui/main.py",
          "src/lib/components/admin/Settings/General.svelte"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/config.py||backend/open_webui/config.py",
          "backend/open_webui/main.py||backend/open_webui/main.py",
          "src/lib/components/admin/Settings/General.svelte||src/lib/components/admin/Settings/General.svelte"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/config.py||backend/open_webui/config.py": [
          "File: backend/open_webui/config.py -> backend/open_webui/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: import logging",
          "3: import os",
          "4: import shutil",
          "5: from datetime import datetime",
          "6: from pathlib import Path",
          "7: from typing import Generic, Optional, TypeVar",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: import base64",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587: STATIC_DIR = Path(os.getenv(\"STATIC_DIR\", OPEN_WEBUI_DIR / \"static\")).resolve()",
          "589: frontend_favicon = FRONTEND_BUILD_DIR / \"static\" / \"favicon.png\"",
          "591: if frontend_favicon.exists():",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592: def override_static(path: str, content: str):",
          "593:     # Ensure path is safe",
          "594:     if \"/\" in path or \"..\" in path:",
          "595:         log.error(f\"Invalid path: {path}\")",
          "596:         return",
          "598:     file_path = os.path.join(STATIC_DIR, path)",
          "599:     os.makedirs(os.path.dirname(file_path), exist_ok=True)",
          "601:     with open(file_path, \"wb\") as f:",
          "602:         f.write(base64.b64decode(content))  # Convert Base64 back to raw binary",
          "",
          "---------------"
        ],
        "backend/open_webui/main.py||backend/open_webui/main.py": [
          "File: backend/open_webui/main.py -> backend/open_webui/main.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: from open_webui.models.users import UserModel, Users",
          "90: from open_webui.config import (",
          "91:     LICENSE_KEY,",
          "92:     # Ollama",
          "93:     ENABLE_OLLAMA_API,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:     override_static,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "372:     if RESET_CONFIG_ON_START:",
          "373:         reset_config()",
          "377:         try:",
          "379:                 \"https://api.openwebui.com/api/v1/license\",",
          "381:                 timeout=5,",
          "382:             )",
          "396:             else:",
          "402:     asyncio.create_task(periodic_usage_pool_cleanup())",
          "403:     yield",
          "416: app = FastAPI(",
          "417:     docs_url=\"/docs\" if ENV == \"dev\" else None,",
          "418:     openapi_url=\"/openapi.json\" if ENV == \"dev\" else None,",
          "",
          "[Removed Lines]",
          "375:     license_key = app.state.config.LICENSE_KEY",
          "376:     if license_key:",
          "378:             response = requests.post(",
          "380:                 json={\"key\": license_key, \"version\": \"1\"},",
          "383:             if response.ok:",
          "384:                 data = response.json()",
          "385:                 if \"payload\" in data and \"auth\" in data:",
          "386:                     if verify_signature(data[\"payload\"], data[\"auth\"]):",
          "387:                         exec(",
          "388:                             data[\"payload\"],",
          "389:                             {",
          "390:                                 \"__builtins__\": {},",
          "391:                                 \"override_static\": override_static,",
          "392:                                 \"USER_COUNT\": app.state.USER_COUNT,",
          "393:                                 \"WEBUI_NAME\": app.state.WEBUI_NAME,",
          "394:                             },",
          "395:                         )  # noqa",
          "397:                 log.error(f\"Error fetching license: {response.text}\")",
          "398:         except Exception as e:",
          "399:             log.error(f\"Error during license check: {e}\")",
          "400:             pass",
          "406: def override_static(path: str, content: str):",
          "407:     # Ensure path is safe",
          "408:     if \"/\" in path:",
          "409:         log.error(f\"Invalid path: {path}\")",
          "410:         return",
          "412:     with open(f\"{STATIC_DIR}/{path}\", \"wb\") as f:",
          "413:         shutil.copyfileobj(content, f)",
          "",
          "[Added Lines]",
          "376:     key = app.state.config.LICENSE_KEY",
          "377:     if key:",
          "379:             res = requests.post(",
          "381:                 json={\"key\": key, \"version\": \"1\"},",
          "385:             if getattr(res, \"ok\", False):",
          "386:                 payload = getattr(res, \"json\", lambda: {})()",
          "387:                 for k, v in payload.items():",
          "388:                     if k == \"resources\":",
          "389:                         for p, c in v.items():",
          "390:                             globals().get(\"override_static\", lambda a, b: None)(p, c)",
          "391:                     elif k == \"user_count\":",
          "392:                         setattr(app.state, \"USER_COUNT\", v)",
          "393:                     elif k == \"webui_name\":",
          "394:                         setattr(app.state, \"WEBUI_NAME\", v)",
          "396:                 log.error(",
          "397:                     f\"License retrieval issue: {getattr(res, 'text', 'unknown error')}\"",
          "398:                 )",
          "399:         except Exception as ex:",
          "400:             log.error(f\"Uncaught Exception: {ex}\")",
          "",
          "---------------"
        ],
        "src/lib/components/admin/Settings/General.svelte||src/lib/components/admin/Settings/General.svelte": [
          "File: src/lib/components/admin/Settings/General.svelte -> src/lib/components/admin/Settings/General.svelte",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:        </div>",
          "159:        <button",
          "161:         type=\"button\"",
          "162:         on:click={() => {",
          "163:          checkForVersionUpdates();",
          "",
          "[Removed Lines]",
          "160:         class=\" text-xs px-3 py-1.5 bg-gray-100 hover:bg-gray-200 dark:bg-gray-850 dark:hover:bg-gray-800 transition rounded-lg font-medium\"",
          "",
          "[Added Lines]",
          "160:         class=\" text-xs px-3 py-1.5 bg-gray-50 hover:bg-gray-100 dark:bg-gray-850 dark:hover:bg-gray-800 transition rounded-lg font-medium\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:      <div class=\"mb-2.5\">",
          "218:       <div class=\"flex w-full justify-between items-center\">",
          "220:         <div class=\"\">",
          "221:          {$i18n.t('License')}",
          "222:         </div>",
          "223:         <a",
          "225:          href=\"https://docs.openwebui.com/enterprise\"",
          "226:          target=\"_blank\"",
          "227:         >",
          "228:          {$i18n.t(",
          "230:          )}",
          "231:         </a>",
          "232:        </div>",
          "235:         {$i18n.t('Activate')}",
          "237:       </div>",
          "238:      </div>",
          "239:     </div>",
          "",
          "[Removed Lines]",
          "219:        <div class=\"text-xs\">",
          "224:          class=\" text-xs text-gray-500 underline\"",
          "229:           'Upgrade to a licensed plan for enhanced capabilities and dedicated support.'",
          "234:        <!-- <button class=\" text-xs font-medium\">",
          "236:        </button> -->",
          "",
          "[Added Lines]",
          "219:        <div class=\"text-xs pr-2\">",
          "224:          class=\" text-xs text-gray-500 hover:underline\"",
          "229:           'Upgrade to a licensed plan for enhanced capabilities, including custom theming and branding, and dedicated support.'",
          "234:        <button",
          "235:         class=\"flex-shrink-0 text-xs px-3 py-1.5 bg-gray-50 hover:bg-gray-100 dark:bg-gray-850 dark:hover:bg-gray-800 transition rounded-lg font-medium\"",
          "236:        >",
          "238:        </button>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c9e9ce931bb5af4c3945cd4b1841c762dcc3905e",
      "candidate_info": {
        "commit_hash": "c9e9ce931bb5af4c3945cd4b1841c762dcc3905e",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/c9e9ce931bb5af4c3945cd4b1841c762dcc3905e",
        "files": [
          "backend/open_webui/utils/middleware.py",
          "backend/open_webui/utils/tools.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py",
          "backend/open_webui/utils/tools.py||backend/open_webui/utils/tools.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:                 if isinstance(tool_result, str):",
          "228:                     tool = tools[tool_function_name]",
          "229:                     tool_id = tool.get(\"toolkit_id\", \"\")",
          "232:                         sources.append(",
          "233:                             {",
          "",
          "[Removed Lines]",
          "230:                     if tool.get(\"citation\", False) or tool.get(\"direct\", False):",
          "",
          "[Added Lines]",
          "230:                     if tool.get(\"metadata\", {}).get(\"citation\", False) or tool.get(",
          "231:                         \"direct\", False",
          "232:                     ):",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:                             }",
          "268:                         )",
          "271:                         skip_files = True",
          "273:             # check if \"tool_calls\" in result",
          "",
          "[Removed Lines]",
          "270:                     if tools[tool_function_name].get(\"file_handler\", False):",
          "",
          "[Added Lines]",
          "272:                     if (",
          "273:                         tools[tool_function_name]",
          "274:                         .get(\"metadata\", {})",
          "275:                         .get(\"file_handler\", False)",
          "276:                     ):",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/tools.py||backend/open_webui/utils/tools.py": [
          "File: backend/open_webui/utils/tools.py -> backend/open_webui/utils/tools.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     for tool_id in tool_ids:",
          "48:         tools = Tools.get_tool_by_id(tool_id)",
          "49:         if tools is None:",
          "50:             continue",
          "52:         module = request.app.state.TOOLS.get(tool_id, None)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:             tool_dict = {",
          "52:                 \"spec\": spec,",
          "53:                 \"callable\": callable,",
          "54:                 \"toolkit_id\": tool_id,",
          "55:                 \"pydantic_model\": function_to_pydantic_model(callable),",
          "56:                 # Misc info",
          "57:                 \"metadata\": {",
          "58:                     \"file_handler\": hasattr(module, \"file_handler\")",
          "59:                     and module.file_handler,",
          "60:                     \"citation\": hasattr(module, \"citation\") and module.citation,",
          "61:                 },",
          "62:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:                 \"toolkit_id\": tool_id,",
          "98:                 \"pydantic_model\": function_to_pydantic_model(callable),",
          "99:                 # Misc info",
          "102:             }",
          "104:             # TODO: if collision, prepend toolkit name",
          "",
          "[Removed Lines]",
          "100:                 \"file_handler\": hasattr(module, \"file_handler\") and module.file_handler,",
          "101:                 \"citation\": hasattr(module, \"citation\") and module.citation,",
          "",
          "[Added Lines]",
          "114:                 \"metadata\": {",
          "115:                     \"file_handler\": hasattr(module, \"file_handler\")",
          "116:                     and module.file_handler,",
          "117:                     \"citation\": hasattr(module, \"citation\") and module.citation,",
          "118:                 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9adc1ebcc81d4921a79e98d39b143465808c47f8",
      "candidate_info": {
        "commit_hash": "9adc1ebcc81d4921a79e98d39b143465808c47f8",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/9adc1ebcc81d4921a79e98d39b143465808c47f8",
        "files": [
          "backend/open_webui/utils/filter.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/utils/filter.py||backend/open_webui/utils/filter.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/utils/filter.py||backend/open_webui/utils/filter.py": [
          "File: backend/open_webui/utils/filter.py -> backend/open_webui/utils/filter.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:     # Handle file cleanup for inlet",
          "108:     if skip_files and \"files\" in form_data.get(\"metadata\", {}):",
          "109:         del form_data[\"metadata\"][\"files\"]",
          "111:     return form_data, {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:         del form_data[\"files\"]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0711ba0c9153b7d5f316bbfaf11f481a9dab075",
      "candidate_info": {
        "commit_hash": "c0711ba0c9153b7d5f316bbfaf11f481a9dab075",
        "repo": "open-webui/open-webui",
        "commit_url": "https://github.com/open-webui/open-webui/commit/c0711ba0c9153b7d5f316bbfaf11f481a9dab075",
        "files": [
          "backend/open_webui/config.py",
          "backend/open_webui/utils/middleware.py"
        ],
        "message": "refac",
        "before_after_code_files": [
          "backend/open_webui/config.py||backend/open_webui/config.py",
          "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_message": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "backend/open_webui/config.py||backend/open_webui/config.py": [
          "File: backend/open_webui/config.py -> backend/open_webui/config.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1889: )",
          "1891: DEFAULT_RAG_TEMPLATE = \"\"\"### Task:",
          "1894: ### Guidelines:",
          "1895: - If you don't know the answer, clearly state that.",
          "",
          "[Removed Lines]",
          "1892: Respond to the user query using the provided context, incorporating inline citations in the format [source_id] **only when the <source_id> tag is explicitly provided** in the context.",
          "",
          "[Added Lines]",
          "1892: Respond to the user query using the provided context, incorporating inline citations in the format [source_id] **only when the <source> tag includes an explicit id attribute** (e.g., <source id=\"1\">).",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1897: - Respond in the same language as the user's query.",
          "1898: - If the context is unreadable or of poor quality, inform the user and provide the best possible answer.",
          "1899: - If the answer isn't present in the context but you possess the knowledge, explain this to the user and provide the answer using your own understanding.",
          "1902: - Do not use XML tags in your response.",
          "1903: - Ensure citations are concise and directly related to the information provided.",
          "1905: ### Example of Citation:",
          "1910: ### Output:",
          "1911: Provide a clear and direct response to the user's query, including inline citations in the format [source_id] only when the <source_id> tag is present in the context.",
          "",
          "[Removed Lines]",
          "1901: - Do not cite if the <source_id> tag is not provided in the context.",
          "1906: If the user asks about a specific topic and the information is found in \"whitepaper.pdf\" with a provided <source_id>, the response should include the citation like so:",
          "1908: If no <source_id> is present, the response should omit the citation.",
          "",
          "[Added Lines]",
          "1901: - Do not cite if the <source> tag does not contain an id attribute.",
          "1906: If the user asks about a specific topic and the information is found in a source with a provided id attribute, the response should include the citation like so:",
          "",
          "---------------"
        ],
        "backend/open_webui/utils/middleware.py||backend/open_webui/utils/middleware.py": [
          "File: backend/open_webui/utils/middleware.py -> backend/open_webui/utils/middleware.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "866:         for source_idx, source in enumerate(sources):",
          "867:             if \"document\" in source:",
          "868:                 for doc_idx, doc_context in enumerate(source[\"document\"]):",
          "871:         context_string = context_string.strip()",
          "872:         prompt = get_last_user_message(form_data[\"messages\"])",
          "",
          "[Removed Lines]",
          "869:                     context_string += f\"<source><source_id>{source_idx + 1}</source_id><source_context>{doc_context}</source_context></source>\\n\"",
          "",
          "[Added Lines]",
          "869:                     context_string += (",
          "870:                         f'<source id=\"{source_idx + 1}\">{doc_context}</source>\\n'",
          "871:                     )",
          "",
          "---------------"
        ]
      }
    }
  ]
}