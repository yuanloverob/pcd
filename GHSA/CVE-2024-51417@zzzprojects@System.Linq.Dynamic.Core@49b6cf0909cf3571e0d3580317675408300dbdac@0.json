{
  "cve_id": "CVE-2024-51417",
  "cve_desc": "An issue in System.Linq.Dynamic.Core before 1.6.0 allows remote access to properties on reflection types and static properties/fields.",
  "repo": "zzzprojects/System.Linq.Dynamic.Core",
  "patch_hash": "49b6cf0909cf3571e0d3580317675408300dbdac",
  "patch_info": {
    "commit_hash": "49b6cf0909cf3571e0d3580317675408300dbdac",
    "repo": "zzzprojects/System.Linq.Dynamic.Core",
    "commit_url": "https://github.com/zzzprojects/System.Linq.Dynamic.Core/commit/49b6cf0909cf3571e0d3580317675408300dbdac",
    "files": [
      "src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs",
      "src/System.Linq.Dynamic.Core/CustomTypeProviders/DefaultDynamicLinqCustomTypeProvider.cs",
      "src/System.Linq.Dynamic.Core/CustomTypeProviders/IDynamicLinkCustomTypeProvider.cs",
      "src/System.Linq.Dynamic.Core/Extensions/LinqExtensions.cs",
      "src/System.Linq.Dynamic.Core/Parser/PredefinedTypesHelper.cs",
      "src/System.Linq.Dynamic.Core/ParsingConfig.cs",
      "test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs",
      "test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs",
      "test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs",
      "test/System.Linq.Dynamic.Core.Tests/Entities/Worker.cs",
      "test/System.Linq.Dynamic.Core.Tests/ExpressionTests.cs",
      "test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs",
      "test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs",
      "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs",
      "test/System.Linq.Dynamic.Core.Tests/QueryableTests.Is,OfType,As,Cast.cs",
      "test/System.Linq.Dynamic.Core.Tests/QueryableTests.Select.cs",
      "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs",
      "test/System.Linq.Dynamic.Core.Tests/TestClasses/TestCustomTypeProvider.cs"
    ],
    "message": "Fix CVE-2024-51417 (#870)\n\n* Fix CVE-2024-51417\n- remove 'object' from PredefinedTypes\n- refactor DefaultDynamicLinqCustomTypeProvider so that only classes with DynamicLinqType annotation are resolved\n\n* UsingStaticClass_WhenAddedDefaultDynamicLinqCustomTypeProvider_ShouldBeOk\n\n* Fix Select_Dynamic_SystemType1 unit test\n\n* Add more tests\n\n* re-enable old constructor for DefaultDynamicLinqCustomTypeProvider\n\n* IDynamicLinkCustomTypeProvider\n\n* add comment to PredefinedTypesHelper\n\n* [Theory(Skip = \"873\")]",
    "before_after_code_files": [
      "src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs||src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs",
      "src/System.Linq.Dynamic.Core/CustomTypeProviders/DefaultDynamicLinqCustomTypeProvider.cs||src/System.Linq.Dynamic.Core/CustomTypeProviders/DefaultDynamicLinqCustomTypeProvider.cs",
      "src/System.Linq.Dynamic.Core/CustomTypeProviders/IDynamicLinkCustomTypeProvider.cs||src/System.Linq.Dynamic.Core/CustomTypeProviders/IDynamicLinkCustomTypeProvider.cs",
      "src/System.Linq.Dynamic.Core/Extensions/LinqExtensions.cs||src/System.Linq.Dynamic.Core/Extensions/LinqExtensions.cs",
      "src/System.Linq.Dynamic.Core/Parser/PredefinedTypesHelper.cs||src/System.Linq.Dynamic.Core/Parser/PredefinedTypesHelper.cs",
      "src/System.Linq.Dynamic.Core/ParsingConfig.cs||src/System.Linq.Dynamic.Core/ParsingConfig.cs",
      "test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs||test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs",
      "test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs||test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs",
      "test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs||test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs",
      "test/System.Linq.Dynamic.Core.Tests/Entities/Worker.cs||test/System.Linq.Dynamic.Core.Tests/Entities/Worker.cs",
      "test/System.Linq.Dynamic.Core.Tests/ExpressionTests.cs||test/System.Linq.Dynamic.Core.Tests/ExpressionTests.cs",
      "test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs||test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs",
      "test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs||test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs",
      "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs||test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs",
      "test/System.Linq.Dynamic.Core.Tests/QueryableTests.Is,OfType,As,Cast.cs||test/System.Linq.Dynamic.Core.Tests/QueryableTests.Is,OfType,As,Cast.cs",
      "test/System.Linq.Dynamic.Core.Tests/QueryableTests.Select.cs||test/System.Linq.Dynamic.Core.Tests/QueryableTests.Select.cs",
      "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs",
      "test/System.Linq.Dynamic.Core.Tests/TestClasses/TestCustomTypeProvider.cs||test/System.Linq.Dynamic.Core.Tests/TestClasses/TestCustomTypeProvider.cs"
    ]
  },
  "patch_diff": {
    "src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs||src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs": [
      "File: src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs -> src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: \ufeffusing System.Collections.Generic;",
      "2: using System.Diagnostics.CodeAnalysis;",
      "4: using System.Linq.Dynamic.Core.Validation;",
      "5: using System.Reflection;",
      "",
      "[Removed Lines]",
      "3: using System.Linq.Dynamic.Core.Extensions;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "13: public abstract class AbstractDynamicLinqCustomTypeProvider",
      "14: {",
      "21:     {",
      "22:         Check.NotNull(assemblies);",
      "23: #if !NET35",
      "",
      "[Removed Lines]",
      "20:     protected IEnumerable<Type> FindTypesMarkedWithDynamicLinqTypeAttribute(IEnumerable<Assembly> assemblies)",
      "",
      "[Added Lines]",
      "17:     protected readonly IList<Type> AdditionalTypes;",
      "23:     protected AbstractDynamicLinqCustomTypeProvider(IList<Type> additionalTypes)",
      "24:     {",
      "25:         AdditionalTypes = Check.NotNull(additionalTypes);",
      "26:     }",
      "33:     protected Type[] FindTypesMarkedWithDynamicLinqTypeAttribute(IEnumerable<Assembly> assemblies)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "37:         Check.NotNull(assemblies);",
      "38:         Check.NotEmpty(typeName);",
      "50:     }",
      "",
      "[Removed Lines]",
      "40:         foreach (var assembly in assemblies)",
      "41:         {",
      "42:             var resolvedType = assembly.GetType(typeName, false, true);",
      "43:             if (resolvedType != null)",
      "44:             {",
      "45:                 return resolvedType;",
      "46:             }",
      "47:         }",
      "49:         return null;",
      "",
      "[Added Lines]",
      "53:         var types = FindTypesMarkedWithDynamicLinqTypeAttribute(assemblies).Union(AdditionalTypes);",
      "54:         return types.FirstOrDefault(t => t.FullName == typeName);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "60:         Check.NotNull(assemblies);",
      "61:         Check.NotEmpty(simpleTypeName);",
      "76:         }",
      "79:     }",
      "81: #if (UAP10_0 || NETSTANDARD)",
      "",
      "[Removed Lines]",
      "63:         foreach (var assembly in assemblies)",
      "64:         {",
      "65:             var fullNames = assembly.GetTypes().Select(t => t.FullName!).Distinct();",
      "66:             var firstMatchingFullname = fullNames.FirstOrDefault(fn => fn.EndsWith($\".{simpleTypeName}\"));",
      "68:             if (firstMatchingFullname != null)",
      "69:             {",
      "70:                 var resolvedType = assembly.GetType(firstMatchingFullname, false, true);",
      "71:                 if (resolvedType != null)",
      "72:                 {",
      "73:                     return resolvedType;",
      "74:                 }",
      "75:             }",
      "78:         return null;",
      "",
      "[Added Lines]",
      "69:         var types = FindTypesMarkedWithDynamicLinqTypeAttribute(assemblies);",
      "70:         var fullNames = types.Select(t => t.FullName!).Distinct().ToArray();",
      "71:         var firstMatchingFullname = fullNames.FirstOrDefault(fn => fn.EndsWith($\".{simpleTypeName}\"));",
      "73:         if (firstMatchingFullname == null)",
      "74:         {",
      "75:             return null;",
      "78:         return types.FirstOrDefault(t => t.FullName == firstMatchingFullname);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "147:             }",
      "148:             catch (ReflectionTypeLoadException reflectionTypeLoadException)",
      "149:             {",
      "151:             }",
      "152:             catch",
      "153:             {",
      "",
      "[Removed Lines]",
      "150:                 definedTypes = reflectionTypeLoadException.Types.WhereNotNull().ToArray();",
      "",
      "[Added Lines]",
      "150:                 definedTypes = reflectionTypeLoadException.Types.OfType<Type>().ToArray();",
      "",
      "---------------"
    ],
    "src/System.Linq.Dynamic.Core/CustomTypeProviders/DefaultDynamicLinqCustomTypeProvider.cs||src/System.Linq.Dynamic.Core/CustomTypeProviders/DefaultDynamicLinqCustomTypeProvider.cs": [
      "File: src/System.Linq.Dynamic.Core/CustomTypeProviders/DefaultDynamicLinqCustomTypeProvider.cs -> src/System.Linq.Dynamic.Core/CustomTypeProviders/DefaultDynamicLinqCustomTypeProvider.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "22:     private HashSet<Type>? _cachedCustomTypes;",
      "23:     private Dictionary<Type, List<MethodInfo>>? _cachedExtensionMethods;",
      "31:     public DefaultDynamicLinqCustomTypeProvider(bool cacheCustomTypes = true) : this(ParsingConfig.Default, cacheCustomTypes)",
      "32:     {",
      "33:     }",
      "",
      "[Removed Lines]",
      "30:     [Obsolete(\"Please use the DefaultDynamicLinqCustomTypeProvider(ParsingConfig config, bool cacheCustomTypes = true) constructor.\")]",
      "",
      "[Added Lines]",
      "28:     [Obsolete(\"Please use the DefaultDynamicLinqCustomTypeProvider(ParsingConfig config, IList<Type> additionalTypes, bool cacheCustomTypes = true) constructor.\")]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "41:     {",
      "42:         _assemblyHelper = new DefaultAssemblyHelper(Check.NotNull(config));",
      "43:         _cacheCustomTypes = cacheCustomTypes;",
      "",
      "[Removed Lines]",
      "40:     public DefaultDynamicLinqCustomTypeProvider(ParsingConfig config, bool cacheCustomTypes = true)",
      "",
      "[Added Lines]",
      "38:     public DefaultDynamicLinqCustomTypeProvider(ParsingConfig config, bool cacheCustomTypes = true) : this(config, new List<Type>(), cacheCustomTypes)",
      "39:     {",
      "40:     }",
      "48:     public DefaultDynamicLinqCustomTypeProvider(ParsingConfig config, IList<Type> additionalTypes, bool cacheCustomTypes = true) : base(additionalTypes)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:     private HashSet<Type> GetCustomTypesInternal()",
      "97:     {",
      "98:         IEnumerable<Assembly> assemblies = _assemblyHelper.GetAssemblies();",
      "100:     }",
      "102:     private Dictionary<Type, List<MethodInfo>> GetExtensionMethodsInternal()",
      "",
      "[Removed Lines]",
      "99:         return new HashSet<Type>(FindTypesMarkedWithDynamicLinqTypeAttribute(assemblies));",
      "",
      "[Added Lines]",
      "107:         var types = FindTypesMarkedWithDynamicLinqTypeAttribute(assemblies).Union(AdditionalTypes);",
      "108:         return new HashSet<Type>(types);",
      "",
      "---------------"
    ],
    "src/System.Linq.Dynamic.Core/CustomTypeProviders/IDynamicLinkCustomTypeProvider.cs||src/System.Linq.Dynamic.Core/CustomTypeProviders/IDynamicLinkCustomTypeProvider.cs": [
      "File: src/System.Linq.Dynamic.Core/CustomTypeProviders/IDynamicLinkCustomTypeProvider.cs -> src/System.Linq.Dynamic.Core/CustomTypeProviders/IDynamicLinkCustomTypeProvider.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: {",
      "7:     public interface IDynamicLinkCustomTypeProvider : IDynamicLinqCustomTypeProvider",
      "8:     {",
      "9:     }",
      "",
      "[Removed Lines]",
      "10: }",
      "",
      "[Added Lines]",
      "6:     [Obsolete(\"Please use the IDynamicLinqCustomTypeProvider interface instead.\")]",
      "10: }",
      "",
      "---------------"
    ],
    "src/System.Linq.Dynamic.Core/Extensions/LinqExtensions.cs||src/System.Linq.Dynamic.Core/Extensions/LinqExtensions.cs": [
      "File: src/System.Linq.Dynamic.Core/Extensions/LinqExtensions.cs -> src/System.Linq.Dynamic.Core/Extensions/LinqExtensions.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/System.Linq.Dynamic.Core/Parser/PredefinedTypesHelper.cs||src/System.Linq.Dynamic.Core/Parser/PredefinedTypesHelper.cs": [
      "File: src/System.Linq.Dynamic.Core/Parser/PredefinedTypesHelper.cs -> src/System.Linq.Dynamic.Core/Parser/PredefinedTypesHelper.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "29:     public static readonly IDictionary<Type, int> PredefinedTypes = new ConcurrentDictionary<Type, int>(new Dictionary<Type, int>",
      "30:     {",
      "32:         { typeof(bool), 0 },",
      "33:         { typeof(char), 0 },",
      "34:         { typeof(string), 0 },",
      "",
      "[Removed Lines]",
      "31:         { typeof(object), 0 },",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/System.Linq.Dynamic.Core/ParsingConfig.cs||src/System.Linq.Dynamic.Core/ParsingConfig.cs": [
      "File: src/System.Linq.Dynamic.Core/ParsingConfig.cs -> src/System.Linq.Dynamic.Core/ParsingConfig.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:         }",
      "72:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78:     public void UseDefaultDynamicLinqCustomTypeProvider(bool cacheCustomTypes = true)",
      "79:     {",
      "80:         _customTypeProvider = new DefaultDynamicLinqCustomTypeProvider(this, cacheCustomTypes);",
      "81:     }",
      "88:     public void UseDefaultDynamicLinqCustomTypeProvider(IList<Type> additionalTypes, bool cacheCustomTypes = true)",
      "89:     {",
      "90:         _customTypeProvider = new DefaultDynamicLinqCustomTypeProvider(this, additionalTypes, cacheCustomTypes);",
      "91:     }",
      "",
      "---------------"
    ],
    "test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs||test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs": [
      "File: test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs -> test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: using System.Linq.Dynamic.Core.CustomTypeProviders;",
      "3: using FluentAssertions;",
      "4: using NFluent;",
      "",
      "[Removed Lines]",
      "1: \ufeffusing System.IO;",
      "",
      "[Added Lines]",
      "1: \ufeffusing System.Collections.Generic;",
      "2: using System.IO;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "9: public class DefaultDynamicLinqCustomTypeProviderTests",
      "10: {",
      "11:     private readonly DefaultDynamicLinqCustomTypeProvider _sut;",
      "13:     public DefaultDynamicLinqCustomTypeProviderTests()",
      "14:     {",
      "16:     }",
      "18:     [Fact]",
      "",
      "[Removed Lines]",
      "15:         _sut = new DefaultDynamicLinqCustomTypeProvider(ParsingConfig.Default);",
      "",
      "[Added Lines]",
      "12:     private readonly IList<Type> _additionalTypes = new List<Type>",
      "13:     {",
      "14:         typeof(DirectoryInfo),",
      "15:         typeof(DefaultDynamicLinqCustomTypeProviderTests)",
      "16:     };",
      "22:         _sut = new DefaultDynamicLinqCustomTypeProvider(ParsingConfig.Default, _additionalTypes);",
      "",
      "---------------"
    ],
    "test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs||test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs": [
      "File: test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs -> test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "281:         isValid.Should().BeFalse(); // This should actually be true, but fails. For solution see Issue593_Solution1 and Issue593_Solution2.",
      "282:     }",
      "285:     public void DynamicClassArray_Issue593_Solution1()",
      "286:     {",
      "",
      "[Removed Lines]",
      "284:     [SkipIfGitHubActions]",
      "",
      "[Added Lines]",
      "285:     [Fact(Skip = \"867\")]",
      "",
      "---------------"
    ],
    "test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs||test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs": [
      "File: test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs -> test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "1058:         Assert.Equal(expectedRightValue, rightValue);",
      "1059:     }",
      "1062:     public void DynamicExpressionParser_ParseLambda_TupleToStringMethodCall_ReturnsStringLambdaExpression()",
      "1063:     {",
      "1064:         var expression = DynamicExpressionParser.ParseLambda(",
      "",
      "[Removed Lines]",
      "1061:     [Fact]",
      "",
      "[Added Lines]",
      "1061:     [Fact(Skip = \"867\")]",
      "",
      "---------------"
    ],
    "test/System.Linq.Dynamic.Core.Tests/Entities/Worker.cs||test/System.Linq.Dynamic.Core.Tests/Entities/Worker.cs": [
      "File: test/System.Linq.Dynamic.Core.Tests/Entities/Worker.cs -> test/System.Linq.Dynamic.Core.Tests/Entities/Worker.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "2: {",
      "3:     public class Worker : BaseEmployee",
      "4:     {",
      "5:         public string Other { get; set; }",
      "",
      "[Removed Lines]",
      "1: \ufeffnamespace System.Linq.Dynamic.Core.Tests.Entities",
      "",
      "[Added Lines]",
      "1: \ufeffusing System.Linq.Dynamic.Core.CustomTypeProviders;",
      "3: namespace System.Linq.Dynamic.Core.Tests.Entities",
      "5:     [DynamicLinqType]",
      "",
      "---------------"
    ],
    "test/System.Linq.Dynamic.Core.Tests/ExpressionTests.cs||test/System.Linq.Dynamic.Core.Tests/ExpressionTests.cs": [
      "File: test/System.Linq.Dynamic.Core.Tests/ExpressionTests.cs -> test/System.Linq.Dynamic.Core.Tests/ExpressionTests.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: namespace System.Linq.Dynamic.Core.Tests",
      "15: {",
      "16:     public enum TestEnumPublic : sbyte",
      "17:     {",
      "18:         Var1 = 0,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16:     [DynamicLinqType]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "26:     public partial class ExpressionTests",
      "27:     {",
      "28:         public enum TestEnum2 : sbyte",
      "29:         {",
      "30:             Var1 = 0,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "29:         [DynamicLinqType]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "919:         public void ExpressionTests_Enum_Property_Equality_Using_Enum_And_FullName_Inline()",
      "920:         {",
      "922:             var qry = new List<TestEnumClass> { new TestEnumClass { B = TestEnum2.Var2 } }.AsQueryable();",
      "923:             string enumType = typeof(TestEnum2).FullName!;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "924:             var config = new ParsingConfig();",
      "925:             config.UseDefaultDynamicLinqCustomTypeProvider([typeof(TestEnum2)]);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "948:         }",
      "950:         [Fact]",
      "952:         {",
      "954:             var config = new ParsingConfig",
      "",
      "[Removed Lines]",
      "951:         public void ExpressionTests_Enum_Property_Equality_Using_Enum_Name_Inline_Should_Throw_Exception()",
      "",
      "[Added Lines]",
      "956:         public void ExpressionTests_Enum_Property_Equality_Using_Enum_Name_Inline_ShouldBeOk()",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "962:             Action a = () => qry.Where(config, $\"{enumType}.Var2 == it.B\").ToDynamicArray();",
      "966:         }",
      "968:         [Fact]",
      "",
      "[Removed Lines]",
      "965:             a.Should().Throw<Exception>();",
      "",
      "[Added Lines]",
      "970:             a.Should().NotThrow();",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1031:         [Fact]",
      "1032:         public void ExpressionTests_Enum_MoreTests()",
      "1033:         {",
      "1037:             var lst = new List<TestEnum> { TestEnum.Var1, TestEnum.Var2, TestEnum.Var3, TestEnum.Var4, TestEnum.Var5, TestEnum.Var6 };",
      "",
      "[Removed Lines]",
      "1034:             var config = new ParsingConfig();",
      "",
      "[Added Lines]",
      "1039:             var config = new ParsingConfig",
      "1040:             {",
      "1041:                 ResolveTypesBySimpleName = true",
      "1042:             };",
      "",
      "---------------"
    ],
    "test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs||test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs": [
      "File: test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs -> test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: \ufeffusing System.Collections.Generic;",
      "2: using System.Linq.Dynamic.Core.CustomTypeProviders;",
      "4: namespace System.Linq.Dynamic.Core.Tests.Helpers.Models",
      "5: {",
      "6:     public static class AppSettings",
      "7:     {",
      "8:         public static Dictionary<string, string> SettingsProp { get; } = new()",
      "9:         {",
      "10:             { \"jwt\", \"test\" }",
      "11:         };",
      "13:         public static Dictionary<string, string> SettingsField = new()",
      "14:         {",
      "15:             { \"jwt\", \"test\" }",
      "16:         };",
      "17:     }",
      "19:     [DynamicLinqType]",
      "20:     public static class AppSettings2",
      "21:     {",
      "22:         public static Dictionary<string, string> SettingsProp { get; } = new()",
      "23:         {",
      "24:             { \"jwt\", \"test\" }",
      "25:         };",
      "27:         public static Dictionary<string, string> SettingsField = new()",
      "28:         {",
      "29:             { \"jwt\", \"test\" }",
      "30:         };",
      "31:     }",
      "33:     public class AppSettings3",
      "34:     {",
      "35:         public static Dictionary<string, string> SettingsProp { get; } = new()",
      "36:         {",
      "37:             { \"jwt\", \"test\" }",
      "38:         };",
      "40:         public static Dictionary<string, string> SettingsField = new()",
      "41:         {",
      "42:             { \"jwt\", \"test\" }",
      "43:         };",
      "44:     }",
      "45: }",
      "",
      "---------------"
    ],
    "test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs||test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs": [
      "File: test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs -> test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "346:     [Theory]",
      "347:     [InlineData(\"it.MainCompany.Name != null\", \"(company.MainCompany.Name != null)\")]",
      "348:     [InlineData(\"@MainCompany.Companies.Count() > 0\", \"(company.MainCompany.Companies.Count() > 0)\")]",
      "350:     [InlineData(\"MainCompany.Name\", \"company.MainCompany.Name\")]",
      "351:     [InlineData(\"Name\", \"company.Name\")]",
      "352:     [InlineData(\"company.Name\", \"company.Name\")]",
      "",
      "[Removed Lines]",
      "349:     [InlineData(\"Company.Equals(null, null)\", \"Equals(null, null)\")]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs||test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs": [
      "File: test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs -> test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "8: public class MethodFinderTest",
      "9: {",
      "11:     public void MethodsOfDynamicLinqAndSystemLinqShouldBeEqual()",
      "12:     {",
      "13:         Expression<Func<int?, string?>> expr = x => x.ToString();",
      "15:         var selector = \"ToString()\";",
      "16:         var prm = Parameter(typeof(int?));",
      "18:         var expr1 = parser.Parse(null);",
      "20:         Assert.Equal(((MethodCallExpression)expr.Body).Method.DeclaringType, ((MethodCallExpression)expr1).Method.DeclaringType);",
      "",
      "[Removed Lines]",
      "10:     [Fact]",
      "17:         var parser = new ExpressionParser(new[] { prm }, selector, new object[] { }, ParsingConfig.Default);",
      "",
      "[Added Lines]",
      "10:     [Fact(Skip = \"867\")]",
      "17:         var parser = new ExpressionParser([prm], selector, [], ParsingConfig.Default);",
      "",
      "---------------"
    ],
    "test/System.Linq.Dynamic.Core.Tests/QueryableTests.Is,OfType,As,Cast.cs||test/System.Linq.Dynamic.Core.Tests/QueryableTests.Is,OfType,As,Cast.cs": [
      "File: test/System.Linq.Dynamic.Core.Tests/QueryableTests.Is,OfType,As,Cast.cs -> test/System.Linq.Dynamic.Core.Tests/QueryableTests.Is,OfType,As,Cast.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: \ufeffusing System.Collections.Generic;",
      "2: using System.Linq.Dynamic.Core.Exceptions;",
      "3: using System.Linq.Dynamic.Core.Tests.Entities;",
      "4: using FluentAssertions;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2: using System.Linq.Dynamic.Core.CustomTypeProviders;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "99:         internal class Base { }",
      "101:         internal class DerivedA : Base { }",
      "103:         internal class DerivedB : Base { }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "102:         [DynamicLinqType]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "294:             countAsDynamic.Should().Be(count);",
      "295:         }",
      "298:         {",
      "299:             None = 0,",
      "",
      "[Removed Lines]",
      "297:         public enum TestEnum",
      "",
      "[Added Lines]",
      "299:         [DynamicLinqType]",
      "300:         public enum TestEnumForThisTest",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "305:         public void As_Dynamic_ActingOnProperty_NullableEnum()",
      "306:         {",
      "309:             var qry = new[]",
      "310:             {",
      "312:             }.AsQueryable();",
      "",
      "[Removed Lines]",
      "308:             var nullableEnumType = $\"{typeof(TestEnum).FullName}?\";",
      "311:                 new { Value = TestEnum.X }",
      "",
      "[Added Lines]",
      "311:             var nullableEnumType = $\"{typeof(TestEnumForThisTest).FullName}?\";",
      "314:                 new { Value = TestEnumForThisTest.X }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "365:             countAsDynamic.Should().Be(1);",
      "366:         }",
      "368:         public class AS_A { }",
      "369:         public class AS_B : AS_A",
      "370:         {",
      "371:             public string MyProperty { get; set; }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "371:         [DynamicLinqType]",
      "374:         [DynamicLinqType]",
      "",
      "---------------"
    ],
    "test/System.Linq.Dynamic.Core.Tests/QueryableTests.Select.cs||test/System.Linq.Dynamic.Core.Tests/QueryableTests.Select.cs": [
      "File: test/System.Linq.Dynamic.Core.Tests/QueryableTests.Select.cs -> test/System.Linq.Dynamic.Core.Tests/QueryableTests.Select.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: \ufeffusing System.Collections;",
      "2: using System.Collections.Generic;",
      "3: using System.IO;",
      "4: using System.Linq.Dynamic.Core.Exceptions;",
      "5: using System.Linq.Dynamic.Core.Tests.Helpers.Models;",
      "6: using FluentAssertions;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: using System.Linq.Dynamic.Core.CustomTypeProviders;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "19: {",
      "20:     public partial class QueryableTests",
      "21:     {",
      "22:         public class Example",
      "23:         {",
      "24:             public int Field;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "23:         [DynamicLinqType]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "29:             public int Sec { get; set; }",
      "30:             public int? SecNull { get; set; }",
      "32:             public class NestedDto",
      "33:             {",
      "34:                 public string Name { get; set; }",
      "36:                 public class NestedDto2",
      "37:                 {",
      "38:                     public string Name2 { get; set; }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "34:             [DynamicLinqType]",
      "39:                 [DynamicLinqType]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "324:         public void Select_Dynamic_SystemType1()",
      "325:         {",
      "328:             var queryable = new[] { \"test\" }.AsQueryable();",
      "",
      "[Removed Lines]",
      "327:             var config = new ParsingConfig { AllowNewToEvaluateAnyType = true };",
      "",
      "[Added Lines]",
      "331:             var config = new ParsingConfig",
      "332:             {",
      "333:                 AllowNewToEvaluateAnyType = true",
      "334:             };",
      "335:             config.UseDefaultDynamicLinqCustomTypeProvider([typeof(DirectoryInfo)]);",
      "",
      "---------------"
    ],
    "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs": [
      "File: test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs -> test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: \ufeffusing System.IO;",
      "2: using System.Linq.Dynamic.Core.Exceptions;",
      "4: using System.Reflection;",
      "5: using FluentAssertions;",
      "6: using Xunit;",
      "",
      "[Removed Lines]",
      "3: using System.Net;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "26:     {",
      "28:         var baseQuery = new[] { 1, 2, 3 }.AsQueryable();",
      "32:         Action action = () => baseQuery.OrderBy(predicate);",
      "36:     }",
      "38:     [Fact]",
      "",
      "[Removed Lines]",
      "29:         string predicate = \"\\\"\\\".GetType().Assembly.DefinedTypes.Where(it.name == \\\"Assembly\\\").First().DeclaredMethods.Where(it.Name == \\\"GetName\\\").First().Invoke(\\\"\\\".GetType().Assembly, new Object[] {} ).Name.ToString() != \\\"Test\\\"\";",
      "35:         action.Should().Throw<ParseException>().WithMessage(\"Methods on type 'MethodBase' are not accessible\");",
      "",
      "[Added Lines]",
      "28:         var predicate = \"\\\"\\\".GetType().Assembly.DefinedTypes.Where(it.name == \\\"Assembly\\\").First().DeclaredMethods.Where(it.Name == \\\"GetName\\\").First().Invoke(\\\"\\\".GetType().Assembly, new Object[] {} ).Name.ToString() != \\\"Test\\\"\";",
      "34:         action.Should().Throw<ParseException>().WithMessage(\"Methods on type 'Object' are not accessible\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "42:         var messages = new[]",
      "43:         {",
      "46:         }.AsQueryable();",
      "48:         Action action = () => messages.Where(",
      "",
      "[Removed Lines]",
      "44:             new Message(\"Alice\", \"Bob\"),",
      "45:             new Message(\"Bob\", \"Alice\")",
      "",
      "[Added Lines]",
      "43:             new Message(\"Alice\", \"Bob\")",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "50:         );",
      "54:     }",
      "56:     [Theory]",
      "",
      "[Removed Lines]",
      "53:         action.Should().Throw<ParseException>().WithMessage($\"Methods on type 'Assembly' are not accessible\");",
      "",
      "[Added Lines]",
      "51:         action.Should().Throw<ParseException>().WithMessage($\"Methods on type 'Object' are not accessible\");",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:         action.Should().Throw<ParseException>().WithMessage($\"Methods on type '{type}' are not accessible\");",
      "66:     }",
      "67: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "66:     [Theory]",
      "67:     [InlineData(\"c => string.Join(\\\"_\\\", c.GetType().Assembly.DefinedTypes.SelectMany(t => t.CustomAttributes).Select(a => a.AttributeType).Select(t => t.AssemblyQualifiedName))\")]",
      "68:     [InlineData(\"c => string.Join(\\\"_\\\", c.GetType().Assembly.DefinedTypes.Select(t => t.BaseType).Select(t => t.AssemblyQualifiedName))\")]",
      "69:     [InlineData(\"c => string.Join(\\\"_\\\", c.GetType().Assembly.FullName))\")]",
      "70:     public void UsingSystemReflectionAssembly_ThrowsException(string selector)",
      "71:     {",
      "73:         var queryable = new[]",
      "74:         {",
      "75:             new Message(\"Alice\", \"Bob\")",
      "76:         }.AsQueryable();",
      "79:         Action action = () => queryable.Select(selector);",
      "82:         action.Should().Throw<ParseException>().WithMessage(\"Methods on type 'Object' are not accessible\");",
      "83:     }",
      "85:     [Theory]",
      "86:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsProp[\\\"jwt\\\"]\")]",
      "87:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsField[\\\"jwt\\\"]\")]",
      "88:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsProp[\\\"jwt\\\"]\")]",
      "89:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsField[\\\"jwt\\\"]\")]",
      "90:     public void UsingStaticClassAsType_ThrowsException(string selector)",
      "91:     {",
      "93:         var queryable = new[]",
      "94:         {",
      "95:             new Message(\"Alice\", \"Bob\")",
      "96:         }.AsQueryable();",
      "99:         Action action = () => queryable.Select(selector);",
      "102:         action.Should().Throw<ParseException>().WithMessage(\"Type 'System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings' not found\");",
      "103:     }",
      "105:     [Theory]",
      "106:     [InlineData(\"new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3().SettingsProp[\\\"jwt\\\"]\")]",
      "107:     [InlineData(\"new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3().SettingsField[\\\"jwt\\\"]\")]",
      "108:     [InlineData(\"c => new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3().SettingsProp[\\\"jwt\\\"]\")]",
      "109:     [InlineData(\"c => new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3().SettingsField[\\\"jwt\\\"]\")]",
      "110:     public void UsingClassAsType_ThrowsException(string selector)",
      "111:     {",
      "113:         var queryable = new[]",
      "114:         {",
      "115:             new Message(\"Alice\", \"Bob\")",
      "116:         }.AsQueryable();",
      "119:         Action action = () => queryable.Select(selector);",
      "122:         action.Should().Throw<ParseException>().WithMessage(\"Type 'System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3' not found\");",
      "123:     }",
      "125:     [Theory]",
      "126:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsProp[\\\"jwt\\\"]\")]",
      "127:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsField[\\\"jwt\\\"]\")]",
      "128:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsProp[\\\"jwt\\\"]\")]",
      "129:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsField[\\\"jwt\\\"]\")]",
      "130:     public void UsingStaticClassAsType_WhenAddedToDefaultDynamicLinqCustomTypeProvider_ShouldBeOk(string selector)",
      "131:     {",
      "133:         var config = new ParsingConfig();",
      "134:         config.UseDefaultDynamicLinqCustomTypeProvider([typeof(Helpers.Models.AppSettings), typeof(Helpers.Models.AppSettings3)]);",
      "136:         var queryable = new[]",
      "137:         {",
      "138:             new Message(\"Alice\", \"Bob\")",
      "139:         }.AsQueryable();",
      "142:         Action action = () => queryable.Select(config, selector);",
      "145:         action.Should().NotThrow();",
      "146:     }",
      "148:     [Theory(Skip = \"873\")]",
      "149:     [InlineData(\"new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3()\", \"SettingsProp[\\\"jwt\\\"]\")]",
      "150:     [InlineData(\"new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3()\", \"SettingsField[\\\"jwt\\\"]\")]",
      "151:     [InlineData(\"c => new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3()\", \"SettingsProp[\\\"jwt\\\"]\")]",
      "152:     [InlineData(\"c => new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3()\", \"SettingsField[\\\"jwt\\\"]\")]",
      "153:     public void UsingClassAsType_WhenAddedToDefaultDynamicLinqCustomTypeProvider_ShouldBeOk(string selector1, string selector2)",
      "154:     {",
      "156:         var config = new ParsingConfig();",
      "157:         config.UseDefaultDynamicLinqCustomTypeProvider([typeof(Helpers.Models.AppSettings), typeof(Helpers.Models.AppSettings3)]);",
      "159:         var queryable = new[]",
      "160:         {",
      "161:             new Message(\"Alice\", \"Bob\")",
      "162:         }.AsQueryable();",
      "165:         Action action = () => queryable.Select(config, selector1).Select(config, selector2);",
      "168:         action.Should().NotThrow();",
      "169:     }",
      "171:     [Theory]",
      "172:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings2.SettingsProp[\\\"jwt\\\"]\")]",
      "173:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings2.SettingsField[\\\"jwt\\\"]\")]",
      "174:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings2.SettingsProp[\\\"jwt\\\"]\")]",
      "175:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings2.SettingsField[\\\"jwt\\\"]\")]",
      "176:     public void UsingStaticClassWithDynamicTypeAttribute_ShouldBeOk(string selector)",
      "177:     {",
      "179:         var queryable = new[]",
      "180:         {",
      "181:             new Message(\"Alice\", \"Bob\")",
      "182:         }.AsQueryable();",
      "185:         Action action = () => queryable.Select(selector);",
      "188:         action.Should().NotThrow();",
      "189:     }",
      "",
      "---------------"
    ],
    "test/System.Linq.Dynamic.Core.Tests/TestClasses/TestCustomTypeProvider.cs||test/System.Linq.Dynamic.Core.Tests/TestClasses/TestCustomTypeProvider.cs": [
      "File: test/System.Linq.Dynamic.Core.Tests/TestClasses/TestCustomTypeProvider.cs -> test/System.Linq.Dynamic.Core.Tests/TestClasses/TestCustomTypeProvider.cs",
      "--- Hunk 1 ---",
      "[Context before]",
      "9:     {",
      "10:         private HashSet<Type>? _customTypes;",
      "12:         public virtual HashSet<Type> GetCustomTypes()",
      "13:         {",
      "14:             if (_customTypes != null)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12:         public TestCustomTypeProvider() : base([])",
      "13:         {",
      "14:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "16:                 return _customTypes;",
      "17:             }",
      "20:             {",
      "21:                 typeof(CustomClassWithStaticMethod),",
      "22:                 typeof(StaticHelper),",
      "23:                 typeof(StaticHelper.Nested)",
      "24:             };",
      "25:             return _customTypes;",
      "26:         }",
      "",
      "[Removed Lines]",
      "19:             _customTypes = new HashSet<Type>(FindTypesMarkedWithDynamicLinqTypeAttribute(new[] { GetType().GetTypeInfo().Assembly }))",
      "",
      "[Added Lines]",
      "23:             _customTypes = new HashSet<Type>(FindTypesMarkedWithDynamicLinqTypeAttribute([GetType().GetTypeInfo().Assembly]))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1934a14aa49f5aec4cad28a4dd3765c2cae61064",
      "candidate_info": {
        "commit_hash": "1934a14aa49f5aec4cad28a4dd3765c2cae61064",
        "repo": "zzzprojects/System.Linq.Dynamic.Core",
        "commit_url": "https://github.com/zzzprojects/System.Linq.Dynamic.Core/commit/1934a14aa49f5aec4cad28a4dd3765c2cae61064",
        "files": [
          "src-blazor/BlazorAppServer/BlazorAppServer.csproj",
          "src/System.Linq.Dynamic.Core/Compatibility/TypeExtensions.cs",
          "src/System.Linq.Dynamic.Core/DynamicClassFactory.cs",
          "src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs",
          "src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs",
          "src/System.Linq.Dynamic.Core/ParsingConfig.cs",
          "src/System.Linq.Dynamic.Core/Res.cs",
          "test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs",
          "test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs",
          "test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs",
          "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs",
          "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs"
        ],
        "message": "Add option to ParsingConfig to allow the Equals and ToString methods on object (#875)\n\n* Add option to ParsingConfig to allow the Equals and ToString methods on object\n\n* .\n\n* ---\n\n* ReferenceEquals\n\n* .",
        "before_after_code_files": [
          "src-blazor/BlazorAppServer/BlazorAppServer.csproj||src-blazor/BlazorAppServer/BlazorAppServer.csproj",
          "src/System.Linq.Dynamic.Core/Compatibility/TypeExtensions.cs||src/System.Linq.Dynamic.Core/Compatibility/TypeExtensions.cs",
          "src/System.Linq.Dynamic.Core/DynamicClassFactory.cs||src/System.Linq.Dynamic.Core/DynamicClassFactory.cs",
          "src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs||src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs",
          "src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs||src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs",
          "src/System.Linq.Dynamic.Core/ParsingConfig.cs||src/System.Linq.Dynamic.Core/ParsingConfig.cs",
          "src/System.Linq.Dynamic.Core/Res.cs||src/System.Linq.Dynamic.Core/Res.cs",
          "test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs||test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs",
          "test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs||test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs",
          "test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs||test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs",
          "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs||test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs",
          "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/System.Linq.Dynamic.Core/ParsingConfig.cs||src/System.Linq.Dynamic.Core/ParsingConfig.cs",
            "test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs||test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs",
            "test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs||test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs",
            "test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs||test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs",
            "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs||test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs",
            "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs"
          ],
          "candidate": [
            "src/System.Linq.Dynamic.Core/ParsingConfig.cs||src/System.Linq.Dynamic.Core/ParsingConfig.cs",
            "test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs||test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs",
            "test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs||test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs",
            "test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs||test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs",
            "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs||test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs",
            "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs"
          ]
        }
      },
      "candidate_diff": {
        "src-blazor/BlazorAppServer/BlazorAppServer.csproj||src-blazor/BlazorAppServer/BlazorAppServer.csproj": [
          "File: src-blazor/BlazorAppServer/BlazorAppServer.csproj -> src-blazor/BlazorAppServer/BlazorAppServer.csproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "17:         <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"6.0.1\" />",
          "18:         <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"6.0.0\" />",
          "19:         <PackageReference Include=\"System.ComponentModel.Annotations\" Version=\"5.0.0\" />",
          "21:         <PackageReference Include=\"System.Configuration.ConfigurationManager\" Version=\"6.0.0\" />",
          "23:     </ItemGroup>",
          "25:     <ItemGroup>",
          "",
          "[Removed Lines]",
          "20:         <PackageReference Include=\"Oqtane.Shared\" Version=\"3.1.4\" />",
          "22:         <!--<PackageReference Include=\"System.Linq.Dynamic.Core\" Version=\"1.2.19\" />-->",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/System.Linq.Dynamic.Core/Compatibility/TypeExtensions.cs||src/System.Linq.Dynamic.Core/Compatibility/TypeExtensions.cs": [
          "File: src/System.Linq.Dynamic.Core/Compatibility/TypeExtensions.cs -> src/System.Linq.Dynamic.Core/Compatibility/TypeExtensions.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: using System.Linq;",
          "4: namespace System.Reflection;",
          "",
          "[Removed Lines]",
          "1: \ufeff#if NETSTANDARD1_3",
          "",
          "[Added Lines]",
          "1: \ufeff#if NETSTANDARD1_3 || UAP10_0",
          "",
          "---------------"
        ],
        "src/System.Linq.Dynamic.Core/DynamicClassFactory.cs||src/System.Linq.Dynamic.Core/DynamicClassFactory.cs": [
          "File: src/System.Linq.Dynamic.Core/DynamicClassFactory.cs -> src/System.Linq.Dynamic.Core/DynamicClassFactory.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: using System.Collections;",
          "3: using System.Collections.Concurrent;",
          "4: using System.Collections.Generic;",
          "5: using System.Diagnostics;",
          "6: using System.Linq.Dynamic.Core.Validation;",
          "7: using System.Reflection;",
          "8: using System.Reflection.Emit;",
          "",
          "[Removed Lines]",
          "1: \ufeff#if !(UAP10_0)",
          "",
          "[Added Lines]",
          "1: \ufeff#if !UAP10_0",
          "6: using System.Linq.Dynamic.Core.Parser;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:     private static readonly ConstructorInfo ObjectCtor = typeof(object).GetConstructor(Type.EmptyTypes)!;",
          "36:     private static readonly ConstructorInfo StringBuilderCtor = typeof(StringBuilder).GetConstructor(Type.EmptyTypes)!;",
          "37: #if UAP10_0 || NETSTANDARD",
          "38:     private static readonly MethodInfo StringBuilderAppendString = typeof(StringBuilder).GetMethod(nameof(StringBuilder.Append), [typeof(string)])!;",
          "",
          "[Removed Lines]",
          "30: #if UAP10_0 || NETSTANDARD",
          "31:     private static readonly MethodInfo ObjectToString = typeof(object).GetMethod(nameof(ToString), BindingFlags.Instance | BindingFlags.Public)!;",
          "32: #else",
          "33:     private static readonly MethodInfo ObjectToString = typeof(object).GetMethod(nameof(ToString), BindingFlags.Instance | BindingFlags.Public, null, Type.EmptyTypes, null)!;",
          "34: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "419:         ilgeneratorToString.Emit(OpCodes.Callvirt, StringBuilderAppendString);",
          "420:         ilgeneratorToString.Emit(OpCodes.Pop);",
          "421:         ilgeneratorToString.Emit(OpCodes.Ldloc_0);",
          "423:         ilgeneratorToString.Emit(OpCodes.Ret);",
          "425:         EmitEqualityOperators(typeBuilder, equals);",
          "",
          "[Removed Lines]",
          "422:         ilgeneratorToString.Emit(OpCodes.Callvirt, ObjectToString);",
          "",
          "[Added Lines]",
          "417:         ilgeneratorToString.Emit(OpCodes.Callvirt, PredefinedMethodsHelper.ObjectToString);",
          "",
          "---------------"
        ],
        "src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs||src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs": [
          "File: src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs -> src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1841:                 case 1:",
          "1842:                     var method = (MethodInfo)methodBase!;",
          "1844:                     {",
          "1846:                     }",
          "1848:                     MethodInfo methodToCall;",
          "",
          "[Removed Lines]",
          "1843:                     if (!PredefinedTypesHelper.IsPredefinedType(_parsingConfig, method.DeclaringType!))",
          "1845:                         throw ParseError(errorPos, Res.MethodsAreInaccessible, TypeHelper.GetTypeName(method.DeclaringType!));",
          "",
          "[Added Lines]",
          "1843:                     if (!PredefinedTypesHelper.IsPredefinedType(_parsingConfig, method.DeclaringType!) && !PredefinedMethodsHelper.IsPredefinedMethod(_parsingConfig, method))",
          "1845:                         throw ParseError(errorPos, Res.MethodIsInaccessible, id, TypeHelper.GetTypeName(method.DeclaringType!));",
          "",
          "---------------"
        ],
        "src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs||src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs": [
          "File: src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs -> src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \ufeffusing System.Collections.Generic;",
          "2: using System.Linq.Dynamic.Core.Validation;",
          "3: using System.Reflection;",
          "5: namespace System.Linq.Dynamic.Core.Parser;",
          "7: internal static class PredefinedMethodsHelper",
          "8: {",
          "9:     internal static readonly MethodInfo ObjectToString = typeof(object).GetMethod(nameof(ToString), BindingFlags.Instance | BindingFlags.Public, null, Type.EmptyTypes, null)!;",
          "10:     internal static readonly MethodInfo ObjectInstanceEquals = typeof(object).GetMethod(nameof(Equals), BindingFlags.Instance | BindingFlags.Public, null, [typeof(object)], null)!;",
          "11:     internal static readonly MethodInfo ObjectStaticEquals = typeof(object).GetMethod(nameof(Equals), BindingFlags.Static | BindingFlags.Public, null, [typeof(object), typeof(object)], null)!;",
          "12:     internal static readonly MethodInfo ObjectStaticReferenceEquals = typeof(object).GetMethod(nameof(ReferenceEquals), BindingFlags.Static | BindingFlags.Public, null, [typeof(object), typeof(object)], null)!;",
          "15:     private static readonly HashSet<MemberInfo> ObjectToStringAndObjectEquals =",
          "16:     [",
          "17:         ObjectToString,",
          "18:         ObjectInstanceEquals,",
          "19:         ObjectStaticEquals,",
          "20:         ObjectStaticReferenceEquals",
          "21:     ];",
          "23:     public static bool IsPredefinedMethod(ParsingConfig config, MemberInfo member)",
          "24:     {",
          "25:         Check.NotNull(config);",
          "26:         Check.NotNull(member);",
          "28:         return config.AllowEqualsAndToStringMethodsOnObject && ObjectToStringAndObjectEquals.Contains(member);",
          "29:     }",
          "30: }",
          "",
          "---------------"
        ],
        "src/System.Linq.Dynamic.Core/ParsingConfig.cs||src/System.Linq.Dynamic.Core/ParsingConfig.cs": [
          "File: src/System.Linq.Dynamic.Core/ParsingConfig.cs -> src/System.Linq.Dynamic.Core/ParsingConfig.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:     public bool RestrictOrderByToPropertyOrField { get; set; }",
          "315: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "321:     public bool AllowEqualsAndToStringMethodsOnObject { get; set; }",
          "",
          "---------------"
        ],
        "src/System.Linq.Dynamic.Core/Res.cs||src/System.Linq.Dynamic.Core/Res.cs": [
          "File: src/System.Linq.Dynamic.Core/Res.cs -> src/System.Linq.Dynamic.Core/Res.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     public const string InvalidStringLength = \"String '{0}' should have at least {1} characters.\";",
          "51:     public const string IsNullRequiresTwoArgs = \"The 'isnull' function requires two arguments\";",
          "52:     public const string MethodIsVoid = \"Method '{0}' in type '{1}' does not return a value\";",
          "54:     public const string MinusCannotBeAppliedToUnsignedInteger = \"'-' cannot be applied to unsigned integers.\";",
          "55:     public const string MissingAsClause = \"Expression is missing an 'as' clause\";",
          "56:     public const string NeitherTypeConvertsToOther = \"Neither of the types '{0}' and '{1}' converts to the other\";",
          "",
          "[Removed Lines]",
          "53:     public const string MethodsAreInaccessible = \"Methods on type '{0}' are not accessible\";",
          "",
          "[Added Lines]",
          "53:     public const string MethodIsInaccessible = \"Method '{0}' on type '{1}' is not accessible.\";",
          "",
          "---------------"
        ],
        "test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs||test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs -> test/System.Linq.Dynamic.Core.Tests/DynamicClassTest.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:         isValid.Should().BeFalse(); // This should actually be true, but fails. For solution see Issue593_Solution1 and Issue593_Solution2.",
          "282:     }",
          "286:     public void DynamicClassArray_Issue593_Solution1()",
          "287:     {",
          "289:         var field = new",
          "290:         {",
          "291:             Name = \"firstName\",",
          "",
          "[Removed Lines]",
          "285:     [Fact(Skip = \"867\")]",
          "",
          "[Added Lines]",
          "284:     [SkipIfGitHubActions]",
          "288:         var config = new ParsingConfig",
          "289:         {",
          "290:             AllowEqualsAndToStringMethodsOnObject = true",
          "291:         };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:         var query = dynamicClasses.AsQueryable();",
          "314:         isValid.Should().BeTrue();",
          "",
          "[Removed Lines]",
          "311:         var isValid = query.Any(\"firstName.ToString() eq \\\"firstValue\\\"\");",
          "",
          "[Added Lines]",
          "315:         var isValid = query.Any(config, \"firstName.ToString() eq \\\"firstValue\\\"\");",
          "",
          "---------------"
        ],
        "test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs||test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs -> test/System.Linq.Dynamic.Core.Tests/DynamicExpressionParserTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1058:         Assert.Equal(expectedRightValue, rightValue);",
          "1059:     }",
          "1062:     public void DynamicExpressionParser_ParseLambda_TupleToStringMethodCall_ReturnsStringLambdaExpression()",
          "1063:     {",
          "1064:         var expression = DynamicExpressionParser.ParseLambda(",
          "1065:             typeof(Tuple<int>),",
          "1066:             typeof(string),",
          "1067:             \"it.ToString()\");",
          "1068:         Assert.Equal(typeof(string), expression.ReturnType);",
          "1069:     }",
          "",
          "[Removed Lines]",
          "1061:     [Fact(Skip = \"867\")]",
          "",
          "[Added Lines]",
          "1061:     [Fact]",
          "1065:         var config = new ParsingConfig",
          "1066:         {",
          "1067:             AllowEqualsAndToStringMethodsOnObject = true",
          "1068:         };",
          "1072:             config,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1147:         Action action = () => DynamicExpressionParser.ParseLambda(typeof(CustomClassWithMethod), null, expression);",
          "1151:     }",
          "",
          "[Removed Lines]",
          "1150:         action.Should().Throw<ParseException>().WithMessage(\"Methods on type 'CustomClassWithMethod' are not accessible\");",
          "",
          "[Added Lines]",
          "1160:         action.Should().Throw<ParseException>().WithMessage(\"Method 'GetAge' on type 'CustomClassWithMethod' is not accessible.\");",
          "",
          "---------------"
        ],
        "test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs||test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs -> test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:     [Theory]",
          "347:     [InlineData(\"it.MainCompany.Name != null\", \"(company.MainCompany.Name != null)\")]",
          "348:     [InlineData(\"@MainCompany.Companies.Count() > 0\", \"(company.MainCompany.Companies.Count() > 0)\")]",
          "350:     [InlineData(\"MainCompany.Name\", \"company.MainCompany.Name\")]",
          "351:     [InlineData(\"Name\", \"company.Name\")]",
          "352:     [InlineData(\"company.Name\", \"company.Name\")]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349:     [InlineData(\"Company.Equals(null, null)\", \"Equals(null, null)\")]",
          "350:     [InlineData(\"Equals(null)\", \"company.Equals(null)\")]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357:         var config = new ParsingConfig",
          "358:         {",
          "359:             IsCaseSensitive = true,",
          "361:         };",
          "362:         ParameterExpression[] parameters = { ParameterExpressionHelper.CreateParameterExpression(typeof(Company), \"company\") };",
          "363:         var sut = new ExpressionParser(parameters, expression, null, config);",
          "",
          "[Removed Lines]",
          "360:             CustomTypeProvider = _dynamicTypeProviderMock.Object",
          "",
          "[Added Lines]",
          "361:             CustomTypeProvider = _dynamicTypeProviderMock.Object,",
          "362:             AllowEqualsAndToStringMethodsOnObject = true",
          "",
          "---------------"
        ],
        "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs||test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs -> test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: public class MethodFinderTest",
          "9: {",
          "12:     {",
          "13:         Expression<Func<int?, string?>> expr = x => x.ToString();",
          "15:         var selector = \"ToString()\";",
          "16:         var prm = Parameter(typeof(int?));",
          "21:     }",
          "22: }",
          "",
          "[Removed Lines]",
          "10:     [Fact(Skip = \"867\")]",
          "11:     public void MethodsOfDynamicLinqAndSystemLinqShouldBeEqual()",
          "17:         var parser = new ExpressionParser([prm], selector, [], ParsingConfig.Default);",
          "18:         var expr1 = parser.Parse(null);",
          "20:         Assert.Equal(((MethodCallExpression)expr.Body).Method.DeclaringType, ((MethodCallExpression)expr1).Method.DeclaringType);",
          "",
          "[Added Lines]",
          "10:     [Fact]",
          "11:     public void Method_ToString_OnDynamicLinq_And_SystemLinq_ShouldBeEqual()",
          "14:         var config = new ParsingConfig",
          "15:         {",
          "16:             AllowEqualsAndToStringMethodsOnObject = true",
          "17:         };",
          "23:         var parser = new ExpressionParser([prm], selector, [], config);",
          "26:         var expression = parser.Parse(null);",
          "29:         Assert.Equal(((MethodCallExpression)expr.Body).Method.DeclaringType, ((MethodCallExpression)expression).Method.DeclaringType);",
          "30:     }",
          "32:     [Fact]",
          "33:     public void Method_Equals1_OnDynamicLinq_And_SystemLinq_ShouldBeEqual()",
          "34:     {",
          "36:         var config = new ParsingConfig",
          "37:         {",
          "38:             AllowEqualsAndToStringMethodsOnObject = true",
          "39:         };",
          "41:         Expression<Func<int?, bool>> expr = x => x.Equals(\"a\");",
          "43:         var selector = \"Equals(\\\"a\\\")\";",
          "44:         var prm = Parameter(typeof(int?));",
          "45:         var parser = new ExpressionParser([prm], selector, [], config);",
          "48:         var expression = parser.Parse(null);",
          "51:         Assert.Equal(((MethodCallExpression)expr.Body).Method.DeclaringType, ((MethodCallExpression)expression).Method.DeclaringType);",
          "52:     }",
          "54:     [Fact]",
          "55:     public void Method_Equals2_OnDynamicLinq_And_SystemLinq_ShouldBeEqual()",
          "56:     {",
          "58:         var config = new ParsingConfig",
          "59:         {",
          "60:             AllowEqualsAndToStringMethodsOnObject = true",
          "61:         };",
          "64:         Expression<Func<int?, bool>> expr = x => object.Equals(\"a\", \"b\");",
          "66:         var selector = \"object.Equals(\\\"a\\\", \\\"b\\\")\";",
          "67:         var prm = Parameter(typeof(int?));",
          "68:         var parser = new ExpressionParser([prm], selector, [], config);",
          "71:         var expression = parser.Parse(null);",
          "74:         Assert.Equal(((MethodCallExpression)expr.Body).Method.DeclaringType, ((MethodCallExpression)expression).Method.DeclaringType);",
          "75:     }",
          "77:     [Fact]",
          "78:     public void Method_ReferenceEquals_OnDynamicLinq_And_SystemLinq_ShouldBeEqual()",
          "79:     {",
          "81:         var config = new ParsingConfig",
          "82:         {",
          "83:             AllowEqualsAndToStringMethodsOnObject = true",
          "84:         };",
          "87:         Expression<Func<int?, bool>> expr = x => object.ReferenceEquals(\"a\", \"b\");",
          "89:         var selector = \"object.ReferenceEquals(\\\"a\\\", \\\"b\\\")\";",
          "90:         var prm = Parameter(typeof(int?));",
          "91:         var parser = new ExpressionParser([prm], selector, [], config);",
          "94:         var expression = parser.Parse(null);",
          "97:         Assert.Equal(((MethodCallExpression)expr.Body).Method.DeclaringType, ((MethodCallExpression)expression).Method.DeclaringType);",
          "",
          "---------------"
        ],
        "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs -> test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:         Action action = () => baseQuery.OrderBy(predicate);",
          "35:     }",
          "37:     [Fact]",
          "",
          "[Removed Lines]",
          "34:         action.Should().Throw<ParseException>().WithMessage(\"Methods on type 'Object' are not accessible\");",
          "",
          "[Added Lines]",
          "34:         action.Should().Throw<ParseException>().WithMessage(\"Method 'GetType' on type 'Object' is not accessible.\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         );",
          "52:     }",
          "54:     [Theory]",
          "58:     {",
          "60:         Action action = () => DynamicExpressionParser.ParseLambda(itType, null, expression);",
          "64:     }",
          "66:     [Theory]",
          "",
          "[Removed Lines]",
          "51:         action.Should().Throw<ParseException>().WithMessage($\"Methods on type 'Object' are not accessible\");",
          "55:     [InlineData(typeof(FileStream), \"Close()\", \"Stream\")]",
          "56:     [InlineData(typeof(Assembly), \"GetName().Name.ToString()\", \"Assembly\")]",
          "57:     public void DynamicExpressionParser_ParseLambda_IllegalMethodCall_ThrowsException(Type itType, string expression, string type)",
          "63:         action.Should().Throw<ParseException>().WithMessage($\"Methods on type '{type}' are not accessible\");",
          "",
          "[Added Lines]",
          "51:         action.Should().Throw<ParseException>().WithMessage(\"Method 'GetType' on type 'Object' is not accessible.\");",
          "55:     [InlineData(typeof(FileStream), \"Close()\", \"Method 'Close' on type 'Stream' is not accessible.\")]",
          "56:     [InlineData(typeof(Assembly), \"GetName().Name.ToString()\", \"Method 'GetName' on type 'Assembly' is not accessible.\")]",
          "57:     public void DynamicExpressionParser_ParseLambda_IllegalMethodCall_ThrowsException(Type itType, string expression, string errorMessage)",
          "63:         action.Should().Throw<ParseException>().WithMessage(errorMessage);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "79:         Action action = () => queryable.Select(selector);",
          "83:     }",
          "85:     [Theory]",
          "",
          "[Removed Lines]",
          "82:         action.Should().Throw<ParseException>().WithMessage(\"Methods on type 'Object' are not accessible\");",
          "",
          "[Added Lines]",
          "82:         action.Should().Throw<ParseException>().WithMessage(\"Method 'GetType' on type 'Object' is not accessible.\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f92c1ce4a3a7b4ab93e4f9f9513c8daeb82e75f",
      "candidate_info": {
        "commit_hash": "3f92c1ce4a3a7b4ab93e4f9f9513c8daeb82e75f",
        "repo": "zzzprojects/System.Linq.Dynamic.Core",
        "commit_url": "https://github.com/zzzprojects/System.Linq.Dynamic.Core/commit/3f92c1ce4a3a7b4ab93e4f9f9513c8daeb82e75f",
        "files": [
          "src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs",
          "src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs",
          "src/System.Linq.Dynamic.Core/Parser/SupportedMethods/MethodFinder.cs",
          "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs",
          "test/System.Linq.Dynamic.Core.Tests/Parser/PredefinedMethodsHelperTests.cs"
        ],
        "message": "Updates",
        "before_after_code_files": [
          "src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs||src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs",
          "src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs||src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs",
          "src/System.Linq.Dynamic.Core/Parser/SupportedMethods/MethodFinder.cs||src/System.Linq.Dynamic.Core/Parser/SupportedMethods/MethodFinder.cs",
          "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs||test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs",
          "test/System.Linq.Dynamic.Core.Tests/Parser/PredefinedMethodsHelperTests.cs||test/System.Linq.Dynamic.Core.Tests/Parser/PredefinedMethodsHelperTests.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs||test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs"
          ],
          "candidate": [
            "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs||test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs"
          ]
        }
      },
      "candidate_diff": {
        "src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs||src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs": [
          "File: src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs -> src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1857:                 case 1:",
          "1858:                     var method = (MethodInfo)methodBase!;",
          "1863:                     if (!PredefinedTypesHelper.IsPredefinedType(_parsingConfig, method.DeclaringType!) &&",
          "1865:                     {",
          "1866:                         throw ParseError(errorPos, Res.MethodIsInaccessible, id, TypeHelper.GetTypeName(method.DeclaringType!));",
          "1867:                     }",
          "",
          "[Removed Lines]",
          "1860:                     int y = 0;",
          "1861:                     y.ToString();",
          "1864:                         !_predefinedMethodsHelper.IsPredefinedMethod(type!, method))",
          "",
          "[Added Lines]",
          "1861:                         !_predefinedMethodsHelper.IsPredefinedMethod(type!, method.DeclaringType!, method))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1941:         switch (member)",
          "1942:         {",
          "1943:             case PropertyInfo property:",
          "1945:                 propertyOrFieldExpression = propertyIsStatic ? Expression.Property(null, property) : Expression.Property(expression, property);",
          "1946:                 return true;",
          "",
          "[Removed Lines]",
          "1944:                 var propertyIsStatic = property?.GetGetMethod().IsStatic ?? property?.GetSetMethod().IsStatic ?? false;",
          "",
          "[Added Lines]",
          "1941:                 var propertyIsStatic = property.GetGetMethod()?.IsStatic ?? property.GetSetMethod()?.IsStatic ?? false;",
          "",
          "---------------"
        ],
        "src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs||src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs": [
          "File: src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs -> src/System.Linq.Dynamic.Core/Parser/PredefinedMethodsHelper.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: internal class PredefinedMethodsHelper",
          "8: {",
          "17:     private readonly Dictionary<Type, HashSet<MemberInfo>> _supported = new()",
          "18:     {",
          "39: #if NET6_0_OR_GREATER",
          "42: #endif",
          "43:     };",
          "",
          "[Removed Lines]",
          "9:     private static readonly BindingFlags _publicInstance = BindingFlags.Public | BindingFlags.Instance;",
          "10:     private static readonly BindingFlags _publicStatic = BindingFlags.Public | BindingFlags.Static;",
          "12:     internal static readonly MethodInfo ObjectInstanceToString = typeof(object).GetMethod(nameof(ToString), _publicInstance, null, Type.EmptyTypes, null)!;",
          "13:     internal static readonly MethodInfo ObjectInstanceEquals = typeof(object).GetMethod(nameof(Equals), _publicInstance, null, [typeof(object)], null)!;",
          "14:     internal static readonly MethodInfo ObjectStaticEquals = typeof(object).GetMethod(nameof(Equals), _publicStatic, null, [typeof(object), typeof(object)], null)!;",
          "15:     internal static readonly MethodInfo ObjectStaticReferenceEquals = typeof(object).GetMethod(nameof(ReferenceEquals), _publicStatic, null, [typeof(object), typeof(object)], null)!;",
          "19:         { typeof(bool), new HashSet<MemberInfo>() },",
          "20:         { typeof(char), new HashSet<MemberInfo>() },",
          "21:         { typeof(string), new HashSet<MemberInfo>() },",
          "22:         { typeof(sbyte), new HashSet<MemberInfo>() },",
          "23:         { typeof(byte), new HashSet<MemberInfo>() },",
          "24:         { typeof(short), new HashSet<MemberInfo>() },",
          "25:         { typeof(ushort), new HashSet<MemberInfo>() },",
          "26:         { typeof(int), new HashSet<MemberInfo>() },",
          "27:         { typeof(uint), new HashSet<MemberInfo>() },",
          "28:         { typeof(long), new HashSet<MemberInfo>() },",
          "29:         { typeof(ulong), new HashSet<MemberInfo>() },",
          "30:         { typeof(float), new HashSet<MemberInfo>() },",
          "31:         { typeof(double), new HashSet<MemberInfo>() },",
          "32:         { typeof(decimal), new HashSet<MemberInfo>() },",
          "33:         { typeof(DateTime), new HashSet<MemberInfo>() },",
          "34:         { typeof(DateTimeOffset), new HashSet<MemberInfo>() },",
          "35:         { typeof(TimeSpan), new HashSet<MemberInfo>() },",
          "36:         { typeof(Guid), new HashSet<MemberInfo>() },",
          "37:         { typeof(Uri), new HashSet<MemberInfo>() },",
          "38:         { typeof(Enum), new HashSet<MemberInfo>() },",
          "40:         { typeof(DateOnly), new HashSet<MemberInfo>() },",
          "41:         { typeof(TimeOnly), new HashSet<MemberInfo>() },",
          "",
          "[Added Lines]",
          "9:     private const BindingFlags PublicInstance = BindingFlags.Public | BindingFlags.Instance;",
          "10:     private const BindingFlags PublicStatic = BindingFlags.Public | BindingFlags.Static;",
          "12:     internal static readonly MethodInfo ObjectInstanceToString = typeof(object).GetMethod(nameof(ToString), PublicInstance, null, Type.EmptyTypes, null)!;",
          "13:     internal static readonly MethodInfo ObjectInstanceEquals = typeof(object).GetMethod(nameof(Equals), PublicInstance, null, [typeof(object)], null)!;",
          "14:     internal static readonly MethodInfo ObjectStaticEquals = typeof(object).GetMethod(nameof(Equals), PublicStatic, null, [typeof(object), typeof(object)], null)!;",
          "15:     internal static readonly MethodInfo ObjectStaticReferenceEquals = typeof(object).GetMethod(nameof(ReferenceEquals), PublicStatic, null, [typeof(object), typeof(object)], null)!;",
          "19:         { typeof(bool), [] },",
          "20:         { typeof(byte), [] },",
          "21:         { typeof(char), [] },",
          "22:         { typeof(DateTime), [] },",
          "23:         { typeof(DateTimeOffset), [] },",
          "24:         { typeof(decimal), [] },",
          "25:         { typeof(double), [] },",
          "27:         { typeof(float), [] },",
          "28:         { typeof(Guid), [] },",
          "29:         { typeof(int), [] },",
          "30:         { typeof(long), [] },",
          "31:         { typeof(sbyte), [] },",
          "32:         { typeof(short), [] },",
          "33:         { typeof(string), [] },",
          "34:         { typeof(TimeSpan), [] },",
          "35:         { typeof(uint), [] },",
          "36:         { typeof(ulong), [] },",
          "37:         { typeof(Uri), [] },",
          "38:         { typeof(ushort), [] },",
          "40:         { typeof(DateOnly), [] },",
          "41:         { typeof(TimeOnly), [] },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:     {",
          "47:         foreach (var kvp in _supported)",
          "48:         {",
          "58:         }",
          "60:         if (config.AllowEqualsAndToStringMethodsOnObject)",
          "",
          "[Removed Lines]",
          "49:             TryAdd(kvp.Key, ObjectInstanceEquals);",
          "50:             TryAdd(kvp.Key, kvp.Key.GetMethod(nameof(Equals), _publicInstance, null, [kvp.Key], null));",
          "51:             TryAdd(kvp.Key, kvp.Key.GetMethod(nameof(Equals), _publicInstance, null, [typeof(object)], null));",
          "53:             TryAdd(kvp.Key, ObjectInstanceToString);",
          "54:             TryAdd(kvp.Key, kvp.Key.GetMethod(nameof(ToString), _publicInstance, null, Type.EmptyTypes, null));",
          "55:             TryAdd(kvp.Key, kvp.Key.GetMethod(nameof(ToString), _publicInstance, null, [typeof(string)], null));",
          "56:             TryAdd(kvp.Key, kvp.Key.GetMethod(nameof(ToString), _publicInstance, null, [typeof(IFormatProvider)], null));",
          "57:             TryAdd(kvp.Key, kvp.Key.GetMethod(nameof(ToString), _publicInstance, null, [typeof(string), typeof(IFormatProvider)], null));",
          "",
          "[Added Lines]",
          "49:             TryAdd(kvp.Key, kvp.Key.GetMethod(nameof(Equals), PublicInstance, null, [kvp.Key], null));",
          "50:             TryAdd(kvp.Key, kvp.Key.GetMethod(nameof(Equals), PublicInstance, null, [typeof(object)], null));",
          "52:             TryAdd(kvp.Key, kvp.Key.GetMethod(nameof(ToString), PublicInstance, null, Type.EmptyTypes, null));",
          "53:             TryAdd(kvp.Key, kvp.Key.GetMethod(nameof(ToString), PublicInstance, null, [typeof(string)], null));",
          "54:             TryAdd(kvp.Key, kvp.Key.GetMethod(nameof(ToString), PublicInstance, null, [typeof(IFormatProvider)], null));",
          "55:             TryAdd(kvp.Key, kvp.Key.GetMethod(nameof(ToString), PublicInstance, null, [typeof(string), typeof(IFormatProvider)], null));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:         }",
          "64:     }",
          "67:     {",
          "68:         Check.NotNull(type);",
          "69:         Check.NotNull(member);",
          "72:         {",
          "74:         }",
          "77:     }",
          "79:     private void TryAdd(Type type, MethodInfo? method)",
          "",
          "[Removed Lines]",
          "66:     public bool IsPredefinedMethod(Type type, MemberInfo member)",
          "71:         if (!_supported.TryGetValue(type, out var supported) || supported.Count == 0)",
          "73:             return false;",
          "76:         return supported.Contains(member);",
          "",
          "[Added Lines]",
          "64:     public bool IsPredefinedMethod(Type type, Type declaringType, MemberInfo member)",
          "69:         if (_supported.TryGetValue(type, out var supportedMethodsForType) && supportedMethodsForType.Count > 0)",
          "71:             return supportedMethodsForType.Contains(member);",
          "74:         if (_supported.TryGetValue(declaringType, out var supportedMethodsForDeclaringType) && supportedMethodsForDeclaringType.Count > 0)",
          "75:         {",
          "76:             return supportedMethodsForDeclaringType.Contains(member);",
          "77:         }",
          "80:         if (_supported.TryGetValue(typeof(object), out var supportedMethodsForObject) && supportedMethodsForObject.Count > 0)",
          "81:         {",
          "82:             return supportedMethodsForObject.Any(x => x.Name == member.Name);",
          "83:         }",
          "85:         return false;",
          "",
          "---------------"
        ],
        "src/System.Linq.Dynamic.Core/Parser/SupportedMethods/MethodFinder.cs||src/System.Linq.Dynamic.Core/Parser/SupportedMethods/MethodFinder.cs": [
          "File: src/System.Linq.Dynamic.Core/Parser/SupportedMethods/MethodFinder.cs -> src/System.Linq.Dynamic.Core/Parser/SupportedMethods/MethodFinder.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:         return 0;",
          "151:     }",
          "154:     {",
          "156:         var inlineArgs = args;",
          "159:             .Select(m => new MethodData { MethodBase = m, Parameters = m.GetParameters() })",
          "160:             .Where(m => IsApplicable(m, inlineArgs))",
          "161:             .ToArray();",
          "",
          "[Removed Lines]",
          "153:     public int FindBestMethodBasedOnArguments(IEnumerable<MethodBase> methods, ref Expression[] args, out MethodBase? method)",
          "158:         MethodData[] applicable = methods",
          "",
          "[Added Lines]",
          "153:     public int FindBestMethodBasedOnArguments(IEnumerable<MethodBase> methods, ref Expression[] args, out MethodBase? methodOrConstructor)",
          "158:         var applicable = methods",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:             var methodData = applicable[0];",
          "176:             if (methodData.MethodBase is MethodInfo methodInfo)",
          "177:             {",
          "179:             }",
          "180:             else",
          "181:             {",
          "183:             }",
          "185:             if (args.Length == 0 || args.Length != methodData.Args.Length)",
          "",
          "[Removed Lines]",
          "178:                 method = methodInfo.GetBaseDefinition();",
          "182:                 method = methodData.MethodBase;",
          "",
          "[Added Lines]",
          "179:                 var baseMethodInfo = methodInfo.GetBaseDefinition();",
          "182:                 methodOrConstructor = baseMethodInfo.DeclaringType == typeof(object) ? methodInfo : baseMethodInfo;",
          "187:                 methodOrConstructor = methodData.MethodBase;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "205:         }",
          "206:         else",
          "207:         {",
          "209:         }",
          "211:         return applicable.Length;",
          "",
          "[Removed Lines]",
          "208:             method = null;",
          "",
          "[Added Lines]",
          "213:             methodOrConstructor = null;",
          "",
          "---------------"
        ],
        "test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs||test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs -> test/System.Linq.Dynamic.Core.Tests/Parser/MethodFinderTest.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \ufeffusing System.Linq.Dynamic.Core.Parser;",
          "2: using System.Linq.Expressions;",
          "3: using Xunit;",
          "4: using static System.Linq.Expressions.Expression;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: using System.Linq.Dynamic.Core.Tests.Helpers.Models;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30:     }",
          "32:     [Fact]",
          "34:     {",
          "36:         var config = new ParsingConfig",
          "",
          "[Removed Lines]",
          "33:     public void Method_Equals1_OnDynamicLinq_And_SystemLinq_ShouldBeEqual()",
          "",
          "[Added Lines]",
          "34:     public void Method_InstanceEquals_OnDynamicLinq_And_SystemLinq_ShouldBeEqual()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38:             AllowEqualsAndToStringMethodsOnObject = true",
          "39:         };",
          "43:         var selector = \"Equals(\\\"a\\\")\";",
          "45:         var parser = new ExpressionParser([prm], selector, [], config);",
          "",
          "[Removed Lines]",
          "41:         Expression<Func<int?, bool>> expr = x => x.Equals(\"a\");",
          "44:         var prm = Parameter(typeof(int?));",
          "",
          "[Added Lines]",
          "42:         Expression<Func<User, bool>> expr = x => x.Equals(\"a\");",
          "45:         var prm = Parameter(typeof(User));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "52:     }",
          "54:     [Fact]",
          "56:     {",
          "58:         var config = new ParsingConfig",
          "",
          "[Removed Lines]",
          "55:     public void Method_Equals2_OnDynamicLinq_And_SystemLinq_ShouldBeEqual()",
          "",
          "[Added Lines]",
          "56:     public void Method_StaticEquals_OnDynamicLinq_And_SystemLinq_ShouldBeEqual()",
          "",
          "---------------"
        ],
        "test/System.Linq.Dynamic.Core.Tests/Parser/PredefinedMethodsHelperTests.cs||test/System.Linq.Dynamic.Core.Tests/Parser/PredefinedMethodsHelperTests.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/Parser/PredefinedMethodsHelperTests.cs -> test/System.Linq.Dynamic.Core.Tests/Parser/PredefinedMethodsHelperTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \ufeffusing System.Collections.Generic;",
          "2: using System.Linq.Dynamic.Core.CustomTypeProviders;",
          "3: using System.Linq.Dynamic.Core.Exceptions;",
          "4: using System.Linq.Dynamic.Core.Parser;",
          "5: using System.Linq.Expressions;",
          "6: using System.Reflection;",
          "7: using FluentAssertions;",
          "8: using Xunit;",
          "10: namespace System.Linq.Dynamic.Core.Tests.Parser;",
          "12: public class PredefinedMethodsHelperTests",
          "13: {",
          "14:     [Theory]",
          "15:     [MemberData(nameof(GetSupportedPropertyNames))]",
          "16:     public void PredefinedMethodsHelper_SupportedType_CanCall_ToString(string propertyName)",
          "17:     {",
          "19:         ParameterExpression[] parameters = [ParameterExpressionHelper.CreateParameterExpression(typeof(SupportedData), \"x\")];",
          "20:         var sut = new ExpressionParser(parameters, $\"{propertyName}.ToString()\", null, ParsingConfig.Default);",
          "23:         var parsedExpression = sut.Parse(null).ToString();",
          "26:         parsedExpression.Should().Be($\"x.{propertyName}.ToString()\");",
          "27:     }",
          "29:     [Theory]",
          "30:     [MemberData(nameof(GetSupportedPropertyNamesForString1))]",
          "31:     public void PredefinedMethodsHelper_SupportedType_CanCall_ToString1(string propertyName)",
          "32:     {",
          "34:         ParameterExpression[] parameters = [ParameterExpressionHelper.CreateParameterExpression(typeof(SupportedData), \"x\")];",
          "35:         var sut = new ExpressionParser(parameters, $\"{propertyName}.ToString(\\\"X\\\")\", null, ParsingConfig.Default);",
          "38:         var parsedExpression = sut.Parse(null).ToString();",
          "41:         parsedExpression.Should().Be($\"x.{propertyName}.ToString(\\\"X\\\")\");",
          "42:     }",
          "44:     [Theory]",
          "45:     [MemberData(nameof(GetNotSupportedPropertyNames))]",
          "46:     public void PredefinedMethodsHelper_NotSupportedType_Throws(string propertyName)",
          "47:     {",
          "49:         ParameterExpression[] parameters = [ParameterExpressionHelper.CreateParameterExpression(typeof(NotSupportedData), \"x\")];",
          "50:         var sut = new ExpressionParser(parameters, $\"{propertyName}.ToString()\", null, ParsingConfig.Default);",
          "53:         Action action = () => _ = sut.Parse(null);",
          "56:         action.Should().Throw<ParseException>().WithMessage(\"Method 'ToString' on type 'Object' is not accessible.\");",
          "57:     }",
          "59:     [Theory]",
          "60:     [MemberData(nameof(GetNotSupportedPropertyNames))]",
          "61:     public void PredefinedMethodsHelper_NotSupportedType_AllowEqualsAndToStringMethodsOnObject_CanCall_ToString(string propertyName)",
          "62:     {",
          "64:         var config = new ParsingConfig",
          "65:         {",
          "66:             AllowEqualsAndToStringMethodsOnObject = true",
          "67:         };",
          "68:         ParameterExpression[] parameters = [ParameterExpressionHelper.CreateParameterExpression(typeof(NotSupportedData), \"x\")];",
          "69:         var sut = new ExpressionParser(parameters, $\"{propertyName}.ToString()\", null, config);",
          "72:         var parsedExpression = sut.Parse(null).ToString();",
          "75:         parsedExpression.Should().Be($\"x.{propertyName}.ToString()\");",
          "76:     }",
          "78:     [Theory]",
          "79:     [MemberData(nameof(GetSupportedPropertyNames))]",
          "80:     public void PredefinedMethodsHelper_SupportedType_CanCall_Equals(string propertyName)",
          "81:     {",
          "83:         ParameterExpression[] parameters = [ParameterExpressionHelper.CreateParameterExpression(typeof(SupportedData), \"x\")];",
          "84:         var sut = new ExpressionParser(parameters, $\"{propertyName}.Equals(it)\", null, ParsingConfig.Default);",
          "87:         var parsedExpression = sut.Parse(null).ToString();",
          "90:         parsedExpression.Should().Be($\"x.{propertyName}.Equals(x)\");",
          "91:     }",
          "93:     [Theory]",
          "94:     [MemberData(nameof(GetSupportedPropertyNames))]",
          "95:     public void PredefinedMethodsHelper_SupportedType_CannotCall_GetType(string propertyName)",
          "96:     {",
          "98:         ParameterExpression[] parameters = [ParameterExpressionHelper.CreateParameterExpression(typeof(SupportedData), \"x\")];",
          "99:         var sut = new ExpressionParser(parameters, $\"{propertyName}.GetType()\", null, ParsingConfig.Default);",
          "102:         Action action = () => _ = sut.Parse(null);",
          "105:         action.Should().Throw<ParseException>().WithMessage(\"Method 'GetType' on type 'Object' is not accessible.\");",
          "106:     }",
          "108:     public static IEnumerable<object[]> GetSupportedPropertyNames()",
          "109:     {",
          "110:         return typeof(SupportedData)",
          "111:             .GetProperties()",
          "112:             .Select(p => new object[] { p.Name });",
          "113:     }",
          "115:     public static IEnumerable<object[]> GetSupportedPropertyNamesForString1()",
          "116:     {",
          "117:         var exclude = new[] { typeof(bool), typeof(char) };",
          "118:         return typeof(SupportedData)",
          "119:             .GetProperties()",
          "120:             .Where(p => !exclude.Contains(p.PropertyType)  )",
          "121:             .Where(p => p.PropertyType.GetTypeInfo().IsValueType)",
          "122:             .Where(p => !TypeHelper.IsNullableType(p.PropertyType))",
          "123:             .Select(p => new object[] { p.Name });",
          "124:     }",
          "126:     public static IEnumerable<object[]> GetNotSupportedPropertyNames()",
          "127:     {",
          "128:         return typeof(NotSupportedData)",
          "129:             .GetProperties()",
          "130:             .Select(p => new object[] { p.Name });",
          "131:     }",
          "133:     internal class SupportedData",
          "134:     {",
          "135:         public bool B { get; set; }",
          "136:         public bool? BoolNullable { get; set; }",
          "138:         public byte By { get; set; }",
          "139:         public byte? ByteNullable { get; set; }",
          "141:         public char C { get; set; }",
          "142:         public char? CharNullable { get; set; }",
          "144:         public DateTime Dt { get; set; }",
          "145:         public DateTime? DateTimeNullable { get; set; }",
          "147:         public DateTimeOffset Dto { get; set; }",
          "148:         public DateTimeOffset? DateTimeOffsetNullable { get; set; }",
          "150:         public decimal De { get; set; }",
          "151:         public decimal? DecimalNullable { get; set; }",
          "153:         public double D { get; set; }",
          "154:         public double? DoubleNullable { get; set; }",
          "156:         public float F { get; set; }",
          "157:         public float? FloatNullable { get; set; }",
          "159:         public Guid G { get; set; }",
          "160:         public Guid? GuidNullable { get; set; }",
          "162:         public int I { get; set; }",
          "163:         public int? IntNullable { get; set; }",
          "165:         public long L { get; set; }",
          "166:         public long? LongNullable { get; set; }",
          "168:         public sbyte Sb { get; set; }",
          "169:         public sbyte? SByteNullable { get; set; }",
          "171:         public short S { get; set; }",
          "172:         public short? SNullable { get; set; }",
          "174:         public string Str { get; set; } = string.Empty;",
          "175:         public string? StrNullable { get; set; }",
          "177:         public TimeSpan Ts { get; set; }",
          "178:         public TimeSpan? TimeSpanNullable { get; set; }",
          "180:         public uint Ui { get; set; }",
          "181:         public uint? UIntNullable { get; set; }",
          "183:         public ulong Ul { get; set; }",
          "184:         public ulong? ULongNullable { get; set; }",
          "186:         public Uri Ur { get; set; } = null!;",
          "187:         public Uri? UriNullable { get; set; }",
          "189:         public ushort Us { get; set; }",
          "190:         public ushort? UShortNullable { get; set; }",
          "192: #if NET6_0_OR_GREATER",
          "193:         public DateOnly Do { get; set; }",
          "194:         public DateOnly? DateOnlyNullable { get; set; }",
          "196:         public TimeOnly To { get; set; }",
          "197:         public TimeOnly? TimeOnlyNullable { get; set; }",
          "198: #endif",
          "199:     }",
          "201:     internal class NotSupportedData",
          "202:     {",
          "203:         public PredefinedMethodsHelperTestClass Test { get; set; } = null!;",
          "204:         public PredefinedMethodsHelperTestClass? PredefinedMethodsHelperTestClassNullable { get; set; }",
          "206:         public object Obj { get; set; } = null!;",
          "207:         public object? ObjectNullable { get; set; }",
          "208:     }",
          "210:     [DynamicLinqType]",
          "211:     internal class PredefinedMethodsHelperTestClass;",
          "212: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1fa3e15de79fd2b0fd961c3c2580be8b205a343d",
      "candidate_info": {
        "commit_hash": "1fa3e15de79fd2b0fd961c3c2580be8b205a343d",
        "repo": "zzzprojects/System.Linq.Dynamic.Core",
        "commit_url": "https://github.com/zzzprojects/System.Linq.Dynamic.Core/commit/1fa3e15de79fd2b0fd961c3c2580be8b205a343d",
        "files": [
          "src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs",
          "test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs",
          "test/System.Linq.Dynamic.Core.Tests/TestClasses/TestClassWithDynamicLinqAttribute.cs"
        ],
        "message": "Fix AbstractDynamicLinqCustomTypeProvider.ResolveTypeBySimpleName to use AdditionalTypes (#896)",
        "before_after_code_files": [
          "src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs||src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs",
          "test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs||test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs",
          "test/System.Linq.Dynamic.Core.Tests/TestClasses/TestClassWithDynamicLinqAttribute.cs||test/System.Linq.Dynamic.Core.Tests/TestClasses/TestClassWithDynamicLinqAttribute.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs||src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs",
            "test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs||test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs"
          ],
          "candidate": [
            "src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs||src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs",
            "test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs||test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs"
          ]
        }
      },
      "candidate_diff": {
        "src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs||src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs": [
          "File: src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs -> src/System.Linq.Dynamic.Core/CustomTypeProviders/AbstractDynamicLinqCustomTypeProvider.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         Check.NotNull(assemblies);",
          "67:         Check.NotEmpty(simpleTypeName);",
          "70:         var fullNames = types.Select(t => t.FullName!).Distinct().ToArray();",
          "71:         var firstMatchingFullname = fullNames.FirstOrDefault(fn => fn.EndsWith($\".{simpleTypeName}\"));",
          "79:     }",
          "81: #if (UAP10_0 || NETSTANDARD)",
          "",
          "[Removed Lines]",
          "69:         var types = FindTypesMarkedWithDynamicLinqTypeAttribute(assemblies);",
          "73:         if (firstMatchingFullname == null)",
          "74:         {",
          "75:             return null;",
          "76:         }",
          "78:         return types.FirstOrDefault(t => t.FullName == firstMatchingFullname);",
          "",
          "[Added Lines]",
          "69:         var types = FindTypesMarkedWithDynamicLinqTypeAttribute(assemblies).Union(AdditionalTypes);",
          "73:         return firstMatchingFullname == null ? null : types.FirstOrDefault(t => t.FullName == firstMatchingFullname);",
          "",
          "---------------"
        ],
        "test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs||test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs -> test/System.Linq.Dynamic.Core.Tests/CustomTypeProviders/DefaultDynamicLinqCustomTypeProviderTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: \ufeffusing System.Collections.Generic;",
          "2: using System.IO;",
          "3: using System.Linq.Dynamic.Core.CustomTypeProviders;",
          "4: using FluentAssertions;",
          "5: using NFluent;",
          "6: using Xunit;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: using System.Linq.Dynamic.Core.Tests.TestClasses;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:         Check.That(result).IsNotNull();",
          "63:     }",
          "64: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:     [Fact]",
          "67:     public void DefaultDynamicLinqCustomTypeProvider_ResolveTypeBySimpleName_UsesAdditionalTypes()",
          "68:     {",
          "70:         var result = _sut.ResolveTypeBySimpleName(nameof(TestClassWithDynamicLinqAttribute));",
          "73:         Check.That(result).IsNotNull();",
          "74:     }",
          "76:     [Fact]",
          "77:     public void DefaultDynamicLinqCustomTypeProvider_ResolveTypeBySimpleName_UsesTypesMarkedWithDynamicLinqTypeAttribute()",
          "78:     {",
          "80:         var result = _sut.ResolveTypeBySimpleName(nameof(DirectoryInfo));",
          "83:         Check.That(result).IsNotNull();",
          "84:     }",
          "86:     [Fact]",
          "87:     public void DefaultDynamicLinqCustomTypeProvider_ResolveTypeBySimpleName_UnknownReturnsNull()",
          "88:     {",
          "90:         var result = _sut.ResolveTypeBySimpleName(\"Dummy123\");",
          "93:         Check.That(result).IsNull();",
          "94:     }",
          "",
          "---------------"
        ],
        "test/System.Linq.Dynamic.Core.Tests/TestClasses/TestClassWithDynamicLinqAttribute.cs||test/System.Linq.Dynamic.Core.Tests/TestClasses/TestClassWithDynamicLinqAttribute.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/TestClasses/TestClassWithDynamicLinqAttribute.cs -> test/System.Linq.Dynamic.Core.Tests/TestClasses/TestClassWithDynamicLinqAttribute.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: \ufeffusing System.Linq.Dynamic.Core.CustomTypeProviders;",
          "3: namespace System.Linq.Dynamic.Core.Tests.TestClasses;",
          "5: [DynamicLinqType]",
          "6: internal class TestClassWithDynamicLinqAttribute",
          "7: {",
          "8: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "78cda518665bf71b3abbf46f888eb37a1c2fd2bc",
      "candidate_info": {
        "commit_hash": "78cda518665bf71b3abbf46f888eb37a1c2fd2bc",
        "repo": "zzzprojects/System.Linq.Dynamic.Core",
        "commit_url": "https://github.com/zzzprojects/System.Linq.Dynamic.Core/commit/78cda518665bf71b3abbf46f888eb37a1c2fd2bc",
        "files": [
          "src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs",
          "test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.MemberAccess.cs",
          "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs"
        ],
        "message": "Fix calling static properties or fields in non-static class (#874)",
        "before_after_code_files": [
          "src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs||src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs",
          "test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.MemberAccess.cs||test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.MemberAccess.cs",
          "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs"
          ],
          "candidate": [
            "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs"
          ]
        }
      },
      "candidate_diff": {
        "src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs||src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs": [
          "File: src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs -> src/System.Linq.Dynamic.Core/Parser/ExpressionParser.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "1920:         switch (member)",
          "1921:         {",
          "1922:             case PropertyInfo property:",
          "1924:                 return true;",
          "1926:             case FieldInfo field:",
          "1928:                 return true;",
          "1930:             default:",
          "",
          "[Removed Lines]",
          "1923:                 propertyOrFieldExpression = Expression.Property(expression, property);",
          "1927:                 propertyOrFieldExpression = Expression.Field(expression, field);",
          "",
          "[Added Lines]",
          "1923:                 var propertyIsStatic = property?.GetGetMethod().IsStatic ?? property?.GetSetMethod().IsStatic ?? false;",
          "1924:                 propertyOrFieldExpression = propertyIsStatic ? Expression.Property(null, property) : Expression.Property(expression, property);",
          "1928:                 propertyOrFieldExpression = field.IsStatic ? Expression.Field(null, field) : Expression.Field(expression, field);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2478:     private MemberInfo? FindPropertyOrField(Type type, string memberName, bool staticAccess)",
          "2479:     {",
          "2480: #if !(UAP10_0 || NETSTANDARD)",
          "2482:         var bindingFlags = BindingFlags.Public | BindingFlags.DeclaredOnly | extraBindingFlag;",
          "2483:         foreach (Type t in TypeHelper.GetSelfAndBaseTypes(type))",
          "2484:         {",
          "",
          "[Removed Lines]",
          "2481:         var extraBindingFlag = _parsingConfig.PrioritizePropertyOrFieldOverTheType && staticAccess ? BindingFlags.Static : BindingFlags.Instance;",
          "",
          "[Added Lines]",
          "2482:         var extraBindingFlag = _parsingConfig.PrioritizePropertyOrFieldOverTheType && staticAccess ? BindingFlags.Static : BindingFlags.Instance | BindingFlags.Static;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2492:         }",
          "2493:         return null;",
          "2494: #else",
          "2496:         foreach (Type t in TypeHelper.GetSelfAndBaseTypes(type))",
          "2497:         {",
          "2500:             if (member != null)",
          "2501:             {",
          "2502:                 return member;",
          "",
          "[Removed Lines]",
          "2495:         var isCaseSensitive = _parsingConfig?.IsCaseSensitive == true;",
          "2499:             MemberInfo? member = t.GetTypeInfo().DeclaredProperties.FirstOrDefault(x => (!staticAccess || x.GetAccessors(true)[0].IsStatic) && ((x.Name == memberName) || (!isCaseSensitive && x.Name.Equals(memberName, StringComparison.OrdinalIgnoreCase))));",
          "",
          "[Added Lines]",
          "2496:         var isCaseSensitive = _parsingConfig.IsCaseSensitive == true;",
          "2500:             MemberInfo? member = t.GetTypeInfo().DeclaredProperties",
          "2501:                 .FirstOrDefault(x => (!staticAccess || x.GetAccessors(true)[0].IsStatic) && (x.Name == memberName || (!isCaseSensitive && x.Name.Equals(memberName, StringComparison.OrdinalIgnoreCase))));",
          "",
          "---------------"
        ],
        "test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.MemberAccess.cs||test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.MemberAccess.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.MemberAccess.cs -> test/System.Linq.Dynamic.Core.Tests/Parser/ExpressionParserTests.MemberAccess.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: using Xunit;",
          "4: namespace System.Linq.Dynamic.Core.Tests.Parser",
          "",
          "[Removed Lines]",
          "1: \ufeffusing FluentAssertions;",
          "",
          "[Added Lines]",
          "1: \ufeffusing System.Linq.Dynamic.Core.CustomTypeProviders;",
          "2: using FluentAssertions;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "21:             expression.ToString().Should().Be(\"System.Linq.Dynamic.Core.Tests.Parser.ProductDynamic[].Where(Param_0 => ([Dynamic] == Convert(\\\"First Product\\\", Object)))\");",
          "22: #endif",
          "23:         }",
          "24:     }",
          "26:     public class ProductDynamic",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26:         [Theory]",
          "27:         [InlineData(\"Prop\", \"TestProp\")]",
          "28:         [InlineData(\"Field\", \"TestField\")]",
          "29:         public void Parse_StaticPropertyOrField_In_StaticClass1(string name, string value)",
          "30:         {",
          "32:             var queryable = new int[1].AsQueryable();",
          "35:             var result = queryable.Select<string>($\"{typeof(StaticClassExample)}.{name}\").First();",
          "38:             Assert.Equal(value, result);",
          "39:         }",
          "41:         [Theory]",
          "42:         [InlineData(\"Prop\", \"TestProp\")]",
          "43:         [InlineData(\"Field\", \"TestField\")]",
          "44:         public void Parse_StaticPropertyOrField_In_NonStaticClass1(string name, string value)",
          "45:         {",
          "47:             var queryable = new int[1].AsQueryable();",
          "50:             var result = queryable.Select<string>($\"new {typeof(NonStaticClassExample)}().{name}\").First();",
          "53:             Assert.Equal(value, result);",
          "54:         }",
          "56:         [Theory]",
          "57:         [InlineData(\"Prop\", \"TestProp\")]",
          "58:         [InlineData(\"Field\", \"TestField\")]",
          "59:         public void Parse_StaticPropertyOrField_In_NonStaticClass2(string name, string value)",
          "60:         {",
          "62:             var queryable = new[] { new NonStaticClassExample() }.AsQueryable();",
          "65:             var result = queryable.Select<string>(name).First();",
          "68:             Assert.Equal(value, result);",
          "69:         }",
          "70:     }",
          "72:     [DynamicLinqType]",
          "73:     public class StaticClassExample",
          "74:     {",
          "75:         public static string Prop { get; set; } = \"TestProp\";",
          "77:         public static string Field = \"TestField\";",
          "78:     }",
          "80:     [DynamicLinqType]",
          "81:     public class NonStaticClassExample",
          "82:     {",
          "83:         public static string Prop { get; set; } = \"TestProp\";",
          "85:         public static string Field = \"TestField\";",
          "",
          "---------------"
        ],
        "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs -> test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:         action.Should().NotThrow();",
          "146:     }",
          "149:     [InlineData(\"new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3()\", \"SettingsProp[\\\"jwt\\\"]\")]",
          "150:     [InlineData(\"new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3()\", \"SettingsField[\\\"jwt\\\"]\")]",
          "151:     [InlineData(\"c => new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3()\", \"SettingsProp[\\\"jwt\\\"]\")]",
          "",
          "[Removed Lines]",
          "148:     [Theory(Skip = \"873\")]",
          "",
          "[Added Lines]",
          "148:     [Theory]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bcd8f7b3b3fc036453744afb9abae748379689ae",
      "candidate_info": {
        "commit_hash": "bcd8f7b3b3fc036453744afb9abae748379689ae",
        "repo": "zzzprojects/System.Linq.Dynamic.Core",
        "commit_url": "https://github.com/zzzprojects/System.Linq.Dynamic.Core/commit/bcd8f7b3b3fc036453744afb9abae748379689ae",
        "files": [
          "test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs",
          "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs"
        ],
        "message": "Update and Fix SecurityTests (#876)\n\n* add tests for constant fields\n\n* fix syntax in statics tests",
        "before_after_code_files": [
          "test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs||test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs",
          "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs||test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs",
            "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs"
          ],
          "candidate": [
            "test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs||test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs",
            "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs"
          ]
        }
      },
      "candidate_diff": {
        "test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs||test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs -> test/System.Linq.Dynamic.Core.Tests/Helpers/Models/AppSettings.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:         {",
          "15:             { \"jwt\", \"test\" }",
          "16:         };",
          "17:     }",
          "19:     [DynamicLinqType]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:         public const string ConstantField = \"test\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:         {",
          "29:             { \"jwt\", \"test\" }",
          "30:         };",
          "31:     }",
          "33:     public class AppSettings3",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:         public const string ConstantField = \"test\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "41:         {",
          "42:             { \"jwt\", \"test\" }",
          "43:         };",
          "44:     }",
          "45: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:         public const string ConstantField = \"test\";",
          "",
          "---------------"
        ],
        "test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs||test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs": [
          "File: test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs -> test/System.Linq.Dynamic.Core.Tests/SecurityTests.cs",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:     [Theory]",
          "86:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsProp[\\\"jwt\\\"]\")]",
          "87:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsField[\\\"jwt\\\"]\")]",
          "88:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsProp[\\\"jwt\\\"]\")]",
          "89:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsField[\\\"jwt\\\"]\")]",
          "90:     public void UsingStaticClassAsType_ThrowsException(string selector)",
          "91:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.ConstantField\")]",
          "91:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.ConstantField\")]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     }",
          "105:     [Theory]",
          "110:     public void UsingClassAsType_ThrowsException(string selector)",
          "111:     {",
          "",
          "[Removed Lines]",
          "106:     [InlineData(\"new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3().SettingsProp[\\\"jwt\\\"]\")]",
          "107:     [InlineData(\"new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3().SettingsField[\\\"jwt\\\"]\")]",
          "108:     [InlineData(\"c => new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3().SettingsProp[\\\"jwt\\\"]\")]",
          "109:     [InlineData(\"c => new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3().SettingsField[\\\"jwt\\\"]\")]",
          "",
          "[Added Lines]",
          "108:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3.SettingsProp[\\\"jwt\\\"]\")]",
          "109:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3.SettingsField[\\\"jwt\\\"]\")]",
          "110:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3.ConstantField\")]",
          "111:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3.SettingsProp[\\\"jwt\\\"]\")]",
          "112:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3.SettingsField[\\\"jwt\\\"]\")]",
          "113:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3.ConstantField\")]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:     [Theory]",
          "126:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsProp[\\\"jwt\\\"]\")]",
          "127:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsField[\\\"jwt\\\"]\")]",
          "128:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsProp[\\\"jwt\\\"]\")]",
          "129:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.SettingsField[\\\"jwt\\\"]\")]",
          "130:     public void UsingStaticClassAsType_WhenAddedToDefaultDynamicLinqCustomTypeProvider_ShouldBeOk(string selector)",
          "131:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.ConstantField\")]",
          "135:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings.ConstantField\")]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "146:     }",
          "148:     [Theory]",
          "154:     {",
          "156:         var config = new ParsingConfig();",
          "",
          "[Removed Lines]",
          "149:     [InlineData(\"new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3()\", \"SettingsProp[\\\"jwt\\\"]\")]",
          "150:     [InlineData(\"new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3()\", \"SettingsField[\\\"jwt\\\"]\")]",
          "151:     [InlineData(\"c => new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3()\", \"SettingsProp[\\\"jwt\\\"]\")]",
          "152:     [InlineData(\"c => new System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3()\", \"SettingsField[\\\"jwt\\\"]\")]",
          "153:     public void UsingClassAsType_WhenAddedToDefaultDynamicLinqCustomTypeProvider_ShouldBeOk(string selector1, string selector2)",
          "",
          "[Added Lines]",
          "155:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3.SettingsProp[\\\"jwt\\\"]\")]",
          "156:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3.SettingsField[\\\"jwt\\\"]\")]",
          "157:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3.ConstantField\")]",
          "158:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3.SettingsProp[\\\"jwt\\\"]\")]",
          "159:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3.SettingsField[\\\"jwt\\\"]\")]",
          "160:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings3.ConstantField\")]",
          "161:     public void UsingClassAsType_WhenAddedToDefaultDynamicLinqCustomTypeProvider_ShouldBeOk(string selector)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "162:         }.AsQueryable();",
          "168:         action.Should().NotThrow();",
          "",
          "[Removed Lines]",
          "165:         Action action = () => queryable.Select(config, selector1).Select(config, selector2);",
          "",
          "[Added Lines]",
          "173:         Action action = () => queryable.Select(config, selector);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "171:     [Theory]",
          "172:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings2.SettingsProp[\\\"jwt\\\"]\")]",
          "173:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings2.SettingsField[\\\"jwt\\\"]\")]",
          "174:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings2.SettingsProp[\\\"jwt\\\"]\")]",
          "175:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings2.SettingsField[\\\"jwt\\\"]\")]",
          "176:     public void UsingStaticClassWithDynamicTypeAttribute_ShouldBeOk(string selector)",
          "177:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "182:     [InlineData(\"System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings2.ConstantField\")]",
          "185:     [InlineData(\"c => System.Linq.Dynamic.Core.Tests.Helpers.Models.AppSettings2.ConstantField\")]",
          "",
          "---------------"
        ]
      }
    }
  ]
}