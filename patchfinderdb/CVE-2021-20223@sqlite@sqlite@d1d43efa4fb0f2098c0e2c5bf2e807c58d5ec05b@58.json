{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d8d2fb92227dcb65004980bf51b6b06fa83db22c",
      "candidate_info": {
        "commit_hash": "d8d2fb92227dcb65004980bf51b6b06fa83db22c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d8d2fb92227dcb65004980bf51b6b06fa83db22c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test",
          "test/window2.tcl",
          "test/window2.test"
        ],
        "message": "Do not mistake constant integers in a PARTITION BY expression for references to ORDER BY style references to values returned by the SELECT statement.\n\nFossilOrigin-Name: 45c64d39d5afed7fdc6b1de19408559740d1fba1f5e0269ab68b132366a289e4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8a39803ef8db4d8cb0d231e66299525fad4e61266ca29b3704aebb88df1c745b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "894:     int i;",
          "895:     int nInit = pList ? pList->nExpr : 0;",
          "896:     for(i=0; i<pAppend->nExpr; i++){",
          "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
          "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
          "900:         pDup->op = TK_NULL;",
          "901:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
          "902:         pDup->u.zToken = 0;",
          "",
          "[Removed Lines]",
          "899:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
          "",
          "[Added Lines]",
          "897:       int iDummy;",
          "900:       if( bIntToNull && pDup && sqlite3ExprIsInteger(pDup, &iDummy) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "951:     pSort = exprListAppendList(pParse, pSort, pMWin->pOrderBy, 1);",
          "952:     if( pSort && p->pOrderBy && p->pOrderBy->nExpr<=pSort->nExpr ){",
          "953:       int nSave = pSort->nExpr;",
          "",
          "[Removed Lines]",
          "950:     pSort = sqlite3ExprListDup(db, pMWin->pPartition, 0);",
          "",
          "[Added Lines]",
          "951:     pSort = exprListAppendList(pParse, 0, pMWin->pPartition, 1);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1364: # 2019-12-25 ticket d87336c81c7d0873",
          "1365: #",
          "1366: reset_db",
          "1374: finish_test",
          "",
          "[Removed Lines]",
          "1367: do_catchsql_test 40.1 {",
          "1368:   CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
          "1369:   SELECT * FROM t0",
          "1370:    WHERE ((0,0) IN (SELECT COUNT(*),LAG(5)OVER(PARTITION BY 0) FROM t0),0)<=(c1,0);",
          "1371: } {1 {1st ORDER BY term out of range - should be between 1 and 3}}",
          "",
          "[Added Lines]",
          "1366: #reset_db",
          "1367: #do_catchsql_test 40.1 {",
          "1368: #  CREATE VIRTUAL TABLE t0 USING rtree(c0, c1, c2);",
          "1369: #  SELECT * FROM t0",
          "1370: #   WHERE ((0,0) IN (SELECT COUNT(*),LAG(5)OVER(PARTITION BY 0) FROM t0),0)<=(c1,0);",
          "1371: #} {1 {1st ORDER BY term out of range - should be between 1 and 3}}",
          "1373: #-------------------------------------------------------------------------",
          "1375: do_execsql_test 41.1 {",
          "1376:   CREATE TABLE t1(a, b, c);",
          "1377:   INSERT INTO t1 VALUES(NULL,'bb',355);",
          "1378:   INSERT INTO t1 VALUES('CC','aa',158);",
          "1379:   INSERT INTO t1 VALUES('GG','bb',929);",
          "1380:   INSERT INTO t1 VALUES('FF','Rb',574);",
          "1381: }",
          "1383: do_execsql_test 41.2 {",
          "1384:   SELECT min(c) OVER (",
          "1385:     ORDER BY a RANGE BETWEEN 5.2 PRECEDING AND 0.1 PRECEDING",
          "1386:   ) FROM t1",
          "1387: } {355 158 574 929}",
          "1389: do_execsql_test 41.2 {",
          "1390:   SELECT min(c) OVER (",
          "1391:     ORDER BY a RANGE BETWEEN 5.2 PRECEDING AND 0.1 PRECEDING",
          "1392:   ) << 100 FROM t1",
          "1393: } {0 0 0 0}",
          "1395: do_execsql_test 41.3 {",
          "1396:   SELECT",
          "1397:     min(c) OVER win3 << first_value(c) OVER win3,",
          "1398:     min(c) OVER win3 << first_value(c) OVER win3",
          "1399:   FROM t1",
          "1400:   WINDOW win3 AS (",
          "1401:     PARTITION BY 6 ORDER BY a RANGE BETWEEN 5.2 PRECEDING AND 0.1 PRECEDING",
          "1402:   );",
          "1403: } {0 0  0 0  0 0  0 0}",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "464: }",
          "466: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466: ==========",
          "468: execsql_test 7.0 {",
          "469:   DROP TABLE IF EXISTS t1;",
          "470:   CREATE TABLE t1(a INTEGER, b INTEGER, c INTEGER);",
          "471:   INSERT INTO t1 VALUES(1, 1, 1);",
          "472:   INSERT INTO t1 VALUES(1, 2, 2);",
          "473:   INSERT INTO t1 VALUES(3, 3, 3);",
          "474:   INSERT INTO t1 VALUES(3, 4, 4);",
          "475: }",
          "477: execsql_test 7.1 {",
          "478:   SELECT c, sum(c) OVER win1 FROM t1",
          "479:   WINDOW win1 AS (ORDER BY b)",
          "480: }",
          "482: execsql_test 7.2 {",
          "483:   SELECT c, sum(c) OVER win1 FROM t1",
          "484:   WINDOW win1 AS (PARTITION BY 1 ORDER BY b)",
          "485: }",
          "487: execsql_test 7.3 {",
          "488:   SELECT c, sum(c) OVER win1 FROM t1",
          "489:   WINDOW win1 AS (ORDER BY 1)",
          "490: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "947:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "948: } {}",
          "950: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "950: #==========================================================================",
          "952: do_execsql_test 7.0 {",
          "953:   DROP TABLE IF EXISTS t1;",
          "954:   CREATE TABLE t1(a INTEGER, b INTEGER, c INTEGER);",
          "955:   INSERT INTO t1 VALUES(1, 1, 1);",
          "956:   INSERT INTO t1 VALUES(1, 2, 2);",
          "957:   INSERT INTO t1 VALUES(3, 3, 3);",
          "958:   INSERT INTO t1 VALUES(3, 4, 4);",
          "959: } {}",
          "961: do_execsql_test 7.1 {",
          "962:   SELECT c, sum(c) OVER win1 FROM t1",
          "963:   WINDOW win1 AS (ORDER BY b)",
          "964: } {1 1   2 3   3 6   4 10}",
          "966: do_execsql_test 7.2 {",
          "967:   SELECT c, sum(c) OVER win1 FROM t1",
          "968:   WINDOW win1 AS (PARTITION BY 1 ORDER BY b)",
          "969: } {1 1   2 3   3 6   4 10}",
          "971: do_execsql_test 7.3 {",
          "972:   SELECT c, sum(c) OVER win1 FROM t1",
          "973:   WINDOW win1 AS (ORDER BY 1)",
          "974: } {1 10   2 10   3 10   4 10}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa17e134b2a006b4f5463743a72ab720502a5ecc",
      "candidate_info": {
        "commit_hash": "fa17e134b2a006b4f5463743a72ab720502a5ecc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fa17e134b2a006b4f5463743a72ab720502a5ecc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/wherecode.c",
          "test/where.test"
        ],
        "message": "Improvements to the IN-early-out optimization so that it works more efficiently when there are two or more indexed IN clauses on a single table.\n\nFossilOrigin-Name: 35505c68c1945c35babd2496e02bc4907a15c8e7b8d77f05f230bd0e9d4891d7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/wherecode.c||src/wherecode.c",
          "test/where.test||test/where.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ca0b7d54d73d07cd6b32e650a809174bb1cd66ce5ecdb36f65b70899ea05824",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4383:   break;",
          "4384: }",
          "4395: case OP_SeekHit: {",
          "4396:   VdbeCursor *pC;",
          "4397:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "4398:   pC = p->apCsr[pOp->p1];",
          "4399:   assert( pC!=0 );",
          "4402:   break;",
          "4403: }",
          "",
          "[Removed Lines]",
          "4400:   assert( pOp->p2==0 || pOp->p2==1 );",
          "4401:   pC->seekHit = pOp->p2 & 1;",
          "",
          "[Added Lines]",
          "4405:   assert( pOp->p3>=pOp->p2 );",
          "4406:   if( pC->seekHit<pOp->p2 ){",
          "4407:     pC->seekHit = pOp->p2;",
          "4408:   }else if( pC->seekHit>pOp->p3 ){",
          "4409:     pC->seekHit = pOp->p3;",
          "4410:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4507:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "4508:   pC = p->apCsr[pOp->p1];",
          "4509:   assert( pC!=0 );",
          "4513: }",
          "",
          "[Removed Lines]",
          "4510:   if( pC->seekHit ) break;",
          "",
          "[Added Lines]",
          "4523:   if( pC->seekHit>=pOp->p4.i ) break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4589:   }else{",
          "4590:     VdbeBranchTaken(takeJump||alreadyExists==0,2);",
          "4591:     if( takeJump || !alreadyExists ) goto jump_to_p2;",
          "4592:   }",
          "4593:   break;",
          "4594: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4605:     if( pOp->opcode==OP_IfNoHope ) pC->seekHit = pOp->p4.i;",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:     if( pLevel->u.in.nIn==0 ){",
          "571:       pLevel->addrNxt = sqlite3VdbeMakeLabel(pParse);",
          "572:     }",
          "574:     i = pLevel->u.in.nIn;",
          "575:     pLevel->u.in.nIn += nEq;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:     if( iEq>0 ){",
          "574:       pLoop->wsFlags |= WHERE_IN_EARLYOUT;",
          "575:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "596:             if( iEq>0 ){",
          "597:               pIn->iBase = iReg - i;",
          "598:               pIn->nPrefix = i;",
          "600:             }else{",
          "601:               pIn->nPrefix = 0;",
          "602:             }",
          "",
          "[Removed Lines]",
          "599:               pLoop->wsFlags |= WHERE_IN_EARLYOUT;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "606:           pIn++;",
          "607:         }",
          "608:       }",
          "609:     }else{",
          "610:       pLevel->u.in.nIn = 0;",
          "611:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "611:       if( iEq>0 ){",
          "612:         sqlite3VdbeAddOp3(v, OP_SeekHit, pLevel->iIdxCur, 0, iEq);",
          "613:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1791:     }else{",
          "1795:       if( regBignull ){",
          "1796:         sqlite3VdbeAddOp2(v, OP_Integer, 1, regBignull);",
          "1797:         VdbeComment((v, \"NULL-scan pass ctr\"));",
          "",
          "[Removed Lines]",
          "1792:       if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "1793:         sqlite3VdbeAddOp1(v, OP_SeekHit, iIdxCur);",
          "1794:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1902:     }",
          "1904:     if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "1906:     }",
          "",
          "[Removed Lines]",
          "1905:       sqlite3VdbeAddOp2(v, OP_SeekHit, iIdxCur, 1);",
          "",
          "[Added Lines]",
          "1907:       sqlite3VdbeAddOp3(v, OP_SeekHit, iIdxCur, nEq, nEq);",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "490:     count {",
          "491:       SELECT * FROM t1 WHERE x IN (1,7) AND y IN (9,10) ORDER BY 1;",
          "492:     }",
          "494:   do_test where-5.15 {",
          "495:     count {",
          "496:       SELECT * FROM t1 WHERE x IN (1,7) AND y IN (9,16) ORDER BY 1;",
          "497:     }",
          "499:   do_test where-5.100 {",
          "500:     db eval {",
          "501:       SELECT w, x, y FROM t1 WHERE x IN (1,5) AND y IN (9,8,3025,1000,3969)",
          "",
          "[Removed Lines]",
          "493:   } {2 1 9 4}",
          "498:   } {2 1 9 3 1 16 8}",
          "",
          "[Added Lines]",
          "493:   } {2 1 9 5}",
          "498:   } {2 1 9 3 1 16 9}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbd620e22cb9c3e0b2dcfc094827968e438fabdf",
      "candidate_info": {
        "commit_hash": "bbd620e22cb9c3e0b2dcfc094827968e438fabdf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bbd620e22cb9c3e0b2dcfc094827968e438fabdf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix the \".read\" command so that it gives an error when its argument is a directory. See [https://sqlite.org/forum/forumpost/4c53c434ca|forum message 4c53c434ca].\n\nFossilOrigin-Name: 6d258c3c7ecafa1114e4a63739971ff527580868659c2f2c47d2c0adb92c1453",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5cc200939d3a33566ddb858fc74c878acc72cfe5cf4c9b1d08e7b13e4d5ff566",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:   return n;",
          "624: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629: #ifdef _WIN32",
          "630: # define notNormalFile(X) 0",
          "631: #else",
          "632: static int notNormalFile(const char *zFile){",
          "633:   struct stat x;",
          "634:   int rc;",
          "635:   memset(&x, 0, sizeof(x));",
          "636:   rc = stat(zFile, &x);",
          "637:   return rc || !S_ISREG(x.st_mode);",
          "638: }",
          "639: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8932:       rc = 1;",
          "8933:       goto meta_command_exit;",
          "8934:     }",
          "8937:       utf8_printf(stderr,\"Error: cannot open \\\"%s\\\"\\n\", azArg[1]);",
          "8938:       rc = 1;",
          "8939:     }else{",
          "",
          "[Removed Lines]",
          "8935:     p->in = fopen(azArg[1], \"rb\");",
          "8936:     if( p->in==0 ){",
          "",
          "[Added Lines]",
          "8950:     if( notNormalFile(azArg[1])",
          "8951:      || (p->in = fopen(azArg[1], \"rb\"))==0",
          "8952:     ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86d2de2571d5dd910a57c5f186bd34f1883974d4",
      "candidate_info": {
        "commit_hash": "86d2de2571d5dd910a57c5f186bd34f1883974d4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/86d2de2571d5dd910a57c5f186bd34f1883974d4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/whereG.test"
        ],
        "message": "Check-in [1d4f86201dab9a22] changed a testcase() to an assert() because we didn't know how to reach that condition any more.  But YongHeng's fuzzer found a way.  So now we change it back.  Ticket [9fb26d37cefaba40].\n\nFossilOrigin-Name: 90b1169d1b200d35a3f9f0ad2ae35a1b336bdd9b1ad0494ba80a382354c8d8b8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/whereG.test||test/whereG.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc1fffdeddf422404170fa163ab80372ae58b444d7012b2c164021b221709b3e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2076:       if( (flags1 | flags3)&MEM_Str ){",
          "2077:         if( (flags1 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "2078:           applyNumericAffinity(pIn1,0);",
          "2080:           flags3 = pIn3->flags;",
          "2081:         }",
          "2082:         if( (flags3 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Removed Lines]",
          "2079:           assert( flags3==pIn3->flags );",
          "",
          "[Added Lines]",
          "2079:           testcase( flags3==pIn3->flags );",
          "",
          "---------------"
        ],
        "test/whereG.test||test/whereG.test": [
          "File: test/whereG.test -> test/whereG.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "317:   SELECT coalesce(max(quote(a)),10) FROM t1 GROUP BY a;",
          "318: } {NULL '' 'X'}",
          "320: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320: # 2020-06-14: assert() changed back into testcase()",
          "321: # ticket 9fb26d37cefaba40",
          "322: #",
          "323: reset_db",
          "324: do_execsql_test 10.1 {",
          "325:   CREATE TABLE a(b TEXT);  INSERT INTO a VALUES(0),(4),(9);",
          "326:   CREATE TABLE c(d NUM);",
          "327:   CREATE VIEW f(g, h) AS SELECT b, 0 FROM a UNION SELECT d, d FROM c;",
          "328:   SELECT g = g FROM f GROUP BY h;",
          "329: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccf578d435cce596b7f7566a98b0ad8d71df1ea3",
      "candidate_info": {
        "commit_hash": "ccf578d435cce596b7f7566a98b0ad8d71df1ea3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ccf578d435cce596b7f7566a98b0ad8d71df1ea3",
        "files": [
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_tokenize.c",
          "ext/fts5/test/fts5faultD.test",
          "ext/fts5/test/fts5faultE.test",
          "ext/fts5/test/fts5trigram.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add tests for the trigram tokenizer. Fix minor issues.\n\nFossilOrigin-Name: 897ced99b44085012aa44d3264940dcbd4c77b295a894a1b58fb2c03a0f7fee8",
        "before_after_code_files": [
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "ext/fts5/test/fts5faultD.test||ext/fts5/test/fts5faultD.test",
          "ext/fts5/test/fts5faultE.test||ext/fts5/test/fts5faultE.test",
          "ext/fts5/test/fts5trigram.test||ext/fts5/test/fts5trigram.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c"
        ],
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1265: typedef struct TrigramTokenizer TrigramTokenizer;",
          "1266: struct TrigramTokenizer {",
          "1268: };",
          "",
          "[Removed Lines]",
          "1267:   int bFold;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5faultD.test||ext/fts5/test/fts5faultD.test": [
          "File: ext/fts5/test/fts5faultD.test -> ext/fts5/test/fts5faultD.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: source $testdir/malloc_common.tcl",
          "19: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "20: ifcapable !fts5 {",
          "",
          "[Removed Lines]",
          "17: set testprefix fts5faultA",
          "",
          "[Added Lines]",
          "17: set testprefix fts5faultD",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5faultE.test||ext/fts5/test/fts5faultE.test": [
          "File: ext/fts5/test/fts5faultE.test -> ext/fts5/test/fts5faultE.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2016 February 2",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: #",
          "12: # This file is focused on OOM errors.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: source $testdir/malloc_common.tcl",
          "17: set testprefix fts5faultE",
          "19: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "20: ifcapable !fts5 {",
          "21:   finish_test",
          "22:   return",
          "23: }",
          "25: faultsim_save_and_close",
          "26: do_faultsim_test 1 -prep {",
          "27:   faultsim_restore_and_reopen",
          "28: } -body {",
          "29:   execsql { CREATE VIRTUAL TABLE t1 USING fts5(x, y, tokenize=trigram) }",
          "30: } -test {",
          "31:   faultsim_test_result {0 {}} {1 {vtable constructor failed: t1}}",
          "32: }",
          "34: reset_db",
          "35: do_execsql_test 2.0 {",
          "36:   CREATE VIRTUAL TABLE t1 USING fts5(x, y, tokenize=trigram);",
          "37: }",
          "39: faultsim_save_and_close",
          "40: do_faultsim_test 2 -faults ioerr-t* -prep {",
          "41:   faultsim_restore_and_reopen",
          "42: } -body {",
          "43:   execsql {",
          "44:     INSERT INTO t1 VALUES('abcdefghijklmnopqrstuvwxyz', NULL);",
          "45:     SELECT count(*) FROM t1 WHERE x LIKE '%mnop%' AND t1 MATCH 'jkl';",
          "46:   }",
          "47: } -test {",
          "48:   faultsim_test_result {0 1} {1 {vtable constructor failed: t1}}",
          "49: }",
          "52: finish_test",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5trigram.test||ext/fts5/test/fts5trigram.test": [
          "File: ext/fts5/test/fts5trigram.test -> ext/fts5/test/fts5trigram.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   } $res",
          "118: }",
          "120: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: #-------------------------------------------------------------------------",
          "121: reset_db",
          "122: do_catchsql_test 3.1 {",
          "123:   CREATE VIRTUAL TABLE ttt USING fts5(c, tokenize=\"trigram case_sensitive 2\");",
          "124: } {1 {error in tokenizer constructor}}",
          "125: do_catchsql_test 3.2 {",
          "126:   CREATE VIRTUAL TABLE ttt USING fts5(c, tokenize=\"trigram case_sensitive 11\");",
          "127: } {1 {error in tokenizer constructor}}",
          "128: do_catchsql_test 3.3 {",
          "129:   CREATE VIRTUAL TABLE ttt USING fts5(c, \"tokenize=trigram case_sensitive 1\");",
          "130: } {0 {}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0d7810c1aea93c0a3da1ccc4911dbce8a1b6e1dbfe1ab7e800289a0c783b5985",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}