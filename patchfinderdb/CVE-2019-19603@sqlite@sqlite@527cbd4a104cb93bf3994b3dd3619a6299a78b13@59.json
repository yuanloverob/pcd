{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a79a0e733faf76a1dd47f094665b2a1960858e4a",
      "candidate_info": {
        "commit_hash": "a79a0e733faf76a1dd47f094665b2a1960858e4a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a79a0e733faf76a1dd47f094665b2a1960858e4a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "test/distinct2.test"
        ],
        "message": "When using an index for both DISTINCT and ORDER BY, do not confuse the number of columns required for distinctness with the number required to get the correct sort order. Fix for [6749cb3c].\n\nFossilOrigin-Name: b47169319ad88e8ffdbe8fbb91f4cced81ebd5c0ee1b018be2d0256c9a1c5159",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "test/distinct2.test||test/distinct2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6bfa44da226fd758a2ee924d1e8e3a742b0635b6d3f922a4a7919cb14b2418e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3695:     if( pLoop->wsFlags & WHERE_VIRTUALTABLE ){",
          "3696:       if( pLoop->u.vtab.isOrdered ) obSat = obDone;",
          "3697:       break;",
          "3700:     }",
          "3701:     iCur = pWInfo->pTabList->a[pLoop->iTab].iCursor;",
          "",
          "[Removed Lines]",
          "3698:     }else{",
          "3699:       pLoop->u.btree.nIdxCol = 0;",
          "",
          "[Added Lines]",
          "3698:     }else if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3699:       pLoop->u.btree.nDistinctCol = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3838:             pColl = sqlite3ExprNNCollSeq(pWInfo->pParse, pOrderBy->a[i].pExpr);",
          "3839:             if( sqlite3StrICmp(pColl->zName, pIndex->azColl[j])!=0 ) continue;",
          "3840:           }",
          "3842:           isMatch = 1;",
          "3843:           break;",
          "3844:         }",
          "",
          "[Removed Lines]",
          "3841:           pLoop->u.btree.nIdxCol = j+1;",
          "",
          "[Added Lines]",
          "3841:           if( wctrlFlags & WHERE_DISTINCTBY ){",
          "3842:             pLoop->u.btree.nDistinctCol = j+1;",
          "3843:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5160:        && (pLoop->wsFlags & WHERE_INDEXED)!=0",
          "5161:        && (pIdx = pLoop->u.btree.pIndex)->hasStat1",
          "5163:        && pIdx->aiRowLogEst[n]>=36",
          "5164:       ){",
          "5165:         int r1 = pParse->nMem+1;",
          "",
          "[Removed Lines]",
          "5162:        && (n = pLoop->u.btree.nIdxCol)>0",
          "",
          "[Added Lines]",
          "5164:        && (n = pLoop->u.btree.nDistinctCol)>0",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "test/distinct2.test||test/distinct2.test": [
          "File: test/distinct2.test -> test/distinct2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "229:   SELECT DISTINCT a FROM t1, t2 WHERE x=b;",
          "230: } {1 1}",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232: #-------------------------------------------------------------------------",
          "233: reset_db",
          "235: do_execsql_test 2000 {",
          "236:   CREATE TABLE t0 (c0, c1, c2, PRIMARY KEY (c0, c1));",
          "237:   CREATE TABLE t1 (c2);",
          "238:   INSERT INTO t0(c2) VALUES (0),(1),(3),(4),(5),(6),(7),(8),(9),(10),(11);",
          "239:   INSERT INTO t0(c1) VALUES ('a');",
          "240:   INSERT INTO t1(c2) VALUES (0);",
          "241: }",
          "242: do_execsql_test 2010 {",
          "243:   SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ORDER BY t0.c0;",
          "244: } {{} 1 {} {} 1 a}",
          "245: do_execsql_test 1.2 {",
          "246:   ANALYZE;",
          "247: }",
          "248: do_execsql_test 2020 {",
          "249:   SELECT DISTINCT t0.c0, t1._rowid_, t0.c1 FROM t1 CROSS JOIN t0 ORDER BY t0.c0;",
          "250: } {{} 1 {} {} 1 a}",
          "253: do_execsql_test 2030 {",
          "254:   CREATE TABLE t2(a, b, c);",
          "255:   CREATE INDEX t2ab ON t2(a, b);",
          "257:   WITH c(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM c WHERE i<64)",
          "258:     INSERT INTO t2 SELECT 'one', i%2, 'one' FROM c;",
          "260:   WITH c(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM c WHERE i<64)",
          "261:     INSERT INTO t2 SELECT 'two', i%2, 'two' FROM c;",
          "263:   CREATE TABLE t3(x INTEGER PRIMARY KEY);",
          "264:   INSERT INTO t3 VALUES(1);",
          "266:   ANALYZE;",
          "267: }",
          "268: do_execsql_test 2040 {",
          "269:   SELECT DISTINCT a, b, x FROM t3 CROSS JOIN t2 ORDER BY a;",
          "270: } {",
          "271:   one 0 1",
          "272:   one 1 1",
          "273:   two 0 1",
          "274:   two 1 1",
          "275: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05d7bfd0bbc884da273bc6cf9862236b80390974",
      "candidate_info": {
        "commit_hash": "05d7bfd0bbc884da273bc6cf9862236b80390974",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/05d7bfd0bbc884da273bc6cf9862236b80390974",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c",
          "test/func.test"
        ],
        "message": "Fix the round() SQL function so that it handles infinities correctly.\n\nFossilOrigin-Name: db9acef14d49212108c8082cc15a9b9b4a56b8afe4fe1104ddf62783739c1fbe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c",
          "test/func.test||test/func.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1dfc95b8673b0e8c9ef5040c2fa0fbe9846e430d104e9b83f3f1f3ad63446380",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include \"sqliteInt.h\"",
          "17: #include <stdlib.h>",
          "18: #include <assert.h>",
          "19: #include \"vdbeInt.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <math.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "396:       sqlite3_result_error_nomem(context);",
          "397:       return;",
          "398:     }",
          "400:     sqlite3_free(zBuf);",
          "401:   }",
          "402:   sqlite3_result_double(context, r);",
          "",
          "[Removed Lines]",
          "399:     sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8);",
          "",
          "[Added Lines]",
          "400:     if( !sqlite3AtoF(zBuf, &r, sqlite3Strlen30(zBuf), SQLITE_UTF8) ){",
          "401:       assert( sqlite3_strglob(\"*Inf\", zBuf)==0 );",
          "402:       r = zBuf[0]=='-' ? -HUGE_VAL : +HUGE_VAL;",
          "403:     }",
          "",
          "---------------"
        ],
        "test/func.test||test/func.test": [
          "File: test/func.test -> test/func.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:   do_test func-4.38 {",
          "316:     execsql {SELECT round(9999999999999.556,2);}",
          "317:   } {9999999999999.56}",
          "318: }",
          "320: # Test the upper() and lower() functions",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:   do_execsql_test func-4.39 {",
          "319:     SELECT round(1e500), round(-1e500);",
          "320:   } {Inf -Inf}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a42325e7313c3391fc045d084653000871c9f347",
      "candidate_info": {
        "commit_hash": "a42325e7313c3391fc045d084653000871c9f347",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a42325e7313c3391fc045d084653000871c9f347",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "The OP_Eq and OP_Ne operators have a special P5 value SQLITE_NOTNULL that asserts that the values are not null.  Except that is not always true for a corrupt database.  Adjust the assert() and add a testcase() to make this point clear.\n\nFossilOrigin-Name: a3fdb2c78d23b94d68dc08126b22d03152ac6068496a42402cdfb336cd4a7e33",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48438bb35b48955a1df83ef90f0ef6c9cfed0b16d2e938f36d74ad9d53b4b5b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1926:       assert( pOp->opcode==OP_Eq || pOp->opcode==OP_Ne );",
          "1927:       assert( (flags1 & MEM_Cleared)==0 );",
          "1929:       if( (flags1&flags3&MEM_Null)!=0",
          "1930:        && (flags3&MEM_Cleared)==0",
          "1931:       ){",
          "",
          "[Removed Lines]",
          "1928:       assert( (pOp->p5 & SQLITE_JUMPIFNULL)==0 );",
          "",
          "[Added Lines]",
          "1928:       assert( (pOp->p5 & SQLITE_JUMPIFNULL)==0 || CORRUPT_DB );",
          "1929:       testcase( (pOp->p5 & SQLITE_JUMPIFNULL)!=0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5860a61d59e78da7d3bb24346c4791343568a5c6",
      "candidate_info": {
        "commit_hash": "5860a61d59e78da7d3bb24346c4791343568a5c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5860a61d59e78da7d3bb24346c4791343568a5c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Further performance improvements to btreeInitPage().\n\nFossilOrigin-Name: 93ae382e97c23c90312739481e47ef7f9bc475a8382c063a2de2986c950c0aec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6eb38c59a81d27b7c1f3edad84b27a1114df6f1607282b2be1b5de9c7decc512",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1929:   return SQLITE_OK;",
          "1930: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1936: static SQLITE_NOINLINE int btreeCellSizeCheck(MemPage *pPage){",
          "1946:   iCellFirst = pPage->cellOffset + 2*pPage->nCell;",
          "1947:   usableSize = pPage->pBt->usableSize;",
          "1948:   iCellLast = usableSize - 4;",
          "1949:   data = pPage->aData;",
          "1950:   cellOffset = pPage->cellOffset;",
          "1951:   if( !pPage->leaf ) iCellLast--;",
          "1952:   for(i=0; i<pPage->nCell; i++){",
          "1953:     pc = get2byteAligned(&data[cellOffset+i*2]);",
          "1954:     testcase( pc==iCellFirst );",
          "1955:     testcase( pc==iCellLast );",
          "1956:     if( pc<iCellFirst || pc>iCellLast ){",
          "1957:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1958:     }",
          "1959:     sz = pPage->xCellSize(pPage, &data[pc]);",
          "1960:     testcase( pc+sz==usableSize );",
          "1961:     if( pc+sz>usableSize ){",
          "1962:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1963:     }",
          "1964:   }",
          "1965:   return SQLITE_OK;",
          "1966: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1957:   assert( pPage->isInit==0 );",
          "1959:   pBt = pPage->pBt;",
          "1965:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1966:   }",
          "1967:   assert( pBt->pageSize>=512 && pBt->pageSize<=65536 );",
          "1968:   pPage->maskPage = (u16)(pBt->pageSize - 1);",
          "1969:   pPage->nOverflow = 0;",
          "1978:   if( pPage->nCell>MX_CELL(pBt) ){",
          "1980:     return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Removed Lines]",
          "1960:   hdr = pPage->hdrOffset;",
          "1961:   data = pPage->aData;",
          "1964:   if( decodeFlags(pPage, data[hdr]) ){",
          "1970:   usableSize = pBt->usableSize;",
          "1971:   pPage->cellOffset = cellOffset = hdr + 8 + pPage->childPtrSize;",
          "1972:   pPage->aDataEnd = &data[usableSize];",
          "1973:   pPage->aCellIdx = &data[cellOffset];",
          "1974:   pPage->aDataOfst = &data[pPage->childPtrSize];",
          "1977:   pPage->nCell = get2byte(&data[hdr+3]);",
          "",
          "[Added Lines]",
          "1990:   data = pPage->aData + pPage->hdrOffset;",
          "1993:   if( decodeFlags(pPage, data[0]) ){",
          "1999:   pPage->cellOffset = pPage->hdrOffset + 8 + pPage->childPtrSize;",
          "2000:   pPage->aCellIdx = data + pPage->childPtrSize + 8;",
          "2001:   pPage->aDataEnd = pPage->aData + pBt->usableSize;",
          "2002:   pPage->aDataOfst = pPage->aData + pPage->childPtrSize;",
          "2005:   pPage->nCell = get2byte(&data[3]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1987:   assert( pPage->nCell>0",
          "1989:        || CORRUPT_DB );",
          "2021:   pPage->isInit = 1;",
          "2022:   return SQLITE_OK;",
          "2023: }",
          "",
          "[Removed Lines]",
          "1988:        || get2byteNotZero(&data[hdr+5])==usableSize",
          "1998:   iCellFirst = cellOffset + 2*pPage->nCell;",
          "1999:   iCellLast = usableSize - 4;",
          "2000:   if( pBt->db->flags & SQLITE_CellSizeCk ){",
          "2004:     if( !pPage->leaf ) iCellLast--;",
          "2005:     for(i=0; i<pPage->nCell; i++){",
          "2006:       pc = get2byteAligned(&data[cellOffset+i*2]);",
          "2007:       testcase( pc==iCellFirst );",
          "2008:       testcase( pc==iCellLast );",
          "2009:       if( pc<iCellFirst || pc>iCellLast ){",
          "2010:         return SQLITE_CORRUPT_PAGE(pPage);",
          "2011:       }",
          "2012:       sz = pPage->xCellSize(pPage, &data[pc]);",
          "2013:       testcase( pc+sz==usableSize );",
          "2014:       if( pc+sz>usableSize ){",
          "2015:         return SQLITE_CORRUPT_PAGE(pPage);",
          "2016:       }",
          "2017:     }",
          "2018:     if( !pPage->leaf ) iCellLast++;",
          "2019:   }",
          "",
          "[Added Lines]",
          "2016:        || get2byteNotZero(&data[5])==pBt->usableSize",
          "2020:   if( pBt->db->flags & SQLITE_CellSizeCk ){",
          "2021:     return btreeCellSizeCheck(pPage);",
          "2022:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4eb4e4fe7e1e60bbcb5009a43bb6278e0a81edff",
      "candidate_info": {
        "commit_hash": "4eb4e4fe7e1e60bbcb5009a43bb6278e0a81edff",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4eb4e4fe7e1e60bbcb5009a43bb6278e0a81edff",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/ctime.c"
        ],
        "message": "Add a new requirement mark on the ctime.c code.\n\nFossilOrigin-Name: c4b405687b010ee20ec02c42913a0540909d0155c88a4a56194fda99c704279e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/ctime.c||src/ctime.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f8696b60eec0dcacfe92d9a31cbf1436d674140e5447de0cd1c2f52bff6c2be4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/ctime.c||src/ctime.c": [
          "File: src/ctime.c -> src/ctime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "17: #ifndef SQLITE_OMIT_COMPILEOPTION_DIAGS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}