{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e1b6d231a5f27bd505558f502f575507592089a",
      "candidate_info": {
        "commit_hash": "7e1b6d231a5f27bd505558f502f575507592089a",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/7e1b6d231a5f27bd505558f502f575507592089a",
        "files": [
          "windows/README",
          "windows/winkernel_mm.c",
          "windows/winkernel_mm.h"
        ],
        "message": "add winkernel specific files",
        "before_after_code_files": [
          "windows/winkernel_mm.c||windows/winkernel_mm.c",
          "windows/winkernel_mm.h||windows/winkernel_mm.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ],
          "candidate": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ]
        }
      },
      "candidate_diff": {
        "windows/winkernel_mm.c||windows/winkernel_mm.c": [
          "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #include \"winkernel_mm.h\"",
          "4: #include <ntddk.h>",
          "7: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
          "11: typedef struct _CS_WINKERNEL_MEMBLOCK",
          "12: {",
          "13:   size_t size;   // A number of bytes allocated",
          "14:   char data[1];  // An address returned to a caller",
          "15: } CS_WINKERNEL_MEMBLOCK;",
          "16: C_ASSERT(sizeof(CS_WINKERNEL_MEMBLOCK) == sizeof(void *) * 2);",
          "20: void CAPSTONE_API cs_winkernel_free(void *ptr)",
          "21: {",
          "22:   if (ptr)",
          "23:   {",
          "24:     ExFreePoolWithTag(CONTAINING_RECORD(ptr, CS_WINKERNEL_MEMBLOCK, data), CS_WINKERNEL_POOL_TAG);",
          "25:   }",
          "26: }",
          "29: void * CAPSTONE_API cs_winkernel_malloc(size_t size)",
          "30: {",
          "33:   NT_ASSERT(size);",
          "35:   CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
          "36:     NonPagedPoolNx, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
          "37:   if (!block)",
          "38:   {",
          "39:     return NULL;",
          "40:   }",
          "41:   block->size = size;",
          "42:   return block->data;",
          "43: }",
          "46: void * CAPSTONE_API cs_winkernel_calloc(size_t n, size_t size)",
          "47: {",
          "48:   size_t total = n * size;",
          "50:   void *new_ptr = cs_winkernel_malloc(total);",
          "51:   if (!new_ptr)",
          "52:   {",
          "53:     return NULL;",
          "54:   }",
          "56:   return RtlFillMemory(new_ptr, total, 0);",
          "57: }",
          "60: void * CAPSTONE_API cs_winkernel_realloc(void *ptr, size_t size)",
          "61: {",
          "62:   void *new_ptr = NULL;",
          "63:   size_t current_size = 0;",
          "64:   size_t smaller_size = 0;",
          "66:   if (!ptr)",
          "67:   {",
          "68:     return cs_winkernel_malloc(size);",
          "69:   }",
          "71:   new_ptr = cs_winkernel_malloc(size);",
          "72:   if (!new_ptr)",
          "73:   {",
          "74:     return NULL;",
          "75:   }",
          "77:   current_size = CONTAINING_RECORD(ptr, CS_WINKERNEL_MEMBLOCK, data)->size;",
          "78:   smaller_size = (current_size < size) ? current_size : size;",
          "79:   RtlCopyMemory(new_ptr, ptr, smaller_size);",
          "80:   cs_winkernel_free(ptr);",
          "81:   return new_ptr;",
          "82: }",
          "87: #pragma warning(push)",
          "88: #pragma warning(disable : 28719)  // Banned API Usage : _vsnprintf is a Banned",
          "91: int CAPSTONE_API cs_winkernel_vsnprintf(char *buffer, size_t count, const char *format, va_list argptr)",
          "92: {",
          "93:   int result = _vsnprintf(buffer, count, format, argptr);",
          "98:   if (result == -1 || (size_t)result == count)",
          "99:   {",
          "100:     buffer[count - 1] = '\\0';",
          "101:   }",
          "102:   if (result == -1)",
          "103:   {",
          "109:     char* tmp = cs_winkernel_malloc(0x1000);",
          "110:     if (!tmp) {",
          "111:       return result;",
          "112:     }",
          "113:     result = _vsnprintf(tmp, 0x1000, format, argptr);",
          "114:     NT_ASSERT(result != -1);",
          "115:     cs_winkernel_free(tmp);",
          "116:   }",
          "118:   return result;",
          "119: }",
          "120: #pragma warning(pop)",
          "",
          "---------------"
        ],
        "windows/winkernel_mm.h||windows/winkernel_mm.h": [
          "File: windows/winkernel_mm.h -> windows/winkernel_mm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: #ifndef CS_WINDOWS_WINKERNEL_MM_H_",
          "4: #define CS_WINDOWS_WINKERNEL_MM_H_",
          "6: #ifdef __cplusplus",
          "7: extern \"C\" {",
          "8: #endif",
          "10: #include <capstone.h>",
          "12: void CAPSTONE_API cs_winkernel_free(void *ptr);",
          "13: void * CAPSTONE_API cs_winkernel_malloc(size_t size);",
          "14: void * CAPSTONE_API cs_winkernel_calloc(size_t n, size_t size);",
          "15: void * CAPSTONE_API cs_winkernel_realloc(void *ptr, size_t size);",
          "16: int CAPSTONE_API cs_winkernel_vsnprintf(char *buffer, size_t count, const char *format, va_list argptr);",
          "18: #ifdef __cplusplus",
          "19: }",
          "20: #endif",
          "22: #endif  // CS_WINDOWS_WINKERNEL_MM_H_",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f715a40fdb234726bdbf7b3d23ac462ae353ceec",
      "candidate_info": {
        "commit_hash": "f715a40fdb234726bdbf7b3d23ac462ae353ceec",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f715a40fdb234726bdbf7b3d23ac462ae353ceec",
        "files": [
          "windows/winkernel_mm.c"
        ],
        "message": "fix #748",
        "before_after_code_files": [
          "windows/winkernel_mm.c||windows/winkernel_mm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ],
          "candidate": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ]
        }
      },
      "candidate_diff": {
        "windows/winkernel_mm.c||windows/winkernel_mm.c": [
          "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:  NT_ASSERT(size);",
          "33:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
          "35:  if (!block) {",
          "36:   return NULL;",
          "37:  }",
          "",
          "[Removed Lines]",
          "34:    NonPagedPoolNx, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
          "",
          "[Added Lines]",
          "34:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7518c3b23d5a512bffafdc194eddd63c181275b5",
      "candidate_info": {
        "commit_hash": "7518c3b23d5a512bffafdc194eddd63c181275b5",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/7518c3b23d5a512bffafdc194eddd63c181275b5",
        "files": [
          "tests/test_winkernel.cpp",
          "windows/winkernel_mm.c",
          "windows/winkernel_mm.h"
        ],
        "message": "coding style",
        "before_after_code_files": [
          "tests/test_winkernel.cpp||tests/test_winkernel.cpp",
          "windows/winkernel_mm.c||windows/winkernel_mm.c",
          "windows/winkernel_mm.h||windows/winkernel_mm.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ],
          "candidate": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ]
        }
      },
      "candidate_diff": {
        "tests/test_winkernel.cpp||tests/test_winkernel.cpp": [
          "File: tests/test_winkernel.cpp -> tests/test_winkernel.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: #pragma warning(pop)",
          "111: }",
          "114: static void cs_winkernel_vsnprintf_test()",
          "115: {",
          "127: }",
          "130: EXTERN_C NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject,",
          "137: }",
          "149: }",
          "",
          "[Removed Lines]",
          "76: static void test() {",
          "77:   KFLOATING_SAVE float_save;",
          "78:   NTSTATUS status;",
          "83:   NT_ASSERT(KeGetCurrentIrql() <= DISPATCH_LEVEL);",
          "90:   status = KeSaveFloatingPointState(&float_save);",
          "91:   if (!NT_SUCCESS(status)) {",
          "92:     printf(\"ERROR: Failed to save floating point state!\\n\");",
          "93:     return;",
          "94:   }",
          "96:   unnamed::test();",
          "97:   arm::test();",
          "98:   arm64::test();",
          "99:   detail::test();",
          "100:   iter::test();",
          "101:   mips::test();",
          "102:   ppc::test();",
          "103:   skipdata::test();",
          "104:   sparc::test();",
          "105:   systemz::test();",
          "106:   x86::test();",
          "107:   xcore::test();",
          "110:   KeRestoreFloatingPointState(&float_save);",
          "116:   char buf[10];",
          "117:   bool ok = true;",
          "118:   ok = (ok && cs_snprintf(buf, sizeof(buf), \"%s\", \"\") == 0 && strcmp(buf, \"\") == 0);",
          "119:   ok = (ok && cs_snprintf(buf, sizeof(buf), \"%s\", \"0\") == 1 && strcmp(buf, \"0\") == 0);",
          "120:   ok = (ok && cs_snprintf(buf, sizeof(buf), \"%s\", \"012345678\") == 9 && strcmp(buf, \"012345678\") == 0);",
          "121:   ok = (ok && cs_snprintf(buf, sizeof(buf), \"%s\", \"0123456789\") == 10 && strcmp(buf, \"012345678\") == 0);",
          "122:   ok = (ok && cs_snprintf(buf, sizeof(buf), \"%s\", \"01234567890\") == 11 && strcmp(buf, \"012345678\") == 0);",
          "123:   ok = (ok && cs_snprintf(buf, sizeof(buf), \"%s\", \"0123456789001234567890\") == 22 && strcmp(buf, \"012345678\") == 0);",
          "124:   if (!ok) {",
          "125:     printf(\"ERROR: cs_winkernel_vsnprintf_test() did not produce expected results!\\n\");",
          "126:   }",
          "131:                               PUNICODE_STRING RegistryPath) {",
          "132:   UNREFERENCED_PARAMETER(DriverObject);",
          "133:   UNREFERENCED_PARAMETER(RegistryPath);",
          "134:   cs_winkernel_vsnprintf_test();",
          "135:   test();",
          "136:   return STATUS_CANCELLED;",
          "141: int __cdecl printf(const char * format, ...) {",
          "142:   NTSTATUS status;",
          "143:   va_list args;",
          "145:   va_start(args, format);",
          "146:   status = vDbgPrintEx(DPFLTR_DEFAULT_ID, DPFLTR_ERROR_LEVEL, format, args);",
          "147:   va_end(args);",
          "148:   return NT_SUCCESS(status);",
          "",
          "[Added Lines]",
          "76: static void test()",
          "77: {",
          "78:  KFLOATING_SAVE float_save;",
          "79:  NTSTATUS status;",
          "84:  NT_ASSERT(KeGetCurrentIrql() <= DISPATCH_LEVEL);",
          "91:  status = KeSaveFloatingPointState(&float_save);",
          "92:  if (!NT_SUCCESS(status)) {",
          "93:   printf(\"ERROR: Failed to save floating point state!\\n\");",
          "94:   return;",
          "95:  }",
          "97:  unnamed::test();",
          "98:  arm::test();",
          "99:  arm64::test();",
          "100:  detail::test();",
          "101:  iter::test();",
          "102:  mips::test();",
          "103:  ppc::test();",
          "104:  skipdata::test();",
          "105:  sparc::test();",
          "106:  systemz::test();",
          "107:  x86::test();",
          "108:  xcore::test();",
          "111:  KeRestoreFloatingPointState(&float_save);",
          "117:  char buf[10];",
          "118:  bool ok = true;",
          "119:  ok = (ok && cs_snprintf(buf, sizeof(buf), \"%s\", \"\") == 0 && strcmp(buf, \"\") == 0);",
          "120:  ok = (ok && cs_snprintf(buf, sizeof(buf), \"%s\", \"0\") == 1 && strcmp(buf, \"0\") == 0);",
          "121:  ok = (ok && cs_snprintf(buf, sizeof(buf), \"%s\", \"012345678\") == 9 && strcmp(buf, \"012345678\") == 0);",
          "122:  ok = (ok && cs_snprintf(buf, sizeof(buf), \"%s\", \"0123456789\") == 10 && strcmp(buf, \"012345678\") == 0);",
          "123:  ok = (ok && cs_snprintf(buf, sizeof(buf), \"%s\", \"01234567890\") == 11 && strcmp(buf, \"012345678\") == 0);",
          "124:  ok = (ok && cs_snprintf(buf, sizeof(buf), \"%s\", \"0123456789001234567890\") == 22 && strcmp(buf, \"012345678\") == 0);",
          "125:  if (!ok) {",
          "126:   printf(\"ERROR: cs_winkernel_vsnprintf_test() did not produce expected results!\\n\");",
          "127:  }",
          "132:   PUNICODE_STRING RegistryPath)",
          "133: {",
          "134:  UNREFERENCED_PARAMETER(DriverObject);",
          "135:  UNREFERENCED_PARAMETER(RegistryPath);",
          "136:  cs_winkernel_vsnprintf_test();",
          "137:  test();",
          "138:  return STATUS_CANCELLED;",
          "143: int __cdecl printf(const char * format, ...)",
          "144: {",
          "145:  NTSTATUS status;",
          "146:  va_list args;",
          "148:  va_start(args, format);",
          "149:  status = vDbgPrintEx(DPFLTR_DEFAULT_ID, DPFLTR_ERROR_LEVEL, format, args);",
          "150:  va_end(args);",
          "151:  return NT_SUCCESS(status);",
          "",
          "---------------"
        ],
        "windows/winkernel_mm.c||windows/winkernel_mm.c": [
          "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: } CS_WINKERNEL_MEMBLOCK;",
          "16: C_ASSERT(sizeof(CS_WINKERNEL_MEMBLOCK) == sizeof(void *) * 2);",
          "",
          "[Removed Lines]",
          "11: typedef struct _CS_WINKERNEL_MEMBLOCK",
          "12: {",
          "13:   size_t size;   // A number of bytes allocated",
          "14:   char data[1];  // An address returned to a caller",
          "",
          "[Added Lines]",
          "11: typedef struct _CS_WINKERNEL_MEMBLOCK {",
          "12:  size_t size;   // A number of bytes allocated",
          "13:  char data[1];  // An address returned to a caller",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: void CAPSTONE_API cs_winkernel_free(void *ptr)",
          "21: {",
          "26: }",
          "29: void * CAPSTONE_API cs_winkernel_malloc(size_t size)",
          "30: {",
          "43: }",
          "46: void * CAPSTONE_API cs_winkernel_calloc(size_t n, size_t size)",
          "47: {",
          "57: }",
          "60: void * CAPSTONE_API cs_winkernel_realloc(void *ptr, size_t size)",
          "61: {",
          "82: }",
          "",
          "[Removed Lines]",
          "22:   if (ptr)",
          "23:   {",
          "24:     ExFreePoolWithTag(CONTAINING_RECORD(ptr, CS_WINKERNEL_MEMBLOCK, data), CS_WINKERNEL_POOL_TAG);",
          "25:   }",
          "33:   NT_ASSERT(size);",
          "35:   CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
          "36:     NonPagedPoolNx, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
          "37:   if (!block)",
          "38:   {",
          "39:     return NULL;",
          "40:   }",
          "41:   block->size = size;",
          "42:   return block->data;",
          "48:   size_t total = n * size;",
          "50:   void *new_ptr = cs_winkernel_malloc(total);",
          "51:   if (!new_ptr)",
          "52:   {",
          "53:     return NULL;",
          "54:   }",
          "56:   return RtlFillMemory(new_ptr, total, 0);",
          "62:   void *new_ptr = NULL;",
          "63:   size_t current_size = 0;",
          "64:   size_t smaller_size = 0;",
          "66:   if (!ptr)",
          "67:   {",
          "68:     return cs_winkernel_malloc(size);",
          "69:   }",
          "71:   new_ptr = cs_winkernel_malloc(size);",
          "72:   if (!new_ptr)",
          "73:   {",
          "74:     return NULL;",
          "75:   }",
          "77:   current_size = CONTAINING_RECORD(ptr, CS_WINKERNEL_MEMBLOCK, data)->size;",
          "78:   smaller_size = (current_size < size) ? current_size : size;",
          "79:   RtlCopyMemory(new_ptr, ptr, smaller_size);",
          "80:   cs_winkernel_free(ptr);",
          "81:   return new_ptr;",
          "",
          "[Added Lines]",
          "21:  if (ptr) {",
          "22:   ExFreePoolWithTag(CONTAINING_RECORD(ptr, CS_WINKERNEL_MEMBLOCK, data), CS_WINKERNEL_POOL_TAG);",
          "23:  }",
          "31:  NT_ASSERT(size);",
          "33:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
          "34:    NonPagedPoolNx, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
          "35:  if (!block) {",
          "36:   return NULL;",
          "37:  }",
          "38:  block->size = size;",
          "40:  return block->data;",
          "46:  size_t total = n * size;",
          "48:  void *new_ptr = cs_winkernel_malloc(total);",
          "49:  if (!new_ptr) {",
          "50:   return NULL;",
          "51:  }",
          "53:  return RtlFillMemory(new_ptr, total, 0);",
          "59:  void *new_ptr = NULL;",
          "60:  size_t current_size = 0;",
          "61:  size_t smaller_size = 0;",
          "63:  if (!ptr) {",
          "64:   return cs_winkernel_malloc(size);",
          "65:  }",
          "67:  new_ptr = cs_winkernel_malloc(size);",
          "68:  if (!new_ptr) {",
          "69:   return NULL;",
          "70:  }",
          "72:  current_size = CONTAINING_RECORD(ptr, CS_WINKERNEL_MEMBLOCK, data)->size;",
          "73:  smaller_size = (current_size < size) ? current_size : size;",
          "74:  RtlCopyMemory(new_ptr, ptr, smaller_size);",
          "75:  cs_winkernel_free(ptr);",
          "77:  return new_ptr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "87: #pragma warning(push)",
          "88: #pragma warning(disable : 28719)  // Banned API Usage : _vsnprintf is a Banned",
          "91: int CAPSTONE_API cs_winkernel_vsnprintf(char *buffer, size_t count, const char *format, va_list argptr)",
          "92: {",
          "119: }",
          "120: #pragma warning(pop)",
          "",
          "[Removed Lines]",
          "93:   int result = _vsnprintf(buffer, count, format, argptr);",
          "98:   if (result == -1 || (size_t)result == count)",
          "99:   {",
          "100:     buffer[count - 1] = '\\0';",
          "101:   }",
          "102:   if (result == -1)",
          "103:   {",
          "109:     char* tmp = cs_winkernel_malloc(0x1000);",
          "110:     if (!tmp) {",
          "111:       return result;",
          "112:     }",
          "113:     result = _vsnprintf(tmp, 0x1000, format, argptr);",
          "114:     NT_ASSERT(result != -1);",
          "115:     cs_winkernel_free(tmp);",
          "116:   }",
          "118:   return result;",
          "",
          "[Added Lines]",
          "89:  int result = _vsnprintf(buffer, count, format, argptr);",
          "94:  if (result == -1 || (size_t)result == count) {",
          "95:   buffer[count - 1] = '\\0';",
          "96:  }",
          "98:  if (result == -1) {",
          "104:   char* tmp = cs_winkernel_malloc(0x1000);",
          "105:   if (!tmp) {",
          "106:    return result;",
          "107:   }",
          "109:   result = _vsnprintf(tmp, 0x1000, format, argptr);",
          "110:   NT_ASSERT(result != -1);",
          "111:   cs_winkernel_free(tmp);",
          "112:  }",
          "114:  return result;",
          "",
          "---------------"
        ],
        "windows/winkernel_mm.h||windows/winkernel_mm.h": [
          "File: windows/winkernel_mm.h -> windows/winkernel_mm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #ifdef __cplusplus",
          "7: extern \"C\" {",
          "",
          "[Removed Lines]",
          "3: #ifndef CS_WINDOWS_WINKERNEL_MM_H_",
          "4: #define CS_WINDOWS_WINKERNEL_MM_H_",
          "",
          "[Added Lines]",
          "3: #ifndef CS_WINDOWS_WINKERNEL_MM_H",
          "4: #define CS_WINDOWS_WINKERNEL_MM_H",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: }",
          "20: #endif",
          "",
          "[Removed Lines]",
          "22: #endif  // CS_WINDOWS_WINKERNEL_MM_H_",
          "",
          "[Added Lines]",
          "22: #endif  // CS_WINDOWS_WINKERNEL_MM_H",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3b79ca59bfa99afbb9d12200566301999241efe",
      "candidate_info": {
        "commit_hash": "e3b79ca59bfa99afbb9d12200566301999241efe",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/e3b79ca59bfa99afbb9d12200566301999241efe",
        "files": [
          "windows/winkernel_mm.c"
        ],
        "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
        "before_after_code_files": [
          "windows/winkernel_mm.c||windows/winkernel_mm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ],
          "candidate": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ]
        }
      },
      "candidate_diff": {
        "windows/winkernel_mm.c||windows/winkernel_mm.c": [
          "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include \"winkernel_mm.h\"",
          "5: #include <ntddk.h>",
          "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include <Ntintsafe.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
          "38:  if (!block) {",
          "39:   return NULL;",
          "40:  }",
          "",
          "[Removed Lines]",
          "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
          "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
          "",
          "[Added Lines]",
          "37:  size_t number_of_bytes = 0;",
          "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
          "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
          "43:   return NULL;",
          "44:  }",
          "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
          "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8bcdaf7b0a638dbc44cc19e28277105c806b2d6",
      "candidate_info": {
        "commit_hash": "a8bcdaf7b0a638dbc44cc19e28277105c806b2d6",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/a8bcdaf7b0a638dbc44cc19e28277105c806b2d6",
        "files": [
          "windows/winkernel_mm.c"
        ],
        "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
        "before_after_code_files": [
          "windows/winkernel_mm.c||windows/winkernel_mm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ],
          "candidate": [
            "windows/winkernel_mm.c||windows/winkernel_mm.c"
          ]
        }
      },
      "candidate_diff": {
        "windows/winkernel_mm.c||windows/winkernel_mm.c": [
          "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include \"winkernel_mm.h\"",
          "5: #include <ntddk.h>",
          "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include <Ntintsafe.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
          "38:  if (!block) {",
          "39:   return NULL;",
          "40:  }",
          "",
          "[Removed Lines]",
          "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
          "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
          "",
          "[Added Lines]",
          "37:  size_t number_of_bytes = 0;",
          "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
          "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
          "43:   return NULL;",
          "44:  }",
          "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
          "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
          "",
          "---------------"
        ]
      }
    }
  ]
}