{
  "cve_id": "CVE-2017-6387",
  "cve_desc": "The dex_loadcode function in libr/bin/p/bin_dex.c in radare2 1.2.1 allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted DEX file.",
  "repo": "radare/radare2",
  "patch_hash": "ead645853a63bf83d8386702cad0cf23b31d7eeb",
  "patch_info": {
    "commit_hash": "ead645853a63bf83d8386702cad0cf23b31d7eeb",
    "repo": "radare/radare2",
    "commit_url": "https://github.com/radare/radare2/commit/ead645853a63bf83d8386702cad0cf23b31d7eeb",
    "files": [
      "libr/bin/p/bin_dex.c",
      "sys/asan.sh"
    ],
    "message": "fix #6857",
    "before_after_code_files": [
      "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c",
      "sys/asan.sh||sys/asan.sh"
    ]
  },
  "patch_diff": {
    "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c": [
      "File: libr/bin/p/bin_dex.c -> libr/bin/p/bin_dex.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1496:     continue;",
      "1497:    }",
      "1500:     continue;",
      "1501:    }",
      "",
      "[Removed Lines]",
      "1499:    if (bin->methods[i].class_id > bin->header.types_size - 1) {",
      "",
      "[Added Lines]",
      "1499:    if (bin->methods[i].class_id > bin->header.types_size) {",
      "",
      "---------------"
    ],
    "sys/asan.sh||sys/asan.sh": [
      "File: sys/asan.sh -> sys/asan.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: echo \"=========================================================================\"",
      "23: printf \"\\033[0m\"",
      "24: sleep 1",
      "27: for a in $ASAN ; do",
      "28:  export CFLAGS=\"${CFLAGS} -fsanitize=$a\"",
      "29: done",
      "32: echo 'int main(){return 0;}' > .a.c",
      "33: [ -z \"${CC}\" ] && CC=gcc",
      "",
      "[Removed Lines]",
      "25: export LDFLAGS=\"-lasan\"",
      "30: export CFLAGS=\"${CFLAGS} -lasan\"",
      "",
      "[Added Lines]",
      "25: #export LDFLAGS=\"-lasan\"",
      "30: #export CFLAGS=\"${CFLAGS} -lasan\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c0c0cba3398466661afed716f709f1fc404a752e",
      "candidate_info": {
        "commit_hash": "c0c0cba3398466661afed716f709f1fc404a752e",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/c0c0cba3398466661afed716f709f1fc404a752e",
        "files": [
          "libr/bin/format/dex/dex.h",
          "libr/bin/p/bin_dex.c"
        ],
        "message": "fix #5465, #5745, 'ic' command and some memory leaks (#5764)",
        "before_after_code_files": [
          "libr/bin/format/dex/dex.h||libr/bin/format/dex/dex.h",
          "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
          ],
          "candidate": [
            "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/format/dex/dex.h||libr/bin/format/dex/dex.h": [
          "File: libr/bin/format/dex/dex.h -> libr/bin/format/dex/dex.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  struct dex_class_t *classes;",
          "83:  RList *methods_list;",
          "84:  RList *imports_list;",
          "85:  ut64 code_from;",
          "86:  ut64 code_to;",
          "87:  Sdb *kv;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:  RList *classes_list;",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c": [
          "File: libr/bin/p/bin_dex.c -> libr/bin/p/bin_dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:  ut8 buf[6];",
          "23:  ut64 len;",
          "24:  int uleblen;",
          "26:   return NULL;",
          "27:  }",
          "29:  r_buf_read_at (bin->b, bin->strings[idx], buf, sizeof (buf));",
          "30:  uleblen = r_uleb128 (buf, sizeof (buf), &len) - buf;",
          "33:  char c = 'a';",
          "34:  while (c) {",
          "",
          "[Removed Lines]",
          "25:  if (idx < 0 || idx >= bin->header.strings_size || !bin->strings) {",
          "",
          "[Added Lines]",
          "24:  if (!bin || idx < 0 || idx >= bin->header.strings_size || !bin->strings) {",
          "25:   return NULL;",
          "26:  }",
          "27:  if (bin->strings[idx] >= bin->size) {",
          "33:  if (!uleblen || uleblen >= bin->size) {",
          "34:   return NULL;",
          "35:  }",
          "36:  if (!len || len >= bin->size) {",
          "37:   return NULL;",
          "38:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "182:  }",
          "183:  ut32 proto_id = bin->methods[method_idx].proto_id;",
          "186:   return NULL;",
          "187:  }",
          "188:  ut32 params_off = bin->protos[proto_id].parameters_off;",
          "192:   return NULL;",
          "193:  }",
          "195:  char* return_type = getstr(bin, bin->types[type_id].descriptor_id);",
          "197:  if (params_off == 0) {",
          "198:   return r_str_newf(\"()%s\", return_type);;",
          "199:  }",
          "",
          "[Removed Lines]",
          "185:  if (proto_id < 0 || proto_id >= bin->header.prototypes_size) {",
          "189:  ut32 type_id = bin->protos[bin->methods[method_idx].proto_id].return_type_id;",
          "191:  if (type_id < 0 || proto_id >= bin->header.types_size ) {",
          "",
          "[Added Lines]",
          "192:  if (proto_id >= bin->header.prototypes_size) {",
          "197:  if (params_off  >= bin->size) {",
          "198:   return NULL;",
          "199:  }",
          "201:  ut32 type_id = bin->protos[proto_id].return_type_id;",
          "203:  if (type_id >= bin->header.types_size ) {",
          "209:  if (!return_type) {",
          "210:   return NULL;",
          "211:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "212:  int size = 1; // TODO: NOT_SURE_ABOUT_IT",
          "213:  int pos = 0;",
          "214:  int i;",
          "216:   type_idx = r_read_le16 (bufptr + params_off + 4 + (i*2));",
          "217:   buff = getstr (bin, bin->types[type_idx].descriptor_id);",
          "218:   int buff_len = strlen (buff);",
          "219:   size += buff_len + 1;",
          "220:   signature = realloc (signature, size);",
          "",
          "[Removed Lines]",
          "215:  for (i = 0; i < list_size; i++) {",
          "",
          "[Added Lines]",
          "231:  for (i = 0; i < list_size; i++) {",
          "232:   if (params_off + 4 + (i*2) >= bin->size) {",
          "233:    continue;",
          "234:   }",
          "236:   if (type_idx < 0 || type_idx >= bin->header.types_size) {",
          "237:    continue;",
          "238:   }",
          "240:   if (!buff) {",
          "241:    continue;",
          "242:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "451:  return getstr(bin, tid);",
          "452: }",
          "454: static char *dex_class_name_byid (RBinDexObj *bin, int cid) {",
          "455:  int tid;",
          "456:  if (!bin || !bin->types) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478: #if 0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "462:  tid = bin->types[cid].descriptor_id;",
          "463:  return getstr(bin, tid);",
          "464: }",
          "467: static char *getClassName(const char *name) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "490: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "493:  return getstr(bin, tid);",
          "494: }",
          "496: static char *dex_class_super_name (RBinDexObj *bin, RBinDexClass *c) {",
          "497:  int cid, tid;",
          "498:  if (!bin || !c || !bin->types) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "523: static void __r_bin_class_free(RBinClass *p) {",
          "524:  r_list_free (p->methods);",
          "525:  r_list_free (p->fields);",
          "526:  r_bin_class_free (p);",
          "527: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "506:  return getstr(bin, tid);",
          "507: }",
          "510:  ut64 SF, IF, DM, VM, lastIndex;",
          "511:  ut8 ff[sizeof (DexField)] = {0};",
          "512:  char *class_name, *cln = NULL;",
          "514:  const ut8 *p, *p_end;",
          "515:  DexField field;",
          "517:  if (!c || !c->class_data_offset) {",
          "519:  }",
          "521:  class_name = dex_class_name (bin, c);",
          "522:  class_name = r_str_replace (class_name, \";\", \"\", 0); //TODO: move to func",
          "524:  if (!class_name || !*class_name) {",
          "531:  }",
          "533:  dprintf(\"  Class descriptor  : '%s'\\n\", dex_class_name (bin, c));",
          "",
          "[Removed Lines]",
          "509: static int *parse_class(RBinFile *binfile, RBinDexObj *bin, RBinDexClass *c, RBinClass *cls) {",
          "513:  int total, i, *methods;",
          "518:   return NULL;",
          "525:   return NULL;",
          "526:  }",
          "527:  methods = calloc (sizeof (int), bin->header.method_size);",
          "528:  if (!methods) {",
          "529:   free (class_name);",
          "530:   return false;",
          "",
          "[Added Lines]",
          "542: static void parse_class(RBinFile *binfile, RBinDexObj *bin, RBinDexClass *c, int class_index, int *methods) {",
          "546:  int total, i;",
          "551:   return;",
          "558:   return;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "557:  lastIndex = 0;",
          "558:  for (i = 0; i < SF; i++) {",
          "559:   ut64 fieldIndex, accessFlags;",
          "",
          "[Removed Lines]",
          "554:   dprintf(\"  Static fields     -\\n\");",
          "556:  const ut8 *op = p;",
          "",
          "[Added Lines]",
          "582:  RBinClass *cls = R_NEW0 (RBinClass);",
          "586:  cls->name = class_name;",
          "587:  cls->index = class_index;",
          "588:  cls->addr = c->class_id + bin->header.class_offset;",
          "589:  cls->methods = r_list_new ();",
          "591:  cls->fields = r_list_new ();",
          "594:  r_list_append (bin->classes_list, cls);",
          "596:  dprintf(\"  Static fields     -\\n\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "589:    dprintf(\"    #%d              : (in %s)\\n\", i, class_name);",
          "590:    dprintf(\"      name          : '%s'\\n\", fieldName);",
          "591:    dprintf(\"      type          : '%s'\\n\", type_str);",
          "594:    r_list_append (bin->methods_list, sym);",
          "595:   }",
          "596:   lastIndex = fieldIndex;",
          "597:  }",
          "",
          "[Removed Lines]",
          "592:    dprintf(\"      access        : 0x%04x (%s)\\n\", accessFlags, accessStr);",
          "",
          "[Added Lines]",
          "633:    dprintf(\"      access        : 0x%04x (%s)\\n\", (unsigned int)accessFlags, accessStr);",
          "636:    r_list_append (cls->fields, sym);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "599:  dprintf(\"  Instance fields   -\\n\");",
          "601:  lastIndex = 0;",
          "603:  for (i = 0; i < IF; i++) {",
          "604:   DexField field;",
          "605:   ut64 fieldIndex, accessFlags;",
          "",
          "[Removed Lines]",
          "602:  op = p;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "642:    dprintf(\"    #%d              : (in %s)\\n\", i, class_name);",
          "643:    dprintf(\"      name          : '%s'\\n\", name);",
          "644:    dprintf(\"      type          : '%s'\\n\", type_str);",
          "647:    r_list_append (bin->methods_list, sym);",
          "648:   }",
          "649:   lastIndex = fieldIndex;",
          "650:  }",
          "",
          "[Removed Lines]",
          "645:    dprintf(\"      access        : 0x%04x (%s)\\n\", accessFlags, accessStr);",
          "",
          "[Added Lines]",
          "686:    dprintf(\"      access        : 0x%04x (%s)\\n\", (unsigned int)accessFlags, accessStr);",
          "689:    r_list_append (cls->fields, sym);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "665:   p = r_uleb128 (p, p_end - p, &MA);",
          "666:   p = r_uleb128 (p, p_end - p, &MC);",
          "669:   if (MC > 0 && bin->code_from > MC) {",
          "670:    bin->code_from = MC;",
          "671:   }",
          "",
          "[Removed Lines]",
          "668:   if (MI<bin->header.method_size) methods[MI] = 1;",
          "",
          "[Added Lines]",
          "711:   if (MI<bin->header.method_size) {",
          "712:    if (methods) {",
          "713:     methods[MI] = 1;",
          "714:    }",
          "715:   }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "691:   dprintf(\"    #%d              : (in %s)\\n\", i, class_name);",
          "692:   dprintf(\"      name          : '%s'\\n\", method_name);",
          "693:   dprintf(\"      type          : '%s'\\n\", signature);",
          "697:   if (*flag_name) {",
          "698:    RBinSymbol *sym = R_NEW0 (RBinSymbol);",
          "699:    sym->name = flag_name;",
          "700:    sym->type = r_str_const (\"FUNC\");",
          "701:    sym->paddr = MC + 0x10;",
          "702:    sym->vaddr = MC + 0x10;",
          "",
          "[Removed Lines]",
          "694:   dprintf(\"      access        : 0x%04x (%s)\\n\", MA, accessStr);",
          "",
          "[Added Lines]",
          "741:   dprintf(\"      access        : 0x%04x (%s)\\n\", (unsigned int)MA, accessStr);",
          "748:    sym->bind = r_str_const (\"GLOBAL\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "715:     encoded_catch_handler_list handlers",
          "716: #endif",
          "717:     r_list_append (bin->methods_list, sym);",
          "727:     if (!mdb) {",
          "728:      mdb = sdb_new0 ();",
          "",
          "[Removed Lines]",
          "719:     if (cls) {",
          "720:      if (!cls->methods) {",
          "722:       cls->methods = r_list_new ();",
          "723:      }",
          "724:      r_list_append (cls->methods, sym);",
          "725:     }",
          "",
          "[Added Lines]",
          "766:     r_list_append (cls->methods, sym);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "751:   MI += omi;",
          "752:   omi = MI;",
          "754:   if ((int)MI >= 0 && MI < bin->header.method_size) {",
          "756:   }",
          "757:   if ((int)MC > 0 && bin->code_from > MC) {",
          "758:    bin->code_from = MC;",
          "",
          "[Removed Lines]",
          "755:    methods[MI] = 1;",
          "",
          "[Added Lines]",
          "798:    if (methods) {",
          "799:     methods[MI] = 1;",
          "800:    }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "768:   dprintf(\"    #%d              : (in %s)\\n\", i, class_name);",
          "769:   dprintf(\"      name          : '%s'\\n\", name);",
          "770:   dprintf(\"      type          : '%s'\\n\", signature);",
          "773:   {",
          "774:    RBinSymbol *sym = R_NEW0 (RBinSymbol);",
          "",
          "[Removed Lines]",
          "771:   dprintf(\"      access        : 0x%04x (%s)\\n\", MA, accessStr);",
          "",
          "[Added Lines]",
          "816:   dprintf(\"      access        : 0x%04x (%s)\\n\", (unsigned int)MA, accessStr);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "779:    sym->type = r_str_const (\"METH\");",
          "780:    sym->paddr = sym->vaddr = MC;",
          "781:    r_list_append (bin->methods_list, sym);",
          "782:   }",
          "783:   free (name);",
          "784:   free(signature);",
          "785:  }",
          "788: }",
          "",
          "[Removed Lines]",
          "786:  free (class_name);",
          "787:  return methods;",
          "",
          "[Added Lines]",
          "825:    sym->bind = r_str_const (\"GLOBAL\");",
          "828:    r_list_append (cls->methods, sym);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "803:  bin->methods_list->free = free;",
          "804:  bin->imports_list = r_list_new ();",
          "805:  bin->imports_list->free = free;",
          "807:  if (bin->header.method_size>bin->size) {",
          "808:   bin->header.method_size = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "854:  bin->classes_list = r_list_new ();",
          "855:  bin->classes_list->free = (RListFree)__r_bin_class_free;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "838:  if (bin->classes) {",
          "839:   for (i = 0; i < bin->header.class_size; i++) {",
          "840:    char *super_name, *class_name;",
          "841:    struct dex_class_t *c = &bin->classes[i];",
          "842:    class_name = dex_class_name (bin, c);",
          "843:    super_name = dex_class_super_name (bin, c);",
          "846:    dprintf(\"Class #%d            -\\n\", i); // TODO: rename this to idx",
          "850:    free (class_name);",
          "851:    free (super_name);",
          "852:   }",
          "853:  }",
          "854:  if (methods) {",
          "856:   for (i = 0; i < bin->header.method_size; i++) {",
          "858:    if (methods[i]) {",
          "859:     continue;",
          "860:    }",
          "862:     continue;",
          "863:    }",
          "867:     free (class_name);",
          "868:     continue;",
          "869:    }",
          "870:    char *method_name = dex_method_name (bin, i);",
          "872:    if (method_name && *method_name) {",
          "873:     RBinSymbol *sym = R_NEW0 (RBinSymbol);",
          "876:     sym->type = r_str_const (\"IMPORT\");",
          "879:     RBinImport *imp = R_NEW0 (RBinImport);",
          "889:     imp->type = r_str_const (\"FUNC\");",
          "893:     r_list_append (bin->imports_list, imp);",
          "894:    }",
          "",
          "[Removed Lines]",
          "845:    free (methods);",
          "847:    methods = parse_class (arch, bin, c, NULL);",
          "861:    if (i >= bin->header.class_size) {",
          "864:    struct dex_class_t *c = &bin->classes[i];",
          "865:    char *class_name = dex_class_name (bin, c);",
          "866:    if (class_name) {",
          "871:    eprintf (\"import %d (%s  %s)\\n\", i, class_name, method_name);",
          "874:     sym->name = r_str_newf (\"imp.%s\", method_name);",
          "875:     sym->vaddr = sym->paddr = i; // ordinal",
          "877:     r_list_append (bin->methods_list, sym);",
          "880: #if DEADCODE",
          "881:     if (class_name) {",
          "882:      imp->name = r_str_newf (\"%s.%s\", class_name, method_name);",
          "883:      eprintf (\"ERROR\\n\");",
          "884:     }",
          "885: #endif",
          "886:     imp->name = r_str_newf (\"imp.%s\", method_name);",
          "888:     r_str_replace_char (imp->name, ';', '_');",
          "890:     imp->ordinal = i;",
          "891:     imp->bind = \"NONE\";",
          "",
          "[Added Lines]",
          "889:   methods = calloc (sizeof (int), bin->header.method_size);",
          "897:    parse_class (arch, bin, c, i, methods);",
          "912:    if (bin->methods[i].class_id < 0  || bin->methods[i].class_id > bin->header.types_size) {",
          "916:    char *class_name = getstr(bin, bin->types[bin->methods[i].class_id].descriptor_id);",
          "917:    if (!class_name) {",
          "921:    int len = strlen(class_name);",
          "922:    if (len < 1) {",
          "923:     continue;",
          "924:    }",
          "925:    class_name[len-1] = 0; // remove last char \";\"",
          "928:    char *signature = dex_method_signature(bin, i);",
          "932:     sym->name = r_str_newf (\"imp.%s.method.%s%s\", class_name, method_name, signature);",
          "934:     sym->bind = r_str_const (\"NONE\");",
          "938:     imp->name = r_str_newf (\"imp.%s.method.%s%s\", class_name, method_name, signature);",
          "941:     imp->bind = r_str_const (\"NONE\");",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "968:  return bin->methods_list;",
          "969: }",
          "976: static RList* classes (RBinFile *arch) {",
          "977:  struct r_bin_dex_obj_t *bin;",
          "978:  struct dex_class_t entry;",
          "979:  int i, class_index = 0;",
          "",
          "[Removed Lines]",
          "972: static void __r_bin_class_free(RBinClass *p) {",
          "973:  r_bin_class_free (p);",
          "974: }",
          "",
          "[Added Lines]",
          "1022:  RBinDexObj *bin;",
          "1023:  if (!arch || !arch->o || !arch->o->bin_obj) {",
          "1024:   return NULL;",
          "1025:  }",
          "1026:  bin = (RBinDexObj*) arch->o->bin_obj;",
          "1027:  if (!bin->classes_list) {",
          "1028:   dex_loadcode (arch, bin);",
          "1029:  }",
          "1030:  return bin->classes_list;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1044:    class->name = r_str_replace (cn, \";\", \"\", 0);",
          "1049:    r_list_append (ret, class);",
          "",
          "[Removed Lines]",
          "1047:    free (parse_class (arch, bin, &entry, class));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc01682132b9dabe32ae196388398c276086f6e8",
      "candidate_info": {
        "commit_hash": "cc01682132b9dabe32ae196388398c276086f6e8",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/cc01682132b9dabe32ae196388398c276086f6e8",
        "files": [
          "libr/asm/p/asm_dalvik.c",
          "libr/bin/format/dex/dex.h",
          "libr/bin/p/bin_dex.c"
        ],
        "message": "Some playground with DEX",
        "before_after_code_files": [
          "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c",
          "libr/bin/format/dex/dex.h||libr/bin/format/dex/dex.h",
          "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
          ],
          "candidate": [
            "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/asm/p/asm_dalvik.c||libr/asm/p/asm_dalvik.c": [
          "File: libr/asm/p/asm_dalvik.c -> libr/asm/p/asm_dalvik.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:    vB = (buf[3]<<8) | buf[2];",
          "206:    switch (vA) {",
          "223:    }",
          "224:    strasm = r_str_concat (strasm, str);",
          "225:    sprintf (str, \", [%04x]\", vB);",
          "",
          "[Removed Lines]",
          "207:     case 1:",
          "208:      sprintf (str, \" {v%i}\", buf[4] & 0x0f);",
          "209:      break;",
          "210:     case 2:",
          "211:      sprintf (str, \" {v%i, v%i}\", buf[4]&0x0f, (buf[4]&0xf0)>>4);",
          "212:      break;",
          "213:     case 3:",
          "214:      sprintf (str, \" {v%i, v%i, v%i}\", buf[4]&0x0f,",
          "215:        (buf[4]&0xf0)>>4, buf[5]&0x0f);",
          "216:      break;",
          "217:     case 4:",
          "218:      sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4]&0x0f,",
          "219:        (buf[4]&0xf0)>>4, buf[5]&0x0f, (buf[5]&0xf0)>>4);",
          "220:      break;",
          "221:     default:",
          "222:      sprintf (str, \" {}\");",
          "",
          "[Added Lines]",
          "207:    case 1:",
          "208:     sprintf (str, \" {v%i}\", buf[4] & 0x0f);",
          "209:     break;",
          "210:    case 2:",
          "211:     sprintf (str, \" {v%i, v%i}\", buf[4]&0x0f, (buf[4]&0xf0)>>4);",
          "212:     break;",
          "213:    case 3:",
          "214:     sprintf (str, \" {v%i, v%i, v%i}\", buf[4]&0x0f,",
          "215:       (buf[4]&0xf0)>>4, buf[5]&0x0f);",
          "216:     break;",
          "217:    case 4:",
          "218:     sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4]&0x0f,",
          "219:       (buf[4]&0xf0)>>4, buf[5]&0x0f, (buf[5]&0xf0)>>4);",
          "220:     break;",
          "221:    default:",
          "222:     sprintf (str, \" {}\");",
          "",
          "---------------"
        ],
        "libr/bin/format/dex/dex.h||libr/bin/format/dex/dex.h": [
          "File: libr/bin/format/dex/dex.h -> libr/bin/format/dex/dex.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: typedef struct r_bin_dex_obj_t {",
          "80:  int size;",
          "81:  const char *file;",
          "83:  struct dex_header_t header;",
          "84:  ut32 *strings;",
          "85:  struct dex_class_t *classes;",
          "",
          "[Removed Lines]",
          "82:  struct r_buf_t *b;",
          "",
          "[Added Lines]",
          "82:  RBuffer *b;",
          "",
          "---------------"
        ],
        "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c": [
          "File: libr/bin/p/bin_dex.c -> libr/bin/p/bin_dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "244: static char *get_string (RBinDexObj *bin, int cid, int idx) {",
          "245:  char *c_name, *m_name, *res;",
          "247:   return NULL;",
          "248:  }",
          "250:   return NULL;",
          "251:  }",
          "252:  c_name = getstr (bin, cid);",
          "",
          "[Removed Lines]",
          "246:  if (idx<0 || idx>=bin->header.strings_size) {",
          "249:  if (cid<0 || cid>=bin->header.strings_size) {",
          "",
          "[Added Lines]",
          "246:  if (idx < 0 || idx >= bin->header.strings_size) {",
          "249:  if (cid < 0 || cid >= bin->header.strings_size) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:   if (c_name && m_name) {",
          "258:    res = r_str_newf (\"method.%s\", m_name);",
          "259:   } else {",
          "261:     res = r_str_newf (\"unk.%s\", c_name);",
          "262:    } else {",
          "263:     res = r_str_newf (\"UNKNOWN\");",
          "",
          "[Removed Lines]",
          "260:    if (m_name) {",
          "",
          "[Added Lines]",
          "260:    if (c_name && m_name) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "288: static char *dex_class_name_byid (RBinDexObj *bin, int cid) {",
          "289:  int tid;",
          "291:   return NULL;",
          "294:   return NULL;",
          "295:  tid = bin->types [cid].descriptor_id;",
          "297:  return get_string (bin, cid, tid);",
          "",
          "[Removed Lines]",
          "290:  if (!bin || !bin->types)",
          "293:  if (cid<0 || cid >= bin->header.types_size)",
          "",
          "[Added Lines]",
          "290:  if (!bin || !bin->types) {",
          "292:  }",
          "294:  if (cid < 0 || cid >= bin->header.types_size) {",
          "296:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "300: static char *getClassName(const char *name) {",
          "301:  const char *p;",
          "303:   return NULL;",
          "304:  p = strstr (name, \".L\");",
          "305:  if (p) {",
          "307:   q = strchr (r, ';');",
          "308:   if (q) *q = 0;",
          "309:   return r;",
          "",
          "[Removed Lines]",
          "302:  if (!name)",
          "306:   char *q, *r = strdup (p+2);",
          "",
          "[Added Lines]",
          "304:  if (!name) {",
          "306:  }",
          "309:   char *q, *r = strdup (p + 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "314: static char *dex_class_name (RBinDexObj *bin, RBinDexClass *c) {",
          "315:  int cid, tid;",
          "317:   return NULL;",
          "318:  cid = c->class_id;",
          "321:   return NULL;",
          "322:  tid = bin->types [cid].descriptor_id;",
          "324:  return get_string (bin, cid, tid);",
          "325: }",
          "327: static char *dex_class_super_name (RBinDexObj *bin, RBinDexClass *c) {",
          "328:  int cid, tid;",
          "330:   return NULL;",
          "331:  cid = c->super_class;",
          "333:   return NULL;",
          "334:  tid = bin->types [cid].descriptor_id;",
          "336:  return get_string (bin, cid, tid);",
          "",
          "[Removed Lines]",
          "316:  if (!bin || !c || !bin->types)",
          "320:  if (cid<0 || cid >= bin->header.types_size)",
          "329:  if (!bin || !c || !bin->types)",
          "332:  if (cid<0 || cid >= bin->header.types_size)",
          "",
          "[Added Lines]",
          "319:  if (!bin || !c || !bin->types) {",
          "321:  }",
          "324:  if (cid < 0 || cid >= bin->header.types_size) {",
          "326:  }",
          "332: static char *dex_type_name (RBinDexObj *bin, int id) {",
          "333:  int cid, tid;",
          "334:  if (!bin || !bin->types) {",
          "335:   return NULL;",
          "336:  }",
          "337:  cid = id;",
          "338:  if (cid < 0 || cid >= bin->header.types_size) {",
          "339:   return NULL;",
          "340:  }",
          "341:  tid = bin->types [cid].descriptor_id;",
          "343:  return get_string (bin, cid, tid);// cid, tid);",
          "344: }",
          "348:  if (!bin || !c || !bin->types) {",
          "350:  }",
          "352:  if (cid<0 || cid >= bin->header.types_size) {",
          "354:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "361:  p_end = p + (binfile->buf->length - c->class_data_offset);",
          "370:  dprintf (\"  static fields: %u\\n\", (ut32)SF);",
          "372:  for (i = 0; i < SF; i++) {",
          "376:   dprintf (\"    field_idx: %u\\n\", (ut32)FI);",
          "379:   dprintf (\"    field access_flags: 0x%x\\n\", (ut32)FA);",
          "",
          "[Removed Lines]",
          "364:  p = r_uleb128 (p, p_end-p, &SF);",
          "365:  p = r_uleb128 (p, p_end-p, &IF);",
          "366:  p = r_uleb128 (p, p_end-p, &DM);",
          "367:  p = r_uleb128 (p, p_end-p, &VM);",
          "373:   ut64 FI, FA;",
          "374:   p = r_uleb128 (p, p_end-p, &FI);",
          "375:   p = r_uleb128 (p, p_end-p, &FA);",
          "",
          "[Added Lines]",
          "385:  p = r_uleb128 (p, p_end - p, &SF);",
          "386:  p = r_uleb128 (p, p_end - p, &IF);",
          "387:  p = r_uleb128 (p, p_end - p, &DM);",
          "388:  p = r_uleb128 (p, p_end - p, &VM);",
          "394:   ut64 FI, FA, FN;",
          "395: #if 0",
          "396:   p = r_uleb128 (p, p_end - p, &FI);",
          "397:   p = r_uleb128 (p, p_end - p, &FA);",
          "399:   char *field_name = get_string (bin, c, (ut32)FA); //bin->methods[i].class_id);",
          "400: #endif",
          "402:   p = r_uleb128 (p, p_end - p, &FI); // name",
          "403:   p = r_uleb128 (p, p_end - p, &FA); // access",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "382:  dprintf (\"  instance fields: %u\\n\", (ut32)IF);",
          "383:  for (i = 0; i < IF; i++) {",
          "387:   dprintf (\"    field_idx: %u,\\n\", (ut32)FI);",
          "388:   dprintf (\"    field access_flags: %u,\\n\", (ut32)FA);",
          "389:  }",
          "391:  dprintf (\"  direct methods: %u\\n\", (ut32)DM);",
          "398:  ut64 omi = 0;",
          "399:  for (i = 0; i < DM; i++) {",
          "400:   char *method_name, *flag_name;",
          "",
          "[Removed Lines]",
          "384:   ut64 FI, FA;",
          "385:   p = r_uleb128 (p, p_end-p, &FI);",
          "386:   p = r_uleb128 (p, p_end-p, &FA);",
          "392: #if 0",
          "394:  if (DM>=0xffff) {",
          "395:   DM = 0xFFFF;",
          "396:  }",
          "397: #endif",
          "",
          "[Added Lines]",
          "417:   ut64 FI, FA, FN;",
          "419:   p = r_uleb128 (p, p_end - p, &FI); // type",
          "420:   p = r_uleb128 (p, p_end - p, &FA); // access",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "406: #if 0",
          "407:   index into the method_ids list for the identity of this method (includes the name and descriptor), represented as a difference from the index of previous element in the list. The index of the first element in a list is represented directly.",
          "408: #endif",
          "412:   if (MI<bin->header.method_size) methods[MI] = 1;",
          "416:   method_name = dex_method_name (bin, MI);",
          "417:   dprintf (\"METHOD NAME %u\\n\", (ut32)MI);",
          "",
          "[Removed Lines]",
          "409:   p = r_uleb128 (p, p_end-p, &MA);",
          "410:   p = r_uleb128 (p, p_end-p, &MC);",
          "413:   if (MC > 0 && bin->code_from > MC) bin->code_from = MC;",
          "414:   if (MC > 0 && bin->code_to < MC) bin->code_to = MC;",
          "",
          "[Added Lines]",
          "440:   p = r_uleb128 (p, p_end - p, &MA);",
          "441:   p = r_uleb128 (p, p_end - p, &MC);",
          "444:   if (MC > 0 && bin->code_from > MC) {",
          "445:    bin->code_from = MC;",
          "446:   }",
          "447:   if (MC > 0 && bin->code_to < MC) {",
          "448:    bin->code_to = MC;",
          "449:   }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "508:  int *methods = NULL;",
          "512:   return false;",
          "513:  bin->code_from = UT64_MAX;",
          "514:  bin->code_to = 0;",
          "515:  bin->methods_list = r_list_new ();",
          "",
          "[Removed Lines]",
          "511:  if (!bin || bin->methods_list)",
          "",
          "[Added Lines]",
          "546:  if (!bin || bin->methods_list) {",
          "548:  }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "566:   dprintf (\"imports: \\n\");",
          "567:   for (i = 0; i < bin->header.method_size; i++) {",
          "573:     struct dex_class_t *c = &bin->classes[i];",
          "574:     char *class_name = dex_class_name (bin, c);",
          "579:     char *method_name = dex_method_name (bin, i);",
          "604:     free (method_name);",
          "605:     free (class_name);",
          "606:    }",
          "607:   }",
          "608:   free (methods);",
          "609:  }",
          "",
          "[Removed Lines]",
          "569:    if (!methods[i]) {",
          "570:     if (i >= bin->header.class_size) {",
          "571:      continue;",
          "572:     }",
          "575:     if (class_name) {",
          "576:      free (class_name);",
          "577:      continue;",
          "578:     }",
          "580:     dprintf (\"import %d (%s  %s)\\n\", i, class_name, method_name);",
          "581:     if (method_name && *method_name) {",
          "582:      RBinSymbol *sym = R_NEW0 (RBinSymbol);",
          "583:      sym->name = r_str_newf (\"imp.%s\", method_name);",
          "584:      sym->vaddr = sym->paddr = i; // ordinal",
          "585:      sym->type = r_str_const (\"IMPORT\");",
          "586:      r_list_append (bin->methods_list, sym);",
          "588:      RBinImport *imp = R_NEW0 (RBinImport);",
          "589: #if DEADCODE",
          "590:      if (class_name) {",
          "591:       imp->name = r_str_newf (\"%s.%s\", class_name, method_name);",
          "592:       eprintf (\"ERROR\\n\");",
          "593:      }",
          "594: #endif",
          "595:      imp->name = r_str_newf (\"imp.%s\", method_name);",
          "597:      r_str_replace_char (imp->name, ';', '_');",
          "598:      imp->type = r_str_const (\"FUNC\");",
          "599:      imp->ordinal = i;",
          "600:      imp->bind = \"NONE\";",
          "602:      r_list_append (bin->imports_list, imp);",
          "603:     }",
          "",
          "[Added Lines]",
          "605:    if (methods[i]) {",
          "607: #if 0",
          "611:     free (class_name);",
          "613: #endif",
          "614:     continue;",
          "615:    }",
          "616:    if (i >= bin->header.class_size) {",
          "617:     continue;",
          "618:    }",
          "619:    struct dex_class_t *c = &bin->classes[i];",
          "620:    char *class_name = dex_class_name (bin, c);",
          "621:    if (class_name) {",
          "623:     continue;",
          "625:    char *method_name = dex_method_name (bin, i);",
          "626:    eprintf (\"import %d (%s  %s)\\n\", i, class_name, method_name);",
          "627:    if (method_name && *method_name) {",
          "628:     RBinSymbol *sym = R_NEW0 (RBinSymbol);",
          "629:     sym->name = r_str_newf (\"imp.%s\", method_name);",
          "630:     sym->vaddr = sym->paddr = i; // ordinal",
          "631:     sym->type = r_str_const (\"IMPORT\");",
          "632:     r_list_append (bin->methods_list, sym);",
          "634:     RBinImport *imp = R_NEW0 (RBinImport);",
          "635: #if DEADCODE",
          "636:     if (class_name) {",
          "637:      imp->name = r_str_newf (\"%s.%s\", class_name, method_name);",
          "638:      eprintf (\"ERROR\\n\");",
          "639:     }",
          "640: #endif",
          "641:     imp->name = r_str_newf (\"imp.%s\", method_name);",
          "643:     r_str_replace_char (imp->name, ';', '_');",
          "644:     imp->type = r_str_const (\"FUNC\");",
          "645:     imp->ordinal = i;",
          "646:     imp->bind = \"NONE\";",
          "648:     r_list_append (bin->imports_list, imp);",
          "649:    }",
          "650:    free (method_name);",
          "651:    free (class_name);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "841:   }",
          "842:   break;",
          "843:  case 'f': // fields",
          "845:    return dex->header.fields_offset +",
          "846:     (sizeof (struct dex_field_t)*idx);",
          "847:   break;",
          "848:  case 'o': // objects",
          "849:   break;",
          "",
          "[Removed Lines]",
          "844:   if (dex->header.fields_size > idx)",
          "",
          "[Added Lines]",
          "889:   if (dex->header.fields_size > idx) {",
          "892:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "160ea9266e9f1474736aa449aa04b64716e7a602",
      "candidate_info": {
        "commit_hash": "160ea9266e9f1474736aa449aa04b64716e7a602",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/160ea9266e9f1474736aa449aa04b64716e7a602",
        "files": [
          "sys/asan.sh"
        ],
        "message": "Fix ASAN build for High Sierra",
        "before_after_code_files": [
          "sys/asan.sh||sys/asan.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sys/asan.sh||sys/asan.sh"
          ],
          "candidate": [
            "sys/asan.sh||sys/asan.sh"
          ]
        }
      },
      "candidate_diff": {
        "sys/asan.sh||sys/asan.sh": [
          "File: sys/asan.sh -> sys/asan.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: echo \"=========================================================================\"",
          "23: printf \"\\033[0m\"",
          "24: sleep 1",
          "27: for a in $ASAN ; do",
          "28:  export CFLAGS=\"${CFLAGS} -fsanitize=$a\"",
          "29: done",
          "32: echo 'int main(){return 0;}' > .a.c",
          "33: [ -z \"${CC}\" ] && CC=gcc",
          "",
          "[Removed Lines]",
          "25: export LDFLAGS=\"-lasan\"",
          "30: export CFLAGS=\"${CFLAGS} -lasan\"",
          "",
          "[Added Lines]",
          "29: if [ \"`uname`\" != Darwin ]; then",
          "30:  export CFLAGS=\"${CFLAGS} -lasan\"",
          "31:  export LDFLAGS=\"-lasan\"",
          "32: fi",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c57f2eb4100cb9e8b34f86fb544914dd1bba0f3e",
      "candidate_info": {
        "commit_hash": "c57f2eb4100cb9e8b34f86fb544914dd1bba0f3e",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/c57f2eb4100cb9e8b34f86fb544914dd1bba0f3e",
        "files": [
          "libr/bin/p/bin_dex.c"
        ],
        "message": "fix crash in dex loader",
        "before_after_code_files": [
          "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
          ],
          "candidate": [
            "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c": [
          "File: libr/bin/p/bin_dex.c -> libr/bin/p/bin_dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:  count = countOnes(flags);",
          "165:  cp = str = (char*) malloc(count * (kLongest+1) +1);",
          "167:  for (i = 0; i < NUM_FLAGS; i++) {",
          "168:   if (flags & 0x01) {",
          "169:    const char* accessStr = kAccessStrings[forWhat][i];",
          "170:    int len = strlen(accessStr);",
          "174:    memcpy(cp, accessStr, len);",
          "175:    cp += len;",
          "176:   }",
          "177:   flags >>= 1;",
          "178:  }",
          "181:  return str;",
          "182: }",
          "185: static char* dex_method_signature(RBinDexObj *bin, int method_idx) {",
          "187:  if (method_idx < 0 || method_idx >= bin->header.method_size) {",
          "188:   return NULL;",
          "189:  }",
          "192:  if (proto_id >= bin->header.prototypes_size) {",
          "193:   return NULL;",
          "194:  }",
          "197:  if (params_off  >= bin->size) {",
          "198:   return NULL;",
          "199:  }",
          "203:  if (type_id >= bin->header.types_size ) {",
          "204:   return NULL;",
          "205:  }",
          "209:  if (!return_type) {",
          "210:   return NULL;",
          "211:  }",
          "215:  }",
          "218:  bufptr = bin->b->buf;",
          "231:  for (i = 0; i < list_size; i++) {",
          "232:   if (params_off + 4 + (i*2) >= bin->size) {",
          "233:    continue;",
          "234:   }",
          "",
          "[Removed Lines]",
          "171:    if (cp != str)",
          "190:  ut32 proto_id = bin->methods[method_idx].proto_id;",
          "195:  ut32 params_off = bin->protos[proto_id].parameters_off;",
          "201:  ut32 type_id = bin->protos[proto_id].return_type_id;",
          "207:  char* return_type = getstr(bin, bin->types[type_id].descriptor_id);",
          "213:  if (params_off == 0) {",
          "214:   return r_str_newf(\"()%s\", return_type);;",
          "217:  ut8 *bufptr;",
          "219:  ut32 list_size = r_read_le32 (bufptr + params_off); // size of the list, in entries",
          "221:  char *signature = calloc(0, sizeof(char));",
          "226:  ut16 type_idx;",
          "227:  char *buff = NULL;",
          "228:  int size = 1; // TODO: NOT_SURE_ABOUT_IT",
          "229:  int pos = 0;",
          "230:  int i;",
          "",
          "[Added Lines]",
          "170:    if (cp != str) {",
          "172:    }",
          "184:  ut32 proto_id, params_off, type_id, list_size;",
          "185:  char *r, *return_type = NULL, *signature = NULL, *buff = NULL;",
          "186:  ut8 *bufptr;",
          "187:  ut16 type_idx;",
          "188:  int pos = 0, i, size = 1;",
          "193:  proto_id = bin->methods[method_idx].proto_id;",
          "197:  params_off = bin->protos[proto_id].parameters_off;",
          "201:  type_id = bin->protos[proto_id].return_type_id;",
          "205:  return_type = getstr (bin, bin->types[type_id].descriptor_id);",
          "209:  if (!params_off) {",
          "210:   return r_str_newf (\"()%s\", return_type);;",
          "213:  list_size = r_read_le32 (bufptr + params_off); // size of the list, in entries",
          "214:  signature = calloc (0, sizeof(char));",
          "215:  if (!signature) {",
          "216:   return NULL;",
          "217:  }",
          "222:   int buff_len = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:   if (!buff) {",
          "241:    continue;",
          "242:   }",
          "244:   size += buff_len + 1;",
          "245:   signature = realloc (signature, size);",
          "246:   strcpy (signature + pos, buff);",
          "247:   pos += buff_len;",
          "248:  }",
          "252:  free (buff);",
          "254:  free (signature);",
          "255:  return r;",
          "",
          "[Removed Lines]",
          "243:   int buff_len = strlen (buff);",
          "253:  char* r = r_str_newf (\"(%s)%s\", signature, return_type);",
          "",
          "[Added Lines]",
          "234:   buff_len = strlen (buff);",
          "243:  r = r_str_newf (\"(%s)%s\", signature, return_type);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262: static Sdb* get_sdb (RBinObject *o) {",
          "263:  if (!o || !o->bin_obj) return NULL;",
          "264:  struct r_bin_dex_obj_t *bin = (struct r_bin_dex_obj_t *) o->bin_obj;",
          "266:  return NULL;",
          "267: }",
          "269: static void * load_bytes(RBinFile *arch, const ut8 *buf, ut64 sz, ut64 loadaddr, Sdb *sdb){",
          "270:  void *res = NULL;",
          "271:  RBuffer *tbuf = NULL;",
          "273:  tbuf = r_buf_new ();",
          "274:  r_buf_set_bytes (tbuf, buf, sz);",
          "275:  res = r_bin_dex_new_buf (tbuf);",
          "",
          "[Removed Lines]",
          "265:  if (bin->kv) return bin->kv;",
          "272:  if (!buf || sz == 0 || sz == UT64_MAX) return NULL;",
          "",
          "[Added Lines]",
          "255:  if (bin->kv) {",
          "256:   return bin->kv;",
          "257:  }",
          "264:  if (!buf || !sz || sz == UT64_MAX) {",
          "265:   return NULL;",
          "266:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "281:  const ut8 *bytes = arch ? r_buf_buffer (arch->buf) : NULL;",
          "282:  ut64 sz = arch ? r_buf_size (arch->buf): 0;",
          "285:  arch->o->bin_obj = load_bytes (arch, bytes, sz, arch->o->loadaddr, arch->sdb);",
          "286:  return arch->o->bin_obj ? true: false;",
          "287: }",
          "",
          "[Removed Lines]",
          "284:  if (!arch || !arch->o) return false;",
          "",
          "[Added Lines]",
          "278:  if (!arch || !arch->o) {",
          "279:   return false;",
          "280:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "297: }",
          "299: static int check_bytes(const ut8 *buf, ut64 length) {",
          "301:   return false;",
          "303:  if (!memcmp (buf, \"dex\\n035\\0\", 8)) {",
          "304:   return true;",
          "",
          "[Removed Lines]",
          "300:  if (!buf || length < 8)",
          "",
          "[Added Lines]",
          "296:  if (!buf || length < 8) {",
          "298:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "325: static RBinInfo *info(RBinFile *arch) {",
          "326:  RBinHash *h;",
          "327:  RBinInfo *ret = R_NEW0 (RBinInfo);",
          "329:  ret->file = arch->file? strdup (arch->file): NULL;",
          "330:  ret->type = strdup (\"DEX CLASS\");",
          "331:  ret->has_va = false;",
          "",
          "[Removed Lines]",
          "328:  if (!ret) return NULL;",
          "",
          "[Added Lines]",
          "325:  if (!ret) {",
          "326:   return NULL;",
          "327:  }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "379:  int i, len;",
          "380:  ut8 buf[6];",
          "381:  ut64 off;",
          "384:   return NULL;",
          "385:  bin = (struct r_bin_dex_obj_t *) arch->o->bin_obj;",
          "387:   return NULL;",
          "388:  if (bin->header.strings_size > bin->size) {",
          "389:   bin->strings = NULL;",
          "390:   return NULL;",
          "391:  }",
          "393:   return NULL;",
          "395:  for (i = 0; i < bin->header.strings_size; i++) {",
          "396:   if (!(ptr = R_NEW0 (RBinString))) {",
          "397:    break;",
          "",
          "[Removed Lines]",
          "383:  if (!arch || !arch->o)",
          "386:  if (!bin || !bin->strings)",
          "392:  if (!(ret = r_list_new ()))",
          "394:  ret->free = free;",
          "",
          "[Added Lines]",
          "375:  if (!arch || !arch->o) {",
          "377:  }",
          "379:  if (!bin || !bin->strings) {",
          "381:  }",
          "386:  if (!(ret = r_list_newf (free))) {",
          "388:  }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "405:   if (len > 1 && len < R_BIN_SIZEOF_STRINGS) {",
          "406:    ptr->string = malloc (len + 1);",
          "408:     goto out_error;",
          "409:    off = bin->strings[i] + dex_uleb128_len (buf);",
          "410:    if (off > bin->size || off + len > bin->size) {",
          "411:     free (ptr->string);",
          "",
          "[Removed Lines]",
          "407:    if (!ptr->string)",
          "",
          "[Added Lines]",
          "401:    if (!ptr->string) {",
          "403:    }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "903:  if (methods) {",
          "905:   for (i = 0; i < bin->header.method_size; i++) {",
          "907:    if (methods[i]) {",
          "908:     continue;",
          "909:    }",
          "913:     continue;",
          "914:    }",
          "917:    if (!class_name) {",
          "918:     free (class_name);",
          "919:     continue;",
          "920:    }",
          "922:    if (len < 1) {",
          "923:     continue;",
          "924:    }",
          "925:    class_name[len-1] = 0; // remove last char \";\"",
          "927:    char *method_name = dex_method_name (bin, i);",
          "928:    char *signature = dex_method_signature(bin, i);",
          "929:    if (method_name && *method_name) {",
          "",
          "[Removed Lines]",
          "912:    if (bin->methods[i].class_id > bin->header.types_size) {",
          "916:    char *class_name = getstr(bin, bin->types[bin->methods[i].class_id].descriptor_id);",
          "921:    int len = strlen(class_name);",
          "",
          "[Added Lines]",
          "900:    int len = 0;",
          "905:    if (bin->methods[i].class_id > bin->header.types_size - 1) {",
          "908:    char *class_name = getstr (bin, bin->types[bin->methods[i].class_id].descriptor_id);",
          "913:    len = strlen(class_name);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1223:  int fsym = 0;",
          "1225:  r_list_foreach (ml, iter, m) {",
          "1227:    fsym = m->paddr;",
          "1228:   }",
          "1229:   ns = m->paddr + m->size;",
          "",
          "[Removed Lines]",
          "1226:   if (fsym == 0 || m->paddr<fsym) {",
          "",
          "[Added Lines]",
          "1217:   if (!fsym || m->paddr < fsym) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1234:    fsymsz = ns;",
          "1235:   }",
          "1236:  }",
          "1238:   return NULL;",
          "1239:  }",
          "1240:  if (!(ret = r_list_new ())) {",
          "",
          "[Removed Lines]",
          "1237:  if (fsym == 0) {",
          "",
          "[Added Lines]",
          "1228:  if (!fsym) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1293:  ut8 u32s[sizeof (ut32)] = {0};",
          "1295:  ret = r_buf_read_at (arch->buf, 108, u32s, 4);",
          "1297:   return 0;",
          "1298:  off = r_read_le32 (u32s);",
          "1300:  ret = r_buf_read_at (arch->buf, 104, u32s, 4);",
          "1302:   return 0;",
          "1303:  len = r_read_le32 (u32s);",
          "1304:  return off + len;",
          "1305: }",
          "",
          "[Removed Lines]",
          "1296:  if (ret != 4)",
          "1301:  if (ret != 4)",
          "",
          "[Added Lines]",
          "1287:  if (ret != 4) {",
          "1289:  }",
          "1292:  if (ret != 4) {",
          "1294:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cb8dcf905de47bc8c4534ac45692be1dce300c0",
      "candidate_info": {
        "commit_hash": "1cb8dcf905de47bc8c4534ac45692be1dce300c0",
        "repo": "radare/radare2",
        "commit_url": "https://github.com/radare/radare2/commit/1cb8dcf905de47bc8c4534ac45692be1dce300c0",
        "files": [
          "libr/bin/p/bin_dex.c",
          "libr/core/cbin.c",
          "sys/asan.sh"
        ],
        "message": "Fix cbin iHH (#6859)",
        "before_after_code_files": [
          "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c",
          "libr/core/cbin.c||libr/core/cbin.c",
          "sys/asan.sh||sys/asan.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c",
            "sys/asan.sh||sys/asan.sh"
          ],
          "candidate": [
            "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c",
            "sys/asan.sh||sys/asan.sh"
          ]
        }
      },
      "candidate_diff": {
        "libr/bin/p/bin_dex.c||libr/bin/p/bin_dex.c": [
          "File: libr/bin/p/bin_dex.c -> libr/bin/p/bin_dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1496:     continue;",
          "1497:    }",
          "1500:     continue;",
          "1501:    }",
          "",
          "[Removed Lines]",
          "1499:    if (bin->methods[i].class_id > bin->header.types_size) {",
          "",
          "[Added Lines]",
          "1499:    if (bin->methods[i].class_id >= bin->header.types_size) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1582:  return bin->classes_list;",
          "1583: }",
          "1586:  RBinAddr *e;",
          "1587:  RListIter *iter;",
          "1588:  r_list_foreach (entries, iter, e) {",
          "1589:   if (e->vaddr == vaddr) {",
          "1591:   }",
          "1592:  }",
          "1594: }",
          "1596: static RList *entries(RBinFile *arch) {",
          "",
          "[Removed Lines]",
          "1585: static bool already_entry(RList *entries, ut64 vaddr) {",
          "1590:    return true;",
          "1593:  return false;",
          "",
          "[Added Lines]",
          "1585: static int already_entry(RList *entries, ut64 vaddr) {",
          "1590:    return 1;",
          "1593:  return 0;",
          "",
          "---------------"
        ],
        "libr/core/cbin.c||libr/core/cbin.c": [
          "File: libr/core/cbin.c -> libr/core/cbin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2722:  if ((action & R_CORE_BIN_ACC_MEM)) ret &= bin_mem (core, mode);",
          "2723:  if ((action & R_CORE_BIN_ACC_VERSIONINFO)) ret &= bin_versioninfo (core, mode);",
          "2724:  if ((action & R_CORE_BIN_ACC_SIGNATURE)) ret &= bin_signature (core, mode);",
          "2735:    if ((action & R_CORE_BIN_ACC_HEADER) || action & R_CORE_BIN_ACC_FIELDS) {",
          "2737:    }",
          "2738:   }",
          "2739:  }",
          "",
          "[Removed Lines]",
          "2726:  if (IS_MODE_SIMPLE (mode)) {",
          "2727:   if ((action & R_CORE_BIN_ACC_HEADER) || action & R_CORE_BIN_ACC_FIELDS) {",
          "2729:    ret &= bin_fields (core, 0, va);",
          "2730:   }",
          "2731:  } else {",
          "2732:   if (IS_MODE_NORMAL(mode)) {",
          "2733:    ret &= bin_header (core, mode);",
          "2734:   } else {",
          "2736:     ret &= bin_fields (core, mode, va);",
          "",
          "[Added Lines]",
          "2725:  if ((action & R_CORE_BIN_ACC_FIELDS)) {",
          "2726:   if (IS_MODE_SIMPLE (mode)) {",
          "2729:     ret &= bin_fields (core, 0, va);",
          "2730:    }",
          "2731:   } else {",
          "2732:    if (IS_MODE_NORMAL(mode)) {",
          "2733:     ret &= bin_header (core, mode);",
          "2734:    } else {",
          "2735:     if ((action & R_CORE_BIN_ACC_HEADER) || action & R_CORE_BIN_ACC_FIELDS) {",
          "2736:      ret &= bin_fields (core, mode, va);",
          "2737:     }",
          "",
          "---------------"
        ],
        "sys/asan.sh||sys/asan.sh": [
          "File: sys/asan.sh -> sys/asan.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: echo \"=========================================================================\"",
          "23: printf \"\\033[0m\"",
          "24: sleep 1",
          "27: for a in $ASAN ; do",
          "28:  export CFLAGS=\"${CFLAGS} -fsanitize=$a\"",
          "29: done",
          "32: echo 'int main(){return 0;}' > .a.c",
          "33: [ -z \"${CC}\" ] && CC=gcc",
          "",
          "[Removed Lines]",
          "25: #export LDFLAGS=\"-lasan\"",
          "30: #export CFLAGS=\"${CFLAGS} -lasan\"",
          "",
          "[Added Lines]",
          "25: export LDFLAGS=\"-lasan\"",
          "30: export CFLAGS=\"${CFLAGS} -lasan\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}