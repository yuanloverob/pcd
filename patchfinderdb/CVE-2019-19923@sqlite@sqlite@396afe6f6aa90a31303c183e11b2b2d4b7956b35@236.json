{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a7be6f355c3e474b7da48ea5a7e7fcff6d6bed47",
      "candidate_info": {
        "commit_hash": "a7be6f355c3e474b7da48ea5a7e7fcff6d6bed47",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a7be6f355c3e474b7da48ea5a7e7fcff6d6bed47",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/rowid.test"
        ],
        "message": "Fix VDBE opcodes OP_SeekLT and OP_SeekLE so that they work on intkey tables with non-numeric text values.\n\nFossilOrigin-Name: 658b84d7f4a0886591c5aab30ed9e31c4a0f56db303eb863f24833ca37085d14",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/rowid.test||test/rowid.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ad8fc5d8b440c49df95328df0408be699dde5a1dbd195b3f1f32e5f765578032",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4013:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4014:       if( (pIn3->flags & MEM_Real)==0 ){",
          "",
          "[Removed Lines]",
          "4017:         VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4018:         break;",
          "4019:       }",
          "",
          "[Added Lines]",
          "4015:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "4016:           VdbeBranchTaken(1,2); goto jump_to_p2;",
          "4017:           break;",
          "4018:         }else{",
          "4019:           sqlite3BtreeLast(pC->uc.pCursor, &res);",
          "4020:           goto seek_not_found;",
          "4021:         }",
          "4022:       }else",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4040:         assert( (OP_SeekLT & 0x0001)==(OP_SeekGE & 0x0001) );",
          "4041:         if( (oc & 0x0001)==(OP_SeekLT & 0x0001) ) oc++;",
          "4042:       }",
          "4044:     rc = sqlite3BtreeMovetoUnpacked(pC->uc.pCursor, 0, (u64)iKey, 0, &res);",
          "4046:     if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4043:     }",
          "",
          "[Added Lines]",
          "4046:     }",
          "",
          "---------------"
        ],
        "test/rowid.test||test/rowid.test": [
          "File: test/rowid.test -> test/rowid.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "659:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc'}",
          "660: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "662: # Test the automatic generation of rowids when the table already contains",
          "663: # a rowid with the maximum value.",
          "664: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662: do_test rowid-11.asc.1 {",
          "663:   execsql {SELECT rowid, a FROM t5 WHERE rowid>'abc' ORDER BY 1 ASC}",
          "664: } {}",
          "665: do_test rowid-11.asc.2 {",
          "666:   execsql {SELECT rowid, a FROM t5 WHERE rowid>='abc' ORDER BY 1 ASC}",
          "667: } {}",
          "668: do_test rowid-11.asc.3 {",
          "669:   execsql {SELECT rowid, a FROM t5 WHERE rowid<'abc' ORDER BY 1 ASC}",
          "670: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "671: do_test rowid-11.asc.4 {",
          "672:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc' ORDER BY 1 ASC}",
          "673: } {1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8}",
          "675: do_test rowid-11.desc.1 {",
          "676:   execsql {SELECT rowid, a FROM t5 WHERE rowid>'abc' ORDER BY 1 DESC}",
          "677: } {}",
          "678: do_test rowid-11.desc.2 {",
          "679:   execsql {SELECT rowid, a FROM t5 WHERE rowid>='abc' ORDER BY 1 DESC}",
          "680: } {}",
          "681: do_test rowid-11.desc.3 {",
          "682:   execsql {SELECT rowid, a FROM t5 WHERE rowid<'abc' ORDER BY 1 DESC}",
          "683: } {8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1}",
          "684: do_test rowid-11.desc.4 {",
          "685:   execsql {SELECT rowid, a FROM t5 WHERE rowid<='abc' ORDER BY 1 DESC}",
          "686: } {8 8 7 7 6 6 5 5 4 4 3 3 2 2 1 1}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "719:   SELECT last_insert_rowid();",
          "720: } {1234 5 2234 | 2234 4990756 3234 | 3234 10458756 4234 | 4234}",
          "722: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "748: #-------------------------------------------------------------------------",
          "749: do_execsql_test rowid-14.0 {",
          "750:   CREATE TABLE t14(x INTEGER PRIMARY KEY);",
          "751:   INSERT INTO t14(x) VALUES (100);",
          "752: }",
          "753: do_execsql_test rowid-14.1 {",
          "754:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid ASC;",
          "755: } {100}",
          "756: do_execsql_test rowid-14.2 {",
          "757:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "758: } {100}",
          "760: do_execsql_test rowid-14.3 {",
          "761:   DELETE FROM t14;",
          "762:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid ASC;",
          "763: } {}",
          "764: do_execsql_test rowid-14.4 {",
          "765:   SELECT * FROM t14 WHERE x < 'a' ORDER BY rowid DESC;",
          "766: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b182588c8e0cdbafc5987df0a919d29021d1ba58",
      "candidate_info": {
        "commit_hash": "b182588c8e0cdbafc5987df0a919d29021d1ba58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b182588c8e0cdbafc5987df0a919d29021d1ba58",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Have \".recover\" handle \"\\r\" and \"\\n\" in the same way as \".dump\".\n\nFossilOrigin-Name: f95f0f02ab6c6cf45f25b613c7ab57f68249689d0a9eddf4c9518ddf0edad365",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8dcc1d89d955bf58c80a8c30a37960f0cf95719953951a92626cc332cc75ec60",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3934: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3950: static void shellEscapeCrnl(",
          "3951:   sqlite3_context *context,",
          "3952:   int argc,",
          "3953:   sqlite3_value **argv",
          "3954: ){",
          "3955:   const char *zText = (const char*)sqlite3_value_text(argv[0]);",
          "3956:   if( zText[0]=='\\'' ){",
          "3957:     int nText = sqlite3_value_bytes(argv[0]);",
          "3958:     int i;",
          "3959:     char zBuf1[20];",
          "3960:     char zBuf2[20];",
          "3961:     const char *zNL = 0;",
          "3962:     const char *zCR = 0;",
          "3963:     int nCR = 0;",
          "3964:     int nNL = 0;",
          "3966:     for(i=0; zText[i]; i++){",
          "3967:       if( zNL==0 && zText[i]=='\\n' ){",
          "3968:         zNL = unused_string(zText, \"\\\\n\", \"\\\\012\", zBuf1);",
          "3969:         nNL = (int)strlen(zNL);",
          "3970:       }",
          "3971:       if( zCR==0 && zText[i]=='\\r' ){",
          "3972:         zCR = unused_string(zText, \"\\\\r\", \"\\\\015\", zBuf2);",
          "3973:         nCR = (int)strlen(zCR);",
          "3974:       }",
          "3975:     }",
          "3977:     if( zNL || zCR ){",
          "3978:       int iOut = 0;",
          "3979:       i64 nMax = (nNL > nCR) ? nNL : nCR;",
          "3980:       i64 nAlloc = nMax * nText + (nMax+12)*2;",
          "3981:       char *zOut = (char*)sqlite3_malloc64(nAlloc);",
          "3982:       if( zOut==0 ){",
          "3983:         sqlite3_result_error_nomem(context);",
          "3984:         return;",
          "3985:       }",
          "3987:       if( zNL && zCR ){",
          "3988:         memcpy(&zOut[iOut], \"replace(replace(\", 16);",
          "3989:         iOut += 16;",
          "3990:       }else{",
          "3991:         memcpy(&zOut[iOut], \"replace(\", 8);",
          "3992:         iOut += 8;",
          "3993:       }",
          "3994:       for(i=0; zText[i]; i++){",
          "3995:         if( zText[i]=='\\n' ){",
          "3996:           memcpy(&zOut[iOut], zNL, nNL);",
          "3997:           iOut += nNL;",
          "3998:         }else if( zText[i]=='\\r' ){",
          "3999:           memcpy(&zOut[iOut], zCR, nCR);",
          "4000:           iOut += nCR;",
          "4001:         }else{",
          "4002:           zOut[iOut] = zText[i];",
          "4003:           iOut++;",
          "4004:         }",
          "4005:       }",
          "4007:       if( zNL ){",
          "4008:         memcpy(&zOut[iOut], \",'\", 2); iOut += 2;",
          "4009:         memcpy(&zOut[iOut], zNL, nNL); iOut += nNL;",
          "4010:         memcpy(&zOut[iOut], \"', char(10))\", 12); iOut += 12;",
          "4011:       }",
          "4012:       if( zCR ){",
          "4013:         memcpy(&zOut[iOut], \",'\", 2); iOut += 2;",
          "4014:         memcpy(&zOut[iOut], zCR, nCR); iOut += nCR;",
          "4015:         memcpy(&zOut[iOut], \"', char(13))\", 12); iOut += 12;",
          "4016:       }",
          "4018:       sqlite3_result_text(context, zOut, iOut, SQLITE_TRANSIENT);",
          "4019:       sqlite3_free(zOut);",
          "4020:       return;",
          "4021:     }",
          "4022:   }",
          "4024:   sqlite3_result_value(context, argv[0]);",
          "4025: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4013:                             shellModuleSchema, 0, 0);",
          "4014:     sqlite3_create_function(p->db, \"shell_putsnl\", 1, SQLITE_UTF8, p,",
          "4015:                             shellPutsFunc, 0, 0);",
          "4016: #ifndef SQLITE_NOHAVE_SYSTEM",
          "4017:     sqlite3_create_function(p->db, \"edit\", 1, SQLITE_UTF8, 0,",
          "4018:                             editFunc, 0, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4106:     sqlite3_create_function(p->db, \"shell_escape_crnl\", 1, SQLITE_UTF8, 0,",
          "4107:                             shellEscapeCrnl, 0, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6349:     \"GROUP BY pgno, cell;\"",
          "6350:   );",
          "6364:   if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "6352: #if 0",
          "6353:   zSql = \"SELECT type ||','|| name ||','|| tbl_name ||','|| rootpage ||','|| sql FROM recovery.schema;\";",
          "6354:   shellPrepare(pState->db, &rc, zSql, &pLoop);",
          "6355:   while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pLoop) ){",
          "6356:     raw_printf(pState->out, \"%s\\n\", (const char*)sqlite3_column_text(pLoop, 0));",
          "6357:   }",
          "6358:   shellFinalize(&rc, pLoop);",
          "6359:   return rc;",
          "6360: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6398:         raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6399:       }",
          "6400:       shellPreparePrintf(pState->db, &rc, &pData,",
          "6402:         \"FROM sqlite_dbdata WHERE pgno IN (\"",
          "6403:         \"  SELECT pgno FROM recovery.map WHERE root=%d\"",
          "6404:         \")\"",
          "",
          "[Removed Lines]",
          "6401:         \"SELECT max(field), group_concat(quote(value), ', ') \"",
          "",
          "[Added Lines]",
          "6483:         \"SELECT max(field), group_concat(shell_escape_crnl(quote(value)),', ')\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6423:     sqlite3_stmt *pStmt = 0;",
          "6424:     shellPrepare(pState->db, &rc,",
          "6425:         \"SELECT sql, name FROM recovery.schema \"",
          "6427:     );",
          "6428:     while( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "6429:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Removed Lines]",
          "6426:         \"WHERE (type='table' AND sql LIKE 'create table%') IS NOT TRUE\", &pStmt",
          "",
          "[Added Lines]",
          "6508:         \"WHERE sql NOT LIKE 'create table%'\", &pStmt",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2cd02a5d2a4ea33cd40a3032a2041447adc4d772",
      "candidate_info": {
        "commit_hash": "2cd02a5d2a4ea33cd40a3032a2041447adc4d772",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2cd02a5d2a4ea33cd40a3032a2041447adc4d772",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_win.c"
        ],
        "message": "Add assert()s in os_win.c in an effort to silence false-positives from static analyzers.\n\nFossilOrigin-Name: 22a7c15b262376fb0ce4dd3d044373380d86c5ccd96e2f24576cf04318597c33",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_win.c||src/os_win.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2422534908a85a4cd11784e4c23a74ad121404f73dade587bf27efde1e2b982b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4215:     rc = winOpenSharedMemory(pDbFd);",
          "4216:     if( rc!=SQLITE_OK ) return rc;",
          "4217:     pShm = pDbFd->pShm;",
          "4218:   }",
          "4219:   pShmNode = pShm->pShmNode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4218:     assert( pShm!=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4517:       }",
          "4518:     }",
          "4519:     if( pFd->mmapSize >= iOff+nAmt ){",
          "4521:       pFd->nFetchOut++;",
          "4522:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4521:       assert( pFd->pMapRegion!=0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4485ac1a25e9919b5911a0db2ad7bed58be143d6",
      "candidate_info": {
        "commit_hash": "4485ac1a25e9919b5911a0db2ad7bed58be143d6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4485ac1a25e9919b5911a0db2ad7bed58be143d6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "The previous fix was incomplete.  It is also necessary to disable the Expr.y.pTab field when making the translation.\n\nFossilOrigin-Name: b99d5701312f7472e6b606bd824f9273617e2655920485bf50aa96d408064721",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e0f7e321eca91c49102649f70728de69347cbd7b16599b854203c24cfdc348e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1139:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
          "1140:       pExpr->iTable = pX->iIdxCur;",
          "1141:       pExpr->iColumn = pX->iIdxCol;",
          "1142:     }",
          "1143:   }",
          "1144:   return WRC_Continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1142:       pExpr->y.pTab = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d406d0726267d7691e7ce121da100e941bc0845a",
      "candidate_info": {
        "commit_hash": "d406d0726267d7691e7ce121da100e941bc0845a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d406d0726267d7691e7ce121da100e941bc0845a",
        "files": [
          "ext/fts5/fts5_hash.c",
          "ext/fts5/test/fts5aa.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a buffer overread that could occur when running fts5 prefix queries inside a transaction.\n\nFossilOrigin-Name: b3fa58dd7403dbd4d2e9f3ae23d7d1337830d6fef2aa2f137ac5174de0d5828e",
        "before_after_code_files": [
          "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c",
          "ext/fts5/test/fts5aa.test||ext/fts5/test/fts5aa.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_hash.c||ext/fts5/fts5_hash.c": [
          "File: ext/fts5/fts5_hash.c -> ext/fts5/fts5_hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:   for(iSlot=0; iSlot<pHash->nSlot; iSlot++){",
          "457:     Fts5HashEntry *pIter;",
          "458:     for(pIter=pHash->aSlot[iSlot]; pIter; pIter=pIter->pHashNext){",
          "460:         Fts5HashEntry *pEntry = pIter;",
          "461:         pEntry->pScanNext = 0;",
          "462:         for(i=0; ap[i]; i++){",
          "",
          "[Removed Lines]",
          "459:       if( pTerm==0 || 0==memcmp(fts5EntryKey(pIter), pTerm, nTerm) ){",
          "",
          "[Added Lines]",
          "459:       if( pTerm==0",
          "460:        || (pIter->nKey+1>=nTerm && 0==memcmp(fts5EntryKey(pIter), pTerm, nTerm))",
          "461:       ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5aa.test||ext/fts5/test/fts5aa.test": [
          "File: ext/fts5/test/fts5aa.test -> ext/fts5/test/fts5aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "622:     SELECT * FROM t12('aaaa');",
          "623: } {aaaa}",
          "625: }",
          "627: expand_all_sql db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "625: #-------------------------------------------------------------------------",
          "626: do_execsql_test 25.0 {",
          "627:   CREATE VIRTUAL TABLE t13 USING fts5(x, detail=%DETAIL%);",
          "628: }",
          "629: do_execsql_test 25.1 {",
          "630:   BEGIN;",
          "631:   INSERT INTO t13 VALUES('AAAA');",
          "632: SELECT * FROM t13('BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB*');",
          "634:   END;",
          "635: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45c73deb440496e848cb24d4c1326d4105dacfee8bbafb115e567051855e6518",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}