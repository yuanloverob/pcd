{
  "cve_id": "CVE-2022-21739",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `QuantizedMaxPool` has an undefined behavior where user controlled inputs can trigger a reference binding to null pointer. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "53b0dd6dc5957652f35964af16b892ec9af4a559",
  "patch_info": {
    "commit_hash": "53b0dd6dc5957652f35964af16b892ec9af4a559",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/53b0dd6dc5957652f35964af16b892ec9af4a559",
    "files": [
      "tensorflow/core/kernels/quantized_pooling_ops.cc"
    ],
    "message": "Fix nullptr exception in QuantizedMaxPool op when empty list is sent to min_input or max_input parameters.\n\nPiperOrigin-RevId: 413960973\nChange-Id: I9e3ded593f3c4eabf0d6d5dc356e6a19a3ad2682",
    "before_after_code_files": [
      "tensorflow/core/kernels/quantized_pooling_ops.cc||tensorflow/core/kernels/quantized_pooling_ops.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/quantized_pooling_ops.cc||tensorflow/core/kernels/quantized_pooling_ops.cc": [
      "File: tensorflow/core/kernels/quantized_pooling_ops.cc -> tensorflow/core/kernels/quantized_pooling_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #define EIGEN_USE_THREADS",
      "20: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18: #include \"tensorflow/core/framework/op_requires.h\"",
      "19: #include \"tensorflow/core/platform/errors.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:       : MaxPoolingOp<Device, T>(context) {}",
      "119:   void Compute(OpKernelContext* context) override {",
      "120:     const float min_input = context->input(1).flat<float>()(0);",
      "121:     const float max_input = context->input(2).flat<float>()(0);",
      "122:     MaxPoolingOp<Device, T>::Compute(context);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "122:     auto min_input_tensor = context->input(1);",
      "123:     auto max_input_tensor = context->input(2);",
      "124:     OP_REQUIRES(",
      "125:         context, min_input_tensor.NumElements() == 1,",
      "126:         errors::InvalidArgument(",
      "127:             \"min_input must be a scalar float value, got tensor with shape \",",
      "128:             min_input_tensor.shape()));",
      "129:     OP_REQUIRES(",
      "130:         context, max_input_tensor.NumElements() == 1,",
      "131:         errors::InvalidArgument(",
      "132:             \"max_input must be a scalar float value, got tensor with shape \",",
      "133:             max_input_tensor.shape()));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "249466cf3c29e8721933bf77694fbcf531f6c7a6",
      "candidate_info": {
        "commit_hash": "249466cf3c29e8721933bf77694fbcf531f6c7a6",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/249466cf3c29e8721933bf77694fbcf531f6c7a6",
        "files": [
          "tensorflow/core/kernels/quantized_pooling_ops.cc"
        ],
        "message": "Fix nullptr exception in QuantizedMaxPool op when empty list is sent to min_input or max_input parameters.\n\nPiperOrigin-RevId: 413960973\nChange-Id: I9e3ded593f3c4eabf0d6d5dc356e6a19a3ad2682",
        "before_after_code_files": [
          "tensorflow/core/kernels/quantized_pooling_ops.cc||tensorflow/core/kernels/quantized_pooling_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/quantized_pooling_ops.cc||tensorflow/core/kernels/quantized_pooling_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/quantized_pooling_ops.cc||tensorflow/core/kernels/quantized_pooling_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/quantized_pooling_ops.cc||tensorflow/core/kernels/quantized_pooling_ops.cc": [
          "File: tensorflow/core/kernels/quantized_pooling_ops.cc -> tensorflow/core/kernels/quantized_pooling_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #define EIGEN_USE_THREADS",
          "20: #include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include \"tensorflow/core/framework/op_requires.h\"",
          "19: #include \"tensorflow/core/platform/errors.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:       : MaxPoolingOp<Device, T>(context) {}",
          "119:   void Compute(OpKernelContext* context) override {",
          "120:     const float min_input = context->input(1).flat<float>()(0);",
          "121:     const float max_input = context->input(2).flat<float>()(0);",
          "122:     MaxPoolingOp<Device, T>::Compute(context);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122:     auto min_input_tensor = context->input(1);",
          "123:     auto max_input_tensor = context->input(2);",
          "124:     OP_REQUIRES(",
          "125:         context, min_input_tensor.NumElements() == 1,",
          "126:         errors::InvalidArgument(",
          "127:             \"min_input must be a scalar float value, got tensor with shape \",",
          "128:             min_input_tensor.shape()));",
          "129:     OP_REQUIRES(",
          "130:         context, max_input_tensor.NumElements() == 1,",
          "131:         errors::InvalidArgument(",
          "132:             \"max_input must be a scalar float value, got tensor with shape \",",
          "133:             max_input_tensor.shape()));",
          "",
          "---------------"
        ]
      }
    }
  ]
}