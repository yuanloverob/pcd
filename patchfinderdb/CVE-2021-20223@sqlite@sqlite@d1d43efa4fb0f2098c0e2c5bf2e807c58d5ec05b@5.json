{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c7a046e28267c9c912081f6ec8c68727bcd728f9",
      "candidate_info": {
        "commit_hash": "c7a046e28267c9c912081f6ec8c68727bcd728f9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c7a046e28267c9c912081f6ec8c68727bcd728f9",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Ignore type affinity for auxiliary columns in RTREE as it is too error-prone to try to parse out the type from other constraints. Ticket [8bf76328ac940d52]\n\nFossilOrigin-Name: 7fa664ea0ea1e0283a9af50c9ff8dd360ee6042f9e491a136f53d9bcbbc9c7ef",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3741:     const char *zArg = argv[ii];",
          "3742:     if( zArg[0]=='+' ){",
          "3743:       pRtree->nAux++;",
          "3745:     }else if( pRtree->nAux>0 ){",
          "3746:       break;",
          "3747:     }else{",
          "",
          "[Removed Lines]",
          "3744:       sqlite3_str_appendf(pSql, \",%s\", zArg+1);",
          "",
          "[Added Lines]",
          "3744:       sqlite3_str_appendf(pSql, \",%.*s\", rtreeTokenLength(zArg+1), zArg+1);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 27c0fdab1ba4d4993b164eb4b777c63e82aa247c3fa406121dc8ed94970a0b35",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25c4296bd97072f7b5a13f4eda021bd2782bcc45",
      "candidate_info": {
        "commit_hash": "25c4296bd97072f7b5a13f4eda021bd2782bcc45",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25c4296bd97072f7b5a13f4eda021bd2782bcc45",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/func.c",
          "src/sqliteInt.h"
        ],
        "message": "Factor out code generation for in-line SQL functions into a separate routine inside of expr.c.\n\nFossilOrigin-Name: 586a65a28fc6cac77309612abc32a2e1017c65e0387f9f438f5d8ac8406da8eb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/func.c||src/func.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e3330861b4deab7c7cc09ad8b936d633c600b9fb4e274801efeaaf94e5c860b4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3573:   return iResult;",
          "3574: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3580: static int exprCodeInlineFunction(",
          "3585: ){",
          "3586:   int nFarg;",
          "3587:   Vdbe *v = pParse->pVdbe;",
          "3588:   assert( v!=0 );",
          "3589:   assert( pFarg!=0 );",
          "3590:   nFarg = pFarg->nExpr;",
          "3592:   switch( iFuncId ){",
          "3593:     case INLINEFUNC_coalesce: {",
          "3598:       int endCoalesce = sqlite3VdbeMakeLabel(pParse);",
          "3599:       int i;",
          "3600:       assert( nFarg>=2 );",
          "3601:       sqlite3ExprCode(pParse, pFarg->a[0].pExpr, target);",
          "3602:       for(i=1; i<nFarg; i++){",
          "3603:         sqlite3VdbeAddOp2(v, OP_NotNull, target, endCoalesce);",
          "3604:         VdbeCoverage(v);",
          "3605:         sqlite3ExprCode(pParse, pFarg->a[i].pExpr, target);",
          "3606:       }",
          "3607:       sqlite3VdbeResolveLabel(v, endCoalesce);",
          "3608:       break;",
          "3609:     }",
          "3611:     case INLINEFUNC_unlikely: {",
          "3615:       assert( nFarg>=1 );",
          "3616:       target = sqlite3ExprCodeTarget(pParse, pFarg->a[0].pExpr, target);",
          "3617:       break;",
          "3618:     }",
          "3620: #ifdef SQLITE_DEBUG",
          "3621:     case INLINEFUNC_affinity: {",
          "3626:       const char *azAff[] = { \"blob\", \"text\", \"numeric\", \"integer\", \"real\" };",
          "3627:       char aff;",
          "3628:       assert( nFarg==1 );",
          "3629:       aff = sqlite3ExprAffinity(pFarg->a[0].pExpr);",
          "3630:       sqlite3VdbeLoadString(v, target,",
          "3631:               (aff<=SQLITE_AFF_NONE) ? \"none\" : azAff[aff-SQLITE_AFF_BLOB]);",
          "3632:       break;",
          "3633:     }",
          "3634: #endif",
          "3635:   }",
          "3636:   return target;",
          "3637: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3953:         sqlite3ErrorMsg(pParse, \"unknown function: %s()\", zId);",
          "3954:         break;",
          "3955:       }",
          "3980:       }",
          "3998:       for(i=0; i<nFarg; i++){",
          "3999:         if( i<32 && sqlite3ExprIsConstant(pFarg->a[i].pExpr) ){",
          "4000:           testcase( i==31 );",
          "",
          "[Removed Lines]",
          "3961:       if( pDef->funcFlags & SQLITE_FUNC_COALESCE ){",
          "3962:         int endCoalesce = sqlite3VdbeMakeLabel(pParse);",
          "3963:         assert( nFarg>=2 );",
          "3964:         sqlite3ExprCode(pParse, pFarg->a[0].pExpr, target);",
          "3965:         for(i=1; i<nFarg; i++){",
          "3966:           sqlite3VdbeAddOp2(v, OP_NotNull, target, endCoalesce);",
          "3967:           VdbeCoverage(v);",
          "3968:           sqlite3ExprCode(pParse, pFarg->a[i].pExpr, target);",
          "3969:         }",
          "3970:         sqlite3VdbeResolveLabel(v, endCoalesce);",
          "3971:         break;",
          "3972:       }",
          "3977:       if( pDef->funcFlags & SQLITE_FUNC_UNLIKELY ){",
          "3978:         assert( nFarg>=1 );",
          "3979:         return sqlite3ExprCodeTarget(pParse, pFarg->a[0].pExpr, target);",
          "3982: #ifdef SQLITE_DEBUG",
          "3987:       if( pDef->funcFlags & SQLITE_FUNC_AFFINITY ){",
          "3988:         const char *azAff[] = { \"blob\", \"text\", \"numeric\", \"integer\", \"real\" };",
          "3989:         char aff;",
          "3990:         assert( nFarg==1 );",
          "3991:         aff = sqlite3ExprAffinity(pFarg->a[0].pExpr);",
          "3992:         sqlite3VdbeLoadString(v, target,",
          "3993:                 (aff<=SQLITE_AFF_NONE) ? \"none\" : azAff[aff-SQLITE_AFF_BLOB]);",
          "3994:         return target;",
          "3995:       }",
          "3996: #endif",
          "",
          "[Added Lines]",
          "4019:       if( pDef->funcFlags & SQLITE_FUNC_INLINE ){",
          "4020:         return exprCodeInlineFunction(pParse, pFarg,",
          "4021:              SQLITE_PTR_TO_INT(pDef->pUserData), target);",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1921:     DFUNCTION(sqlite_compileoption_used,1, 0, 0, compileoptionusedFunc  ),",
          "1922:     DFUNCTION(sqlite_compileoption_get, 1, 0, 0, compileoptiongetFunc  ),",
          "1927: #ifdef SQLITE_DEBUG",
          "1929: #endif",
          "1930: #ifdef SQLITE_ENABLE_OFFSET_SQL_FUNC",
          "1931:     FUNCTION2(sqlite_offset,     1, 0, 0, noopFunc,  SQLITE_FUNC_OFFSET|",
          "",
          "[Removed Lines]",
          "1924:     FUNCTION2(unlikely,          1, 0, 0, noopFunc,  SQLITE_FUNC_UNLIKELY),",
          "1925:     FUNCTION2(likelihood,        2, 0, 0, noopFunc,  SQLITE_FUNC_UNLIKELY),",
          "1926:     FUNCTION2(likely,            1, 0, 0, noopFunc,  SQLITE_FUNC_UNLIKELY),",
          "1928:     FUNCTION2(affinity,          1, 0, 0, noopFunc,  SQLITE_FUNC_AFFINITY),",
          "",
          "[Added Lines]",
          "1924:     INLINE_FUNC(unlikely,        1, INLINEFUNC_unlikely, SQLITE_FUNC_UNLIKELY),",
          "1925:     INLINE_FUNC(likelihood,      2, INLINEFUNC_unlikely, SQLITE_FUNC_UNLIKELY),",
          "1926:     INLINE_FUNC(likely,          1, INLINEFUNC_unlikely, SQLITE_FUNC_UNLIKELY),",
          "1928:     TEST_FUNC(affinity,          1, INLINEFUNC_affinity, 0),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1959:     FUNCTION(upper,              1, 0, 0, upperFunc        ),",
          "1960:     FUNCTION(lower,              1, 0, 0, lowerFunc        ),",
          "1961:     FUNCTION(hex,                1, 0, 0, hexFunc          ),",
          "1963:     VFUNCTION(random,            0, 0, 0, randomFunc       ),",
          "1964:     VFUNCTION(randomblob,        1, 0, 0, randomBlob       ),",
          "1965:     FUNCTION(nullif,             2, 0, 1, nullifFunc       ),",
          "",
          "[Removed Lines]",
          "1962:     FUNCTION2(ifnull,            2, 0, 0, noopFunc,  SQLITE_FUNC_COALESCE),",
          "",
          "[Added Lines]",
          "1962:     INLINE_FUNC(ifnull,          2, INLINEFUNC_coalesce, SQLITE_FUNC_COALESCE),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1999: #endif",
          "2000:     FUNCTION(coalesce,           1, 0, 0, 0                ),",
          "2001:     FUNCTION(coalesce,           0, 0, 0, 0                ),",
          "2003:   };",
          "2004: #ifndef SQLITE_OMIT_ALTERTABLE",
          "2005:   sqlite3AlterFunctions();",
          "",
          "[Removed Lines]",
          "2002:     FUNCTION2(coalesce,         -1, 0, 0, noopFunc,  SQLITE_FUNC_COALESCE),",
          "",
          "[Added Lines]",
          "2002:     INLINE_FUNC(coalesce,       -1, INLINEFUNC_coalesce, SQLITE_FUNC_COALESCE),",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1779: #define SFUNCTION(zName, nArg, iArg, bNC, xFunc) \\",
          "1780:   {nArg, SQLITE_UTF8|SQLITE_DIRECTONLY, \\",
          "1781:    SQLITE_INT_TO_PTR(iArg), 0, xFunc, 0, 0, 0, #zName, {0} }",
          "1782: #define DFUNCTION(zName, nArg, iArg, bNC, xFunc) \\",
          "1783:   {nArg, SQLITE_FUNC_SLOCHNG|SQLITE_UTF8, \\",
          "1784:    0, 0, xFunc, 0, 0, 0, #zName, {0} }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1800: #define INLINE_FUNC(zName, nArg, iArg, mFlags) \\",
          "1801:   {nArg, SQLITE_UTF8|SQLITE_FUNC_INLINE|SQLITE_FUNC_CONSTANT|(mFlags), \\",
          "1802:    SQLITE_INT_TO_PTR(iArg), 0, noopFunc, 0, 0, 0, #zName, {0} }",
          "1803: #define TEST_FUNC(zName, nArg, iArg, mFlags) \\",
          "1804:   {nArg, SQLITE_UTF8|SQLITE_FUNC_INTERNAL|SQLITE_FUNC_TEST| \\",
          "1805:          SQLITE_FUNC_INLINE|SQLITE_FUNC_CONSTANT|(mFlags), \\",
          "1806:    SQLITE_INT_TO_PTR(iArg), 0, noopFunc, 0, 0, 0, #zName, {0} }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ca41fbfa93abb7f1e19790010cd270b0aa3870c",
      "candidate_info": {
        "commit_hash": "9ca41fbfa93abb7f1e19790010cd270b0aa3870c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ca41fbfa93abb7f1e19790010cd270b0aa3870c",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lempar.c"
        ],
        "message": "Remove a new assert() that the compiler finds is always true at compile-time, to avoid a compiler warning.\n\nFossilOrigin-Name: 8bbaee238593741da107b92b254cb5f0cf8b6bcc760bf2b25d20e46c8edee2a9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lempar.c||tool/lempar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: de8ce22a46c90afa5475cd24c28b7a82b26410dc72d662af2f9d9e5e528e0eec",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lempar.c||tool/lempar.c": [
          "File: tool/lempar.c -> tool/lempar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "718:   (void)yyLookahead;",
          "719:   (void)yyLookaheadToken;",
          "720:   yymsp = yypParser->yytos;",
          "722:   assert( yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) );",
          "723: #ifndef NDEBUG",
          "724:   if( yyTraceFILE ){",
          "",
          "[Removed Lines]",
          "721:   assert( yyruleno>=0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3d6d6a93fc87eba1ccb52d6f72d79ab6b378f69",
      "candidate_info": {
        "commit_hash": "a3d6d6a93fc87eba1ccb52d6f72d79ab6b378f69",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a3d6d6a93fc87eba1ccb52d6f72d79ab6b378f69",
        "files": [
          "VERSION",
          "configure",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update the version number to 3.34.0 for the next development cycle.\n\nFossilOrigin-Name: 70f34f3df5358d36c8578afbc05756450c46da36b8dce339ed87fc0b9d4057cb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 613fb5c2525be77e48bad0a74e8b7bf53489365060fb9c7713a0caddb1820c71",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "19918882386a59400e86ffd19e9d347b5e2a741e",
      "candidate_info": {
        "commit_hash": "19918882386a59400e86ffd19e9d347b5e2a741e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/19918882386a59400e86ffd19e9d347b5e2a741e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Test for schema corruption is reachable after all.\n\nFossilOrigin-Name: 2032236cce2ea040dec4cb1c03284bf4882efc1e0158703ab93d8a3451c805a5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 168cccbabbd4807bdb04953f395cd1a245c46e9d4816a09c9d024ecd5432759d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2844: static void destroyRootPage(Parse *pParse, int iTable, int iDb){",
          "2845:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "2846:   int r1 = sqlite3GetTempReg(pParse);",
          "2848:   sqlite3VdbeAddOp3(v, OP_Destroy, iTable, r1, iDb);",
          "2849:   sqlite3MayAbort(pParse);",
          "2850: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "",
          "[Removed Lines]",
          "2847:   if( NEVER(iTable<2) ) return;",
          "",
          "[Added Lines]",
          "2847:   if( iTable<2 ) sqlite3ErrorMsg(pParse, \"corrupt schema\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}