{
  "cve_id": "CVE-2021-45379",
  "cve_desc": "Glewlwyd 2.0.0, fixed in 2.6.1 is affected by an incorrect access control vulnerability. One user can attempt to log in as another user without its password.",
  "repo": "babelouest/glewlwyd",
  "patch_hash": "125281f1c0d4b6a8b49f7e55a757205a2ef01fbe",
  "patch_info": {
    "commit_hash": "125281f1c0d4b6a8b49f7e55a757205a2ef01fbe",
    "repo": "babelouest/glewlwyd",
    "commit_url": "https://github.com/babelouest/glewlwyd/commit/125281f1c0d4b6a8b49f7e55a757205a2ef01fbe",
    "files": [
      "src/webservice.c"
    ],
    "message": "Fix update session when auth fail",
    "before_after_code_files": [
      "src/webservice.c||src/webservice.c"
    ]
  },
  "patch_diff": {
    "src/webservice.c||src/webservice.c": [
      "File: src/webservice.c -> src/webservice.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "278:             if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {",
      "279:               y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", json_string_value(json_object_get(j_param, \"username\")), ip_source);",
      "280:             }",
      "285:             response->status = 401;",
      "286:             glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID, 1, NULL);",
      "287:             glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 1, \"scheme_type\", \"password\", NULL);",
      "",
      "[Removed Lines]",
      "281:             if ((session_uid = get_session_id(config, request)) != NULL && user_session_update(config, session_uid, u_map_get_case(request->map_header, \"user-agent\"), issued_for, json_string_value(json_object_get(j_param, \"username\")), NULL, 1) != G_OK) {",
      "282:               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error user_session_update (2)\");",
      "283:             }",
      "284:             o_free(session_uid);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "815028ec58665917b5f081c92725926d7068d9aa",
      "candidate_info": {
        "commit_hash": "815028ec58665917b5f081c92725926d7068d9aa",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/815028ec58665917b5f081c92725926d7068d9aa",
        "files": [
          "src/glewlwyd-common.h",
          "src/glewlwyd.c",
          "src/glewlwyd.h",
          "src/metrics.c",
          "src/module.c",
          "src/webservice.c"
        ],
        "message": "Add prometheus metrics endpoint and metrics for authentication",
        "before_after_code_files": [
          "src/glewlwyd-common.h||src/glewlwyd-common.h",
          "src/glewlwyd.c||src/glewlwyd.c",
          "src/glewlwyd.h||src/glewlwyd.h",
          "src/metrics.c||src/metrics.c",
          "src/module.c||src/module.c",
          "src/webservice.c||src/webservice.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/webservice.c||src/webservice.c"
          ],
          "candidate": [
            "src/webservice.c||src/webservice.c"
          ]
        }
      },
      "candidate_diff": {
        "src/glewlwyd-common.h||src/glewlwyd-common.h": [
          "File: src/glewlwyd-common.h -> src/glewlwyd-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:   short int               enabled;",
          "268: };",
          "276: };",
          "",
          "[Removed Lines]",
          "270: struct _glwd_metrics {",
          "271:   int           type;",
          "272:   char        * name;",
          "273:   char        * help;",
          "274:   struct _u_map labels;",
          "275:   size_t        counter;",
          "",
          "[Added Lines]",
          "270: #define GLWD_METRICS_AUTH_USER_VALID          \"glewlwyd_auth_user_valid\"",
          "271: #define GLWD_METRICS_AUTH_USER_VALID_SCHEME   \"glewlwyd_auth_user_valid_scheme\"",
          "272: #define GLWD_METRICS_AUTH_USER_INVALID        \"glewlwyd_auth_user_invalid\"",
          "273: #define GLWD_METRICS_AUTH_USER_INVALID_SCHEME \"glewlwyd_auth_user_invalid_scheme\"",
          "278: struct _glwd_metrics_data {",
          "279:   char * label;",
          "280:   size_t counter;",
          "281: };",
          "283: struct _glwd_metric {",
          "284:   char                      * name;",
          "285:   char                      * help;",
          "286:   struct _glwd_metrics_data * data;",
          "287:   size_t                      data_size;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329:   unsigned int                                   metrics_endpoint_port;",
          "330:   unsigned short                                 metrics_endpoint_admin_session;",
          "331:   pthread_mutex_t                                metrics_lock;",
          "333: };",
          "",
          "[Removed Lines]",
          "332:   struct _pointer_list *                         metrics_list;",
          "",
          "[Added Lines]",
          "344:   struct _pointer_list                           metrics_list;",
          "",
          "---------------"
        ],
        "src/glewlwyd.c||src/glewlwyd.c": [
          "File: src/glewlwyd.c -> src/glewlwyd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:   struct sockaddr_in bind_address, bind_address_metrics;",
          "60:   pthread_t signal_thread_id;",
          "61:   static sigset_t close_signals;",
          "63:   char * tmp, * tmp2;",
          "65:   if (config == NULL) {",
          "66:     fprintf(stderr, \"Memory error - config\\n\");",
          "67:     return 1;",
          "",
          "[Removed Lines]",
          "62:   pthread_mutexattr_t mutexattr;",
          "",
          "[Added Lines]",
          "64:   ulfius_global_init();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "258:     }",
          "259:   }",
          "260:   config->instance_initialized = 1;",
          "262:   if (config->metrics_endpoint) {",
          "263:     if (config->bind_address_metrics != NULL) {",
          "264:       bind_address_metrics.sin_family = AF_INET;",
          "265:       bind_address_metrics.sin_port = htons(config->metrics_endpoint_port);",
          "266:       inet_aton(config->bind_address_metrics, (struct in_addr *)&bind_address_metrics.sin_addr.s_addr);",
          "269:         exit_server(&config, GLEWLWYD_ERROR);",
          "270:       }",
          "271:     } else {",
          "274:         exit_server(&config, GLEWLWYD_ERROR);",
          "275:       }",
          "276:     }",
          "281:       exit_server(&config, GLEWLWYD_ERROR);",
          "282:     }",
          "284:     config->instance_metrics_initialized = 1;",
          "285:   }",
          "288:   config->config_m->external_url = config->external_url;",
          "289:   config->config_m->login_url = config->login_url;",
          "",
          "[Removed Lines]",
          "267:       if (ulfius_init_instance(config->instance, config->metrics_endpoint_port, &bind_address_metrics, NULL) != U_OK) {",
          "268:         fprintf(stderr, \"Error initializing metrics instance with bind address %s\\n\", config->bind_address_metrics);",
          "272:       if (ulfius_init_instance(config->instance, config->metrics_endpoint_port, NULL, NULL) != U_OK) {",
          "273:         fprintf(stderr, \"Error initializing metrics instance\\n\");",
          "277:     pthread_mutexattr_init ( &mutexattr );",
          "278:     pthread_mutexattr_settype( &mutexattr, PTHREAD_MUTEX_RECURSIVE );",
          "279:     if (pthread_mutex_init(&config->metrics_lock, &mutexattr) != 0) {",
          "280:       fprintf(stderr, \"Error initializing metrics_lock\\n\");",
          "283:     pthread_mutexattr_destroy(&mutexattr);",
          "",
          "[Added Lines]",
          "264:     config->instance_metrics = o_malloc(sizeof(struct _u_instance));",
          "265:     if (config->instance_metrics == NULL) {",
          "266:       fprintf(stderr, \"Error allocating resources for config->instance_metrics, aborting\\n\");",
          "267:       exit_server(&config, GLEWLWYD_ERROR);",
          "268:     }",
          "273:       if (ulfius_init_instance(config->instance_metrics, config->metrics_endpoint_port, &bind_address_metrics, NULL) != U_OK) {",
          "274:         fprintf(stderr, \"Error initializing metrics instance_metrics with bind address %s\\n\", config->bind_address_metrics);",
          "278:       if (ulfius_init_instance(config->instance_metrics, config->metrics_endpoint_port, NULL, NULL) != U_OK) {",
          "279:         fprintf(stderr, \"Error initializing metrics instance_metrics\\n\");",
          "283:     if (glewlwyd_metrics_init(config) != 0) {",
          "284:       fprintf(stderr, \"Error initializing metrics\\n\");",
          "290:   glewlwyd_metrics_add_metric(config, GLWD_METRICS_AUTH_USER_VALID, \"Total number of successful authentication\");",
          "291:   glewlwyd_metrics_add_metric(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, \"Total number of successful authentication by scheme\");",
          "292:   glewlwyd_metrics_add_metric(config, GLWD_METRICS_AUTH_USER_INVALID, \"Total number of invalid authentication\");",
          "293:   glewlwyd_metrics_add_metric(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, \"Total number of invalid authentication by scheme\");",
          "294:   glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID, 0, NULL);",
          "295:   glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID, 0, NULL);",
          "296:   glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 0, \"scheme_type\", \"password\", NULL);",
          "297:   glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 0, \"scheme_type\", \"password\", NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "469:     }",
          "470:     ulfius_add_endpoint_by_val(config->instance_metrics, \"GET\", NULL, \"*\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_metrics, (void*)config);",
          "471:     ulfius_set_default_endpoint(config->instance_metrics, &callback_default, (void*)config);",
          "472:   }",
          "474:   if (o_strlen(config->cookie_domain)) {",
          "475:     if (0 == o_strncmp(\"http://\", config->external_url, o_strlen(\"http://\"))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "484:     if (ulfius_start_framework(config->instance_metrics) != U_OK) {",
          "485:       y_log_message(Y_LOG_LEVEL_ERROR, \"Error starting metrics webservice instance_metrics\");",
          "486:       exit_server(&config, GLEWLWYD_ERROR);",
          "487:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "532:   }",
          "534:   if (res == U_OK) {",
          "537:     pthread_mutex_lock(&global_handler_close_lock);",
          "538:     pthread_cond_wait(&global_handler_close_cond, &global_handler_close_lock);",
          "",
          "[Removed Lines]",
          "535:     ulfius_global_init();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "616:       u_clean_compressed_inmemory_website_config((*config)->static_file_config);",
          "617:       o_free((*config)->static_file_config);",
          "618:     }",
          "620:     o_free((*config)->config_p);",
          "621:     o_free((*config)->config_m);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "635:     glewlwyd_metrics_close((*config));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1110:           break;",
          "1111:         }",
          "1112:       }",
          "1116:         config->metrics_endpoint_port = (uint)int_value_2;",
          "1117:         config->metrics_endpoint_admin_session = (ushort)int_value_3;",
          "1118:       }",
          "1119:     }",
          "",
          "[Removed Lines]",
          "1114:       if (config_lookup_int(&cfg, \"metrics_endpoint_port\", &int_value_2) == CONFIG_TRUE &&",
          "1115:           config_lookup_bool(&cfg, \"metrics_endpoint_admin_session\", &int_value_3) == CONFIG_TRUE) {",
          "",
          "[Added Lines]",
          "1131:       if (config_lookup_int(&cfg, \"metrics_endpoint_port\", &int_value_2) == CONFIG_TRUE) {",
          "1133:       }",
          "1135:       if (config_lookup_bool(&cfg, \"metrics_endpoint_admin_session\", &int_value_3) == CONFIG_TRUE) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1573:   sigset_t *sigs = arg;",
          "1574:   int res, signum;",
          "",
          "[Removed Lines]",
          "1572: void* signal_thread(void *arg) {",
          "",
          "[Added Lines]",
          "1591: void * signal_thread(void *arg) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2169:                 if (j_parameters != NULL) {",
          "2170:                   j_init = module->user_auth_scheme_module_init(config->config_m, j_parameters, cur_instance->name, &cur_instance->cls);",
          "2171:                   if (check_result_value(j_init, G_OK)) {",
          "2172:                     cur_instance->enabled = 1;",
          "2173:                   } else {",
          "2174:                     y_log_message(Y_LOG_LEVEL_ERROR, \"load_user_auth_scheme_module_instance_list - Error init module %s/%s\", module->name, json_string_value(json_object_get(j_instance, \"name\")));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2191:                     glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 0, \"scheme_type\", module->name, \"scheme_name\", cur_instance->name, NULL);",
          "2192:                     glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 0, \"scheme_type\", module->name, \"scheme_name\", cur_instance->name, NULL);",
          "",
          "---------------"
        ],
        "src/glewlwyd.h||src/glewlwyd.h": [
          "File: src/glewlwyd.h -> src/glewlwyd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "307: int glewlwyd_module_callback_set_user(struct config_module * config, const char * username, json_t * j_user);",
          "308: int glewlwyd_module_callback_check_user_password(struct config_module * config, const char * username, const char * password);",
          "309: json_t * glewlwyd_module_callback_check_user_session(struct config_module * config, const struct _u_request * request, const char * username);",
          "312: json_t * get_client_list(struct config_elements * config, const char * pattern, size_t offset, size_t limit, const char * source);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "310: int glewlwyd_module_metrics_increment_counter(struct config_module * config, const char * metrics_name, size_t inc, const char * module_type, const char * module_name);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330: json_t * generate_api_key(struct config_elements * config, const char * username, const char * issued_for, const char * user_agent);",
          "331: int disable_api_key(struct config_elements * config, const char * token_hash);",
          "334: int callback_glewlwyd_check_user_session (const struct _u_request * request, struct _u_response * response, void * user_data);",
          "335: int callback_glewlwyd_check_admin_session (const struct _u_request * request, struct _u_response * response, void * user_data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "335: void glewlwyd_metrics_close(struct config_elements * config);",
          "336: int glewlwyd_metrics_init(struct config_elements * config);",
          "337: void free_glwd_metrics(void * data);",
          "338: int glewlwyd_metrics_add_metric(struct config_elements * config, const char * name, const char * help);",
          "339: int glewlwyd_metrics_increment_counter(struct config_elements * config, const char * name, size_t inc, ...);",
          "",
          "---------------"
        ],
        "src/metrics.c||src/metrics.c": [
          "File: src/metrics.c -> src/metrics.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include \"glewlwyd.h\"",
          "30: struct _glwd_increment_counter_data {",
          "31:   struct config_elements * config;",
          "32:   char                   * name;",
          "33:   char                   * label;",
          "34:   size_t                   inc;",
          "35: };",
          "37: void * glewlwyd_metrics_increment_counter_thread(void * args) {",
          "38:   struct _glwd_increment_counter_data * data = (struct _glwd_increment_counter_data *)args;",
          "39:   struct _glwd_metric * metric;",
          "40:   size_t i, j;",
          "41:   int found;",
          "43:   if (!pthread_mutex_lock(&data->config->metrics_lock)) {",
          "44:     for (i=0; i<pointer_list_size(&data->config->metrics_list); i++) {",
          "45:       metric = (struct _glwd_metric *)pointer_list_get_at(&data->config->metrics_list, i);",
          "46:       if (0 == o_strcmp(data->name, metric->name)) {",
          "47:         found = 0;",
          "48:         for (j=0; j<metric->data_size; j++) {",
          "49:           if ((data->label == NULL && metric->data[j].label == NULL) || 0 == o_strcasecmp(data->label, metric->data[j].label)) {",
          "50:             metric->data[j].counter += data->inc;",
          "51:             found = 1;",
          "52:           }",
          "53:         }",
          "54:         if (!found) {",
          "55:           if ((metric->data = o_realloc(metric->data, (metric->data_size+1)*sizeof(struct _glwd_metrics_data))) != NULL) {",
          "56:             metric->data[metric->data_size].label = o_strdup(data->label);",
          "57:             metric->data[metric->data_size].counter = data->inc;",
          "58:             metric->data_size++;",
          "59:           } else {",
          "60:             y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_metrics_increment_counter_thread - Error realloc metric->data\");",
          "61:           }",
          "62:         }",
          "63:       }",
          "64:     }",
          "65:     pthread_mutex_unlock(&data->config->metrics_lock);",
          "66:   } else {",
          "67:     y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_metrics_increment_counter_thread - Error lock\");",
          "68:   }",
          "69:   o_free(data->name);",
          "70:   o_free(data->label);",
          "71:   o_free(data);",
          "72:   pthread_exit(NULL);",
          "73: }",
          "75: int glewlwyd_metrics_increment_counter(struct config_elements * config, const char * name, size_t inc, ...) {",
          "76:   va_list vl;",
          "77:   const char * label_arg;",
          "78:   char * label = NULL;",
          "79:   int ret = G_OK, flag = 0;",
          "80:   struct _glwd_increment_counter_data * data;",
          "81:   pthread_t thread_metrics;",
          "82:   int thread_ret, thread_detach;",
          "84:   if (config != NULL && o_strlen(name)) {",
          "85:     va_start(vl, inc);",
          "86:     for (label_arg = va_arg(vl, const char *); label_arg != NULL && ret == G_OK; label_arg = va_arg(vl, const char *)) {",
          "87:       if (!flag) {",
          "88:         if (label == NULL) {",
          "89:           label = msprintf(\"%s=\", label_arg);",
          "90:         } else {",
          "91:           label = mstrcatf(label, \", %s=\", label_arg);",
          "92:         }",
          "93:       } else {",
          "94:         label = mstrcatf(label, \"%s\", label_arg);",
          "95:       }",
          "96:       flag = !flag;",
          "97:     }",
          "98:     va_end(vl);",
          "100:     if ((data = o_malloc(sizeof(struct _glwd_increment_counter_data))) != NULL) {",
          "101:       data->config = config;",
          "102:       data->name = o_strdup(name);",
          "103:       data->label = label;",
          "104:       data->inc = inc;",
          "105:       thread_ret = pthread_create(&thread_metrics, NULL, glewlwyd_metrics_increment_counter_thread, (void *)data);",
          "106:       thread_detach = pthread_detach(thread_metrics);",
          "107:       if (thread_ret || thread_detach) {",
          "108:         y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_module_metrics_increment_counter - Error thread\");",
          "109:         ret = G_ERROR_MEMORY;",
          "110:         o_free(data->name);",
          "111:         o_free(data->label);",
          "112:         o_free(data);",
          "113:       }",
          "114:     } else {",
          "115:       y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_module_metrics_increment_counter - Error allocating resources for struct _glwd_increment_counter_data\");",
          "116:       ret = G_ERROR_MEMORY;",
          "117:     }",
          "118:   } else {",
          "119:     y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_module_metrics_increment_counter - Error input values\");",
          "120:     ret = G_ERROR_PARAM;",
          "121:   }",
          "122:   return ret;",
          "123: }",
          "125: void free_glwd_metrics(void * data) {",
          "126:   struct _glwd_metric * glwd_metrics = (struct _glwd_metric *)data;",
          "127:   size_t i;",
          "129:   y_log_message(Y_LOG_LEVEL_DEBUG, \"Close metric %s\", glwd_metrics->name);",
          "130:   if (glwd_metrics != NULL) {",
          "131:     o_free(glwd_metrics->name);",
          "132:     o_free(glwd_metrics->help);",
          "133:     for (i=0; i<glwd_metrics->data_size; i++) {",
          "134:       o_free(glwd_metrics->data[i].label);",
          "135:     }",
          "136:     o_free(glwd_metrics->data);",
          "137:     o_free(glwd_metrics);",
          "138:   }",
          "139: }",
          "141: int glewlwyd_metrics_add_metric(struct config_elements * config, const char * name, const char * help) {",
          "142:   struct _glwd_metric * glwd_metrics;",
          "143:   int ret;",
          "145:   if (config->metrics_endpoint) {",
          "146:     if (o_strlen(name)) {",
          "147:       if ((glwd_metrics = o_malloc(sizeof(struct _glwd_metric))) != NULL) {",
          "148:         glwd_metrics->name = o_strdup(name);",
          "149:         glwd_metrics->help = o_strdup(help);",
          "150:         glwd_metrics->data_size = 0;",
          "151:         glwd_metrics->data = NULL;",
          "152:         pointer_list_append(&config->metrics_list, glwd_metrics);",
          "153:       } else {",
          "154:         ret = G_ERROR_MEMORY;",
          "155:       }",
          "156:     } else {",
          "157:       ret = G_ERROR_PARAM;",
          "158:     }",
          "159:   } else {",
          "160:     ret = G_OK;",
          "161:   }",
          "162:   return ret;",
          "163: }",
          "165: int glewlwyd_metrics_init(struct config_elements * config) {",
          "166:   pthread_mutexattr_t mutexattr;",
          "167:   int ret = G_OK;",
          "169:   pointer_list_init(&config->metrics_list);",
          "170:   pthread_mutexattr_init ( &mutexattr );",
          "171:   pthread_mutexattr_settype( &mutexattr, PTHREAD_MUTEX_RECURSIVE );",
          "172:   if (pthread_mutex_init(&config->metrics_lock, &mutexattr) != 0) {",
          "173:     ret = GLEWLWYD_ERROR;",
          "174:   }",
          "175:   pthread_mutexattr_destroy(&mutexattr);",
          "176:   return ret;",
          "177: }",
          "179: void glewlwyd_metrics_close(struct config_elements * config) {",
          "180:   if (config->metrics_endpoint) {",
          "181:     y_log_message(Y_LOG_LEVEL_DEBUG, \"Close metrics\");",
          "182:     pointer_list_clean_free(&config->metrics_list, &free_glwd_metrics);",
          "183:     pthread_mutex_destroy(&config->metrics_lock);",
          "184:   }",
          "185: }",
          "",
          "---------------"
        ],
        "src/module.c||src/module.c": [
          "File: src/module.c -> src/module.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "760:           if (pointer_list_append(config->user_auth_scheme_module_instance_list, cur_instance)) {",
          "761:             j_result = module->user_auth_scheme_module_init(config->config_m, json_object_get(j_module, \"parameters\"), cur_instance->name, &cur_instance->cls);",
          "762:             if (check_result_value(j_result, G_OK)) {",
          "763:               cur_instance->enabled = 1;",
          "764:               j_return = json_pack(\"{si}\", \"result\", G_OK);",
          "765:             } else if (check_result_value(j_result, G_ERROR_PARAM)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "763:               glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 0, \"scheme_type\", module->name, \"scheme_name\", cur_instance->name, NULL);",
          "764:               glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 0, \"scheme_type\", module->name, \"scheme_name\", cur_instance->name, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "892:       if (!instance->enabled) {",
          "893:         j_result = instance->module->user_auth_scheme_module_init(config->config_m, json_object_get(json_object_get(j_module, \"module\"), \"parameters\"), instance->name, &instance->cls);",
          "894:         if (check_result_value(j_result, G_OK)) {",
          "895:           instance->enabled = 1;",
          "896:           json_object_set(json_object_get(j_module, \"module\"), \"enabled\", json_true());",
          "897:           if (set_user_auth_scheme_module(config, name, json_object_get(j_module, \"module\")) == G_OK) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "897:           glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 0, \"scheme_type\", instance->module->name, \"scheme_name\", instance->name, NULL);",
          "898:           glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 0, \"scheme_type\", instance->module->name, \"scheme_name\", instance->name, NULL);",
          "",
          "---------------"
        ],
        "src/webservice.c||src/webservice.c": [
          "File: src/webservice.c -> src/webservice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:               y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with password\", json_string_value(json_object_get(j_param, \"username\")));",
          "273:             }",
          "274:             o_free(session_uid);",
          "275:           } else {",
          "276:             if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {",
          "277:               y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", json_string_value(json_object_get(j_param, \"username\")), ip_source);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID, 1, NULL);",
          "276:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 1, \"scheme_type\", \"password\", NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:             }",
          "282:             o_free(session_uid);",
          "283:             response->status = 401;",
          "284:           }",
          "285:           json_decref(j_result);",
          "286:         } else if (json_object_get(j_param, \"password\") != NULL && !json_is_string(json_object_get(j_param, \"password\"))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID, 1, NULL);",
          "287:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 1, \"scheme_type\", \"password\", NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "313:           } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {",
          "314:             y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", json_string_value(json_object_get(j_param, \"username\")), ip_source);",
          "315:             response->status = 401;",
          "316:           } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {",
          "317:             response->status = 404;",
          "318:           } else if (check_result_value(j_result, G_OK)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID, 1, NULL);",
          "321:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 1, \"scheme_type\", json_string_value(json_object_get(j_param, \"scheme_type\")), \"scheme_name\", json_string_value(json_object_get(j_param, \"scheme_name\")), NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327:               y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with scheme '%s/%s'\", json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")));",
          "328:             }",
          "329:             o_free(session_uid);",
          "330:           } else {",
          "331:             y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error auth_check_user_scheme\");",
          "332:             response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID, 1, NULL);",
          "337:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 1, \"scheme_type\", json_string_value(json_object_get(j_param, \"scheme_type\")), \"scheme_name\", json_string_value(json_object_get(j_param, \"scheme_name\")), NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2466: int callback_metrics (const struct _u_request * request, struct _u_response * response, void * user_data) {",
          "2467:   UNUSED(request);",
          "2470:   return U_CALLBACK_CONTINUE;",
          "2471: }",
          "",
          "[Removed Lines]",
          "2468:   UNUSED(response);",
          "2469:   UNUSED(user_data);",
          "",
          "[Added Lines]",
          "2476:   struct config_elements * config = (struct config_elements *)user_data;",
          "2477:   size_t i, j;",
          "2478:   char * content = o_strdup(\"# We have seen handsome noble-looking men but I have never seen a man like the one who now stands at the entrance of the gate.\\n\");",
          "2479:   struct _glwd_metric * metric;",
          "2481:   if (!pthread_mutex_lock(&config->metrics_lock)) {",
          "2482:     u_map_put(response->map_header, ULFIUS_HTTP_HEADER_CONTENT, \"text/plain; charset=utf-8\");",
          "2483:     for (i=0; i<pointer_list_size(&config->metrics_list); i++) {",
          "2484:       metric = (struct _glwd_metric *)pointer_list_get_at(&config->metrics_list, i);",
          "2485:       content = mstrcatf(content, \"# HELP %s %s\\n\", metric->name, metric->help);",
          "2486:       content = mstrcatf(content, \"# TYPE %s counter\\n\", metric->name);",
          "2487:       for (j=0; j<metric->data_size; j++) {",
          "2488:         if (metric->data[j].label != NULL) {",
          "2489:           content = mstrcatf(content, \"%s{%s} %zu\\n\", metric->name, metric->data[j].label, metric->data[j].counter);",
          "2490:         } else {",
          "2491:           content = mstrcatf(content, \"%s %zu\\n\", metric->name, metric->data[j].counter);",
          "2492:         }",
          "2493:       }",
          "2494:     }",
          "2495:     ulfius_set_string_body_response(response, 200, content);",
          "2496:     o_free(content);",
          "2497:     pthread_mutex_unlock(&config->metrics_lock);",
          "2498:   } else {",
          "2499:     y_log_message(Y_LOG_LEVEL_ERROR, \"callback_metrics - Error lock\");",
          "2500:     response->status = 500;",
          "2501:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e618328e5e56219f4cc0a9db4af5d4177586d4ef",
      "candidate_info": {
        "commit_hash": "e618328e5e56219f4cc0a9db4af5d4177586d4ef",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/e618328e5e56219f4cc0a9db4af5d4177586d4ef",
        "files": [
          "src/glewlwyd-common.h",
          "src/glewlwyd.c",
          "src/glewlwyd.h",
          "src/metrics.c",
          "src/module.c",
          "src/plugin.c",
          "src/plugin/protocol_oauth2.c",
          "src/plugin/protocol_oidc.c",
          "src/plugin/register.c",
          "src/webservice.c"
        ],
        "message": "Add prometheus metrics management, closes #181",
        "before_after_code_files": [
          "src/glewlwyd-common.h||src/glewlwyd-common.h",
          "src/glewlwyd.c||src/glewlwyd.c",
          "src/glewlwyd.h||src/glewlwyd.h",
          "src/metrics.c||src/metrics.c",
          "src/module.c||src/module.c",
          "src/plugin.c||src/plugin.c",
          "src/plugin/protocol_oauth2.c||src/plugin/protocol_oauth2.c",
          "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c",
          "src/plugin/register.c||src/plugin/register.c",
          "src/webservice.c||src/webservice.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/webservice.c||src/webservice.c"
          ],
          "candidate": [
            "src/webservice.c||src/webservice.c"
          ]
        }
      },
      "candidate_diff": {
        "src/glewlwyd-common.h||src/glewlwyd-common.h": [
          "File: src/glewlwyd-common.h -> src/glewlwyd-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "388:   json_t * (* glewlwyd_plugin_callback_scheme_register_get)(struct config_plugin * config, const char * mod_name, const struct _u_request * http_request, const char * username);",
          "389:   int      (* glewlwyd_plugin_callback_scheme_deregister)(struct config_plugin * config, const char * mod_name, const char * username);",
          "390:   int      (* glewlwyd_plugin_callback_scheme_can_use)(struct config_plugin * config, const char * mod_name, const char * username);",
          "393:   char   * (* glewlwyd_callback_get_plugin_external_url)(struct config_plugin * config, const char * name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393:   int      (* glewlwyd_plugin_callback_metrics_add_metric)(struct config_plugin * config, const char * name, const char * help);",
          "394:   int      (* glewlwyd_plugin_callback_metrics_increment_counter)(struct config_plugin * config, const char * name, size_t inc, ...);",
          "",
          "---------------"
        ],
        "src/glewlwyd.c||src/glewlwyd.c": [
          "File: src/glewlwyd.c -> src/glewlwyd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   config->config_p->glewlwyd_plugin_callback_scheme_can_use = &glewlwyd_plugin_callback_scheme_can_use;",
          "111:   config->config_p->glewlwyd_plugin_callback_get_scheme_list = &glewlwyd_plugin_callback_get_scheme_list;",
          "112:   config->config_p->glewlwyd_plugin_callback_get_scheme_module = &glewlwyd_plugin_callback_get_scheme_module;",
          "115:   config->config_m->external_url = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:   config->config_p->glewlwyd_plugin_callback_metrics_add_metric = &glewlwyd_plugin_callback_metrics_add_metric;",
          "114:   config->config_p->glewlwyd_plugin_callback_metrics_increment_counter = &glewlwyd_plugin_callback_metrics_increment_counter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291:   glewlwyd_metrics_add_metric(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, \"Total number of successful authentication by scheme\");",
          "292:   glewlwyd_metrics_add_metric(config, GLWD_METRICS_AUTH_USER_INVALID, \"Total number of invalid authentication\");",
          "293:   glewlwyd_metrics_add_metric(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, \"Total number of invalid authentication by scheme\");",
          "300:   config->config_m->external_url = config->external_url;",
          "",
          "[Removed Lines]",
          "294:   glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID, 0, NULL);",
          "295:   glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID, 0, NULL);",
          "296:   glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 0, \"scheme_type\", \"password\", NULL);",
          "297:   glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 0, \"scheme_type\", \"password\", NULL);",
          "",
          "[Added Lines]",
          "296:   glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID, 0, NULL);",
          "297:   glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID, 0, NULL);",
          "298:   glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 0, \"scheme_type\", \"password\", NULL);",
          "299:   glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 0, \"scheme_type\", \"password\", NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "480:       ulfius_add_endpoint_by_val(config->instance_metrics, \"GET\", NULL, \"*\", GLEWLWYD_CALLBACK_PRIORITY_AUTHENTICATION, &callback_glewlwyd_check_admin_session, (void*)config);",
          "481:     }",
          "482:     ulfius_add_endpoint_by_val(config->instance_metrics, \"GET\", NULL, \"*\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_metrics, (void*)config);",
          "483:     ulfius_set_default_endpoint(config->instance_metrics, &callback_default, (void*)config);",
          "484:     if (ulfius_start_framework(config->instance_metrics) != U_OK) {",
          "485:       y_log_message(Y_LOG_LEVEL_ERROR, \"Error starting metrics webservice instance_metrics\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "485:     ulfius_add_endpoint_by_val(config->instance_metrics, \"GET\", NULL, \"*\", GLEWLWYD_CALLBACK_PRIORITY_COMPRESSION, &callback_http_compression, &http_comression_config);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2188:                 if (j_parameters != NULL) {",
          "2189:                   j_init = module->user_auth_scheme_module_init(config->config_m, j_parameters, cur_instance->name, &cur_instance->cls);",
          "2190:                   if (check_result_value(j_init, G_OK)) {",
          "2193:                     cur_instance->enabled = 1;",
          "2194:                   } else {",
          "2195:                     y_log_message(Y_LOG_LEVEL_ERROR, \"load_user_auth_scheme_module_instance_list - Error init module %s/%s\", module->name, json_string_value(json_object_get(j_instance, \"name\")));",
          "",
          "[Removed Lines]",
          "2191:                     glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 0, \"scheme_type\", module->name, \"scheme_name\", cur_instance->name, NULL);",
          "2192:                     glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 0, \"scheme_type\", module->name, \"scheme_name\", cur_instance->name, NULL);",
          "",
          "[Added Lines]",
          "2194:                     glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 0, \"scheme_type\", module->name, \"scheme_name\", cur_instance->name, NULL);",
          "2195:                     glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 0, \"scheme_type\", module->name, \"scheme_name\", cur_instance->name, NULL);",
          "",
          "---------------"
        ],
        "src/glewlwyd.h||src/glewlwyd.h": [
          "File: src/glewlwyd.h -> src/glewlwyd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "294: json_t * glewlwyd_plugin_callback_scheme_register_get(struct config_plugin * config, const char * mod_name, const struct _u_request * http_request, const char * username);",
          "295: int glewlwyd_plugin_callback_scheme_can_use(struct config_plugin * config, const char * mod_name, const char * username);",
          "296: int glewlwyd_plugin_callback_scheme_deregister(struct config_plugin * config, const char * mod_name, const char * username);",
          "299: json_t * get_user_list(struct config_elements * config, const char * pattern, size_t offset, size_t limit, const char * source);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297: int glewlwyd_plugin_callback_metrics_add_metric(struct config_plugin * config, const char * name, const char * help);",
          "298: int glewlwyd_plugin_callback_metrics_increment_counter(struct config_plugin * config, const char * name, size_t inc, ...);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: int glewlwyd_metrics_init(struct config_elements * config);",
          "337: void free_glwd_metrics(void * data);",
          "338: int glewlwyd_metrics_add_metric(struct config_elements * config, const char * name, const char * help);",
          "342: int callback_glewlwyd_check_user_session (const struct _u_request * request, struct _u_response * response, void * user_data);",
          "",
          "[Removed Lines]",
          "339: int glewlwyd_metrics_increment_counter(struct config_elements * config, const char * name, size_t inc, ...);",
          "",
          "[Added Lines]",
          "341: int glewlwyd_metrics_increment_counter_va(struct config_elements * config, const char * name, size_t inc, ...);",
          "342: int glewlwyd_metrics_increment_counter(struct config_elements * config, const char * name, const char * label, size_t inc);",
          "",
          "---------------"
        ],
        "src/metrics.c||src/metrics.c": [
          "File: src/metrics.c -> src/metrics.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include \"glewlwyd.h\"",
          "30: struct _glwd_increment_counter_data {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <sched.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   pthread_exit(NULL);",
          "73: }",
          "76:   va_list vl;",
          "77:   const char * label_arg;",
          "78:   char * label = NULL;",
          "79:   int ret = G_OK, flag = 0;",
          "84:   if (config != NULL && o_strlen(name)) {",
          "85:     va_start(vl, inc);",
          "",
          "[Removed Lines]",
          "75: int glewlwyd_metrics_increment_counter(struct config_elements * config, const char * name, size_t inc, ...) {",
          "80:   struct _glwd_increment_counter_data * data;",
          "81:   pthread_t thread_metrics;",
          "82:   int thread_ret, thread_detach;",
          "",
          "[Added Lines]",
          "77: int glewlwyd_metrics_increment_counter(struct config_elements * config, const char * name, const char * label, size_t inc) {",
          "78:   struct _glwd_increment_counter_data * data;",
          "79:   pthread_t thread_metrics;",
          "80:   int thread_ret, thread_detach;",
          "81:   pthread_attr_t attr;",
          "82:   struct sched_param param;",
          "83:   int ret;",
          "85:   if (config != NULL && o_strlen(name)) {",
          "86:     if ((data = o_malloc(sizeof(struct _glwd_increment_counter_data))) != NULL) {",
          "87:       data->config = config;",
          "88:       data->name = o_strdup(name);",
          "89:       data->label = o_strdup(label);",
          "90:       data->inc = inc;",
          "91:       pthread_attr_init (&attr);",
          "92:       pthread_attr_getschedparam (&attr, &param);",
          "93:       param.sched_priority = 0;",
          "94:       pthread_attr_setschedparam (&attr, &param);",
          "95:       thread_ret = pthread_create(&thread_metrics, &attr, glewlwyd_metrics_increment_counter_thread, (void *)data);",
          "96:       thread_detach = pthread_detach(thread_metrics);",
          "97:       if (thread_ret || thread_detach) {",
          "98:         y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_metrics_increment_counter - Error thread\");",
          "99:         ret = G_ERROR_MEMORY;",
          "100:         o_free(data->name);",
          "101:         o_free(data->label);",
          "102:         o_free(data);",
          "103:       } else {",
          "104:         ret = G_OK;",
          "105:       }",
          "106:     } else {",
          "107:       y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_metrics_increment_counter - Error allocating resources for struct _glwd_increment_counter_data\");",
          "108:       ret = G_ERROR_MEMORY;",
          "109:     }",
          "110:   } else {",
          "111:     y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_metrics_increment_counter - Error input values\");",
          "112:     ret = G_ERROR_PARAM;",
          "113:   }",
          "114:   return ret;",
          "115: }",
          "117: int glewlwyd_metrics_increment_counter_va(struct config_elements * config, const char * name, size_t inc, ...) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:     }",
          "98:     va_end(vl);",
          "118:   } else {",
          "120:     ret = G_ERROR_PARAM;",
          "121:   }",
          "122:   return ret;",
          "",
          "[Removed Lines]",
          "100:     if ((data = o_malloc(sizeof(struct _glwd_increment_counter_data))) != NULL) {",
          "101:       data->config = config;",
          "102:       data->name = o_strdup(name);",
          "103:       data->label = label;",
          "104:       data->inc = inc;",
          "105:       thread_ret = pthread_create(&thread_metrics, NULL, glewlwyd_metrics_increment_counter_thread, (void *)data);",
          "106:       thread_detach = pthread_detach(thread_metrics);",
          "107:       if (thread_ret || thread_detach) {",
          "108:         y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_module_metrics_increment_counter - Error thread\");",
          "109:         ret = G_ERROR_MEMORY;",
          "110:         o_free(data->name);",
          "111:         o_free(data->label);",
          "112:         o_free(data);",
          "113:       }",
          "114:     } else {",
          "115:       y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_module_metrics_increment_counter - Error allocating resources for struct _glwd_increment_counter_data\");",
          "116:       ret = G_ERROR_MEMORY;",
          "117:     }",
          "119:     y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_module_metrics_increment_counter - Error input values\");",
          "",
          "[Added Lines]",
          "139:     ret = glewlwyd_metrics_increment_counter(config, name, label, inc);",
          "140:     o_free(label);",
          "142:     y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_metrics_increment_counter_va - Error input values\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "126:   struct _glwd_metric * glwd_metrics = (struct _glwd_metric *)data;",
          "127:   size_t i;",
          "130:   if (glwd_metrics != NULL) {",
          "131:     o_free(glwd_metrics->name);",
          "132:     o_free(glwd_metrics->help);",
          "",
          "[Removed Lines]",
          "129:   y_log_message(Y_LOG_LEVEL_DEBUG, \"Close metric %s\", glwd_metrics->name);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "179: void glewlwyd_metrics_close(struct config_elements * config) {",
          "180:   if (config->metrics_endpoint) {",
          "182:     pointer_list_clean_free(&config->metrics_list, &free_glwd_metrics);",
          "183:     pthread_mutex_destroy(&config->metrics_lock);",
          "184:   }",
          "",
          "[Removed Lines]",
          "181:     y_log_message(Y_LOG_LEVEL_DEBUG, \"Close metrics\");",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/module.c||src/module.c": [
          "File: src/module.c -> src/module.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "760:           if (pointer_list_append(config->user_auth_scheme_module_instance_list, cur_instance)) {",
          "761:             j_result = module->user_auth_scheme_module_init(config->config_m, json_object_get(j_module, \"parameters\"), cur_instance->name, &cur_instance->cls);",
          "762:             if (check_result_value(j_result, G_OK)) {",
          "765:               cur_instance->enabled = 1;",
          "766:               j_return = json_pack(\"{si}\", \"result\", G_OK);",
          "767:             } else if (check_result_value(j_result, G_ERROR_PARAM)) {",
          "",
          "[Removed Lines]",
          "763:               glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 0, \"scheme_type\", module->name, \"scheme_name\", cur_instance->name, NULL);",
          "764:               glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 0, \"scheme_type\", module->name, \"scheme_name\", cur_instance->name, NULL);",
          "",
          "[Added Lines]",
          "763:               glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 0, \"scheme_type\", module->name, \"scheme_name\", cur_instance->name, NULL);",
          "764:               glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 0, \"scheme_type\", module->name, \"scheme_name\", cur_instance->name, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "894:       if (!instance->enabled) {",
          "895:         j_result = instance->module->user_auth_scheme_module_init(config->config_m, json_object_get(json_object_get(j_module, \"module\"), \"parameters\"), instance->name, &instance->cls);",
          "896:         if (check_result_value(j_result, G_OK)) {",
          "899:           instance->enabled = 1;",
          "900:           json_object_set(json_object_get(j_module, \"module\"), \"enabled\", json_true());",
          "901:           if (set_user_auth_scheme_module(config, name, json_object_get(j_module, \"module\")) == G_OK) {",
          "",
          "[Removed Lines]",
          "897:           glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 0, \"scheme_type\", instance->module->name, \"scheme_name\", instance->name, NULL);",
          "898:           glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 0, \"scheme_type\", instance->module->name, \"scheme_name\", instance->name, NULL);",
          "",
          "[Added Lines]",
          "897:           glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 0, \"scheme_type\", instance->module->name, \"scheme_name\", instance->name, NULL);",
          "898:           glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 0, \"scheme_type\", instance->module->name, \"scheme_name\", instance->name, NULL);",
          "",
          "---------------"
        ],
        "src/plugin.c||src/plugin.c": [
          "File: src/plugin.c -> src/plugin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "605:   }",
          "606:   return ret;",
          "607: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "609: int glewlwyd_plugin_callback_metrics_add_metric(struct config_plugin * config, const char * name, const char * help) {",
          "610:   if (config != NULL) {",
          "611:     return glewlwyd_metrics_add_metric(config->glewlwyd_config, name, help);",
          "612:   } else {",
          "613:     return G_ERROR_PARAM;",
          "614:   }",
          "615: }",
          "617: int glewlwyd_plugin_callback_metrics_increment_counter(struct config_plugin * config, const char * name, size_t inc, ...) {",
          "618:   va_list vl;",
          "619:   const char * label_arg;",
          "620:   char * label = NULL;",
          "621:   int ret = G_OK, flag = 0;",
          "623:   if (config != NULL && o_strlen(name)) {",
          "624:     va_start(vl, inc);",
          "625:     for (label_arg = va_arg(vl, const char *); label_arg != NULL && ret == G_OK; label_arg = va_arg(vl, const char *)) {",
          "626:       if (!flag) {",
          "627:         if (label == NULL) {",
          "628:           label = msprintf(\"%s=\", label_arg);",
          "629:         } else {",
          "630:           label = mstrcatf(label, \", %s=\", label_arg);",
          "631:         }",
          "632:       } else {",
          "633:         label = mstrcatf(label, \"%s\", label_arg);",
          "634:       }",
          "635:       flag = !flag;",
          "636:     }",
          "637:     va_end(vl);",
          "639:     ret = glewlwyd_metrics_increment_counter(config->glewlwyd_config, name, label, inc);",
          "640:     o_free(label);",
          "641:   } else {",
          "642:     y_log_message(Y_LOG_LEVEL_ERROR, \"glewlwyd_plugin_callback_metrics_increment_counter - Error input values\");",
          "643:     ret = G_ERROR_PARAM;",
          "644:   }",
          "645:   return ret;",
          "646: }",
          "",
          "---------------"
        ],
        "src/plugin/protocol_oauth2.c||src/plugin/protocol_oauth2.c": [
          "File: src/plugin/protocol_oauth2.c -> src/plugin/protocol_oauth2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION       \"gpg_device_authorization\"",
          "57: #define GLEWLWYD_PLUGIN_OAUTH2_TABLE_DEVICE_AUTHORIZATION_SCOPE \"gpg_device_authorization_scope\"",
          "60: #define GLEWLWYD_AUTHORIZATION_TYPE_AUTHORIZATION_CODE                  0",
          "61: #define GLEWLWYD_AUTHORIZATION_TYPE_IMPLICIT                            1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #define GLWD_METRICS_OAUTH2_CODE                        \"glewlwyd_oauth2_code\"",
          "60: #define GLWD_METRICS_OAUTH2_DEVICE_CODE                 \"glewlwyd_oauth2_device_code\"",
          "61: #define GLWD_METRICS_OAUTH2_REFRESH_TOKEN               \"glewlwyd_oauth2_refresh_token\"",
          "62: #define GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN           \"glewlwyd_oauth2_access_token\"",
          "63: #define GLWD_METRICS_OAUTH2_CLIENT_ACCESS_TOKEN         \"glewlwyd_oauth2_client_token\"",
          "64: #define GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT         \"glewlwyd_oauth2_unauthorized_client\"",
          "65: #define GLWD_METRICS_OAUTH2_INVALID_CODE                \"glewlwyd_oauth2_invalid_code\"",
          "66: #define GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE         \"glewlwyd_oauth2_invalid_device_code\"",
          "67: #define GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN       \"glewlwyd_oauth2_invalid_refresh_token\"",
          "68: #define GLWD_METRICS_OAUTH2_INVALID_ACCESS_TOKEN        \"glewlwyd_oauth2_invalid_acccess_token\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2148:                                                scope);",
          "2149:                             ulfius_set_json_body_response(response, 200, j_body);",
          "2150:                             json_decref(j_body);",
          "2151:                           } else {",
          "2152:                             y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oauth2 - Error serialize_access_token\");",
          "2153:                             j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2162:                             config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"device_code\", NULL);",
          "2163:                             config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"device_code\", NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2252:       j_body = json_pack(\"{ss}\", \"error\", \"unauthorized_client\");",
          "2253:       ulfius_set_json_body_response(response, 403, j_body);",
          "2254:       json_decref(j_body);",
          "2255:     }",
          "2256:     json_decref(j_client);",
          "2257:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2268:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2376:                     ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "2377:                     response->status = 302;",
          "2378:                     o_free(redirect_url);",
          "2379:                   } else {",
          "2380:                     redirect_url = msprintf(\"%s%serror=server_error\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"));",
          "2381:                     ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2393:                     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_CODE, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2461:     redirect_url = msprintf(\"%s%serror=unauthorized_client%s%s\", u_map_get(request->map_url, \"redirect_uri\"), (o_strchr(u_map_get(request->map_url, \"redirect_uri\"), '?')!=NULL?\"&\":\"?\"), (u_map_get(request->map_url, \"state\")!=NULL?\"&state=\":\"\"), (u_map_get(request->map_url, \"state\")!=NULL?u_map_get(request->map_url, \"state\"):\"\"));",
          "2462:     ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "2463:     o_free(redirect_url);",
          "2464:   }",
          "2465:   o_free(state_param);",
          "2466:   json_decref(j_client);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2479:     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2523:                                           json_string_value(json_object_get(json_object_get(j_code, \"code\"), \"scope_list\")));",
          "2524:                     ulfius_set_json_body_response(response, 200, j_body);",
          "2525:                     json_decref(j_body);",
          "2526:                   } else {",
          "2527:                     y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - oauth2 - Error disable_authorization_code\");",
          "2528:                     j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2542:                     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);",
          "2543:                     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2568:         j_body = json_pack(\"{ss}\", \"error\", \"invalid_code\");",
          "2569:         ulfius_set_json_body_response(response, 403, j_body);",
          "2570:         json_decref(j_body);",
          "2571:       } else if (check_result_value(j_code, G_ERROR_PARAM)) {",
          "2572:         y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Code invalid at IP Address %s\", get_ip_source(request));",
          "2573:         j_body = json_pack(\"{ss}\", \"error\", \"invalid_request\");",
          "2574:         ulfius_set_json_body_response(response, 403, j_body);",
          "2575:         json_decref(j_body);",
          "2576:       } else {",
          "2577:         j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "2579:         json_decref(j_body);",
          "2580:       }",
          "2581:       json_decref(j_code);",
          "",
          "[Removed Lines]",
          "2578:         ulfius_set_json_body_response(response, 403, j_body);",
          "",
          "[Added Lines]",
          "2589:         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_CODE, 1, \"plugin\", config->name, NULL);",
          "2595:         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_CODE, 1, \"plugin\", config->name, NULL);",
          "2598:         ulfius_set_json_body_response(response, 500, j_body);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2583:       j_body = json_pack(\"{ss}\", \"error\", \"unauthorized_client\");",
          "2584:       ulfius_set_json_body_response(response, 403, j_body);",
          "2585:       json_decref(j_body);",
          "2586:     }",
          "2587:     json_decref(j_client);",
          "2588:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2606:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2825:                                      json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")));",
          "2826:                   ulfius_set_json_body_response(response, 200, j_body);",
          "2827:                   json_decref(j_body);",
          "2828:                 } else {",
          "2829:                   y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_resource_owner_pwd_cred - oauth2 - Error serialize_access_token\");",
          "2830:                   j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2849:                   config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"password\", NULL);",
          "2850:                   config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"password\", NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2942:                                     \"scope\", scope_joined);",
          "2943:               ulfius_set_json_body_response(response, 200, json_body);",
          "2944:               json_decref(json_body);",
          "2945:             } else {",
          "2946:               y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_client_credentials_grant - oauth2 - Error serialize_access_token\");",
          "2947:               response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2968:               config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_CLIENT_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2962:     } else {",
          "2963:       y_log_message(Y_LOG_LEVEL_DEBUG, \"check_auth_type_client_credentials_grant - oauth2 - Error client_id '%s' invalid\", request->auth_basic_user);",
          "2964:       y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", request->auth_basic_user, ip_source);",
          "2965:       response->status = 403;",
          "2966:     }",
          "2967:     json_decref(j_client);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2989:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3040:                                     \"iat\", now);",
          "3041:               ulfius_set_json_body_response(response, 200, json_body);",
          "3042:               json_decref(json_body);",
          "3043:             } else {",
          "3044:               y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh - oauth2 - Error serialize_access_token\");",
          "3045:               response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3068:               config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"refresh_token\", NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3063:     } else if (check_result_value(j_refresh, G_ERROR_NOT_FOUND)) {",
          "3064:       y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Token invalid at IP Address %s\", get_ip_source(request));",
          "3065:       response->status = 400;",
          "3066:     } else {",
          "3067:       y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh - oauth2 - Error validate_refresh_token\");",
          "3068:       response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3092:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3115:     } else if (check_result_value(j_refresh, G_ERROR_NOT_FOUND)) {",
          "3116:       y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Token invalid at IP Address %s\", get_ip_source(request));",
          "3117:       response->status = 400;",
          "3118:     } else {",
          "3119:       y_log_message(Y_LOG_LEVEL_ERROR, \"delete_refresh_token - oauth2 - Error validate_refresh_token\");",
          "3120:       response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3145:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3385:           json_decref(j_body);",
          "3386:           o_free(verification_uri);",
          "3387:           o_free(verification_uri_complete);",
          "3388:       } else {",
          "3389:         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_authorization oauth2 - Error generate_device_authorization\");",
          "3390:         j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3416:           config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_DEVICE_CODE, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3396:       j_body = json_pack(\"{ss}\", \"error\", \"unauthorized_client\");",
          "3397:       ulfius_set_json_body_response(response, 403, j_body);",
          "3398:       json_decref(j_body);",
          "3399:     }",
          "3400:     json_decref(j_client);",
          "3401:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3428:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3437:       ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "3438:       o_free(redirect_url);",
          "3439:       u_map_clean(&param);",
          "3440:     } else {",
          "3441:       y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error u_map_init\");",
          "3442:       response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3470:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3454:               redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);",
          "3455:               ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "3456:               o_free(redirect_url);",
          "3457:             } else {",
          "3458:               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error validate_device_authorization_scope\");",
          "3459:               response->status = 302;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3488:               config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"device_code\", NULL);",
          "3489:               config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"device_code\", NULL);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3491:         redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);",
          "3492:         ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "3493:         o_free(redirect_url);",
          "3494:       } else {",
          "3495:         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oauth2_device_verification - Error validate_device_auth_user_code\");",
          "3496:         response->status = 302;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3527:         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3800:           json_object_set_new(p_config->j_params, \"device-authorization-interval\", json_integer(GLEWLWYD_DEVICE_AUTH_DEFAUT_INTERVAL));",
          "3801:         }",
          "3802:       }",
          "3804:     } while (0);",
          "3805:     json_decref(j_result);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3837:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_CODE, \"Total number of code provided\");",
          "3838:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_DEVICE_CODE, \"Total number of device code provided\");",
          "3839:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, \"Total number of refresh tokens provided\");",
          "3840:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, \"Total number of access tokens provided\");",
          "3841:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_CLIENT_ACCESS_TOKEN, \"Total number of client tokens provided\");",
          "3842:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, \"Total number of unauthorized client attempt\");",
          "3843:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_INVALID_CODE, \"Total number of invalid code\");",
          "3844:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE, \"Total number of invalid device code\");",
          "3845:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN, \"Total number of invalid refresh token\");",
          "3846:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OAUTH2_INVALID_ACCESS_TOKEN, \"Total number of invalid access token\");",
          "3847:       config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_CODE, 0, \"plugin\", name, NULL);",
          "3848:       config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 0, \"plugin\", name, NULL);",
          "3849:       config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, NULL);",
          "3850:       if (json_object_get(p_config->j_params, \"auth-type-code-enabled\") == json_true()) {",
          "3851:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 0, \"plugin\", name, \"response_type\", \"code\", NULL);",
          "3852:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"code\", NULL);",
          "3853:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_INVALID_CODE, 0, \"plugin\", name, NULL);",
          "3854:       }",
          "3855:       if (json_object_get(p_config->j_params, \"auth-type-password-enabled\") == json_true()) {",
          "3856:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 0, \"plugin\", name, \"response_type\", \"password\", NULL);",
          "3857:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"password\", NULL);",
          "3858:       }",
          "3859:       if (json_object_get(p_config->j_params, \"auth-type-client-enabled\") == json_true()) {",
          "3860:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_CLIENT_ACCESS_TOKEN, 0, \"plugin\", name, NULL);",
          "3861:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_UNAUTHORIZED_CLIENT, 0, \"plugin\", name, NULL);",
          "3862:       }",
          "3863:       if (json_object_get(p_config->j_params, \"auth-type-implicit-enabled\") == json_true()) {",
          "3864:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"token\", NULL);",
          "3865:       }",
          "3866:       if (json_object_get(p_config->j_params, \"auth-type-device-enabled\") == json_true()) {",
          "3867:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_DEVICE_CODE, 0, \"plugin\", name, NULL);",
          "3868:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_INVALID_DEVICE_CODE, 0, \"plugin\", name, NULL);",
          "3869:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_REFRESH_TOKEN, 0, \"plugin\", name, \"response_type\", \"device_code\", NULL);",
          "3870:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"device_code\", NULL);",
          "3871:       }",
          "3872:       if (json_object_get(p_config->j_params, \"auth-type-refresh-enabled\") == json_true()) {",
          "3873:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"refresh_token\", NULL);",
          "3874:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_INVALID_REFRESH_TOKEN, 0, \"plugin\", name, NULL);",
          "3875:       }",
          "3876:       if (json_object_get(p_config->j_params, \"introspection-revocation-allowed\") == json_true()) {",
          "3877:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OAUTH2_INVALID_ACCESS_TOKEN, 0, \"plugin\", name, NULL);",
          "3878:       }",
          "",
          "---------------"
        ],
        "src/plugin/protocol_oidc.c||src/plugin/protocol_oidc.c": [
          "File: src/plugin/protocol_oidc.c -> src/plugin/protocol_oidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: #define GLEWLWYD_REFRESH_TOKEN_ONE_USE_CLIENT_DRIVEN 1",
          "136: #define GLEWLWYD_REFRESH_TOKEN_ONE_USE_ALWAYS        2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138: #define GLWD_METRICS_OIDC_CODE                        \"glewlwyd_oidc_code\"",
          "139: #define GLWD_METRICS_OIDC_DEVICE_CODE                 \"glewlwyd_oidc_device_code\"",
          "140: #define GLWD_METRICS_OIDC_ID_TOKEN                    \"glewlwyd_oidc_id_token\"",
          "141: #define GLWD_METRICS_OIDC_REFRESH_TOKEN               \"glewlwyd_oidc_refresh_token\"",
          "142: #define GLWD_METRICS_OIDC_USER_ACCESS_TOKEN           \"glewlwyd_oidc_access_token\"",
          "143: #define GLWD_METRICS_OIDC_CLIENT_ACCESS_TOKEN         \"glewlwyd_oidc_client_token\"",
          "144: #define GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT         \"glewlwyd_oidc_unauthorized_client\"",
          "145: #define GLWD_METRICS_OIDC_INVALID_CODE                \"glewlwyd_oidc_invalid_code\"",
          "146: #define GLWD_METRICS_OIDC_INVALID_DEVICE_CODE         \"glewlwyd_oidc_invalid_device_code\"",
          "147: #define GLWD_METRICS_OIDC_INVALID_REFRESH_TOKEN       \"glewlwyd_oidc_invalid_refresh_token\"",
          "148: #define GLWD_METRICS_OIDC_INVALID_ACCESS_TOKEN        \"glewlwyd_oidc_invalid_acccess_token\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1266:     } else {",
          "1267:       y_log_message(Y_LOG_LEVEL_WARNING, \"jti already used for client %s at IP Address %s\", client_id, ip_source);",
          "1268:       ret = G_ERROR_UNAUTHORIZED;",
          "1269:     }",
          "1270:     json_decref(j_result);",
          "1271:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1281:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4259:             y_log_message(Y_LOG_LEVEL_DEBUG, \"verify_request_signature - jwt has an invalid signature (client_secret), origin: %s\", ip_source);",
          "4260:             y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", client_id, ip_source);",
          "4261:             j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);",
          "4262:           }",
          "4263:           r_jwk_free(jwk);",
          "4264:         } else {",
          "4265:           y_log_message(Y_LOG_LEVEL_DEBUG, \"verify_request_signature - client has no attribute 'client_secret', origin: %s\", ip_source);",
          "4266:           y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", client_id, ip_source);",
          "4267:           j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);",
          "4268:         }",
          "4269:       } else if (alg == R_JWA_ALG_ES256 || alg == R_JWA_ALG_ES384 || alg == R_JWA_ALG_ES512 || alg == R_JWA_ALG_RS256 || alg == R_JWA_ALG_RS384 || alg == R_JWA_ALG_RS512 || alg == R_JWA_ALG_PS256 || alg == R_JWA_ALG_PS384 || alg == R_JWA_ALG_PS512 || alg == R_JWA_ALG_EDDSA) {",
          "4270:         if (json_string_length(json_object_get(json_object_get(j_client, \"client\"), json_string_value(json_object_get(config->j_params, \"client-jwks_uri-parameter\")))) && o_strlen(kid)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4275:             config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "4276:             config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "4283:           config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4295:             y_log_message(Y_LOG_LEVEL_DEBUG, \"verify_request_signature - jwt has an invalid signature (pubkey)\", ip_source);",
          "4296:             y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", client_id, ip_source);",
          "4297:             j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);",
          "4298:           }",
          "4299:           r_jwk_free(jwk);",
          "4300:         } else {",
          "4301:           y_log_message(Y_LOG_LEVEL_DEBUG, \"verify_request_signature - invalid pubkey, origin: %s\", ip_source);",
          "4302:           y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", client_id, ip_source);",
          "4303:           j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);",
          "4304:         }",
          "4305:       } else {",
          "4306:         y_log_message(Y_LOG_LEVEL_DEBUG, \"verify_request_signature - jwt has unsupported algorithm: %s, origin: %s\", r_jwa_alg_to_str(alg), ip_source);",
          "4307:         y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", client_id, ip_source);",
          "4308:         j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);",
          "4309:       }",
          "4310:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4314:             config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "4321:           config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "4327:         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4315:         y_log_message(Y_LOG_LEVEL_DEBUG, \"verify_request_signature - jwt alg is not none although the client is not confidential, origin: %s\", ip_source);",
          "4316:         y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", client_id, ip_source);",
          "4317:         j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);",
          "4318:       }",
          "4319:     }",
          "4320:   } else if (check_result_value(j_client, G_ERROR_NOT_FOUND) || check_result_value(j_client, G_ERROR_PARAM)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4337:         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6125:                                                            json_object_get(json_array_get(j_result, 0), \"authorization_details\"));",
          "6126:                                         ulfius_set_json_body_response(response, 200, j_body);",
          "6127:                                         json_decref(j_body);",
          "6128:                                       } else {",
          "6129:                                         y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oidc - Error encrypt_token_if_required\");",
          "6130:                                         j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6148:                                         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_ID_TOKEN, 1, \"plugin\", \"response_type\", \"device_code\", config->name, NULL);",
          "6149:                                         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_REFRESH_TOKEN, 1, \"plugin\", \"response_type\", \"device_code\", config->name, NULL);",
          "6150:                                         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 1, \"plugin\", \"response_type\", \"device_code\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6182:                           j_body = json_pack(\"{ssss}\", \"error\", \"access_denied\", \"error_description\", \"Invalid DPoP\");",
          "6183:                           ulfius_set_json_body_response(response, 403, j_body);",
          "6184:                           json_decref(j_body);",
          "6185:                         } else {",
          "6186:                           y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_device_code - oidc - Error oidc_verify_dpop_proof\");",
          "6187:                           j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6208:                           config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6281:       j_body = json_pack(\"{ss}\", \"error\", \"unauthorized_client\");",
          "6282:       ulfius_set_json_body_response(response, 403, j_body);",
          "6283:       json_decref(j_body);",
          "6284:     }",
          "6285:     json_decref(j_client);",
          "6286:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6308:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6367:                   } else {",
          "6368:                     j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);",
          "6369:                     y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", u_map_get(http_request->map_post_body, \"client_id\"), ip_source);",
          "6370:                   }",
          "6371:                   gnutls_free(cert_dn.data);",
          "6372:                 } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6395:                     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6426:                 } else {",
          "6427:                   y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", u_map_get(http_request->map_post_body, \"client_id\"), ip_source);",
          "6428:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);",
          "6429:                 }",
          "6430:               }",
          "6431:             } else if (is_client_auth_method_allowed(json_object_get(j_client, \"client\"), GLEWLWYD_CLIENT_AUTH_METHOD_SELF_SIGNED_TLS) && json_object_get(config->j_params, \"client-cert-self-signed-allowed\") == json_true()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6455:                   config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6482:                 } else {",
          "6483:                   y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", u_map_get(http_request->map_post_body, \"client_id\"), ip_source);",
          "6484:                   j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);",
          "6485:                 }",
          "6486:               }",
          "6487:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6512:                   config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7182:   }",
          "7183:   if (ret == U_CALLBACK_UNAUTHORIZED) {",
          "7184:     y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Token invalid at IP Address %s\", get_ip_source(request));",
          "7185:   }",
          "7186:   return ret;",
          "7187: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7213:     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_INVALID_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7234:       ret = callback_check_glewlwyd_oidc_access_token(request, response, (void*)config->client_register_resource_config);",
          "7235:       if (ret == U_CALLBACK_UNAUTHORIZED) {",
          "7236:         y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Token invalid at IP Address %s\", get_ip_source(request));",
          "7237:       }",
          "7238:     }",
          "7239:     json_decref(j_introspect);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7266:         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_INVALID_ACCESS_TOKEN, 1, \"plugin\", config->name, \"endpoint\", \"register\", NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7431:     }",
          "7432:     json_decref(j_assertion);",
          "7433:   }",
          "7434:   return ret;",
          "7435: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7464:   if (ret == U_CALLBACK_UNAUTHORIZED) {",
          "7465:     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_INVALID_ACCESS_TOKEN, 1, \"plugin\", config->name, \"endpoint\", o_strstr(request->url_path, \"/introspect\")!=NULL?\"introspect\":\"revoke\", NULL);",
          "7466:   }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7741:       } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {",
          "7742:         y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc validate_endpoint_auth - error client %s is not allowed to claim scopes '%s'\", client_id, scope);",
          "7743:         y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", client_id, ip_source);",
          "7744:         if (form_post) {",
          "7745:           build_form_post_error_response(map, response, \"error\", \"invalid_scope\", NULL);",
          "7746:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7777:         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8320:                                                           j_authorization_details_processed);",
          "8321:                                     ulfius_set_json_body_response(response, 200, j_body);",
          "8322:                                     json_decref(j_body);",
          "8323:                                   } else {",
          "8324:                                     y_log_message(Y_LOG_LEVEL_ERROR, \"oidc check_auth_type_access_token_request - Error encrypt_token_if_required\");",
          "8325:                                     j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8357:                                     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_ID_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);",
          "8358:                                     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);",
          "8359:                                     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8374:                                                   j_authorization_details_processed);",
          "8375:                             ulfius_set_json_body_response(response, 200, j_body);",
          "8376:                             json_decref(j_body);",
          "8377:                           } else {",
          "8378:                             y_log_message(Y_LOG_LEVEL_ERROR, \"oidc check_auth_type_access_token_request - Error disable_authorization_code\");",
          "8379:                             j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8414:                             config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);",
          "8415:                             config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"code\", NULL);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8436:           j_body = json_pack(\"{ssss}\", \"error\", \"access_denied\", \"error_description\", \"Invalid DPoP\");",
          "8437:           ulfius_set_json_body_response(response, 403, j_body);",
          "8438:           json_decref(j_body);",
          "8439:         } else {",
          "8440:           y_log_message(Y_LOG_LEVEL_ERROR, \"check_auth_type_access_token_request - Error oidc_verify_dpop_proof\");",
          "8441:           j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8478:           config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "8448:         j_body = json_pack(\"{ss}\", \"error\", \"invalid_code\");",
          "8449:         ulfius_set_json_body_response(response, 403, j_body);",
          "8450:         json_decref(j_body);",
          "8451:       }",
          "8452:       json_decref(j_code);",
          "8453:       json_decref(j_claims_request);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8491:         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_INVALID_CODE, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "8455:       j_body = json_pack(\"{ss}\", \"error\", \"unauthorized_client\");",
          "8456:       ulfius_set_json_body_response(response, 403, j_body);",
          "8457:       json_decref(j_body);",
          "8458:     }",
          "8459:     json_decref(j_client);",
          "8460:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8499:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_INVALID_CODE, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "8660:                                                  json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")));",
          "8661:                               ulfius_set_json_body_response(response, 200, j_body);",
          "8662:                               json_decref(j_body);",
          "8663:                             } else {",
          "8664:                               y_log_message(Y_LOG_LEVEL_ERROR, \"oidc check_auth_type_resource_owner_pwd_cred - Error encrypt_token_if_required\");",
          "8665:                               j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8705:                               config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_ID_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"password\", NULL);",
          "8706:                               config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"password\", NULL);",
          "8707:                               config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"password\", NULL);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "8701:                                              json_string_value(json_object_get(json_object_get(j_user, \"user\"), \"scope_list\")));",
          "8702:                           ulfius_set_json_body_response(response, 200, j_body);",
          "8703:                           json_decref(j_body);",
          "8704:                         } else {",
          "8705:                           y_log_message(Y_LOG_LEVEL_ERROR, \"oidc check_auth_type_resource_owner_pwd_cred - Error encrypt_token_if_required\");",
          "8706:                           j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8749:                           config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_REFRESH_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"password\", NULL);",
          "8750:                           config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, \"response_type\", \"password\", NULL);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "8763:       y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc check_auth_type_resource_owner_pwd_cred - Error user '%s'\", username);",
          "8764:       y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", username, ip_source);",
          "8765:       response->status = 403;",
          "8766:     } else {",
          "8767:       y_log_message(Y_LOG_LEVEL_ERROR, \"oidc check_auth_type_resource_owner_pwd_cred - glewlwyd_callback_check_user_valid\");",
          "8768:       response->status = 403;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8813:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "8904:                                         \"scope\", scope_joined);",
          "8905:                   ulfius_set_json_body_response(response, 200, json_body);",
          "8906:                   json_decref(json_body);",
          "8907:                 } else {",
          "8908:                   y_log_message(Y_LOG_LEVEL_ERROR, \"oidc check_auth_type_client_credentials_grant - Error encrypt_token_if_required\");",
          "8909:                   response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8955:                   config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_CLIENT_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "8930:       y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc check_auth_type_client_credentials_grant - Error client_id '%s' invalid\", request->auth_basic_user);",
          "8931:       y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", request->auth_basic_user, ip_source);",
          "8932:       response->status = 403;",
          "8933:     }",
          "8934:     json_decref(j_client);",
          "8935:   } else {",
          "8936:     y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", client_id, ip_source);",
          "8937:     response->status = 403;",
          "8938:   }",
          "8939:   o_free(issued_for);",
          "8940:   return U_CALLBACK_CONTINUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8982:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "8988:     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "9142:         y_log_message(Y_LOG_LEVEL_DEBUG, \"check_pushed_authorization_request - error client %s is not allowed to claim scopes '%s'\", client_id, scope);",
          "9143:         y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", client_id, ip_source);",
          "9144:         response->status = 403;",
          "9145:       } else {",
          "9146:         y_log_message(Y_LOG_LEVEL_ERROR, \"check_pushed_authorization_request - error reduce_scope\");",
          "9147:         response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9196:         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "9321:       } else {",
          "9322:         y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", client_id, ip_source);",
          "9323:         j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);",
          "9324:       }",
          "9325:       json_decref(j_result);",
          "9326:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9376:         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "9330:   } else {",
          "9331:     y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for client_id %s at IP Address %s\", \"(none)\", ip_source);",
          "9332:     j_return = json_pack(\"{si}\", \"result\", G_ERROR_UNAUTHORIZED);",
          "9333:   }",
          "9334:   return j_return;",
          "9335: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9386:     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "9604:                       if ((new_refresh_token_out = encrypt_token_if_required(config, new_refresh_token, json_object_get(j_client, \"client\"), GLEWLWYD_TOKEN_TYPE_REFRESH_TOKEN)) != NULL) {",
          "9605:                         json_object_set_new(json_body, \"refresh_token\", json_string(new_refresh_token_out));",
          "9606:                         ulfius_set_json_body_response(response, 200, json_body);",
          "9607:                       } else {",
          "9608:                         y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh oidc - Error encrypt_token_if_required (1)\");",
          "9609:                         response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9661:                         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "9630:                                           j_authorization_details_processed);",
          "9631:                     ulfius_set_json_body_response(response, 200, json_body);",
          "9632:                     json_decref(json_body);",
          "9633:                   } else {",
          "9634:                     y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh oidc - Error encrypt_token_if_required (3)\");",
          "9635:                     response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9688:                     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "9681:         y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh oidc - Error disable_refresh_token_by_jti\");",
          "9682:       }",
          "9683:       json_decref(j_client);",
          "9684:     } else if (check_result_value(j_refresh, G_ERROR_NOT_FOUND)) {",
          "9685:       y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Token invalid at IP Address %s\", get_ip_source(request));",
          "9686:       response->status = 400;",
          "9687:     } else {",
          "9688:       y_log_message(Y_LOG_LEVEL_ERROR, \"get_access_token_from_refresh oidc - Error validate_refresh_token\");",
          "9689:       response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9740:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_INVALID_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);",
          "9744:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_INVALID_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "9735:         if (!check_result_value(j_client, G_OK) && is_client_auth_method_allowed(json_object_get(j_client, \"client\"), client_auth_method)) {",
          "9736:           y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc delete_refresh_token - client '%s' is invalid, origin: %s\", request->auth_basic_user, ip_source);",
          "9737:           has_issues = 1;",
          "9738:         } else if (request->auth_basic_user == NULL && request->auth_basic_password == NULL && json_object_get(json_object_get(j_client, \"client\"), \"confidential\") == json_true()) {",
          "9739:           y_log_message(Y_LOG_LEVEL_DEBUG, \"oidc delete_refresh_token - client '%s' is invalid or is not confidential, origin: %s\", request->auth_basic_user, ip_source);",
          "9740:           has_issues = 1;",
          "9741:         }",
          "9742:         json_decref(j_client);",
          "9743:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9796:           config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "9800:           config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "9755:     } else if (check_result_value(j_refresh, G_ERROR_NOT_FOUND) || check_result_value(j_refresh, G_ERROR_UNAUTHORIZED)) {",
          "9756:       y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Token invalid at IP Address %s\", get_ip_source(request));",
          "9757:       response->status = 400;",
          "9758:     } else {",
          "9759:       y_log_message(Y_LOG_LEVEL_ERROR, \"oidc delete_refresh_token - Error validate_refresh_token\");",
          "9760:       response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9818:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_INVALID_REFRESH_TOKEN, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "9779:     j_introspect = get_token_metadata(config, (u_map_get_case(request->map_header, HEADER_AUTHORIZATION) + o_strlen(HEADER_PREFIX_BEARER)), \"access_token\", NULL);",
          "9780:     if (check_result_value(j_introspect, G_OK) && json_object_get(json_object_get(j_introspect, \"token\"), \"active\") == json_true()) {",
          "9781:       ret = callback_check_glewlwyd_oidc_access_token(request, response, (void*)config->oidc_resource_config);",
          "9782:     }",
          "9783:     json_decref(j_introspect);",
          "9784:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9843:     } else {",
          "9844:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_INVALID_ACCESS_TOKEN, 1, \"plugin\", config->name, \"endpoint\", \"userinfo\", NULL);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "10237:                 ret = G_ERROR;",
          "10238:               }",
          "10239:               o_free(authorization_code_out);",
          "10240:             }",
          "10241:           } else {",
          "10242:             if (redirect_uri != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10303:               config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_CODE, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "10313:                   ret = G_ERROR;",
          "10314:                 }",
          "10315:                 o_free(access_token_out);",
          "10316:               }",
          "10317:             } else {",
          "10318:               y_log_message(Y_LOG_LEVEL_ERROR, \"oidc check_auth_type_implicit_grant - Error generate_access_token\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10380:                 config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "10390:                   ret = G_ERROR;",
          "10391:                 }",
          "10392:                 o_free(id_token_out);",
          "10393:               }",
          "10394:             } else {",
          "10395:               y_log_message(Y_LOG_LEVEL_ERROR, \"oidc check_auth_type_access_token_request - Error generate_id_token\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10458:                 config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_ID_TOKEN, 1, \"plugin\", config->name, \"response_type\", response_type, NULL);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "11022:             j_body = json_pack(\"{ss}\", \"error\", \"invalid_scope\");",
          "11023:             ulfius_set_json_body_response(response, 403, j_body);",
          "11024:             json_decref(j_body);",
          "11025:           } else {",
          "11026:             y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oidc_device_authorization - error reduce_scope\");",
          "11027:             j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11091:             config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "11082:                 json_decref(j_body);",
          "11083:                 o_free(verification_uri);",
          "11084:                 o_free(verification_uri_complete);",
          "11085:             } else {",
          "11086:               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oidc_device_authorization oidc - Error generate_device_authorization\");",
          "11087:               j_body = json_pack(\"{ss}\", \"error\", \"server_error\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11152:                 config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_DEVICE_CODE, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "11096:         j_body = json_pack(\"{ss}\", \"error\", \"unauthorized_client\");",
          "11097:         ulfius_set_json_body_response(response, 403, j_body);",
          "11098:         json_decref(j_body);",
          "11099:       }",
          "11100:       json_decref(j_client);",
          "11101:     } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11167:         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "11148:       ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "11149:       o_free(redirect_url);",
          "11150:       u_map_clean(&param);",
          "11151:     } else {",
          "11152:       y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oidc_device_verification - Error u_map_init\");",
          "11153:       response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11220:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_INVALID_DEVICE_CODE, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "11202:         redirect_url = get_login_url(config, request, \"device\", NULL, NULL, &param);",
          "11203:         ulfius_add_header_to_response(response, \"Location\", redirect_url);",
          "11204:         o_free(redirect_url);",
          "11205:       } else {",
          "11206:         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_oidc_device_verification - Error validate_device_auth_user_code\");",
          "11207:         u_map_put(&param, \"prompt\", \"deviceServerError\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11275:         config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_OIDC_INVALID_DEVICE_CODE, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "12165:         j_return = json_pack(\"{si}\", \"result\", G_ERROR);",
          "12166:         break;",
          "12167:       }",
          "12168:     } while (0);",
          "12169:     json_decref(j_result);",
          "12170:     r_jwk_free(jwk_pub);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12239:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OIDC_CODE, \"Total number of code provided\");",
          "12240:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OIDC_DEVICE_CODE, \"Total number of device code provided\");",
          "12241:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OIDC_ID_TOKEN, \"Total number of id_token provided\");",
          "12242:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OIDC_REFRESH_TOKEN, \"Total number of refresh tokens provided\");",
          "12243:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, \"Total number of access tokens provided\");",
          "12244:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OIDC_CLIENT_ACCESS_TOKEN, \"Total number of client tokens provided\");",
          "12245:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, \"Total number of unauthorized client attempt\");",
          "12246:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OIDC_INVALID_CODE, \"Total number of invalid code\");",
          "12247:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OIDC_INVALID_DEVICE_CODE, \"Total number of invalid device code\");",
          "12248:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OIDC_INVALID_REFRESH_TOKEN, \"Total number of invalid refresh token\");",
          "12249:       config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_OIDC_INVALID_ACCESS_TOKEN, \"Total number of invalid access token\");",
          "12250:       config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_CODE, 0, \"plugin\", name, NULL);",
          "12251:       config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_ID_TOKEN, 0, \"plugin\", name, NULL);",
          "12252:       config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_REFRESH_TOKEN, 0, \"plugin\", name, NULL);",
          "12253:       config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 0, \"plugin\", name, NULL);",
          "12254:       if (json_object_get(p_config->j_params, \"auth-type-code-enabled\") == json_true()) {",
          "12255:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_ID_TOKEN, 0, \"plugin\", name, \"response_type\", \"code\", NULL);",
          "12256:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_REFRESH_TOKEN, 0, \"plugin\", name, \"response_type\", \"code\", NULL);",
          "12257:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"code\", NULL);",
          "12258:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_INVALID_CODE, 0, \"plugin\", name, NULL);",
          "12259:       }",
          "12260:       if (json_object_get(p_config->j_params, \"auth-type-password-enabled\") == json_true()) {",
          "12261:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_ID_TOKEN, 0, \"plugin\", name, \"response_type\", \"password\", NULL);",
          "12262:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_REFRESH_TOKEN, 0, \"plugin\", name, \"response_type\", \"password\", NULL);",
          "12263:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"password\", NULL);",
          "12264:       }",
          "12265:       if (json_object_get(p_config->j_params, \"auth-type-client-enabled\") == json_true()) {",
          "12266:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_CLIENT_ACCESS_TOKEN, 0, \"plugin\", name, NULL);",
          "12267:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_UNAUTHORIZED_CLIENT, 0, \"plugin\", name, NULL);",
          "12268:       }",
          "12269:       if (json_object_get(p_config->j_params, \"auth-type-implicit-enabled\") == json_true()) {",
          "12270:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"token\", NULL);",
          "12271:       }",
          "12272:       if (json_object_get(p_config->j_params, \"auth-type-device-enabled\") == json_true()) {",
          "12273:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_DEVICE_CODE, 0, \"plugin\", name, NULL);",
          "12274:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_INVALID_DEVICE_CODE, 0, \"plugin\", name, NULL);",
          "12275:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_ID_TOKEN, 0, \"plugin\", name, \"response_type\", \"device_code\", NULL);",
          "12276:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_REFRESH_TOKEN, 0, \"plugin\", name, \"response_type\", \"device_code\", NULL);",
          "12277:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"device_code\", NULL);",
          "12278:       }",
          "12279:       if (json_object_get(p_config->j_params, \"auth-type-refresh-enabled\") == json_true()) {",
          "12280:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_USER_ACCESS_TOKEN, 0, \"plugin\", name, \"response_type\", \"refresh_token\", NULL);",
          "12281:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_INVALID_REFRESH_TOKEN, 0, \"plugin\", name, NULL);",
          "12282:       }",
          "12283:       if (json_object_get(p_config->j_params, \"introspection-revocation-allowed\") == json_true()) {",
          "12284:         config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_OIDC_INVALID_ACCESS_TOKEN, 0, \"plugin\", name, NULL);",
          "12285:       }",
          "",
          "---------------"
        ],
        "src/plugin/register.c||src/plugin/register.c": [
          "File: src/plugin/register.c -> src/plugin/register.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #define GLEWLWYD_PLUGIN_REGISTER_TABLE_RESET_CREDENTIALS_SESSION \"gpr_reset_credentials_session\"",
          "45: #define GLEWLWYD_PLUGIN_REGISTER_TABLE_RESET_CREDENTIALS_EMAIL \"gpr_reset_credentials_email\"",
          "47: struct _register_config {",
          "48:   struct config_plugin * glewlwyd_config;",
          "49:   pthread_mutex_t        insert_lock;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #define GLWD_METRICS_REGISTRATION_STARTED        \"glewlwyd_registration_started\"",
          "48: #define GLWD_METRICS_REGISTRATION_COMPLETED      \"glewlwyd_registration_completed\"",
          "49: #define GLWD_METRICS_REGISTRATION_CANCELLED      \"glewlwyd_registration_cancelled\"",
          "50: #define GLWD_METRICS_EMAIL_UPDATED               \"glewlwyd_email_updated\"",
          "51: #define GLWD_METRICS_RESET_CREDENTIALS_STARTED   \"glewlwyd_reset_credentials_started\"",
          "52: #define GLWD_METRICS_RESET_CREDENTIALS_COMPLETED \"glewlwyd_reset_credentials_completed\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1648:                                         \"/\",",
          "1649:                                         config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "1650:                                         0);",
          "1651:         } else if (check_result_value(j_result, G_ERROR_PARAM)) {",
          "1652:           response->status = 400;",
          "1653:         } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1658:           config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_REGISTRATION_STARTED, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1863:                                   \"/\",",
          "1864:                                   config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "1865:                                   0);",
          "1866:   }",
          "1868:   return U_CALLBACK_CONTINUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1874:     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_REGISTRATION_CANCELLED, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2025:                                           config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2026:                                           0);",
          "2027:             y_log_message(Y_LOG_LEVEL_INFO, \"Event register - Plugin '%s' - user '%s' registered, origin: %s\", config->name, json_string_value(json_object_get((json_t *)response->shared_data, \"username\")), get_ip_source(request));",
          "2028:           } else {",
          "2029:             y_log_message(Y_LOG_LEVEL_ERROR, \"callback_register_complete_registration - Error register_user_set\");",
          "2030:             response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2037:             config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_REGISTRATION_COMPLETED, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2102:   } else if (ret != G_OK) {",
          "2103:     y_log_message(Y_LOG_LEVEL_ERROR, \"callback_register_update_email_verify - Error register_update_email_verify\");",
          "2104:     response->status = 500;",
          "2105:   }",
          "2106:   return U_CALLBACK_CONTINUE;",
          "2107: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2115:   } else {",
          "2116:     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_EMAIL_UPDATED, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2185:                                   \"/\",",
          "2186:                                   config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2187:                                   0);",
          "2188:   } else if (res == G_ERROR_PARAM) {",
          "2189:     response->status = 400;",
          "2190:   } else {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2200:     config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_RESET_CREDENTIALS_COMPLETED, 1, \"plugin\", config->name, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2243:                                     config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2244:                                     0);",
          "2245:       y_log_message(Y_LOG_LEVEL_INFO, \"Event register - Plugin '%s' - user '%s' opened a reset credential session with e-mail token, origin: %s\", config->name, json_string_value(json_object_get(j_result, \"username\")), get_ip_source(request));",
          "2246:     } else {",
          "2247:       y_log_message(Y_LOG_LEVEL_ERROR, \"callback_register_reset_credentials_email_verify - Error reset_credentials_create_session\");",
          "2248:       response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2259:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_RESET_CREDENTIALS_STARTED, 1, \"plugin\", config->name, \"verification\", \"email\", NULL);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2286:                                     config->glewlwyd_config->glewlwyd_config->cookie_secure,",
          "2287:                                     0);",
          "2288:       y_log_message(Y_LOG_LEVEL_INFO, \"Event register - Plugin '%s' - user '%s' opened a reset credential session with code, origin: %s\", config->name, json_string_value(json_object_get(j_parameters, \"username\")), get_ip_source(request));",
          "2289:     } else {",
          "2290:       y_log_message(Y_LOG_LEVEL_ERROR, \"callback_register_reset_credentials_code_verify - Error reset_credentials_create_session\");",
          "2291:       response->status = 500;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2303:       config->glewlwyd_config->glewlwyd_plugin_callback_metrics_increment_counter(config->glewlwyd_config, GLWD_METRICS_RESET_CREDENTIALS_STARTED, 1, \"plugin\", config->name, \"verification\", \"code\", NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2612:         if (config->glewlwyd_callback_add_plugin_endpoint(config, \"GET\", name, \"config\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_config, (void*)register_config) == G_OK) {",
          "2613:           if (json_object_get(j_parameters, \"registration\") == json_true() || json_object_get(j_parameters, \"registration\") == NULL) {",
          "2614:             y_log_message(Y_LOG_LEVEL_INFO, \"Add registration endpoints with plugin prefix %s\", name);",
          "2615:             if (config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"username\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_check_username, (void*)register_config) == G_OK &&",
          "2616:                 config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"register\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_register_user, (void*)register_config) == G_OK &&",
          "2617:                 config->glewlwyd_callback_add_plugin_endpoint(config, \"PUT\", name, \"verify\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_send_email_verification, (void*)register_config) == G_OK &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2630:             config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_REGISTRATION_STARTED, \"Total number of registration started\");",
          "2631:             config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_REGISTRATION_COMPLETED, \"Total number of registration completed\");",
          "2632:             config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_REGISTRATION_CANCELLED, \"Total number of registration cancelled\");",
          "2633:             config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_REGISTRATION_STARTED, 0, \"plugin\", name, NULL);",
          "2634:             config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_REGISTRATION_COMPLETED, 0, \"plugin\", name, NULL);",
          "2635:             config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_REGISTRATION_CANCELLED, 0, \"plugin\", name, NULL);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2631:             }",
          "2632:           }",
          "2633:           if (json_object_get(j_parameters, \"update-email\") == json_true()) {",
          "2634:             if (config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"update-email\", GLEWLWYD_CALLBACK_PRIORITY_AUTHENTICATION, &callback_check_glewlwyd_session, (void*)register_config) == G_OK &&",
          "2635:                 config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"update-email\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_update_email_trigger, (void*)register_config) == G_OK &&",
          "2636:                 config->glewlwyd_callback_add_plugin_endpoint(config, \"PUT\", name, \"update-email/:token\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_update_email_verify, (void*)register_config) == G_OK) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2655:             config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_EMAIL_UPDATED, \"Total number of e-mails updated\");",
          "2656:             config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_EMAIL_UPDATED, 0, \"plugin\", name, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2640:             }",
          "2641:           }",
          "2642:           if (json_object_get(j_parameters, \"reset-credentials\") == json_true()) {",
          "2643:             if (config->glewlwyd_callback_add_plugin_endpoint(config, \"*\", name, \"reset-credentials/profile/*\", GLEWLWYD_CALLBACK_PRIORITY_AUTHENTICATION, &callback_register_reset_credentials_check_session, (void*)register_config) == G_OK &&",
          "2644:                 config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"reset-credentials/profile/password\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_reset_credentials_update_password, (void*)register_config) == G_OK &&",
          "2645:                 config->glewlwyd_callback_add_plugin_endpoint(config, \"GET\", name, \"reset-credentials/profile/\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_get_profile, (void*)register_config) == G_OK &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2666:             config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_RESET_CREDENTIALS_STARTED, \"Total number of reset credentials started\");",
          "2667:             config->glewlwyd_plugin_callback_metrics_add_metric(config, GLWD_METRICS_RESET_CREDENTIALS_COMPLETED, \"Total number of reset credentials completed\");",
          "2668:             config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_RESET_CREDENTIALS_COMPLETED, 0, \"plugin\", name, NULL);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2647:                 config->glewlwyd_callback_add_plugin_endpoint(config, \"PUT\", name, \"reset-credentials/profile/scheme/register\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_get_scheme_registration, (void*)register_config) == G_OK &&",
          "2648:                 config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"reset-credentials/profile/scheme/register\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_update_scheme_registration, (void*)register_config) == G_OK &&",
          "2649:                 config->glewlwyd_callback_add_plugin_endpoint(config, \"PUT\", name, \"reset-credentials/profile/scheme/register/canuse\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_canuse_scheme_registration, (void*)register_config) == G_OK &&",
          "2652:               y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init reset-credentials - Error glewlwyd_callback_add_plugin_endpoint\");",
          "2654:             }",
          "2655:             if (json_object_get(j_parameters, \"reset-credentials-email\") == json_true()) {",
          "2656:               if (config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"reset-credentials-email\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_reset_credentials_email_trigger, (void*)register_config) == G_OK &&",
          "2659:                 y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init reset-credentials-email - Error glewlwyd_callback_add_plugin_endpoint\");",
          "2661:               }",
          "2662:             }",
          "2663:             if (json_object_get(j_parameters, \"reset-credentials-code\") == json_true()) {",
          "2664:               if (config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"reset-credentials-code\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_reset_credentials_code_verify, (void*)register_config) == G_OK &&",
          "2665:                   config->glewlwyd_callback_add_plugin_endpoint(config, \"PUT\", name, \"reset-credentials-code\", GLEWLWYD_CALLBACK_PRIORITY_AUTHENTICATION, &callback_check_glewlwyd_session, (void*)register_config) == G_OK &&",
          "2668:                 y_log_message(Y_LOG_LEVEL_ERROR, \"plugin_module_init reset-credentials-code - Error glewlwyd_callback_add_plugin_endpoint\");",
          "2670:               }",
          "2671:             }",
          "2672:           }",
          "",
          "[Removed Lines]",
          "2650:                 config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"reset-credentials/profile/complete\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_reset_credentials_complete_registration, (void*)register_config) == G_OK) {",
          "2651:             } else {",
          "2653:               update_email_ok = 0;",
          "2657:                   config->glewlwyd_callback_add_plugin_endpoint(config, \"PUT\", name, \"reset-credentials-email/:token\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_reset_credentials_email_verify, (void*)register_config) == G_OK) {",
          "2658:               } else {",
          "2660:                 update_email_ok = 0;",
          "2666:                   config->glewlwyd_callback_add_plugin_endpoint(config, \"PUT\", name, \"reset-credentials-code\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_reset_credentials_code_generate, (void*)register_config) == G_OK) {",
          "2667:               } else {",
          "2669:                 update_email_ok = 0;",
          "",
          "[Added Lines]",
          "2676:                 config->glewlwyd_callback_add_plugin_endpoint(config, \"POST\", name, \"reset-credentials/profile/complete\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_reset_credentials_complete_registration, (void*)register_config) != G_OK) {",
          "2678:               reset_credentials_ok = 0;",
          "2681:               config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_RESET_CREDENTIALS_STARTED, 0, \"plugin\", name, \"verification\", \"email\", NULL);",
          "2683:                   config->glewlwyd_callback_add_plugin_endpoint(config, \"PUT\", name, \"reset-credentials-email/:token\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_reset_credentials_email_verify, (void*)register_config) != G_OK) {",
          "2685:                 reset_credentials_ok = 0;",
          "2689:               config->glewlwyd_plugin_callback_metrics_increment_counter(config, GLWD_METRICS_RESET_CREDENTIALS_STARTED, 0, \"plugin\", name, \"verification\", \"code\", NULL);",
          "2692:                   config->glewlwyd_callback_add_plugin_endpoint(config, \"PUT\", name, \"reset-credentials-code\", GLEWLWYD_CALLBACK_PRIORITY_APPLICATION, &callback_register_reset_credentials_code_generate, (void*)register_config) != G_OK) {",
          "2694:                 reset_credentials_ok = 0;",
          "",
          "---------------"
        ],
        "src/webservice.c||src/webservice.c": [
          "File: src/webservice.c -> src/webservice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:               y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with password\", json_string_value(json_object_get(j_param, \"username\")));",
          "273:             }",
          "274:             o_free(session_uid);",
          "277:           } else {",
          "278:             if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {",
          "279:               y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", json_string_value(json_object_get(j_param, \"username\")), ip_source);",
          "",
          "[Removed Lines]",
          "275:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID, 1, NULL);",
          "276:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 1, \"scheme_type\", \"password\", NULL);",
          "",
          "[Added Lines]",
          "275:             glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID, 1, NULL);",
          "276:             glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 1, \"scheme_type\", \"password\", NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:             }",
          "284:             o_free(session_uid);",
          "285:             response->status = 401;",
          "288:           }",
          "289:           json_decref(j_result);",
          "290:         } else if (json_object_get(j_param, \"password\") != NULL && !json_is_string(json_object_get(j_param, \"password\"))) {",
          "",
          "[Removed Lines]",
          "286:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID, 1, NULL);",
          "287:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 1, \"scheme_type\", \"password\", NULL);",
          "",
          "[Added Lines]",
          "286:             glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID, 1, NULL);",
          "287:             glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 1, \"scheme_type\", \"password\", NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "317:           } else if (check_result_value(j_result, G_ERROR_UNAUTHORIZED)) {",
          "318:             y_log_message(Y_LOG_LEVEL_WARNING, \"Security - Authorization invalid for username %s at IP Address %s\", json_string_value(json_object_get(j_param, \"username\")), ip_source);",
          "319:             response->status = 401;",
          "322:           } else if (check_result_value(j_result, G_ERROR_NOT_FOUND)) {",
          "323:             response->status = 404;",
          "324:           } else if (check_result_value(j_result, G_OK)) {",
          "",
          "[Removed Lines]",
          "320:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID, 1, NULL);",
          "321:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 1, \"scheme_type\", json_string_value(json_object_get(j_param, \"scheme_type\")), \"scheme_name\", json_string_value(json_object_get(j_param, \"scheme_name\")), NULL);",
          "",
          "[Added Lines]",
          "320:             glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID, 1, NULL);",
          "321:             glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_INVALID_SCHEME, 1, \"scheme_type\", json_string_value(json_object_get(j_param, \"scheme_type\")), \"scheme_name\", json_string_value(json_object_get(j_param, \"scheme_name\")), NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "333:               y_log_message(Y_LOG_LEVEL_INFO, \"Event - User '%s' authenticated with scheme '%s/%s'\", json_string_value(json_object_get(j_param, \"username\")), json_string_value(json_object_get(j_param, \"scheme_type\")), json_string_value(json_object_get(j_param, \"scheme_name\")));",
          "334:             }",
          "335:             o_free(session_uid);",
          "338:           } else {",
          "339:             y_log_message(Y_LOG_LEVEL_ERROR, \"callback_glewlwyd_user_auth - Error auth_check_user_scheme\");",
          "340:             response->status = 500;",
          "",
          "[Removed Lines]",
          "336:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID, 1, NULL);",
          "337:             glewlwyd_metrics_increment_counter(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 1, \"scheme_type\", json_string_value(json_object_get(j_param, \"scheme_type\")), \"scheme_name\", json_string_value(json_object_get(j_param, \"scheme_name\")), NULL);",
          "",
          "[Added Lines]",
          "336:             glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID, 1, NULL);",
          "337:             glewlwyd_metrics_increment_counter_va(config, GLWD_METRICS_AUTH_USER_VALID_SCHEME, 1, \"scheme_type\", json_string_value(json_object_get(j_param, \"scheme_type\")), \"scheme_name\", json_string_value(json_object_get(j_param, \"scheme_name\")), NULL);",
          "",
          "---------------"
        ]
      }
    }
  ]
}