{
  "cve_id": "CVE-2020-24370",
  "cve_desc": "ldebug.c in Lua 5.4.0 allows a negation overflow and segmentation fault in getlocal and setlocal, as demonstrated by getlocal(3,2^31).",
  "repo": "lua/lua",
  "patch_hash": "a585eae6e7ada1ca9271607a4f48dfb17868ab7b",
  "patch_info": {
    "commit_hash": "a585eae6e7ada1ca9271607a4f48dfb17868ab7b",
    "repo": "lua/lua",
    "commit_url": "https://github.com/lua/lua/commit/a585eae6e7ada1ca9271607a4f48dfb17868ab7b",
    "files": [
      "ldebug.c"
    ],
    "message": "Fixed bug: Negation overflow in getlocal/setlocal",
    "before_after_code_files": [
      "ldebug.c||ldebug.c"
    ]
  },
  "patch_diff": {
    "ldebug.c||ldebug.c": [
      "File: ldebug.c -> ldebug.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "188: static const char *findvararg (CallInfo *ci, int n, StkId *pos) {",
      "189:   if (clLvalue(s2v(ci->func))->p->is_vararg) {",
      "190:     int nextra = ci->u.l.nextraargs;",
      "194:     }",
      "195:   }",
      "",
      "[Removed Lines]",
      "191:     if (n <= nextra) {",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "202:   const char *name = NULL;",
      "203:   if (isLua(ci)) {",
      "206:     else",
      "207:       name = luaF_getlocalname(ci_func(ci)->p, n, currentpc(ci));",
      "208:   }",
      "",
      "[Removed Lines]",
      "205:       return findvararg(ci, -n, pos);",
      "",
      "[Added Lines]",
      "205:       return findvararg(ci, n, pos);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5bc89846721375fe30772eb8c5ab2786f362bf9",
      "candidate_info": {
        "commit_hash": "b5bc89846721375fe30772eb8c5ab2786f362bf9",
        "repo": "lua/lua",
        "commit_url": "https://github.com/lua/lua/commit/b5bc89846721375fe30772eb8c5ab2786f362bf9",
        "files": [
          "ldebug.c"
        ],
        "message": "Fixed bug: Negation overflow in getlocal/setlocal",
        "before_after_code_files": [
          "ldebug.c||ldebug.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "ldebug.c||ldebug.c"
          ],
          "candidate": [
            "ldebug.c||ldebug.c"
          ]
        }
      },
      "candidate_diff": {
        "ldebug.c||ldebug.c": [
          "File: ldebug.c -> ldebug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: static const char *findvararg (CallInfo *ci, int n, StkId *pos) {",
          "135:   int nparams = clLvalue(ci->func)->p->numparams;",
          "138:   else {",
          "141:   }",
          "142: }",
          "",
          "[Removed Lines]",
          "136:   if (n >= cast_int(ci->u.l.base - ci->func) - nparams)",
          "",
          "[Added Lines]",
          "136:   int nvararg = cast_int(ci->u.l.base - ci->func) - nparams;",
          "137:   if (n <= -nvararg)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:   StkId base;",
          "149:   if (isLua(ci)) {",
          "152:     else {",
          "153:       base = ci->u.l.base;",
          "154:       name = luaF_getlocalname(ci_func(ci)->p, n, currentpc(ci));",
          "",
          "[Removed Lines]",
          "151:       return findvararg(ci, -n, pos);",
          "",
          "[Added Lines]",
          "152:       return findvararg(ci, n, pos);",
          "",
          "---------------"
        ]
      }
    }
  ]
}