{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d34fea59e1b72d5da60ca97f3decb84f5ed87ef1",
      "candidate_info": {
        "commit_hash": "d34fea59e1b72d5da60ca97f3decb84f5ed87ef1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d34fea59e1b72d5da60ca97f3decb84f5ed87ef1",
        "files": [
          "Makefile",
          "doc/rss.xml",
          "tools/blog/generate.js"
        ],
        "message": "blog: Generate RSS feeds",
        "before_after_code_files": [
          "tools/blog/generate.js||tools/blog/generate.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/blog/generate.js||tools/blog/generate.js": [
          "File: tools/blog/generate.js -> tools/blog/generate.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: var input = path.resolve(process.argv[2]);",
          "11: var output = path.resolve(process.argv[3]);",
          "12: var template = path.resolve(process.argv[4]);",
          "14: var config = {",
          "15:   postsPerPage: 4",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: var rssTemplate = path.resolve(process.argv[5]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20: fs.readFile(template, 'utf8', function(er, contents) {",
          "21:   if (er) throw er;",
          "22:   template = ejs.compile(contents, template);",
          "24: });",
          "26: function readInput() {",
          "",
          "[Removed Lines]",
          "23:   readInput();",
          "",
          "[Added Lines]",
          "24:   template.filename = 'index.html';",
          "25:   fs.readFile(rssTemplate, 'utf8', function(er, contents) {",
          "26:     if (er) throw er;",
          "27:     rssTemplate = ejs.compile(contents, rssTemplate);",
          "28:     rssTemplate.filename = 'index.xml';",
          "29:     readInput();",
          "30:   });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:   return data;",
          "102: }",
          "105:   data.uri = path.join(data.uri);",
          "106:   uri = path.join(uri);",
          "108:   var outdir = path.join(output, uri);",
          "109:   mkdirp(outdir, function(er) {",
          "110:     if (er) throw er;",
          "112:     fs.writeFile(file, contents, 'utf8', function(er) {",
          "113:       if (er) throw er;",
          "114:       console.log('wrote: ', data.pageid, path.relative(process.cwd(), file));",
          "",
          "[Removed Lines]",
          "104: function writeFile(uri, data) {",
          "107:   var contents = template(data);",
          "111:     var file = path.resolve(outdir, 'index.html');",
          "",
          "[Added Lines]",
          "111: function writeFile(uri, data, templ) {",
          "112:   if (!templ) templ = template;",
          "115:   var contents = templ(data);",
          "119:     var file = path.resolve(outdir, templ.filename);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "248:   };",
          "249:   if (p === 0) {",
          "250:     writeFile(uri, d);",
          "251:   }",
          "252:   writeFile(uri + p, d);",
          "253: }",
          "255: function buildOutput(data) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "259:     writeFile('/feed' + uri, d, rssTemplate);",
          "262:   writeFile('/feed' + uri + p, d, rssTemplate);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71e975669cd22e496ad3d5b544bd84c448d52359",
      "candidate_info": {
        "commit_hash": "71e975669cd22e496ad3d5b544bd84c448d52359",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/71e975669cd22e496ad3d5b544bd84c448d52359",
        "files": [
          "common.gypi"
        ],
        "message": "Default to static linking CRT on Windows.",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:         ],",
          "23:         'msvs_settings': {",
          "24:           'VCCLCompilerTool': {",
          "32:             'Optimization': 0, # /Od, no optimization",
          "33:             'MinimalRebuild': 'true',",
          "34:             'OmitFramePointers': 'false',",
          "",
          "[Removed Lines]",
          "25:             'target_conditions': [",
          "26:               ['library==\"static_library\"', {",
          "27:                 'RuntimeLibrary': 1, # static debug",
          "28:               }, {",
          "29:                 'RuntimeLibrary': 3, # DLL debug",
          "30:               }],",
          "31:             ],",
          "",
          "[Added Lines]",
          "25:             'RuntimeLibrary': 1, # static debug",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:         ],",
          "50:         'msvs_settings': {",
          "51:           'VCCLCompilerTool': {",
          "59:             'Optimization': 3, # /Ox, full optimization",
          "60:             'FavorSizeOrSpeed': 1, # /Ot, favour speed over size",
          "61:             'InlineFunctionExpansion': 2, # /Ob2, inline anything eligible",
          "",
          "[Removed Lines]",
          "52:             'target_conditions': [",
          "53:               ['library==\"static_library\"', {",
          "54:                 'RuntimeLibrary': 0, # static release",
          "55:               }, {",
          "56:                 'RuntimeLibrary': 2, # debug release",
          "57:               }],",
          "58:             ],",
          "",
          "[Added Lines]",
          "46:             'RuntimeLibrary': 0, # static release",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25ca13ec1a6166c96a77d4d04e4de1a95472521b",
      "candidate_info": {
        "commit_hash": "25ca13ec1a6166c96a77d4d04e4de1a95472521b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/25ca13ec1a6166c96a77d4d04e4de1a95472521b",
        "files": [
          "deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/uv-eio.c",
          "deps/uv/test/test-list.h",
          "deps/uv/test/test-thread.c"
        ],
        "message": "uv: upgrade to 85f6b79",
        "before_after_code_files": [
          "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/uv-eio.c||deps/uv/src/unix/uv-eio.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h",
          "deps/uv/test/test-thread.c||deps/uv/test/test-thread.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h": [
          "File: deps/uv/include/uv-private/uv-unix.h -> deps/uv/include/uv-private/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   ev_timer timer; \\",
          "66:   struct ev_loop* ev;",
          "68: #define UV_REQ_BUFSML_SIZE (4)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:   eio_channel uv_eio_channel; \\",
          "",
          "---------------"
        ],
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1400:   uv_async_t uv_eio_want_poll_notifier;",
          "1401:   uv_async_t uv_eio_done_poll_notifier;",
          "1402:   uv_idle_t uv_eio_poller;",
          "1406:   uv_counters_t counters;",
          "",
          "[Removed Lines]",
          "1404:   eio_channel uv_eio_channel;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/uv-eio.c||deps/uv/src/unix/uv-eio.c": [
          "File: deps/uv/src/unix/uv-eio.c -> deps/uv/src/unix/uv-eio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96: }",
          "99: void uv_eio_init(uv_loop_t* loop) {",
          "100:   if (loop->counters.eio_init == 0) {",
          "101:     loop->counters.eio_init++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: static void uv__eio_init(void) {",
          "100:   eio_init(uv_eio_want_poll, uv_eio_done_poll);",
          "105:   eio_set_max_poll_reqs(10);",
          "106: }",
          "108: static uv_once_t uv__eio_init_once_guard = UV_ONCE_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:         uv_eio_done_poll_notifier_cb);",
          "113:     uv_unref(loop);",
          "121:   }",
          "122: }",
          "",
          "[Removed Lines]",
          "115:     eio_init(uv_eio_want_poll, uv_eio_done_poll);",
          "120:     eio_set_max_poll_reqs(10);",
          "",
          "[Added Lines]",
          "127:     uv_once(&uv__eio_init_once_guard, uv__eio_init);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: TEST_DECLARE   (fs_readdir_file)",
          "120: TEST_DECLARE   (fs_open_dir)",
          "121: TEST_DECLARE   (threadpool_queue_work_simple)",
          "122: TEST_DECLARE   (thread_mutex)",
          "123: TEST_DECLARE   (thread_rwlock)",
          "124: TEST_DECLARE   (thread_create)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: TEST_DECLARE   (threadpool_multiple_event_loops)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "285:   TEST_ENTRY  (fs_readdir_file)",
          "286:   TEST_ENTRY  (fs_open_dir)",
          "287:   TEST_ENTRY  (threadpool_queue_work_simple)",
          "288:   TEST_ENTRY  (thread_mutex)",
          "289:   TEST_ENTRY  (thread_rwlock)",
          "290:   TEST_ENTRY  (thread_create)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:   TEST_ENTRY  (threadpool_multiple_event_loops)",
          "",
          "---------------"
        ],
        "deps/uv/test/test-thread.c||deps/uv/test/test-thread.c": [
          "File: deps/uv/test/test-thread.c -> deps/uv/test/test-thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "26: #include <stdlib.h>",
          "29: static volatile int thread_called;",
          "32: static void thread_entry(void* arg) {",
          "33:   ASSERT(arg == (void *) 42);",
          "34:   thread_called++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <stddef.h>",
          "29: #define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))",
          "31: #define container_of(ptr, type, member) \\",
          "32:   ((type *) ((char *) (ptr) - offsetof(type, member)))",
          "34: struct getaddrinfo_req {",
          "35:   uv_thread_t thread_id;",
          "36:   unsigned int counter;",
          "37:   uv_loop_t* loop;",
          "38:   uv_getaddrinfo_t handle;",
          "39: };",
          "42: struct fs_req {",
          "43:   uv_thread_t thread_id;",
          "44:   unsigned int counter;",
          "45:   uv_loop_t* loop;",
          "46:   uv_fs_t handle;",
          "47: };",
          "49: static void getaddrinfo_do(struct getaddrinfo_req* req);",
          "50: static void getaddrinfo_cb(uv_getaddrinfo_t* handle,",
          "51:                            int status,",
          "52:                            struct addrinfo* res);",
          "53: static void fs_do(struct fs_req* req);",
          "54: static void fs_cb(uv_fs_t* handle);",
          "59: static void getaddrinfo_do(struct getaddrinfo_req* req) {",
          "60:   int r;",
          "62:   ASSERT(req->thread_id == uv_thread_self());",
          "64:   r = uv_getaddrinfo(req->loop,",
          "65:                      &req->handle,",
          "66:                      getaddrinfo_cb,",
          "67:                      \"localhost\",",
          "68:                      NULL,",
          "69:                      NULL);",
          "70:   ASSERT(r == 0);",
          "71: }",
          "74: static void getaddrinfo_cb(uv_getaddrinfo_t* handle,",
          "75:                            int status,",
          "76:                            struct addrinfo* res) {",
          "77:   struct getaddrinfo_req* req;",
          "79:   ASSERT(status == 0);",
          "81:   req = container_of(handle, struct getaddrinfo_req, handle);",
          "82:   uv_freeaddrinfo(res);",
          "84:   if (--req->counter)",
          "85:     getaddrinfo_do(req);",
          "86: }",
          "89: static void fs_do(struct fs_req* req) {",
          "90:   int r;",
          "92:   ASSERT(req->thread_id == uv_thread_self());",
          "94:   r = uv_fs_stat(req->loop, &req->handle, \".\", fs_cb);",
          "95:   ASSERT(r == 0);",
          "96: }",
          "99: static void fs_cb(uv_fs_t* handle) {",
          "100:   struct fs_req* req = container_of(handle, struct fs_req, handle);",
          "102:   if (--req->counter)",
          "103:     fs_do(req);",
          "104: }",
          "107: static void do_work(void* arg) {",
          "108:   struct getaddrinfo_req getaddrinfo_reqs[16];",
          "109:   struct fs_req fs_reqs[16];",
          "110:   uv_thread_t self;",
          "111:   uv_loop_t* loop;",
          "112:   size_t i;",
          "113:   int r;",
          "115:   self = uv_thread_self();",
          "117:   loop = uv_loop_new();",
          "118:   ASSERT(loop != NULL);",
          "120:   for (i = 0; i < ARRAY_SIZE(getaddrinfo_reqs); i++) {",
          "121:     struct getaddrinfo_req* req = getaddrinfo_reqs + i;",
          "122:     req->thread_id = self;",
          "123:     req->counter = 16;",
          "124:     req->loop = loop;",
          "125:     getaddrinfo_do(req);",
          "126:   }",
          "128:   for (i = 0; i < ARRAY_SIZE(fs_reqs); i++) {",
          "129:     struct fs_req* req = fs_reqs + i;",
          "130:     req->thread_id = self;",
          "131:     req->counter = 16;",
          "132:     req->loop = loop;",
          "133:     fs_do(req);",
          "134:   }",
          "136:   r = uv_run(loop);",
          "137:   ASSERT(r == 0);",
          "139:   uv_loop_delete(loop);",
          "140: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56:   tid = uv_thread_self();",
          "57:   return 0;",
          "58: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175: TEST_IMPL(threadpool_multiple_event_loops) {",
          "176:   uv_thread_t threads[8];",
          "177:   size_t i;",
          "178:   int r;",
          "180:   for (i = 0; i < ARRAY_SIZE(threads); i++) {",
          "181:     r = uv_thread_create(threads + i, do_work, NULL);",
          "182:     ASSERT(r == 0);",
          "183:   }",
          "185:   for (i = 0; i < ARRAY_SIZE(threads); i++) {",
          "186:     r = uv_thread_join(threads + i);",
          "187:     ASSERT(r == 0);",
          "188:   }",
          "190:   return 0;",
          "191: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f178f2ae3fc6cd24221e8b9548902e18c63ab8e4",
      "candidate_info": {
        "commit_hash": "f178f2ae3fc6cd24221e8b9548902e18c63ab8e4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f178f2ae3fc6cd24221e8b9548902e18c63ab8e4",
        "files": [
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/fs.c",
          "deps/uv/src/win/error.c",
          "deps/uv/src/win/fs-event.c",
          "deps/uv/src/win/fs.c",
          "deps/uv/src/win/pipe.c",
          "deps/uv/src/win/tcp.c",
          "deps/uv/src/win/udp.c",
          "deps/uv/test/test-fs-event.c",
          "deps/uv/test/test-fs.c",
          "deps/uv/test/test-list.h",
          "deps/uv/test/test-pipe-connect-error.c",
          "deps/uv/uv.gyp"
        ],
        "message": "upgrade libuv to d68b3d960b6d95bfc16027cecca2f3fa48bcc36f",
        "before_after_code_files": [
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/fs.c||deps/uv/src/unix/fs.c",
          "deps/uv/src/win/error.c||deps/uv/src/win/error.c",
          "deps/uv/src/win/fs-event.c||deps/uv/src/win/fs-event.c",
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c",
          "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c",
          "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c",
          "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c",
          "deps/uv/test/test-fs-event.c||deps/uv/test/test-fs-event.c",
          "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c",
          "deps/uv/test/test-list.h||deps/uv/test/test-list.h",
          "deps/uv/test/test-pipe-connect-error.c||deps/uv/test/test-pipe-connect-error.c",
          "deps/uv/uv.gyp||deps/uv/uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1155: UV_EXTERN int uv_fs_read(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1156:     void* buf, size_t length, off_t offset, uv_fs_cb cb);",
          "1158: UV_EXTERN int uv_fs_unlink(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1159:     uv_fs_cb cb);",
          "1161: UV_EXTERN int uv_fs_write(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1162:     void* buf, size_t length, off_t offset, uv_fs_cb cb);",
          "1164: UV_EXTERN int uv_fs_mkdir(uv_loop_t* loop, uv_fs_t* req, const char* path,",
          "1165:     int mode, uv_fs_cb cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1158: int uv_fs_read64(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1159:     void* buf, size_t length, int64_t offset, uv_fs_cb cb);",
          "1167: int uv_fs_write64(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1168:     void* buf, size_t length, int64_t offset, uv_fs_cb cb);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1188: UV_EXTERN int uv_fs_ftruncate(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1189:     off_t offset, uv_fs_cb cb);",
          "1191: UV_EXTERN int uv_fs_sendfile(uv_loop_t* loop, uv_fs_t* req, uv_file out_fd,",
          "1192:     uv_file in_fd, off_t in_offset, size_t length, uv_fs_cb cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1197: int uv_fs_ftruncate64(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1198:     int64_t offset, uv_fs_cb cb);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/fs.c||deps/uv/src/unix/fs.c": [
          "File: deps/uv/src/unix/fs.c -> deps/uv/src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "702:   return 0;",
          "703: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "706: int uv_fs_read64(uv_loop_t* loop,",
          "707:                  uv_fs_t* req,",
          "708:                  uv_file file,",
          "709:                  void* buf,",
          "710:                  size_t length,",
          "711:                  int64_t offset,",
          "712:                  uv_fs_cb cb) {",
          "713:   return uv_fs_read(loop, req, file, buf, length, offset, cb);",
          "714: }",
          "717: int uv_fs_write64(uv_loop_t* loop,",
          "718:                   uv_fs_t* req,",
          "719:                   uv_file file,",
          "720:                   void* buf,",
          "721:                   size_t length,",
          "722:                   int64_t offset,",
          "723:                   uv_fs_cb cb) {",
          "724:   return uv_fs_write(loop, req, file, buf, length, offset, cb);",
          "725: }",
          "728: int uv_fs_ftruncate64(uv_loop_t* loop,",
          "729:                       uv_fs_t* req,",
          "730:                       uv_file file,",
          "731:                       int64_t offset,",
          "732:                       uv_fs_cb cb) {",
          "733:   return uv_fs_ftruncate(loop, req, file, offset, cb);",
          "734: }",
          "",
          "---------------"
        ],
        "deps/uv/src/win/error.c||deps/uv/src/win/error.c": [
          "File: deps/uv/src/win/error.c -> deps/uv/src/win/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     case ERROR_SEM_TIMEOUT:                 return UV_ETIMEDOUT;",
          "126:     case WSAETIMEDOUT:                      return UV_ETIMEDOUT;",
          "127:     case WSAHOST_NOT_FOUND:                 return UV_ENOENT;",
          "128:     default:                                return UV_UNKNOWN;",
          "129:   }",
          "130: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:     case WSAENOTSOCK:                       return UV_ENOTSOCK;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs-event.c||deps/uv/src/win/fs-event.c": [
          "File: deps/uv/src/win/fs-event.c -> deps/uv/src/win/fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:   assert(handle->req_pending);",
          "302:   handle->req_pending = 0;",
          "304:   file_info = (FILE_NOTIFY_INFORMATION*)(handle->buffer + offset);",
          "306:   if (REQ_SUCCESS(req)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "306:   if (handle->flags & UV_HANDLE_CLOSING) {",
          "307:     uv_want_endgame(loop, (uv_handle_t*) handle);",
          "308:     return;",
          "309:   };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:         }",
          "440:         offset = file_info->NextEntryOffset;",
          "442:     } else {",
          "446:     }",
          "447:   } else {",
          "448:     uv__set_sys_error(loop, GET_REQ_ERROR(req));",
          "",
          "[Removed Lines]",
          "441:       } while(offset);",
          "443:       if (!(handle->flags & UV_HANDLE_CLOSING)) {",
          "444:         handle->cb(handle, NULL, UV_CHANGE, 0);",
          "445:       }",
          "",
          "[Added Lines]",
          "448:       } while (offset && !(handle->flags & UV_HANDLE_CLOSING));",
          "450:       handle->cb(handle, NULL, UV_CHANGE, 0);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"uv.h\"",
          "34: #include \"internal.h\"",
          "43: #define UTF8_TO_UTF16(s, t)                                                 \\",
          "44:   size = uv_utf8_to_utf16(s, NULL, 0) * sizeof(wchar_t);                    \\",
          "",
          "[Removed Lines]",
          "36: #define UV_FS_ASYNC_QUEUED       0x0001",
          "37: #define UV_FS_FREE_ARG0          0x0002",
          "38: #define UV_FS_FREE_ARG1          0x0004",
          "39: #define UV_FS_FREE_PTR           0x0008",
          "40: #define UV_FS_CLEANEDUP          0x0010",
          "",
          "[Added Lines]",
          "36: #define UV_FS_ASYNC_QUEUED            0x0001",
          "37: #define UV_FS_FREE_ARG0               0x0002",
          "38: #define UV_FS_FREE_ARG1               0x0004",
          "39: #define UV_FS_FREE_PTR                0x0008",
          "40: #define UV_FS_CLEANEDUP               0x0010",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "291: void fs__read(uv_fs_t* req, uv_file file, void *buf, size_t length,",
          "293:   HANDLE handle;",
          "294:   OVERLAPPED overlapped, *overlapped_ptr;",
          "295:   LARGE_INTEGER offset_;",
          "",
          "[Removed Lines]",
          "292:     off_t offset) {",
          "",
          "[Added Lines]",
          "291:     int64_t offset) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "337: void fs__write(uv_fs_t* req, uv_file file, void *buf, size_t length,",
          "339:   HANDLE handle;",
          "340:   OVERLAPPED overlapped, *overlapped_ptr;",
          "341:   LARGE_INTEGER offset_;",
          "",
          "[Removed Lines]",
          "338:     off_t offset) {",
          "",
          "[Added Lines]",
          "337:     int64_t offset) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "597: }",
          "601:   int result;",
          "603:   VERIFY_UV_FILE(file, req);",
          "606:   SET_REQ_RESULT(req, result);",
          "607: }",
          "",
          "[Removed Lines]",
          "600: void fs__ftruncate(uv_fs_t* req, uv_file file, off_t offset) {",
          "605:   result = _chsize(file, offset);",
          "",
          "[Added Lines]",
          "599: void fs__ftruncate(uv_fs_t* req, uv_file file, int64_t offset) {",
          "604:   result = _chsize_s(file, offset);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "878:                (uv_file) req->arg0,",
          "879:                req->arg1,",
          "880:                (size_t) req->arg2,",
          "882:       break;",
          "883:     case UV_FS_WRITE:",
          "884:       fs__write(req,",
          "885:                 (uv_file)req->arg0,",
          "886:                 req->arg1,",
          "887:                 (size_t) req->arg2,",
          "889:       break;",
          "890:     case UV_FS_UNLINK:",
          "891:       fs__unlink(req, req->pathw);",
          "",
          "[Removed Lines]",
          "881:                (off_t) req->arg3);",
          "888:                 (off_t) req->arg3);",
          "",
          "[Added Lines]",
          "880:                req->stat.st_atime);",
          "887:                 req->stat.st_atime);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "914:       fs__fsync(req, (uv_file)req->arg0);",
          "915:       break;",
          "916:     case UV_FS_FTRUNCATE:",
          "918:       break;",
          "919:     case UV_FS_SENDFILE:",
          "920:       fs__sendfile(req,",
          "",
          "[Removed Lines]",
          "917:       fs__ftruncate(req, (uv_file)req->arg0, (off_t)req->arg1);",
          "",
          "[Added Lines]",
          "916:       fs__ftruncate(req, (uv_file)req->arg0, (off_t)req->stat.st_atime);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1002:     size_t length, off_t offset, uv_fs_cb cb) {",
          "1003:   if (cb) {",
          "1004:     uv_fs_req_init_async(loop, req, UV_FS_READ, NULL, NULL, cb);",
          "1006:     QUEUE_FS_TP_JOB(loop, req);",
          "1007:   } else {",
          "1008:     uv_fs_req_init_sync(loop, req, UV_FS_READ);",
          "",
          "[Removed Lines]",
          "1005:     WRAP_REQ_ARGS4(req, file, buf, length, offset);",
          "",
          "[Added Lines]",
          "1004:     WRAP_REQ_ARGS3(req, file, buf, length);",
          "1005:     req->stat.st_atime = offset;",
          "1006:     QUEUE_FS_TP_JOB(loop, req);",
          "1007:   } else {",
          "1008:     uv_fs_req_init_sync(loop, req, UV_FS_READ);",
          "1009:     fs__read(req, file, buf, length, offset);",
          "1010:     SET_UV_LAST_ERROR_FROM_REQ(req);",
          "1011:     return req->result;",
          "1012:   }",
          "1014:   return 0;",
          "1015: }",
          "1018: int uv_fs_read64(uv_loop_t* loop, uv_fs_t* req, uv_file file, void* buf,",
          "1019:     size_t length, int64_t offset, uv_fs_cb cb) {",
          "1020:   if (cb) {",
          "1021:     uv_fs_req_init_async(loop, req, UV_FS_READ, NULL, NULL, cb);",
          "1022:     WRAP_REQ_ARGS3(req, file, buf, length);",
          "1023:     req->stat.st_atime = offset;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1019:     size_t length, off_t offset, uv_fs_cb cb) {",
          "1020:   if (cb) {",
          "1021:     uv_fs_req_init_async(loop, req, UV_FS_WRITE, NULL, NULL, cb);",
          "1023:     QUEUE_FS_TP_JOB(loop, req);",
          "1024:   } else {",
          "1025:     uv_fs_req_init_sync(loop, req, UV_FS_WRITE);",
          "",
          "[Removed Lines]",
          "1022:     WRAP_REQ_ARGS4(req, file, buf, length, offset);",
          "",
          "[Added Lines]",
          "1040:     WRAP_REQ_ARGS3(req, file, buf, length);",
          "1041:     req->stat.st_atime = offset;",
          "1042:     QUEUE_FS_TP_JOB(loop, req);",
          "1043:   } else {",
          "1044:     uv_fs_req_init_sync(loop, req, UV_FS_WRITE);",
          "1045:     fs__write(req, file, buf, length, offset);",
          "1046:     SET_UV_LAST_ERROR_FROM_REQ(req);",
          "1047:     return req->result;",
          "1048:   }",
          "1050:   return 0;",
          "1051: }",
          "1054: int uv_fs_write64(uv_loop_t* loop, uv_fs_t* req, uv_file file, void* buf,",
          "1055:     size_t length, int64_t offset, uv_fs_cb cb) {",
          "1056:   if (cb) {",
          "1057:     uv_fs_req_init_async(loop, req, UV_FS_WRITE, NULL, NULL, cb);",
          "1058:     WRAP_REQ_ARGS3(req, file, buf, length);",
          "1059:     req->stat.st_atime = offset;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1412:     off_t offset, uv_fs_cb cb) {",
          "1413:   if (cb) {",
          "1414:     uv_fs_req_init_async(loop, req, UV_FS_FTRUNCATE, NULL, NULL, cb);",
          "1416:     QUEUE_FS_TP_JOB(loop, req);",
          "1417:   } else {",
          "1418:     uv_fs_req_init_sync(loop, req, UV_FS_FTRUNCATE);",
          "",
          "[Removed Lines]",
          "1415:     WRAP_REQ_ARGS2(req, file, offset);",
          "",
          "[Added Lines]",
          "1452:     WRAP_REQ_ARGS1(req, file);",
          "1453:     req->stat.st_atime = offset;",
          "1454:     QUEUE_FS_TP_JOB(loop, req);",
          "1455:   } else {",
          "1456:     uv_fs_req_init_sync(loop, req, UV_FS_FTRUNCATE);",
          "1457:     fs__ftruncate(req, file, offset);",
          "1458:     SET_UV_LAST_ERROR_FROM_REQ(req);",
          "1459:     return req->result;",
          "1460:   }",
          "1462:   return 0;",
          "1463: }",
          "1466: int uv_fs_ftruncate64(uv_loop_t* loop, uv_fs_t* req, uv_file file,",
          "1467:     int64_t offset, uv_fs_cb cb) {",
          "1468:   if (cb) {",
          "1469:     uv_fs_req_init_async(loop, req, UV_FS_FTRUNCATE, NULL, NULL, cb);",
          "1470:     WRAP_REQ_ARGS1(req, file);",
          "1471:     req->stat.st_atime = offset;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/pipe.c||deps/uv/src/win/pipe.c": [
          "File: deps/uv/src/win/pipe.c -> deps/uv/src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:   DWORD mode = PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT;",
          "219:   if (!SetNamedPipeHandleState(pipeHandle, &mode, NULL, NULL)) {",
          "220:     return -1;",
          "221:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:     if (GetLastError() == ERROR_INVALID_PARAMETER) {",
          "223:       SetLastError(WSAENOTSOCK);",
          "224:     }",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c": [
          "File: deps/uv/src/win/tcp.c -> deps/uv/src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:                     int addrsize) {",
          "240:   DWORD err;",
          "241:   int r;",
          "244:   if (handle->socket == INVALID_SOCKET) {",
          "246:     if (sock == INVALID_SOCKET) {",
          "247:       uv__set_sys_error(handle->loop, WSAGetLastError());",
          "248:       return -1;",
          "",
          "[Removed Lines]",
          "242:   SOCKET sock;",
          "245:     sock = socket(domain, SOCK_STREAM, 0);",
          "",
          "[Added Lines]",
          "244:     SOCKET sock = socket(domain, SOCK_STREAM, 0);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/udp.c||deps/uv/src/win/udp.c": [
          "File: deps/uv/src/win/udp.c -> deps/uv/src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:                     int addrsize,",
          "168:                     unsigned int flags) {",
          "169:   int r;",
          "171:   DWORD no = 0, yes = 1;",
          "173:   if ((flags & UV_UDP_IPV6ONLY) && domain != AF_INET6) {",
          "",
          "[Removed Lines]",
          "170:   SOCKET sock;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:   }",
          "179:   if (handle->socket == INVALID_SOCKET) {",
          "181:     if (sock == INVALID_SOCKET) {",
          "182:       uv__set_sys_error(handle->loop, WSAGetLastError());",
          "183:       return -1;",
          "",
          "[Removed Lines]",
          "180:     sock = socket(domain, SOCK_DGRAM, 0);",
          "",
          "[Added Lines]",
          "179:     SOCKET sock = socket(domain, SOCK_DGRAM, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "200:                IPPROTO_IPV6,",
          "201:                IPV6_V6ONLY,",
          "202:                (char*) &no,",
          "203:                sizeof no);",
          "204:   }",
          "207:                  SOL_SOCKET,",
          "208:                  SO_REUSEADDR,",
          "209:                  (char*) &yes,",
          "",
          "[Removed Lines]",
          "199:     setsockopt(sock,",
          "206:   r = setsockopt(sock,",
          "",
          "[Added Lines]",
          "198:     setsockopt(handle->socket,",
          "205:   r = setsockopt(handle->socket,",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs-event.c||deps/uv/test/test-fs-event.c": [
          "File: deps/uv/test/test-fs-event.c -> deps/uv/test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: static uv_fs_event_t fs_event;",
          "29: static uv_timer_t timer;",
          "35: static void create_dir(uv_loop_t* loop, const char* name) {",
          "36:   int r;",
          "37:   uv_fs_t req;",
          "38:   r = uv_fs_mkdir(loop, &req, name, 0755, NULL);",
          "40:   uv_fs_req_cleanup(&req);",
          "41: }",
          "",
          "[Removed Lines]",
          "30: static int timer_cb_called;",
          "31: static int close_cb_called;",
          "32: static int fs_event_cb_called;",
          "33: static int timer_cb_touch_called;",
          "39:   ASSERT(r == 0);",
          "",
          "[Added Lines]",
          "30: static int timer_cb_called = 0;",
          "31: static int close_cb_called = 0;",
          "32: static int fs_event_cb_called = 0;",
          "33: static int timer_cb_touch_called = 0;",
          "39:   ASSERT(r == 0 || uv_last_error(loop).code == UV_EEXIST);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "273: static void fs_event_fail(uv_fs_event_t* handle, const char* filename,",
          "275:   ASSERT(0 && \"should never be called\");",
          "276: }",
          "",
          "[Removed Lines]",
          "274:   int events, int status) {",
          "",
          "[Added Lines]",
          "274:     int events, int status) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "309:   return 0;",
          "310: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313: TEST_IMPL(fs_event_close_with_pending_event) {",
          "314:   uv_loop_t* loop;",
          "315:   uv_fs_t fs_req;",
          "316:   int r;",
          "318:   loop = uv_default_loop();",
          "320:   create_dir(loop, \"watch_dir\");",
          "321:   create_file(loop, \"watch_dir/file\");",
          "323:   r = uv_fs_event_init(loop, &fs_event, \"watch_dir\", fs_event_fail, 0);",
          "324:   ASSERT(r == 0);",
          "327:   touch_file(loop, \"watch_dir/file\");",
          "329:   uv_close((uv_handle_t*)&fs_event, close_cb);",
          "331:   uv_run(loop);",
          "333:   ASSERT(close_cb_called == 1);",
          "336:   r = uv_fs_unlink(loop, &fs_req, \"watch_dir/file\", NULL);",
          "337:   ASSERT(r == 0);",
          "338:   r = uv_fs_rmdir(loop, &fs_req, \"watch_dir\", NULL);",
          "339:   ASSERT(r == 0);",
          "341:   return 0;",
          "342: }",
          "345: static void fs_event_cb_close(uv_fs_event_t* handle, const char* filename,",
          "346:     int events, int status) {",
          "347:   ASSERT(status == 0);",
          "349:   ASSERT(fs_event_cb_called < 3);",
          "350:   ++fs_event_cb_called;",
          "352:   if (fs_event_cb_called == 3) {",
          "353:     uv_close((uv_handle_t*) handle, close_cb);",
          "354:   }",
          "355: }",
          "358: TEST_IMPL(fs_event_close_in_callback) {",
          "359:   uv_loop_t* loop;",
          "360:   uv_fs_t fs_req;",
          "361:   int r;",
          "363:   loop = uv_default_loop();",
          "365:   create_dir(loop, \"watch_dir\");",
          "366:   create_file(loop, \"watch_dir/file1\");",
          "367:   create_file(loop, \"watch_dir/file2\");",
          "368:   create_file(loop, \"watch_dir/file3\");",
          "369:   create_file(loop, \"watch_dir/file4\");",
          "370:   create_file(loop, \"watch_dir/file5\");",
          "372:   r = uv_fs_event_init(loop, &fs_event, \"watch_dir\", fs_event_cb_close, 0);",
          "373:   ASSERT(r == 0);",
          "376:   touch_file(loop, \"watch_dir/file1\");",
          "377:   touch_file(loop, \"watch_dir/file2\");",
          "378:   touch_file(loop, \"watch_dir/file3\");",
          "379:   touch_file(loop, \"watch_dir/file4\");",
          "380:   touch_file(loop, \"watch_dir/file5\");",
          "382:   uv_run(loop);",
          "384:   ASSERT(close_cb_called == 1);",
          "385:   ASSERT(fs_event_cb_called == 3);",
          "388:   r = uv_fs_unlink(loop, &fs_req, \"watch_dir/file1\", NULL);",
          "389:   ASSERT(r == 0);",
          "390:   r = uv_fs_unlink(loop, &fs_req, \"watch_dir/file2\", NULL);",
          "391:   ASSERT(r == 0);",
          "392:   r = uv_fs_unlink(loop, &fs_req, \"watch_dir/file3\", NULL);",
          "393:   ASSERT(r == 0);",
          "394:   r = uv_fs_unlink(loop, &fs_req, \"watch_dir/file4\", NULL);",
          "395:   ASSERT(r == 0);",
          "396:   r = uv_fs_unlink(loop, &fs_req, \"watch_dir/file5\", NULL);",
          "397:   ASSERT(r == 0);",
          "398:   r = uv_fs_rmdir(loop, &fs_req, \"watch_dir\", NULL);",
          "399:   ASSERT(r == 0);",
          "401:   return 0;",
          "402: }",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c": [
          "File: deps/uv/test/test-fs.c -> deps/uv/test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:   read_cb_count++;",
          "249:   uv_fs_req_cleanup(req);",
          "250:   if (read_cb_count == 1) {",
          "251:     ASSERT(strcmp(buf, test_buf) == 0);",
          "252:     r = uv_fs_ftruncate(loop, &ftruncate_req, open_req1.result, 7,",
          "253:         ftruncate_cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:     ASSERT(strcmp(buf, test_buf) == 0);",
          "252:     memset(buf, 0, sizeof(buf));",
          "253:     r = uv_fs_read64(loop, &read_req, open_req1.result, buf, sizeof(buf), 0,",
          "254:         read_cb);",
          "255:   } else if (read_cb_count == 2) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:   ASSERT(req->result != -1);",
          "320:   write_cb_count++;",
          "321:   uv_fs_req_cleanup(req);",
          "323: }",
          "",
          "[Removed Lines]",
          "322:   r = uv_fs_fdatasync(loop, &fdatasync_req, open_req1.result, fdatasync_cb);",
          "",
          "[Added Lines]",
          "328:   if (write_cb_count == 1) {",
          "329:     r = uv_fs_write64(loop, &write_req, open_req1.result, test_buf, sizeof(test_buf),",
          "330:         -1, write_cb);",
          "331:   } else {",
          "332:     r = uv_fs_fdatasync(loop, &fdatasync_req, open_req1.result, fdatasync_cb);",
          "333:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "596:   uv_run(loop);",
          "598:   ASSERT(create_cb_count == 1);",
          "600:   ASSERT(fsync_cb_count == 1);",
          "601:   ASSERT(fdatasync_cb_count == 1);",
          "602:   ASSERT(close_cb_count == 1);",
          "",
          "[Removed Lines]",
          "599:   ASSERT(write_cb_count == 1);",
          "",
          "[Added Lines]",
          "610:   ASSERT(write_cb_count == 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "607:   uv_run(loop);",
          "608:   ASSERT(create_cb_count == 1);",
          "610:   ASSERT(close_cb_count == 1);",
          "611:   ASSERT(rename_cb_count == 1);",
          "",
          "[Removed Lines]",
          "609:   ASSERT(write_cb_count == 1);",
          "",
          "[Added Lines]",
          "620:   ASSERT(write_cb_count == 2);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "616:   uv_run(loop);",
          "617:   ASSERT(open_cb_count == 1);",
          "619:   ASSERT(close_cb_count == 2);",
          "620:   ASSERT(rename_cb_count == 1);",
          "621:   ASSERT(create_cb_count == 1);",
          "623:   ASSERT(ftruncate_cb_count == 1);",
          "625:   r = uv_fs_open(loop, &open_req1, \"test_file2\", O_RDONLY, 0, open_cb);",
          "",
          "[Removed Lines]",
          "618:   ASSERT(read_cb_count == 1);",
          "622:   ASSERT(write_cb_count == 1);",
          "",
          "[Added Lines]",
          "629:   ASSERT(read_cb_count == 2);",
          "633:   ASSERT(write_cb_count == 2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "628:   uv_run(loop);",
          "629:   ASSERT(open_cb_count == 2);",
          "631:   ASSERT(close_cb_count == 3);",
          "632:   ASSERT(rename_cb_count == 1);",
          "633:   ASSERT(unlink_cb_count == 1);",
          "634:   ASSERT(create_cb_count == 1);",
          "636:   ASSERT(ftruncate_cb_count == 1);",
          "",
          "[Removed Lines]",
          "630:   ASSERT(read_cb_count == 2);",
          "635:   ASSERT(write_cb_count == 1);",
          "",
          "[Added Lines]",
          "641:   ASSERT(read_cb_count == 3);",
          "646:   ASSERT(write_cb_count == 2);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "681:   ASSERT(strcmp(buf, test_buf) == 0);",
          "682:   uv_fs_req_cleanup(&read_req);",
          "684:   r = uv_fs_ftruncate(loop, &ftruncate_req, open_req1.result, 7, NULL);",
          "685:   ASSERT(r != -1);",
          "686:   ASSERT(ftruncate_req.result != -1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "695:   memset(buf, 0, sizeof(buf));",
          "696:   r = uv_fs_read64(loop, &read_req, open_req1.result, buf, sizeof(buf), 0,",
          "697:       NULL);",
          "698:   ASSERT(r != -1);",
          "699:   ASSERT(read_req.result != -1);",
          "700:   ASSERT(strcmp(buf, test_buf) == 0);",
          "701:   uv_fs_req_cleanup(&read_req);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "899:   file = req.result;",
          "900:   uv_fs_req_cleanup(&req);",
          "903:   ASSERT(r == sizeof(test_buf));",
          "904:   ASSERT(req.result == sizeof(test_buf));",
          "905:   uv_fs_req_cleanup(&req);",
          "",
          "[Removed Lines]",
          "902:   r = uv_fs_write(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "[Added Lines]",
          "921:   r = uv_fs_write64(loop, &req, file, test_buf, sizeof(test_buf), -1, NULL);",
          "",
          "---------------"
        ],
        "deps/uv/test/test-list.h||deps/uv/test/test-list.h": [
          "File: deps/uv/test/test-list.h -> deps/uv/test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: TEST_DECLARE   (pipe_bind_error_inval)",
          "58: TEST_DECLARE   (pipe_listen_without_bind)",
          "59: TEST_DECLARE   (pipe_connect_bad_name)",
          "60: TEST_DECLARE   (connection_fail)",
          "61: TEST_DECLARE   (connection_fail_doesnt_auto_close)",
          "62: TEST_DECLARE   (shutdown_close_tcp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: TEST_DECLARE   (pipe_connect_to_file)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131: TEST_DECLARE   (fs_event_watch_file_current_dir)",
          "132: TEST_DECLARE   (fs_event_no_callback_on_close)",
          "133: TEST_DECLARE   (fs_event_immediate_close)",
          "134: TEST_DECLARE   (fs_readdir_empty_dir)",
          "135: TEST_DECLARE   (fs_readdir_file)",
          "136: TEST_DECLARE   (fs_open_dir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135: TEST_DECLARE   (fs_event_close_with_pending_event)",
          "136: TEST_DECLARE   (fs_event_close_in_callback);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154: TASK_LIST_START",
          "155:   TEST_ENTRY  (pipe_connect_bad_name)",
          "157:   TEST_ENTRY  (tty)",
          "158:   TEST_ENTRY  (stdio_over_pipes)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:   TEST_ENTRY  (pipe_connect_to_file)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "315:   TEST_ENTRY  (fs_event_watch_file_current_dir)",
          "316:   TEST_ENTRY  (fs_event_no_callback_on_close)",
          "317:   TEST_ENTRY  (fs_event_immediate_close)",
          "318:   TEST_ENTRY  (fs_readdir_empty_dir)",
          "319:   TEST_ENTRY  (fs_readdir_file)",
          "320:   TEST_ENTRY  (fs_open_dir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:   TEST_ENTRY  (fs_event_close_with_pending_event)",
          "323:   TEST_ENTRY  (fs_event_close_in_callback)",
          "",
          "---------------"
        ],
        "deps/uv/test/test-pipe-connect-error.c||deps/uv/test/test-pipe-connect-error.c": [
          "File: deps/uv/test/test-pipe-connect-error.c -> deps/uv/test/test-pipe-connect-error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: }",
          "53: TEST_IMPL(pipe_connect_bad_name) {",
          "54:   uv_pipe_t client;",
          "55:   uv_connect_t req;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: static void connect_cb_file(uv_connect_t* connect_req, int status) {",
          "54:   ASSERT(status == -1);",
          "55:   ASSERT(uv_last_error(uv_default_loop()).code == UV_ENOTSOCK ||",
          "56:          uv_last_error(uv_default_loop()).code == UV_ECONNREFUSED);",
          "57:   uv_close((uv_handle_t*)connect_req->handle, close_cb);",
          "58:   connect_cb_called++;",
          "59: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   return 0;",
          "68: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80: TEST_IMPL(pipe_connect_to_file) {",
          "81:   const char* path = \"test/fixtures/empty_file\";",
          "82:   uv_pipe_t client;",
          "83:   uv_connect_t req;",
          "84:   int r;",
          "86:   r = uv_pipe_init(uv_default_loop(), &client, 0);",
          "87:   ASSERT(r == 0);",
          "88:   uv_pipe_connect(&req, &client, path, connect_cb_file);",
          "90:   uv_run(uv_default_loop());",
          "92:   ASSERT(close_cb_called == 1);",
          "93:   ASSERT(connect_cb_called == 1);",
          "95:   return 0;",
          "96: }",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "208:             ],",
          "209:           },",
          "210:           'defines': [",
          "211:             'EV_CONFIG_H=\"config_darwin.h\"',",
          "212:             'EIO_CONFIG_H=\"config_darwin.h\"',",
          "213:           ]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:             '_DARWIN_USE_64_BIT_INODE=1',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c1fcb1db996a79cdd6bb88c720c18ee734ea23c8",
      "candidate_info": {
        "commit_hash": "c1fcb1db996a79cdd6bb88c720c18ee734ea23c8",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/c1fcb1db996a79cdd6bb88c720c18ee734ea23c8",
        "files": [
          "vcbuild.bat"
        ],
        "message": "build: change default BUILDTYPE of vcbuild.bat\n\nFrom Debug to Release.",
        "before_after_code_files": [
          "vcbuild.bat||vcbuild.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "vcbuild.bat||vcbuild.bat": [
          "File: vcbuild.bat -> vcbuild.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: if /i \"%1\"==\"/?\" goto help",
          "14: @rem Process arguments.",
          "16: set target=Build",
          "17: set target_arch=ia32",
          "18: set noprojgen=",
          "",
          "[Removed Lines]",
          "15: set config=Debug",
          "",
          "[Added Lines]",
          "15: set config=Release",
          "",
          "---------------"
        ]
      }
    }
  ]
}