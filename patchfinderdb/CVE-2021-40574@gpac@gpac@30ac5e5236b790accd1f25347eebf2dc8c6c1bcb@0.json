{
  "cve_id": "CVE-2021-40574",
  "cve_desc": "The binary MP4Box in Gpac from 0.9.0-preview to 1.0.1 has a double-free vulnerability in the gf_text_get_utf8_line function in load_text.c, which allows attackers to cause a denial of service, even code execution and escalation of privileges.",
  "repo": "gpac/gpac",
  "patch_hash": "30ac5e5236b790accd1f25347eebf2dc8c6c1bcb",
  "patch_info": {
    "commit_hash": "30ac5e5236b790accd1f25347eebf2dc8c6c1bcb",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/30ac5e5236b790accd1f25347eebf2dc8c6c1bcb",
    "files": [
      "src/filters/load_text.c"
    ],
    "message": "fixed #1897",
    "before_after_code_files": [
      "src/filters/load_text.c||src/filters/load_text.c"
    ]
  },
  "patch_diff": {
    "src/filters/load_text.c||src/filters/load_text.c": [
      "File: src/filters/load_text.c -> src/filters/load_text.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "255: {",
      "256:  u32 i, j, len;",
      "257:  char *sOK;",
      "259:  unsigned short *sptr;",
      "261:  memset(szLine, 0, sizeof(char)*lineSize);",
      "",
      "[Removed Lines]",
      "258:  char szLineConv[1024];",
      "",
      "[Added Lines]",
      "258:  char szLineConv[2048];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "328:   }",
      "329:  }",
      "330:  sptr = (u16 *)szLine;",
      "332:  szLineConv[i] = 0;",
      "333:  strcpy(szLine, szLineConv);",
      "",
      "[Removed Lines]",
      "331:  i = (u32) gf_utf8_wcstombs(szLineConv, 1024, (const unsigned short **) &sptr);",
      "",
      "[Added Lines]",
      "331:  i = (u32) gf_utf8_wcstombs(szLineConv, 2048, (const unsigned short **) &sptr);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2338:   while (szLine[i+1] && szLine[i+1]!='}') {",
      "2339:    szTime[i] = szLine[i+1];",
      "2340:    i++;",
      "2341:   }",
      "2342:   szTime[i] = 0;",
      "2343:   ctx->start = atoi(szTime);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2341:    if (i>=19)",
      "2342:     break;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7eb6b859563c5b622f4f7fd6b17884f6690d59a3",
      "candidate_info": {
        "commit_hash": "7eb6b859563c5b622f4f7fd6b17884f6690d59a3",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/7eb6b859563c5b622f4f7fd6b17884f6690d59a3",
        "files": [
          "applications/mp4box/filedump.c",
          "src/compositor/events.c",
          "src/compositor/mpeg4_inputsensor.c",
          "src/filters/dec_ttxt.c",
          "src/filters/load_text.c",
          "src/isomedia/box_dump.c",
          "src/scenegraph/dom_js.c"
        ],
        "message": "fixed #2017",
        "before_after_code_files": [
          "applications/mp4box/filedump.c||applications/mp4box/filedump.c",
          "src/compositor/events.c||src/compositor/events.c",
          "src/compositor/mpeg4_inputsensor.c||src/compositor/mpeg4_inputsensor.c",
          "src/filters/dec_ttxt.c||src/filters/dec_ttxt.c",
          "src/filters/load_text.c||src/filters/load_text.c",
          "src/isomedia/box_dump.c||src/isomedia/box_dump.c",
          "src/scenegraph/dom_js.c||src/scenegraph/dom_js.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/filters/load_text.c||src/filters/load_text.c"
          ],
          "candidate": [
            "src/filters/load_text.c||src/filters/load_text.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/mp4box/filedump.c||applications/mp4box/filedump.c": [
          "File: applications/mp4box/filedump.c -> applications/mp4box/filedump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3783:    u32 len = (u32) ( UTF8_MAX_BYTES_PER_CHAR * gf_utf8_wcslen(src_str) );",
          "3784:    char *utf8str = (char *)gf_malloc(len + 1);",
          "3785:    u32 res_len = (u32) gf_utf8_wcstombs(utf8str, len, (const unsigned short **) &src_str);",
          "3789:    gf_free(utf8str);",
          "3790:   }",
          "3791:  }",
          "",
          "[Removed Lines]",
          "3786:    utf8str[res_len] = 0;",
          "3787:    fprintf(stderr, \"%s\\n\", utf8str);",
          "",
          "[Added Lines]",
          "3786:    if (res_len != (u32) -1) {",
          "3787:     utf8str[res_len] = 0;",
          "3788:     fprintf(stderr, \"%s\\n\", utf8str);",
          "3789:    }",
          "",
          "---------------"
        ],
        "src/compositor/events.c||src/compositor/events.c": [
          "File: src/compositor/events.c -> src/compositor/events.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   txt = (char*)gf_malloc(sizeof(char)*2*compositor->sel_buffer_len);",
          "92:   lptr = compositor->sel_buffer;",
          "93:   len = gf_utf8_wcstombs(txt, 2*compositor->sel_buffer_len, &lptr);",
          "94:   txt[len] = 0;",
          "96:   gf_free(txt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:   if ((s32)len<0) len = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "298:        cur->textContent = (char*)gf_malloc(sizeof(char)*(len+1));",
          "299:        srcp = compositor->sel_buffer;",
          "300:        len = gf_utf8_wcstombs(cur->textContent, len, &srcp);",
          "301:        cur->textContent[len] = 0;",
          "302:        compositor->sel_buffer[compositor->caret_pos] = end;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:        if ((s32)len<0) len = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:         ntext->textContent = (char*)gf_malloc(sizeof(char)*(len+1));",
          "307:         srcp = compositor->sel_buffer + compositor->caret_pos + 1;",
          "308:         len = gf_utf8_wcstombs(ntext->textContent, len, &srcp);",
          "309:         ntext->textContent[len] = 0;",
          "310:        } else {",
          "311:         ntext->textContent = gf_strdup(\"\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:         if ((s32)len<0) len = 0;",
          "",
          "---------------"
        ],
        "src/compositor/mpeg4_inputsensor.c||src/compositor/mpeg4_inputsensor.c": [
          "File: src/compositor/mpeg4_inputsensor.c -> src/compositor/mpeg4_inputsensor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "360:   if (len && (is_ctx->enteredText[len-1] == is_ctx->termChar)) {",
          "361:    ptr = is_ctx->enteredText;",
          "362:    len = (u32) gf_utf8_wcstombs(tmp_utf8, 5000, &ptr);",
          "363:    if (outText->buffer) gf_free(outText->buffer);",
          "364:    outText->buffer = (char*)gf_malloc(sizeof(char) * (len));",
          "365:    memcpy(outText->buffer, tmp_utf8, sizeof(char) * len-1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "363:    if ((s32)len<0) len = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:    is_ctx->text_len = len;",
          "383:    ptr = is_ctx->enteredText;",
          "384:    len = (u32) gf_utf8_wcstombs(tmp_utf8, 5000, &ptr);",
          "385:    if (inText->buffer) gf_free(inText->buffer);",
          "386:    inText->buffer = (char*)gf_malloc(sizeof(char) * (len+1));",
          "387:    memcpy(inText->buffer, tmp_utf8, sizeof(char) * len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "386:    if ((s32)len<0) len = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "794:    tc[1] = 0;",
          "795:    ptr = tc;",
          "796:    len = (u32) gf_utf8_wcstombs(szStr, 10, &ptr);",
          "797:    n->keyPress.buffer = (char*)gf_malloc(sizeof(char) * (len+1));",
          "798:    memcpy(n->keyPress.buffer, szStr, sizeof(char) * len);",
          "799:    n->keyPress.buffer[len] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "799:    if ((s32)len<0) len = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "805:    tc[1] = 0;",
          "806:    ptr = tc;",
          "807:    len = (u32) gf_utf8_wcstombs(szStr, 10, &ptr);",
          "808:    n->keyRelease.buffer = (char*)gf_malloc(sizeof(char) * (len+1));",
          "809:    memcpy(n->keyRelease.buffer, szStr, sizeof(char) * len);",
          "810:    n->keyRelease.buffer[len] = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811:    if ((s32)len<0) len = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "901:     st->enteredText[st->text_len] = 0;",
          "902:     ptr = st->enteredText;",
          "903:     len = (u32) gf_utf8_wcstombs(szStr, 10, &ptr);",
          "904:     if (n->enteredText.buffer) gf_free(n->enteredText.buffer);",
          "905:     szStr[len] = 0;",
          "906:     n->enteredText.buffer = gf_strdup(szStr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "908:     if ((s32)len<0) len = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "919:    st->enteredText[st->text_len] = 0;",
          "920:    ptr = st->enteredText;",
          "921:    len = (u32) gf_utf8_wcstombs(szStr, 10, &ptr);",
          "922:    if (n->enteredText.buffer) gf_free(n->enteredText.buffer);",
          "923:    szStr[len] = 0;",
          "924:    n->enteredText.buffer = gf_strdup(szStr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "927:    if ((s32)len<0) len = 0;",
          "",
          "---------------"
        ],
        "src/filters/dec_ttxt.c||src/filters/dec_ttxt.c": [
          "File: src/filters/dec_ttxt.c -> src/filters/dec_ttxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "657:     wsChunk[i-start_char] = 0;",
          "658:     sp = &wsChunk[0];",
          "659:     len = (u32) gf_utf8_wcstombs(szLine, 5000, (const unsigned short **) &sp);",
          "660:     szLine[len] = 0;",
          "662:     gf_sg_vrml_mf_append(&text->string, GF_SG_VRML_MFSTRING, (void **) &st);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "660:     if ((s32)len<0) len = 0;",
          "",
          "---------------"
        ],
        "src/filters/load_text.c||src/filters/load_text.c": [
          "File: src/filters/load_text.c -> src/filters/load_text.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "329:  }",
          "330:  sptr = (u16 *)szLine;",
          "331:  i = (u32) gf_utf8_wcstombs(szLineConv, 2048, (const unsigned short **) &sptr);",
          "332:  szLineConv[i] = 0;",
          "333:  strcpy(szLine, szLineConv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:  if ((s32)i<0) i = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "770:     else if (uniLine[i]=='<')  {",
          "771:      const unsigned short* src = uniLine + i;",
          "772:      size_t alen = gf_utf8_wcstombs(szLine, 2048, (const unsigned short**) & src);",
          "773:      szLine[alen] = 0;",
          "774:      strlwr(szLine);",
          "775:      if (!strncmp(szLine, \"<font \", 6) ) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "774:      if (alen<0) alen = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "943:    sptr = (u16 *) uniText;",
          "944:    len = (u32) gf_utf8_wcstombs(szText, 5000, (const u16 **) &sptr);",
          "946:    gf_isom_text_add_text(ctx->samp, szText, len);",
          "947:    char_len += char_line;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "947:    if ((s32)len<0) len = 0;",
          "",
          "---------------"
        ],
        "src/isomedia/box_dump.c||src/isomedia/box_dump.c": [
          "File: src/isomedia/box_dump.c -> src/isomedia/box_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6274:    u32 len = (u32) ( UTF8_MAX_BYTES_PER_CHAR * gf_utf8_wcslen(src_str) );",
          "6275:    char *utf8str = (char *)gf_malloc(len + 1);",
          "6276:    u32 res_len = (u32) gf_utf8_wcstombs(utf8str, len, (const unsigned short **) &src_str);",
          "6280:    gf_free(utf8str);",
          "6281:   } else {",
          "6282:    gf_fprintf(trace, \" value=\\\"\");",
          "",
          "[Removed Lines]",
          "6277:    utf8str[res_len] = 0;",
          "6279:    gf_fprintf(trace, \" value=\\\"%s\\\">\\n\", utf8str);",
          "",
          "[Added Lines]",
          "6277:    if (res_len != (u32) -1) {",
          "6278:     utf8str[res_len] = 0;",
          "6280:     gf_fprintf(trace, \" value=\\\"%s\\\">\\n\", utf8str);",
          "6281:    }",
          "",
          "---------------"
        ],
        "src/scenegraph/dom_js.c||src/scenegraph/dom_js.c": [
          "File: src/scenegraph/dom_js.c -> src/scenegraph/dom_js.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2378:   txt[1] = 0;",
          "2379:   srcp = (const u16 *) txt;",
          "2380:   len = (u32) gf_utf8_wcstombs(szData, 5, &srcp);",
          "2381:   szData[len] = 0;",
          "2382:   return JS_NewString(c, szData);",
          "2383:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2381:   if ((s32)len<0) len = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bfa7667ecd1e08951c452c32d4d246d9b20e435",
      "candidate_info": {
        "commit_hash": "0bfa7667ecd1e08951c452c32d4d246d9b20e435",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/0bfa7667ecd1e08951c452c32d4d246d9b20e435",
        "files": [
          "applications/mp4box/filedump.c",
          "include/gpac/main.h",
          "include/gpac/utf.h",
          "modules/ft_font/ft_font.c",
          "src/compositor/compositor.c",
          "src/compositor/events.c",
          "src/compositor/mpeg4_inputsensor.c",
          "src/compositor/svg_font.c",
          "src/filters/dasher.c",
          "src/filters/dec_ttxt.c",
          "src/filters/load_text.c",
          "src/filters/reframe_mp3.c",
          "src/isomedia/box_dump.c",
          "src/isomedia/isom_write.c",
          "src/odf/odf_code.c",
          "src/scene_manager/scene_dump.c",
          "src/scene_manager/swf_bifs.c",
          "src/scene_manager/swf_svg.c",
          "src/scenegraph/dom_js.c",
          "src/utils/os_file.c",
          "src/utils/utf.c",
          "src/utils/xml_parser.c"
        ],
        "message": "cosmetics on utf8 conversion and fixed warnings",
        "before_after_code_files": [
          "applications/mp4box/filedump.c||applications/mp4box/filedump.c",
          "include/gpac/main.h||include/gpac/main.h",
          "include/gpac/utf.h||include/gpac/utf.h",
          "modules/ft_font/ft_font.c||modules/ft_font/ft_font.c",
          "src/compositor/compositor.c||src/compositor/compositor.c",
          "src/compositor/events.c||src/compositor/events.c",
          "src/compositor/mpeg4_inputsensor.c||src/compositor/mpeg4_inputsensor.c",
          "src/compositor/svg_font.c||src/compositor/svg_font.c",
          "src/filters/dasher.c||src/filters/dasher.c",
          "src/filters/dec_ttxt.c||src/filters/dec_ttxt.c",
          "src/filters/load_text.c||src/filters/load_text.c",
          "src/filters/reframe_mp3.c||src/filters/reframe_mp3.c",
          "src/isomedia/box_dump.c||src/isomedia/box_dump.c",
          "src/isomedia/isom_write.c||src/isomedia/isom_write.c",
          "src/odf/odf_code.c||src/odf/odf_code.c",
          "src/scene_manager/scene_dump.c||src/scene_manager/scene_dump.c",
          "src/scene_manager/swf_bifs.c||src/scene_manager/swf_bifs.c",
          "src/scene_manager/swf_svg.c||src/scene_manager/swf_svg.c",
          "src/scenegraph/dom_js.c||src/scenegraph/dom_js.c",
          "src/utils/os_file.c||src/utils/os_file.c",
          "src/utils/utf.c||src/utils/utf.c",
          "src/utils/xml_parser.c||src/utils/xml_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/filters/load_text.c||src/filters/load_text.c"
          ],
          "candidate": [
            "src/filters/load_text.c||src/filters/load_text.c"
          ]
        }
      },
      "candidate_diff": {
        "applications/mp4box/filedump.c||applications/mp4box/filedump.c": [
          "File: applications/mp4box/filedump.c -> applications/mp4box/filedump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3782:    fprintf(stderr, \"unknown type %d\\n\", type);",
          "3783:   } else {",
          "3784:    u16 *src_str = (u16 *) data;",
          "3786:    char *utf8str = (char *)gf_malloc(len + 1);",
          "3789:     utf8str[res_len] = 0;",
          "3790:     fprintf(stderr, \"%s\\n\", utf8str);",
          "3791:    }",
          "",
          "[Removed Lines]",
          "3785:    u32 len = (u32) ( UTF8_MAX_BYTES_PER_CHAR * gf_utf8_wcslen(src_str) );",
          "3787:    u32 res_len = (u32) gf_utf8_wcstombs(utf8str, len, (const unsigned short **) &src_str);",
          "3788:    if (res_len != (u32) -1) {",
          "",
          "[Added Lines]",
          "3785:    u32 len = UTF8_MAX_BYTES_PER_CHAR * gf_utf8_wcslen(src_str);",
          "3787:    u32 res_len = gf_utf8_wcstombs(utf8str, len, (const unsigned short **) &src_str);",
          "3788:    if (res_len != GF_UTF8_FAIL) {",
          "",
          "---------------"
        ],
        "include/gpac/main.h||include/gpac/main.h": [
          "File: include/gpac/main.h -> include/gpac/main.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: {\\",
          "58:  int i;\\",
          "59:  int res;\\",
          "62:  char **argv;\\",
          "63:  argv = (char **)malloc(argc*sizeof(wchar_t *));\\",
          "64:  for (i = 0; i < argc; i++) {\\",
          "",
          "[Removed Lines]",
          "60:  size_t len;\\",
          "61:  size_t res_len;\\",
          "",
          "[Added Lines]",
          "60:  u32 len;\\",
          "61:  u32 res_len;\\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   len = UTF8_MAX_BYTES_PER_CHAR*gf_utf8_wcslen(wargv[i]);\\",
          "67:   argv[i] = (char *)malloc(len + 1);\\",
          "68:   res_len = gf_utf8_wcstombs(argv[i], len, (const unsigned short **) &src_str);\\",
          "70:   if (res_len > len) {\\",
          "71:    fprintf(stderr, \"Length allocated for conversion of wide char to UTF-8 not sufficient\\n\");\\",
          "72:    return -1;\\",
          "",
          "[Removed Lines]",
          "69:   argv[i][res_len] = 0;\\",
          "",
          "[Added Lines]",
          "69:   if (res_len != GF_UTF8_FAIL)\\",
          "70:    argv[i][res_len] = 0;\\",
          "",
          "---------------"
        ],
        "include/gpac/utf.h||include/gpac/utf.h": [
          "File: include/gpac/utf.h -> include/gpac/utf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #include <gpac/tools.h>",
          "53: \\brief wide-char to multibyte conversion",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #define GF_UTF8_FAIL 0xFFFFFFFF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "56: \\param dst multibyte destination buffer",
          "57: \\param dst_len multibyte destination buffer size",
          "58: \\param srcp address of the wide-char string. This will be set to the next char to be converted in the input buffer if not enough space in the destination, or NULL if conversion was completed.",
          "64: \\brief multibyte to wide-char conversion",
          "",
          "[Removed Lines]",
          "59: \\return length (in byte) of the multibyte string or -1 if error.",
          "61: size_t gf_utf8_wcstombs(char* dst, size_t dst_len, const unsigned short** srcp);",
          "",
          "[Added Lines]",
          "60: \\return length (in byte) of the multibyte string or GF_UTF8_FAIL if error.",
          "62: u32 gf_utf8_wcstombs(char* dst, size_t dst_len, const unsigned short** srcp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67: \\param dst wide-char destination buffer",
          "68: \\param dst_len wide-char destination buffer size",
          "69: \\param srcp address of the multibyte character buffer. This will be set to the next char to be converted in the input buffer if not enough space in the destination, or NULL if conversion was completed.",
          "75: \\brief wide-char string length",
          "",
          "[Removed Lines]",
          "70: \\return length (in unsigned short) of the wide-char string or -1 if error.",
          "72: size_t gf_utf8_mbstowcs(unsigned short* dst, size_t dst_len, const char** srcp);",
          "",
          "[Added Lines]",
          "71: \\return length (in unsigned short) of the wide-char string or GF_UTF8_FAIL if error.",
          "73: u32 gf_utf8_mbstowcs(unsigned short* dst, size_t dst_len, const char** srcp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78: \\param s the wide-char string",
          "79: \\return the wide-char string length",
          "84: \\brief returns a UTF8 string from a string started with BOM",
          "",
          "[Removed Lines]",
          "81: size_t gf_utf8_wcslen(const unsigned short *s);",
          "",
          "[Added Lines]",
          "82: u32 gf_utf8_wcslen(const unsigned short *s);",
          "",
          "---------------"
        ],
        "modules/ft_font/ft_font.c||modules/ft_font/ft_font.c": [
          "File: modules/ft_font/ft_font.c -> modules/ft_font/ft_font.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "594: static GF_Err ft_get_glyphs(GF_FontReader *dr, const char *utf_string, u32 *glyph_buffer, u32 *io_glyph_buffer_size, const char *xml_lang, Bool *is_rtl)",
          "595: {",
          "597:  u32 len;",
          "598:  u32 i;",
          "599:  u16 *conv;",
          "",
          "[Removed Lines]",
          "596:  size_t _len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "614:   return GF_BUFFER_TOO_SMALL;",
          "615:  }",
          "619:  if (utf8) return GF_IO_ERR;",
          "",
          "[Removed Lines]",
          "616:  _len = gf_utf8_mbstowcs((u16*) glyph_buffer, *io_glyph_buffer_size, (const char **) &utf8);",
          "617:  if (_len==(size_t)-1) return GF_IO_ERR;",
          "618:  len = (u32) _len;",
          "",
          "[Added Lines]",
          "615:  len = gf_utf8_mbstowcs((u16*) glyph_buffer, *io_glyph_buffer_size, (const char **) &utf8);",
          "616:  if (len == GF_UTF8_FAIL) return GF_IO_ERR;",
          "",
          "---------------"
        ],
        "src/compositor/compositor.c||src/compositor/compositor.c": [
          "File: src/compositor/compositor.c -> src/compositor/compositor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3799: const char *gf_sc_get_selected_text(GF_Compositor *compositor)",
          "3800: {",
          "3801:  const u16 *srcp;",
          "3803:  if (compositor->store_text_state != GF_SC_TSEL_FROZEN) return NULL;",
          "3805:  gf_sc_lock(compositor, GF_TRUE);",
          "",
          "[Removed Lines]",
          "3802:  size_t len;",
          "",
          "[Added Lines]",
          "3802:  u32 len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3819:  if (compositor->selected_text) gf_free(compositor->selected_text);",
          "3820:  compositor->selected_text = gf_malloc(sizeof(char)*2*compositor->sel_buffer_len);",
          "3821:  len = gf_utf8_wcstombs((char *) compositor->selected_text, 2*compositor->sel_buffer_len, &srcp);",
          "3823:  compositor->selected_text[len] = 0;",
          "3824:  gf_sc_lock(compositor, GF_FALSE);",
          "",
          "[Removed Lines]",
          "3822:  if ((s32)len<0) len = 0;",
          "",
          "[Added Lines]",
          "3822:  if (len == GF_UTF8_FAIL) len = 0;",
          "",
          "---------------"
        ],
        "src/compositor/events.c||src/compositor/events.c": [
          "File: src/compositor/events.c -> src/compositor/events.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  }",
          "87:  if (compositor->sel_buffer_len) {",
          "88:   char *txt;",
          "90:   const u16 *lptr;",
          "91:   txt = (char*)gf_malloc(sizeof(char)*2*compositor->sel_buffer_len);",
          "92:   lptr = compositor->sel_buffer;",
          "93:   len = gf_utf8_wcstombs(txt, 2*compositor->sel_buffer_len, &lptr);",
          "95:   txt[len] = 0;",
          "97:   gf_free(txt);",
          "",
          "[Removed Lines]",
          "89:   size_t len;",
          "94:   if ((s32)len<0) len = 0;",
          "",
          "[Added Lines]",
          "89:   u32 len;",
          "94:   if (len == GF_UTF8_FAIL) len = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135: GF_Err gf_sc_paste_text(GF_Compositor *compositor, const char *text)",
          "136: {",
          "137:  u16 *conv_buf;",
          "139:  if (!compositor->sel_buffer || !compositor->edited_text) return GF_BAD_PARAM;",
          "140:  if (!text) return GF_OK;",
          "142:  if (!len) return GF_OK;",
          "144:  gf_sc_lock(compositor, GF_TRUE);",
          "146:  conv_buf = (u16*)gf_malloc(sizeof(u16)*(len+1));",
          "147:  len = gf_utf8_mbstowcs(conv_buf, len, &text);",
          "150:  if (compositor->sel_buffer_len == compositor->sel_buffer_alloc)",
          "151:   compositor->sel_buffer_alloc++;",
          "",
          "[Removed Lines]",
          "138:  size_t len;",
          "141:  len = strlen(text);",
          "149:  compositor->sel_buffer_alloc += (u32) len;",
          "",
          "[Added Lines]",
          "138:  u32 len;",
          "141:  len = (u32) strlen(text);",
          "148:  if (len == GF_UTF8_FAIL) return GF_IO_ERR;",
          "150:  compositor->sel_buffer_alloc += len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:  memmove(&compositor->sel_buffer[compositor->caret_pos+len], &compositor->sel_buffer[compositor->caret_pos], sizeof(u16)*(compositor->sel_buffer_len-compositor->caret_pos));",
          "155:  memcpy(&compositor->sel_buffer[compositor->caret_pos], conv_buf, sizeof(u16)*len);",
          "156:  gf_free(conv_buf);",
          "159:  compositor->sel_buffer[compositor->sel_buffer_len]=0;",
          "160:  flush_text_node_edit(compositor, GF_FALSE);",
          "161:  gf_sc_lock(compositor, GF_FALSE);",
          "",
          "[Removed Lines]",
          "157:  compositor->sel_buffer_len += (u32) len;",
          "158:  compositor->caret_pos += (u32) len;",
          "",
          "[Added Lines]",
          "158:  compositor->sel_buffer_len += len;",
          "159:  compositor->caret_pos += len;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "281:        gf_node_list_insert_child(&children, t, pos);",
          "282:        res = &((GF_DOMText *)child->node)->textContent;",
          "283:       } else {",
          "285:        GF_DOMText *cur;",
          "287:        gf_node_list_insert_child(&children, t, pos+1);",
          "",
          "[Removed Lines]",
          "284:        size_t len;",
          "",
          "[Added Lines]",
          "285:        u32 len;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "299:        cur->textContent = (char*)gf_malloc(sizeof(char)*(len+1));",
          "300:        srcp = compositor->sel_buffer;",
          "301:        len = gf_utf8_wcstombs(cur->textContent, len, &srcp);",
          "303:        cur->textContent[len] = 0;",
          "304:        compositor->sel_buffer[compositor->caret_pos] = end;",
          "",
          "[Removed Lines]",
          "302:        if ((s32)len<0) len = 0;",
          "",
          "[Added Lines]",
          "303:        if (len == GF_UTF8_FAIL) len = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "308:         ntext->textContent = (char*)gf_malloc(sizeof(char)*(len+1));",
          "309:         srcp = compositor->sel_buffer + compositor->caret_pos + 1;",
          "310:         len = gf_utf8_wcstombs(ntext->textContent, len, &srcp);",
          "312:         ntext->textContent[len] = 0;",
          "313:        } else {",
          "314:         ntext->textContent = gf_strdup(\"\");",
          "",
          "[Removed Lines]",
          "311:         if ((s32)len<0) len = 0;",
          "",
          "[Added Lines]",
          "312:         if (len == GF_UTF8_FAIL) len = 0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "372:   compositor->sel_buffer = (u16*)gf_realloc(compositor->sel_buffer, sizeof(u16)*compositor->sel_buffer_alloc);",
          "374:   if (caret_pos>=0) {",
          "377:    memmove(&compositor->sel_buffer[caret_pos+1], &compositor->sel_buffer[caret_pos], sizeof(u16)*(compositor->sel_buffer_len-caret_pos));",
          "378:    compositor->sel_buffer[caret_pos] = GF_CARET_CHAR;",
          "379:    compositor->caret_pos = caret_pos;",
          "381:   } else {",
          "384:    compositor->sel_buffer[compositor->sel_buffer_len] = GF_CARET_CHAR;",
          "385:    compositor->caret_pos = compositor->sel_buffer_len;",
          "386:   }",
          "",
          "[Removed Lines]",
          "375:    size_t l = gf_utf8_mbstowcs(compositor->sel_buffer, compositor->sel_buffer_alloc, &src);",
          "376:    compositor->sel_buffer_len = (u32) l;",
          "382:    size_t l = gf_utf8_mbstowcs(compositor->sel_buffer, compositor->sel_buffer_alloc, &src);",
          "383:    compositor->sel_buffer_len = (u32) l;",
          "",
          "[Added Lines]",
          "376:    u32 l = gf_utf8_mbstowcs(compositor->sel_buffer, compositor->sel_buffer_alloc, &src);",
          "377:    if (l == GF_UTF8_FAIL) return GF_FALSE;",
          "378:    compositor->sel_buffer_len = l;",
          "384:    u32 l = gf_utf8_mbstowcs(compositor->sel_buffer, compositor->sel_buffer_alloc, &src);",
          "385:    if (l == GF_UTF8_FAIL) return GF_FALSE;",
          "386:    compositor->sel_buffer_len = l;",
          "",
          "---------------"
        ],
        "src/compositor/mpeg4_inputsensor.c||src/compositor/mpeg4_inputsensor.c": [
          "File: src/compositor/mpeg4_inputsensor.c -> src/compositor/mpeg4_inputsensor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:   field1->eventType = field2->eventType = 0;",
          "357:   is_ctx->enteredText[is_ctx->text_len] = (short) '\\0';",
          "360:   if (len && (is_ctx->enteredText[len-1] == is_ctx->termChar)) {",
          "361:    ptr = is_ctx->enteredText;",
          "364:    if (outText->buffer) gf_free(outText->buffer);",
          "365:    outText->buffer = (char*)gf_malloc(sizeof(char) * (len));",
          "367:    outText->buffer[len-1] = 0;",
          "368:    if (inText->buffer) gf_free(inText->buffer);",
          "369:    inText->buffer = NULL;",
          "",
          "[Removed Lines]",
          "359:   len = (u32) gf_utf8_wcslen(is_ctx->enteredText);",
          "362:    len = (u32) gf_utf8_wcstombs(tmp_utf8, 5000, &ptr);",
          "363:    if ((s32)len<0) len = 1;",
          "366:    memcpy(outText->buffer, tmp_utf8, sizeof(char) * len-1);",
          "",
          "[Added Lines]",
          "359:   len = gf_utf8_wcslen(is_ctx->enteredText);",
          "362:    len = gf_utf8_wcstombs(tmp_utf8, 5000, &ptr);",
          "363:    if (len == GF_UTF8_FAIL) len = 1;",
          "366:    memcpy(outText->buffer, tmp_utf8, sizeof(char) * (len-1) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "382:    }",
          "383:    is_ctx->text_len = len;",
          "384:    ptr = is_ctx->enteredText;",
          "387:    if (inText->buffer) gf_free(inText->buffer);",
          "388:    inText->buffer = (char*)gf_malloc(sizeof(char) * (len+1));",
          "389:    memcpy(inText->buffer, tmp_utf8, sizeof(char) * len);",
          "",
          "[Removed Lines]",
          "385:    len = (u32) gf_utf8_wcstombs(tmp_utf8, 5000, &ptr);",
          "386:    if ((s32)len<0) len = 0;",
          "",
          "[Added Lines]",
          "385:    len = gf_utf8_wcstombs(tmp_utf8, 5000, &ptr);",
          "386:    if (len == GF_UTF8_FAIL) len = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "795:    tc[0] = keyPressed;",
          "796:    tc[1] = 0;",
          "797:    ptr = tc;",
          "800:    n->keyPress.buffer = (char*)gf_malloc(sizeof(char) * (len+1));",
          "801:    memcpy(n->keyPress.buffer, szStr, sizeof(char) * len);",
          "802:    n->keyPress.buffer[len] = 0;",
          "",
          "[Removed Lines]",
          "798:    len = (u32) gf_utf8_wcstombs(szStr, 10, &ptr);",
          "799:    if ((s32)len<0) len = 0;",
          "",
          "[Added Lines]",
          "798:    len = gf_utf8_wcstombs(szStr, 10, &ptr);",
          "799:    if (len == GF_UTF8_FAIL) len = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "807:    tc[0] = keyReleased;",
          "808:    tc[1] = 0;",
          "809:    ptr = tc;",
          "812:    n->keyRelease.buffer = (char*)gf_malloc(sizeof(char) * (len+1));",
          "813:    memcpy(n->keyRelease.buffer, szStr, sizeof(char) * len);",
          "814:    n->keyRelease.buffer[len] = 0;",
          "",
          "[Removed Lines]",
          "810:    len = (u32) gf_utf8_wcstombs(szStr, 10, &ptr);",
          "811:    if ((s32)len<0) len = 0;",
          "",
          "[Added Lines]",
          "810:    len = gf_utf8_wcstombs(szStr, 10, &ptr);",
          "811:    if (len == GF_UTF8_FAIL) len = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "904:     st->text_len -= 1;",
          "905:     st->enteredText[st->text_len] = 0;",
          "906:     ptr = st->enteredText;",
          "909:     if (n->enteredText.buffer) gf_free(n->enteredText.buffer);",
          "910:     szStr[len] = 0;",
          "911:     n->enteredText.buffer = gf_strdup(szStr);",
          "",
          "[Removed Lines]",
          "907:     len = (u32) gf_utf8_wcstombs(szStr, 10, &ptr);",
          "908:     if ((s32)len<0) len = 0;",
          "",
          "[Added Lines]",
          "907:     len = gf_utf8_wcstombs(szStr, 10, &ptr);",
          "908:     if (len == GF_UTF8_FAIL) len = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "923:    st->text_len += 1;",
          "924:    st->enteredText[st->text_len] = 0;",
          "925:    ptr = st->enteredText;",
          "928:    if (n->enteredText.buffer) gf_free(n->enteredText.buffer);",
          "929:    szStr[len] = 0;",
          "930:    n->enteredText.buffer = gf_strdup(szStr);",
          "",
          "[Removed Lines]",
          "926:    len = (u32) gf_utf8_wcstombs(szStr, 10, &ptr);",
          "927:    if ((s32)len<0) len = 0;",
          "",
          "[Added Lines]",
          "926:    len = gf_utf8_wcstombs(szStr, 10, &ptr);",
          "927:    if (len == GF_UTF8_FAIL) len = 0;",
          "",
          "---------------"
        ],
        "src/compositor/svg_font.c||src/compositor/svg_font.c": [
          "File: src/compositor/svg_font.c -> src/compositor/svg_font.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: static GF_Err svg_font_get_glyphs(void *udta, const char *utf_string, u32 *glyph_buffer, u32 *io_glyph_buffer_size, const char *lang, Bool *is_rtl)",
          "45: {",
          "46:  u32 prev_c;",
          "48:  u32 i, gl_idx;",
          "49:  u16 *utf_res;",
          "50:  GF_Node *node = (GF_Node *)udta;",
          "",
          "[Removed Lines]",
          "47:  size_t len;",
          "",
          "[Added Lines]",
          "47:  u32 len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:  }",
          "66:  len = gf_utf8_mbstowcs((u16*) glyph_buffer, *io_glyph_buffer_size, (const char**)&utf8);",
          "69:  if (utf8) return GF_IO_ERR;",
          "72:  utf_res = (u16 *) glyph_buffer;",
          "77:   glyph_buffer[i-1] = utf_res[i-1];",
          "78:  }",
          "",
          "[Removed Lines]",
          "67:  if (len == (size_t) -1) return GF_IO_ERR;",
          "76:  for (i=(u32)len; i>0; i--) {",
          "",
          "[Added Lines]",
          "67:  if (len == GF_UTF8_FAIL) return GF_IO_ERR;",
          "76:  for (i=len; i>0; i--) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349: {",
          "350:  u16 utf_name[20];",
          "351:  u8 *utf8;",
          "353:  GF_Rect rc;",
          "354:  GF_Glyph *glyph;",
          "355:  GF_Font *font;",
          "",
          "[Removed Lines]",
          "352:  size_t len;",
          "",
          "[Added Lines]",
          "352:  u32 len;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "377:  if (!st) return;",
          "378:  utf8 = (u8 *) *atts.unicode;",
          "379:  len = gf_utf8_mbstowcs(utf_name, 200, (const char **) &utf8);",
          "381:  if (len==1) {",
          "382:   st->glyph.utf_name = utf_name[0];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380:  if (len == GF_UTF8_FAIL) return;",
          "",
          "---------------"
        ],
        "src/filters/dasher.c||src/filters/dasher.c": [
          "File: src/filters/dasher.c -> src/filters/dasher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2607:    for (j=0; j<role_count; j++) {",
          "2608:     char *role = ds->p_role->value.string_list.vals[j];",
          "2609:     GF_MPD_Descriptor *desc=NULL;",
          "2612:     if (!strcmp(role, \"caption\") || !strcmp(role, \"subtitle\") || !strcmp(role, \"main\")",
          "2613:            || !strcmp(role, \"alternate\") || !strcmp(role, \"supplementary\") || !strcmp(role, \"commentary\")",
          "",
          "[Removed Lines]",
          "2610:     char *uri;",
          "",
          "[Added Lines]",
          "2610:     char *uri=NULL;",
          "",
          "---------------"
        ],
        "src/filters/dec_ttxt.c||src/filters/dec_ttxt.c": [
          "File: src/filters/dec_ttxt.c -> src/filters/dec_ttxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "656:     memcpy(wsChunk, &utf16_txt[start_char], sizeof(s16)*(i-start_char));",
          "657:     wsChunk[i-start_char] = 0;",
          "658:     sp = &wsChunk[0];",
          "661:     szLine[len] = 0;",
          "663:     gf_sg_vrml_mf_append(&text->string, GF_SG_VRML_MFSTRING, (void **) &st);",
          "",
          "[Removed Lines]",
          "659:     len = (u32) gf_utf8_wcstombs(szLine, 5000, (const unsigned short **) &sp);",
          "660:     if ((s32)len<0) len = 0;",
          "",
          "[Added Lines]",
          "659:     len = gf_utf8_wcstombs(szLine, 5000, (const unsigned short **) &sp);",
          "660:     if (len == GF_UTF8_FAIL) len = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "919:   char_count = txt->len / 2;",
          "920:  } else {",
          "921:   char *p = txt->text;",
          "923:  }",
          "925:  chunks = gf_list_new();",
          "",
          "[Removed Lines]",
          "922:   char_count = (u32) gf_utf8_mbstowcs(utf16_text, 2500, (const char **) &p);",
          "",
          "[Added Lines]",
          "922:   char_count = gf_utf8_mbstowcs(utf16_text, 2500, (const char **) &p);",
          "923:   if (char_count == GF_UTF8_FAIL) char_count = 0;",
          "",
          "---------------"
        ],
        "src/filters/load_text.c||src/filters/load_text.c": [
          "File: src/filters/load_text.c -> src/filters/load_text.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:   }",
          "329:  }",
          "330:  sptr = (u16 *)szLine;",
          "333:  szLineConv[i] = 0;",
          "334:  strcpy(szLine, szLineConv);",
          "",
          "[Removed Lines]",
          "331:  i = (u32) gf_utf8_wcstombs(szLineConv, 2048, (const unsigned short **) &sptr);",
          "332:  if ((s32)i<0) i = 0;",
          "",
          "[Added Lines]",
          "331:  i = gf_utf8_wcstombs(szLineConv, 2048, (const unsigned short **) &sptr);",
          "332:  if (i == GF_UTF8_FAIL) i = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "746:    ptr = (char *) szLine;",
          "747:    {",
          "750:      GF_LOG(GF_LOG_WARNING, GF_LOG_PARSER, (\"[TXTIn] Invalid UTF data (line %d)\\n\", ctx->curLine));",
          "751:      ctx->state = 0;",
          "752:     }",
          "754:    }",
          "755:    i=j=0;",
          "756:    rem_styles = 0;",
          "",
          "[Removed Lines]",
          "748:     size_t _len = gf_utf8_mbstowcs(uniLine, 5000, (const char **) &ptr);",
          "749:     if (_len == (size_t) -1) {",
          "753:     len = (u32) _len;",
          "",
          "[Added Lines]",
          "748:     len = gf_utf8_mbstowcs(uniLine, 5000, (const char **) &ptr);",
          "749:     if (len == GF_UTF8_FAIL) {",
          "752:      len = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "770:     }",
          "771:     else if (uniLine[i]=='<')  {",
          "772:      const unsigned short* src = uniLine + i;",
          "775:      szLine[alen] = 0;",
          "776:      strlwr(szLine);",
          "777:      if (!strncmp(szLine, \"<font \", 6) ) {",
          "",
          "[Removed Lines]",
          "773:      size_t alen = gf_utf8_wcstombs(szLine, 2048, (const unsigned short**) & src);",
          "774:      if (alen<0) alen = 0;",
          "",
          "[Added Lines]",
          "773:      u32 alen = gf_utf8_wcstombs(szLine, 2048, (const unsigned short**) & src);",
          "774:      if (alen == GF_UTF8_FAIL) alen = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "943:    uniText[j] = 0;",
          "945:    sptr = (u16 *) uniText;",
          "949:    gf_isom_text_add_text(ctx->samp, szText, len);",
          "950:    char_len += char_line;",
          "",
          "[Removed Lines]",
          "946:    len = (u32) gf_utf8_wcstombs(szText, 5000, (const u16 **) &sptr);",
          "947:    if ((s32)len<0) len = 0;",
          "",
          "[Added Lines]",
          "946:    len = gf_utf8_wcstombs(szText, 5000, (const u16 **) &sptr);",
          "947:    if (len == GF_UTF8_FAIL) len = 0;",
          "",
          "---------------"
        ],
        "src/filters/reframe_mp3.c||src/filters/reframe_mp3.c": [
          "File: src/filters/reframe_mp3.c -> src/filters/reframe_mp3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196: {",
          "197:  if ((buf[0]==0xFF) || (buf[0]==0xFE)) {",
          "198:   const u16 *sptr = (u16 *) (buf+2);",
          "200:   char *tmp = gf_malloc(len+1);",
          "203:    tmp[len] = 0;",
          "204:    if (is_dyn) {",
          "205:     gf_filter_pid_set_property_dyn(apid, name, &PROP_STRING(tmp) );",
          "",
          "[Removed Lines]",
          "199:   s32 len = (s32) ( UTF8_MAX_BYTES_PER_CHAR * gf_utf8_wcslen(sptr) );",
          "201:   len = (s32) gf_utf8_wcstombs(tmp, len, &sptr);",
          "202:   if (len>=0) {",
          "",
          "[Added Lines]",
          "199:   u32 len = UTF8_MAX_BYTES_PER_CHAR * gf_utf8_wcslen(sptr);",
          "201:   len = gf_utf8_wcstombs(tmp, len, &sptr);",
          "202:   if (len != GF_UTF8_FAIL) {",
          "",
          "---------------"
        ],
        "src/isomedia/box_dump.c||src/isomedia/box_dump.c": [
          "File: src/isomedia/box_dump.c -> src/isomedia/box_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2968: {",
          "2969:  u32 i, j, count, di, nb_descs, shift_offset[20], so_count;",
          "2970:  u64 last_DTS;",
          "2972:  GF_Box *a;",
          "2973:  Bool has_scroll;",
          "2974:  char szDur[100];",
          "",
          "[Removed Lines]",
          "2971:  size_t len;",
          "",
          "[Added Lines]",
          "2971:  u32 len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3184:     str = s_txt->text;",
          "3185:     len = gf_utf8_mbstowcs((u16*)utf16Line, 10000, (const char **) &str);",
          "3186:    }",
          "3188:     utf16Line[len] = 0;",
          "3189:     for (j=0; j<len; j++) {",
          "3190:      if ((utf16Line[j]=='\\n') || (utf16Line[j]=='\\r') || (utf16Line[j]==0x85) || (utf16Line[j]==0x2028) || (utf16Line[j]==0x2029) ) {",
          "",
          "[Removed Lines]",
          "3187:    if (len != (size_t) -1) {",
          "",
          "[Added Lines]",
          "3187:    if (len != GF_UTF8_FAIL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3449:     len = txt->len;",
          "3450:    } else {",
          "3451:     u8 *str = (u8 *) (txt->text);",
          "3455:     utf16Line[len] = 0;",
          "3456:    }",
          "3457:    char_num = 0;",
          "",
          "[Removed Lines]",
          "3452:     size_t res = gf_utf8_mbstowcs(utf16Line, 10000, (const char **) &str);",
          "3453:     if (res==(size_t)-1) return GF_NON_COMPLIANT_BITSTREAM;",
          "3454:     len = (u32) res;",
          "",
          "[Added Lines]",
          "3452:     len = gf_utf8_mbstowcs(utf16Line, 10000, (const char **) &str);",
          "3453:     if (len == GF_UTF8_FAIL) return GF_NON_COMPLIANT_BITSTREAM;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3507:     }",
          "3509:     if (!is_new_line) {",
          "3511:      char szChar[30];",
          "3512:      s16 swT[2], *swz;",
          "3513:      swT[0] = utf16Line[j];",
          "3514:      swT[1] = 0;",
          "3515:      swz= (s16 *)swT;",
          "3516:      sl = gf_utf8_wcstombs(szChar, 30, (const unsigned short **) &swz);",
          "3519:      gf_fprintf(dump, \"%s\", szChar);",
          "3520:     }",
          "3521:     char_num++;",
          "",
          "[Removed Lines]",
          "3510:      size_t sl;",
          "3517:      if (sl == (size_t)-1) sl=0;",
          "3518:      szChar[(u32) sl]=0;",
          "",
          "[Added Lines]",
          "3509:      u32 sl;",
          "3516:      if (sl == GF_UTF8_FAIL) sl=0;",
          "3517:      szChar[sl]=0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6271:   gf_fprintf(trace, \"<WMATag name=\\\"%s\\\" version=\\\"%d\\\" type=\\\"%d\\\"\", tag->name, tag->flags, tag->prop_type);",
          "6272:   if (!tag->prop_type) {",
          "6273:    u16 *src_str = (u16 *) tag->prop_value;",
          "6275:    char *utf8str = (char *)gf_malloc(len + 1);",
          "6278:     utf8str[res_len] = 0;",
          "6280:     gf_fprintf(trace, \" value=\\\"%s\\\">\\n\", utf8str);",
          "",
          "[Removed Lines]",
          "6274:    u32 len = (u32) ( UTF8_MAX_BYTES_PER_CHAR * gf_utf8_wcslen(src_str) );",
          "6276:    u32 res_len = (u32) gf_utf8_wcstombs(utf8str, len, (const unsigned short **) &src_str);",
          "6277:    if (res_len != (u32) -1) {",
          "",
          "[Added Lines]",
          "6273:    u32 len = UTF8_MAX_BYTES_PER_CHAR * gf_utf8_wcslen(src_str);",
          "6275:    u32 res_len = gf_utf8_wcstombs(utf8str, len, (const unsigned short **) &src_str);",
          "6276:    if (res_len != GF_UTF8_FAIL) {",
          "",
          "---------------"
        ],
        "src/isomedia/isom_write.c||src/isomedia/isom_write.c": [
          "File: src/isomedia/isom_write.c -> src/isomedia/isom_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6135:  tag->prop_value = gf_malloc(sizeof(u16) * (len+1) );",
          "6136:  memset(tag->prop_value, 0, sizeof(u16) * (len+1) );",
          "6137:  if (len) {",
          "6143:   tag->prop_size = 2 * _len + 2;",
          "6144:  } else {",
          "6145:   tag->prop_size = 2;",
          "",
          "[Removed Lines]",
          "6138:   u32 _len = (u32) gf_utf8_mbstowcs((u16 *) tag->prop_value, len, (const char **) &value);",
          "6139:   if (_len != (u32) -1) {",
          "6140:    tag->prop_value[2 * _len] = 0;",
          "6141:    tag->prop_value[2 * _len + 1] = 0;",
          "6142:   }",
          "",
          "[Added Lines]",
          "6138:   u32 _len = gf_utf8_mbstowcs((u16 *) tag->prop_value, len, (const char **) &value);",
          "6139:   if (_len == GF_UTF8_FAIL) _len = 0;",
          "6140:   tag->prop_value[2 * _len] = 0;",
          "6141:   tag->prop_value[2 * _len + 1] = 0;",
          "",
          "---------------"
        ],
        "src/odf/odf_code.c||src/odf/odf_code.c": [
          "File: src/odf/odf_code.c -> src/odf/odf_code.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: static GFINLINE u32 OD_SizeUTF8String(char *string, Bool isUTF8)",
          "48: {",
          "49:  if (isUTF8) return 1 + (u32) strlen(string);",
          "51: }",
          "53: static GFINLINE void OD_WriteUTF8String(GF_BitStream *bs, char *string, Bool isUTF8)",
          "",
          "[Removed Lines]",
          "50:  return 1 + 2 * (u32) gf_utf8_wcslen((const unsigned short *)string);",
          "",
          "[Added Lines]",
          "50:  return 1 + 2 * gf_utf8_wcslen((const unsigned short *)string);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   gf_bs_write_int(bs, len, 8);",
          "59:   gf_bs_write_data(bs, string, len);",
          "60:  } else {",
          "62:   gf_bs_write_int(bs, len, 8);",
          "63:   gf_bs_write_data(bs, string, len*2);",
          "64:  }",
          "",
          "[Removed Lines]",
          "61:   len = (u32) gf_utf8_wcslen((const unsigned short *)string);",
          "",
          "[Added Lines]",
          "61:   len = gf_utf8_wcslen((const unsigned short *)string);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2217:   if (etd->isUTF8) {",
          "2218:    nonLen = (u32) strlen((const char*)etd->NonItemText);",
          "2219:   } else {",
          "2221:   }",
          "2222:  } else {",
          "2223:   nonLen = 0;",
          "",
          "[Removed Lines]",
          "2220:    nonLen = (u32) gf_utf8_wcslen((const unsigned short*)etd->NonItemText);",
          "",
          "[Added Lines]",
          "2220:    nonLen = gf_utf8_wcslen((const unsigned short*)etd->NonItemText);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2267:   if (etd->isUTF8) {",
          "2268:    nonLen = (u32) strlen((const char*)etd->NonItemText);",
          "2269:   } else {",
          "2271:   }",
          "2272:  } else {",
          "2273:   nonLen = 0;",
          "",
          "[Removed Lines]",
          "2270:    nonLen = (u32) gf_utf8_wcslen((const unsigned short*)etd->NonItemText);",
          "",
          "[Added Lines]",
          "2270:    nonLen = gf_utf8_wcslen((const unsigned short*)etd->NonItemText);",
          "",
          "---------------"
        ],
        "src/scene_manager/scene_dump.c||src/scene_manager/scene_dump.c": [
          "File: src/scene_manager/scene_dump.c -> src/scene_manager/scene_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: static void scene_dump_utf_string(GF_SceneDumper *sdump, Bool escape_xml, char *str)",
          "424: {",
          "426:  u32 len, i;",
          "427:  u16 *uniLine;",
          "428:  if (!str) return;",
          "429:  len = (u32) strlen(str);",
          "430:  if (!len) return;",
          "431:  uniLine = (u16*)gf_malloc(sizeof(u16) * len*4);",
          "435:   for (i=0; i<len; i++) {",
          "437:    switch (uniLine[i]) {",
          "",
          "[Removed Lines]",
          "425:  size_t _len;",
          "432:  _len = gf_utf8_mbstowcs(uniLine, len, (const char **) &str);",
          "433:  if (_len != (size_t) (-1)) {",
          "434:   len = (u32) _len;",
          "",
          "[Added Lines]",
          "431:  len = gf_utf8_mbstowcs(uniLine, len, (const char **) &str);",
          "432:  if (len != GF_UTF8_FAIL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "597:    gf_fprintf(sdump->trace, \"\\\"%s\\\"\", str);",
          "598:   }",
          "599:   else {",
          "601:    u16 *uniLine;",
          "603:    uniLine = (u16*)gf_malloc(sizeof(short) * (len + 1));",
          "609:     for (i = 0; i<len; i++) {",
          "611:      switch (uniLine[i]) {",
          "",
          "[Removed Lines]",
          "600:    size_t _len;",
          "604:    _len = gf_utf8_mbstowcs(uniLine, len, (const char **)&str);",
          "606:    if (_len != (size_t)-1) {",
          "607:     len = (u32)_len;",
          "",
          "[Added Lines]",
          "601:    len = gf_utf8_mbstowcs(uniLine, len, (const char **)&str);",
          "603:    if (len != GF_UTF8_FAIL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "702:    short uniLine[5000];",
          "703:    str = ((SFURL *)ptr)->url;",
          "704:    len = gf_utf8_mbstowcs(uniLine, 5000, (const char **) &str);",
          "706:     gf_fprintf(sdump->trace, sdump->XMLDump ? (sdump->X3DDump ?  \"'\" : \"&quot;\") : \"\\\"\");",
          "707:     fwprintf(sdump->trace, (unsigned short *) uniLine);",
          "708:     gf_fprintf(sdump->trace, sdump->XMLDump ? (sdump->X3DDump ?  \"'\" : \"&quot;\") : \"\\\"\");",
          "",
          "[Removed Lines]",
          "705:    if (len != (size_t) -1) {",
          "",
          "[Added Lines]",
          "700:    if (len != GF_UTF8_FAIL) {",
          "",
          "---------------"
        ],
        "src/scene_manager/swf_bifs.c||src/scene_manager/swf_bifs.c": [
          "File: src/scene_manager/swf_bifs.c -> src/scene_manager/swf_bifs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "848:   gf_node_register((GF_Node *) par, (GF_Node *)tr);",
          "850:   if (use_text) {",
          "852:    u16 *str_w, *widestr;",
          "853:    char *str;",
          "854:    void *ptr;",
          "",
          "[Removed Lines]",
          "851:    size_t _len;",
          "",
          "[Added Lines]",
          "851:    u32 _len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "882:    str = (char*)gf_malloc(sizeof(char) * (gr->nbGlyphs+2));",
          "883:    widestr = str_w;",
          "884:    _len = gf_utf8_wcstombs(str, sizeof(u8) * (gr->nbGlyphs+1), (const unsigned short **) &widestr);",
          "887:     str[j] = 0;",
          "888:     gf_sg_vrml_mf_reset(&t->string, GF_SG_VRML_MFSTRING);",
          "889:     gf_sg_vrml_mf_append(&t->string, GF_SG_VRML_MFSTRING, &ptr);",
          "",
          "[Removed Lines]",
          "885:    if (_len != (size_t) -1) {",
          "886:     j=(u32) _len;",
          "",
          "[Added Lines]",
          "885:    if (_len != GF_UTF8_FAIL) {",
          "886:     j = _len;",
          "",
          "---------------"
        ],
        "src/scene_manager/swf_svg.c||src/scene_manager/swf_svg.c": [
          "File: src/scene_manager/swf_svg.c -> src/scene_manager/swf_svg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "292:    swf_svg_print(read, \">\");",
          "294:    {",
          "296:     u16     *str_w;",
          "297:     u16     *widestr;",
          "298:     char    *str;",
          "",
          "[Removed Lines]",
          "295:     size_t _len;",
          "",
          "[Added Lines]",
          "295:     u32 _len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "306:     str = (char*)gf_malloc(sizeof(char) * (gr->nbGlyphs+2));",
          "307:     widestr = str_w;",
          "308:     _len = gf_utf8_wcstombs(str, sizeof(u8) * (gr->nbGlyphs+1), (const unsigned short **) &widestr);",
          "311:      swf_svg_print(read, \"%s\", str);",
          "312:     }",
          "313:    }",
          "",
          "[Removed Lines]",
          "309:     if (_len != (size_t) -1) {",
          "310:      str[(u32) _len] = 0;",
          "",
          "[Added Lines]",
          "309:     if (_len != GF_UTF8_FAIL) {",
          "310:      str[_len] = 0;",
          "",
          "---------------"
        ],
        "src/scenegraph/dom_js.c||src/scenegraph/dom_js.c": [
          "File: src/scenegraph/dom_js.c -> src/scenegraph/dom_js.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2377:   txt[0] = evt->detail;",
          "2378:   txt[1] = 0;",
          "2379:   srcp = (const u16 *) txt;",
          "2382:   szData[len] = 0;",
          "2383:   return JS_NewString(c, szData);",
          "2384:  }",
          "",
          "[Removed Lines]",
          "2380:   len = (u32) gf_utf8_wcstombs(szData, 5, &srcp);",
          "2381:   if ((s32)len<0) len = 0;",
          "",
          "[Added Lines]",
          "2380:   len = gf_utf8_wcstombs(szData, 5, &srcp);",
          "2381:   if (len == GF_UTF8_FAIL) len = 0;",
          "",
          "---------------"
        ],
        "src/utils/os_file.c||src/utils/os_file.c": [
          "File: src/utils/os_file.c -> src/utils/os_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "723:  }",
          "725:  tmpdir = _path;",
          "727:   GF_LOG(GF_LOG_ERROR, GF_LOG_CORE, (\"[Core] Cannot convert %s to UTF16: broken string\\n\", dir));",
          "728:   return GF_BAD_PARAM;",
          "729:  }",
          "730:  tmpdir  = filter;",
          "732:   GF_LOG(GF_LOG_ERROR, GF_LOG_CORE, (\"[Core] Cannot convert %s to UTF16: broken string\\n\", filter));",
          "733:   return GF_BAD_PARAM;",
          "734:  }",
          "",
          "[Removed Lines]",
          "726:  if (gf_utf8_mbstowcs(path, GF_MAX_PATH, &tmpdir) == (size_t)-1) {",
          "731:  if (gf_utf8_mbstowcs(w_filter, sizeof(w_filter), &tmpdir) == (size_t)-1) {",
          "",
          "[Added Lines]",
          "726:  if (gf_utf8_mbstowcs(path, GF_MAX_PATH, &tmpdir) == GF_UTF8_FAIL) {",
          "731:  if (gf_utf8_mbstowcs(w_filter, sizeof(w_filter), &tmpdir) == GF_UTF8_FAIL) {",
          "",
          "---------------"
        ],
        "src/utils/utf.c||src/utils/utf.c": [
          "File: src/utils/utf.c -> src/utils/utf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435: }",
          "437: GF_EXPORT",
          "439: {",
          "440:  const unsigned short* ptr;",
          "441:  for (ptr = s; *ptr != (unsigned short)'\\0'; ptr++) {",
          "442:  }",
          "444: }",
          "446: GF_EXPORT",
          "448: {",
          "449:  if (!srcp || !*srcp)",
          "450:   return 0;",
          "",
          "[Removed Lines]",
          "438: size_t gf_utf8_wcslen (const unsigned short *s)",
          "443:  return ptr - s;",
          "447: size_t gf_utf8_wcstombs(char* dest, size_t len, const unsigned short** srcp)",
          "",
          "[Added Lines]",
          "438: u32 gf_utf8_wcslen (const unsigned short *s)",
          "443:  return (u32) ( ptr - s );",
          "447: u32 gf_utf8_wcstombs(char* dest, size_t len, const unsigned short** srcp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "456:   ConversionFlags flags = strictConversion;",
          "458:   ConversionResult res = ConvertUTF16toUTF8(sourceStart, sourceEnd, &targetStart, targetEnd, flags);",
          "463:  }",
          "464: }",
          "466: GF_EXPORT",
          "468: {",
          "469:  if (!srcp || !*srcp)",
          "470:   return 0;",
          "",
          "[Removed Lines]",
          "459:   if (res != conversionOK) return (size_t)-1;",
          "462:   return strlen(dest);",
          "467: size_t gf_utf8_mbstowcs(unsigned short* dest, size_t len, const char** srcp)",
          "",
          "[Added Lines]",
          "459:   if (res != conversionOK) return GF_UTF8_FAIL;",
          "462:   return (u32) strlen(dest);",
          "467: u32 gf_utf8_mbstowcs(unsigned short* dest, size_t len, const char** srcp)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "475:   UTF16* targetEnd = (UTF16* ) (dest + len);",
          "476:   ConversionFlags flags = strictConversion;",
          "477:   ConversionResult res = ConvertUTF8toUTF16(sourceStart, sourceEnd, &targetStart, targetEnd, flags);",
          "481:   return gf_utf8_wcslen(dest);",
          "",
          "[Removed Lines]",
          "478:   if (res != conversionOK) return (size_t)-1;",
          "",
          "[Added Lines]",
          "478:   if (res != conversionOK) return GF_UTF8_FAIL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "486: #else",
          "488: GF_EXPORT",
          "490: {",
          "491:  const unsigned short* ptr;",
          "492:  for (ptr = s; *ptr != (unsigned short)'\\0'; ptr++) {",
          "493:  }",
          "495: }",
          "497: GF_EXPORT",
          "499: {",
          "",
          "[Removed Lines]",
          "489: size_t gf_utf8_wcslen (const unsigned short *s)",
          "494:  return ptr - s;",
          "498: size_t gf_utf8_wcstombs(char* dest, size_t len, const unsigned short** srcp)",
          "",
          "[Added Lines]",
          "489: u32 gf_utf8_wcslen (const unsigned short *s)",
          "494:  return (u32) (ptr - s);",
          "498: u32 gf_utf8_wcstombs(char* dest, size_t len, const unsigned short** srcp)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "539:     } while (count > 0);",
          "540:   }",
          "542:  } else {",
          "544:   size_t totalcount = 0;",
          "",
          "[Removed Lines]",
          "541:   return destptr - dest;",
          "",
          "[Added Lines]",
          "541:   return (u32) (destptr - dest);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "558:    }",
          "559:    totalcount += count;",
          "560:   }",
          "562:  }",
          "563: }",
          "",
          "[Removed Lines]",
          "561:   return totalcount;",
          "",
          "[Added Lines]",
          "561:   return (u32) totalcount;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "576: static gf_utf8_mbstate_t internal;",
          "578: GF_EXPORT",
          "580: {",
          "581:  gf_utf8_mbstate_t* ps = &internal;",
          "582:  const char *src = *srcp;",
          "",
          "[Removed Lines]",
          "579: size_t gf_utf8_mbstowcs(unsigned short* dest, size_t len, const char** srcp)",
          "",
          "[Added Lines]",
          "579: u32 gf_utf8_mbstowcs(unsigned short* dest, size_t len, const char** srcp)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "636:   goto bad_input;",
          "637:  }",
          "641: bad_input:",
          "644: }",
          "",
          "[Removed Lines]",
          "639:  return destptr-dest;",
          "643:  return (size_t)(-1);",
          "",
          "[Added Lines]",
          "639:  return (u32) (destptr - dest);",
          "643:  return GF_UTF8_FAIL;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "723:  result = gf_calloc(source_len + 1, sizeof(wchar_t));",
          "724:  if (!result)",
          "725:   return 0;",
          "727:   gf_free(result);",
          "728:   return 0;",
          "729:  }",
          "",
          "[Removed Lines]",
          "726:  if (gf_utf8_mbstowcs(result, source_len, &str) == (size_t)-1) {",
          "",
          "[Added Lines]",
          "726:  if (gf_utf8_mbstowcs(result, source_len, &str) == GF_UTF8_FAIL) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "740:  result = gf_calloc(source_len + 1, UTF8_MAX_BYTES_PER_CHAR);",
          "741:  if (!result)",
          "742:   return 0;",
          "744:   gf_free(result);",
          "745:   return 0;",
          "746:  }",
          "",
          "[Removed Lines]",
          "743:  if (gf_utf8_wcstombs(result, source_len * UTF8_MAX_BYTES_PER_CHAR, &str) < 0) {",
          "",
          "[Added Lines]",
          "743:  if (gf_utf8_wcstombs(result, source_len * UTF8_MAX_BYTES_PER_CHAR, &str) == GF_UTF8_FAIL) {",
          "",
          "---------------"
        ],
        "src/utils/xml_parser.c||src/utils/xml_parser.c": [
          "File: src/utils/xml_parser.c -> src/utils/xml_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:    if (str[i+1]=='#') {",
          "64:     char szChar[20], *end;",
          "65:     u16 wchar[2];",
          "67:     const unsigned short *srcp;",
          "68:     strncpy(szChar, str+i, 10);",
          "69:     szChar[10] = 0;",
          "",
          "[Removed Lines]",
          "66:     u32 val;",
          "",
          "[Added Lines]",
          "66:     u32 val, _len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:      sscanf(szChar, \"&#%u;\", &val);",
          "79:     wchar[0] = val;",
          "80:     srcp = wchar;",
          "82:    }",
          "83:    else if (!strnicmp(&str[i], \"&amp;\", sizeof(char)*5)) {",
          "84:     value[j] = '&';",
          "",
          "[Removed Lines]",
          "81:     j += (u32) gf_utf8_wcstombs(&value[j], 20, &srcp);",
          "",
          "[Added Lines]",
          "81:     _len = gf_utf8_wcstombs(&value[j], 20, &srcp);",
          "82:     if (_len == GF_UTF8_FAIL) _len = 0;",
          "83:     j += _len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1075:  if (parser->unicode_type>1) {",
          "1076:   const u16 *sptr = (const u16 *)string;",
          "1078:   utf_conv = (char *)gf_malloc(sizeof(char)*(len+1));",
          "1081:    parser->sax_state = SAX_STATE_SYNTAX_ERROR;",
          "1082:    gf_free(utf_conv);",
          "1083:    return GF_CORRUPTED_DATA;",
          "",
          "[Removed Lines]",
          "1077:   u32 len = 2 * (u32) gf_utf8_wcslen(sptr);",
          "1079:   len = (u32) gf_utf8_wcstombs(utf_conv, len, &sptr);",
          "1080:   if (len==(u32) -1) {",
          "",
          "[Added Lines]",
          "1079:   u32 len = 2 * gf_utf8_wcslen(sptr);",
          "1081:   len = gf_utf8_wcstombs(utf_conv, len, &sptr);",
          "1082:   if (len == GF_UTF8_FAIL) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}