{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e70fa7feba0b07eb1b5fe4f5373182875e709b32",
      "candidate_info": {
        "commit_hash": "e70fa7feba0b07eb1b5fe4f5373182875e709b32",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e70fa7feba0b07eb1b5fe4f5373182875e709b32",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h"
        ],
        "message": "Take the declared column time into account when computing the values for generated columns, and apply appropriate affinity.\n\nFossilOrigin-Name: 9e04ba22dfce3998e61331ac229ff543ecccc590284c9dd5def21efbe594fba0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1fbd7438611174aa594485241c8cc2f4ea6d09c57ef2fc16c8995e8061fdfdd6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3395:   }",
          "3396: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3398: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3403: void sqlite3ExprCodeGeneratedColumn(",
          "3404:   Parse *pParse,",
          "3405:   Column *pCol,",
          "3406:   int regOut",
          "3407: ){",
          "3408:   sqlite3ExprCode(pParse, pCol->pDflt, regOut);",
          "3409:   if( pCol->affinity>=SQLITE_AFF_TEXT ){",
          "3410:     sqlite3VdbeAddOp4(pParse->pVdbe, OP_Affinity, regOut, 1, 0,",
          "3411:                       &pCol->affinity, 1);",
          "3412:   }",
          "3413: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3428:         int savedSelfTab = pParse->iSelfTab;",
          "3429:         pCol->colFlags |= COLFLAG_BUSY;",
          "3430:         pParse->iSelfTab = iTabCur+1;",
          "3432:         pParse->iSelfTab = savedSelfTab;",
          "3433:         pCol->colFlags &= ~COLFLAG_BUSY;",
          "3434:       }",
          "",
          "[Removed Lines]",
          "3431:         sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, regOut);",
          "",
          "[Added Lines]",
          "3449:         sqlite3ExprCodeGeneratedColumn(pParse, pCol, regOut);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3630:             }",
          "3631:             pCol->colFlags |= COLFLAG_BUSY;",
          "3632:             if( pCol->colFlags & COLFLAG_NOTAVAIL ){",
          "3634:             }",
          "3635:             pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);",
          "3636:             return iSrc;",
          "",
          "[Removed Lines]",
          "3633:               sqlite3ExprCode(pParse, pCol->pDflt, iSrc);",
          "",
          "[Added Lines]",
          "3651:               sqlite3ExprCodeGeneratedColumn(pParse, pCol, iSrc);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:       if( colFlags & COLFLAG_VIRTUAL ){",
          "242:         assert( pTab->nNVCol+nv == sqlite3TableColumnToStorage(pTab,i) );",
          "245:       }else{",
          "247:         assert( i-nv == sqlite3TableColumnToStorage(pTab,i) );",
          "249:       }",
          "251:     }",
          "252:     if( (colFlags & COLFLAG_VIRTUAL)!=0 ) nv++;",
          "253:   }",
          "",
          "[Removed Lines]",
          "243:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt,",
          "244:                         iRegStore+pTab->nNVCol+nv);",
          "248:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, iRegStore+i-nv);",
          "250:       colFlags &= ~COLFLAG_NOTAVAIL;",
          "",
          "[Added Lines]",
          "243:         sqlite3ExprCodeGeneratedColumn(pParse, &pTab->aCol[i],",
          "244:                                        iRegStore+pTab->nNVCol+nv);",
          "248:         sqlite3ExprCodeGeneratedColumn(pParse, &pTab->aCol[i], iRegStore+i-nv);",
          "250:       pTab->aCol[i].colFlags &= ~COLFLAG_NOTAVAIL;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4096: void sqlite3ExprCodeGetColumnOfTable(Vdbe*, Table*, int, int, int);",
          "4097: void sqlite3ExprCodeMove(Parse*, int, int, int);",
          "4098: void sqlite3ExprCode(Parse*, Expr*, int);",
          "4099: void sqlite3ExprCodeCopy(Parse*, Expr*, int);",
          "4100: void sqlite3ExprCodeFactorable(Parse*, Expr*, int);",
          "4101: int sqlite3ExprCodeAtInit(Parse*, Expr*, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4099: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "4100: void sqlite3ExprCodeGeneratedColumn(Parse*, Column*, int);",
          "4101: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83acc14ad4d03c8956a3d46f1ad555a30d092fed",
      "candidate_info": {
        "commit_hash": "83acc14ad4d03c8956a3d46f1ad555a30d092fed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83acc14ad4d03c8956a3d46f1ad555a30d092fed",
        "files": [
          "VERSION",
          "configure",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Increase the version number to 3.28.0 for the next release cycle.\n\nFossilOrigin-Name: 6eb38c59a81d27b7c1f3edad84b27a1114df6f1607282b2be1b5de9c7decc512",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9bd92afd0cb0a958441e861c7006b77027125b1ceea0868958ec948b6b3c7bc9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b8ab230dce94ccbca56a204589066bca1201d28",
      "candidate_info": {
        "commit_hash": "7b8ab230dce94ccbca56a204589066bca1201d28",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7b8ab230dce94ccbca56a204589066bca1201d28",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/rowvalue.test"
        ],
        "message": "Merge the row-value fix from trunk.\n\nFossilOrigin-Name: 1fbd7438611174aa594485241c8cc2f4ea6d09c57ef2fc16c8995e8061fdfdd6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1a54743a3d327efc8ecc45b9fde91ddfea3fca36408f9b753453c31f2e4cc69c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:         pExpr->pLeft->x.pSelect->pEList->a[pExpr->iColumn].pExpr",
          "71:     );",
          "72:   }",
          "73:   return pExpr->affExpr;",
          "74: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:   if( op==TK_VECTOR ){",
          "74:     return sqlite3ExprAffinity(pExpr->x.pList->a[0].pExpr);",
          "75:   }",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:   SELECT 3 FROM t0 WHERE (aa,1) <= (SELECT +bb,1);",
          "587: } {0 1 3}",
          "589: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589: # 2019-10-22 Ticket 6ef984af8972c2eb",
          "590: do_execsql_test 24.100 {",
          "591:   DROP TABLE t0;",
          "592:   CREATE TABLE t0(c0 TEXT PRIMARY KEY);",
          "593:   INSERT INTO t0(c0) VALUES ('');",
          "594:   SELECT (t0.c0, TRUE) > (CAST(0 AS REAL), FALSE) FROM t0;",
          "595:   SELECT 2 FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE);",
          "596: } {1 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c332e04310c111eeb3354900e3001b6760279980",
      "candidate_info": {
        "commit_hash": "c332e04310c111eeb3354900e3001b6760279980",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c332e04310c111eeb3354900e3001b6760279980",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Enhancement the progress callback mechanism so that the progress callback is always invoked at least once at the end of a prepared statement if the opcode count has been exceeded.  This makes the progress callback more effective at limiting run times.  This check-in also includes and unrelated performance enhancement to OP_Column.\n\nFossilOrigin-Name: 68cce272e7f7cbc0c319ee8b7ff674d652cb1e95e903d99d848c41dff2b5d304",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 93ae382e97c23c90312739481e47ef7f9bc475a8382c063a2de2986c950c0aec",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "823:     assert( db->nProgressOps!=0 );",
          "824:     nProgressLimit = nVmStep + db->nProgressOps - (nVmStep%db->nProgressOps);",
          "825:     if( db->xProgress(db->pProgressArg) ){",
          "826:       rc = SQLITE_INTERRUPT;",
          "827:       goto abort_due_to_error;",
          "828:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "826:       nProgressLimit = 0xffffffff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1368:   assert( pOp->p1>0 );",
          "1369:   assert( pOp->p1+pOp->p2<=(p->nMem+1 - p->nCursor)+1 );",
          "",
          "[Removed Lines]",
          "1371: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "1374:   if( db->xProgress!=0",
          "1375:    && nVmStep>=nProgressLimit",
          "1376:    && db->xProgress(db->pProgressArg)!=0",
          "1377:   ){",
          "1378:     rc = SQLITE_INTERRUPT;",
          "1379:     goto abort_due_to_error;",
          "1380:   }",
          "1381: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2606:       zEndHdr = zData + aOffset[0];",
          "2607:       testcase( zHdr>=zEndHdr );",
          "2608:       do{",
          "2610:           zHdr++;",
          "2611:           offset64 += sqlite3VdbeOneByteSerialTypeLen(t);",
          "2612:         }else{",
          "2613:           zHdr += sqlite3GetVarint32(zHdr, &t);",
          "2614:           offset64 += sqlite3VdbeSerialTypeLen(t);",
          "2615:         }",
          "2618:       }while( i<=p2 && zHdr<zEndHdr );",
          "",
          "[Removed Lines]",
          "2609:         if( (t = zHdr[0])<0x80 ){",
          "2616:         pC->aType[i++] = t;",
          "2617:         aOffset[i] = (u32)(offset64 & 0xffffffff);",
          "",
          "[Added Lines]",
          "2598:         if( (pC->aType[i] = t = zHdr[0])<0x80 ){",
          "2603:           pC->aType[i] = t;",
          "2606:         aOffset[++i] = (u32)(offset64 & 0xffffffff);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7597: vdbe_return:",
          "7599:   p->aCounter[SQLITE_STMTSTATUS_VM_STEP] += (int)nVmStep;",
          "7600:   sqlite3VdbeLeave(p);",
          "7601:   assert( rc!=SQLITE_OK || nExtraDelete==0",
          "",
          "[Removed Lines]",
          "7598:   testcase( nVmStep>0 );",
          "",
          "[Added Lines]",
          "7587: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "7588:   if( nVmStep>=nProgressLimit && db->xProgress!=0 ){",
          "7589:     if( db->xProgress(db->pProgressArg) ){",
          "7590:       nProgressLimit = 0xffffffff;",
          "7591:       rc = SQLITE_INTERRUPT;",
          "7592:       goto abort_due_to_error;",
          "7593:     }",
          "7594:   }",
          "7595: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a22d2fca3315822f16c20cdb3738ac637f31b44a",
      "candidate_info": {
        "commit_hash": "a22d2fca3315822f16c20cdb3738ac637f31b44a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a22d2fca3315822f16c20cdb3738ac637f31b44a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c"
        ],
        "message": "Call sqlite3Prepare() directly, rather than going through sqlite3_prepare(), when processing the sqlite_master.sql column for a schema.\n\nFossilOrigin-Name: cc49380ea76a4a05843d3a0bdfb925464dc9d72c33cf5ab5243dd07d161ad038",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d7667f6560318272c8b35b478e29b0ed134105dfd119a2fd53ef0490442c60cc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   return 0;",
          "58: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: static int sqlite3Prepare(",
          "69: );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106:     db->init.newTnum = sqlite3Atoi(argv[3]);",
          "107:     db->init.orphanTrigger = 0;",
          "108:     db->init.azInit = argv;",
          "110:     rc = db->errCode;",
          "111:     assert( (rc&0xFF)==(rcp&0xFF) );",
          "112:     db->init.iDb = saved_iDb;",
          "",
          "[Removed Lines]",
          "109:     TESTONLY(rcp = ) sqlite3_prepare(db, argv[4], -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "121:     pStmt = 0;",
          "122:     TESTONLY(rcp = ) sqlite3Prepare(db, argv[4], -1, 0, 0, &pStmt, 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}