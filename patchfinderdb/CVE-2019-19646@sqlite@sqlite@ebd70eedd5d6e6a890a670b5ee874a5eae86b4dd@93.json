{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3f49c321e81905648abdb55f7fdf17dc06750a90",
      "candidate_info": {
        "commit_hash": "3f49c321e81905648abdb55f7fdf17dc06750a90",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3f49c321e81905648abdb55f7fdf17dc06750a90",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Fix a couple of problems with \"RANGE BETWEEN <expr> PRECEDING AND <expr> PRECEDING\" frames.\n\nFossilOrigin-Name: 39225cc77579896214dceb93b7f224b4b3bc95b3505a2e19b41b0b18b184fbc4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bce01d9584e52b23d7c07c2e832d5fa5d6e6235711c856b903a296725f61ed6e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2597:     }",
          "2598:   }else",
          "2599:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2600:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2601:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2603:   }else{",
          "2604:     int addr = 0;",
          "2605:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "",
          "[Removed Lines]",
          "2602:     windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "2605:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2607:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2609:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2642:   addrEmpty = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2643:   VdbeCoverage(v);",
          "2644:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2645:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2646:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2647:   }else if( pMWin->eStart==TK_FOLLOWING ){",
          "2648:     int addrStart;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2652:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2654:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1081:   WINDOW win AS (ORDER BY rowid ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)",
          "1082: } {1 1 1 2 3 4}",
          "1085: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084: #-------------------------------------------------------------------------",
          "1086: reset_db",
          "1087: do_execsql_test 28.1.1 {",
          "1088:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b CHAR(1), c CHAR(2), d ANY);",
          "1089:   INSERT INTO t1 VALUES (3, 'C', 'cc', 1.0);",
          "1090:   INSERT INTO t1 VALUES (13,'M', 'cc', NULL);",
          "1091: }",
          "1093: do_execsql_test 28.1.2 {",
          "1094:   SELECT group_concat(b,'') OVER w1 FROM t1",
          "1095:     WINDOW w1 AS (ORDER BY a RANGE BETWEEN 3 PRECEDING AND 1 PRECEDING)",
          "1096: } {",
          "1097:   {} {}",
          "1098: }",
          "1100: do_execsql_test 28.2.1 {",
          "1101:   CREATE TABLE t2(a TEXT, b INTEGER);",
          "1102:   INSERT INTO t2 VALUES('A', NULL);",
          "1103:   INSERT INTO t2 VALUES('B', NULL);",
          "1104: }",
          "1106: do_execsql_test 28.2.1 {",
          "1107:   DROP TABLE IF EXISTS t1;",
          "1108:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b CHAR(1), c CHAR(2), d ANY);",
          "1109:   INSERT INTO t1 VALUES",
          "1110:     (10,'J', 'cc', NULL),",
          "1111:     (11,'K', 'cc', 'xyz'),",
          "1112:     (13,'M', 'cc', NULL);",
          "1113: }",
          "1115: do_execsql_test 28.2.2 {",
          "1116:   SELECT a, b, c, quote(d), group_concat(b,'') OVER w1, '|' FROM t1",
          "1117:     WINDOW w1 AS",
          "1118:     (ORDER BY d DESC RANGE BETWEEN 7.0 PRECEDING AND 2.5 PRECEDING)",
          "1119:     ORDER BY c, d, a;",
          "1120: } {",
          "1121:   10 J cc NULL JM |",
          "1122:   13 M cc NULL JM |",
          "1123:   11 K cc 'xyz' K |",
          "1124: }",
          "1126: #-------------------------------------------------------------------------",
          "1127: reset_db",
          "1129: do_execsql_test 29.1 {",
          "1130:   DROP TABLE IF EXISTS t1;",
          "1131:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b CHAR(1), c CHAR(2), d ANY);",
          "1132:   INSERT INTO t1 VALUES",
          "1133:     (1, 'A', 'aa', 2.5),",
          "1134:     (2, 'B', 'bb', 3.75),",
          "1135:     (3, 'C', 'cc', 1.0),",
          "1136:     (4, 'D', 'cc', 8.25),",
          "1137:     (5, 'E', 'bb', 6.5),",
          "1138:     (6, 'F', 'aa', 6.5),",
          "1139:     (7, 'G', 'aa', 6.0),",
          "1140:     (8, 'H', 'bb', 9.0),",
          "1141:     (9, 'I', 'aa', 3.75),",
          "1142:     (10,'J', 'cc', NULL),",
          "1143:     (11,'K', 'cc', 'xyz'),",
          "1144:     (12,'L', 'cc', 'xyZ'),",
          "1145:     (13,'M', 'cc', NULL);",
          "1146: }",
          "1148: do_execsql_test 29.2 {",
          "1149:   SELECT a, b, c, quote(d), group_concat(b,'') OVER w1, '|' FROM t1",
          "1150:     WINDOW w1 AS",
          "1151:     (PARTITION BY c ORDER BY d DESC",
          "1152:      RANGE BETWEEN 7.0 PRECEDING AND 2.5 PRECEDING)",
          "1153:     ORDER BY c, d, a;",
          "1154: } {",
          "1155:   1 A aa 2.5 FG |",
          "1156:   9 I aa 3.75 F |",
          "1157:   7 G aa 6 {} |",
          "1158:   6 F aa 6.5 {} |",
          "1159:   2 B bb 3.75 HE |",
          "1160:   5 E bb 6.5 H |",
          "1161:   8 H bb 9 {} |",
          "1162:   10 J cc NULL JM |",
          "1163:   13 M cc NULL JM |",
          "1164:   3 C cc 1 {} |",
          "1165:   4 D cc 8.25 {} |",
          "1166:   12 L cc 'xyZ' L |",
          "1167:   11 K cc 'xyz' K |",
          "1168: }",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:   }",
          "270: }",
          "272: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "272: ==========",
          "274: execsql_test 6.0 {",
          "275:   DROP TABLE IF EXISTS t2;",
          "276:   CREATE TABLE t2(a TEXT, b INTEGER);",
          "277:   INSERT INTO t2 VALUES('A', NULL);",
          "278:   INSERT INTO t2 VALUES('B', NULL);",
          "279:   INSERT INTO t2 VALUES('C', 1);",
          "280: }",
          "282: execsql_test 6.1 {",
          "283:   SELECT string_agg(a, '.') OVER (",
          "284:     ORDER BY b NULLS FIRST RANGE BETWEEN 7 PRECEDING AND 2 PRECEDING",
          "285:   )",
          "286:   FROM t2",
          "287: }",
          "289: execsql_test 6.2 {",
          "290:   SELECT string_agg(a, '.') OVER (",
          "291:     ORDER BY b DESC NULLS LAST RANGE BETWEEN 7 PRECEDING AND 2 PRECEDING",
          "292:   )",
          "293:   FROM t2",
          "294: }",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "3841:              count(a) OVER win",
          "3842:       FROM t3",
          "3843:       WINDOW win AS (  ORDER BY c , b , a",
          "3845:       ORDER BY 1 , 2 , 3",
          "3846: } {979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "3847:   979 102 83   979 113 81   979 113 82   979 133 80   979 148 79   979 158 77",
          "",
          "[Removed Lines]",
          "3844:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE NO OTHERS  )",
          "",
          "[Added Lines]",
          "3844:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3865:              dense_rank() OVER win",
          "3866:       FROM t3",
          "3867:       WINDOW win AS (  ORDER BY c , b , a",
          "3869:       ORDER BY 1 , 2 , 3",
          "3870: } {3830 89 89   4741 88 88   5640 84 84   5640 85 85   5640 86 86   5640 87 87",
          "3871:   6485 81 81   6485 82 82   6485 83 83   7324 80 80   8163 78 78   8163 79 79",
          "",
          "[Removed Lines]",
          "3868:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE NO OTHERS  )",
          "",
          "[Added Lines]",
          "3868:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE NO OTHERS  )",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4166:              count(a) OVER win",
          "4167:       FROM t3",
          "4168:       WINDOW win AS (  ORDER BY c , b , a",
          "4170:       ORDER BY 1 , 2 , 3",
          "4171: } {963 929 6   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4172:   979 102 83   979 113 80   979 113 81   979 113 82   979 133 79   979 148 78",
          "",
          "[Removed Lines]",
          "4169:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE CURRENT ROW  )",
          "",
          "[Added Lines]",
          "4169:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4190:              dense_rank() OVER win",
          "4191:       FROM t3",
          "4192:       WINDOW win AS (  ORDER BY c , b , a",
          "4194:       ORDER BY 1 , 2 , 3",
          "4195: } {2851 89 89   3778 88 88   4681 87 87   5556 83 83   5574 82 82   5586 81 81",
          "4196:   5640 84 84   5640 85 85   5640 86 86   7324 80 80   8123 77 77   8129 73 73",
          "",
          "[Removed Lines]",
          "4193:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE CURRENT ROW  )",
          "",
          "[Added Lines]",
          "4193:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE CURRENT ROW  )",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4481:              count(a) OVER win",
          "4482:       FROM t3",
          "4483:       WINDOW win AS (  ORDER BY c , b , a",
          "4485:       ORDER BY 1 , 2 , 3",
          "4486: } {963 929 6   979 102 82   979 102 82   979 102 82   979 102 82   979 102 82",
          "4487:   979 102 83   979 113 80   979 113 81   979 113 82   979 133 79   979 148 78",
          "",
          "[Removed Lines]",
          "4484:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE GROUP  )",
          "",
          "[Added Lines]",
          "4484:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4505:              dense_rank() OVER win",
          "4506:       FROM t3",
          "4507:       WINDOW win AS (  ORDER BY c , b , a",
          "4509:       ORDER BY 1 , 2 , 3",
          "4510: } {2851 89 89   3778 88 88   4681 87 87   5556 83 83   5574 82 82   5586 81 81",
          "4511:   5640 84 84   5640 85 85   5640 86 86   7324 80 80   8123 77 77   8129 73 73",
          "",
          "[Removed Lines]",
          "4508:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE GROUP  )",
          "",
          "[Added Lines]",
          "4508:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE GROUP  )",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4804:              count(a) OVER win",
          "4805:       FROM t3",
          "4806:       WINDOW win AS (  ORDER BY c , b , a",
          "4808:       ORDER BY 1 , 2 , 3",
          "4809: } {979 102 83   979 102 83   979 102 83   979 102 83   979 102 83   979 102 83",
          "4810:   979 102 83   979 113 81   979 113 82   979 133 80   979 148 79   979 158 77",
          "",
          "[Removed Lines]",
          "4807:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE TIES  )",
          "",
          "[Added Lines]",
          "4807:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4828:              dense_rank() OVER win",
          "4829:       FROM t3",
          "4830:       WINDOW win AS (  ORDER BY c , b , a",
          "4832:       ORDER BY 1 , 2 , 3",
          "4833: } {3830 89 89   4741 88 88   5640 84 84   5640 85 85   5640 86 86   5640 87 87",
          "4834:   6485 81 81   6485 82 82   6485 83 83   7324 80 80   8163 78 78   8163 79 79",
          "",
          "[Removed Lines]",
          "4831:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE TIES  )",
          "",
          "[Added Lines]",
          "4831:         ROWS BETWEEN 6 PRECEDING AND UNBOUNDED FOLLOWING   EXCLUDE TIES  )",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4848:   22796 16 16   22929 10 10   23042 9 9   23155 1 1   23155 2 2   23155 3 3",
          "4849:   23155 4 4   23155 5 5   23155 6 6   23155 7 7   23155 8 8}",
          "4851: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4851: #==========================================================================",
          "4853: do_execsql_test 6.0 {",
          "4854:   DROP TABLE IF EXISTS t2;",
          "4855:   CREATE TABLE t2(a TEXT, b INTEGER);",
          "4856:   INSERT INTO t2 VALUES('A', NULL);",
          "4857:   INSERT INTO t2 VALUES('B', NULL);",
          "4858:   INSERT INTO t2 VALUES('C', 1);",
          "4859: } {}",
          "4861: do_execsql_test 6.1 {",
          "4862:   SELECT group_concat(a, '.') OVER (",
          "4863:     ORDER BY b  RANGE BETWEEN 7 PRECEDING AND 2 PRECEDING",
          "4864:   )",
          "4865:   FROM t2",
          "4866: } {A.B   A.B   {}}",
          "4868: do_execsql_test 6.2 {",
          "4869:   SELECT group_concat(a, '.') OVER (",
          "4870:     ORDER BY b DESC  RANGE BETWEEN 7 PRECEDING AND 2 PRECEDING",
          "4871:   )",
          "4872:   FROM t2",
          "4873: } {{}   A.B   A.B}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "16e12c573dbf4afb49bb1f59b2634b4acfee168b",
      "candidate_info": {
        "commit_hash": "16e12c573dbf4afb49bb1f59b2634b4acfee168b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/16e12c573dbf4afb49bb1f59b2634b4acfee168b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/filter1.test",
          "test/filter2.tcl",
          "test/filter2.test"
        ],
        "message": "Add tests for the FILTER clause. And a bugfix.\n\nFossilOrigin-Name: 28aa1702f7f0334abd1b30e7aa48ea3679539b11bfbba32bc9f0d6049cf18a7b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/filter1.test||test/filter1.test",
          "test/filter2.tcl||test/filter2.tcl",
          "test/filter2.test||test/filter2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1f1ae2d6ac8dcbb62e5aa3dc17bc67d559cb565fc0d0a8c00a596075d35f8130",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "827:       if( 0==IN_RENAME_OBJECT ){",
          "828: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "829:         assert( is_agg==0 || (pDef->funcFlags & SQLITE_FUNC_MINMAX)",
          "830:           || (pDef->xValue==0 && pDef->xInverse==0)",
          "831:           || (pDef->xValue && pDef->xInverse && pDef->xSFunc && pDef->xFinalize)",
          "832:         );",
          "834:           sqlite3ErrorMsg(pParse,",
          "835:               \"%.*s() may not be used as a window function\", nId, zId",
          "836:           );",
          "837:           pNC->nErr++;",
          "838:         }else if(",
          "839:               (is_agg && (pNC->ncFlags & NC_AllowAgg)==0)",
          "842:         ){",
          "843:           const char *zType;",
          "845:             zType = \"window\";",
          "846:           }else{",
          "847:             zType = \"aggregate\";",
          "",
          "[Removed Lines]",
          "833:         if( pDef && pDef->xValue==0 && ExprHasProperty(pExpr, EP_WinFunc) ){",
          "840:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !pExpr->y.pWin)",
          "841:            || (is_agg && pExpr->y.pWin && (pNC->ncFlags & NC_AllowWin)==0)",
          "844:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || pExpr->y.pWin ){",
          "",
          "[Added Lines]",
          "829:         int is_win = ExprHasProperty(pExpr, EP_WinFunc);",
          "834:         if( pDef && pDef->xValue==0 && is_win ){",
          "841:            || (is_agg && (pDef->funcFlags&SQLITE_FUNC_WINDOW) && !is_win)",
          "842:            || (is_agg && is_win && (pNC->ncFlags & NC_AllowWin)==0)",
          "845:           if( (pDef->funcFlags & SQLITE_FUNC_WINDOW) || is_win ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "882: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "884: #else",
          "885:           pNC->ncFlags &= ~NC_AllowAgg;",
          "886: #endif",
          "",
          "[Removed Lines]",
          "883:           pNC->ncFlags &= ~(NC_AllowWin | (!pExpr->y.pWin ? NC_AllowAgg : 0));",
          "",
          "[Added Lines]",
          "884:           pNC->ncFlags &= ~(NC_AllowWin | (!is_win ? NC_AllowAgg : 0));",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: do_catchsql_test 2.3 {",
          "85:   SELECT sum(a) FILTER (WHERE 1 - count(a)) FROM t1",
          "88: finish_test",
          "",
          "[Removed Lines]",
          "86: } {1 {misuse of aggregate: count()}}",
          "",
          "[Added Lines]",
          "86: } {1 {misuse of aggregate function count()}}",
          "",
          "---------------"
        ],
        "test/filter2.tcl||test/filter2.tcl": [
          "File: test/filter2.tcl -> test/filter2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:   ORDER BY 1, 2, 3, 4;",
          "69: }",
          "71: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: execsql_test 1.8 {",
          "72:   SELECT sum(a+b) FILTER (WHERE a=NULL) FROM t1",
          "73: }",
          "75: execsql_test 1.9 {",
          "76:   SELECT (a%5) FROM t1 GROUP BY (a%5)",
          "77:   HAVING sum(b) FILTER (WHERE b<20) > 34",
          "78:   ORDER BY 1",
          "79: }",
          "81: execsql_test 1.10 {",
          "82:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "83:   FROM t1",
          "84:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "85:   ORDER BY 1",
          "86: }",
          "88: execsql_test 1.11 {",
          "89:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "90:   FROM t1",
          "91:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "92:   ORDER BY 2",
          "93: }",
          "95: execsql_test 1.12 {",
          "96:   SELECT (a%5),",
          "97:     sum(b) FILTER (WHERE b<20) AS bbb,",
          "98:     count(distinct b) FILTER (WHERE b<20 OR a=13) AS ccc",
          "99:   FROM t1 GROUP BY (a%5)",
          "100:   ORDER BY 2",
          "101: }",
          "103: execsql_test 1.13 {",
          "104:   SELECT",
          "105:     string_agg(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=0),",
          "106:     string_agg(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=1),",
          "107:     count(*) FILTER (WHERE b%2!=0),",
          "108:     count(*) FILTER (WHERE b%2!=1)",
          "109:   FROM t1;",
          "110: }",
          "112: execsql_float_test 1.14 {",
          "113:   SELECT",
          "114:     avg(b) FILTER (WHERE b>a),",
          "115:     avg(b) FILTER (WHERE b<a)",
          "116:   FROM t1 GROUP BY (a%2) ORDER BY 1,2;",
          "117: }",
          "119: execsql_test 1.15 {",
          "120:   SELECT",
          "121:     a/5,",
          "122:     sum(b) FILTER (WHERE a%5=0),",
          "123:     sum(b) FILTER (WHERE a%5=1),",
          "124:     sum(b) FILTER (WHERE a%5=2),",
          "125:     sum(b) FILTER (WHERE a%5=3),",
          "126:     sum(b) FILTER (WHERE a%5=4)",
          "127:   FROM t1 GROUP BY (a/5) ORDER BY 1;",
          "128: }",
          "",
          "---------------"
        ],
        "test/filter2.test||test/filter2.test": [
          "File: test/filter2.test -> test/filter2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: } {3 3 58 58   3 3 71 39   4 4 38 61   7 7 85 85   11 5 54 45   16 16 81 81",
          "80:   18 3 66 61   21 3 88 68   23 11 79 79   24 24 68 68}",
          "82: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: do_execsql_test 1.8 {",
          "83:   SELECT sum(a+b) FILTER (WHERE a=NULL) FROM t1",
          "84: } {{}}",
          "86: do_execsql_test 1.9 {",
          "87:   SELECT (a%5) FROM t1 GROUP BY (a%5)",
          "88:   HAVING sum(b) FILTER (WHERE b<20) > 34",
          "89:   ORDER BY 1",
          "90: } {3   4}",
          "92: do_execsql_test 1.10 {",
          "93:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "94:   FROM t1",
          "95:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "96:   ORDER BY 1",
          "97: } {3 49   4 46}",
          "99: do_execsql_test 1.11 {",
          "100:   SELECT (a%5), sum(b) FILTER (WHERE b<20) AS bbb",
          "101:   FROM t1",
          "102:   GROUP BY (a%5) HAVING sum(b) FILTER (WHERE b<20) >34",
          "103:   ORDER BY 2",
          "104: } {4 46   3 49}",
          "106: do_execsql_test 1.12 {",
          "107:   SELECT (a%5),",
          "108:     sum(b) FILTER (WHERE b<20) AS bbb,",
          "109:     count(distinct b) FILTER (WHERE b<20 OR a=13) AS ccc",
          "110:   FROM t1 GROUP BY (a%5)",
          "111:   ORDER BY 2",
          "112: } {2 25 3   0 34 2   1 34 4   4 46 4   3 49 5}",
          "114: do_execsql_test 1.13 {",
          "115:   SELECT",
          "116:     group_concat(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=0),",
          "117:     group_concat(CAST(b AS TEXT), '_') FILTER (WHERE b%2!=1),",
          "118:     count(*) FILTER (WHERE b%2!=0),",
          "119:     count(*) FILTER (WHERE b%2!=1)",
          "120:   FROM t1;",
          "121: } {7_3_5_23_27_3_17_33_25_47_13_45_31_11_37_21_3_7_29_3_3_23_5_11_25_15_23 30_26_26_36_36_22_14_16_50_38_36_12_4_46_48_24_46_18_18 27 19}",
          "124: do_test 1.14 {",
          "125:   set myres {}",
          "126:   foreach r [db eval {SELECT",
          "127:     avg(b) FILTER (WHERE b>a),",
          "128:     avg(b) FILTER (WHERE b<a)",
          "129:   FROM t1 GROUP BY (a%2) ORDER BY 1,2;}] {",
          "130:     lappend myres [format %.4f [set r]]",
          "131:   }",
          "132:   set res2 {30.8333 13.7273 31.4167 13.0000}",
          "133:   set i 0",
          "134:   foreach r [set myres] r2 [set res2] {",
          "135:     if {[set r]<([set r2]-0.0001) || [set r]>([set r2]+0.0001)} {",
          "136:       error \"list element [set i] does not match: got=[set r] expected=[set r2]\"",
          "137:     }",
          "138:     incr i",
          "139:   }",
          "140:   set {} {}",
          "141: } {}",
          "143: do_execsql_test 1.15 {",
          "144:   SELECT",
          "145:     a/5,",
          "146:     sum(b) FILTER (WHERE a%5=0),",
          "147:     sum(b) FILTER (WHERE a%5=1),",
          "148:     sum(b) FILTER (WHERE a%5=2),",
          "149:     sum(b) FILTER (WHERE a%5=3),",
          "150:     sum(b) FILTER (WHERE a%5=4)",
          "151:   FROM t1 GROUP BY (a/5) ORDER BY 1;",
          "152: } {0 {} 7 3 5 30   1 26 23 27 3 17   2 26 33 25 {} 47   3 36 13 45 31 11",
          "153:   4 36 37 21 22 14   5 16 3 7 29 50   6 38 3 36 12 4   7 46 3 48 23 {}",
          "154:   8 24 5 46 11 {}   9 18 25 15 18 23}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d79cd92b237d51aeb5f6eb7b68acee27e1c6c279",
      "candidate_info": {
        "commit_hash": "d79cd92b237d51aeb5f6eb7b68acee27e1c6c279",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d79cd92b237d51aeb5f6eb7b68acee27e1c6c279",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Test for an OOM condition in resolveAlias().\n\nFossilOrigin-Name: 322eca7f6ad2234059669015aabb773a790e8bc3da95431c9c851ff5342c969b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1cc6cf6407c6e25aeafeca379a93d0ad2614839c07fb3644e46926fce5f1cfab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:       pExpr->flags |= EP_MemToken;",
          "98:     }",
          "99:     if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "101:     }",
          "102:     sqlite3DbFree(db, pDup);",
          "103:   }",
          "",
          "[Removed Lines]",
          "100:       pExpr->y.pWin->pOwner = pExpr;",
          "",
          "[Added Lines]",
          "100:       if( pExpr->y.pWin!=0 ){",
          "101:         pExpr->y.pWin->pOwner = pExpr;",
          "102:       }else{",
          "103:         assert( db->mallocFailed );",
          "104:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "680f6e8e2e4ae427baf48a05d3d41e53dd066c50",
      "candidate_info": {
        "commit_hash": "680f6e8e2e4ae427baf48a05d3d41e53dd066c50",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/680f6e8e2e4ae427baf48a05d3d41e53dd066c50",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/window.c",
          "test/pg_common.tcl",
          "test/window7.tcl",
          "test/window7.test",
          "test/windowerr.tcl",
          "test/windowerr.test"
        ],
        "message": "Support some \"ROWS BETWEEN N PRECEDING AND M FOLLOWING\" window functions without caching entire partitions.\n\nFossilOrigin-Name: e7a91f12282afb5d5d7d78397a11d18e0268ee0c931d85e21fce00d13929494e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/pg_common.tcl||test/pg_common.tcl",
          "test/window7.tcl||test/window7.tcl",
          "test/window7.test||test/window7.test",
          "test/windowerr.tcl||test/windowerr.tcl",
          "test/windowerr.test||test/windowerr.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c155125fd5dddb438c09d40f5137c47d88defb7a6ede4261f09d7bdaad250d37",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3580: };",
          "3582: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3581:   int regFirst;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "790:     pMWin->iEphCsr = pParse->nTab++;",
          "792:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pEList, &pSublist);",
          "793:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pOrderBy, &pSublist);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "791:     pParse->nTab += 3;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "843:       }",
          "845:       sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pMWin->iEphCsr, pSublist->nExpr);",
          "846:     }else{",
          "847:       sqlite3SelectDelete(db, pSub);",
          "848:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "847:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+1, pMWin->iEphCsr);",
          "848:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+2, pMWin->iEphCsr);",
          "849:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+3, pMWin->iEphCsr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1086:     sqlite3VdbeAddOp3(v, OP_Null, 0, pMWin->regPart, pMWin->regPart+nPart-1);",
          "1087:   }",
          "1089:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1090:     FuncDef *p = pWin->pFunc;",
          "1091:     if( (p->funcFlags & SQLITE_FUNC_MINMAX) && pWin->eStart!=TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1093:   pMWin->regFirst = ++pParse->nMem;",
          "1094:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1429:     }",
          "1430:     else if( pFunc->zName==leadName || pFunc->zName==lagName ){",
          "1431:       int nArg = pWin->pOwner->x.pList->nExpr;",
          "1433:       int csr = pWin->csrApp;",
          "1434:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1435:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1437:       if( nArg<3 ){",
          "1438:         sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "",
          "[Removed Lines]",
          "1432:       int iEph = pMWin->iEphCsr;",
          "",
          "[Added Lines]",
          "1442:       int iEph = pMWin->iEphCsr;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1834:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1835: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1844: static void windowCodeStep(",
          "1845:   Parse *pParse,",
          "1846:   Select *p,",
          "1847:   WhereInfo *pWInfo,",
          "1848:   int regGosub,",
          "1849:   int addrGosub",
          "1850: ){",
          "1851:   Window *pMWin = p->pWin;",
          "1852:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1855:   int regArg;",
          "1856:   int csrCurrent = pMWin->iEphCsr;",
          "1857:   int csrWrite = csrCurrent+1;",
          "1858:   int csrStart = csrCurrent+2;",
          "1859:   int csrEnd = csrCurrent+3;",
          "1864:   int iSubCsr = p->pSrc->a[0].iCursor;",
          "1865:   int nSub = p->pSrc->a[0].pTab->nCol;",
          "1866:   int k;",
          "1868:   int addrGoto;",
          "1869:   int addrIf;",
          "1870:   int addrIfEnd;",
          "1871:   int addrIfStart;",
          "1872:   int addrGosubFlush;",
          "1873:   int addrInteger;",
          "1874:   int addrGoto2;",
          "1876:   int reg = pParse->nMem+1;",
          "1877:   int regRecord = reg+nSub;",
          "1878:   int regRowid = regRecord+1;",
          "1880:   pParse->nMem += 1 + nSub + 1;",
          "1882:   regFlushPart = ++pParse->nMem;",
          "1883:   regStart = ++pParse->nMem;",
          "1884:   regEnd = ++pParse->nMem;",
          "1886:   assert( pMWin->eStart==TK_PRECEDING",
          "1887:        || pMWin->eStart==TK_CURRENT",
          "1888:        || pMWin->eStart==TK_FOLLOWING",
          "1889:        || pMWin->eStart==TK_UNBOUNDED",
          "1890:   );",
          "1891:   assert( pMWin->eEnd==TK_FOLLOWING",
          "1892:        || pMWin->eEnd==TK_CURRENT",
          "1893:        || pMWin->eEnd==TK_UNBOUNDED",
          "1894:        || pMWin->eEnd==TK_PRECEDING",
          "1895:   );",
          "1900:   for(k=0; k<nSub; k++){",
          "1901:     sqlite3VdbeAddOp3(v, OP_Column, iSubCsr, k, reg+k);",
          "1902:   }",
          "1903:   sqlite3VdbeAddOp3(v, OP_MakeRecord, reg, nSub, regRecord);",
          "1906:   if( pMWin->pPartition ){",
          "1907:     int addr;",
          "1908:     ExprList *pPart = pMWin->pPartition;",
          "1909:     int nPart = pPart->nExpr;",
          "1910:     int regNewPart = reg + pMWin->nBufferCol;",
          "1911:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pPart, 0, 0);",
          "1913:     addrIf = sqlite3VdbeAddOp1(v, OP_If, pMWin->regFirst);",
          "1914:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "1915:     sqlite3VdbeAppendP4(v, (void*)pKeyInfo, P4_KEYINFO);",
          "1916:     sqlite3VdbeAddOp3(v, OP_Jump, addr+2, addr+3, addr+2);",
          "1917:     VdbeCoverageEqNe(v);",
          "1918:     addrGosubFlush = sqlite3VdbeAddOp1(v, OP_Gosub, regFlushPart);",
          "1919:     VdbeComment((v, \"call flush_partition\"));",
          "1920:     sqlite3VdbeJumpHere(v, addrIf);",
          "1921:   }",
          "1924:   sqlite3VdbeAddOp2(v, OP_NewRowid, csrWrite, regRowid);",
          "1925:   sqlite3VdbeAddOp3(v, OP_Insert, csrWrite, regRecord, regRowid);",
          "1928:   addrIf = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "1929:   if( pMWin->pPartition ){",
          "1930:     sqlite3VdbeAddOp3(v, OP_Copy,",
          "1931:         reg+pMWin->nBufferCol, pMWin->regPart, pMWin->pPartition->nExpr-1",
          "1932:     );",
          "1933:   }",
          "1934:   sqlite3VdbeAddOp2(v, OP_Rewind, csrStart, 1);   sqlite3VdbeChangeP5(v, 1);",
          "1935:   sqlite3VdbeAddOp2(v, OP_Rewind, csrCurrent, 1); sqlite3VdbeChangeP5(v, 1);",
          "1936:   sqlite3VdbeAddOp2(v, OP_Rewind, csrEnd, 1);",
          "1937:   regArg = windowInitAccum(pParse, pMWin);",
          "1939:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regFirst);",
          "1940:   sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "1941:   windowCheckIntValue(pParse, regStart, 0);",
          "1942:   sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "1943:   windowCheckIntValue(pParse, regEnd, 1);",
          "1944:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1947:   sqlite3VdbeJumpHere(v, addrIf);",
          "1948:   sqlite3VdbeAddOp2(v, OP_Next, csrEnd, sqlite3VdbeCurrentAddr(v)+1);",
          "1949:   addrIfEnd = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "1950:   windowAggFinal(pParse, pMWin, 0);",
          "1951:   sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+1);",
          "1952:   windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1953:   addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1954:   sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+1);",
          "1955:   windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1956:   sqlite3VdbeJumpHere(v, addrIfStart);",
          "1957:   sqlite3VdbeJumpHere(v, addrIfEnd);",
          "1959:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1960:   windowAggStep(pParse, pMWin, csrEnd, 0, regArg, 0);",
          "1963:   sqlite3WhereEnd(pWInfo);",
          "1966:   if( pMWin->pPartition ){",
          "1967:     addrInteger = sqlite3VdbeAddOp2(v, OP_Integer, 0, regFlushPart);",
          "1968:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "1969:   }",
          "1971:   sqlite3VdbeAddOp2(v, OP_Next, csrCurrent, sqlite3VdbeCurrentAddr(v)+2);",
          "1972:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1973:   windowAggFinal(pParse, pMWin, 0);",
          "1974:   windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "1975:   addrIfStart = sqlite3VdbeAddOp3(v, OP_IfPos, regStart, 0, 1);",
          "1976:   sqlite3VdbeAddOp2(v, OP_Next, csrStart, sqlite3VdbeCurrentAddr(v)+2);",
          "1977:   addrGoto2 = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1978:   windowAggStep(pParse, pMWin, csrStart, 1, regArg, 0);",
          "1979:   sqlite3VdbeJumpHere(v, addrIfStart);",
          "1980:   sqlite3VdbeAddOp2(v, OP_Goto, 0, addrGoto-1);",
          "1981:   sqlite3VdbeJumpHere(v, addrGoto);",
          "1982:   sqlite3VdbeJumpHere(v, addrGoto2);",
          "1984:   sqlite3VdbeAddOp1(v, OP_ResetSorter, csrCurrent);",
          "1985:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "1986:   if( pMWin->pPartition ){",
          "1987:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "1988:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "1989:   }",
          "1990: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2296:   if( pMWin->eType==TK_ROWS",
          "2297:    && (pMWin->eStart!=TK_UNBOUNDED||pMWin->eEnd!=TK_CURRENT||!pMWin->pOrderBy)",
          "2298:   ){",
          "2301:   }else{",
          "2302:     Window *pWin;",
          "",
          "[Removed Lines]",
          "2299:     VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2300:     windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "",
          "[Added Lines]",
          "2454:     Window *pWin;",
          "2456:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "2457:       FuncDef *pFunc = pWin->pFunc;",
          "2458:       if( (pFunc->funcFlags & SQLITE_FUNC_WINDOW_SIZE)",
          "2459:         || (pFunc->zName==nth_valueName)",
          "2460:         || (pFunc->zName==first_valueName)",
          "2461:         || (pFunc->zName==leadName)",
          "2462:         || (pFunc->zName==lagName)",
          "2463:       ){",
          "2464:         bCache = 1;",
          "2465:         break;",
          "2466:       }",
          "2467:     }",
          "2468:     if( bCache || pMWin->eStart!=TK_PRECEDING || pMWin->eEnd!=TK_FOLLOWING ){",
          "2469:       VdbeModuleComment((pParse->pVdbe, \"Begin RowExprStep()\"));",
          "2470:       windowCodeRowExprStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2471:       VdbeModuleComment((pParse->pVdbe, \"End RowExprStep()\"));",
          "2472:     }else{",
          "2473:       VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep()\"));",
          "2474:       windowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2475:       VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep()\"));",
          "2476:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2323:     if( bCache ){",
          "2324:       VdbeModuleComment((pParse->pVdbe, \"Begin CacheStep()\"));",
          "2325:       windowCodeCacheStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2326:     }else{",
          "2327:       VdbeModuleComment((pParse->pVdbe, \"Begin DefaultStep()\"));",
          "2328:       windowCodeDefaultStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2329:     }",
          "2330:   }",
          "2331: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2502:       VdbeModuleComment((pParse->pVdbe, \"End CacheStep()\"));",
          "2506:       VdbeModuleComment((pParse->pVdbe, \"End DefaultStep()\"));",
          "",
          "---------------"
        ],
        "test/pg_common.tcl||test/pg_common.tcl": [
          "File: test/pg_common.tcl -> test/pg_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   puts $::fd \"\"",
          "68: }",
          "70: # Same as [execsql_test], except coerce all results to floating point values",
          "71: # with two decimal points.",
          "72: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: proc errorsql_test {tn sql} {",
          "71:   set rc [catch {execsql $sql} msg]",
          "72:   if {$rc==0} {",
          "73:     error \"errorsql_test SQL did not cause an error!\"",
          "74:   }",
          "75:   puts $::fd \"# PG says \\\"[string trim $msg]\\\"\"",
          "76:   set sql [string map {string_agg group_concat} $sql]",
          "77:   puts $::fd \"do_test $tn { catch { execsql {\"",
          "78:   puts $::fd \"  [string trim $sql]\"",
          "79:   puts $::fd \"} } } 1\"",
          "80:   puts $::fd \"\"",
          "81: }",
          "",
          "---------------"
        ],
        "test/window7.tcl||test/window7.tcl": [
          "File: test/window7.tcl -> test/window7.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 19",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname $argv0] pg_common.tcl]",
          "15: #=========================================================================",
          "17: start_test window7 \"2019 March 01\"",
          "18: ifcapable !windowfunc",
          "20: execsql_test 1.0 {",
          "21:   DROP TABLE IF EXISTS t3;",
          "22:   CREATE TABLE t3(a INTEGER, b INTEGER);",
          "23:   INSERT INTO t3 VALUES",
          "24:     (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8),",
          "25:     (9, 9), (0, 10), (1, 11), (2, 12), (3, 13), (4, 14), (5, 15), (6, 16),",
          "26:     (7, 17), (8, 18), (9, 19), (0, 20), (1, 21), (2, 22), (3, 23), (4, 24),",
          "27:     (5, 25), (6, 26), (7, 27), (8, 28), (9, 29), (0, 30), (1, 31), (2, 32),",
          "28:     (3, 33), (4, 34), (5, 35), (6, 36), (7, 37), (8, 38), (9, 39), (0, 40),",
          "29:     (1, 41), (2, 42), (3, 43), (4, 44), (5, 45), (6, 46), (7, 47), (8, 48),",
          "30:     (9, 49), (0, 50), (1, 51), (2, 52), (3, 53), (4, 54), (5, 55), (6, 56),",
          "31:     (7, 57), (8, 58), (9, 59), (0, 60), (1, 61), (2, 62), (3, 63), (4, 64),",
          "32:     (5, 65), (6, 66), (7, 67), (8, 68), (9, 69), (0, 70), (1, 71), (2, 72),",
          "33:     (3, 73), (4, 74), (5, 75), (6, 76), (7, 77), (8, 78), (9, 79), (0, 80),",
          "34:     (1, 81), (2, 82), (3, 83), (4, 84), (5, 85), (6, 86), (7, 87), (8, 88),",
          "35:     (9, 89), (0, 90), (1, 91), (2, 92), (3, 93), (4, 94), (5, 95), (6, 96),",
          "36:     (7, 97), (8, 98), (9, 99), (0, 100);",
          "37: }",
          "39: execsql_test 1.1 {",
          "40:   SELECT a, sum(b) FROM t3 GROUP BY a ORDER BY 1;",
          "41: }",
          "43: execsql_test 1.2 {",
          "44:   SELECT a, sum(b) OVER (",
          "45:     ORDER BY a GROUPS BETWEEN CURRENT ROW AND CURRENT ROW",
          "46:   ) FROM t3 ORDER BY 1;",
          "47: }",
          "49: execsql_test 1.3 {",
          "50:   SELECT a, sum(b) OVER (",
          "51:     ORDER BY a GROUPS BETWEEN 0 PRECEDING AND 0 FOLLOWING",
          "52:   ) FROM t3 ORDER BY 1;",
          "53: }",
          "55: execsql_test 1.4 {",
          "56:   SELECT a, sum(b) OVER (",
          "57:     ORDER BY a GROUPS BETWEEN 2 PRECEDING AND 2 FOLLOWING",
          "58:   ) FROM t3 ORDER BY 1;",
          "59: }",
          "61: execsql_test 1.5 {",
          "62:   SELECT a, sum(b) OVER (",
          "63:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING",
          "64:   ) FROM t3 ORDER BY 1;",
          "65: }",
          "67: execsql_test 1.6 {",
          "68:   SELECT a, sum(b) OVER (",
          "69:     ORDER BY a RANGE BETWEEN 2 PRECEDING AND 2 FOLLOWING",
          "70:   ) FROM t3 ORDER BY 1;",
          "71: }",
          "73: execsql_test 1.7 {",
          "74:   SELECT a, sum(b) OVER (",
          "75:     ORDER BY a RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING",
          "76:   ) FROM t3 ORDER BY 1;",
          "77: }",
          "79: execsql_test 1.8.1 {",
          "80:   SELECT a, sum(b) OVER (",
          "81:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 1 FOLLOWING",
          "82:   ) FROM t3 ORDER BY 1;",
          "83: }",
          "84: execsql_test 1.8.2 {",
          "85:   SELECT a, sum(b) OVER (",
          "86:     ORDER BY a DESC RANGE BETWEEN 0 PRECEDING AND 1 FOLLOWING",
          "87:   ) FROM t3 ORDER BY 1;",
          "88: }",
          "90: finish_test",
          "",
          "---------------"
        ],
        "test/window7.test||test/window7.test": [
          "File: test/window7.test -> test/window7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 March 01",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix window7",
          "22: ifcapable !windowfunc { finish_test ; return }",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t3;",
          "25:   CREATE TABLE t3(a INTEGER, b INTEGER);",
          "26:   INSERT INTO t3 VALUES",
          "27:     (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8),",
          "28:     (9, 9), (0, 10), (1, 11), (2, 12), (3, 13), (4, 14), (5, 15), (6, 16),",
          "29:     (7, 17), (8, 18), (9, 19), (0, 20), (1, 21), (2, 22), (3, 23), (4, 24),",
          "30:     (5, 25), (6, 26), (7, 27), (8, 28), (9, 29), (0, 30), (1, 31), (2, 32),",
          "31:     (3, 33), (4, 34), (5, 35), (6, 36), (7, 37), (8, 38), (9, 39), (0, 40),",
          "32:     (1, 41), (2, 42), (3, 43), (4, 44), (5, 45), (6, 46), (7, 47), (8, 48),",
          "33:     (9, 49), (0, 50), (1, 51), (2, 52), (3, 53), (4, 54), (5, 55), (6, 56),",
          "34:     (7, 57), (8, 58), (9, 59), (0, 60), (1, 61), (2, 62), (3, 63), (4, 64),",
          "35:     (5, 65), (6, 66), (7, 67), (8, 68), (9, 69), (0, 70), (1, 71), (2, 72),",
          "36:     (3, 73), (4, 74), (5, 75), (6, 76), (7, 77), (8, 78), (9, 79), (0, 80),",
          "37:     (1, 81), (2, 82), (3, 83), (4, 84), (5, 85), (6, 86), (7, 87), (8, 88),",
          "38:     (9, 89), (0, 90), (1, 91), (2, 92), (3, 93), (4, 94), (5, 95), (6, 96),",
          "39:     (7, 97), (8, 98), (9, 99), (0, 100);",
          "40: } {}",
          "42: do_execsql_test 1.1 {",
          "43:   SELECT a, sum(b) FROM t3 GROUP BY a ORDER BY 1;",
          "44: } {0 550   1 460   2 470   3 480   4 490   5 500   6 510   7 520   8 530   9 540}",
          "46: do_execsql_test 1.2 {",
          "47:   SELECT a, sum(b) OVER (",
          "48:     ORDER BY a GROUPS BETWEEN CURRENT ROW AND CURRENT ROW",
          "49:   ) FROM t3 ORDER BY 1;",
          "50: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540}",
          "52: do_execsql_test 1.3 {",
          "53:   SELECT a, sum(b) OVER (",
          "54:     ORDER BY a GROUPS BETWEEN 0 PRECEDING AND 0 FOLLOWING",
          "55:   ) FROM t3 ORDER BY 1;",
          "56: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540}",
          "58: do_execsql_test 1.4 {",
          "59:   SELECT a, sum(b) OVER (",
          "60:     ORDER BY a GROUPS BETWEEN 2 PRECEDING AND 2 FOLLOWING",
          "61:   ) FROM t3 ORDER BY 1;",
          "62: } {0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590}",
          "64: do_execsql_test 1.5 {",
          "65:   SELECT a, sum(b) OVER (",
          "66:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 0 FOLLOWING",
          "67:   ) FROM t3 ORDER BY 1;",
          "68: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   1 460   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   2 470   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   3 480   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   4 490   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   5 500   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   6 510   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   7 520   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   8 530   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540}",
          "70: do_execsql_test 1.6 {",
          "71:   SELECT a, sum(b) OVER (",
          "72:     ORDER BY a RANGE BETWEEN 2 PRECEDING AND 2 FOLLOWING",
          "73:   ) FROM t3 ORDER BY 1;",
          "74: } {0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   0 1480   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   1 1960   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   2 2450   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   3 2400   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   4 2450   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   5 2500   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   6 2550   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   7 2600   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590}",
          "76: do_execsql_test 1.7 {",
          "77:   SELECT a, sum(b) OVER (",
          "78:     ORDER BY a RANGE BETWEEN 2 PRECEDING AND 1 FOLLOWING",
          "79:   ) FROM t3 ORDER BY 1;",
          "80: } {0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   1 1480   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   2 1960   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   3 1900   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   4 1940   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   5 1980   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   6 2020   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   7 2060   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   8 2100   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590   9 1590}",
          "82: do_execsql_test 1.8.1 {",
          "83:   SELECT a, sum(b) OVER (",
          "84:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 1 FOLLOWING",
          "85:   ) FROM t3 ORDER BY 1;",
          "86: } {0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   0 1010   1 930   1 930   1 930   1 930   1 930   1 930   1 930   1 930   1 930   1 930   2 950   2 950   2 950   2 950   2 950   2 950   2 950   2 950   2 950   2 950   3 970   3 970   3 970   3 970   3 970   3 970   3 970   3 970   3 970   3 970   4 990   4 990   4 990   4 990   4 990   4 990   4 990   4 990   4 990   4 990   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   5 1010   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   6 1030   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   7 1050   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   8 1070   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540   9 540}",
          "88: do_execsql_test 1.8.2 {",
          "89:   SELECT a, sum(b) OVER (",
          "90:     ORDER BY a DESC RANGE BETWEEN 0 PRECEDING AND 1 FOLLOWING",
          "91:   ) FROM t3 ORDER BY 1;",
          "92: } {0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   0 550   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   1 1010   2 930   2 930   2 930   2 930   2 930   2 930   2 930   2 930   2 930   2 930   3 950   3 950   3 950   3 950   3 950   3 950   3 950   3 950   3 950   3 950   4 970   4 970   4 970   4 970   4 970   4 970   4 970   4 970   4 970   4 970   5 990   5 990   5 990   5 990   5 990   5 990   5 990   5 990   5 990   5 990   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   6 1010   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   7 1030   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   8 1050   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070   9 1070}",
          "94: finish_test",
          "",
          "---------------"
        ],
        "test/windowerr.tcl||test/windowerr.tcl": [
          "File: test/windowerr.tcl -> test/windowerr.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 May 19",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname $argv0] pg_common.tcl]",
          "15: #=========================================================================",
          "17: start_test windowerr \"2019 March 01\"",
          "18: ifcapable !windowfunc",
          "20: execsql_test 1.0 {",
          "21:   DROP TABLE IF EXISTS t1;",
          "22:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "23: }",
          "25: foreach {tn frame} {",
          "26:   1 \"ORDER BY a ROWS BETWEEN -1 PRECEDING AND 1 FOLLOWING\"",
          "27:   2 \"ORDER BY a ROWS BETWEEN  1 PRECEDING AND -1 FOLLOWING\"",
          "29:   3 \"ORDER BY a RANGE BETWEEN -1 PRECEDING AND 1 FOLLOWING\"",
          "30:   4 \"ORDER BY a RANGE BETWEEN  1 PRECEDING AND -1 FOLLOWING\"",
          "32:   5 \"ORDER BY a GROUPS BETWEEN -1 PRECEDING AND 1 FOLLOWING\"",
          "33:   6 \"ORDER BY a GROUPS BETWEEN  1 PRECEDING AND -1 FOLLOWING\"",
          "34: } {",
          "35:   errorsql_test 1.$tn \"",
          "36:   SELECT a, sum(b) OVER (",
          "37:     $frame",
          "38:   ) FROM t3 ORDER BY 1",
          "39:   \"",
          "40: }",
          "42: finish_test",
          "",
          "---------------"
        ],
        "test/windowerr.test||test/windowerr.test": [
          "File: test/windowerr.test -> test/windowerr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 March 01",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix windowerr",
          "22: ifcapable !windowfunc { finish_test ; return }",
          "23: do_execsql_test 1.0 {",
          "24:   DROP TABLE IF EXISTS t1;",
          "25:   CREATE TABLE t1(a INTEGER, b INTEGER);",
          "26: } {}",
          "28: # PG says \"ERROR:  frame starting offset must not be negative\"",
          "29: do_test 1.1 { catch { execsql {",
          "30:   SELECT a, sum(b) OVER (",
          "31:     ORDER BY a ROWS BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "32:   ) FROM t3 ORDER BY 1",
          "33: } } } 1",
          "35: # PG says \"ERROR:  frame ending offset must not be negative\"",
          "36: do_test 1.2 { catch { execsql {",
          "37:   SELECT a, sum(b) OVER (",
          "38:     ORDER BY a ROWS BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "39:   ) FROM t3 ORDER BY 1",
          "40: } } } 1",
          "42: # PG says \"ERROR:  invalid preceding or following size in window function\"",
          "43: do_test 1.3 { catch { execsql {",
          "44:   SELECT a, sum(b) OVER (",
          "45:     ORDER BY a RANGE BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "46:   ) FROM t3 ORDER BY 1",
          "47: } } } 1",
          "49: # PG says \"ERROR:  invalid preceding or following size in window function\"",
          "50: do_test 1.4 { catch { execsql {",
          "51:   SELECT a, sum(b) OVER (",
          "52:     ORDER BY a RANGE BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "53:   ) FROM t3 ORDER BY 1",
          "54: } } } 1",
          "56: # PG says \"ERROR:  frame starting offset must not be negative\"",
          "57: do_test 1.5 { catch { execsql {",
          "58:   SELECT a, sum(b) OVER (",
          "59:     ORDER BY a GROUPS BETWEEN -1 PRECEDING AND 1 FOLLOWING",
          "60:   ) FROM t3 ORDER BY 1",
          "61: } } } 1",
          "63: # PG says \"ERROR:  frame ending offset must not be negative\"",
          "64: do_test 1.6 { catch { execsql {",
          "65:   SELECT a, sum(b) OVER (",
          "66:     ORDER BY a GROUPS BETWEEN  1 PRECEDING AND -1 FOLLOWING",
          "67:   ) FROM t3 ORDER BY 1",
          "68: } } } 1",
          "70: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d12db3dabb11873ba51e3e090e818d645c6d33d8",
      "candidate_info": {
        "commit_hash": "d12db3dabb11873ba51e3e090e818d645c6d33d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d12db3dabb11873ba51e3e090e818d645c6d33d8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Avoid reading off the front of a page buffer when balancing a corrupt btree page.\n\nFossilOrigin-Name: cb50509020d952fa9efed8df7fa08b07b71ae9bdbdefea216b6e660863291039",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 824f93246988ffa213bbd41a7de08886999b1a8ae00fdf6b9767acb6e3ec6a1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6663:     assert( idx >= pPage->cellOffset+2*pPage->nCell+2 || CORRUPT_DB );",
          "6664:     assert( idx+sz <= (int)pPage->pBt->usableSize );",
          "6665:     pPage->nFree -= (u16)(2 + sz);",
          "6667:     if( iChild ){",
          "6668:       put4byte(&data[idx], iChild);",
          "6669:     }",
          "6670:     pIns = pPage->aCellIdx + i*2;",
          "6671:     memmove(pIns+2, pIns, 2*(pPage->nCell - i));",
          "",
          "[Removed Lines]",
          "6666:     memcpy(&data[idx], pCell, sz);",
          "",
          "[Added Lines]",
          "6672:       memcpy(&data[idx+4], pCell+4, sz-4);",
          "6674:     }else{",
          "6675:       memcpy(&data[idx], pCell, sz);",
          "",
          "---------------"
        ]
      }
    }
  ]
}