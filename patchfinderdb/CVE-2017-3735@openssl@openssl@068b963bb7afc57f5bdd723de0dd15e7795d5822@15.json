{
  "cve_id": "CVE-2017-3735",
  "cve_desc": "While parsing an IPAddressFamily extension in an X.509 certificate, it is possible to do a one-byte overread. This would result in an incorrect text display of the certificate. This bug has been present since 2006 and is present in all versions of OpenSSL before 1.0.2m and 1.1.0g.",
  "repo": "openssl/openssl",
  "patch_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
  "patch_info": {
    "commit_hash": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "files": [
      "crypto/x509v3/v3_addr.c"
    ],
    "message": "Avoid out-of-bounds read\n\nFixes CVE 2017-3735\n\nReviewed-by: Kurt Roeckx <kurt@roeckx.be>\n(Merged from https://github.com/openssl/openssl/pull/4276)\n\n(cherry picked from commit b23171744b01e473ebbfd6edad70c1c3825ffbcd)",
    "before_after_code_files": [
      "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c"
    ]
  },
  "patch_diff": {
    "crypto/x509v3/v3_addr.c||crypto/x509v3/v3_addr.c": [
      "File: crypto/x509v3/v3_addr.c -> crypto/x509v3/v3_addr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: unsigned int X509v3_addr_get_afi(const IPAddressFamily *f)",
      "86: {",
      "91: }",
      "",
      "[Removed Lines]",
      "87:     return ((f != NULL &&",
      "88:              f->addressFamily != NULL && f->addressFamily->data != NULL)",
      "89:             ? ((f->addressFamily->data[0] << 8) | (f->addressFamily->data[1]))",
      "90:             : 0);",
      "",
      "[Added Lines]",
      "87:     if (f == NULL",
      "88:             || f->addressFamily == NULL",
      "89:             || f->addressFamily->data == NULL",
      "90:             || f->addressFamily->length < 2)",
      "91:         return 0;",
      "92:     return (f->addressFamily->data[0] << 8) | f->addressFamily->data[1];",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cd1caea433d44e63af517a8149eee6ed9f45f681",
      "candidate_info": {
        "commit_hash": "cd1caea433d44e63af517a8149eee6ed9f45f681",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/cd1caea433d44e63af517a8149eee6ed9f45f681",
        "files": [
          "crypto/bio/bio_lib.c"
        ],
        "message": "BIO: at the end of BIO_new, declare the BIO inited if no create method present\n\nWithout this, every BIO implementation is forced to have a create\nmethod, just to set bio->init = 1.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/5223)\n\n(cherry picked from commit 7f55808fe723c146428415a470ed42331548007b)",
        "before_after_code_files": [
          "crypto/bio/bio_lib.c||crypto/bio/bio_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bio/bio_lib.c||crypto/bio/bio_lib.c": [
          "File: crypto/bio/bio_lib.c -> crypto/bio/bio_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:         CRYPTO_THREAD_lock_free(bio->lock);",
          "43:         goto err;",
          "44:     }",
          "46:     return bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45:     if (method->create == NULL)",
          "46:         bio->init = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ec3b53cdbda0dea32a970fe36893c0c84cfa8f5",
      "candidate_info": {
        "commit_hash": "0ec3b53cdbda0dea32a970fe36893c0c84cfa8f5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0ec3b53cdbda0dea32a970fe36893c0c84cfa8f5",
        "files": [
          "test/recipes/04-test_pem.t"
        ],
        "message": "Avoid unnecessary MSYS2 conversion of some arguments\n\nFixes #4740\n\nThe MSYS2 run-time convert arguments that look like paths when\nexecuting a program unless that application is linked with the MSYS\nrun-time. The exact conversion rules are listed here:\n\n    http://www.mingw.org/wiki/Posix_path_conversion\n\nWith the built-in configurations (all having names starting with\n\"mingw\"), the openssl application is not linked with the MSYS2\nrun-time, and therefore, it will receive possibly converted arguments\nfrom the process that executes it. This conversion is fine for normal\npath arguments, but it happens that some arguments to the openssl\napplication get converted when they shouldn't. In one case, it's\narguments like '-passin file:something', and in another, it's a file:\nURI (what typically happens is that URIs without an authority\ncomponent get converted, 'cause the conversion mechanism doesn't\nrecognise them as URIs).\n\nTo avoid conversion where we don't want it, we simply assign\nMSYS2_ARG_CONV_EXCL a pattern to avoid specific conversions. As a\nprecaution, we only do this where we obviously need it.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/4766)",
        "before_after_code_files": [
          "test/recipes/04-test_pem.t||test/recipes/04-test_pem.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/04-test_pem.t||test/recipes/04-test_pem.t": [
          "File: test/recipes/04-test_pem.t -> test/recipes/04-test_pem.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     skip \"DSA support disabled, skipping...\", (scalar keys %dsa_expected) unless !disabled(\"dsa\");",
          "89:     foreach my $input (keys %dsa_expected) {",
          "90:         my @common = ($cmd, \"pkey\", \"-inform\", \"PEM\", \"-passin\", \"file:\" . data_file(\"wellknown\"), \"-noout\", \"-text\", \"-in\");",
          "92:         my @match = grep /68:42:02:16:63:54:16:eb:06:5c:ab:06:72:3b:78:/, @data;",
          "93:         is((scalar @match > 0 ? 1 : 0), $dsa_expected{$input});",
          "94:     }",
          "",
          "[Removed Lines]",
          "91:         my @data = run(app([@common, data_file($input)], stderr => undef), capture => 1);",
          "",
          "[Added Lines]",
          "91:         my @data;",
          "92:         {",
          "93:             local $ENV{MSYS2_ARG_CONV_EXCL} = \"file:\";",
          "94:             @data = run(app([@common, data_file($input)], stderr => undef), capture => 1);",
          "95:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48dd11a8c100988caf5c5a2fe5b66db6e86a83f4",
      "candidate_info": {
        "commit_hash": "48dd11a8c100988caf5c5a2fe5b66db6e86a83f4",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/48dd11a8c100988caf5c5a2fe5b66db6e86a83f4",
        "files": [
          "crypto/bn/bn_x931p.c",
          "crypto/rsa/rsa_x931g.c"
        ],
        "message": "Fix possible crash in X931 code.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3675)\n(cherry picked from commit 5419dadd4bd1f7abbfa23326ca766d2c143f257c)",
        "before_after_code_files": [
          "crypto/bn/bn_x931p.c||crypto/bn/bn_x931p.c",
          "crypto/rsrsa_x931g.c||crypto/rsa/rsa_x931g.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/bn/bn_x931p.c||crypto/bn/bn_x931p.c": [
          "File: crypto/bn/bn_x931p.c -> crypto/bn/bn_x931p.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:     BN_CTX_start(ctx);",
          "180:     t = BN_CTX_get(ctx);",
          "182:     for (i = 0; i < 1000; i++) {",
          "183:         if (!BN_rand(Xq, nbits, BN_RAND_TOP_TWO, BN_RAND_BOTTOM_ANY))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181:     if (t == NULL)",
          "182:         goto err;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:     int ret = 0;",
          "218:     BN_CTX_start(ctx);",
          "220:         Xp1 = BN_CTX_get(ctx);",
          "222:         Xp2 = BN_CTX_get(ctx);",
          "224:     if (!BN_rand(Xp1, 101, BN_RAND_TOP_ONE, BN_RAND_BOTTOM_ANY))",
          "225:         goto error;",
          "",
          "[Removed Lines]",
          "219:     if (!Xp1)",
          "221:     if (!Xp2)",
          "",
          "[Added Lines]",
          "221:     if (Xp1 == NULL)",
          "223:     if (Xp2 == NULL)",
          "225:     if (Xp1 == NULL || Xp2 == NULL)",
          "226:         goto error;",
          "",
          "---------------"
        ],
        "crypto/rsrsa_x931g.c||crypto/rsa/rsa_x931g.c": [
          "File: crypto/rsrsa_x931g.c -> crypto/rsa/rsa_x931g.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:     if (Xq == NULL)",
          "157:         goto error;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ab4fed9bdcc5b8498b3d59d2fa72dd045f63539",
      "candidate_info": {
        "commit_hash": "8ab4fed9bdcc5b8498b3d59d2fa72dd045f63539",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8ab4fed9bdcc5b8498b3d59d2fa72dd045f63539",
        "files": [
          "crypto/ex_data.c",
          "doc/crypto/CRYPTO_get_ex_new_index.pod",
          "ssl/ssl_sess.c",
          "test/exdatatest.c"
        ],
        "message": "Fix ex_data and session_dup issues\n\nCode was added in commit b3c31a65 that overwrote the last ex_data value\nusing CRYPTO_dup_ex_data() causing a memory leak, and potentially\nconfusing the ex_data dup() callback.\n\nIn ssl_session_dup(), fix error handling (properly reference and up-ref\nshared data) and new-up the ex_data before calling CRYPTO_dup_ex_data();\nall other structures that dup ex_data have the destination ex_data new'd\nbefore the dup.\n\nFix up some of the ex_data documentation.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3625)",
        "before_after_code_files": [
          "crypto/ex_data.c||crypto/ex_data.c",
          "ssl/ssl_sess.c||ssl/ssl_sess.c",
          "test/exdatatest.c||test/exdatatest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ex_data.c||crypto/ex_data.c": [
          "File: crypto/ex_data.c -> crypto/ex_data.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:         CRYPTOerr(CRYPTO_F_CRYPTO_DUP_EX_DATA, ERR_R_MALLOC_FAILURE);",
          "288:         return 0;",
          "289:     }",
          "291:         goto err;",
          "293:     for (i = 0; i < mx; i++) {",
          "",
          "[Removed Lines]",
          "290:     if (!CRYPTO_set_ex_data(to, mx - 1, NULL))",
          "",
          "[Added Lines]",
          "297:     if (!CRYPTO_set_ex_data(to, mx - 1, CRYPTO_get_ex_data(to, mx - 1)))",
          "",
          "---------------"
        ],
        "ssl/ssl_sess.c||ssl/ssl_sess.c": [
          "File: ssl/ssl_sess.c -> ssl/ssl_sess.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: #ifndef OPENSSL_NO_SRP",
          "139:     dest->srp_username = NULL;",
          "140: #endif",
          "141:     memset(&dest->ex_data, 0, sizeof(dest->ex_data));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "141:     dest->peer_chain = NULL;",
          "142:     dest->peer = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:     if (dest->lock == NULL)",
          "151:         goto err;",
          "156:     if (src->peer_chain != NULL) {",
          "157:         dest->peer_chain = X509_chain_up_ref(src->peer_chain);",
          "",
          "[Removed Lines]",
          "153:     if (src->peer != NULL)",
          "154:         X509_up_ref(src->peer);",
          "",
          "[Added Lines]",
          "155:     if (!CRYPTO_new_ex_data(CRYPTO_EX_INDEX_SSL_SESSION, dest, &dest->ex_data))",
          "156:         goto err;",
          "158:     if (src->peer != NULL) {",
          "159:         if (!X509_up_ref(src->peer))",
          "160:             goto err;",
          "161:         dest->peer = src->peer;",
          "162:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:     }",
          "208: #endif",
          "211:         dest->tlsext_tick =",
          "212:             OPENSSL_memdup(src->tlsext_tick, src->tlsext_ticklen);",
          "213:         if (dest->tlsext_tick == NULL)",
          "",
          "[Removed Lines]",
          "210:     if (ticket != 0) {",
          "",
          "[Added Lines]",
          "218:     if (ticket != 0 && src->tlsext_tick != NULL) {",
          "",
          "---------------"
        ],
        "test/exdatatest.c||test/exdatatest.c": [
          "File: test/exdatatest.c -> test/exdatatest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: static long saved_argl;",
          "16: static void *saved_argp;",
          "17: static int saved_idx;",
          "19: static void exnew(void *parent, void *ptr, CRYPTO_EX_DATA *ad,",
          "20:           int idx, long argl, void *argp)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: static int saved_idx2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:     OPENSSL_assert(argp == saved_argp);",
          "44: }",
          "46: typedef struct myobj_st {",
          "47:     CRYPTO_EX_DATA ex_data;",
          "48:     int id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: typedef struct myobj_ex_data_st {",
          "59:     char *hello;",
          "60:     int new;",
          "61:     int dup;",
          "62: } MYOBJ_EX_DATA;",
          "64: static void exnew2(void *parent, void *ptr, CRYPTO_EX_DATA *ad,",
          "65:           int idx, long argl, void *argp)",
          "66: {",
          "67:     int ret;",
          "68:     MYOBJ_EX_DATA *ex_data;",
          "70:     OPENSSL_assert(idx == saved_idx2);",
          "71:     OPENSSL_assert(argl == saved_argl);",
          "72:     OPENSSL_assert(argp == saved_argp);",
          "73:     OPENSSL_assert(ptr == NULL);",
          "75:     ex_data = OPENSSL_zalloc(sizeof(*ex_data));",
          "76:     OPENSSL_assert(ex_data != NULL);",
          "77:     ret = CRYPTO_set_ex_data(ad, saved_idx2, ex_data);",
          "78:     OPENSSL_assert(ret);",
          "80:     ex_data->new = 1;",
          "81: }",
          "83: static int exdup2(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,",
          "84:           void *from_d, int idx, long argl, void *argp)",
          "85: {",
          "86:     MYOBJ_EX_DATA **update_ex_data = (MYOBJ_EX_DATA**)from_d;",
          "87:     MYOBJ_EX_DATA *ex_data = CRYPTO_get_ex_data(to, saved_idx2);",
          "89:     OPENSSL_assert(idx == saved_idx2);",
          "90:     OPENSSL_assert(argl == saved_argl);",
          "91:     OPENSSL_assert(argp == saved_argp);",
          "92:     OPENSSL_assert(from_d != NULL);",
          "93:     OPENSSL_assert(*update_ex_data != NULL);",
          "94:     OPENSSL_assert(ex_data != NULL);",
          "95:     OPENSSL_assert(ex_data->new);",
          "98:     ex_data->hello = (*update_ex_data)->hello;",
          "100:     ex_data->dup = 1;",
          "103:     return 1;",
          "104: }",
          "106: static void exfree2(void *parent, void *ptr, CRYPTO_EX_DATA *ad,",
          "107:             int idx, long argl, void *argp)",
          "108: {",
          "109:     MYOBJ_EX_DATA *ex_data = CRYPTO_get_ex_data(ad, saved_idx2);",
          "110:     int ret;",
          "112:     OPENSSL_assert(ex_data != NULL);",
          "113:     OPENSSL_free(ex_data);",
          "114:     OPENSSL_assert(idx == saved_idx2);",
          "115:     OPENSSL_assert(argl == saved_argl);",
          "116:     OPENSSL_assert(argp == saved_argp);",
          "117:     ret = CRYPTO_set_ex_data(ad, saved_idx2, NULL);",
          "118:     OPENSSL_assert(ret);",
          "119: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:     return CRYPTO_get_ex_data(&obj->ex_data, saved_idx);",
          "72: }",
          "74: static void MYOBJ_free(MYOBJ *obj)",
          "75: {",
          "76:     CRYPTO_free_ex_data(CRYPTO_EX_INDEX_APP, obj, &obj->ex_data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: static void MYOBJ_sethello2(MYOBJ *obj, char *cp)",
          "150: {",
          "151:     MYOBJ_EX_DATA* ex_data = CRYPTO_get_ex_data(&obj->ex_data, saved_idx2);",
          "152:     if (ex_data != NULL)",
          "153:         ex_data->hello = cp;",
          "154:     else",
          "155:         obj->st = 0;",
          "156: }",
          "158: static char *MYOBJ_gethello2(MYOBJ *obj)",
          "159: {",
          "160:     MYOBJ_EX_DATA* ex_data = CRYPTO_get_ex_data(&obj->ex_data, saved_idx2);",
          "161:     if (ex_data != NULL)",
          "162:         return ex_data->hello;",
          "164:     obj->st = 0;",
          "165:     return NULL;",
          "166: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "90: int main()",
          "91: {",
          "92:     MYOBJ *t1, *t2, *t3;",
          "93:     const char *cp;",
          "94:     char *p;",
          "97:     saved_argl = 21;",
          "99:     saved_idx = CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_APP,",
          "100:                                         saved_argl, saved_argp,",
          "101:                                         exnew, exdup, exfree);",
          "102:     t1 = MYOBJ_new();",
          "103:     t2 = MYOBJ_new();",
          "104:     MYOBJ_sethello(t1, p);",
          "105:     cp = MYOBJ_gethello(t1);",
          "106:     OPENSSL_assert(cp == p);",
          "109:     cp = MYOBJ_gethello(t2);",
          "110:     OPENSSL_assert(cp == NULL);",
          "113:     t3 = MYOBJ_dup(t1);",
          "114:     cp = MYOBJ_gethello(t3);",
          "115:     OPENSSL_assert(cp == p);",
          "119:     MYOBJ_free(t1);",
          "120:     MYOBJ_free(t2);",
          "121:     MYOBJ_free(t3);",
          "124:     return 0;",
          "125: }",
          "",
          "[Removed Lines]",
          "96:     p = strdup(\"hello world\");",
          "98:     saved_argp = malloc(1);",
          "107:     if (cp != p)",
          "108:         return 1;",
          "111:     if (cp != NULL)",
          "112:         return 1;",
          "116:     if (cp != p)",
          "117:         return 1;",
          "118:     cp = MYOBJ_gethello(t2);",
          "122:     free(saved_argp);",
          "123:     free(p);",
          "",
          "[Added Lines]",
          "187:     MYOBJ_EX_DATA *ex_data;",
          "191:     p = OPENSSL_strdup(\"hello world\");",
          "193:     saved_argp = OPENSSL_malloc(1);",
          "197:     saved_idx2 = CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_APP,",
          "198:                                          saved_argl, saved_argp,",
          "199:                                          exnew2, exdup2, exfree2);",
          "202:     OPENSSL_assert(t1->st && t2->st);",
          "203:     ex_data = CRYPTO_get_ex_data(&t1->ex_data, saved_idx2);",
          "204:     OPENSSL_assert(ex_data != NULL);",
          "205:     ex_data = CRYPTO_get_ex_data(&t2->ex_data, saved_idx2);",
          "206:     OPENSSL_assert(ex_data != NULL);",
          "212:     MYOBJ_sethello2(t1, p);",
          "213:     cp = MYOBJ_gethello2(t1);",
          "214:     OPENSSL_assert(cp == p);",
          "215:     OPENSSL_assert(t1->st);",
          "216:     cp = MYOBJ_gethello2(t2);",
          "217:     OPENSSL_assert(cp == NULL);",
          "218:     OPENSSL_assert(t2->st);",
          "220:     ex_data = CRYPTO_get_ex_data(&t3->ex_data, saved_idx2);",
          "221:     OPENSSL_assert(ex_data != NULL);",
          "222:     OPENSSL_assert(ex_data->dup);",
          "225:     cp = MYOBJ_gethello2(t3);",
          "226:     OPENSSL_assert(cp == p);",
          "227:     OPENSSL_assert(t3->st);",
          "231:     OPENSSL_free(saved_argp);",
          "232:     OPENSSL_free(p);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2758a2292aceda93e9f44c219b94fe21bb9a650",
      "candidate_info": {
        "commit_hash": "b2758a2292aceda93e9f44c219b94fe21bb9a650",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/b2758a2292aceda93e9f44c219b94fe21bb9a650",
        "files": [
          "CHANGES",
          "NEWS",
          "README",
          "include/openssl/opensslv.h"
        ],
        "message": "Prepare for 1.1.0g release\n\nReviewed-by: Andy Polyakov <appro@openssl.org>",
        "before_after_code_files": [
          "include/openssl/opensslv.h||include/openssl/opensslv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/opensslv.h||include/openssl/opensslv.h": [
          "File: include/openssl/opensslv.h -> include/openssl/opensslv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: # ifdef OPENSSL_FIPS",
          "45: # else",
          "47: # endif",
          "",
          "[Removed Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x10100070L",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0g-fips-dev  xx XXX xxxx\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0g-dev  xx XXX xxxx\"",
          "",
          "[Added Lines]",
          "42: # define OPENSSL_VERSION_NUMBER  0x1010007fL",
          "44: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0g-fips  2 Nov 2017\"",
          "46: #  define OPENSSL_VERSION_TEXT    \"OpenSSL 1.1.0g  2 Nov 2017\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}