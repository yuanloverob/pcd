{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b163b57212b8c2c68dbbef8e3de7f095b544e302",
      "candidate_info": {
        "commit_hash": "b163b57212b8c2c68dbbef8e3de7f095b544e302",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b163b57212b8c2c68dbbef8e3de7f095b544e302",
        "files": [
          "ext/fts3/fts3_unicode2.c",
          "ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_test_tok.c",
          "ext/fts5/fts5_tokenize.c",
          "ext/fts5/fts5_unicode2.c",
          "ext/fts5/test/fts5unicode3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix problems in fts5 found by ASAN.\n\nFossilOrigin-Name: c564bf870106faef297594a51995619c80311d06bd5f8a0c7644f666f22ba576",
        "before_after_code_files": [
          "ext/fts3/fts3_unicode2.c||ext/fts3/fts3_unicode2.c",
          "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl",
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_test_tok.c||ext/fts5/fts5_test_tok.c",
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
          "ext/fts5/test/fts5unicode3.test||ext/fts5/test/fts5unicode3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_unicode2.c||ext/fts3/fts3_unicode2.c": [
          "File: ext/fts3/fts3_unicode2.c -> ext/fts3/fts3_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "200:     'w',       'x',       'y',       'z',       'h',       't',",
          "201:     'w',       'y',       'a',       'a'|HIBIT, 'a'|HIBIT, 'a'|HIBIT,",
          "202:     'e',       'e'|HIBIT, 'e'|HIBIT, 'i',       'o',       'o'|HIBIT,",
          "204:   };",
          "206:   unsigned int key = (((unsigned int)c)<<3) | 0x00000007;",
          "",
          "[Removed Lines]",
          "203:     'o'|HIBIT, 'o'|HIBIT, 'u',       'u'|HIBIT, 'u'|HIBIT, 'y',",
          "",
          "[Added Lines]",
          "203:     'o'|HIBIT, 'o'|HIBIT, 'u',       'u'|HIBIT, 'u'|HIBIT, 'y',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:   unsigned int mask1 = 0x000361F8;",
          "232:   if( c<768 || c>817 ) return 0;",
          "233:   return (c < 768+32) ?",
          "236: }",
          "",
          "[Removed Lines]",
          "234:       (mask0 & (1 << (c-768))) :",
          "235:       (mask1 & (1 << (c-768-32)));",
          "",
          "[Added Lines]",
          "234:       (mask0 & ((unsigned int)1 << (c-768))) :",
          "235:       (mask1 & ((unsigned int)1 << (c-768-32)));",
          "",
          "---------------"
        ],
        "ext/fts3/unicode/mkunicode.tcl||ext/fts3/unicode/mkunicode.tcl": [
          "File: ext/fts3/unicode/mkunicode.tcl -> ext/fts3/unicode/mkunicode.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   }",
          "64:   puts \"\"",
          "65:   puts \"  \\};\"",
          "66:   puts \"  char aChar\\[\\] = \\{\"",
          "67:   puts -nonewline \"    '\\\\0',      \"",
          "68:   set i 1",
          "69:   foreach c $aChar f $aFlag {",
          "70:     if { $f } {",
          "72:     } else {",
          "74:     }",
          "75:     if {$c == \"\"} { set str \"'\\\\0',      \" }",
          "",
          "[Removed Lines]",
          "71:       set str \"'$c'|0x80,  \"",
          "73:       set str \"'$c'|0x00,  \"",
          "",
          "[Added Lines]",
          "66:   puts \"#define HIBIT ((char)0x80)\"",
          "72:       set str \"'$c'|HIBIT, \"",
          "74:       set str \"'$c',       \"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:   puts \"  if( c<$iFirst || c>$iLast ) return 0;\"",
          "136:   puts \"  return (c < $iFirst+32) ?\"",
          "139:   puts \"\\}\"",
          "140: }",
          "",
          "[Removed Lines]",
          "137:   puts \"      (mask0 & (1 << (c-$iFirst))) :\"",
          "138:   puts \"      (mask1 & (1 << (c-$iFirst-32)));\"",
          "",
          "[Added Lines]",
          "138:   puts \"      (mask0 & ((unsigned int)1 << (c-$iFirst))) :\"",
          "139:   puts \"      (mask1 & ((unsigned int)1 << (c-$iFirst-32)));\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "699:     static u16 aFts5UnicodeMap[] = {$aMapArray};",
          "700:     static u16 aFts5UnicodeData[] = {$aDataArray};",
          "703:       int iRes = -1;",
          "704:       int iHi;",
          "705:       int iLo;",
          "",
          "[Removed Lines]",
          "702:     int sqlite3Fts5UnicodeCategory(int iCode) {",
          "",
          "[Added Lines]",
          "703:     int sqlite3Fts5UnicodeCategory(u32 iCode) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "782:           aArray[0] = 1;",
          "783:         }",
          "786:         if( aArray[c]==0 ){",
          "788:           return 1;",
          "",
          "[Removed Lines]",
          "785:         c = sqlite3Fts5UnicodeCategory(i);",
          "",
          "[Added Lines]",
          "786:         c = sqlite3Fts5UnicodeCategory((u32)i);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "788: int sqlite3Fts5UnicodeFold(int c, int bRemoveDiacritic);",
          "790: int sqlite3Fts5UnicodeCatParse(const char*, u8*);",
          "792: void sqlite3Fts5UnicodeAscii(u8*, u8*);",
          "",
          "[Removed Lines]",
          "791: int sqlite3Fts5UnicodeCategory(int iCode);",
          "",
          "[Added Lines]",
          "791: int sqlite3Fts5UnicodeCategory(u32 iCode);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2553:   sqlite3Fts5UnicodeCatParse(\"N*\", aArr);",
          "2554:   sqlite3Fts5UnicodeCatParse(\"Co\", aArr);",
          "2555:   iCode = sqlite3_value_int(apVal[0]);",
          "2557: }",
          "2559: static void fts5ExprFold(",
          "",
          "[Removed Lines]",
          "2556:   sqlite3_result_int(pCtx, aArr[sqlite3Fts5UnicodeCategory(iCode)]);",
          "",
          "[Added Lines]",
          "2556:   sqlite3_result_int(pCtx, aArr[sqlite3Fts5UnicodeCategory((u32)iCode)]);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3577:         for(iSeg=0; iSeg<pStruct->aLevel[iLvl].nSeg; iSeg++){",
          "3578:           int iId = pStruct->aLevel[iLvl].aSeg[iSeg].iSegid;",
          "3579:           if( iId<=FTS5_MAX_SEGMENT ){",
          "3581:           }",
          "3582:         }",
          "3583:       }",
          "3585:       for(i=0; aUsed[i]==0xFFFFFFFF; i++);",
          "3586:       mask = aUsed[i];",
          "3588:       iSegid += 1 + i*32;",
          "3590: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "3580:             aUsed[(iId-1) / 32] |= 1 << ((iId-1) % 32);",
          "3587:       for(iSegid=0; mask & (1 << iSegid); iSegid++);",
          "",
          "[Added Lines]",
          "3580:             aUsed[(iId-1) / 32] |= (u32)1 << ((iId-1) % 32);",
          "3587:       for(iSegid=0; mask & ((u32)1 << iSegid); iSegid++);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6282:   nSpace = n + FTS5_DATA_ZERO_PADDING;",
          "6283:   a = (u8*)sqlite3Fts5MallocZero(&rc, nSpace);",
          "6284:   if( a==0 ) goto decode_out;",
          "6288:   fts5DecodeRowid(iRowid, &iSegid, &bDlidx, &iHeight, &iPgno);",
          "",
          "[Removed Lines]",
          "6285:   memcpy(a, aBlob, n);",
          "",
          "[Added Lines]",
          "6285:   if( n>0 ) memcpy(a, aBlob, n);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_test_tok.c||ext/fts5/fts5_test_tok.c": [
          "File: ext/fts5/fts5_test_tok.c -> ext/fts5/fts5_test_tok.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:     if( pCsr->zInput==0 ){",
          "379:       rc = SQLITE_NOMEM;",
          "380:     }else{",
          "382:       pCsr->zInput[nByte] = 0;",
          "383:       rc = pTab->tok.xTokenize(",
          "384:           pTab->pTok, (void*)pCsr, 0, zByte, nByte, fts5tokCb",
          "",
          "[Removed Lines]",
          "381:       memcpy(pCsr->zInput, zByte, nByte);",
          "",
          "[Added Lines]",
          "381:       if( nByte>0 ) memcpy(pCsr->zInput, zByte, nByte);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:         if( iCode<128 ){",
          "269:           p->aTokenChar[iCode] = (unsigned char)bTokenChars;",
          "270:         }else{",
          "272:           assert( (bToken==0 || bToken==1) );",
          "273:           assert( (bTokenChars==0 || bTokenChars==1) );",
          "274:           if( bToken!=bTokenChars && sqlite3Fts5UnicodeIsdiacritic(iCode)==0 ){",
          "",
          "[Removed Lines]",
          "271:           bToken = p->aCategory[sqlite3Fts5UnicodeCategory(iCode)];",
          "",
          "[Added Lines]",
          "271:           bToken = p->aCategory[sqlite3Fts5UnicodeCategory((u32)iCode)];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "430: static int fts5UnicodeIsAlnum(Unicode61Tokenizer *p, int iCode){",
          "431:   return (",
          "433:     ^ fts5UnicodeIsException(p, iCode)",
          "434:   );",
          "435: }",
          "",
          "[Removed Lines]",
          "432:     p->aCategory[sqlite3Fts5UnicodeCategory(iCode)]",
          "",
          "[Added Lines]",
          "432:     p->aCategory[sqlite3Fts5UnicodeCategory((u32)iCode)]",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
          "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:     'w',       'x',       'y',       'z',       'h',       't',",
          "70:     'w',       'y',       'a',       'a'|HIBIT, 'a'|HIBIT, 'a'|HIBIT,",
          "71:     'e',       'e'|HIBIT, 'e'|HIBIT, 'i',       'o',       'o'|HIBIT,",
          "73:   };",
          "75:   unsigned int key = (((unsigned int)c)<<3) | 0x00000007;",
          "",
          "[Removed Lines]",
          "72:     'o'|HIBIT, 'o'|HIBIT, 'u',       'u'|HIBIT, 'u'|HIBIT, 'y',",
          "",
          "[Added Lines]",
          "72:     'o'|HIBIT, 'o'|HIBIT, 'u',       'u'|HIBIT, 'u'|HIBIT, 'y',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:   unsigned int mask1 = 0x000361F8;",
          "101:   if( c<768 || c>817 ) return 0;",
          "102:   return (c < 768+32) ?",
          "105: }",
          "",
          "[Removed Lines]",
          "103:       (mask0 & (1 << (c-768))) :",
          "104:       (mask1 & (1 << (c-768-32)));",
          "",
          "[Added Lines]",
          "103:       (mask0 & ((unsigned int)1 << (c-768))) :",
          "104:       (mask1 & ((unsigned int)1 << (c-768-32)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "730:     34,    3074,  7692,  63,    63,",
          "731:   };",
          "734:   int iRes = -1;",
          "735:   int iHi;",
          "736:   int iLo;",
          "",
          "[Removed Lines]",
          "733: int sqlite3Fts5UnicodeCategory(int iCode) {",
          "",
          "[Added Lines]",
          "734: int sqlite3Fts5UnicodeCategory(u32 iCode) {",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5unicode3.test||ext/fts5/test/fts5unicode3.test": [
          "File: ext/fts5/test/fts5unicode3.test -> ext/fts5/test/fts5unicode3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: }",
          "23: proc fts3_unicode_path {file} {",
          "25: }",
          "27: source [fts3_unicode_path parseunicode.tcl]",
          "",
          "[Removed Lines]",
          "24:   file join [file dirname [info script]] .. .. fts3 unicode $file",
          "",
          "[Added Lines]",
          "24:   file join .. [file dirname [info script]] .. .. fts3 unicode $file",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fb0d7fba07865ff557bfcdacfda7b625d099ac8b4dcbe0c08cd2d4b84a068bb9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "926f796e8feec15f3836aa0a060ed906f8ae04d3",
      "candidate_info": {
        "commit_hash": "926f796e8feec15f3836aa0a060ed906f8ae04d3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/926f796e8feec15f3836aa0a060ed906f8ae04d3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/gencol1.test"
        ],
        "message": "Ensure that the SrcList_item.colUsed field is set correctly (set to have a 1 for all columns of the table) when a generated column appears in the USING clause of a join.\n\nFossilOrigin-Name: 1923efb283e8840fa7436eb20b9d2174ef7cace1690d3b97b572a0db2048b8e3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "624:   Expr *p = sqlite3ExprAlloc(db, TK_COLUMN, 0, 0);",
          "625:   if( p ){",
          "626:     struct SrcList_item *pItem = &pSrc->a[iSrc];",
          "628:     p->iTable = pItem->iCursor;",
          "629:     if( p->y.pTab->iPKey==iCol ){",
          "630:       p->iColumn = -1;",
          "631:     }else{",
          "632:       p->iColumn = (ynVar)iCol;",
          "636:     }",
          "637:   }",
          "638:   return p;",
          "",
          "[Removed Lines]",
          "627:     p->y.pTab = pItem->pTab;",
          "633:       testcase( iCol==BMS );",
          "634:       testcase( iCol==BMS-1 );",
          "635:       pItem->colUsed |= ((Bitmask)1)<<(iCol>=BMS ? BMS-1 : iCol);",
          "",
          "[Added Lines]",
          "627:     Table *pTab = p->y.pTab = pItem->pTab;",
          "633:       if( pTab->tabFlags & TF_HasGenerated ){",
          "634:         Column *pColumn = pTab->aCol + iCol;",
          "635:         if( pColumn->colFlags & COLFLAG_GENERATED ){",
          "636:           testcase( pTab->nCol==63 );",
          "637:           testcase( pTab->nCol==64 );",
          "638:           if( pTab->nCol>=64 ){",
          "639:             pItem->colUsed = ALLBITS;",
          "640:           }else{",
          "641:             pItem->colUsed = MASKBIT(pTab->nCol)-1;",
          "642:           }",
          "643:         }",
          "644:       }else{",
          "645:         testcase( iCol==BMS );",
          "646:         testcase( iCol==BMS-1 );",
          "647:         pItem->colUsed |= ((Bitmask)1)<<(iCol>=BMS ? BMS-1 : iCol);",
          "648:       }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "342:   PRAGMA integrity_check;",
          "343: } {ok}",
          "345: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "345: # 2019-12-09 but report from Yongheng Chen",
          "346: # Ensure that the SrcList_item.colUsed field is set correctly when a",
          "347: # generated column appears in the USING clause of a join.",
          "348: #",
          "349: do_execsql_test gencol1-13.10 {",
          "350:   CREATE TABLE t1(x, y AS(x+1));",
          "351:   INSERT INTO t1 VALUES(10);",
          "352:   SELECT y FROM t1 JOIN t1 USING (y,y);",
          "353: } {11}",
          "354: do_execsql_test gencol1-13.11 {",
          "355:   CREATE INDEX t1y ON t1(y);",
          "356:   SELECT y FROM t1 JOIN t1 USING (y,y);",
          "357: } {11}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69843342de6612381c4388fa94c1e87909ec57f0",
      "candidate_info": {
        "commit_hash": "69843342de6612381c4388fa94c1e87909ec57f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/69843342de6612381c4388fa94c1e87909ec57f0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/window2.tcl",
          "test/window2.test",
          "test/windowfault.test"
        ],
        "message": "Ensure sqlite3WindowRewrite() is called on a SELECT statement before any terms aremoved from it as part of IN() clause processing. Fix for [f00d096ca].\n\nFossilOrigin-Name: 8c856404b4e98d295449a4e89a41495dc007319a8e9c35c1a763718d7c5f67e8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45748e2db028ffbda5d3e747493721a5a89af3fbc06823081a2f27f570e40e73",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416: ){",
          "417:   sqlite3 *db = pParse->db;",
          "419:   if( db->mallocFailed==0 ){",
          "",
          "[Removed Lines]",
          "418:   Expr *pNew = sqlite3ExprDup(db, pX, 0);",
          "",
          "[Added Lines]",
          "418:   Expr *pNew;",
          "419: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "434:   if( sqlite3WindowRewrite(pParse, pX->x.pSelect) ) return 0;",
          "435: #endif",
          "436:   pNew = sqlite3ExprDup(db, pX, 0);",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:   SELECT avg(x) OVER (ORDER BY y) AS z FROM t1 ORDER BY z;",
          "449: }",
          "451: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451: ==========",
          "453: execsql_test 6.0 {",
          "454:   DROP TABLE IF EXISTS t0;",
          "455:   CREATE TABLE t0(c0 INTEGER UNIQUE);",
          "456:   INSERT INTO t0 VALUES(0);",
          "457: }",
          "458: execsql_test 6.1 {",
          "459:   SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0;",
          "460: }",
          "461: execsql_test 6.2 {",
          "462:   SELECT * FROM t0 WHERE",
          "463:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "464: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "930:   set {} {}",
          "931: } {}",
          "933: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933: #==========================================================================",
          "935: do_execsql_test 6.0 {",
          "936:   DROP TABLE IF EXISTS t0;",
          "937:   CREATE TABLE t0(c0 INTEGER UNIQUE);",
          "938:   INSERT INTO t0 VALUES(0);",
          "939: } {}",
          "941: do_execsql_test 6.1 {",
          "942:   SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0;",
          "943: } {1 {}}",
          "945: do_execsql_test 6.2 {",
          "946:   SELECT * FROM t0 WHERE",
          "947:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "948: } {}",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:   CREATE TABLE t2(a, b, c, d);",
          "231: }",
          "234: } -body {",
          "235:   execsql {",
          "236:     SELECT row_number() OVER win",
          "",
          "[Removed Lines]",
          "233: do_faultsim_test 1 -faults oom* -prep {",
          "",
          "[Added Lines]",
          "233: do_faultsim_test 10 -faults oom* -prep {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:   faultsim_test_result {0 {}}",
          "247: }",
          "249: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249: reset_db",
          "250: do_execsql_test 11.0 {",
          "251:   DROP TABLE IF EXISTS t0;",
          "252:   CREATE TABLE t0(c0 INTEGER UNIQUE);",
          "253:   INSERT INTO t0 VALUES(0);",
          "254: } {}",
          "256: do_faultsim_test 11 -faults oom* -prep {",
          "257: } -body {",
          "258:   execsql {",
          "259:     SELECT * FROM t0 WHERE",
          "260:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "261:   }",
          "262: } -test {",
          "263:   faultsim_test_result {0 {}}",
          "264: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
      "candidate_info": {
        "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window1.test"
        ],
        "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
          "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
          "6067:   ){",
          "6068:     p->selFlags &= ~SF_Distinct;",
          "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6067:    && p->pWin==0",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1243:   ALTER TABLE a0 RENAME TO S;",
          "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
          "1246: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1246: reset_db",
          "1247: do_execsql_test 33.1 {",
          "1248:   CREATE TABLE t1(aa, bb);",
          "1249:   INSERT INTO t1 VALUES(1, 2);",
          "1250:   INSERT INTO t1 VALUES(5, 6);",
          "1251:   CREATE TABLE t2(x);",
          "1252:   INSERT INTO t2 VALUES(1);",
          "1253: }",
          "1254: do_execsql_test 33.2 {",
          "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
          "1256:   ORDER BY 1;",
          "1257: } {6 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "069d1b1faf819c9d49a299129caeef9774d73b89",
      "candidate_info": {
        "commit_hash": "069d1b1faf819c9d49a299129caeef9774d73b89",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/069d1b1faf819c9d49a299129caeef9774d73b89",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/between.test"
        ],
        "message": "Avoid transforming TK_COLLATE or TK_UNLIKELY Expr nodes to TK_REFERENCE. Instead, transform the uppermost Expr node in the expression tree that is not of this type.\n\nFossilOrigin-Name: ba7870e292919cf6c2f4b65b63fb0420ba2718eb0a797e0ba5302eec551a4238",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/between.test||test/between.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca4ddfefc1be1afbf366d87c47f0dd1122350d7ab34ba60020c5babb64a654a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3391:   p->op2 = p->op;",
          "3392:   p->op = TK_REGISTER;",
          "3393:   p->iTable = iReg;",
          "",
          "[Removed Lines]",
          "3390: static void exprToRegister(Expr *p, int iReg){",
          "",
          "[Added Lines]",
          "3390: static void exprToRegister(Expr *pExpr, int iReg){",
          "3391:   Expr *p = sqlite3ExprSkipCollate(pExpr);",
          "",
          "---------------"
        ],
        "test/between.test||test/between.test": [
          "File: test/between.test -> test/between.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "119:   }",
          "120: } {4 2 25 27 sort t1 *}",
          "123: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #-------------------------------------------------------------------------",
          "123: reset_db",
          "124: do_execsql_test between-2.0 {",
          "125:   CREATE TABLE t1(x TEXT, y TEXT COLLATE nocase);",
          "126:   INSERT INTO t1 VALUES('0', 'abc');",
          "127: }",
          "129: foreach {tn expr res} {",
          "130:   1 \"x                BETWEEN 1 AND '5'\" 0",
          "131:   2 \"x COLLATE binary BETWEEN 1 AND '5'\" 0",
          "132:   3 \"x COLLATE nocase BETWEEN 1 AND '5'\" 0",
          "134:   4 \"y                  BETWEEN 'A' AND 'B'\" 1",
          "135:   5 \"y COLLATE nocase   BETWEEN 'A' AND 'B'\" 1",
          "136:   6 \"y COLLATE binary   BETWEEN 'A' AND 'B'\" 0",
          "137:   7 \"(y COLLATE binary) BETWEEN 'A' AND 'B'\" 0",
          "138: } {",
          "139:   set sql \"SELECT $expr FROM t1\"",
          "140:   do_execsql_test between-2.1.$tn $sql $res",
          "141: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}