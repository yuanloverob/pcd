{
  "cve_id": "CVE-2018-1000204",
  "cve_desc": "Linux Kernel version 3.18 to 4.16 incorrectly handles an SG_IO ioctl on /dev/sg0 with dxfer_direction=SG_DXFER_FROM_DEV and an empty 6-byte cmdp. This may lead to copying up to 1000 kernel heap pages to the userspace. This has been fixed upstream in https://github.com/torvalds/linux/commit/a45b599ad808c3c982fdcdc12b0b8611c2f92824 already. The problem has limited scope, as users don't usually have permissions to access SCSI devices. On the other hand, e.g. the Nero user manual suggests doing `chmod o+r+w /dev/sg*` to make the devices accessible. NOTE: third parties dispute the relevance of this report, noting that the requirement for an attacker to have both the CAP_SYS_ADMIN and CAP_SYS_RAWIO capabilities makes it \"virtually impossible to exploit.",
  "repo": "torvalds/linux",
  "patch_hash": "a45b599ad808c3c982fdcdc12b0b8611c2f92824",
  "patch_info": {
    "commit_hash": "a45b599ad808c3c982fdcdc12b0b8611c2f92824",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/a45b599ad808c3c982fdcdc12b0b8611c2f92824",
    "files": [
      "drivers/scsi/sg.c"
    ],
    "message": "scsi: sg: allocate with __GFP_ZERO in sg_build_indirect()\n\nThis shall help avoid copying uninitialized memory to the userspace when\ncalling ioctl(fd, SG_IO) with an empty command.\n\nReported-by: syzbot+7d26fc1eea198488deab@syzkaller.appspotmail.com\nCc: stable@vger.kernel.org\nSigned-off-by: Alexander Potapenko <glider@google.com>\nAcked-by: Douglas Gilbert <dgilbert@interlog.com>\nReviewed-by: Johannes Thumshirn <jthumshirn@suse.de>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "before_after_code_files": [
      "drivers/scsi/sg.c||drivers/scsi/sg.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/sg.c||drivers/scsi/sg.c": [
      "File: drivers/scsi/sg.c -> drivers/scsi/sg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1894:   num = (rem_sz > scatter_elem_sz_prev) ?",
      "1895:    scatter_elem_sz_prev : rem_sz;",
      "1898:   if (!schp->pages[k])",
      "1899:    goto out;",
      "",
      "[Removed Lines]",
      "1897:   schp->pages[k] = alloc_pages(gfp_mask, order);",
      "",
      "[Added Lines]",
      "1897:   schp->pages[k] = alloc_pages(gfp_mask | __GFP_ZERO, order);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5b9d397447f8c03843198b573d7cecf8893523fb",
      "candidate_info": {
        "commit_hash": "5b9d397447f8c03843198b573d7cecf8893523fb",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/5b9d397447f8c03843198b573d7cecf8893523fb",
        "files": [
          "drivers/scsi/sg.c"
        ],
        "message": "scsi: sg: clean up gfp_mask in sg_build_indirect\n\ncommit a45b599ad808c (\"scsi: sg: allocate with __GFP_ZERO in\nsg_build_indirect()\") changed the call to alloc_pages to always use\n__GFP_ZERO.  Just above that, though, there was this:\n\n       if (!capable(CAP_SYS_ADMIN) || !capable(CAP_SYS_RAWIO))\n               gfp_mask |= __GFP_ZERO;\n\nAnd there's only one user of the gfp_mask.  Just or in the __GFP_ZERO\nflag at the top of the function and be done with it.\n\nSigned-off-by: Jeff Moyer <jmoyer@redhat.com>\nAcked-by: Douglas Gilbert <dgilbert@interlog.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
        "before_after_code_files": [
          "drivers/scsi/sg.c||drivers/scsi/sg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/scsi/sg.c||drivers/scsi/sg.c"
          ],
          "candidate": [
            "drivers/scsi/sg.c||drivers/scsi/sg.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/scsi/sg.c||drivers/scsi/sg.c": [
          "File: drivers/scsi/sg.c -> drivers/scsi/sg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1850:  int ret_sz = 0, i, k, rem_sz, num, mx_sc_elems;",
          "1851:  int sg_tablesize = sfp->parentdp->sg_tablesize;",
          "1852:  int blk_size = buff_size, order;",
          "1854:  struct sg_device *sdp = sfp->parentdp;",
          "1856:  if (blk_size < 0)",
          "",
          "[Removed Lines]",
          "1853:  gfp_t gfp_mask = GFP_ATOMIC | __GFP_COMP | __GFP_NOWARN;",
          "",
          "[Added Lines]",
          "1853:  gfp_t gfp_mask = GFP_ATOMIC | __GFP_COMP | __GFP_NOWARN | __GFP_ZERO;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1880:  if (sdp->device->host->unchecked_isa_dma)",
          "1881:   gfp_mask |= GFP_DMA;",
          "1886:  order = get_order(num);",
          "1887: retry:",
          "1888:  ret_sz = 1 << (PAGE_SHIFT + order);",
          "",
          "[Removed Lines]",
          "1883:  if (!capable(CAP_SYS_ADMIN) || !capable(CAP_SYS_RAWIO))",
          "1884:   gfp_mask |= __GFP_ZERO;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1893:   num = (rem_sz > scatter_elem_sz_prev) ?",
          "1894:    scatter_elem_sz_prev : rem_sz;",
          "1897:   if (!schp->pages[k])",
          "1898:    goto out;",
          "",
          "[Removed Lines]",
          "1896:   schp->pages[k] = alloc_pages(gfp_mask | __GFP_ZERO, order);",
          "",
          "[Added Lines]",
          "1893:   schp->pages[k] = alloc_pages(gfp_mask, order);",
          "",
          "---------------"
        ]
      }
    }
  ]
}