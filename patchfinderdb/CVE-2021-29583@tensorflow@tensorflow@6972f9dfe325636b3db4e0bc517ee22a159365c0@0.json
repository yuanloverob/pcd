{
  "cve_id": "CVE-2021-29583",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. The implementation of `tf.raw_ops.FusedBatchNorm` is vulnerable to a heap buffer overflow. If the tensors are empty, the same implementation can trigger undefined behavior by dereferencing null pointers. The implementation(https://github.com/tensorflow/tensorflow/blob/57d86e0db5d1365f19adcce848dfc1bf89fdd4c7/tensorflow/core/kernels/fused_batch_norm_op.cc) fails to validate that `scale`, `offset`, `mean` and `variance` (the last two only when required) all have the same number of elements as the number of channels of `x`. This results in heap out of bounds reads when the buffers backing these tensors are indexed past their boundary. If the tensors are empty, the validation mentioned in the above paragraph would also trigger and prevent the undefined behavior. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "6972f9dfe325636b3db4e0bc517ee22a159365c0",
  "patch_info": {
    "commit_hash": "6972f9dfe325636b3db4e0bc517ee22a159365c0",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/6972f9dfe325636b3db4e0bc517ee22a159365c0",
    "files": [
      "tensorflow/core/kernels/fused_batch_norm_op.cc"
    ],
    "message": "Add missing valuidation to FusedBatchNorm.\n\nPiperOrigin-RevId: 372460336\nChange-Id: Ic8c4e4de67c58a741bd87f2e182bed07247d1126",
    "before_after_code_files": [
      "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc": [
      "File: tensorflow/core/kernels/fused_batch_norm_op.cc -> tensorflow/core/kernels/fused_batch_norm_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1282:                   errors::InvalidArgument(\"Error during tensor copy.\"));",
      "1283:     }",
      "1285:     if (has_side_input_) {",
      "1286:       OP_REQUIRES(context, side_input->shape() == x.shape(),",
      "1287:                   errors::InvalidArgument(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1285:     const auto num_channels = GetTensorDim(x, tensor_format_, 'C');",
      "1286:     OP_REQUIRES(",
      "1287:         context, scale.NumElements() == num_channels,",
      "1288:         errors::InvalidArgument(\"scale must have the same number of elements \"",
      "1289:                                 \"as the channels of x, got \",",
      "1290:                                 scale.NumElements(), \" and \", num_channels));",
      "1291:     OP_REQUIRES(",
      "1292:         context, offset.NumElements() == num_channels,",
      "1293:         errors::InvalidArgument(\"offset must have the same number of elements \"",
      "1294:                                 \"as the channels of x, got \",",
      "1295:                                 offset.NumElements(), \" and \", num_channels));",
      "1296:     if (estimated_mean.NumElements() != 0) {",
      "1297:       OP_REQUIRES(context, estimated_mean.NumElements() == num_channels,",
      "1298:                   errors::InvalidArgument(",
      "1299:                       \"mean must be empty or have the same number of \"",
      "1300:                       \"elements as the channels of x, got \",",
      "1301:                       estimated_mean.NumElements(), \" and \", num_channels));",
      "1302:     }",
      "1303:     if (estimated_variance.NumElements() != 0) {",
      "1304:       OP_REQUIRES(context, estimated_variance.NumElements() == num_channels,",
      "1305:                   errors::InvalidArgument(",
      "1306:                       \"variance must be empty or have the same number of \"",
      "1307:                       \"elements as the channels of x, got \",",
      "1308:                       estimated_variance.NumElements(), \" and \", num_channels));",
      "1309:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1296:       OP_REQUIRES(",
      "1298:           errors::InvalidArgument(\"FusedBatchNorm with activation requires \"",
      "1299:                                   \"channel dimension to be a multiple of 4.\"));",
      "1300:     }",
      "",
      "[Removed Lines]",
      "1297:           context, !is_training_ || x.dim_size(3) % 4 == 0,",
      "",
      "[Added Lines]",
      "1323:           context, !is_training_ || num_channels % 4 == 0,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aab9998916c2ffbd8f0592059fad352622f89cda",
      "candidate_info": {
        "commit_hash": "aab9998916c2ffbd8f0592059fad352622f89cda",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/aab9998916c2ffbd8f0592059fad352622f89cda",
        "files": [
          "tensorflow/core/kernels/fused_batch_norm_op.cc",
          "tensorflow/python/ops/nn_fused_batchnorm_test.py"
        ],
        "message": "Add shape checks to FusedBatchNorm kernels.\n\nPiperOrigin-RevId: 399755576\nChange-Id: If8049fde109cc33badb5509d174b9b95aee1ea5e",
        "before_after_code_files": [
          "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc",
          "tensorflow/python/ops/nn_fused_batchnorm_test.py||tensorflow/python/ops/nn_fused_batchnorm_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc": [
          "File: tensorflow/core/kernels/fused_batch_norm_op.cc -> tensorflow/core/kernels/fused_batch_norm_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1340:         errors::InvalidArgument(\"offset must have the same number of elements \"",
          "1341:                                 \"as the channels of x, got \",",
          "1342:                                 offset.NumElements(), \" and \", num_channels));",
          "1344:       OP_REQUIRES(context, estimated_mean.NumElements() == num_channels,",
          "1345:                   errors::InvalidArgument(",
          "1348:                       estimated_mean.NumElements(), \" and \", num_channels));",
          "1351:       OP_REQUIRES(context, estimated_variance.NumElements() == num_channels,",
          "1352:                   errors::InvalidArgument(",
          "1355:                       estimated_variance.NumElements(), \" and \", num_channels));",
          "1356:     }",
          "",
          "[Removed Lines]",
          "1343:     if (estimated_mean.NumElements() != 0) {",
          "1346:                       \"mean must be empty or have the same number of \"",
          "1347:                       \"elements as the channels of x, got \",",
          "1349:     }",
          "1350:     if (estimated_variance.NumElements() != 0) {",
          "1353:                       \"variance must be empty or have the same number of \"",
          "1354:                       \"elements as the channels of x, got \",",
          "",
          "[Added Lines]",
          "1343:     if (!is_training_ || exponential_avg_factor_ != 1.) {",
          "1344:       std::string prefix_msg = is_training_ ? \"When exponential_avg_factor != 1\"",
          "1345:                                             : \"When is_training=false\";",
          "1348:                       prefix_msg,",
          "1349:                       \", mean must have the same number \"",
          "1350:                       \"of elements as the channels of x, got \",",
          "1354:                       prefix_msg,",
          "1355:                       \", variance must have the same \"",
          "1356:                       \"number of elements as the channels of x, got \",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1543:                 errors::InvalidArgument(",
          "1544:                     \"saved variance must be 1-dimensional\",",
          "1545:                     saved_maybe_inv_var_or_pop_var.shape().DebugString()));",
          "1546:     if (use_activation) {",
          "1547:       OP_REQUIRES(",
          "1548:           context, x.dim_size(3) % 4 == 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1548:     OP_REQUIRES(",
          "1549:         context, x.shape() == y_backprop.shape(),",
          "1550:         errors::InvalidArgument(",
          "1551:             \"x and y_backprop must have same shape, but x has shape \",",
          "1552:             x.shape(), \" and y_backprop has shape \", y_backprop.shape()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1569:                   errors::InvalidArgument(\"Error during tensor copy.\"));",
          "1570:     }",
          "1572:     Tensor* x_backprop = nullptr;",
          "1573:     auto alloc_shape = use_reshape ? dest_shape : x_shape;",
          "1574:     OP_REQUIRES_OK(context,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1579:     const auto num_channels = GetTensorDim(x, tensor_format_, 'C');",
          "1580:     OP_REQUIRES(",
          "1581:         context, scale.NumElements() == num_channels,",
          "1582:         errors::InvalidArgument(\"scale must have the same number of elements \"",
          "1583:                                 \"as the channels of x, got \",",
          "1584:                                 scale.NumElements(), \" and \", num_channels));",
          "1585:     OP_REQUIRES(",
          "1586:         context, saved_mean_or_pop_mean.NumElements() == num_channels,",
          "1587:         errors::InvalidArgument(\"reserve_space_1 must have the same number of \"",
          "1588:                                 \"elements as the channels of x, got \",",
          "1589:                                 scale.NumElements(), \" and \", num_channels));",
          "1590:     OP_REQUIRES(",
          "1591:         context, saved_maybe_inv_var_or_pop_var.NumElements() == num_channels,",
          "1592:         errors::InvalidArgument(\"reserve_space_2 must have the same number of \"",
          "1593:                                 \"elements as the channels of x, got \",",
          "1594:                                 scale.NumElements(), \" and \", num_channels));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/nn_fused_batchnorm_test.py||tensorflow/python/ops/nn_fused_batchnorm_test.py": [
          "File: tensorflow/python/ops/nn_fused_batchnorm_test.py -> tensorflow/python/ops/nn_fused_batchnorm_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: import numpy as np",
          "19: from tensorflow.python.framework import constant_op",
          "20: from tensorflow.python.framework import dtypes",
          "21: from tensorflow.python.framework import test_util",
          "22: from tensorflow.python.ops import array_ops",
          "23: from tensorflow.python.ops import gradient_checker",
          "24: from tensorflow.python.ops import gradients_impl",
          "25: from tensorflow.python.ops import math_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: from tensorflow.python.eager import context",
          "22: from tensorflow.python.framework import errors_impl",
          "25: from tensorflow.python.ops import gen_nn_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "694:     y_ref = np.maximum(y_ref, 0.)",
          "695:     self.assertAllClose(y_ref, y_val, atol=1e-3)",
          "698: if __name__ == '__main__':",
          "699:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "700:   def testEagerShapeErrors(self):",
          "701:     with context.eager_mode():",
          "702:       x = array_ops.ones((2, 2, 2, 2))",
          "703:       scale = array_ops.ones((3,))",
          "704:       offset = array_ops.ones((2,))",
          "705:       with self.assertRaisesRegex(",
          "706:           errors_impl.InvalidArgumentError,",
          "707:           'scale must have the same number of elements'):",
          "708:         nn_impl.fused_batch_norm(x, scale, offset)",
          "710:       x = array_ops.ones((2, 2, 2, 2))",
          "711:       scale = array_ops.ones((2,))",
          "712:       offset = array_ops.ones((3,))",
          "713:       with self.assertRaisesRegex(",
          "714:           errors_impl.InvalidArgumentError,",
          "715:           'offset must have the same number of elements'):",
          "716:         nn_impl.fused_batch_norm(x, scale, offset)",
          "718:       x = array_ops.ones((2, 2, 2, 2))",
          "719:       scale = array_ops.ones((2,))",
          "720:       offset = array_ops.ones((2,))",
          "721:       mean = array_ops.ones((0,))",
          "722:       variance = array_ops.ones((2,))",
          "723:       with self.assertRaisesRegex(",
          "724:           errors_impl.InvalidArgumentError,",
          "725:           'When is_training=false, mean must have the same number of elements'):",
          "726:         nn_impl.fused_batch_norm(",
          "727:             x, scale, offset, mean=mean, variance=variance, is_training=False)",
          "729:       x = array_ops.ones((2, 2, 2, 2))",
          "730:       scale = array_ops.ones((2,))",
          "731:       offset = array_ops.ones((2,))",
          "732:       mean = array_ops.ones((2,))",
          "733:       variance = array_ops.ones((0,))",
          "734:       with self.assertRaisesRegex(",
          "735:           errors_impl.InvalidArgumentError,",
          "736:           'When is_training=false, variance must have the same number of '",
          "737:           'elements'):",
          "738:         nn_impl.fused_batch_norm(",
          "739:             x, scale, offset, mean=mean, variance=variance, is_training=False)",
          "741:       x = array_ops.ones((2, 2, 2, 2))",
          "742:       scale = array_ops.ones((2,))",
          "743:       offset = array_ops.ones((2,))",
          "744:       mean = array_ops.ones((0,))",
          "745:       variance = array_ops.ones((2,))",
          "746:       with self.assertRaisesRegex(",
          "747:           errors_impl.InvalidArgumentError,",
          "748:           'When exponential_avg_factor != 1, mean must have the same number of '",
          "749:           'elements'):",
          "750:         nn_impl.fused_batch_norm(",
          "751:             x,",
          "752:             scale,",
          "753:             offset,",
          "754:             mean=mean,",
          "755:             variance=variance,",
          "756:             exponential_avg_factor=0.5)",
          "758:       x = array_ops.ones((2, 2, 2, 2))",
          "759:       scale = array_ops.ones((2,))",
          "760:       offset = array_ops.ones((2,))",
          "761:       mean = array_ops.ones((2,))",
          "762:       variance = array_ops.ones((0,))",
          "763:       with self.assertRaisesRegex(",
          "764:           errors_impl.InvalidArgumentError,",
          "765:           'When exponential_avg_factor != 1, variance must have the same '",
          "766:           'number of elements'):",
          "767:         nn_impl.fused_batch_norm(",
          "768:             x,",
          "769:             scale,",
          "770:             offset,",
          "771:             mean=mean,",
          "772:             variance=variance,",
          "773:             exponential_avg_factor=0.5)",
          "775:   def testEagerShapeGradErrors(self):",
          "776:     with context.eager_mode():",
          "777:       y_backprop = array_ops.ones((2, 2, 2, 3))",
          "778:       x = array_ops.ones((2, 2, 2, 2))",
          "779:       scale = array_ops.ones((2,))",
          "780:       reserve_space_1 = array_ops.ones((2,))",
          "781:       reserve_space_2 = array_ops.ones((2,))",
          "782:       with self.assertRaisesRegex(errors_impl.InvalidArgumentError,",
          "783:                                   'x and y_backprop must have same shape,'):",
          "784:         gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,",
          "785:                                             reserve_space_1, reserve_space_2)",
          "787:       y_backprop = array_ops.ones((2, 2, 2, 2))",
          "788:       x = array_ops.ones((2, 2, 2, 2))",
          "789:       scale = array_ops.ones((3,))",
          "790:       reserve_space_1 = array_ops.ones((2,))",
          "791:       reserve_space_2 = array_ops.ones((2,))",
          "792:       with self.assertRaisesRegex(",
          "793:           errors_impl.InvalidArgumentError,",
          "794:           'scale must have the same number of elements'):",
          "795:         gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,",
          "796:                                             reserve_space_1, reserve_space_2)",
          "798:       y_backprop = array_ops.ones((2, 2, 2, 2))",
          "799:       x = array_ops.ones((2, 2, 2, 2))",
          "800:       scale = array_ops.ones((2,))",
          "801:       reserve_space_1 = array_ops.ones((3,))",
          "802:       reserve_space_2 = array_ops.ones((2,))",
          "803:       with self.assertRaisesRegex(",
          "804:           errors_impl.InvalidArgumentError,",
          "805:           'reserve_space_1 must have the same number of elements'):",
          "806:         gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,",
          "807:                                             reserve_space_1, reserve_space_2)",
          "809:       y_backprop = array_ops.ones((2, 2, 2, 2))",
          "810:       x = array_ops.ones((2, 2, 2, 2))",
          "811:       scale = array_ops.ones((2,))",
          "812:       reserve_space_1 = array_ops.ones((2,))",
          "813:       reserve_space_2 = array_ops.ones((3,))",
          "814:       with self.assertRaisesRegex(",
          "815:           errors_impl.InvalidArgumentError,",
          "816:           'reserve_space_2 must have the same number of elements'):",
          "817:         gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,",
          "818:                                             reserve_space_1, reserve_space_2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "292b836b5112b9c4457fa474a8755e5bdde0f781",
      "candidate_info": {
        "commit_hash": "292b836b5112b9c4457fa474a8755e5bdde0f781",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/292b836b5112b9c4457fa474a8755e5bdde0f781",
        "files": [
          "tensorflow/core/kernels/fused_batch_norm_op.cc",
          "tensorflow/python/ops/nn_fused_batchnorm_test.py"
        ],
        "message": "Add shape checks to FusedBatchNorm kernels.\n\nPiperOrigin-RevId: 399755576\nChange-Id: If8049fde109cc33badb5509d174b9b95aee1ea5e",
        "before_after_code_files": [
          "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc",
          "tensorflow/python/ops/nn_fused_batchnorm_test.py||tensorflow/python/ops/nn_fused_batchnorm_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc": [
          "File: tensorflow/core/kernels/fused_batch_norm_op.cc -> tensorflow/core/kernels/fused_batch_norm_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1311:         errors::InvalidArgument(\"offset must have the same number of elements \"",
          "1312:                                 \"as the channels of x, got \",",
          "1313:                                 offset.NumElements(), \" and \", num_channels));",
          "1315:       OP_REQUIRES(context, estimated_mean.NumElements() == num_channels,",
          "1316:                   errors::InvalidArgument(",
          "1319:                       estimated_mean.NumElements(), \" and \", num_channels));",
          "1322:       OP_REQUIRES(context, estimated_variance.NumElements() == num_channels,",
          "1323:                   errors::InvalidArgument(",
          "1326:                       estimated_variance.NumElements(), \" and \", num_channels));",
          "1327:     }",
          "",
          "[Removed Lines]",
          "1314:     if (estimated_mean.NumElements() != 0) {",
          "1317:                       \"mean must be empty or have the same number of \"",
          "1318:                       \"elements as the channels of x, got \",",
          "1320:     }",
          "1321:     if (estimated_variance.NumElements() != 0) {",
          "1324:                       \"variance must be empty or have the same number of \"",
          "1325:                       \"elements as the channels of x, got \",",
          "",
          "[Added Lines]",
          "1314:     if (!is_training_ || exponential_avg_factor_ != 1.) {",
          "1315:       std::string prefix_msg = is_training_ ? \"When exponential_avg_factor != 1\"",
          "1316:                                             : \"When is_training=false\";",
          "1319:                       prefix_msg,",
          "1320:                       \", mean must have the same number \"",
          "1321:                       \"of elements as the channels of x, got \",",
          "1325:                       prefix_msg,",
          "1326:                       \", variance must have the same \"",
          "1327:                       \"number of elements as the channels of x, got \",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1472:                 errors::InvalidArgument(",
          "1473:                     \"saved variance must be 1-dimensional\",",
          "1474:                     saved_maybe_inv_var_or_pop_var.shape().DebugString()));",
          "1475:     bool use_reshape = (x.dims() == 5);",
          "1476:     auto x_shape = x.shape();",
          "1477:     TensorShape dest_shape;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1477:     OP_REQUIRES(",
          "1478:         context, x.shape() == y_backprop.shape(),",
          "1479:         errors::InvalidArgument(",
          "1480:             \"x and y_backprop must have same shape, but x has shape \",",
          "1481:             x.shape(), \" and y_backprop has shape \", y_backprop.shape()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1489:                   errors::InvalidArgument(\"Error during tensor copy.\"));",
          "1490:     }",
          "1492:     Tensor* x_backprop = nullptr;",
          "1493:     auto alloc_shape = use_reshape ? dest_shape : x_shape;",
          "1494:     OP_REQUIRES_OK(context,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1499:     const auto num_channels = GetTensorDim(x, tensor_format_, 'C');",
          "1500:     OP_REQUIRES(",
          "1501:         context, scale.NumElements() == num_channels,",
          "1502:         errors::InvalidArgument(\"scale must have the same number of elements \"",
          "1503:                                 \"as the channels of x, got \",",
          "1504:                                 scale.NumElements(), \" and \", num_channels));",
          "1505:     OP_REQUIRES(",
          "1506:         context, saved_mean_or_pop_mean.NumElements() == num_channels,",
          "1507:         errors::InvalidArgument(\"reserve_space_1 must have the same number of \"",
          "1508:                                 \"elements as the channels of x, got \",",
          "1509:                                 scale.NumElements(), \" and \", num_channels));",
          "1510:     OP_REQUIRES(",
          "1511:         context, saved_maybe_inv_var_or_pop_var.NumElements() == num_channels,",
          "1512:         errors::InvalidArgument(\"reserve_space_2 must have the same number of \"",
          "1513:                                 \"elements as the channels of x, got \",",
          "1514:                                 scale.NumElements(), \" and \", num_channels));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/nn_fused_batchnorm_test.py||tensorflow/python/ops/nn_fused_batchnorm_test.py": [
          "File: tensorflow/python/ops/nn_fused_batchnorm_test.py -> tensorflow/python/ops/nn_fused_batchnorm_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import numpy as np",
          "23: from tensorflow.python.framework import constant_op",
          "24: from tensorflow.python.framework import dtypes",
          "25: from tensorflow.python.framework import test_util",
          "26: from tensorflow.python.ops import array_ops",
          "27: from tensorflow.python.ops import gradient_checker",
          "28: from tensorflow.python.ops import gradients_impl",
          "29: from tensorflow.python.ops import math_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from tensorflow.python.eager import context",
          "26: from tensorflow.python.framework import errors_impl",
          "29: from tensorflow.python.ops import gen_nn_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "698:     y_ref = np.maximum(y_ref, 0.)",
          "699:     self.assertAllClose(y_ref, y_val, atol=1e-3)",
          "702: if __name__ == '__main__':",
          "703:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:   def testEagerShapeErrors(self):",
          "705:     with context.eager_mode():",
          "706:       x = array_ops.ones((2, 2, 2, 2))",
          "707:       scale = array_ops.ones((3,))",
          "708:       offset = array_ops.ones((2,))",
          "709:       with self.assertRaisesRegex(",
          "710:           errors_impl.InvalidArgumentError,",
          "711:           'scale must have the same number of elements'):",
          "712:         nn_impl.fused_batch_norm(x, scale, offset)",
          "714:       x = array_ops.ones((2, 2, 2, 2))",
          "715:       scale = array_ops.ones((2,))",
          "716:       offset = array_ops.ones((3,))",
          "717:       with self.assertRaisesRegex(",
          "718:           errors_impl.InvalidArgumentError,",
          "719:           'offset must have the same number of elements'):",
          "720:         nn_impl.fused_batch_norm(x, scale, offset)",
          "722:       x = array_ops.ones((2, 2, 2, 2))",
          "723:       scale = array_ops.ones((2,))",
          "724:       offset = array_ops.ones((2,))",
          "725:       mean = array_ops.ones((0,))",
          "726:       variance = array_ops.ones((2,))",
          "727:       with self.assertRaisesRegex(",
          "728:           errors_impl.InvalidArgumentError,",
          "729:           'When is_training=false, mean must have the same number of elements'):",
          "730:         nn_impl.fused_batch_norm(",
          "731:             x, scale, offset, mean=mean, variance=variance, is_training=False)",
          "733:       x = array_ops.ones((2, 2, 2, 2))",
          "734:       scale = array_ops.ones((2,))",
          "735:       offset = array_ops.ones((2,))",
          "736:       mean = array_ops.ones((2,))",
          "737:       variance = array_ops.ones((0,))",
          "738:       with self.assertRaisesRegex(",
          "739:           errors_impl.InvalidArgumentError,",
          "740:           'When is_training=false, variance must have the same number of '",
          "741:           'elements'):",
          "742:         nn_impl.fused_batch_norm(",
          "743:             x, scale, offset, mean=mean, variance=variance, is_training=False)",
          "745:       x = array_ops.ones((2, 2, 2, 2))",
          "746:       scale = array_ops.ones((2,))",
          "747:       offset = array_ops.ones((2,))",
          "748:       mean = array_ops.ones((0,))",
          "749:       variance = array_ops.ones((2,))",
          "750:       with self.assertRaisesRegex(",
          "751:           errors_impl.InvalidArgumentError,",
          "752:           'When exponential_avg_factor != 1, mean must have the same number of '",
          "753:           'elements'):",
          "754:         nn_impl.fused_batch_norm(",
          "755:             x,",
          "756:             scale,",
          "757:             offset,",
          "758:             mean=mean,",
          "759:             variance=variance,",
          "760:             exponential_avg_factor=0.5)",
          "762:       x = array_ops.ones((2, 2, 2, 2))",
          "763:       scale = array_ops.ones((2,))",
          "764:       offset = array_ops.ones((2,))",
          "765:       mean = array_ops.ones((2,))",
          "766:       variance = array_ops.ones((0,))",
          "767:       with self.assertRaisesRegex(",
          "768:           errors_impl.InvalidArgumentError,",
          "769:           'When exponential_avg_factor != 1, variance must have the same '",
          "770:           'number of elements'):",
          "771:         nn_impl.fused_batch_norm(",
          "772:             x,",
          "773:             scale,",
          "774:             offset,",
          "775:             mean=mean,",
          "776:             variance=variance,",
          "777:             exponential_avg_factor=0.5)",
          "779:   def testEagerShapeGradErrors(self):",
          "780:     with context.eager_mode():",
          "781:       y_backprop = array_ops.ones((2, 2, 2, 3))",
          "782:       x = array_ops.ones((2, 2, 2, 2))",
          "783:       scale = array_ops.ones((2,))",
          "784:       reserve_space_1 = array_ops.ones((2,))",
          "785:       reserve_space_2 = array_ops.ones((2,))",
          "786:       with self.assertRaisesRegex(errors_impl.InvalidArgumentError,",
          "787:                                   'x and y_backprop must have same shape,'):",
          "788:         gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,",
          "789:                                             reserve_space_1, reserve_space_2)",
          "791:       y_backprop = array_ops.ones((2, 2, 2, 2))",
          "792:       x = array_ops.ones((2, 2, 2, 2))",
          "793:       scale = array_ops.ones((3,))",
          "794:       reserve_space_1 = array_ops.ones((2,))",
          "795:       reserve_space_2 = array_ops.ones((2,))",
          "796:       with self.assertRaisesRegex(",
          "797:           errors_impl.InvalidArgumentError,",
          "798:           'scale must have the same number of elements'):",
          "799:         gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,",
          "800:                                             reserve_space_1, reserve_space_2)",
          "802:       y_backprop = array_ops.ones((2, 2, 2, 2))",
          "803:       x = array_ops.ones((2, 2, 2, 2))",
          "804:       scale = array_ops.ones((2,))",
          "805:       reserve_space_1 = array_ops.ones((3,))",
          "806:       reserve_space_2 = array_ops.ones((2,))",
          "807:       with self.assertRaisesRegex(",
          "808:           errors_impl.InvalidArgumentError,",
          "809:           'reserve_space_1 must have the same number of elements'):",
          "810:         gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,",
          "811:                                             reserve_space_1, reserve_space_2)",
          "813:       y_backprop = array_ops.ones((2, 2, 2, 2))",
          "814:       x = array_ops.ones((2, 2, 2, 2))",
          "815:       scale = array_ops.ones((2,))",
          "816:       reserve_space_1 = array_ops.ones((2,))",
          "817:       reserve_space_2 = array_ops.ones((3,))",
          "818:       with self.assertRaisesRegex(",
          "819:           errors_impl.InvalidArgumentError,",
          "820:           'reserve_space_2 must have the same number of elements'):",
          "821:         gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,",
          "822:                                             reserve_space_1, reserve_space_2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2356ebad027f660ce4d81765be81c220ef71b621",
      "candidate_info": {
        "commit_hash": "2356ebad027f660ce4d81765be81c220ef71b621",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2356ebad027f660ce4d81765be81c220ef71b621",
        "files": [
          "tensorflow/core/kernels/fused_batch_norm_op.cc",
          "tensorflow/python/ops/nn_fused_batchnorm_test.py"
        ],
        "message": "Add shape checks to FusedBatchNorm kernels.\n\nPiperOrigin-RevId: 399755576\nChange-Id: If8049fde109cc33badb5509d174b9b95aee1ea5e",
        "before_after_code_files": [
          "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc",
          "tensorflow/python/ops/nn_fused_batchnorm_test.py||tensorflow/python/ops/nn_fused_batchnorm_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc": [
          "File: tensorflow/core/kernels/fused_batch_norm_op.cc -> tensorflow/core/kernels/fused_batch_norm_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1340:         errors::InvalidArgument(\"offset must have the same number of elements \"",
          "1341:                                 \"as the channels of x, got \",",
          "1342:                                 offset.NumElements(), \" and \", num_channels));",
          "1344:       OP_REQUIRES(context, estimated_mean.NumElements() == num_channels,",
          "1345:                   errors::InvalidArgument(",
          "1348:                       estimated_mean.NumElements(), \" and \", num_channels));",
          "1351:       OP_REQUIRES(context, estimated_variance.NumElements() == num_channels,",
          "1352:                   errors::InvalidArgument(",
          "1355:                       estimated_variance.NumElements(), \" and \", num_channels));",
          "1356:     }",
          "",
          "[Removed Lines]",
          "1343:     if (estimated_mean.NumElements() != 0) {",
          "1346:                       \"mean must be empty or have the same number of \"",
          "1347:                       \"elements as the channels of x, got \",",
          "1349:     }",
          "1350:     if (estimated_variance.NumElements() != 0) {",
          "1353:                       \"variance must be empty or have the same number of \"",
          "1354:                       \"elements as the channels of x, got \",",
          "",
          "[Added Lines]",
          "1343:     if (!is_training_ || exponential_avg_factor_ != 1.) {",
          "1344:       std::string prefix_msg = is_training_ ? \"When exponential_avg_factor != 1\"",
          "1345:                                             : \"When is_training=false\";",
          "1348:                       prefix_msg,",
          "1349:                       \", mean must have the same number \"",
          "1350:                       \"of elements as the channels of x, got \",",
          "1354:                       prefix_msg,",
          "1355:                       \", variance must have the same \"",
          "1356:                       \"number of elements as the channels of x, got \",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1543:                 errors::InvalidArgument(",
          "1544:                     \"saved variance must be 1-dimensional\",",
          "1545:                     saved_maybe_inv_var_or_pop_var.shape().DebugString()));",
          "1546:     if (use_activation) {",
          "1547:       OP_REQUIRES(",
          "1548:           context, x.dim_size(3) % 4 == 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1548:     OP_REQUIRES(",
          "1549:         context, x.shape() == y_backprop.shape(),",
          "1550:         errors::InvalidArgument(",
          "1551:             \"x and y_backprop must have same shape, but x has shape \",",
          "1552:             x.shape(), \" and y_backprop has shape \", y_backprop.shape()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1569:                   errors::InvalidArgument(\"Error during tensor copy.\"));",
          "1570:     }",
          "1572:     Tensor* x_backprop = nullptr;",
          "1573:     auto alloc_shape = use_reshape ? dest_shape : x_shape;",
          "1574:     OP_REQUIRES_OK(context,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1579:     const auto num_channels = GetTensorDim(x, tensor_format_, 'C');",
          "1580:     OP_REQUIRES(",
          "1581:         context, scale.NumElements() == num_channels,",
          "1582:         errors::InvalidArgument(\"scale must have the same number of elements \"",
          "1583:                                 \"as the channels of x, got \",",
          "1584:                                 scale.NumElements(), \" and \", num_channels));",
          "1585:     OP_REQUIRES(",
          "1586:         context, saved_mean_or_pop_mean.NumElements() == num_channels,",
          "1587:         errors::InvalidArgument(\"reserve_space_1 must have the same number of \"",
          "1588:                                 \"elements as the channels of x, got \",",
          "1589:                                 scale.NumElements(), \" and \", num_channels));",
          "1590:     OP_REQUIRES(",
          "1591:         context, saved_maybe_inv_var_or_pop_var.NumElements() == num_channels,",
          "1592:         errors::InvalidArgument(\"reserve_space_2 must have the same number of \"",
          "1593:                                 \"elements as the channels of x, got \",",
          "1594:                                 scale.NumElements(), \" and \", num_channels));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/nn_fused_batchnorm_test.py||tensorflow/python/ops/nn_fused_batchnorm_test.py": [
          "File: tensorflow/python/ops/nn_fused_batchnorm_test.py -> tensorflow/python/ops/nn_fused_batchnorm_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: import numpy as np",
          "23: from tensorflow.python.framework import constant_op",
          "24: from tensorflow.python.framework import dtypes",
          "25: from tensorflow.python.framework import test_util",
          "26: from tensorflow.python.ops import array_ops",
          "27: from tensorflow.python.ops import gradient_checker",
          "28: from tensorflow.python.ops import gradients_impl",
          "29: from tensorflow.python.ops import math_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: from tensorflow.python.eager import context",
          "26: from tensorflow.python.framework import errors_impl",
          "29: from tensorflow.python.ops import gen_nn_ops",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "698:     y_ref = np.maximum(y_ref, 0.)",
          "699:     self.assertAllClose(y_ref, y_val, atol=1e-3)",
          "702: if __name__ == '__main__':",
          "703:   test.main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "704:   def testEagerShapeErrors(self):",
          "705:     with context.eager_mode():",
          "706:       x = array_ops.ones((2, 2, 2, 2))",
          "707:       scale = array_ops.ones((3,))",
          "708:       offset = array_ops.ones((2,))",
          "709:       with self.assertRaisesRegex(",
          "710:           errors_impl.InvalidArgumentError,",
          "711:           'scale must have the same number of elements'):",
          "712:         nn_impl.fused_batch_norm(x, scale, offset)",
          "714:       x = array_ops.ones((2, 2, 2, 2))",
          "715:       scale = array_ops.ones((2,))",
          "716:       offset = array_ops.ones((3,))",
          "717:       with self.assertRaisesRegex(",
          "718:           errors_impl.InvalidArgumentError,",
          "719:           'offset must have the same number of elements'):",
          "720:         nn_impl.fused_batch_norm(x, scale, offset)",
          "722:       x = array_ops.ones((2, 2, 2, 2))",
          "723:       scale = array_ops.ones((2,))",
          "724:       offset = array_ops.ones((2,))",
          "725:       mean = array_ops.ones((0,))",
          "726:       variance = array_ops.ones((2,))",
          "727:       with self.assertRaisesRegex(",
          "728:           errors_impl.InvalidArgumentError,",
          "729:           'When is_training=false, mean must have the same number of elements'):",
          "730:         nn_impl.fused_batch_norm(",
          "731:             x, scale, offset, mean=mean, variance=variance, is_training=False)",
          "733:       x = array_ops.ones((2, 2, 2, 2))",
          "734:       scale = array_ops.ones((2,))",
          "735:       offset = array_ops.ones((2,))",
          "736:       mean = array_ops.ones((2,))",
          "737:       variance = array_ops.ones((0,))",
          "738:       with self.assertRaisesRegex(",
          "739:           errors_impl.InvalidArgumentError,",
          "740:           'When is_training=false, variance must have the same number of '",
          "741:           'elements'):",
          "742:         nn_impl.fused_batch_norm(",
          "743:             x, scale, offset, mean=mean, variance=variance, is_training=False)",
          "745:       x = array_ops.ones((2, 2, 2, 2))",
          "746:       scale = array_ops.ones((2,))",
          "747:       offset = array_ops.ones((2,))",
          "748:       mean = array_ops.ones((0,))",
          "749:       variance = array_ops.ones((2,))",
          "750:       with self.assertRaisesRegex(",
          "751:           errors_impl.InvalidArgumentError,",
          "752:           'When exponential_avg_factor != 1, mean must have the same number of '",
          "753:           'elements'):",
          "754:         nn_impl.fused_batch_norm(",
          "755:             x,",
          "756:             scale,",
          "757:             offset,",
          "758:             mean=mean,",
          "759:             variance=variance,",
          "760:             exponential_avg_factor=0.5)",
          "762:       x = array_ops.ones((2, 2, 2, 2))",
          "763:       scale = array_ops.ones((2,))",
          "764:       offset = array_ops.ones((2,))",
          "765:       mean = array_ops.ones((2,))",
          "766:       variance = array_ops.ones((0,))",
          "767:       with self.assertRaisesRegex(",
          "768:           errors_impl.InvalidArgumentError,",
          "769:           'When exponential_avg_factor != 1, variance must have the same '",
          "770:           'number of elements'):",
          "771:         nn_impl.fused_batch_norm(",
          "772:             x,",
          "773:             scale,",
          "774:             offset,",
          "775:             mean=mean,",
          "776:             variance=variance,",
          "777:             exponential_avg_factor=0.5)",
          "779:   def testEagerShapeGradErrors(self):",
          "780:     with context.eager_mode():",
          "781:       y_backprop = array_ops.ones((2, 2, 2, 3))",
          "782:       x = array_ops.ones((2, 2, 2, 2))",
          "783:       scale = array_ops.ones((2,))",
          "784:       reserve_space_1 = array_ops.ones((2,))",
          "785:       reserve_space_2 = array_ops.ones((2,))",
          "786:       with self.assertRaisesRegex(errors_impl.InvalidArgumentError,",
          "787:                                   'x and y_backprop must have same shape,'):",
          "788:         gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,",
          "789:                                             reserve_space_1, reserve_space_2)",
          "791:       y_backprop = array_ops.ones((2, 2, 2, 2))",
          "792:       x = array_ops.ones((2, 2, 2, 2))",
          "793:       scale = array_ops.ones((3,))",
          "794:       reserve_space_1 = array_ops.ones((2,))",
          "795:       reserve_space_2 = array_ops.ones((2,))",
          "796:       with self.assertRaisesRegex(",
          "797:           errors_impl.InvalidArgumentError,",
          "798:           'scale must have the same number of elements'):",
          "799:         gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,",
          "800:                                             reserve_space_1, reserve_space_2)",
          "802:       y_backprop = array_ops.ones((2, 2, 2, 2))",
          "803:       x = array_ops.ones((2, 2, 2, 2))",
          "804:       scale = array_ops.ones((2,))",
          "805:       reserve_space_1 = array_ops.ones((3,))",
          "806:       reserve_space_2 = array_ops.ones((2,))",
          "807:       with self.assertRaisesRegex(",
          "808:           errors_impl.InvalidArgumentError,",
          "809:           'reserve_space_1 must have the same number of elements'):",
          "810:         gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,",
          "811:                                             reserve_space_1, reserve_space_2)",
          "813:       y_backprop = array_ops.ones((2, 2, 2, 2))",
          "814:       x = array_ops.ones((2, 2, 2, 2))",
          "815:       scale = array_ops.ones((2,))",
          "816:       reserve_space_1 = array_ops.ones((2,))",
          "817:       reserve_space_2 = array_ops.ones((3,))",
          "818:       with self.assertRaisesRegex(",
          "819:           errors_impl.InvalidArgumentError,",
          "820:           'reserve_space_2 must have the same number of elements'):",
          "821:         gen_nn_ops.fused_batch_norm_grad_v2(y_backprop, x, scale,",
          "822:                                             reserve_space_1, reserve_space_2)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01f37310cac1db8f46a2e481a24d7a4d0f9f4141",
      "candidate_info": {
        "commit_hash": "01f37310cac1db8f46a2e481a24d7a4d0f9f4141",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/01f37310cac1db8f46a2e481a24d7a4d0f9f4141",
        "files": [
          "tensorflow/core/kernels/fused_batch_norm_op.cc"
        ],
        "message": "Add missing valuidation to FusedBatchNorm.\n\nPiperOrigin-RevId: 372460336\nChange-Id: Ic8c4e4de67c58a741bd87f2e182bed07247d1126",
        "before_after_code_files": [
          "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc": [
          "File: tensorflow/core/kernels/fused_batch_norm_op.cc -> tensorflow/core/kernels/fused_batch_norm_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1282:                   errors::InvalidArgument(\"Error during tensor copy.\"));",
          "1283:     }",
          "1285:     if (has_side_input_) {",
          "1286:       OP_REQUIRES(context, side_input->shape() == x.shape(),",
          "1287:                   errors::InvalidArgument(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1285:     const auto num_channels = GetTensorDim(x, tensor_format_, 'C');",
          "1286:     OP_REQUIRES(",
          "1287:         context, scale.NumElements() == num_channels,",
          "1288:         errors::InvalidArgument(\"scale must have the same number of elements \"",
          "1289:                                 \"as the channels of x, got \",",
          "1290:                                 scale.NumElements(), \" and \", num_channels));",
          "1291:     OP_REQUIRES(",
          "1292:         context, offset.NumElements() == num_channels,",
          "1293:         errors::InvalidArgument(\"offset must have the same number of elements \"",
          "1294:                                 \"as the channels of x, got \",",
          "1295:                                 offset.NumElements(), \" and \", num_channels));",
          "1296:     if (estimated_mean.NumElements() != 0) {",
          "1297:       OP_REQUIRES(context, estimated_mean.NumElements() == num_channels,",
          "1298:                   errors::InvalidArgument(",
          "1299:                       \"mean must be empty or have the same number of \"",
          "1300:                       \"elements as the channels of x, got \",",
          "1301:                       estimated_mean.NumElements(), \" and \", num_channels));",
          "1302:     }",
          "1303:     if (estimated_variance.NumElements() != 0) {",
          "1304:       OP_REQUIRES(context, estimated_variance.NumElements() == num_channels,",
          "1305:                   errors::InvalidArgument(",
          "1306:                       \"variance must be empty or have the same number of \"",
          "1307:                       \"elements as the channels of x, got \",",
          "1308:                       estimated_variance.NumElements(), \" and \", num_channels));",
          "1309:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1296:       OP_REQUIRES(",
          "1298:           errors::InvalidArgument(\"FusedBatchNorm with activation requires \"",
          "1299:                                   \"channel dimension to be a multiple of 4.\"));",
          "1300:     }",
          "",
          "[Removed Lines]",
          "1297:           context, !is_training_ || x.dim_size(3) % 4 == 0,",
          "",
          "[Added Lines]",
          "1323:           context, !is_training_ || num_channels % 4 == 0,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "882c7ff3054b558b205e303d954d5a0efddd549d",
      "candidate_info": {
        "commit_hash": "882c7ff3054b558b205e303d954d5a0efddd549d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/882c7ff3054b558b205e303d954d5a0efddd549d",
        "files": [
          "tensorflow/core/kernels/fused_batch_norm_op.cc"
        ],
        "message": "Cherry pick 2.2 Add missing valuidation to FusedBatchNorm",
        "before_after_code_files": [
          "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/fused_batch_norm_op.cc||tensorflow/core/kernels/fused_batch_norm_op.cc": [
          "File: tensorflow/core/kernels/fused_batch_norm_op.cc -> tensorflow/core/kernels/fused_batch_norm_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1267:         context, estimated_variance.dims() == 1,",
          "1268:         errors::InvalidArgument(\"estimated_variance must be 1-dimensional\",",
          "1269:                                 estimated_variance.shape().DebugString()));",
          "1270:     if (has_side_input_) {",
          "1271:       OP_REQUIRES(context, side_input->shape() == x.shape(),",
          "1272:                   errors::InvalidArgument(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1271:     const auto num_channels = GetTensorDim(x, tensor_format_, 'C');",
          "1272:     OP_REQUIRES(",
          "1273:         context, scale.NumElements() == num_channels,",
          "1274:         errors::InvalidArgument(\"scale must have the same number of elements \"",
          "1275:                                 \"as the channels of x, got \",",
          "1276:                                 scale.NumElements(), \" and \", num_channels));",
          "1277:     OP_REQUIRES(",
          "1278:         context, offset.NumElements() == num_channels,",
          "1279:         errors::InvalidArgument(\"offset must have the same number of elements \"",
          "1280:                                 \"as the channels of x, got \",",
          "1281:                                 offset.NumElements(), \" and \", num_channels));",
          "1282:     if (estimated_mean.NumElements() != 0) {",
          "1283:       OP_REQUIRES(context, estimated_mean.NumElements() == num_channels,",
          "1284:                   errors::InvalidArgument(",
          "1285:                       \"mean must be empty or have the same number of \"",
          "1286:                       \"elements as the channels of x, got \",",
          "1287:                       estimated_mean.NumElements(), \" and \", num_channels));",
          "1288:     }",
          "1289:     if (estimated_variance.NumElements() != 0) {",
          "1290:       OP_REQUIRES(context, estimated_variance.NumElements() == num_channels,",
          "1291:                   errors::InvalidArgument(",
          "1292:                       \"variance must be empty or have the same number of \"",
          "1293:                       \"elements as the channels of x, got \",",
          "1294:                       estimated_variance.NumElements(), \" and \", num_channels));",
          "1295:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1281:       OP_REQUIRES(",
          "1283:           errors::InvalidArgument(\"FusedBatchNorm with activation requires \"",
          "1284:                                   \"channel dimension to be a multiple of 4.\"));",
          "1285:     }",
          "",
          "[Removed Lines]",
          "1282:           context, !is_training_ || x.dim_size(3) % 4 == 0,",
          "",
          "[Added Lines]",
          "1309:           context, !is_training_ || num_channels % 4 == 0,",
          "",
          "---------------"
        ]
      }
    }
  ]
}