{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "029e1273b8bca638ac586ffcba76aa220368cd81",
      "candidate_info": {
        "commit_hash": "029e1273b8bca638ac586ffcba76aa220368cd81",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/029e1273b8bca638ac586ffcba76aa220368cd81",
        "files": [
          "include/uv-unix.h"
        ],
        "message": "unix: define NI_MAXHOST and NI_MAXSERV if needed\n\nOSX only exposes them if _POSIX_C_SOURCE is not defined, for instance.",
        "before_after_code_files": [
          "include/uv-unix.h||include/uv-unix.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: # include \"uv-bsd.h\"",
          "56: #endif",
          "58: #ifndef UV_IO_PRIVATE_PLATFORM_FIELDS",
          "60: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: #ifndef NI_MAXHOST",
          "59: # define NI_MAXHOST 1025",
          "60: #endif",
          "62: #ifndef NI_MAXSERV",
          "63: # define NI_MAXSERV 32",
          "64: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "780d8ad8e58c675dc60f5b73ea22a203760da2f2",
      "candidate_info": {
        "commit_hash": "780d8ad8e58c675dc60f5b73ea22a203760da2f2",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/780d8ad8e58c675dc60f5b73ea22a203760da2f2",
        "files": [
          "src/unix/linux-core.c",
          "test/test-list.h",
          "test/test-spawn.c"
        ],
        "message": "linux: always deregister closing fds from epoll\n\nIf the same file description is open in two different processes, then\nclosing the file descriptor is not sufficient to deregister it from the\nepoll instance (as described in epoll(7)), resulting in spurious events\nthat cause the event loop to spin repeatedly. So always explicitly\nderegister it.\n\nFixes #1099.",
        "before_after_code_files": [
          "src/unix/linux-core.c||src/unix/linux-core.c",
          "test/test-list.h||test/test-list.h",
          "test/test-spawn.c||test/test-spawn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/linux-core.c||src/unix/linux-core.c": [
          "File: src/unix/linux-core.c -> src/unix/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: void uv__platform_invalidate_fd(uv_loop_t* loop, int fd) {",
          "109:   struct uv__epoll_event* events;",
          "110:   uintptr_t i;",
          "111:   uintptr_t nfds;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110:   struct uv__epoll_event dummy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "115:   events = (struct uv__epoll_event*) loop->watchers[loop->nwatchers];",
          "116:   nfds = (uintptr_t) loop->watchers[loop->nwatchers + 1];",
          "124: }",
          "",
          "[Removed Lines]",
          "117:   if (events == NULL)",
          "118:     return;",
          "121:   for (i = 0; i < nfds; i++)",
          "122:     if ((int) events[i].data == fd)",
          "123:       events[i].data = -1;",
          "",
          "[Added Lines]",
          "118:   if (events != NULL)",
          "120:     for (i = 0; i < nfds; i++)",
          "121:       if ((int) events[i].data == fd)",
          "122:         events[i].data = -1;",
          "130:   if (loop->backend_fd >= 0)",
          "131:     uv__epoll_ctl(loop->backend_fd, UV__EPOLL_CTL_DEL, fd, &dummy);",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "240: TEST_DECLARE   (we_get_signal)",
          "241: TEST_DECLARE   (we_get_signals)",
          "242: TEST_DECLARE   (signal_multiple_loops)",
          "243: #endif",
          "244: #ifdef __APPLE__",
          "245: TEST_DECLARE   (osx_select)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243: TEST_DECLARE   (closed_fd_events)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "484:   TEST_ENTRY  (we_get_signal)",
          "485:   TEST_ENTRY  (we_get_signals)",
          "486:   TEST_ENTRY  (signal_multiple_loops)",
          "487: #endif",
          "489: #ifdef __APPLE__",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "488:   TEST_ENTRY  (closed_fd_events)",
          "",
          "---------------"
        ],
        "test/test-spawn.c||test/test-spawn.c": [
          "File: test/test-spawn.c -> test/test-spawn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: static size_t exepath_size = 1024;",
          "41: static char* args[3];",
          "42: static int no_term_signal;",
          "44: #define OUTPUT_SIZE 1024",
          "45: static char output[OUTPUT_SIZE];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: static int timer_counter;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118: }",
          "121: static void write_cb(uv_write_t* req, int status) {",
          "122:   ASSERT(status == 0);",
          "123:   uv_close((uv_handle_t*)req->handle, close_cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: static void on_read_once(uv_stream_t* tcp, ssize_t nread, const uv_buf_t* buf) {",
          "123:   uv_read_stop(tcp);",
          "124:   on_read(tcp, nread, buf);",
          "125: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "145: }",
          "148: TEST_IMPL(spawn_fails) {",
          "149:   int r;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155: static void timer_counter_cb(uv_timer_t* handle, int status) {",
          "156:   ++timer_counter;",
          "157: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1087:   return 0;",
          "1088: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1104: #ifndef _WIN32",
          "1105: TEST_IMPL(closed_fd_events) {",
          "1106:   uv_stdio_container_t stdio[3] = {",
          "1107:     { UV_INHERIT_FD },",
          "1108:     { UV_IGNORE },",
          "1109:     { UV_IGNORE }",
          "1110:   };",
          "1111:   uv_pipe_t pipe_handle;",
          "1112:   int fd[2];",
          "1115:   ASSERT(0 == pipe(fd));",
          "1116:   ASSERT(0 == fcntl(fd[0], F_SETFL, O_NONBLOCK));",
          "1119:   init_process_options(\"spawn_helper4\", exit_cb);",
          "1120:   options.stdio_count = 3;",
          "1121:   options.stdio = stdio;",
          "1122:   stdio[0].data.fd = fd[0];",
          "1124:   ASSERT(0 == uv_spawn(uv_default_loop(), &process, &options));",
          "1125:   uv_unref((uv_handle_t*) &process);",
          "1128:   ASSERT(0 == uv_pipe_init(uv_default_loop(), &pipe_handle, 0));",
          "1129:   ASSERT(0 == uv_pipe_open(&pipe_handle, fd[0]));",
          "1130:   fd[0] = -1;",
          "1132:   ASSERT(0 == uv_read_start((uv_stream_t*) &pipe_handle, on_alloc, on_read_once));",
          "1134:   ASSERT(1 == write(fd[1], \"\", 1));",
          "1136:   ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));",
          "1139:   ASSERT(output_used == 1);",
          "1142:   uv_close((uv_handle_t*) &pipe_handle, close_cb);",
          "1144:   ASSERT(1 == write(fd[1], \"\", 1));",
          "1146:   ASSERT(0 == uv_timer_init(uv_default_loop(), &timer));",
          "1147:   ASSERT(0 == uv_timer_start(&timer, timer_counter_cb, 10, 0));",
          "1150:   if (1 == uv_run(uv_default_loop(), UV_RUN_ONCE))",
          "1152:     ASSERT(0 == uv_run(uv_default_loop(), UV_RUN_ONCE));",
          "1154:   ASSERT(timer_counter == 1);",
          "1157:   ASSERT(0 == uv_process_kill(&process, /* SIGTERM */ 15));",
          "1158:   ASSERT(0 == close(fd[1]));",
          "1160:   MAKE_VALGRIND_HAPPY();",
          "1161:   return 0;",
          "1162: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "636b108d3780006a5dbed14b48bb9acfa3d61957",
      "candidate_info": {
        "commit_hash": "636b108d3780006a5dbed14b48bb9acfa3d61957",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/636b108d3780006a5dbed14b48bb9acfa3d61957",
        "files": [
          "src/win/core.c"
        ],
        "message": "windows: disable CRT debug handler on MinGW32\n\nWe cannot actually use it because the header is not present, so disable\nit. On MinGW-w64 it does work though.",
        "before_after_code_files": [
          "src/win/core.c||src/win/core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <stdio.h>",
          "27: #include <stdlib.h>",
          "28: #include <string.h>",
          "29: #include <crtdbg.h>",
          "31: #include \"uv.h\"",
          "32: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #if defined(_MSC_VER) || defined(__MINGW64_VERSION_MAJOR)",
          "31: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42: static uv_once_t uv_default_loop_init_guard_ = UV_ONCE_INIT;",
          "",
          "[Removed Lines]",
          "45: #if defined(_DEBUG)",
          "",
          "[Added Lines]",
          "47: #if defined(_DEBUG) && (defined(_MSC_VER) || defined(__MINGW64_VERSION_MAJOR))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:   return TRUE;",
          "67: }",
          "68: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: #else",
          "71: UV_THREAD_LOCAL int uv__crt_assert_enabled = FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:   _CrtSetReportHook(uv__crt_dbg_report_handler);",
          "96: #endif",
          "",
          "[Removed Lines]",
          "94: #if defined(_DEBUG) && !defined(__MINGW32__)",
          "",
          "[Added Lines]",
          "98: #if defined(_DEBUG) && (defined(_MSC_VER) || defined(__MINGW64_VERSION_MAJOR))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb5140023b109aa9bb6b97d1bebc9f251b8195ac",
      "candidate_info": {
        "commit_hash": "cb5140023b109aa9bb6b97d1bebc9f251b8195ac",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/cb5140023b109aa9bb6b97d1bebc9f251b8195ac",
        "files": [
          ".gitignore",
          "Makefile.am",
          "configure.ac",
          "m4/.gitignore",
          "m4/dtrace.m4",
          "src/unix/core.c",
          "src/unix/internal.h",
          "uv.gyp"
        ],
        "message": "build: remove dtrace probes\n\nThe existing probes, all two of them, cause a great deal of pain for\npeople trying to build libuv on Linux because of SystemTap's dtrace(1)\nutilitity not understanding the -xnolibs flag.\n\nWe could hack around that but it's easier to just remove the probes:\nthey are largely useless and unused while still needing a lot of\nsupporting infrastructure.  This commit removes 200 lines of code\nand configuration.\n\nRefs joyent/libuv#1478.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "m4/dtrace.m4||m4/dtrace.m4",
          "src/unix/core.c||src/unix/core.c",
          "src/unix/internal.h||src/unix/internal.h",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "307: libuv_la_SOURCES += src/unix/sunos.c",
          "308: endif",
          "325: if HAVE_PKG_CONFIG",
          "326: pkgconfigdir = $(libdir)/pkgconfig",
          "327: pkgconfig_DATA = @PACKAGE_NAME@.pc",
          "328: endif",
          "",
          "[Removed Lines]",
          "310: if HAVE_DTRACE",
          "311: BUILT_SOURCES = include/uv-dtrace.h",
          "312: CLEANFILES += include/uv-dtrace.h",
          "313: if FREEBSD",
          "314: libuv_la_LDFLAGS += -lelf",
          "315: endif",
          "316: endif",
          "318: if DTRACE_NEEDS_OBJECTS",
          "319: libuv_la_SOURCES += src/unix/uv-dtrace.d",
          "320: libuv_la_DEPENDENCIES = src/unix/uv-dtrace.o",
          "321: libuv_la_LIBADD = uv-dtrace.lo",
          "322: CLEANFILES += src/unix/uv-dtrace.o src/unix/uv-dtrace.lo",
          "323: endif",
          "330: if HAVE_DTRACE",
          "331: include/uv-dtrace.h: src/unix/uv-dtrace.d",
          "332:  $(AM_V_GEN)$(DTRACE) $(DTRACEFLAGS) -h -xnolibs -s $< -o $(top_srcdir)/$@",
          "333: endif",
          "335: if DTRACE_NEEDS_OBJECTS",
          "336: SUFFIXES = .d",
          "338: src/unix/uv-dtrace.o: src/unix/uv-dtrace.d ${libuv_la_OBJECTS}",
          "340: # It's ok to specify the output here, because we have 1 .d file, and we process",
          "341: # every created .o, most projects don't need to include more than one .d",
          "342: .d.o:",
          "343:  $(AM_V_GEN)$(DTRACE) $(DTRACEFLAGS) -G -o $(top_builddir)/uv-dtrace.o -s $< \\",
          "344:   `find ${top_builddir}/src -name \"*.o\"`",
          "345:  $(AM_V_GEN)printf %s\\\\n \\",
          "346:   '# ${top_builddir}/uv-dtrace.lo - a libtool object file' \\",
          "347:   '# Generated by libtool (GNU libtool) 2.4' \\",
          "348:   '# libtool wants a .lo not a .o' \\",
          "349:   \"pic_object='uv-dtrace.o'\" \\",
          "350:   \"non_pic_object='uv-dtrace.o'\" \\",
          "351:  > ${top_builddir}/uv-dtrace.lo",
          "352: endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: AM_CONDITIONAL([OPENBSD],  [AS_CASE([$host_os],[openbsd*],      [true], [false])])",
          "51: AM_CONDITIONAL([SUNOS],    [AS_CASE([$host_os],[solaris*],      [true], [false])])",
          "52: AM_CONDITIONAL([WINNT],    [AS_CASE([$host_os],[mingw*],        [true], [false])])",
          "54: AC_CHECK_PROG(PKG_CONFIG, pkg-config, yes)",
          "55: AM_CONDITIONAL([HAVE_PKG_CONFIG], [test \"x$PKG_CONFIG\" != \"x\"])",
          "56: AS_IF([test \"x$PKG_CONFIG\" != \"x\"], [",
          "",
          "[Removed Lines]",
          "53: PANDORA_ENABLE_DTRACE",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "m4/dtrace.m4||m4/dtrace.m4": [
          "File: m4/dtrace.m4 -> m4/dtrace.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:     uv__update_time(loop);",
          "312:   while (r != 0 && loop->stop_flag == 0) {",
          "315:     uv__update_time(loop);",
          "316:     uv__run_timers(loop);",
          "317:     uv__run_pending(loop);",
          "",
          "[Removed Lines]",
          "313:     UV_TICK_START(loop, mode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "340:     }",
          "342:     r = uv__loop_alive(loop);",
          "345:     if (mode & (UV_RUN_ONCE | UV_RUN_NOWAIT))",
          "346:       break;",
          "",
          "[Removed Lines]",
          "343:     UV_TICK_STOP(loop, mode);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/unix/internal.h||src/unix/internal.h": [
          "File: src/unix/internal.h -> src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:   return s + 1;",
          "307: }",
          "",
          "[Removed Lines]",
          "310: #ifdef HAVE_DTRACE",
          "311: #include \"uv-dtrace.h\"",
          "312: #else",
          "313: #define UV_TICK_START(arg0, arg1)",
          "314: #define UV_TICK_STOP(arg0, arg1)",
          "315: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: {",
          "12:   'target_defaults': {",
          "13:     'conditions': [",
          "14:       ['OS != \"win\"', {",
          "",
          "[Removed Lines]",
          "2:   'variables': {",
          "3:     'uv_use_dtrace%': 'false',",
          "4:     # uv_parent_path is the relative path to libuv in the parent project",
          "5:     # this is only relevant when dtrace is enabled and libuv is a child project",
          "6:     # as it's necessary to correctly locate the object files for post",
          "7:     # processing.",
          "8:     # XXX gyp is quite sensitive about paths with double / they don't normalize",
          "9:     'uv_parent_path': '/',",
          "10:   },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:         ['uv_library==\"shared_library\"', {",
          "297:           'defines': [ 'BUILDING_UV_SHARED=1' ]",
          "298:         }],",
          "313:       ]",
          "314:     },",
          "",
          "[Removed Lines]",
          "299:         # FIXME(bnoordhuis or tjfontaine) Unify this, it's extremely ugly.",
          "300:         ['uv_use_dtrace==\"true\"', {",
          "301:           'defines': [ 'HAVE_DTRACE=1' ],",
          "302:           'dependencies': [ 'uv_dtrace_header' ],",
          "303:           'include_dirs': [ '<(SHARED_INTERMEDIATE_DIR)' ],",
          "304:           'conditions': [",
          "305:             [ 'OS not in \"mac linux\"', {",
          "306:               'sources': [ 'src/unix/dtrace.c' ],",
          "307:             }],",
          "308:             [ 'OS==\"linux\"', {",
          "309:               'sources': [ '<(SHARED_INTERMEDIATE_DIR)/dtrace.o' ]",
          "310:             }],",
          "311:           ],",
          "312:         }],",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "522:         },",
          "523:       },",
          "524:     },",
          "580:   ]",
          "581: }",
          "",
          "[Removed Lines]",
          "526:     {",
          "527:       'target_name': 'uv_dtrace_header',",
          "528:       'type': 'none',",
          "529:       'conditions': [",
          "530:         [ 'uv_use_dtrace==\"true\"', {",
          "531:           'actions': [",
          "532:             {",
          "533:               'action_name': 'uv_dtrace_header',",
          "534:               'inputs': [ 'src/unix/uv-dtrace.d' ],",
          "535:               'outputs': [ '<(SHARED_INTERMEDIATE_DIR)/uv-dtrace.h' ],",
          "536:               'action': [ 'dtrace', '-h', '-xnolibs', '-s', '<@(_inputs)',",
          "537:                 '-o', '<@(_outputs)' ],",
          "538:             },",
          "539:           ],",
          "540:         }],",
          "541:       ],",
          "542:     },",
          "544:     # FIXME(bnoordhuis or tjfontaine) Unify this, it's extremely ugly.",
          "545:     {",
          "546:       'target_name': 'uv_dtrace_provider',",
          "547:       'type': 'none',",
          "548:       'conditions': [",
          "549:         [ 'uv_use_dtrace==\"true\" and OS not in \"mac linux\"', {",
          "550:           'actions': [",
          "551:             {",
          "552:               'action_name': 'uv_dtrace_o',",
          "553:               'inputs': [",
          "554:                 'src/unix/uv-dtrace.d',",
          "555:                 '<(PRODUCT_DIR)/obj.target/libuv<(uv_parent_path)src/unix/core.o',",
          "556:               ],",
          "557:               'outputs': [",
          "558:                 '<(PRODUCT_DIR)/obj.target/libuv<(uv_parent_path)src/unix/dtrace.o',",
          "559:               ],",
          "560:               'action': [ 'dtrace', '-G', '-xnolibs', '-s', '<@(_inputs)',",
          "561:                 '-o', '<@(_outputs)' ]",
          "562:             }",
          "563:           ]",
          "564:         }],",
          "565:         [ 'uv_use_dtrace==\"true\" and OS==\"linux\"', {",
          "566:           'actions': [",
          "567:             {",
          "568:               'action_name': 'uv_dtrace_o',",
          "569:               'inputs': [ 'src/unix/uv-dtrace.d' ],",
          "570:               'outputs': [ '<(SHARED_INTERMEDIATE_DIR)/dtrace.o' ],",
          "571:               'action': [",
          "572:                 'dtrace', '-C', '-G', '-s', '<@(_inputs)', '-o', '<@(_outputs)'",
          "573:               ],",
          "574:             }",
          "575:           ]",
          "576:         }],",
          "577:       ]",
          "578:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9f75fb146c85d7962d39a3f15551053f2c4d6dc",
      "candidate_info": {
        "commit_hash": "e9f75fb146c85d7962d39a3f15551053f2c4d6dc",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e9f75fb146c85d7962d39a3f15551053f2c4d6dc",
        "files": [
          "src/unix/core.c",
          "src/unix/internal.h",
          "src/unix/stream.c"
        ],
        "message": "unix: set close-on-exec flag on received fds\n\nSet the close-on-exec flag on file descriptors that we've received with\nrecvmsg() so we don't leak them when calling fork() afterwards.\n\nOn Linux, we use the MSG_CMSG_CLOEXEC flag when supported (2.6.23 and\nup.)\n\nOn older Linux versions and other platforms, we walk the received file\ndescriptors and set the close-on-exec flag for each fd manually.  That\nwon't entirely avoid race conditions when other threads call fork() or\nclone() but at least we're less likely to leak file descriptors now.",
        "before_after_code_files": [
          "src/unix/core.c||src/unix/core.c",
          "src/unix/internal.h||src/unix/internal.h",
          "src/unix/stream.c||src/unix/stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "542: }",
          "545: int uv_cwd(char* buffer, size_t size) {",
          "546:   if (buffer == NULL)",
          "547:     return -EINVAL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "545: ssize_t uv__recvmsg(int fd, struct msghdr* msg, int flags) {",
          "546:   struct cmsghdr* cmsg;",
          "547:   ssize_t rc;",
          "548:   int* pfd;",
          "549:   int* end;",
          "550: #if defined(__linux__)",
          "551:   static int no_msg_cmsg_cloexec;",
          "552:   if (no_msg_cmsg_cloexec == 0) {",
          "554:     if (rc != -1)",
          "555:       return rc;",
          "556:     if (errno != EINVAL)",
          "557:       return -errno;",
          "558:     rc = recvmsg(fd, msg, flags);",
          "559:     if (rc == -1)",
          "560:       return -errno;",
          "561:     no_msg_cmsg_cloexec = 1;",
          "562:   } else {",
          "563:     rc = recvmsg(fd, msg, flags);",
          "564:   }",
          "565: #else",
          "566:   rc = recvmsg(fd, msg, flags);",
          "567: #endif",
          "568:   if (rc == -1)",
          "569:     return -errno;",
          "570:   if (msg->msg_controllen == 0)",
          "571:     return rc;",
          "572:   for (cmsg = CMSG_FIRSTHDR(msg); cmsg != NULL; cmsg = CMSG_NXTHDR(msg, cmsg))",
          "573:     if (cmsg->cmsg_type == SCM_RIGHTS)",
          "574:       for (pfd = (int*) CMSG_DATA(cmsg),",
          "575:            end = (int*) ((char*) cmsg + cmsg->cmsg_len);",
          "576:            pfd < end;",
          "577:            pfd += 1)",
          "578:         uv__cloexec(*pfd, 1);",
          "579:   return rc;",
          "580: }",
          "",
          "---------------"
        ],
        "src/unix/internal.h||src/unix/internal.h": [
          "File: src/unix/internal.h -> src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "139: int uv__cloexec(int fd, int set);",
          "140: int uv__socket(int domain, int type, int protocol);",
          "141: int uv__dup(int fd);",
          "142: void uv__make_close_pending(uv_handle_t* handle);",
          "144: void uv__io_init(uv__io_t* w, uv__io_cb cb, int fd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142: ssize_t uv__recvmsg(int fd, struct msghdr *msg, int flags);",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1007:       msg.msg_control = (void*)  cmsg_space;",
          "1009:       do {",
          "1011:       }",
          "1012:       while (nread < 0 && errno == EINTR);",
          "1013:     }",
          "",
          "[Removed Lines]",
          "1010:         nread = recvmsg(uv__stream_fd(stream), &msg, 0);",
          "",
          "[Added Lines]",
          "1010:         nread = uv__recvmsg(uv__stream_fd(stream), &msg, 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}