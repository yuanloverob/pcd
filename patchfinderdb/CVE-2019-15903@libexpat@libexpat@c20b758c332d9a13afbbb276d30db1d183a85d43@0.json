{
  "cve_id": "CVE-2019-15903",
  "cve_desc": "In libexpat before 2.2.8, crafted XML input could fool the parser into changing from DTD parsing to document parsing too early; a consecutive call to XML_GetCurrentLineNumber (or XML_GetCurrentColumnNumber) then resulted in a heap-based buffer over-read.",
  "repo": "libexpat/libexpat",
  "patch_hash": "c20b758c332d9a13afbbb276d30db1d183a85d43",
  "patch_info": {
    "commit_hash": "c20b758c332d9a13afbbb276d30db1d183a85d43",
    "repo": "libexpat/libexpat",
    "commit_url": "https://github.com/libexpat/libexpat/commit/c20b758c332d9a13afbbb276d30db1d183a85d43",
    "files": [
      "expat/lib/xmlparse.c"
    ],
    "message": "xmlparse.c: Deny internal entities closing the doctype",
    "before_after_code_files": [
      "expat/lib/xmlparse.c||expat/lib/xmlparse.c"
    ]
  },
  "patch_diff": {
    "expat/lib/xmlparse.c||expat/lib/xmlparse.c": [
      "File: expat/lib/xmlparse.c -> expat/lib/xmlparse.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401: static enum XML_Error doProlog(XML_Parser parser, const ENCODING *enc,",
      "402:                                const char *s, const char *end, int tok,",
      "403:                                const char *next, const char **nextPtr,",
      "405: static enum XML_Error processInternalEntity(XML_Parser parser, ENTITY *entity,",
      "406:                                             XML_Bool betweenDecl);",
      "407: static enum XML_Error doContent(XML_Parser parser, int startTagLevel,",
      "",
      "[Removed Lines]",
      "404:                                XML_Bool haveMore);",
      "",
      "[Added Lines]",
      "404:                                XML_Bool haveMore, XML_Bool allowClosingDoctype);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4047:   parser->m_processor = prologProcessor;",
      "4048:   return doProlog(parser, parser->m_encoding, s, end, tok, next, nextPtr,",
      "4050: }",
      "4052: static enum XML_Error PTRCALL",
      "",
      "[Removed Lines]",
      "4049:                   (XML_Bool)! parser->m_parsingStatus.finalBuffer);",
      "",
      "[Added Lines]",
      "4049:                   (XML_Bool)! parser->m_parsingStatus.finalBuffer, XML_TRUE);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4090:   const char *next = s;",
      "4091:   int tok = XmlPrologTok(parser->m_encoding, s, end, &next);",
      "4092:   return doProlog(parser, parser->m_encoding, s, end, tok, next, nextPtr,",
      "4094: }",
      "4096: static enum XML_Error",
      "4097: doProlog(XML_Parser parser, const ENCODING *enc, const char *s, const char *end,",
      "4099: #ifdef XML_DTD",
      "4100:   static const XML_Char externalSubsetName[] = {ASCII_HASH, '\\0'};",
      "",
      "[Removed Lines]",
      "4093:                   (XML_Bool)! parser->m_parsingStatus.finalBuffer);",
      "4098:          int tok, const char *next, const char **nextPtr, XML_Bool haveMore) {",
      "",
      "[Added Lines]",
      "4093:                   (XML_Bool)! parser->m_parsingStatus.finalBuffer, XML_TRUE);",
      "4098:          int tok, const char *next, const char **nextPtr, XML_Bool haveMore,",
      "4099:          XML_Bool allowClosingDoctype) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4271:       }",
      "4272:       break;",
      "4273:     case XML_ROLE_DOCTYPE_CLOSE:",
      "4274:       if (parser->m_doctypeName) {",
      "4275:         parser->m_startDoctypeDeclHandler(",
      "4276:             parser->m_handlerArg, parser->m_doctypeName, parser->m_doctypeSysid,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4275:       if (allowClosingDoctype != XML_TRUE) {",
      "4277:         return XML_ERROR_INVALID_TOKEN;",
      "4278:       }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5174:     int tok",
      "5175:         = XmlPrologTok(parser->m_internalEncoding, textStart, textEnd, &next);",
      "5176:     result = doProlog(parser, parser->m_internalEncoding, textStart, textEnd,",
      "5178:   } else",
      "5180:     result = doContent(parser, parser->m_tagLevel, parser->m_internalEncoding,",
      "",
      "[Removed Lines]",
      "5177:                       tok, next, &next, XML_FALSE);",
      "",
      "[Added Lines]",
      "5183:                       tok, next, &next, XML_FALSE, XML_FALSE);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "5217:     int tok",
      "5218:         = XmlPrologTok(parser->m_internalEncoding, textStart, textEnd, &next);",
      "5219:     result = doProlog(parser, parser->m_internalEncoding, textStart, textEnd,",
      "5221:   } else",
      "5223:     result = doContent(parser, openEntity->startTagLevel,",
      "",
      "[Removed Lines]",
      "5220:                       tok, next, &next, XML_FALSE);",
      "",
      "[Added Lines]",
      "5226:                       tok, next, &next, XML_FALSE, XML_TRUE);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "5244:     parser->m_processor = prologProcessor;",
      "5245:     tok = XmlPrologTok(parser->m_encoding, s, end, &next);",
      "5246:     return doProlog(parser, parser->m_encoding, s, end, tok, next, nextPtr,",
      "5248:   } else",
      "5250:   {",
      "",
      "[Removed Lines]",
      "5247:                     (XML_Bool)! parser->m_parsingStatus.finalBuffer);",
      "",
      "[Added Lines]",
      "5253:                     (XML_Bool)! parser->m_parsingStatus.finalBuffer, XML_TRUE);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "438493691f1b8620a71d5aee658fe160103ff863",
      "candidate_info": {
        "commit_hash": "438493691f1b8620a71d5aee658fe160103ff863",
        "repo": "libexpat/libexpat",
        "commit_url": "https://github.com/libexpat/libexpat/commit/438493691f1b8620a71d5aee658fe160103ff863",
        "files": [
          "expat/tests/runtests.c"
        ],
        "message": "tests: Cover denying internal entities closing the doctype",
        "before_after_code_files": [
          "expat/tests/runtests.c||expat/tests/runtests.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libexpat/libexpat/pull/318"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "expat/tests/runtests.c||expat/tests/runtests.c": [
          "File: expat/tests/runtests.c -> expat/tests/runtests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7480: }",
          "7481: END_TEST",
          "7483: static void",
          "7484: alloc_setup(void) {",
          "7485:   XML_Memory_Handling_Suite memsuite = {duff_allocator, duff_reallocator, free};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7483: #ifdef XML_DTD",
          "7484: START_TEST(test_misc_deny_internal_entity_closing_doctype_issue_317) {",
          "7485:   const char *const inputOne = \"<!DOCTYPE d [\\n\"",
          "7486:                                \"<!ENTITY % e ']><d/>'>\\n\"",
          "7487:                                \"\\n\"",
          "7488:                                \"%e;\";",
          "7489:   const char *const inputTwo = \"<!DOCTYPE d [\\n\"",
          "7490:                                \"<!ENTITY % e1 ']><d/>'><!ENTITY % e2 '&e1;'>\\n\"",
          "7491:                                \"\\n\"",
          "7492:                                \"%e2;\";",
          "7493:   const char *const inputThree = \"<!DOCTYPE d [\\n\"",
          "7494:                                  \"<!ENTITY % e ']><d'>\\n\"",
          "7495:                                  \"\\n\"",
          "7496:                                  \"%e;\";",
          "7497:   const char *const inputIssue317 = \"<!DOCTYPE doc [\\n\"",
          "7498:                                     \"<!ENTITY % foo ']>\\n\"",
          "7499:                                     \"<doc>Hell<oc (#PCDATA)*>'>\\n\"",
          "7500:                                     \"%foo;\\n\"",
          "7501:                                     \"]>\\n\"",
          "7502:                                     \"<doc>Hello, world</dVc>\";",
          "7504:   const char *const inputs[] = {inputOne, inputTwo, inputThree, inputIssue317};",
          "7505:   size_t inputIndex = 0;",
          "7507:   for (; inputIndex < sizeof(inputs) / sizeof(inputs[0]); inputIndex++) {",
          "7508:     XML_Parser parser;",
          "7509:     enum XML_Status parseResult;",
          "7510:     int setParamEntityResult;",
          "7511:     XML_Size lineNumber;",
          "7512:     XML_Size columnNumber;",
          "7513:     const char *const input = inputs[inputIndex];",
          "7515:     parser = XML_ParserCreate(NULL);",
          "7516:     setParamEntityResult",
          "7517:         = XML_SetParamEntityParsing(parser, XML_PARAM_ENTITY_PARSING_ALWAYS);",
          "7518:     if (setParamEntityResult != 1)",
          "7519:       fail(\"Failed to set XML_PARAM_ENTITY_PARSING_ALWAYS.\");",
          "7521:     parseResult = XML_Parse(parser, input, (int)strlen(input), 0);",
          "7522:     if (parseResult != XML_STATUS_ERROR) {",
          "7523:       parseResult = XML_Parse(parser, \"\", 0, 1);",
          "7524:       if (parseResult != XML_STATUS_ERROR) {",
          "7525:         fail(\"Parsing was expected to fail but succeeded.\");",
          "7526:       }",
          "7527:     }",
          "7529:     if (XML_GetErrorCode(parser) != XML_ERROR_INVALID_TOKEN)",
          "7530:       fail(\"Error code does not match XML_ERROR_INVALID_TOKEN\");",
          "7532:     lineNumber = XML_GetCurrentLineNumber(parser);",
          "7533:     if (lineNumber != 4)",
          "7534:       fail(\"XML_GetCurrentLineNumber does not work as expected.\");",
          "7536:     columnNumber = XML_GetCurrentColumnNumber(parser);",
          "7537:     if (columnNumber != 0)",
          "7538:       fail(\"XML_GetCurrentColumnNumber does not work as expected.\");",
          "7540:     XML_ParserFree(parser);",
          "7541:   }",
          "7542: }",
          "7543: END_TEST",
          "7544: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11408:   tcase_add_test(tc_misc, test_misc_utf16le);",
          "11409:   tcase_add_test(tc_misc, test_misc_stop_during_end_handler_issue_240_1);",
          "11410:   tcase_add_test(tc_misc, test_misc_stop_during_end_handler_issue_240_2);",
          "11412:   suite_add_tcase(s, tc_alloc);",
          "11413:   tcase_add_checked_fixture(tc_alloc, alloc_setup, alloc_teardown);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11474: #ifdef XML_DTD",
          "11475:   tcase_add_test(tc_misc,",
          "11476:                  test_misc_deny_internal_entity_closing_doctype_issue_317);",
          "11477: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}