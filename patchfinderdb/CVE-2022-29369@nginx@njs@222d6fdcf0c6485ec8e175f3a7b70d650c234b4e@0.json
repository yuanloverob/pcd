{
  "cve_id": "CVE-2022-29369",
  "cve_desc": "Nginx NJS v0.7.2 was discovered to contain a segmentation violation via njs_lvlhsh_bucket_find at njs_lvlhsh.c.",
  "repo": "nginx/njs",
  "patch_hash": "222d6fdcf0c6485ec8e175f3a7b70d650c234b4e",
  "patch_info": {
    "commit_hash": "222d6fdcf0c6485ec8e175f3a7b70d650c234b4e",
    "repo": "nginx/njs",
    "commit_url": "https://github.com/nginx/njs/commit/222d6fdcf0c6485ec8e175f3a7b70d650c234b4e",
    "files": [
      "src/njs_vmcode.c",
      "src/test/njs_unit_test.c"
    ],
    "message": "Fixed njs_vmcode_interpreter() when \"toString\" conversion fails.\n\nPreviously, while interpreting a user function, njs_vmcode_interpreter()\nmight return prematurely when an error happens.  This is not correct\nbecause the current frame has to be unwound (or exception caught)\nfirst.\n\nThe fix is exit through only 5 appropriate exit points to ensure\nproper unwinding.\n\nThis closes #467 issue on Github.",
    "before_after_code_files": [
      "src/njs_vmcode.c||src/njs_vmcode.c",
      "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
    ]
  },
  "patch_diff": {
    "src/njs_vmcode.c||src/njs_vmcode.c": [
      "File: src/njs_vmcode.c -> src/njs_vmcode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "700:                 ret = njs_object_prop_define(vm, value1, &name, function,",
      "701:                                              accessor->type);",
      "702:                 if (njs_slow_path(ret != NJS_OK)) {",
      "704:                 }",
      "706:                 ret = sizeof(njs_vmcode_prop_accessor_t);",
      "",
      "[Removed Lines]",
      "703:                     return NJS_ERROR;",
      "",
      "[Added Lines]",
      "703:                     goto error;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "779:                 }",
      "781:                 if (njs_slow_path(!njs_is_function(&dst))) {",
      "783:                     if (njs_slow_path(ret != NJS_OK)) {",
      "785:                     }",
      "788:                     njs_type_error(vm,",
      "789:                                \"(intermediate value)[\\\"%V\\\"] is not a function\",",
      "790:                                &string);",
      "",
      "[Removed Lines]",
      "782:                     ret = njs_value_to_key(vm, value2, value2);",
      "784:                         return NJS_ERROR;",
      "787:                     njs_key_string_get(vm, value2, &string);",
      "",
      "[Added Lines]",
      "782:                     ret = njs_value_to_key(vm, &dst, value2);",
      "784:                         goto error;",
      "787:                     njs_key_string_get(vm, &dst, &string);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "950:                 if (njs_is_valid(value1)) {",
      "951:                     value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));",
      "952:                     if (njs_slow_path(value1 == NULL)) {",
      "954:                     }",
      "956:                     njs_scope_value_set(vm, var->dst, value1);",
      "",
      "[Removed Lines]",
      "953:                         return NJS_ERROR;",
      "",
      "[Added Lines]",
      "953:                         njs_memory_error(vm);",
      "954:                         goto error;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "968:                 value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));",
      "969:                 if (njs_slow_path(value1 == NULL)) {",
      "971:                 }",
      "",
      "[Removed Lines]",
      "970:                     return NJS_ERROR;",
      "",
      "[Added Lines]",
      "971:                     njs_memory_error(vm);",
      "972:                     goto error;",
      "",
      "---------------"
    ],
    "src/test/njs_unit_test.c||src/test/njs_unit_test.c": [
      "File: src/test/njs_unit_test.c -> src/test/njs_unit_test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3412:     { njs_str(\"var i; for (i = 0; i < 10; i++) { i += 1 } i\"),",
      "3413:       njs_str(\"10\") },",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3412:     { njs_str(\"function f() { Object.prototype.toString = 1; };\"",
      "3413:               \"Object.prototype.toString = f;\"",
      "3414:               \"(function () { try { 's'[{}](); } catch (e) { throw e; } })()\"),",
      "3415:       njs_str(\"TypeError: Cannot convert object to primitive value\") },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e9eab88f05319ab5a7c7c6aa0165bcf53aedeadf",
      "candidate_info": {
        "commit_hash": "e9eab88f05319ab5a7c7c6aa0165bcf53aedeadf",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/e9eab88f05319ab5a7c7c6aa0165bcf53aedeadf",
        "files": [
          "src/njs_object.c",
          "src/njs_value.c",
          "src/njs_value.h",
          "src/njs_vmcode.c",
          "src/test/njs_unit_test.c"
        ],
        "message": "Fixed property set instruction when key modifies base binding.\n\nPreviously, when obj[prop] expression was evaluated, and prop was an\nobject with custom \"toString\" method, which modifies obj binding as its\nside-effect, the binding update was visible to property set instruction\nwhich is not correct.\n\nThis closes #550 issue on Github.",
        "before_after_code_files": [
          "src/njs_object.c||src/njs_object.c",
          "src/njs_value.c||src/njs_value.c",
          "src/njs_value.h||src/njs_value.h",
          "src/njs_vmcode.c||src/njs_vmcode.c",
          "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_vmcode.c||src/njs_vmcode.c",
            "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
          ],
          "candidate": [
            "src/njs_vmcode.c||src/njs_vmcode.c",
            "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
          ]
        }
      },
      "candidate_diff": {
        "src/njs_object.c||src/njs_object.c": [
          "File: src/njs_object.c -> src/njs_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2450:     njs_uint_t nargs, njs_index_t unused)",
          "2451: {",
          "2452:     njs_int_t             ret;",
          "2454:     njs_property_query_t  pq;",
          "2456:     value = njs_argument(args, 0);",
          "",
          "[Removed Lines]",
          "2453:     njs_value_t           *value, *property;",
          "",
          "[Added Lines]",
          "2453:     njs_value_t           *value, *property, lvalue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2461:         return NJS_ERROR;",
          "2462:     }",
          "2466:     njs_property_query_init(&pq, NJS_PROPERTY_QUERY_GET, 1);",
          "",
          "[Removed Lines]",
          "2464:     property = njs_arg(args, nargs, 1);",
          "",
          "[Added Lines]",
          "2464:     property = njs_lvalue_arg(&lvalue, args, nargs, 1);",
          "2466:     if (njs_slow_path(!njs_is_key(property))) {",
          "2467:         ret = njs_value_to_key(vm, property, property);",
          "2468:         if (njs_slow_path(ret != NJS_OK)) {",
          "2469:             return NJS_ERROR;",
          "2470:         }",
          "2471:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2488:     njs_uint_t nargs, njs_index_t unused)",
          "2489: {",
          "2490:     njs_int_t             ret;",
          "2492:     const njs_value_t     *retval;",
          "2493:     njs_object_prop_t     *prop;",
          "2494:     njs_property_query_t  pq;",
          "",
          "[Removed Lines]",
          "2491:     njs_value_t           *value, *property;",
          "",
          "[Added Lines]",
          "2498:     njs_value_t           *value, *property, lvalue;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2501:         return NJS_ERROR;",
          "2502:     }",
          "2506:     njs_property_query_init(&pq, NJS_PROPERTY_QUERY_GET, 1);",
          "",
          "[Removed Lines]",
          "2504:     property = njs_arg(args, nargs, 1);",
          "",
          "[Added Lines]",
          "2511:     property = njs_lvalue_arg(&lvalue, args, nargs, 1);",
          "2513:     if (njs_slow_path(!njs_is_key(property))) {",
          "2514:         ret = njs_value_to_key(vm, property, property);",
          "2515:         if (njs_slow_path(ret != NJS_OK)) {",
          "2516:             return NJS_ERROR;",
          "2517:         }",
          "2518:     }",
          "",
          "---------------"
        ],
        "src/njs_value.c||src/njs_value.c": [
          "File: src/njs_value.c -> src/njs_value.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "535:     uint32_t        index;",
          "536:     njs_int_t       ret;",
          "537:     njs_object_t    *obj;",
          "539:     njs_function_t  *function;",
          "550:     switch (value->type) {",
          "552:     case NJS_BOOLEAN:",
          "553:     case NJS_NUMBER:",
          "554:     case NJS_SYMBOL:",
          "",
          "[Removed Lines]",
          "538:     njs_value_t     prop;",
          "541:     if (njs_slow_path(!njs_is_primitive(key))) {",
          "542:         ret = njs_value_to_string(vm, &prop, key);",
          "543:         if (ret != NJS_OK) {",
          "544:             return ret;",
          "545:         }",
          "547:         key = &prop;",
          "548:     }",
          "",
          "[Added Lines]",
          "540:     njs_assert(njs_is_index_or_key(key));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1004:     njs_typed_array_t     *tarray;",
          "1005:     njs_property_query_t  pq;",
          "1007:     if (njs_fast_path(njs_is_number(key))) {",
          "1008:         num = njs_number(key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "998:     njs_assert(njs_is_index_or_key(key));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1136:     static const njs_str_t  length_key = njs_str(\"length\");",
          "1138:     if (njs_fast_path(njs_is_number(key))) {",
          "1139:         num = njs_number(key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1131:     njs_assert(njs_is_index_or_key(key));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1330:     njs_value_t *removed, njs_bool_t thrw)",
          "1331: {",
          "1332:     njs_int_t             ret;",
          "1333:     njs_object_prop_t     *prop;",
          "1334:     njs_property_query_t  pq;",
          "1336:     njs_property_query_init(&pq, NJS_PROPERTY_QUERY_DELETE, 1);",
          "1338:     ret = njs_property_query(vm, &pq, value, key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1328:     njs_value_t           primitive;",
          "1332:     if (njs_slow_path(!njs_is_key(key))) {",
          "1333:         ret = njs_value_to_key(vm, &primitive, key);",
          "1334:         if (njs_slow_path(ret != NJS_OK)) {",
          "1335:             return NJS_ERROR;",
          "1336:         }",
          "1338:         key = &primitive;",
          "1339:     }",
          "",
          "---------------"
        ],
        "src/njs_value.h||src/njs_value.h": [
          "File: src/njs_value.h -> src/njs_value.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:     (njs_is_string(value) || njs_is_symbol(value))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535: #define njs_is_index_or_key(value)                                            \\",
          "536:     (njs_is_number(value) || njs_is_key(value))",
          "",
          "---------------"
        ],
        "src/njs_vmcode.c||src/njs_vmcode.c": [
          "File: src/njs_vmcode.c -> src/njs_vmcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: static njs_jump_off_t njs_vmcode_finally(njs_vm_t *vm, njs_value_t *invld,",
          "59:     njs_value_t *retval, u_char *pc);",
          "60: static void njs_vmcode_error(njs_vm_t *vm, u_char *pc);",
          "62: static njs_jump_off_t njs_string_concat(njs_vm_t *vm, njs_value_t *val1,",
          "63:     njs_value_t *val2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: static njs_int_t njs_throw_cannot_property(njs_vm_t *vm, njs_value_t *object,",
          "62:     njs_value_t *key, const char *what);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "185:                 get = (njs_vmcode_prop_get_t *) pc;",
          "186:                 njs_vmcode_operand(vm, get->value, retval);",
          "188:                 ret = njs_value_property(vm, value1, value2, retval);",
          "189:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "190:                     goto error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:                 if (njs_slow_path(!njs_is_index_or_key(value2))) {",
          "191:                     if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "192:                         (void) njs_throw_cannot_property(vm, value1, value2,",
          "193:                                                          \"get\");",
          "194:                         goto error;",
          "195:                     }",
          "197:                     ret = njs_value_to_key(vm, &primitive1, value2);",
          "198:                     if (njs_slow_path(ret != NJS_OK)) {",
          "199:                         goto error;",
          "200:                     }",
          "202:                     value2 = &primitive1;",
          "203:                 }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "670:                 set = (njs_vmcode_prop_set_t *) pc;",
          "671:                 njs_vmcode_operand(vm, set->value, retval);",
          "673:                 ret = njs_value_property_set(vm, value1, value2, retval);",
          "674:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "675:                     goto error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "690:                 if (njs_slow_path(!njs_is_index_or_key(value2))) {",
          "691:                     if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "692:                         (void) njs_throw_cannot_property(vm, value1, value2,",
          "693:                                                          \"set\");",
          "694:                         goto error;",
          "695:                     }",
          "697:                     njs_value_assign(&primitive1, value1);",
          "698:                     ret = njs_value_to_key(vm, &primitive2, value2);",
          "699:                     if (njs_slow_path(ret != NJS_OK)) {",
          "700:                         goto error;",
          "701:                     }",
          "703:                     value1 = &primitive1;",
          "704:                     value2 = &primitive2;",
          "705:                 }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "768:             case NJS_VMCODE_METHOD_FRAME:",
          "769:                 method_frame = (njs_vmcode_method_frame_t *) pc;",
          "771:                 ret = njs_value_property(vm, value1, value2, &dst);",
          "772:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "773:                     goto error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "805:                 if (njs_slow_path(!njs_is_key(value2))) {",
          "806:                     if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "807:                         (void) njs_throw_cannot_property(vm, value1, value2,",
          "808:                                                          \"get\");",
          "809:                         goto error;",
          "810:                     }",
          "812:                     ret = njs_value_to_key(vm, &primitive1, value2);",
          "813:                     if (njs_slow_path(ret != NJS_OK)) {",
          "814:                         goto error;",
          "815:                     }",
          "817:                     value2 = &primitive1;",
          "818:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1417: njs_vmcode_property_in(njs_vm_t *vm, njs_value_t *value, njs_value_t *key)",
          "1418: {",
          "1419:     njs_int_t             ret;",
          "1420:     njs_property_query_t  pq;",
          "1422:     if (njs_slow_path(njs_is_primitive(value))) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1469:     njs_value_t           primitive;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1425:         return NJS_ERROR;",
          "1426:     }",
          "1430:         if (njs_slow_path(ret != NJS_OK)) {",
          "1432:         }",
          "1433:     }",
          "1435:     njs_property_query_init(&pq, NJS_PROPERTY_QUERY_GET, 0);",
          "",
          "[Removed Lines]",
          "1428:     if (njs_slow_path(!njs_is_key(key))) {",
          "1429:         ret = njs_value_to_key(vm, key, key);",
          "1431:             return ret;",
          "",
          "[Added Lines]",
          "1478:     if (njs_slow_path(!njs_is_index_or_key(key))) {",
          "1479:         ret = njs_value_to_key(vm, &primitive, key);",
          "1481:             return NJS_ERROR;",
          "1484:         key = &primitive;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2186:         njs_error_fmt_new(vm, &vm->retval, err->type, \"%V\", &err->u.message);",
          "2187:     }",
          "2188: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2243: static njs_int_t",
          "2244: njs_throw_cannot_property(njs_vm_t *vm, njs_value_t *object, njs_value_t *key,",
          "2245:     const char *what)",
          "2246: {",
          "2247:     njs_int_t    ret;",
          "2248:     njs_str_t    string;",
          "2249:     njs_value_t  dst;",
          "2251:     ret = njs_value_to_key2(vm, &dst, key, 0);",
          "2252:     if (njs_slow_path(ret != NJS_OK)) {",
          "2253:         return NJS_ERROR;",
          "2254:     }",
          "2256:     njs_key_string_get(vm, &dst, &string);",
          "2258:     njs_type_error(vm, \"cannot %s property \\\"%V\\\" of %s\", what,",
          "2259:                    &string, njs_is_null(object) ? \"null\" : \"undefined\");",
          "2261:     return NJS_OK;",
          "2262: }",
          "",
          "---------------"
        ],
        "src/test/njs_unit_test.c||src/test/njs_unit_test.c": [
          "File: src/test/njs_unit_test.c -> src/test/njs_unit_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3462:     { njs_str(\"function f() { Object.prototype.toString = 1; };\"",
          "3463:               \"Object.prototype.toString = f;\"",
          "3464:               \"(function () { try { 's'[{}](); } catch (e) { throw e; } })()\"),",
          "3467:     { njs_str(\"var i; for (i = 0; i < 10; i++) { i += 1 } i\"),",
          "3468:       njs_str(\"10\") },",
          "",
          "[Removed Lines]",
          "3465:       njs_str(\"TypeError: Cannot convert object to primitive value\") },",
          "",
          "[Added Lines]",
          "3465:       njs_str(\"TypeError: (intermediate value)[\\\"undefined\\\"] is not a function\") },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4409:                  \"var a = [1,2]; a[1.5] = 5; '' + (n in a) + (delete a[n])\"),",
          "4410:       njs_str(\"truetrue\") },",
          "4414:     { njs_str(\"Array.isArray()\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4412:     { njs_str(\"var o = {},  v = o;\"",
          "4413:               \"v[{toString: () => { v = 'V'; return 'a';}}] = 1;\"",
          "4414:               \"[v, o.a]\"),",
          "4415:       njs_str(\"V,1\") },",
          "4417:     { njs_str(\"var o = null; o[{toString:()=>{throw 'OOps'}}]\"),",
          "4418:       njs_str(\"TypeError: cannot get property \\\"[object Object]\\\" of null\") },",
          "4420:     { njs_str(\"var o = null; o[{toString:()=>{throw 'OOps'}}]()\"),",
          "4421:       njs_str(\"TypeError: cannot get property \\\"[object Object]\\\" of null\") },",
          "4423:     { njs_str(\"var o = null; o[{toString:()=>{throw 'OOps'}}] = 1\"),",
          "4424:       njs_str(\"TypeError: cannot set property \\\"[object Object]\\\" of null\") },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "158f54e6e8d87eaa9d817147a9022bcd7563434f",
      "candidate_info": {
        "commit_hash": "158f54e6e8d87eaa9d817147a9022bcd7563434f",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/158f54e6e8d87eaa9d817147a9022bcd7563434f",
        "files": [
          "src/njs_builtin.c",
          "src/njs_disassembler.c",
          "src/njs_generator.c",
          "src/njs_module.c",
          "src/njs_parser.c",
          "src/njs_parser.h",
          "src/njs_scope.c",
          "src/njs_scope.h",
          "src/njs_variable.c",
          "src/njs_variable.h",
          "src/njs_vmcode.c",
          "src/njs_vmcode.h",
          "src/test/njs_benchmark.c",
          "src/test/njs_unit_test.c"
        ],
        "message": "Introduced let implementation.\n\nThis closes #105 issue on GitHub.",
        "before_after_code_files": [
          "src/njs_builtin.c||src/njs_builtin.c",
          "src/njs_disassembler.c||src/njs_disassembler.c",
          "src/njs_generator.c||src/njs_generator.c",
          "src/njs_module.c||src/njs_module.c",
          "src/njs_parser.c||src/njs_parser.c",
          "src/njs_parser.h||src/njs_parser.h",
          "src/njs_scope.c||src/njs_scope.c",
          "src/njs_scope.h||src/njs_scope.h",
          "src/njs_variable.c||src/njs_variable.c",
          "src/njs_variable.h||src/njs_variable.h",
          "src/njs_vmcode.c||src/njs_vmcode.c",
          "src/njs_vmcode.h||src/njs_vmcode.h",
          "src/test/njs_benchmark.c||src/test/njs_benchmark.c",
          "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_vmcode.c||src/njs_vmcode.c",
            "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
          ],
          "candidate": [
            "src/njs_vmcode.c||src/njs_vmcode.c",
            "src/test/njs_unit_test.c||src/test/njs_unit_test.c"
          ]
        }
      },
      "candidate_diff": {
        "src/njs_builtin.c||src/njs_builtin.c": [
          "File: src/njs_builtin.c -> src/njs_builtin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "973:     var = node->variable;",
          "975:     value = njs_scope_valid_value(vm, var->index);",
          "977:     if (var->type == NJS_VARIABLE_FUNCTION && njs_is_undefined(value)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "975:     if (var->type == NJS_VARIABLE_LET) {",
          "976:         return NJS_DECLINED;",
          "977:     }",
          "",
          "---------------"
        ],
        "src/njs_disassembler.c||src/njs_disassembler.c": [
          "File: src/njs_disassembler.c -> src/njs_disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:     { NJS_VMCODE_THROW, sizeof(njs_vmcode_throw_t),",
          "140:           njs_str(\"THROW           \") },",
          "142: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:     { NJS_VMCODE_LET, sizeof(njs_vmcode_variable_t),",
          "143:           njs_str(\"LET             \") },",
          "145:     { NJS_VMCODE_LET_UPDATE, sizeof(njs_vmcode_variable_t),",
          "146:           njs_str(\"LET UPDATE      \") },",
          "148:     { NJS_VMCODE_INITIALIZATION_TEST, sizeof(njs_vmcode_variable_t),",
          "149:           njs_str(\"INIT TEST       \") },",
          "151:     { NJS_VMCODE_NOT_INITIALIZED, sizeof(njs_vmcode_variable_t),",
          "152:           njs_str(\"NOT INIT        \") },",
          "",
          "---------------"
        ],
        "src/njs_generator.c||src/njs_generator.c": [
          "File: src/njs_generator.c -> src/njs_generator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     njs_variable_t **retvar);",
          "68: static njs_int_t njs_generate_var_statement(njs_vm_t *vm,",
          "69:     njs_generator_t *generator, njs_parser_node_t *node);",
          "70: static njs_int_t njs_generate_if_statement(njs_vm_t *vm,",
          "71:     njs_generator_t *generator, njs_parser_node_t *node);",
          "72: static njs_int_t njs_generate_cond_expression(njs_vm_t *vm,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: static njs_int_t njs_generate_let(njs_vm_t *vm, njs_generator_t *generator,",
          "71:     njs_parser_node_t *node, njs_variable_t *var);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     njs_generator_t *generator, njs_parser_node_t *node);",
          "80: static njs_int_t njs_generate_for_statement(njs_vm_t *vm,",
          "81:     njs_generator_t *generator, njs_parser_node_t *node);",
          "82: static njs_int_t njs_generate_for_in_statement(njs_vm_t *vm,",
          "83:     njs_generator_t *generator, njs_parser_node_t *node);",
          "84: static njs_int_t njs_generate_start_block(njs_vm_t *vm,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: static njs_int_t njs_generate_for_let_update(njs_vm_t *vm,",
          "85:     njs_generator_t *generator, njs_parser_node_t *node, size_t depth);",
          "86: static njs_int_t njs_generate_for_resolve_closure(njs_vm_t *vm,",
          "87:     njs_parser_node_t *node, size_t depth);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "261:                           ##__VA_ARGS__)",
          "264: static const njs_str_t  no_label     = njs_str(\"\");",
          "265: static const njs_str_t  return_label = njs_str(\"@return\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270: #define NJS_GENERATE_MAX_DEPTH  4096",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "277:     switch (node->token_type) {",
          "279:     case NJS_TOKEN_VAR:",
          "280:         return njs_generate_var_statement(vm, generator, node);",
          "282:     case NJS_TOKEN_IF:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "289:     case NJS_TOKEN_LET:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "479: {",
          "480:     njs_int_t  ret;",
          "483:         njs_range_error(vm, \"Maximum call stack size exceeded\");",
          "484:         return NJS_ERROR;",
          "485:     }",
          "",
          "[Removed Lines]",
          "482:     if (njs_slow_path(generator->count++ > 4096)) {",
          "",
          "[Added Lines]",
          "492:     if (njs_slow_path(generator->count++ > NJS_GENERATE_MAX_DEPTH)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "492: }",
          "495: static u_char *",
          "496: njs_generate_reserve(njs_vm_t *vm, njs_generator_t *generator, size_t size)",
          "497: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "505: static njs_int_t",
          "506: njs_generate_wo_dest(njs_vm_t *vm, njs_generator_t *generator,",
          "507:     njs_parser_node_t *node)",
          "508: {",
          "509:     njs_int_t           ret;",
          "510:     njs_parser_scope_t  *scope;",
          "512:     scope = njs_function_scope(node->scope);",
          "514:     scope->dest_disable = 1;",
          "516:     ret = njs_generator(vm, generator, node);",
          "518:     scope->dest_disable = 0;",
          "520:     return ret;",
          "521: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "591:     njs_parser_node_t *node)",
          "592: {",
          "593:     njs_variable_t              *var;",
          "594:     njs_vmcode_function_copy_t  *copy;",
          "596:     var = njs_variable_reference(vm, node);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "623:     njs_parser_scope_t          *scope;",
          "624:     njs_vmcode_variable_t       *variable;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "605:         copy->retval = node->index;",
          "606:     }",
          "608:     return NJS_OK;",
          "609: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "639:     if (var->init) {",
          "640:         return NJS_OK;",
          "641:     }",
          "643:     if (var->type == NJS_VARIABLE_LET) {",
          "644:         scope = njs_function_scope(node->scope);",
          "646:         if (scope->dest_disable) {",
          "647:             njs_generate_code(generator, njs_vmcode_variable_t, variable,",
          "648:                               NJS_VMCODE_NOT_INITIALIZED, 1, node);",
          "649:             variable->dst = node->index;",
          "650:         }",
          "651:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "614:     njs_parser_node_t *node, njs_reference_type_t type, njs_variable_t **retvar)",
          "615: {",
          "616:     njs_variable_t              *var;",
          "617:     njs_vmcode_function_copy_t  *copy;",
          "619:     var = njs_variable_reference(vm, node);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "662:     njs_parser_scope_t          *scope;",
          "663:     njs_vmcode_variable_t       *variable;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "641:         copy->retval = node->index;",
          "642:     }",
          "644:     return NJS_OK;",
          "645: }",
          "648: static njs_int_t",
          "649: njs_generate_var_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "650:     njs_parser_node_t *node)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "691:     if (var->init) {",
          "692:         return NJS_OK;",
          "693:     }",
          "695:     if (var->type == NJS_VARIABLE_LET) {",
          "696:         scope = njs_function_scope(node->scope);",
          "698:         if ((!scope->dest_disable && njs_function_scope(var->scope) == scope)) {",
          "699:             njs_generate_code(generator, njs_vmcode_variable_t, variable,",
          "700:                               NJS_VMCODE_NOT_INITIALIZED, 1, node);",
          "701:             variable->dst = node->index;",
          "702:         }",
          "703:     }",
          "709: static njs_int_t",
          "710: njs_generate_variable_wo_dest(njs_vm_t *vm, njs_generator_t *generator,",
          "711:     njs_parser_node_t *node, njs_reference_type_t type, njs_variable_t **retvar)",
          "712: {",
          "713:     njs_int_t           ret;",
          "714:     njs_parser_scope_t  *scope;",
          "716:     scope = njs_function_scope(node->scope);",
          "718:     scope->dest_disable = 1;",
          "720:     ret = njs_generate_variable(vm, generator, node, type, retvar);",
          "722:     scope->dest_disable = 0;",
          "724:     return ret;",
          "725: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "657:     lvalue = node->left;",
          "660:     if (njs_slow_path(ret != NJS_OK)) {",
          "661:         return NJS_ERROR;",
          "662:     }",
          "665:     expr = node->right;",
          "667:     if (expr == NULL) {",
          "669:         return NJS_OK;",
          "670:     }",
          "677:     }",
          "",
          "[Removed Lines]",
          "659:     ret = njs_generate_variable(vm, generator, lvalue, NJS_DECLARATION, &var);",
          "664:     lvalue->index = var->index;",
          "672:     expr->dest = lvalue;",
          "674:     ret = njs_generator(vm, generator, expr);",
          "675:     if (njs_slow_path(ret != NJS_OK)) {",
          "676:         return ret;",
          "",
          "[Added Lines]",
          "739:     ret = njs_generate_variable_wo_dest(vm, generator, lvalue,",
          "740:                                         NJS_DECLARATION, &var);",
          "749:         if (var->type == NJS_VARIABLE_LET) {",
          "750:             ret = njs_generate_let(vm, generator, node, var);",
          "751:             if (njs_slow_path(ret != NJS_OK)) {",
          "752:                 return ret;",
          "753:             }",
          "754:         }",
          "756:         var->init = 1;",
          "761:     if (var->type == NJS_VARIABLE_LET) {",
          "762:         ret = njs_generate_wo_dest(vm, generator, expr);",
          "763:         if (njs_slow_path(ret != NJS_OK)) {",
          "764:             return ret;",
          "765:         }",
          "767:         ret = njs_generate_let(vm, generator, node, var);",
          "768:         if (njs_slow_path(ret != NJS_OK)) {",
          "769:             return ret;",
          "770:         }",
          "772:     } else {",
          "773:         expr->dest = lvalue;",
          "775:         ret = njs_generator(vm, generator, expr);",
          "776:         if (njs_slow_path(ret != NJS_OK)) {",
          "777:             return ret;",
          "778:         }",
          "781:     var->init = 1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "692: }",
          "695: static njs_int_t",
          "696: njs_generate_if_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "697:     njs_parser_node_t *node)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "799: static njs_int_t",
          "800: njs_generate_let(njs_vm_t *vm, njs_generator_t *generator,",
          "801:     njs_parser_node_t *node, njs_variable_t *var)",
          "802: {",
          "803:     njs_vmcode_variable_t  *code;",
          "805:     njs_generate_code(generator, njs_vmcode_variable_t, code,",
          "806:                       NJS_VMCODE_LET, 0, node);",
          "807:     code->dst = var->index;",
          "809:     return NJS_OK;",
          "810: }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1089: {",
          "1090:     njs_int_t               ret;",
          "1091:     njs_jump_off_t          jump_offset, loop_offset;",
          "1093:     njs_vmcode_jump_t       *jump;",
          "1094:     njs_vmcode_cond_jump_t  *cond_jump;",
          "",
          "[Removed Lines]",
          "1092:     njs_parser_node_t       *condition, *update;",
          "",
          "[Added Lines]",
          "1210:     njs_parser_node_t       *condition, *update, *init;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1113:         return ret;",
          "1114:     }",
          "1116:     node = node->right;",
          "1117:     condition = node->left;",
          "1120:     jump_offset = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1234:     init = node->left;",
          "1243:     ret = njs_generate_for_resolve_closure(vm, condition, generator->count);",
          "1244:     if (njs_slow_path(ret != NJS_OK)) {",
          "1245:         return ret;",
          "1246:     }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1147:     update = node->right;",
          "1149:     ret = njs_generator(vm, generator, update);",
          "1150:     if (njs_slow_path(ret != NJS_OK)) {",
          "1151:         return ret;",
          "",
          "[Removed Lines]",
          "1145:     njs_generate_patch_block(vm, generator, generator->block->continuation);",
          "",
          "[Added Lines]",
          "1276:     ret = njs_generate_for_resolve_closure(vm, update, generator->count);",
          "1277:     if (njs_slow_path(ret != NJS_OK)) {",
          "1278:         return ret;",
          "1279:     }",
          "1281:     ret = njs_generate_for_let_update(vm, generator, init, generator->count);",
          "1282:     if (njs_slow_path(ret != NJS_OK)) {",
          "1283:         return ret;",
          "1284:     }",
          "1286:     njs_generate_patch_block(vm, generator, generator->block->continuation);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1185: }",
          "1188: static njs_int_t",
          "1189: njs_generate_for_in_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "1190:     njs_parser_node_t *node)",
          "1191: {",
          "1192:     njs_int_t                  ret;",
          "1193:     njs_index_t                index;",
          "1194:     njs_jump_off_t             loop_offset, prop_offset;",
          "1196:     njs_vmcode_prop_next_t     *prop_next;",
          "1197:     njs_vmcode_prop_foreach_t  *prop_foreach;",
          "",
          "[Removed Lines]",
          "1195:     njs_parser_node_t          *foreach;",
          "",
          "[Added Lines]",
          "1327: static njs_int_t",
          "1328: njs_generate_for_let_update(njs_vm_t *vm, njs_generator_t *generator,",
          "1329:     njs_parser_node_t *node, size_t depth)",
          "1330: {",
          "1331:     njs_parser_node_t         *let;",
          "1332:     njs_vmcode_variable_t     *code_var;",
          "1333:     njs_variable_reference_t  *ref;",
          "1335:     if (node == NULL) {",
          "1336:         return NJS_OK;",
          "1337:     }",
          "1339:     if (depth >= NJS_GENERATE_MAX_DEPTH) {",
          "1340:         return NJS_ERROR;",
          "1341:     }",
          "1343:     if (node->token_type != NJS_TOKEN_STATEMENT) {",
          "1344:         return NJS_OK;",
          "1345:     }",
          "1347:     let = node->right;",
          "1349:     if (let->token_type != NJS_TOKEN_LET) {",
          "1350:         return NJS_OK;",
          "1351:     }",
          "1353:     ref = &let->left->u.reference;",
          "1355:     if (ref->variable->closure) {",
          "1356:         njs_generate_code(generator, njs_vmcode_variable_t, code_var,",
          "1357:                           NJS_VMCODE_LET_UPDATE, 0, let);",
          "1358:         code_var->dst = let->left->index;",
          "1359:     }",
          "1361:     return njs_generate_for_let_update(vm, generator, node->left, depth + 1);",
          "1362: }",
          "1365: static njs_int_t",
          "1366: njs_generate_for_resolve_closure(njs_vm_t *vm, njs_parser_node_t *node,",
          "1367:     size_t depth)",
          "1368: {",
          "1369:     njs_int_t       ret;",
          "1370:     njs_bool_t      closure;",
          "1371:     njs_variable_t  *var;",
          "1373:     if (node == NULL) {",
          "1374:         return NJS_OK;",
          "1375:     }",
          "1377:     if (node->token_type == NJS_TOKEN_NAME) {",
          "1378:         var = njs_variable_resolve(vm, node);",
          "1380:         if (njs_fast_path(var != NULL)) {",
          "1381:             closure = njs_variable_closure_test(node->scope, var->scope);",
          "1383:             if (closure) {",
          "1384:                 var->closure = 1;",
          "1385:             }",
          "1386:         }",
          "1387:     }",
          "1389:     if (depth >= NJS_GENERATE_MAX_DEPTH) {",
          "1390:         njs_range_error(vm, \"Maximum call stack size exceeded\");",
          "1391:         return NJS_ERROR;",
          "1392:     }",
          "1394:     ret = njs_generate_for_resolve_closure(vm, node->left, depth + 1);",
          "1395:     if (njs_slow_path(ret != NJS_OK)) {",
          "1396:         return ret;",
          "1397:     }",
          "1399:     ret = njs_generate_for_resolve_closure(vm, node->right, depth + 1);",
          "1400:     if (njs_slow_path(ret != NJS_OK)) {",
          "1401:         return ret;",
          "1402:     }",
          "1404:     return NJS_OK;",
          "1405: }",
          "1414:     njs_variable_t             *var;",
          "1416:     njs_parser_node_t          *foreach, *name;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1207:     foreach = node->left;",
          "1217:     }",
          "1219:     njs_generate_code(generator, njs_vmcode_prop_foreach_t, prop_foreach,",
          "",
          "[Removed Lines]",
          "1209:     ret = njs_generator(vm, generator, foreach->left);",
          "1210:     if (njs_slow_path(ret != NJS_OK)) {",
          "1211:         return ret;",
          "1212:     }",
          "1214:     ret = njs_generator(vm, generator, foreach->right);",
          "1215:     if (njs_slow_path(ret != NJS_OK)) {",
          "1216:         return ret;",
          "",
          "[Added Lines]",
          "1429:     name = foreach->left->right;",
          "1431:     if (name != NULL) {",
          "1432:         name = name->left;",
          "1434:         ret = njs_generate_variable_wo_dest(vm, generator, name,",
          "1435:                                             NJS_DECLARATION, &var);",
          "1436:         if (njs_slow_path(ret != NJS_OK)) {",
          "1437:             return NJS_ERROR;",
          "1438:         }",
          "1440:         foreach->left->index = name->index;",
          "1442:         ret = njs_generator(vm, generator, foreach->right);",
          "1443:         if (njs_slow_path(ret != NJS_OK)) {",
          "1444:             return ret;",
          "1445:         }",
          "1447:         var->init = 1;",
          "1449:     } else {",
          "1450:         ret = njs_generator(vm, generator, foreach->left);",
          "1451:         if (njs_slow_path(ret != NJS_OK)) {",
          "1452:             return ret;",
          "1453:         }",
          "1455:         ret = njs_generator(vm, generator, foreach->right);",
          "1456:         if (njs_slow_path(ret != NJS_OK)) {",
          "1457:             return ret;",
          "1458:         }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1242:     njs_generate_patch_block(vm, generator, generator->block->continuation);",
          "1244:     njs_code_set_jump_offset(generator, njs_vmcode_prop_foreach_t, prop_offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1484:     if (name != NULL) {",
          "1485:         ret = njs_generate_for_let_update(vm, generator, foreach->left,",
          "1486:                                           generator->count);",
          "1487:         if (njs_slow_path(ret != NJS_OK)) {",
          "1488:             return ret;",
          "1489:         }",
          "1490:     }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1564: njs_generate_statement(njs_vm_t *vm, njs_generator_t *generator,",
          "1565:     njs_parser_node_t *node)",
          "1566: {",
          "1569:     ret = njs_generate_children(vm, generator, node);",
          "1571:     if (njs_fast_path(ret == NJS_OK)) {",
          "1573:     }",
          "1575:     return ret;",
          "",
          "[Removed Lines]",
          "1567:     njs_int_t  ret;",
          "1572:         return njs_generate_node_index_release(vm, generator, node->right);",
          "",
          "[Added Lines]",
          "1817:     njs_int_t              ret;",
          "1818:     njs_variable_t         *var;",
          "1819:     njs_parser_node_t      *right;",
          "1820:     njs_vmcode_variable_t  *code;",
          "1822:     right = node->right;",
          "1824:     if (right != NULL && right->token_type == NJS_TOKEN_NAME) {",
          "1825:         var = njs_variable_reference(vm, right);",
          "1826:         if (njs_slow_path(var == NULL)) {",
          "1827:             goto statement;",
          "1828:         }",
          "1830:         if (!var->init && var->type == NJS_VARIABLE_LET) {",
          "1831:             njs_generate_code(generator, njs_vmcode_variable_t, code,",
          "1832:                               NJS_VMCODE_INITIALIZATION_TEST, 0, right);",
          "1833:             code->dst = right->index;",
          "1834:         }",
          "1836:         if (node->left == NULL) {",
          "1837:             return NJS_OK;",
          "1838:         }",
          "1840:         node = node->left;",
          "1841:     }",
          "1843: statement:",
          "1848:         return njs_generate_node_index_release(vm, generator, right);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3311: njs_generate_dest_index(njs_vm_t *vm, njs_generator_t *generator,",
          "3312:     njs_parser_node_t *node)",
          "3313: {",
          "3317:     ret = njs_generate_children_indexes_release(vm, generator, node);",
          "3318:     if (njs_slow_path(ret != NJS_OK)) {",
          "",
          "[Removed Lines]",
          "3314:     njs_index_t        ret;",
          "3315:     njs_parser_node_t  *dest;",
          "",
          "[Added Lines]",
          "3590:     njs_index_t         ret;",
          "3591:     njs_parser_node_t   *dest;",
          "3592:     njs_parser_scope_t  *scope;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3322:     dest = node->dest;",
          "3324:     if (dest != NULL && dest->index != NJS_INDEX_NONE) {",
          "3326:     }",
          "3328:     return njs_generate_node_temp_index_get(vm, generator, node);",
          "",
          "[Removed Lines]",
          "3325:         return dest->index;",
          "",
          "[Added Lines]",
          "3602:         scope = njs_function_scope(node->scope);",
          "3604:         if (!scope->dest_disable) {",
          "3605:             return dest->index;",
          "3606:         }",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3386:         return NJS_ERROR;",
          "3387:     }",
          "3390: }",
          "",
          "[Removed Lines]",
          "3389:     return njs_scope_index(scope->type, scope->temp++, NJS_LEVEL_TEMP);",
          "",
          "[Added Lines]",
          "3670:     return njs_scope_index(scope->type, scope->temp++, NJS_LEVEL_TEMP,",
          "3671:                            NJS_VARIABLE_VAR);",
          "",
          "---------------"
        ],
        "src/njs_module.c||src/njs_module.c": [
          "File: src/njs_module.c -> src/njs_module.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:     scope = njs_parser_global_scope(parser);",
          "575:     vm = parser->vm;",
          "578:     scope->items++;",
          "580:     if (vm->modules == NULL) {",
          "",
          "[Removed Lines]",
          "577:     module->index = njs_scope_index(scope->type, scope->items, NJS_LEVEL_LOCAL);",
          "",
          "[Added Lines]",
          "577:     module->index = njs_scope_index(scope->type, scope->items, NJS_LEVEL_LOCAL,",
          "578:                                     NJS_VARIABLE_VAR);",
          "",
          "---------------"
        ],
        "src/njs_parser.c||src/njs_parser.c": [
          "File: src/njs_parser.c -> src/njs_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238: static njs_int_t njs_parser_statement_list_item(njs_parser_t *parser,",
          "239:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "241: static njs_int_t njs_parser_variable_statement(njs_parser_t *parser,",
          "242:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "243: static njs_int_t njs_parser_variable_declaration_list(njs_parser_t *parser,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: static njs_int_t njs_parser_lexical_declaration(njs_parser_t *parser,",
          "242:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287: static njs_int_t njs_parser_iteration_statement_for_map(njs_parser_t *parser,",
          "288:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "289: static njs_int_t njs_parser_for_var_binding_or_var_list(njs_parser_t *parser,",
          "291: static njs_int_t njs_parser_for_var_in_statement(njs_parser_t *parser,",
          "292:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "293: static njs_int_t njs_parser_for_var_in_statement_after(njs_parser_t *parser,",
          "",
          "[Removed Lines]",
          "290:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "",
          "[Added Lines]",
          "292:     njs_lexer_token_t *token, njs_queue_link_t *current,",
          "293:     njs_token_type_t token_type);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "311:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "312: static njs_int_t njs_parser_switch_block(njs_parser_t *parser,",
          "313:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "314: static njs_int_t njs_parser_switch_case(njs_parser_t *parser,",
          "315:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "316: static njs_int_t njs_parser_switch_case_wo_def(njs_parser_t *parser,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317: static njs_int_t njs_parser_switch_block_after(njs_parser_t *parser,",
          "318:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "362:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "363: static njs_int_t njs_parser_catch_parenthesis(njs_parser_t *parser,",
          "364:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "365: static njs_int_t njs_parser_catch_finally(njs_parser_t *parser,",
          "366:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "370: static njs_int_t njs_parser_catch_statement_open_brace(njs_parser_t *parser,",
          "371:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "506: njs_int_t",
          "507: njs_parser(njs_vm_t *vm, njs_parser_t *parser)",
          "508: {",
          "512:     parser->vm = vm;",
          "",
          "[Removed Lines]",
          "509:     njs_int_t          ret;",
          "510:     njs_lexer_token_t  *token;",
          "",
          "[Added Lines]",
          "516:     njs_int_t                        ret;",
          "517:     njs_str_t                        str;",
          "518:     njs_lexer_token_t                *token;",
          "519:     const njs_lexer_keyword_entry_t  *keyword;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "526:         parser->ret = NJS_OK;",
          "527:     }",
          "529:     njs_queue_init(&parser->stack);",
          "531:     parser->target = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "539:     njs_string_get(&njs_string_undefined, &str);",
          "541:     keyword = njs_lexer_keyword(str.start, str.length);",
          "542:     if (njs_slow_path(keyword == NULL)) {",
          "543:         return NJS_ERROR;",
          "544:     }",
          "546:     parser->undefined_id = (uintptr_t) keyword->value;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "645:                 return NJS_ERROR;",
          "646:             }",
          "649:         }",
          "650:     }",
          "",
          "[Removed Lines]",
          "648:             var->index = njs_scope_index(type, 0, NJS_LEVEL_LOCAL);",
          "",
          "[Added Lines]",
          "667:             var->index = njs_scope_index(type, 0, NJS_LEVEL_LOCAL,",
          "668:                                          NJS_VARIABLE_VAR);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "736: }",
          "747: static njs_int_t",
          "748: njs_parser_function_or_generator(njs_parser_t *parser,",
          "749:     njs_lexer_token_t *token, njs_queue_link_t *current)",
          "",
          "[Removed Lines]",
          "739: static njs_int_t",
          "740: njs_parser_lexical_declaration(njs_parser_t *parser, njs_lexer_token_t *token,",
          "741:     njs_queue_link_t *current)",
          "742: {",
          "743:     return njs_parser_not_supported(parser, token);",
          "744: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "892: static njs_int_t",
          "894:     njs_lexer_token_t *token, njs_queue_link_t *current)",
          "895: {",
          "896:     parser->node->token_line = (uint32_t) (uintptr_t) parser->target;",
          "897:     parser->target = NULL;",
          "899:     return njs_parser_stack_pop(parser);",
          "900: }",
          "",
          "[Removed Lines]",
          "893: njs_parser_set_line_state(njs_parser_t *parser,",
          "",
          "[Added Lines]",
          "905: njs_parser_iteration_statement_for_end(njs_parser_t *parser,",
          "911:     njs_parser_scope_end(parser);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4534:     switch (token->type) {",
          "4535:     case NJS_TOKEN_CLASS:",
          "4536:         njs_parser_next(parser, njs_parser_class_declaration);",
          "4539:     case NJS_TOKEN_LET:",
          "4540:     case NJS_TOKEN_CONST:",
          "",
          "[Removed Lines]",
          "4537:         break;",
          "",
          "[Added Lines]",
          "4551:         return NJS_OK;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4570:         return NJS_DECLINED;",
          "4571:     }",
          "4574: }",
          "",
          "[Removed Lines]",
          "4573:     return NJS_OK;",
          "",
          "[Added Lines]",
          "4587:     return njs_parser_after(parser, current, parser->node, 1,",
          "4588:                             njs_parser_statement_after);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4732: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4753: static njs_int_t",
          "4754: njs_parser_lexical_declaration(njs_parser_t *parser, njs_lexer_token_t *token,",
          "4755:     njs_queue_link_t *current)",
          "4756: {",
          "4757:     parser->var_type = (token->type == NJS_TOKEN_LET) ? NJS_VARIABLE_LET",
          "4758:                                                       : NJS_VARIABLE_CONST;",
          "4760:     njs_lexer_consume_token(parser->lexer, 1);",
          "4762:     njs_parser_next(parser, njs_parser_variable_declaration_list);",
          "4764:     return njs_parser_after(parser, current, NULL, 1, njs_parser_semicolon);",
          "4765: }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4739: njs_parser_variable_statement(njs_parser_t *parser, njs_lexer_token_t *token,",
          "4740:     njs_queue_link_t *current)",
          "4741: {",
          "4742:     njs_parser_next(parser, njs_parser_variable_declaration_list);",
          "4744:     return njs_parser_after(parser, current, NULL, 1, njs_parser_semicolon);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4775:     parser->var_type = NJS_VARIABLE_VAR;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4789: {",
          "4790:     njs_int_t          ret;",
          "4791:     njs_variable_t     *var;",
          "4792:     njs_parser_node_t  *name;",
          "4794:     ret = njs_parser_binding_pattern(parser, token, current);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4827:     njs_token_type_t   type;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4807:         return NJS_DONE;",
          "4808:     }",
          "4811:                                     &var);",
          "4812:     if (name == NULL) {",
          "4813:         return NJS_ERROR;",
          "4814:     }",
          "4816:     if (var->self) {",
          "4818:         var->self = 0;",
          "4819:     }",
          "",
          "[Removed Lines]",
          "4810:     name = njs_parser_variable_node(parser, token->unique_id, NJS_VARIABLE_VAR,",
          "4817:         var->type = NJS_VARIABLE_VAR;",
          "",
          "[Added Lines]",
          "4846:     name = njs_parser_variable_node(parser, token->unique_id, parser->var_type,",
          "4853:         var->type = parser->var_type;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4829:         return NJS_ERROR;",
          "4830:     }",
          "4833:     if (ret != NJS_OK) {",
          "4834:         return ret;",
          "4835:     }",
          "",
          "[Removed Lines]",
          "4832:     ret = njs_parser_initializer_assign(parser, NJS_TOKEN_VAR);",
          "",
          "[Added Lines]",
          "4868:     switch (parser->var_type) {",
          "4869:     case NJS_VARIABLE_LET:",
          "4870:         type = NJS_TOKEN_LET;",
          "4871:         break;",
          "4873:     case NJS_VARIABLE_CONST:",
          "4874:         type = NJS_TOKEN_CONST;",
          "4875:         break;",
          "4877:     default:",
          "4878:         type = NJS_TOKEN_VAR;",
          "4879:         break;",
          "4880:     }",
          "4882:     ret = njs_parser_initializer_assign(parser, type);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4930:             return NJS_ERROR;",
          "4931:         }",
          "4933:         if (token->type == NJS_TOKEN_OPEN_BRACKET) {",
          "4934:             return njs_parser_failed(parser);",
          "4935:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4983:         if (token->type == NJS_TOKEN_NAME) {",
          "4984:             njs_parser_syntax_error(parser, \"let declaration cannot appear \"",
          "4985:                                             \"in a single-statement context\");",
          "4986:             return NJS_DONE;",
          "4987:         }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5172: njs_parser_iteration_statement_for(njs_parser_t *parser,",
          "5173:     njs_lexer_token_t *token, njs_queue_link_t *current)",
          "5174: {",
          "5175:     if (token->type == NJS_TOKEN_OPEN_PARENTHESIS) {",
          "5176:         njs_lexer_consume_token(parser->lexer, 1);",
          "5178:         njs_parser_next(parser, njs_parser_iteration_statement_for_map);",
          "5180:         return njs_parser_after(parser, current,",
          "5181:                                 (void *) (uintptr_t) parser->line, 1,",
          "5183:     }",
          "5185:     if (token->type == NJS_TOKEN_AWAIT) {",
          "",
          "[Removed Lines]",
          "5182:                                 njs_parser_set_line_state);",
          "",
          "[Added Lines]",
          "5231:     njs_int_t  ret;",
          "5236:         ret = njs_parser_scope_begin(parser, NJS_SCOPE_BLOCK, 0);",
          "5237:         if (njs_slow_path(ret != NJS_OK)) {",
          "5238:             return ret;",
          "5239:         }",
          "5245:                                 njs_parser_iteration_statement_for_end);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "5194: njs_parser_iteration_statement_for_map(njs_parser_t *parser,",
          "5195:     njs_lexer_token_t *token, njs_queue_link_t *current)",
          "5196: {",
          "",
          "[Removed Lines]",
          "5197:     njs_int_t  ret;",
          "5198:     njs_str_t  *text;",
          "",
          "[Added Lines]",
          "5260:     njs_int_t         ret;",
          "5261:     njs_str_t         *text;",
          "5262:     njs_token_type_t  token_type;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "5242:         return NJS_OK;",
          "5244:     case NJS_TOKEN_VAR:",
          "5245:         token = njs_lexer_peek_token(parser->lexer, token, 0);",
          "5246:         if (token == NULL) {",
          "5247:             return NJS_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5309:     case NJS_TOKEN_LET:",
          "5310:         token_type = token->type;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "5250:         njs_lexer_consume_token(parser->lexer, 1);",
          "5253:         if (ret != NJS_OK) {",
          "5254:             if (ret == NJS_DONE) {",
          "5255:                 return NJS_OK;",
          "",
          "[Removed Lines]",
          "5252:         ret = njs_parser_for_var_binding_or_var_list(parser, token, current);",
          "",
          "[Added Lines]",
          "5319:         ret = njs_parser_for_var_binding_or_var_list(parser, token,",
          "5320:                                                      current, token_type);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "5261:         break;",
          "5264:     case NJS_TOKEN_CONST:",
          "5265:         return njs_parser_not_supported(parser, token);",
          "",
          "[Removed Lines]",
          "5263:     case NJS_TOKEN_LET:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "5289: static njs_int_t",
          "5290: njs_parser_for_var_binding_or_var_list(njs_parser_t *parser,",
          "5292: {",
          "5297:     switch (token->type) {",
          "",
          "[Removed Lines]",
          "5291:     njs_lexer_token_t *token, njs_queue_link_t *current)",
          "5293:     njs_int_t          ret;",
          "5294:     njs_lexer_token_t  *next;",
          "5295:     njs_parser_node_t  *node, *var;",
          "",
          "[Added Lines]",
          "5358:     njs_lexer_token_t *token, njs_queue_link_t *current,",
          "5359:     njs_token_type_t token_type)",
          "5361:     njs_int_t            ret;",
          "5362:     njs_lexer_token_t    *next;",
          "5363:     njs_parser_node_t    *node, *var, *node_type, *statement;",
          "5364:     njs_variable_type_t  type;",
          "5366:     switch (token_type) {",
          "5367:     case NJS_TOKEN_LET:",
          "5368:         type = NJS_VARIABLE_LET;",
          "5369:         break;",
          "5371:     default:",
          "5372:         type = NJS_VARIABLE_VAR;",
          "5373:         break;",
          "5374:     }",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "5318:             }",
          "5320:             if (next->type != NJS_TOKEN_IN) {",
          "5321:                 njs_parser_next(parser, njs_parser_variable_declaration_list);",
          "5322:                 return NJS_OK;",
          "5323:             }",
          "5325:             var = njs_parser_variable_node(parser, token->unique_id,",
          "5327:             if (var == NULL) {",
          "5328:                 return NJS_ERROR;",
          "5329:             }",
          "5331:             var->token_line = token->line;",
          "5333:             parser->node = NULL;",
          "5335:             node = njs_parser_node_new(parser, NJS_TOKEN_IN);",
          "",
          "[Removed Lines]",
          "5326:                                             NJS_VARIABLE_VAR, NULL);",
          "",
          "[Added Lines]",
          "5400:                 parser->var_type = type;",
          "5406:             statement = njs_parser_node_new(parser, NJS_TOKEN_STATEMENT);",
          "5407:             if (njs_slow_path(statement == NULL)) {",
          "5408:                 return NJS_ERROR;",
          "5409:             }",
          "5411:             node_type = njs_parser_node_new(parser, token_type);",
          "5412:             if (njs_slow_path(node_type == NULL)) {",
          "5413:                 return NJS_ERROR;",
          "5414:             }",
          "5417:                                            type, NULL);",
          "5422:             node_type->token_line = token->line;",
          "5425:             statement->right = node_type;",
          "5426:             node_type->left = var;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "5338:             }",
          "5340:             node->token_line = next->line;",
          "5343:             njs_parser_next(parser, njs_parser_expression);",
          "",
          "[Removed Lines]",
          "5341:             node->left = var;",
          "",
          "[Added Lines]",
          "5435:             node->left = statement;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "5829: njs_parser_switch_block(njs_parser_t *parser, njs_lexer_token_t *token,",
          "5830:     njs_queue_link_t *current)",
          "5831: {",
          "5832:     if (token->type != NJS_TOKEN_OPEN_BRACE) {",
          "5833:         return njs_parser_failed(parser);",
          "5834:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5926:     njs_int_t  ret;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "5838:     parser->target->left = parser->node;",
          "5840:     njs_parser_next(parser, njs_parser_switch_case);",
          "5843: }",
          "",
          "[Removed Lines]",
          "5842:     return NJS_OK;",
          "",
          "[Added Lines]",
          "5936:     ret = njs_parser_scope_begin(parser, NJS_SCOPE_BLOCK, 0);",
          "5937:     if (ret != NJS_OK) {",
          "5938:         return NJS_ERROR;",
          "5939:     }",
          "5943:     return njs_parser_after(parser, current, NULL, 1,",
          "5944:                             njs_parser_switch_block_after);",
          "5945: }",
          "5947: static njs_int_t",
          "5948: njs_parser_switch_block_after(njs_parser_t *parser, njs_lexer_token_t *token,",
          "5949:     njs_queue_link_t *current)",
          "5950: {",
          "5951:     njs_parser_scope_end(parser);",
          "5953:     return njs_parser_stack_pop(parser);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "6310: {",
          "6311:     njs_parser_node_t  *node;",
          "6315:     parser->target->right->right = parser->node;",
          "6317:     if (token->type == NJS_TOKEN_FINALLY) {",
          "",
          "[Removed Lines]",
          "6313:     njs_parser_scope_end(parser);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "6355:     parser->target->right->right = parser->node;",
          "6356:     parser->node = NULL;",
          "6360:     return njs_parser_after(parser, current, parser->target, 1,",
          "6361:                             njs_parser_catch_after);",
          "6362: }",
          "6365: static njs_int_t",
          "6366: njs_parser_catch_finally(njs_parser_t *parser, njs_lexer_token_t *token,",
          "6367:     njs_queue_link_t *current)",
          "",
          "[Removed Lines]",
          "6358:     njs_parser_next(parser, njs_parser_block_statement_open_brace);",
          "",
          "[Added Lines]",
          "6467:     njs_parser_next(parser, njs_parser_catch_statement_open_brace);",
          "6474: static njs_int_t",
          "6475: njs_parser_catch_statement_open_brace(njs_parser_t *parser,",
          "6476:     njs_lexer_token_t *token, njs_queue_link_t *current)",
          "6477: {",
          "6478:     void  *target;",
          "6480:     if (token->type != NJS_TOKEN_OPEN_BRACE) {",
          "6481:         return njs_parser_failed(parser);",
          "6482:     }",
          "6484:     parser->line = token->line;",
          "6486:     njs_lexer_consume_token(parser->lexer, 1);",
          "6488:     token = njs_lexer_token(parser->lexer, 0);",
          "6489:     if (token == NULL) {",
          "6490:         return NJS_ERROR;",
          "6491:     }",
          "6493:     target = (void *) (uintptr_t) parser->line;",
          "6494:     parser->node = NULL;",
          "6496:     if (token->type == NJS_TOKEN_CLOSE_BRACE) {",
          "6497:         parser->target = target;",
          "6499:         njs_parser_next(parser, njs_parser_block_statement_close_brace);",
          "6500:         return NJS_OK;",
          "6501:     }",
          "6503:     njs_parser_next(parser, njs_parser_statement_list);",
          "6505:     return njs_parser_after(parser, current, target, 0,",
          "6506:                             njs_parser_block_statement_close_brace);",
          "6507: }",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "6569:     var = (njs_variable_t *) parser->target;",
          "6571:     var->index = njs_scope_index(var->scope->type, var->scope->items,",
          "6573:     var->scope->items++;",
          "6575:     if (var->self) {",
          "",
          "[Removed Lines]",
          "6572:                                  NJS_LEVEL_LOCAL);",
          "",
          "[Added Lines]",
          "6717:                                  NJS_LEVEL_LOCAL, NJS_VARIABLE_VAR);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "6777:         arg->argument = 1;",
          "6779:         var->index = njs_scope_index(parser->scope->type, parser->scope->items,",
          "6781:         parser->scope->items++;",
          "6783:         lambda->self = var->index;",
          "",
          "[Removed Lines]",
          "6780:                                      NJS_LEVEL_LOCAL);",
          "",
          "[Added Lines]",
          "6925:                                      NJS_LEVEL_LOCAL, NJS_VARIABLE_VAR);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "6817:     var->index = njs_scope_index(var->scope->type, var->scope->items,",
          "6819:     var->scope->items++;",
          "6821:     parser->target->u.value.data.u.lambda->self = var->index;",
          "",
          "[Removed Lines]",
          "6818:                                  NJS_LEVEL_LOCAL);",
          "",
          "[Added Lines]",
          "6963:                                  NJS_LEVEL_LOCAL, NJS_VARIABLE_VAR);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "7476:     var->index = njs_scope_index(var->scope->type, var->scope->items,",
          "7478:     var->scope->items++;",
          "7480:     parser->node->u.value.data.u.lambda->self = var->index;",
          "",
          "[Removed Lines]",
          "7477:                                  NJS_LEVEL_LOCAL);",
          "",
          "[Added Lines]",
          "7622:                                  NJS_LEVEL_LOCAL, NJS_VARIABLE_VAR);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "7644:             token->unique_id = (uintptr_t) keyword->value;",
          "7646:         } else if (!scope->arrow_function) {",
          "7649:             var = njs_variable_scope_add(parser, scope, scope, token->unique_id,",
          "7650:                                          NJS_VARIABLE_VAR, index);",
          "",
          "[Removed Lines]",
          "7647:             index = njs_scope_index(scope->type, 0, NJS_LEVEL_LOCAL);",
          "",
          "[Added Lines]",
          "7792:             index = njs_scope_index(scope->type, 0, NJS_LEVEL_LOCAL,",
          "7793:                                     NJS_VARIABLE_VAR);",
          "",
          "---------------"
        ],
        "src/njs_parser.h||src/njs_parser.h": [
          "File: src/njs_parser.h -> src/njs_parser.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     njs_scope_t                     type:8;",
          "30:     uint8_t                         module;",
          "31:     uint8_t                         arrow_function;",
          "32: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     uint8_t                         dest_disable;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:     njs_parser_node_t               *node;",
          "77:     njs_parser_node_t               *target;",
          "78:     njs_parser_scope_t              *scope;",
          "79:     njs_int_t                       ret;",
          "80:     njs_bool_t                      strict_semicolon;",
          "81:     uint32_t                        line;",
          "82: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:     njs_variable_type_t             var_type;",
          "82:     uintptr_t                       undefined_id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109: njs_int_t njs_parser_module_lambda(njs_parser_t *parser,",
          "110:     njs_lexer_token_t *token, njs_queue_link_t *current);",
          "111: njs_variable_t *njs_variable_resolve(njs_vm_t *vm, njs_parser_node_t *node);",
          "112: njs_index_t njs_variable_index(njs_vm_t *vm, njs_parser_node_t *node);",
          "113: njs_bool_t njs_parser_has_side_effect(njs_parser_node_t *node);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114: njs_bool_t njs_variable_closure_test(njs_parser_scope_t *root,",
          "115:     njs_parser_scope_t *scope);",
          "",
          "---------------"
        ],
        "src/njs_scope.c||src/njs_scope.c": [
          "File: src/njs_scope.c -> src/njs_scope.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:         return NJS_INDEX_ERROR;",
          "21:     }",
          "24: }",
          "",
          "[Removed Lines]",
          "23:     return njs_scope_index(NJS_SCOPE_GLOBAL, scope->temp++, NJS_LEVEL_TEMP);",
          "",
          "[Added Lines]",
          "23:     return njs_scope_index(NJS_SCOPE_GLOBAL, scope->temp++, NJS_LEVEL_TEMP,",
          "24:                            NJS_VARIABLE_VAR);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:     vm->levels[NJS_LEVEL_STATIC] = vm->scope_absolute->start;",
          "108:     return *retval;",
          "109: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:                               NJS_VARIABLE_VAR);",
          "",
          "---------------"
        ],
        "src/njs_scope.h||src/njs_scope.h": [
          "File: src/njs_scope.h -> src/njs_scope.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #define _NJS_SCOPE_H_INCLUDED_",
          "13: #define NJS_SCOPE_VALUE_MAX     ((1 << (32 - NJS_SCOPE_VALUE_OFFSET)) - 1)",
          "16: #define NJS_INDEX_NONE          ((njs_index_t) 0)",
          "17: #define NJS_INDEX_ERROR         ((njs_index_t) -1)",
          "",
          "[Removed Lines]",
          "11: #define NJS_SCOPE_TYPE_SIZE     4",
          "12: #define NJS_SCOPE_VALUE_OFFSET  (NJS_SCOPE_TYPE_SIZE + 1)",
          "14: #define NJS_SCOPE_TYPE_MASK     ((NJS_SCOPE_VALUE_MAX) << NJS_SCOPE_TYPE_SIZE)",
          "",
          "[Added Lines]",
          "11: #define NJS_SCOPE_VAR_SIZE      4",
          "12: #define NJS_SCOPE_TYPE_OFFSET   (NJS_SCOPE_VAR_SIZE + 4)",
          "13: #define NJS_SCOPE_VALUE_OFFSET  (NJS_SCOPE_TYPE_OFFSET + 1)",
          "15: #define NJS_SCOPE_TYPE_MASK     ((NJS_SCOPE_VALUE_MAX) << NJS_SCOPE_VAR_SIZE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: njs_inline njs_index_t",
          "29: {",
          "30:     if (index > NJS_SCOPE_VALUE_MAX || type >= NJS_LEVEL_MAX",
          "31:         || (scope != NJS_SCOPE_GLOBAL && scope != NJS_SCOPE_FUNCTION))",
          "",
          "[Removed Lines]",
          "28: njs_scope_index(njs_scope_t scope, njs_index_t index, njs_level_type_t type)",
          "",
          "[Added Lines]",
          "29: njs_scope_index(njs_scope_t scope, njs_index_t index, njs_level_type_t type,",
          "30:                 njs_variable_type_t var_type)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "37:         type = NJS_LEVEL_GLOBAL;",
          "38:     }",
          "41: }",
          "44: njs_inline njs_level_type_t",
          "45: njs_scope_index_type(njs_index_t index)",
          "46: {",
          "48: }",
          "",
          "[Removed Lines]",
          "40:     return (index << NJS_SCOPE_VALUE_OFFSET) | type;",
          "47:     return (njs_level_type_t) (index & ~NJS_SCOPE_TYPE_MASK);",
          "",
          "[Added Lines]",
          "42:     return (index << NJS_SCOPE_VALUE_OFFSET) | (type << NJS_SCOPE_VAR_SIZE)",
          "43:             | var_type;",
          "44: }",
          "47: njs_inline njs_variable_type_t",
          "48: njs_scope_index_var(njs_index_t index)",
          "49: {",
          "50:     return (njs_variable_type_t) (index & ~NJS_SCOPE_TYPE_MASK);",
          "57:     return (njs_level_type_t) ((index >> NJS_SCOPE_VAR_SIZE)",
          "58:                                & ~NJS_SCOPE_TYPE_MASK);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "71:     value = njs_scope_value(vm, index);",
          "73:     if (!njs_is_valid(value)) {",
          "74:         njs_set_undefined(value);",
          "75:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:         if (njs_scope_index_var(index) == NJS_VARIABLE_LET) {",
          "86:             njs_reference_error(vm, \"cannot access to variable \"",
          "87:                                     \"before initialization\");",
          "88:             return NULL;",
          "89:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "115: njs_inline njs_index_t",
          "116: njs_scope_global_this_index()",
          "117: {",
          "119: }",
          "",
          "[Removed Lines]",
          "118:     return njs_scope_index(NJS_SCOPE_GLOBAL, 0, NJS_LEVEL_LOCAL);",
          "",
          "[Added Lines]",
          "135:     return njs_scope_index(NJS_SCOPE_GLOBAL, 0, NJS_LEVEL_LOCAL,",
          "136:                            NJS_VARIABLE_VAR);",
          "",
          "---------------"
        ],
        "src/njs_variable.c||src/njs_variable.c": [
          "File: src/njs_variable.c -> src/njs_variable.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:         root->items++;",
          "80:     }",
          "",
          "[Removed Lines]",
          "78:         var->index = njs_scope_index(root->type, root->items, NJS_LEVEL_LOCAL);",
          "",
          "[Added Lines]",
          "78:         var->index = njs_scope_index(root->type, root->items, NJS_LEVEL_LOCAL,",
          "79:                                      type);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:     njs_parser_scope_t       *root;",
          "178:     const njs_lexer_entry_t  *entry;",
          "184:     root = njs_variable_scope(scope, unique_id, &var, type);",
          "185:     if (njs_slow_path(root == NULL)) {",
          "186:         return NULL;",
          "187:     }",
          "189:     if (type == NJS_VARIABLE_FUNCTION) {",
          "190:         root = scope;",
          "191:     }",
          "",
          "[Removed Lines]",
          "180:     if (type != NJS_VARIABLE_VAR && type != NJS_VARIABLE_FUNCTION) {",
          "181:         return scope;",
          "182:     }",
          "",
          "[Added Lines]",
          "186:     switch (type) {",
          "187:     case NJS_VARIABLE_LET:",
          "188:         if (scope->type == NJS_SCOPE_GLOBAL",
          "189:             && parser->undefined_id == unique_id)",
          "190:         {",
          "191:             goto failed;",
          "192:         }",
          "194:         if (root != scope) {",
          "195:             return scope;",
          "196:         }",
          "198:         if (var != NULL && var->scope == root) {",
          "199:             if (var->self) {",
          "200:                 var->function = 0;",
          "201:                 return scope;",
          "202:             }",
          "204:             goto failed;",
          "205:         }",
          "207:         return scope;",
          "209:     case NJS_VARIABLE_VAR:",
          "210:     case NJS_VARIABLE_FUNCTION:",
          "211:         break;",
          "213:     default:",
          "214:         return scope;",
          "215:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "194:         return root;",
          "195:     }",
          "197:     if (var->original->type == NJS_SCOPE_BLOCK) {",
          "198:         if (type == NJS_VARIABLE_FUNCTION",
          "199:             || var->type == NJS_VARIABLE_FUNCTION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "225:     if (var->type == NJS_VARIABLE_LET) {",
          "226:         goto failed;",
          "227:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269:             return NULL;",
          "270:         }",
          "273:         root->items++;",
          "274:     }",
          "",
          "[Removed Lines]",
          "272:         var->index = njs_scope_index(root->type, root->items, NJS_LEVEL_LOCAL);",
          "",
          "[Added Lines]",
          "304:         var->index = njs_scope_index(root->type, root->items, NJS_LEVEL_LOCAL,",
          "305:                                      type);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "348: }",
          "352: njs_variable_closure_test(njs_parser_scope_t *root, njs_parser_scope_t *scope)",
          "353: {",
          "354:     if (root == scope) {",
          "",
          "[Removed Lines]",
          "351: static njs_bool_t",
          "",
          "[Added Lines]",
          "384: njs_bool_t",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "456:             index = njs_scope_index(root->type, root->closures->items,",
          "458:             if (njs_slow_path(index == NJS_INDEX_ERROR)) {",
          "459:                 return NJS_INDEX_ERROR;",
          "460:             }",
          "",
          "[Removed Lines]",
          "457:                                     NJS_LEVEL_CLOSURE);",
          "",
          "[Added Lines]",
          "490:                                     NJS_LEVEL_CLOSURE, var->type);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "493: njs_variable_t *",
          "494: njs_variable_reference(njs_vm_t *vm, njs_parser_node_t *node)",
          "495: {",
          "496:     njs_rbtree_node_t         *rb_node;",
          "497:     njs_parser_scope_t        *scope;",
          "498:     njs_parser_rbtree_node_t  *parse_node, ref_node;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "529:     njs_bool_t                closure;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "510:         }",
          "511:     }",
          "514:     ref->scope = node->scope;",
          "516:     ref_node.key = ref->unique_id;",
          "",
          "[Removed Lines]",
          "513:     ref->closure = njs_variable_closure_test(node->scope, ref->variable->scope);",
          "",
          "[Added Lines]",
          "547:     closure = njs_variable_closure_test(node->scope, ref->variable->scope);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "528:         return ref->variable;",
          "529:     }",
          "532:         node->index = ref->variable->index;",
          "534:         return ref->variable;",
          "535:     }",
          "537:     node->index = njs_variable_closure(vm, ref->variable, scope);",
          "538:     if (njs_slow_path(node->index == NJS_INDEX_ERROR)) {",
          "539:         return NULL;",
          "",
          "[Removed Lines]",
          "531:     if (!ref->closure) {",
          "",
          "[Added Lines]",
          "565:     if (!closure) {",
          "571:     ref->variable->closure = closure;",
          "",
          "---------------"
        ],
        "src/njs_variable.h||src/njs_variable.h": [
          "File: src/njs_variable.h -> src/njs_variable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:     njs_bool_t            argument;",
          "25:     njs_bool_t            arguments_object;",
          "26:     njs_bool_t            self;",
          "27:     njs_bool_t            function;",
          "29:     njs_parser_scope_t    *scope;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:     njs_bool_t            init;",
          "28:     njs_bool_t            closure;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     njs_variable_t        *variable;",
          "48:     njs_parser_scope_t    *scope;",
          "49:     njs_bool_t            not_defined;",
          "51: } njs_variable_reference_t;",
          "",
          "[Removed Lines]",
          "50:     njs_bool_t            closure;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/njs_vmcode.c||src/njs_vmcode.c": [
          "File: src/njs_vmcode.c -> src/njs_vmcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     njs_bool_t ctor);",
          "70: njs_int_t",
          "",
          "[Removed Lines]",
          "67: #define njs_vmcode_operand(vm, index)  njs_scope_valid_value(vm, index)",
          "",
          "[Added Lines]",
          "67: #define njs_vmcode_operand(vm, index, _retval)                                \\",
          "68:     do {                                                                      \\",
          "69:         _retval = njs_scope_valid_value(vm, index);                           \\",
          "70:         if (njs_slow_path(_retval == NULL)) {                                 \\",
          "71:             goto error;                                                       \\",
          "72:         }                                                                     \\",
          "73:     } while (0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87:     njs_property_next_t          *next;",
          "88:     njs_vmcode_finally_t         *finally;",
          "89:     njs_vmcode_generic_t         *vmcode;",
          "90:     njs_vmcode_move_arg_t        *move_arg;",
          "91:     njs_vmcode_prop_get_t        *get;",
          "92:     njs_vmcode_prop_set_t        *set;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:     njs_vmcode_variable_t        *var;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:         switch (vmcode->code.operands) {",
          "131:         case NJS_VMCODE_3OPERANDS:",
          "136:         case NJS_VMCODE_2OPERANDS:",
          "138:         }",
          "140:         op = vmcode->code.operation;",
          "",
          "[Removed Lines]",
          "132:             value2 = njs_vmcode_operand(vm, vmcode->operand3);",
          "137:             value1 = njs_vmcode_operand(vm, vmcode->operand2);",
          "",
          "[Added Lines]",
          "139:             njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "144:             njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:         if (op > NJS_VMCODE_NORET) {",
          "152:             if (op == NJS_VMCODE_MOVE) {",
          "156:                 pc += sizeof(njs_vmcode_move_t);",
          "",
          "[Removed Lines]",
          "153:                 retval = njs_vmcode_operand(vm, vmcode->operand1);",
          "",
          "[Added Lines]",
          "160:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:             if (op == NJS_VMCODE_PROPERTY_GET) {",
          "161:                 get = (njs_vmcode_prop_get_t *) pc;",
          "164:                 ret = njs_value_property(vm, value1, value2, retval);",
          "165:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "",
          "[Removed Lines]",
          "162:                 retval = njs_vmcode_operand(vm, get->value);",
          "",
          "[Added Lines]",
          "169:                 njs_vmcode_operand(vm, get->value, retval);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "190:                 njs_set_number(value1,",
          "191:                            num + (1 - 2 * ((op - NJS_VMCODE_INCREMENT) >> 1)));",
          "195:                 if (op & 1) {",
          "196:                     njs_set_number(retval, num);",
          "",
          "[Removed Lines]",
          "193:                 retval = njs_vmcode_operand(vm, vmcode->operand1);",
          "",
          "[Added Lines]",
          "200:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "205:             case NJS_VMCODE_GLOBAL_GET:",
          "206:                 get = (njs_vmcode_prop_get_t *) pc;",
          "209:                 ret = njs_value_property(vm, value1, value2, retval);",
          "210:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "",
          "[Removed Lines]",
          "207:                 retval = njs_vmcode_operand(vm, get->value);",
          "",
          "[Added Lines]",
          "214:                 njs_vmcode_operand(vm, get->value, retval);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "226:             case NJS_VMCODE_TRY_RETURN:",
          "230:                 try_return = (njs_vmcode_try_return_t *) pc;",
          "",
          "[Removed Lines]",
          "227:                 retval = njs_vmcode_operand(vm, vmcode->operand1);",
          "",
          "[Added Lines]",
          "234:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "266:                     goto error;",
          "267:                 }",
          "271:                 if (op == NJS_VMCODE_ADDITION) {",
          "272:                     if (njs_fast_path(njs_is_numeric(value1)",
          "",
          "[Removed Lines]",
          "269:                 retval = njs_vmcode_operand(vm, vmcode->operand1);",
          "",
          "[Added Lines]",
          "276:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "336:                 ret ^= op - NJS_VMCODE_EQUAL;",
          "339:                 njs_set_boolean(retval, ret);",
          "341:                 pc += sizeof(njs_vmcode_3addr_t);",
          "",
          "[Removed Lines]",
          "338:                 retval = njs_vmcode_operand(vm, vmcode->operand1);",
          "",
          "[Added Lines]",
          "345:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "373:                 num = njs_number(value1);",
          "376:                 pc += sizeof(njs_vmcode_3addr_t);",
          "378:                 switch (op) {",
          "",
          "[Removed Lines]",
          "375:                 retval = njs_vmcode_operand(vm, vmcode->operand1);",
          "",
          "[Added Lines]",
          "382:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "491:                 ret ^= op - NJS_VMCODE_STRICT_EQUAL;",
          "494:                 njs_set_boolean(retval, ret);",
          "496:                 pc += sizeof(njs_vmcode_3addr_t);",
          "",
          "[Removed Lines]",
          "493:                 retval = njs_vmcode_operand(vm, vmcode->operand1);",
          "",
          "[Added Lines]",
          "500:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "515:                     ret = sizeof(njs_vmcode_3addr_t);",
          "516:                 }",
          "521:                 pc += ret;",
          "",
          "[Removed Lines]",
          "518:                 retval = njs_vmcode_operand(vm, vmcode->operand1);",
          "",
          "[Added Lines]",
          "525:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "534:                 }",
          "536:                 num = njs_number(value1);",
          "539:                 switch (op) {",
          "540:                 case NJS_VMCODE_UNARY_NEGATION:",
          "",
          "[Removed Lines]",
          "537:                 retval = njs_vmcode_operand(vm, vmcode->operand1);",
          "",
          "[Added Lines]",
          "544:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "553:                 goto next;",
          "555:             case NJS_VMCODE_LOGICAL_NOT:",
          "557:                 njs_set_boolean(retval, !njs_is_true(value1));",
          "559:                 pc += sizeof(njs_vmcode_2addr_t);",
          "",
          "[Removed Lines]",
          "556:                 retval = njs_vmcode_operand(vm, vmcode->operand1);",
          "",
          "[Added Lines]",
          "563:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "605:                 break;",
          "606:             }",
          "609:             njs_release(vm, retval);",
          "",
          "[Removed Lines]",
          "608:             retval = njs_vmcode_operand(vm, vmcode->operand1);",
          "",
          "[Added Lines]",
          "615:             njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "619:                 hint = move_arg->dst;",
          "621:                 value1 = &native->arguments_offset[hint];",
          "",
          "[Removed Lines]",
          "622:                 value2 = njs_vmcode_operand(vm, move_arg->src);",
          "",
          "[Added Lines]",
          "629:                 njs_vmcode_operand(vm, move_arg->src, value2);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "627:                 break;",
          "629:             case NJS_VMCODE_STOP:",
          "631:                 vm->retval = *value2;",
          "633:                 return NJS_OK;",
          "",
          "[Removed Lines]",
          "630:                 value2 = njs_vmcode_operand(vm, (njs_index_t) value2);",
          "",
          "[Added Lines]",
          "637:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "639:             case NJS_VMCODE_PROPERTY_SET:",
          "640:                 set = (njs_vmcode_prop_set_t *) pc;",
          "643:                 ret = njs_value_property_set(vm, value1, value2, retval);",
          "644:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "",
          "[Removed Lines]",
          "641:                 retval = njs_vmcode_operand(vm, set->value);",
          "",
          "[Added Lines]",
          "648:                 njs_vmcode_operand(vm, set->value, retval);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "651:             case NJS_VMCODE_PROPERTY_ACCESSOR:",
          "652:                 accessor = (njs_vmcode_prop_accessor_t *) pc;",
          "655:                 ret = njs_value_to_key(vm, &name, value2);",
          "656:                 if (njs_slow_path(ret != NJS_OK)) {",
          "",
          "[Removed Lines]",
          "653:                 function = njs_vmcode_operand(vm, accessor->value);",
          "",
          "[Added Lines]",
          "660:                 njs_vmcode_operand(vm, accessor->value, function);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "694:             case NJS_VMCODE_PROPERTY_INIT:",
          "695:                 set = (njs_vmcode_prop_set_t *) pc;",
          "697:                 ret = njs_vmcode_property_init(vm, value1, value2, retval);",
          "698:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "699:                     goto error;",
          "",
          "[Removed Lines]",
          "696:                 retval = njs_vmcode_operand(vm, set->value);",
          "",
          "[Added Lines]",
          "703:                 njs_vmcode_operand(vm, set->value, retval);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "702:                 break;",
          "704:             case NJS_VMCODE_RETURN:",
          "706:                 return njs_vmcode_return(vm, NULL, value2);",
          "708:             case NJS_VMCODE_FUNCTION_COPY:",
          "",
          "[Removed Lines]",
          "705:                 value2 = njs_vmcode_operand(vm, (njs_index_t) value2);",
          "",
          "[Added Lines]",
          "712:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "763:             case NJS_VMCODE_FUNCTION_CALL:",
          "764:                 vm->active_frame->native.pc = pc;",
          "768:                 ret = njs_function_frame_invoke(vm, value2);",
          "769:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "",
          "[Removed Lines]",
          "766:                 value2 = njs_vmcode_operand(vm, (njs_index_t) value2);",
          "",
          "[Added Lines]",
          "773:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "776:             case NJS_VMCODE_PROPERTY_NEXT:",
          "777:                 pnext = (njs_vmcode_prop_next_t *) pc;",
          "780:                 next = value2->data.u.next;",
          "",
          "[Removed Lines]",
          "778:                 retval = njs_vmcode_operand(vm, pnext->retval);",
          "",
          "[Added Lines]",
          "785:                 retval = njs_scope_value(vm, pnext->retval);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "802:             case NJS_VMCODE_PROTO_INIT:",
          "803:                 set = (njs_vmcode_prop_set_t *) pc;",
          "805:                 ret = njs_vmcode_proto_init(vm, value1, value2, retval);",
          "806:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "807:                     goto error;",
          "",
          "[Removed Lines]",
          "804:                 retval = njs_vmcode_operand(vm, set->value);",
          "",
          "[Added Lines]",
          "811:                 njs_vmcode_operand(vm, set->value, retval);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "818:                 break;",
          "820:             case NJS_VMCODE_THROW:",
          "822:                 vm->retval = *value2;",
          "823:                 goto error;",
          "",
          "[Removed Lines]",
          "821:                 value2 = njs_vmcode_operand(vm, (njs_index_t) value2);",
          "",
          "[Added Lines]",
          "828:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "878:                 break;",
          "880:             case NJS_VMCODE_ERROR:",
          "881:                 njs_vmcode_error(vm, pc);",
          "882:                 goto error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "887:             case NJS_VMCODE_LET:",
          "888:                 var = (njs_vmcode_variable_t *) pc;",
          "889:                 value1 = njs_scope_value(vm, var->dst);",
          "891:                 if (njs_is_valid(value1)) {",
          "892:                     value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));",
          "893:                     if (njs_slow_path(value1 == NULL)) {",
          "894:                         return NJS_ERROR;",
          "895:                     }",
          "897:                     njs_scope_value_set(vm, var->dst, value1);",
          "898:                 }",
          "900:                 njs_set_undefined(value1);",
          "902:                 ret = sizeof(njs_vmcode_variable_t);",
          "903:                 break;",
          "905:             case NJS_VMCODE_LET_UPDATE:",
          "906:                 var = (njs_vmcode_variable_t *) pc;",
          "907:                 value2 = njs_scope_value(vm, var->dst);",
          "909:                 value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));",
          "910:                 if (njs_slow_path(value1 == NULL)) {",
          "911:                     return NJS_ERROR;",
          "912:                 }",
          "916:                 njs_scope_value_set(vm, var->dst, value1);",
          "918:                 ret = sizeof(njs_vmcode_variable_t);",
          "919:                 break;",
          "921:             case NJS_VMCODE_INITIALIZATION_TEST:",
          "922:                 var = (njs_vmcode_variable_t *) pc;",
          "923:                 value1 = njs_scope_value(vm, var->dst);",
          "925:                 if (njs_is_valid(value1)) {",
          "926:                     ret = sizeof(njs_vmcode_variable_t);",
          "927:                     break;",
          "928:                 }",
          "932:             case NJS_VMCODE_NOT_INITIALIZED:",
          "933:                 njs_reference_error(vm, \"cannot access to variable \"",
          "934:                                         \"before initialization\");",
          "935:                 goto error;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1037:     code = (njs_vmcode_arguments_t *) pc;",
          "1040:     njs_set_object(value, frame->native.arguments_object);",
          "1042:     return sizeof(njs_vmcode_arguments_t);",
          "",
          "[Removed Lines]",
          "1039:     value = njs_vmcode_operand(vm, code->dst);",
          "",
          "[Added Lines]",
          "1096:     value = njs_scope_valid_value(vm, code->dst);",
          "1097:     if (njs_slow_path(value == NULL)) {",
          "1098:         return NJS_ERROR;",
          "1099:     }",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1077:           .u.native = njs_string_prototype_concat",
          "1078:     };",
          "1082:     if (!njs_is_primitive(value)) {",
          "1083:         array = njs_array(value);",
          "",
          "[Removed Lines]",
          "1080:     value = njs_vmcode_operand(vm, (njs_index_t) retval);",
          "",
          "[Added Lines]",
          "1141:     value = njs_scope_valid_value(vm, (njs_index_t) retval);",
          "",
          "---------------"
        ],
        "src/njs_vmcode.h||src/njs_vmcode.h": [
          "File: src/njs_vmcode.h -> src/njs_vmcode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     NJS_VMCODE_TRY_END,",
          "58:     NJS_VMCODE_CATCH,",
          "59:     NJS_VMCODE_FINALLY,",
          "60:     NJS_VMCODE_ERROR,",
          "62:     NJS_VMCODE_NORET = 127",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61:     NJS_VMCODE_LET,",
          "62:     NJS_VMCODE_LET_UPDATE,",
          "63:     NJS_VMCODE_INITIALIZATION_TEST,",
          "64:     NJS_VMCODE_NOT_INITIALIZED,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "408: } njs_vmcode_function_copy_t;",
          "411: njs_int_t njs_vmcode_interpreter(njs_vm_t *vm, u_char *pc);",
          "413: njs_object_t *njs_function_new_object(njs_vm_t *vm, njs_value_t *constructor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417: typedef struct {",
          "418:     njs_vmcode_t               code;",
          "419:     njs_index_t                dst;",
          "420: } njs_vmcode_variable_t;",
          "",
          "---------------"
        ],
        "src/test/njs_benchmark.c||src/test/njs_benchmark.c": [
          "File: src/test/njs_benchmark.c -> src/test/njs_benchmark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:       njs_str(\"100000000\"),",
          "214:       1 },",
          "216:     { \"while loop 100M\",",
          "217:       njs_str(\"var i = 0; while (i < 100000000) { i++ }; i\"),",
          "218:       njs_str(\"100000000\"),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "216:     { \"for let loop 100M\",",
          "217:       njs_str(\"let i; for (i = 0; i < 100000000; i++); i\"),",
          "218:       njs_str(\"100000000\"),",
          "219:       1 },",
          "221:     { \"for let closures 1M\",",
          "222:       njs_str(\"let a = []; for (let i = 0; i < 1000000; i++) { a.push(() => i); }\"",
          "223:               \"a[5]()\"),",
          "224:       njs_str(\"5\"),",
          "225:       1 },",
          "",
          "---------------"
        ],
        "src/test/njs_unit_test.c||src/test/njs_unit_test.c": [
          "File: src/test/njs_unit_test.c -> src/test/njs_unit_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "19772:     { njs_str(\"var buffer = require('buffer');\"",
          "19773:               \"typeof buffer.constants.MAX_STRING_LENGTH === 'number' \"),",
          "19774:       njs_str(\"true\") },",
          "19775: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19778:     { njs_str(\"let x\"),",
          "19779:       njs_str(\"undefined\") },",
          "19781:     { njs_str(\"let x = 123; x\"),",
          "19782:       njs_str(\"123\") },",
          "19784:     { njs_str(\"let x = [123]; x\"),",
          "19785:       njs_str(\"123\") },",
          "19787:     { njs_str(\"let x = () => x; x()\"),",
          "19788:       njs_str(\"[object Function]\") },",
          "19790:     { njs_str(\"let x = (() => x)()\"),",
          "19791:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19793:     { njs_str(\"x; let x\"),",
          "19794:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19796:     { njs_str(\"x; let x = 123\"),",
          "19797:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19799:     { njs_str(\"let x = x + 123\"),",
          "19800:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19802:     { njs_str(\"let x = (x, 1)\"),",
          "19803:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19805:     { njs_str(\"let x = x\"),",
          "19806:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19808:     { njs_str(\"let x; var x\"),",
          "19809:       njs_str(\"SyntaxError: \\\"x\\\" has already been declared in 1\") },",
          "19811:     { njs_str(\"var x; let x\"),",
          "19812:       njs_str(\"SyntaxError: \\\"x\\\" has already been declared in 1\") },",
          "19814:     { njs_str(\"let x; function x() {}\"),",
          "19815:       njs_str(\"SyntaxError: \\\"x\\\" has already been declared in 1\") },",
          "19817:     { njs_str(\"function x() {} let x\"),",
          "19818:       njs_str(\"SyntaxError: \\\"x\\\" has already been declared in 1\") },",
          "19820:     { njs_str(\"function x() {let x; var x}\"),",
          "19821:       njs_str(\"SyntaxError: \\\"x\\\" has already been declared in 1\") },",
          "19823:     { njs_str(\"function x() {var x; let x}\"),",
          "19824:       njs_str(\"SyntaxError: \\\"x\\\" has already been declared in 1\") },",
          "19826:     { njs_str(\"var x = function f() {let f}\"),",
          "19827:       njs_str(\"undefined\") },",
          "19829:     { njs_str(\"let a; let x = 1;\"",
          "19830:               \"{let x = 2; a = x}\"",
          "19831:               \"[x, a]\"),",
          "19832:       njs_str(\"1,2\") },",
          "19834:     { njs_str(\"let a; let x = 1;\"",
          "19835:               \"if (true) {let x = 2; a = x}\"",
          "19836:               \"[x, a]\"),",
          "19837:       njs_str(\"1,2\") },",
          "19839:     { njs_str(\"var a = 5, b = 10, arr = [];\"",
          "19840:               \"{let a = 4; var b = 1; arr.push(a); arr.push(b)}\"",
          "19841:               \"arr.push(a); arr.push(b); arr\"),",
          "19842:       njs_str(\"4,1,5,1\") },",
          "19844:     { njs_str(\"function func() {return x}\"",
          "19845:               \"let x = 123;\"",
          "19846:               \"func()\"),",
          "19847:       njs_str(\"123\") },",
          "19849:     { njs_str(\"function func() {return x}\"",
          "19850:               \"func();\"",
          "19851:               \"let x = 123\"),",
          "19852:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19854:     { njs_str(\"function func() {return () => x}\"",
          "19855:               \"let x = 123;\"",
          "19856:               \"func()()\"),",
          "19857:       njs_str(\"123\") },",
          "19859:     { njs_str(\"function func() {x = x + 1; let x}\"),",
          "19860:       njs_str(\"undefined\") },",
          "19862:     { njs_str(\"function func() {return () => x}\"",
          "19863:               \"func()();\"",
          "19864:               \"let x = 123;\"),",
          "19865:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19867:     { njs_str(\"var arr = [];\"",
          "19868:               \"\"",
          "19869:               \"for (var i = 0; i < 10; i++) {\"",
          "19870:               \"    let x = i;\"",
          "19871:               \"\"",
          "19872:               \"    arr.push( (n) => {x += n; return x} );\"",
          "19873:               \"}\"",
          "19874:               \"\"",
          "19875:               \"[\"",
          "19876:               \"    arr[0](2), arr[1](1), arr[2](4), arr[3](7), arr[4](0),\"",
          "19877:               \"    arr[5](1), arr[6](2), arr[7](5), arr[8](8), arr[9](10)\"",
          "19878:               \"]\"),",
          "19879:       njs_str(\"2,2,6,10,4,6,8,12,16,19\") },",
          "19881:     { njs_str(\"var arr = [];\"",
          "19882:               \"\"",
          "19883:               \"for (let i = 0; i < 10; i++) {\"",
          "19884:               \"    arr.push( (n) => {i += n; return i} );\"",
          "19885:               \"}\"",
          "19886:               \"\"",
          "19887:               \"[\"",
          "19888:               \"    arr[0](2), arr[1](1), arr[2](4), arr[3](7), arr[4](0),\"",
          "19889:               \"    arr[5](1), arr[6](2), arr[7](5), arr[8](8), arr[9](10)\"",
          "19890:               \"]\"),",
          "19891:       njs_str(\"2,2,6,10,4,6,8,12,16,19\") },",
          "19893:     { njs_str(\"for (let i = 0; i < 1; i++) {\"",
          "19894:               \"    let i = i + 2;\"",
          "19895:               \"}\"),",
          "19896:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19898:     { njs_str(\"let arr = [], res = [];\"",
          "19899:               \"for (let i = 0, f = function() { return i }; i < 5; i++) {\"",
          "19900:               \"    arr.push(f);\"",
          "19901:               \"}\"",
          "19902:               \"for (let i = 0; i < 5; i++) {\"",
          "19903:               \"    res.push(arr[i]());\"",
          "19904:               \"} res\"),",
          "19905:       njs_str(\"0,0,0,0,0\") },",
          "19907:     { njs_str(\"let arr = [], res = [];\"",
          "19908:               \"for (let i = 0; arr.push(() => i), i < 10; i++) {}\"",
          "19909:               \"for (let k = 0; k < 10; k++) {res.push(arr[k]())}\"",
          "19910:               \"res\"),",
          "19911:       njs_str(\"0,1,2,3,4,5,6,7,8,9\") },",
          "19913:     { njs_str(\"let res = [];\"",
          "19914:               \"for (let n in [1,2,3]) {res.push(n)}\"",
          "19915:               \"res\"),",
          "19916:       njs_str(\"0,1,2\") },",
          "19918:     { njs_str(\"let arr = [], res = [];\"",
          "19919:               \"\"",
          "19920:               \"for (let n in [1,2,3]) {\"",
          "19921:               \"    arr.push(() => n);\"",
          "19922:               \"}\"",
          "19923:               \"\"",
          "19924:               \"for (let n in arr) {\"",
          "19925:               \"    res.push(arr[n]());\"",
          "19926:               \"}\"",
          "19927:               \"res\"),",
          "19928:       njs_str(\"0,1,2\") },",
          "19930:     { njs_str(\"let arr = [];\"",
          "19931:               \"\"",
          "19932:               \"for (let n in [1,2,3]) {\"",
          "19933:               \"    let n = 1;\"",
          "19934:               \"    arr.push(n);\"",
          "19935:               \"}\"",
          "19936:               \"arr\"),",
          "19937:       njs_str(\"1,1,1\") },",
          "19939:     { njs_str(\"for (let n in [1,2,3]) {\"",
          "19940:               \"    let n = n + 1;\"",
          "19941:               \"}\"),",
          "19942:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19944:     { njs_str(\"for (let n in [1,2,3]) {}\"",
          "19945:               \"n\"),",
          "19946:       njs_str(\"ReferenceError: \\\"n\\\" is not defined\") },",
          "19948:     { njs_str(\"for (let n in [1,n,3]) {}\"),",
          "19949:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19951:     { njs_str(\"(function() {\"",
          "19952:               \"function f() {return x + 1}\"",
          "19953:               \"function abc() {f()};\"",
          "19954:               \"abc();\"",
          "19955:               \"let x;\"",
          "19956:               \"}())\"),",
          "19957:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19959:     { njs_str(\"function func() {var x = 1; {let x = x + 1} } func()\"),",
          "19960:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19962:     { njs_str(\"if (false) let x = 1\"),",
          "19963:       njs_str(\"SyntaxError: let declaration cannot appear in a single-statement context in 1\") },",
          "19965:     { njs_str(\"while (false) let x = 1\"),",
          "19966:       njs_str(\"SyntaxError: let declaration cannot appear in a single-statement context in 1\") },",
          "19968:     { njs_str(\"for (;;) let x = 1\"),",
          "19969:       njs_str(\"SyntaxError: let declaration cannot appear in a single-statement context in 1\") },",
          "19971:     { njs_str(\"try {} catch (e) {let e}\"),",
          "19972:       njs_str(\"SyntaxError: \\\"e\\\" has already been declared in 1\") },",
          "19974:     { njs_str(\"let arr = [], x = 2;\"",
          "19975:               \"switch(true) {default: let x = 1; arr.push(x)}\"",
          "19976:               \"arr.push(x); arr\"),",
          "19977:       njs_str(\"1,2\") },",
          "19979:     { njs_str(\"switch(true) {case false: let x = 1; default: x = 2}\"),",
          "19980:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "19982:     { njs_str(\"let res;\"",
          "19983:               \"switch(true) {case true: let x = 1; default: x = 2; res = x} res\"),",
          "19984:       njs_str(\"2\") },",
          "19986:     { njs_str(\"let null\"),",
          "19987:       njs_str(\"SyntaxError: Unexpected token \\\"null\\\" in 1\") },",
          "19989:     { njs_str(\"let continue\"),",
          "19990:       njs_str(\"SyntaxError: Unexpected token \\\"continue\\\" in 1\") },",
          "19992:     { njs_str(\"let undefined\"),",
          "19993:       njs_str(\"SyntaxError: \\\"undefined\\\" has already been declared in 1\") },",
          "19995:     { njs_str(\"let a = 1; globalThis.a\"),",
          "19996:       njs_str(\"undefined\") },",
          "19998:     { njs_str(\"if (false) {x = 2} else {x = 1} let x;\"),",
          "19999:       njs_str(\"ReferenceError: cannot access to variable before initialization\") },",
          "20001:     { njs_str(\"let let\"),",
          "20002:       njs_str(\"SyntaxError: Unexpected token \\\"let\\\" in 1\") },",
          "20004:     { njs_str(\"let null\"),",
          "20005:       njs_str(\"SyntaxError: Unexpected token \\\"null\\\" in 1\") },",
          "20007:     { njs_str(\"function let() {}\"),",
          "20008:       njs_str(\"SyntaxError: Unexpected token \\\"let\\\" in 1\") },",
          "20010:     { njs_str(\"function static() {}\"),",
          "20011:       njs_str(\"SyntaxError: Unexpected token \\\"static\\\" in 1\") },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4de9298c33203236a5bc2243f6065f2af7c8dee8",
      "candidate_info": {
        "commit_hash": "4de9298c33203236a5bc2243f6065f2af7c8dee8",
        "repo": "nginx/njs",
        "commit_url": "https://github.com/nginx/njs/commit/4de9298c33203236a5bc2243f6065f2af7c8dee8",
        "files": [
          "auto/clang",
          "auto/computed_goto",
          "auto/help",
          "auto/options",
          "auto/summary",
          "configure",
          "src/njs_clang.h",
          "src/njs_disassembler.c",
          "src/njs_parser.c",
          "src/njs_vmcode.c",
          "src/njs_vmcode.h"
        ],
        "message": "Computed goto support added to vmcode.",
        "before_after_code_files": [
          "src/njs_clang.h||src/njs_clang.h",
          "src/njs_disassembler.c||src/njs_disassembler.c",
          "src/njs_parser.c||src/njs_parser.c",
          "src/njs_vmcode.c||src/njs_vmcode.c",
          "src/njs_vmcode.h||src/njs_vmcode.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/njs_vmcode.c||src/njs_vmcode.c"
          ],
          "candidate": [
            "src/njs_vmcode.c||src/njs_vmcode.c"
          ]
        }
      },
      "candidate_diff": {
        "src/njs_clang.h||src/njs_clang.h": [
          "File: src/njs_clang.h -> src/njs_clang.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "146: #endif",
          "149: #if (NJS_HAVE_GCC_ATTRIBUTE_MALLOC)",
          "150: #define NJS_MALLOC_LIKE    __attribute__((__malloc__))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: #if (NJS_HAVE_GCC_ATTRIBUTE_FALLTHROUGH)",
          "150: #define NJS_FALLTHROUGH    __attribute__((fallthrough))",
          "152: #else",
          "153: #define NJS_FALLTHROUGH",
          "154: #endif",
          "",
          "---------------"
        ],
        "src/njs_disassembler.c||src/njs_disassembler.c": [
          "File: src/njs_disassembler.c -> src/njs_disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:           njs_str(\"OBJECT          \") },",
          "24:     { NJS_VMCODE_FUNCTION, sizeof(njs_vmcode_function_t),",
          "25:           njs_str(\"FUNCTION        \") },",
          "28:     { NJS_VMCODE_ARGUMENTS, sizeof(njs_vmcode_arguments_t),",
          "29:           njs_str(\"ARGUMENTS       \") },",
          "30:     { NJS_VMCODE_REGEXP, sizeof(njs_vmcode_regexp_t),",
          "",
          "[Removed Lines]",
          "26:     { NJS_VMCODE_THIS, sizeof(njs_vmcode_this_t),",
          "27:           njs_str(\"THIS            \") },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/njs_parser.c||src/njs_parser.c": [
          "File: src/njs_parser.c -> src/njs_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4527:     njs_parser_next(parser, njs_parser_assignment_expression);",
          "4529:     return njs_parser_expression_node(parser, token, current, NJS_TOKEN_COMMA,",
          "4531:                                        njs_parser_expression_comma);",
          "4532: }",
          "",
          "[Removed Lines]",
          "4530:                                        NJS_VMCODE_NOP,",
          "",
          "[Added Lines]",
          "4530:                                        0,",
          "",
          "---------------"
        ],
        "src/njs_vmcode.c||src/njs_vmcode.c": [
          "File: src/njs_vmcode.c -> src/njs_vmcode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:     njs_vmcode_variable_t        *var;",
          "109:     njs_vmcode_prop_get_t        *get;",
          "110:     njs_vmcode_prop_set_t        *set;",
          "112:     njs_vmcode_prop_next_t       *pnext;",
          "113:     njs_vmcode_test_jump_t       *test_jump;",
          "114:     njs_vmcode_equal_jump_t      *equal;",
          "",
          "[Removed Lines]",
          "111:     njs_vmcode_operation_t       op;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "122:     njs_vmcode_debug(vm, pc, \"ENTER\");",
          "184:             }",
          "212:             }",
          "646:                 goto error;",
          "647:             }",
          "651:             }",
          "657:         } else {",
          "971:                 goto error;",
          "1081:                 goto error;",
          "1085:                 goto error;",
          "1089:                 goto error;",
          "1093:                 goto error;",
          "1094:             }",
          "1095:         }",
          "1098:     }",
          "1100: error:",
          "",
          "[Removed Lines]",
          "124: next:",
          "126:     for ( ;; ) {",
          "128:         vmcode = (njs_vmcode_generic_t *) pc;",
          "146:         value2 = (njs_value_t *) vmcode->operand1;",
          "147:         value1 = NULL;",
          "149:         switch (vmcode->code.operands) {",
          "151:         case NJS_VMCODE_3OPERANDS:",
          "152:             njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "156:         case NJS_VMCODE_2OPERANDS:",
          "157:             njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "158:         }",
          "160:         op = vmcode->code.operation;",
          "170: #ifdef NJS_DEBUG_OPCODE",
          "171:         if (vm->options.opcode_debug) {",
          "172:             njs_disassemble(pc, NULL, 1, NULL);",
          "173:         }",
          "174: #endif",
          "176:         if (op > NJS_VMCODE_NORET) {",
          "178:             if (op == NJS_VMCODE_MOVE) {",
          "179:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "182:                 pc += sizeof(njs_vmcode_move_t);",
          "183:                 goto next;",
          "186:             if (op == NJS_VMCODE_PROPERTY_GET) {",
          "187:                 get = (njs_vmcode_prop_get_t *) pc;",
          "188:                 njs_vmcode_operand(vm, get->value, retval);",
          "190:                 if (njs_slow_path(!njs_is_index_or_key(value2))) {",
          "191:                     if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "192:                         (void) njs_throw_cannot_property(vm, value1, value2,",
          "193:                                                          \"get\");",
          "194:                         goto error;",
          "195:                     }",
          "197:                     ret = njs_value_to_key(vm, &primitive1, value2);",
          "198:                     if (njs_slow_path(ret != NJS_OK)) {",
          "199:                         goto error;",
          "200:                     }",
          "202:                     value2 = &primitive1;",
          "203:                 }",
          "205:                 ret = njs_value_property(vm, value1, value2, retval);",
          "206:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "207:                     goto error;",
          "208:                 }",
          "210:                 pc += sizeof(njs_vmcode_prop_get_t);",
          "211:                 goto next;",
          "214:             switch (op) {",
          "215:             case NJS_VMCODE_INCREMENT:",
          "216:             case NJS_VMCODE_POST_INCREMENT:",
          "217:             case NJS_VMCODE_DECREMENT:",
          "218:             case NJS_VMCODE_POST_DECREMENT:",
          "219:                 if (njs_slow_path(!njs_is_numeric(value2))) {",
          "220:                     ret = njs_value_to_numeric(vm, value2, &numeric1);",
          "221:                     if (njs_slow_path(ret != NJS_OK)) {",
          "222:                         goto error;",
          "223:                     }",
          "225:                     num = njs_number(&numeric1);",
          "227:                 } else {",
          "228:                     num = njs_number(value2);",
          "229:                 }",
          "231:                 njs_set_number(value1,",
          "232:                            num + (1 - 2 * ((op - NJS_VMCODE_INCREMENT) >> 1)));",
          "234:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "236:                 if (op & 1) {",
          "237:                     njs_set_number(retval, num);",
          "239:                 } else {",
          "241:                 }",
          "243:                 pc += sizeof(njs_vmcode_3addr_t);",
          "244:                 goto next;",
          "246:             case NJS_VMCODE_GLOBAL_GET:",
          "247:                 get = (njs_vmcode_prop_get_t *) pc;",
          "248:                 njs_vmcode_operand(vm, get->value, retval);",
          "250:                 ret = njs_value_property(vm, value1, value2, retval);",
          "251:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "252:                     goto error;",
          "253:                 }",
          "255:                 pc += sizeof(njs_vmcode_prop_get_t);",
          "257:                 if (ret == NJS_OK) {",
          "258:                     pc += sizeof(njs_vmcode_error_t);",
          "259:                 }",
          "261:                 goto next;",
          "267:             case NJS_VMCODE_TRY_RETURN:",
          "268:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "271:                 try_return = (njs_vmcode_try_return_t *) pc;",
          "272:                 pc += try_return->offset;",
          "273:                 goto next;",
          "275:             case NJS_VMCODE_LESS:",
          "276:             case NJS_VMCODE_GREATER:",
          "277:             case NJS_VMCODE_LESS_OR_EQUAL:",
          "278:             case NJS_VMCODE_GREATER_OR_EQUAL:",
          "279:             case NJS_VMCODE_ADDITION:",
          "280:                 if (njs_slow_path(!njs_is_primitive(value1))) {",
          "281:                     hint = (op == NJS_VMCODE_ADDITION) && njs_is_date(value1);",
          "282:                     ret = njs_value_to_primitive(vm, &primitive1, value1, hint);",
          "283:                     if (ret != NJS_OK) {",
          "284:                         goto error;",
          "285:                     }",
          "287:                     value1 = &primitive1;",
          "288:                 }",
          "290:                 if (njs_slow_path(!njs_is_primitive(value2))) {",
          "291:                     hint = (op == NJS_VMCODE_ADDITION) && njs_is_date(value2);",
          "292:                     ret = njs_value_to_primitive(vm, &primitive2, value2, hint);",
          "293:                     if (ret != NJS_OK) {",
          "294:                         goto error;",
          "295:                     }",
          "297:                     value2 = &primitive2;",
          "298:                 }",
          "300:                 if (njs_slow_path(njs_is_symbol(value1)",
          "301:                                   || njs_is_symbol(value2)))",
          "302:                 {",
          "303:                     njs_symbol_conversion_failed(vm,",
          "304:                         (op == NJS_VMCODE_ADDITION) &&",
          "305:                         (njs_is_string(value1) || njs_is_string(value2)));",
          "307:                     goto error;",
          "308:                 }",
          "310:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "312:                 if (op == NJS_VMCODE_ADDITION) {",
          "313:                     if (njs_fast_path(njs_is_numeric(value1)",
          "314:                                       && njs_is_numeric(value2)))",
          "315:                     {",
          "316:                         njs_set_number(retval, njs_number(value1)",
          "317:                                                + njs_number(value2));",
          "318:                         pc += sizeof(njs_vmcode_3addr_t);",
          "319:                         goto next;",
          "320:                     }",
          "322:                     if (njs_is_string(value1)) {",
          "323:                         s1 = value1;",
          "324:                         s2 = &dst;",
          "325:                         src = value2;",
          "327:                     } else {",
          "328:                         s1 = &dst;",
          "329:                         s2 = value2;",
          "330:                         src = value1;",
          "331:                     }",
          "333:                     ret = njs_primitive_value_to_string(vm, &dst, src);",
          "334:                     if (njs_slow_path(ret != NJS_OK)) {",
          "335:                         goto error;",
          "336:                     }",
          "338:                     ret = njs_string_concat(vm, s1, s2);",
          "339:                     if (njs_slow_path(ret == NJS_ERROR)) {",
          "340:                         goto error;",
          "341:                     }",
          "345:                     pc += ret;",
          "346:                     goto next;",
          "347:                 }",
          "349:                 if ((uint8_t) (op - NJS_VMCODE_GREATER) < 2) {",
          "351:                     src = value1;",
          "352:                     value1 = value2;",
          "353:                     value2 = src;",
          "354:                 }",
          "356:                 ret = njs_primitive_values_compare(vm, value1, value2);",
          "358:                 if (op < NJS_VMCODE_LESS_OR_EQUAL) {",
          "359:                     ret = ret > 0;",
          "361:                 } else {",
          "362:                     ret = ret == 0;",
          "363:                 }",
          "365:                 njs_set_boolean(retval, ret);",
          "367:                 pc += sizeof(njs_vmcode_3addr_t);",
          "368:                 goto next;",
          "370:             case NJS_VMCODE_EQUAL:",
          "371:             case NJS_VMCODE_NOT_EQUAL:",
          "372:                 ret = njs_values_equal(vm, value1, value2);",
          "373:                 if (njs_slow_path(ret < 0)) {",
          "374:                     goto error;",
          "375:                 }",
          "377:                 ret ^= op - NJS_VMCODE_EQUAL;",
          "379:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "380:                 njs_set_boolean(retval, ret);",
          "382:                 pc += sizeof(njs_vmcode_3addr_t);",
          "383:                 goto next;",
          "385:             case NJS_VMCODE_SUBSTRACTION:",
          "386:             case NJS_VMCODE_MULTIPLICATION:",
          "387:             case NJS_VMCODE_EXPONENTIATION:",
          "388:             case NJS_VMCODE_DIVISION:",
          "389:             case NJS_VMCODE_REMAINDER:",
          "390:             case NJS_VMCODE_BITWISE_AND:",
          "391:             case NJS_VMCODE_BITWISE_OR:",
          "392:             case NJS_VMCODE_BITWISE_XOR:",
          "393:             case NJS_VMCODE_LEFT_SHIFT:",
          "394:             case NJS_VMCODE_RIGHT_SHIFT:",
          "395:             case NJS_VMCODE_UNSIGNED_RIGHT_SHIFT:",
          "396:                 if (njs_slow_path(!njs_is_numeric(value1))) {",
          "397:                     ret = njs_value_to_numeric(vm, value1, &numeric1);",
          "398:                     if (njs_slow_path(ret != NJS_OK)) {",
          "399:                         goto error;",
          "400:                     }",
          "402:                     value1 = &numeric1;",
          "403:                 }",
          "405:                 if (njs_slow_path(!njs_is_numeric(value2))) {",
          "406:                     ret = njs_value_to_numeric(vm, value2, &numeric2);",
          "407:                     if (njs_slow_path(ret != NJS_OK)) {",
          "408:                         goto error;",
          "409:                     }",
          "411:                     value2 = &numeric2;",
          "412:                 }",
          "414:                 num = njs_number(value1);",
          "416:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "417:                 pc += sizeof(njs_vmcode_3addr_t);",
          "419:                 switch (op) {",
          "420:                 case NJS_VMCODE_SUBSTRACTION:",
          "421:                     num -= njs_number(value2);",
          "422:                     break;",
          "424:                 case NJS_VMCODE_MULTIPLICATION:",
          "425:                     num *= njs_number(value2);",
          "426:                     break;",
          "428:                 case NJS_VMCODE_EXPONENTIATION:",
          "429:                     exponent = njs_number(value2);",
          "436:                     valid = njs_expect(1, fabs(num) != 1",
          "437:                                           || (!isnan(exponent)",
          "438:                                               && !isinf(exponent)));",
          "440:                     num = valid ? pow(num, exponent) : NAN;",
          "441:                     break;",
          "443:                 case NJS_VMCODE_DIVISION:",
          "444:                     num /= njs_number(value2);",
          "445:                     break;",
          "447:                 case NJS_VMCODE_REMAINDER:",
          "448:                     num = fmod(num, njs_number(value2));",
          "449:                     break;",
          "451:                 case NJS_VMCODE_BITWISE_AND:",
          "452:                 case NJS_VMCODE_BITWISE_OR:",
          "453:                 case NJS_VMCODE_BITWISE_XOR:",
          "454:                     i32 = njs_number_to_int32(njs_number(value2));",
          "456:                     switch (op) {",
          "457:                     case NJS_VMCODE_BITWISE_AND:",
          "458:                         i32 &= njs_number_to_int32(num);",
          "459:                         break;",
          "461:                     case NJS_VMCODE_BITWISE_OR:",
          "462:                         i32 |= njs_number_to_int32(num);",
          "463:                         break;",
          "465:                     case NJS_VMCODE_BITWISE_XOR:",
          "466:                         i32 ^= njs_number_to_int32(num);",
          "467:                         break;",
          "468:                     }",
          "470:                     njs_set_int32(retval, i32);",
          "471:                     goto next;",
          "473:                 default:",
          "474:                     u32 = njs_number_to_uint32(njs_number(value2)) & 0x1f;",
          "476:                     switch (op) {",
          "477:                     case NJS_VMCODE_LEFT_SHIFT:",
          "478:                     case NJS_VMCODE_RIGHT_SHIFT:",
          "479:                         i32 = njs_number_to_int32(num);",
          "481:                         if (op == NJS_VMCODE_LEFT_SHIFT) {",
          "483:                             i32 = (uint32_t) i32 << u32;",
          "484:                         } else {",
          "485:                             i32 >>= u32;",
          "486:                         }",
          "488:                         njs_set_int32(retval, i32);",
          "489:                         break;",
          "492:                         njs_set_uint32(retval,",
          "493:                                        njs_number_to_uint32(num) >> u32);",
          "494:                     }",
          "496:                     goto next;",
          "497:                 }",
          "499:                 njs_set_number(retval, num);",
          "500:                 goto next;",
          "502:             case NJS_VMCODE_OBJECT_COPY:",
          "503:                 ret = njs_vmcode_object_copy(vm, value1, value2);",
          "504:                 break;",
          "506:             case NJS_VMCODE_TEMPLATE_LITERAL:",
          "507:                 ret = njs_vmcode_template_literal(vm, value1, value2);",
          "508:                 break;",
          "510:             case NJS_VMCODE_PROPERTY_IN:",
          "511:                 ret = njs_vmcode_property_in(vm, value1, value2);",
          "512:                 break;",
          "514:             case NJS_VMCODE_PROPERTY_DELETE:",
          "515:                 ret = njs_value_property_delete(vm, value1, value2, NULL, 1);",
          "516:                 if (njs_fast_path(ret != NJS_ERROR)) {",
          "517:                     vm->retval = njs_value_true;",
          "519:                     ret = sizeof(njs_vmcode_3addr_t);",
          "520:                 }",
          "522:                 break;",
          "524:             case NJS_VMCODE_PROPERTY_FOREACH:",
          "525:                 ret = njs_vmcode_property_foreach(vm, value1, value2, pc);",
          "526:                 break;",
          "528:             case NJS_VMCODE_STRICT_EQUAL:",
          "529:             case NJS_VMCODE_STRICT_NOT_EQUAL:",
          "530:                 ret = njs_values_strict_equal(value1, value2);",
          "532:                 ret ^= op - NJS_VMCODE_STRICT_EQUAL;",
          "534:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "535:                 njs_set_boolean(retval, ret);",
          "537:                 pc += sizeof(njs_vmcode_3addr_t);",
          "538:                 goto next;",
          "540:             case NJS_VMCODE_TEST_IF_TRUE:",
          "541:             case NJS_VMCODE_TEST_IF_FALSE:",
          "542:             case NJS_VMCODE_COALESCE:",
          "543:                 if (op == NJS_VMCODE_COALESCE) {",
          "544:                     ret = !njs_is_null_or_undefined(value1);",
          "546:                 } else {",
          "547:                     ret = njs_is_true(value1);",
          "548:                     ret ^= op - NJS_VMCODE_TEST_IF_TRUE;",
          "549:                 }",
          "551:                 if (ret) {",
          "552:                     test_jump = (njs_vmcode_test_jump_t *) pc;",
          "553:                     ret = test_jump->offset;",
          "555:                 } else {",
          "556:                     ret = sizeof(njs_vmcode_3addr_t);",
          "557:                 }",
          "559:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "562:                 pc += ret;",
          "563:                 goto next;",
          "565:             case NJS_VMCODE_UNARY_PLUS:",
          "566:             case NJS_VMCODE_UNARY_NEGATION:",
          "567:             case NJS_VMCODE_BITWISE_NOT:",
          "568:                 if (njs_slow_path(!njs_is_numeric(value1))) {",
          "569:                     ret = njs_value_to_numeric(vm, value1, &numeric1);",
          "570:                     if (njs_slow_path(ret != NJS_OK)) {",
          "571:                         goto error;",
          "572:                     }",
          "574:                     value1 = &numeric1;",
          "575:                 }",
          "577:                 num = njs_number(value1);",
          "578:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "580:                 switch (op) {",
          "581:                 case NJS_VMCODE_UNARY_NEGATION:",
          "582:                     num = -num;",
          "585:                 case NJS_VMCODE_UNARY_PLUS:",
          "586:                     njs_set_number(retval, num);",
          "587:                     break;",
          "589:                 case NJS_VMCODE_BITWISE_NOT:",
          "590:                     njs_set_int32(retval, ~njs_number_to_uint32(num));",
          "591:                 }",
          "593:                 pc += sizeof(njs_vmcode_2addr_t);",
          "594:                 goto next;",
          "596:             case NJS_VMCODE_LOGICAL_NOT:",
          "597:                 njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "598:                 njs_set_boolean(retval, !njs_is_true(value1));",
          "600:                 pc += sizeof(njs_vmcode_2addr_t);",
          "601:                 goto next;",
          "603:             case NJS_VMCODE_OBJECT:",
          "604:                 ret = njs_vmcode_object(vm);",
          "605:                 break;",
          "607:             case NJS_VMCODE_ARRAY:",
          "608:                 ret = njs_vmcode_array(vm, pc);",
          "609:                 break;",
          "611:             case NJS_VMCODE_FUNCTION:",
          "612:                 ret = njs_vmcode_function(vm, pc);",
          "613:                 break;",
          "615:             case NJS_VMCODE_REGEXP:",
          "616:                 ret = njs_vmcode_regexp(vm, pc);",
          "617:                 break;",
          "619:             case NJS_VMCODE_INSTANCE_OF:",
          "620:                 ret = njs_vmcode_instance_of(vm, value1, value2);",
          "621:                 break;",
          "623:             case NJS_VMCODE_TYPEOF:",
          "624:                 ret = njs_vmcode_typeof(vm, value1, value2);",
          "625:                 break;",
          "627:             case NJS_VMCODE_VOID:",
          "628:                 njs_set_undefined(&vm->retval);",
          "630:                 ret = sizeof(njs_vmcode_2addr_t);",
          "631:                 break;",
          "633:             case NJS_VMCODE_DELETE:",
          "634:                 njs_release(vm, value1);",
          "635:                 vm->retval = njs_value_true;",
          "637:                 ret = sizeof(njs_vmcode_2addr_t);",
          "638:                 break;",
          "640:             case NJS_VMCODE_DEBUGGER:",
          "641:                 ret = njs_vmcode_debugger(vm);",
          "642:                 break;",
          "644:             default:",
          "645:                 njs_internal_error(vm, \"%d has retval\", op);",
          "649:             if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "650:                 break;",
          "653:             njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "654:             njs_release(vm, retval);",
          "659:             switch (op) {",
          "660:             case NJS_VMCODE_PUT_ARG:",
          "661:                 put_arg = (njs_vmcode_1addr_t *) pc;",
          "662:                 native = vm->top_frame;",
          "664:                 value1 = &native->arguments[native->put_args++];",
          "665:                 njs_vmcode_operand(vm, put_arg->index, value2);",
          "667:                 njs_value_assign(value1, value2);",
          "669:                 ret = sizeof(njs_vmcode_1addr_t);",
          "670:                 break;",
          "672:             case NJS_VMCODE_STOP:",
          "673:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "674:                 vm->retval = *value2;",
          "676:                 njs_vmcode_debug(vm, pc, \"EXIT STOP\");",
          "678:                 return NJS_OK;",
          "680:             case NJS_VMCODE_JUMP:",
          "681:                 ret = (njs_jump_off_t) value2;",
          "682:                 break;",
          "684:             case NJS_VMCODE_PROPERTY_SET:",
          "685:                 set = (njs_vmcode_prop_set_t *) pc;",
          "686:                 njs_vmcode_operand(vm, set->value, retval);",
          "688:                 if (njs_slow_path(!njs_is_index_or_key(value2))) {",
          "689:                     if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "690:                         (void) njs_throw_cannot_property(vm, value1, value2,",
          "691:                                                          \"set\");",
          "692:                         goto error;",
          "693:                     }",
          "695:                     njs_value_assign(&primitive1, value1);",
          "696:                     ret = njs_value_to_key(vm, &primitive2, value2);",
          "697:                     if (njs_slow_path(ret != NJS_OK)) {",
          "698:                         goto error;",
          "699:                     }",
          "701:                     value1 = &primitive1;",
          "702:                     value2 = &primitive2;",
          "703:                 }",
          "705:                 ret = njs_value_property_set(vm, value1, value2, retval);",
          "706:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "707:                     goto error;",
          "708:                 }",
          "710:                 ret = sizeof(njs_vmcode_prop_set_t);",
          "711:                 break;",
          "713:             case NJS_VMCODE_PROPERTY_ACCESSOR:",
          "714:                 accessor = (njs_vmcode_prop_accessor_t *) pc;",
          "715:                 njs_vmcode_operand(vm, accessor->value, function);",
          "717:                 ret = njs_value_to_key(vm, &name, value2);",
          "718:                 if (njs_slow_path(ret != NJS_OK)) {",
          "719:                     njs_internal_error(vm, \"failed conversion of type \\\"%s\\\" \"",
          "720:                                        \"to string while property define\",",
          "721:                                        njs_type_string(value2->type));",
          "722:                     goto error;",
          "723:                 }",
          "725:                 ret = njs_object_prop_define(vm, value1, &name, function,",
          "726:                                              accessor->type);",
          "727:                 if (njs_slow_path(ret != NJS_OK)) {",
          "728:                     goto error;",
          "729:                 }",
          "731:                 ret = sizeof(njs_vmcode_prop_accessor_t);",
          "732:                 break;",
          "734:             case NJS_VMCODE_IF_TRUE_JUMP:",
          "735:             case NJS_VMCODE_IF_FALSE_JUMP:",
          "736:                 ret = njs_is_true(value1);",
          "738:                 ret ^= op - NJS_VMCODE_IF_TRUE_JUMP;",
          "740:                 ret = ret ? (njs_jump_off_t) value2",
          "741:                           : (njs_jump_off_t) sizeof(njs_vmcode_cond_jump_t);",
          "743:                 break;",
          "745:             case NJS_VMCODE_IF_EQUAL_JUMP:",
          "746:                 if (njs_values_strict_equal(value1, value2)) {",
          "747:                     equal = (njs_vmcode_equal_jump_t *) pc;",
          "748:                     ret = equal->offset;",
          "750:                 } else {",
          "751:                     ret = sizeof(njs_vmcode_3addr_t);",
          "752:                 }",
          "754:                 break;",
          "756:             case NJS_VMCODE_PROPERTY_INIT:",
          "757:                 set = (njs_vmcode_prop_set_t *) pc;",
          "758:                 njs_vmcode_operand(vm, set->value, retval);",
          "759:                 ret = njs_vmcode_property_init(vm, value1, value2, retval);",
          "760:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "761:                     goto error;",
          "762:                 }",
          "764:                 break;",
          "766:             case NJS_VMCODE_RETURN:",
          "767:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "769:                 njs_vmcode_debug(vm, pc, \"EXIT RETURN\");",
          "771:                 return njs_vmcode_return(vm, NULL, value2);",
          "773:             case NJS_VMCODE_FUNCTION_COPY:",
          "774:                 fcopy = (njs_vmcode_function_copy_t *) pc;",
          "775:                 ret = njs_vmcode_function_copy(vm, fcopy->function,",
          "776:                                                fcopy->retval);",
          "777:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "778:                     goto error;",
          "779:                 }",
          "781:                 break;",
          "783:             case NJS_VMCODE_FUNCTION_FRAME:",
          "784:                 function_frame = (njs_vmcode_function_frame_t *) pc;",
          "788:                 ret = njs_function_frame_create(vm, value1,",
          "789:                                                 &njs_value_undefined,",
          "790:                                                 (uintptr_t) value2,",
          "791:                                                 function_frame->ctor);",
          "793:                 if (njs_slow_path(ret != NJS_OK)) {",
          "794:                     goto error;",
          "795:                 }",
          "797:                 ret = sizeof(njs_vmcode_function_frame_t);",
          "798:                 break;",
          "800:             case NJS_VMCODE_METHOD_FRAME:",
          "801:                 method_frame = (njs_vmcode_method_frame_t *) pc;",
          "803:                 if (njs_slow_path(!njs_is_key(value2))) {",
          "804:                     if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "805:                         (void) njs_throw_cannot_property(vm, value1, value2,",
          "806:                                                          \"get\");",
          "807:                         goto error;",
          "808:                     }",
          "810:                     ret = njs_value_to_key(vm, &primitive1, value2);",
          "811:                     if (njs_slow_path(ret != NJS_OK)) {",
          "812:                         goto error;",
          "813:                     }",
          "815:                     value2 = &primitive1;",
          "816:                 }",
          "818:                 ret = njs_value_property(vm, value1, value2, &dst);",
          "819:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "820:                     goto error;",
          "821:                 }",
          "823:                 if (njs_slow_path(!njs_is_function(&dst))) {",
          "824:                     ret = njs_value_to_key(vm, &dst, value2);",
          "825:                     if (njs_slow_path(ret != NJS_OK)) {",
          "826:                         goto error;",
          "827:                     }",
          "829:                     njs_key_string_get(vm, &dst, &string);",
          "830:                     njs_type_error(vm,",
          "831:                                \"(intermediate value)[\\\"%V\\\"] is not a function\",",
          "832:                                &string);",
          "833:                     goto error;",
          "834:                 }",
          "836:                 ret = njs_function_frame_create(vm, &dst, value1,",
          "837:                                                 method_frame->nargs,",
          "838:                                                 method_frame->ctor);",
          "840:                 if (njs_slow_path(ret != NJS_OK)) {",
          "841:                     goto error;",
          "842:                 }",
          "844:                 ret = sizeof(njs_vmcode_method_frame_t);",
          "845:                 break;",
          "847:             case NJS_VMCODE_FUNCTION_CALL:",
          "848:                 vm->active_frame->native.pc = pc;",
          "850:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "852:                 ret = njs_function_frame_invoke(vm, value2);",
          "853:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "854:                     goto error;",
          "855:                 }",
          "857:                 njs_vmcode_debug(vm, pc, \"RESUME\");",
          "859:                 ret = sizeof(njs_vmcode_function_call_t);",
          "860:                 break;",
          "862:             case NJS_VMCODE_PROPERTY_NEXT:",
          "863:                 pnext = (njs_vmcode_prop_next_t *) pc;",
          "864:                 retval = njs_scope_value(vm, pnext->retval);",
          "866:                 njs_assert(njs_is_data(value2, NJS_DATA_TAG_FOREACH_NEXT));",
          "867:                 next = njs_data(value2);",
          "869:                 if (next->index < next->array->length) {",
          "872:                     ret = pnext->offset;",
          "873:                     break;",
          "874:                 }",
          "876:                 njs_mp_free(vm->mem_pool, next);",
          "878:                 ret = sizeof(njs_vmcode_prop_next_t);",
          "879:                 break;",
          "881:             case NJS_VMCODE_ARGUMENTS:",
          "882:                 ret = njs_vmcode_arguments(vm, pc);",
          "883:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "884:                     goto error;",
          "885:                 }",
          "887:                 break;",
          "889:             case NJS_VMCODE_TO_PROPERTY_KEY:",
          "890:             case NJS_VMCODE_TO_PROPERTY_KEY_CHK:",
          "891:                 njs_vmcode_operand(vm, (njs_index_t) value2, retval);",
          "893:                 if (op == NJS_VMCODE_TO_PROPERTY_KEY_CHK) {",
          "894:                     njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "896:                     if (njs_slow_path(njs_is_null_or_undefined(value2))) {",
          "897:                         (void) njs_throw_cannot_property(vm, value2, value1,",
          "898:                                                          \"get\");",
          "899:                         goto error;",
          "900:                     }",
          "901:                 }",
          "903:                 ret = njs_value_to_key(vm, retval, value1);",
          "904:                 if (njs_fast_path(ret == NJS_ERROR)) {",
          "905:                     goto error;",
          "906:                 }",
          "908:                 ret = (op == NJS_VMCODE_TO_PROPERTY_KEY)",
          "909:                        ? sizeof(njs_vmcode_2addr_t)",
          "910:                        : sizeof(njs_vmcode_3addr_t);",
          "911:                 break;",
          "913:             case NJS_VMCODE_SET_FUNCTION_NAME:",
          "914:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "916:                 njs_assert(njs_is_function(value2));",
          "918:                 ret = njs_function_name_set(vm, njs_function(value2), value1,",
          "919:                                             NULL);",
          "920:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "921:                     return ret;",
          "922:                 }",
          "924:                 ret = sizeof(njs_vmcode_2addr_t);",
          "925:                 break;",
          "927:             case NJS_VMCODE_PROTO_INIT:",
          "928:                 set = (njs_vmcode_prop_set_t *) pc;",
          "929:                 njs_vmcode_operand(vm, set->value, retval);",
          "930:                 ret = njs_vmcode_proto_init(vm, value1, value2, retval);",
          "931:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "932:                     goto error;",
          "933:                 }",
          "935:                 break;",
          "937:             case NJS_VMCODE_IMPORT:",
          "938:                 import = (njs_vmcode_import_t *) pc;",
          "939:                 retval = njs_scope_value(vm, import->retval);",
          "940:                 ret = njs_vmcode_import(vm, import->module, retval);",
          "941:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "942:                     goto error;",
          "943:                 }",
          "945:                 break;",
          "947:             case NJS_VMCODE_AWAIT:",
          "948:                 await = (njs_vmcode_await_t *) pc;",
          "950:                 ret = njs_vmcode_await(vm, await, promise_cap, async_ctx);",
          "952:                 njs_vmcode_debug(vm, pc, \"EXIT AWAIT\");",
          "954:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "955:                     goto error;",
          "956:                 }",
          "958:                 return ret;",
          "960:             case NJS_VMCODE_TRY_START:",
          "961:                 ret = njs_vmcode_try_start(vm, value1, value2, pc);",
          "962:                 if (njs_slow_path(ret == NJS_ERROR)) {",
          "963:                     goto error;",
          "964:                 }",
          "966:                 break;",
          "968:             case NJS_VMCODE_THROW:",
          "969:                 njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "970:                 vm->retval = *value2;",
          "973:             case NJS_VMCODE_TRY_BREAK:",
          "974:                 try_trampoline = (njs_vmcode_try_trampoline_t *) pc;",
          "975:                 value1 = njs_scope_value(vm, try_trampoline->exit_value);",
          "977:                 ret = njs_vmcode_try_break(vm, value1, value2);",
          "978:                 break;",
          "980:             case NJS_VMCODE_TRY_CONTINUE:",
          "981:                 try_trampoline = (njs_vmcode_try_trampoline_t *) pc;",
          "982:                 value1 = njs_scope_value(vm, try_trampoline->exit_value);",
          "984:                 ret = njs_vmcode_try_continue(vm, value1, value2);",
          "985:                 break;",
          "987:             case NJS_VMCODE_TRY_END:",
          "988:                 ret = njs_vmcode_try_end(vm, value1, value2);",
          "989:                 break;",
          "999:             case NJS_VMCODE_CATCH:",
          "1002:                 if ((njs_jump_off_t) value2 == sizeof(njs_vmcode_catch_t)) {",
          "1003:                     ret = njs_vmcode_try_end(vm, value1, value2);",
          "1005:                 } else {",
          "1006:                     frame = (njs_frame_t *) vm->top_frame;",
          "1007:                     frame->exception.catch = pc + (njs_jump_off_t) value2;",
          "1008:                     ret = sizeof(njs_vmcode_catch_t);",
          "1009:                 }",
          "1011:                 break;",
          "1013:             case NJS_VMCODE_FINALLY:",
          "1014:                 finally = (njs_vmcode_finally_t *) pc;",
          "1015:                 value1 = njs_scope_value(vm, finally->exit_value);",
          "1017:                 ret = njs_vmcode_finally(vm, value1, value2, pc);",
          "1019:                 switch (ret) {",
          "1020:                 case NJS_OK:",
          "1022:                     njs_vmcode_debug(vm, pc, \"EXIT FINALLY\");",
          "1024:                     return NJS_OK;",
          "1025:                 case NJS_ERROR:",
          "1026:                     goto error;",
          "1027:                 }",
          "1029:                 break;",
          "1031:             case NJS_VMCODE_LET:",
          "1032:                 var = (njs_vmcode_variable_t *) pc;",
          "1033:                 value1 = njs_scope_value(vm, var->dst);",
          "1035:                 if (njs_is_valid(value1)) {",
          "1036:                     value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));",
          "1037:                     if (njs_slow_path(value1 == NULL)) {",
          "1038:                         njs_memory_error(vm);",
          "1039:                         goto error;",
          "1040:                     }",
          "1042:                     njs_scope_value_set(vm, var->dst, value1);",
          "1043:                 }",
          "1045:                 njs_set_undefined(value1);",
          "1047:                 ret = sizeof(njs_vmcode_variable_t);",
          "1048:                 break;",
          "1050:             case NJS_VMCODE_LET_UPDATE:",
          "1051:                 var = (njs_vmcode_variable_t *) pc;",
          "1052:                 value2 = njs_scope_value(vm, var->dst);",
          "1054:                 value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));",
          "1055:                 if (njs_slow_path(value1 == NULL)) {",
          "1056:                     njs_memory_error(vm);",
          "1057:                     goto error;",
          "1058:                 }",
          "1062:                 njs_scope_value_set(vm, var->dst, value1);",
          "1064:                 ret = sizeof(njs_vmcode_variable_t);",
          "1065:                 break;",
          "1067:             case NJS_VMCODE_INITIALIZATION_TEST:",
          "1068:                 var = (njs_vmcode_variable_t *) pc;",
          "1069:                 value1 = njs_scope_value(vm, var->dst);",
          "1071:                 if (njs_is_valid(value1)) {",
          "1072:                     ret = sizeof(njs_vmcode_variable_t);",
          "1073:                     break;",
          "1074:                 }",
          "1078:             case NJS_VMCODE_NOT_INITIALIZED:",
          "1079:                 njs_reference_error(vm, \"cannot access variable \"",
          "1080:                                         \"before initialization\");",
          "1083:             case NJS_VMCODE_ERROR:",
          "1084:                 njs_vmcode_error(vm, pc);",
          "1087:             case NJS_VMCODE_ASSIGNMENT_ERROR:",
          "1088:                 njs_type_error(vm, \"assignment to constant variable\");",
          "1091:             default:",
          "1092:                 njs_internal_error(vm, \"%d has NO retval\", op);",
          "1097:         pc += ret;",
          "",
          "[Added Lines]",
          "123: #if !defined(NJS_HAVE_COMPUTED_GOTO)",
          "124:     #define SWITCH(op)      switch (op)",
          "125:     #define CASE(op)        case op",
          "126:     #define BREAK           pc += ret; NEXT",
          "128:     #define NEXT            vmcode = (njs_vmcode_generic_t *) pc;             \\",
          "129:                             goto next",
          "131:     #define NEXT_LBL        next:",
          "132:     #define FALLTHROUGH     NJS_FALLTHROUGH",
          "134: #else",
          "135:     #define SWITCH(op)      goto *switch_tbl[(uint8_t) op];",
          "136:     #define CASE(op)        case_ ## op",
          "137:     #define BREAK           pc += ret; NEXT",
          "139:     #define NEXT            vmcode = (njs_vmcode_generic_t *) pc;             \\",
          "140:                             SWITCH (vmcode->code.operation)",
          "142:     #define NEXT_LBL",
          "143:     #define FALLTHROUGH",
          "145:     #define NJS_GOTO_ROW(name)   [ (uint8_t) name ] = &&case_ ## name",
          "147:     static const void * const switch_tbl[NJS_VMCODES] = {",
          "149:         NJS_GOTO_ROW(NJS_VMCODE_PUT_ARG),",
          "150:         NJS_GOTO_ROW(NJS_VMCODE_STOP),",
          "151:         NJS_GOTO_ROW(NJS_VMCODE_JUMP),",
          "152:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_SET),",
          "153:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_ACCESSOR),",
          "154:         NJS_GOTO_ROW(NJS_VMCODE_IF_TRUE_JUMP),",
          "155:         NJS_GOTO_ROW(NJS_VMCODE_IF_FALSE_JUMP),",
          "156:         NJS_GOTO_ROW(NJS_VMCODE_IF_EQUAL_JUMP),",
          "157:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_INIT),",
          "158:         NJS_GOTO_ROW(NJS_VMCODE_RETURN),",
          "159:         NJS_GOTO_ROW(NJS_VMCODE_FUNCTION_COPY),",
          "160:         NJS_GOTO_ROW(NJS_VMCODE_FUNCTION_FRAME),",
          "161:         NJS_GOTO_ROW(NJS_VMCODE_METHOD_FRAME),",
          "162:         NJS_GOTO_ROW(NJS_VMCODE_FUNCTION_CALL),",
          "163:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_NEXT),",
          "164:         NJS_GOTO_ROW(NJS_VMCODE_ARGUMENTS),",
          "165:         NJS_GOTO_ROW(NJS_VMCODE_PROTO_INIT),",
          "166:         NJS_GOTO_ROW(NJS_VMCODE_TO_PROPERTY_KEY),",
          "167:         NJS_GOTO_ROW(NJS_VMCODE_TO_PROPERTY_KEY_CHK),",
          "168:         NJS_GOTO_ROW(NJS_VMCODE_SET_FUNCTION_NAME),",
          "169:         NJS_GOTO_ROW(NJS_VMCODE_IMPORT),",
          "170:         NJS_GOTO_ROW(NJS_VMCODE_AWAIT),",
          "171:         NJS_GOTO_ROW(NJS_VMCODE_TRY_START),",
          "172:         NJS_GOTO_ROW(NJS_VMCODE_THROW),",
          "173:         NJS_GOTO_ROW(NJS_VMCODE_TRY_BREAK),",
          "174:         NJS_GOTO_ROW(NJS_VMCODE_TRY_CONTINUE),",
          "175:         NJS_GOTO_ROW(NJS_VMCODE_TRY_END),",
          "176:         NJS_GOTO_ROW(NJS_VMCODE_CATCH),",
          "177:         NJS_GOTO_ROW(NJS_VMCODE_FINALLY),",
          "178:         NJS_GOTO_ROW(NJS_VMCODE_LET),",
          "179:         NJS_GOTO_ROW(NJS_VMCODE_LET_UPDATE),",
          "180:         NJS_GOTO_ROW(NJS_VMCODE_INITIALIZATION_TEST),",
          "181:         NJS_GOTO_ROW(NJS_VMCODE_NOT_INITIALIZED),",
          "182:         NJS_GOTO_ROW(NJS_VMCODE_ASSIGNMENT_ERROR),",
          "183:         NJS_GOTO_ROW(NJS_VMCODE_ERROR),",
          "184:         NJS_GOTO_ROW(NJS_VMCODE_MOVE),",
          "185:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_GET),",
          "186:         NJS_GOTO_ROW(NJS_VMCODE_INCREMENT),",
          "187:         NJS_GOTO_ROW(NJS_VMCODE_POST_INCREMENT),",
          "188:         NJS_GOTO_ROW(NJS_VMCODE_DECREMENT),",
          "189:         NJS_GOTO_ROW(NJS_VMCODE_POST_DECREMENT),",
          "190:         NJS_GOTO_ROW(NJS_VMCODE_TRY_RETURN),",
          "191:         NJS_GOTO_ROW(NJS_VMCODE_GLOBAL_GET),",
          "192:         NJS_GOTO_ROW(NJS_VMCODE_LESS),",
          "193:         NJS_GOTO_ROW(NJS_VMCODE_GREATER),",
          "194:         NJS_GOTO_ROW(NJS_VMCODE_LESS_OR_EQUAL),",
          "195:         NJS_GOTO_ROW(NJS_VMCODE_GREATER_OR_EQUAL),",
          "196:         NJS_GOTO_ROW(NJS_VMCODE_ADDITION),",
          "197:         NJS_GOTO_ROW(NJS_VMCODE_EQUAL),",
          "198:         NJS_GOTO_ROW(NJS_VMCODE_NOT_EQUAL),",
          "199:         NJS_GOTO_ROW(NJS_VMCODE_SUBSTRACTION),",
          "200:         NJS_GOTO_ROW(NJS_VMCODE_MULTIPLICATION),",
          "201:         NJS_GOTO_ROW(NJS_VMCODE_EXPONENTIATION),",
          "202:         NJS_GOTO_ROW(NJS_VMCODE_DIVISION),",
          "203:         NJS_GOTO_ROW(NJS_VMCODE_REMAINDER),",
          "204:         NJS_GOTO_ROW(NJS_VMCODE_BITWISE_AND),",
          "205:         NJS_GOTO_ROW(NJS_VMCODE_BITWISE_OR),",
          "206:         NJS_GOTO_ROW(NJS_VMCODE_BITWISE_XOR),",
          "207:         NJS_GOTO_ROW(NJS_VMCODE_LEFT_SHIFT),",
          "208:         NJS_GOTO_ROW(NJS_VMCODE_RIGHT_SHIFT),",
          "209:         NJS_GOTO_ROW(NJS_VMCODE_UNSIGNED_RIGHT_SHIFT),",
          "210:         NJS_GOTO_ROW(NJS_VMCODE_OBJECT_COPY),",
          "211:         NJS_GOTO_ROW(NJS_VMCODE_TEMPLATE_LITERAL),",
          "212:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_IN),",
          "213:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_DELETE),",
          "214:         NJS_GOTO_ROW(NJS_VMCODE_PROPERTY_FOREACH),",
          "215:         NJS_GOTO_ROW(NJS_VMCODE_STRICT_EQUAL),",
          "216:         NJS_GOTO_ROW(NJS_VMCODE_STRICT_NOT_EQUAL),",
          "217:         NJS_GOTO_ROW(NJS_VMCODE_TEST_IF_TRUE),",
          "218:         NJS_GOTO_ROW(NJS_VMCODE_TEST_IF_FALSE),",
          "219:         NJS_GOTO_ROW(NJS_VMCODE_COALESCE),",
          "220:         NJS_GOTO_ROW(NJS_VMCODE_UNARY_PLUS),",
          "221:         NJS_GOTO_ROW(NJS_VMCODE_UNARY_NEGATION),",
          "222:         NJS_GOTO_ROW(NJS_VMCODE_BITWISE_NOT),",
          "223:         NJS_GOTO_ROW(NJS_VMCODE_LOGICAL_NOT),",
          "224:         NJS_GOTO_ROW(NJS_VMCODE_OBJECT),",
          "225:         NJS_GOTO_ROW(NJS_VMCODE_ARRAY),",
          "226:         NJS_GOTO_ROW(NJS_VMCODE_FUNCTION),",
          "227:         NJS_GOTO_ROW(NJS_VMCODE_REGEXP),",
          "228:         NJS_GOTO_ROW(NJS_VMCODE_INSTANCE_OF),",
          "229:         NJS_GOTO_ROW(NJS_VMCODE_TYPEOF),",
          "230:         NJS_GOTO_ROW(NJS_VMCODE_VOID),",
          "231:         NJS_GOTO_ROW(NJS_VMCODE_DELETE),",
          "232:         NJS_GOTO_ROW(NJS_VMCODE_DEBUGGER),",
          "233:     };",
          "235: #endif",
          "237:     vmcode = (njs_vmcode_generic_t *) pc;",
          "239: NEXT_LBL;",
          "241:     SWITCH (vmcode->code.operation) {",
          "243:     CASE (NJS_VMCODE_MOVE):",
          "244:         njs_vmcode_debug_opcode();",
          "246:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "247:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "250:         pc += sizeof(njs_vmcode_move_t);",
          "251:         NEXT;",
          "253:     CASE (NJS_VMCODE_PROPERTY_GET):",
          "254:         njs_vmcode_debug_opcode();",
          "256:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "257:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "259:         get = (njs_vmcode_prop_get_t *) pc;",
          "260:         njs_vmcode_operand(vm, get->value, retval);",
          "262:         if (njs_slow_path(!njs_is_index_or_key(value2))) {",
          "263:             if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "264:                 (void) njs_throw_cannot_property(vm, value1, value2, \"get\");",
          "265:                 goto error;",
          "266:             }",
          "268:             ret = njs_value_to_key(vm, &primitive1, value2);",
          "269:             if (njs_slow_path(ret != NJS_OK)) {",
          "270:                 goto error;",
          "273:             value2 = &primitive1;",
          "274:         }",
          "276:         ret = njs_value_property(vm, value1, value2, retval);",
          "277:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "278:             goto error;",
          "279:         }",
          "281:         pc += sizeof(njs_vmcode_prop_get_t);",
          "282:         NEXT;",
          "284:     CASE (NJS_VMCODE_INCREMENT):",
          "285:         njs_vmcode_debug_opcode();",
          "287:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "288:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "290:         if (njs_slow_path(!njs_is_numeric(value2))) {",
          "291:             ret = njs_value_to_numeric(vm, value2, &numeric1);",
          "292:             if (njs_slow_path(ret != NJS_OK)) {",
          "293:                 goto error;",
          "296:             num = njs_number(&numeric1);",
          "298:         } else {",
          "299:             num = njs_number(value2);",
          "300:         }",
          "302:         njs_set_number(value1, num + 1);",
          "304:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "308:         pc += sizeof(njs_vmcode_3addr_t);",
          "309:         NEXT;",
          "311:     CASE (NJS_VMCODE_POST_INCREMENT):",
          "312:         njs_vmcode_debug_opcode();",
          "314:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "315:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "317:         if (njs_slow_path(!njs_is_numeric(value2))) {",
          "318:             ret = njs_value_to_numeric(vm, value2, &numeric1);",
          "319:             if (njs_slow_path(ret != NJS_OK)) {",
          "320:                 goto error;",
          "321:             }",
          "323:             num = njs_number(&numeric1);",
          "325:         } else {",
          "326:             num = njs_number(value2);",
          "327:         }",
          "329:         njs_set_number(value1, num + 1);",
          "331:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "333:         njs_set_number(retval, num);",
          "335:         pc += sizeof(njs_vmcode_3addr_t);",
          "336:         NEXT;",
          "338:     CASE (NJS_VMCODE_DECREMENT):",
          "339:         njs_vmcode_debug_opcode();",
          "341:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "342:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "344:         if (njs_slow_path(!njs_is_numeric(value2))) {",
          "345:             ret = njs_value_to_numeric(vm, value2, &numeric1);",
          "346:             if (njs_slow_path(ret != NJS_OK)) {",
          "347:                 goto error;",
          "348:             }",
          "350:             num = njs_number(&numeric1);",
          "352:         } else {",
          "353:             num = njs_number(value2);",
          "354:         }",
          "356:         njs_set_number(value1, num - 1);",
          "358:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "362:         pc += sizeof(njs_vmcode_3addr_t);",
          "363:         NEXT;",
          "365:     CASE (NJS_VMCODE_POST_DECREMENT):",
          "366:         njs_vmcode_debug_opcode();",
          "368:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "369:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "371:         if (njs_slow_path(!njs_is_numeric(value2))) {",
          "372:             ret = njs_value_to_numeric(vm, value2, &numeric1);",
          "373:             if (njs_slow_path(ret != NJS_OK)) {",
          "374:                 goto error;",
          "375:             }",
          "377:             num = njs_number(&numeric1);",
          "379:         } else {",
          "380:             num = njs_number(value2);",
          "381:         }",
          "383:         njs_set_number(value1, num - 1);",
          "385:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "387:         njs_set_number(retval, num);",
          "389:         pc += sizeof(njs_vmcode_3addr_t);",
          "390:         NEXT;",
          "392:     CASE (NJS_VMCODE_GLOBAL_GET):",
          "393:         njs_vmcode_debug_opcode();",
          "395:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "396:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "398:         get = (njs_vmcode_prop_get_t *) pc;",
          "399:         njs_vmcode_operand(vm, get->value, retval);",
          "401:         ret = njs_value_property(vm, value1, value2, retval);",
          "402:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "403:             goto error;",
          "404:         }",
          "406:         pc += sizeof(njs_vmcode_prop_get_t);",
          "408:         if (ret == NJS_OK) {",
          "409:             pc += sizeof(njs_vmcode_error_t);",
          "410:         }",
          "412:         NEXT;",
          "418:     CASE (NJS_VMCODE_TRY_RETURN):",
          "419:         njs_vmcode_debug_opcode();",
          "421:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "423:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "426:         try_return = (njs_vmcode_try_return_t *) pc;",
          "427:         pc += try_return->offset;",
          "428:         NEXT;",
          "430:     CASE (NJS_VMCODE_LESS):",
          "431:         njs_vmcode_debug_opcode();",
          "433:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "434:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "436:         if (njs_slow_path(!njs_is_primitive(value1))) {",
          "437:             ret = njs_value_to_primitive(vm, &primitive1, value1, 0);",
          "438:             if (ret != NJS_OK) {",
          "439:                 goto error;",
          "440:             }",
          "442:             value1 = &primitive1;",
          "443:         }",
          "445:         if (njs_slow_path(!njs_is_primitive(value2))) {",
          "446:             ret = njs_value_to_primitive(vm, &primitive2, value2, 0);",
          "447:             if (ret != NJS_OK) {",
          "448:                 goto error;",
          "449:             }",
          "451:             value2 = &primitive2;",
          "452:         }",
          "454:         if (njs_slow_path(njs_is_symbol(value1)",
          "455:                           || njs_is_symbol(value2)))",
          "456:         {",
          "457:             njs_symbol_conversion_failed(vm, 0);",
          "458:             goto error;",
          "459:         }",
          "461:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "463:         njs_set_boolean(retval,",
          "464:                         njs_primitive_values_compare(vm, value1, value2) > 0);",
          "466:         pc += sizeof(njs_vmcode_3addr_t);",
          "467:         NEXT;",
          "469:     CASE (NJS_VMCODE_GREATER):",
          "470:         njs_vmcode_debug_opcode();",
          "472:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "473:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "475:         if (njs_slow_path(!njs_is_primitive(value1))) {",
          "476:             ret = njs_value_to_primitive(vm, &primitive1, value1, 0);",
          "477:             if (ret != NJS_OK) {",
          "478:                 goto error;",
          "479:             }",
          "481:             value1 = &primitive1;",
          "482:         }",
          "484:         if (njs_slow_path(!njs_is_primitive(value2))) {",
          "485:             ret = njs_value_to_primitive(vm, &primitive2, value2, 0);",
          "486:             if (ret != NJS_OK) {",
          "487:                 goto error;",
          "488:             }",
          "490:             value2 = &primitive2;",
          "491:         }",
          "493:         if (njs_slow_path(njs_is_symbol(value1)",
          "494:                           || njs_is_symbol(value2)))",
          "495:         {",
          "496:             njs_symbol_conversion_failed(vm, 0);",
          "497:             goto error;",
          "498:         }",
          "500:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "502:         njs_set_boolean(retval,",
          "503:                         njs_primitive_values_compare(vm, value2, value1) > 0);",
          "505:         pc += sizeof(njs_vmcode_3addr_t);",
          "506:         NEXT;",
          "508:     CASE (NJS_VMCODE_LESS_OR_EQUAL):",
          "509:         njs_vmcode_debug_opcode();",
          "511:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "512:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "514:         if (njs_slow_path(!njs_is_primitive(value1))) {",
          "515:             ret = njs_value_to_primitive(vm, &primitive1, value1, 0);",
          "516:             if (ret != NJS_OK) {",
          "517:                 goto error;",
          "518:             }",
          "520:             value1 = &primitive1;",
          "521:         }",
          "523:         if (njs_slow_path(!njs_is_primitive(value2))) {",
          "524:             ret = njs_value_to_primitive(vm, &primitive2, value2, 0);",
          "525:             if (ret != NJS_OK) {",
          "526:                 goto error;",
          "527:             }",
          "529:             value2 = &primitive2;",
          "530:         }",
          "532:         if (njs_slow_path(njs_is_symbol(value1)",
          "533:                           || njs_is_symbol(value2)))",
          "534:         {",
          "535:             njs_symbol_conversion_failed(vm, 0);",
          "536:             goto error;",
          "537:         }",
          "539:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "541:         njs_set_boolean(retval,",
          "542:                         njs_primitive_values_compare(vm, value2, value1) == 0);",
          "544:         pc += sizeof(njs_vmcode_3addr_t);",
          "545:         NEXT;",
          "547:     CASE (NJS_VMCODE_GREATER_OR_EQUAL):",
          "548:         njs_vmcode_debug_opcode();",
          "550:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "551:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "553:         if (njs_slow_path(!njs_is_primitive(value1))) {",
          "554:             ret = njs_value_to_primitive(vm, &primitive1, value1, 0);",
          "555:             if (ret != NJS_OK) {",
          "556:                 goto error;",
          "557:             }",
          "559:             value1 = &primitive1;",
          "560:         }",
          "562:         if (njs_slow_path(!njs_is_primitive(value2))) {",
          "563:             ret = njs_value_to_primitive(vm, &primitive2, value2, 0);",
          "564:             if (ret != NJS_OK) {",
          "565:                 goto error;",
          "566:             }",
          "568:             value2 = &primitive2;",
          "569:         }",
          "571:         if (njs_slow_path(njs_is_symbol(value1)",
          "572:                           || njs_is_symbol(value2)))",
          "573:         {",
          "574:             njs_symbol_conversion_failed(vm, 0);",
          "575:             goto error;",
          "576:         }",
          "578:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "580:         njs_set_boolean(retval,",
          "581:                         njs_primitive_values_compare(vm, value1, value2) == 0);",
          "583:         pc += sizeof(njs_vmcode_3addr_t);",
          "584:         NEXT;",
          "586:     CASE (NJS_VMCODE_ADDITION):",
          "587:         njs_vmcode_debug_opcode();",
          "589:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "590:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "592:         if (njs_slow_path(!njs_is_primitive(value1))) {",
          "593:             hint = njs_is_date(value1);",
          "594:             ret = njs_value_to_primitive(vm, &primitive1, value1, hint);",
          "595:             if (ret != NJS_OK) {",
          "599:             value1 = &primitive1;",
          "600:         }",
          "602:         if (njs_slow_path(!njs_is_primitive(value2))) {",
          "603:             hint =  njs_is_date(value2);",
          "604:             ret = njs_value_to_primitive(vm, &primitive2, value2, hint);",
          "605:             if (ret != NJS_OK) {",
          "606:                 goto error;",
          "609:             value2 = &primitive2;",
          "610:         }",
          "612:         if (njs_slow_path(njs_is_symbol(value1)",
          "613:                           || njs_is_symbol(value2)))",
          "614:         {",
          "615:             njs_symbol_conversion_failed(vm,",
          "616:                 (njs_is_string(value1) || njs_is_string(value2)));",
          "618:             goto error;",
          "619:         }",
          "621:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "623:         if (njs_fast_path(njs_is_numeric(value1)",
          "624:                           && njs_is_numeric(value2)))",
          "625:         {",
          "626:             njs_set_number(retval, njs_number(value1)",
          "627:                                    + njs_number(value2));",
          "628:             pc += sizeof(njs_vmcode_3addr_t);",
          "629:             NEXT;",
          "630:         }",
          "632:         if (njs_is_string(value1)) {",
          "633:             s1 = value1;",
          "634:             s2 = &dst;",
          "635:             src = value2;",
          "638:             s1 = &dst;",
          "639:             s2 = value2;",
          "640:             src = value1;",
          "641:         }",
          "643:         ret = njs_primitive_value_to_string(vm, &dst, src);",
          "644:         if (njs_slow_path(ret != NJS_OK)) {",
          "645:             goto error;",
          "646:         }",
          "648:         ret = njs_string_concat(vm, s1, s2);",
          "649:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "650:             goto error;",
          "651:         }",
          "655:         BREAK;",
          "657:     CASE (NJS_VMCODE_EQUAL):",
          "658:         njs_vmcode_debug_opcode();",
          "660:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "661:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "663:         ret = njs_values_equal(vm, value1, value2);",
          "664:         if (njs_slow_path(ret < 0)) {",
          "665:             goto error;",
          "666:         }",
          "668:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "669:         njs_set_boolean(retval, ret);",
          "671:         pc += sizeof(njs_vmcode_3addr_t);",
          "672:         NEXT;",
          "674:     CASE (NJS_VMCODE_NOT_EQUAL):",
          "675:         njs_vmcode_debug_opcode();",
          "677:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "678:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "680:         ret = njs_values_equal(vm, value1, value2);",
          "681:         if (njs_slow_path(ret < 0)) {",
          "682:             goto error;",
          "683:         }",
          "685:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "686:         njs_set_boolean(retval, !ret);",
          "688:         pc += sizeof(njs_vmcode_3addr_t);",
          "689:         NEXT;",
          "691: #define NJS_PRE_NUMERIC                                                       \\",
          "692:                                                                               \\",
          "693:         if (njs_slow_path(!njs_is_numeric(value1))) {                         \\",
          "694:             ret = njs_value_to_numeric(vm, value1, &numeric1);                \\",
          "695:             if (njs_slow_path(ret != NJS_OK)) {                               \\",
          "696:                 goto error;                                                   \\",
          "697:             }                                                                 \\",
          "698:                                                                               \\",
          "699:             value1 = &numeric1;                                               \\",
          "700:         }                                                                     \\",
          "701:                                                                               \\",
          "702:         if (njs_slow_path(!njs_is_numeric(value2))) {                         \\",
          "703:             ret = njs_value_to_numeric(vm, value2, &numeric2);                \\",
          "704:             if (njs_slow_path(ret != NJS_OK)) {                               \\",
          "705:                 goto error;                                                   \\",
          "706:             }                                                                 \\",
          "707:                                                                               \\",
          "708:             value2 = &numeric2;                                               \\",
          "709:         }                                                                     \\",
          "710:                                                                               \\",
          "711:         num = njs_number(value1);                                             \\",
          "712:                                                                               \\",
          "713:         njs_vmcode_operand(vm, vmcode->operand1, retval);                     \\",
          "714:         pc += sizeof(njs_vmcode_3addr_t)",
          "716:     CASE (NJS_VMCODE_SUBSTRACTION):",
          "717:         njs_vmcode_debug_opcode();",
          "719:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "720:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "722:         NJS_PRE_NUMERIC;",
          "724:         num -= njs_number(value2);",
          "726:         njs_set_number(retval, num);",
          "727:         NEXT;",
          "729:     CASE (NJS_VMCODE_MULTIPLICATION):",
          "730:         njs_vmcode_debug_opcode();",
          "732:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "733:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "735:         NJS_PRE_NUMERIC;",
          "737:         num *= njs_number(value2);",
          "739:         njs_set_number(retval, num);",
          "740:         NEXT;",
          "742:     CASE (NJS_VMCODE_EXPONENTIATION):",
          "743:         njs_vmcode_debug_opcode();",
          "745:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "746:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "748:         NJS_PRE_NUMERIC;",
          "750:         exponent = njs_number(value2);",
          "756:         valid = njs_expect(1, fabs(num) != 1",
          "757:                               || (!isnan(exponent)",
          "758:                                   && !isinf(exponent)));",
          "760:         num = valid ? pow(num, exponent) : NAN;",
          "762:         njs_set_number(retval, num);",
          "763:         NEXT;",
          "765:     CASE (NJS_VMCODE_DIVISION):",
          "766:         njs_vmcode_debug_opcode();",
          "768:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "769:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "771:         NJS_PRE_NUMERIC;",
          "773:         num /= njs_number(value2);",
          "775:         njs_set_number(retval, num);",
          "776:         NEXT;",
          "778:     CASE (NJS_VMCODE_REMAINDER):",
          "779:         njs_vmcode_debug_opcode();",
          "781:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "782:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "784:         NJS_PRE_NUMERIC;",
          "786:         num = fmod(num, njs_number(value2));",
          "788:         njs_set_number(retval, num);",
          "789:         NEXT;",
          "791:     CASE (NJS_VMCODE_BITWISE_AND):",
          "792:         njs_vmcode_debug_opcode();",
          "794:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "795:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "797:         NJS_PRE_NUMERIC;",
          "799:         i32 = njs_number_to_int32(njs_number(value2));",
          "800:         i32 &= njs_number_to_int32(num);",
          "802:         njs_set_int32(retval, i32);",
          "803:         NEXT;",
          "805:     CASE (NJS_VMCODE_BITWISE_OR):",
          "806:         njs_vmcode_debug_opcode();",
          "808:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "809:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "811:         NJS_PRE_NUMERIC;",
          "813:         i32 = njs_number_to_int32(njs_number(value2));",
          "814:         i32 |= njs_number_to_int32(num);",
          "816:         njs_set_int32(retval, i32);",
          "817:         NEXT;",
          "819:     CASE (NJS_VMCODE_BITWISE_XOR):",
          "820:         njs_vmcode_debug_opcode();",
          "822:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "823:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "825:         NJS_PRE_NUMERIC;",
          "827:         i32 = njs_number_to_int32(njs_number(value2));",
          "828:         i32 ^= njs_number_to_int32(num);",
          "830:         njs_set_int32(retval, i32);",
          "831:         NEXT;",
          "833:     CASE (NJS_VMCODE_LEFT_SHIFT):",
          "834:         njs_vmcode_debug_opcode();",
          "836:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "837:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "839:         NJS_PRE_NUMERIC;",
          "841:         u32 = njs_number_to_uint32(njs_number(value2)) & 0x1f;",
          "842:         i32 = njs_number_to_int32(num);",
          "845:         i32 = (uint32_t) i32 << u32;",
          "847:         njs_set_int32(retval, i32);",
          "848:         NEXT;",
          "850:     CASE (NJS_VMCODE_RIGHT_SHIFT):",
          "851:         njs_vmcode_debug_opcode();",
          "853:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "854:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "856:         NJS_PRE_NUMERIC;",
          "858:         u32 = njs_number_to_uint32(njs_number(value2)) & 0x1f;",
          "859:         i32 = njs_number_to_int32(num);",
          "861:         i32 >>= u32;",
          "863:         njs_set_int32(retval, i32);",
          "864:         NEXT;",
          "866:     CASE (NJS_VMCODE_UNSIGNED_RIGHT_SHIFT):",
          "867:         njs_vmcode_debug_opcode();",
          "869:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "870:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "872:         NJS_PRE_NUMERIC;",
          "874:         u32 = njs_number_to_uint32(njs_number(value2)) & 0x1f;",
          "875:         njs_set_uint32(retval, njs_number_to_uint32(num) >> u32);",
          "876:         NEXT;",
          "878:     CASE (NJS_VMCODE_OBJECT_COPY):",
          "879:         njs_vmcode_debug_opcode();",
          "881:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "883:         ret = njs_vmcode_object_copy(vm, value1, NULL);",
          "885:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "886:             goto error;",
          "887:         }",
          "889:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "890:         njs_release(vm, retval);",
          "893:         BREAK;",
          "895:     CASE (NJS_VMCODE_TEMPLATE_LITERAL):",
          "896:         njs_vmcode_debug_opcode();",
          "898:         value2 = (njs_value_t *) vmcode->operand1;",
          "900:         ret = njs_vmcode_template_literal(vm, NULL, value2);",
          "902:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "903:             goto error;",
          "904:         }",
          "906:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "907:         njs_release(vm, retval);",
          "910:         BREAK;",
          "912:     CASE (NJS_VMCODE_PROPERTY_IN):",
          "913:         njs_vmcode_debug_opcode();",
          "915:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "916:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "918:         ret = njs_vmcode_property_in(vm, value1, value2);",
          "920:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "921:             goto error;",
          "922:         }",
          "924:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "925:         njs_release(vm, retval);",
          "928:         BREAK;",
          "930:     CASE (NJS_VMCODE_PROPERTY_DELETE):",
          "931:         njs_vmcode_debug_opcode();",
          "933:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "934:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "936:         ret = njs_value_property_delete(vm, value1, value2, NULL, 1);",
          "937:         if (njs_fast_path(ret != NJS_ERROR)) {",
          "938:             vm->retval = njs_value_true;",
          "940:             ret = sizeof(njs_vmcode_3addr_t);",
          "941:         }",
          "943:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "944:             goto error;",
          "945:         }",
          "947:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "948:         njs_release(vm, retval);",
          "951:         BREAK;",
          "953:     CASE (NJS_VMCODE_PROPERTY_FOREACH):",
          "954:         njs_vmcode_debug_opcode();",
          "956:         value2 = (njs_value_t *) vmcode->operand1;",
          "957:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "959:         ret = njs_vmcode_property_foreach(vm, value1, value2, pc);",
          "961:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "962:             goto error;",
          "963:         }",
          "965:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "966:         njs_release(vm, retval);",
          "969:         BREAK;",
          "971:     CASE (NJS_VMCODE_STRICT_EQUAL):",
          "972:         njs_vmcode_debug_opcode();",
          "974:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "975:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "977:         ret = njs_values_strict_equal(value1, value2);",
          "979:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "980:         njs_set_boolean(retval, ret);",
          "982:         pc += sizeof(njs_vmcode_3addr_t);",
          "983:         NEXT;",
          "985:     CASE (NJS_VMCODE_STRICT_NOT_EQUAL):",
          "986:         njs_vmcode_debug_opcode();",
          "988:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "989:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "991:         ret = njs_values_strict_equal(value1, value2);",
          "993:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "994:         njs_set_boolean(retval, !ret);",
          "996:         pc += sizeof(njs_vmcode_3addr_t);",
          "997:         NEXT;",
          "999:     CASE (NJS_VMCODE_TEST_IF_TRUE):",
          "1000:         njs_vmcode_debug_opcode();",
          "1002:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1004:         ret = njs_is_true(value1);",
          "1006:         if (ret) {",
          "1007:             test_jump = (njs_vmcode_test_jump_t *) pc;",
          "1008:             ret = test_jump->offset;",
          "1010:         } else {",
          "1011:             ret = sizeof(njs_vmcode_3addr_t);",
          "1012:         }",
          "1014:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1017:         BREAK;",
          "1019:     CASE (NJS_VMCODE_TEST_IF_FALSE):",
          "1020:         njs_vmcode_debug_opcode();",
          "1022:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1024:         ret = !njs_is_true(value1);",
          "1026:         if (ret) {",
          "1027:             test_jump = (njs_vmcode_test_jump_t *) pc;",
          "1028:             ret = test_jump->offset;",
          "1030:         } else {",
          "1031:             ret = sizeof(njs_vmcode_3addr_t);",
          "1032:         }",
          "1034:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1037:         BREAK;",
          "1039:     CASE (NJS_VMCODE_COALESCE):",
          "1040:         njs_vmcode_debug_opcode();",
          "1042:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1044:         ret = !njs_is_null_or_undefined(value1);",
          "1046:         if (ret) {",
          "1047:             test_jump = (njs_vmcode_test_jump_t *) pc;",
          "1048:             ret = test_jump->offset;",
          "1050:         } else {",
          "1051:             ret = sizeof(njs_vmcode_3addr_t);",
          "1052:         }",
          "1054:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1057:         BREAK;",
          "1059: #define NJS_PRE_UNARY                                                         \\",
          "1060:         if (njs_slow_path(!njs_is_numeric(value1))) {                         \\",
          "1061:             ret = njs_value_to_numeric(vm, value1, &numeric1);                \\",
          "1062:             if (njs_slow_path(ret != NJS_OK)) {                               \\",
          "1063:                 goto error;                                                   \\",
          "1064:             }                                                                 \\",
          "1065:                                                                               \\",
          "1066:             value1 = &numeric1;                                               \\",
          "1067:         }                                                                     \\",
          "1068:                                                                               \\",
          "1069:         num = njs_number(value1);                                             \\",
          "1070:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1072:     CASE (NJS_VMCODE_UNARY_NEGATION):",
          "1073:         njs_vmcode_debug_opcode();",
          "1075:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1077:         NJS_PRE_UNARY;",
          "1079:         num = -num;",
          "1081:         njs_set_number(retval, num);",
          "1083:         pc += sizeof(njs_vmcode_2addr_t);",
          "1084:         NEXT;",
          "1086:     CASE (NJS_VMCODE_UNARY_PLUS):",
          "1087:         njs_vmcode_debug_opcode();",
          "1089:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1091:         NJS_PRE_UNARY;",
          "1093:         njs_set_number(retval, num);",
          "1095:         pc += sizeof(njs_vmcode_2addr_t);",
          "1096:         NEXT;",
          "1098:     CASE (NJS_VMCODE_BITWISE_NOT):",
          "1099:         njs_vmcode_debug_opcode();",
          "1101:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1103:         NJS_PRE_UNARY;",
          "1105:         njs_set_int32(retval, ~njs_number_to_uint32(num));",
          "1107:         pc += sizeof(njs_vmcode_2addr_t);",
          "1108:         NEXT;",
          "1110:     CASE (NJS_VMCODE_LOGICAL_NOT):",
          "1111:         njs_vmcode_debug_opcode();",
          "1113:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1114:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1116:         njs_set_boolean(retval, !njs_is_true(value1));",
          "1118:         pc += sizeof(njs_vmcode_2addr_t);",
          "1119:         NEXT;",
          "1121:     CASE (NJS_VMCODE_OBJECT):",
          "1122:         njs_vmcode_debug_opcode();",
          "1124:         ret = njs_vmcode_object(vm);",
          "1126:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "1127:             goto error;",
          "1128:         }",
          "1130:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1131:         njs_release(vm, retval);",
          "1134:         BREAK;",
          "1136:     CASE (NJS_VMCODE_ARRAY):",
          "1137:         njs_vmcode_debug_opcode();",
          "1139:         ret = njs_vmcode_array(vm, pc);",
          "1141:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "1142:             goto error;",
          "1143:         }",
          "1145:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1146:         njs_release(vm, retval);",
          "1149:         BREAK;",
          "1151:     CASE (NJS_VMCODE_FUNCTION):",
          "1152:         njs_vmcode_debug_opcode();",
          "1154:         ret = njs_vmcode_function(vm, pc);",
          "1156:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "1157:             goto error;",
          "1158:         }",
          "1160:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1161:         njs_release(vm, retval);",
          "1164:         BREAK;",
          "1166:     CASE (NJS_VMCODE_REGEXP):",
          "1167:         njs_vmcode_debug_opcode();",
          "1169:         ret = njs_vmcode_regexp(vm, pc);",
          "1171:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "1172:             goto error;",
          "1173:         }",
          "1175:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1176:         njs_release(vm, retval);",
          "1179:         BREAK;",
          "1181:     CASE (NJS_VMCODE_INSTANCE_OF):",
          "1182:         njs_vmcode_debug_opcode();",
          "1184:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1185:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1187:         ret = njs_vmcode_instance_of(vm, value1, value2);",
          "1189:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "1190:             goto error;",
          "1191:         }",
          "1193:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1194:         njs_release(vm, retval);",
          "1197:         BREAK;",
          "1199:     CASE (NJS_VMCODE_TYPEOF):",
          "1200:         njs_vmcode_debug_opcode();",
          "1202:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1204:         ret = njs_vmcode_typeof(vm, value1, NULL);",
          "1206:         if (njs_slow_path(ret < 0 && ret >= NJS_PREEMPT)) {",
          "1207:             goto error;",
          "1208:         }",
          "1210:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1211:         njs_release(vm, retval);",
          "1214:         BREAK;",
          "1216:     CASE (NJS_VMCODE_VOID):",
          "1217:         njs_vmcode_debug_opcode();",
          "1219:         njs_set_undefined(&vm->retval);",
          "1221:         ret = sizeof(njs_vmcode_2addr_t);",
          "1223:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1224:         njs_release(vm, retval);",
          "1227:         BREAK;",
          "1229:     CASE (NJS_VMCODE_DELETE):",
          "1230:         njs_vmcode_debug_opcode();",
          "1232:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1234:         njs_release(vm, value1);",
          "1235:         vm->retval = njs_value_true;",
          "1237:         ret = sizeof(njs_vmcode_2addr_t);",
          "1238:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1239:         njs_release(vm, retval);",
          "1242:         BREAK;",
          "1244:     CASE (NJS_VMCODE_DEBUGGER):",
          "1245:         njs_vmcode_debug_opcode();",
          "1247:         ret = njs_vmcode_debugger(vm);",
          "1249:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1250:         njs_release(vm, retval);",
          "1253:         BREAK;",
          "1255:     CASE (NJS_VMCODE_PUT_ARG):",
          "1256:         njs_vmcode_debug_opcode();",
          "1258:         put_arg = (njs_vmcode_1addr_t *) pc;",
          "1259:         native = vm->top_frame;",
          "1261:         value1 = &native->arguments[native->put_args++];",
          "1262:         njs_vmcode_operand(vm, put_arg->index, value2);",
          "1264:         njs_value_assign(value1, value2);",
          "1266:         ret = sizeof(njs_vmcode_1addr_t);",
          "1267:         BREAK;",
          "1269:     CASE (NJS_VMCODE_STOP):",
          "1270:         njs_vmcode_debug_opcode();",
          "1272:         njs_vmcode_operand(vm, vmcode->operand1, value2);",
          "1273:         vm->retval = *value2;",
          "1275:         njs_vmcode_debug(vm, pc, \"EXIT STOP\");",
          "1277:         return NJS_OK;",
          "1279:     CASE (NJS_VMCODE_JUMP):",
          "1280:         njs_vmcode_debug_opcode();",
          "1282:         ret = (njs_jump_off_t) vmcode->operand1;",
          "1283:         BREAK;",
          "1285:     CASE (NJS_VMCODE_PROPERTY_SET):",
          "1286:         njs_vmcode_debug_opcode();",
          "1288:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1289:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1290:         njs_vmcode_operand(vm, vmcode->operand1, retval);",
          "1292:         if (njs_slow_path(!njs_is_index_or_key(value2))) {",
          "1293:             if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "1294:                 (void) njs_throw_cannot_property(vm, value1, value2, \"set\");",
          "1296:             }",
          "1298:             njs_value_assign(&primitive1, value1);",
          "1299:             ret = njs_value_to_key(vm, &primitive2, value2);",
          "1300:             if (njs_slow_path(ret != NJS_OK)) {",
          "1301:                 goto error;",
          "1302:             }",
          "1304:             value1 = &primitive1;",
          "1305:             value2 = &primitive2;",
          "1306:         }",
          "1308:         ret = njs_value_property_set(vm, value1, value2, retval);",
          "1309:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1310:             goto error;",
          "1311:         }",
          "1313:         ret = sizeof(njs_vmcode_prop_set_t);",
          "1314:         BREAK;",
          "1316:     CASE (NJS_VMCODE_PROPERTY_ACCESSOR):",
          "1317:         njs_vmcode_debug_opcode();",
          "1319:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1320:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1322:         accessor = (njs_vmcode_prop_accessor_t *) pc;",
          "1323:         njs_vmcode_operand(vm, accessor->value, function);",
          "1325:         ret = njs_value_to_key(vm, &name, value2);",
          "1326:         if (njs_slow_path(ret != NJS_OK)) {",
          "1327:             njs_internal_error(vm, \"failed conversion of type \\\"%s\\\" \"",
          "1328:                                \"to string while property define\",",
          "1329:                                njs_type_string(value2->type));",
          "1330:             goto error;",
          "1331:         }",
          "1333:         ret = njs_object_prop_define(vm, value1, &name, function,",
          "1334:                                      accessor->type);",
          "1335:         if (njs_slow_path(ret != NJS_OK)) {",
          "1336:             goto error;",
          "1337:         }",
          "1339:         ret = sizeof(njs_vmcode_prop_accessor_t);",
          "1340:         BREAK;",
          "1342:     CASE (NJS_VMCODE_IF_TRUE_JUMP):",
          "1343:         njs_vmcode_debug_opcode();",
          "1345:         value2 = (njs_value_t *) vmcode->operand1;",
          "1346:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1348:         ret = njs_is_true(value1);",
          "1350:         ret = ret ? (njs_jump_off_t) value2",
          "1351:                   : (njs_jump_off_t) sizeof(njs_vmcode_cond_jump_t);",
          "1353:         BREAK;",
          "1355:     CASE (NJS_VMCODE_IF_FALSE_JUMP):",
          "1356:         njs_vmcode_debug_opcode();",
          "1358:         value2 = (njs_value_t *) vmcode->operand1;",
          "1359:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1361:         ret = njs_is_true(value1);",
          "1363:         ret = !ret ? (njs_jump_off_t) value2",
          "1364:                    : (njs_jump_off_t) sizeof(njs_vmcode_cond_jump_t);",
          "1366:         BREAK;",
          "1368:     CASE (NJS_VMCODE_IF_EQUAL_JUMP):",
          "1369:         njs_vmcode_debug_opcode();",
          "1371:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1372:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1374:         if (njs_values_strict_equal(value1, value2)) {",
          "1375:             equal = (njs_vmcode_equal_jump_t *) pc;",
          "1376:             ret = equal->offset;",
          "1378:         } else {",
          "1379:             ret = sizeof(njs_vmcode_3addr_t);",
          "1380:         }",
          "1382:         BREAK;",
          "1384:     CASE (NJS_VMCODE_PROPERTY_INIT):",
          "1385:         njs_vmcode_debug_opcode();",
          "1387:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1388:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1390:         set = (njs_vmcode_prop_set_t *) pc;",
          "1391:         njs_vmcode_operand(vm, set->value, retval);",
          "1392:         ret = njs_vmcode_property_init(vm, value1, value2, retval);",
          "1393:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1394:             goto error;",
          "1395:         }",
          "1397:         BREAK;",
          "1399:     CASE (NJS_VMCODE_RETURN):",
          "1400:         njs_vmcode_debug_opcode();",
          "1402:         value2 = (njs_value_t *) vmcode->operand1;",
          "1404:         njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "1406:         njs_vmcode_debug(vm, pc, \"EXIT RETURN\");",
          "1408:         return njs_vmcode_return(vm, NULL, value2);",
          "1410:     CASE (NJS_VMCODE_FUNCTION_COPY):",
          "1411:         njs_vmcode_debug_opcode();",
          "1413:         fcopy = (njs_vmcode_function_copy_t *) pc;",
          "1414:         ret = njs_vmcode_function_copy(vm, fcopy->function, fcopy->retval);",
          "1415:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1416:             goto error;",
          "1417:         }",
          "1419:         BREAK;",
          "1421:     CASE (NJS_VMCODE_FUNCTION_FRAME):",
          "1422:         njs_vmcode_debug_opcode();",
          "1424:         value2 = (njs_value_t *) vmcode->operand1;",
          "1425:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1427:         function_frame = (njs_vmcode_function_frame_t *) pc;",
          "1429:         ret = njs_function_frame_create(vm, value1, &njs_value_undefined,",
          "1430:                                         (uintptr_t) value2,",
          "1431:                                         function_frame->ctor);",
          "1433:         if (njs_slow_path(ret != NJS_OK)) {",
          "1434:             goto error;",
          "1435:         }",
          "1437:         ret = sizeof(njs_vmcode_function_frame_t);",
          "1438:         BREAK;",
          "1440:     CASE (NJS_VMCODE_METHOD_FRAME):",
          "1441:         njs_vmcode_debug_opcode();",
          "1443:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1444:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1446:         method_frame = (njs_vmcode_method_frame_t *) pc;",
          "1448:         if (njs_slow_path(!njs_is_key(value2))) {",
          "1449:             if (njs_slow_path(njs_is_null_or_undefined(value1))) {",
          "1450:                 (void) njs_throw_cannot_property(vm, value1, value2, \"get\");",
          "1452:             }",
          "1454:             ret = njs_value_to_key(vm, &primitive1, value2);",
          "1455:             if (njs_slow_path(ret != NJS_OK)) {",
          "1457:             }",
          "1459:             value2 = &primitive1;",
          "1460:         }",
          "1462:         ret = njs_value_property(vm, value1, value2, &dst);",
          "1463:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1464:             goto error;",
          "1465:         }",
          "1467:         if (njs_slow_path(!njs_is_function(&dst))) {",
          "1468:             ret = njs_value_to_key(vm, &dst, value2);",
          "1469:             if (njs_slow_path(ret != NJS_OK)) {",
          "1471:             }",
          "1473:             njs_key_string_get(vm, &dst, &string);",
          "1474:             njs_type_error(vm,",
          "1475:                        \"(intermediate value)[\\\"%V\\\"] is not a function\",",
          "1476:                        &string);",
          "1477:             goto error;",
          "1478:         }",
          "1480:         ret = njs_function_frame_create(vm, &dst, value1, method_frame->nargs,",
          "1481:                                         method_frame->ctor);",
          "1483:         if (njs_slow_path(ret != NJS_OK)) {",
          "1484:             goto error;",
          "1485:         }",
          "1487:         ret = sizeof(njs_vmcode_method_frame_t);",
          "1488:         BREAK;",
          "1490:     CASE (NJS_VMCODE_FUNCTION_CALL):",
          "1491:         njs_vmcode_debug_opcode();",
          "1493:         value2 = (njs_value_t *) vmcode->operand1;",
          "1495:         vm->active_frame->native.pc = pc;",
          "1497:         njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "1499:         ret = njs_function_frame_invoke(vm, value2);",
          "1500:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1501:             goto error;",
          "1502:         }",
          "1504:         njs_vmcode_debug(vm, pc, \"RESUME\");",
          "1506:         ret = sizeof(njs_vmcode_function_call_t);",
          "1507:         BREAK;",
          "1509:     CASE (NJS_VMCODE_PROPERTY_NEXT):",
          "1510:         njs_vmcode_debug_opcode();",
          "1512:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1513:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1515:         pnext = (njs_vmcode_prop_next_t *) pc;",
          "1516:         retval = njs_scope_value(vm, pnext->retval);",
          "1518:         njs_assert(njs_is_data(value2, NJS_DATA_TAG_FOREACH_NEXT));",
          "1519:         next = njs_data(value2);",
          "1521:         if (next->index < next->array->length) {",
          "1524:             ret = pnext->offset;",
          "1525:             BREAK;",
          "1526:         }",
          "1528:         njs_mp_free(vm->mem_pool, next);",
          "1530:         ret = sizeof(njs_vmcode_prop_next_t);",
          "1531:         BREAK;",
          "1533:     CASE (NJS_VMCODE_ARGUMENTS):",
          "1534:         njs_vmcode_debug_opcode();",
          "1536:         ret = njs_vmcode_arguments(vm, pc);",
          "1537:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1538:             goto error;",
          "1539:         }",
          "1541:         BREAK;",
          "1543:     CASE (NJS_VMCODE_TO_PROPERTY_KEY):",
          "1544:         njs_vmcode_debug_opcode();",
          "1546:         value2 = (njs_value_t *) vmcode->operand1;",
          "1547:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1549:         njs_vmcode_operand(vm, (njs_index_t) value2, retval);",
          "1551:         ret = njs_value_to_key(vm, retval, value1);",
          "1552:         if (njs_fast_path(ret == NJS_ERROR)) {",
          "1553:             goto error;",
          "1554:         }",
          "1556:         ret = sizeof(njs_vmcode_2addr_t);",
          "1557:         BREAK;",
          "1559:     CASE (NJS_VMCODE_TO_PROPERTY_KEY_CHK):",
          "1560:         njs_vmcode_debug_opcode();",
          "1562:         value2 = (njs_value_t *) vmcode->operand1;",
          "1563:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1565:         njs_vmcode_operand(vm, (njs_index_t) value2, retval);",
          "1566:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1568:         if (njs_slow_path(njs_is_null_or_undefined(value2))) {",
          "1569:             (void) njs_throw_cannot_property(vm, value2, value1, \"get\");",
          "1570:             goto error;",
          "1571:         }",
          "1573:         ret = njs_value_to_key(vm, retval, value1);",
          "1574:         if (njs_fast_path(ret == NJS_ERROR)) {",
          "1575:             goto error;",
          "1576:         }",
          "1578:         ret = sizeof(njs_vmcode_3addr_t);",
          "1579:         BREAK;",
          "1581:     CASE (NJS_VMCODE_SET_FUNCTION_NAME):",
          "1582:         njs_vmcode_debug_opcode();",
          "1584:         value2 = (njs_value_t *) vmcode->operand1;",
          "1585:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1587:         njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "1589:         njs_assert(njs_is_function(value2));",
          "1591:         ret = njs_function_name_set(vm, njs_function(value2), value1, NULL);",
          "1592:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1593:             return ret;",
          "1594:         }",
          "1596:         ret = sizeof(njs_vmcode_2addr_t);",
          "1597:         BREAK;",
          "1600:     CASE (NJS_VMCODE_PROTO_INIT):",
          "1601:         njs_vmcode_debug_opcode();",
          "1603:         njs_vmcode_operand(vm, vmcode->operand3, value2);",
          "1604:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1606:         set = (njs_vmcode_prop_set_t *) pc;",
          "1607:         njs_vmcode_operand(vm, set->value, retval);",
          "1608:         ret = njs_vmcode_proto_init(vm, value1, value2, retval);",
          "1609:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1610:             goto error;",
          "1611:         }",
          "1613:         BREAK;",
          "1615:     CASE (NJS_VMCODE_IMPORT):",
          "1616:         njs_vmcode_debug_opcode();",
          "1618:         import = (njs_vmcode_import_t *) pc;",
          "1619:         retval = njs_scope_value(vm, import->retval);",
          "1620:         ret = njs_vmcode_import(vm, import->module, retval);",
          "1621:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1622:             goto error;",
          "1623:         }",
          "1625:         BREAK;",
          "1627:     CASE (NJS_VMCODE_AWAIT):",
          "1628:         njs_vmcode_debug_opcode();",
          "1630:         await = (njs_vmcode_await_t *) pc;",
          "1632:         ret = njs_vmcode_await(vm, await, promise_cap, async_ctx);",
          "1634:         njs_vmcode_debug(vm, pc, \"EXIT AWAIT\");",
          "1636:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1637:             goto error;",
          "1638:         }",
          "1640:         return ret;",
          "1642:     CASE (NJS_VMCODE_TRY_START):",
          "1643:         njs_vmcode_debug_opcode();",
          "1645:         value2 = (njs_value_t *) vmcode->operand1;",
          "1646:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1648:         ret = njs_vmcode_try_start(vm, value1, value2, pc);",
          "1649:         if (njs_slow_path(ret == NJS_ERROR)) {",
          "1650:             goto error;",
          "1651:         }",
          "1653:         BREAK;",
          "1655:     CASE (NJS_VMCODE_THROW):",
          "1656:         njs_vmcode_debug_opcode();",
          "1658:         value2 = (njs_value_t *) vmcode->operand1;",
          "1660:         njs_vmcode_operand(vm, (njs_index_t) value2, value2);",
          "1661:         vm->retval = *value2;",
          "1663:         goto error;",
          "1665:     CASE (NJS_VMCODE_TRY_BREAK):",
          "1666:         njs_vmcode_debug_opcode();",
          "1668:         value2 = (njs_value_t *) vmcode->operand1;",
          "1670:         try_trampoline = (njs_vmcode_try_trampoline_t *) pc;",
          "1671:         value1 = njs_scope_value(vm, try_trampoline->exit_value);",
          "1673:         ret = njs_vmcode_try_break(vm, value1, value2);",
          "1674:         BREAK;",
          "1676:     CASE (NJS_VMCODE_TRY_CONTINUE):",
          "1677:         njs_vmcode_debug_opcode();",
          "1679:         value2 = (njs_value_t *) vmcode->operand1;",
          "1681:         try_trampoline = (njs_vmcode_try_trampoline_t *) pc;",
          "1682:         value1 = njs_scope_value(vm, try_trampoline->exit_value);",
          "1684:         ret = njs_vmcode_try_continue(vm, value1, value2);",
          "1685:         BREAK;",
          "1687:     CASE (NJS_VMCODE_TRY_END):",
          "1688:         njs_vmcode_debug_opcode();",
          "1690:         ret = njs_vmcode_try_end(vm, NULL, (njs_value_t *) vmcode->operand1);",
          "1691:         BREAK;",
          "1701:     CASE (NJS_VMCODE_CATCH):",
          "1702:         njs_vmcode_debug_opcode();",
          "1704:         value2 = (njs_value_t *) vmcode->operand1;",
          "1705:         njs_vmcode_operand(vm, vmcode->operand2, value1);",
          "1709:         if ((njs_jump_off_t) value2 == sizeof(njs_vmcode_catch_t)) {",
          "1710:             ret = njs_vmcode_try_end(vm, value1, value2);",
          "1712:         } else {",
          "1713:             frame = (njs_frame_t *) vm->top_frame;",
          "1714:             frame->exception.catch = pc + (njs_jump_off_t) value2;",
          "1715:             ret = sizeof(njs_vmcode_catch_t);",
          "1716:         }",
          "1718:         BREAK;",
          "1720:     CASE (NJS_VMCODE_FINALLY):",
          "1721:         njs_vmcode_debug_opcode();",
          "1723:         value2 = (njs_value_t *) vmcode->operand1;",
          "1725:         finally = (njs_vmcode_finally_t *) pc;",
          "1726:         value1 = njs_scope_value(vm, finally->exit_value);",
          "1728:         ret = njs_vmcode_finally(vm, NULL, value2, pc);",
          "1730:         switch (ret) {",
          "1731:         case NJS_OK:",
          "1732:             njs_vmcode_debug(vm, pc, \"EXIT FINALLY\");",
          "1734:             return NJS_OK;",
          "1735:         case NJS_ERROR:",
          "1736:             goto error;",
          "1737:         }",
          "1739:         BREAK;",
          "1741:     CASE (NJS_VMCODE_LET):",
          "1742:         njs_vmcode_debug_opcode();",
          "1744:         var = (njs_vmcode_variable_t *) pc;",
          "1745:         value1 = njs_scope_value(vm, var->dst);",
          "1747:         if (njs_is_valid(value1)) {",
          "1748:             value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));",
          "1749:             if (njs_slow_path(value1 == NULL)) {",
          "1750:                 njs_memory_error(vm);",
          "1754:             njs_scope_value_set(vm, var->dst, value1);",
          "1757:         njs_set_undefined(value1);",
          "1759:         ret = sizeof(njs_vmcode_variable_t);",
          "1760:         BREAK;",
          "1762:     CASE (NJS_VMCODE_LET_UPDATE):",
          "1763:         njs_vmcode_debug_opcode();",
          "1765:         var = (njs_vmcode_variable_t *) pc;",
          "1766:         value2 = njs_scope_value(vm, var->dst);",
          "1768:         value1 = njs_mp_alloc(vm->mem_pool, sizeof(njs_value_t));",
          "1769:         if (njs_slow_path(value1 == NULL)) {",
          "1770:             njs_memory_error(vm);",
          "1771:             goto error;",
          "1772:         }",
          "1776:         njs_scope_value_set(vm, var->dst, value1);",
          "1778:         ret = sizeof(njs_vmcode_variable_t);",
          "1779:         BREAK;",
          "1781:     CASE (NJS_VMCODE_INITIALIZATION_TEST):",
          "1782:         njs_vmcode_debug_opcode();",
          "1784:         var = (njs_vmcode_variable_t *) pc;",
          "1785:         value1 = njs_scope_value(vm, var->dst);",
          "1787:         if (njs_is_valid(value1)) {",
          "1788:             ret = sizeof(njs_vmcode_variable_t);",
          "1789:             BREAK;",
          "1790:         }",
          "1792:         FALLTHROUGH;",
          "1793:     CASE (NJS_VMCODE_NOT_INITIALIZED):",
          "1794:         njs_vmcode_debug_opcode();",
          "1796:         njs_reference_error(vm, \"cannot access variable before initialization\");",
          "1797:         goto error;",
          "1799:     CASE (NJS_VMCODE_ERROR):",
          "1800:         njs_vmcode_debug_opcode();",
          "1802:         njs_vmcode_error(vm, pc);",
          "1803:         goto error;",
          "1805:     CASE (NJS_VMCODE_ASSIGNMENT_ERROR):",
          "1806:         njs_vmcode_debug_opcode();",
          "1808:         njs_type_error(vm, \"assignment to constant variable\");",
          "1809:         goto error;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1114:             if (catch != NULL) {",
          "1115:                 pc = catch;",
          "1118:             }",
          "1119:         }",
          "",
          "[Removed Lines]",
          "1117:                 goto next;",
          "",
          "[Added Lines]",
          "1830:                 NEXT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1905: }",
          "1909: njs_function_new_object(njs_vm_t *vm, njs_value_t *constructor)",
          "1910: {",
          "1911:     njs_value_t     proto, bound;",
          "",
          "[Removed Lines]",
          "1908: njs_object_t *",
          "",
          "[Added Lines]",
          "2621: inline njs_object_t *",
          "",
          "---------------"
        ],
        "src/njs_vmcode.h||src/njs_vmcode.h": [
          "File: src/njs_vmcode.h -> src/njs_vmcode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:     NJS_VMCODE_METHOD_FRAME,",
          "47:     NJS_VMCODE_FUNCTION_CALL,",
          "48:     NJS_VMCODE_PROPERTY_NEXT,",
          "50:     NJS_VMCODE_ARGUMENTS,",
          "51:     NJS_VMCODE_PROTO_INIT,",
          "52:     NJS_VMCODE_TO_PROPERTY_KEY,",
          "53:     NJS_VMCODE_TO_PROPERTY_KEY_CHK,",
          "54:     NJS_VMCODE_SET_FUNCTION_NAME,",
          "55:     NJS_VMCODE_IMPORT,",
          "57:     NJS_VMCODE_AWAIT,",
          "59:     NJS_VMCODE_TRY_START,",
          "60:     NJS_VMCODE_THROW,",
          "61:     NJS_VMCODE_TRY_BREAK,",
          "",
          "[Removed Lines]",
          "49:     NJS_VMCODE_THIS,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:     NJS_VMCODE_TRY_END,",
          "64:     NJS_VMCODE_CATCH,",
          "65:     NJS_VMCODE_FINALLY,",
          "67:     NJS_VMCODE_LET,",
          "68:     NJS_VMCODE_LET_UPDATE,",
          "69:     NJS_VMCODE_INITIALIZATION_TEST,",
          "70:     NJS_VMCODE_NOT_INITIALIZED,",
          "71:     NJS_VMCODE_ASSIGNMENT_ERROR,",
          "73:     NJS_VMCODE_ERROR,",
          "81:     NJS_VMCODE_PROPERTY_GET,",
          "82:     NJS_VMCODE_INCREMENT,",
          "83:     NJS_VMCODE_POST_INCREMENT,",
          "",
          "[Removed Lines]",
          "75:     NJS_VMCODE_NORET = 127",
          "76: };",
          "79: enum {",
          "80:     NJS_VMCODE_MOVE = NJS_VMCODE_NORET + 1,",
          "",
          "[Added Lines]",
          "69:     NJS_VMCODE_MOVE,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:     NJS_VMCODE_ARRAY,",
          "128:     NJS_VMCODE_FUNCTION,",
          "129:     NJS_VMCODE_REGEXP,",
          "131:     NJS_VMCODE_INSTANCE_OF,",
          "132:     NJS_VMCODE_TYPEOF,",
          "133:     NJS_VMCODE_VOID,",
          "134:     NJS_VMCODE_DELETE,",
          "135:     NJS_VMCODE_DEBUGGER,",
          "138: };",
          "",
          "[Removed Lines]",
          "137:     NJS_VMCODE_NOP = 255",
          "",
          "[Added Lines]",
          "118:     NJS_VMCODES",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "457:                        (code != NULL) ? &code->name : &njs_entry_unknown);    \\",
          "458:         } while (0);                                                          \\",
          "459:     }",
          "460: #else",
          "461: #define njs_vmcode_debug(vm, pc, prefix)",
          "462: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442: #define njs_vmcode_debug_opcode()                                             \\",
          "443:     if (vm->options.opcode_debug) {                                           \\",
          "444:         njs_disassemble(pc, NULL, 1, NULL);                                   \\",
          "445:     }",
          "448: #define njs_vmcode_debug_opcode()",
          "",
          "---------------"
        ]
      }
    }
  ]
}