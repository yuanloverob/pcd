{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e6370e9c29f3edff1c903d8c87a7b513b7ab5317",
      "candidate_info": {
        "commit_hash": "e6370e9c29f3edff1c903d8c87a7b513b7ab5317",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6370e9c29f3edff1c903d8c87a7b513b7ab5317",
        "files": [
          "ext/rtree/rtree1.test",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/build.c",
          "test/corruptL.test",
          "test/resetdb.test"
        ],
        "message": "Fix a problem handling a negative value in the \"number-of-pages\" database header field. Also a problem with running \"REINDEX tbl\" against a virtual table for which the SQL passed to sqlite3_declare_vtab() contains PRIMARY KEY or UNIQUE constraints.\n\nFossilOrigin-Name: 556dd8922f65af93084ee725c638b8dc696b611dd508c212a3b507d6ca474031",
        "before_after_code_files": [
          "ext/rtree/rtree1.test||ext/rtree/rtree1.test",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/build.c||src/build.c",
          "test/corruptL.test||test/corruptL.test",
          "test/resetdb.test||test/resetdb.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree1.test||ext/rtree/rtree1.test": [
          "File: ext/rtree/rtree1.test -> ext/rtree/rtree1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "647:   SELECT * FROM rt1 WHERE id IN (1, 2, 3, 4);",
          "648: } {1 1.0 2.0 aux1 2 2.0 3.0 aux2 3 3.0 4.0 aux3 4 4.0 5.0 aux4}",
          "650: expand_all_sql db",
          "651: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "650: reset_db",
          "651: do_execsql_test 17.0 {",
          "652:   CREATE VIRTUAL TABLE t1 USING rtree(id, x1 PRIMARY KEY, x2, y1, y2);",
          "653:   CREATE VIRTUAL TABLE t2 USING rtree(id, x1, x2, y1, y2 UNIQUE);",
          "654: }",
          "655: do_execsql_test 17.1 {",
          "656:   REINDEX t1;",
          "657:   REINDEX t2;",
          "658: } {}",
          "660: do_execsql_test 17.2 {",
          "661:   REINDEX;",
          "662: } {}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d2f0b5a483869d39f5c5814c9d6df3d3b8a46d582b4dcf0cf11e23b707c4213e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3021:   nPage = nPageHeader = get4byte(28+(u8*)pPage1->aData);",
          "3023:   if( nPage==0 || memcmp(24+(u8*)pPage1->aData, 92+(u8*)pPage1->aData,4)!=0 ){",
          "3024:     nPage = nPageFile;",
          "3025:   }",
          "",
          "[Removed Lines]",
          "3022:   sqlite3PagerPagecount(pBt->pPager, &nPageFile);",
          "",
          "[Added Lines]",
          "3022:   sqlite3PagerPagecount(pBt->pPager, (int*)&nPageFile);",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4424: #ifndef SQLITE_OMIT_REINDEX",
          "4425: static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){",
          "4433:     }",
          "4434:   }",
          "4435: }",
          "",
          "[Removed Lines]",
          "4428:   for(pIndex=pTab->pIndex; pIndex; pIndex=pIndex->pNext){",
          "4429:     if( zColl==0 || collationMatch(zColl, pIndex) ){",
          "4430:       int iDb = sqlite3SchemaToIndex(pParse->db, pTab->pSchema);",
          "4431:       sqlite3BeginWriteOperation(pParse, 0, iDb);",
          "4432:       sqlite3RefillIndex(pParse, pIndex, -1);",
          "",
          "[Added Lines]",
          "4426:   if( !IsVirtual(pTab) ){",
          "4429:     for(pIndex=pTab->pIndex; pIndex; pIndex=pIndex->pNext){",
          "4430:       if( zColl==0 || collationMatch(zColl, pIndex) ){",
          "4431:         int iDb = sqlite3SchemaToIndex(pParse->db, pTab->pSchema);",
          "4432:         sqlite3BeginWriteOperation(pParse, 0, iDb);",
          "4433:         sqlite3RefillIndex(pParse, pIndex, -1);",
          "4434:       }",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-01-11",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix corruptL",
          "17: database_may_be_corrupt",
          "19: #-------------------------------------------------------------------------",
          "20: reset_db",
          "21: do_test 1.0 {",
          "22:   sqlite3 db {}",
          "23:   db deserialize [decode_hexdb {",
          "24: | size 356352 pagesize 4096 filename crash-acaae0347204ae.db",
          "25: | page 1 offset 0",
          "26: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "27: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 d0 00 00 00   .....@  ........",
          "28: |     32: 40 00 ea 00 00 00 00 00 00 40 00 00 00 40 00 00   @........@...@..",
          "29: |     96: 00 00 00 00 0d 00 00 00 04 0e 9c 00 0f ad 0f 4f   ...............O",
          "30: |    112: 0e fc 0e 9c 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "31: |   3728: 00 00 00 00 00 00 00 00 00 00 00 00 5e 04 07 17   ............^...",
          "32: |   3744: 1f 1f 01 81 0b 74 61 62 6c 65 74 31 5f 70 61 72   .....tablet1_par",
          "33: |   3760: 65 6e 74 74 31 5f 70 61 72 65 6e 74 04 43 52 45   entt1_parent.CRE",
          "34: |   3776: 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 70 61   ATE TABLE .t1_pa",
          "35: |   3792: 72 65 6e 74 22 28 6e 6f 64 65 6e 6f 20 49 4e 54   rent.(nodeno INT",
          "36: |   3808: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "37: |   3824: 2c 70 61 72 65 6e 74 6e 6f 64 65 29 51 03 06 17   ,parentnode)Q...",
          "38: |   3840: 1b 1b 01 7b 74 61 62 6c 65 74 31 5f 6e 6f 64 65   ....tablet1_node",
          "39: |   3856: 74 31 5f 6e 6f 64 65 03 43 52 45 41 54 45 20 54   t1_node.CREATE T",
          "40: |   3872: 41 42 4c 45 20 22 74 31 5f 6e 6f 64 65 22 28 6e   ABLE .t1_node.(n",
          "41: |   3888: 6f 64 65 6e 6f 20 49 4e 54 45 47 45 52 20 50 52   odeno INTEGER PR",
          "42: |   3904: 49 4d 41 52 59 20 4b 45 59 2c 64 61 74 61 29 5c   IMARY KEY,data).",
          "43: |   3920: 02 07 17 1d 1d 01 81 0b 74 61 62 6c 65 74 31 5f   ........tablet1_",
          "44: |   3936: 72 6f 77 69 64 74 31 5f 72 6f 77 69 64 02 43 52   rowidt1_rowid.CR",
          "45: |   3952: 45 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 72   EATE TABLE .t1_r",
          "46: |   3968: 6f 77 69 64 22 28 72 6f 77 69 64 20 49 4e 54 45   owid.(rowid INTE",
          "47: |   3984: 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c   GER PRIMARY KEY,",
          "48: |   4000: 6e 6f 64 65 6e 6f 2c 61 30 2c 61 31 29 51 01 07   nodeno,a0,a1)Q..",
          "49: |   4016: 17 11 11 08 81 0f 74 61 62 6c 65 74 31 74 31 43   ......tablet1t1C",
          "50: |   4032: 52 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41   REATE VIRTUAL TA",
          "51: |   4048: 42 4c 45 20 74 31 20 55 53 49 4e 47 20 72 74 72   BLE t1 USING rtr",
          "52: |   4064: 65 65 28 69 64 2c 78 30 20 50 52 49 4d 41 52 59   ee(id,x0 PRIMARY",
          "53: |   4080: 20 4b 45 59 2c 70 61 72 65 6e 74 6e 6f 64 65 29    KEY,parentnode)",
          "54: | page 2 offset 4096",
          "55: |      0: 51 03 06 17 1b 1b 01 7b 74 61 62 6c 65 74 31 5f   Q.......tablet1_",
          "56: |     16: 6e 6f 64 65 74 31 5f 6e 6f 64 65 03 43 52 45 41   nodet1_node.CREA",
          "57: |     32: 54 45 20 54 41 42 4c 45 20 22 74 31 5f 6e 6f 64   TE TABLE .t1_nod",
          "58: |     48: 65 22 28 6e 6f 64 65 6e 6f 20 49 4e 54 45 47 45   e.(nodeno INTEGE",
          "59: |     64: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 64 61   R PRIMARY KEY,da",
          "60: |     80: 74 61 29 5c 02 07 17 1d 1d 01 81 0b 74 61 62 6c   ta).........tabl",
          "61: |     96: 65 74 31 5f 72 6f 77 69 64 74 31 5f 72 6f 77 69   et1_rowidt1_rowi",
          "62: |    112: 64 02 43 52 45 41 54 45 20 54 41 42 4c 45 00 00   d.CREATE TABLE..",
          "63: |    128: 01 0a 02 00 00 00 01 0e 0d 00 00 00 00 24 0e 0d   .............$..",
          "64: |    144: 0c 1a 06 85 50 46 60 27 70 08 00 00 00 00 00 00   ....PF`'p.......",
          "65: |   3824: 00 00 00 00 00 00 00 0d 0e 05 00 09 1d 00 74 6f   ..............to",
          "66: |   3840: 79 20 68 61 6c 66 10 0d 05 00 09 23 00 62 6f 74   y half.....#.bot",
          "67: |   3856: 74 6f 6d 20 68 61 6c 66 0f 0c 05 00 09 21 00 72   tom half.....!.r",
          "68: |   3872: 69 67 68 74 20 68 61 6c 66 0e 0b 05 00 09 1f 00   ight half.......",
          "69: |   3888: 6c 65 66 74 20 43 15 f6 e6 f6 46 50 34 35 24 54   left C....FP45$T",
          "70: |   3904: 15 44 52 05 44 14 24 c4 52 02 27 43 15 f6 e6 f6   .DR.D.$.R.'C....",
          "71: |   3920: 46 52 22 8e 6f 64 65 6e 6f 20 49 4e 54 45 47 45   FR..odeno INTEGE",
          "72: |   3936: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 64 61   R PRIMARY KEY,da",
          "73: |   3952: 74 61 29 5c 02 07 17 1d 1d 01 81 0b 74 61 62 6c   ta).........tabl",
          "74: |   3968: 65 74 31 5f 72 6f 74 74 6f 6d 20 65 64 67 65 0f   et1_rottom edge.",
          "75: |   3984: 07 05 00 09 21 00 72 69 67 68 74 20 65 64 67 65   ....!.right edge",
          "76: |   4000: 0e 06 05 00 09 1f 00 6c 65 66 74 20 65 64 67 65   .......left edge",
          "77: |   4016: 0b 05 05 00 09 19 00 63 65 6e 74 65 72 17 04 05   .......center...",
          "78: |   4032: 00 09 31 00 75 70 70 65 72 2d 72 69 67 68 74 20   ..1.upper-right",
          "79: |   4048: 63 6f 72 6e 65 72 17 03 05 00 09 31 00 6c 6f 77   corner.....1.low",
          "80: |   4064: 65 72 2d 72 69 67 68 74 20 63 6f 72 6e 65 72 16   er-right corner.",
          "81: |   4080: 02 05 00 09 2f 00 75 70 70 65 72 2d 6c 65 66 74   ..../.upper-left",
          "82: | page 3 offset 8192",
          "83: |      0: 20 63 6f 72 6e 65 72 16 01 05 00 09 2f 01 8c 6f    corner...../..o",
          "84: |     16: 77 65 72 2d 6c 53 51 4c 69 74 65 20 66 6f 72 6d   wer-lSQLite form",
          "85: |     32: 61 74 20 33 00 10 00 01 01 00 40 20 20 00 00 00   at 3......@  ...",
          "86: |     48: 00 00 00 00 2f 00 00 0d eb 13 00 00 00 03 00 00   ..../...........",
          "87: |     64: 00 04 00 00 00 00 00 00 00 06 00 00 00 01 00 00   ................",
          "88: |     80: 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00   ................",
          "89: | page 6 offset 20480",
          "90: |    128: 00 00 00 00 00 00 00 00 97 3d 04 ae 7c 01 00 00   .........=..|...",
          "91: |    624: 00 00 00 00 00 00 21 97 3d 04 ae 7c 01 00 00 00   ......!.=..|....",
          "92: |   1120: 00 00 00 00 00 20 97 3d 04 ae 7c 01 00 00 00 00   ..... .=..|.....",
          "93: |   1616: 00 00 00 00 1f 97 3d 04 ae 7c 01 00 00 00 00 00   ......=..|......",
          "94: |   2112: 00 00 00 1e 97 3d 04 ae 7c 01 00 00 00 00 00 00   .....=..|.......",
          "95: |   2608: 00 00 1d 97 d3 d0 4a e7 c0 00 00 00 00 00 00 00   ......J.........",
          "96: |   3088: 00 00 00 00 00 00 00 00 00 00 00 00 01 f3 00 00   ................",
          "97: |   3600: 23 97 3d 04 ae 7c 01 00 00 00 00 00 00 00 00 00   #.=..|..........",
          "98: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 26   ...............&",
          "99: | page 8 offset 28672",
          "100: |      0: 0d 00 00 00 01 04 30 00 04 30 00 00 00 00 00 00   ......0..0......",
          "101: |   1072: 97 4d 1e 14 00 ae 7c 00 00 00 00 00 00 00 00 00   .M....|.........",
          "102: |   1088: 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00   ................",
          "103: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03   ................",
          "104: | page 10 offset 36864",
          "105: |      0: 0d 00 00 00 01 04 30 00 04 30 00 00 00 00 00 00   ......0..0......",
          "106: |   1072: 9a ee c1 80 fd 78 1f ce 1b ae eb b4 00 00 00 00   .....x..........",
          "107: |   1088: 13 20 ff 20 00 70 00 00 00 60 50 00 00 00 11 e0   . . .p...`P.....",
          "108: |   1104: 00 00 00 70 00 00 00 60 50 05 35 14 c6 97 46 52   ...p...`P.5...FR",
          "109: |   1120: 06 66 f7 26 d6 17 42 03 30 01 00 00 10 10 04 02   .f.&..B.0.......",
          "110: |   1136: 02 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00   .........@......",
          "111: |   1152: 00 00 00 00 00 40 00 00 00 40 00 00 00 00 00 00   .....@...@......",
          "112: |   4080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05   ................",
          "113: | page 12 offset 45056",
          "114: |      0: 0d 00 00 00 01 04 30 00 04 30 e1 b4 30 97 4d 46   ......0..0..0.MF",
          "115: |     16: 14 00 ae 7c 00 00 00 00 00 00 00 03 00 00 43 00   ...|..........C.",
          "116: | page 47 offset 188416",
          "117: |   2512: 00 00 00 00 00 00 00 00 be 00 00 00 00 00 00 00   ................",
          "118: | page 87 offset 352256",
          "119: |   2512: 00 00 00 00 00 00 00 00 aa 00 00 00 00 00 00 00   ................",
          "120: | end crash-acaae0347204ae.db",
          "121: }]} {}",
          "123: do_catchsql_test 1.1 {",
          "124:   PRAGMA cell_size_check = off;",
          "125:   DROP INDEX t1x1;",
          "126: } {1 {no such index: t1x1}}",
          "128: do_catchsql_test 1.2 {",
          "129:   SELECT sum(s+length(b)) FROM t1 WHERE a IN (110,10,150) AND q IS NULL;",
          "130: } {1 {no such table: t1}}",
          "132: do_catchsql_test 1.3 {",
          "133:   REINDEX t1;",
          "134: } {1 {unable to identify the object to be reindexed}}",
          "136: finish_test",
          "",
          "---------------"
        ],
        "test/resetdb.test||test/resetdb.test": [
          "File: test/resetdb.test -> test/resetdb.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     UPDATE sqlite_dbpage SET data=randomblob(4096) WHERE pgno=1;",
          "71:     PRAGMA quick_check;",
          "72:   }",
          "74: do_test 201 {",
          "75:   catchsql {",
          "76:     PRAGMA quick_check;",
          "77:   } db2",
          "80: do_test 210 {",
          "81:   # Reset the database file using SQLITE_DBCONFIG_RESET_DATABASE",
          "",
          "[Removed Lines]",
          "73: } {1 {unsupported file format}}",
          "78: } {1 {unsupported file format}}",
          "",
          "[Added Lines]",
          "73: } {1 {file is not a database}}",
          "78: } {1 {file is not a database}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed26483346dc9b6925330e45786bf589735ddbf0",
      "candidate_info": {
        "commit_hash": "ed26483346dc9b6925330e45786bf589735ddbf0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed26483346dc9b6925330e45786bf589735ddbf0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_fs.c"
        ],
        "message": "We learn that readdir_r() is deprecated in favor of plain old readdir(), which is now suppose to be threadsafe using thread-local storage.  So remove the use of readdir_r() from the test code.  (SQLite itself never calls readdir() or readdir_r()).\n\nFossilOrigin-Name: 7a0a26ed380dd0bdda50b0204b30b53bbbbc70f278eba02f91541ac6c691aef2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_fs.c||src/test_fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b99f8512c06b9d47e48b028781265512ce8b812ae4e6af0a7139a093cf9a8f74",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_fs.c||src/test_fs.c": [
          "File: src/test_fs.c -> src/test_fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:   if( pCsr->pDir ){",
          "239:     struct DIRENT *pRes = 0;",
          "241:     pRes = readdir(pCsr->pDir);",
          "242:     if( pRes!=0 ){",
          "243:       memcpy(&pCsr->entry, pRes, sizeof(struct DIRENT));",
          "244:     }",
          "248:     if( pRes==0 ){",
          "249:       closedir(pCsr->pDir);",
          "250:       pCsr->pDir = 0;",
          "",
          "[Removed Lines]",
          "240: #if defined(__MINGW_H)",
          "245: #else",
          "246:     readdir_r(pCsr->pDir, &pCsr->entry, &pRes);",
          "247: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "375afb8bda4d6583ba600a7716406bfcb6d53014",
      "candidate_info": {
        "commit_hash": "375afb8bda4d6583ba600a7716406bfcb6d53014",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/375afb8bda4d6583ba600a7716406bfcb6d53014",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/select1.test",
          "test/with1.test"
        ],
        "message": "Fix a problem in the code generator for sorting results with SRT_EphemTab and a LIMIT clause.\n\nFossilOrigin-Name: 49fcde2f1f981ac0c75728bed3444e7c1d3167311db282d3375c96ce090b2210",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/select1.test||test/select1.test",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b4b5741366578b25ec6e4c415ab8239215e53b1c900be613575f40a826cfccc9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1457:     regRow = pDest->iSdst;",
          "1458:   }else{",
          "1459:     regRowid = sqlite3GetTempReg(pParse);",
          "1461:   }",
          "1462:   nKey = pOrderBy->nExpr - pSort->nOBSat;",
          "1463:   if( pSort->sortFlags & SORTFLAG_UseSorter ){",
          "",
          "[Removed Lines]",
          "1460:     regRow = sqlite3GetTempRange(pParse, nColumn);",
          "",
          "[Added Lines]",
          "1460:     if( eDest==SRT_EphemTab || eDest==SRT_Table ){",
          "1461:       regRow = sqlite3GetTempReg(pParse);",
          "1462:       nColumn = 0;",
          "1463:     }else{",
          "1464:       regRow = sqlite3GetTempRange(pParse, nColumn);",
          "1465:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1537:   switch( eDest ){",
          "1538:     case SRT_Table:",
          "1539:     case SRT_EphemTab: {",
          "1540:       sqlite3VdbeAddOp2(v, OP_NewRowid, iParm, regRowid);",
          "1541:       sqlite3VdbeAddOp3(v, OP_Insert, iParm, regRow, regRowid);",
          "1542:       sqlite3VdbeChangeP5(v, OPFLAG_APPEND);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1545:       sqlite3VdbeAddOp3(v, OP_Column, iSortTab, nKey+bSeq, regRow);",
          "",
          "---------------"
        ],
        "test/select1.test||test/select1.test": [
          "File: test/select1.test -> test/select1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1080: do_catchsql_test select1-16.2 {",
          "1081:   SELECT 1 FROM sqlite_master LIMIT 1,#1;",
          "1082: } {1 {near \"#1\": syntax error}}",
          "1084: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1084: # 2019-01-16 Chromium bug 922312",
          "1085: # Sorting with a LIMIT clause using SRT_EphemTab and SRT_Table",
          "1086: #",
          "1087: do_execsql_test select1-17.1 {",
          "1088:   DROP TABLE IF EXISTS t1;",
          "1089:   DROP TABLE IF EXISTS t2;",
          "1090:   CREATE TABLE t1(x);   INSERT INTO t1 VALUES(1);",
          "1091:   CREATE TABLE t2(y,z); INSERT INTO t2 VALUES(2,3);",
          "1092:   CREATE INDEX t2y ON t2(y);",
          "1093:   SELECT * FROM t1,(SELECT * FROM t2 WHERE y=2 ORDER BY y,z);",
          "1094: } {1 2 3}",
          "1095: do_execsql_test select1-17.2 {",
          "1096:   SELECT * FROM t1,(SELECT * FROM t2 WHERE y=2 ORDER BY y,z LIMIT 4);",
          "1097: } {1 2 3}",
          "1098: do_execsql_test select1-17.3 {",
          "1099:   SELECT * FROM t1,(SELECT * FROM t2 WHERE y=2",
          "1100:          UNION ALL SELECT * FROM t2 WHERE y=3 ORDER BY y,z LIMIT 4);",
          "1101: } {1 2 3}",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1056:   )",
          "1057:   SELECT * FROM t21 AS tA, t21 AS tB",
          "1058: } {1 1 1 1}",
          "1059: do_execsql_test 21.2 {",
          "1060:   SELECT printf('',",
          "1061:      EXISTS (WITH RECURSIVE Table0 AS (WITH Table0 AS (SELECT DISTINCT 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1059: do_execsql_test 21.1b {",
          "1061:    WITH RECURSIVE t21(a,b) AS (",
          "1062:     WITH t21(x) AS (VALUES(1))",
          "1063:     SELECT x, x FROM t21 ORDER BY 1 LIMIT 5",
          "1064:   )",
          "1065:   SELECT * FROM t21 AS tA, t21 AS tB",
          "1066: } {1 1 1 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4baa75b32f61727693ff2468ab927124e85c0e36",
      "candidate_info": {
        "commit_hash": "4baa75b32f61727693ff2468ab927124e85c0e36",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4baa75b32f61727693ff2468ab927124e85c0e36",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/without_rowid1.test"
        ],
        "message": "Do not de-duplicate columns index columns associated with a WITHOUT ROWID table if the columns have different collating sequences.  This is the fix for ticket [3182d3879020ef3b2].  There is one test case added, but most of the tests are done in TH3.\n\nFossilOrigin-Name: 1b1dd4d48cd79a585e1fa7ee79128e9f2a9ee9846339dc56bbd67b75112dcad5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/without_rowid1.test||test/without_rowid1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 92facbc73a940d2844ac88fafd2d2dadb10886fb0b7c53e23f346d18fa6d6327",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1726:   pIdx->szIdxRow = sqlite3LogEst(wIndex*4);",
          "1727: }",
          "1731: static int hasColumn(const i16 *aiCol, int nCol, int x){",
          "1733:   return 0;",
          "1734: }",
          "",
          "[Removed Lines]",
          "1732:   while( nCol-- > 0 ) if( x==*(aiCol++) ) return 1;",
          "",
          "[Added Lines]",
          "1734:   while( nCol-- > 0 ){",
          "1735:     assert( aiCol[0]>=0 );",
          "1736:     if( x==*(aiCol++) ){",
          "1737:       return 1;",
          "1738:     }",
          "1739:   }",
          "1740:   return 0;",
          "1741: }",
          "1756: static int isDupColumn(Index *pIdx, int nKey, Index *pPk, int iCol){",
          "1757:   int i, j;",
          "1758:   assert( nKey<=pIdx->nColumn );",
          "1759:   assert( iCol<MAX(pPk->nColumn,pPk->nKeyCol) );",
          "1760:   assert( pPk->idxType==SQLITE_IDXTYPE_PRIMARYKEY );",
          "1761:   assert( pPk->pTable->tabFlags & TF_WithoutRowid );",
          "1762:   assert( pPk->pTable==pIdx->pTable );",
          "1763:   testcase( pPk==pIdx );",
          "1764:   j = pPk->aiColumn[iCol];",
          "1765:   assert( j!=XN_ROWID && j!=XN_EXPR );",
          "1766:   for(i=0; i<nKey; i++){",
          "1767:     assert( pIdx->aiColumn[i]>=0 || j>=0 );",
          "1768:     if( pIdx->aiColumn[i]==j",
          "1769:      && sqlite3StrICmp(pIdx->azColl[i], pPk->azColl[iCol])==0",
          "1770:     ){",
          "1771:       return 1;",
          "1772:     }",
          "1773:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1837:     for(i=j=1; i<pPk->nKeyCol; i++){",
          "1839:         pPk->nColumn--;",
          "1840:       }else{",
          "1841:         pPk->aiColumn[j++] = pPk->aiColumn[i];",
          "1842:       }",
          "1843:     }",
          "",
          "[Removed Lines]",
          "1838:       if( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) ){",
          "",
          "[Added Lines]",
          "1879:       if( isDupColumn(pPk, j, pPk, i) ){",
          "1882:         testcase( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1867:     int n;",
          "1868:     if( IsPrimaryKeyIndex(pIdx) ) continue;",
          "1869:     for(i=n=0; i<nPk; i++){",
          "1871:     }",
          "1872:     if( n==0 ){",
          "",
          "[Removed Lines]",
          "1870:       if( !hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) ) n++;",
          "",
          "[Added Lines]",
          "1912:       if( !isDupColumn(pIdx, pIdx->nKeyCol, pPk, i) ){",
          "1913:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "1914:         n++;",
          "1915:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1876:     }",
          "1877:     if( resizeIndexObject(db, pIdx, pIdx->nKeyCol+n) ) return;",
          "1878:     for(i=0, j=pIdx->nKeyCol; i<nPk; i++){",
          "1880:         pIdx->aiColumn[j] = pPk->aiColumn[i];",
          "1881:         pIdx->azColl[j] = pPk->azColl[i];",
          "1882:         j++;",
          "",
          "[Removed Lines]",
          "1879:       if( !hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) ){",
          "",
          "[Added Lines]",
          "1924:       if( !isDupColumn(pIdx, pIdx->nKeyCol, pPk, i) ){",
          "1925:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3392:     for(j=0; j<pPk->nKeyCol; j++){",
          "3393:       int x = pPk->aiColumn[j];",
          "3394:       assert( x>=0 );",
          "3396:         pIndex->nColumn--;",
          "3397:       }else{",
          "3398:         pIndex->aiColumn[i] = x;",
          "3399:         pIndex->azColl[i] = pPk->azColl[j];",
          "3400:         pIndex->aSortOrder[i] = pPk->aSortOrder[j];",
          "",
          "[Removed Lines]",
          "3395:       if( hasColumn(pIndex->aiColumn, pIndex->nKeyCol, x) ){",
          "",
          "[Added Lines]",
          "3441:       if( isDupColumn(pIndex, pIndex->nKeyCol, pPk, j) ){",
          "3444:         testcase( hasColumn(pIndex->aiColumn,pIndex->nKeyCol,x) );",
          "",
          "---------------"
        ],
        "test/without_rowid1.test||test/without_rowid1.test": [
          "File: test/without_rowid1.test -> test/without_rowid1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:   SELECT * FROM t1;",
          "392: } {b a 3  b b 4}",
          "395: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394: # 2019-04-29 ticket https://www.sqlite.org/src/info/3182d3879020ef3",
          "395: do_execsql_test 11.1 {",
          "396:   CREATE TABLE t11(a TEXT PRIMARY KEY, b INT) WITHOUT ROWID;",
          "397:   CREATE INDEX t11a ON t11(a COLLATE NOCASE);",
          "398:   INSERT INTO t11(a,b) VALUES ('A',1),('a',2);",
          "399:   PRAGMA integrity_check;",
          "400:   SELECT a FROM t11 ORDER BY a COLLATE binary;",
          "401: } {ok A a}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
      "candidate_info": {
        "commit_hash": "48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/48eb03bd0e3c36565b639306f21d05b52d8f6c6c",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json101.test"
        ],
        "message": "Proper surrogate pair decoding added to JSON functions.  See the mailing list bug report and [https://bugs.python.org/issue38749].  More test cases needed here, but it seems to work so far.\n\nFossilOrigin-Name: 51027f08c0478f1bf9d7545d9e268c772c0a5cd5dda4b03d78f16c7d94f2f50d",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json101.test||test/json101.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "522:   sqlite3_result_subtype(pCtx, JSON_SUBTYPE);",
          "523: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530: static u8 jsonHexToInt(int h){",
          "531:   assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );",
          "532: #ifdef SQLITE_EBCDIC",
          "533:   h += 9*(1&~(h>>4));",
          "534: #else",
          "535:   h += 9*(1&(h>>6));",
          "536: #endif",
          "537:   return (u8)(h & 0xf);",
          "538: }",
          "543: static u32 jsonHexToInt4(const char *z){",
          "544:   u32 v;",
          "545:   assert( safe_isxdigit(z[0]) );",
          "546:   assert( safe_isxdigit(z[1]) );",
          "547:   assert( safe_isxdigit(z[2]) );",
          "548:   assert( safe_isxdigit(z[3]) );",
          "549:   v = (jsonHexToInt(z[0])<<12)",
          "550:     + (jsonHexToInt(z[1])<<8)",
          "551:     + (jsonHexToInt(z[2])<<4)",
          "552:     + jsonHexToInt(z[3]);",
          "553:   return v;",
          "554: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615:           }else{",
          "616:             c = z[++i];",
          "617:             if( c=='u' ){",
          "627:               if( v==0 ) break;",
          "628:               if( v<=0x7f ){",
          "629:                 zOut[j++] = (char)v;",
          "",
          "[Removed Lines]",
          "618:               u32 v = 0, k;",
          "619:               for(k=0; k<4; i++, k++){",
          "620:                 assert( i<n-2 );",
          "621:                 c = z[i+1];",
          "622:                 assert( safe_isxdigit(c) );",
          "623:                 if( c<='9' ) v = v*16 + c - '0';",
          "624:                 else if( c<='F' ) v = v*16 + c - 'A' + 10;",
          "625:                 else v = v*16 + c - 'a' + 10;",
          "626:               }",
          "",
          "[Added Lines]",
          "649:               u32 v = jsonHexToInt4(z+i+1);",
          "650:               i += 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "631:                 zOut[j++] = (char)(0xc0 | (v>>6));",
          "632:                 zOut[j++] = 0x80 | (v&0x3f);",
          "633:               }else{",
          "637:               }",
          "638:             }else{",
          "639:               if( c=='b' ){",
          "",
          "[Removed Lines]",
          "634:                 zOut[j++] = (char)(0xe0 | (v>>12));",
          "635:                 zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "636:                 zOut[j++] = 0x80 | (v&0x3f);",
          "",
          "[Added Lines]",
          "658:                 u32 vlo;",
          "659:                 if( (v&0xfc00)==0xd800",
          "660:                   && i<n-6",
          "661:                   && z[i+1]=='\\\\'",
          "662:                   && z[i+2]=='u'",
          "663:                   && ((vlo = jsonHexToInt4(z+i+3))&0xfc00)==0xdc00",
          "664:                 ){",
          "666:                   v = ((v&0x3ff)<<10) + (vlo&0x3ff) + 0x10000;",
          "667:                   i += 6;",
          "668:                   zOut[j++] = 0xf0 | (v>>18);",
          "669:                   zOut[j++] = 0x80 | ((v>>12)&0x3f);",
          "670:                   zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "671:                   zOut[j++] = 0x80 | (v&0x3f);",
          "672:                 }else{",
          "673:                   zOut[j++] = 0xe0 | (v>>12);",
          "674:                   zOut[j++] = 0x80 | ((v>>6)&0x3f);",
          "675:                   zOut[j++] = 0x80 | (v&0x3f);",
          "676:                 }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f7a74f89dbd58b47bbcb58ea2af71fbe1eb5ec2dbe36d90685c39cb28ecf5250",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json101.test||test/json101.test": [
          "File: test/json101.test -> test/json101.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "832:   SELECT xyz.* FROM (JSON_EACH('{\"a\":1, \"b\":2}')) AS xyz;",
          "833: } {a 1 integer 1 2 {} {$.a} {$} b 2 integer 2 4 {} {$.b} {$}}",
          "835: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835: # 2019-11-10",
          "836: # Mailing list bug report on the handling of surrogate pairs",
          "837: # in JSON.",
          "838: #",
          "839: do_execsql_test json-16.10 {",
          "840:   SELECT length(json_extract('\"abc\\uD834\\uDD1Exyz\"','$'));",
          "841: } {7}",
          "842: do_execsql_test json-16.20 {",
          "843:   SELECT length(json_extract('\"\\uD834\\uDD1E\"','$'));",
          "844: } {1}",
          "845: do_execsql_test json-16.30 {",
          "846:   SELECT unicode(json_extract('\"\\uD834\\uDD1E\"','$'));",
          "847: } {119070}",
          "",
          "---------------"
        ]
      }
    }
  ]
}