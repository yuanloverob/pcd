{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3ef958158ae1019e027ebaa93114160099db5206",
      "candidate_info": {
        "commit_hash": "3ef958158ae1019e027ebaa93114160099db5206",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3ef958158ae1019e027ebaa93114160099db5206",
        "files": [
          "ChangeLog",
          "include/uv-version.h"
        ],
        "message": "2014.02.28, Version 0.11.21 (Unstable)\n\nChanges since version 0.11.20:\n\n* unix: fix uv_fs_write when using an empty buffer (Sa\u00fal Ibarra\n  Corretg\u00e9)\n\n* unix, windows: add assertion in uv_loop_delete (Sa\u00fal Ibarra Corretg\u00e9)",
        "before_after_code_files": [
          "include/uv-version.h||include/uv-version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-version.h||include/uv-version.h": [
          "File: include/uv-version.h -> include/uv-version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define UV_VERSION_MAJOR 0",
          "34: #define UV_VERSION_MINOR 11",
          "35: #define UV_VERSION_PATCH 21",
          "",
          "[Removed Lines]",
          "36: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "36: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "86b5c1ef1cbd353b36fb901c57e8c7b1c817f64e",
      "candidate_info": {
        "commit_hash": "86b5c1ef1cbd353b36fb901c57e8c7b1c817f64e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/86b5c1ef1cbd353b36fb901c57e8c7b1c817f64e",
        "files": [
          "test/task.h",
          "test/test-fs-event.c",
          "test/test-list.h",
          "test/test-watcher-cross-stop.c"
        ],
        "message": "test: test fsevents error reporting\n\nCreate a lot of `FSEventStream`s to make `FSEventStreamStart()` fail.\nFetch the error code and verify that it is correct.",
        "before_after_code_files": [
          "test/task.h||test/task.h",
          "test/test-fs-event.c||test/test-fs-event.c",
          "test/test-list.h||test/test-list.h",
          "test/test-watcher-cross-stop.c||test/test-watcher-cross-stop.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/task.h||test/task.h": [
          "File: test/task.h -> test/task.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: # include <stdint.h>",
          "33: #endif",
          "35: #define TEST_PORT 9123",
          "36: #define TEST_PORT_2 9124",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #if !defined(_WIN32)",
          "36: # include <sys/time.h>",
          "38: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:     return TEST_SKIP;                                                         \\",
          "154:   } while (0)",
          "156: #if defined _WIN32 && ! defined __GNUC__",
          "158: #include <stdarg.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: #if !defined(_WIN32)",
          "163: # define TEST_FILE_LIMIT(num)                                                 \\",
          "164:     do {                                                                      \\",
          "165:       struct rlimit lim;                                                      \\",
          "166:       lim.rlim_cur = (num);                                                   \\",
          "167:       lim.rlim_max = lim.rlim_cur;                                            \\",
          "168:       if (setrlimit(RLIMIT_NOFILE, &lim))                                     \\",
          "169:         RETURN_SKIP(\"File descriptor limit too low.\");                        \\",
          "170:     } while (0)",
          "174: # define TEST_FILE_LIMIT(num) do {} while (0)",
          "176: #endif",
          "",
          "---------------"
        ],
        "test/test-fs-event.c||test/test-fs-event.c": [
          "File: test/test-fs-event.c -> test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "625:   MAKE_VALGRIND_HAPPY();",
          "626:   return 0;",
          "627: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "629: #if defined(__APPLE__)",
          "631: static int fs_event_error_reported;",
          "633: static void fs_event_error_report_cb(uv_fs_event_t* handle,",
          "634:                                      const char* filename,",
          "635:                                      int events,",
          "636:                                      int status) {",
          "637:   if (status != 0)",
          "638:     fs_event_error_reported = status;",
          "639: }",
          "641: static void timer_cb_nop(uv_timer_t* handle, int status) {",
          "642:   ++timer_cb_called;",
          "643:   uv_close((uv_handle_t*) handle, close_cb);",
          "644: }",
          "646: static void fs_event_error_report_close_cb(uv_handle_t* handle) {",
          "647:   ASSERT(handle != NULL);",
          "648:   close_cb_called++;",
          "651: }",
          "654: TEST_IMPL(fs_event_error_reporting) {",
          "655:   unsigned int i;",
          "656:   uv_loop_t* loops[1024];",
          "657:   uv_fs_event_t events[ARRAY_SIZE(loops)];",
          "658:   uv_loop_t* loop;",
          "659:   uv_fs_event_t* event;",
          "661:   TEST_FILE_LIMIT(ARRAY_SIZE(loops) * 3);",
          "663:   remove(\"watch_dir/\");",
          "664:   create_dir(uv_default_loop(), \"watch_dir\");",
          "670:   for (i = 0; i < ARRAY_SIZE(loops); i++) {",
          "671:     loop = uv_loop_new();",
          "672:     event = &events[i];",
          "673:     ASSERT(loop != NULL);",
          "675:     loops[i] = loop;",
          "676:     timer_cb_called = 0;",
          "677:     close_cb_called = 0;",
          "678:     ASSERT(0 == uv_fs_event_init(loop, event));",
          "679:     ASSERT(0 == uv_fs_event_start(event,",
          "680:                                   fs_event_error_report_cb,",
          "681:                                   \"watch_dir\",",
          "682:                                   0));",
          "683:     uv_unref((uv_handle_t*) event);",
          "686:     ASSERT(0 == uv_timer_init(loop, &timer));",
          "687:     ASSERT(0 == uv_timer_start(&timer, timer_cb_nop, 2, 0));",
          "688:     uv_run(loop, UV_RUN_DEFAULT);",
          "689:     ASSERT(1 == timer_cb_called);",
          "690:     ASSERT(1 == close_cb_called);",
          "691:     if (fs_event_error_reported != 0)",
          "692:       break;",
          "693:   }",
          "696:   ASSERT(fs_event_error_reported == UV_EMFILE);",
          "699:   do {",
          "700:     loop = loops[i];",
          "701:     event = &events[i];",
          "703:     ASSERT(0 == uv_fs_event_stop(event));",
          "704:     uv_ref((uv_handle_t*) event);",
          "705:     uv_close((uv_handle_t*) event, fs_event_error_report_close_cb);",
          "707:     close_cb_called = 0;",
          "708:     uv_run(loop, UV_RUN_DEFAULT);",
          "709:     ASSERT(close_cb_called == 1);",
          "711:     uv_loop_delete(loop);",
          "713:     loops[i] = NULL;",
          "714:   } while (i-- != 0);",
          "716:   remove(\"watch_dir/\");",
          "717:   MAKE_VALGRIND_HAPPY();",
          "718:   return 0;",
          "719: }",
          "723: TEST_IMPL(fs_event_error_reporting) {",
          "726:   MAKE_VALGRIND_HAPPY();",
          "727:   return 0;",
          "728: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "196: TEST_DECLARE   (fs_event_close_with_pending_event)",
          "197: TEST_DECLARE   (fs_event_close_in_callback)",
          "198: TEST_DECLARE   (fs_event_start_and_close)",
          "199: TEST_DECLARE   (fs_readdir_empty_dir)",
          "200: TEST_DECLARE   (fs_readdir_file)",
          "201: TEST_DECLARE   (fs_open_dir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199: TEST_DECLARE   (fs_event_error_reporting)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "495:   TEST_ENTRY  (fs_event_close_with_pending_event)",
          "496:   TEST_ENTRY  (fs_event_close_in_callback)",
          "497:   TEST_ENTRY  (fs_event_start_and_close)",
          "498:   TEST_ENTRY  (fs_readdir_empty_dir)",
          "499:   TEST_ENTRY  (fs_readdir_file)",
          "500:   TEST_ENTRY  (fs_open_dir)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "499:   TEST_ENTRY  (fs_event_error_reporting)",
          "",
          "---------------"
        ],
        "test/test-watcher-cross-stop.c||test/test-watcher-cross-stop.c": [
          "File: test/test-watcher-cross-stop.c -> test/test-watcher-cross-stop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <string.h>",
          "26: #include <errno.h>",
          "34: static uv_udp_t sockets[2500];",
          "35: static uv_udp_send_t reqs[ARRAY_SIZE(sockets)];",
          "",
          "[Removed Lines]",
          "28: #if !defined(_WIN32)",
          "29: #include <sys/time.h>",
          "31: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:   uv_buf_t buf;",
          "71:   char big_string[1024];",
          "83:   ASSERT(0 == uv_ip4_addr(\"127.0.0.1\", TEST_PORT, &addr));",
          "84:   memset(big_string, 'A', sizeof(big_string));",
          "",
          "[Removed Lines]",
          "73: #if !defined(_WIN32)",
          "74:   {",
          "75:     struct rlimit lim;",
          "76:     lim.rlim_cur = ARRAY_SIZE(sockets) + 32;",
          "77:     lim.rlim_max = ARRAY_SIZE(sockets) + 32;",
          "78:     if (setrlimit(RLIMIT_NOFILE, &lim))",
          "79:       RETURN_SKIP(\"File descriptor limit too low.\");",
          "80:   }",
          "81: #endif",
          "",
          "[Added Lines]",
          "68:   TEST_FILE_LIMIT(ARRAY_SIZE(sockets) + 32);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05822a5507d25299dd25df6bce9d1663c22ca017",
      "candidate_info": {
        "commit_hash": "05822a5507d25299dd25df6bce9d1663c22ca017",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/05822a5507d25299dd25df6bce9d1663c22ca017",
        "files": [
          "src/unix/freebsd.c",
          "src/unix/signal.c",
          "src/unix/sunos.c"
        ],
        "message": "unix: wrap long lines at 80 columns",
        "before_after_code_files": [
          "src/unix/freebsd.c||src/unix/freebsd.c",
          "src/unix/signal.c||src/unix/signal.c",
          "src/unix/sunos.c||src/unix/sunos.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/freebsd.c||src/unix/freebsd.c": [
          "File: src/unix/freebsd.c -> src/unix/freebsd.c"
        ],
        "src/unix/signal.c||src/unix/signal.c": [
          "File: src/unix/signal.c -> src/unix/signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "335: }",
          "339:   uv__signal_msg_t* msg;",
          "340:   uv_signal_t* handle;",
          "341:   char buf[sizeof(uv__signal_msg_t) * 32];",
          "",
          "[Removed Lines]",
          "338: static void uv__signal_event(uv_loop_t* loop, uv__io_t* w, unsigned int events) {",
          "",
          "[Added Lines]",
          "338: static void uv__signal_event(uv_loop_t* loop,",
          "339:                              uv__io_t* w,",
          "340:                              unsigned int events) {",
          "",
          "---------------"
        ],
        "src/unix/sunos.c||src/unix/sunos.c": [
          "File: src/unix/sunos.c -> src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:   if (buffer == NULL || size == NULL)",
          "257:     return -EINVAL;",
          "260:   res = readlink(buf, buffer, *size - 1);",
          "261:   if (res == -1)",
          "262:     return -errno;",
          "",
          "[Removed Lines]",
          "259:   (void) snprintf(buf, sizeof(buf), \"/proc/%lu/path/a.out\", (unsigned long) getpid());",
          "",
          "[Added Lines]",
          "259:   snprintf(buf, sizeof(buf), \"/proc/%lu/path/a.out\", (unsigned long) getpid());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "390: void uv__fs_event_close(uv_fs_event_t* handle) {",
          "391:   if (handle->fd == PORT_FIRED || handle->fd == PORT_LOADED) {",
          "393:   }",
          "394:   handle->fd = PORT_DELETED;",
          "395:   free(handle->filename);",
          "",
          "[Removed Lines]",
          "392:     port_dissociate(handle->loop->fs_fd, PORT_SOURCE_FILE, (uintptr_t)&handle->fo);",
          "",
          "[Added Lines]",
          "392:     port_dissociate(handle->loop->fs_fd,",
          "393:                     PORT_SOURCE_FILE,",
          "394:                     (uintptr_t) &handle->fo);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "511:       cpu_info->speed = 0;",
          "512:       cpu_info->model = NULL;",
          "513:     } else {",
          "515:       assert(knp->data_type == KSTAT_DATA_INT32 ||",
          "516:              knp->data_type == KSTAT_DATA_INT64);",
          "517:       cpu_info->speed = (knp->data_type == KSTAT_DATA_INT32) ? knp->value.i32",
          "518:                                                              : knp->value.i64;",
          "521:       assert(knp->data_type == KSTAT_DATA_STRING);",
          "522:       cpu_info->model = strdup(KSTAT_NAMED_STR_PTR(knp));",
          "523:     }",
          "",
          "[Removed Lines]",
          "514:       knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"clock_MHz\");",
          "520:       knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"brand\");",
          "",
          "[Added Lines]",
          "516:       knp = kstat_data_lookup(ksp, (char*) \"clock_MHz\");",
          "522:       knp = kstat_data_lookup(ksp, (char*) \"brand\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "529:   cpu_info = *cpu_infos;",
          "530:   lookup_instance = 0;",
          "533:     if (kstat_read(kc, ksp, NULL) == -1) {",
          "534:       cpu_info->cpu_times.user = 0;",
          "",
          "[Removed Lines]",
          "531:   while ((ksp = kstat_lookup(kc, (char*) \"cpu\", lookup_instance, (char*) \"sys\"))){",
          "",
          "[Added Lines]",
          "533:   for (;;) {",
          "534:     ksp = kstat_lookup(kc, (char*) \"cpu\", lookup_instance, (char*) \"sys\");",
          "536:     if (ksp == NULL)",
          "537:       break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "537:       cpu_info->cpu_times.idle = 0;",
          "538:       cpu_info->cpu_times.irq = 0;",
          "539:     } else {",
          "541:       assert(knp->data_type == KSTAT_DATA_UINT64);",
          "542:       cpu_info->cpu_times.user = knp->value.ui64;",
          "545:       assert(knp->data_type == KSTAT_DATA_UINT64);",
          "546:       cpu_info->cpu_times.sys = knp->value.ui64;",
          "549:       assert(knp->data_type == KSTAT_DATA_UINT64);",
          "550:       cpu_info->cpu_times.idle = knp->value.ui64;",
          "553:       assert(knp->data_type == KSTAT_DATA_UINT64);",
          "554:       cpu_info->cpu_times.irq = knp->value.ui64;",
          "555:       cpu_info->cpu_times.nice = 0;",
          "",
          "[Removed Lines]",
          "540:       knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"cpu_ticks_user\");",
          "544:       knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"cpu_ticks_kernel\");",
          "548:       knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"cpu_ticks_idle\");",
          "552:       knp = (kstat_named_t*)  kstat_data_lookup(ksp, (char*) \"intr\");",
          "",
          "[Added Lines]",
          "546:       knp = kstat_data_lookup(ksp, (char*) \"cpu_ticks_user\");",
          "550:       knp = kstat_data_lookup(ksp, (char*) \"cpu_ticks_kernel\");",
          "554:       knp = kstat_data_lookup(ksp, (char*) \"cpu_ticks_idle\");",
          "558:       knp = kstat_data_lookup(ksp, (char*) \"intr\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "787f5fff927c5e434421a54ca0f8cdcd1adb69c7",
      "candidate_info": {
        "commit_hash": "787f5fff927c5e434421a54ca0f8cdcd1adb69c7",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/787f5fff927c5e434421a54ca0f8cdcd1adb69c7",
        "files": [
          "Makefile.am",
          "include/uv.h",
          "src/unix/loop.c",
          "src/win/core.c",
          "test/benchmark-async.c",
          "test/benchmark-multi-accept.c",
          "test/test-embed.c",
          "test/test-fs-event.c",
          "test/test-list.h",
          "test/test-loop-close.c",
          "test/test-signal-multiple-loops.c",
          "test/test-thread.c",
          "uv.gyp"
        ],
        "message": "unix, windows: add uv_loop_init and uv_loop_close\n\nThese functions supersede uv_loop_new and uv_loop_delete.\nuv_loop_init initialized a user allocated loop and uv_loop_close\nremoves all associated resources a loop uses after it has finished\nexecution.\n\nuv_loop_new and uv_loop_delete are now deprecated.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "include/uv.h||include/uv.h",
          "src/unix/loop.c||src/unix/loop.c",
          "src/win/core.c||src/win/core.c",
          "test/benchmark-async.c||test/benchmark-async.c",
          "test/benchmark-multi-accept.c||test/benchmark-multi-accept.c",
          "test/test-embed.c||test/test-embed.c",
          "test/test-fs-event.c||test/test-fs-event.c",
          "test/test-list.h||test/test-list.h",
          "test/test-loop-close.c||test/test-loop-close.c",
          "test/test-signal-multiple-loops.c||test/test-signal-multiple-loops.c",
          "test/test-thread.c||test/test-thread.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:                          test/test-list.h \\",
          "148:                          test/test-loop-handles.c \\",
          "149:                          test/test-loop-alive.c \\",
          "150:                          test/test-loop-stop.c \\",
          "151:                          test/test-loop-time.c \\",
          "152:                          test/test-multiple-listen.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:                          test/test-loop-close.c \\",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "261: UV_EXTERN uv_loop_t* uv_default_loop(void);",
          "",
          "[Removed Lines]",
          "255: UV_EXTERN uv_loop_t* uv_loop_new(void);",
          "256: UV_EXTERN void uv_loop_delete(uv_loop_t*);",
          "",
          "[Added Lines]",
          "262: UV_EXTERN int uv_loop_init(uv_loop_t* loop);",
          "269: UV_EXTERN int uv_loop_close(uv_loop_t* loop);",
          "276: UV_EXTERN uv_loop_t* uv_loop_new(void);",
          "283: UV_EXTERN void uv_loop_delete(uv_loop_t*);",
          "",
          "---------------"
        ],
        "src/unix/loop.c||src/unix/loop.c": [
          "File: src/unix/loop.c -> src/unix/loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include <unistd.h>",
          "30: static int uv__loop_init(uv_loop_t* loop, int default_loop);",
          "33: static uv_loop_t default_loop_struct;",
          "34: static uv_loop_t* default_loop_ptr;",
          "",
          "[Removed Lines]",
          "31: static void uv__loop_delete(uv_loop_t* loop);",
          "",
          "[Added Lines]",
          "31: static void uv__loop_close(uv_loop_t* loop);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: }",
          "49: uv_loop_t* uv_loop_new(void) {",
          "50:   uv_loop_t* loop;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: int uv_loop_init(uv_loop_t* loop) {",
          "50:   return uv__loop_init(loop, /* default_loop? */ 0);",
          "51: }",
          "54: int uv_loop_close(uv_loop_t* loop) {",
          "55:   QUEUE* q;",
          "56:   uv_handle_t* h;",
          "57:   if (!QUEUE_EMPTY(&(loop)->active_reqs))",
          "58:     return -EBUSY;",
          "59:   QUEUE_FOREACH(q, &loop->handle_queue) {",
          "60:     h = QUEUE_DATA(q, uv_handle_t, handle_queue);",
          "61:     if (!(h->flags & UV__HANDLE_INTERNAL))",
          "62:       return -EBUSY;",
          "63:   }",
          "64:   uv__loop_close(loop);",
          "65: #ifndef NDEBUG",
          "66:   memset(loop, -1, sizeof(*loop));",
          "67: #endif",
          "68:   if (loop == default_loop_ptr)",
          "69:     default_loop_ptr = NULL;",
          "70:   return 0;",
          "71: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "53:   if (loop == NULL)",
          "54:     return NULL;",
          "57:     free(loop);",
          "58:     return NULL;",
          "59:   }",
          "",
          "[Removed Lines]",
          "56:   if (uv__loop_init(loop, /* default_loop? */ 0)) {",
          "",
          "[Added Lines]",
          "81:   if (uv_loop_init(loop)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65: void uv_loop_delete(uv_loop_t* loop) {",
          "73:     free(loop);",
          "74: }",
          "",
          "[Removed Lines]",
          "66:   uv__loop_delete(loop);",
          "67: #ifndef NDEBUG",
          "68:   memset(loop, -1, sizeof(*loop));",
          "69: #endif",
          "70:   if (loop == default_loop_ptr)",
          "71:     default_loop_ptr = NULL;",
          "72:   else",
          "",
          "[Added Lines]",
          "91:   uv_loop_t* default_loop;",
          "92:   default_loop = default_loop_ptr;",
          "93:   uv_loop_close(loop);",
          "94:   if (loop != default_loop)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134: }",
          "138:   uv__signal_loop_cleanup(loop);",
          "139:   uv__platform_loop_delete(loop);",
          "140:   uv__async_stop(loop, &loop->async_watcher);",
          "",
          "[Removed Lines]",
          "137: static void uv__loop_delete(uv_loop_t* loop) {",
          "",
          "[Added Lines]",
          "159: static void uv__loop_close(uv_loop_t* loop) {",
          "",
          "---------------"
        ],
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: }",
          "121:   loop->iocp = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 1);",
          "",
          "[Removed Lines]",
          "119: static void uv_loop_init(uv_loop_t* loop) {",
          "122:   if (loop->iocp == NULL) {",
          "123:     uv_fatal_error(GetLastError(), \"CreateIoCompletionPort\");",
          "124:   }",
          "",
          "[Added Lines]",
          "119: int uv_loop_init(uv_loop_t* loop) {",
          "121:   uv__once_init();",
          "125:   if (loop->iocp == NULL)",
          "126:     return uv_translate_sys_error(GetLastError());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:   loop->timer_counter = 0;",
          "156:   loop->stop_flag = 0;",
          "157: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160:   return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177: }",
          "180: uv_loop_t* uv_loop_new(void) {",
          "181:   uv_loop_t* loop;",
          "186:   loop = (uv_loop_t*)malloc(sizeof(uv_loop_t));",
          "190:   }",
          "193:   return loop;",
          "194: }",
          "197: void uv_loop_delete(uv_loop_t* loop) {",
          "207:     free(loop);",
          "209: }",
          "",
          "[Removed Lines]",
          "184:   uv__once_init();",
          "188:   if (!loop) {",
          "189:     uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "192:   uv_loop_init(loop);",
          "198:   if (loop != &uv_default_loop_) {",
          "199:     int i;",
          "200:     for (i = 0; i < ARRAY_SIZE(loop->poll_peer_sockets); i++) {",
          "201:       SOCKET sock = loop->poll_peer_sockets[i];",
          "202:       if (sock != 0 && sock != INVALID_SOCKET) {",
          "203:         closesocket(sock);",
          "204:       }",
          "205:     }",
          "208:   }",
          "",
          "[Added Lines]",
          "184: int uv_loop_close(uv_loop_t* loop) {",
          "185:   QUEUE* q;",
          "186:   uv_handle_t* h;",
          "187:   if (!QUEUE_EMPTY(&(loop)->active_reqs))",
          "188:     return UV_EBUSY;",
          "189:   QUEUE_FOREACH(q, &loop->handle_queue) {",
          "190:     h = QUEUE_DATA(q, uv_handle_t, handle_queue);",
          "191:     if (!(h->flags & UV__HANDLE_INTERNAL))",
          "192:       return UV_EBUSY;",
          "193:   }",
          "194:   if (loop != &uv_default_loop_) {",
          "195:     int i;",
          "196:     for (i = 0; i < ARRAY_SIZE(loop->poll_peer_sockets); i++) {",
          "197:       SOCKET sock = loop->poll_peer_sockets[i];",
          "198:       if (sock != 0 && sock != INVALID_SOCKET)",
          "199:         closesocket(sock);",
          "200:     }",
          "201:   }",
          "203:   return 0;",
          "204: }",
          "211:   if (loop == NULL) {",
          "212:     return NULL;",
          "213:   }",
          "215:   if (uv_loop_init(loop)) {",
          "216:     free(loop);",
          "217:     return NULL;",
          "225:   uv_loop_close(loop);",
          "226:   if (loop != &uv_default_loop_)",
          "",
          "---------------"
        ],
        "test/benchmark-async.c||test/benchmark-async.c": [
          "File: test/benchmark-async.c -> test/benchmark-async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #define NUM_PINGS (1000 * 1000)",
          "30: struct ctx {",
          "32:   uv_thread_t thread;",
          "",
          "[Removed Lines]",
          "31:   uv_loop_t* loop;",
          "",
          "[Added Lines]",
          "31:   uv_loop_t loop;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67: static void worker(void* arg) {",
          "68:   struct ctx* ctx = arg;",
          "69:   ASSERT(0 == uv_async_send(&ctx->main_async));",
          "71: }",
          "",
          "[Removed Lines]",
          "70:   ASSERT(0 == uv_run(ctx->loop, UV_RUN_DEFAULT));",
          "",
          "[Added Lines]",
          "70:   ASSERT(0 == uv_run(&ctx->loop, UV_RUN_DEFAULT));",
          "71:   uv_loop_close(&ctx->loop);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:   for (i = 0; i < nthreads; i++) {",
          "84:     ctx = threads + i;",
          "85:     ctx->nthreads = nthreads;",
          "89:     ASSERT(0 == uv_async_init(uv_default_loop(),",
          "90:                               &ctx->main_async,",
          "91:                               main_async_cb));",
          "",
          "[Removed Lines]",
          "86:     ctx->loop = uv_loop_new();",
          "87:     ASSERT(ctx->loop != NULL);",
          "88:     ASSERT(0 == uv_async_init(ctx->loop, &ctx->worker_async, worker_async_cb));",
          "",
          "[Added Lines]",
          "87:     ASSERT(0 == uv_loop_init(&ctx->loop));",
          "88:     ASSERT(0 == uv_async_init(&ctx->loop, &ctx->worker_async, worker_async_cb));",
          "",
          "---------------"
        ],
        "test/benchmark-multi-accept.c||test/benchmark-multi-accept.c": [
          "File: test/benchmark-multi-accept.c -> test/benchmark-multi-accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250: static void server_cb(void *arg) {",
          "251:   struct server_ctx *ctx;",
          "254:   ctx = arg;",
          "259:   uv_unref((uv_handle_t*) &ctx->async_handle);",
          "262:   uv_sem_wait(&ctx->semaphore);",
          "264:   uv_sem_post(&ctx->semaphore);",
          "267:   ASSERT(0 == uv_listen((uv_stream_t*) &ctx->server_handle,",
          "268:                         128,",
          "269:                         sv_connection_cb));",
          "273: }",
          "",
          "[Removed Lines]",
          "252:   uv_loop_t* loop;",
          "255:   loop = uv_loop_new();",
          "256:   ASSERT(loop != NULL);",
          "258:   ASSERT(0 == uv_async_init(loop, &ctx->async_handle, sv_async_cb));",
          "263:   get_listen_handle(loop, (uv_stream_t*) &ctx->server_handle);",
          "270:   ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));",
          "272:   uv_loop_delete(loop);",
          "",
          "[Added Lines]",
          "252:   uv_loop_t loop;",
          "255:   ASSERT(0 == uv_loop_init(&loop));",
          "257:   ASSERT(0 == uv_async_init(&loop, &ctx->async_handle, sv_async_cb));",
          "262:   get_listen_handle(&loop, (uv_stream_t*) &ctx->server_handle);",
          "269:   ASSERT(0 == uv_run(&loop, UV_RUN_DEFAULT));",
          "271:   uv_loop_close(&loop);",
          "",
          "---------------"
        ],
        "test/test-embed.c||test/test-embed.c": [
          "File: test/test-embed.c -> test/test-embed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109: TEST_IMPL(embed) {",
          "110: #if defined(HAVE_KQUEUE) || defined(HAVE_EPOLL)",
          "116:   embed_timer_called = 0;",
          "117:   embed_closed = 0;",
          "122:   uv_timer_init(uv_default_loop(), &embed_timer);",
          "",
          "[Removed Lines]",
          "111:   uv_loop_t* external;",
          "113:   external = uv_loop_new();",
          "114:   ASSERT(external != NULL);",
          "119:   uv_async_init(external, &embed_async, embed_cb);",
          "",
          "[Added Lines]",
          "111:   uv_loop_t external;",
          "113:   ASSERT(0 == uv_loop_init(&external));",
          "118:   uv_async_init(&external, &embed_async, embed_cb);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:   uv_thread_create(&embed_thread, embed_thread_runner, NULL);",
          "132:   uv_thread_join(&embed_thread);",
          "135:   ASSERT(embed_timer_called == 1);",
          "136: #endif",
          "",
          "[Removed Lines]",
          "130:   uv_run(external, UV_RUN_DEFAULT);",
          "133:   uv_loop_delete(external);",
          "",
          "[Added Lines]",
          "129:   uv_run(&external, UV_RUN_DEFAULT);",
          "132:   uv_loop_close(&external);",
          "",
          "---------------"
        ],
        "test/test-fs-event.c||test/test-fs-event.c": [
          "File: test/test-fs-event.c -> test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "654: TEST_IMPL(fs_event_error_reporting) {",
          "655:   unsigned int i;",
          "657:   uv_fs_event_t events[ARRAY_SIZE(loops)];",
          "658:   uv_loop_t* loop;",
          "659:   uv_fs_event_t* event;",
          "",
          "[Removed Lines]",
          "656:   uv_loop_t* loops[1024];",
          "",
          "[Added Lines]",
          "656:   uv_loop_t loops[1024];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "670:   for (i = 0; i < ARRAY_SIZE(loops); i++) {",
          "672:     event = &events[i];",
          "676:     timer_cb_called = 0;",
          "677:     close_cb_called = 0;",
          "678:     ASSERT(0 == uv_fs_event_init(loop, event));",
          "",
          "[Removed Lines]",
          "671:     loop = uv_loop_new();",
          "673:     ASSERT(loop != NULL);",
          "675:     loops[i] = loop;",
          "",
          "[Added Lines]",
          "671:     loop = &loops[i];",
          "672:     ASSERT(0 == uv_loop_init(loop));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "699:   do {",
          "701:     event = &events[i];",
          "703:     ASSERT(0 == uv_fs_event_stop(event));",
          "",
          "[Removed Lines]",
          "700:     loop = loops[i];",
          "",
          "[Added Lines]",
          "699:     loop = &loops[i];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "708:     uv_run(loop, UV_RUN_DEFAULT);",
          "709:     ASSERT(close_cb_called == 1);",
          "714:   } while (i-- != 0);",
          "716:   remove(\"watch_dir/\");",
          "",
          "[Removed Lines]",
          "711:     uv_loop_delete(loop);",
          "713:     loops[i] = NULL;",
          "",
          "[Added Lines]",
          "710:     uv_loop_close(loop);",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: TEST_DECLARE   (run_once)",
          "26: TEST_DECLARE   (run_nowait)",
          "27: TEST_DECLARE   (loop_alive)",
          "28: TEST_DECLARE   (loop_stop)",
          "29: TEST_DECLARE   (loop_update_time)",
          "30: TEST_DECLARE   (barrier_1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: TEST_DECLARE   (loop_close)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:   TEST_ENTRY  (run_once)",
          "262:   TEST_ENTRY  (run_nowait)",
          "263:   TEST_ENTRY  (loop_alive)",
          "264:   TEST_ENTRY  (loop_stop)",
          "265:   TEST_ENTRY  (loop_update_time)",
          "266:   TEST_ENTRY  (barrier_1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:   TEST_ENTRY  (loop_close)",
          "",
          "---------------"
        ],
        "test/test-loop-close.c||test/test-loop-close.c": [
          "File: test/test-loop-close.c -> test/test-loop-close.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: static uv_timer_t timer_handle;",
          "27: static void timer_cb(uv_timer_t* handle, int status) {",
          "28:   ASSERT(handle);",
          "29:   ASSERT(status == 0);",
          "30:   uv_stop(handle->loop);",
          "31: }",
          "34: TEST_IMPL(loop_close) {",
          "35:   int r;",
          "36:   uv_loop_t loop;",
          "38:   ASSERT(0 == uv_loop_init(&loop));",
          "40:   uv_timer_init(&loop, &timer_handle);",
          "41:   uv_timer_start(&timer_handle, timer_cb, 100, 100);",
          "43:   ASSERT(UV_EBUSY == uv_loop_close(&loop));",
          "45:   uv_run(&loop, UV_RUN_DEFAULT);",
          "47:   uv_close((uv_handle_t*) &timer_handle, NULL);",
          "48:   r = uv_run(&loop, UV_RUN_DEFAULT);",
          "49:   ASSERT(r == 0);",
          "51:   ASSERT(0 == uv_loop_close(&loop));",
          "53:   return 0;",
          "54: }",
          "",
          "---------------"
        ],
        "test/test-signal-multiple-loops.c||test/test-signal-multiple-loops.c": [
          "File: test/test-signal-multiple-loops.c -> test/test-signal-multiple-loops.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   uv_signal_t signal1a;",
          "85:   uv_signal_t signal1b;",
          "86:   uv_signal_t signal2;",
          "88:   int r;",
          "90:   action = (enum signal_action) (uintptr_t) context;",
          "96:   if (action == ONLY_SIGUSR1 || action == SIGUSR1_AND_SIGUSR2) {",
          "98:     ASSERT(r == 0);",
          "99:     r = uv_signal_start(&signal1a, signal1_cb, SIGUSR1);",
          "100:     ASSERT(r == 0);",
          "102:     ASSERT(r == 0);",
          "103:     r = uv_signal_start(&signal1b, signal1_cb, SIGUSR1);",
          "104:     ASSERT(r == 0);",
          "105:   }",
          "107:   if (action == ONLY_SIGUSR2 || action == SIGUSR1_AND_SIGUSR2) {",
          "109:     ASSERT(r == 0);",
          "110:     r = uv_signal_start(&signal2, signal2_cb, SIGUSR2);",
          "111:     ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "87:   uv_loop_t* loop;",
          "92:   loop = uv_loop_new();",
          "93:   ASSERT(loop != NULL);",
          "97:     r = uv_signal_init(loop, &signal1a);",
          "101:     r = uv_signal_init(loop, &signal1b);",
          "108:     r = uv_signal_init(loop, &signal2);",
          "",
          "[Added Lines]",
          "87:   uv_loop_t loop;",
          "92:   ASSERT(0 == uv_loop_init(&loop));",
          "96:     r = uv_signal_init(&loop, &signal1a);",
          "100:     r = uv_signal_init(&loop, &signal1b);",
          "107:     r = uv_signal_init(&loop, &signal2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "121:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "120:   r = uv_run(loop, UV_RUN_DEFAULT);",
          "",
          "[Added Lines]",
          "119:   r = uv_run(&loop, UV_RUN_DEFAULT);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:   uv_sem_post(&sem);",
          "140:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "139:   r = uv_run(loop, UV_RUN_DEFAULT);",
          "",
          "[Added Lines]",
          "138:   r = uv_run(&loop, UV_RUN_DEFAULT);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "150:   }",
          "154:   ASSERT(r == 0);",
          "157: }",
          "",
          "[Removed Lines]",
          "153:   r = uv_run(loop, UV_RUN_DEFAULT);",
          "156:   uv_loop_delete(loop);",
          "",
          "[Added Lines]",
          "152:   r = uv_run(&loop, UV_RUN_DEFAULT);",
          "155:   uv_loop_close(&loop);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "166:   (void) context;",
          "168:   do {",
          "170:     uv_signal_t signal;",
          "171:     int r;",
          "174:     ASSERT(loop != NULL);",
          "176:     r = uv_signal_init(loop, &signal);",
          "177:     ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "169:     uv_loop_t* loop;",
          "173:     loop = uv_loop_new();",
          "",
          "[Added Lines]",
          "168:     uv_loop_t *loop;",
          "172:     loop = malloc(sizeof(*loop));",
          "174:     ASSERT(0 == uv_loop_init(loop));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "184:     r = uv_run(loop, UV_RUN_DEFAULT);",
          "185:     ASSERT(r == 0);",
          "189:     increment_counter(&loop_creation_counter);",
          "190:   } while (!stop);",
          "",
          "[Removed Lines]",
          "187:     uv_loop_delete(loop);",
          "",
          "[Added Lines]",
          "187:     uv_loop_close(loop);",
          "",
          "---------------"
        ],
        "test/test-thread.c||test/test-thread.c": [
          "File: test/test-thread.c -> test/test-thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:   int r;",
          "113:   struct test_thread* thread = arg;",
          "116:   ASSERT(loop != NULL);",
          "118:   for (i = 0; i < ARRAY_SIZE(getaddrinfo_reqs); i++) {",
          "119:     struct getaddrinfo_req* req = getaddrinfo_reqs + i;",
          "",
          "[Removed Lines]",
          "115:   loop = uv_loop_new();",
          "",
          "[Added Lines]",
          "115:   loop = malloc(sizeof *loop);",
          "117:   ASSERT(0 == uv_loop_init(loop));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:   r = uv_run(loop, UV_RUN_DEFAULT);",
          "133:   ASSERT(r == 0);",
          "136:   thread->thread_called = 1;",
          "137: }",
          "",
          "[Removed Lines]",
          "135:   uv_loop_delete(loop);",
          "",
          "[Added Lines]",
          "136:   ASSERT(0 == uv_loop_close(loop));",
          "137:   free(loop);",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:         'test/test-list.h',",
          "327:         'test/test-loop-handles.c',",
          "328:         'test/test-loop-alive.c',",
          "329:         'test/test-loop-stop.c',",
          "330:         'test/test-loop-time.c',",
          "331:         'test/test-walk-handles.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:         'test/test-loop-close.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b197515367d1a996dca9009483d202b306f9474e",
      "candidate_info": {
        "commit_hash": "b197515367d1a996dca9009483d202b306f9474e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b197515367d1a996dca9009483d202b306f9474e",
        "files": [
          "src/unix/core.c",
          "src/unix/internal.h",
          "src/unix/linux-syscalls.c",
          "src/unix/linux-syscalls.h",
          "src/unix/stream.c",
          "src/unix/tty.c"
        ],
        "message": "unix: reopen tty as /dev/tty\n\nReopen the file descriptor when it refers to a tty. This lets us put the\ntty in non-blocking mode without affecting other processes that share it\nwith us.\n\nThis brings back commit 31f9fbc, which was reverted in 20bb1bf. The OSX\nselect trick is working now.\n\nOriginal patch by @bnoordhuis",
        "before_after_code_files": [
          "src/unix/core.c||src/unix/core.c",
          "src/unix/internal.h||src/unix/internal.h",
          "src/unix/linux-syscalls.c||src/unix/linux-syscalls.c",
          "src/unix/linux-syscalls.h||src/unix/linux-syscalls.h",
          "src/unix/stream.c||src/unix/stream.c",
          "src/unix/tty.c||src/unix/tty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59: # include <sys/filio.h>",
          "60: # include <sys/ioctl.h>",
          "61: # include <sys/wait.h>",
          "68: #endif",
          "70: static void uv__run_pending(uv_loop_t* loop);",
          "",
          "[Removed Lines]",
          "62: #endif",
          "64: #if __FreeBSD__ >= 10",
          "65: # define uv__accept4 accept4",
          "66: # define UV__SOCK_NONBLOCK SOCK_NONBLOCK",
          "67: # define UV__SOCK_CLOEXEC  SOCK_CLOEXEC",
          "",
          "[Added Lines]",
          "62: # define UV__O_CLOEXEC O_CLOEXEC",
          "63: # if __FreeBSD__ >= 10",
          "64: #  define uv__accept4 accept4",
          "65: #  define UV__SOCK_NONBLOCK SOCK_NONBLOCK",
          "66: #  define UV__SOCK_CLOEXEC  SOCK_CLOEXEC",
          "67: # endif",
          "68: # if !defined(F_DUP2FD_CLOEXEC) && defined(_F_DUP2FD_CLOEXEC)",
          "69: #  define F_DUP2FD_CLOEXEC  _F_DUP2FD_CLOEXEC",
          "70: # endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "822:   return 0;",
          "823: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829: int uv__open_cloexec(const char* path, int flags) {",
          "830:   int err;",
          "831:   int fd;",
          "833: #if defined(__linux__) || (defined(__FreeBSD__) && __FreeBSD__ >= 9)",
          "834:   static int no_cloexec;",
          "836:   if (!no_cloexec) {",
          "837:     fd = open(path, flags | UV__O_CLOEXEC);",
          "838:     if (fd != -1)",
          "839:       return fd;",
          "841:     if (errno != EINVAL)",
          "842:       return -errno;",
          "845:     no_cloexec = 1;",
          "846:   }",
          "847: #endif",
          "849:   fd = open(path, flags);",
          "850:   if (fd == -1)",
          "851:     return -errno;",
          "853:   err = uv__cloexec(fd, 1);",
          "854:   if (err) {",
          "855:     uv__close(fd);",
          "856:     return err;",
          "857:   }",
          "859:   return fd;",
          "860: }",
          "863: int uv__dup2_cloexec(int oldfd, int newfd) {",
          "864:   int r;",
          "865: #if defined(__FreeBSD__) && __FreeBSD__ >= 10",
          "866:   do",
          "867:     r = dup3(oldfd, newfd, O_CLOEXEC);",
          "868:   while (r == -1 && errno == EINTR);",
          "869:   if (r == -1)",
          "870:     return -errno;",
          "871:   return r;",
          "872: #elif defined(__FreeBSD__) && defined(F_DUP2FD_CLOEXEC)",
          "873:   do",
          "874:     r = fcntl(oldfd, F_DUP2FD_CLOEXEC, newfd);",
          "875:   while (r == -1 && errno == EINTR);",
          "876:   if (r != -1)",
          "877:     return r;",
          "878:   if (errno != EINVAL)",
          "879:     return -errno;",
          "881: #elif defined(__linux__)",
          "882:   static int no_dup3;",
          "883:   if (!no_dup3) {",
          "884:     do",
          "885:       r = uv__dup3(oldfd, newfd, UV__O_CLOEXEC);",
          "886:     while (r == -1 && (errno == EINTR || errno == EBUSY));",
          "887:     if (r != -1)",
          "888:       return r;",
          "889:     if (errno != ENOSYS)",
          "890:       return -errno;",
          "892:     no_dup3 = 1;",
          "893:   }",
          "894: #endif",
          "895:   {",
          "896:     int err;",
          "897:     do",
          "898:       r = dup2(oldfd, newfd);",
          "899: #if defined(__linux__)",
          "900:     while (r == -1 && (errno == EINTR || errno == EBUSY));",
          "901: #else",
          "902:     while (r == -1 && errno == EINTR);",
          "903: #endif",
          "905:     if (r == -1)",
          "906:       return -errno;",
          "908:     err = uv__cloexec(newfd, 1);",
          "909:     if (err) {",
          "910:       uv__close(newfd);",
          "911:       return err;",
          "912:     }",
          "914:     return r;",
          "915:   }",
          "916: }",
          "",
          "---------------"
        ],
        "src/unix/internal.h||src/unix/internal.h": [
          "File: src/unix/internal.h -> src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "190: void uv__server_io(uv_loop_t* loop, uv__io_t* w, unsigned int events);",
          "191: int uv__accept(int sockfd);",
          "194: int uv_tcp_listen(uv_tcp_t* tcp, int backlog, uv_connection_cb cb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "192: int uv__dup2_cloexec(int oldfd, int newfd);",
          "193: int uv__open_cloexec(const char* path, int flags);",
          "",
          "---------------"
        ],
        "src/unix/linux-syscalls.c||src/unix/linux-syscalls.c": [
          "File: src/unix/linux-syscalls.c -> src/unix/linux-syscalls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: # endif",
          "223: int uv__accept4(int fd, struct sockaddr* addr, socklen_t* addrlen, int flags) {",
          "224: #if defined(__i386__)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: #ifndef __NR_dup3",
          "223: # if defined(__x86_64__)",
          "224: #  define __NR_dup3 292",
          "225: # elif defined(__i386__)",
          "226: #  define __NR_dup3 330",
          "227: # elif defined(__arm__)",
          "228: #  define __NR_dup3 (UV_SYSCALL_BASE + 358)",
          "229: # endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "422:   return errno = ENOSYS, -1;",
          "423: #endif",
          "424: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "439: int uv__dup3(int oldfd, int newfd, int flags) {",
          "440: #if defined(__NR_dup3)",
          "441:   return syscall(__NR_dup3, oldfd, newfd, flags);",
          "442: #else",
          "443:   return errno = ENOSYS, -1;",
          "444: #endif",
          "445: }",
          "",
          "---------------"
        ],
        "src/unix/linux-syscalls.h||src/unix/linux-syscalls.h": [
          "File: src/unix/linux-syscalls.h -> src/unix/linux-syscalls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:                  int flags);",
          "150: ssize_t uv__preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset);",
          "151: ssize_t uv__pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: int uv__dup3(int oldfd, int newfd, int flags);",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: static size_t uv__write_req_size(uv_write_t* req);",
          "96: static size_t uv_count_bufs(const uv_buf_t bufs[], unsigned int nbufs) {",
          "97:   unsigned int i;",
          "98:   size_t bytes;",
          "",
          "[Removed Lines]",
          "67: static int uv__open_cloexec(const char* path, int flags) {",
          "68:   int err;",
          "69:   int fd;",
          "71: #if defined(__linux__)",
          "72:   fd = open(path, flags | UV__O_CLOEXEC);",
          "73:   if (fd != -1)",
          "74:     return fd;",
          "76:   if (errno != EINVAL)",
          "77:     return -errno;",
          "80: #endif",
          "82:   fd = open(path, flags);",
          "83:   if (fd == -1)",
          "84:     return -errno;",
          "86:   err = uv__cloexec(fd, 1);",
          "87:   if (err) {",
          "88:     uv__close(fd);",
          "89:     return err;",
          "90:   }",
          "92:   return fd;",
          "93: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/unix/tty.c||src/unix/tty.c": [
          "File: src/unix/tty.c -> src/unix/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: int uv_tty_init(uv_loop_t* loop, uv_tty_t* tty, int fd, int readable) {",
          "45:   }",
          "55:   }",
          "57:   tty->mode = 0;",
          "58:   return 0;",
          "59: }",
          "",
          "[Removed Lines]",
          "38:   uv__stream_init(loop, (uv_stream_t*)tty, UV_TTY);",
          "40: #if defined(__APPLE__)",
          "41:   {",
          "42:     int err = uv__stream_try_select((uv_stream_t*) tty, &fd);",
          "43:     if (err)",
          "44:       return err;",
          "48:   if (readable) {",
          "49:     uv__nonblock(fd, 1);",
          "50:     uv__stream_open((uv_stream_t*)tty, fd, UV_STREAM_READABLE);",
          "51:   } else {",
          "53:     uv__stream_open((uv_stream_t*)tty, fd, UV_STREAM_WRITABLE);",
          "54:     tty->flags |= UV_STREAM_BLOCKING;",
          "",
          "[Added Lines]",
          "38:   int flags;",
          "39:   int newfd;",
          "40:   int r;",
          "42:   newfd = -1;",
          "44:   uv__stream_init(loop, (uv_stream_t*) tty, UV_TTY);",
          "56:   if (isatty(fd)) {",
          "57:     newfd = uv__open_cloexec(\"/dev/tty\", O_RDWR);",
          "59:     if (newfd == -1)",
          "60:       return -errno;",
          "62:     r = uv__dup2_cloexec(newfd, fd);",
          "63:     if (r < 0 && r != -EINVAL) {",
          "68:       uv__close(newfd);",
          "69:       return r;",
          "70:     }",
          "72:     fd = newfd;",
          "75: #if defined(__APPLE__)",
          "76:   r = uv__stream_try_select((uv_stream_t*) tty, &fd);",
          "77:   if (r) {",
          "78:     if (newfd != -1)",
          "79:       uv__close(newfd);",
          "80:     return r;",
          "82: #endif",
          "84:   if (readable)",
          "85:     flags = UV_STREAM_READABLE;",
          "86:   else",
          "87:     flags = UV_STREAM_WRITABLE;",
          "89:   uv__nonblock(fd, 1);",
          "90:   uv__stream_open((uv_stream_t*) tty, fd, flags);",
          "",
          "---------------"
        ]
      }
    }
  ]
}