{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ed0c34857ae209d2272e9f625359196fd4342e58",
      "candidate_info": {
        "commit_hash": "ed0c34857ae209d2272e9f625359196fd4342e58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed0c34857ae209d2272e9f625359196fd4342e58",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/gencol1.test"
        ],
        "message": "Do not try to access a generated column through an index if the collating sequence for the generated column is non-standard. Part 2 of ticket [e0a8120553f4b082]\n\nFossilOrigin-Name: 056bb8dcbdc45989c5c6e86d2966200062e3c01c382ec52aae37c828104b4496",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 728ad39e3bd07a2503a95c68ed5bbc3f28fd97551d59f12a5fab25dc68227e99",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1190:       x.pIdxExpr = aColExpr->a[iIdxCol].pExpr;",
          "1191:       w.xExprCallback = whereIndexExprTransNode;",
          "1192: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1194:       x.iTabCol = iRef;",
          "1195:       w.xExprCallback = whereIndexExprTransColumn;",
          "",
          "[Removed Lines]",
          "1193:     }else if( iRef>=0 && (pTab->aCol[iRef].colFlags & COLFLAG_VIRTUAL)!=0 ){",
          "",
          "[Added Lines]",
          "1193:     }else if( iRef>=0",
          "1194:        && (pTab->aCol[iRef].colFlags & COLFLAG_VIRTUAL)!=0",
          "1195:        && (pTab->aCol[iRef].zColl==0",
          "1196:            || sqlite3StrICmp(pTab->aCol[iRef].zColl, sqlite3StrBINARY)==0)",
          "1197:     ){",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "458: do_execsql_test gencol1-17.30 {",
          "459:   SELECT * FROM t0 WHERE (1 BETWEEN CAST(t0.c0 AS TEXT) AND t0.c0);",
          "460: } {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461: do_execsql_test gencol1-17.40 {",
          "462:   CREATE TABLE t1(a TEXT AS(b) COLLATE nocase, b TEXT, c INT, d DEFAULT 1);",
          "463:   INSERT INTO t1(b,c) VALUES('abc',11),('DEF',22),('ghi',33);",
          "464:   SELECT a FROM t1 WHERE b='DEF' AND a='def';",
          "465: } {DEF}",
          "466: do_execsql_test gencol1-17.50 {",
          "467:   CREATE INDEX t1bca ON t1(b,c,a);",
          "468:   SELECT a FROM t1 WHERE b='DEF' AND a='def';",
          "469: } {DEF}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed1e91044878b2a2714d973f51ec522fad551f0b",
      "candidate_info": {
        "commit_hash": "ed1e91044878b2a2714d973f51ec522fad551f0b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed1e91044878b2a2714d973f51ec522fad551f0b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Changes to sqlite3SelectNew() to work around a false-positive warning from GCC-10.  The code is very slightly larger and slower as a result.\n\nFossilOrigin-Name: 04e1edd8e5821a377407263829ed0d87968c708c9aeb1282107ea6f39a11c1cc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4ec8a5a203f10d228d0b3389120638766cc343179dbe38d5dbf69b650765934c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: ){",
          "142:   Select standin;",
          "144:   if( pNew==0 ){",
          "145:     assert( pParse->db->mallocFailed );",
          "146:     pNew = &standin;",
          "",
          "[Removed Lines]",
          "141:   Select *pNew;",
          "143:   pNew = sqlite3DbMallocRawNN(pParse->db, sizeof(*pNew) );",
          "",
          "[Added Lines]",
          "141:   Select *pNew, *pAllocated;",
          "143:   pAllocated = pNew = sqlite3DbMallocRawNN(pParse->db, sizeof(*pNew) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174: #endif",
          "175:   if( pParse->db->mallocFailed ) {",
          "176:     clearSelect(pParse->db, pNew, pNew!=&standin);",
          "178:   }else{",
          "179:     assert( pNew->pSrc!=0 || pParse->nErr>0 );",
          "180:   }",
          "183: }",
          "",
          "[Removed Lines]",
          "177:     pNew = 0;",
          "181:   assert( pNew!=&standin );",
          "182:   return pNew;",
          "",
          "[Added Lines]",
          "177:     pAllocated = 0;",
          "181:   return pAllocated;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b2eb7e46eb3c0a1611d7777fb3a1ba9b30f56ea5",
      "candidate_info": {
        "commit_hash": "b2eb7e46eb3c0a1611d7777fb3a1ba9b30f56ea5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b2eb7e46eb3c0a1611d7777fb3a1ba9b30f56ea5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Performance optimization for the sqlite3FindTable() subroutine.\n\nFossilOrigin-Name: 55910b9a7287be92af9f95e0af54af822055d15b7eabbcc81d61410d0bf67726",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dc18d89354cffcb726722c234a0271ab628a71277b22887eea2bf118028193a6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "312:     return 0;",
          "313:   }",
          "314: #endif",
          "322:       }",
          "323:     }",
          "329:   }",
          "331: }",
          "",
          "[Removed Lines]",
          "315:   while(1){",
          "316:     for(i=OMIT_TEMPDB; i<db->nDb; i++){",
          "318:       if( zDatabase==0 || sqlite3DbIsNamed(db, j, zDatabase) ){",
          "319:         assert( sqlite3SchemaMutexHeld(db, j, 0) );",
          "320:         p = sqlite3HashFind(&db->aDb[j].pSchema->tblHash, zName);",
          "321:         if( p ) return p;",
          "326:     if( sqlite3StrICmp(zName, MASTER_NAME)!=0 ) break;",
          "327:     if( sqlite3_stricmp(zDatabase, db->aDb[1].zDbSName)!=0 ) break;",
          "328:     zName = TEMP_MASTER_NAME;",
          "330:   return 0;",
          "",
          "[Added Lines]",
          "315:   if( zDatabase ){",
          "316:     for(i=0; i<db->nDb; i++){",
          "317:       if( sqlite3StrICmp(zDatabase, db->aDb[i].zDbSName)==0 ) break;",
          "318:     }",
          "319:     if( i>=db->nDb ){",
          "322:       if( sqlite3StrICmp(zDatabase,\"main\")==0 ){",
          "323:         i = 0;",
          "324:       }else{",
          "325:         return 0;",
          "328:     p = sqlite3HashFind(&db->aDb[i].pSchema->tblHash, zName);",
          "329:     if( p==0 && i==1 && sqlite3StrICmp(zName, MASTER_NAME)==0 ){",
          "331:       p = sqlite3HashFind(&db->aDb[1].pSchema->tblHash, TEMP_MASTER_NAME);",
          "332:     }",
          "333:   }else{",
          "335:     p = sqlite3HashFind(&db->aDb[1].pSchema->tblHash, zName);",
          "336:     if( p ) return p;",
          "338:     p = sqlite3HashFind(&db->aDb[0].pSchema->tblHash, zName);",
          "339:     if( p ) return p;",
          "341:     for(i=2; i<db->nDb; i++){",
          "342:       assert( sqlite3SchemaMutexHeld(db, i, 0) );",
          "343:       p = sqlite3HashFind(&db->aDb[i].pSchema->tblHash, zName);",
          "344:       if( p ) break;",
          "345:     }",
          "347:   return p;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f5cfe6f2c4ccdc76963ee16ee85beab4f48782db",
      "candidate_info": {
        "commit_hash": "f5cfe6f2c4ccdc76963ee16ee85beab4f48782db",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f5cfe6f2c4ccdc76963ee16ee85beab4f48782db",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix a false-positive in the debugging logic that attempts to detect the use of uninitialized registers inside triggers. Ticket [c4c56482ced89d90]\n\nFossilOrigin-Name: 0463576b5de0a1ee71530f0e4988fc9cceda79148520bea2c67f1fbc4a99cea9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bd94d7d052734460904c687756231f8aa243a2252f07f742dd1e437aa940f536",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ]
      }
    },
    {
      "candidate_hash": "14d093f8473a532a3be809567df9c458b677ed86",
      "candidate_info": {
        "commit_hash": "14d093f8473a532a3be809567df9c458b677ed86",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/14d093f8473a532a3be809567df9c458b677ed86",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: 6f91769fdb0734905f05e1f4d1c81364e6e874450c9f13a0de2259d564f582a7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 13d2fed760e7d0def573c56b7181f45622b0ed78d61952a6de901f96949d074e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2494:   pSuper = (sqlite3_file *)sqlite3MallocZero(pVfs->szOsFile * 2);",
          "2495:   if( !pSuper ){",
          "2496:     rc = SQLITE_NOMEM_BKPT;",
          "2497:   }else{",
          "2498:     const int flags = (SQLITE_OPEN_READONLY|SQLITE_OPEN_SUPER_JOURNAL);",
          "2499:     rc = sqlite3OsOpen(pVfs, zSuper, pSuper, flags, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2497:     pJournal = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}