{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c795e3df7aacc12f064a491ca1bc61923185e2df",
      "candidate_info": {
        "commit_hash": "c795e3df7aacc12f064a491ca1bc61923185e2df",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c795e3df7aacc12f064a491ca1bc61923185e2df",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid harmless UB in memcpy() in the JSON extension.\n\nFossilOrigin-Name: 69e149f76853d196c8855fedfc98848b60fb116ac36bc08824b1a122469f8ece",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: static void jsonAppendRaw(JsonString *p, const char *zIn, u32 N){",
          "257:   if( (N+p->nUsed >= p->nAlloc) && jsonGrow(p,N)!=0 ) return;",
          "258:   memcpy(p->zBuf+p->nUsed, zIn, N);",
          "259:   p->nUsed += N;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257:   if( N==0 ) return;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1313557b512297e7b75ed748894379b2022aecf696d5a58318e46a668321c1ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f46be6a1b91e0dde0b8353a80cbc3eb28fff8421",
      "candidate_info": {
        "commit_hash": "f46be6a1b91e0dde0b8353a80cbc3eb28fff8421",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f46be6a1b91e0dde0b8353a80cbc3eb28fff8421",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5faultE.test",
          "ext/fts5/test/fts5trigram.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Allow fts5 trigram tables created with detail=column or detail=none to optimize LIKE and GLOB queries. Allow case-insensitive tables to optimize GLOB as well as LIKE.\n\nFossilOrigin-Name: 64782463be62b72b5cd0bfaa7c9b69aa487d807c5fe0e65a272080b7739fd21b",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5faultE.test||ext/fts5/test/fts5faultE.test",
          "ext/fts5/test/fts5trigram.test||ext/fts5/test/fts5trigram.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "687: int sqlite3Fts5ExprNew(",
          "688:   Fts5Config *pConfig,",
          "690:   const char *zExpr,",
          "691:   Fts5Expr **ppNew,",
          "692:   char **pzErr",
          "693: );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "689:   int bPhraseToAnd,",
          "695: int sqlite3Fts5ExprPattern(",
          "696:   Fts5Config *pConfig,",
          "697:   int bGlob,",
          "698:   int iCol,",
          "699:   const char *zText,",
          "700:   Fts5Expr **pp",
          "701: );",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "217: int sqlite3Fts5ExprNew(",
          "219:   int iCol,",
          "221:   Fts5Expr **ppNew,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:   int bPhraseToAnd,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "233:   memset(&sParse, 0, sizeof(sParse));",
          "234:   pEngine = sqlite3Fts5ParserAlloc(fts5ParseAlloc);",
          "235:   if( pEngine==0 ){ return SQLITE_NOMEM; }",
          "236:   sParse.pConfig = pConfig;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "236:   sParse.bPhraseToAnd = bPhraseToAnd;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "273:       pNew->pConfig = pConfig;",
          "274:       pNew->apExprPhrase = sParse.apPhrase;",
          "275:       pNew->nPhrase = sParse.nPhrase;",
          "276:       sParse.apPhrase = 0;",
          "277:     }",
          "278:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "279:       pNew->bDesc = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "295: int sqlite3Fts5ExprPattern(",
          "297: ){",
          "298:   i64 nText = strlen(zText);",
          "299:   char *zExpr = (char*)sqlite3_malloc64(nText*4 + 1);",
          "",
          "[Removed Lines]",
          "296:   Fts5Config *pConfig, int iCol, const char *zText, Fts5Expr **pp",
          "",
          "[Added Lines]",
          "300:   Fts5Config *pConfig, int bGlob, int iCol, const char *zText, Fts5Expr **pp",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "307:     int i = 0;",
          "308:     int iFirst = 0;",
          "311:       aSpec[0] = '_';",
          "312:       aSpec[1] = '%';",
          "313:       aSpec[2] = 0;",
          "",
          "[Removed Lines]",
          "310:     if( pConfig->ePattern==FTS5_PATTERN_LIKE ){",
          "",
          "[Added Lines]",
          "314:     if( bGlob==0 ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "341:       i++;",
          "342:     }",
          "343:     if( iOut>0 ){",
          "344:       zExpr[iOut] = '\\0';",
          "346:     }else{",
          "348:     }",
          "",
          "[Removed Lines]",
          "345:       rc = sqlite3Fts5ExprNew(pConfig, iCol, zExpr, pp, pConfig->pzErrmsg);",
          "",
          "[Added Lines]",
          "348:       int bAnd = 0;",
          "349:       if( pConfig->eDetail!=FTS5_DETAIL_FULL ){",
          "350:         bAnd = 1;",
          "351:         if( pConfig->eDetail==FTS5_DETAIL_NONE ){",
          "352:           iCol = pConfig->nCol;",
          "353:         }",
          "354:       }",
          "356:       rc = sqlite3Fts5ExprNew(pConfig, bAnd, iCol, zExpr, pp,pConfig->pzErrmsg);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1729:   pParse->pExpr = p;",
          "1730: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1743: static int parseGrowPhraseArray(Fts5Parse *pParse){",
          "1744:   if( (pParse->nPhrase % 8)==0 ){",
          "1745:     sqlite3_int64 nByte = sizeof(Fts5ExprPhrase*) * (pParse->nPhrase + 8);",
          "1746:     Fts5ExprPhrase **apNew;",
          "1747:     apNew = (Fts5ExprPhrase**)sqlite3_realloc64(pParse->apPhrase, nByte);",
          "1748:     if( apNew==0 ){",
          "1749:       pParse->rc = SQLITE_NOMEM;",
          "1750:       return SQLITE_NOMEM;",
          "1751:     }",
          "1752:     pParse->apPhrase = apNew;",
          "1753:   }",
          "1754:   return SQLITE_OK;",
          "1755: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1764:   }else{",
          "1766:     if( pAppend==0 ){",
          "1777:       }",
          "1778:       pParse->nPhrase++;",
          "1779:     }",
          "",
          "[Removed Lines]",
          "1767:       if( (pParse->nPhrase % 8)==0 ){",
          "1768:         sqlite3_int64 nByte = sizeof(Fts5ExprPhrase*) * (pParse->nPhrase + 8);",
          "1769:         Fts5ExprPhrase **apNew;",
          "1770:         apNew = (Fts5ExprPhrase**)sqlite3_realloc64(pParse->apPhrase, nByte);",
          "1771:         if( apNew==0 ){",
          "1772:           pParse->rc = SQLITE_NOMEM;",
          "1773:           fts5ExprPhraseFree(sCtx.pPhrase);",
          "1774:           return 0;",
          "1775:         }",
          "1776:         pParse->apPhrase = apNew;",
          "",
          "[Added Lines]",
          "1792:       if( parseGrowPhraseArray(pParse) ){",
          "1793:         fts5ExprPhraseFree(sCtx.pPhrase);",
          "1794:         return 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2180:   }",
          "2181: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2212: static Fts5ExprNode *fts5ParsePhraseToAnd(",
          "2213:   Fts5Parse *pParse,",
          "2214:   Fts5ExprNearset *pNear",
          "2215: ){",
          "2216:   int nTerm = pNear->apPhrase[0]->nTerm;",
          "2217:   int ii;",
          "2218:   int nByte;",
          "2219:   Fts5ExprNode *pRet;",
          "2221:   assert( pNear->nPhrase==1 );",
          "2222:   assert( pParse->bPhraseToAnd );",
          "2224:   nByte = sizeof(Fts5ExprNode) + nTerm*sizeof(Fts5ExprNode*);",
          "2225:   pRet = (Fts5ExprNode*)sqlite3Fts5MallocZero(&pParse->rc, nByte);",
          "2226:   if( pRet ){",
          "2227:     pRet->eType = FTS5_AND;",
          "2228:     pRet->nChild = nTerm;",
          "2229:     fts5ExprAssignXNext(pRet);",
          "2230:     pParse->nPhrase--;",
          "2231:     for(ii=0; ii<nTerm; ii++){",
          "2232:       Fts5ExprPhrase *pPhrase = (Fts5ExprPhrase*)sqlite3Fts5MallocZero(",
          "2233:           &pParse->rc, sizeof(Fts5ExprPhrase)",
          "2234:       );",
          "2235:       if( pPhrase ){",
          "2236:         if( parseGrowPhraseArray(pParse) ){",
          "2237:           fts5ExprPhraseFree(pPhrase);",
          "2238:         }else{",
          "2239:           pParse->apPhrase[pParse->nPhrase++] = pPhrase;",
          "2240:           pPhrase->nTerm = 1;",
          "2241:           pPhrase->aTerm[0].zTerm = sqlite3Fts5Strndup(",
          "2242:               &pParse->rc, pNear->apPhrase[0]->aTerm[ii].zTerm, -1",
          "2243:           );",
          "2244:           pRet->apChild[ii] = sqlite3Fts5ParseNode(pParse, FTS5_STRING,",
          "2245:               0, 0, sqlite3Fts5ParseNearset(pParse, 0, pPhrase)",
          "2246:           );",
          "2247:         }",
          "2248:       }",
          "2249:     }",
          "2251:     if( pParse->rc ){",
          "2252:       sqlite3Fts5ParseNodeFree(pRet);",
          "2253:       pRet = 0;",
          "2254:     }else{",
          "2255:       sqlite3Fts5ParseNearsetFree(pNear);",
          "2256:     }",
          "2257:   }",
          "2259:   return pRet;",
          "2260: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2204:     if( eType!=FTS5_STRING && pLeft==0 ) return pRight;",
          "2205:     if( eType!=FTS5_STRING && pRight==0 ) return pLeft;",
          "2229:           }",
          "2247:           }",
          "2248:         }",
          "2252:       }",
          "2253:     }",
          "2254:   }",
          "",
          "[Removed Lines]",
          "2207:     if( eType==FTS5_NOT ){",
          "2208:       nChild = 2;",
          "2209:     }else if( eType==FTS5_AND || eType==FTS5_OR ){",
          "2210:       nChild = 2;",
          "2211:       if( pLeft->eType==eType ) nChild += pLeft->nChild-1;",
          "2212:       if( pRight->eType==eType ) nChild += pRight->nChild-1;",
          "2213:     }",
          "2215:     nByte = sizeof(Fts5ExprNode) + sizeof(Fts5ExprNode*)*(nChild-1);",
          "2216:     pRet = (Fts5ExprNode*)sqlite3Fts5MallocZero(&pParse->rc, nByte);",
          "2218:     if( pRet ){",
          "2219:       pRet->eType = eType;",
          "2220:       pRet->pNear = pNear;",
          "2221:       fts5ExprAssignXNext(pRet);",
          "2222:       if( eType==FTS5_STRING ){",
          "2223:         int iPhrase;",
          "2224:         for(iPhrase=0; iPhrase<pNear->nPhrase; iPhrase++){",
          "2225:           pNear->apPhrase[iPhrase]->pNode = pRet;",
          "2226:           if( pNear->apPhrase[iPhrase]->nTerm==0 ){",
          "2227:             pRet->xNext = 0;",
          "2228:             pRet->eType = FTS5_EOF;",
          "2230:         }",
          "2232:         if( pParse->pConfig->eDetail!=FTS5_DETAIL_FULL ){",
          "2233:           Fts5ExprPhrase *pPhrase = pNear->apPhrase[0];",
          "2234:           if( pNear->nPhrase!=1",
          "2235:            || pPhrase->nTerm>1",
          "2236:            || (pPhrase->nTerm>0 && pPhrase->aTerm[0].bFirst)",
          "2237:           ){",
          "2238:             assert( pParse->rc==SQLITE_OK );",
          "2239:             pParse->rc = SQLITE_ERROR;",
          "2240:             assert( pParse->zErr==0 );",
          "2241:             pParse->zErr = sqlite3_mprintf(",
          "2242:                 \"fts5: %s queries are not supported (detail!=full)\",",
          "2243:                 pNear->nPhrase==1 ? \"phrase\": \"NEAR\"",
          "2244:                 );",
          "2245:             sqlite3_free(pRet);",
          "2246:             pRet = 0;",
          "2249:       }else{",
          "2250:         fts5ExprAddChildren(pRet, pLeft);",
          "2251:         fts5ExprAddChildren(pRet, pRight);",
          "",
          "[Added Lines]",
          "2286:     if( eType==FTS5_STRING",
          "2287:      && pParse->bPhraseToAnd",
          "2288:      && pNear->apPhrase[0]->nTerm>1",
          "2289:     ){",
          "2290:       pRet = fts5ParsePhraseToAnd(pParse, pNear);",
          "2291:     }else{",
          "2292:       if( eType==FTS5_NOT ){",
          "2293:         nChild = 2;",
          "2294:       }else if( eType==FTS5_AND || eType==FTS5_OR ){",
          "2295:         nChild = 2;",
          "2296:         if( pLeft->eType==eType ) nChild += pLeft->nChild-1;",
          "2297:         if( pRight->eType==eType ) nChild += pRight->nChild-1;",
          "2298:       }",
          "2300:       nByte = sizeof(Fts5ExprNode) + sizeof(Fts5ExprNode*)*(nChild-1);",
          "2301:       pRet = (Fts5ExprNode*)sqlite3Fts5MallocZero(&pParse->rc, nByte);",
          "2303:       if( pRet ){",
          "2304:         pRet->eType = eType;",
          "2305:         pRet->pNear = pNear;",
          "2306:         fts5ExprAssignXNext(pRet);",
          "2307:         if( eType==FTS5_STRING ){",
          "2308:           int iPhrase;",
          "2309:           for(iPhrase=0; iPhrase<pNear->nPhrase; iPhrase++){",
          "2310:             pNear->apPhrase[iPhrase]->pNode = pRet;",
          "2311:             if( pNear->apPhrase[iPhrase]->nTerm==0 ){",
          "2312:               pRet->xNext = 0;",
          "2313:               pRet->eType = FTS5_EOF;",
          "2314:             }",
          "2317:           if( pParse->pConfig->eDetail!=FTS5_DETAIL_FULL ){",
          "2318:             Fts5ExprPhrase *pPhrase = pNear->apPhrase[0];",
          "2319:             if( pNear->nPhrase!=1",
          "2320:                 || pPhrase->nTerm>1",
          "2321:                 || (pPhrase->nTerm>0 && pPhrase->aTerm[0].bFirst)",
          "2322:               ){",
          "2323:               assert( pParse->rc==SQLITE_OK );",
          "2324:               pParse->rc = SQLITE_ERROR;",
          "2325:               assert( pParse->zErr==0 );",
          "2326:               pParse->zErr = sqlite3_mprintf(",
          "2327:                   \"fts5: %s queries are not supported (detail!=full)\",",
          "2328:                   pNear->nPhrase==1 ? \"phrase\": \"NEAR\"",
          "2329:                   );",
          "2330:               sqlite3_free(pRet);",
          "2331:               pRet = 0;",
          "2332:             }",
          "2334:         }else{",
          "2335:           fts5ExprAddChildren(pRet, pLeft);",
          "2336:           fts5ExprAddChildren(pRet, pRight);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2603:   rc = sqlite3Fts5ConfigParse(pGlobal, db, nConfig, azConfig, &pConfig, &zErr);",
          "2604:   if( rc==SQLITE_OK ){",
          "2606:   }",
          "2607:   if( rc==SQLITE_OK ){",
          "2608:     char *zText;",
          "",
          "[Removed Lines]",
          "2605:     rc = sqlite3Fts5ExprNew(pConfig, pConfig->nCol, zExpr, &pExpr, &zErr);",
          "",
          "[Added Lines]",
          "2691:     rc = sqlite3Fts5ExprNew(pConfig, 0, pConfig->nCol, zExpr, &pExpr, &zErr);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "464: #endif",
          "465: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "467: static int fts5UsePatternMatch(",
          "468:   Fts5Config *pConfig,",
          "469:   struct sqlite3_index_constraint *p",
          "470: ){",
          "471:   assert( FTS5_PATTERN_GLOB==SQLITE_INDEX_CONSTRAINT_GLOB );",
          "472:   assert( FTS5_PATTERN_LIKE==SQLITE_INDEX_CONSTRAINT_LIKE );",
          "473:   if( pConfig->ePattern==FTS5_PATTERN_GLOB && p->op==FTS5_PATTERN_GLOB ){",
          "474:     return 1;",
          "475:   }",
          "476:   if( pConfig->ePattern==FTS5_PATTERN_LIKE",
          "477:    && (p->op==FTS5_PATTERN_LIKE || p->op==FTS5_PATTERN_GLOB)",
          "478:   ){",
          "479:     return 1;",
          "480:   }",
          "481:   return 0;",
          "482: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "591:         pInfo->aConstraintUsage[i].omit = 1;",
          "592:       }",
          "593:     }else if( p->usable ){",
          "595:         assert( p->op==FTS5_PATTERN_LIKE || p->op==FTS5_PATTERN_GLOB );",
          "596:         idxStr[iIdxStr++] = p->op==FTS5_PATTERN_LIKE ? 'L' : 'G';",
          "597:         sqlite3_snprintf(6, &idxStr[iIdxStr], \"%d\", iCol);",
          "",
          "[Removed Lines]",
          "594:       if( iCol>=0 && iCol<nCol && pConfig->ePattern==p->op ){",
          "",
          "[Added Lines]",
          "611:       if( iCol>=0 && iCol<nCol && fts5UsePatternMatch(pConfig, p) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1252:           goto filter_out;",
          "1253:         }else{",
          "1254:           char **pzErr = &pTab->p.base.zErrMsg;",
          "1256:           if( rc==SQLITE_OK ){",
          "1257:             rc = sqlite3Fts5ExprAnd(&pCsr->pExpr, pExpr);",
          "1258:             pExpr = 0;",
          "",
          "[Removed Lines]",
          "1255:           rc = sqlite3Fts5ExprNew(pConfig, iCol, zText, &pExpr, pzErr);",
          "",
          "[Added Lines]",
          "1272:           rc = sqlite3Fts5ExprNew(pConfig, 0, iCol, zText, &pExpr, pzErr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1264:       }",
          "1265:       case 'L':",
          "1266:       case 'G': {",
          "1267:         const char *zText = (const char*)sqlite3_value_text(apVal[i]);",
          "1268:         iCol = 0;",
          "1269:         do{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1284:         int bGlob = (idxStr[iIdxStr-1]=='G');",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1271:           iIdxStr++;",
          "1272:         }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "1273:         if( zText ){",
          "1275:         }",
          "1276:         if( rc==SQLITE_OK ){",
          "1277:           rc = sqlite3Fts5ExprAnd(&pCsr->pExpr, pExpr);",
          "",
          "[Removed Lines]",
          "1274:           rc = sqlite3Fts5ExprPattern(pConfig, iCol, zText, &pExpr);",
          "",
          "[Added Lines]",
          "1292:           rc = sqlite3Fts5ExprPattern(pConfig, bGlob, iCol, zText, &pExpr);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5faultE.test||ext/fts5/test/fts5faultE.test": [
          "File: ext/fts5/test/fts5faultE.test -> ext/fts5/test/fts5faultE.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: }",
          "39: faultsim_save_and_close",
          "41:   faultsim_restore_and_reopen",
          "42: } -body {",
          "43:   execsql {",
          "",
          "[Removed Lines]",
          "40: do_faultsim_test 2 -faults ioerr-t* -prep {",
          "",
          "[Added Lines]",
          "40: do_faultsim_test 2 -prep {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:   faultsim_test_result {0 1} {1 {vtable constructor failed: t1}}",
          "49: }",
          "52: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: reset_db",
          "52: do_execsql_test 3.0 {",
          "53:   CREATE VIRTUAL TABLE t1 USING fts5(x, y, tokenize=trigram, detail=none);",
          "54:   INSERT INTO t1 VALUES('abcdefghijklmnopqrstuvwxyz', NULL);",
          "55: }",
          "57: faultsim_save_and_close",
          "58: do_faultsim_test 3 -prep {",
          "59:   faultsim_restore_and_reopen",
          "60: } -body {",
          "61:   execsql {",
          "62:     SELECT count(*) FROM t1 WHERE x LIKE '%mnopqrs%' AND t1 MATCH 'abc'",
          "63:   }",
          "64: } -test {",
          "65:   faultsim_test_result {0 1} {1 {vtable constructor failed: t1}}",
          "66: }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5trigram.test||ext/fts5/test/fts5trigram.test": [
          "File: ext/fts5/test/fts5trigram.test -> ext/fts5/test/fts5trigram.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   INSERT INTO t0(t0) VALUES('integrity-check');",
          "146: }",
          "148: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: #-------------------------------------------------------------------------",
          "149: reset_db",
          "150: foreach_detail_mode $::testprefix {",
          "151:   foreach {ci} {0 1} {",
          "152:     reset_db",
          "153:     do_execsql_test 5.cs=$ci.0.1 \"",
          "154:       CREATE VIRTUAL TABLE t1 USING fts5(",
          "155:           y, tokenize=\\\"trigram case_sensitive $ci\\\", detail=%DETAIL%",
          "156:       );",
          "157:     \"",
          "158:     do_execsql_test 5.cs=$ci.0.2 {",
          "159:       INSERT INTO t1 VALUES('abcdefghijklm');",
          "160:       INSERT INTO t1 VALUES('\u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23');",
          "161:     }",
          "163:     foreach {tn like res} {",
          "164:       1 {%cDef%}   1",
          "165:       2 {cDef%}    {}",
          "166:       3 {%f%}      1",
          "167:       4 {%f_h%}    1",
          "168:       5 {%f_g%}    {}",
          "169:       6 {abc%klm}  1",
          "170:       7 {ABCDEFG%} 1",
          "171:       8 {%\u0e23\u0e38\u0e07\u0e40%}    2",
          "172:     } {",
          "173:       do_execsql_test 5.cs=$ci.1.$tn {",
          "174:         SELECT rowid FROM t1 WHERE y LIKE $like",
          "175:       } $res",
          "176:     }",
          "177:   }",
          "178: }",
          "180: do_execsql_test 6.0 {",
          "181:   CREATE VIRTUAL TABLE ci0 USING fts5(x, tokenize=\"trigram\");",
          "182:   CREATE VIRTUAL TABLE ci1 USING fts5(x, tokenize=\"trigram case_sensitive 1\");",
          "183: }",
          "185: # LIKE and GLOB both work with case-insensitive tokenizers. Only GLOB works",
          "186: # with case-sensitive.",
          "187: do_eqp_test 6.1 {",
          "188:   SELECT * FROM ci0 WHERE x LIKE ?",
          "189: } {VIRTUAL TABLE INDEX 0:L0}",
          "190: do_eqp_test 6.2 {",
          "191:   SELECT * FROM ci0 WHERE x GLOB ?",
          "192: } {VIRTUAL TABLE INDEX 0:G0}",
          "193: do_eqp_test 6.3 {",
          "194:   SELECT * FROM ci1 WHERE x LIKE ?",
          "195: } {{SCAN TABLE ci1 VIRTUAL TABLE INDEX 0:}}",
          "196: do_eqp_test 6.4 {",
          "197:   SELECT * FROM ci1 WHERE x GLOB ?",
          "198: } {VIRTUAL TABLE INDEX 0:G0}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: df12f097224ebc9473d9e2a8933bd7efed6490d09af2c012c9b59a7892369b7f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8e41ecaca3b1690898ccfb39fbc2aa085dfc435",
      "candidate_info": {
        "commit_hash": "a8e41ecaca3b1690898ccfb39fbc2aa085dfc435",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a8e41ecaca3b1690898ccfb39fbc2aa085dfc435",
        "files": [
          "Makefile.msc",
          "autoconf/Makefile.msc",
          "manifest",
          "manifest.uuid",
          "src/os_win.c",
          "src/printf.c",
          "src/tclsqlite.c",
          "test/win32longpath.test"
        ],
        "message": "Enhancements to long-path support in the Win32 VFS.\n\nFossilOrigin-Name: 0119d96decd344ae711388ac8475b92464a6d018ecf73862170f137410036dac",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "autoconf/Makefile.msc||autoconf/Makefile.msc",
          "manifest.uuid||manifest.uuid",
          "src/os_win.c||src/os_win.c",
          "src/printf.c||src/printf.c",
          "src/tclsqlite.c||src/tclsqlite.c",
          "test/win32longpath.test||test/win32longpath.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "234: DEBUG = 0",
          "235: !ENDIF",
          "237: # Enable use of available compiler optimizations?  Normally, this should be",
          "238: # non-zero.  Setting this to zero, thus disabling all compiler optimizations,",
          "239: # can be useful for testing.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "237: # <<mark>>",
          "238: # Disable use of the --linemacros argument to the mksqlite3c.tcl tool, which",
          "239: # is used to build the amalgamation.",
          "240: #",
          "241: !IFNDEF NO_LINEMACROS",
          "242: NO_LINEMACROS = 0",
          "243: !ENDIF",
          "244: # <</mark>>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "776: !ENDIF",
          "778: !IFNDEF MKSQLITE3C_ARGS",
          "780: MKSQLITE3C_ARGS = --linemacros",
          "781: !ELSE",
          "782: MKSQLITE3C_ARGS =",
          "",
          "[Removed Lines]",
          "779: !IF $(DEBUG)>1",
          "",
          "[Added Lines]",
          "788: !IF $(DEBUG)>1 && $(NO_LINEMACROS)==0",
          "",
          "---------------"
        ],
        "autoconf/Makefile.msc||autoconf/Makefile.msc": [
          "File: autoconf/Makefile.msc -> autoconf/Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "288: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1",
          "289: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1",
          "290: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBSTAT_VTAB=1",
          "291: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DESERIALIZE=1",
          "292: !ENDIF",
          "293: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_COLUMN_METADATA=1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "292: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_BYTECODE_VTAB=1",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fa203999944133941a38e5c858f1f66fc1ef4d2f33222ab81cbf4e3fc1539f1c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3503: static int winGetTempname(sqlite3_vfs *, char **);",
          "3504: static int winIsDir(const void *);",
          "3505: static BOOL winIsDriveLetterAndColon(const char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3505: static BOOL winIsLongPathPrefix(const char *);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5481:   return SQLITE_OK;",
          "5482: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5489: static BOOL winIsLongPathPrefix(",
          "5490:   const char *zPathname",
          "5491: ){",
          "5492:   return ( zPathname[0]=='\\\\' && zPathname[1]=='\\\\'",
          "5493:         && zPathname[2]=='?'  && zPathname[3]=='\\\\' );",
          "5494: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5545:   char *zOut;",
          "5546: #endif",
          "5552:     zRelative++;",
          "5553:   }",
          "",
          "[Removed Lines]",
          "5551:   if( zRelative[0]=='/' && winIsDriveLetterAndColon(zRelative+1) ){",
          "",
          "[Added Lines]",
          "5563:   if( zRelative[0]=='/' && (winIsDriveLetterAndColon(zRelative+1)",
          "5564:        || winIsLongPathPrefix(zRelative+1)) ){",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1266: void sqlite3DebugPrintf(const char *zFormat, ...){",
          "1267:   va_list ap;",
          "1268:   StrAccum acc;",
          "1270:   sqlite3StrAccumInit(&acc, 0, zBuf, sizeof(zBuf), 0);",
          "1271:   va_start(ap,zFormat);",
          "1272:   sqlite3_str_vappendf(&acc, zFormat, ap);",
          "",
          "[Removed Lines]",
          "1269:   char zBuf[500];",
          "",
          "[Added Lines]",
          "1269:   char zBuf[SQLITE_PRINT_BUF_SIZE*10];",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3699:   const char *zFile = 0;",
          "3700:   const char *zVfs = 0;",
          "3701:   int flags;",
          "3702:   Tcl_DString translatedFilename;",
          "3703:   int rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3702:   int bTranslateFileName = 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3796:       }else{",
          "3797:         flags &= ~SQLITE_OPEN_URI;",
          "3798:       }",
          "3799:     }else{",
          "3800:       Tcl_AppendResult(interp, \"unknown option: \", zArg, (char*)0);",
          "3801:       return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3800:     }else if( strcmp(zArg, \"-translatefilename\")==0 ){",
          "3801:       if( Tcl_GetBooleanFromObj(interp, objv[i], &bTranslateFileName) ){",
          "3802:         return TCL_ERROR;",
          "3803:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3805:   p = (SqliteDb*)Tcl_Alloc( sizeof(*p) );",
          "3806:   memset(p, 0, sizeof(*p));",
          "3807:   if( zFile==0 ) zFile = \"\";",
          "3809:   rc = sqlite3_open_v2(zFile, &p->db, flags, zVfs);",
          "3811:   if( p->db ){",
          "3812:     if( SQLITE_OK!=sqlite3_errcode(p->db) ){",
          "3813:       zErrMsg = sqlite3_mprintf(\"%s\", sqlite3_errmsg(p->db));",
          "",
          "[Removed Lines]",
          "3808:   zFile = Tcl_TranslateFileName(interp, zFile, &translatedFilename);",
          "3810:   Tcl_DStringFree(&translatedFilename);",
          "",
          "[Added Lines]",
          "3813:   if( bTranslateFileName ){",
          "3814:     zFile = Tcl_TranslateFileName(interp, zFile, &translatedFilename);",
          "3815:   }",
          "3817:   if( bTranslateFileName ){",
          "3818:     Tcl_DStringFree(&translatedFilename);",
          "3819:   }",
          "",
          "---------------"
        ],
        "test/win32longpath.test||test/win32longpath.test": [
          "File: test/win32longpath.test -> test/win32longpath.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: } win32",
          "26: db close",
          "28: sqlite3 db [file join $path test.db] -vfs win32-longpath",
          "30: do_test 1.1 {",
          "",
          "[Removed Lines]",
          "27: set path [file nativename [get_pwd]]",
          "",
          "[Added Lines]",
          "27: set rawPath [get_pwd]",
          "28: set path [file nativename $rawPath]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: } {1 2 3 4}",
          "47: set longPath(1) \\\\\\\\?\\\\$path\\\\[pid]",
          "48: make_win32_dir $longPath(1)",
          "50: set longPath(2) $longPath(1)\\\\[string repeat X 255]",
          "51: make_win32_dir $longPath(2)",
          "53: set longPath(3) $longPath(2)\\\\[string repeat Y 255]",
          "54: make_win32_dir $longPath(3)",
          "56: set fileName $longPath(3)\\\\test.db",
          "58: do_test 1.3 {",
          "59:   list [catch {sqlite3 db2 [string range $fileName 4 end]} msg] $msg",
          "60: } {1 {unable to open database file}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: set uriPath(1a) %5C%5C%3F%5C$path\\\\[pid]",
          "50: set uriPath(1b) %5C%5C%3F%5C$rawPath/[pid]",
          "55: set uriPath(2a) $uriPath(1a)\\\\[string repeat X 255]",
          "56: set uriPath(2b) $uriPath(1b)/[string repeat X 255]",
          "61: set uriPath(3a) $uriPath(2a)\\\\[string repeat Y 255]",
          "62: set uriPath(3b) $uriPath(2b)/[string repeat Y 255]",
          "68: set uri(1a) file:$uriPath(3a)\\\\test.db",
          "69: set uri(1b) file:$uriPath(3b)/test.db",
          "70: set uri(1c) file:///$uriPath(3a)\\\\test.db",
          "71: set uri(1d) file:///$uriPath(3b)/test.db",
          "72: set uri(1e) file://localhost/$uriPath(3a)\\\\test.db",
          "73: set uri(1f) file://localhost/$uriPath(3b)/test.db",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "100: db3 close",
          "101: # puts \"  Database exists \\{[exists_win32_path $fileName]\\}\"",
          "103: do_delete_win32_file $fileName",
          "104: # puts \"  Files remaining \\{[find_win32_file $longPath(3)\\\\*]\\}\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: foreach tn {1a 1b 1c 1d 1e 1f} {",
          "121:   sqlite3 db3 $uri($tn) -vfs win32-longpath -uri 1 -translatefilename 0",
          "123:   do_test 1.7.$tn {",
          "124:     db3 eval {",
          "125:       SELECT x FROM t1 ORDER BY x;",
          "126:     }",
          "127:   } {5 6 7 8 9 10 11 12}",
          "129:   db3 close",
          "130: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b2f45be3426f18efbe251d39352e11e256b93e9",
      "candidate_info": {
        "commit_hash": "4b2f45be3426f18efbe251d39352e11e256b93e9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4b2f45be3426f18efbe251d39352e11e256b93e9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_multiplex.c"
        ],
        "message": "Fix a 4 byte OOB read in test_multiplex.c.\n\nFossilOrigin-Name: 912148913c11d98e48119a2c1fa7a0e52f318af36e7e2491d968ffde286c949f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_multiplex.c||src/test_multiplex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 04885763c4cd00cbca26d048f2b19316bfc93e8edebeceaa171ebfc6c563d53e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_multiplex.c||src/test_multiplex.c": [
          "File: src/test_multiplex.c -> src/test_multiplex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:         pGroup->szChunk += 65536;",
          "531:       }",
          "532:     }",
          "534:     rc = multiplexSubFilename(pGroup, 1);",
          "535:     if( rc==SQLITE_OK ){",
          "536:       pSubOpen = multiplexSubOpen(pGroup, 0, &rc, pOutFlags, 0);",
          "",
          "[Removed Lines]",
          "533:     pGroup->flags = flags;",
          "",
          "[Added Lines]",
          "533:     pGroup->flags = (flags & ~SQLITE_OPEN_URI);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8fec2198335145ede8a8675fb00e7860cd64c1d",
      "candidate_info": {
        "commit_hash": "b8fec2198335145ede8a8675fb00e7860cd64c1d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b8fec2198335145ede8a8675fb00e7860cd64c1d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/gencol1.test"
        ],
        "message": "Fix generated columns so that they play well with upsert. See the [https://sqlite.org/forum/forumpost/73b9a8ccfb|forum post] by \"iffycan\" for details.\n\nFossilOrigin-Name: fa9d93cf32fac4b86044acf5d1b9ea2f36e964ed7142cf1d270986c9ef3fb766",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e96c2ac9ab1a1c51b1498f4b91fb71d2987c30579d072b2f0297da9eb945cb97",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "423:               pExpr->y.pTab = pTab;",
          "424:               eNewExprOp = TK_COLUMN;",
          "425:             }else{",
          "427:               eNewExprOp = TK_REGISTER;",
          "428:               ExprSetProperty(pExpr, EP_Alias);",
          "429:             }",
          "",
          "[Removed Lines]",
          "426:               pExpr->iTable = pNC->uNC.pUpsert->regData + iCol;",
          "",
          "[Added Lines]",
          "426:               pExpr->iTable = pNC->uNC.pUpsert->regData +",
          "427:                  sqlite3TableColumnToStorage(pTab, iCol);",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "560:   INSERT INTO t0(c1) VALUES(0.16334143182538696), (0);",
          "561: } {1 {UNIQUE constraint failed: t0.c0}}",
          "563: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "563: # 2020-06-29 forum bug report.",
          "564: # https://sqlite.org/forum/forumpost/73b9a8ccfb",
          "565: #",
          "566: do_execsql_test gencol1-20.1 {",
          "567:   CREATE TEMPORARY TABLE tab (",
          "568:     prim DATE PRIMARY KEY,",
          "569:     a INTEGER,",
          "570:     comp INTEGER AS (a),",
          "571:     b INTEGER,",
          "572:     x INTEGER",
          "573:   );",
          "574:   -- Add some data",
          "575:   INSERT INTO tab (prim, a, b) VALUES ('2001-01-01', 0, 0);",
          "576:   -- Check that each column is 0 like I expect",
          "577:   SELECT * FROM tab;",
          "578: } {2001-01-01 0 0 0 {}}",
          "579: do_execsql_test gencol1-20.2 {",
          "580:   -- Do an UPSERT on the b column",
          "581:   INSERT INTO tab (prim, b)",
          "582:   VALUES ('2001-01-01',5)",
          "583:       ON CONFLICT(prim) DO UPDATE SET  b=excluded.b;",
          "584:   -- Now b is NULL rather than 5",
          "585:   SELECT * FROM tab;",
          "586: } {2001-01-01 0 0 5 {}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}