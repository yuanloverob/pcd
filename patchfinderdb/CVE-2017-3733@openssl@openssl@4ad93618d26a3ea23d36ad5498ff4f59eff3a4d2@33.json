{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
  "patch_info": {
    "commit_hash": "4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4ad93618d26a3ea23d36ad5498ff4f59eff3a4d2",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/t1_enc.c",
      "ssl/t1_lib.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nChanging the ciphersuite during a renegotiation can result in a crash\nleading to a DoS attack. ETM has not been implemented in 1.1.0 for DTLS\nso this is TLS only.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "ssl/t1_lib.c||ssl/t1_lib.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "264: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "270: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "272: # define SSL3_MT_HELLO_REQUEST                   0",
      "273: # define SSL3_MT_CLIENT_HELLO                    1",
      "274: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "267: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "273: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "395:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "396:         u_len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "397:         s->compress == NULL && s->msg_callback == NULL &&",
      "399:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "400:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "401:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "398:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "398:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "795:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "796:                                          &(outbuf[j][wr[j].length + eivlen]),",
      "797:                                          1) < 0)",
      "",
      "[Removed Lines]",
      "794:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "794:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "814:         goto err;",
      "816:     for (j = 0; j < numpipes; j++) {",
      "818:             if (s->method->ssl3_enc->mac(s, &wr[j],",
      "819:                                          outbuf[j] + wr[j].length, 1) < 0)",
      "820:                 goto err;",
      "",
      "[Removed Lines]",
      "817:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "817:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "350:         unsigned char *mac;",
      "351:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "352:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "349:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "349:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "394:     if ((sess != NULL) &&",
      "395:         (s->enc_read_ctx != NULL) &&",
      "398:         unsigned char *mac = NULL;",
      "399:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "396:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "396:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "823:         }",
      "825:         ret = 1;",
      "827:             mac_size = EVP_MD_CTX_size(s->read_hash);",
      "828:         if ((bs != 1) && !send) {",
      "829:             int tmpret;",
      "",
      "[Removed Lines]",
      "826:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "[Added Lines]",
      "826:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "997:     header[11] = (rec->length) >> 8;",
      "998:     header[12] = (rec->length) & 0xff;",
      "1001:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1002:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1000:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1000:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1022:             EVP_MD_CTX_free(hmac);",
      "1023:             return -1;",
      "1024:         }",
      "1026:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1027:                                        mac_ctx, rec->input,",
      "1028:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1025:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1025:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "378: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "379:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "384: # define SSL_PKEY_RSA_ENC        0",
      "",
      "[Removed Lines]",
      "381: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "381: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "382: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111:     unsigned char *alpn_client_proto_list;",
      "1112:     unsigned alpn_client_proto_list_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1116:     int tlsext_use_etm;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "130: #endif",
      "132:     if (which & SSL3_CC_READ) {",
      "133:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "134:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "135:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "133:         if (s->tlsext_use_etm)",
      "134:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "135:         else",
      "136:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "168:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "169:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "170:     } else {",
      "171:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "172:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "173:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "176:         if (s->tlsext_use_etm)",
      "177:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "178:         else",
      "179:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "367:     if (s->s3->tmp.key_block_length != 0)",
      "368:         return (1);",
      "373:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "374:         return (0);",
      "375:     }",
      "",
      "[Removed Lines]",
      "370:     if (!ssl_cipher_get_evp",
      "371:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "372:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "380:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "381:                             &comp, s->tlsext_use_etm)) {",
      "",
      "---------------"
    ],
    "ssl/t1_lib.c||ssl/t1_lib.c": [
      "File: ssl/t1_lib.c -> ssl/t1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674: #endif",
      "1675:     if (!custom_ext_add(s, 1, &ret, limit, al))",
      "1676:         return NULL;",
      "",
      "[Removed Lines]",
      "1677:     if (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) {",
      "",
      "[Added Lines]",
      "1677:     if (s->tlsext_use_etm) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1683:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "1684:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "1685:             || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12)",
      "1687:         else {",
      "",
      "[Removed Lines]",
      "1686:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1686:             s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1917:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
      "1918:     s->s3->tmp.peer_sigalgs = NULL;",
      "1921: #ifndef OPENSSL_NO_SRP",
      "1922:     OPENSSL_free(s->srp_ctx.login);",
      "",
      "[Removed Lines]",
      "1919:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1919:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2264:         }",
      "2265: #endif",
      "2266:         else if (type == TLSEXT_TYPE_encrypt_then_mac)",
      "",
      "[Removed Lines]",
      "2267:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2267:             s->tlsext_use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2366:                              SSL_DTLSEXT_HB_DONT_SEND_REQUESTS);",
      "2367: #endif",
      "2371:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
      "",
      "[Removed Lines]",
      "2369:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2369:     s->tlsext_use_etm = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2586:             if (s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "2587:                 && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "2589:         } else if (type == TLSEXT_TYPE_extended_master_secret) {",
      "2590:             s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
      "2591:             if (!s->hit)",
      "",
      "[Removed Lines]",
      "2588:                 s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "2588:                 s->tlsext_use_etm = 1;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f8641c9c693179fe7461608c51aaa8700dca6da2",
      "candidate_info": {
        "commit_hash": "f8641c9c693179fe7461608c51aaa8700dca6da2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f8641c9c693179fe7461608c51aaa8700dca6da2",
        "files": [
          "test/handshake_helper.c"
        ],
        "message": "test/ssl_test: give up if both client and server wait on read\n\nIn some cases, both client and server end of the test can end up in\nSSL_ERROR_WANT_READ and never get out of it, making the test spin.\nDetect it and give up instead of waiting endlessly.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2096)\n(cherry picked from commit ceb6d746941063eccf7655c7709ba56ca117044b)",
        "before_after_code_files": [
          "test/handshake_helper.c||test/handshake_helper.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/handshake_helper.c||test/handshake_helper.c": [
          "File: test/handshake_helper.c -> test/handshake_helper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "867:     HANDSHAKE_EX_DATA server_ex_data, client_ex_data;",
          "868:     CTX_DATA client_ctx_data, server_ctx_data, server2_ctx_data;",
          "869:     HANDSHAKE_RESULT *ret = HANDSHAKE_RESULT_new();",
          "871:     connect_phase_t phase = HANDSHAKE;",
          "872:     handshake_status_t status = HANDSHAKE_RETRY;",
          "873:     const unsigned char* tick = NULL;",
          "",
          "[Removed Lines]",
          "870:     int client_turn = 1;",
          "",
          "[Added Lines]",
          "870:     int client_turn = 1, client_turn_count = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "957:         switch (status) {",
          "958:         case HANDSHAKE_SUCCESS:",
          "959:             phase = next_phase(test_ctx, phase);",
          "960:             if (phase == CONNECTION_DONE) {",
          "961:                 ret->result = SSL_TEST_SUCCESS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "959:             client_turn_count = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "981:             ret->result = SSL_TEST_INTERNAL_ERROR;",
          "982:             goto err;",
          "983:         case HANDSHAKE_RETRY:",
          "985:             client_turn ^= 1;",
          "986:             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "985:             if (client_turn_count++ >= 2000) {",
          "991:                 ret->result = SSL_TEST_INTERNAL_ERROR;",
          "992:                 goto err;",
          "993:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d67fe76786587bc6995337d2a9cb525fb60bf998",
      "candidate_info": {
        "commit_hash": "d67fe76786587bc6995337d2a9cb525fb60bf998",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d67fe76786587bc6995337d2a9cb525fb60bf998",
        "files": [
          "apps/s_client.c",
          "apps/s_server.c",
          "doc/apps/s_client.pod",
          "doc/apps/s_server.pod"
        ],
        "message": "Update s_client and s_server documentation about some missing arguments\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1837)\n(cherry picked from commit a22f9c84b468eed83c651cb5f2c68c7ad4103ffd)",
        "before_after_code_files": [
          "apps/s_client.c||apps/s_client.c",
          "apps/s_server.c||apps/s_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/s_client.c||apps/s_client.c": [
          "File: apps/s_client.c -> apps/s_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:     {\"proxy\", OPT_PROXY, 's',",
          "568:      \"Connect to via specified proxy to the real server\"},",
          "569: #ifdef AF_UNIX",
          "571: #endif",
          "572:     {\"4\", OPT_4, '-', \"Use IPv4 only\"},",
          "573: #ifdef AF_INET6",
          "",
          "[Removed Lines]",
          "570:     {\"unix\", OPT_UNIX, 's', \"Connect over unix domain sockets\"},",
          "",
          "[Added Lines]",
          "570:     {\"unix\", OPT_UNIX, 's', \"Connect over the specified Unix-domain socket\"},",
          "",
          "---------------"
        ],
        "apps/s_server.c||apps/s_server.c": [
          "File: apps/s_server.c -> apps/s_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:     {\"port\", OPT_PORT, 'p',",
          "685:      \"TCP/IP port to listen on for connections (default is \" PORT \")\"},",
          "686:     {\"accept\", OPT_ACCEPT, 's',",
          "688: #ifdef AF_UNIX",
          "689:     {\"unix\", OPT_UNIX, 's', \"Unix domain socket to accept on\"},",
          "690: #endif",
          "",
          "[Removed Lines]",
          "687:      \"TCP/IP optional host and port to accept on (default is \" PORT \")\"},",
          "",
          "[Added Lines]",
          "687:      \"TCP/IP optional host and port to listen on for connections (default is *:\" PORT \")\"},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56518d82372048825f068de32dfca77c32be1bc0",
      "candidate_info": {
        "commit_hash": "56518d82372048825f068de32dfca77c32be1bc0",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/56518d82372048825f068de32dfca77c32be1bc0",
        "files": [
          "crypto/ct/ct_oct.c",
          "crypto/ct/ct_sct.c"
        ],
        "message": "Move SCT_LIST_free definition into a more logical place\n\nThis reflects its position in include/openssl/ct.h.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1548)\n(cherry picked from commit e1940e9f7a73bf3a560fbe3550a9b69a612118ec)",
        "before_after_code_files": [
          "crypto/ct/ct_oct.c||crypto/ct/ct_oct.c",
          "crypto/ct/ct_sct.c||crypto/ct/ct_sct.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_oct.c||crypto/ct/ct_oct.c": [
          "File: crypto/ct/ct_oct.c -> crypto/ct/ct_oct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:     return -1;",
          "255: }",
          "262: STACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,",
          "263:                             size_t len)",
          "264: {",
          "",
          "[Removed Lines]",
          "257: void SCT_LIST_free(STACK_OF(SCT) *a)",
          "258: {",
          "259:     sk_SCT_pop_free(a, SCT_free);",
          "260: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "crypto/ct/ct_sct.c||crypto/ct/ct_sct.c": [
          "File: crypto/ct/ct_sct.c -> crypto/ct/ct_sct.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     OPENSSL_free(sct);",
          "46: }",
          "48: int SCT_set_version(SCT *sct, sct_version_t version)",
          "49: {",
          "50:     if (version != SCT_VERSION_V1) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: void SCT_LIST_free(STACK_OF(SCT) *a)",
          "49: {",
          "50:     sk_SCT_pop_free(a, SCT_free);",
          "51: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c6720f816f4c9373890939d6ec63a7dc29835fdd",
      "candidate_info": {
        "commit_hash": "c6720f816f4c9373890939d6ec63a7dc29835fdd",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/c6720f816f4c9373890939d6ec63a7dc29835fdd",
        "files": [
          "test/evp_test.c",
          "test/evptests.txt"
        ],
        "message": "Additional error tests in evp_test.c\n\nSupport checking for errors during test initialisation and parsing.\n\nAdd errors and tests for key operation initalisation and ctrl errors.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit cce65266299e2e89303a90c131e8171225a1bf88)",
        "before_after_code_files": [
          "test/evp_test.c||test/evp_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/evp_test.c||test/evp_test.c": [
          "File: test/evp_test.c -> test/evp_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:             t->nskip++;",
          "355:         } else {",
          "359:                 fprintf(stderr, \"%s test error line %d\\n\",",
          "360:                         t->meth->name, t->start_line);",
          "361:                 return 0;",
          "",
          "[Removed Lines]",
          "357:             t->err = NULL;",
          "358:             if (t->meth->run_test(t) != 1) {",
          "",
          "[Added Lines]",
          "357:             if (t->err == NULL && t->meth->run_test(t) != 1) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "567:         return 1;",
          "568:     }",
          "569:     t.in = in;",
          "570:     while (BIO_gets(in, buf, sizeof(buf))) {",
          "571:         t.line++;",
          "572:         if (!process_test(&t, buf, 0))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569:     t.err = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1234:     if (!kdata->ctx)",
          "1235:         return 0;",
          "1236:     if (keyopinit(kdata->ctx) <= 0)",
          "1238:     return 1;",
          "1239: }",
          "",
          "[Removed Lines]",
          "1237:         return 0;",
          "",
          "[Added Lines]",
          "1237:         t->err = \"KEYOP_INIT_ERROR\";",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1260:     if (p != NULL)",
          "1262:     rv = EVP_PKEY_CTX_ctrl_str(pctx, tmpval, p);",
          "1266:             t->skip = 1;",
          "1267:             rv = 1;",
          "1268:         }",
          "1269:     }",
          "1270:     OPENSSL_free(tmpval);",
          "",
          "[Removed Lines]",
          "1263:     if (p != NULL && rv <= 0 && rv != -2) {",
          "1265:         if (OBJ_sn2nid(p) != NID_undef || OBJ_ln2nid(p) != NID_undef) {",
          "",
          "[Added Lines]",
          "1263:     if (rv == -2) {",
          "1264:         t->err = \"PKEY_CTRL_INVALID\";",
          "1265:         rv = 1;",
          "1266:     } else if (p != NULL && rv <= 0) {",
          "1268:         int nid = OBJ_sn2nid(p);",
          "1269:         if (nid == NID_undef)",
          "1270:              nid = OBJ_ln2nid(p);",
          "1271:         if ((nid != NID_undef) && EVP_get_digestbynid(nid) == NULL &&",
          "1272:             EVP_get_cipherbynid(nid) == NULL) {",
          "1275:         } else {",
          "1276:             t->err = \"PKEY_CTRL_ERROR\";",
          "1277:             rv = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6212179e39d5b59092b21d31b45203e6d3aacdaa",
      "candidate_info": {
        "commit_hash": "6212179e39d5b59092b21d31b45203e6d3aacdaa",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6212179e39d5b59092b21d31b45203e6d3aacdaa",
        "files": [
          "crypto/x509/x509_lcl.h",
          "crypto/x509/x509_vpm.c",
          "doc/crypto/X509_VERIFY_PARAM_set_flags.pod",
          "include/openssl/x509_vfy.h",
          "util/libcrypto.num"
        ],
        "message": "Add X509_VERIFY_PARAM inheritance flag set/get\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2079)",
        "before_after_code_files": [
          "crypto/x509/x509_lcl.h||crypto/x509/x509_lcl.h",
          "crypto/x509/x509_vpm.c||crypto/x509/x509_vpm.c",
          "include/openssl/x509_vfy.h||include/openssl/x509_vfy.h",
          "util/libcrypto.num||util/libcrypto.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x509_lcl.h||crypto/x509/x509_lcl.h": [
          "File: crypto/x509/x509_lcl.h -> crypto/x509/x509_lcl.h"
        ],
        "crypto/x509/x509_vpm.c||crypto/x509/x509_vpm.c": [
          "File: crypto/x509/x509_vpm.c -> crypto/x509/x509_vpm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "306:     return param->flags;",
          "307: }",
          "309: int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose)",
          "310: {",
          "311:     return X509_PURPOSE_set(&param->purpose, purpose);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "309: uint32_t X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM *param)",
          "310: {",
          "311:     return param->inh_flags;",
          "312: }",
          "314: int X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM *param, uint32_t flags)",
          "315: {",
          "316:     param->inh_flags = flags;",
          "317:     return 1;",
          "318: }",
          "",
          "---------------"
        ],
        "include/openssl/x509_vfy.h||include/openssl/x509_vfy.h": [
          "File: include/openssl/x509_vfy.h -> include/openssl/x509_vfy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "272: int X509_STORE_set_trust(X509_STORE *ctx, int trust);",
          "273: int X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *pm);",
          "274: X509_VERIFY_PARAM *X509_STORE_get0_param(X509_STORE *ctx);",
          "276: void X509_STORE_set_verify(X509_STORE *ctx, X509_STORE_CTX_verify_fn verify);",
          "277: #define X509_STORE_set_verify_func(ctx, func) \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "275: int X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "464: int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param,",
          "465:                                     STACK_OF(ASN1_OBJECT) *policies);",
          "467: int X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM *param,",
          "468:                                 const char *name, size_t namelen);",
          "469: int X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM *param,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468: int X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM *param,",
          "469:                                     uint32_t flags);",
          "470: uint32_t X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM *param);",
          "",
          "---------------"
        ],
        "util/libcrypto.num||util/libcrypto.num": [
          "File: util/libcrypto.num -> util/libcrypto.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4210: DSO_dsobyaddr                           4171 1_1_0c EXIST::FUNCTION:",
          "4211: CT_POLICY_EVAL_CTX_get_time             4172 1_1_0d EXIST::FUNCTION:CT",
          "4212: CT_POLICY_EVAL_CTX_set_time             4173 1_1_0d EXIST::FUNCTION:CT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4213: X509_VERIFY_PARAM_set_inh_flags         4174 1_1_0d EXIST::FUNCTION:",
          "4214: X509_VERIFY_PARAM_get_inh_flags         4175 1_1_0d EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    }
  ]
}