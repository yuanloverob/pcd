{
  "cve_id": "CVE-2019-10672",
  "cve_desc": "treeRead in hdf/btree.c in libmysofa before 0.7 does not properly validate multiplications and additions.",
  "repo": "hoene/libmysofa",
  "patch_hash": "d39a171e9c6a1c44dbdf43f9db6c3fbd887e38c1",
  "patch_info": {
    "commit_hash": "d39a171e9c6a1c44dbdf43f9db6c3fbd887e38c1",
    "repo": "hoene/libmysofa",
    "commit_url": "https://github.com/hoene/libmysofa/commit/d39a171e9c6a1c44dbdf43f9db6c3fbd887e38c1",
    "files": [
      "src/hdf/btree.c"
    ],
    "message": "Fixed security issue 1",
    "before_after_code_files": [
      "src/hdf/btree.c||src/hdf/btree.c"
    ]
  },
  "patch_diff": {
    "src/hdf/btree.c||src/hdf/btree.c": [
      "File: src/hdf/btree.c -> src/hdf/btree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "307:     for (i = 0; i < olen; i++) {",
      "308:      b = i / elements;",
      "309:      x = i % elements + start[0];",
      "312:       ((char*)data->data)[j] = output[i];",
      "313:      }",
      "314:     }",
      "",
      "[Removed Lines]",
      "310:      if (x < sx) {",
      "311:       j = x * size + b;",
      "",
      "[Added Lines]",
      "310:      j = x * size + b;",
      "311:      if (j>=0 && j < elements * size) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:      x = i % elements;",
      "320:      y = x % dy + start[1];",
      "321:      x = x / dy + start[0];",
      "324:       ((char*)data->data)[j] = output[i];",
      "325:      }",
      "326:     }",
      "",
      "[Removed Lines]",
      "322:      if (y < sy && x < sx) {",
      "323:       j = ((x * sy + y) * size) + b;",
      "",
      "[Added Lines]",
      "322:      j = ((x * sy + y) * size) + b;",
      "323:      if (j>=0 && j < elements * size) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "332:      z = x % dz + start[2];",
      "333:      y = (x / dz) % dy + start[1];",
      "334:      x = (x / dzy) + start[0];",
      "337:       ((char*)data->data)[j] = output[i];",
      "338:      }",
      "339:     }",
      "",
      "[Removed Lines]",
      "335:      if (z < sz && y < sy && x < sx) {",
      "336:       j = (x * szy + y * sz + z) * size + b;",
      "",
      "[Added Lines]",
      "335:      j = (x * szy + y * sz + z) * size + b;",
      "336:      if (j>=0 && j < elements * size) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f53b37f8c1013597000d2f0d37af2bcadabeea3f",
      "candidate_info": {
        "commit_hash": "f53b37f8c1013597000d2f0d37af2bcadabeea3f",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/f53b37f8c1013597000d2f0d37af2bcadabeea3f",
        "files": [
          "src/hdf/btree.c",
          "src/hdf/dataobject.c"
        ],
        "message": "Removed some gcov lines",
        "before_after_code_files": [
          "src/hdf/btree.c||src/hdf/btree.c",
          "src/hdf/dataobject.c||src/hdf/dataobject.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/btree.c||src/hdf/btree.c"
          ],
          "candidate": [
            "src/hdf/btree.c||src/hdf/btree.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/btree.c||src/hdf/btree.c": [
          "File: src/hdf/btree.c -> src/hdf/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"BTLF\", 4)) {",
          "85:   }",
          "86:   buf[4] = 0;",
          "87:   mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "89:   if (fgetc(reader->fhd) != 0) {",
          "92:   }",
          "94:   type = (uint8_t)fgetc(reader->fhd);",
          "",
          "[Removed Lines]",
          "83:     mylog(\"cannot read signature of BTLF\\n\");",
          "84:     return MYSOFA_INVALID_FORMAT;",
          "90:     mylog(\"object BTLF must have version 0\\n\");",
          "91:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Added Lines]",
          "85:     mylog(\"cannot read signature of BTLF\\n\"); // LCOV_EXCL_LINE",
          "86:     return MYSOFA_INVALID_FORMAT;             // LCOV_EXCL_LINE",
          "92:     mylog(\"object BTLF must have version 0\\n\"); // LCOV_EXCL_LINE",
          "93:     return MYSOFA_INVALID_FORMAT;               // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:   UNUSED(key);",
          "228:   if (data->ds.dimensionality > 3) {",
          "231:   }",
          "234:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"TREE\", 4)) {",
          "237:   }",
          "238:   buf[4] = 0;",
          "239:   mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "",
          "[Removed Lines]",
          "229:     mylog(\"TREE dimensions > 3\");",
          "230:     return MYSOFA_INVALID_FORMAT;",
          "235:     mylog(\"cannot read signature of TREE\\n\");",
          "236:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Added Lines]",
          "233:     mylog(\"TREE dimensions > 3\"); // LCOV_EXCL_LINE",
          "234:     return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "239:     mylog(\"cannot read signature of TREE\\n\"); // LCOV_EXCL_LINE",
          "240:     return MYSOFA_INVALID_FORMAT;             // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:   node_level = (uint8_t)fgetc(reader->fhd);",
          "243:   entries_used = (uint16_t)readValue(reader, 2);",
          "244:   if (entries_used > 0x1000)",
          "246:   address_of_left_sibling =",
          "247:       readValue(reader, reader->superblock.size_of_offsets);",
          "248:   address_of_right_sibling =",
          "",
          "[Removed Lines]",
          "245:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "",
          "[Added Lines]",
          "249:     return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "263:   mylog(\"elements %d size %d\\n\", elements, size);",
          "265:   if (elements >= 0x100000 || size > 0x10)",
          "267:   if (!(output = malloc(elements * size))) {",
          "269:   }",
          "271:   for (e = 0; e < entries_used * 2; e++) {",
          "",
          "[Removed Lines]",
          "266:     return MYSOFA_INVALID_FORMAT;",
          "268:     return MYSOFA_NO_MEMORY;",
          "",
          "[Added Lines]",
          "270:     return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "272:     return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "275:       size_of_chunk = (uint32_t)readValue(reader, 4);",
          "276:       filter_mask = (uint32_t)readValue(reader, 4);",
          "277:       if (filter_mask) {",
          "281:       }",
          "283:       for (j = 0; j < data->ds.dimensionality; j++) {",
          "",
          "[Removed Lines]",
          "278:         mylog(\"TREE all filters must be enabled\\n\");",
          "279:         free(output);",
          "280:         return MYSOFA_INVALID_FORMAT;",
          "",
          "[Added Lines]",
          "282:         mylog(\"TREE all filters must be enabled\\n\"); // LCOV_EXCL_LINE",
          "283:         free(output);                                // LCOV_EXCL_LINE",
          "284:         return MYSOFA_INVALID_FORMAT;                // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "296:       store = ftell(reader->fhd);",
          "297:       if (fseek(reader->fhd, child_pointer, SEEK_SET) < 0) {",
          "300:       }",
          "302:       if (!(input = malloc(size_of_chunk))) {",
          "305:       }",
          "306:       if (fread(input, 1, size_of_chunk, reader->fhd) != size_of_chunk) {",
          "310:       }",
          "312:       olen = elements * size;",
          "",
          "[Removed Lines]",
          "298:         free(output);",
          "299:         return errno;",
          "303:         free(output);",
          "304:         return MYSOFA_NO_MEMORY;",
          "307:         free(output);",
          "308:         free(input);",
          "309:         return MYSOFA_INVALID_FORMAT;",
          "",
          "[Added Lines]",
          "302:         free(output); // LCOV_EXCL_LINE",
          "303:         return errno; // LCOV_EXCL_LINE",
          "307:         free(output);            // LCOV_EXCL_LINE",
          "308:         return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "311:         free(output);                 // LCOV_EXCL_LINE",
          "312:         free(input);                  // LCOV_EXCL_LINE",
          "313:         return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "316:       mylog(\"   gunzip %d %d %d\\n\", err, olen, elements * size);",
          "317:       if (err || olen != elements * size) {",
          "320:       }",
          "322:       switch (data->ds.dimensionality) {",
          "",
          "[Removed Lines]",
          "318:         free(output);",
          "319:         return MYSOFA_INVALID_FORMAT;",
          "",
          "[Added Lines]",
          "322:         free(output);                 // LCOV_EXCL_LINE",
          "323:         return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "363:         }",
          "364:         break;",
          "365:       default:",
          "368:       }",
          "370:       if (fseek(reader->fhd, store, SEEK_SET) < 0) {",
          "373:       }",
          "374:     }",
          "375:   }",
          "377:   free(output);",
          "381:   return MYSOFA_OK;",
          "382: }",
          "",
          "[Removed Lines]",
          "366:         mylog(\"invalid dim\\n\");",
          "367:         return MYSOFA_INTERNAL_ERROR;",
          "371:         free(output);",
          "372:         return errno;",
          "379:     return errno;",
          "",
          "[Added Lines]",
          "370:         mylog(\"invalid dim\\n\");       // LCOV_EXCL_LINE",
          "371:         return MYSOFA_INTERNAL_ERROR; // LCOV_EXCL_LINE",
          "375:         free(output); // LCOV_EXCL_LINE",
          "376:         return errno; // LCOV_EXCL_LINE",
          "383:     return errno;                          // LCOV_EXCL_LINE",
          "",
          "---------------"
        ],
        "src/hdf/dataobject.c||src/hdf/dataobject.c": [
          "File: src/hdf/dataobject.c -> src/hdf/dataobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: static int readOHDRHeaderMessageNIL(struct READER *reader, int length) {",
          "48:   if (fseek(reader->fhd, length, SEEK_CUR) < 0)",
          "51:   return MYSOFA_OK;",
          "52: }",
          "",
          "[Removed Lines]",
          "49:     return errno;",
          "",
          "[Added Lines]",
          "49:     return errno; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:   }",
          "85:   if (ds->flags & 2) {",
          "88:   }",
          "90:   return MYSOFA_OK;",
          "",
          "[Removed Lines]",
          "86:     mylog(\"permutation in OHDR not supported\\n\");",
          "87:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Added Lines]",
          "86:     mylog(\"permutation in OHDR not supported\\n\"); // LCOV_EXCL_LINE",
          "87:     return MYSOFA_INVALID_FORMAT;                 // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "127:   ds->dimensionality = (uint8_t)fgetc(reader->fhd);",
          "128:   if (ds->dimensionality > 4) {",
          "131:   }",
          "133:   ds->flags = (uint8_t)fgetc(reader->fhd);",
          "",
          "[Removed Lines]",
          "129:     mylog(\"dimensionality must be lower than 5\\n\");",
          "130:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Added Lines]",
          "129:     mylog(\"dimensionality must be lower than 5\\n\"); // LCOV_EXCL_LINE",
          "130:     return MYSOFA_INVALID_FORMAT;                   // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:                                          struct LINKINFO *li) {",
          "159:   if (fgetc(reader->fhd) != 0) {",
          "162:   }",
          "164:   li->flags = (uint8_t)fgetc(reader->fhd);",
          "",
          "[Removed Lines]",
          "160:     mylog(\"object OHDR link info message must have version 0\\n\");",
          "161:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "",
          "[Added Lines]",
          "162:     mylog(",
          "163:         \"object OHDR link info message must have version 0\\n\"); // LCOV_EXCL_LINE",
          "164:     return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "198:   dt->class_and_version = (uint8_t)fgetc(reader->fhd);",
          "199:   if ((dt->class_and_version & 0xf0) != 0x10 &&",
          "200:       (dt->class_and_version & 0xf0) != 0x30) {",
          "201:     mylog(\"object OHDR datatype message must have version 1 not %d at %lX\\n\",",
          "202:           dt->class_and_version >> 4, ftell(reader->fhd) - 1);",
          "203:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "204:   }",
          "206:   dt->class_bit_field = (uint32_t)readValue(reader, 3);",
          "207:   dt->size = (uint32_t)readValue(reader, 4);",
          "208:   if (dt->size > 64)",
          "211:   switch (dt->class_and_version & 0xf) {",
          "",
          "[Removed Lines]",
          "209:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "",
          "[Added Lines]",
          "214:     return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "241:         (dt->u.f.bit_precision == 64 &&",
          "242:          (dt->u.f.exponent_location != 52 || dt->u.f.exponent_size != 11 ||",
          "243:           dt->u.f.mantissa_size != 52 || dt->u.f.exponent_bias != 1023)))",
          "245:     break;",
          "",
          "[Removed Lines]",
          "244:       return MYSOFA_UNSUPPORTED_FORMAT;",
          "",
          "[Added Lines]",
          "249:       return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "288:         err = readOHDRHeaderMessageDatatype(reader, &dt2);",
          "289:         if (err)",
          "291:       }",
          "292:       break;",
          "",
          "[Removed Lines]",
          "290:           return err;",
          "",
          "[Added Lines]",
          "295:           return err; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "297:         int res;",
          "298:         for (j = 0;; j++) {",
          "299:           if (j == sizeof(name))",
          "301:           res = fgetc(reader->fhd);",
          "302:           if (res < 0)",
          "304:           name[j] = res;",
          "305:           if (name[j] == 0)",
          "306:             break;",
          "307:         }",
          "308:         if (fseek(reader->fhd, (7 - j) & 7, SEEK_CUR))",
          "311:         c = readValue(reader, 4);",
          "312:         int dimension = fgetc(reader->fhd);",
          "313:         if (dimension != 0) {",
          "314:           mylog(\"COMPOUND v1 with dimension not supported\");",
          "316:         }",
          "319:         if (fseek(reader->fhd, 3 + 4 + 4 + 4 * 4, SEEK_CUR))",
          "322:         mylog(\"  COMPOUND %s %d %d %lX\\n\", name, c, dimension,",
          "323:               ftell(reader->fhd));",
          "324:         err = readOHDRHeaderMessageDatatype(reader, &dt2);",
          "325:         if (err)",
          "327:       }",
          "328:       break;",
          "329:     default:",
          "330:       mylog(\"object OHDR datatype message must have version 1 or 3 not %d\\n\",",
          "331:             dt->class_and_version >> 4);",
          "332:       return MYSOFA_INVALID_FORMAT;",
          "333:     }",
          "334:     break;",
          "",
          "[Removed Lines]",
          "300:             return MYSOFA_INVALID_FORMAT;",
          "303:             return MYSOFA_READ_ERROR;",
          "309:           return MYSOFA_READ_ERROR;",
          "315:           return MYSOFA_INVALID_FORMAT;",
          "320:           return MYSOFA_READ_ERROR;",
          "326:           return err;",
          "",
          "[Added Lines]",
          "305:             return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "308:             return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "314:           return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "320:           return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "325:           return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "331:           return err; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "341:     mylog(\"  LIST %d\\n\", dt->size);",
          "342:     err = readOHDRHeaderMessageDatatype(reader, dt);",
          "343:     if (err)",
          "345:     break;",
          "347:   default:",
          "348:     mylog(\"object OHDR datatype message has unknown variable type %d\\n\",",
          "349:           dt->class_and_version & 0xf);",
          "350:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "351:   }",
          "352:   return MYSOFA_OK;",
          "353: }",
          "",
          "[Removed Lines]",
          "344:       return err;",
          "",
          "[Added Lines]",
          "351:       return err; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "365:   int fillValueWriteTime = fgetc(reader->fhd);",
          "366:   int fillValueDefined = fgetc(reader->fhd);",
          "367:   if (spaceAllocationTime < 0 || fillValueWriteTime < 0 || fillValueDefined < 0)",
          "370:   if ((spaceAllocationTime & ~1) != 2 || fillValueWriteTime != 2 ||",
          "371:       (fillValueDefined & ~1) != 0) {",
          "372:     mylog(\"spaceAllocationTime %d fillValueWriteTime %d fillValueDefined %d\\n\",",
          "373:           spaceAllocationTime, fillValueWriteTime, fillValueDefined);",
          "375:   }",
          "376:   if (fillValueDefined > 0) {",
          "377:     uint32_t size = (uint32_t)readValue(reader, 4);",
          "378:     if (fseek(reader->fhd, size, SEEK_CUR) < 0)",
          "380:   }",
          "382:   return MYSOFA_OK;",
          "",
          "[Removed Lines]",
          "368:     return MYSOFA_READ_ERROR;",
          "374:     return MYSOFA_INVALID_FORMAT;",
          "379:       return errno;",
          "",
          "[Added Lines]",
          "377:     return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "383:     return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "388:       return errno; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "391:   if (flags & (1 << 5)) {",
          "392:     size = (uint32_t)readValue(reader, 4);",
          "393:     if (fseek(reader->fhd, size, SEEK_CUR) < 0)",
          "395:   }",
          "397:   return MYSOFA_OK;",
          "",
          "[Removed Lines]",
          "394:       return errno;",
          "",
          "[Added Lines]",
          "403:       return errno; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "422:   size = (uint32_t)readValue(reader, 4);",
          "423:   if (fseek(reader->fhd, size, SEEK_CUR) < 0)",
          "426:   return MYSOFA_OK;",
          "427: }",
          "",
          "[Removed Lines]",
          "424:     return errno;",
          "",
          "[Added Lines]",
          "435:     return errno; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "481:     if (validAddress(reader, data_address)) {",
          "482:       store = ftell(reader->fhd);",
          "483:       if (fseek(reader->fhd, data_address, SEEK_SET) < 0)",
          "485:       if (!data->data) {",
          "486:         if (data_size > 0x10000000)",
          "487:           return MYSOFA_INVALID_FORMAT;",
          "488:         data->data_len = data_size;",
          "489:         data->data = calloc(1, data_size);",
          "490:         if (!data->data)",
          "492:       }",
          "493:       err = fread(data->data, 1, data_size, reader->fhd);",
          "494:       if (err != data_size)",
          "496:       if (fseek(reader->fhd, store, SEEK_SET) < 0)",
          "498:     }",
          "499:     break;",
          "",
          "[Removed Lines]",
          "484:         return errno;",
          "491:           return MYSOFA_NO_MEMORY;",
          "495:         return MYSOFA_READ_ERROR;",
          "497:         return errno;",
          "",
          "[Added Lines]",
          "497:         return errno; // LCOV_EXCL_LINE",
          "504:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "508:         return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "510:         return errno; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "503:     if (dimensionality < 1 ||",
          "504:         dimensionality >",
          "505:             sizeof(data->datalayout_chunk) / sizeof(data->datalayout_chunk)[0])",
          "507:     data_address = readValue(reader, reader->superblock.size_of_offsets);",
          "508:     mylog(\" CHUNK %\" PRIX64 \"\\n\", data_address);",
          "509:     for (i = 0; i < dimensionality; i++) {",
          "",
          "[Removed Lines]",
          "506:       return MYSOFA_INVALID_FORMAT;",
          "",
          "[Added Lines]",
          "519:       return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "519:     if (validAddress(reader, data_address)) {",
          "520:       store = ftell(reader->fhd);",
          "521:       if (fseek(reader->fhd, data_address, SEEK_SET) < 0)",
          "523:       if (!data->data) {",
          "524:         if (size > 0x10000000)",
          "526:         data->data_len = size;",
          "527:         data->data = calloc(1, size);",
          "528:         if (!data->data)",
          "530:       }",
          "531:       err = treeRead(reader, data);",
          "532:       if (err)",
          "534:       if (fseek(reader->fhd, store, SEEK_SET) < 0)",
          "536:     }",
          "537:     break;",
          "539:   default:",
          "540:     mylog(\"object OHDR message data layout message has unknown layout class \"",
          "541:           \"%d\\n\",",
          "542:           layout_class);",
          "543:     return MYSOFA_INVALID_FORMAT;",
          "544:   }",
          "546:   return MYSOFA_OK;",
          "",
          "[Removed Lines]",
          "522:         return errno;",
          "525:           return MYSOFA_INVALID_FORMAT;",
          "529:           return MYSOFA_NO_MEMORY;",
          "533:         return err;",
          "535:         return errno;",
          "",
          "[Added Lines]",
          "535:         return errno; // LCOV_EXCL_LINE",
          "538:           return MYSOFA_INVALID_FORMAT; // LCOV_EXCL_LINE",
          "542:           return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "546:         return err; // LCOV_EXCL_LINE",
          "548:         return errno; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "598:   UNUSED(length_of_entries);",
          "600:   if (fgetc(reader->fhd) != 2) {",
          "602:     return MYSOFA_INVALID_FORMAT;",
          "603:   }",
          "605:   filters = (uint8_t)fgetc(reader->fhd);",
          "606:   if (filters > 32) {",
          "607:     mylog(\"object OHDR filter pipeline message has too many filters: %d\\n\",",
          "608:           filters);",
          "609:     return MYSOFA_INVALID_FORMAT;",
          "610:   }",
          "612:   for (i = 0; i < filters; i++) {",
          "",
          "[Removed Lines]",
          "601:     mylog(\"object OHDR filter pipeline message must have version 1\\n\");",
          "",
          "[Added Lines]",
          "619:     mylog(\"object OHDR filter pipeline message must have version 2\\n\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "616:     case 2:",
          "617:       break;",
          "618:     default:",
          "619:       mylog(\"object OHDR filter pipeline message contains unsupported filter: \"",
          "620:             \"%d\\n\",",
          "621:             filter_identification_value);",
          "622:       return MYSOFA_INVALID_FORMAT;",
          "623:     }",
          "624:     mylog(\"  filter %d\\n\", filter_identification_value);",
          "625:     flags = (uint16_t)readValue(reader, 2);",
          "626:     number_client_data_values = (uint16_t)readValue(reader, 2);",
          "627:     if (number_client_data_values > 0x1000)",
          "630:     for (j = 0; j < number_client_data_values; j++) {",
          "631:       client_data = readValue(reader, 4);",
          "",
          "[Removed Lines]",
          "628:       return MYSOFA_UNSUPPORTED_FORMAT;",
          "",
          "[Added Lines]",
          "651:       return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "660:   case 0:",
          "661:     mylog(\"FIXED POINT todo %lX %d\\n\", ftell(reader->fhd), dt->size);",
          "662:     if (fseek(reader->fhd, dt->size, SEEK_CUR))",
          "664:     break;",
          "666:   case 3:",
          "667:     buffer = malloc(dt->size + 1);",
          "668:     if (buffer == NULL) {",
          "671:     }",
          "672:     if (fread(buffer, 1, dt->size, reader->fhd) != dt->size) {",
          "676:     }",
          "677:     buffer[dt->size] = 0;",
          "678:     mylog(\"STRING %s\\n\", buffer);",
          "",
          "[Removed Lines]",
          "663:       return errno;",
          "669:       mylog(\"data reader no memory\\n\");",
          "670:       return MYSOFA_NO_MEMORY;",
          "673:       free(buffer);",
          "674:       mylog(\"data reader cannot read\\n\");",
          "675:       return MYSOFA_READ_ERROR;",
          "",
          "[Added Lines]",
          "686:       return errno; // LCOV_EXCL_LINE",
          "692:       return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "695:       free(buffer);             // LCOV_EXCL_LINE",
          "696:       return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "688:     mylog(\"COMPONENT todo %lX %d\\n\", ftell(reader->fhd), dt->size);",
          "689:     if (fseek(reader->fhd, dt->size, SEEK_CUR))",
          "691:     break;",
          "693:   case 7:",
          "",
          "[Removed Lines]",
          "690:       return errno;",
          "",
          "[Added Lines]",
          "711:       return errno; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "734:   for (i = 0; i < ds->dimension_size[dim]; i++) {",
          "735:     if (dim + 1 < ds->dimensionality) {",
          "736:       if (!!(err = readDataDim(reader, da, dt, ds, dim + 1))) {",
          "738:       }",
          "739:     } else {",
          "740:       if (!!(err = readDataVar(reader, da, dt, ds))) {",
          "742:       }",
          "743:     }",
          "744:   }",
          "",
          "[Removed Lines]",
          "737:         return err;",
          "741:         return err;",
          "",
          "[Added Lines]",
          "760:         return err; // LCOV_EXCL_LINE",
          "764:         return err; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "770:   offset = readValue(reader, reader->superblock.size_of_offsets);",
          "771:   length = readValue(reader, reader->superblock.size_of_lengths);",
          "772:   if (offset > 0x1000000 || length > 0x10000000)",
          "775:   mylog(\" continue %08\" PRIX64 \" %08\" PRIX64 \"\\n\", offset, length);",
          "776:   if (reader->recursive_counter >= 20) {",
          "777:     mylog(\"recursive problem\");",
          "779:   } else",
          "780:     reader->recursive_counter++;",
          "782:   store = ftell(reader->fhd);",
          "784:   if (fseek(reader->fhd, offset, SEEK_SET) < 0)",
          "787:   err = readOCHK(reader, dataobject, offset + length);",
          "788:   if (err)",
          "791:   if (store < 0)",
          "793:   if (fseek(reader->fhd, store, SEEK_SET) < 0)",
          "796:   mylog(\" continue back\\n\");",
          "797:   return MYSOFA_OK;",
          "",
          "[Removed Lines]",
          "773:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "778:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "785:     return errno;",
          "789:     return err;",
          "792:     return MYSOFA_READ_ERROR;",
          "794:     return errno;",
          "",
          "[Added Lines]",
          "796:     return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "801:     return MYSOFA_UNSUPPORTED_FORMAT; // LCOV_EXCL_LINE",
          "808:     return errno; // LCOV_EXCL_LINE",
          "812:     return err; // LCOV_EXCL_LINE",
          "815:     return MYSOFA_READ_ERROR; // LCOV_EXCL_LINE",
          "817:     return errno; // LCOV_EXCL_LINE",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "834:     encoding = (uint8_t)fgetc(reader->fhd);",
          "836:   if (name_size > 0x1000)",
          "838:   name = malloc(name_size + 1);",
          "839:   if (!name)",
          "841:   if (fread(name, 1, name_size, reader->fhd) != name_size) {",
          "844:   }",
          "845:   if (version == 1 && fseek(reader->fhd, (8 - name_size) & 7, SEEK_CUR) != 0) {",
          "848:   }",
          "850:   name[name_size] = 0;",
          "",
          "[Removed Lines]",
          "837:     return MYSOFA_NO_MEMORY;",
          "840:     return MYSOFA_NO_MEMORY;",
          "842:     free(name);",
          "843:     return errno;",
          "846:     free(name);",
          "847:     return errno;",
          "",
          "[Added Lines]",
          "862:     return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "865:     return MYSOFA_NO_MEMORY; // LCOV_EXCL_LINE",
          "867:     free(name);   // LCOV_EXCL_LINE",
          "868:     return errno; // LCOV_EXCL_LINE",
          "871:     free(name);   // LCOV_EXCL_LINE",
          "872:     return errno; // LCOV_EXCL_LINE",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "832b2e9e850f12b5c9ecccfc443f3b888eaceb1f",
      "candidate_info": {
        "commit_hash": "832b2e9e850f12b5c9ecccfc443f3b888eaceb1f",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/832b2e9e850f12b5c9ecccfc443f3b888eaceb1f",
        "files": [
          "src/hdf/btree.c"
        ],
        "message": "Fixed: Negative size parameter passed to malloc #79",
        "before_after_code_files": [
          "src/hdf/btree.c||src/hdf/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/btree.c||src/hdf/btree.c"
          ],
          "candidate": [
            "src/hdf/btree.c||src/hdf/btree.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/btree.c||src/hdf/btree.c": [
          "File: src/hdf/btree.c -> src/hdf/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:  log(\"elements %d size %d\\n\",elements,size);",
          "263:  if (!(output = malloc(elements * size))) {",
          "264:   return MYSOFA_NO_MEMORY;",
          "265:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:  if (elements >= 0x100000 || size > 0x10)",
          "264:   return MYSOFA_INVALID_FORMAT;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e37e773eba56cf3c7464ec234c79089f22ac864f",
      "candidate_info": {
        "commit_hash": "e37e773eba56cf3c7464ec234c79089f22ac864f",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/e37e773eba56cf3c7464ec234c79089f22ac864f",
        "files": [
          "src/hdf/btree.c",
          "src/hdf/dataobject.c",
          "src/hdf/fractalhead.c",
          "src/hdf/gcol.c",
          "src/hdf/superblock.c"
        ],
        "message": "First try",
        "before_after_code_files": [
          "src/hdf/btree.c||src/hdf/btree.c",
          "src/hdf/dataobject.c||src/hdf/dataobject.c",
          "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
          "src/hdf/gcol.c||src/hdf/gcol.c",
          "src/hdf/superblock.c||src/hdf/superblock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/btree.c||src/hdf/btree.c"
          ],
          "candidate": [
            "src/hdf/btree.c||src/hdf/btree.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/btree.c||src/hdf/btree.c": [
          "File: src/hdf/btree.c -> src/hdf/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include <stdlib.h>",
          "8: #include <string.h>",
          "9: #include <errno.h>",
          "10: #include \"reader.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <inttypes.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"BTLF\", 4)) {",
          "82:   log(\"cannot read signature of BTLF\\n\");",
          "83:   return MYSOFA_INVALID_FORMAT;",
          "86:  if (fgetc(reader->fhd) != 0) {",
          "87:   log(\"object BTLF must have version 0\\n\");",
          "",
          "[Removed Lines]",
          "84:  }log(\"%08lX %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "[Added Lines]",
          "85:  }",
          "86:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:   case 5:",
          "97:    records->type5.hash_of_name = (uint32_t) readValue(reader, 4);",
          "98:    records->type5.heap_id = readValue(reader, 7);",
          "100:      records->type5.heap_id);",
          "101:    records++;",
          "102:    break;",
          "",
          "[Removed Lines]",
          "99:    log(\" type5 %08X %14lX\\n\", records->type5.hash_of_name,",
          "",
          "[Added Lines]",
          "101:    log(\" type5 %08X %14\" PRIX64 \"\\n\", records->type5.hash_of_name,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "156:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"BTHD\", 4)) {",
          "157:   log(\"cannot read signature of BTHD\\n\");",
          "158:   return MYSOFA_INVALID_FORMAT;",
          "161:  if (fgetc(reader->fhd) != 0) {",
          "162:   log(\"object BTHD must have version 0\\n\");",
          "",
          "[Removed Lines]",
          "159:  }log(\"%08lX %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "[Added Lines]",
          "161:  }",
          "162:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "230:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"TREE\", 4)) {",
          "231:   log(\"cannot read signature of TREE\\n\");",
          "232:   return MYSOFA_INVALID_FORMAT;",
          "235:  node_type = (uint8_t) fgetc(reader->fhd);",
          "236:  node_level = (uint8_t) fgetc(reader->fhd);",
          "",
          "[Removed Lines]",
          "233:  }log(\"%08lX %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "[Added Lines]",
          "236:  }",
          "237:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "275:    for (j = 0; j < data->ds.dimensionality; j++) {",
          "276:     start[j] = readValue(reader, 8);",
          "278:    }",
          "280:    if (readValue(reader, 8)) {",
          "",
          "[Removed Lines]",
          "277:     log(\"start %d %lu\\n\",j,start[j]);",
          "",
          "[Added Lines]",
          "281:     log(\"start %d %\" PRIu64 \"\\n\",j,start[j]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "284:    child_pointer = readValue(reader,",
          "285:      reader->superblock.size_of_offsets);",
          "289:    store = ftell(reader->fhd);",
          "",
          "[Removed Lines]",
          "286:    log(\" data at %lX len %u\\n\", child_pointer, size_of_chunk);",
          "",
          "[Added Lines]",
          "290:    log(\" data at %\" PRIX64 \" len %u\\n\", child_pointer, size_of_chunk);",
          "",
          "---------------"
        ],
        "src/hdf/dataobject.c||src/hdf/dataobject.c": [
          "File: src/hdf/dataobject.c -> src/hdf/dataobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <string.h>",
          "19: #include <ctype.h>",
          "20: #include <errno.h>",
          "21: #include \"reader.h\"",
          "23: static int readOCHK(struct READER *reader, struct DATAOBJECT *dataobject,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include <inttypes.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:   if (i < 4) {",
          "79:    ds->dimension_size[i] = readValue(reader,",
          "80:      reader->superblock.size_of_lengths);",
          "82:   } else",
          "83:    readValue(reader, reader->superblock.size_of_lengths);",
          "84:  }",
          "",
          "[Removed Lines]",
          "81:    log(\"   dimension %d %lu\\n\", i, ds->dimension_size[i]);",
          "",
          "[Added Lines]",
          "82:    log(\"   dimension %d %\" PRIu64 \"\\n\", i, ds->dimension_size[i]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "358:  case 2:",
          "359:   dimensionality = (uint8_t) fgetc(reader->fhd);",
          "360:   data_address = readValue(reader, reader->superblock.size_of_offsets);",
          "362:   for (i = 0; i < dimensionality; i++) {",
          "363:    data->datalayout_chunk[i] = readValue(reader, 4);",
          "364:    log(\" %d\\n\", data->datalayout_chunk[i]);",
          "",
          "[Removed Lines]",
          "361:   log(\" CHUNK %lX\\n\", data_address);",
          "",
          "[Added Lines]",
          "362:   log(\" CHUNK %\" PRIX64 \"\\n\", data_address);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "472:      \"object OHDR filter pipeline message contains unsupported filter: %d\\n\",",
          "473:      filter_identification_value);",
          "474:    return MYSOFA_INVALID_FORMAT;",
          "476:   flags = (uint16_t) readValue(reader, 2);",
          "477:   number_client_data_values = (uint16_t) readValue(reader, 2);",
          "478:   if (number_client_data_values > 0x1000)",
          "",
          "[Removed Lines]",
          "475:   }log(\"  filter %d\\n\", filter_identification_value);",
          "",
          "[Added Lines]",
          "476:   }",
          "477:   log(\"  filter %d\\n\", filter_identification_value);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "501:    gcol = readValue(reader, 4);",
          "502:   } else {",
          "503:    gcol = readValue(reader, dt->list - dt->size);",
          "506:  }",
          "",
          "[Removed Lines]",
          "504:   } log(\"    GCOL %d %8lX %8lX\\n\",dt->list - dt->size,gcol,ftell(reader->fhd));",
          "",
          "[Added Lines]",
          "506:   }",
          "507:   log(\"    GCOL %d %8\" PRIX64 \" %8\" PRIX64 \"\\n\",dt->list - dt->size,gcol,ftell(reader->fhd));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "536:  case 7:",
          "538:   reference = readValue(reader, dt->size - 4);",
          "540:   if (!!(err = gcolRead(reader, gcol, reference, &dataobject))) {",
          "541:    return MYSOFA_OK; /* ignore error",
          "",
          "[Removed Lines]",
          "539:   log(\" REFERENCE size %d %lX\\n\",dt->size, reference);",
          "",
          "[Added Lines]",
          "542:   log(\" REFERENCE size %d %\" PRIX64 \"\\n\",dt->size, reference);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "548:    sprintf(number, \"REF%08lX\", (long unsigned int) reference);",
          "549:    buffer = number;",
          "550:   }",
          "553:    return MYSOFA_UNSUPPORTED_FORMAT;",
          "",
          "[Removed Lines]",
          "551:   log(\"    REFERENCE %lu %lX %s\\n\", reference, dataobject, buffer);",
          "",
          "[Added Lines]",
          "554:   log(\"    REFERENCE %lu %\" PRIX64 \" %s\\n\", reference, dataobject, buffer);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "614:  if (offset > 0x1000000 || length > 0x10000000)",
          "615:   return MYSOFA_UNSUPPORTED_FORMAT;",
          "619:  store = ftell(reader->fhd);",
          "",
          "[Removed Lines]",
          "617:  log(\" continue %08lX %08lX\\n\", offset, length);",
          "",
          "[Added Lines]",
          "620:  log(\" continue %08\" PRIX64 \" %08\" PRIX64 \"\\n\", offset, length);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "852:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"OCHK\", 4)) {",
          "853:   log(\"cannot read signature of OCHK\\n\");",
          "854:   return MYSOFA_INVALID_FORMAT;",
          "858:  if (err) {",
          "",
          "[Removed Lines]",
          "855:  }log(\"%08lX %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "[Added Lines]",
          "858:  }",
          "859:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "876:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"OHDR\", 4)) {",
          "877:   log(\"cannot read signature of data object\\n\");",
          "878:   return MYSOFA_INVALID_FORMAT;",
          "881:  if (fgetc(reader->fhd) != 2) {",
          "882:   log(\"object OHDR must have version 2\\n\");",
          "",
          "[Removed Lines]",
          "879:  } log(\"%08lX %.4s\\n\", dataobject->address, buf);",
          "",
          "[Added Lines]",
          "883:  }",
          "884:  log(\"%08\" PRIX64 \" %.4s\\n\", dataobject->address, buf);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "896:  }",
          "898:  size_of_chunk = readValue(reader, 1 << (dataobject->flags & 3));",
          "899:  end_of_messages = ftell(reader->fhd) + size_of_chunk;",
          "901:  err = readOHDRmessages(reader, dataobject, end_of_messages);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "904:  if(size_of_chunk < 0 || size_of_chunk > 0x1000000)",
          "905:   return MYSOFA_UNSUPPORTED_FORMAT;",
          "",
          "---------------"
        ],
        "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
          "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <math.h>",
          "11: #include <errno.h>",
          "12: #include <assert.h>",
          "13: #include \"reader.h\"",
          "15: static int log2i(int a) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include <inttypes.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FHDB\", 4)) {",
          "37:   log(\"cannot read signature of fractal heap indirect block\\n\");",
          "38:   return MYSOFA_INVALID_FORMAT;",
          "41:  if (fgetc(reader->fhd) != 0) {",
          "42:   log(\"object FHDB must have version 0\\n\");",
          "",
          "[Removed Lines]",
          "39:  }log(\"%08lX %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "[Added Lines]",
          "40:  }",
          "41:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:  else",
          "61:   length_size = ceilf(log2f(fractalheap->maximum_size) / 8);",
          "",
          "[Removed Lines]",
          "63:  log(\" %d %ld %d\\n\",size,block_offset,offset_size);",
          "",
          "[Added Lines]",
          "65:  log(\" %d %\" PRIu64 \" %d\\n\",size,block_offset,offset_size);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:   if (offset > 0x10000000 || length > 0x10000000)",
          "85:    return MYSOFA_UNSUPPORTED_FORMAT;",
          "90:   if (typeandversion == 3) {",
          "",
          "[Removed Lines]",
          "87:   log(\" %d %4lX %ld %8lX\\n\",typeandversion,offset,length,ftell(reader->fhd));",
          "",
          "[Added Lines]",
          "89:   log(\" %d %4\" PRIX64 \" %ld %8lX\\n\",typeandversion,offset,length,ftell(reader->fhd));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:     }",
          "139:     strcpy(value, \"\");",
          "140:    } else {",
          "142:     free(name);",
          "144:     return MYSOFA_OK;",
          "147:    attr = malloc(sizeof(struct MYSOFA_ATTRIBUTE));",
          "148:    attr->name = name;",
          "",
          "[Removed Lines]",
          "141:     log(\"FHDB type 3 unsupported values: %12lX\\n\",unknown);",
          "145:    } log(\" %s = %s\\n\", name, value);",
          "",
          "[Added Lines]",
          "143:     log(\"FHDB type 3 unsupported values: %12\" PRIX64 \"\\n\",unknown);",
          "147:    }",
          "148:    log(\" %s = %s\\n\", name, value);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "176:    heap_header_address = readValue(reader,",
          "177:      reader->superblock.size_of_offsets);",
          "181:    dir = malloc(sizeof(struct DIR));",
          "182:    if (!dir) {",
          "",
          "[Removed Lines]",
          "179:    log(\"\\nfractal head type 1 length %4lX name %s address %lX\\n\", length, name, heap_header_address);",
          "",
          "[Added Lines]",
          "182:    log(\"\\nfractal head type 1 length %4\" PRIX64 \" name %s address %\" PRIX64 \"\\n\", length, name, heap_header_address);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "240:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FHIB\", 4)) {",
          "241:   log(\"cannot read signature of fractal heap indirect block\\n\");",
          "242:   return MYSOFA_INVALID_FORMAT;",
          "245:  if (fgetc(reader->fhd) != 0) {",
          "246:   log(\"object FHIB must have version 0\\n\");",
          "",
          "[Removed Lines]",
          "243:  }log(\"%08lX %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "[Added Lines]",
          "246:  }",
          "247:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "281:    size_filtered = readValue(reader,",
          "282:      reader->superblock.size_of_lengths);",
          "283:    filter_mask = readValue(reader, 4);",
          "285:   if (validAddress(reader, child_direct_block)) {",
          "286:    store = ftell(reader->fhd);",
          "287:    if (fseek(reader->fhd, child_direct_block, SEEK_SET) < 0)",
          "",
          "[Removed Lines]",
          "284:   }log(\">> %d %lX %d\\n\",k,child_direct_block,size);",
          "",
          "[Added Lines]",
          "288:   }",
          "289:   log(\">> %d %\" PRIX64 \" %d\\n\",k,child_direct_block,size);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "346:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FRHP\", 4)) {",
          "347:   log(\"cannot read signature of fractal heap\\n\");",
          "348:   return MYSOFA_UNSUPPORTED_FORMAT;",
          "351:  if (fgetc(reader->fhd) != 0) {",
          "352:   log(\"object fractal heap must have version 0\\n\");",
          "",
          "[Removed Lines]",
          "349:  }log(\"%08lX %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "[Added Lines]",
          "354:  }",
          "355:  log(\"%\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "---------------"
        ],
        "src/hdf/gcol.c||src/hdf/gcol.c": [
          "File: src/hdf/gcol.c -> src/hdf/gcol.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: #include <stdlib.h>",
          "8: #include <string.h>",
          "9: #include <errno.h>",
          "10: #include \"reader.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <inttypes.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:   }",
          "62:   gcol->value = readValue(reader, gcol->object_size);",
          "63:   gcol->address = address;",
          "65:     gcol->object_size, gcol->value);",
          "67:   gcol->next = reader->gcol;",
          "68:   reader->gcol = gcol;",
          "69:  }",
          "73:  return MYSOFA_OK;",
          "74: }",
          "",
          "[Removed Lines]",
          "64:   log(\" GCOL object %d size %ld value %08lX\\n\", gcol->heap_object_index,",
          "",
          "[Added Lines]",
          "65:   log(\" GCOL object %d size %\" PRIu64 \" value %08\" PRIX64 \"\\n\", gcol->heap_object_index,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:    p = p->next;",
          "97:   }",
          "98:   if (!p) {",
          "100:    return MYSOFA_INVALID_FORMAT;",
          "101:   }",
          "102:  }",
          "",
          "[Removed Lines]",
          "99:    log(\"unknown gcol %lX %d\\n\",gcol,reference);",
          "",
          "[Added Lines]",
          "100:    log(\"unknown gcol %\" PRIX64 \" %d\\n\",gcol,reference);",
          "",
          "---------------"
        ],
        "src/hdf/superblock.c||src/hdf/superblock.c": [
          "File: src/hdf/superblock.c -> src/hdf/superblock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: #include <stdlib.h>",
          "9: #include <errno.h>",
          "10: #include <stdio.h>",
          "11: #include \"reader.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: #include <inttypes.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:  if (fseek(reader->fhd, superblock->root_group_object_header_address,",
          "76:    SEEK_SET)) {",
          "78:     superblock->root_group_object_header_address);",
          "79:   return errno;",
          "80:  }",
          "",
          "[Removed Lines]",
          "77:   log(\"cannot seek to first object at %ld\\n\",",
          "",
          "[Added Lines]",
          "78:   log(\"cannot seek to first object at %\" PRId64 \"\\n\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "69f349cb09c81af6dd735741509655396ce6cb2d",
      "candidate_info": {
        "commit_hash": "69f349cb09c81af6dd735741509655396ce6cb2d",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/69f349cb09c81af6dd735741509655396ce6cb2d",
        "files": [
          "src/hdf/btree.c",
          "src/hdf/dataobject.c",
          "src/hdf/fractalhead.c",
          "src/hdf/gcol.c"
        ],
        "message": "Addressed some more coverity issues",
        "before_after_code_files": [
          "src/hdf/btree.c||src/hdf/btree.c",
          "src/hdf/dataobject.c||src/hdf/dataobject.c",
          "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
          "src/hdf/gcol.c||src/hdf/gcol.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/btree.c||src/hdf/btree.c"
          ],
          "candidate": [
            "src/hdf/btree.c||src/hdf/btree.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/btree.c||src/hdf/btree.c": [
          "File: src/hdf/btree.c -> src/hdf/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   uint32_t creation_order, hash_of_name;",
          "72:   uint64_t heap_id;",
          "76:   UNUSED(heap_id);",
          "77:   UNUSED(hash_of_name);",
          "",
          "[Removed Lines]",
          "74:   char buf[4];",
          "",
          "[Added Lines]",
          "74:   char buf[5];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:     mylog(\"cannot read signature of BTLF\\n\");",
          "84:     return MYSOFA_INVALID_FORMAT;",
          "85:   }",
          "86:   mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "88:   if (fgetc(reader->fhd) != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   buf[4]=0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155: int btreeRead(struct READER *reader, struct BTREE *btree) {",
          "159:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"BTHD\", 4)) {",
          "160:     mylog(\"cannot read signature of BTHD\\n\");",
          "161:     return MYSOFA_INVALID_FORMAT;",
          "162:   }",
          "163:   mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "165:   if (fgetc(reader->fhd) != 0) {",
          "",
          "[Removed Lines]",
          "156:   char buf[4];",
          "",
          "[Added Lines]",
          "157:   char buf[5];",
          "164:   buf[4]=0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "216:   uint64_t address_of_left_sibling, address_of_right_sibling, start[4],",
          "217:       child_pointer, key, store;",
          "221:   UNUSED(node_level);",
          "222:   UNUSED(address_of_right_sibling);",
          "",
          "[Removed Lines]",
          "219:   char buf[4];",
          "",
          "[Added Lines]",
          "221:   char buf[5];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:     mylog(\"cannot read signature of TREE\\n\");",
          "234:     return MYSOFA_INVALID_FORMAT;",
          "235:   }",
          "236:   mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "238:   node_type = (uint8_t)fgetc(reader->fhd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:   buf[4]=0;",
          "",
          "---------------"
        ],
        "src/hdf/dataobject.c||src/hdf/dataobject.c": [
          "File: src/hdf/dataobject.c -> src/hdf/dataobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "309:           return MYSOFA_READ_ERROR;",
          "311:         c = readValue(reader, 4);",
          "313:         if (dimension != 0) {",
          "314:           mylog(\"COMPOUND v1 with dimension not supported\");",
          "315:           return MYSOFA_INVALID_FORMAT;",
          "",
          "[Removed Lines]",
          "312:         uint8_t dimension = fgetc(reader->fhd);",
          "",
          "[Added Lines]",
          "312:         int dimension = fgetc(reader->fhd);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1028: static int readOCHK(struct READER *reader, struct DATAOBJECT *dataobject,",
          "1029:                     uint64_t end) {",
          "1030:   int err;",
          "1034:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"OCHK\", 4)) {",
          "1035:     mylog(\"cannot read signature of OCHK\\n\");",
          "1036:     return MYSOFA_INVALID_FORMAT;",
          "1037:   }",
          "1038:   mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "",
          "[Removed Lines]",
          "1031:   char buf[4];",
          "",
          "[Added Lines]",
          "1031:   char buf[5];",
          "1038:   buf[4]=0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1049:                    char *name) {",
          "1050:   uint64_t size_of_chunk, end_of_messages;",
          "1051:   int err;",
          "1054:   memset(dataobject, 0, sizeof(*dataobject));",
          "1055:   dataobject->address = ftell(reader->fhd);",
          "",
          "[Removed Lines]",
          "1052:   char buf[4];",
          "",
          "[Added Lines]",
          "1053:   char buf[5];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1060:     mylog(\"cannot read signature of data object\\n\");",
          "1061:     return MYSOFA_INVALID_FORMAT;",
          "1062:   }",
          "1063:   mylog(\"%08\" PRIX64 \" %.4s\\n\", dataobject->address, buf);",
          "1065:   if (fgetc(reader->fhd) != 2) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1064:   buf[4]=0;",
          "",
          "---------------"
        ],
        "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
          "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: static int directblockRead(struct READER *reader, struct DATAOBJECT *dataobject,",
          "21:                            struct FRACTALHEAP *fractalheap) {",
          "24:   int size, offset_size, length_size, err, len;",
          "25:   uint8_t typeandversion;",
          "26:   uint64_t unknown, heap_header_address, block_offset, block_size, offset,",
          "",
          "[Removed Lines]",
          "23:   char buf[4], *name, *value;",
          "",
          "[Added Lines]",
          "23:   char buf[5], *name, *value;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     mylog(\"cannot read signature of fractal heap indirect block\\n\");",
          "45:     return MYSOFA_INVALID_FORMAT;",
          "46:   }",
          "47:   mylog(\"%08\" PRIX64 \" %.4s stack %d\\n\", (uint64_t)ftell(reader->fhd) - 4, buf,",
          "48:         reader->recursive_counter);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   buf[4]=0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "359:       child_direct_block = 0, size_filtered, child_indirect_block;",
          "360:   long store;",
          "364:   UNUSED(size_filtered);",
          "365:   UNUSED(heap_header_address);",
          "",
          "[Removed Lines]",
          "362:   char buf[4];",
          "",
          "[Added Lines]",
          "363:   char buf[5];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "370:     mylog(\"cannot read signature of fractal heap indirect block\\n\");",
          "371:     return MYSOFA_INVALID_FORMAT;",
          "372:   }",
          "373:   mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "375:   if (fgetc(reader->fhd) != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "374:   buf[4]=0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "475: int fractalheapRead(struct READER *reader, struct DATAOBJECT *dataobject,",
          "476:                     struct FRACTALHEAP *fractalheap) {",
          "477:   int err;",
          "481:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FRHP\", 4)) {",
          "482:     mylog(\"cannot read signature of fractal heap\\n\");",
          "483:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "484:   }",
          "485:   mylog(\"%\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "487:   if (fgetc(reader->fhd) != 0) {",
          "",
          "[Removed Lines]",
          "478:   char buf[4];",
          "",
          "[Added Lines]",
          "480:   char buf[5];",
          "487:   buf[4]=0;",
          "",
          "---------------"
        ],
        "src/hdf/gcol.c||src/hdf/gcol.c": [
          "File: src/hdf/gcol.c -> src/hdf/gcol.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18:   uint16_t reference_count, address;",
          "19:   uint64_t collection_size, end;",
          "20:   struct GCOL *gcol;",
          "23:   UNUSED(reference_count);",
          "",
          "[Removed Lines]",
          "21:   char buf[4];",
          "",
          "[Added Lines]",
          "21:   char buf[5];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:     mylog(\"cannot read signature of global heap collection\\n\");",
          "28:     return MYSOFA_INVALID_FORMAT;",
          "29:   }",
          "31:   if (fgetc(reader->fhd) != 1) {",
          "32:     mylog(\"object GCOL must have version 1\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:   buf[4]=0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "73a3889998bb68900af3cf0f4b81acc35850a738",
      "candidate_info": {
        "commit_hash": "73a3889998bb68900af3cf0f4b81acc35850a738",
        "repo": "hoene/libmysofa",
        "commit_url": "https://github.com/hoene/libmysofa/commit/73a3889998bb68900af3cf0f4b81acc35850a738",
        "files": [
          "src/hdf/btree.c",
          "src/hdf/dataobject.c",
          "src/hdf/fractalhead.c",
          "src/hdf/gcol.c",
          "src/hdf/gunzip.c",
          "src/hdf/reader.h",
          "src/hdf/superblock.c",
          "src/hrtf/reader.c"
        ],
        "message": "rename log to mylog",
        "before_after_code_files": [
          "src/hdf/btree.c||src/hdf/btree.c",
          "src/hdf/dataobject.c||src/hdf/dataobject.c",
          "src/hdf/fractalhead.c||src/hdf/fractalhead.c",
          "src/hdf/gcol.c||src/hdf/gcol.c",
          "src/hdf/gunzip.c||src/hdf/gunzip.c",
          "src/hdf/reader.h||src/hdf/reader.h",
          "src/hdf/superblock.c||src/hdf/superblock.c",
          "src/hrtf/reader.c||src/hrtf/reader.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/hdf/btree.c||src/hdf/btree.c"
          ],
          "candidate": [
            "src/hdf/btree.c||src/hdf/btree.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hdf/btree.c||src/hdf/btree.c": [
          "File: src/hdf/btree.c -> src/hdf/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"BTLF\", 4)) {",
          "84:   return MYSOFA_INVALID_FORMAT;",
          "85:  }",
          "88:  if (fgetc(reader->fhd) != 0) {",
          "90:   return MYSOFA_INVALID_FORMAT;",
          "91:  }",
          "",
          "[Removed Lines]",
          "83:   log(\"cannot read signature of BTLF\\n\");",
          "86:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "89:   log(\"object BTLF must have version 0\\n\");",
          "",
          "[Added Lines]",
          "83:   mylog(\"cannot read signature of BTLF\\n\");",
          "86:  mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "89:   mylog(\"object BTLF must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:   case 5:",
          "99:    records->type5.hash_of_name = (uint32_t) readValue(reader, 4);",
          "100:    records->type5.heap_id = readValue(reader, 7);",
          "102:      records->type5.heap_id);",
          "103:    records++;",
          "104:    break;",
          "",
          "[Removed Lines]",
          "101:    log(\" type5 %08X %14\" PRIX64 \"\\n\", records->type5.hash_of_name,",
          "",
          "[Added Lines]",
          "101:    mylog(\" type5 %08X %14\" PRIX64 \"\\n\", records->type5.hash_of_name,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:    break;",
          "133:   default:",
          "135:    return MYSOFA_INVALID_FORMAT;",
          "136:   }",
          "137:  }",
          "",
          "[Removed Lines]",
          "134:    log(\"object BTLF has unknown type %d\\n\", type);",
          "",
          "[Added Lines]",
          "134:    mylog(\"object BTLF has unknown type %d\\n\", type);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "158:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"BTHD\", 4)) {",
          "160:   return MYSOFA_INVALID_FORMAT;",
          "161:  }",
          "164:  if (fgetc(reader->fhd) != 0) {",
          "166:   return MYSOFA_INVALID_FORMAT;",
          "167:  }",
          "",
          "[Removed Lines]",
          "159:   log(\"cannot read signature of BTHD\\n\");",
          "162:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "165:   log(\"object BTHD must have version 0\\n\");",
          "",
          "[Added Lines]",
          "159:   mylog(\"cannot read signature of BTHD\\n\");",
          "162:  mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "165:   mylog(\"object BTHD must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:  UNUSED(key);",
          "227:  if (data->ds.dimensionality > 3) {",
          "229:   return MYSOFA_INVALID_FORMAT;",
          "230:  }",
          "233:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"TREE\", 4)) {",
          "235:   return MYSOFA_INVALID_FORMAT;",
          "236:  }",
          "239:  node_type = (uint8_t) fgetc(reader->fhd);",
          "240:  node_level = (uint8_t) fgetc(reader->fhd);",
          "",
          "[Removed Lines]",
          "228:   log(\"TREE dimensions > 3\");",
          "234:   log(\"cannot read signature of TREE\\n\");",
          "237:  log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "[Added Lines]",
          "228:   mylog(\"TREE dimensions > 3\");",
          "234:   mylog(\"cannot read signature of TREE\\n\");",
          "237:  mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "258:  szy = sz * sy;",
          "259:  size = data->datalayout_chunk[data->ds.dimensionality];",
          "263:  if (elements >= 0x100000 || size > 0x10)",
          "264:   return MYSOFA_INVALID_FORMAT;",
          "",
          "[Removed Lines]",
          "261:  log(\"elements %d size %d\\n\",elements,size);",
          "",
          "[Added Lines]",
          "261:  mylog(\"elements %d size %d\\n\",elements,size);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "273:    size_of_chunk = (uint32_t) readValue(reader, 4);",
          "274:    filter_mask = (uint32_t) readValue(reader, 4);",
          "275:    if (filter_mask) {",
          "277:     free(output);",
          "278:     return MYSOFA_INVALID_FORMAT;",
          "279:    }",
          "281:    for (j = 0; j < data->ds.dimensionality; j++) {",
          "282:     start[j] = readValue(reader, 8);",
          "284:    }",
          "286:    if (readValue(reader, 8)) {",
          "",
          "[Removed Lines]",
          "276:     log(\"TREE all filters must be enabled\\n\");",
          "283:     log(\"start %d %\" PRIu64 \"\\n\",j,start[j]);",
          "",
          "[Added Lines]",
          "276:     mylog(\"TREE all filters must be enabled\\n\");",
          "283:     mylog(\"start %d %\" PRIu64 \"\\n\",j,start[j]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "290:    child_pointer = readValue(reader,",
          "291:      reader->superblock.size_of_offsets);",
          "295:    store = ftell(reader->fhd);",
          "",
          "[Removed Lines]",
          "292:    log(\" data at %\" PRIX64 \" len %u\\n\", child_pointer, size_of_chunk);",
          "",
          "[Added Lines]",
          "292:    mylog(\" data at %\" PRIX64 \" len %u\\n\", child_pointer, size_of_chunk);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "312:    err = gunzip(size_of_chunk, input, &olen, output);",
          "313:    free(input);",
          "316:    if (err || olen != elements * size) {",
          "317:     free(output);",
          "318:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Removed Lines]",
          "315:    log(\"   gunzip %d %d %d\\n\",err, olen, elements*size);",
          "",
          "[Added Lines]",
          "315:    mylog(\"   gunzip %d %d %d\\n\",err, olen, elements*size);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "362:     }",
          "363:     break;",
          "364:    default:",
          "366:     return MYSOFA_INTERNAL_ERROR;",
          "367:    }",
          "",
          "[Removed Lines]",
          "365:     log(\"invalid dim\\n\");",
          "",
          "[Added Lines]",
          "365:     mylog(\"invalid dim\\n\");",
          "",
          "---------------"
        ],
        "src/hdf/dataobject.c||src/hdf/dataobject.c": [
          "File: src/hdf/dataobject.c -> src/hdf/dataobject.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:     if (i < 4) {",
          "68:       ds->dimension_size[i] =",
          "69:           readValue(reader, reader->superblock.size_of_lengths);",
          "71:     } else",
          "72:       readValue(reader, reader->superblock.size_of_lengths);",
          "73:   }",
          "",
          "[Removed Lines]",
          "70:       log(\"   dimension %d %\" PRIu64 \"\\n\", i, ds->dimension_size[i]);",
          "",
          "[Added Lines]",
          "70:       mylog(\"   dimension %d %\" PRIu64 \"\\n\", i, ds->dimension_size[i]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:   }",
          "85:   if (ds->flags & 2) {",
          "87:     return MYSOFA_INVALID_FORMAT;",
          "88:   }",
          "",
          "[Removed Lines]",
          "86:     log(\"permutation in OHDR not supported\\n\");",
          "",
          "[Added Lines]",
          "86:     mylog(\"permutation in OHDR not supported\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:     if (i < 4) {",
          "102:       ds->dimension_size[i] =",
          "103:           readValue(reader, reader->superblock.size_of_lengths);",
          "105:     } else",
          "106:       readValue(reader, reader->superblock.size_of_lengths);",
          "107:   }",
          "",
          "[Removed Lines]",
          "104:       log(\"   dimension %d %\" PRIu64 \"\\n\", i, ds->dimension_size[i]);",
          "",
          "[Added Lines]",
          "104:       mylog(\"   dimension %d %\" PRIu64 \"\\n\", i, ds->dimension_size[i]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:   ds->dimensionality = (uint8_t)fgetc(reader->fhd);",
          "128:   if (ds->dimensionality > 4) {",
          "130:     return MYSOFA_INVALID_FORMAT;",
          "131:   }",
          "",
          "[Removed Lines]",
          "129:     log(\"dimensionality must be lower than 5\\n\");",
          "",
          "[Added Lines]",
          "129:     mylog(\"dimensionality must be lower than 5\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "138:   case 2:",
          "139:     return readOHDRHeaderMessageDataspace2(reader, ds);",
          "140:   default:",
          "142:         \"%06X\\n\",",
          "143:         version, ftell(reader->fhd) - 1);",
          "144:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Removed Lines]",
          "141:     log(\"object OHDR dataspace message must have version 1 or 2 but is %X at \"",
          "",
          "[Added Lines]",
          "141:     mylog(\"object OHDR dataspace message must have version 1 or 2 but is %X at \"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "157:                                          struct LINKINFO *li) {",
          "159:   if (fgetc(reader->fhd) != 0) {",
          "161:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "162:   }",
          "",
          "[Removed Lines]",
          "160:     log(\"object OHDR link info message must have version 0\\n\");",
          "",
          "[Added Lines]",
          "160:     mylog(\"object OHDR link info message must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "198:   dt->class_and_version = (uint8_t)fgetc(reader->fhd);",
          "199:   if ((dt->class_and_version & 0xf0) != 0x10 &&",
          "200:       (dt->class_and_version & 0xf0) != 0x30) {",
          "202:         dt->class_and_version >> 4, ftell(reader->fhd) - 1);",
          "203:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "204:   }",
          "",
          "[Removed Lines]",
          "201:     log(\"object OHDR datatype message must have version 1 not %d at %06X\\n\",",
          "",
          "[Added Lines]",
          "201:     mylog(\"object OHDR datatype message must have version 1 not %d at %06X\\n\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "213:     dt->u.i.bit_offset = readValue(reader, 2);",
          "214:     dt->u.i.bit_precision = readValue(reader, 2);",
          "216:         dt->class_and_version >> 4, dt->size);",
          "217:     break;",
          "",
          "[Removed Lines]",
          "215:     log(\"    INT bit %d %d %d %d\\n\", dt->u.i.bit_offset, dt->u.i.bit_precision,",
          "",
          "[Added Lines]",
          "215:     mylog(\"    INT bit %d %d %d %d\\n\", dt->u.i.bit_offset, dt->u.i.bit_precision,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "225:     dt->u.f.mantissa_size = (uint8_t)fgetc(reader->fhd);",
          "226:     dt->u.f.exponent_bias = (uint32_t)readValue(reader, 4);",
          "229:         dt->u.f.bit_offset, dt->u.f.bit_precision, dt->u.f.exponent_location,",
          "230:         dt->u.f.exponent_size, dt->u.f.mantissa_location, dt->u.f.mantissa_size,",
          "231:         dt->u.f.exponent_bias);",
          "",
          "[Removed Lines]",
          "228:     log(\"    FLOAT bit %d %d exponent %d %d MANTISSA %d %d OFFSET %d\\n\",",
          "",
          "[Added Lines]",
          "228:     mylog(\"    FLOAT bit %d %d exponent %d %d MANTISSA %d %d OFFSET %d\\n\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "245:     break;",
          "249:     break;",
          "251:   case 6:",
          "253:     switch (dt->class_and_version >> 4) {",
          "254:     case 3:",
          "255:       for (i = 0; i < (dt->class_bit_field & 0xffff); i++) {",
          "",
          "[Removed Lines]",
          "248:     log(\"    STRING %d %02X\\n\", dt->size, dt->class_bit_field);",
          "252:     log(\"    COMPOUND %d %02X\\n\", dt->size, dt->class_bit_field);",
          "",
          "[Added Lines]",
          "248:     mylog(\"    STRING %d %02X\\n\", dt->size, dt->class_bit_field);",
          "252:     mylog(\"    COMPOUND %d %02X\\n\", dt->size, dt->class_bit_field);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "273:           c |= fgetc(reader->fhd) << (8 * j);",
          "274:         }",
          "279:          p = realloc(buffer, j);",
          "",
          "[Removed Lines]",
          "276:         log(\"   COMPOUND %s offset %d\\n\", buffer, c);",
          "",
          "[Added Lines]",
          "276:         mylog(\"   COMPOUND %s offset %d\\n\", buffer, c);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "309:         c = readValue(reader, 4);",
          "310:         uint8_t dimension = fgetc(reader->fhd);",
          "311:         if (dimension != 0) {",
          "313:           return MYSOFA_INVALID_FORMAT;",
          "314:         }",
          "",
          "[Removed Lines]",
          "312:           log(\"COMPOUND v1 with dimension not supported\");",
          "",
          "[Added Lines]",
          "312:           mylog(\"COMPOUND v1 with dimension not supported\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "317:         if (fseek(reader->fhd, 3 + 4 + 4 + 4 * 4, SEEK_CUR))",
          "318:           return MYSOFA_READ_ERROR;",
          "321:         err = readOHDRHeaderMessageDatatype(reader, &dt2);",
          "322:         if (err)",
          "323:           return err;",
          "324:       }",
          "325:       break;",
          "326:     default:",
          "328:           dt->class_and_version >> 4);",
          "329:       return MYSOFA_INVALID_FORMAT;",
          "330:     }",
          "331:     break;",
          "334:     break;",
          "337:     dt->list = dt->size;",
          "339:     err = readOHDRHeaderMessageDatatype(reader, dt);",
          "340:     if (err)",
          "341:       return err;",
          "342:     break;",
          "344:   default:",
          "346:         dt->class_and_version & 0xf);",
          "347:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "348:   }",
          "",
          "[Removed Lines]",
          "320:         log(\"  COMPOUND %s %d %d %X\\n\", name, c, dimension, ftell(reader->fhd));",
          "327:       log(\"object OHDR datatype message must have version 1 or 3 not %d\\n\",",
          "333:     log(\"    REFERENCE %d %02X\\n\", dt->size, dt->class_bit_field);",
          "338:     log(\"  LIST %d\\n\", dt->size);",
          "345:     log(\"object OHDR datatype message has unknown variable type %d\\n\",",
          "",
          "[Added Lines]",
          "320:         mylog(\"  COMPOUND %s %d %d %X\\n\", name, c, dimension, ftell(reader->fhd));",
          "327:       mylog(\"object OHDR datatype message must have version 1 or 3 not %d\\n\",",
          "333:     mylog(\"    REFERENCE %d %02X\\n\", dt->size, dt->class_bit_field);",
          "338:     mylog(\"  LIST %d\\n\", dt->size);",
          "345:     mylog(\"object OHDR datatype message has unknown variable type %d\\n\",",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "365:   if ((spaceAllocationTime & ~1) != 2 || fillValueWriteTime != 2 ||",
          "366:       (fillValueDefined & ~1) != 0) {",
          "368:         spaceAllocationTime, fillValueWriteTime, fillValueDefined);",
          "369:     return MYSOFA_INVALID_FORMAT;",
          "370:   }",
          "",
          "[Removed Lines]",
          "367:     log(\"spaceAllocationTime %d fillValueWriteTime %d fillValueDefined %d\\n\",",
          "",
          "[Added Lines]",
          "367:     mylog(\"spaceAllocationTime %d fillValueWriteTime %d fillValueDefined %d\\n\",",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "406:   case 3:",
          "407:     return readOHDRHeaderMessageDataFill3(reader);",
          "408:   default:",
          "410:         \"%d\\n\",",
          "411:         version);",
          "412:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Removed Lines]",
          "409:     log(\"object OHDR data storage fill value message must have version 3 not \"",
          "",
          "[Added Lines]",
          "409:     mylog(\"object OHDR data storage fill value message must have version 3 not \"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "459:   UNUSED(data_size);",
          "461:   if (fgetc(reader->fhd) != 3) {",
          "463:     return MYSOFA_INVALID_FORMAT;",
          "464:   }",
          "",
          "[Removed Lines]",
          "462:     log(\"object OHDR message data layout message must have version 3\\n\");",
          "",
          "[Added Lines]",
          "462:     mylog(\"object OHDR message data layout message must have version 3\\n\");",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "470:  case 0:",
          "471:  data_size = readValue(reader, 2);",
          "472:  fseek(reader->fhd, data_size, SEEK_CUR);",
          "474:  break;",
          "475: #endif",
          "476:   case 1:",
          "477:     data_address = readValue(reader, reader->superblock.size_of_offsets);",
          "478:     data_size = readValue(reader, reader->superblock.size_of_lengths);",
          "480:     break;",
          "482:   case 2:",
          "",
          "[Removed Lines]",
          "473:  log(\"TODO 0 SIZE %u\\n\", data_size);",
          "479:     log(\"TODO 1 SIZE %\" PRIu64 \"\\n\", data_size);",
          "",
          "[Added Lines]",
          "473:  mylog(\"TODO 0 SIZE %u\\n\", data_size);",
          "479:     mylog(\"TODO 1 SIZE %\" PRIu64 \"\\n\", data_size);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "486:             sizeof(data->datalayout_chunk) / sizeof(data->datalayout_chunk)[0])",
          "487:       return MYSOFA_INVALID_FORMAT;",
          "488:     data_address = readValue(reader, reader->superblock.size_of_offsets);",
          "490:     for (i = 0; i < dimensionality; i++) {",
          "491:       data->datalayout_chunk[i] = readValue(reader, 4);",
          "493:     }",
          "",
          "[Removed Lines]",
          "489:     log(\" CHUNK %\" PRIX64 \"\\n\", data_address);",
          "492:       log(\" %d\\n\", data->datalayout_chunk[i]);",
          "",
          "[Added Lines]",
          "489:     mylog(\" CHUNK %\" PRIX64 \"\\n\", data_address);",
          "492:       mylog(\" %d\\n\", data->datalayout_chunk[i]);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "518:     break;",
          "520:   default:",
          "522:         \"%d\\n\",",
          "523:         layout_class);",
          "524:     return MYSOFA_INVALID_FORMAT;",
          "",
          "[Removed Lines]",
          "521:     log(\"object OHDR message data layout message has unknown layout class \"",
          "",
          "[Added Lines]",
          "521:     mylog(\"object OHDR message data layout message has unknown layout class \"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "538:                                           struct GROUPINFO *gi) {",
          "540:   if (fgetc(reader->fhd) != 0) {",
          "542:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "543:   }",
          "",
          "[Removed Lines]",
          "541:     log(\"object OHDR group info message must have version 0\\n\");",
          "",
          "[Added Lines]",
          "541:     mylog(\"object OHDR group info message must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "579:   UNUSED(length_of_entries);",
          "581:   if (fgetc(reader->fhd) != 2) {",
          "583:     return MYSOFA_INVALID_FORMAT;",
          "584:   }",
          "586:   filters = (uint8_t)fgetc(reader->fhd);",
          "587:   if (filters > 32) {",
          "589:         filters);",
          "590:     return MYSOFA_INVALID_FORMAT;",
          "591:   }",
          "",
          "[Removed Lines]",
          "582:     log(\"object OHDR filter pipeline message must have version 1\\n\");",
          "588:     log(\"object OHDR filter pipeline message has too many filters: %d\\n\",",
          "",
          "[Added Lines]",
          "582:     mylog(\"object OHDR filter pipeline message must have version 1\\n\");",
          "588:     mylog(\"object OHDR filter pipeline message has too many filters: %d\\n\",",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "597:     case 2:",
          "598:       break;",
          "599:     default:",
          "601:           \"%d\\n\",",
          "602:           filter_identification_value);",
          "603:       return MYSOFA_INVALID_FORMAT;",
          "604:     }",
          "606:     flags = (uint16_t)readValue(reader, 2);",
          "607:     number_client_data_values = (uint16_t)readValue(reader, 2);",
          "608:     if (number_client_data_values > 0x1000)",
          "",
          "[Removed Lines]",
          "600:       log(\"object OHDR filter pipeline message contains unsupported filter: \"",
          "605:     log(\"  filter %d\\n\", filter_identification_value);",
          "",
          "[Added Lines]",
          "600:       mylog(\"object OHDR filter pipeline message contains unsupported filter: \"",
          "605:     mylog(\"  filter %d\\n\", filter_identification_value);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "631:     } else {",
          "632:       gcol = readValue(reader, dt->list - dt->size);",
          "633:     }",
          "635:         ftell(reader->fhd));",
          "",
          "[Removed Lines]",
          "634:     log(\"    GCOL %d %8\" PRIX64 \" %8lX\\n\", dt->list - dt->size, gcol,",
          "",
          "[Added Lines]",
          "634:     mylog(\"    GCOL %d %8\" PRIX64 \" %8lX\\n\", dt->list - dt->size, gcol,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "641:   case 3:",
          "642:     buffer = malloc(dt->size + 1);",
          "643:     if (buffer == NULL) {",
          "645:       return MYSOFA_NO_MEMORY;",
          "646:     }",
          "647:     if (fread(buffer, 1, dt->size, reader->fhd) != dt->size) {",
          "648:       free(buffer);",
          "650:       return MYSOFA_READ_ERROR;",
          "651:     }",
          "652:     buffer[dt->size] = 0;",
          "654:     data->string = buffer;",
          "655:     break;",
          "",
          "[Removed Lines]",
          "644:       log(\"data reader no memory\\n\");",
          "649:       log(\"data reader cannot read\\n\");",
          "653:     log(\"STRING %s\\n\", buffer);",
          "",
          "[Added Lines]",
          "644:       mylog(\"data reader no memory\\n\");",
          "649:       mylog(\"data reader cannot read\\n\");",
          "653:     mylog(\"STRING %s\\n\", buffer);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "661:   case 6:",
          "664:     if (fseek(reader->fhd, dt->size, SEEK_CUR))",
          "665:       return errno;",
          "666:     break;",
          "",
          "[Removed Lines]",
          "663:     log(\"COMPONENT todo %lX %d\\n\", ftell(reader->fhd), dt->size);",
          "",
          "[Added Lines]",
          "663:     mylog(\"COMPONENT todo %lX %d\\n\", ftell(reader->fhd), dt->size);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "668:   case 7:",
          "670:     reference = readValue(reader, dt->size - 4);",
          "672:     if (!!(err = gcolRead(reader, gcol, reference, &dataobject))) {",
          "673:       return MYSOFA_OK; /* ignore error",
          "",
          "[Removed Lines]",
          "671:     log(\" REFERENCE size %d %\" PRIX64 \"\\n\", dt->size, reference);",
          "",
          "[Added Lines]",
          "671:     mylog(\" REFERENCE size %d %\" PRIX64 \"\\n\", dt->size, reference);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "680:       sprintf(number, \"REF%08lX\", (long unsigned int)reference);",
          "681:       buffer = number;",
          "682:     }",
          "684:         buffer);",
          "686:      return MYSOFA_UNSUPPORTED_FORMAT;",
          "",
          "[Removed Lines]",
          "683:     log(\"    REFERENCE %\" PRIX64 \" %\" PRIX64 \" %s\\n\", reference, dataobject,",
          "",
          "[Added Lines]",
          "683:     mylog(\"    REFERENCE %\" PRIX64 \" %\" PRIX64 \" %s\\n\", reference, dataobject,",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "696:     break;",
          "698:   default:",
          "700:     return MYSOFA_INTERNAL_ERROR;",
          "701:   }",
          "702:   return MYSOFA_OK;",
          "",
          "[Removed Lines]",
          "699:     log(\"data reader unknown type %d\\n\", dt->class_and_version & 0xf);",
          "",
          "[Added Lines]",
          "699:     mylog(\"data reader unknown type %d\\n\", dt->class_and_version & 0xf);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "747:   if (offset > 0x1000000 || length > 0x10000000)",
          "748:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "752:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "753:   else",
          "754:     reader->recursive_counter++;",
          "",
          "[Removed Lines]",
          "750:   log(\" continue %08\" PRIX64 \" %08\" PRIX64 \"\\n\", offset, length);",
          "751:   if (reader->recursive_counter >= 10)",
          "",
          "[Added Lines]",
          "750:   mylog(\" continue %08\" PRIX64 \" %08\" PRIX64 \"\\n\", offset, length);",
          "751:   if (reader->recursive_counter >= 20) {",
          "752:     mylog(\"recursive problem\");",
          "754:   }",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "767:   if (fseek(reader->fhd, store, SEEK_SET) < 0)",
          "768:     return errno;",
          "771:   return MYSOFA_OK;",
          "772: }",
          "",
          "[Removed Lines]",
          "770:   log(\" continue back\\n\");",
          "",
          "[Added Lines]",
          "772:   mylog(\" continue back\\n\");",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "795:   uint8_t version = fgetc(reader->fhd);",
          "797:   if (version != 1 && version != 3) {",
          "799:     return MYSOFA_INVALID_FORMAT;",
          "800:   }",
          "",
          "[Removed Lines]",
          "798:     log(\"object OHDR attribute message must have version 1 or 3\\n\");",
          "",
          "[Added Lines]",
          "800:     mylog(\"object OHDR attribute message must have version 1 or 3\\n\");",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "822:   }",
          "824:   name[name_size] = 0;",
          "826:       ftell(reader->fhd));",
          "828:   if (version == 3 && (flags & 3)) {",
          "830:     free(name);",
          "831:     return MYSOFA_INVALID_FORMAT;",
          "832:   }",
          "833:   err = readOHDRHeaderMessageDatatype(reader, &d.dt);",
          "834:   if (err) {",
          "836:     free(name);",
          "837:     return MYSOFA_INVALID_FORMAT;",
          "838:   }",
          "",
          "[Removed Lines]",
          "825:   log(\"  attribute name %s %d %d %X\\n\", name, datatype_size, dataspace_size,",
          "829:     log(\"object OHDR attribute message must not have any flags set\\n\");",
          "835:     log(\"object OHDR attribute message read datatype error\\n\");",
          "",
          "[Added Lines]",
          "827:   mylog(\"  attribute name %s %d %d %X\\n\", name, datatype_size, dataspace_size,",
          "831:     mylog(\"object OHDR attribute message must not have any flags set\\n\");",
          "837:     mylog(\"object OHDR attribute message read datatype error\\n\");",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "842:   err = readOHDRHeaderMessageDataspace(reader, &d.ds);",
          "843:   if (err) {",
          "845:     free(name);",
          "846:     return MYSOFA_INVALID_FORMAT;",
          "847:   }",
          "",
          "[Removed Lines]",
          "844:     log(\"object OHDR attribute message read dataspace error\\n\");",
          "",
          "[Added Lines]",
          "846:     mylog(\"object OHDR attribute message read dataspace error\\n\");",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "851:   err = readData(reader, &d, &d.dt, &d.ds);",
          "852:   if (err) {",
          "854:     free(name);",
          "855:     return MYSOFA_INVALID_FORMAT;",
          "856:   }",
          "",
          "[Removed Lines]",
          "853:     log(\"object OHDR attribute message read data error\\n\");",
          "",
          "[Added Lines]",
          "855:     mylog(\"object OHDR attribute message read data error\\n\");",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "879:                                               struct ATTRIBUTEINFO *ai) {",
          "881:   if (fgetc(reader->fhd) != 0) {",
          "883:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "884:   }",
          "",
          "[Removed Lines]",
          "882:     log(\"object OHDR attribute info message must have version 0\\n\");",
          "",
          "[Added Lines]",
          "884:     mylog(\"object OHDR attribute info message must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "917:     uint16_t header_message_size = (uint16_t)readValue(reader, 2);",
          "918:     uint8_t header_message_flags = (uint8_t)fgetc(fhd);",
          "919:     if ((header_message_flags & ~5) != 0) {",
          "921:       return MYSOFA_UNSUPPORTED_FORMAT;",
          "922:     }",
          "",
          "[Removed Lines]",
          "920:       log(\"OHDR unsupported OHDR message flag %02X\\n\", header_message_flags);",
          "",
          "[Added Lines]",
          "922:       mylog(\"OHDR unsupported OHDR message flag %02X\\n\", header_message_flags);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "926:       if (fseek(reader->fhd, 2, SEEK_CUR) < 0)",
          "927:         return errno;",
          "930:         ftell(fhd), header_message_size);",
          "932:     end = ftell(fhd) + header_message_size;",
          "",
          "[Removed Lines]",
          "929:     log(\" OHDR message type %2d offset %6lX len %4X\\n\", header_message_type,",
          "",
          "[Added Lines]",
          "931:     mylog(\" OHDR message type %2d offset %6lX len %4X\\n\", header_message_type,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "981:         return err;",
          "982:       break;",
          "983:     default:",
          "986:       return MYSOFA_UNSUPPORTED_FORMAT;",
          "987:     }",
          "989:     if (ftell(fhd) != end) {",
          "991:       return MYSOFA_INTERNAL_ERROR;",
          "992:     }",
          "993:   }",
          "",
          "[Removed Lines]",
          "984:       log(\"OHDR unknown header message of type %d\\n\", header_message_type);",
          "990:       log(\"OHDR message length mismatch by %ld\\n\", ftell(fhd) - end);",
          "",
          "[Added Lines]",
          "986:       mylog(\"OHDR unknown header message of type %d\\n\", header_message_type);",
          "992:       mylog(\"OHDR message length mismatch by %ld\\n\", ftell(fhd) - end);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1007:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"OCHK\", 4)) {",
          "1009:     return MYSOFA_INVALID_FORMAT;",
          "1010:   }",
          "1014:   if (err) {",
          "",
          "[Removed Lines]",
          "1008:     log(\"cannot read signature of OCHK\\n\");",
          "1011:   log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "",
          "[Added Lines]",
          "1010:     mylog(\"cannot read signature of OCHK\\n\");",
          "1013:   mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1032:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"OHDR\", 4)) {",
          "1034:     return MYSOFA_INVALID_FORMAT;",
          "1035:   }",
          "1038:   if (fgetc(reader->fhd) != 2) {",
          "1040:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "1041:   }",
          "",
          "[Removed Lines]",
          "1033:     log(\"cannot read signature of data object\\n\");",
          "1036:   log(\"%08\" PRIX64 \" %.4s\\n\", dataobject->address, buf);",
          "1039:     log(\"object OHDR must have version 2\\n\");",
          "",
          "[Added Lines]",
          "1035:     mylog(\"cannot read signature of data object\\n\");",
          "1038:   mylog(\"%08\" PRIX64 \" %.4s\\n\", dataobject->address, buf);",
          "1041:     mylog(\"object OHDR must have version 2\\n\");",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1048:   }",
          "1052:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "1053:   }",
          "",
          "[Removed Lines]",
          "1051:     log(\"OHDR: unsupported flags bit 4: %02X\\n\", dataobject->flags);",
          "",
          "[Added Lines]",
          "1053:     mylog(\"OHDR: unsupported flags bit 4: %02X\\n\", dataobject->flags);",
          "",
          "---------------"
        ],
        "src/hdf/fractalhead.c||src/hdf/fractalhead.c": [
          "File: src/hdf/fractalhead.c -> src/hdf/fractalhead.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   UNUSED(block_size);",
          "32:   UNUSED(block_offset);",
          "35:     return MYSOFA_INVALID_FORMAT;",
          "36:   else",
          "37:     reader->recursive_counter++;",
          "40:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FHDB\", 4)) {",
          "42:     return MYSOFA_INVALID_FORMAT;",
          "43:   }",
          "45:       reader->recursive_counter);",
          "47:   if (fgetc(reader->fhd) != 0) {",
          "49:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "50:   }",
          "",
          "[Removed Lines]",
          "34:   if (reader->recursive_counter >= 10)",
          "41:     log(\"cannot read signature of fractal heap indirect block\\n\");",
          "44:   log(\"%08\" PRIX64 \" %.4s stack %d\\n\", (uint64_t)ftell(reader->fhd) - 4, buf,",
          "48:     log(\"object FHDB must have version 0\\n\");",
          "",
          "[Added Lines]",
          "34:   if (reader->recursive_counter >= 20) {",
          "35:     mylog(\"recursive problem\");",
          "37:   }",
          "43:     mylog(\"cannot read signature of fractal heap indirect block\\n\");",
          "46:   mylog(\"%08\" PRIX64 \" %.4s stack %d\\n\", (uint64_t)ftell(reader->fhd) - 4, buf,",
          "50:     mylog(\"object FHDB must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:   else",
          "67:     length_size = ceilf(log2f(fractalheap->maximum_size) / 8);",
          "",
          "[Removed Lines]",
          "69:   log(\" %d %\" PRIu64 \" %d\\n\", size, block_offset, offset_size);",
          "",
          "[Added Lines]",
          "71:   mylog(\" %d %\" PRIu64 \" %d\\n\", size, block_offset, offset_size);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:     if (offset > 0x10000000 || length > 0x10000000)",
          "92:       return MYSOFA_UNSUPPORTED_FORMAT;",
          "95:         ftell(reader->fhd));",
          "",
          "[Removed Lines]",
          "94:     log(\" %d %4\" PRIX64 \" %\" PRIX64 \" %08lX\\n\", typeandversion, offset, length,",
          "",
          "[Added Lines]",
          "96:     mylog(\" %d %4\" PRIX64 \" %\" PRIX64 \" %08lX\\n\", typeandversion, offset, length,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:       if (readValue(reader, 5) != 0x0000040008) {",
          "105:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "106:       }",
          "",
          "[Removed Lines]",
          "104:         log(\"FHDB type 3 unsupported values\");",
          "",
          "[Added Lines]",
          "106:         mylog(\"FHDB type 3 unsupported values\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "114:       name[length] = 0;",
          "116:       if (readValue(reader, 4) != 0x00000013) {",
          "118:         free(name);",
          "119:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "120:       }",
          "",
          "[Removed Lines]",
          "117:         log(\"FHDB type 3 unsupported values\");",
          "",
          "[Added Lines]",
          "119:         mylog(\"FHDB type 3 unsupported values\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "147:         }",
          "148:         strcpy(value, \"\");",
          "149:       } else {",
          "151:         free(name);",
          "153:         return MYSOFA_OK;",
          "154:       }",
          "157:       attr = malloc(sizeof(struct MYSOFA_ATTRIBUTE));",
          "158:       attr->name = name;",
          "",
          "[Removed Lines]",
          "150:         log(\"FHDB type 3 unsupported values: %12\" PRIX64 \"\\n\", unknown);",
          "155:       log(\" %s = %s\\n\", name, value);",
          "",
          "[Added Lines]",
          "152:         mylog(\"FHDB type 3 unsupported values: %12\" PRIX64 \"\\n\", unknown);",
          "157:       mylog(\" %s = %s\\n\", name, value);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "167:       unknown = readValue(reader, 6);",
          "168:       if (unknown) {",
          "170:         return MYSOFA_UNSUPPORTED_FORMAT;",
          "171:       }",
          "",
          "[Removed Lines]",
          "169:         log(\"FHDB type 1 unsupported values\\n\");",
          "",
          "[Added Lines]",
          "171:         mylog(\"FHDB type 1 unsupported values\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "186:       heap_header_address =",
          "187:           readValue(reader, reader->superblock.size_of_offsets);",
          "190:           \"\\n\",",
          "191:           length, name, heap_header_address);",
          "",
          "[Removed Lines]",
          "189:       log(\"fractal head type 1 length %4\" PRIX64 \" name %s address %\" PRIX64",
          "",
          "[Added Lines]",
          "191:       mylog(\"fractal head type 1 length %4\" PRIX64 \" name %s address %\" PRIX64",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "220:     } else if (typeandversion != 0) {",
          "224:       return MYSOFA_OK;",
          "225:     }",
          "",
          "[Removed Lines]",
          "222:       log(\"fractal head unknown type %d\\n\", typeandversion);",
          "",
          "[Added Lines]",
          "224:       mylog(\"fractal head unknown type %d\\n\", typeandversion);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "254:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FHIB\", 4)) {",
          "256:     return MYSOFA_INVALID_FORMAT;",
          "257:   }",
          "260:   if (fgetc(reader->fhd) != 0) {",
          "262:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "263:   }",
          "",
          "[Removed Lines]",
          "255:     log(\"cannot read signature of fractal heap indirect block\\n\");",
          "258:   log(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "261:     log(\"object FHIB must have version 0\\n\");",
          "",
          "[Added Lines]",
          "257:     mylog(\"cannot read signature of fractal heap indirect block\\n\");",
          "260:   mylog(\"%08\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "263:     mylog(\"object FHIB must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "269:   block_offset = readValue(reader, size);",
          "271:   if (block_offset) {",
          "273:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "274:   }",
          "",
          "[Removed Lines]",
          "272:     log(\"FHIB block offset is not 0\\n\");",
          "",
          "[Added Lines]",
          "274:     mylog(\"FHIB block offset is not 0\\n\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "302:       size_filtered = readValue(reader, reader->superblock.size_of_lengths);",
          "303:       filter_mask = readValue(reader, 4);",
          "304:     }",
          "306:     if (validAddress(reader, child_direct_block)) {",
          "307:       store = ftell(reader->fhd);",
          "308:       if (fseek(reader->fhd, child_direct_block, SEEK_SET) < 0)",
          "",
          "[Removed Lines]",
          "305:     log(\">> %d %\" PRIX64 \" %d\\n\", k, child_direct_block, size);",
          "",
          "[Added Lines]",
          "307:     mylog(\">> %d %\" PRIX64 \" %d\\n\", k, child_direct_block, size);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "366:   if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"FRHP\", 4)) {",
          "368:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "369:   }",
          "372:   if (fgetc(reader->fhd) != 0) {",
          "374:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "375:   }",
          "",
          "[Removed Lines]",
          "367:     log(\"cannot read signature of fractal heap\\n\");",
          "370:   log(\"%\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "373:     log(\"object fractal heap must have version 0\\n\");",
          "",
          "[Added Lines]",
          "369:     mylog(\"cannot read signature of fractal heap\\n\");",
          "372:   mylog(\"%\" PRIX64 \" %.4s\\n\", (uint64_t)ftell(reader->fhd) - 4, buf);",
          "375:     mylog(\"object fractal heap must have version 0\\n\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "443:   }",
          "445:   if (fractalheap->number_huge_objects) {",
          "447:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "448:   }",
          "450:   if (fractalheap->number_tiny_objects) {",
          "452:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "453:   }",
          "",
          "[Removed Lines]",
          "446:     log(\"cannot handle huge objects\\n\");",
          "451:     log(\"cannot handle tiny objects\\n\");",
          "",
          "[Added Lines]",
          "448:     mylog(\"cannot handle huge objects\\n\");",
          "453:     mylog(\"cannot handle tiny objects\\n\");",
          "",
          "---------------"
        ],
        "src/hdf/gcol.c||src/hdf/gcol.c": [
          "File: src/hdf/gcol.c -> src/hdf/gcol.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:  if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"GCOL\", 4)) {",
          "28:   return MYSOFA_INVALID_FORMAT;",
          "29:  }",
          "31:  if (fgetc(reader->fhd) != 1) {",
          "33:   return MYSOFA_INVALID_FORMAT;",
          "34:  }",
          "35:  if (fgetc(reader->fhd) < 0 || fgetc(reader->fhd) < 0",
          "",
          "[Removed Lines]",
          "27:   log(\"cannot read signature of global heap collection\\n\");",
          "32:   log(\"object GCOL must have version 1\\n\");",
          "",
          "[Added Lines]",
          "27:   mylog(\"cannot read signature of global heap collection\\n\");",
          "32:   mylog(\"object GCOL must have version 1\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62:   }",
          "63:   gcol->value = readValue(reader, gcol->object_size);",
          "64:   gcol->address = address;",
          "66:     gcol->object_size, gcol->value);",
          "68:   gcol->next = reader->gcol;",
          "69:   reader->gcol = gcol;",
          "70:  }",
          "74:  return MYSOFA_OK;",
          "75: }",
          "",
          "[Removed Lines]",
          "65:   log(\" GCOL object %d size %\" PRIu64 \" value %08\" PRIX64 \"\\n\", gcol->heap_object_index,",
          "",
          "[Added Lines]",
          "65:   mylog(\" GCOL object %d size %\" PRIu64 \" value %08\" PRIX64 \"\\n\", gcol->heap_object_index,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:    p = p->next;",
          "98:   }",
          "99:   if (!p) {",
          "101:    return MYSOFA_INVALID_FORMAT;",
          "102:   }",
          "103:  }",
          "",
          "[Removed Lines]",
          "100:    log(\"unknown gcol %\" PRIX64 \" %d\\n\",gcol,reference);",
          "",
          "[Added Lines]",
          "100:    mylog(\"unknown gcol %\" PRIX64 \" %d\\n\",gcol,reference);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "110: gcol = reader->gcol;",
          "111: for (;;) {",
          "112:  if (gcol == NULL) {",
          "114:   return MYSOFA_INVALID_FORMAT;",
          "115:  }",
          "116:  if (gcol->heap_object_index == reference) {",
          "118:   break;",
          "119:   pos = ftell(reader->fhd);",
          "120:   fseek(reader->fhd, gcol->object_pos, SEEK_SET);",
          "",
          "[Removed Lines]",
          "113:   log(\"reference unknown!\\n\");",
          "117:   log(\"found reference at %LX\\n\", gcol->object_pos);",
          "",
          "[Added Lines]",
          "113:   mylog(\"reference unknown!\\n\");",
          "117:   mylog(\"found reference at %LX\\n\", gcol->object_pos);",
          "",
          "---------------"
        ],
        "src/hdf/gunzip.c||src/hdf/gunzip.c": [
          "File: src/hdf/gunzip.c -> src/hdf/gunzip.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:  inflateEnd(&stream);",
          "29:  if (err && err != Z_STREAM_END) {",
          "31:   return err;",
          "32:  }",
          "",
          "[Removed Lines]",
          "30:   log(\" gunzip error %d %s\\n\",err,stream.msg);",
          "",
          "[Added Lines]",
          "30:   mylog(\" gunzip error %d %s\\n\",err,stream.msg);",
          "",
          "---------------"
        ],
        "src/hdf/reader.h||src/hdf/reader.h": [
          "File: src/hdf/reader.h -> src/hdf/reader.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"../hrtf/mysofa.h\"",
          "14: #ifdef VDEBUG",
          "16: #else",
          "18: #endif",
          "20: #define UNUSED(x) (void)(x)",
          "",
          "[Removed Lines]",
          "15: #define log(...) {fprintf (stderr, \"%s:%d: \", __FILE__, __LINE__);fprintf (stderr, __VA_ARGS__);}",
          "17: #define log(...)",
          "",
          "[Added Lines]",
          "15: #define mylog(...) {fprintf (stderr, \"%s:%d: \", __FILE__, __LINE__);fprintf (stderr, __VA_ARGS__);}",
          "17: #define mylog(...)",
          "",
          "---------------"
        ],
        "src/hdf/superblock.c||src/hdf/superblock.c": [
          "File: src/hdf/superblock.c -> src/hdf/superblock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26:   if (superblock->size_of_offsets < 2 || superblock->size_of_offsets > 8 ||",
          "27:       superblock->size_of_lengths < 2 || superblock->size_of_lengths > 8) {",
          "29:         superblock->size_of_offsets, superblock->size_of_lengths);",
          "30:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "31:   }",
          "",
          "[Removed Lines]",
          "28:     log(\"size of offsets and length is invalid: %d %d\\n\",",
          "",
          "[Added Lines]",
          "28:     mylog(\"size of offsets and length is invalid: %d %d\\n\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:       readValue(reader, superblock->size_of_offsets);",
          "41:   if (superblock->base_address != 0) {",
          "43:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "44:   }",
          "",
          "[Removed Lines]",
          "42:     log(\"base address is not null\\n\");",
          "",
          "[Added Lines]",
          "42:     mylog(\"base address is not null\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:     return errno;",
          "49:   if (superblock->end_of_file_address != ftell(reader->fhd)) {",
          "51:     return MYSOFA_INVALID_FORMAT;",
          "52:   }",
          "",
          "[Removed Lines]",
          "50:     log(\"file size mismatch\\n\");",
          "",
          "[Added Lines]",
          "50:     mylog(\"file size mismatch\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "57:   if (fseek(reader->fhd, superblock->root_group_object_header_address,",
          "58:             SEEK_SET)) {",
          "60:         superblock->root_group_object_header_address);",
          "61:     return errno;",
          "62:   }",
          "",
          "[Removed Lines]",
          "59:     log(\"cannot seek to first object at %\" PRId64 \"\\n\",",
          "",
          "[Added Lines]",
          "59:     mylog(\"cannot seek to first object at %\" PRId64 \"\\n\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "90:   if (superblock->size_of_offsets < 2 || superblock->size_of_offsets > 8 ||",
          "91:       superblock->size_of_lengths < 2 || superblock->size_of_lengths > 8) {",
          "93:         superblock->size_of_offsets, superblock->size_of_lengths);",
          "94:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "95:   }",
          "",
          "[Removed Lines]",
          "92:     log(\"size of offsets and length is invalid: %d %d\\n\",",
          "",
          "[Added Lines]",
          "92:     mylog(\"size of offsets and length is invalid: %d %d\\n\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "106:   superblock->base_address = readValue(reader, superblock->size_of_offsets);",
          "107:   if (superblock->base_address != 0) {",
          "109:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "110:   }",
          "",
          "[Removed Lines]",
          "108:     log(\"base address is not null\\n\");",
          "",
          "[Added Lines]",
          "108:     mylog(\"base address is not null\\n\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "126:   if (readValue(reader, 4) != 0) {",
          "128:     return MYSOFA_UNSUPPORTED_FORMAT;",
          "129:   }",
          "",
          "[Removed Lines]",
          "127:     log(\"cache type must be 0\\n\");",
          "",
          "[Added Lines]",
          "127:     mylog(\"cache type must be 0\\n\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "132:     return errno;",
          "134:   if (superblock->end_of_file_address != ftell(reader->fhd)) {",
          "136:   }",
          "140:   if (fseek(reader->fhd, superblock->root_group_object_header_address,",
          "141:             SEEK_SET)) {",
          "143:         superblock->root_group_object_header_address);",
          "144:     return errno;",
          "145:   }",
          "",
          "[Removed Lines]",
          "135:     log(\"file size mismatch\\n\");",
          "142:     log(\"cannot seek to first object at %\" PRId64 \"\\n\",",
          "",
          "[Added Lines]",
          "135:     mylog(\"file size mismatch\\n\");",
          "142:     mylog(\"cannot seek to first object at %\" PRId64 \"\\n\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "155:   if (fread(buf, 1, 8, reader->fhd) != 8 ||",
          "156:       strncmp(\"\\211HDF\\r\\n\\032\\n\", buf, 8)) {",
          "158:     return MYSOFA_INVALID_FORMAT;",
          "159:   }",
          "",
          "[Removed Lines]",
          "157:     log(\"file does not have correct signature\");",
          "",
          "[Added Lines]",
          "157:     mylog(\"file does not have correct signature\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "169:   case 3:",
          "170:     return superblockRead2or3(reader, superblock);",
          "171:   default:",
          "173:     return MYSOFA_INVALID_FORMAT;",
          "174:   }",
          "175: }",
          "",
          "[Removed Lines]",
          "172:     log(\"superblock must have version 0, 1, 2, or 3 but has %d\\n\", version);",
          "",
          "[Added Lines]",
          "172:     mylog(\"superblock must have version 0, 1, 2, or 3 but has %d\\n\", version);",
          "",
          "---------------"
        ],
        "src/hrtf/reader.c||src/hrtf/reader.c": [
          "File: src/hrtf/reader.c -> src/hrtf/reader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   return err;",
          "73:  while (attr) {",
          "76:   if (!strcmp(attr->name, \"NAME\")",
          "77:     && attr->value && !strncmp(attr->value,",
          "",
          "[Removed Lines]",
          "74:   log(\" %s=%s\\n\",attr->name,attr->value);",
          "",
          "[Added Lines]",
          "74:   mylog(\" %s=%s\\n\",attr->name,attr->value);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:    }",
          "84:    p++;",
          "87:    return MYSOFA_OK;",
          "88:   }",
          "89:   attr = attr->next;",
          "",
          "[Removed Lines]",
          "86:    log(\"NETCDF DIM %u\\n\",*dim);",
          "",
          "[Added Lines]",
          "86:    mylog(\"NETCDF DIM %u\\n\",*dim);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "99:  struct MYSOFA_ATTRIBUTE *attr = dataobject->attributes;",
          "100:  while (attr) {",
          "103:   attr = attr->next;",
          "104:  }",
          "",
          "[Removed Lines]",
          "101:   log(\" %s=%s\\n\",attr->name,attr->value);",
          "",
          "[Added Lines]",
          "101:   mylog(\" %s=%s\\n\",attr->name,attr->value);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "172:    case 'S':",
          "174:    default:",
          "176:     goto error;",
          "177:    }",
          "178:    if (*err)",
          "",
          "[Removed Lines]",
          "175:     log(\"UNKNOWN SOFA VARIABLE %s\", dir->dataobject.name);",
          "",
          "[Added Lines]",
          "175:     mylog(\"UNKNOWN SOFA VARIABLE %s\", dir->dataobject.name);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:  }",
          "184:  if (dimensionflags != 0x3f || hrtf->I != 1 || hrtf->C != 3) {",
          "186:   goto error;",
          "187:  }",
          "",
          "[Removed Lines]",
          "185:   log(\"dimensions are missing or wrong\\n\");",
          "",
          "[Added Lines]",
          "185:   mylog(\"dimensions are missing or wrong\\n\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "190:  while (dir) {",
          "192:   if(!dir->dataobject.name) {",
          "194:   }",
          "195:   else if (!strcmp(dir->dataobject.name, \"ListenerPosition\")) {",
          "",
          "[Removed Lines]",
          "193:    log(\"SOFA VARIABLE IS NULL.\\n\");",
          "",
          "[Added Lines]",
          "193:    mylog(\"SOFA VARIABLE IS NULL.\\n\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "213:   } else {",
          "214:    if (!(dir->dataobject.name[0] && !dir->dataobject.name[1]))",
          "216:   }",
          "217:   dir = dir->next;",
          "218:  }",
          "",
          "[Removed Lines]",
          "215:     log(\"UNKNOWN SOFA VARIABLE %s.\\n\", dir->dataobject.name);",
          "",
          "[Added Lines]",
          "215:     mylog(\"UNKNOWN SOFA VARIABLE %s.\\n\", dir->dataobject.name);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "238:   reader.fhd = stdin;",
          "240:  if (!reader.fhd) {",
          "243:   return NULL;",
          "244:  }",
          "",
          "[Removed Lines]",
          "241:   log(\"cannot open file %s\\n\", filename);",
          "",
          "[Added Lines]",
          "241:   mylog(\"cannot open file %s\\n\", filename);",
          "",
          "---------------"
        ]
      }
    }
  ]
}