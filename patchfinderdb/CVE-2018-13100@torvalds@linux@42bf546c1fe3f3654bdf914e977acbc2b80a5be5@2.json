{
  "cve_id": "CVE-2018-13100",
  "cve_desc": "An issue was discovered in fs/f2fs/super.c in the Linux kernel through 4.17.3, which does not properly validate secs_per_zone in a corrupted f2fs image, as demonstrated by a divide-by-zero error.",
  "repo": "torvalds/linux",
  "patch_hash": "42bf546c1fe3f3654bdf914e977acbc2b80a5be5",
  "patch_info": {
    "commit_hash": "42bf546c1fe3f3654bdf914e977acbc2b80a5be5",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/42bf546c1fe3f3654bdf914e977acbc2b80a5be5",
    "files": [
      "fs/f2fs/super.c"
    ],
    "message": "f2fs: fix to do sanity check with secs_per_zone\n\nAs Wen Xu reported in below link:\n\nhttps://bugzilla.kernel.org/show_bug.cgi?id=200183\n\n- Overview\nDivide zero in reset_curseg() when mounting a crafted f2fs image\n\n- Reproduce\n\n- Kernel message\n[  588.281510] divide error: 0000 [#1] SMP KASAN PTI\n[  588.282701] CPU: 0 PID: 1293 Comm: mount Not tainted 4.18.0-rc1+ #4\n[  588.284000] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Ubuntu-1.8.2-1ubuntu1 04/01/2014\n[  588.286178] RIP: 0010:reset_curseg+0x94/0x1a0\n[  588.298166] RSP: 0018:ffff8801e88d7940 EFLAGS: 00010246\n[  588.299360] RAX: 0000000000000014 RBX: ffff8801e1d46d00 RCX: ffffffffb88bf60b\n[  588.300809] RDX: 0000000000000000 RSI: dffffc0000000000 RDI: ffff8801e1d46d64\n[  588.305272] R13: 0000000000000000 R14: 0000000000000014 R15: 0000000000000000\n[  588.306822] FS:  00007fad85008840(0000) GS:ffff8801f6e00000(0000) knlGS:0000000000000000\n[  588.308456] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  588.309623] CR2: 0000000001705078 CR3: 00000001f30f8000 CR4: 00000000000006f0\n[  588.311085] Call Trace:\n[  588.311637]  f2fs_build_segment_manager+0x103f/0x3410\n[  588.316136]  ? f2fs_commit_super+0x1b0/0x1b0\n[  588.317031]  ? set_blocksize+0x90/0x140\n[  588.319473]  f2fs_mount+0x15/0x20\n[  588.320166]  mount_fs+0x60/0x1a0\n[  588.320847]  ? alloc_vfsmnt+0x309/0x360\n[  588.321647]  vfs_kern_mount+0x6b/0x1a0\n[  588.322432]  do_mount+0x34a/0x18c0\n[  588.323175]  ? strndup_user+0x46/0x70\n[  588.323937]  ? copy_mount_string+0x20/0x20\n[  588.324793]  ? memcg_kmem_put_cache+0x1b/0xa0\n[  588.325702]  ? kasan_check_write+0x14/0x20\n[  588.326562]  ? _copy_from_user+0x6a/0x90\n[  588.327375]  ? memdup_user+0x42/0x60\n[  588.328118]  ksys_mount+0x83/0xd0\n[  588.328808]  __x64_sys_mount+0x67/0x80\n[  588.329607]  do_syscall_64+0x78/0x170\n[  588.330400]  entry_SYSCALL_64_after_hwframe+0x44/0xa9\n[  588.331461] RIP: 0033:0x7fad848e8b9a\n[  588.336022] RSP: 002b:00007ffd7c5b6be8 EFLAGS: 00000206 ORIG_RAX: 00000000000000a5\n[  588.337547] RAX: ffffffffffffffda RBX: 00000000016f8030 RCX: 00007fad848e8b9a\n[  588.338999] RDX: 00000000016f8210 RSI: 00000000016f9f30 RDI: 0000000001700ec0\n[  588.340442] RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000013\n[  588.341887] R10: 00000000c0ed0000 R11: 0000000000000206 R12: 0000000001700ec0\n[  588.343341] R13: 00000000016f8210 R14: 0000000000000000 R15: 0000000000000003\n[  588.354891] ---[ end trace 4ce02f25ff7d3df5 ]---\n[  588.355862] RIP: 0010:reset_curseg+0x94/0x1a0\n[  588.360742] RSP: 0018:ffff8801e88d7940 EFLAGS: 00010246\n[  588.361812] RAX: 0000000000000014 RBX: ffff8801e1d46d00 RCX: ffffffffb88bf60b\n[  588.363485] RDX: 0000000000000000 RSI: dffffc0000000000 RDI: ffff8801e1d46d64\n[  588.365213] RBP: ffff8801e88d7968 R08: ffffed003c32266f R09: ffffed003c32266f\n[  588.366661] R10: 0000000000000001 R11: ffffed003c32266e R12: ffff8801f0337700\n[  588.368110] R13: 0000000000000000 R14: 0000000000000014 R15: 0000000000000000\n[  588.370057] FS:  00007fad85008840(0000) GS:ffff8801f6e00000(0000) knlGS:0000000000000000\n[  588.372099] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[  588.373291] CR2: 0000000001705078 CR3: 00000001f30f8000 CR4: 00000000000006f0\n\n- Location\nhttps://elixir.bootlin.com/linux/latest/source/fs/f2fs/segment.c#L2147\n        curseg->zone = GET_ZONE_FROM_SEG(sbi, curseg->segno);\n\nIf secs_per_zone is corrupted due to fuzzing test, it will cause divide\nzero operation when using GET_ZONE_FROM_SEG macro, so we should do more\nsanity check with secs_per_zone during mount to avoid this issue.\n\nSigned-off-by: Chao Yu <yuchao0@huawei.com>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>",
    "before_after_code_files": [
      "fs/f2fs/super.c||fs/f2fs/super.c"
    ]
  },
  "patch_diff": {
    "fs/f2fs/super.c||fs/f2fs/super.c": [
      "File: fs/f2fs/super.c -> fs/f2fs/super.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2227:   return 1;",
      "2228:  }",
      "2231:   f2fs_msg(sb, KERN_INFO,",
      "2233:    secs_per_zone, total_sections);",
      "2234:   return 1;",
      "2235:  }",
      "",
      "[Removed Lines]",
      "2230:  if (secs_per_zone > total_sections) {",
      "2232:    \"Wrong secs_per_zone (%u > %u)\",",
      "",
      "[Added Lines]",
      "2230:  if (secs_per_zone > total_sections || !secs_per_zone) {",
      "2232:    \"Wrong secs_per_zone / total_sections (%u, %u)\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a1933c09ef84c2fd187e05b560ddc6e1267d6508",
      "candidate_info": {
        "commit_hash": "a1933c09ef84c2fd187e05b560ddc6e1267d6508",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a1933c09ef84c2fd187e05b560ddc6e1267d6508",
        "files": [
          "fs/f2fs/sysfs.c"
        ],
        "message": "f2fs: avoid potential deadlock in f2fs_sbi_store\n\n[  155.018460] ======================================================\n[  155.021431] WARNING: possible circular locking dependency detected\n[  155.024339] 4.18.0-rc3+ #5 Tainted: G           OE\n[  155.026879] ------------------------------------------------------\n[  155.029783] umount/2901 is trying to acquire lock:\n[  155.032187] 00000000c4282f1f (kn->count#130){++++}, at: kernfs_remove+0x1f/0x30\n[  155.035439]\n[  155.035439] but task is already holding lock:\n[  155.038892] 0000000056e4307b (&type->s_umount_key#41){++++}, at: deactivate_super+0x33/0x50\n[  155.042602]\n[  155.042602] which lock already depends on the new lock.\n[  155.042602]\n[  155.047465]\n[  155.047465] the existing dependency chain (in reverse order) is:\n[  155.051354]\n[  155.051354] -> #1 (&type->s_umount_key#41){++++}:\n[  155.054768]        f2fs_sbi_store+0x61/0x460 [f2fs]\n[  155.057083]        kernfs_fop_write+0x113/0x1a0\n[  155.059277]        __vfs_write+0x36/0x180\n[  155.061250]        vfs_write+0xbe/0x1b0\n[  155.063179]        ksys_write+0x55/0xc0\n[  155.065068]        do_syscall_64+0x60/0x1b0\n[  155.067071]        entry_SYSCALL_64_after_hwframe+0x49/0xbe\n[  155.069529]\n[  155.069529] -> #0 (kn->count#130){++++}:\n[  155.072421]        __kernfs_remove+0x26f/0x2e0\n[  155.074452]        kernfs_remove+0x1f/0x30\n[  155.076342]        kobject_del.part.5+0xe/0x40\n[  155.078354]        f2fs_put_super+0x12d/0x290 [f2fs]\n[  155.080500]        generic_shutdown_super+0x6c/0x110\n[  155.082655]        kill_block_super+0x21/0x50\n[  155.084634]        kill_f2fs_super+0x9c/0xc0 [f2fs]\n[  155.086726]        deactivate_locked_super+0x3f/0x70\n[  155.088826]        cleanup_mnt+0x3b/0x70\n[  155.090584]        task_work_run+0x93/0xc0\n[  155.092367]        exit_to_usermode_loop+0xf0/0x100\n[  155.094466]        do_syscall_64+0x162/0x1b0\n[  155.096312]        entry_SYSCALL_64_after_hwframe+0x49/0xbe\n[  155.098603]\n[  155.098603] other info that might help us debug this:\n[  155.098603]\n[  155.102418]  Possible unsafe locking scenario:\n[  155.102418]\n[  155.105134]        CPU0                    CPU1\n[  155.107037]        ----                    ----\n[  155.108910]   lock(&type->s_umount_key#41);\n[  155.110674]                                lock(kn->count#130);\n[  155.113010]                                lock(&type->s_umount_key#41);\n[  155.115608]   lock(kn->count#130);\n\nReviewed-by: Chao Yu <yuchao0@huawei.com>\nSigned-off-by: Jaegeuk Kim <jaegeuk@kernel.org>",
        "before_after_code_files": [
          "fs/f2fs/sysfs.c||fs/f2fs/sysfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/f2fs/sysfs.c||fs/f2fs/sysfs.c": [
          "File: fs/f2fs/sysfs.c -> fs/f2fs/sysfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:  bool gc_entry = (!strcmp(a->attr.name, \"gc_urgent\") ||",
          "287:      a->struct_type == GC_THREAD);",
          "291:  ret = __sbi_store(a, sbi, buf, count);",
          "292:  if (gc_entry)",
          "293:   up_read(&sbi->sb->s_umount);",
          "",
          "[Removed Lines]",
          "289:  if (gc_entry)",
          "290:   down_read(&sbi->sb->s_umount);",
          "",
          "[Added Lines]",
          "289:  if (gc_entry) {",
          "290:   if (!down_read_trylock(&sbi->sb->s_umount))",
          "291:    return -EAGAIN;",
          "292:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfd40eaff5abb9f62c8ef94ca13ed0d94a560f10",
      "candidate_info": {
        "commit_hash": "bfd40eaff5abb9f62c8ef94ca13ed0d94a560f10",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/bfd40eaff5abb9f62c8ef94ca13ed0d94a560f10",
        "files": [
          "drivers/char/mem.c",
          "fs/exec.c",
          "include/linux/mm.h",
          "mm/mmap.c",
          "mm/nommu.c"
        ],
        "message": "mm: fix vma_is_anonymous() false-positives\n\nvma_is_anonymous() relies on ->vm_ops being NULL to detect anonymous\nVMA.  This is unreliable as ->mmap may not set ->vm_ops.\n\nFalse-positive vma_is_anonymous() may lead to crashes:\n\n\tnext ffff8801ce5e7040 prev ffff8801d20eca50 mm ffff88019c1e13c0\n\tprot 27 anon_vma ffff88019680cdd8 vm_ops 0000000000000000\n\tpgoff 0 file ffff8801b2ec2d00 private_data 0000000000000000\n\tflags: 0xff(read|write|exec|shared|mayread|maywrite|mayexec|mayshare)\n\t------------[ cut here ]------------\n\tkernel BUG at mm/memory.c:1422!\n\tinvalid opcode: 0000 [#1] SMP KASAN\n\tCPU: 0 PID: 18486 Comm: syz-executor3 Not tainted 4.18.0-rc3+ #136\n\tHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google\n\t01/01/2011\n\tRIP: 0010:zap_pmd_range mm/memory.c:1421 [inline]\n\tRIP: 0010:zap_pud_range mm/memory.c:1466 [inline]\n\tRIP: 0010:zap_p4d_range mm/memory.c:1487 [inline]\n\tRIP: 0010:unmap_page_range+0x1c18/0x2220 mm/memory.c:1508\n\tCall Trace:\n\t unmap_single_vma+0x1a0/0x310 mm/memory.c:1553\n\t zap_page_range_single+0x3cc/0x580 mm/memory.c:1644\n\t unmap_mapping_range_vma mm/memory.c:2792 [inline]\n\t unmap_mapping_range_tree mm/memory.c:2813 [inline]\n\t unmap_mapping_pages+0x3a7/0x5b0 mm/memory.c:2845\n\t unmap_mapping_range+0x48/0x60 mm/memory.c:2880\n\t truncate_pagecache+0x54/0x90 mm/truncate.c:800\n\t truncate_setsize+0x70/0xb0 mm/truncate.c:826\n\t simple_setattr+0xe9/0x110 fs/libfs.c:409\n\t notify_change+0xf13/0x10f0 fs/attr.c:335\n\t do_truncate+0x1ac/0x2b0 fs/open.c:63\n\t do_sys_ftruncate+0x492/0x560 fs/open.c:205\n\t __do_sys_ftruncate fs/open.c:215 [inline]\n\t __se_sys_ftruncate fs/open.c:213 [inline]\n\t __x64_sys_ftruncate+0x59/0x80 fs/open.c:213\n\t do_syscall_64+0x1b9/0x820 arch/x86/entry/common.c:290\n\t entry_SYSCALL_64_after_hwframe+0x49/0xbe\n\nReproducer:\n\n\t#include <stdio.h>\n\t#include <stddef.h>\n\t#include <stdint.h>\n\t#include <stdlib.h>\n\t#include <string.h>\n\t#include <sys/types.h>\n\t#include <sys/stat.h>\n\t#include <sys/ioctl.h>\n\t#include <sys/mman.h>\n\t#include <unistd.h>\n\t#include <fcntl.h>\n\n\t#define KCOV_INIT_TRACE\t\t\t_IOR('c', 1, unsigned long)\n\t#define KCOV_ENABLE\t\t\t_IO('c', 100)\n\t#define KCOV_DISABLE\t\t\t_IO('c', 101)\n\t#define COVER_SIZE\t\t\t(1024<<10)\n\n\t#define KCOV_TRACE_PC  0\n\t#define KCOV_TRACE_CMP 1\n\n\tint main(int argc, char **argv)\n\t{\n\t\tint fd;\n\t\tunsigned long *cover;\n\n\t\tsystem(\"mount -t debugfs none /sys/kernel/debug\");\n\t\tfd = open(\"/sys/kernel/debug/kcov\", O_RDWR);\n\t\tioctl(fd, KCOV_INIT_TRACE, COVER_SIZE);\n\t\tcover = mmap(NULL, COVER_SIZE * sizeof(unsigned long),\n\t\t\t\tPROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);\n\t\tmunmap(cover, COVER_SIZE * sizeof(unsigned long));\n\t\tcover = mmap(NULL, COVER_SIZE * sizeof(unsigned long),\n\t\t\t\tPROT_READ | PROT_WRITE, MAP_PRIVATE, fd, 0);\n\t\tmemset(cover, 0, COVER_SIZE * sizeof(unsigned long));\n\t\tftruncate(fd, 3UL << 20);\n\t\treturn 0;\n\t}\n\nThis can be fixed by assigning anonymous VMAs own vm_ops and not relying\non it being NULL.\n\nIf ->mmap() failed to set ->vm_ops, mmap_region() will set it to\ndummy_vm_ops.  This way we will have non-NULL ->vm_ops for all VMAs.\n\nLink: http://lkml.kernel.org/r/20180724121139.62570-4-kirill.shutemov@linux.intel.com\nSigned-off-by: Kirill A. Shutemov <kirill.shutemov@linux.intel.com>\nReported-by: syzbot+3f84280d52be9b7083cc@syzkaller.appspotmail.com\nAcked-by: Linus Torvalds <torvalds@linux-foundation.org>\nReviewed-by: Andrew Morton <akpm@linux-foundation.org>\nCc: Dmitry Vyukov <dvyukov@google.com>\nCc: Oleg Nesterov <oleg@redhat.com>\nCc: Andrea Arcangeli <aarcange@redhat.com>\nCc: <stable@vger.kernel.org>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "drivers/char/mem.c||drivers/char/mem.c",
          "fs/exec.c||fs/exec.c",
          "include/linux/mm.h||include/linux/mm.h",
          "mm/mmap.c||mm/mmap.c",
          "mm/nommu.c||mm/nommu.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/char/mem.c||drivers/char/mem.c": [
          "File: drivers/char/mem.c -> drivers/char/mem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "708: #endif",
          "709:  if (vma->vm_flags & VM_SHARED)",
          "710:   return shmem_zero_setup(vma);",
          "711:  return 0;",
          "712: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "711:  vma_set_anonymous(vma);",
          "",
          "---------------"
        ],
        "fs/exec.c||fs/exec.c": [
          "File: fs/exec.c -> fs/exec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:  bprm->vma = vma = vm_area_alloc(mm);",
          "294:  if (!vma)",
          "295:   return -ENOMEM;",
          "297:  if (down_write_killable(&mm->mmap_sem)) {",
          "298:   err = -EINTR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "296:  vma_set_anonymous(vma);",
          "",
          "---------------"
        ],
        "include/linux/mm.h||include/linux/mm.h": [
          "File: include/linux/mm.h -> include/linux/mm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "455: static inline void vma_init(struct vm_area_struct *vma, struct mm_struct *mm)",
          "456: {",
          "457:  vma->vm_mm = mm;",
          "458:  INIT_LIST_HEAD(&vma->anon_vma_chain);",
          "459: }",
          "461: struct mmu_gather;",
          "462: struct inode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457:  static const struct vm_operations_struct dummy_vm_ops = {};",
          "460:  vma->vm_ops = &dummy_vm_ops;",
          "464: static inline void vma_set_anonymous(struct vm_area_struct *vma)",
          "465: {",
          "466:  vma->vm_ops = NULL;",
          "467: }",
          "",
          "---------------"
        ],
        "mm/mmap.c||mm/mmap.c": [
          "File: mm/mmap.c -> mm/mmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1778:   error = shmem_zero_setup(vma);",
          "1779:   if (error)",
          "1780:    goto free_vma;",
          "1781:  }",
          "1783:  vma_link(mm, vma, prev, rb_link, rb_parent);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1781:  } else {",
          "1782:   vma_set_anonymous(vma);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2983:   return -ENOMEM;",
          "2984:  }",
          "2986:  vma->vm_start = addr;",
          "2987:  vma->vm_end = addr + len;",
          "2988:  vma->vm_pgoff = pgoff;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2988:  vma_set_anonymous(vma);",
          "",
          "---------------"
        ],
        "mm/nommu.c||mm/nommu.c": [
          "File: mm/nommu.c -> mm/nommu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1145:   if (ret < len)",
          "1146:    memset(base + ret, 0, len - ret);",
          "1148:  }",
          "1150:  return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1148:  } else {",
          "1149:   vma_set_anonymous(vma);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "71eb5255f55bdb484d35ff7c9a1803f453dfbf82",
      "candidate_info": {
        "commit_hash": "71eb5255f55bdb484d35ff7c9a1803f453dfbf82",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/71eb5255f55bdb484d35ff7c9a1803f453dfbf82",
        "files": [
          "net/core/lwt_bpf.c"
        ],
        "message": "bpf: use GFP_ATOMIC instead of GFP_KERNEL in bpf_parse_prog()\n\nbpf_parse_prog() is protected by rcu_read_lock().\nso that GFP_KERNEL is not allowed in the bpf_parse_prog().\n\n[51015.579396] =============================\n[51015.579418] WARNING: suspicious RCU usage\n[51015.579444] 4.18.0-rc6+ #208 Not tainted\n[51015.579464] -----------------------------\n[51015.579488] ./include/linux/rcupdate.h:303 Illegal context switch in RCU read-side critical section!\n[51015.579510] other info that might help us debug this:\n[51015.579532] rcu_scheduler_active = 2, debug_locks = 1\n[51015.579556] 2 locks held by ip/1861:\n[51015.579577]  #0: 00000000a8c12fd1 (rtnl_mutex){+.+.}, at: rtnetlink_rcv_msg+0x2e0/0x910\n[51015.579711]  #1: 00000000bf815f8e (rcu_read_lock){....}, at: lwtunnel_build_state+0x96/0x390\n[51015.579842] stack backtrace:\n[51015.579869] CPU: 0 PID: 1861 Comm: ip Not tainted 4.18.0-rc6+ #208\n[51015.579891] Hardware name: To be filled by O.E.M. To be filled by O.E.M./Aptio CRB, BIOS 5.6.5 07/08/2015\n[51015.579911] Call Trace:\n[51015.579950]  dump_stack+0x74/0xbb\n[51015.580000]  ___might_sleep+0x16b/0x3a0\n[51015.580047]  __kmalloc_track_caller+0x220/0x380\n[51015.580077]  kmemdup+0x1c/0x40\n[51015.580077]  bpf_parse_prog+0x10e/0x230\n[51015.580164]  ? kasan_kmalloc+0xa0/0xd0\n[51015.580164]  ? bpf_destroy_state+0x30/0x30\n[51015.580164]  ? bpf_build_state+0xe2/0x3e0\n[51015.580164]  bpf_build_state+0x1bb/0x3e0\n[51015.580164]  ? bpf_parse_prog+0x230/0x230\n[51015.580164]  ? lock_is_held_type+0x123/0x1a0\n[51015.580164]  lwtunnel_build_state+0x1aa/0x390\n[51015.580164]  fib_create_info+0x1579/0x33d0\n[51015.580164]  ? sched_clock_local+0xe2/0x150\n[51015.580164]  ? fib_info_update_nh_saddr+0x1f0/0x1f0\n[51015.580164]  ? sched_clock_local+0xe2/0x150\n[51015.580164]  fib_table_insert+0x201/0x1990\n[51015.580164]  ? lock_downgrade+0x610/0x610\n[51015.580164]  ? fib_table_lookup+0x1920/0x1920\n[51015.580164]  ? lwtunnel_valid_encap_type.part.6+0xcb/0x3a0\n[51015.580164]  ? rtm_to_fib_config+0x637/0xbd0\n[51015.580164]  inet_rtm_newroute+0xed/0x1b0\n[51015.580164]  ? rtm_to_fib_config+0xbd0/0xbd0\n[51015.580164]  rtnetlink_rcv_msg+0x331/0x910\n[ ... ]\n\nFixes: 3a0af8fd61f9 (\"bpf: BPF for lightweight tunnel infrastructure\")\nSigned-off-by: Taehee Yoo <ap420073@gmail.com>\nSigned-off-by: Daniel Borkmann <daniel@iogearbox.net>",
        "before_after_code_files": [
          "net/core/lwt_bpf.c||net/core/lwt_bpf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/core/lwt_bpf.c||net/core/lwt_bpf.c": [
          "File: net/core/lwt_bpf.c -> net/core/lwt_bpf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:  if (!tb[LWT_BPF_PROG_FD] || !tb[LWT_BPF_PROG_NAME])",
          "218:   return -EINVAL;",
          "221:  if (!prog->name)",
          "222:   return -ENOMEM;",
          "",
          "[Removed Lines]",
          "220:  prog->name = nla_memdup(tb[LWT_BPF_PROG_NAME], GFP_KERNEL);",
          "",
          "[Added Lines]",
          "220:  prog->name = nla_memdup(tb[LWT_BPF_PROG_NAME], GFP_ATOMIC);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03bc7cab7d7218088412a75e141696a89059ab00",
      "candidate_info": {
        "commit_hash": "03bc7cab7d7218088412a75e141696a89059ab00",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/03bc7cab7d7218088412a75e141696a89059ab00",
        "files": [
          "drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c"
        ],
        "message": "net: axienet: Fix double deregister of mdio\n\nIf the registration fails then mdio_unregister is called.\nHowever at unbind the unregister ia attempted again resulting\nin the below crash\n\n[   73.544038] kernel BUG at drivers/net/phy/mdio_bus.c:415!\n[   73.549362] Internal error: Oops - BUG: 0 [#1] SMP\n[   73.554127] Modules linked in:\n[   73.557168] CPU: 0 PID: 2249 Comm: sh Not tainted 4.14.0 #183\n[   73.562895] Hardware name: xlnx,zynqmp (DT)\n[   73.567062] task: ffffffc879e41180 task.stack: ffffff800cbe0000\n[   73.572973] PC is at mdiobus_unregister+0x84/0x88\n[   73.577656] LR is at axienet_mdio_teardown+0x18/0x30\n[   73.582601] pc : [<ffffff80085fa4cc>] lr : [<ffffff8008616858>]\npstate: 20000145\n[   73.589981] sp : ffffff800cbe3c30\n[   73.593277] x29: ffffff800cbe3c30 x28: ffffffc879e41180\n[   73.598573] x27: ffffff8008a21000 x26: 0000000000000040\n[   73.603868] x25: 0000000000000124 x24: ffffffc879efe920\n[   73.609164] x23: 0000000000000060 x22: ffffffc879e02000\n[   73.614459] x21: ffffffc879e02800 x20: ffffffc87b0b8870\n[   73.619754] x19: ffffffc879e02800 x18: 000000000000025d\n[   73.625050] x17: 0000007f9a719ad0 x16: ffffff8008195bd8\n[   73.630345] x15: 0000007f9a6b3d00 x14: 0000000000000010\n[   73.635640] x13: 74656e7265687465 x12: 0000000000000030\n[   73.640935] x11: 0000000000000030 x10: 0101010101010101\n[   73.646231] x9 : 241f394f42533300 x8 : ffffffc8799f6e98\n[   73.651526] x7 : ffffffc8799f6f18 x6 : ffffffc87b0ba318\n[   73.656822] x5 : ffffffc87b0ba498 x4 : 0000000000000000\n[   73.662117] x3 : 0000000000000000 x2 : 0000000000000008\n[   73.667412] x1 : 0000000000000004 x0 : ffffffc8799f4000\n[   73.672708] Process sh (pid: 2249, stack limit = 0xffffff800cbe0000)\n\nFix the same by making the bus NULL on unregister.\n\nSigned-off-by: Shubhrajyoti Datta <shubhrajyoti.datta@xilinx.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c||drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c||drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c": [
          "File: drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c -> drivers/net/ethernet/xilinx/xilinx_axienet_mdio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:  ret = of_mdiobus_register(bus, np1);",
          "219:  if (ret) {",
          "220:   mdiobus_free(bus);",
          "221:   return ret;",
          "222:  }",
          "223:  return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:   lp->mii_bus = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e630bcb7701f94dbd729fe57d37c089c763ad9f",
      "candidate_info": {
        "commit_hash": "9e630bcb7701f94dbd729fe57d37c089c763ad9f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9e630bcb7701f94dbd729fe57d37c089c763ad9f",
        "files": [
          "net/rds/ib_frmr.c",
          "net/rds/ib_mr.h",
          "net/rds/ib_rdma.c",
          "net/rds/rdma.c",
          "net/rds/rds.h",
          "net/rds/send.c"
        ],
        "message": "RDS: RDMA: Fix the NULL-ptr deref in rds_ib_get_mr\n\nRegistration of a memory region(MR) through FRMR/fastreg(unlike FMR)\nneeds a connection/qp. With a proxy qp, this dependency on connection\nwill be removed, but that needs more infrastructure patches, which is a\nwork in progress.\n\nAs an intermediate fix, the get_mr returns EOPNOTSUPP when connection\ndetails are not populated. The MR registration through sendmsg() will\ncontinue to work even with fast registration, since connection in this\ncase is formed upfront.\n\nThis patch fixes the following crash:\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN\nModules linked in:\nCPU: 1 PID: 4244 Comm: syzkaller468044 Not tainted 4.16.0-rc6+ #361\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS\nGoogle 01/01/2011\nRIP: 0010:rds_ib_get_mr+0x5c/0x230 net/rds/ib_rdma.c:544\nRSP: 0018:ffff8801b059f890 EFLAGS: 00010202\nRAX: dffffc0000000000 RBX: ffff8801b07e1300 RCX: ffffffff8562d96e\nRDX: 000000000000000d RSI: 0000000000000001 RDI: 0000000000000068\nRBP: ffff8801b059f8b8 R08: ffffed0036274244 R09: ffff8801b13a1200\nR10: 0000000000000004 R11: ffffed0036274243 R12: ffff8801b13a1200\nR13: 0000000000000001 R14: ffff8801ca09fa9c R15: 0000000000000000\nFS:  00007f4d050af700(0000) GS:ffff8801db300000(0000)\nknlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007f4d050aee78 CR3: 00000001b0d9b006 CR4: 00000000001606e0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n __rds_rdma_map+0x710/0x1050 net/rds/rdma.c:271\n rds_get_mr_for_dest+0x1d4/0x2c0 net/rds/rdma.c:357\n rds_setsockopt+0x6cc/0x980 net/rds/af_rds.c:347\n SYSC_setsockopt net/socket.c:1849 [inline]\n SyS_setsockopt+0x189/0x360 net/socket.c:1828\n do_syscall_64+0x281/0x940 arch/x86/entry/common.c:287\n entry_SYSCALL_64_after_hwframe+0x42/0xb7\nRIP: 0033:0x4456d9\nRSP: 002b:00007f4d050aedb8 EFLAGS: 00000246 ORIG_RAX: 0000000000000036\nRAX: ffffffffffffffda RBX: 00000000006dac3c RCX: 00000000004456d9\nRDX: 0000000000000007 RSI: 0000000000000114 RDI: 0000000000000004\nRBP: 00000000006dac38 R08: 00000000000000a0 R09: 0000000000000000\nR10: 0000000020000380 R11: 0000000000000246 R12: 0000000000000000\nR13: 00007fffbfb36d6f R14: 00007f4d050af9c0 R15: 0000000000000005\nCode: fa 48 c1 ea 03 80 3c 02 00 0f 85 cc 01 00 00 4c 8b bb 80 04 00 00\n48\nb8 00 00 00 00 00 fc ff df 49 8d 7f 68 48 89 fa 48 c1 ea 03 <80> 3c 02\n00 0f\n85 9c 01 00 00 4d 8b 7f 68 48 b8 00 00 00 00 00\nRIP: rds_ib_get_mr+0x5c/0x230 net/rds/ib_rdma.c:544 RSP:\nffff8801b059f890\n---[ end trace 7e1cea13b85473b0 ]---\n\nReported-by: syzbot+b51c77ef956678a65834@syzkaller.appspotmail.com\nSigned-off-by: Santosh Shilimkar <santosh.shilimkar@oracle.com>\nSigned-off-by: Avinash Repaka <avinash.repaka@oracle.com>\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/rds/ib_frmr.c||net/rds/ib_frmr.c",
          "net/rds/ib_mr.h||net/rds/ib_mr.h",
          "net/rds/ib_rdma.c||net/rds/ib_rdma.c",
          "net/rds/rdma.c||net/rds/rdma.c",
          "net/rds/rds.h||net/rds/rds.h",
          "net/rds/send.c||net/rds/send.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/rds/ib_frmr.c||net/rds/ib_frmr.c": [
          "File: net/rds/ib_frmr.c -> net/rds/ib_frmr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:  struct rds_ib_frmr *frmr;",
          "345:  int ret;",
          "347:  do {",
          "348:   if (ibmr)",
          "349:    rds_ib_free_frmr(ibmr, true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:  if (!ic) {",
          "349:   return ERR_PTR(-EOPNOTSUPP);",
          "350:  }",
          "",
          "---------------"
        ],
        "net/rds/ib_mr.h||net/rds/ib_mr.h": [
          "File: net/rds/ib_mr.h -> net/rds/ib_mr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "115:    struct rds_info_rdma_connection *iinfo);",
          "116: void rds_ib_destroy_mr_pool(struct rds_ib_mr_pool *);",
          "117: void *rds_ib_get_mr(struct scatterlist *sg, unsigned long nents,",
          "119: void rds_ib_sync_mr(void *trans_private, int dir);",
          "120: void rds_ib_free_mr(void *trans_private, int invalidate);",
          "121: void rds_ib_flush_mrs(void);",
          "",
          "[Removed Lines]",
          "118:       struct rds_sock *rs, u32 *key_ret);",
          "",
          "[Added Lines]",
          "118:       struct rds_sock *rs, u32 *key_ret,",
          "119:       struct rds_connection *conn);",
          "",
          "---------------"
        ],
        "net/rds/ib_rdma.c||net/rds/ib_rdma.c": [
          "File: net/rds/ib_rdma.c -> net/rds/ib_rdma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "537: }",
          "539: void *rds_ib_get_mr(struct scatterlist *sg, unsigned long nents,",
          "541: {",
          "542:  struct rds_ib_device *rds_ibdev;",
          "543:  struct rds_ib_mr *ibmr = NULL;",
          "545:  int ret;",
          "547:  rds_ibdev = rds_ib_get_device(rs->rs_bound_addr);",
          "",
          "[Removed Lines]",
          "540:       struct rds_sock *rs, u32 *key_ret)",
          "544:  struct rds_ib_connection *ic = rs->rs_conn->c_transport_data;",
          "",
          "[Added Lines]",
          "540:       struct rds_sock *rs, u32 *key_ret,",
          "541:       struct rds_connection *conn)",
          "545:  struct rds_ib_connection *ic = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "550:   goto out;",
          "551:  }",
          "553:  if (!rds_ibdev->mr_8k_pool || !rds_ibdev->mr_1m_pool) {",
          "554:   ret = -ENODEV;",
          "555:   goto out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "554:  if (conn)",
          "555:   ic = conn->c_transport_data;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "559:   ibmr = rds_ib_reg_frmr(rds_ibdev, ic, sg, nents, key_ret);",
          "560:  else",
          "561:   ibmr = rds_ib_reg_fmr(rds_ibdev, sg, nents, key_ret);",
          "567:   pr_warn(\"RDS/IB: rds_ib_get_mr failed (errno=%d)\\n\", ret);",
          "569:  if (rds_ibdev)",
          "570:   rds_ib_dev_put(rds_ibdev);",
          "573: }",
          "575: void rds_ib_destroy_mr_pool(struct rds_ib_mr_pool *pool)",
          "",
          "[Removed Lines]",
          "562:  if (ibmr)",
          "563:   rds_ibdev = NULL;",
          "565:  out:",
          "566:  if (!ibmr)",
          "572:  return ibmr;",
          "",
          "[Added Lines]",
          "566:  if (IS_ERR(ibmr)) {",
          "567:   ret = PTR_ERR(ibmr);",
          "569:  } else {",
          "570:   return ibmr;",
          "571:  }",
          "573:  out:",
          "577:  return ERR_PTR(ret);",
          "",
          "---------------"
        ],
        "net/rds/rdma.c||net/rds/rdma.c": [
          "File: net/rds/rdma.c -> net/rds/rdma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: }",
          "172: static int __rds_rdma_map(struct rds_sock *rs, struct rds_get_mr_args *args,",
          "174: {",
          "175:  struct rds_mr *mr = NULL, *found;",
          "176:  unsigned int nr_pages;",
          "",
          "[Removed Lines]",
          "173:     u64 *cookie_ret, struct rds_mr **mr_ret)",
          "",
          "[Added Lines]",
          "173:      u64 *cookie_ret, struct rds_mr **mr_ret,",
          "174:      struct rds_conn_path *cp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271:  trans_private = rs->rs_transport->get_mr(sg, nents, rs,",
          "274:  if (IS_ERR(trans_private)) {",
          "275:   for (i = 0 ; i < nents; i++)",
          "",
          "[Removed Lines]",
          "272:        &mr->r_key);",
          "",
          "[Added Lines]",
          "273:        &mr->r_key,",
          "274:        cp ? cp->cp_conn : NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "330:       sizeof(struct rds_get_mr_args)))",
          "331:   return -EFAULT;",
          "334: }",
          "336: int rds_get_mr_for_dest(struct rds_sock *rs, char __user *optval, int optlen)",
          "",
          "[Removed Lines]",
          "333:  return __rds_rdma_map(rs, &args, NULL, NULL);",
          "",
          "[Added Lines]",
          "335:  return __rds_rdma_map(rs, &args, NULL, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "354:  new_args.cookie_addr = args.cookie_addr;",
          "355:  new_args.flags = args.flags;",
          "358: }",
          "",
          "[Removed Lines]",
          "357:  return __rds_rdma_map(rs, &new_args, NULL, NULL);",
          "",
          "[Added Lines]",
          "359:  return __rds_rdma_map(rs, &new_args, NULL, NULL, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "782:      rm->m_rdma_cookie != 0)",
          "783:   return -EINVAL;",
          "786: }",
          "",
          "[Removed Lines]",
          "785:  return __rds_rdma_map(rs, CMSG_DATA(cmsg), &rm->m_rdma_cookie, &rm->rdma.op_rdma_mr);",
          "",
          "[Added Lines]",
          "787:  return __rds_rdma_map(rs, CMSG_DATA(cmsg), &rm->m_rdma_cookie,",
          "788:          &rm->rdma.op_rdma_mr, rm->m_conn_path);",
          "",
          "---------------"
        ],
        "net/rds/rds.h||net/rds/rds.h": [
          "File: net/rds/rds.h -> net/rds/rds.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "464:    struct scatterlist *op_sg;",
          "465:   } data;",
          "466:  };",
          "467: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:  struct rds_conn_path *m_conn_path;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "544:      unsigned int avail);",
          "545:  void (*exit)(void);",
          "546:  void *(*get_mr)(struct scatterlist *sg, unsigned long nr_sg,",
          "548:  void (*sync_mr)(void *trans_private, int direction);",
          "549:  void (*free_mr)(void *trans_private, int invalidate);",
          "550:  void (*flush_mrs)(void);",
          "",
          "[Removed Lines]",
          "547:    struct rds_sock *rs, u32 *key_ret);",
          "",
          "[Added Lines]",
          "549:    struct rds_sock *rs, u32 *key_ret,",
          "550:    struct rds_connection *conn);",
          "",
          "---------------"
        ],
        "net/rds/send.c||net/rds/send.c": [
          "File: net/rds/send.c -> net/rds/send.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1169:   rs->rs_conn = conn;",
          "1170:  }",
          "1173:  ret = rds_cmsg_send(rs, rm, msg, &allocated_mr);",
          "1174:  if (ret) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1172:  if (conn->c_trans->t_mp_capable)",
          "1173:   cpath = &conn->c_path[rds_send_mprds_hash(rs, conn)];",
          "1174:  else",
          "1175:   cpath = &conn->c_path[0];",
          "1177:  rm->m_conn_path = cpath;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1192:   goto out;",
          "1193:  }",
          "1200:  if (rds_destroy_pending(conn)) {",
          "1201:   ret = -EAGAIN;",
          "1202:   goto out;",
          "",
          "[Removed Lines]",
          "1195:  if (conn->c_trans->t_mp_capable)",
          "1196:   cpath = &conn->c_path[rds_send_mprds_hash(rs, conn)];",
          "1197:  else",
          "1198:   cpath = &conn->c_path[0];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}