{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f66bfcb740c823c9c6ffce1f7f0d0c2bb811046a",
      "candidate_info": {
        "commit_hash": "f66bfcb740c823c9c6ffce1f7f0d0c2bb811046a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f66bfcb740c823c9c6ffce1f7f0d0c2bb811046a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c",
          "test/conflict3.test"
        ],
        "message": "If a DELETE trigger fired by an UPDATE OR REPLACE statement deletes the row being updated, do not attempt to proceed with the original UPDATE operation. Fix for [d6a0fbc1].\n\nFossilOrigin-Name: 4145b3e05051ba6729105157a876793ad14a05d895fc10fe704f437eab16ea93",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c",
          "test/conflict3.test||test/conflict3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e2db1123faac26c0e0b6a1ebef1685ea7633bfcafd1ff743ba5380700f7745af",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:   }",
          "717:   if( !isView ){",
          "721:     assert( regOldRowid>0 );",
          "722:     sqlite3GenerateConstraintChecks(pParse, pTab, aRegIdx, iDataCur, iIdxCur,",
          "723:         regNewRowid, regOldRowid, chngKey, onError, labelContinue, &bReplace,",
          "724:         aXRef, 0);",
          "727:     if( hasFK ){",
          "728:       sqlite3FkCheck(pParse, pTab, regOldRowid, 0, aXRef, chngKey);",
          "729:     }",
          "740:     sqlite3GenerateRowIndexDelete(pParse, pTab, iDataCur, iIdxCur, aRegIdx, -1);",
          "",
          "[Removed Lines]",
          "732:     if( bReplace || chngKey ){",
          "733:       if( pPk ){",
          "734:         addr1 = sqlite3VdbeAddOp4Int(v, OP_NotFound, iDataCur, 0, regKey, nKey);",
          "735:       }else{",
          "736:         addr1 = sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, 0, regOldRowid);",
          "737:       }",
          "738:       VdbeCoverageNeverTaken(v);",
          "739:     }",
          "",
          "[Added Lines]",
          "727:     if( bReplace || chngKey ){",
          "728:       if( pPk ){",
          "729:         sqlite3VdbeAddOp4Int(v, OP_NotFound,iDataCur,labelContinue,regKey,nKey);",
          "730:       }else{",
          "731:         sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, labelContinue,regOldRowid);",
          "732:       }",
          "733:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "766:       sqlite3VdbeAddOp2(v, OP_Delete, iDataCur, 0);",
          "767:     }",
          "768: #endif",
          "773:     if( hasFK ){",
          "774:       sqlite3FkCheck(pParse, pTab, 0, regNewRowid, aXRef, chngKey);",
          "",
          "[Removed Lines]",
          "769:     if( bReplace || chngKey ){",
          "770:       sqlite3VdbeJumpHere(v, addr1);",
          "771:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/conflict3.test||test/conflict3.test": [
          "File: test/conflict3.test -> test/conflict3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:   SELECT * FROM t2;",
          "367: } {111 111B 112 112}",
          "370: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369: #-------------------------------------------------------------------------",
          "370: ifcapable trigger {",
          "371:   reset_db",
          "372:   do_execsql_test 13.1.0 {",
          "373:     PRAGMA recursive_triggers = true;",
          "374:     CREATE TABLE t0 (c0 UNIQUE, c1 UNIQUE);",
          "375:     CREATE TRIGGER tr0 AFTER DELETE ON t0 BEGIN",
          "376:       DELETE FROM t0;",
          "377:     END;",
          "379:     INSERT INTO t0 VALUES(1, NULL);",
          "380:     INSERT INTO t0 VALUES(0, NULL);",
          "381:   }",
          "383:   do_execsql_test 13.1.1 {",
          "384:     UPDATE OR REPLACE t0 SET c1 = 1;",
          "385:   }",
          "387:   integrity_check 13.1.2",
          "389:   do_execsql_test 13.1.3 {",
          "390:     SELECT * FROM t0",
          "391:   } {}",
          "393:   do_execsql_test 13.2.0 {",
          "394:     CREATE TABLE t2 (a PRIMARY KEY, b UNIQUE, c UNIQUE) WITHOUT ROWID;",
          "395:     CREATE TRIGGER tr3 AFTER DELETE ON t2 BEGIN",
          "396:       DELETE FROM t2;",
          "397:     END;",
          "399:     INSERT INTO t2 VALUES(1, 1, 1);",
          "400:     INSERT INTO t2 VALUES(2, 2, 2);",
          "401:   }",
          "403:   do_execsql_test 13.2.1 {",
          "404:     UPDATE OR REPLACE t2 SET c = 0;",
          "405:   }",
          "407:   integrity_check 13.2.2",
          "409:   do_execsql_test 13.2.3 {",
          "410:     SELECT * FROM t2",
          "411:   } {}",
          "413:   do_execsql_test 13.3.0 {",
          "414:     CREATE TABLE t1(a, b);",
          "415:     CREATE TABLE log(x);",
          "416:     CREATE INDEX i1 ON t1(a);",
          "417:     INSERT INTO t1 VALUES(1, 2);",
          "419:     CREATE TRIGGER tb BEFORE UPDATE ON t1 BEGIN",
          "420:       DELETE FROM t1;",
          "421:     END;",
          "422:     CREATE TRIGGER ta AFTER UPDATE ON t1 BEGIN",
          "423:       INSERT INTO log VALUES('fired!');",
          "424:     END;",
          "426:     UPDATE t1 SET b=3;",
          "427:   }",
          "429:   do_execsql_test 13.3.1 {",
          "430:     SELECT * FROM t1;",
          "431:   } {}",
          "432:   do_execsql_test 13.3.2 {",
          "433:     SELECT * FROM log;",
          "434:   } {}",
          "435: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad31727fc68e47612edcc1566ef88174da75f258",
      "candidate_info": {
        "commit_hash": "ad31727fc68e47612edcc1566ef88174da75f258",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ad31727fc68e47612edcc1566ef88174da75f258",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h"
        ],
        "message": "Use macros to determine if an expression is always true or always false.\n\nFossilOrigin-Name: 6de980a09c3a7adf71f2c9a63a242673b5e1f246e8ee071b26844275f0dad0fc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7713996aa99ce6dd35b5a2db74dd26658fb8d9817169b2a7531cdef6edb41403",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "773:     pNew->iAgg = -1;",
          "774:     if( pToken ){",
          "775:       if( nExtra==0 ){",
          "777:         pNew->u.iValue = iValue;",
          "778:       }else{",
          "779:         pNew->u.zToken = (char*)&pNew[1];",
          "",
          "[Removed Lines]",
          "776:         pNew->flags |= EP_IntValue|EP_Leaf;",
          "",
          "[Added Lines]",
          "776:         pNew->flags |= EP_IntValue|EP_Leaf|(iValue?EP_IsTrue:EP_IsFalse);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "880: }",
          "",
          "[Removed Lines]",
          "897: static int exprAlwaysTrue(Expr *p){",
          "898:   int v = 0;",
          "899:   if( ExprHasProperty(p, EP_FromJoin) ) return 0;",
          "900:   if( !sqlite3ExprIsInteger(p, &v) ) return 0;",
          "901:   return v!=0;",
          "902: }",
          "903: static int exprAlwaysFalse(Expr *p){",
          "904:   int v = 0;",
          "905:   if( ExprHasProperty(p, EP_FromJoin) ) return 0;",
          "906:   if( !sqlite3ExprIsInteger(p, &v) ) return 0;",
          "907:   return v==0;",
          "908: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "923:     return pLeft;",
          "924:   }else if( pParse->nErr || IN_RENAME_OBJECT ){",
          "925:     return sqlite3PExpr(pParse, TK_AND, pLeft, pRight);",
          "927:     sqlite3ExprDelete(db, pLeft);",
          "928:     sqlite3ExprDelete(db, pRight);",
          "929:     return sqlite3ExprAlloc(db, TK_INTEGER, &sqlite3IntTokens[0], 0);",
          "",
          "[Removed Lines]",
          "926:   }else if( exprAlwaysFalse(pLeft) || exprAlwaysFalse(pRight) ){",
          "",
          "[Added Lines]",
          "899:   }else if( ExprAlwaysFalse(pLeft) || ExprAlwaysFalse(pRight) ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1818:        || sqlite3StrICmp(pExpr->u.zToken, \"false\")==0)",
          "1819:   ){",
          "1820:     pExpr->op = TK_TRUEFALSE;",
          "1821:     return 1;",
          "1822:   }",
          "1823:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1794:     ExprSetProperty(pExpr, pExpr->u.zToken[4]==0 ? EP_IsTrue : EP_IsFalse);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4522: #endif",
          "4523:     default: {",
          "4524:     default_expr:",
          "4526:         sqlite3VdbeGoto(v, dest);",
          "4529:       }else{",
          "4530:         r1 = sqlite3ExprCodeTemp(pParse, pExpr, &regFree1);",
          "",
          "[Removed Lines]",
          "4525:       if( exprAlwaysTrue(pExpr) ){",
          "4527:       }else if( exprAlwaysFalse(pExpr) ){",
          "",
          "[Added Lines]",
          "4499:       if( ExprAlwaysTrue(pExpr) ){",
          "4501:       }else if( ExprAlwaysFalse(pExpr) ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4692: #endif",
          "4693:     default: {",
          "4694:     default_expr:",
          "4696:         sqlite3VdbeGoto(v, dest);",
          "4699:       }else{",
          "4700:         r1 = sqlite3ExprCodeTemp(pParse, pExpr, &regFree1);",
          "",
          "[Removed Lines]",
          "4695:       if( exprAlwaysFalse(pExpr) ){",
          "4697:       }else if( exprAlwaysTrue(pExpr) ){",
          "",
          "[Added Lines]",
          "4669:       if( ExprAlwaysFalse(pExpr) ){",
          "4671:       }else if( ExprAlwaysTrue(pExpr) ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2545: #define ExprHasAllProperty(E,P)  (((E)->flags&(P))==(P))",
          "2546: #define ExprSetProperty(E,P)     (E)->flags|=(P)",
          "2547: #define ExprClearProperty(E,P)   (E)->flags&=~(P)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2550: #define ExprAlwaysTrue(E)   (((E)->flags&(EP_FromJoin|EP_IsTrue))==EP_IsTrue)",
          "2551: #define ExprAlwaysFalse(E)  (((E)->flags&(EP_FromJoin|EP_IsFalse))==EP_IsFalse)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6214d93993a545b578e7139951f07840e049ee45",
      "candidate_info": {
        "commit_hash": "6214d93993a545b578e7139951f07840e049ee45",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6214d93993a545b578e7139951f07840e049ee45",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Fix an off-by-one error on a Goto in the code generator, that only causes problems for a REPLACE on an INTEGER PRIMARY KEY in non-debug builds.  Test case in TH3.\n\nFossilOrigin-Name: e35eb8776ed539afe1d5db099470ab1124d8dd2db73ee5db7c811f8df9a9576e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 703646b1b5c84d550fe0d74e399c0eeb729da1d263e4693320f69e6509678985",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1844:   if( ipkTop ){",
          "1846:     VdbeComment((v, \"Do IPK REPLACE\"));",
          "1847:     sqlite3VdbeJumpHere(v, ipkBottom);",
          "1848:   }",
          "",
          "[Removed Lines]",
          "1845:     sqlite3VdbeGoto(v, ipkTop+1);",
          "",
          "[Added Lines]",
          "1845:     sqlite3VdbeGoto(v, ipkTop);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a677eecad3dc751db19aaf27b6c0674200ecef21",
      "candidate_info": {
        "commit_hash": "a677eecad3dc751db19aaf27b6c0674200ecef21",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a677eecad3dc751db19aaf27b6c0674200ecef21",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/vdbeaux.c",
          "src/where.c",
          "src/whereexpr.c",
          "test/affinity2.test",
          "test/where.test",
          "test/whereG.test"
        ],
        "message": "Merge fixes from trunk.  Also fix a reference to the KeyInfo.aSortOrder field, which should now be KeyInfo.aSortFlags\n\nFossilOrigin-Name: 63e625c8eb06720eef30573aa562e38c90d228a9cf493f8bb59f09e50f0e3168",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/where.c||src/where.c",
          "src/whereexpr.c||src/whereexpr.c",
          "test/affinity2.test||test/affinity2.test",
          "test/where.test||test/where.test",
          "test/whereG.test||test/whereG.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b1cbcdc6eb42cca0c42a05e0d6ba4c6c7f09adff0c59ecfc5b434a94dec07a41",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106: }",
          "112: Expr *sqlite3ExprSkipCollate(Expr *pExpr){",
          "113:   while( pExpr && ExprHasProperty(pExpr, EP_Skip|EP_Unlikely) ){",
          "114:     if( ExprHasProperty(pExpr, EP_Unlikely) ){",
          "115:       assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112:   while( pExpr && ExprHasProperty(pExpr, EP_Skip) ){",
          "113:     assert( pExpr->op==TK_COLLATE );",
          "114:     pExpr = pExpr->pLeft;",
          "115:   }",
          "116:   return pExpr;",
          "117: }",
          "124: Expr *sqlite3ExprSkipCollateAndLikely(Expr *pExpr){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2180: int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){",
          "2181:   u8 op;",
          "2182:   if( aff==SQLITE_AFF_BLOB ) return 1;",
          "2184:   op = p->op;",
          "2185:   if( op==TK_REGISTER ) op = p->op2;",
          "2186:   switch( op ){",
          "",
          "[Removed Lines]",
          "2183:   while( p->op==TK_UPLUS || p->op==TK_UMINUS ){ p = p->pLeft; }",
          "",
          "[Added Lines]",
          "2194:   int unaryMinus = 0;",
          "2196:   while( p->op==TK_UPLUS || p->op==TK_UMINUS ){",
          "2197:     if( p->op==TK_UMINUS ) unaryMinus = 1;",
          "2198:     p = p->pLeft;",
          "2199:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2191:       return aff==SQLITE_AFF_REAL || aff==SQLITE_AFF_NUMERIC;",
          "2192:     }",
          "2193:     case TK_STRING: {",
          "2195:     }",
          "2196:     case TK_BLOB: {",
          "2198:     }",
          "2199:     case TK_COLUMN: {",
          "",
          "[Removed Lines]",
          "2194:       return aff==SQLITE_AFF_TEXT;",
          "2197:       return 1;",
          "",
          "[Added Lines]",
          "2210:       return !unaryMinus && aff==SQLITE_AFF_TEXT;",
          "2213:       return !unaryMinus;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3400: static void exprToRegister(Expr *pExpr, int iReg){",
          "3402:   p->op2 = p->op;",
          "3403:   p->op = TK_REGISTER;",
          "3404:   p->iTable = iReg;",
          "",
          "[Removed Lines]",
          "3401:   Expr *p = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "3417:   Expr *p = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4207: int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){",
          "4208:   int r2;",
          "4210:   if( ConstFactorOk(pParse)",
          "4211:    && pExpr->op!=TK_REGISTER",
          "4212:    && sqlite3ExprIsConstantNotJoin(pExpr)",
          "",
          "[Removed Lines]",
          "4209:   pExpr = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "4225:   pExpr = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4950: int sqlite3ExprCompareSkip(Expr *pA, Expr *pB, int iTab){",
          "4951:   return sqlite3ExprCompare(0,",
          "4954:              iTab);",
          "4955: }",
          "",
          "[Removed Lines]",
          "4952:              sqlite3ExprSkipCollate(pA),",
          "4953:              sqlite3ExprSkipCollate(pB),",
          "",
          "[Added Lines]",
          "4968:              sqlite3ExprSkipCollateAndLikely(pA),",
          "4969:              sqlite3ExprSkipCollateAndLikely(pB),",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5159: int sqlite3ExprImpliesNonNullRow(Expr *p, int iTab){",
          "5160:   Walker w;",
          "5162:   while( p ){",
          "5163:     if( p->op==TK_NOTNULL ){",
          "5164:       p = p->pLeft;",
          "",
          "[Removed Lines]",
          "5161:   p = sqlite3ExprSkipCollate(p);",
          "",
          "[Added Lines]",
          "5177:   p = sqlite3ExprSkipCollateAndLikely(p);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "973:     }",
          "974:     case TK_IS:",
          "975:     case TK_ISNOT: {",
          "977:       assert( !ExprHasProperty(pExpr, EP_Reduced) );",
          "",
          "[Removed Lines]",
          "976:       Expr *pRight = sqlite3ExprSkipCollate(pExpr->pRight);",
          "",
          "[Added Lines]",
          "976:       Expr *pRight = sqlite3ExprSkipCollateAndLikely(pExpr->pRight);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1184:       int iCol = -1;",
          "1185:       Expr *pE, *pDup;",
          "1186:       if( pItem->done ) continue;",
          "1188:       if( sqlite3ExprIsInteger(pE, &iCol) ){",
          "1189:         if( iCol<=0 || iCol>pEList->nExpr ){",
          "1190:           resolveOutOfRangeError(pParse, \"ORDER\", i+1, pEList->nExpr);",
          "",
          "[Removed Lines]",
          "1187:       pE = sqlite3ExprSkipCollate(pItem->pExpr);",
          "",
          "[Added Lines]",
          "1187:       pE = sqlite3ExprSkipCollateAndLikely(pItem->pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1363:   pParse = pNC->pParse;",
          "1364:   for(i=0, pItem=pOrderBy->a; i<pOrderBy->nExpr; i++, pItem++){",
          "1365:     Expr *pE = pItem->pExpr;",
          "1367:     if( zType[0]!='G' ){",
          "1368:       iCol = resolveAsName(pParse, pSelect->pEList, pE2);",
          "1369:       if( iCol>0 ){",
          "",
          "[Removed Lines]",
          "1366:     Expr *pE2 = sqlite3ExprSkipCollate(pE);",
          "",
          "[Added Lines]",
          "1366:     Expr *pE2 = sqlite3ExprSkipCollateAndLikely(pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1960:     if( (zName = pEList->a[i].zName)!=0 ){",
          "1962:     }else{",
          "1964:       while( pColExpr->op==TK_DOT ){",
          "1965:         pColExpr = pColExpr->pRight;",
          "1966:         assert( pColExpr!=0 );",
          "",
          "[Removed Lines]",
          "1963:       Expr *pColExpr = sqlite3ExprSkipCollate(pEList->a[i].pExpr);",
          "",
          "[Added Lines]",
          "1963:       Expr *pColExpr = sqlite3ExprSkipCollateAndLikely(pEList->a[i].pExpr);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4278: Expr *sqlite3ExprAddCollateToken(Parse *pParse, Expr*, const Token*, int);",
          "4279: Expr *sqlite3ExprAddCollateString(Parse*,Expr*,const char*);",
          "4280: Expr *sqlite3ExprSkipCollate(Expr*);",
          "4281: int sqlite3CheckCollSeq(Parse *, CollSeq *);",
          "4282: int sqlite3WritableSchema(sqlite3*);",
          "4283: int sqlite3CheckObjectName(Parse*, const char*,const char*,const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4281: Expr *sqlite3ExprSkipCollateAndLikely(Expr*);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4132:   pC->deferredMoveto = 0;",
          "4133:   pC->cacheStatus = CACHE_STALE;",
          "4134:   if( pC->isTable ){",
          "4136:     assert( sqlite3BtreeCursorHasHint(pC->uc.pCursor, BTREE_SEEK_EQ)==0",
          "4137:               || CORRUPT_DB );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4135:     u16 flags3, newType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4142:     pIn3 = &aMem[pOp->p3];",
          "4144:       applyNumericAffinity(pIn3, 0);",
          "4145:     }",
          "4153:           VdbeBranchTaken(1,2);",
          "4154:           goto jump_to_p2;",
          "4155:         }else{",
          "",
          "[Removed Lines]",
          "4143:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4146:     iKey = sqlite3VdbeIntValue(pIn3);",
          "4150:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4151:       if( (pIn3->flags & MEM_Real)==0 ){",
          "4152:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "[Added Lines]",
          "4144:     flags3 = pIn3->flags;",
          "4145:     if( (flags3 & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4154:     if( (newType & (MEM_Int|MEM_IntReal))==0 ){",
          "4155:       if( (newType & MEM_Real)==0 ){",
          "4156:         if( (newType & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5022:   preupdate.keyinfo.db = db;",
          "5023:   preupdate.keyinfo.enc = ENC(db);",
          "5024:   preupdate.keyinfo.nKeyField = pTab->nCol;",
          "5026:   preupdate.iKey1 = iKey1;",
          "5027:   preupdate.iKey2 = iKey2;",
          "5028:   preupdate.pTab = pTab;",
          "",
          "[Removed Lines]",
          "5025:   preupdate.keyinfo.aSortOrder = (u8*)&fakeSortOrder;",
          "",
          "[Added Lines]",
          "5025:   preupdate.keyinfo.aSortFlags = (u8*)&fakeSortOrder;",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:         ){",
          "254:           if( (pTerm->eOperator & WO_EQUIV)!=0",
          "255:            && pScan->nEquiv<ArraySize(pScan->aiCur)",
          "257:           ){",
          "258:             int j;",
          "259:             for(j=0; j<pScan->nEquiv; j++){",
          "",
          "[Removed Lines]",
          "256:            && (pX = sqlite3ExprSkipCollate(pTerm->pExpr->pRight))->op==TK_COLUMN",
          "",
          "[Added Lines]",
          "256:            && (pX = sqlite3ExprSkipCollateAndLikely(pTerm->pExpr->pRight))->op",
          "257:                ==TK_COLUMN",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449:   const char *zColl = pIdx->azColl[iCol];",
          "451:   for(i=0; i<pList->nExpr; i++){",
          "453:     if( p->op==TK_COLUMN",
          "454:      && p->iColumn==pIdx->aiColumn[iCol]",
          "455:      && p->iTable==iBase",
          "",
          "[Removed Lines]",
          "452:     Expr *p = sqlite3ExprSkipCollate(pList->a[i].pExpr);",
          "",
          "[Added Lines]",
          "453:     Expr *p = sqlite3ExprSkipCollateAndLikely(pList->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "515:   for(i=0; i<pDistinct->nExpr; i++){",
          "517:     if( p->op==TK_COLUMN && p->iTable==iBase && p->iColumn<0 ) return 1;",
          "518:   }",
          "",
          "[Removed Lines]",
          "516:     Expr *p = sqlite3ExprSkipCollate(pDistinct->a[i].pExpr);",
          "",
          "[Added Lines]",
          "517:     Expr *p = sqlite3ExprSkipCollateAndLikely(pDistinct->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2770:   if( pIndex->bUnordered ) return 0;",
          "2771:   if( (pOB = pBuilder->pWInfo->pOrderBy)==0 ) return 0;",
          "2772:   for(ii=0; ii<pOB->nExpr; ii++){",
          "2774:     if( pExpr->op==TK_COLUMN && pExpr->iTable==iCursor ){",
          "2775:       if( pExpr->iColumn<0 ) return 1;",
          "2776:       for(jj=0; jj<pIndex->nKeyCol; jj++){",
          "",
          "[Removed Lines]",
          "2773:     Expr *pExpr = sqlite3ExprSkipCollate(pOB->a[ii].pExpr);",
          "",
          "[Added Lines]",
          "2774:     Expr *pExpr = sqlite3ExprSkipCollateAndLikely(pOB->a[ii].pExpr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3711:     for(i=0; i<nOrderBy; i++){",
          "3712:       if( MASKBIT(i) & obSat ) continue;",
          "3714:       if( pOBExpr->op!=TK_COLUMN ) continue;",
          "3715:       if( pOBExpr->iTable!=iCur ) continue;",
          "3716:       pTerm = sqlite3WhereFindTerm(&pWInfo->sWC, iCur, pOBExpr->iColumn,",
          "",
          "[Removed Lines]",
          "3713:       pOBExpr = sqlite3ExprSkipCollate(pOrderBy->a[i].pExpr);",
          "",
          "[Added Lines]",
          "3714:       pOBExpr = sqlite3ExprSkipCollateAndLikely(pOrderBy->a[i].pExpr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3830:         isMatch = 0;",
          "3831:         for(i=0; bOnce && i<nOrderBy; i++){",
          "3832:           if( MASKBIT(i) & obSat ) continue;",
          "3834:           testcase( wctrlFlags & WHERE_GROUPBY );",
          "3835:           testcase( wctrlFlags & WHERE_DISTINCTBY );",
          "3836:           if( (wctrlFlags & (WHERE_GROUPBY|WHERE_DISTINCTBY))==0 ) bOnce = 0;",
          "",
          "[Removed Lines]",
          "3833:           pOBExpr = sqlite3ExprSkipCollate(pOrderBy->a[i].pExpr);",
          "",
          "[Added Lines]",
          "3834:           pOBExpr = sqlite3ExprSkipCollateAndLikely(pOrderBy->a[i].pExpr);",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   }else{",
          "85:     pTerm->truthProb = 1;",
          "86:   }",
          "88:   pTerm->wtFlags = wtFlags;",
          "89:   pTerm->pWC = pWC;",
          "90:   pTerm->iParent = -1;",
          "",
          "[Removed Lines]",
          "87:   pTerm->pExpr = sqlite3ExprSkipCollate(p);",
          "",
          "[Added Lines]",
          "87:   pTerm->pExpr = sqlite3ExprSkipCollateAndLikely(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1453: void sqlite3WhereSplit(WhereClause *pWC, Expr *pExpr, u8 op){",
          "1455:   pWC->op = op;",
          "1456:   if( pE2==0 ) return;",
          "1457:   if( pE2->op!=op ){",
          "",
          "[Removed Lines]",
          "1454:   Expr *pE2 = sqlite3ExprSkipCollate(pExpr);",
          "",
          "[Added Lines]",
          "1454:   Expr *pE2 = sqlite3ExprSkipCollateAndLikely(pExpr);",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:   SELECT * FROM t3 WHERE c='0' ORDER BY a;",
          "86: } {2 1 0 4 1 0}",
          "88: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "88: # 2019-08-22 ticket https://sqlite.org/src/info/d99f1ffe836c591ac57f",
          "89: # False positive in sqlite3ExprNeedsNoAffinityChange()",
          "90: #",
          "91: do_execsql_test 500 {",
          "92:   DROP TABLE IF EXISTS t0;",
          "93:   CREATE TABLE t0(c0 TEXT UNIQUE, c1);",
          "94:   INSERT INTO t0(c0) VALUES (-1);",
          "95:   SELECT quote(- x'ce'), quote(t0.c0), quote(- x'ce' >= t0.c0) FROM t0;",
          "96: } {0 '-1' 1}",
          "97: do_execsql_test 501 {",
          "98:   SELECT * FROM t0 WHERE - x'ce' >= t0.c0;",
          "99: } {-1 {}}",
          "100: do_execsql_test 502 {",
          "101:   SELECT quote(+-+x'ce'), quote(t0.c0), quote(+-+x'ce' >= t0.c0) FROM t0;",
          "102: } {0 '-1' 1}",
          "103: do_execsql_test 503 {",
          "104:   SELECT * FROM t0 WHERE +-+x'ce' >= t0.c0;",
          "105: } {-1 {}}",
          "106: do_execsql_test 504 {",
          "107:   SELECT quote(- 'ce'), quote(t0.c0), quote(- 'ce' >= t0.c0) FROM t0;",
          "108: } {0 '-1' 1}",
          "109: do_execsql_test 505 {",
          "110:   SELECT * FROM t0 WHERE - 'ce' >= t0.c0;",
          "111: } {-1 {}}",
          "112: do_execsql_test 506 {",
          "113:   SELECT quote(+-+'ce'), quote(t0.c0), quote(+-+'ce' >= t0.c0) FROM t0;",
          "114: } {0 '-1' 1}",
          "115: do_execsql_test 507 {",
          "116:   SELECT * FROM t0 WHERE +-+'ce' >= t0.c0;",
          "117: } {-1 {}}",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1538:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1539: } {1 {corrupt database}}",
          "1541: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1541: # 2019-08-21 Ticket https://www.sqlite.org/src/info/d9f584e936c7a8d0",
          "1542: #",
          "1543: db close",
          "1544: sqlite3 db :memory:",
          "1545: do_execsql_test where-26.1 {",
          "1546:   CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1 TEXT);",
          "1547:   INSERT INTO t0(c0, c1) VALUES (1, 'a');",
          "1548:   CREATE TABLE t1(c0 INT PRIMARY KEY, c1 TEXT);",
          "1549:   INSERT INTO t1(c0, c1) VALUES (1, 'a');",
          "1550:   SELECT * FROM t0 WHERE '-1' BETWEEN 0 AND t0.c0;",
          "1551: } {1 a}",
          "1552: do_execsql_test where-26.2 {",
          "1553:   SELECT * FROM t1 WHERE '-1' BETWEEN 0 AND t1.c0;",
          "1554: } {1 a}",
          "1555: do_execsql_test where-26.3 {",
          "1556:   SELECT * FROM t0 WHERE '-1'>=0 AND '-1'<=t0.c0;",
          "1557: } {1 a}",
          "1558: do_execsql_test where-26.4 {",
          "1559:   SELECT * FROM t1 WHERE '-1'>=0 AND '-1'<=t1.c0;",
          "1560: } {1 a}",
          "1561: do_execsql_test where-26.5 {",
          "1562:   SELECT '-1' BETWEEN 0 AND t0.c0 FROM t0;",
          "1563: } {1}",
          "1564: do_execsql_test where-26.6 {",
          "1565:   SELECT '-1' BETWEEN 0 AND t1.c0 FROM t1;",
          "1566: } {1}",
          "1567: do_execsql_test where-26.7 {",
          "1568:   SELECT '-1'>=0 AND '-1'<=t0.c0 FROM t0;",
          "1569: } {1}",
          "1570: do_execsql_test where-26.8 {",
          "1571:   SELECT '-1'>=0 AND '-1'<=t1.c0 FROM t1;",
          "1572: } {1}",
          "",
          "---------------"
        ],
        "test/whereG.test||test/whereG.test": [
          "File: test/whereG.test -> test/whereG.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "266:   SELECT coalesce(a,a), x FROM t1, t2 ORDER BY 1, 2;",
          "267: } {1 3 1 4 9 3 9 4}",
          "270: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: # 2019-08-22",
          "270: # Ticket https://www.sqlite.org/src/info/7e07a3dbf5a8cd26",
          "271: #",
          "272: do_execsql_test 8.1 {",
          "273:   DROP TABLE IF EXISTS t0;",
          "274:   CREATE TABLE t0 (c0);",
          "275:   INSERT INTO t0(c0) VALUES ('a');",
          "276:   SELECT LIKELY(t0.rowid) <= '0' FROM t0;",
          "277: } {1}",
          "278: do_execsql_test 8.2 {",
          "279:   SELECT * FROM t0 WHERE LIKELY(t0.rowid) <= '0';",
          "280: } {a}",
          "281: do_execsql_test 8.3 {",
          "282:   SELECT (t0.rowid) <= '0' FROM t0;",
          "283: } {0}",
          "284: do_execsql_test 8.4 {",
          "285:   SELECT * FROM t0 WHERE (t0.rowid) <= '0';",
          "286: } {}",
          "287: do_execsql_test 8.5 {",
          "288:   SELECT unlikely(t0.rowid) <= '0', likelihood(t0.rowid,0.5) <= '0' FROM t0;",
          "289: } {1 1}",
          "290: do_execsql_test 8.6 {",
          "291:   SELECT * FROM t0 WHERE unlikely(t0.rowid) <= '0';",
          "292: } {a}",
          "293: do_execsql_test 8.7 {",
          "294:   SELECT * FROM t0 WHERE likelihood(t0.rowid, 0.5) <= '0';",
          "295: } {a}",
          "296: do_execsql_test 8.8 {",
          "297:   SELECT unlikely(t0.rowid <= '0'),",
          "298:          likely(t0.rowid <= '0'),",
          "299:          likelihood(t0.rowid <= '0',0.5)",
          "300:     FROM t0;",
          "301: } {0 0 0}",
          "302: do_execsql_test 8.9 {",
          "303:   SELECT * FROM t0 WHERE unlikely(t0.rowid <= '0');",
          "304: } {}",
          "305: do_execsql_test 8.10 {",
          "306:   SELECT * FROM t0 WHERE likelihood(t0.rowid <= '0', 0.5);",
          "307: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8cc8b30b4421ae22f2e63cea68f0d9e1440920a",
      "candidate_info": {
        "commit_hash": "d8cc8b30b4421ae22f2e63cea68f0d9e1440920a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d8cc8b30b4421ae22f2e63cea68f0d9e1440920a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzcheck.c"
        ],
        "message": "Fix a bug in fuzzcheck that cause it to overlook a pointer-map bug that was trigger by the fuzzcheck test data, and also fix the pointer-map bug.\n\nFossilOrigin-Name: cc42dd15100db28a9796254f69a4e367ea5eae29f546be055017cf3e12aa66ba",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/fuzzcheck.c||test/fuzzcheck.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 18740bd448887d618fafee0b5a7c004aa2f2632244f7d29e2428772baa36b828",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "993:     return;",
          "994:   }",
          "995:   offset = PTRMAP_PTROFFSET(iPtrmap, key);",
          "996:   if( offset<0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "995:   if( ((char*)sqlite3PagerGetExtra(pDbPage))[0]!=0 ){",
          "1000:     goto ptrmap_exit;",
          "1001:   }",
          "",
          "---------------"
        ],
        "test/fuzzcheck.c||test/fuzzcheck.c": [
          "File: test/fuzzcheck.c -> test/fuzzcheck.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "447:   if( iOfst+iAmt>pVFile->sz ){",
          "448:     memset(pData, 0, iAmt);",
          "449:     iAmt = (int)(pVFile->sz - iOfst);",
          "451:     return SQLITE_IOERR_SHORT_READ;",
          "452:   }",
          "453:   memcpy(pData, pVFile->a + iOfst, iAmt);",
          "",
          "[Removed Lines]",
          "450:     memcpy(pData, pVFile->a, iAmt);",
          "",
          "[Added Lines]",
          "450:     memcpy(pData, pVFile->a + iOfst, iAmt);",
          "",
          "---------------"
        ]
      }
    }
  ]
}