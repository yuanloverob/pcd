{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5976552a72f33438c293ab0584d981909955e866",
      "candidate_info": {
        "commit_hash": "5976552a72f33438c293ab0584d981909955e866",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5976552a72f33438c293ab0584d981909955e866",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the --max-data and --max-as options to dbfuzz2.  Also cause dbfuzz2 to show its maximum RSS size upon exit in standalone mode with the -v option.\n\nFossilOrigin-Name: 7ce93e824a954d1e0cf8d7343e59a2660175f42bd4dac02aed8ad77644e7eb2f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c11ae4fed89484f0a0061002861b5d599bbda8e40a1f0c33fdbe8cb072134d5c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150:         bVdbeDebug = 1;",
          "151:         continue;",
          "152:       }",
          "154:         struct rlimit x,y;",
          "155:         if( i+1==argc ){",
          "156:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "157:           exit(1);",
          "158:         }",
          "159:         memset(&x,0,sizeof(x));",
          "161:         y.rlim_cur = atoi(argv[++i]);",
          "162:         y.rlim_max = x.rlim_cur;",
          "164:         memset(&y,0,sizeof(y));",
          "168:         continue;",
          "169:       }",
          "170:     }",
          "",
          "[Removed Lines]",
          "153:       if( strcmp(z,\"max-stack\")==0 ){",
          "160:         getrlimit(RLIMIT_STACK, &x);",
          "163:         setrlimit(RLIMIT_STACK, &y);",
          "165:         getrlimit(RLIMIT_STACK, &y);",
          "166:         printf(\"Stack size limit changed from %d to %d\\n\",",
          "167:                (int)x.rlim_cur, (int)y.rlim_cur);",
          "",
          "[Added Lines]",
          "153:       if( strcmp(z,\"max-stack\")==0",
          "154:        || strcmp(z,\"max-data\")==0",
          "155:        || strcmp(z,\"max-as\")==0",
          "156:       ){",
          "158:         int resource = RLIMIT_STACK;",
          "159:         char *zType = \"RLIMIT_STACK\";",
          "164:         if( z[4]=='d' ){",
          "165:           resource = RLIMIT_DATA;",
          "166:           zType = \"RLIMIT_DATA\";",
          "167:         }",
          "168:         if( z[4]=='a' ){",
          "169:           resource = RLIMIT_AS;",
          "170:           zType = \"RLIMIT_AS\";",
          "171:         }",
          "173:         getrlimit(resource, &x);",
          "176:         setrlimit(resource, &y);",
          "178:         getrlimit(resource, &y);",
          "179:         printf(\"%s changed from %d to %d\\n\",",
          "180:                zType, (int)x.rlim_cur, (int)y.rlim_cur);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     }",
          "218:   }",
          "219:   if( eVerbosity>0 ){",
          "220:     printf(\"SQLite %s\\n\", sqlite3_sourceid());",
          "221:   }",
          "222:   return 0;",
          "223: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:     struct rusage x;",
          "235:     memset(&x, 0, sizeof(x));",
          "236:     if( getrusage(RUSAGE_SELF, &x)==0 ){",
          "237:       printf(\"Maximum RSS = %ld KB\\n\", x.ru_maxrss);",
          "238:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42ebb01e9fd94c94d4f90b0a59b46194aea28400",
      "candidate_info": {
        "commit_hash": "42ebb01e9fd94c94d4f90b0a59b46194aea28400",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/42ebb01e9fd94c94d4f90b0a59b46194aea28400",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/recover.test"
        ],
        "message": "Add the \"--lost-and-found\" option to the \".recover\" command. For setting the name of the orphaned rows table.\n\nFossilOrigin-Name: 67bb88e24c74d02ae0c4ac6ff2f873f6b0035ccefe5cccfc71c5686cbc76b4c3",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/recover.test||test/recover.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: };",
          "114: #define DBDATA_COLUMN_PGNO        0",
          "115: #define DBDATA_COLUMN_CELL        1",
          "116: #define DBDATA_COLUMN_FIELD       2",
          "117: #define DBDATA_COLUMN_VALUE       3",
          "118: #define DBDATA_COLUMN_SCHEMA      4",
          "124: #define DBDATA_SCHEMA             \\",
          "125:       \"CREATE TABLE x(\"           \\",
          "126:       \"  pgno INTEGER,\"           \\",
          "",
          "[Removed Lines]",
          "120: #define DBPTR_COLUMN_PGNO         0",
          "121: #define DBPTR_COLUMN_CHILD        1",
          "122: #define DBPTR_COLUMN_SCHEMA       2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:       \"  schema TEXT HIDDEN\"      \\",
          "131:       \")\"",
          "133: #define DBPTR_SCHEMA              \\",
          "134:       \"CREATE TABLE x(\"           \\",
          "135:       \"  pgno INTEGER,\"           \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: #define DBPTR_COLUMN_PGNO         0",
          "138: #define DBPTR_COLUMN_CHILD        1",
          "139: #define DBPTR_COLUMN_SCHEMA       2",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:   return (a[0]<<24)|(a[1]<<16)|(a[2]<<8)|a[3];",
          "290: }",
          "292: static int dbdataLoadPage(",
          "297: ){",
          "298:   int rc2;",
          "299:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "293:   DbdataCursor *pCsr,",
          "294:   u32 pgno,",
          "295:   u8 **ppPage,",
          "296:   int *pnPage",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 91df4b8e0386105d01614921e8410994b621404a3d46ec4af8687b8743c52d52",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3577:   \".prompt MAIN CONTINUE    Replace the standard prompts\",",
          "3578:   \".quit                    Exit this program\",",
          "3579:   \".read FILE               Read input from FILE\",",
          "3580:   \".restore ?DB? FILE       Restore content of DB (default \\\"main\\\") from FILE\",",
          "3581:   \".save FILE               Write in-memory database into FILE\",",
          "3582:   \".scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3579:   \".recover                 Recover as much data as possible from corrupt db.\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6208:   return z;",
          "6209: }",
          "6211: typedef struct RecoverTable RecoverTable;",
          "6212: struct RecoverTable {",
          "6218: };",
          "6223: static void recoverFreeTable(RecoverTable *pTab){",
          "6224:   if( pTab ){",
          "6226:     sqlite3_free(pTab->zQuoted);",
          "6227:     if( pTab->azlCol ){",
          "6228:       int i;",
          "",
          "[Removed Lines]",
          "6217:   int iPk;",
          "6225:     sqlite3_free(pTab->zName);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6235:   }",
          "6236: }",
          "",
          "[Removed Lines]",
          "6238: static RecoverTable *recoverOldTable(",
          "",
          "[Added Lines]",
          "6275: static RecoverTable *recoverNewTable(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6309:         }",
          "6310:       }",
          "6314:       pTab->azlCol = (char**)shellMalloc(&rc, sizeof(char*) * (nSqlCol+1));",
          "6315:       pTab->nCol = nSqlCol;",
          "",
          "[Removed Lines]",
          "6312:       pTab->zName = shellMPrintf(&rc, \"%s\", zName);",
          "6313:       pTab->zQuoted = shellMPrintf(&rc, \"%Q\", pTab->zName);",
          "",
          "[Added Lines]",
          "6349:       pTab->zQuoted = shellMPrintf(&rc, \"%Q\", zName);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "6349:   return pTab;",
          "6350: }",
          "6353:   ShellState *pState,",
          "6354:   int *pRc,",
          "6355:   int iRoot,",
          "",
          "[Removed Lines]",
          "6352: static RecoverTable *recoverNewTable(",
          "",
          "[Added Lines]",
          "6388: static RecoverTable *recoverFindTable(",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "6377:     if( sqlite3_stricmp(zType, \"table\")==0 ){",
          "6378:       zName = (const char*)sqlite3_column_text(pStmt, 1);",
          "6379:       zSql = (const char*)sqlite3_column_text(pStmt, 2);",
          "6381:       break;",
          "6382:     }",
          "6383:   }",
          "",
          "[Removed Lines]",
          "6380:       pRet = recoverOldTable(pRc, zName, zSql, bIntkey, nCol);",
          "",
          "[Added Lines]",
          "6415:       pRet = recoverNewTable(pRc, zName, zSql, bIntkey, nCol);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "6390: static RecoverTable *recoverOrphanTable(",
          "6391:   ShellState *pState,",
          "6392:   int *pRc,",
          "6393:   int nCol",
          "6394: ){",
          "6395:   RecoverTable *pTab = 0;",
          "6396:   if( nCol>=0 && *pRc==SQLITE_OK ){",
          "6397:     int i;",
          "6401:     );",
          "6404:     }",
          "6407:     pTab = (RecoverTable*)shellMalloc(pRc, sizeof(RecoverTable));",
          "6408:     if( pTab ){",
          "6411:       pTab->nCol = nCol;",
          "6412:       pTab->iPk = -2;",
          "6413:       if( nCol>0 ){",
          "",
          "[Removed Lines]",
          "6398:     raw_printf(pState->out,",
          "6399:         \"CREATE TABLE recover_orphan(rootpgno INTEGER, \"",
          "6400:         \"pgno INTEGER, nfield INTEGER, id INTEGER\"",
          "6402:     for(i=0; i<nCol; i++){",
          "6403:       raw_printf(pState->out, \", c%d\", i);",
          "6405:     raw_printf(pState->out, \");\\n\");",
          "6409:       pTab->zName = shellMPrintf(pRc, \"%s\", \"recover_orphan\");",
          "6410:       pTab->zQuoted = shellMPrintf(pRc, \"%Q\", pTab->zName);",
          "",
          "[Added Lines]",
          "6428:   const char *zLostAndFound,",
          "6439:     int iTab = 0;",
          "6440:     char *zTab = shellMPrintf(pRc, \"%s\", zLostAndFound);",
          "6441:     sqlite3_stmt *pTest = 0;",
          "6442:     shellPrepare(pState->db, pRc,",
          "6443:         \"SELECT 1 FROM recovery.schema WHERE name=?\", &pTest",
          "6445:     if( pTest ) sqlite3_bind_text(pTest, 1, zTab, -1, SQLITE_TRANSIENT);",
          "6446:     while( *pRc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pTest) ){",
          "6447:       shellReset(pRc, pTest);",
          "6448:       sqlite3_free(zTab);",
          "6449:       zTab = shellMPrintf(pRc, \"%s_%d\", zLostAndFound, iTab++);",
          "6450:       sqlite3_bind_text(pTest, 1, zTab, -1, SQLITE_TRANSIENT);",
          "6452:     shellFinalize(pRc, pTest);",
          "6456:       pTab->zQuoted = shellMPrintf(pRc, \"%Q\", zTab);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6419:           }",
          "6420:         }",
          "6421:       }",
          "6427:     }",
          "6428:   }",
          "6429:   return pTab;",
          "6430: }",
          "",
          "[Removed Lines]",
          "6422:     }",
          "6424:     if( *pRc!=SQLITE_OK ){",
          "6425:       recoverFreeTable(pTab);",
          "6426:       pTab = 0;",
          "",
          "[Added Lines]",
          "6469:       if( *pRc!=SQLITE_OK ){",
          "6470:         recoverFreeTable(pTab);",
          "6471:         pTab = 0;",
          "6472:       }else{",
          "6473:         raw_printf(pState->out,",
          "6474:             \"CREATE TABLE %s(rootpgno INTEGER, \"",
          "6475:             \"pgno INTEGER, nfield INTEGER, id INTEGER\", pTab->zQuoted",
          "6476:         );",
          "6477:         for(i=0; i<nCol; i++){",
          "6478:           raw_printf(pState->out, \", c%d\", i);",
          "6479:         }",
          "6480:         raw_printf(pState->out, \");\\n\");",
          "6481:       }",
          "6483:     sqlite3_free(zTab);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6443:   int i;",
          "6444:   int nOrphan = -1;",
          "6445:   RecoverTable *pOrphan = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6499:   const char *zLostAndFound = \"lost_and_found\";",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6452:     n = strlen(z);",
          "6453:     if( n<=17 && memcmp(\"-freelist-corrupt\", z, n)==0 ){",
          "6454:       bFreelist = 0;",
          "6456:     if( n<=12 && memcmp(\"-recovery-db\", z, n)==0 && i<(nArg-1) ){",
          "6457:       i++;",
          "6458:       zRecoveryDb = azArg[i];",
          "6459:     }",
          "6460:     else{",
          "6461:       raw_printf(stderr, \"unexpected option: %s\\n\", azArg[i]);",
          "6462:       raw_printf(stderr, \"options are:\\n\");",
          "6463:       raw_printf(stderr, \"    --freelist-corrupt\\n\");",
          "6464:       raw_printf(stderr, \"    --recovery-db DATABASE\\n\");",
          "6465:       return 1;",
          "6466:     }",
          "6467:   }",
          "",
          "[Removed Lines]",
          "6455:     }",
          "",
          "[Added Lines]",
          "6512:     }else",
          "6516:     }else",
          "6517:     if( n<=15 && memcmp(\"-lost-and-found\", z, n)==0 && i<(nArg-1) ){",
          "6518:       i++;",
          "6519:       zLostAndFound = azArg[i];",
          "6526:       raw_printf(stderr, \"    --lost-and-found TABLE-NAME\\n\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6599:   }",
          "6600:   shellFinalize(&rc, pLoop);",
          "6601:   pLoop = 0;",
          "6604:   shellPrepare(pState->db, &rc,",
          "6605:       \"SELECT pgno FROM recovery.map WHERE root=?\", &pPages",
          "",
          "[Removed Lines]",
          "6602:   pOrphan = recoverOrphanTable(pState, &rc, nOrphan);",
          "",
          "[Added Lines]",
          "6664:   pOrphan = recoverOrphanTable(pState, &rc, zLostAndFound, nOrphan);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6624:     int bNoop = 0;",
          "6625:     RecoverTable *pTab;",
          "6628:     if( bNoop || rc ) continue;",
          "6629:     if( pTab==0 ) pTab = pOrphan;",
          "6632:       raw_printf(pState->out, \"DELETE FROM sqlite_sequence;\\n\");",
          "6633:     }",
          "6634:     sqlite3_bind_int(pPages, 1, iRoot);",
          "",
          "[Removed Lines]",
          "6627:     pTab = recoverNewTable(pState, &rc, iRoot, bIntkey, nCol, &bNoop);",
          "6631:     if( 0==sqlite3_stricmp(pTab->zName, \"sqlite_sequence\") ){",
          "",
          "[Added Lines]",
          "6689:     pTab = recoverFindTable(pState, &rc, iRoot, bIntkey, nCol, &bNoop);",
          "6693:     if( 0==sqlite3_stricmp(pTab->zQuoted, \"'sqlite_sequence'\") ){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7042:     p->nErr = 0;",
          "7043:     if( zLike==0 ){",
          "7044:       run_schema_dump_query(p,",
          "7048:       run_schema_dump_query(p,",
          "7052:       run_table_dump_query(p,",
          "7056:     }else{",
          "7057:       char *zSql;",
          "7058:       zSql = sqlite3_mprintf(",
          "7062:       run_schema_dump_query(p,zSql);",
          "7063:       sqlite3_free(zSql);",
          "7064:       zSql = sqlite3_mprintf(",
          "7069:       run_table_dump_query(p, zSql, 0);",
          "7070:       sqlite3_free(zSql);",
          "7071:     }",
          "",
          "[Removed Lines]",
          "7045:           \"SELECT name, type, sql FROM sqlite_master \"",
          "7046:           \"WHERE sql NOT NULL AND type=='table' AND name!='sqlite_sequence'\"",
          "7047:           );",
          "7049:           \"SELECT name, type, sql FROM sqlite_master \"",
          "7050:           \"WHERE name=='sqlite_sequence'\"",
          "7051:           );",
          "7053:           \"SELECT sql FROM sqlite_master \"",
          "7054:           \"WHERE sql NOT NULL AND type IN ('index','trigger','view')\", 0",
          "7055:           );",
          "7059:           \"SELECT name, type, sql FROM sqlite_master \"",
          "7060:           \"WHERE tbl_name LIKE %Q AND type=='table'\"",
          "7061:           \"  AND sql NOT NULL\", zLike);",
          "7065:           \"SELECT sql FROM sqlite_master \"",
          "7066:           \"WHERE sql NOT NULL\"",
          "7067:           \"  AND type IN ('index','trigger','view')\"",
          "7068:           \"  AND tbl_name LIKE %Q\", zLike);",
          "",
          "[Added Lines]",
          "7107:         \"SELECT name, type, sql FROM sqlite_master \"",
          "7108:         \"WHERE sql NOT NULL AND type=='table' AND name!='sqlite_sequence'\"",
          "7109:       );",
          "7111:         \"SELECT name, type, sql FROM sqlite_master \"",
          "7112:         \"WHERE name=='sqlite_sequence'\"",
          "7113:       );",
          "7115:         \"SELECT sql FROM sqlite_master \"",
          "7116:         \"WHERE sql NOT NULL AND type IN ('index','trigger','view')\", 0",
          "7117:       );",
          "7121:         \"SELECT name, type, sql FROM sqlite_master \"",
          "7122:         \"WHERE tbl_name LIKE %Q AND type=='table'\"",
          "7123:         \"  AND sql NOT NULL\", zLike);",
          "7127:         \"SELECT sql FROM sqlite_master \"",
          "7128:         \"WHERE sql NOT NULL\"",
          "7129:         \"  AND type IN ('index','trigger','view')\"",
          "7130:         \"  AND tbl_name LIKE %Q\", zLike);",
          "",
          "---------------"
        ],
        "test/recover.test||test/recover.test": [
          "File: test/recover.test -> test/recover.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   }",
          "40: }",
          "43:   set fd [open \"|$::CLI test.db .recover\"]",
          "44:   fconfigure $fd -encoding binary",
          "45:   fconfigure $fd -translation binary",
          "",
          "[Removed Lines]",
          "42: proc do_recover_test {tn} {",
          "",
          "[Added Lines]",
          "42: proc do_recover_test {tn {tsql {}} {res {}}} {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:   forcedelete test.db2",
          "50:   sqlite3 db2 test.db2",
          "52:   execsql $sql db2",
          "54:   db2 close",
          "55: }",
          "",
          "[Removed Lines]",
          "51:   breakpoint",
          "53:   uplevel [list do_test $tn [list compare_dbs db db2] {}]",
          "",
          "[Added Lines]",
          "52:   if {$tsql==\"\"} {",
          "53:     uplevel [list do_test $tn [list compare_dbs db db2] {}]",
          "54:   } else {",
          "55:     uplevel [list do_execsql_test -db db2 $tn $tsql $res]",
          "56:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97: do_recover_test 2.1.1",
          "99: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: do_execsql_test 2.2.0 {",
          "103:   PRAGMA writable_schema = 1;",
          "104:   DELETE FROM sqlite_master WHERE name='t1';",
          "105: }",
          "106: do_recover_test 2.2.1 {",
          "107:   SELECT name FROM sqlite_master",
          "108: } {lost_and_found}",
          "110: do_execsql_test 2.3.0 {",
          "111:   CREATE TABLE lost_and_found(a, b, c);",
          "112: }",
          "113: do_recover_test 2.3.1 {",
          "114:   SELECT name FROM sqlite_master",
          "115: } {lost_and_found lost_and_found_0}",
          "117: do_execsql_test 2.4.0 {",
          "118:   CREATE TABLE lost_and_found_0(a, b, c);",
          "119: }",
          "120: do_recover_test 2.4.1 {",
          "121:   SELECT name FROM sqlite_master;",
          "122:   SELECT * FROM lost_and_found_1;",
          "123: } {lost_and_found lost_and_found_0 lost_and_found_1",
          "124:   2 2 3 {} 2 3 1",
          "125:   2 2 3 {} 5 6 4",
          "126:   2 2 3 {} 8 9 7",
          "127: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "abd7449478c7a1ed47de9b86e8bdac04ebd5e235",
      "candidate_info": {
        "commit_hash": "abd7449478c7a1ed47de9b86e8bdac04ebd5e235",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/abd7449478c7a1ed47de9b86e8bdac04ebd5e235",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another corrupt-database-handling problem in fts5.\n\nFossilOrigin-Name: 9876ae1b802a449aacbbdd42778653edc19e29315dc627c23ab7493d6492c800",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2327:  search_success:",
          "2328:   pIter->iLeafOffset = iOff + nNew;",
          "2330:     p->rc = FTS5_CORRUPT;",
          "2331:     return;",
          "2332:   }",
          "",
          "[Removed Lines]",
          "2329:   if( pIter->iLeafOffset>n ){",
          "",
          "[Added Lines]",
          "2329:   if( pIter->iLeafOffset>n || nNew<1 ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2430: do_catchsql_test 24.1 {",
          "2431:   UPDATE t1 SET b=quote(zeroblob(200)) WHERE a MATCH 'thread*';",
          "2434: do_catchsql_test 24.2 {",
          "2435:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "",
          "[Removed Lines]",
          "2432: } {0 {}}",
          "",
          "[Added Lines]",
          "2432: } {1 {database disk image is malformed}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6771:   SELECT term FROM t4 WHERE term LIKE 'oase';",
          "6772: } {1 {database disk image is malformed}}",
          "6775: sqlite3_fts5_may_be_corrupt 0",
          "6776: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6774: #--------------------------------------------------------------------------",
          "6775: reset_db",
          "6776: do_test 50.0 {",
          "6777:   sqlite3 db {}",
          "6778:   db deserialize [decode_hexdb {",
          "6779: | size 40960 pagesize 4096 filename crash-695bce8a3e107c.db",
          "6780: | page 1 offset 0",
          "6781: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "6782: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 0a   .....@  ........",
          "6783: |     32: 00 00 00 00 00 00 00 00 00 00 00 0d 00 00 00 04   ................",
          "6784: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "6785: |     96: 00 00 00 00 0d 00 00 00 0d 0b 6e 00 0f a3 0f 4c   ..........n....L",
          "6786: |    112: 0e e1 0e 81 0e 24 0d cc 0d 72 0d 1b 0c b0 0c 50   .....$...r.....P",
          "6787: |    128: 0b f8 0b b3 0b 6e 00 00 00 00 00 00 00 00 00 00   .....n..........",
          "6788: |   2912: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 43 0d   ..............C.",
          "6789: |   2928: 06 17 11 11 08 75 74 61 62 6c 65 74 34 74 34 43   .....utablet4t4C",
          "6790: |   2944: 52 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41   REATE VIRTUAL TA",
          "6791: |   2960: 42 4c 45 20 74 34 20 55 53 49 4e 47 20 66 74 73   BLE t4 USING fts",
          "6792: |   2976: 35 76 6f 63 61 62 28 27 74 32 27 2c 20 27 72 6f   5vocab('t2', 'ro",
          "6793: |   2992: 77 27 29 43 0c 06 17 11 11 08 75 74 61 62 6c 65   w')C......utable",
          "6794: |   3008: 74 33 74 33 43 52 45 41 54 45 20 56 49 52 54 55   t3t3CREATE VIRTU",
          "6795: |   3024: 41 4c 20 54 41 42 4c 45 20 74 33 20 55 53 49 4e   AL TABLE t3 USIN",
          "6796: |   3040: 47 20 66 74 73 35 76 6f 63 61 62 28 27 74 31 27   G fts5vocab('t1'",
          "6797: |   3056: 2c 20 27 72 6f 77 27 29 56 0b 06 17 1f 1f 01 7d   , 'row')V.......",
          "6798: |   3072: 74 61 62 6c 65 74 32 5f 63 6f 6e 66 69 67 74 32   tablet2_configt2",
          "6799: |   3088: 5f 63 6f 6e 66 69 67 0a 43 52 45 41 54 45 20 54   _config.CREATE T",
          "6800: |   3104: 41 42 4c 45 20 27 74 32 5f 63 6f 6e 66 69 67 27   ABLE 't2_config'",
          "6801: |   3120: 28 6b 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   (k PRIMARY KEY,",
          "6802: |   3136: 76 29 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44   v) WITHOUT ROWID",
          "6803: |   3152: 5e 0a 07 17 21 21 01 81 07 74 61 62 6c 65 74 32   ^...!!...tablet2",
          "6804: |   3168: 5f 63 6f 6e 74 65 6e 74 74 32 5f 63 6f 6e 74 65   _contentt2_conte",
          "6805: |   3184: 6e 74 09 43 52 45 41 54 45 20 54 41 42 4c 45 20   nt.CREATE TABLE",
          "6806: |   3200: 27 74 32 5f 63 6f 6e 74 65 6e 74 27 28 69 64 20   't2_content'(id",
          "6807: |   3216: 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59 20   INTEGER PRIMARY",
          "6808: |   3232: 4b 45 59 2c 20 63 30 2c 20 63 31 2c 20 63 32 29   KEY, c0, c1, c2)",
          "6809: |   3248: 69 09 07 17 19 19 01 81 2d 74 61 62 6c 65 74 32   i.......-tablet2",
          "6810: |   3264: 5f 69 64 78 74 32 5f 69 64 78 08 43 52 45 41 54   _idxt2_idx.CREAT",
          "6811: |   3280: 45 20 54 41 42 4c 45 20 27 74 32 5f 69 64 78 27   E TABLE 't2_idx'",
          "6812: |   3296: 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20 70 67   (segid, term, pg",
          "6813: |   3312: 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45 59 28   no, PRIMARY KEY(",
          "6814: |   3328: 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20 57 49   segid, term)) WI",
          "6815: |   3344: 54 48 4f 55 54 20 52 4f 57 49 44 55 08 07 17 1b   THOUT ROWIDU....",
          "6816: |   3360: 1b 01 81 01 74 61 62 6c 65 74 32 5f 64 61 74 61   ....tablet2_data",
          "6817: |   3376: 74 32 5f 64 61 74 61 07 43 52 45 41 54 45 20 54   t2_data.CREATE T",
          "6818: |   3392: 41 42 4c 45 20 27 74 32 5f 64 61 74 61 27 28 69   ABLE 't2_data'(i",
          "6819: |   3408: 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52   d INTEGER PRIMAR",
          "6820: |   3424: 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c 4f   Y KEY, block BLO",
          "6821: |   3440: 42 29 58 07 07 17 11 11 08 81 1d 74 61 62 6c 65   B)X........table",
          "6822: |   3456: 74 32 74 32 43 52 45 41 54 45 20 56 49 52 54 55   t2t2CREATE VIRTU",
          "6823: |   3472: 41 4c 20 54 41 42 4c 45 20 74 32 20 55 53 49 4e   AL TABLE t2 USIN",
          "6824: |   3488: 47 20 66 74 73 35 28 27 61 27 2c 5b 62 5d 2c 22   G fts5('a',[b],.",
          "6825: |   3504: 63 22 2c 64 65 74 61 69 6c 3d 6e 6f 6e 65 2c 63   c.,detail=none,c",
          "6826: |   3520: 6f 6c 75 6d 6e 73 69 7a 65 3d 30 29 56 06 06 17   olumnsize=0)V...",
          "6827: |   3536: 1f 1f 01 7d 74 61 62 6c 65 74 31 5f 63 6f 6e 66   ....tablet1_conf",
          "6828: |   3552: 69 67 74 31 5f 63 6f 6e 66 69 67 06 43 52 45 41   igt1_config.CREA",
          "6829: |   3568: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f 6e   TE TABLE 't1_con",
          "6830: |   3584: 66 69 67 27 28 6b 20 50 52 49 4d 41 52 59 20 4b   fig'(k PRIMARY K",
          "6831: |   3600: 45 59 2c 20 76 29 20 57 49 54 48 4f 55 54 20 52   EY, v) WITHOUT R",
          "6832: |   3616: 4f 57 49 44 5b 05 07 17 21 21 01 81 01 74 61 62   OWID[...!!...tab",
          "6833: |   3632: 6c 65 74 31 5f 64 6f 63 73 69 7a 65 74 31 5f 64   let1_docsizet1_d",
          "6834: |   3648: 6f 63 73 69 7a 65 05 43 52 45 41 54 45 20 54 41   ocsize.CREATE TA",
          "6835: |   3664: 42 4c 45 20 27 74 31 5f 64 6f 63 73 69 7a 65 27   BLE 't1_docsize'",
          "6836: |   3680: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "6837: |   3696: 41 52 59 20 4b 45 59 2c 20 73 7a 20 42 4c 4f 42   ARY KEY, sz BLOB",
          "6838: |   3712: 29 5e 04 07 17 21 21 01 81 07 74 61 62 6c 65 74   )^...!!...tablet",
          "6839: |   3728: 31 5f 63 6f 6e 74 65 6e 74 74 31 5f 63 6f 6e 74   1_contentt1_cont",
          "6840: |   3744: 65 6e 74 04 43 52 45 41 54 45 20 54 41 42 4c 45   ent.CREATE TABLE",
          "6841: |   3760: 20 27 74 31 5f 63 6f 6e 74 65 6e 74 27 28 69 64    't1_content'(id",
          "6842: |   3776: 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59    INTEGER PRIMARY",
          "6843: |   3792: 20 4b 45 59 2c 20 63 30 2c 20 63 31 2c 20 63 32    KEY, c0, c1, c2",
          "6844: |   3808: 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65 74   )i.......-tablet",
          "6845: |   3824: 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45 41   1_idxt1_idx.CREA",
          "6846: |   3840: 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64 78   TE TABLE 't1_idx",
          "6847: |   3856: 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20 70   '(segid, term, p",
          "6848: |   3872: 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45 59   gno, PRIMARY KEY",
          "6849: |   3888: 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20 57   (segid, term)) W",
          "6850: |   3904: 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07 17   ITHOUT ROWIDU...",
          "6851: |   3920: 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61 74   .....tablet1_dat",
          "6852: |   3936: 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45 20   at1_data.CREATE",
          "6853: |   3952: 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27 28   TABLE 't1_data'(",
          "6854: |   3968: 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41   id INTEGER PRIMA",
          "6855: |   3984: 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42 4c   RY KEY, block BL",
          "6856: |   4000: 4f 42 29 5b 01 07 17 11 11 08 81 23 74 61 62 6c   OB)[.......#tabl",
          "6857: |   4016: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "6858: |   4032: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "6859: |   4048: 4e 47 20 66 74 73 35 28 61 2c 62 20 75 6e 69 6e   NG fts5(a,b unin",
          "6860: |   4064: 64 65 78 65 64 2c 63 2c 74 6f 6b 65 6e 69 7a 65   dexed,c,tokenize",
          "6861: |   4080: 3d 22 70 6f 72 74 65 72 20 61 73 63 69 69 22 29   =.porter ascii.)",
          "6862: | page 2 offset 4096",
          "6863: |      0: 0d 0f 68 00 05 0f 13 00 0f e6 0f 13 0f a8 0f 7c   ..h............|",
          "6864: |     16: 0f 2a 00 00 00 00 00 00 00 00 00 00 00 00 00 00   .*..............",
          "6865: |   3856: 00 00 00 15 0a 03 00 30 00 00 00 00 01 03 03 00   .......0........",
          "6866: |   3872: 03 01 01 01 02 01 01 03 01 01 37 8c 80 80 80 80   ..........7.....",
          "6867: |   3888: 01 03 00 74 00 20 68 20 69 0d 00 00 00 03 0f e8   ...t. h i.......",
          "6868: |   3904: 00 0f f8 0f f0 0f e8 00 00 00 00 00 00 00 00 00   ................",
          "6869: | page 5 offset 16384",
          "6870: |   4064: 00 00 00 00 00 00 00 00 06 03 03 00 12 03 00 00   ................",
          "6871: |   4080: 60 20 30 d6 20 30 00 30 60 10 30 01 20 30 00 30   ` 0. 0.0`.0. 0.0",
          "6872: | page 6 offset 20480",
          "6873: |      0: a0 00 00 00 10 ff 40 00 ff 00 00 00 00 00 00 00   ......@.........",
          "6874: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "6875: | page 7 offset 24576",
          "6876: |      0: 0d 00 00 00 03 0f 9e 00 0f e6 0f ef 0f 9e 00 00   ................",
          "6877: |   3984: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 41 84   ..............A.",
          "6878: |   4000: 80 80 80 80 01 04 00 81 06 00 00 00 34 02 30 61   ............4.0a",
          "6879: |   4016: 01 01 00 00 00 00 00 00 00 00 00 11 87 89 06 26   ...............&",
          "6880: |   4032: 01 64 01 01 01 65 01 01 01 66 01 01 01 67 01 01   .d...e...f...g..",
          "6881: |   4048: 01 01 01 68 01 01 01 01 01 69 01 01 01 04 06 06   ...h.....i......",
          "6882: |   4064: 06 04 44 00 06 06 07 01 03 00 14 03 09 09 09 0f   ..D.............",
          "6883: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "6884: | page 8 offset 28672",
          "6885: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "6886: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "6887: | page 9 offset 32768",
          "6888: |      0: 0d 00 00 00 9d 0f be 00 0f ea 0f d4 0f be 00 00   ................",
          "6889: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 14 03   ................",
          "6890: |   4032: 05 00 17 17 17 61 20 62 20 63 67 20 68 20 69 67   .....a b cg h ig",
          "6891: |   4048: 20 68 20 69 14 02 05 00 17 17 17 67 20 68 20 69    h i.......g h i",
          "6892: |   4064: 61 20 62 20 63 67 20 68 20 69 14 01 05 00 17 17   a b cg h i......",
          "6893: |   4080: 17 61 20 62 20 63 64 20 65 20 66 67 20 68 20 69   .a b cd e fg h i",
          "6894: | page 10 offset 36864",
          "6895: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "6896: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "6897: | end crash-695bce8a3e107c.db",
          "6898: }]} {}",
          "6900: do_catchsql_test 50.1 {",
          "6901:   SELECT term FROM t4 WHERE term LIKE '\u00bbas';",
          "6902: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 80151d7e3b9fd84086874a1cebed024b9e14005ea2d0108cf6efcd07373fcf51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0ea9432a12c01597951967a18e530df1b4bffd1",
      "candidate_info": {
        "commit_hash": "b0ea9432a12c01597951967a18e530df1b4bffd1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b0ea9432a12c01597951967a18e530df1b4bffd1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btreeInt.h"
        ],
        "message": "Defer computing the MemPage.nFree value of an in-memory btree page until it is actually needed, since for many pages it is never needed. This checkin works sufficiently to prove the concept, but still has issues with exception handling.\n\nFossilOrigin-Name: 1d43ee4000b71f5c6d49244dee96358c567f09ba3451b9d22895a796d3f61ad6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btreeInt.h||src/btreeInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: db74a56af73d92b7a9d43ceda7e4540915c580c68a0266b4ddefb9e0d5cbcbeb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1506:   data[hdr+7] = 0;",
          "1508:  defragment_out:",
          "1509:   if( data[hdr+7]+cbrk-iCellFirst!=pPage->nFree ){",
          "1510:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1511:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1509:   assert( pPage->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1657:   testcase( gap+2+nByte==top );",
          "1658:   if( gap+2+nByte>top ){",
          "1659:     assert( pPage->nCell>0 || CORRUPT_DB );",
          "1660:     rc = defragmentPage(pPage, MIN(4, pPage->nFree - (2+nByte)));",
          "1661:     if( rc ) return rc;",
          "1662:     top = get2byteNotZero(&data[hdr+5]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1661:     assert( pPage->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1845:   return SQLITE_OK;",
          "1846: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1854: static int btreeComputeFreeSpace(MemPage *pPage){",
          "1864:   assert( pPage->pBt!=0 );",
          "1865:   assert( pPage->pBt->db!=0 );",
          "1866:   assert( sqlite3_mutex_held(pPage->pBt->mutex) );",
          "1867:   assert( pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) );",
          "1868:   assert( pPage == sqlite3PagerGetExtra(pPage->pDbPage) );",
          "1869:   assert( pPage->aData == sqlite3PagerGetData(pPage->pDbPage) );",
          "1870:   assert( pPage->isInit==1 );",
          "1871:   assert( pPage->nFree<0 );",
          "1873:   usableSize = pPage->pBt->usableSize;",
          "1874:   hdr = pPage->hdrOffset;",
          "1875:   data = pPage->aData;",
          "1879:   top = get2byteNotZero(&data[hdr+5]);",
          "1880:   iCellFirst = hdr + 8 + pPage->childPtrSize + 2*pPage->nCell;",
          "1881:   iCellLast = usableSize - 4;",
          "1887:   pc = get2byte(&data[hdr+1]);",
          "1889:   if( pc>0 ){",
          "1890:     u32 next, size;",
          "1891:     if( pc<iCellFirst ){",
          "1895:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1896:     }",
          "1897:     while( 1 ){",
          "1898:       if( pc>iCellLast ){",
          "1900:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1901:       }",
          "1902:       next = get2byte(&data[pc]);",
          "1903:       size = get2byte(&data[pc+2]);",
          "1904:       nFree = nFree + size;",
          "1905:       if( next<=pc+size+3 ) break;",
          "1906:       pc = next;",
          "1907:     }",
          "1908:     if( next>0 ){",
          "1910:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1911:     }",
          "1912:     if( pc+size>(unsigned int)usableSize ){",
          "1914:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1915:     }",
          "1916:   }",
          "1925:   if( nFree>usableSize ){",
          "1926:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1927:   }",
          "1928:   pPage->nFree = (u16)(nFree - iCellFirst);",
          "1929:   return SQLITE_OK;",
          "1930: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1890:   pPage->aDataEnd = &data[usableSize];",
          "1891:   pPage->aCellIdx = &data[cellOffset];",
          "1892:   pPage->aDataOfst = &data[pPage->childPtrSize];",
          "1899:   pPage->nCell = get2byte(&data[hdr+3]);",
          "",
          "[Removed Lines]",
          "1896:   top = get2byteNotZero(&data[hdr+5]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1909:   assert( pPage->nCell>0 || top==usableSize || CORRUPT_DB );",
          "",
          "[Added Lines]",
          "1987:   assert( pPage->nCell>0",
          "1988:        || get2byteNotZero(&data[hdr+5])==usableSize",
          "1989:        || CORRUPT_DB );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1937:     }",
          "1938:     if( !pPage->leaf ) iCellLast++;",
          "1939:   }",
          "1987:   pPage->isInit = 1;",
          "1988:   return SQLITE_OK;",
          "1989: }",
          "",
          "[Removed Lines]",
          "1945:   pc = get2byte(&data[hdr+1]);",
          "1947:   if( pc>0 ){",
          "1948:     u32 next, size;",
          "1949:     if( pc<iCellFirst ){",
          "1953:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1954:     }",
          "1955:     while( 1 ){",
          "1956:       if( pc>iCellLast ){",
          "1958:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1959:       }",
          "1960:       next = get2byte(&data[pc]);",
          "1961:       size = get2byte(&data[pc+2]);",
          "1962:       nFree = nFree + size;",
          "1963:       if( next<=pc+size+3 ) break;",
          "1964:       pc = next;",
          "1965:     }",
          "1966:     if( next>0 ){",
          "1968:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1969:     }",
          "1970:     if( pc+size>(unsigned int)usableSize ){",
          "1972:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1973:     }",
          "1974:   }",
          "1983:   if( nFree>usableSize ){",
          "1984:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1985:   }",
          "1986:   pPage->nFree = (u16)(nFree - iCellFirst);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2128:   if( pgno>btreePagecount(pBt) ){",
          "2129:     rc = SQLITE_CORRUPT_BKPT;",
          "2131:   }",
          "2132:   rc = sqlite3PagerGet(pBt->pPager, pgno, (DbPage**)&pDbPage, bReadOnly);",
          "2133:   if( rc ){",
          "2135:   }",
          "2137:   if( (*ppPage)->isInit==0 ){",
          "2138:     btreePageFromDbPage(pDbPage, pgno, pBt);",
          "2139:     rc = btreeInitPage(*ppPage);",
          "2140:     if( rc!=SQLITE_OK ){",
          "2143:     }",
          "2144:   }",
          "2145:   assert( (*ppPage)->pgno==pgno );",
          "",
          "[Removed Lines]",
          "2130:     goto getAndInitPage_error;",
          "2134:     goto getAndInitPage_error;",
          "2141:       releasePage(*ppPage);",
          "2142:       goto getAndInitPage_error;",
          "",
          "[Added Lines]",
          "2164:     goto getAndInitPage_error1;",
          "2168:     goto getAndInitPage_error1;",
          "2175:       goto getAndInitPage_error2;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2150:   if( pCur && ((*ppPage)->nCell<1 || (*ppPage)->intKey!=pCur->curIntKey) ){",
          "2151:     rc = SQLITE_CORRUPT_PGNO(pgno);",
          "2154:   }",
          "2155:   return SQLITE_OK;",
          "2158:   if( pCur ){",
          "2159:     pCur->iPage--;",
          "2160:     pCur->pPage = pCur->apPage[pCur->iPage];",
          "",
          "[Removed Lines]",
          "2152:     releasePage(*ppPage);",
          "2153:     goto getAndInitPage_error;",
          "2157: getAndInitPage_error:",
          "",
          "[Added Lines]",
          "2185:     goto getAndInitPage_error2;",
          "2189: getAndInitPage_error2:",
          "2190:   releasePage(*ppPage);",
          "2191: getAndInitPage_error1:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6566:   assert( CORRUPT_DB || sz==cellSize(pPage, idx) );",
          "6567:   assert( sqlite3PagerIswriteable(pPage->pDbPage) );",
          "6568:   assert( sqlite3_mutex_held(pPage->pBt->mutex) );",
          "6569:   data = pPage->aData;",
          "6570:   ptr = &pPage->aCellIdx[2*idx];",
          "6571:   pc = get2byte(ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6603:   assert( pPage->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6638:   assert( sz==pPage->xCellSize(pPage, pCell) || (sz==8 && iChild>0) );",
          "6639:   if( pPage->nOverflow || sz+2>pPage->nFree ){",
          "6640:     if( pTemp ){",
          "6641:       memcpy(pTemp, pCell, sz);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6674:   assert( pPage->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7187:   assert( sqlite3_mutex_held(pPage->pBt->mutex) );",
          "7188:   assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "7189:   assert( pPage->nOverflow==1 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7228:   if( pPage->nFree<0 ){",
          "7229:     rc = btreeComputeFreeSpace(pPage);",
          "7230:     if( rc ) return rc;",
          "7231:   }",
          "7232:   if( pParent->nFree<0 ){",
          "7233:     rc = btreeComputeFreeSpace(pParent);",
          "7234:     if( rc ) return rc;",
          "7235:   }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7466:   if( !aOvflSpace ){",
          "7467:     return SQLITE_NOMEM_BKPT;",
          "7468:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7514:   if( pParent->nFree<0 ){",
          "7515:     rc = btreeComputeFreeSpace(pParent);",
          "7516:     if( rc ) return rc;",
          "7517:   }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7501:   pgno = get4byte(pRight);",
          "7502:   while( 1 ){",
          "7503:     rc = getAndInitPage(pBt, pgno, &apOld[i], 0, 0);",
          "7504:     if( rc ){",
          "7505:       memset(apOld, 0, (i+1)*sizeof(MemPage*));",
          "7506:       goto balance_cleanup;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7553:     if( rc==0 && apOld[i]->nFree<0 ){",
          "7554:       rc = btreeComputeFreeSpace(apOld[i]);",
          "7555:     }",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7704:       b.apEnd[k] = pParent->aDataEnd;",
          "7705:       b.ixNx[k] = cntOld[i]+1;",
          "7706:     }",
          "7707:     szNew[i] = usableSpace - p->nFree;",
          "7708:     for(j=0; j<p->nOverflow; j++){",
          "7709:       szNew[i] += 2 + p->xCellSize(p, p->apOvfl[j]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7759:     assert( p->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "8247:     int iPage = pCur->iPage;",
          "8248:     MemPage *pPage = pCur->pPage;",
          "8250:     if( iPage==0 ){",
          "8251:       if( pPage->nOverflow ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8303:     if( pPage->nFree<0 ){",
          "8304:       rc = btreeComputeFreeSpace(pPage);",
          "8305:       if( rc ) break;",
          "8306:     }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8621:   pPage = pCur->pPage;",
          "8622:   assert( pPage->intKey || pX->nKey>=0 );",
          "8623:   assert( pPage->leaf || !pPage->intKey );",
          "8625:   TRACE((\"INSERT: table=%d nkey=%lld ndata=%d page=%d %s\\n\",",
          "8626:           pCur->pgnoRoot, pX->nKey, pX->nData, pPage->pgno,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8681:   if( pPage->nFree<0 ){",
          "8682:     rc = btreeComputeFreeSpace(pPage);",
          "8683:     if( rc ) return rc;",
          "8684:   }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8771:   iCellIdx = pCur->ix;",
          "8772:   pPage = pCur->pPage;",
          "8773:   pCell = findCell(pPage, iCellIdx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8835:   if( pPage->nFree<0 && btreeComputeFreeSpace(pPage) ) return SQLITE_CORRUPT;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8841:     Pgno n;",
          "8842:     unsigned char *pTmp;",
          "8844:     if( iCellDepth<pCur->iPage-1 ){",
          "8845:       n = pCur->apPage[iCellDepth+1]->pgno;",
          "8846:     }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8906:     if( pLeaf->nFree<0 ){",
          "8907:       rc = btreeComputeFreeSpace(pLeaf);",
          "8908:       if( rc ) return rc;",
          "8909:     }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "9732:                    \"btreeInitPage() returns error code %d\", rc);",
          "9733:     goto end_of_check;",
          "9734:   }",
          "9735:   data = pPage->aData;",
          "9736:   hdr = pPage->hdrOffset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9801:   if( (rc = btreeComputeFreeSpace(pPage))!=0 ){",
          "9802:     assert( rc==SQLITE_CORRUPT );",
          "9803:     checkAppendMsg(pCheck, \"free space corruption\", rc);",
          "9804:     goto end_of_check;",
          "9805:   }",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ]
      }
    },
    {
      "candidate_hash": "8e7e517b686a7ed5f70de5834aaf36708f6b15f2",
      "candidate_info": {
        "commit_hash": "8e7e517b686a7ed5f70de5834aaf36708f6b15f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8e7e517b686a7ed5f70de5834aaf36708f6b15f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/msvc.h"
        ],
        "message": "Correction to the #if in the previous check-in.\n\nFossilOrigin-Name: 30dc05ac12910d318a737f8d7a0e895e5c42ff4c53472aeebc89f052eac05deb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/msvc.h||src/msvc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c02832e0c4351ced9d2391f09ee071c65a74b85a0509bf58f045afeb166f48c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/msvc.h||src/msvc.h": [
          "File: src/msvc.h -> src/msvc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #pragma warning(disable : 4706)",
          "37: #undef SQLITE_4_BYTE_ALIGNED_MALLOC",
          "38: #define SQLITE_4_BYTE_ALIGNED_MALLOC",
          "",
          "[Removed Lines]",
          "36: #if !defined(_WIN64)",
          "",
          "[Added Lines]",
          "36: #if defined(_MSC_VER) && !defined(_WIN64)",
          "",
          "---------------"
        ]
      }
    }
  ]
}