{
  "cve_id": "CVE-2016-6873",
  "cve_desc": "Self recursion in compact in Facebook HHVM before 3.15.0 allows attackers to have unspecified impact via unknown vectors.",
  "repo": "facebook/hhvm",
  "patch_hash": "e264f04ae825a5d97758130cf8eec99862517e7e",
  "patch_info": {
    "commit_hash": "e264f04ae825a5d97758130cf8eec99862517e7e",
    "repo": "facebook/hhvm",
    "commit_url": "https://github.com/facebook/hhvm/commit/e264f04ae825a5d97758130cf8eec99862517e7e",
    "files": [
      "hphp/runtime/ext/array/ext_array.cpp",
      "hphp/test/slow/array_functions/self_recursive.php",
      "hphp/test/slow/array_functions/self_recursive.php.expectf"
    ],
    "message": "Fix self recursion in compact\n\nSummary: There were no checks at all.\n\nReviewed By: alexmalyshev\n\nDifferential Revision: D3623763\n\nfbshipit-source-id: 9d708deca05bbd121503e8f323b4f295fde8e835",
    "before_after_code_files": [
      "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
      "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
      "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
    ]
  },
  "patch_diff": {
    "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp": [
      "File: hphp/runtime/ext/array/ext_array.cpp -> hphp/runtime/ext/array/ext_array.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "379:   arr1.merge(arr2);",
      "380: }",
      "383:   return v.isReferenced() ||",
      "386: }",
      "388: static void php_array_merge_recursive(PointerSet &seen, bool check,",
      "",
      "[Removed Lines]",
      "382: static bool couldRecur(const Variant& v, const Array& arr) {",
      "384:     arr.get()->kind() == ArrayData::kGlobalsKind ||",
      "385:     arr.get()->kind() == ArrayData::kProxyKind;",
      "",
      "[Added Lines]",
      "382: static bool couldRecur(const Variant& v, const ArrayData* arr) {",
      "384:     arr->kind() == ArrayData::kGlobalsKind ||",
      "385:     arr->kind() == ArrayData::kProxyKind;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "403:       Variant &v = arr1.lvalAt(key, AccessFlags::Key);",
      "404:       auto subarr1 = v.toArray().copy();",
      "405:       php_array_merge_recursive(seen,",
      "407:                                 subarr1,",
      "408:                                 value.toArray());",
      "409:       v.unset(); // avoid contamination of the value that was strongly bound",
      "",
      "[Removed Lines]",
      "406:                                 couldRecur(v, subarr1),",
      "",
      "[Added Lines]",
      "406:                                 couldRecur(v, subarr1.get()),",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "593:       if (v.isArray()) {",
      "594:         Array subarr1 = v.toArray();",
      "595:         const ArrNR& arr_value = value.toArrNR();",
      "597:                                     subarr1, arr_value);",
      "598:         v = subarr1;",
      "599:       } else {",
      "",
      "[Removed Lines]",
      "596:         php_array_replace_recursive(seen, couldRecur(v, subarr1),",
      "",
      "[Added Lines]",
      "596:         php_array_replace_recursive(seen, couldRecur(v, subarr1.get()),",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1217:   return true;",
      "1218: }",
      "1221:   if (var.isArray()) {",
      "1224:     }",
      "1225:   } else {",
      "1226:     String varname = var.toString();",
      "1227:     if (!varname.empty() && v->lookup(varname.get()) != NULL) {",
      "",
      "[Removed Lines]",
      "1220: static void compact(VarEnv* v, Array &ret, const Variant& var) {",
      "1222:     for (ArrayIter iter(var.getArrayData()); iter; ++iter) {",
      "1223:       compact(v, ret, iter.second());",
      "",
      "[Added Lines]",
      "1220: static void compact(PointerSet& seen,",
      "1221:                     VarEnv* v, Array &ret, const Variant& var) {",
      "1223:     auto adata = var.getArrayData();",
      "1224:     auto check = couldRecur(var, adata);",
      "1225:     if (check && !seen.insert(adata).second) {",
      "1226:       raise_warning(\"compact(): recursion detected\");",
      "1227:       return;",
      "1229:     for (ArrayIter iter(adata); iter; ++iter) {",
      "1230:       compact(seen, v, ret, iter.secondRef());",
      "1231:     }",
      "1232:     if (check) seen.erase(adata);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1237:   Array ret = Array::attach(PackedArray::MakeReserve(args.size() + 1));",
      "1238:   VarEnv* v = g_context->getOrCreateVarEnv();",
      "1239:   if (v) {",
      "1242:   }",
      "1243:   return ret;",
      "1244: }",
      "",
      "[Removed Lines]",
      "1240:     compact(v, ret, varname);",
      "1241:     compact(v, ret, args);",
      "",
      "[Added Lines]",
      "1248:     PointerSet seen;",
      "1249:     compact(seen, v, ret, varname);",
      "1250:     if (!args.empty()) compact(seen, v, ret, args);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1250:   Array ret = Array::attach(PackedArray::MakeReserve(args.size() + 1));",
      "1251:   VarEnv* v = g_context->getOrCreateVarEnv();",
      "1252:   if (v) {",
      "1255:   }",
      "1256:   return ret;",
      "1257: }",
      "",
      "[Removed Lines]",
      "1253:     compact(v, ret, varname);",
      "1254:     compact(v, ret, args);",
      "",
      "[Added Lines]",
      "1262:     PointerSet seen;",
      "1263:     compact(seen, v, ret, varname);",
      "1264:     if (!args.empty()) compact(seen, v, ret, args);",
      "",
      "---------------"
    ],
    "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php": [
      "File: hphp/test/slow/array_functions/self_recursive.php -> hphp/test/slow/array_functions/self_recursive.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "16:   test($a);",
      "17:   test($GLOBALS);",
      "18: }",
      "20: main();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "18:   var_dump(compact($a));",
      "",
      "---------------"
    ],
    "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf": [
      "File: hphp/test/slow/array_functions/self_recursive.php.expectf -> hphp/test/slow/array_functions/self_recursive.php.expectf",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
      "12: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13: Warning: compact(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 18",
      "14: array(0) {",
      "15: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ed630262b0e4480f787af5967b064e75c29697bf",
      "candidate_info": {
        "commit_hash": "ed630262b0e4480f787af5967b064e75c29697bf",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/ed630262b0e4480f787af5967b064e75c29697bf",
        "files": [
          "hphp/runtime/base/apc-local-array.cpp",
          "hphp/runtime/base/array-data.cpp",
          "hphp/runtime/base/array-data.h",
          "hphp/runtime/base/array-util.cpp",
          "hphp/runtime/base/array-util.h",
          "hphp/runtime/base/empty-array.cpp",
          "hphp/runtime/base/mixed-array.cpp",
          "hphp/runtime/base/mixed-array.h",
          "hphp/runtime/base/packed-array.cpp",
          "hphp/runtime/base/packed-array.h",
          "hphp/runtime/base/proxy-array.cpp",
          "hphp/runtime/base/set-array.cpp",
          "hphp/runtime/base/type-array.h",
          "hphp/runtime/base/type-variant.h",
          "hphp/runtime/ext/array/ext_array.cpp",
          "hphp/runtime/ext/array/ext_array.h",
          "hphp/runtime/ext/array/ext_array.php",
          "hphp/test/quick/dict/builtins.php.expect",
          "hphp/test/quick/vec/builtins.php.expect",
          "hphp/test/slow/keyset/builtins.php",
          "hphp/test/slow/keyset/builtins.php.expectf"
        ],
        "message": "Builtins support for keysets.\n\nSummary:\nAttempt to match the Hack spec for array functions.  The fixes also affect\npositively dicts and vecs.  The sorting functions will be fixed in a following\ndiff.\n\nReviewed By: ricklavoie\n\nDifferential Revision: D3583573\n\nPulled By: paulbiss\n\nfbshipit-source-id: 6745a99f7648e0cababec239f760b6b41471eb7d",
        "before_after_code_files": [
          "hphp/runtime/base/apc-local-array.cpp||hphp/runtime/base/apc-local-array.cpp",
          "hphp/runtime/base/array-data.cpp||hphp/runtime/base/array-data.cpp",
          "hphp/runtime/base/array-data.h||hphp/runtime/base/array-data.h",
          "hphp/runtime/base/array-util.cpp||hphp/runtime/base/array-util.cpp",
          "hphp/runtime/base/array-util.h||hphp/runtime/base/array-util.h",
          "hphp/runtime/base/empty-array.cpp||hphp/runtime/base/empty-array.cpp",
          "hphp/runtime/base/mixed-array.cpp||hphp/runtime/base/mixed-array.cpp",
          "hphp/runtime/base/mixed-array.h||hphp/runtime/base/mixed-array.h",
          "hphp/runtime/base/packed-array.cpp||hphp/runtime/base/packed-array.cpp",
          "hphp/runtime/base/packed-array.h||hphp/runtime/base/packed-array.h",
          "hphp/runtime/base/proxy-array.cpp||hphp/runtime/base/proxy-array.cpp",
          "hphp/runtime/base/set-array.cpp||hphp/runtime/base/set-array.cpp",
          "hphp/runtime/base/type-array.h||hphp/runtime/base/type-array.h",
          "hphp/runtime/base/type-variant.h||hphp/runtime/base/type-variant.h",
          "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
          "hphp/runtime/ext/array/ext_array.h||hphp/runtime/ext/array/ext_array.h",
          "hphp/runtime/ext/array/ext_array.php||hphp/runtime/ext/array/ext_array.php",
          "hphp/test/quick/dict/builtins.php.expect||hphp/test/quick/dict/builtins.php.expect",
          "hphp/test/quick/vec/builtins.php.expect||hphp/test/quick/vec/builtins.php.expect",
          "hphp/test/slow/keyset/builtins.php||hphp/test/slow/keyset/builtins.php",
          "hphp/test/slow/keyset/builtins.php.expectf||hphp/test/slow/keyset/builtins.php.expectf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/base/apc-local-array.cpp||hphp/runtime/base/apc-local-array.cpp": [
          "File: hphp/runtime/base/apc-local-array.cpp -> hphp/runtime/base/apc-local-array.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "246: }",
          "248: ArrayData* APCLocalArray::Merge(ArrayData* ad, const ArrayData *elems) {",
          "250:   auto escalated = Array::attach(Escalate(ad));",
          "251:   return escalated->merge(elems);",
          "252: }",
          "",
          "[Removed Lines]",
          "249:   if (!elems->isPHPArray()) throwInvalidMergeException(elems);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/base/array-data.cpp||hphp/runtime/base/array-data.cpp": [
          "File: hphp/runtime/base/array-data.cpp -> hphp/runtime/base/array-data.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1207:   );",
          "1208: }",
          "1225: }",
          "",
          "[Removed Lines]",
          "1210: void throwInvalidMergeException(const ArrayData* ad) {",
          "1211:   assertx(ad->isHackArray());",
          "1212:   std::pair<const char*, const char*> type_str = [&]{",
          "1213:     if (ad->isVecArray()) return std::make_pair(\"Vecs\", \"vecs\");",
          "1214:     if (ad->isDict()) return std::make_pair(\"Dicts\", \"dicts\");",
          "1215:     if (ad->isKeyset()) return std::make_pair(\"Keysets\", \"keysets\");",
          "1216:     not_reached();",
          "1217:   }();",
          "1218:   SystemLib::throwInvalidOperationExceptionObject(",
          "1219:     folly::sformat(\"{} can only be merged with other {}\",",
          "1220:                    type_str.first, type_str.second)",
          "1221:   );",
          "1222: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/base/array-data.h||hphp/runtime/base/array-data.h": [
          "File: hphp/runtime/base/array-data.h -> hphp/runtime/base/array-data.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "682: [[noreturn]] void throwRefInvalidArrayValueException(const Array& arr);",
          "683: [[noreturn]] void throwInvalidKeysetOperation();",
          "684: [[noreturn]] void throwInvalidAdditionException(const ArrayData* ad);",
          "688: }",
          "",
          "[Removed Lines]",
          "685: [[noreturn]] void throwInvalidMergeException(const ArrayData* ad);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/base/array-util.cpp||hphp/runtime/base/array-util.cpp": [
          "File: hphp/runtime/base/array-util.cpp -> hphp/runtime/base/array-util.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "100:   return out_hash;",
          "101: }",
          "105:   int input_size = input.size();",
          "106:   if (input_size >= pad_size) {",
          "107:     return input;",
          "108:   }",
          "130:     }",
          "132:   }",
          "133: }",
          "135: Variant ArrayUtil::Range(unsigned char low, unsigned char high,",
          "",
          "[Removed Lines]",
          "103: Variant ArrayUtil::Pad(const Array& input, const Variant& pad_value, int pad_size,",
          "104:                        bool pad_right /* = true */) {",
          "110:   if (pad_right) {",
          "111:     Array ret = input;",
          "112:     for (int i = input_size; i < pad_size; i++) {",
          "113:       ret.append(pad_value);",
          "114:     }",
          "115:     return ret;",
          "116:   } else {",
          "117:     auto ret = Array::attach(",
          "118:       MixedArray::MakeReserveLike(input.get(), pad_size)",
          "119:     );",
          "120:     for (int i = input_size; i < pad_size; i++) {",
          "121:       ret.append(pad_value);",
          "122:     }",
          "123:     for (ArrayIter iter(input); iter; ++iter) {",
          "124:       Variant key(iter.first());",
          "125:       if (key.isNumeric()) {",
          "126:         ret.appendWithRef(iter.secondRef());",
          "127:       } else {",
          "128:         ret.setWithRef(key, iter.secondRef(), true);",
          "129:       }",
          "131:     return ret;",
          "",
          "[Added Lines]",
          "103: Variant ArrayUtil::PadRight(const Array& input, const Variant& pad_value,",
          "104:                             int pad_size) {",
          "110:   Array ret = input;",
          "111:   for (int i = input_size; i < pad_size; i++) {",
          "112:     ret.append(pad_value);",
          "113:   }",
          "114:   return ret;",
          "115: }",
          "117: Variant ArrayUtil::PadLeft(const Array& input, const Variant& pad_value,",
          "118:                            int pad_size) {",
          "119:   int input_size = input.size();",
          "120:   if (input_size >= pad_size) {",
          "121:     return input;",
          "122:   }",
          "124:   auto ret = Array::attach(",
          "125:     MixedArray::MakeReserveLike(input.get(), pad_size)",
          "126:   );",
          "127:   for (int i = input_size; i < pad_size; i++) {",
          "128:     ret.append(pad_value);",
          "129:   }",
          "130:   for (ArrayIter iter(input); iter; ++iter) {",
          "131:     Variant key(iter.first());",
          "132:     if (key.isNumeric()) {",
          "133:       ret.appendWithRef(iter.secondRef());",
          "134:     } else {",
          "135:       ret.setWithRef(key, iter.secondRef(), true);",
          "138:   return ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "275: Variant ArrayUtil::Reverse(const Array& input, bool preserve_keys /* = false */) {",
          "276:   if (input.empty()) {",
          "278:   }",
          "281:   auto pos_limit = input->iter_end();",
          "282:   for (ssize_t pos = input->iter_last(); pos != pos_limit;",
          "283:        pos = input->iter_rewind(pos)) {",
          "",
          "[Removed Lines]",
          "277:     return input;",
          "280:   auto ret = Array::attach(MixedArray::MakeReserveLike(input.get(), 0));",
          "",
          "[Added Lines]",
          "283:     return empty_array();",
          "286:   auto ret = Array::Create();",
          "",
          "---------------"
        ],
        "hphp/runtime/base/array-util.h||hphp/runtime/base/array-util.h": [
          "File: hphp/runtime/base/array-util.h -> hphp/runtime/base/array-util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "47:   static Variant Pad(const Array& input, const Variant& pad_value, int pad_size,",
          "48:                      bool pad_right = true);",
          "",
          "[Added Lines]",
          "47:   static Variant PadLeft(const Array& input, const Variant& pad_value,",
          "48:                          int pad_size);",
          "49:   static Variant PadRight(const Array& input, const Variant& pad_value,",
          "50:                           int pad_size);",
          "",
          "---------------"
        ],
        "hphp/runtime/base/empty-array.cpp||hphp/runtime/base/empty-array.cpp": [
          "File: hphp/runtime/base/empty-array.cpp -> hphp/runtime/base/empty-array.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "298: }",
          "300: ArrayData* EmptyArray::Merge(ArrayData*, const ArrayData* elems) {",
          "305:     elems->incRefCount();",
          "306:     return const_cast<ArrayData*>(elems);",
          "307:   }",
          "",
          "[Removed Lines]",
          "301:   if (!elems->isPHPArray()) throwInvalidMergeException(elems);",
          "304:   if (elems->hasPackedLayout()) {",
          "",
          "[Added Lines]",
          "302:   if (elems->isPacked()) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "312:     MixedArray::Renumber(copy);",
          "313:     return copy;",
          "314:   }",
          "316:   assert(copy != elems);",
          "317:   copy->renumber();",
          "318:   return copy;",
          "",
          "[Removed Lines]",
          "315:   auto copy = elems->copy();",
          "",
          "[Added Lines]",
          "313:   auto copy = const_cast<ArrayData*>(elems)->toPHPArray(true);",
          "314:   copy = copy == elems ? elems->copy() : copy;",
          "",
          "---------------"
        ],
        "hphp/runtime/base/mixed-array.cpp||hphp/runtime/base/mixed-array.cpp": [
          "File: hphp/runtime/base/mixed-array.cpp -> hphp/runtime/base/mixed-array.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "111:   return ad;",
          "112: }",
          "115:                                        uint32_t capacity) {",
          "116:   capacity = (capacity ? capacity : other->size());",
          "",
          "[Removed Lines]",
          "114: ArrayData* MixedArray::MakeReserveLike(const ArrayData* other,",
          "",
          "[Added Lines]",
          "114: ArrayData* MixedArray::MakeReserveSame(const ArrayData* other,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:   return MixedArray::MakeReserveMixed(capacity);",
          "135: }",
          "137: MixedArray* MixedArray::MakeStruct(uint32_t size, const StringData* const* keys,",
          "138:                                    const TypedValue* values) {",
          "139:   assert(size > 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: ArrayData* MixedArray::MakeReserveLike(const ArrayData* other,",
          "138:                                        uint32_t capacity) {",
          "139:   capacity = (capacity ? capacity : other->size());",
          "141:   if (other->hasPackedLayout()) {",
          "142:     return PackedArray::MakeReserve(capacity);",
          "143:   } else {",
          "144:     return MixedArray::MakeReserveMixed(capacity);",
          "145:   }",
          "146: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1639: NEVER_INLINE",
          "1640: ArrayData* MixedArray::ArrayMergeGeneric(MixedArray* ret,",
          "1641:                                          const ArrayData* elems) {",
          "1645:   for (ArrayIter it(elems); !it.end(); it.next()) {",
          "1646:     Variant key = it.first();",
          "1647:     const Variant& value = it.secondRef();",
          "",
          "[Removed Lines]",
          "1642:   assert((ret->isPHPArray() && elems->isPHPArray()) ||",
          "1643:          (ret->isDict() && elems->isDict()));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1660: ArrayData* MixedArray::Merge(ArrayData* ad, const ArrayData* elems) {",
          "1661:   assert(asMixed(ad)->checkInvariants());",
          "1669:   auto const ret = CopyReserve(asMixed(ad), ad->size() + elems->size());",
          "1671:   if (elems->hasMixedLayout()) {",
          "1672:     auto const rhs = asMixed(elems);",
          "",
          "[Removed Lines]",
          "1663:   if (ad->kind() != elems->kind()) {",
          "1664:     if (ad->isDict()) throwInvalidMergeException(ad);",
          "1665:     assertx(ad->isPHPArray());",
          "1666:     if (!elems->isPHPArray()) throwInvalidMergeException(elems);",
          "1667:   }",
          "",
          "[Added Lines]",
          "1671:   assert(ret->hasExactlyOneRef());",
          "1672:   ret->m_hdr.init(HeaderKind::Mixed, 1);",
          "",
          "---------------"
        ],
        "hphp/runtime/base/mixed-array.h||hphp/runtime/base/mixed-array.h": [
          "File: hphp/runtime/base/mixed-array.h -> hphp/runtime/base/mixed-array.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:   static MixedArray* ToDictInPlace(ArrayData*);",
          "190:   static ArrayData* MakeReserveLike(const ArrayData* other, uint32_t capacity);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:   static ArrayData* MakeReserveSame(const ArrayData* other, uint32_t capacity);",
          "",
          "---------------"
        ],
        "hphp/runtime/base/packed-array.cpp||hphp/runtime/base/packed-array.cpp": [
          "File: hphp/runtime/base/packed-array.cpp -> hphp/runtime/base/packed-array.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1102: ArrayData* PackedArray::Merge(ArrayData* adIn, const ArrayData* elems) {",
          "1103:   assert(checkInvariants(adIn));",
          "1106:   auto const neededSize = adIn->m_size + elems->size();",
          "1107:   auto const ret = ToMixedCopyReserve(adIn, neededSize);",
          "1108:   return MixedArray::ArrayMergeGeneric(ret, elems);",
          "1109: }",
          "1137: ArrayData* PackedArray::Pop(ArrayData* adIn, Variant& value) {",
          "1138:   assert(checkInvariants(adIn));",
          "",
          "[Removed Lines]",
          "1104:   assert(adIn->isPacked());",
          "1105:   if (!elems->isPHPArray()) throwInvalidMergeException(elems);",
          "1111: ArrayData* PackedArray::MergeVec(ArrayData* adIn, const ArrayData* elems) {",
          "1112:   assert(checkInvariants(adIn));",
          "1113:   assert(adIn->isVecArray());",
          "1115:   if (!elems->isVecArray()) throwInvalidMergeException(adIn);",
          "1119:   auto const outSize = adIn->m_size + elems->m_size;",
          "1120:   auto const out = MakeReserveVec(outSize);",
          "1121:   auto outData = packedData(out);",
          "1123:   static_assert(sizeof(ArrayData) == 16 && sizeof(TypedValue) == 16, \"\");",
          "1124:   memcpy16_inline(packedData(out), packedData(adIn), adIn->m_size * 16);",
          "1125:   memcpy16_inline(packedData(out) + adIn->m_size, packedData(elems),",
          "1126:                   elems->m_size * 16);",
          "1128:   for (uint32_t i = 0; i < outSize; ++i) {",
          "1129:     assert(outData[i].m_type != KindOfRef);",
          "1130:     tvRefcountedIncRef(outData + i);",
          "1131:   }",
          "1132:   out->m_size = outSize;",
          "1134:   return out;",
          "1135: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/base/packed-array.h||hphp/runtime/base/packed-array.h": [
          "File: hphp/runtime/base/packed-array.h -> hphp/runtime/base/packed-array.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   static ArrayData* AppendRefVec(ArrayData*, Variant&, bool);",
          "137:   static ArrayData* AppendWithRefVec(ArrayData*, const Variant&, bool);",
          "138:   static ArrayData* PlusEqVec(ArrayData*, const ArrayData*);",
          "140:   static ArrayData* ToPHPArrayVec(ArrayData*, bool);",
          "141:   static ArrayData* ToDictVec(ArrayData*, bool);",
          "142:   static ArrayData* ToVecVec(ArrayData*, bool);",
          "144:   static constexpr auto ReleaseVec = &Release;",
          "145:   static constexpr auto NvGetIntVec = &NvGetInt;",
          "146:   static constexpr auto NvGetStrVec = &NvGetStr;",
          "",
          "[Removed Lines]",
          "139:   static ArrayData* MergeVec(ArrayData*, const ArrayData*);",
          "",
          "[Added Lines]",
          "143:   static constexpr auto MergeVec = &Merge;",
          "",
          "---------------"
        ],
        "hphp/runtime/base/proxy-array.cpp||hphp/runtime/base/proxy-array.cpp": [
          "File: hphp/runtime/base/proxy-array.cpp -> hphp/runtime/base/proxy-array.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "323: ArrayData*",
          "324: ProxyArray::Merge(ArrayData* ad, const ArrayData* elems) {",
          "326:   auto r = innerArr(ad)->merge(elems);",
          "327:   reseatable(ad, r);",
          "328:   return ad;",
          "",
          "[Removed Lines]",
          "325:   if (!elems->isPHPArray()) throwInvalidMergeException(elems);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hphp/runtime/base/set-array.cpp||hphp/runtime/base/set-array.cpp": [
          "File: hphp/runtime/base/set-array.cpp -> hphp/runtime/base/set-array.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "495: ssize_t SetArray::getIterBegin() const {",
          "497:   return nextElm(data(), -1);",
          "498: }",
          "500: ssize_t SetArray::getIterLast() const {",
          "506:   }",
          "508: }",
          "510: void SetArray::getElm(ssize_t ei, TypedValue* out) const {",
          "",
          "[Removed Lines]",
          "496:   assert(!empty());",
          "501:   assert(!empty());",
          "502:   auto const elms = data();",
          "503:   auto const pos = m_used - 1;",
          "504:   if (elms[pos].isTombstone()) {",
          "505:     return prevElm(elms, pos);",
          "507:   return pos;",
          "",
          "[Added Lines]",
          "500:   auto elms = data();",
          "501:   ssize_t ei = m_used;",
          "502:   while (--ei >= 0) {",
          "503:     if (!elms[ei].isTombstone()) {",
          "504:       return ei;",
          "505:     }",
          "507:   return m_used;",
          "",
          "---------------"
        ],
        "hphp/runtime/base/type-array.h||hphp/runtime/base/type-array.h": [
          "File: hphp/runtime/base/type-array.h -> hphp/runtime/base/type-array.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:   void escalate();",
          "",
          "[Removed Lines]",
          "129:   Array copy() const {",
          "130:     if (!m_arr)",
          "131:       return Array{};",
          "132:     auto new_arr = m_arr->copy();",
          "133:     return (new_arr != m_arr) ?",
          "134:       Array{new_arr, NoIncRef{}} : Array{*this};",
          "135:   }",
          "137:   Array toPHPArray() const {",
          "138:     if (!m_arr) return Create();",
          "139:     auto new_arr = m_arr->toPHPArray(true);",
          "140:     return (new_arr != m_arr) ? Array{new_arr, NoIncRef{}} : Array{*this};",
          "141:   }",
          "143:   Array toVec() const {",
          "144:     if (!m_arr) return CreateVec();",
          "145:     auto new_arr = m_arr->toVec(true);",
          "146:     return (new_arr != m_arr) ? Array{new_arr, NoIncRef{}} : Array{*this};",
          "147:   }",
          "149:   Array toDict() const {",
          "150:     if (!m_arr) return CreateDict();",
          "151:     auto new_arr = m_arr->toDict(true);",
          "152:     return (new_arr != m_arr) ? Array{new_arr, NoIncRef{}} : Array{*this};",
          "153:   }",
          "155:   Array toKeyset() const {",
          "156:     if (!m_arr) return CreateKeyset();",
          "157:     auto new_arr = m_arr->toKeyset(true);",
          "158:     return (new_arr != m_arr) ? Array{new_arr, NoIncRef{}} : Array{*this};",
          "159:   }",
          "",
          "[Added Lines]",
          "126:   #define COPY_BODY(meth, def)                                          \\",
          "127:     if (!m_arr) return def;                                             \\",
          "128:     auto new_arr = m_arr->meth;                                         \\",
          "129:     return new_arr != m_arr ? Array{new_arr, NoIncRef{}} : Array{*this};",
          "134:   Array copy() const { COPY_BODY(copy(), Array{}) }",
          "135:   Array toVec() const { COPY_BODY(toVec(true), CreateVec()) }",
          "136:   Array toDict() const { COPY_BODY(toDict(true), CreateDict()) }",
          "137:   Array toKeyset() const { COPY_BODY(toKeyset(true), CreateKeyset()) }",
          "138:   Array toPHPArray() const { COPY_BODY(toPHPArray(true), Array{}) }",
          "140:   #undef COPY_BODY",
          "",
          "---------------"
        ],
        "hphp/runtime/base/type-variant.h||hphp/runtime/base/type-variant.h": [
          "File: hphp/runtime/base/type-variant.h -> hphp/runtime/base/type-variant.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "597:   bool isKeyset() const {",
          "598:     return isKeysetType(getType());",
          "599:   }",
          "600:   bool isObject() const {",
          "601:     return getType() == KindOfObject;",
          "602:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "600:   bool isHackArray() const {",
          "601:     return isHackArrayType(getType());",
          "602:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1314:   ObjectData *getObjectData() const { return m_var.getObjectData(); }",
          "1316:   bool isArray() const { return m_var.isArray(); }",
          "1317:   ArrNR toArrNR() const { return m_var.toArrNR(); }",
          "1319:   RefData* getRefData() const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1320:   bool isHackArray() const { return m_var.isHackArray(); }",
          "1321:   bool isPHPArray() const { return m_var.isPHPArray(); }",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp": [
          "File: hphp/runtime/ext/array/ext_array.cpp -> hphp/runtime/ext/array/ext_array.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: };",
          "60: TypedValue HHVM_FUNCTION(array_change_key_case,",
          "62:                          int64_t case_ /* = 0 */) {",
          "64:                                            (CaseMode)case_ == CaseMode::LOWER));",
          "65: }",
          "",
          "[Removed Lines]",
          "61:                          ArrayArg input,",
          "63:   return tvReturn(ArrayUtil::ChangeKeyCase(ArrNR(input.get()),",
          "",
          "[Added Lines]",
          "61:                          const Variant& input,",
          "63:   getCheckedContainer(input);",
          "64:   return tvReturn(ArrayUtil::ChangeKeyCase(arr_input,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123: }",
          "125: TypedValue HHVM_FUNCTION(array_column,",
          "127:                          const Variant& val_key,",
          "128:                          const Variant& idx_key /* = null_variant */) {",
          "131:   Variant val = val_key, idx = idx_key;",
          "132:   if (!array_column_coerce_key(val, \"column\") ||",
          "133:       !array_column_coerce_key(idx, \"index\")) {",
          "134:     return make_tv<KindOfBoolean>(false);",
          "135:   }",
          "138:     if (!it.second().isArray()) {",
          "139:       continue;",
          "140:     }",
          "",
          "[Removed Lines]",
          "126:                          ArrayArg input,",
          "130:   ArrNR arr_input(input.get());",
          "136:   ArrayInit ret(input->size(), ArrayInit::Map{});",
          "137:   for(auto it = arr_input.asArray().begin(); !it.end(); it.next()) {",
          "",
          "[Added Lines]",
          "127:                          const Variant& input,",
          "131:   getCheckedContainer(input);",
          "137:   ArrayInit ret(arr_input.size(), ArrayInit::Map{});",
          "138:   for (ArrayIter it(arr_input); it; ++it) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "381:   );",
          "382: }",
          "388: static bool couldRecur(const Variant& v, const ArrayData* arr) {",
          "389:   return v.isReferenced() ||",
          "390:     arr->kind() == ArrayData::kGlobalsKind ||",
          "",
          "[Removed Lines]",
          "384: static void php_array_merge(Array &arr1, const Array& arr2) {",
          "385:   arr1.merge(arr2);",
          "386: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "394: static void php_array_merge_recursive(PointerSet &seen, bool check,",
          "395:                                       Array &arr1, const Array& arr2) {",
          "399:   }",
          "401:   for (ArrayIter iter(arr2); iter; ++iter) {",
          "",
          "[Removed Lines]",
          "396:   if (check && !seen.insert((void*)arr1.get()).second) {",
          "397:     raise_warning(\"array_merge_recursive(): recursion detected\");",
          "398:     return;",
          "",
          "[Added Lines]",
          "393:   auto const arr1_ptr = (void*)arr1.get();",
          "394:   if (check) {",
          "395:     if (seen.find(arr1_ptr) != seen.end()) {",
          "396:       raise_warning(\"array_merge_recursive(): recursion detected\");",
          "397:       return;",
          "398:     }",
          "399:     seen.insert(arr1_ptr);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "409:       Variant &v = arr1.lvalAt(key, AccessFlags::Key);",
          "414:                                 value.toArray());",
          "415:       v.unset(); // avoid contamination of the value that was strongly bound",
          "416:       v = subarr1;",
          "",
          "[Removed Lines]",
          "410:       auto subarr1 = v.toArray().copy();",
          "411:       php_array_merge_recursive(seen,",
          "412:                                 couldRecur(v, subarr1.get()),",
          "413:                                 subarr1,",
          "",
          "[Added Lines]",
          "411:       auto subarr1 = v.toArray().toPHPArray();",
          "412:       php_array_merge_recursive(seen, couldRecur(v, subarr1.get()), subarr1,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "420:   }",
          "422:   if (check) {",
          "424:   }",
          "425: }",
          "",
          "[Removed Lines]",
          "423:     seen.erase((void*)arr1.get());",
          "",
          "[Added Lines]",
          "422:     seen.erase(arr1_ptr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "514: TypedValue HHVM_FUNCTION(array_merge,",
          "515:                          int64_t numArgs,",
          "517:                          const Variant& array2 /* = null_variant */,",
          "518:                          const Array& args /* = null array */) {",
          "522:   if (UNLIKELY(numArgs < 2)) return tvReturn(std::move(ret));",
          "527:   for (ArrayIter iter(args); iter; ++iter) {",
          "528:     Variant v = iter.second();",
          "",
          "[Removed Lines]",
          "516:                          ArrayArg array1,",
          "519:   Array ret = Array::attach(MixedArray::MakeReserveLike(array1.get(), 0));",
          "520:   php_array_merge(ret, ArrNR(array1.get()));",
          "524:   getCheckedArrayRet(array2, make_tv<KindOfNull>());",
          "525:   php_array_merge(ret, arr_array2);",
          "",
          "[Added Lines]",
          "515:                          const Variant& array1,",
          "518:   getCheckedContainer(array1);",
          "519:   Array ret = Array::Create();",
          "520:   ret.merge(arr_array1);",
          "524:   getCheckedArray(array2);",
          "525:   ret.merge(arr_array2);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "531:       return make_tv<KindOfNull>();",
          "532:     }",
          "533:     const Array& arr_v = v.asCArrRef();",
          "535:   }",
          "536:   return tvReturn(std::move(ret));",
          "537: }",
          "",
          "[Removed Lines]",
          "534:     php_array_merge(ret, arr_v);",
          "",
          "[Added Lines]",
          "534:     ret.merge(arr_v);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "543:                          const Array& args /* = null array */) {",
          "544:   getCheckedArray(array1);",
          "545:   auto in1 = array1.asCArrRef();",
          "547:   PointerSet seen;",
          "548:   php_array_merge_recursive(seen, false, ret, arr_array1);",
          "549:   assert(seen.empty());",
          "",
          "[Removed Lines]",
          "546:   auto ret = Array::attach(MixedArray::MakeReserveLike(in1.get(), 0));",
          "",
          "[Added Lines]",
          "546:   Array ret = Array::Create();",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "586:     return;",
          "587:   }",
          "592:   }",
          "594:   for (ArrayIter iter(arr2); iter; ++iter) {",
          "",
          "[Removed Lines]",
          "589:   if (check && !seen.insert((void*)arr1.get()).second) {",
          "590:     raise_warning(\"array_replace_recursive(): recursion detected\");",
          "591:     return;",
          "",
          "[Added Lines]",
          "589:   auto const arr1_ptr = (void*)arr1.get();",
          "590:   if (check) {",
          "591:     if (seen.find(arr1_ptr) != seen.end()) {",
          "592:       raise_warning(\"array_replace_recursive(): recursion detected\");",
          "593:       return;",
          "594:     }",
          "595:     seen.insert(arr1_ptr);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "597:     if (arr1.exists(key, true) && value.isArray()) {",
          "598:       Variant &v = arr1.lvalAt(key, AccessFlags::Key);",
          "599:       if (v.isArray()) {",
          "601:         const ArrNR& arr_value = value.toArrNR();",
          "602:         php_array_replace_recursive(seen, couldRecur(v, subarr1.get()),",
          "603:                                     subarr1, arr_value);",
          "",
          "[Removed Lines]",
          "600:         Array subarr1 = v.toArray();",
          "",
          "[Added Lines]",
          "604:         Array subarr1 = v.toArray().toPHPArray();",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "611:   }",
          "613:   if (check) {",
          "615:   }",
          "616: }",
          "",
          "[Removed Lines]",
          "614:     seen.erase((void*)arr1.get());",
          "",
          "[Added Lines]",
          "618:     seen.erase(arr1_ptr);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "670:                          int pad_size,",
          "671:                          const Variant& pad_value) {",
          "672:   getCheckedArray(input);",
          "673:   if (pad_size > 0) {",
          "675:   }",
          "677: }",
          "679: TypedValue HHVM_FUNCTION(array_pop,",
          "",
          "[Removed Lines]",
          "674:     return tvReturn(ArrayUtil::Pad(arr_input, pad_value, pad_size, true));",
          "676:   return tvReturn(ArrayUtil::Pad(arr_input, pad_value, -pad_size, false));",
          "",
          "[Added Lines]",
          "677:   auto arr =",
          "678:     UNLIKELY(input.isHackArray()) ? arr_input.toPHPArray() : arr_input;",
          "680:     return tvReturn(ArrayUtil::PadRight(arr, pad_value, pad_size));",
          "681:   } else {",
          "682:     return tvReturn(ArrayUtil::PadLeft(arr, pad_value, -pad_size));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "857: }",
          "859: TypedValue HHVM_FUNCTION(array_reverse,",
          "861:                          bool preserve_keys /* = false */) {",
          "866: }",
          "868: TypedValue HHVM_FUNCTION(array_shift,",
          "",
          "[Removed Lines]",
          "860:                          ArrayArg input,",
          "863:   ArrNR arrNR(input.get());",
          "864:   const Array& arr = arrNR.asArray();",
          "865:   return tvReturn(ArrayUtil::Reverse(arr, preserve_keys));",
          "",
          "[Added Lines]",
          "867:                          const Variant& input,",
          "870:   getCheckedContainer(input);",
          "871:   return tvReturn(ArrayUtil::Reverse(arr_input, preserve_keys));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "965: Variant array_splice(VRefParam input, int offset,",
          "966:                      const Variant& length, const Variant& replacement) {",
          "967:   getCheckedArrayVariant(input);",
          "969:   int64_t len = length.isNull() ? 0x7FFFFFFF : length.toInt64();",
          "970:   input.assignIfRef(ArrayUtil::Splice(arr_input, offset, len, replacement, &ret));",
          "971:   return ret;",
          "",
          "[Removed Lines]",
          "968:   Array ret(Array::Create());",
          "",
          "[Added Lines]",
          "974:   if (arr_input.isHackArray()) {",
          "975:     throw_expected_array_exception(\"array_splice\");",
          "976:     return init_null();",
          "977:   }",
          "978:   Array ret = Array::Create();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1091:       ref_array->asArrRef().prepend(var);",
          "1092:     } else {",
          "1093:       {",
          "1095:         newArray.append(var);",
          "1096:         if (!args.empty()) {",
          "1097:           auto pos_limit = args->iter_end();",
          "",
          "[Removed Lines]",
          "1094:         Array newArray;",
          "",
          "[Added Lines]",
          "1104:         auto newArray = Array::attach(",
          "1105:           MixedArray::MakeReserveSame(cell_array->m_data.parr, 0));",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1100:             newArray.append(args->getValueRef(pos));",
          "1101:           }",
          "1102:         }",
          "1110:           }",
          "1111:         }",
          "",
          "[Removed Lines]",
          "1103:         for (ArrayIter iter(array.toArray()); iter; ++iter) {",
          "1104:           Variant key(iter.first());",
          "1105:           const Variant& value(iter.secondRef());",
          "1106:           if (key.isInteger()) {",
          "1107:             newArray.appendWithRef(value);",
          "1108:           } else {",
          "1109:             newArray.setWithRef(key, value, true);",
          "",
          "[Added Lines]",
          "1114:         if (cell_array->m_data.parr->isKeyset()) {",
          "1115:           for (ArrayIter iter(array.toArray()); iter; ++iter) {",
          "1116:             Variant key(iter.first());",
          "1117:             newArray.append(key);",
          "1118:           }",
          "1119:         } else {",
          "1120:           for (ArrayIter iter(array.toArray()); iter; ++iter) {",
          "1121:             Variant key(iter.first());",
          "1122:             const Variant& value(iter.secondRef());",
          "1123:             if (key.isInteger()) {",
          "1124:               newArray.appendWithRef(value);",
          "1125:             } else {",
          "1126:               newArray.setWithRef(key, value, true);",
          "1127:             }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1206:                    VRefParam input,",
          "1207:                    const Variant& funcname,",
          "1208:                    const Variant& userdata /* = null_variant */) {",
          "1210:     throw_expected_array_exception(\"array_walk_recursive\");",
          "1211:     return false;",
          "1212:   }",
          "",
          "[Removed Lines]",
          "1209:   if (!input.isArray()) {",
          "",
          "[Added Lines]",
          "1227:   if (!input.isPHPArray()) {",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1226:                    VRefParam input,",
          "1227:                    const Variant& funcname,",
          "1228:                    const Variant& userdata /* = null_variant */) {",
          "1230:     throw_expected_array_exception(\"array_walk\");",
          "1231:     return false;",
          "1232:   }",
          "",
          "[Removed Lines]",
          "1229:   if (!input.isArray()) {",
          "",
          "[Added Lines]",
          "1247:   if (!input.isPHPArray()) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1241:   return true;",
          "1242: }",
          "1246:   if (var.isArray()) {",
          "1247:     auto adata = var.getArrayData();",
          "1248:     auto check = couldRecur(var, adata);",
          "1252:     }",
          "1253:     for (ArrayIter iter(adata); iter; ++iter) {",
          "1254:       compact(seen, v, ret, iter.secondRef());",
          "",
          "[Removed Lines]",
          "1244: static void compact(PointerSet& seen,",
          "1245:                     VarEnv* v, Array &ret, const Variant& var) {",
          "1249:     if (check && !seen.insert(adata).second) {",
          "1250:       raise_warning(\"compact(): recursion detected\");",
          "1251:       return;",
          "",
          "[Added Lines]",
          "1262: static void compact(PointerSet& seen, VarEnv* v, Array &ret,",
          "1263:                     const Variant& var) {",
          "1267:     if (check) {",
          "1268:       if (seen.find(adata) != seen.end()) {",
          "1269:         raise_warning(\"compact(): recursion detected\");",
          "1270:         return;",
          "1271:       }",
          "1272:       seen.insert(adata);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1306: bool HHVM_FUNCTION(shuffle,",
          "1307:                    VRefParam array) {",
          "1309:     throw_expected_array_exception(\"shuffle\");",
          "1310:     return false;",
          "1311:   }",
          "",
          "[Removed Lines]",
          "1308:   if (!array.isArray()) {",
          "",
          "[Added Lines]",
          "1329:   if (!array.isPHPArray()) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1647: #define COMMA ,",
          "1648: #define diff_intersect_body(type, vararg, intersect_params)     \\",
          "1649:   getCheckedArray(array1);                                      \\",
          "1651:   Array ret = Array::Create();                                  \\",
          "1652:   if (RuntimeOption::EnableZendSorting) {                       \\",
          "1653:     getCheckedArray(array2);                                    \\",
          "",
          "[Removed Lines]",
          "1650:   if (!arr_array1.size()) return tvReturn(arr_array1);          \\",
          "",
          "[Added Lines]",
          "1671:   if (!arr_array1.size()) {                                     \\",
          "1672:     return tvReturn(empty_array());                             \\",
          "1673:   }                                                             \\",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2828: TypedValue* HHVM_FN(array_multisort)(ActRec* ar) {",
          "2829:   TypedValue* tv = getArg(ar, 0);",
          "2831:     throw_expected_array_exception(\"array_multisort\");",
          "2832:     return arReturn(ar, false);",
          "2833:   }",
          "",
          "[Removed Lines]",
          "2830:   if (tv == nullptr || !tvAsVariant(tv).isArray()) {",
          "",
          "[Added Lines]",
          "2853:   if (tv == nullptr || !tvAsVariant(tv).isPHPArray()) {",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/array/ext_array.h||hphp/runtime/ext/array/ext_array.h": [
          "File: hphp/runtime/ext/array/ext_array.h -> hphp/runtime/ext/array/ext_array.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:   auto const cell_##input = static_cast<const Variant&>(input).asCell(); \\",
          "290:   const Array& arr_##input = arrNR_##input.asArray();",
          "311: #define getCheckedArray(input)        \\",
          "312:   getCheckedArrayRet(input, make_tv<KindOfNull>())",
          "",
          "[Removed Lines]",
          "283: #define getCheckedArrayRet(input, fail)                           \\",
          "285:   if (UNLIKELY(!isArrayLikeType(cell_##input->m_type))) {               \\",
          "286:     throw_expected_array_exception();                             \\",
          "287:     return fail;                                                  \\",
          "288:   }                                                               \\",
          "289:   ArrNR arrNR_##input(cell_##input->m_data.parr);                 \\",
          "292: #define getCheckedArrayColumnRet(input, fail)                     \\",
          "293:   auto const cell_##input = static_cast<const Variant&>(input).asCell(); \\",
          "294:   if (UNLIKELY(!isArrayLikeType(cell_##input->m_type))) {             \\",
          "295:     if (cell_##input->m_type == KindOfString ||                   \\",
          "296:         cell_##input->m_type == KindOfPersistentString) {             \\",
          "297:       throw_bad_type_exception(\"array_column() expects parameter\" \\",
          "298:                                \" 1 to be array, string given\");   \\",
          "299:     } else if (cell_##input->m_type == KindOfInt64) {             \\",
          "300:       throw_bad_type_exception(\"array_column() expects parameter\" \\",
          "301:                                \" 1 to be array, integer given\");  \\",
          "302:     } else {                                                      \\",
          "303:       throw_expected_array_exception();                           \\",
          "304:     }                                                             \\",
          "305:     return fail;                                                  \\",
          "306:   }                                                               \\",
          "307:   ArrNR arrNR_##input(cell_##input->m_data.parr);                 \\",
          "308:   Array arr_##input = arrNR_##input.asArray();",
          "",
          "[Added Lines]",
          "283: #define getCheckedArrayRet(input, fail)                                  \\",
          "285:   if (UNLIKELY(!isArrayLikeType(cell_##input->m_type))) {                \\",
          "286:     throw_expected_array_exception();                                    \\",
          "287:     return fail;                                                         \\",
          "288:   }                                                                      \\",
          "289:   ArrNR arrNR_##input{cell_##input->m_data.parr};                        \\",
          "292: #define getCheckedContainer(input)                                       \\",
          "293:   if (UNLIKELY(!isContainer(input))) {                                   \\",
          "294:     throw_expected_array_or_collection_exception();                      \\",
          "295:     return make_tv<KindOfNull>();                                        \\",
          "296:   }                                                                      \\",
          "297:   Variant var_##input(input);                                            \\",
          "298:   tvCastToArrayInPlace(var_##input.asTypedValue());                      \\",
          "299:   assert(var_##input.isArray());                                         \\",
          "300:   auto arr_##input = var_##input.toArray();",
          "",
          "---------------"
        ],
        "hphp/runtime/ext/array/ext_array.php||hphp/runtime/ext/array/ext_array.php": [
          "File: hphp/runtime/ext/array/ext_array.php -> hphp/runtime/ext/array/ext_array.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: <<__Native, __IsFoldable>>",
          "",
          "[Removed Lines]",
          "15: function array_change_key_case(array $input, int $case_ = CASE_LOWER): mixed;",
          "",
          "[Added Lines]",
          "15: function array_change_key_case(mixed $input, int $case_ = CASE_LOWER): mixed;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: <<__Native>>",
          "48:                       mixed $val_key,",
          "49:                       mixed $idx_key = null): mixed;",
          "",
          "[Removed Lines]",
          "47: function array_column(array $arr,",
          "",
          "[Added Lines]",
          "47: function array_column(mixed $arr,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207: <<__Native(\"NumArgs\"), __IsFoldable>>",
          "",
          "[Removed Lines]",
          "208: function array_merge(array $array1, mixed $array2 = null, ...$argv): mixed;",
          "",
          "[Added Lines]",
          "208: function array_merge(mixed $array1, mixed $array2 = null, ...$argv): mixed;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "366: <<__Native, __IsFoldable>>",
          "",
          "[Removed Lines]",
          "367: function array_reverse(array $array, bool $preserve_keys = false): mixed;",
          "",
          "[Added Lines]",
          "367: function array_reverse(mixed $array, bool $preserve_keys = false): mixed;",
          "",
          "---------------"
        ],
        "hphp/test/quick/dict/builtins.php.expect||hphp/test/quick/dict/builtins.php.expect": [
          "File: hphp/test/quick/dict/builtins.php.expect -> hphp/test/quick/dict/builtins.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: Testing: dict(0) {",
          "2: }",
          "4:   [0]=>",
          "5:   string(3) \"pad\"",
          "6:   [1]=>",
          "",
          "[Removed Lines]",
          "3: array_pad (after): dict(10) {",
          "",
          "[Added Lines]",
          "3: array_pad (after): array(10) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "22:   [9]=>",
          "23:   string(3) \"pad\"",
          "24: }",
          "26:   [0]=>",
          "27:   string(3) \"pad\"",
          "28:   [1]=>",
          "",
          "[Removed Lines]",
          "25: array_pad (before): dict(10) {",
          "",
          "[Added Lines]",
          "25: array_pad (before): array(10) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "44:   [9]=>",
          "45:   string(3) \"pad\"",
          "46: }",
          "48:   [0]=>",
          "49:   string(3) \"pad\"",
          "50: }",
          "",
          "[Removed Lines]",
          "47: array_pad (just one): dict(1) {",
          "",
          "[Added Lines]",
          "47: array_pad (just one): array(1) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "112:   [4]=>",
          "113:   int(5)",
          "114: }",
          "116:   [0]=>",
          "117:   int(1)",
          "118:   [1]=>",
          "",
          "[Removed Lines]",
          "115: array_pad (after): dict(10) {",
          "",
          "[Added Lines]",
          "115: array_pad (after): array(10) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "134:   [9]=>",
          "135:   string(3) \"pad\"",
          "136: }",
          "138:   [0]=>",
          "139:   string(3) \"pad\"",
          "140:   [1]=>",
          "",
          "[Removed Lines]",
          "137: array_pad (before): dict(10) {",
          "",
          "[Added Lines]",
          "137: array_pad (before): array(10) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "156:   [9]=>",
          "157:   int(5)",
          "158: }",
          "160:   [0]=>",
          "161:   int(1)",
          "162:   [1]=>",
          "",
          "[Removed Lines]",
          "159: array_pad (just one): dict(5) {",
          "",
          "[Added Lines]",
          "159: array_pad (just one): array(5) {",
          "",
          "---------------"
        ],
        "hphp/test/quick/vec/builtins.php.expect||hphp/test/quick/vec/builtins.php.expect": [
          "File: hphp/test/quick/vec/builtins.php.expect -> hphp/test/quick/vec/builtins.php.expect",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: Testing: vec(0) {",
          "2: }",
          "4:   string(3) \"pad\"",
          "5:   string(3) \"pad\"",
          "6:   string(3) \"pad\"",
          "7:   string(3) \"pad\"",
          "8:   string(3) \"pad\"",
          "9:   string(3) \"pad\"",
          "10:   string(3) \"pad\"",
          "11:   string(3) \"pad\"",
          "12:   string(3) \"pad\"",
          "13:   string(3) \"pad\"",
          "14: }",
          "16:   string(3) \"pad\"",
          "17:   string(3) \"pad\"",
          "18:   string(3) \"pad\"",
          "19:   string(3) \"pad\"",
          "20:   string(3) \"pad\"",
          "21:   string(3) \"pad\"",
          "22:   string(3) \"pad\"",
          "23:   string(3) \"pad\"",
          "24:   string(3) \"pad\"",
          "25:   string(3) \"pad\"",
          "26: }",
          "28:   string(3) \"pad\"",
          "29: }",
          "30: array_pop: NULL",
          "",
          "[Removed Lines]",
          "3: array_pad (after): vec(10) {",
          "15: array_pad (before): vec(10) {",
          "27: array_pad (just one): vec(1) {",
          "",
          "[Added Lines]",
          "3: array_pad (after): array(10) {",
          "4:   [0]=>",
          "6:   [1]=>",
          "8:   [2]=>",
          "10:   [3]=>",
          "12:   [4]=>",
          "14:   [5]=>",
          "16:   [6]=>",
          "18:   [7]=>",
          "20:   [8]=>",
          "22:   [9]=>",
          "25: array_pad (before): array(10) {",
          "26:   [0]=>",
          "28:   [1]=>",
          "30:   [2]=>",
          "32:   [3]=>",
          "34:   [4]=>",
          "36:   [5]=>",
          "38:   [6]=>",
          "40:   [7]=>",
          "42:   [8]=>",
          "44:   [9]=>",
          "47: array_pad (just one): array(1) {",
          "48:   [0]=>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:   int(4)",
          "84:   int(5)",
          "85: }",
          "87:   int(1)",
          "88:   int(2)",
          "89:   int(3)",
          "90:   int(4)",
          "91:   int(5)",
          "92:   string(3) \"pad\"",
          "93:   string(3) \"pad\"",
          "94:   string(3) \"pad\"",
          "95:   string(3) \"pad\"",
          "96:   string(3) \"pad\"",
          "97: }",
          "99:   string(3) \"pad\"",
          "100:   string(3) \"pad\"",
          "101:   string(3) \"pad\"",
          "102:   string(3) \"pad\"",
          "103:   string(3) \"pad\"",
          "104:   int(1)",
          "105:   int(2)",
          "106:   int(3)",
          "107:   int(4)",
          "108:   int(5)",
          "109: }",
          "111:   int(1)",
          "112:   int(2)",
          "113:   int(3)",
          "114:   int(4)",
          "115:   int(5)",
          "116: }",
          "117: array_pop: int(5)",
          "",
          "[Removed Lines]",
          "86: array_pad (after): vec(10) {",
          "98: array_pad (before): vec(10) {",
          "110: array_pad (just one): vec(5) {",
          "",
          "[Added Lines]",
          "107: array_pad (after): array(10) {",
          "108:   [0]=>",
          "110:   [1]=>",
          "112:   [2]=>",
          "114:   [3]=>",
          "116:   [4]=>",
          "118:   [5]=>",
          "120:   [6]=>",
          "122:   [7]=>",
          "124:   [8]=>",
          "126:   [9]=>",
          "129: array_pad (before): array(10) {",
          "130:   [0]=>",
          "132:   [1]=>",
          "134:   [2]=>",
          "136:   [3]=>",
          "138:   [4]=>",
          "140:   [5]=>",
          "142:   [6]=>",
          "144:   [7]=>",
          "146:   [8]=>",
          "148:   [9]=>",
          "151: array_pad (just one): array(5) {",
          "152:   [0]=>",
          "154:   [1]=>",
          "156:   [2]=>",
          "158:   [3]=>",
          "160:   [4]=>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "238:   int(2)",
          "239:   int(1)",
          "240: }",
          "242:   int(5)",
          "243:   int(4)",
          "244:   int(3)",
          "245:   int(2)",
          "246:   int(1)",
          "247:   string(3) \"pad\"",
          "248:   string(3) \"pad\"",
          "249:   string(3) \"pad\"",
          "250:   string(3) \"pad\"",
          "251:   string(3) \"pad\"",
          "252: }",
          "254:   string(3) \"pad\"",
          "255:   string(3) \"pad\"",
          "256:   string(3) \"pad\"",
          "257:   string(3) \"pad\"",
          "258:   string(3) \"pad\"",
          "259:   int(5)",
          "260:   int(4)",
          "261:   int(3)",
          "262:   int(2)",
          "263:   int(1)",
          "264: }",
          "266:   int(5)",
          "267:   int(4)",
          "268:   int(3)",
          "269:   int(2)",
          "270:   int(1)",
          "271: }",
          "272: array_pop: int(1)",
          "",
          "[Removed Lines]",
          "241: array_pad (after): vec(10) {",
          "253: array_pad (before): vec(10) {",
          "265: array_pad (just one): vec(5) {",
          "",
          "[Added Lines]",
          "287: array_pad (after): array(10) {",
          "288:   [0]=>",
          "290:   [1]=>",
          "292:   [2]=>",
          "294:   [3]=>",
          "296:   [4]=>",
          "298:   [5]=>",
          "300:   [6]=>",
          "302:   [7]=>",
          "304:   [8]=>",
          "306:   [9]=>",
          "309: array_pad (before): array(10) {",
          "310:   [0]=>",
          "312:   [1]=>",
          "314:   [2]=>",
          "316:   [3]=>",
          "318:   [4]=>",
          "320:   [5]=>",
          "322:   [6]=>",
          "324:   [7]=>",
          "326:   [8]=>",
          "328:   [9]=>",
          "331: array_pad (just one): array(5) {",
          "332:   [0]=>",
          "334:   [1]=>",
          "336:   [2]=>",
          "338:   [3]=>",
          "340:   [4]=>",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "391:   string(1) \"b\"",
          "392:   string(1) \"c\"",
          "393: }",
          "395:   string(1) \"a\"",
          "396:   string(1) \"b\"",
          "397:   string(1) \"c\"",
          "398:   string(3) \"pad\"",
          "399:   string(3) \"pad\"",
          "400:   string(3) \"pad\"",
          "401:   string(3) \"pad\"",
          "402:   string(3) \"pad\"",
          "403:   string(3) \"pad\"",
          "404:   string(3) \"pad\"",
          "405: }",
          "407:   string(3) \"pad\"",
          "408:   string(3) \"pad\"",
          "409:   string(3) \"pad\"",
          "410:   string(3) \"pad\"",
          "411:   string(3) \"pad\"",
          "412:   string(3) \"pad\"",
          "413:   string(3) \"pad\"",
          "414:   string(1) \"a\"",
          "415:   string(1) \"b\"",
          "416:   string(1) \"c\"",
          "417: }",
          "419:   string(1) \"a\"",
          "420:   string(1) \"b\"",
          "421:   string(1) \"c\"",
          "422: }",
          "423: array_pop: string(1) \"c\"",
          "",
          "[Removed Lines]",
          "394: array_pad (after): vec(10) {",
          "406: array_pad (before): vec(10) {",
          "418: array_pad (just one): vec(3) {",
          "",
          "[Added Lines]",
          "465: array_pad (after): array(10) {",
          "466:   [0]=>",
          "468:   [1]=>",
          "470:   [2]=>",
          "472:   [3]=>",
          "474:   [4]=>",
          "476:   [5]=>",
          "478:   [6]=>",
          "480:   [7]=>",
          "482:   [8]=>",
          "484:   [9]=>",
          "487: array_pad (before): array(10) {",
          "488:   [0]=>",
          "490:   [1]=>",
          "492:   [2]=>",
          "494:   [3]=>",
          "496:   [4]=>",
          "498:   [5]=>",
          "500:   [6]=>",
          "502:   [7]=>",
          "504:   [8]=>",
          "506:   [9]=>",
          "509: array_pad (just one): array(3) {",
          "510:   [0]=>",
          "512:   [1]=>",
          "514:   [2]=>",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "515:   string(1) \"a\"",
          "516:   string(1) \"b\"",
          "517: }",
          "519:   string(1) \"b\"",
          "520:   string(1) \"a\"",
          "521:   string(1) \"a\"",
          "522:   string(1) \"b\"",
          "523:   string(3) \"pad\"",
          "524:   string(3) \"pad\"",
          "525:   string(3) \"pad\"",
          "526:   string(3) \"pad\"",
          "527:   string(3) \"pad\"",
          "528:   string(3) \"pad\"",
          "529: }",
          "531:   string(3) \"pad\"",
          "532:   string(3) \"pad\"",
          "533:   string(3) \"pad\"",
          "534:   string(3) \"pad\"",
          "535:   string(3) \"pad\"",
          "536:   string(3) \"pad\"",
          "537:   string(1) \"b\"",
          "538:   string(1) \"a\"",
          "539:   string(1) \"a\"",
          "540:   string(1) \"b\"",
          "541: }",
          "543:   string(1) \"b\"",
          "544:   string(1) \"a\"",
          "545:   string(1) \"a\"",
          "546:   string(1) \"b\"",
          "547: }",
          "548: array_pop: string(1) \"b\"",
          "",
          "[Removed Lines]",
          "518: array_pad (after): vec(10) {",
          "530: array_pad (before): vec(10) {",
          "542: array_pad (just one): vec(4) {",
          "",
          "[Added Lines]",
          "612: array_pad (after): array(10) {",
          "613:   [0]=>",
          "615:   [1]=>",
          "617:   [2]=>",
          "619:   [3]=>",
          "621:   [4]=>",
          "623:   [5]=>",
          "625:   [6]=>",
          "627:   [7]=>",
          "629:   [8]=>",
          "631:   [9]=>",
          "634: array_pad (before): array(10) {",
          "635:   [0]=>",
          "637:   [1]=>",
          "639:   [2]=>",
          "641:   [3]=>",
          "643:   [4]=>",
          "645:   [5]=>",
          "647:   [6]=>",
          "649:   [7]=>",
          "651:   [8]=>",
          "653:   [9]=>",
          "656: array_pad (just one): array(4) {",
          "657:   [0]=>",
          "659:   [1]=>",
          "661:   [2]=>",
          "663:   [3]=>",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "651: Testing: vec(1) {",
          "652:   int(100)",
          "653: }",
          "655:   int(100)",
          "656:   string(3) \"pad\"",
          "657:   string(3) \"pad\"",
          "658:   string(3) \"pad\"",
          "659:   string(3) \"pad\"",
          "660:   string(3) \"pad\"",
          "661:   string(3) \"pad\"",
          "662:   string(3) \"pad\"",
          "663:   string(3) \"pad\"",
          "664:   string(3) \"pad\"",
          "665: }",
          "667:   string(3) \"pad\"",
          "668:   string(3) \"pad\"",
          "669:   string(3) \"pad\"",
          "670:   string(3) \"pad\"",
          "671:   string(3) \"pad\"",
          "672:   string(3) \"pad\"",
          "673:   string(3) \"pad\"",
          "674:   string(3) \"pad\"",
          "675:   string(3) \"pad\"",
          "676:   int(100)",
          "677: }",
          "679:   int(100)",
          "680: }",
          "681: array_pop: int(100)",
          "",
          "[Removed Lines]",
          "654: array_pad (after): vec(10) {",
          "666: array_pad (before): vec(10) {",
          "678: array_pad (just one): vec(1) {",
          "",
          "[Added Lines]",
          "772: array_pad (after): array(10) {",
          "773:   [0]=>",
          "775:   [1]=>",
          "777:   [2]=>",
          "779:   [3]=>",
          "781:   [4]=>",
          "783:   [5]=>",
          "785:   [6]=>",
          "787:   [7]=>",
          "789:   [8]=>",
          "791:   [9]=>",
          "794: array_pad (before): array(10) {",
          "795:   [0]=>",
          "797:   [1]=>",
          "799:   [2]=>",
          "801:   [3]=>",
          "803:   [4]=>",
          "805:   [5]=>",
          "807:   [6]=>",
          "809:   [7]=>",
          "811:   [8]=>",
          "813:   [9]=>",
          "816: array_pad (just one): array(1) {",
          "817:   [0]=>",
          "",
          "---------------"
        ],
        "hphp/test/slow/keyset/builtins.php||hphp/test/slow/keyset/builtins.php": [
          "File: hphp/test/slow/keyset/builtins.php -> hphp/test/slow/keyset/builtins.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?hh",
          "5: echo \"apc_add: \";",
          "6: var_dump(apc_add('foo', keyset[1, 2, 3]));",
          "7: echo \"apc_fetch: \";",
          "8: var_dump(apc_fetch('foo'));",
          "13: echo \"array_change_key_case: \";",
          "14: var_dump(array_change_key_case(keyset[\"FOO\", \"Bar\"]));",
          "15: echo \"array_chunk 1: \";",
          "16: var_dump(array_chunk(keyset[1, 2, 3], 2));",
          "17: echo \"array_chunk 2: \";",
          "18: var_dump(array_chunk(keyset[1, 2, 3], 2, true /* preserve keys */));",
          "19: echo \"array_column 1: \";",
          "20: var_dump(array_column(",
          "21:   array(",
          "22:     'a' => array('foo' => 'bar1', 'baz' => 'qux1'),",
          "23:     'b' => keyset['foo', 'baz'],",
          "24:   ),",
          "25:   'foo',",
          "26: ));",
          "27: echo \"array_column 2: \";",
          "28: var_dump(array_column(",
          "29:   array(",
          "30:     'a' => array('foo' => 'bar1', 'baz' => 'qux1'),",
          "31:     'b' => keyset['foo', 'baz'],",
          "32:   ),",
          "33:   'foo',",
          "34:   'baz',",
          "35: ));",
          "37: function with_keyset($k1) {",
          "38:   echo \"---- running \" . __FUNCTION__ . \" with\\n\";",
          "39:   var_dump($k1);",
          "40:   $k2 = keyset['q', 'n'];",
          "41:   $k3 = keyset['q', 'N'];",
          "42:   function nocase($a, $b) {",
          "43:     $la = strtolower($a);",
          "44:     $lb = strtolower($b);",
          "45:     return ($la === $lb) ? 0 : (($la > $lb) ? 1 : (-1));",
          "46:   }",
          "47:   echo \"array_diff_assoc: \";",
          "48:   var_dump(array_diff_assoc($k1, $k2));",
          "49:   echo \"array_diff: \";",
          "50:   var_dump(array_diff($k1, $k2));",
          "51:   echo \"array_diff_key: \";",
          "52:   var_dump(array_diff_key($k1, $k3));",
          "53:   echo \"array_diff_uassoc: \";",
          "54:   var_dump(array_diff_uassoc($k1, $k3, 'nocase'));",
          "55:   echo \"array_diff_ukey: \";",
          "56:   var_dump(array_diff_ukey($k1, $k3, 'nocase'));",
          "57:   echo \"array_udiff: \";",
          "58:   var_dump(array_udiff($k1, $k3, 'nocase'));",
          "59:   echo \"array_udiff_assoc: \";",
          "60:   var_dump(array_udiff_assoc($k1, $k3, 'nocase'));",
          "61:   echo \"array_udiff_uassoc: \";",
          "62:   var_dump(array_udiff_uassoc($k1, $k3, 'nocase', 'nocase'));",
          "63:   echo \"array_combine 1: \";",
          "64:   var_dump(array_combine($k1, keyset[1, 2]));",
          "65:   echo \"array_combine 2: \";",
          "66:   var_dump(array_combine($k1, keyset[1, 2, 3, 4, 5, 6]));",
          "67:   echo \"array_uintersect_assoc: \";",
          "68:   var_dump(array_uintersect_assoc($k1, $k3, 'nocase'));",
          "69:   echo \"array_uintersect_uassoc: \";",
          "70:   var_dump(array_uintersect_uassoc($k1, $k3, 'nocase', 'nocase'));",
          "71:   echo \"array_intersect_assoc: \";",
          "72:   var_dump(array_intersect_assoc($k1, $k2));",
          "73:   echo \"array_intersect_key: \";",
          "74:   var_dump(array_intersect_key($k1, $k2));",
          "75:   echo \"array_intersect_uassoc: \";",
          "76:   var_dump(array_intersect_uassoc($k1, $k3, 'nocase'));",
          "77:   echo \"array_intersect_ukey: \";",
          "78:   var_dump(array_intersect_ukey($k1, $k3, 'nocase'));",
          "79:   echo \"array_intersect: \";",
          "80:   var_dump(array_intersect($k1, $k2));",
          "81:   echo \"array_uintersect: \";",
          "82:   var_dump(array_uintersect($k1, $k3, 'nocase'));",
          "83:   function vowel($c) {",
          "84:     $k = keyset['a', 'e', 'i', 'o', 'u'];",
          "85:     return isset($k[$c]);",
          "86:   }",
          "87:   echo \"array_filter: \";",
          "88:   var_dump(array_filter($k1, 'vowel'));",
          "89:   echo \"array_flip: \";",
          "90:   var_dump(array_flip($k1));",
          "91:   function inc($s) {",
          "92:     $s++;",
          "93:     return $s;",
          "94:   }",
          "95:   echo \"array_map: \";",
          "96:   var_dump(array_map('inc', keyset['H', 'A', 'L']));",
          "97:   echo \"array_merge: \";",
          "98:   var_dump(array_merge(keyset[1, 2, 3], keyset['a', 'b', 'c']));",
          "99:   echo \"array_reverse: \";",
          "100:   var_dump(array_reverse($k1));",
          "101:   echo \"array_slice: \";",
          "102:   var_dump(array_slice($k1, 2));",
          "107:   echo \"array_key_exists: \";",
          "108:   var_dump([array_key_exists('x', $k1), array_key_exists('q', $k1)]);",
          "109:   echo \"array_keys: \";",
          "110:   var_dump(array_keys($k1));",
          "111:   $k = $k1;",
          "112:   echo \"array_pop: \";",
          "113:   var_dump(array_pop($k));",
          "114:   var_dump($k);",
          "115:   echo \"array_product: \";",
          "116:   var_dump(array_product($k1));",
          "117:   srand(0);                                        // Determinize that!",
          "118:   echo \"array_rand: \";",
          "119:   var_dump(array_rand($k1));",
          "120:   echo \"array_reduce: \";",
          "121:   var_dump(array_reduce($k1, function($s, $x) { return $s . $x; }, \"\"));",
          "122:   echo \"array_search 1: \";",
          "123:   var_dump(array_search('n', $k1));",
          "124:   echo \"array_search 2: \";",
          "125:   var_dump(array_search('x', $k1));",
          "126:   echo \"array_shift: \";",
          "127:   var_dump(array_shift($k));",
          "128:   var_dump($k);",
          "129:   echo \"array_sum: \";",
          "130:   var_dump(array_sum($k1));",
          "131:   echo \"current 1: \";",
          "132:   var_dump(current($k));",
          "133:   echo \"each: \";",
          "134:   var_dump(each($k));",
          "135:   echo \"current 2: \";",
          "136:   var_dump(current($k));",
          "137:   echo \"end: \";",
          "138:   var_dump(end($k));",
          "139:   echo \"extract: \";",
          "140:   var_dump(extract(keyset['php_is_awesome', 42]));",
          "141:   var_dump($php_is_awesome);",
          "142:   echo \"in_array: \";",
          "143:   var_dump([in_array('x', $k1), in_array('q', $k1)]);",
          "144:   echo \"key: \";",
          "145:   var_dump(key($k));",
          "147:   echo \"next: \";",
          "148:   var_dump(next($k));",
          "149:   echo \"prev 1: \";",
          "150:   var_dump(prev($k));",
          "151:   end($k);",
          "152:   echo \"prev 2: \";",
          "153:   var_dump(prev($k));",
          "154:   echo \"reset: \";",
          "155:   var_dump(reset($k));",
          "156:   echo \"count: \";",
          "157:   var_dump(count($k1));",
          "158:   echo \"array_pad 1: \";",
          "159:   var_dump(array_pad($k1, 7, 'n'));",
          "160:   echo \"array_pad 2: \";",
          "161:   var_dump(array_pad($k1, 2, 'x'));",
          "162:   echo \"array_replace: \";",
          "163:   var_dump(array_replace($k1, ['q' => 'r']));",
          "164:   echo \"array_unique 1: \";",
          "165:   var_dump(array_unique($k1));",
          "166:   echo \"array_unique 2: \";",
          "167:   var_dump(array_unique(keyset[]));",
          "171:   var_dump(array_push($k, 'i'));",
          "172:   var_dump(array_unshift($k, 'q'));",
          "173:   var_dump($k);",
          "175: }",
          "177: with_keyset(keyset['q', 'u', 'e', 'n', 't', 'i', 'n']);",
          "178: with_keyset(keyset[]);",
          "183: $ar1 = array(\"colors\" => keyset[\"green\", \"red\"], 5);",
          "184: $ar2 = array(10, \"colors\" => keyset[\"green\", \"blue\"]);",
          "185: echo \"array_merge_recursive: \";",
          "186: var_dump(array_merge_recursive($ar1, $ar2));",
          "187: echo \"array_replace_recursive 1: \"; // The keyset remains in the return value",
          "188: var_dump(array_replace_recursive($ar1, [\"green\" => \"blue\"]));",
          "189: echo \"array_replace_recursive 2: \";",
          "190: var_dump(array_replace_recursive($ar1, [\"colors\" => [\"green\" => \"blue\"]]));",
          "195: $k1 = keyset[];",
          "196: echo \"array_splice: \";",
          "197: var_dump(array_splice($k1, 2));",
          "198: echo \"shuffle: \";",
          "199: var_dump(shuffle($k1));",
          "200: echo \"array_multisort: \";",
          "201: var_dump(array_multisort($k1));",
          "202: echo \"array_walk: \";",
          "203: var_dump(array_walk($k1, function($foo) { return \"bar\"; }));",
          "204: echo \"array_walk_recursive: \";",
          "205: var_dump(array_walk_recursive($k1, function($foo) { return \"bar\"; }));",
          "209: echo \"array_fill_keys: \";",
          "210: var_dump(array_fill_keys(keyset['fizz', 'buzz'], 42));",
          "211: echo \"array_fill: \";",
          "212: var_dump(array_fill(10, 2, 42));",
          "",
          "---------------"
        ],
        "hphp/test/slow/keyset/builtins.php.expectf||hphp/test/slow/keyset/builtins.php.expectf": [
          "File: hphp/test/slow/keyset/builtins.php.expectf -> hphp/test/slow/keyset/builtins.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: apc_add: bool(true)",
          "2: apc_fetch: keyset(3) {",
          "3:   int(1)",
          "4:   int(2)",
          "5:   int(3)",
          "6: }",
          "7: array_change_key_case: array(2) {",
          "8:   [\"foo\"]=>",
          "9:   string(3) \"FOO\"",
          "10:   [\"bar\"]=>",
          "11:   string(3) \"Bar\"",
          "12: }",
          "13: array_chunk 1: array(2) {",
          "14:   [0]=>",
          "15:   array(2) {",
          "16:     [0]=>",
          "17:     int(1)",
          "18:     [1]=>",
          "19:     int(2)",
          "20:   }",
          "21:   [1]=>",
          "22:   array(1) {",
          "23:     [0]=>",
          "24:     int(3)",
          "25:   }",
          "26: }",
          "27: array_chunk 2: array(2) {",
          "28:   [0]=>",
          "29:   array(2) {",
          "30:     [1]=>",
          "31:     int(1)",
          "32:     [2]=>",
          "33:     int(2)",
          "34:   }",
          "35:   [1]=>",
          "36:   array(1) {",
          "37:     [3]=>",
          "38:     int(3)",
          "39:   }",
          "40: }",
          "41: array_column 1: array(2) {",
          "42:   [0]=>",
          "43:   string(4) \"bar1\"",
          "44:   [1]=>",
          "45:   string(3) \"foo\"",
          "46: }",
          "47: array_column 2: array(2) {",
          "48:   [\"qux1\"]=>",
          "49:   string(4) \"bar1\"",
          "50:   [\"baz\"]=>",
          "51:   string(3) \"foo\"",
          "52: }",
          "53: ---- running with_keyset with",
          "54: keyset(6) {",
          "55:   string(1) \"q\"",
          "56:   string(1) \"u\"",
          "57:   string(1) \"e\"",
          "58:   string(1) \"n\"",
          "59:   string(1) \"t\"",
          "60:   string(1) \"i\"",
          "61: }",
          "62: array_diff_assoc: array(4) {",
          "63:   [\"u\"]=>",
          "64:   string(1) \"u\"",
          "65:   [\"e\"]=>",
          "66:   string(1) \"e\"",
          "67:   [\"t\"]=>",
          "68:   string(1) \"t\"",
          "69:   [\"i\"]=>",
          "70:   string(1) \"i\"",
          "71: }",
          "72: array_diff: array(4) {",
          "73:   [\"u\"]=>",
          "74:   string(1) \"u\"",
          "75:   [\"e\"]=>",
          "76:   string(1) \"e\"",
          "77:   [\"t\"]=>",
          "78:   string(1) \"t\"",
          "79:   [\"i\"]=>",
          "80:   string(1) \"i\"",
          "81: }",
          "82: array_diff_key: array(5) {",
          "83:   [\"u\"]=>",
          "84:   string(1) \"u\"",
          "85:   [\"e\"]=>",
          "86:   string(1) \"e\"",
          "87:   [\"n\"]=>",
          "88:   string(1) \"n\"",
          "89:   [\"t\"]=>",
          "90:   string(1) \"t\"",
          "91:   [\"i\"]=>",
          "92:   string(1) \"i\"",
          "93: }",
          "94: array_diff_uassoc: array(5) {",
          "95:   [\"u\"]=>",
          "96:   string(1) \"u\"",
          "97:   [\"e\"]=>",
          "98:   string(1) \"e\"",
          "99:   [\"n\"]=>",
          "100:   string(1) \"n\"",
          "101:   [\"t\"]=>",
          "102:   string(1) \"t\"",
          "103:   [\"i\"]=>",
          "104:   string(1) \"i\"",
          "105: }",
          "106: array_diff_ukey: array(4) {",
          "107:   [\"u\"]=>",
          "108:   string(1) \"u\"",
          "109:   [\"e\"]=>",
          "110:   string(1) \"e\"",
          "111:   [\"t\"]=>",
          "112:   string(1) \"t\"",
          "113:   [\"i\"]=>",
          "114:   string(1) \"i\"",
          "115: }",
          "116: array_udiff: array(4) {",
          "117:   [\"u\"]=>",
          "118:   string(1) \"u\"",
          "119:   [\"e\"]=>",
          "120:   string(1) \"e\"",
          "121:   [\"t\"]=>",
          "122:   string(1) \"t\"",
          "123:   [\"i\"]=>",
          "124:   string(1) \"i\"",
          "125: }",
          "126: array_udiff_assoc: array(5) {",
          "127:   [\"u\"]=>",
          "128:   string(1) \"u\"",
          "129:   [\"e\"]=>",
          "130:   string(1) \"e\"",
          "131:   [\"n\"]=>",
          "132:   string(1) \"n\"",
          "133:   [\"t\"]=>",
          "134:   string(1) \"t\"",
          "135:   [\"i\"]=>",
          "136:   string(1) \"i\"",
          "137: }",
          "138: array_udiff_uassoc: array(4) {",
          "139:   [\"u\"]=>",
          "140:   string(1) \"u\"",
          "141:   [\"e\"]=>",
          "142:   string(1) \"e\"",
          "143:   [\"t\"]=>",
          "144:   string(1) \"t\"",
          "145:   [\"i\"]=>",
          "146:   string(1) \"i\"",
          "147: }",
          "148: array_combine 1:",
          "149: Warning: array_combine(): Both parameters should have an equal number of elements in %s/builtins.php on line %d",
          "150: bool(false)",
          "151: array_combine 2: array(6) {",
          "152:   [\"q\"]=>",
          "153:   int(1)",
          "154:   [\"u\"]=>",
          "155:   int(2)",
          "156:   [\"e\"]=>",
          "157:   int(3)",
          "158:   [\"n\"]=>",
          "159:   int(4)",
          "160:   [\"t\"]=>",
          "161:   int(5)",
          "162:   [\"i\"]=>",
          "163:   int(6)",
          "164: }",
          "165: array_uintersect_assoc: array(1) {",
          "166:   [\"q\"]=>",
          "167:   string(1) \"q\"",
          "168: }",
          "169: array_uintersect_uassoc: array(2) {",
          "170:   [\"q\"]=>",
          "171:   string(1) \"q\"",
          "172:   [\"n\"]=>",
          "173:   string(1) \"n\"",
          "174: }",
          "175: array_intersect_assoc: array(2) {",
          "176:   [\"q\"]=>",
          "177:   string(1) \"q\"",
          "178:   [\"n\"]=>",
          "179:   string(1) \"n\"",
          "180: }",
          "181: array_intersect_key: array(2) {",
          "182:   [\"q\"]=>",
          "183:   string(1) \"q\"",
          "184:   [\"n\"]=>",
          "185:   string(1) \"n\"",
          "186: }",
          "187: array_intersect_uassoc: array(1) {",
          "188:   [\"q\"]=>",
          "189:   string(1) \"q\"",
          "190: }",
          "191: array_intersect_ukey: array(2) {",
          "192:   [\"q\"]=>",
          "193:   string(1) \"q\"",
          "194:   [\"n\"]=>",
          "195:   string(1) \"n\"",
          "196: }",
          "197: array_intersect: array(2) {",
          "198:   [\"q\"]=>",
          "199:   string(1) \"q\"",
          "200:   [\"n\"]=>",
          "201:   string(1) \"n\"",
          "202: }",
          "203: array_uintersect: array(2) {",
          "204:   [\"q\"]=>",
          "205:   string(1) \"q\"",
          "206:   [\"n\"]=>",
          "207:   string(1) \"n\"",
          "208: }",
          "209: array_filter: array(3) {",
          "210:   [\"u\"]=>",
          "211:   string(1) \"u\"",
          "212:   [\"e\"]=>",
          "213:   string(1) \"e\"",
          "214:   [\"i\"]=>",
          "215:   string(1) \"i\"",
          "216: }",
          "217: array_flip: array(6) {",
          "218:   [\"q\"]=>",
          "219:   string(1) \"q\"",
          "220:   [\"u\"]=>",
          "221:   string(1) \"u\"",
          "222:   [\"e\"]=>",
          "223:   string(1) \"e\"",
          "224:   [\"n\"]=>",
          "225:   string(1) \"n\"",
          "226:   [\"t\"]=>",
          "227:   string(1) \"t\"",
          "228:   [\"i\"]=>",
          "229:   string(1) \"i\"",
          "230: }",
          "231: array_map: array(3) {",
          "232:   [\"H\"]=>",
          "233:   string(1) \"I\"",
          "234:   [\"A\"]=>",
          "235:   string(1) \"B\"",
          "236:   [\"L\"]=>",
          "237:   string(1) \"M\"",
          "238: }",
          "239: array_merge: array(6) {",
          "240:   [0]=>",
          "241:   int(1)",
          "242:   [1]=>",
          "243:   int(2)",
          "244:   [2]=>",
          "245:   int(3)",
          "246:   [\"a\"]=>",
          "247:   string(1) \"a\"",
          "248:   [\"b\"]=>",
          "249:   string(1) \"b\"",
          "250:   [\"c\"]=>",
          "251:   string(1) \"c\"",
          "252: }",
          "253: array_reverse: array(6) {",
          "254:   [\"i\"]=>",
          "255:   string(1) \"i\"",
          "256:   [\"t\"]=>",
          "257:   string(1) \"t\"",
          "258:   [\"n\"]=>",
          "259:   string(1) \"n\"",
          "260:   [\"e\"]=>",
          "261:   string(1) \"e\"",
          "262:   [\"u\"]=>",
          "263:   string(1) \"u\"",
          "264:   [\"q\"]=>",
          "265:   string(1) \"q\"",
          "266: }",
          "267: array_slice: array(4) {",
          "268:   [\"e\"]=>",
          "269:   string(1) \"e\"",
          "270:   [\"n\"]=>",
          "271:   string(1) \"n\"",
          "272:   [\"t\"]=>",
          "273:   string(1) \"t\"",
          "274:   [\"i\"]=>",
          "275:   string(1) \"i\"",
          "276: }",
          "277: array_key_exists: array(2) {",
          "278:   [0]=>",
          "279:   bool(false)",
          "280:   [1]=>",
          "281:   bool(true)",
          "282: }",
          "283: array_keys: array(6) {",
          "284:   [0]=>",
          "285:   string(1) \"q\"",
          "286:   [1]=>",
          "287:   string(1) \"u\"",
          "288:   [2]=>",
          "289:   string(1) \"e\"",
          "290:   [3]=>",
          "291:   string(1) \"n\"",
          "292:   [4]=>",
          "293:   string(1) \"t\"",
          "294:   [5]=>",
          "295:   string(1) \"i\"",
          "296: }",
          "297: array_pop: string(1) \"i\"",
          "298: keyset(5) {",
          "299:   string(1) \"q\"",
          "300:   string(1) \"u\"",
          "301:   string(1) \"e\"",
          "302:   string(1) \"n\"",
          "303:   string(1) \"t\"",
          "304: }",
          "305: array_product: float(0)",
          "306: array_rand: string(1) \"i\"",
          "307: array_reduce: string(6) \"quenti\"",
          "308: array_search 1: string(1) \"n\"",
          "309: array_search 2: bool(false)",
          "310: array_shift: string(1) \"q\"",
          "311: keyset(4) {",
          "312:   string(1) \"u\"",
          "313:   string(1) \"e\"",
          "314:   string(1) \"n\"",
          "315:   string(1) \"t\"",
          "316: }",
          "317: array_sum: float(0)",
          "318: current 1: string(1) \"u\"",
          "319: each: array(4) {",
          "320:   [1]=>",
          "321:   string(1) \"u\"",
          "322:   [\"value\"]=>",
          "323:   string(1) \"u\"",
          "324:   [0]=>",
          "325:   string(1) \"u\"",
          "326:   [\"key\"]=>",
          "327:   string(1) \"u\"",
          "328: }",
          "329: current 2: string(1) \"e\"",
          "330: end: string(1) \"t\"",
          "331: extract: int(1)",
          "332: string(14) \"php_is_awesome\"",
          "333: in_array: array(2) {",
          "334:   [0]=>",
          "335:   bool(false)",
          "336:   [1]=>",
          "337:   bool(true)",
          "338: }",
          "339: key: string(1) \"t\"",
          "340: next: bool(false)",
          "341: prev 1: bool(false)",
          "342: prev 2: string(1) \"n\"",
          "343: reset: string(1) \"u\"",
          "344: count: int(6)",
          "345: array_pad 1: array(7) {",
          "346:   [\"q\"]=>",
          "347:   string(1) \"q\"",
          "348:   [\"u\"]=>",
          "349:   string(1) \"u\"",
          "350:   [\"e\"]=>",
          "351:   string(1) \"e\"",
          "352:   [\"n\"]=>",
          "353:   string(1) \"n\"",
          "354:   [\"t\"]=>",
          "355:   string(1) \"t\"",
          "356:   [\"i\"]=>",
          "357:   string(1) \"i\"",
          "358:   [0]=>",
          "359:   string(1) \"n\"",
          "360: }",
          "361: array_pad 2: array(6) {",
          "362:   [\"q\"]=>",
          "363:   string(1) \"q\"",
          "364:   [\"u\"]=>",
          "365:   string(1) \"u\"",
          "366:   [\"e\"]=>",
          "367:   string(1) \"e\"",
          "368:   [\"n\"]=>",
          "369:   string(1) \"n\"",
          "370:   [\"t\"]=>",
          "371:   string(1) \"t\"",
          "372:   [\"i\"]=>",
          "373:   string(1) \"i\"",
          "374: }",
          "375: array_replace: array(6) {",
          "376:   [\"q\"]=>",
          "377:   string(1) \"r\"",
          "378:   [\"u\"]=>",
          "379:   string(1) \"u\"",
          "380:   [\"e\"]=>",
          "381:   string(1) \"e\"",
          "382:   [\"n\"]=>",
          "383:   string(1) \"n\"",
          "384:   [\"t\"]=>",
          "385:   string(1) \"t\"",
          "386:   [\"i\"]=>",
          "387:   string(1) \"i\"",
          "388: }",
          "389: array_unique 1: array(6) {",
          "390:   [\"q\"]=>",
          "391:   string(1) \"q\"",
          "392:   [\"u\"]=>",
          "393:   string(1) \"u\"",
          "394:   [\"e\"]=>",
          "395:   string(1) \"e\"",
          "396:   [\"n\"]=>",
          "397:   string(1) \"n\"",
          "398:   [\"t\"]=>",
          "399:   string(1) \"t\"",
          "400:   [\"i\"]=>",
          "401:   string(1) \"i\"",
          "402: }",
          "403: array_unique 2: array(0) {",
          "404: }",
          "405: int(5)",
          "406: int(6)",
          "407: keyset(6) {",
          "408:   string(1) \"q\"",
          "409:   string(1) \"u\"",
          "410:   string(1) \"e\"",
          "411:   string(1) \"n\"",
          "412:   string(1) \"t\"",
          "413:   string(1) \"i\"",
          "414: }",
          "415: ---- running with_keyset with",
          "416: keyset(0) {",
          "417: }",
          "418: array_diff_assoc: array(0) {",
          "419: }",
          "420: array_diff: array(0) {",
          "421: }",
          "422: array_diff_key: array(0) {",
          "423: }",
          "424: array_diff_uassoc: array(0) {",
          "425: }",
          "426: array_diff_ukey: array(0) {",
          "427: }",
          "428: array_udiff: array(0) {",
          "429: }",
          "430: array_udiff_assoc: array(0) {",
          "431: }",
          "432: array_udiff_uassoc: array(0) {",
          "433: }",
          "434: array_combine 1:",
          "435: Warning: array_combine(): Both parameters should have an equal number of elements in %s/builtins.php on line %d",
          "436: bool(false)",
          "437: array_combine 2:",
          "438: Warning: array_combine(): Both parameters should have an equal number of elements in %s/builtins.php on line %d",
          "439: bool(false)",
          "440: array_uintersect_assoc: array(0) {",
          "441: }",
          "442: array_uintersect_uassoc: array(0) {",
          "443: }",
          "444: array_intersect_assoc: array(0) {",
          "445: }",
          "446: array_intersect_key: array(0) {",
          "447: }",
          "448: array_intersect_uassoc: array(0) {",
          "449: }",
          "450: array_intersect_ukey: array(0) {",
          "451: }",
          "452: array_intersect: array(0) {",
          "453: }",
          "454: array_uintersect: array(0) {",
          "455: }",
          "456: array_filter: array(0) {",
          "457: }",
          "458: array_flip: array(0) {",
          "459: }",
          "460: array_map: array(3) {",
          "461:   [\"H\"]=>",
          "462:   string(1) \"I\"",
          "463:   [\"A\"]=>",
          "464:   string(1) \"B\"",
          "465:   [\"L\"]=>",
          "466:   string(1) \"M\"",
          "467: }",
          "468: array_merge: array(6) {",
          "469:   [0]=>",
          "470:   int(1)",
          "471:   [1]=>",
          "472:   int(2)",
          "473:   [2]=>",
          "474:   int(3)",
          "475:   [\"a\"]=>",
          "476:   string(1) \"a\"",
          "477:   [\"b\"]=>",
          "478:   string(1) \"b\"",
          "479:   [\"c\"]=>",
          "480:   string(1) \"c\"",
          "481: }",
          "482: array_reverse: array(0) {",
          "483: }",
          "484: array_slice: array(0) {",
          "485: }",
          "486: array_key_exists: array(2) {",
          "487:   [0]=>",
          "488:   bool(false)",
          "489:   [1]=>",
          "490:   bool(false)",
          "491: }",
          "492: array_keys: array(0) {",
          "493: }",
          "494: array_pop: NULL",
          "495: keyset(0) {",
          "496: }",
          "497: array_product: int(1)",
          "498: array_rand:",
          "499: Warning: Second argument has to be between 1 and the number of elements in the array in %s/builtins.php on line %d",
          "500: NULL",
          "501: array_reduce: string(0) \"\"",
          "502: array_search 1: bool(false)",
          "503: array_search 2: bool(false)",
          "504: array_shift: NULL",
          "505: keyset(0) {",
          "506: }",
          "507: array_sum: int(0)",
          "508: current 1: bool(false)",
          "509: each: bool(false)",
          "510: current 2: bool(false)",
          "511: end: bool(false)",
          "512: extract: int(1)",
          "513: string(14) \"php_is_awesome\"",
          "514: in_array: array(2) {",
          "515:   [0]=>",
          "516:   bool(false)",
          "517:   [1]=>",
          "518:   bool(false)",
          "519: }",
          "520: key: NULL",
          "521: next: bool(false)",
          "522: prev 1: bool(false)",
          "523: prev 2: bool(false)",
          "524: reset: bool(false)",
          "525: count: int(0)",
          "526: array_pad 1: array(7) {",
          "527:   [0]=>",
          "528:   string(1) \"n\"",
          "529:   [1]=>",
          "530:   string(1) \"n\"",
          "531:   [2]=>",
          "532:   string(1) \"n\"",
          "533:   [3]=>",
          "534:   string(1) \"n\"",
          "535:   [4]=>",
          "536:   string(1) \"n\"",
          "537:   [5]=>",
          "538:   string(1) \"n\"",
          "539:   [6]=>",
          "540:   string(1) \"n\"",
          "541: }",
          "542: array_pad 2: array(2) {",
          "543:   [0]=>",
          "544:   string(1) \"x\"",
          "545:   [1]=>",
          "546:   string(1) \"x\"",
          "547: }",
          "548: array_replace: array(1) {",
          "549:   [\"q\"]=>",
          "550:   string(1) \"r\"",
          "551: }",
          "552: array_unique 1: array(0) {",
          "553: }",
          "554: array_unique 2: array(0) {",
          "555: }",
          "556: int(1)",
          "557: int(2)",
          "558: keyset(2) {",
          "559:   string(1) \"q\"",
          "560:   string(1) \"i\"",
          "561: }",
          "562: array_merge_recursive: array(3) {",
          "563:   [\"colors\"]=>",
          "564:   array(3) {",
          "565:     [\"green\"]=>",
          "566:     array(2) {",
          "567:       [0]=>",
          "568:       string(5) \"green\"",
          "569:       [1]=>",
          "570:       string(5) \"green\"",
          "571:     }",
          "572:     [\"red\"]=>",
          "573:     string(3) \"red\"",
          "574:     [\"blue\"]=>",
          "575:     string(4) \"blue\"",
          "576:   }",
          "577:   [0]=>",
          "578:   int(5)",
          "579:   [1]=>",
          "580:   int(10)",
          "581: }",
          "582: array_replace_recursive 1: array(3) {",
          "583:   [\"colors\"]=>",
          "584:   keyset(2) {",
          "585:     string(5) \"green\"",
          "586:     string(3) \"red\"",
          "587:   }",
          "588:   [0]=>",
          "589:   int(5)",
          "590:   [\"green\"]=>",
          "591:   string(4) \"blue\"",
          "592: }",
          "593: array_replace_recursive 2: array(2) {",
          "594:   [\"colors\"]=>",
          "595:   array(2) {",
          "596:     [\"green\"]=>",
          "597:     string(4) \"blue\"",
          "598:     [\"red\"]=>",
          "599:     string(3) \"red\"",
          "600:   }",
          "601:   [0]=>",
          "602:   int(5)",
          "603: }",
          "604: array_splice:",
          "605: Warning: Invalid operand type was used: array_splice expects array(s) in %s/builtins.php on line %d",
          "606: NULL",
          "607: shuffle:",
          "608: Warning: Invalid operand type was used: shuffle expects array(s) in %s/builtins.php on line %d",
          "609: bool(false)",
          "610: array_multisort:",
          "611: Warning: Invalid operand type was used: array_multisort expects array(s) in %s/builtins.php on line %d",
          "612: bool(false)",
          "613: array_walk:",
          "614: Warning: Invalid operand type was used: array_walk expects array(s) in %s/builtins.php on line %d",
          "615: bool(false)",
          "616: array_walk_recursive:",
          "617: Warning: Invalid operand type was used: array_walk_recursive expects array(s) in %s/builtins.php on line %d",
          "618: bool(false)",
          "619: array_fill_keys: array(2) {",
          "620:   [\"fizz\"]=>",
          "621:   int(42)",
          "622:   [\"buzz\"]=>",
          "623:   int(42)",
          "624: }",
          "625: array_fill: array(2) {",
          "626:   [10]=>",
          "627:   int(42)",
          "628:   [11]=>",
          "629:   int(42)",
          "630: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05e706d98f748f609b19d8697e490eaab5007d69",
      "candidate_info": {
        "commit_hash": "05e706d98f748f609b19d8697e490eaab5007d69",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/05e706d98f748f609b19d8697e490eaab5007d69",
        "files": [
          "hphp/runtime/ext/array/ext_array.cpp",
          "hphp/test/slow/array_functions/self_recursive.php",
          "hphp/test/slow/array_functions/self_recursive.php.expectf"
        ],
        "message": "Fix recursion checks in array_*_recursive\n\nSummary:\narray_merge_recursive and array_replace_recursive do recursion checks,\nbut use the fact that normal arrays can't contain cycles except\nthrough references to avoid most of the checking.\n\nUnfortunately the $GLOBALS array is special, and /can/ contain cycles\nwithout references, and ProxyArrays could potentially do the same (via\nan as-yet unimplemented extension).\n\nReviewed By: mxw\n\nDifferential Revision: D3622612\n\nfbshipit-source-id: ed90b747096a05919a80c4793e2a2b7c57584d56",
        "before_after_code_files": [
          "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
          "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
          "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
            "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
            "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
          ],
          "candidate": [
            "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
            "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
            "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp": [
          "File: hphp/runtime/ext/array/ext_array.cpp -> hphp/runtime/ext/array/ext_array.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "379:   arr1.merge(arr2);",
          "380: }",
          "382: static void php_array_merge_recursive(PointerSet &seen, bool check,",
          "383:                                       Array &arr1, const Array& arr2) {",
          "390:   }",
          "392:   for (ArrayIter iter(arr2); iter; ++iter) {",
          "",
          "[Removed Lines]",
          "384:   if (check) {",
          "385:     if (seen.find((void*)arr1.get()) != seen.end()) {",
          "386:       raise_warning(\"array_merge_recursive(): recursion detected\");",
          "387:       return;",
          "388:     }",
          "389:     seen.insert((void*)arr1.get());",
          "",
          "[Added Lines]",
          "382: static bool couldRecur(const Variant& v, const Array& arr) {",
          "383:   return v.isReferenced() ||",
          "384:     arr.get()->kind() == ArrayData::kGlobalsKind ||",
          "385:     arr.get()->kind() == ArrayData::kProxyKind;",
          "386: }",
          "390:   if (check && !seen.insert((void*)arr1.get()).second) {",
          "391:     raise_warning(\"array_merge_recursive(): recursion detected\");",
          "392:     return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:       Variant &v = arr1.lvalAt(key, AccessFlags::Key);",
          "401:       auto subarr1 = v.toArray().copy();",
          "403:                                 value.toArray());",
          "404:       v.unset(); // avoid contamination of the value that was strongly bound",
          "405:       v = subarr1;",
          "",
          "[Removed Lines]",
          "402:       php_array_merge_recursive(seen, v.isReferenced(), subarr1,",
          "",
          "[Added Lines]",
          "405:       php_array_merge_recursive(seen,",
          "406:                                 couldRecur(v, subarr1),",
          "407:                                 subarr1,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "567: static void php_array_replace_recursive(PointerSet &seen, bool check,",
          "568:                                         Array &arr1, const Array& arr2) {",
          "575:   }",
          "577:   for (ArrayIter iter(arr2); iter; ++iter) {",
          "",
          "[Removed Lines]",
          "569:   if (check) {",
          "570:     if (seen.find((void*)arr1.get()) != seen.end()) {",
          "571:       raise_warning(\"array_replace_recursive(): recursion detected\");",
          "572:       return;",
          "573:     }",
          "574:     seen.insert((void*)arr1.get());",
          "",
          "[Added Lines]",
          "574:   if (arr1.get() == arr2.get()) {",
          "580:     return;",
          "581:   }",
          "583:   if (check && !seen.insert((void*)arr1.get()).second) {",
          "584:     raise_warning(\"array_replace_recursive(): recursion detected\");",
          "585:     return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "582:       if (v.isArray()) {",
          "583:         Array subarr1 = v.toArray();",
          "584:         const ArrNR& arr_value = value.toArrNR();",
          "587:         v = subarr1;",
          "588:       } else {",
          "589:         arr1.set(key, value, true);",
          "",
          "[Removed Lines]",
          "585:         php_array_replace_recursive(seen, v.isReferenced(), subarr1,",
          "586:                                     arr_value);",
          "",
          "[Added Lines]",
          "596:         php_array_replace_recursive(seen, couldRecur(v, subarr1),",
          "597:                                     subarr1, arr_value);",
          "",
          "---------------"
        ],
        "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php": [
          "File: hphp/test/slow/array_functions/self_recursive.php -> hphp/test/slow/array_functions/self_recursive.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "3: function test($g) {",
          "4:   $GLOBALS['g'] = $GLOBALS;",
          "6:   array_replace_recursive($GLOBALS, $g);",
          "8:   $GLOBALS['g'] = $GLOBALS;",
          "9:   array_merge_recursive($GLOBALS, $g);",
          "10: }",
          "12: function main() {",
          "13:   $a = array();",
          "14:   $a['g'] = &$a;",
          "16:   test($a);",
          "17:   test($GLOBALS);",
          "18: }",
          "20: main();",
          "",
          "---------------"
        ],
        "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf": [
          "File: hphp/test/slow/array_functions/self_recursive.php.expectf -> hphp/test/slow/array_functions/self_recursive.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: Warning: array_replace_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 6",
          "4: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
          "6: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
          "8: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
          "10: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
          "12: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8f9559c6df7b4e50d95613297cd9a20e816d37d",
      "candidate_info": {
        "commit_hash": "f8f9559c6df7b4e50d95613297cd9a20e816d37d",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/f8f9559c6df7b4e50d95613297cd9a20e816d37d",
        "files": [
          "hphp/runtime/ext/array/ext_array.cpp",
          "hphp/test/slow/array_functions/self_recursive.php",
          "hphp/test/slow/array_functions/self_recursive.php.expectf"
        ],
        "message": "Fix self recursion in compact\n\nSummary: There were no checks at all.\n\nReviewed By: alexmalyshev\n\nDifferential Revision: D3623763\n\nfbshipit-source-id: 9d708deca05bbd121503e8f323b4f295fde8e835",
        "before_after_code_files": [
          "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
          "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
          "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
            "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
            "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
          ],
          "candidate": [
            "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
            "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
            "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp": [
          "File: hphp/runtime/ext/array/ext_array.cpp -> hphp/runtime/ext/array/ext_array.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "401:   arr1.merge(arr2);",
          "402: }",
          "405:   return v.isReferenced() ||",
          "408: }",
          "410: static void php_array_merge_recursive(PointerSet &seen, bool check,",
          "",
          "[Removed Lines]",
          "404: static bool couldRecur(const Variant& v, const Array& arr) {",
          "406:     arr.get()->kind() == ArrayData::kGlobalsKind ||",
          "407:     arr.get()->kind() == ArrayData::kProxyKind;",
          "",
          "[Added Lines]",
          "404: static bool couldRecur(const Variant& v, const ArrayData* arr) {",
          "406:     arr->kind() == ArrayData::kGlobalsKind ||",
          "407:     arr->kind() == ArrayData::kProxyKind;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "425:       Variant &v = arr1.lvalAt(key, AccessFlags::Key);",
          "426:       auto subarr1 = v.toArray().copy();",
          "427:       php_array_merge_recursive(seen,",
          "429:                                 subarr1,",
          "430:                                 value.toArray());",
          "431:       v.unset(); // avoid contamination of the value that was strongly bound",
          "",
          "[Removed Lines]",
          "428:                                 couldRecur(v, subarr1),",
          "",
          "[Added Lines]",
          "428:                                 couldRecur(v, subarr1.get()),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "619:       if (v.isArray()) {",
          "620:         Array subarr1 = v.toArray();",
          "621:         const ArrNR& arr_value = value.toArrNR();",
          "623:                                     subarr1, arr_value);",
          "624:         v = subarr1;",
          "625:       } else {",
          "",
          "[Removed Lines]",
          "622:         php_array_replace_recursive(seen, couldRecur(v, subarr1),",
          "",
          "[Added Lines]",
          "622:         php_array_replace_recursive(seen, couldRecur(v, subarr1.get()),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1225:   return true;",
          "1226: }",
          "1229:   if (var.isArray()) {",
          "1232:     }",
          "1233:   } else {",
          "1234:     String varname = var.toString();",
          "1235:     if (!varname.empty() && v->lookup(varname.get()) != NULL) {",
          "",
          "[Removed Lines]",
          "1228: static void compact(VarEnv* v, Array &ret, const Variant& var) {",
          "1230:     for (ArrayIter iter(var.getArrayData()); iter; ++iter) {",
          "1231:       compact(v, ret, iter.second());",
          "",
          "[Added Lines]",
          "1228: static void compact(PointerSet& seen,",
          "1229:                     VarEnv* v, Array &ret, const Variant& var) {",
          "1231:     auto adata = var.getArrayData();",
          "1232:     auto check = couldRecur(var, adata);",
          "1233:     if (check && !seen.insert(adata).second) {",
          "1234:       raise_warning(\"compact(): recursion detected\");",
          "1235:       return;",
          "1237:     for (ArrayIter iter(adata); iter; ++iter) {",
          "1238:       compact(seen, v, ret, iter.secondRef());",
          "1239:     }",
          "1240:     if (check) seen.erase(adata);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1245:   Array ret = Array::attach(MixedArray::MakeReserve(args.size() + 1));",
          "1246:   VarEnv* v = g_context->getOrCreateVarEnv();",
          "1247:   if (v) {",
          "1250:   }",
          "1251:   return ret;",
          "1252: }",
          "",
          "[Removed Lines]",
          "1248:     compact(v, ret, varname);",
          "1249:     compact(v, ret, args);",
          "",
          "[Added Lines]",
          "1256:     PointerSet seen;",
          "1257:     compact(seen, v, ret, varname);",
          "1258:     if (!args.empty()) compact(seen, v, ret, args);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1258:   Array ret = Array::attach(MixedArray::MakeReserve(args.size() + 1));",
          "1259:   VarEnv* v = g_context->getOrCreateVarEnv();",
          "1260:   if (v) {",
          "1263:   }",
          "1264:   return ret;",
          "1265: }",
          "",
          "[Removed Lines]",
          "1261:     compact(v, ret, varname);",
          "1262:     compact(v, ret, args);",
          "",
          "[Added Lines]",
          "1270:     PointerSet seen;",
          "1271:     compact(seen, v, ret, varname);",
          "1272:     if (!args.empty()) compact(seen, v, ret, args);",
          "",
          "---------------"
        ],
        "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php": [
          "File: hphp/test/slow/array_functions/self_recursive.php -> hphp/test/slow/array_functions/self_recursive.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   test($a);",
          "17:   test($GLOBALS);",
          "18: }",
          "20: main();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   var_dump(compact($a));",
          "",
          "---------------"
        ],
        "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf": [
          "File: hphp/test/slow/array_functions/self_recursive.php.expectf -> hphp/test/slow/array_functions/self_recursive.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
          "12: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: Warning: compact(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 18",
          "14: array(0) {",
          "15: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05e1c5860b3a276ce71f1aa99b7102acac420de6",
      "candidate_info": {
        "commit_hash": "05e1c5860b3a276ce71f1aa99b7102acac420de6",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/05e1c5860b3a276ce71f1aa99b7102acac420de6",
        "files": [
          "hphp/runtime/ext/array/ext_array.cpp",
          "hphp/test/slow/array_functions/self_recursive.php",
          "hphp/test/slow/array_functions/self_recursive.php.expectf"
        ],
        "message": "Fix self recursion in compact\n\nSummary: There were no checks at all.\n\nReviewed By: alexmalyshev\n\nDifferential Revision: D3623763\n\nfbshipit-source-id: 9d708deca05bbd121503e8f323b4f295fde8e835",
        "before_after_code_files": [
          "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
          "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
          "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
            "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
            "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
          ],
          "candidate": [
            "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
            "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
            "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp": [
          "File: hphp/runtime/ext/array/ext_array.cpp -> hphp/runtime/ext/array/ext_array.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "378:   arr1.merge(arr2);",
          "379: }",
          "382:   return v.isReferenced() ||",
          "385: }",
          "387: static void php_array_merge_recursive(PointerSet &seen, bool check,",
          "",
          "[Removed Lines]",
          "381: static bool couldRecur(const Variant& v, const Array& arr) {",
          "383:     arr.get()->kind() == ArrayData::kGlobalsKind ||",
          "384:     arr.get()->kind() == ArrayData::kProxyKind;",
          "",
          "[Added Lines]",
          "381: static bool couldRecur(const Variant& v, const ArrayData* arr) {",
          "383:     arr->kind() == ArrayData::kGlobalsKind ||",
          "384:     arr->kind() == ArrayData::kProxyKind;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "402:       Variant &v = arr1.lvalAt(key, AccessFlags::Key);",
          "403:       auto subarr1 = v.toArray().copy();",
          "404:       php_array_merge_recursive(seen,",
          "406:                                 subarr1,",
          "407:                                 value.toArray());",
          "408:       v.unset(); // avoid contamination of the value that was strongly bound",
          "",
          "[Removed Lines]",
          "405:                                 couldRecur(v, subarr1),",
          "",
          "[Added Lines]",
          "405:                                 couldRecur(v, subarr1.get()),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "591:       if (v.isArray()) {",
          "592:         Array subarr1 = v.toArray();",
          "593:         const ArrNR& arr_value = value.toArrNR();",
          "595:                                     subarr1, arr_value);",
          "596:         v = subarr1;",
          "597:       } else {",
          "",
          "[Removed Lines]",
          "594:         php_array_replace_recursive(seen, couldRecur(v, subarr1),",
          "",
          "[Added Lines]",
          "594:         php_array_replace_recursive(seen, couldRecur(v, subarr1.get()),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1215:   return true;",
          "1216: }",
          "1219:   if (var.isArray()) {",
          "1222:     }",
          "1223:   } else {",
          "1224:     String varname = var.toString();",
          "1225:     if (!varname.empty() && v->lookup(varname.get()) != NULL) {",
          "",
          "[Removed Lines]",
          "1218: static void compact(VarEnv* v, Array &ret, const Variant& var) {",
          "1220:     for (ArrayIter iter(var.getArrayData()); iter; ++iter) {",
          "1221:       compact(v, ret, iter.second());",
          "",
          "[Added Lines]",
          "1218: static void compact(PointerSet& seen,",
          "1219:                     VarEnv* v, Array &ret, const Variant& var) {",
          "1221:     auto adata = var.getArrayData();",
          "1222:     auto check = couldRecur(var, adata);",
          "1223:     if (check && !seen.insert(adata).second) {",
          "1224:       raise_warning(\"compact(): recursion detected\");",
          "1225:       return;",
          "1227:     for (ArrayIter iter(adata); iter; ++iter) {",
          "1228:       compact(seen, v, ret, iter.secondRef());",
          "1229:     }",
          "1230:     if (check) seen.erase(adata);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1235:   Array ret = Array::attach(PackedArray::MakeReserve(args.size() + 1));",
          "1236:   VarEnv* v = g_context->getOrCreateVarEnv();",
          "1237:   if (v) {",
          "1240:   }",
          "1241:   return ret;",
          "1242: }",
          "",
          "[Removed Lines]",
          "1238:     compact(v, ret, varname);",
          "1239:     compact(v, ret, args);",
          "",
          "[Added Lines]",
          "1246:     PointerSet seen;",
          "1247:     compact(seen, v, ret, varname);",
          "1248:     if (!args.empty()) compact(seen, v, ret, args);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1248:   Array ret = Array::attach(PackedArray::MakeReserve(args.size() + 1));",
          "1249:   VarEnv* v = g_context->getOrCreateVarEnv();",
          "1250:   if (v) {",
          "1253:   }",
          "1254:   return ret;",
          "1255: }",
          "",
          "[Removed Lines]",
          "1251:     compact(v, ret, varname);",
          "1252:     compact(v, ret, args);",
          "",
          "[Added Lines]",
          "1260:     PointerSet seen;",
          "1261:     compact(seen, v, ret, varname);",
          "1262:     if (!args.empty()) compact(seen, v, ret, args);",
          "",
          "---------------"
        ],
        "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php": [
          "File: hphp/test/slow/array_functions/self_recursive.php -> hphp/test/slow/array_functions/self_recursive.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   test($a);",
          "17:   test($GLOBALS);",
          "18: }",
          "20: main();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   var_dump(compact($a));",
          "",
          "---------------"
        ],
        "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf": [
          "File: hphp/test/slow/array_functions/self_recursive.php.expectf -> hphp/test/slow/array_functions/self_recursive.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
          "12: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: Warning: compact(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 18",
          "14: array(0) {",
          "15: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "757d59d689e739587d146cffe1a4fce4d4712c14",
      "candidate_info": {
        "commit_hash": "757d59d689e739587d146cffe1a4fce4d4712c14",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/757d59d689e739587d146cffe1a4fce4d4712c14",
        "files": [
          "hphp/runtime/ext/array/ext_array.cpp",
          "hphp/test/slow/array_functions/self_recursive.php",
          "hphp/test/slow/array_functions/self_recursive.php.expectf"
        ],
        "message": "Fix self recursion in compact\n\nSummary: There were no checks at all.\n\nReviewed By: alexmalyshev\n\nDifferential Revision: D3623763\n\nfbshipit-source-id: 9d708deca05bbd121503e8f323b4f295fde8e835",
        "before_after_code_files": [
          "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
          "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
          "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
            "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
            "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
          ],
          "candidate": [
            "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp",
            "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php",
            "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/array/ext_array.cpp||hphp/runtime/ext/array/ext_array.cpp": [
          "File: hphp/runtime/ext/array/ext_array.cpp -> hphp/runtime/ext/array/ext_array.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:   arr1.merge(arr2);",
          "373: }",
          "376:   return v.isReferenced() ||",
          "379: }",
          "381: static void php_array_merge_recursive(PointerSet &seen, bool check,",
          "",
          "[Removed Lines]",
          "375: static bool couldRecur(const Variant& v, const Array& arr) {",
          "377:     arr.get()->kind() == ArrayData::kGlobalsKind ||",
          "378:     arr.get()->kind() == ArrayData::kProxyKind;",
          "",
          "[Added Lines]",
          "375: static bool couldRecur(const Variant& v, const ArrayData* arr) {",
          "377:     arr->kind() == ArrayData::kGlobalsKind ||",
          "378:     arr->kind() == ArrayData::kProxyKind;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "396:       Variant &v = arr1.lvalAt(key, AccessFlags::Key);",
          "397:       auto subarr1 = v.toArray().copy();",
          "398:       php_array_merge_recursive(seen,",
          "400:                                 subarr1,",
          "401:                                 value.toArray());",
          "402:       v.unset(); // avoid contamination of the value that was strongly bound",
          "",
          "[Removed Lines]",
          "399:                                 couldRecur(v, subarr1),",
          "",
          "[Added Lines]",
          "399:                                 couldRecur(v, subarr1.get()),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "589:       if (v.isArray()) {",
          "590:         Array subarr1 = v.toArray();",
          "591:         const ArrNR& arr_value = value.toArrNR();",
          "593:                                     subarr1, arr_value);",
          "594:         v = subarr1;",
          "595:       } else {",
          "",
          "[Removed Lines]",
          "592:         php_array_replace_recursive(seen, couldRecur(v, subarr1),",
          "",
          "[Added Lines]",
          "592:         php_array_replace_recursive(seen, couldRecur(v, subarr1.get()),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1182:   return true;",
          "1183: }",
          "1186:   if (var.isArray()) {",
          "1189:     }",
          "1190:   } else {",
          "1191:     String varname = var.toString();",
          "1192:     if (!varname.empty() && v->lookup(varname.get()) != NULL) {",
          "",
          "[Removed Lines]",
          "1185: static void compact(VarEnv* v, Array &ret, const Variant& var) {",
          "1187:     for (ArrayIter iter(var.getArrayData()); iter; ++iter) {",
          "1188:       compact(v, ret, iter.second());",
          "",
          "[Added Lines]",
          "1185: static void compact(PointerSet& seen,",
          "1186:                     VarEnv* v, Array &ret, const Variant& var) {",
          "1188:     auto adata = var.getArrayData();",
          "1189:     auto check = couldRecur(var, adata);",
          "1190:     if (check && !seen.insert(adata).second) {",
          "1191:       raise_warning(\"compact(): recursion detected\");",
          "1192:       return;",
          "1194:     for (ArrayIter iter(adata); iter; ++iter) {",
          "1195:       compact(seen, v, ret, iter.secondRef());",
          "1196:     }",
          "1197:     if (check) seen.erase(adata);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1202:   Array ret = Array::attach(PackedArray::MakeReserve(args.size() + 1));",
          "1203:   VarEnv* v = g_context->getOrCreateVarEnv();",
          "1204:   if (v) {",
          "1207:   }",
          "1208:   return ret;",
          "1209: }",
          "",
          "[Removed Lines]",
          "1205:     compact(v, ret, varname);",
          "1206:     compact(v, ret, args);",
          "",
          "[Added Lines]",
          "1213:     PointerSet seen;",
          "1214:     compact(seen, v, ret, varname);",
          "1215:     if (!args.empty()) compact(seen, v, ret, args);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1215:   Array ret = Array::attach(PackedArray::MakeReserve(args.size() + 1));",
          "1216:   VarEnv* v = g_context->getOrCreateVarEnv();",
          "1217:   if (v) {",
          "1220:   }",
          "1221:   return ret;",
          "1222: }",
          "",
          "[Removed Lines]",
          "1218:     compact(v, ret, varname);",
          "1219:     compact(v, ret, args);",
          "",
          "[Added Lines]",
          "1227:     PointerSet seen;",
          "1228:     compact(seen, v, ret, varname);",
          "1229:     if (!args.empty()) compact(seen, v, ret, args);",
          "",
          "---------------"
        ],
        "hphp/test/slow/array_functions/self_recursive.php||hphp/test/slow/array_functions/self_recursive.php": [
          "File: hphp/test/slow/array_functions/self_recursive.php -> hphp/test/slow/array_functions/self_recursive.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   test($a);",
          "17:   test($GLOBALS);",
          "18: }",
          "20: main();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18:   var_dump(compact($a));",
          "",
          "---------------"
        ],
        "hphp/test/slow/array_functions/self_recursive.php.expectf||hphp/test/slow/array_functions/self_recursive.php.expectf": [
          "File: hphp/test/slow/array_functions/self_recursive.php.expectf -> hphp/test/slow/array_functions/self_recursive.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
          "12: Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: Warning: compact(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 18",
          "14: array(0) {",
          "15: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}