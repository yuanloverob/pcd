{
  "cve_id": "CVE-2019-15239",
  "cve_desc": "In the Linux kernel, a certain net/ipv4/tcp_output.c change, which was properly incorporated into 4.16.12, was incorrectly backported to the earlier longterm kernels, introducing a new vulnerability that was potentially more severe than the issue that was intended to be fixed by backporting. Specifically, by adding to a write queue between disconnection and re-connection, a local attacker can trigger multiple use-after-free conditions. This can result in a kernel crash, or potentially in privilege escalation. NOTE: this affects (for example) Linux distributions that use 4.9.x longterm kernels before 4.9.190 or 4.14.x longterm kernels before 4.14.139.",
  "repo": "torvalds/linux",
  "patch_hash": "7f582b248d0a86bae5788c548d7bb5bca6f7691a",
  "patch_info": {
    "commit_hash": "7f582b248d0a86bae5788c548d7bb5bca6f7691a",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/7f582b248d0a86bae5788c548d7bb5bca6f7691a",
    "files": [
      "net/ipv4/tcp_output.c"
    ],
    "message": "tcp: purge write queue in tcp_connect_init()\n\nsyzkaller found a reliable way to crash the host, hitting a BUG()\nin __tcp_retransmit_skb()\n\nMalicous MSG_FASTOPEN is the root cause. We need to purge write queue\nin tcp_connect_init() at the point we init snd_una/write_seq.\n\nThis patch also replaces the BUG() by a less intrusive WARN_ON_ONCE()\n\nkernel BUG at net/ipv4/tcp_output.c:2837!\ninvalid opcode: 0000 [#1] SMP KASAN\nDumping ftrace buffer:\n   (ftrace buffer empty)\nModules linked in:\nCPU: 0 PID: 5276 Comm: syz-executor0 Not tainted 4.17.0-rc3+ #51\nHardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011\nRIP: 0010:__tcp_retransmit_skb+0x2992/0x2eb0 net/ipv4/tcp_output.c:2837\nRSP: 0000:ffff8801dae06ff8 EFLAGS: 00010206\nRAX: ffff8801b9fe61c0 RBX: 00000000ffc18a16 RCX: ffffffff864e1a49\nRDX: 0000000000000100 RSI: ffffffff864e2e12 RDI: 0000000000000005\nRBP: ffff8801dae073a0 R08: ffff8801b9fe61c0 R09: ffffed0039c40dd2\nR10: ffffed0039c40dd2 R11: ffff8801ce206e93 R12: 00000000421eeaad\nR13: ffff8801ce206d4e R14: ffff8801ce206cc0 R15: ffff8801cd4f4a80\nFS:  0000000000000000(0000) GS:ffff8801dae00000(0063) knlGS:00000000096bc900\nCS:  0010 DS: 002b ES: 002b CR0: 0000000080050033\nCR2: 0000000020000000 CR3: 00000001c47b6000 CR4: 00000000001406f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nCall Trace:\n <IRQ>\n tcp_retransmit_skb+0x2e/0x250 net/ipv4/tcp_output.c:2923\n tcp_retransmit_timer+0xc50/0x3060 net/ipv4/tcp_timer.c:488\n tcp_write_timer_handler+0x339/0x960 net/ipv4/tcp_timer.c:573\n tcp_write_timer+0x111/0x1d0 net/ipv4/tcp_timer.c:593\n call_timer_fn+0x230/0x940 kernel/time/timer.c:1326\n expire_timers kernel/time/timer.c:1363 [inline]\n __run_timers+0x79e/0xc50 kernel/time/timer.c:1666\n run_timer_softirq+0x4c/0x70 kernel/time/timer.c:1692\n __do_softirq+0x2e0/0xaf5 kernel/softirq.c:285\n invoke_softirq kernel/softirq.c:365 [inline]\n irq_exit+0x1d1/0x200 kernel/softirq.c:405\n exiting_irq arch/x86/include/asm/apic.h:525 [inline]\n smp_apic_timer_interrupt+0x17e/0x710 arch/x86/kernel/apic/apic.c:1052\n apic_timer_interrupt+0xf/0x20 arch/x86/entry/entry_64.S:863\n\nFixes: cf60af03ca4e (\"net-tcp: Fast Open client - sendmsg(MSG_FASTOPEN)\")\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Yuchung Cheng <ycheng@google.com>\nCc: Neal Cardwell <ncardwell@google.com>\nReported-by: syzbot <syzkaller@googlegroups.com>\nAcked-by: Neal Cardwell <ncardwell@google.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/ipv4/tcp_output.c||net/ipv4/tcp_output.c"
    ]
  },
  "patch_diff": {
    "net/ipv4/tcp_output.c||net/ipv4/tcp_output.c": [
      "File: net/ipv4/tcp_output.c -> net/ipv4/tcp_output.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2833:   return -EBUSY;",
      "2835:  if (before(TCP_SKB_CB(skb)->seq, tp->snd_una)) {",
      "2838:   if (tcp_trim_head(sk, skb, tp->snd_una - TCP_SKB_CB(skb)->seq))",
      "2839:    return -ENOMEM;",
      "2840:  }",
      "",
      "[Removed Lines]",
      "2836:   if (before(TCP_SKB_CB(skb)->end_seq, tp->snd_una))",
      "2837:    BUG();",
      "",
      "[Added Lines]",
      "2836:   if (unlikely(before(TCP_SKB_CB(skb)->end_seq, tp->snd_una))) {",
      "2837:    WARN_ON_ONCE(1);",
      "2838:    return -EINVAL;",
      "2839:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3342:  sock_reset_flag(sk, SOCK_DONE);",
      "3343:  tp->snd_wnd = 0;",
      "3344:  tcp_init_wl(tp, 0);",
      "3345:  tp->snd_una = tp->write_seq;",
      "3346:  tp->snd_sml = tp->write_seq;",
      "3347:  tp->snd_up = tp->write_seq;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3347:  tcp_write_queue_purge(sk);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1bb5afd768b950e9ddcb62b3c31bce8bed3ef774",
      "candidate_info": {
        "commit_hash": "1bb5afd768b950e9ddcb62b3c31bce8bed3ef774",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1bb5afd768b950e9ddcb62b3c31bce8bed3ef774",
        "files": [
          "drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c"
        ],
        "message": "drm/amdgpu: fix null pointer panic with direct fw loading on gpu reset\n\nWhen system uses fw direct loading, then psp context structure won't be\ninitiliazed. And it is also unable to execute mode reset.\n\n[  434.601474] amdgpu 0000:0c:00.0: GPU reset begin!\n[  434.694326] amdgpu 0000:0c:00.0: GPU reset\n[  434.743152] BUG: unable to handle kernel NULL pointer dereference at\n0000000000000058\n[  434.838474] IP: psp_gpu_reset+0xc/0x30 [amdgpu]\n[  434.893532] PGD 406ed9067\n[  434.893533] P4D 406ed9067\n[  434.926376] PUD 400b46067\n[  434.959217] PMD 0\n[  435.033379] Oops: 0000 [#1] SMP\n[  435.072573] Modules linked in: amdgpu(OE) chash(OE) gpu_sched(OE) ttm(OE)\ndrm_kms_helper(OE) drm(OE) fb_sys_fops syscopyarea sysfillrect sysimgblt\nrpcsec_gss_krb5 auth_rpcgss nfsv4 nfs lockd grace fscache snd_hda_codec_realtek\nsnd_hda_codec_generic snd_hda_codec_hdmi snd_hda_intel snd_hda_codec\nsnd_hda_core snd_hwdep snd_pcm edac_mce_amd snd_seq_midi snd_seq_midi_event\nkvm_amd snd_rawmidi kvm irqbypass crct10dif_pclmul crc32_pclmul snd_seq\nghash_clmulni_intel snd_seq_device pcbc snd_timer eeepc_wmi aesni_intel snd\nasus_wmi aes_x86_64 sparse_keymap crypto_simd glue_helper joydev soundcore\nwmi_bmof cryptd video i2c_piix4 shpchp 8250_dw i2c_designware_platform mac_hid\ni2c_designware_core sunrpc parport_pc ppdev lp parport autofs4 hid_generic igb\nusbhid dca ptp mxm_wmi pps_core ahci hid i2c_algo_bit\n[  435.931754]  libahci wmi\n\nSigned-off-by: Huang Rui <ray.huang@amd.com>\nReviewed-by: Evan Quan <evan.quan@amd.com>\nSigned-off-by: Alex Deucher <alexander.deucher@amd.com>",
        "before_after_code_files": [
          "drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c||drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c||drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c": [
          "File: drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c -> drivers/gpu/drm/amd/amdgpu/amdgpu_psp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506: int psp_gpu_reset(struct amdgpu_device *adev)",
          "507: {",
          "508:  return psp_mode1_reset(&adev->psp);",
          "509: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:  if (adev->firmware.load_type != AMDGPU_FW_LOAD_PSP)",
          "509:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c1bd80cc216e7255bfabb94222676b51ab6868e",
      "candidate_info": {
        "commit_hash": "7c1bd80cc216e7255bfabb94222676b51ab6868e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7c1bd80cc216e7255bfabb94222676b51ab6868e",
        "files": [
          "arch/powerpc/kvm/book3s_hv_builtin.c"
        ],
        "message": "KVM: PPC: Book3S HV: Send kvmppc_bad_interrupt NMIs to Linux handlers\n\nIt's possible to take a SRESET or MCE in these paths due to a bug\nin the host code or a NMI IPI, etc. A recent bug attempting to load\na virtual address from real mode gave th complete but cryptic error,\nabridged:\n\n      Oops: Bad interrupt in KVM entry/exit code, sig: 6 [#1]\n      LE SMP NR_CPUS=2048 NUMA PowerNV\n      CPU: 53 PID: 6582 Comm: qemu-system-ppc Not tainted\n      NIP:  c0000000000155ac LR: c0000000000c2430 CTR: c000000000015580\n      REGS: c000000fff76dd80 TRAP: 0200   Not tainted\n      MSR:  9000000000201003 <SF,HV,ME,RI,LE>  CR: 48082222  XER: 00000000\n      CFAR: 0000000102900ef0 DAR: d00017fffd941a28 DSISR: 00000040 SOFTE: 3\n      NIP [c0000000000155ac] perf_trace_tlbie+0x2c/0x1a0\n      LR [c0000000000c2430] do_tlbies+0x230/0x2f0\n\nSending the NMIs through the Linux handlers gives a nicer output:\n\n      Severe Machine check interrupt [Not recovered]\n        NIP [c0000000000155ac]: perf_trace_tlbie+0x2c/0x1a0\n        Initiator: CPU\n        Error type: Real address [Load (bad)]\n          Effective address: d00017fffcc01a28\n      opal: Machine check interrupt unrecoverable: MSR(RI=0)\n      opal: Hardware platform error: Unrecoverable Machine Check exception\n      CPU: 0 PID: 6700 Comm: qemu-system-ppc Tainted: G   M\n      NIP:  c0000000000155ac LR: c0000000000c23c0 CTR: c000000000015580\n      REGS: c000000fff9e9d80 TRAP: 0200   Tainted: G   M\n      MSR:  9000000000201001 <SF,HV,ME,LE>  CR: 48082222  XER: 00000000\n      CFAR: 000000010cbc1a30 DAR: d00017fffcc01a28 DSISR: 00000040 SOFTE: 3\n      NIP [c0000000000155ac] perf_trace_tlbie+0x2c/0x1a0\n      LR [c0000000000c23c0] do_tlbies+0x1c0/0x280\n\nSigned-off-by: Nicholas Piggin <npiggin@gmail.com>\nSigned-off-by: Paul Mackerras <paulus@ozlabs.org>",
        "before_after_code_files": [
          "arch/powerpc/kvm/book3s_hv_builtin.c||arch/powerpc/kvm/book3s_hv_builtin.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/powerpc/kvm/book3s_hv_builtin.c||arch/powerpc/kvm/book3s_hv_builtin.c": [
          "File: arch/powerpc/kvm/book3s_hv_builtin.c -> arch/powerpc/kvm/book3s_hv_builtin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <linux/cma.h>",
          "19: #include <linux/bitops.h>",
          "21: #include <asm/cputable.h>",
          "22: #include <asm/kvm_ppc.h>",
          "23: #include <asm/kvm_book3s.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include <asm/asm-prototypes.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "634: void kvmppc_bad_interrupt(struct pt_regs *regs)",
          "635: {",
          "637:  panic(\"Bad KVM trap\");",
          "638: }",
          "",
          "[Removed Lines]",
          "636:  die(\"Bad interrupt in KVM entry/exit code\", regs, SIGABRT);",
          "",
          "[Added Lines]",
          "641:  if (TRAP(regs) == 0x100) {",
          "642:   get_paca()->in_nmi++;",
          "643:   system_reset_exception(regs);",
          "644:   get_paca()->in_nmi--;",
          "645:  } else if (TRAP(regs) == 0x200) {",
          "646:   machine_check_exception(regs);",
          "647:  } else {",
          "648:   die(\"Bad interrupt in KVM entry/exit code\", regs, SIGABRT);",
          "649:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}