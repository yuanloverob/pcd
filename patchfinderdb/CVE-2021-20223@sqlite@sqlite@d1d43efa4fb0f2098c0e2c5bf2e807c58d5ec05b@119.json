{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "43526f4adaaea25e1249967eb9d0ac7dd0c46a29",
      "candidate_info": {
        "commit_hash": "43526f4adaaea25e1249967eb9d0ac7dd0c46a29",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/43526f4adaaea25e1249967eb9d0ac7dd0c46a29",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/vdbe.c",
          "src/where.c",
          "test/gencol1.test"
        ],
        "message": "Merge latest trunk changes with this branch.\n\nFossilOrigin-Name: d693be375380fbfca426999a77eeecb8453fa77b77f608bfe266945dee1da41d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c566a91d5c4290b0a491a01e85bf8f9fbebf2910e0d478bafc2d22da7f749cae",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1023:     addrInsTop = addrCont = sqlite3VdbeAddOp1(v, OP_Yield, dest.iSDParm);",
          "1024:     VdbeCoverage(v);",
          "1025:     if( ipkColumn>=0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1023:     sqlite3VdbeReleaseRegisters(pParse, regData, pTab->nCol, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1280:     sqlite3VdbeAddOp1(v, OP_Close, srcTab);",
          "1281:   }else if( pSelect ){",
          "1282:     sqlite3VdbeGoto(v, addrCont);",
          "1283:     sqlite3VdbeJumpHere(v, addrInsTop);",
          "1284:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1284: #ifdef SQLITE_DEBUG",
          "1288:     if( sqlite3VdbeGetOp(v, addrCont-1)->opcode==OP_ReleaseReg ){",
          "1289:       assert( sqlite3VdbeGetOp(v, addrCont)->opcode==OP_Yield );",
          "1290:       sqlite3VdbeChangeP5(v, 1);",
          "1291:     }",
          "1292: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1548:   if( pTab->tabFlags & TF_HasNotNull ){",
          "1589:         }",
          "1604:         }",
          "1610:         }",
          "1611:       }",
          "",
          "[Removed Lines]",
          "1549:     for(i=0; i<nCol; i++){",
          "1550:       int iReg;",
          "1551:       onError = pTab->aCol[i].notNull;",
          "1553:       if( i==pTab->iPKey ){",
          "1555:       }",
          "1556:       if( aiChng && aiChng[i]<0 ){",
          "1558:         continue;",
          "1559:       }",
          "1560:       if( overrideError!=OE_Default ){",
          "1561:         onError = overrideError;",
          "1562:       }else if( onError==OE_Default ){",
          "1563:         onError = OE_Abort;",
          "1564:       }",
          "1565:       if( onError==OE_Replace && pTab->aCol[i].pDflt==0 ){",
          "1566:         onError = OE_Abort;",
          "1567:       }",
          "1568:       assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1569:           || onError==OE_Ignore || onError==OE_Replace );",
          "1570:       addr1 = 0;",
          "1571:       testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "1572:       testcase( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL );",
          "1573:       testcase( pTab->aCol[i].colFlags & COLFLAG_STORED );",
          "1574:       iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "1575:       switch( onError ){",
          "1576:         case OE_Replace: {",
          "1577:           assert( onError==OE_Replace );",
          "1578:           addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1579:           sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1580:             VdbeCoverage(v);",
          "1581:           if( (pTab->aCol[i].colFlags & COLFLAG_GENERATED)==0 ){",
          "1582:             sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1583:             sqlite3VdbeAddOp2(v, OP_NotNull, iReg, addr1);",
          "1584:               VdbeCoverage(v);",
          "1585:           }",
          "1586:           onError = OE_Abort;",
          "1590:         case OE_Abort:",
          "1591:           sqlite3MayAbort(pParse);",
          "1593:         case OE_Rollback:",
          "1594:         case OE_Fail: {",
          "1595:           char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1596:                                       pTab->aCol[i].zName);",
          "1597:           sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL,",
          "1598:                             onError, iReg);",
          "1599:           sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1600:           sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1601:           VdbeCoverage(v);",
          "1602:           if( addr1 ) sqlite3VdbeResolveLabel(v, addr1);",
          "1603:           break;",
          "1605:         default: {",
          "1606:           assert( onError==OE_Ignore );",
          "1607:           sqlite3VdbeAddOp2(v, OP_IsNull, iReg, ignoreDest);",
          "1608:           VdbeCoverage(v);",
          "1609:           break;",
          "1612:     }",
          "1613:   }",
          "",
          "[Added Lines]",
          "1562:       for(i=0; i<nCol; i++){",
          "1566:         onError = pCol->notNull;",
          "1568:         if( i==pTab->iPKey ){",
          "1571:         isGenerated = pCol->colFlags & COLFLAG_GENERATED;",
          "1572:         if( isGenerated && !b2ndPass ){",
          "1573:           nGenerated++;",
          "1576:         if( aiChng && aiChng[i]<0 && !isGenerated ){",
          "1578:           continue;",
          "1580:         if( overrideError!=OE_Default ){",
          "1581:           onError = overrideError;",
          "1582:         }else if( onError==OE_Default ){",
          "1583:           onError = OE_Abort;",
          "1584:         }",
          "1585:         if( onError==OE_Replace ){",
          "1588:           ){",
          "1589:             testcase( pCol->colFlags & COLFLAG_VIRTUAL );",
          "1590:             testcase( pCol->colFlags & COLFLAG_STORED );",
          "1591:             testcase( pCol->colFlags & COLFLAG_GENERATED );",
          "1592:             onError = OE_Abort;",
          "1593:           }else{",
          "1594:             assert( !isGenerated );",
          "1595:           }",
          "1596:         }else if( b2ndPass && !isGenerated ){",
          "1597:           continue;",
          "1598:         }",
          "1599:         assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1600:             || onError==OE_Ignore || onError==OE_Replace );",
          "1601:         testcase( i!=sqlite3TableColumnToStorage(pTab, i) );",
          "1602:         iReg = sqlite3TableColumnToStorage(pTab, i) + regNewData + 1;",
          "1603:         switch( onError ){",
          "1604:           case OE_Replace: {",
          "1605:             int addr1 = sqlite3VdbeAddOp1(v, OP_NotNull, iReg);",
          "1606:             VdbeCoverage(v);",
          "1607:             assert( (pCol->colFlags & COLFLAG_GENERATED)==0 );",
          "1608:             nSeenReplace++;",
          "1609:             sqlite3ExprCode(pParse, pCol->pDflt, iReg);",
          "1610:             sqlite3VdbeJumpHere(v, addr1);",
          "1611:             break;",
          "1612:           }",
          "1613:           case OE_Abort:",
          "1614:             sqlite3MayAbort(pParse);",
          "1616:           case OE_Rollback:",
          "1617:           case OE_Fail: {",
          "1618:             char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1619:                                         pCol->zName);",
          "1620:             sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL,",
          "1621:                               onError, iReg);",
          "1622:             sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1623:             sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1624:             VdbeCoverage(v);",
          "1625:             break;",
          "1626:           }",
          "1627:           default: {",
          "1628:             assert( onError==OE_Ignore );",
          "1629:             sqlite3VdbeAddOp2(v, OP_IsNull, iReg, ignoreDest);",
          "1630:             VdbeCoverage(v);",
          "1631:             break;",
          "1632:           }",
          "1635:       if( nGenerated==0 && nSeenReplace==0 ){",
          "1639:         break;",
          "1642:       b2ndPass = 1;",
          "1643:       if( nSeenReplace>0 && (pTab->tabFlags & TF_HasGenerated)!=0 ){",
          "1648:         sqlite3ComputeGeneratedColumns(pParse, regNewData+1, pTab);",
          "1649:       }",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "848: jump_to_p2_and_check_for_interrupt:",
          "849:   pOp = &aOp[pOp->p2 - 1];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "849: #ifdef SQLITE_DEBUG",
          "853:   if( pOp->p5 ){",
          "854:     assert( pOp->p2 < (int)(pOp - aOp) );",
          "855:     assert( pOp->p2 > 1 );",
          "856:     pOp = &aOp[pOp->p2 - 2];",
          "857:     assert( pOp[1].opcode==OP_ReleaseReg );",
          "858:     goto check_for_interrupt;",
          "859:   }",
          "860: #endif",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "870:     pTabItem->fg.viaCoroutine = 0;",
          "871:   }else{",
          "872:     sqlite3VdbeAddOp2(v, OP_Next, pLevel->iTabCur, addrTop+1); VdbeCoverage(v);",
          "873:   }",
          "875:   sqlite3VdbeJumpHere(v, addrTop);",
          "876:   sqlite3ReleaseTempReg(pParse, regRecord);",
          "",
          "[Removed Lines]",
          "874:   sqlite3VdbeChangeP5(v, SQLITE_STMTSTATUS_AUTOINDEX);",
          "",
          "[Added Lines]",
          "873:     sqlite3VdbeChangeP5(v, SQLITE_STMTSTATUS_AUTOINDEX);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3502:         if( rc==SQLITE_OK ){",
          "3503:           rc = whereLoopAddOr(&sSubBuild, mPrereq, mUnusable);",
          "3504:         }",
          "3506:         if( sCur.n==0 ){",
          "3507:           sSum.n = 0;",
          "3508:           break;",
          "",
          "[Removed Lines]",
          "3505:         assert( rc==SQLITE_OK || sCur.n==0 );",
          "",
          "[Added Lines]",
          "3505:         assert( rc==SQLITE_OK || rc==SQLITE_DONE || sCur.n==0 );",
          "3506:         testcase( rc==SQLITE_DONE );",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   REPLACE INTO t0(c1) VALUES(NULL);",
          "212: } {1 {NOT NULL constraint failed: t0.c0}}",
          "215: do_execsql_test gencol1-7.10 {",
          "217:   CREATE TABLE t0 (c0 GENERATED ALWAYS AS (1), c1 UNIQUE, c2 UNIQUE);",
          "218:   INSERT INTO t0(c1) VALUES (1);",
          "219:   SELECT quote(0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1) FROM t0;",
          "220: } {NULL}",
          "221: do_execsql_test gencol1-7.20 {",
          "225: # 2019-11-06 ticket 4fc08501f4e56692",
          "226: do_execsql_test gencol1-8.10 {",
          "",
          "[Removed Lines]",
          "214: # 2019-11-06 ticket b13b7dce76e9352b34e7",
          "216:   DROP TABLE IF EXISTS t0;",
          "222:   SELECT 99 FROM t0 WHERE 0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1;",
          "223: } {}",
          "",
          "[Added Lines]",
          "214: # 2019-11-06 ticket https://www.sqlite.org/src/info/2399f5986134f79c",
          "215: # 2019-12-27 ticket https://www.sqlite.org/src/info/5fbc159eeb092130",
          "216: # 2019-12-27 ticket https://www.sqlite.org/src/info/37823501c68a09f9",
          "217: #",
          "218: # All of the above tickets deal with NOT NULL ON CONFLICT REPLACE",
          "219: # constraints on tables that have generated columns.",
          "220: #",
          "221: reset_db",
          "227: do_execsql_test gencol1-7.11 {",
          "228:   DROP TABLE t0;",
          "229:   CREATE TABLE t0(c0 NOT NULL DEFAULT 'xyz', c1 AS(c0) NOT NULL);",
          "230:   REPLACE INTO t0(c0) VALUES(NULL);",
          "231:   SELECT * FROM t0;",
          "232: } {xyz xyz}",
          "233: do_execsql_test gencol1-7.12 {",
          "234:   DROP TABLE t0;",
          "235:   CREATE TABLE t0(c0 NOT NULL DEFAULT 'xyz', c1 AS(c0) STORED NOT NULL);",
          "236:   REPLACE INTO t0(c0) VALUES(NULL);",
          "237:   SELECT * FROM t0;",
          "238: } {xyz xyz}",
          "240:   CREATE TABLE t1(",
          "241:    a NOT NULL DEFAULT 'aaa',",
          "242:    b AS(c) NOT NULL,",
          "243:    c NOT NULL DEFAULT 'ccc');",
          "244:   REPLACE INTO t1(a,c) VALUES(NULL,NULL);",
          "245:   SELECT * FROM t1;",
          "246: } {aaa ccc ccc}",
          "247: do_execsql_test gencol1-7.21 {",
          "248:   DROP TABLE t1;",
          "249:   CREATE TABLE t1(",
          "250:    a NOT NULL DEFAULT 'aaa',",
          "251:    b AS(c) STORED NOT NULL,",
          "252:    c NOT NULL DEFAULT 'ccc');",
          "253:   REPLACE INTO t1(a,c) VALUES(NULL,NULL);",
          "254:   SELECT * FROM t1;",
          "255: } {aaa ccc ccc}",
          "256: do_execsql_test gencol1-7.30 {",
          "257:   CREATE TABLE t2(",
          "258:    a NOT NULL DEFAULT 'aaa',",
          "259:    b AS(a) NOT NULL,",
          "260:    c NOT NULL DEFAULT 'ccc');",
          "261:   REPLACE INTO t2(a,c) VALUES(NULL,NULL);",
          "262:   SELECT * FROM t2;",
          "263: } {aaa aaa ccc}",
          "264: do_execsql_test gencol1-7.31 {",
          "265:   DROP TABLE t2;",
          "266:   CREATE TABLE t2(",
          "267:    a NOT NULL DEFAULT 'aaa',",
          "268:    b AS(a) STORED NOT NULL,",
          "269:    c NOT NULL DEFAULT 'ccc');",
          "270:   REPLACE INTO t2(a,c) VALUES(NULL,NULL);",
          "271:   SELECT * FROM t2;",
          "272: } {aaa aaa ccc}",
          "273: do_execsql_test gencol1-7.40 {",
          "274:   CREATE TABLE t3(a NOT NULL DEFAULT 123, b AS(a) UNIQUE);",
          "275:   REPLACE INTO t3 VALUES(NULL);",
          "276:   SELECT * FROM t3;",
          "277: } {123 123}",
          "278: do_execsql_test gencol1-7.41 {",
          "279:   SELECT * FROM t3 WHERE b=123;",
          "280: } {123 123}",
          "281: do_execsql_test gencol1-7.50 {",
          "282:   CREATE TABLE t4(a NOT NULL DEFAULT 123, b AS(a*10+4) STORED UNIQUE);",
          "283:   REPLACE INTO t4 VALUES(NULL);",
          "284:   SELECT * FROM t4;",
          "285: } {123 1234}",
          "286: do_execsql_test gencol1-7.51 {",
          "287:   SELECT * FROM t4 WHERE b=1234;",
          "288: } {123 1234}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246: # 2019-11-21 Problems in the new generated column logic",
          "247: # reported by Yongheng Chen and Rui Zhong",
          "248: do_execsql_test gencol1-9.10 {",
          "249:   PRAGMA foreign_keys=OFF;",
          "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
          "252:   INSERT INTO t1 VALUES(17);",
          "253:   CREATE TABLE t2(cc);",
          "",
          "[Removed Lines]",
          "250:   DROP TABLE t1;",
          "",
          "[Added Lines]",
          "313: reset_db",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "483:   SELECT * FROM t0;",
          "484: } {0 0 0}",
          "489: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "551: # 2019-12-27 ticket de4b04149b9fdeae",
          "552: #",
          "553: reset_db",
          "554: do_catchsql_test gencol1-19.10 {",
          "555:   CREATE TABLE t0(",
          "556:     c0 INT AS(2) UNIQUE,",
          "557:     c1 TEXT UNIQUE,",
          "558:     FOREIGN KEY(c0) REFERENCES t0(c1)",
          "559:   );",
          "560:   INSERT INTO t0(c1) VALUES(0.16334143182538696), (0);",
          "561: } {1 {UNIQUE constraint failed: t0.c0}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e8c4f03266e1b89bc693c2294734c4f828a177f8",
      "candidate_info": {
        "commit_hash": "e8c4f03266e1b89bc693c2294734c4f828a177f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e8c4f03266e1b89bc693c2294734c4f828a177f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "test/whereD.test"
        ],
        "message": "In the OP_Column opcode, if the cursor is marked NullRow (due to being the right table of a LEFT JOIN that does not match) and the cursor is the table cursor for an OR-optimization with a covering index, then do not substitute the covering index cursor, since the covering index cursor does not have the NullRow flag set.  Ticket [aa4378693018aa99]\n\nFossilOrigin-Name: f02030b3403d67734bba471a91ad5bfdb03ddf6fdc3ef14808a04495e43b0470",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/whereD.test||test/whereD.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14d14eb537075c6ac77513b1e7305bed8bc01a9034dfb763fd96f76400f2b705",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3540:   assert( p->eCurType==CURTYPE_BTREE || p->eCurType==CURTYPE_PSEUDO );",
          "3541:   if( p->deferredMoveto ){",
          "3542:     int iMap;",
          "3546:       return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "3543:     if( p->aAltMap && (iMap = p->aAltMap[1+*piCol])>0 ){",
          "",
          "[Added Lines]",
          "3543:     if( p->aAltMap && (iMap = p->aAltMap[1+*piCol])>0 && !p->nullRow ){",
          "",
          "---------------"
        ],
        "test/whereD.test||test/whereD.test": [
          "File: test/whereD.test -> test/whereD.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:   SELECT c FROM x1 WHERE b=6 OR c=11 OR a=1",
          "338: } {7 11 3 search 7}",
          "340: #-------------------------------------------------------------------------",
          "341: #",
          "342: do_execsql_test 7.0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340: # 2020-02-22 ticket aa4378693018aa99",
          "341: # In the OP_Column opcode, if a cursor is marked with OP_NullRow",
          "342: # (because it is the right table of a LEFT JOIN that does not match)",
          "343: # then do not substitute index cursors, as the index cursors do not",
          "344: # have the VdbeCursor.nullRow flag set.",
          "345: #",
          "346: do_execsql_test 6.7 {",
          "347:   DROP TABLE IF EXISTS t1;",
          "348:   DROP TABLE IF EXISTS t2;",
          "349:   CREATE TABLE t1(a UNIQUE, b UNIQUE);",
          "350:   INSERT INTO t1(a,b) VALUES(null,2);",
          "351:   CREATE VIEW t2 AS SELECT * FROM t1 WHERE b<10 OR a<7 ORDER BY b;",
          "352:   SELECT t1.* FROM t1 LEFT JOIN t2 ON abs(t1.a)=abs(t2.b);",
          "353: } {{} 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4799488e163c02508894a7c71f256605f45d9645",
      "candidate_info": {
        "commit_hash": "4799488e163c02508894a7c71f256605f45d9645",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4799488e163c02508894a7c71f256605f45d9645",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/vdbe.c"
        ],
        "message": "Change the code generator for the IN operator so that it avoids creating OP_Eq and OP_Ne opcode with the same P1 and P3 arguments.  This enables us to back out check-in [ddb17d92df194337] and also fix ticket [188f912b51cd802].\n\nFossilOrigin-Name: 9ab985a9c8160b905730678f40ed440a246cdec549c798bafefaed5abbc0437f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 89a9dad6330270a4c3b962f86a208088d2ea9883c7d291351a77f058e0ed8b0c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3187:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "3188:       }",
          "3189:       if( ii<pList->nExpr-1 || destIfNull!=destIfFalse ){",
          "3191:                           (void*)pColl, P4_COLLSEQ);",
          "3194:         sqlite3VdbeChangeP5(v, zAff[0]);",
          "3195:       }else{",
          "3196:         assert( destIfNull==destIfFalse );",
          "3199:         sqlite3VdbeChangeP5(v, zAff[0] | SQLITE_JUMPIFNULL);",
          "3200:       }",
          "3201:       sqlite3ReleaseTempReg(pParse, regToFree);",
          "",
          "[Removed Lines]",
          "3190:         sqlite3VdbeAddOp4(v, OP_Eq, rLhs, labelOk, r2,",
          "3192:         VdbeCoverageIf(v, ii<pList->nExpr-1);",
          "3193:         VdbeCoverageIf(v, ii==pList->nExpr-1);",
          "3197:         sqlite3VdbeAddOp4(v, OP_Ne, rLhs, destIfFalse, r2,",
          "3198:                           (void*)pColl, P4_COLLSEQ); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "3190:         int op = rLhs!=r2 ? OP_Eq : OP_NotNull;",
          "3191:         sqlite3VdbeAddOp4(v, op, rLhs, labelOk, r2,",
          "3193:         VdbeCoverageIf(v, ii<pList->nExpr-1 && op==OP_Eq);",
          "3194:         VdbeCoverageIf(v, ii==pList->nExpr-1 && op==OP_Eq);",
          "3195:         VdbeCoverageIf(v, ii<pList->nExpr-1 && op==OP_NotNull);",
          "3196:         VdbeCoverageIf(v, ii==pList->nExpr-1 && op==OP_NotNull);",
          "3199:         int op = rLhs!=r2 ? OP_Ne : OP_IsNull;",
          "3201:         sqlite3VdbeAddOp4(v, op, rLhs, destIfFalse, r2,",
          "3202:                           (void*)pColl, P4_COLLSEQ);",
          "3203:         VdbeCoverageIf(v, op==OP_Ne);",
          "3204:         VdbeCoverageIf(v, op==OP_IsNull);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2028:       if( (flags1 | flags3)&MEM_Str ){",
          "2029:         if( (flags1 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "2030:           applyNumericAffinity(pIn1,0);",
          "2032:           flags3 = pIn3->flags;",
          "2033:         }",
          "2034:         if( (flags3 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Removed Lines]",
          "2031:           testcase( flags3!=pIn3->flags );",
          "",
          "[Added Lines]",
          "2031:           assert( flags3==pIn3->flags );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4defdddc31c9ad128ddc80860e794616664999ef",
      "candidate_info": {
        "commit_hash": "4defdddc31c9ad128ddc80860e794616664999ef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4defdddc31c9ad128ddc80860e794616664999ef",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c",
          "src/main.c",
          "src/pager.c",
          "src/sqlite.h.in",
          "src/sqlite3ext.h",
          "src/test_multiplex.c"
        ],
        "message": "Add the new sqlite3_create_filename() and sqlite3_free_filename() interfaces for use by Shims.  Use these interfaces inside the multiplexor.\n\nFossilOrigin-Name: 9469f36ac89e4b75d0ab25fefbeff25201992c53141da915dcaa017083cab6db",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c",
          "src/main.c||src/main.c",
          "src/pager.c||src/pager.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqlite3ext.h||src/sqlite3ext.h",
          "src/test_multiplex.c||src/test_multiplex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7fab1393c2b22b1f3b159b631e06e7e0d3900850ee249c38e4d3cdd0aacf637e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "474:   sqlite3_filename_database,",
          "475:   sqlite3_filename_journal,",
          "476:   sqlite3_filename_wal,",
          "477: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "478:   sqlite3_create_filename,",
          "479:   sqlite3_free_filename,",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4242:   return zName;",
          "4243: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4249: static char *appendText(char *p, const char *z){",
          "4250:   size_t n = strlen(z);",
          "4251:   memcpy(p, z, n+1);",
          "4252:   return p+n+1;",
          "4253: }",
          "4264: char *sqlite3_create_filename(",
          "4265:   const char *zDatabase,",
          "4266:   const char *zJournal,",
          "4267:   const char *zWal,",
          "4268:   int nParam,",
          "4269:   const char **azParam",
          "4270: ){",
          "4271:   sqlite3_int64 nByte;",
          "4272:   int i;",
          "4273:   char *pResult, *p;",
          "4274:   nByte = strlen(zDatabase) + strlen(zJournal) + strlen(zWal) + 10;",
          "4275:   for(i=0; i<nParam*2; i++){",
          "4276:     nByte += strlen(azParam[i])+1;",
          "4277:   }",
          "4278:   pResult = p = sqlite3_malloc64( nByte );",
          "4279:   if( p==0 ) return 0;",
          "4280:   memset(p, 0, 4);",
          "4281:   p += 4;",
          "4282:   p = appendText(p, zDatabase);",
          "4283:   for(i=0; i<nParam*2; i++){",
          "4284:     p = appendText(p, azParam[i]);",
          "4285:   }",
          "4287:   p = appendText(p, zJournal);",
          "4288:   p = appendText(p, zWal);",
          "4291:   assert( (sqlite3_int64)(p - pResult)==nByte );",
          "4292:   return pResult + 4;",
          "4293: }",
          "4300: void sqlite3_free_filename(char *p){",
          "4301:   if( p==0 ) return;",
          "4302:   p = (char*)databaseName(p);",
          "4303:   sqlite3_free(p - 4);",
          "4304: }",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3617: const char *sqlite3_filename_journal(const char*);",
          "3618: const char *sqlite3_filename_wal(const char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3665: char *sqlite3_create_filename(",
          "3666:   const char *zDatabase,",
          "3667:   const char *zJournal,",
          "3668:   const char *zWal,",
          "3669:   int nParam,",
          "3670:   const char **azParam",
          "3671: );",
          "3672: void sqlite3_free_filename(char*);",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "330:   const char *(*filename_database)(const char*);",
          "331:   const char *(*filename_journal)(const char*);",
          "332:   const char *(*filename_wal)(const char*);",
          "333: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "334:   char *(*create_filename)(const char*,const char*,const char*,",
          "335:                            int,const char**);",
          "336:   void (*free_filename)(char*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630: #define sqlite3_filename_database      sqlite3_api->filename_database",
          "631: #define sqlite3_filename_journal       sqlite3_api->filename_journal",
          "632: #define sqlite3_filename_wal           sqlite3_api->filename_wal",
          "635: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "638: #define sqlite3_create_filename        sqlite3_api->create_filename",
          "639: #define sqlite3_free_filename          sqlite3_api->free_filename",
          "",
          "---------------"
        ],
        "src/test_multiplex.c||src/test_multiplex.c": [
          "File: src/test_multiplex.c -> src/test_multiplex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "267:   if( pGroup->zName && pGroup->aReal[iChunk].z==0 ){",
          "268:     char *z;",
          "269:     int n = pGroup->nName;",
          "271:     if( z==0 ){",
          "272:       return SQLITE_NOMEM;",
          "273:     }",
          "274:     multiplexFilename(pGroup->zName, pGroup->nName, pGroup->flags, iChunk, z);",
          "275:   }",
          "276:   return SQLITE_OK;",
          "277: }",
          "",
          "[Removed Lines]",
          "270:     pGroup->aReal[iChunk].z = z = sqlite3_malloc64( n+5 );",
          "",
          "[Added Lines]",
          "270:     z = sqlite3_malloc64( n+5 );",
          "275:     pGroup->aReal[iChunk].z = sqlite3_create_filename(z,\"\",\"\",0,0);",
          "276:     sqlite3_free(z);",
          "277:     if( pGroup->aReal[iChunk].z==0 ) return SQLITE_NOMEM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:     }",
          "439:     sqlite3_free(pGroup->aReal[iChunk].p);",
          "440:   }",
          "442:   memset(&pGroup->aReal[iChunk], 0, sizeof(pGroup->aReal[iChunk]));",
          "443: }",
          "",
          "[Removed Lines]",
          "441:   sqlite3_free(pGroup->aReal[iChunk].z);",
          "",
          "[Added Lines]",
          "444:   sqlite3_free_filename(pGroup->aReal[iChunk].z);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22c04f819934ada3af6b712d9797ce34c58c813a",
      "candidate_info": {
        "commit_hash": "22c04f819934ada3af6b712d9797ce34c58c813a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/22c04f819934ada3af6b712d9797ce34c58c813a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/check.test"
        ],
        "message": "Allow comparison operators of a register against itself. Ticket [188f912b51cd802a],\n\nFossilOrigin-Name: 401c9d30e06191d938503aae024bc453d960fa64dc812ed86c661f94533247fd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/check.test||test/check.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bc8bfc7fcdf33f6855584e10e9260073430517ff3268cf0c7988dcc4cd785391",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2052:         sqlite3VdbeMemStringify(pIn1, encoding, 1);",
          "2053:         testcase( (flags1&MEM_Dyn) != (pIn1->flags&MEM_Dyn) );",
          "2054:         flags1 = (pIn1->flags & ~MEM_TypeMask) | (flags1 & MEM_TypeMask);",
          "2056:       }",
          "2058:         testcase( pIn3->flags & MEM_Int );",
          "2059:         testcase( pIn3->flags & MEM_Real );",
          "2060:         testcase( pIn3->flags & MEM_IntReal );",
          "",
          "[Removed Lines]",
          "2055:         assert( pIn1!=pIn3 );",
          "2057:       if( (flags3 & MEM_Str)==0 && (flags3&(MEM_Int|MEM_Real|MEM_IntReal))!=0 ){",
          "",
          "[Added Lines]",
          "2056:       if( (flags3 & MEM_Str)==0",
          "2057:        && (flags3&(MEM_Int|MEM_Real|MEM_IntReal))!=0",
          "2058:        && pIn1!=pIn3",
          "2059:       ){",
          "",
          "---------------"
        ],
        "test/check.test||test/check.test": [
          "File: test/check.test -> test/check.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing CHECK constraints",
          "13: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "14: # $Id: check.test,v 1.13 2009/06/05 17:09:12 drh Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "536:   INSERT INTO t2(b, a) VALUES(2, 'abc');",
          "537: }",
          "542: finish_test",
          "",
          "[Removed Lines]",
          "539: finish_test",
          "",
          "[Added Lines]",
          "538: # 2019-12-24 ticket b383b90278186263",
          "539: #",
          "540: reset_db",
          "541: do_execsql_test 12.10 {",
          "542:   CREATE TABLE t1(a TEXT, CHECK(a=+a));",
          "543:   INSERT INTO t1(a) VALUES(NULL),('xyz'),(5),(x'303132'),(4.75);",
          "544:   SELECT quote(a) FROM t1 ORDER BY rowid;",
          "545: } {NULL 'xyz' '5' X'303132' '4.75'}",
          "546: do_execsql_test 12.20 {",
          "547:   DROP TABLE t1;",
          "548:   CREATE TABLE t1(a TEXT, CHECK(a<>+a));",
          "549:   INSERT INTO t1(a) VALUES(NULL);",
          "550: } {}",
          "551: do_catchsql_test 12.21 {",
          "552:   INSERT INTO t1(a) VALUES('xyz');",
          "553: } {1 {CHECK constraint failed: t1}}",
          "554: do_catchsql_test 12.22 {",
          "555:   INSERT INTO t1(a) VALUES(123);",
          "556: } {1 {CHECK constraint failed: t1}}",
          "557: do_execsql_test 12.30 {",
          "558:   DROP TABLE t1;",
          "559:   CREATE TABLE t1(a TEXT, CHECK(NOT(a=+a)));",
          "560:   INSERT INTO t1(a) VALUES(NULL);",
          "561: } {}",
          "562: do_catchsql_test 12.31 {",
          "563:   INSERT INTO t1(a) VALUES('xyz');",
          "564: } {1 {CHECK constraint failed: t1}}",
          "565: do_catchsql_test 12.32 {",
          "566:   INSERT INTO t1(a) VALUES(123);",
          "567: } {1 {CHECK constraint failed: t1}}",
          "568: do_execsql_test 12.40 {",
          "569:   DROP TABLE t1;",
          "570:   CREATE TABLE t1(a TEXT, CHECK(NOT(a<>+a)));",
          "571:   INSERT INTO t1(a) VALUES(NULL),('xyz'),(5),(x'303132'),(4.75);",
          "572:   SELECT quote(a) FROM t1 ORDER BY rowid;",
          "573: } {NULL 'xyz' '5' X'303132' '4.75'}",
          "574: do_execsql_test 12.50 {",
          "575:   DROP TABLE t1;",
          "576:   CREATE TABLE t1(a TEXT, CHECK(a BETWEEN 0 AND +a));",
          "577:   INSERT INTO t1(a) VALUES(NULL),('xyz'),(5),(x'303132'),(4.75);",
          "578:   SELECT quote(a) FROM t1 ORDER BY rowid;",
          "579: } {NULL 'xyz' '5' X'303132' '4.75'}",
          "580: do_execsql_test 12.60 {",
          "581:   DROP TABLE t1;",
          "582:   CREATE TABLE t1(a TEXT, CHECK(a NOT BETWEEN 0 AND +a));",
          "583:   INSERT INTO t1(a) VALUES(NULL);",
          "584:   SELECT quote(a) FROM t1 ORDER BY rowid;",
          "585: } {NULL}",
          "586: do_catchsql_test 12.61 {",
          "587:   INSERT INTO t1(a) VALUES(456);",
          "588: } {1 {CHECK constraint failed: t1}}",
          "589: do_execsql_test 12.70 {",
          "590:   DROP TABLE t1;",
          "591:   CREATE TABLE t1(a TEXT, CHECK(a BETWEEN +a AND 999999));",
          "592:   INSERT INTO t1(a) VALUES(NULL),(5);",
          "593:   SELECT quote(a) FROM t1 ORDER BY rowid;",
          "594: } {NULL '5'}",
          "595: do_execsql_test 12.80 {",
          "596:   DROP TABLE t1;",
          "597:   CREATE TABLE t1(a TEXT, CHECK(a NOT BETWEEN +a AND 999999));",
          "598:   INSERT INTO t1(a) VALUES(NULL);",
          "599:   SELECT quote(a) FROM t1 ORDER BY rowid;",
          "600: } {NULL}",
          "601: do_catchsql_test 12.81 {",
          "602:   INSERT INTO t1(a) VALUES(456);",
          "603: } {1 {CHECK constraint failed: t1}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}