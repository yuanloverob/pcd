{
  "cve_id": "CVE-2017-20006",
  "cve_desc": "UnRAR 5.6.1.2 and 5.6.1.3 has a heap-based buffer overflow in Unpack::CopyString (called from Unpack::Unpack5 and CmdExtract::ExtractCurrentFile).",
  "repo": "aawc/unrar",
  "patch_hash": "0ff832d31470471803b175cfff4e40c1b08ee779",
  "patch_info": {
    "commit_hash": "0ff832d31470471803b175cfff4e40c1b08ee779",
    "repo": "aawc/unrar",
    "commit_url": "https://github.com/aawc/unrar/commit/0ff832d31470471803b175cfff4e40c1b08ee779",
    "files": [
      "arccmt.cpp",
      "archive.cpp",
      "archive.hpp",
      "arcmem.cpp",
      "arcmem.hpp",
      "arcread.cpp",
      "cmddata.cpp",
      "compress.hpp",
      "file.hpp",
      "makefile",
      "options.hpp",
      "qopen.cpp",
      "rar.cpp",
      "rar.hpp",
      "rardefs.hpp",
      "recvol5.cpp",
      "unicode.cpp",
      "unpack.hpp",
      "unpack30.cpp",
      "unpack50.cpp",
      "unpack50mt.cpp",
      "unpackinline.cpp"
    ],
    "message": "5.6.1.4: Use in-memory archive instead of file IO",
    "before_after_code_files": [
      "arccmt.cpp||arccmt.cpp",
      "archive.cpp||archive.cpp",
      "archive.hpp||archive.hpp",
      "arcmem.cpp||arcmem.cpp",
      "arcmem.hpp||arcmem.hpp",
      "arcread.cpp||arcread.cpp",
      "cmddata.cpp||cmddata.cpp",
      "compress.hpp||compress.hpp",
      "file.hpp||file.hpp",
      "options.hpp||options.hpp",
      "qopen.cpp||qopen.cpp",
      "rar.cpp||rar.cpp",
      "rar.hpp||rar.hpp",
      "rardefs.hpp||rardefs.hpp",
      "recvol5.cpp||recvol5.cpp",
      "unicode.cpp||unicode.cpp",
      "unpack.hpp||unpack.hpp",
      "unpack30.cpp||unpack30.cpp",
      "unpack50.cpp||unpack50.cpp",
      "unpack50mt.cpp||unpack50mt.cpp",
      "unpackinline.cpp||unpackinline.cpp"
    ]
  },
  "patch_diff": {
    "arccmt.cpp||arccmt.cpp": [
      "File: arccmt.cpp -> arccmt.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "121:     OemToCharA((char *)&CmtRaw[0],(char *)&CmtRaw[0]);",
      "122: #endif",
      "124:     CmtData->Alloc(wcslen(CmtData->Addr(0)));",
      "125:   }",
      "126: #endif",
      "",
      "[Removed Lines]",
      "123:     CharToWide((char *)&CmtRaw[0],CmtData->Addr(0),CmtLength);",
      "",
      "[Added Lines]",
      "123:     CharToWide((char *)&CmtRaw[0],CmtData->Addr(0),CmtData->Size());",
      "",
      "---------------"
    ],
    "archive.cpp||archive.cpp": [
      "File: archive.cpp -> archive.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: #include \"arccmt.cpp\"",
      "6: Archive::Archive(RAROptions *InitCmd)",
      "7: {",
      "8:   Cmd=NULL; // Just in case we'll have an exception in 'new' below.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #ifdef USE_ARCMEM",
      "7: #include \"arcmem.cpp\"",
      "8: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "49:   SilentOpen=false;",
      "51: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "55: #ifdef USE_QOPEN",
      "56:   ProhibitQOpen=false;",
      "57: #endif",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "298: bool Archive::Open(const wchar *Name,uint Mode)",
      "299: {",
      "302:   QOpen.Unload();",
      "304:   return File::Open(Name,Mode);",
      "305: }",
      "308: int Archive::Read(void *Data,size_t Size)",
      "309: {",
      "313:   return File::Read(Data,Size);",
      "314: }",
      "317: void Archive::Seek(int64 Offset,int Method)",
      "318: {",
      "321: }",
      "324: int64 Archive::Tell()",
      "325: {",
      "326:   int64 QPos;",
      "327:   if (QOpen.Tell(&QPos))",
      "328:     return QPos;",
      "329:   return File::Tell();",
      "330: }",
      "",
      "[Removed Lines]",
      "297: #ifdef USE_QOPEN",
      "310:   size_t Result;",
      "311:   if (QOpen.Read(Data,Size,Result))",
      "312:     return (int)Result;",
      "319:   if (!QOpen.Seek(Offset,Method))",
      "320:     File::Seek(Offset,Method);",
      "331: #endif",
      "",
      "[Added Lines]",
      "307: #ifdef USE_QOPEN",
      "311: #endif",
      "313: #ifdef USE_ARCMEM",
      "314:   if (Cmd->ArcInMem)",
      "315:   {",
      "316:     wcsncpyz(FileName,Name,ASIZE(FileName));",
      "317:     ArcMem.Load(Cmd->ArcMemData,Cmd->ArcMemSize);",
      "318:     Cmd->SetArcInMem(NULL,0); // Return in memory data for first volume only, not for next volumes.",
      "319:     return true;",
      "320:   }",
      "321: #endif",
      "328: bool Archive::Close()",
      "329: {",
      "330: #ifdef USE_ARCMEM",
      "331:   if (ArcMem.Unload())",
      "332:     return true;",
      "333: #endif",
      "334:   return File::Close();",
      "335: }",
      "341: #ifdef USE_QOPEN",
      "342:   size_t QResult;",
      "343:   if (QOpen.Read(Data,Size,QResult))",
      "344:     return (int)QResult;",
      "345: #endif",
      "346: #ifdef USE_ARCMEM",
      "347:   size_t AResult;",
      "348:   if (ArcMem.Read(Data,Size,AResult))",
      "349:     return (int)AResult;",
      "350: #endif",
      "357: #ifdef USE_QOPEN",
      "358:   if (QOpen.Seek(Offset,Method))",
      "359:     return;",
      "360: #endif",
      "361: #ifdef USE_ARCMEM",
      "362:   if (ArcMem.Seek(Offset,Method))",
      "363:     return;",
      "364: #endif",
      "365:   File::Seek(Offset,Method);",
      "371: #ifdef USE_QOPEN",
      "375: #endif",
      "376: #ifdef USE_ARCMEM",
      "377:   int64 APos;",
      "378:   if (ArcMem.Tell(&APos))",
      "379:     return APos;",
      "380: #endif",
      "386: bool Archive::IsOpened()",
      "387: {",
      "388: #ifdef USE_ARCMEM",
      "389:   if (ArcMem.IsLoaded())",
      "390:     return true;",
      "391: #endif",
      "392:   return File::IsOpened();",
      "393: };",
      "",
      "---------------"
    ],
    "archive.hpp||archive.hpp": [
      "File: archive.hpp -> archive.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "55:     bool SilentOpen;",
      "56: #ifdef USE_QOPEN",
      "57:     QuickOpen QOpen;",
      "58: #endif",
      "59:   public:",
      "60:     Archive(RAROptions *InitCmd=NULL);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "58:     bool ProhibitQOpen;",
      "59: #endif",
      "60: #ifdef USE_ARCMEM",
      "61:     ArcMemory ArcMem;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "89: #if 0",
      "90:     void GetRecoveryInfo(bool Required,int64 *Size,int *Percent);",
      "91: #endif",
      "93:     bool Open(const wchar *Name,uint Mode=FMF_READ);",
      "94:     int Read(void *Data,size_t Size);",
      "95:     void Seek(int64 Offset,int Method);",
      "96:     int64 Tell();",
      "97:     void QOpenUnload() {QOpen.Unload();}",
      "98: #endif",
      "100:     BaseBlock ShortBlock;",
      "",
      "[Removed Lines]",
      "92: #ifdef USE_QOPEN",
      "",
      "[Added Lines]",
      "97:     bool Close();",
      "101:     bool IsOpened();",
      "102: #ifdef USE_QOPEN",
      "104:     void SetProhibitQOpen(bool Mode) {ProhibitQOpen=Mode;}",
      "",
      "---------------"
    ],
    "arcmem.cpp||arcmem.cpp": [
      "File: arcmem.cpp -> arcmem.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: ArcMemory::ArcMemory()",
      "2: {",
      "3:   Loaded=false;",
      "4:   SeekPos=0;",
      "5: }",
      "8: void ArcMemory::Load(const byte *Data,size_t Size)",
      "9: {",
      "10:   ArcData.Alloc(Size);",
      "11:   memcpy(&ArcData[0],Data,Size);",
      "12:   Loaded=true;",
      "13:   SeekPos=0;",
      "14: }",
      "17: bool ArcMemory::Unload()",
      "18: {",
      "19:   if (!Loaded)",
      "20:     return false;",
      "21:   Loaded=false;",
      "22:   return true;",
      "23: }",
      "26: bool ArcMemory::Read(void *Data,size_t Size,size_t &Result)",
      "27: {",
      "28:   if (!Loaded)",
      "29:     return false;",
      "30:   Result=(size_t)Min(Size,ArcData.Size()-SeekPos);",
      "31:   memcpy(Data,&ArcData[(size_t)SeekPos],Result);",
      "32:   SeekPos+=Result;",
      "33:   return true;",
      "34: }",
      "37: bool ArcMemory::Seek(int64 Offset,int Method)",
      "38: {",
      "39:   if (!Loaded)",
      "40:     return false;",
      "41:   if (Method==SEEK_SET)",
      "42:     SeekPos=Min(Offset,ArcData.Size());",
      "43:   else",
      "44:     if (Method==SEEK_CUR || Method==SEEK_END)",
      "45:     {",
      "46:       if (Method==SEEK_END)",
      "47:         SeekPos=ArcData.Size();",
      "48:       SeekPos+=(uint64)Offset;",
      "49:       if (SeekPos>ArcData.Size())",
      "50:         SeekPos=Offset<0 ? 0 : ArcData.Size();",
      "51:     }",
      "52:   return true;",
      "53: }",
      "56: bool ArcMemory::Tell(int64 *Pos)",
      "57: {",
      "58:   if (!Loaded)",
      "59:     return false;",
      "61:   return true;",
      "62: }",
      "",
      "---------------"
    ],
    "arcmem.hpp||arcmem.hpp": [
      "File: arcmem.hpp -> arcmem.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #ifndef _RAR_ARCMEM_",
      "2: #define _RAR_ARCMEM_",
      "6: class ArcMemory",
      "7: {",
      "8:   private:",
      "9:     bool Loaded;",
      "10:     Array<byte> ArcData;",
      "11:     uint64 SeekPos;",
      "12:   public:",
      "13:     ArcMemory();",
      "14:     void Load(const byte *Data,size_t Size);",
      "15:     bool Unload();",
      "16:     bool IsLoaded() {return Loaded;}",
      "17:     bool Read(void *Data,size_t Size,size_t &Result);",
      "18:     bool Seek(int64 Offset,int Method);",
      "19:     bool Tell(int64 *Pos);",
      "20: };",
      "22: #endif",
      "",
      "---------------"
    ],
    "arcread.cpp||arcread.cpp": [
      "File: arcread.cpp -> arcread.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "757:           ProcessExtra50(&Raw,(size_t)ExtraSize,&MainHead);",
      "759: #ifdef USE_QOPEN",
      "761:         {",
      "",
      "[Removed Lines]",
      "760:         if (MainHead.Locator && MainHead.QOpenOffset>0 && Cmd->QOpenMode!=QOPEN_NONE)",
      "",
      "[Added Lines]",
      "760:         if (!ProhibitQOpen && MainHead.Locator && MainHead.QOpenOffset>0 && Cmd->QOpenMode!=QOPEN_NONE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1092:               wchar VerText[20];",
      "1093:               swprintf(VerText,ASIZE(VerText),L\";%u\",Version);",
      "1095:             }",
      "1096:           }",
      "1097:           break;",
      "",
      "[Removed Lines]",
      "1094:               wcsncatz(FileHead.FileName,VerText,ASIZE(FileHead.FileName));",
      "",
      "[Added Lines]",
      "1094:               wcsncatz(hd->FileName,VerText,ASIZE(hd->FileName));",
      "",
      "---------------"
    ],
    "cmddata.cpp||cmddata.cpp": [
      "File: cmddata.cpp -> cmddata.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "97:   else",
      "98:     if (*Command==0)",
      "99:     {",
      "",
      "[Removed Lines]",
      "100:       wcsncpy(Command,Arg,ASIZE(Command));",
      "",
      "[Added Lines]",
      "100:       wcsncpyz(Command,Arg,ASIZE(Command));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1194: {",
      "1195:   if (MatchedArg!=NULL && MatchedArgSize>0)",
      "1199:   bool Dir=FileHead.Dir;",
      "1200:   if (ExclCheck(FileHead.FileName,Dir,false,true))",
      "1201:     return 0;",
      "",
      "[Removed Lines]",
      "1197:   if (wcslen(FileHead.FileName)>=NM)",
      "1198:     return 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1249:       wcsncpyz(ArcName,Name,ASIZE(ArcName));",
      "1250:   }",
      "1253:   {",
      "1254:     if (GenerateArcName)",
      "1255:       GenerateArchiveName(ArcName,ASIZE(ArcName),GenerateMask,false);",
      "",
      "[Removed Lines]",
      "1252:   if (wcschr(L\"AFUMD\",*Command)==NULL)",
      "",
      "[Added Lines]",
      "1252:   if (wcschr(L\"AFUMD\",*Command)==NULL && !ArcInMem)",
      "",
      "---------------"
    ],
    "compress.hpp||compress.hpp": [
      "File: compress.hpp -> compress.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: class PackDef",
      "7: {",
      "8:   public:",
      "9:     static const uint MAX_LZ_MATCH = 0x1001;",
      "10:     static const uint MAX3_LZ_MATCH = 0x101; // Maximum match length for RAR v3.",
      "11:     static const uint LOW_DIST_REP_COUNT = 16;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "17:     static const uint MAX_INC_LZ_MATCH = MAX_LZ_MATCH + 3;",
      "",
      "---------------"
    ],
    "file.hpp||file.hpp": [
      "File: file.hpp -> file.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "78:     bool Create(const wchar *Name,uint Mode=FMF_UPDATE|FMF_SHAREREAD);",
      "79:     void TCreate(const wchar *Name,uint Mode=FMF_UPDATE|FMF_SHAREREAD);",
      "80:     bool WCreate(const wchar *Name,uint Mode=FMF_UPDATE|FMF_SHAREREAD);",
      "82:     bool Delete();",
      "83:     bool Rename(const wchar *NewName);",
      "84:     bool Write(const void *Data,size_t Size);",
      "",
      "[Removed Lines]",
      "81:     bool Close();",
      "",
      "[Added Lines]",
      "81:     virtual bool Close();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96:     void SetCloseFileTime(RarTime *ftm,RarTime *fta=NULL);",
      "97:     static void SetCloseFileTimeByName(const wchar *Name,RarTime *ftm,RarTime *fta);",
      "98:     void GetOpenFileTime(RarTime *ft);",
      "100:     int64 FileLength();",
      "101:     void SetHandleType(FILE_HANDLETYPE Type) {HandleType=Type;}",
      "102:     FILE_HANDLETYPE GetHandleType() {return HandleType;}",
      "",
      "[Removed Lines]",
      "99:     bool IsOpened() {return hFile!=FILE_BAD_HANDLE;};",
      "",
      "[Added Lines]",
      "99:     virtual bool IsOpened() {return hFile!=FILE_BAD_HANDLE;};",
      "",
      "---------------"
    ],
    "options.hpp||options.hpp": [
      "File: options.hpp -> options.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "89:     bool InclAttrSet;",
      "90:     size_t WinSize;",
      "91:     wchar TempPath[NM];",
      "93:     wchar SFXModule[NM];",
      "94:     QOPEN_MODE QOpenMode;",
      "95: #endif",
      "96:     bool ConfigDisabled; // Switch -cfg-.",
      "97:     wchar ExtrPath[NM];",
      "98:     wchar CommentFile[NM];",
      "",
      "[Removed Lines]",
      "92: #ifdef USE_QOPEN",
      "",
      "[Added Lines]",
      "94: #ifdef USE_QOPEN",
      "98:     bool ArcInMem;",
      "99: #ifdef USE_ARCMEM",
      "100:     void SetArcInMem(byte *Data,size_t Size)",
      "101:     {",
      "102:       ArcMemData=Data;",
      "103:       ArcMemSize=Size;",
      "104:       ArcInMem=Data!=NULL && Size>0;",
      "105:     }",
      "106:     byte *ArcMemData;",
      "107:     size_t ArcMemSize;",
      "108: #endif",
      "",
      "---------------"
    ],
    "qopen.cpp||qopen.cpp": [
      "File: qopen.cpp -> qopen.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "62: void QuickOpen::Load(uint64 BlockPos)",
      "63: {",
      "65:   {",
      "66:     SeekPos=Arc->Tell();",
      "67:     UnsyncSeekPos=false;",
      "69:     SaveFilePos SavePos(*Arc);",
      "70:     Arc->Seek(BlockPos,SEEK_SET);",
      "72:         !Arc->SubHead.CmpName(SUBHEAD_TYPE_QOPEN))",
      "73:       return;",
      "74:     QLHeaderPos=Arc->CurBlockPos;",
      "",
      "[Removed Lines]",
      "64:   if (!Loaded) // If loading the first time, perform additional intialization.",
      "71:     if (Arc->ReadHeader()==0 || Arc->GetHeaderType()!=HEAD_SERVICE ||",
      "",
      "[Added Lines]",
      "64:   if (!Loaded)",
      "80:     Arc->SetProhibitQOpen(true);",
      "81:     size_t ReadSize=Arc->ReadHeader();",
      "82:     Arc->SetProhibitQOpen(false);",
      "84:     if (ReadSize==0 || Arc->GetHeaderType()!=HEAD_SERVICE ||",
      "",
      "---------------"
    ],
    "rar.cpp||rar.cpp": [
      "File: rar.cpp -> rar.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "75:     ErrHandler.SetSilent(Cmd->AllYes || Cmd->MsgStream==MSG_NULL);",
      "77:     Cmd->OutTitle();",
      "78:     Cmd->ProcessCommand();",
      "79:     delete Cmd;",
      "80:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "79:     byte Buf[10000];",
      "80:     File Src;",
      "81:     Src.TOpen(L\"123.rar\");",
      "82:     int Size=Src.Read(Buf,sizeof(Buf));",
      "83:     Cmd->SetArcInMem(Buf,Size);",
      "",
      "---------------"
    ],
    "rar.hpp||rar.hpp": [
      "File: rar.hpp -> rar.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "45: #ifdef USE_QOPEN",
      "46: #include \"qopen.hpp\"",
      "47: #endif",
      "48: #include \"archive.hpp\"",
      "49: #include \"match.hpp\"",
      "50: #include \"cmddata.hpp\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "48: #ifdef USE_ARCMEM",
      "49: #include \"arcmem.hpp\"",
      "50: #endif",
      "",
      "---------------"
    ],
    "rardefs.hpp||rardefs.hpp": [
      "File: rardefs.hpp -> rardefs.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: #ifndef SFX_MODULE",
      "25: #define USE_QOPEN",
      "26: #endif",
      "29: #define ALIGN_VALUE(v,a) (size_t(v) + ( (~size_t(v) + 1) & (a - 1) ) )",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: #define USE_ARCMEM",
      "",
      "---------------"
    ],
    "recvol5.cpp||recvol5.cpp": [
      "File: recvol5.cpp -> recvol5.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "143:     return false; // Number part is missing in the name.",
      "144:   while (Num>ArcName && IsDigit(*(Num-1)))",
      "145:     Num--;",
      "146:   wcsncpyz(Num,L\"*.*\",ASIZE(ArcName)-(Num-ArcName));",
      "148:   wchar FirstVolName[NM];",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "146:   if (Num==ArcName)",
      "147:     return false; // Entire volume name is numeric, not possible for REV file.",
      "",
      "---------------"
    ],
    "unicode.cpp||unicode.cpp": [
      "File: unicode.cpp -> unicode.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "155:     {",
      "156:       mbstate_t ps;",
      "157:       memset(&ps,0,sizeof(ps));",
      "159:       {",
      "160:         Dest[DestPos]='_';",
      "161:         Success=false;",
      "",
      "[Removed Lines]",
      "158:       if (wcrtomb(Dest+DestPos,Src[SrcPos],&ps)==-1)",
      "",
      "[Added Lines]",
      "158:       if (wcrtomb(Dest+DestPos,Src[SrcPos],&ps)==(size_t)-1)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "192:     }",
      "193:     mbstate_t ps;",
      "194:     memset(&ps,0,sizeof(ps));",
      "196:     {",
      "",
      "[Removed Lines]",
      "195:     if (mbrtowc(Dest+DestPos,Src+SrcPos,MB_CUR_MAX,&ps)==-1)",
      "",
      "[Added Lines]",
      "195:     size_t res=mbrtowc(Dest+DestPos,Src+SrcPos,MB_CUR_MAX,&ps);",
      "196:     if (res==(size_t)-1 || res==(size_t)-2)",
      "",
      "---------------"
    ],
    "unpack.hpp||unpack.hpp": [
      "File: unpack.hpp -> unpack.hpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "329:     bool ReadEndOfBlock();",
      "330:     bool ReadVMCode();",
      "331:     bool ReadVMCodePPM();",
      "333:     int SafePPMDecodeChar();",
      "334:     bool ReadTables30();",
      "335:     bool UnpReadBuf30();",
      "",
      "[Removed Lines]",
      "332:     bool AddVMCode(uint FirstByte,byte *Code,int CodeSize);",
      "",
      "[Added Lines]",
      "332:     bool AddVMCode(uint FirstByte,byte *Code,uint CodeSize);",
      "",
      "---------------"
    ],
    "unpack30.cpp||unpack30.cpp": [
      "File: unpack30.cpp -> unpack30.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "358: }",
      "362: {",
      "363:   VMCodeInp.InitBitInput();",
      "364:   memcpy(VMCodeInp.InBuf,Code,Min(BitInput::MAX_SIZE,CodeSize));",
      "",
      "[Removed Lines]",
      "361: bool Unpack::AddVMCode(uint FirstByte,byte *Code,int CodeSize)",
      "",
      "[Added Lines]",
      "361: bool Unpack::AddVMCode(uint FirstByte,byte *Code,uint CodeSize)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "470:   if (NewFilter)",
      "471:   {",
      "472:     uint VMCodeSize=RarVM::ReadData(VMCodeInp);",
      "474:       return false;",
      "475:     Array<byte> VMCode(VMCodeSize);",
      "476:     for (uint I=0;I<VMCodeSize;I++)",
      "",
      "[Removed Lines]",
      "473:     if (VMCodeSize>=0x10000 || VMCodeSize==0)",
      "",
      "[Added Lines]",
      "473:     if (VMCodeSize>=0x10000 || VMCodeSize==0 || VMCodeInp.InAddr+VMCodeSize>CodeSize)",
      "",
      "---------------"
    ],
    "unpack50.cpp||unpack50.cpp": [
      "File: unpack50.cpp -> unpack50.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:         break;",
      "43:     }",
      "46:     {",
      "47:       UnpWriteBuf();",
      "48:       if (WrittenFileSize>DestUnpSize)",
      "",
      "[Removed Lines]",
      "45:     if (((WriteBorder-UnpPtr) & MaxWinMask)<MAX_LZ_MATCH+3 && WriteBorder!=UnpPtr)",
      "",
      "[Added Lines]",
      "45:     if (((WriteBorder-UnpPtr) & MaxWinMask)<MAX_INC_LZ_MATCH && WriteBorder!=UnpPtr)",
      "",
      "---------------"
    ],
    "unpack50mt.cpp||unpack50mt.cpp": [
      "File: unpack50mt.cpp -> unpack50mt.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "451:   while (Item<Border)",
      "452:   {",
      "453:     UnpPtr&=MaxWinMask;",
      "455:     {",
      "456:       UnpWriteBuf();",
      "457:       if (WrittenFileSize>DestUnpSize)",
      "",
      "[Removed Lines]",
      "454:     if (((WriteBorder-UnpPtr) & MaxWinMask)<MAX_LZ_MATCH+3 && WriteBorder!=UnpPtr)",
      "",
      "[Added Lines]",
      "454:     if (((WriteBorder-UnpPtr) & MaxWinMask)<MAX_INC_LZ_MATCH && WriteBorder!=UnpPtr)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "559:         break;",
      "560:       }",
      "561:     }",
      "563:     {",
      "564:       UnpWriteBuf();",
      "565:       if (WrittenFileSize>DestUnpSize)",
      "",
      "[Removed Lines]",
      "562:     if (((WriteBorder-UnpPtr) & MaxWinMask)<MAX_LZ_MATCH+3 && WriteBorder!=UnpPtr)",
      "",
      "[Added Lines]",
      "562:     if (((WriteBorder-UnpPtr) & MaxWinMask)<MAX_INC_LZ_MATCH && WriteBorder!=UnpPtr)",
      "",
      "---------------"
    ],
    "unpackinline.cpp||unpackinline.cpp": [
      "File: unpackinline.cpp -> unpackinline.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: _forceinline void Unpack::CopyString(uint Length,uint Distance)",
      "14: {",
      "15:   size_t SrcPtr=UnpPtr-Distance;",
      "17:   {",
      "",
      "[Removed Lines]",
      "16:   if (SrcPtr<MaxWinSize-MAX_LZ_MATCH && UnpPtr<MaxWinSize-MAX_LZ_MATCH)",
      "",
      "[Added Lines]",
      "16:   if (SrcPtr<MaxWinSize-MAX_INC_LZ_MATCH && UnpPtr<MaxWinSize-MAX_INC_LZ_MATCH)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9866c9649507f177233ca96feefac8b12e36a91f",
      "candidate_info": {
        "commit_hash": "9866c9649507f177233ca96feefac8b12e36a91f",
        "repo": "aawc/unrar",
        "commit_url": "https://github.com/aawc/unrar/commit/9866c9649507f177233ca96feefac8b12e36a91f",
        "files": [
          "arccmt.cpp",
          "archive.cpp",
          "archive.hpp",
          "arcmem.cpp",
          "arcread.cpp",
          "dll.cpp",
          "encname.cpp",
          "encname.hpp",
          "errhnd.cpp",
          "errhnd.hpp",
          "qopen.cpp",
          "savepos.hpp",
          "strfn.cpp",
          "strfn.hpp",
          "unpack20.cpp"
        ],
        "message": "5.6.1.5: Fixes bugs found through fuzzing",
        "before_after_code_files": [
          "arccmt.cpp||arccmt.cpp",
          "archive.cpp||archive.cpp",
          "archive.hpp||archive.hpp",
          "arcmem.cpp||arcmem.cpp",
          "arcread.cpp||arcread.cpp",
          "dll.cpp||dll.cpp",
          "encname.cpp||encname.cpp",
          "encname.hpp||encname.hpp",
          "errhnd.cpp||errhnd.cpp",
          "errhnd.hpp||errhnd.hpp",
          "qopen.cpp||qopen.cpp",
          "savepos.hpp||savepos.hpp",
          "strfn.cpp||strfn.cpp",
          "strfn.hpp||strfn.hpp",
          "unpack20.cpp||unpack20.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arccmt.cpp||arccmt.cpp",
            "archive.cpp||archive.cpp",
            "archive.hpp||archive.hpp",
            "arcmem.cpp||arcmem.cpp",
            "arcread.cpp||arcread.cpp",
            "qopen.cpp||qopen.cpp"
          ],
          "candidate": [
            "arccmt.cpp||arccmt.cpp",
            "archive.cpp||archive.cpp",
            "archive.hpp||archive.hpp",
            "arcmem.cpp||arcmem.cpp",
            "arcread.cpp||arcread.cpp",
            "qopen.cpp||qopen.cpp"
          ]
        }
      },
      "candidate_diff": {
        "arccmt.cpp||arccmt.cpp": [
          "File: arccmt.cpp -> arccmt.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:       Seek(SFXSize+SIZEOF_MARKHEAD3+SIZEOF_MAINHEAD3,SEEK_SET);",
          "26:         return false;",
          "27:     }",
          "28:     else",
          "",
          "[Removed Lines]",
          "25:       if (!ReadHeader())",
          "",
          "[Added Lines]",
          "25:       if (!ReadHeader() || GetHeaderType()!=HEAD3_CMT)",
          "",
          "---------------"
        ],
        "archive.cpp||archive.cpp": [
          "File: archive.cpp -> archive.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   CurBlockPos=0;",
          "35:   NextBlockPos=0;",
          "40:   memset(&MainHead,0,sizeof(MainHead));",
          "41:   memset(&CryptHead,0,sizeof(CryptHead));",
          "",
          "[Removed Lines]",
          "37:   RecoverySize=-1;",
          "38:   RecoveryPercent=-1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "archive.hpp||archive.hpp": [
          "File: archive.hpp -> archive.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:     bool DummyCmd;",
          "46:     RAROptions *Cmd;",
          "51:     RarTime LatestTime;",
          "52:     int LastReadBlock;",
          "",
          "[Removed Lines]",
          "48:     int64 RecoverySize;",
          "49:     int RecoveryPercent;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "arcmem.cpp||arcmem.cpp": [
          "File: arcmem.cpp -> arcmem.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:   if (!Loaded)",
          "40:     return false;",
          "41:   if (Method==SEEK_SET)",
          "43:   else",
          "44:     if (Method==SEEK_CUR || Method==SEEK_END)",
          "45:     {",
          "",
          "[Removed Lines]",
          "42:     SeekPos=Min(Offset,ArcData.Size());",
          "",
          "[Added Lines]",
          "42:   {",
          "43:     if (Offset<0)",
          "44:       SeekPos=0;",
          "45:     else",
          "46:       SeekPos=Min((uint64)Offset,ArcData.Size());",
          "47:   }",
          "",
          "---------------"
        ],
        "arcread.cpp||arcread.cpp": [
          "File: arcread.cpp -> arcread.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:         uint FileTime=Raw.Get4();",
          "266:         hd->UnpVer=Raw.Get1();",
          "267:         hd->Method=Raw.Get1()-0x30;",
          "268:         size_t NameSize=Raw.Get2();",
          "269:         hd->FileAttr=Raw.Get4();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:         if (hd->UnpVer<20 && (hd->FileAttr & 0x10)!=0)",
          "270:           hd->Dir=true;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333:             size_t Length=strlen(FileName);",
          "334:             Length++;",
          "335:             if (ReadNameSize>Length)",
          "337:                                ReadNameSize-Length,hd->FileName,",
          "338:                                ASIZE(hd->FileName));",
          "339:           }",
          "",
          "[Removed Lines]",
          "336:               NameCoder.Decode(FileName,(byte *)FileName+Length,",
          "",
          "[Added Lines]",
          "341:               NameCoder.Decode(FileName,ReadNameSize,(byte *)FileName+Length,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362:             hd->SubData.Alloc(DataSize);",
          "363:             Raw.GetB(&hd->SubData[0],DataSize);",
          "375:           }",
          "377:           if (hd->CmpName(SUBHEAD_TYPE_CMT))",
          "",
          "[Removed Lines]",
          "364:             if (hd->CmpName(SUBHEAD_TYPE_RR))",
          "365:             {",
          "366:               byte *D=&hd->SubData[8];",
          "367:               RecoverySize=D[0]+((uint)D[1]<<8)+((uint)D[2]<<16)+((uint)D[3]<<24);",
          "368:               RecoverySize*=512; // Sectors to size.",
          "369:               int64 CurPos=Tell();",
          "370:               RecoveryPercent=ToPercent(RecoverySize,CurPos);",
          "372:               if (ToPercent(RecoverySize+CurPos/200,CurPos)>RecoveryPercent)",
          "373:                 RecoveryPercent++;",
          "374:             }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "475:       ProtectHead.TotalBlocks=Raw.Get4();",
          "476:       Raw.GetB(ProtectHead.Mark,8);",
          "477:       NextBlockPos+=ProtectHead.DataSize;",
          "479:       break;",
          "480:     case HEAD3_OLDSERVICE:",
          "",
          "[Removed Lines]",
          "478:       RecoverySize=ProtectHead.RecSectors*512;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1228:     FileHead.PackSize=FileHead.DataSize;",
          "1229:     FileHead.WinSize=0x10000;",
          "1231:     FileHead.HostOS=HOST_MSDOS;",
          "1232:     FileHead.HSType=HSYS_WINDOWS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1224:     FileHead.Dir=(FileHead.FileAttr & 0x10)!=0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1336: void Archive::ConvertFileHeader(FileHeader *hd)",
          "1337: {",
          "1340:   if (hd->HSType==HSYS_UNKNOWN)",
          "1341:     if (hd->Dir)",
          "1342:       hd->FileAttr=0x10;",
          "",
          "[Removed Lines]",
          "1338:   if (Format==RARFMT15 && hd->UnpVer<20 && (hd->FileAttr & 0x10))",
          "1339:     hd->Dir=true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "dll.cpp||dll.cpp": [
          "File: dll.cpp -> dll.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   DataSet *Data=NULL;",
          "36:   try",
          "37:   {",
          "38:     r->OpenResult=0;",
          "39:     Data=new DataSet;",
          "40:     Data->Cmd.DllError=0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "38:     ErrHandler.Clean();",
          "",
          "---------------"
        ],
        "encname.cpp||encname.cpp": [
          "File: encname.cpp -> encname.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: {",
          "17:   size_t EncPos=0,DecPos=0;",
          "18:   byte HighByte=EncPos<EncSize ? EncName[EncPos++] : 0;",
          "",
          "[Removed Lines]",
          "14: void EncodeFileName::Decode(char *Name,byte *EncName,size_t EncSize,wchar *NameW,",
          "15:                             size_t MaxDecSize)",
          "",
          "[Added Lines]",
          "14: void EncodeFileName::Decode(char *Name,size_t NameSize,byte *EncName,size_t EncSize,",
          "15:                             wchar *NameW,size_t MaxDecSize)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:             if (EncPos>=EncSize)",
          "54:               break;",
          "55:             byte Correction=EncName[EncPos++];",
          "57:               NameW[DecPos]=((Name[DecPos]+Correction)&0xff)+(HighByte<<8);",
          "58:           }",
          "59:           else",
          "61:               NameW[DecPos]=Name[DecPos];",
          "62:         }",
          "63:         break;",
          "",
          "[Removed Lines]",
          "56:             for (Length=(Length&0x7f)+2;Length>0 && DecPos<MaxDecSize;Length--,DecPos++)",
          "60:             for (Length+=2;Length>0 && DecPos<MaxDecSize;Length--,DecPos++)",
          "",
          "[Added Lines]",
          "56:             for (Length=(Length&0x7f)+2;Length>0 && DecPos<MaxDecSize && DecPos<NameSize;Length--,DecPos++)",
          "60:             for (Length+=2;Length>0 && DecPos<MaxDecSize && DecPos<NameSize;Length--,DecPos++)",
          "",
          "---------------"
        ],
        "encname.hpp||encname.hpp": [
          "File: encname.hpp -> encname.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:   public:",
          "15:     EncodeFileName();",
          "16:     size_t Encode(char *Name,wchar *NameW,byte *EncName);",
          "18: };",
          "20: #endif",
          "",
          "[Removed Lines]",
          "17:     void Decode(char *Name,byte *EncName,size_t EncSize,wchar *NameW,size_t MaxDecSize);",
          "",
          "[Added Lines]",
          "17:     void Decode(char *Name,size_t NameSize,byte *EncName,size_t EncSize,wchar *NameW,size_t MaxDecSize);",
          "",
          "---------------"
        ],
        "errhnd.cpp||errhnd.cpp": [
          "File: errhnd.cpp -> errhnd.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "324: }",
          "328: {",
          "329: #if !defined(SFX_MODULE) && !defined(SILENT)",
          "330: #ifdef _WIN_ALL",
          "332:   int ErrType=GetLastError();",
          "357: #endif",
          "359: #if defined(_UNIX) || defined(_EMX)",
          "",
          "[Removed Lines]",
          "327: void ErrorHandler::SysErrMsg()",
          "331:   wchar *lpMsgBuf=NULL;",
          "333:   if (ErrType!=0 && FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER|FORMAT_MESSAGE_FROM_SYSTEM,",
          "334:               NULL,ErrType,MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),",
          "335:               (LPTSTR)&lpMsgBuf,0,NULL))",
          "336:   {",
          "337:     wchar *CurMsg=lpMsgBuf;",
          "338:     while (CurMsg!=NULL)",
          "339:     {",
          "340:       while (*CurMsg=='\\r' || *CurMsg=='\\n')",
          "341:         CurMsg++;",
          "342:       if (*CurMsg==0)",
          "343:         break;",
          "344:       wchar *EndMsg=wcschr(CurMsg,'\\r');",
          "345:       if (EndMsg==NULL)",
          "346:         EndMsg=wcschr(CurMsg,'\\n');",
          "347:       if (EndMsg!=NULL)",
          "348:       {",
          "350:         EndMsg++;",
          "351:       }",
          "352:       uiMsg(UIERROR_SYSERRMSG,CurMsg);",
          "353:       CurMsg=EndMsg;",
          "354:     }",
          "355:   }",
          "356:   LocalFree( lpMsgBuf );",
          "",
          "[Added Lines]",
          "328: bool ErrorHandler::GetSysErrMsg(wchar *Msg,size_t Size)",
          "333:   if (ErrType!=0)",
          "334:     return FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_IGNORE_INSERTS,",
          "335:                          NULL,ErrType,MAKELANGID(LANG_NEUTRAL,SUBLANG_DEFAULT),",
          "336:                          Msg,(DWORD)Size,NULL)!=0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "362:     char *err=strerror(errno);",
          "363:     if (err!=NULL)",
          "364:     {",
          "368:     }",
          "369:   }",
          "370: #endif",
          "372: #endif",
          "373: }",
          "",
          "[Removed Lines]",
          "365:       wchar Msg[1024];",
          "366:       CharToWide(err,Msg,ASIZE(Msg));",
          "367:       uiMsg(UIERROR_SYSERRMSG,Msg);",
          "",
          "[Added Lines]",
          "345:       CharToWide(err,Msg,Size);",
          "346:       return true;",
          "350: #endif",
          "351:   return false;",
          "352: }",
          "355: void ErrorHandler::SysErrMsg()",
          "356: {",
          "357: #if !defined(SFX_MODULE) && !defined(SILENT)",
          "358:   wchar Msg[1024];",
          "359:   if (!GetSysErrMsg(Msg,ASIZE(Msg)))",
          "360:     return;",
          "361: #ifdef _WIN_ALL",
          "362:   wchar *CurMsg=Msg;",
          "363:   while (CurMsg!=NULL)",
          "364:   {",
          "365:     while (*CurMsg=='\\r' || *CurMsg=='\\n')",
          "366:       CurMsg++;",
          "367:     if (*CurMsg==0)",
          "368:       break;",
          "369:     wchar *EndMsg=wcschr(CurMsg,'\\r');",
          "370:     if (EndMsg==NULL)",
          "371:       EndMsg=wcschr(CurMsg,'\\n');",
          "372:     if (EndMsg!=NULL)",
          "373:     {",
          "375:       EndMsg++;",
          "376:     }",
          "377:     uiMsg(UIERROR_SYSERRMSG,CurMsg);",
          "378:     CurMsg=EndMsg;",
          "379:   }",
          "380: #endif",
          "382: #if defined(_UNIX) || defined(_EMX)",
          "383:   uiMsg(UIERROR_SYSERRMSG,Msg);",
          "384: #endif",
          "",
          "---------------"
        ],
        "errhnd.hpp||errhnd.hpp": [
          "File: errhnd.hpp -> errhnd.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     void SetSignalHandlers(bool Enable);",
          "58:     void Throw(RAR_EXIT Code);",
          "59:     void SetSilent(bool Mode) {Silent=Mode;};",
          "60:     void SysErrMsg();",
          "61:     int GetSystemErrorCode();",
          "62:     void SetSystemErrorCode(int Code);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60:     bool GetSysErrMsg(wchar *Msg,size_t Size);",
          "",
          "---------------"
        ],
        "qopen.cpp||qopen.cpp": [
          "File: qopen.cpp -> qopen.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:                          Arc->SubHead.HashKey,Arc->SubHead.PswCheck);",
          "102:     else",
          "103: #endif",
          "104:       return;",
          "105:   }",
          "107:   RawDataPos=0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:     {",
          "105:       Loaded=false;",
          "107:     }",
          "",
          "---------------"
        ],
        "savepos.hpp||savepos.hpp": [
          "File: savepos.hpp -> savepos.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14:     }",
          "15:     ~SaveFilePos()",
          "16:     {",
          "18:     }",
          "19: };",
          "",
          "[Removed Lines]",
          "17:       SaveFile->Seek(SavePos,SEEK_SET);",
          "",
          "[Added Lines]",
          "22:       if (SaveFile->IsOpened())",
          "23:         SaveFile->Seek(SavePos,SEEK_SET);",
          "",
          "---------------"
        ],
        "strfn.cpp||strfn.cpp": [
          "File: strfn.cpp -> strfn.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     UtfToWide(Src,Dest,DestSize);",
          "37:   else",
          "38:   {",
          "40:     if (Encoding==ACTW_OEM)",
          "41:     {",
          "44:     }",
          "45:     CharToWide(Src,Dest,DestSize);",
          "46:   }",
          "",
          "[Removed Lines]",
          "39:     char NameA[NM];",
          "42:       IntToExt(Src,NameA,ASIZE(NameA));",
          "43:       Src=NameA;",
          "",
          "[Added Lines]",
          "40:     Array<char> NameA;",
          "43:       NameA.Alloc(DestSize+1);",
          "44:       IntToExt(Src,&NameA[0],NameA.Size());",
          "45:       Src=&NameA[0];",
          "",
          "---------------"
        ],
        "strfn.hpp||strfn.hpp": [
          "File: strfn.hpp -> strfn.hpp"
        ],
        "unpack20.cpp||unpack20.cpp": [
          "File: unpack20.cpp -> unpack20.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: void Unpack::CopyString20(uint Length,uint Distance)",
          "4: {",
          "6:   LastLength=Length;",
          "7:   DestUnpSize-=Length;",
          "8:   CopyString(Length,Distance);",
          "",
          "[Removed Lines]",
          "5:   LastDist=OldDist[OldDistPtr++ & 3]=Distance;",
          "",
          "[Added Lines]",
          "5:   LastDist=OldDist[OldDistPtr++]=Distance;",
          "6:   OldDistPtr = OldDistPtr & 3; // Needed if RAR 1.5 file is called after RAR 2.0.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc53b57bf64fa0919981c362252637f9c57012b2",
      "candidate_info": {
        "commit_hash": "bc53b57bf64fa0919981c362252637f9c57012b2",
        "repo": "aawc/unrar",
        "commit_url": "https://github.com/aawc/unrar/commit/bc53b57bf64fa0919981c362252637f9c57012b2",
        "files": [
          "archive.cpp",
          "archive.hpp",
          "cmddata.cpp",
          "file.hpp",
          "loclang.hpp",
          "model.cpp",
          "options.hpp",
          "rar.hpp",
          "rardefs.hpp",
          "scantree.cpp",
          "ui.hpp",
          "uiconsole.cpp",
          "unicode.cpp"
        ],
        "message": "5.6.1.7: Removes ArcMem. Fixes fuzzing bugs.\n\nAlso addresses CVE-2017-17969.",
        "before_after_code_files": [
          "archive.cpp||archive.cpp",
          "archive.hpp||archive.hpp",
          "cmddata.cpp||cmddata.cpp",
          "file.hpp||file.hpp",
          "loclang.hpp||loclang.hpp",
          "model.cpp||model.cpp",
          "options.hpp||options.hpp",
          "rar.hpp||rar.hpp",
          "rardefs.hpp||rardefs.hpp",
          "scantree.cpp||scantree.cpp",
          "ui.hpp||ui.hpp",
          "uiconsole.cpp||uiconsole.cpp",
          "unicode.cpp||unicode.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "archive.cpp||archive.cpp",
            "archive.hpp||archive.hpp",
            "cmddata.cpp||cmddata.cpp",
            "file.hpp||file.hpp",
            "options.hpp||options.hpp",
            "rar.hpp||rar.hpp",
            "rardefs.hpp||rardefs.hpp",
            "unicode.cpp||unicode.cpp"
          ],
          "candidate": [
            "archive.cpp||archive.cpp",
            "archive.hpp||archive.hpp",
            "cmddata.cpp||cmddata.cpp",
            "file.hpp||file.hpp",
            "options.hpp||options.hpp",
            "rar.hpp||rar.hpp",
            "rardefs.hpp||rardefs.hpp",
            "unicode.cpp||unicode.cpp"
          ]
        }
      },
      "candidate_diff": {
        "archive.cpp||archive.cpp": [
          "File: archive.cpp -> archive.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include \"arccmt.cpp\"",
          "10: Archive::Archive(RAROptions *InitCmd)",
          "11: {",
          "12:   Cmd=NULL; // Just in case we'll have an exception in 'new' below.",
          "",
          "[Removed Lines]",
          "6: #ifdef USE_ARCMEM",
          "7: #include \"arcmem.cpp\"",
          "8: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303: bool Archive::Open(const wchar *Name,uint Mode)",
          "304: {",
          "308:   QOpen.Unload();",
          "321:   return File::Open(Name,Mode);",
          "322: }",
          "337: int Archive::Read(void *Data,size_t Size)",
          "338: {",
          "349:   return File::Read(Data,Size);",
          "350: }",
          "353: void Archive::Seek(int64 Offset,int Method)",
          "354: {",
          "364: }",
          "367: int64 Archive::Tell()",
          "368: {",
          "370:   int64 QPos;",
          "371:   if (QOpen.Tell(&QPos))",
          "372:     return QPos;",
          "379:   return File::Tell();",
          "380: }",
          "389: #endif",
          "",
          "[Removed Lines]",
          "305: #ifdef USE_QOPEN",
          "309: #endif",
          "311: #ifdef USE_ARCMEM",
          "312:   if (Cmd->ArcInMem)",
          "313:   {",
          "314:     wcsncpyz(FileName,Name,ASIZE(FileName));",
          "315:     ArcMem.Load(Cmd->ArcMemData,Cmd->ArcMemSize);",
          "316:     Cmd->SetArcInMem(NULL,0); // Return in memory data for first volume only, not for next volumes.",
          "317:     return true;",
          "318:   }",
          "319: #endif",
          "326: bool Archive::Close()",
          "327: {",
          "328: #ifdef USE_ARCMEM",
          "329:   if (ArcMem.Unload())",
          "330:     return true;",
          "331: #endif",
          "332:   return File::Close();",
          "333: }",
          "339: #ifdef USE_QOPEN",
          "340:   size_t QResult;",
          "341:   if (QOpen.Read(Data,Size,QResult))",
          "342:     return (int)QResult;",
          "343: #endif",
          "344: #ifdef USE_ARCMEM",
          "345:   size_t AResult;",
          "346:   if (ArcMem.Read(Data,Size,AResult))",
          "347:     return (int)AResult;",
          "348: #endif",
          "355: #ifdef USE_QOPEN",
          "356:   if (QOpen.Seek(Offset,Method))",
          "357:     return;",
          "358: #endif",
          "359: #ifdef USE_ARCMEM",
          "360:   if (ArcMem.Seek(Offset,Method))",
          "361:     return;",
          "362: #endif",
          "363:   File::Seek(Offset,Method);",
          "369: #ifdef USE_QOPEN",
          "373: #endif",
          "374: #ifdef USE_ARCMEM",
          "375:   int64 APos;",
          "376:   if (ArcMem.Tell(&APos))",
          "377:     return APos;",
          "378: #endif",
          "384: bool Archive::IsOpened()",
          "385: {",
          "386: #ifdef USE_ARCMEM",
          "387:   if (ArcMem.IsLoaded())",
          "388:     return true;",
          "390:   return File::IsOpened();",
          "391: };",
          "",
          "[Added Lines]",
          "299: #ifdef USE_QOPEN",
          "312:   size_t Result;",
          "313:   if (QOpen.Read(Data,Size,Result))",
          "314:     return (int)Result;",
          "321:   if (!QOpen.Seek(Offset,Method))",
          "322:     File::Seek(Offset,Method);",
          "",
          "---------------"
        ],
        "archive.hpp||archive.hpp": [
          "File: archive.hpp -> archive.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #ifdef USE_QOPEN",
          "55:     QuickOpen QOpen;",
          "56:     bool ProhibitQOpen;",
          "60: #endif",
          "61:   public:",
          "62:     Archive(RAROptions *InitCmd=NULL);",
          "",
          "[Removed Lines]",
          "57: #endif",
          "58: #ifdef USE_ARCMEM",
          "59:     ArcMemory ArcMem;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: #if 0",
          "92:     void GetRecoveryInfo(bool Required,int64 *Size,int *Percent);",
          "93: #endif",
          "94:     bool Open(const wchar *Name,uint Mode=FMF_READ);",
          "96:     int Read(void *Data,size_t Size);",
          "97:     void Seek(int64 Offset,int Method);",
          "98:     int64 Tell();",
          "101:     void QOpenUnload() {QOpen.Unload();}",
          "102:     void SetProhibitQOpen(bool Mode) {ProhibitQOpen=Mode;}",
          "103: #endif",
          "",
          "[Removed Lines]",
          "95:     bool Close();",
          "99:     bool IsOpened();",
          "100: #ifdef USE_QOPEN",
          "",
          "[Added Lines]",
          "91: #ifdef USE_QOPEN",
          "",
          "---------------"
        ],
        "cmddata.cpp||cmddata.cpp": [
          "File: cmddata.cpp -> cmddata.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1249:       wcsncpyz(ArcName,Name,ASIZE(ArcName));",
          "1250:   }",
          "1253:   {",
          "1254:     if (GenerateArcName)",
          "1255:       GenerateArchiveName(ArcName,ASIZE(ArcName),GenerateMask,false);",
          "",
          "[Removed Lines]",
          "1252:   if (wcschr(L\"AFUMD\",*Command)==NULL && !ArcInMem)",
          "",
          "[Added Lines]",
          "1252:   if (wcschr(L\"AFUMD\",*Command)==NULL)",
          "",
          "---------------"
        ],
        "file.hpp||file.hpp": [
          "File: file.hpp -> file.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:     File();",
          "73:     virtual ~File();",
          "74:     void operator = (File &SrcFile);",
          "75:     virtual bool Open(const wchar *Name,uint Mode=FMF_READ);",
          "76:     void TOpen(const wchar *Name);",
          "77:     bool WOpen(const wchar *Name);",
          "78:     bool Create(const wchar *Name,uint Mode=FMF_UPDATE|FMF_SHAREREAD);",
          "79:     void TCreate(const wchar *Name,uint Mode=FMF_UPDATE|FMF_SHAREREAD);",
          "80:     bool WCreate(const wchar *Name,uint Mode=FMF_UPDATE|FMF_SHAREREAD);",
          "82:     bool Delete();",
          "83:     bool Rename(const wchar *NewName);",
          "84:     bool Write(const void *Data,size_t Size);",
          "",
          "[Removed Lines]",
          "81:     virtual bool Close();",
          "",
          "[Added Lines]",
          "84:     virtual bool Close(); // 'virtual' for MultiFile class.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:     void SetCloseFileTime(RarTime *ftm,RarTime *fta=NULL);",
          "97:     static void SetCloseFileTimeByName(const wchar *Name,RarTime *ftm,RarTime *fta);",
          "98:     void GetOpenFileTime(RarTime *ft);",
          "100:     int64 FileLength();",
          "101:     void SetHandleType(FILE_HANDLETYPE Type) {HandleType=Type;}",
          "102:     FILE_HANDLETYPE GetHandleType() {return HandleType;}",
          "",
          "[Removed Lines]",
          "99:     virtual bool IsOpened() {return hFile!=FILE_BAD_HANDLE;};",
          "",
          "[Added Lines]",
          "102:     virtual bool IsOpened() {return hFile!=FILE_BAD_HANDLE;}; // 'virtual' for MultiFile class.",
          "",
          "---------------"
        ],
        "loclang.hpp||loclang.hpp": [
          "File: loclang.hpp -> loclang.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "294: #define   MRprNoFiles        L\"\\nNo files found\"",
          "295: #define   MLogUnexpEOF       L\"\\nUnexpected end of archive\"",
          "296: #define   MRepAskReconst     L\"\\nReconstruct archive structure ?\"",
          "298: #define   MRecRNotFound      L\"\\nData recovery record not found\"",
          "299: #define   MRecRFound         L\"\\nData recovery record found\"",
          "300: #define   MRecSecDamage      L\"\\nSector %ld (offsets %lX...%lX) damaged\"",
          "",
          "[Removed Lines]",
          "297: #define   MRecScanning       L\"\\nScanning...\"",
          "",
          "[Added Lines]",
          "297: #define   MRRSearch          L\"\\nSearching for recovery record\"",
          "298: #define   MAnalyzeFileData   L\"\\nAnalyzing file data\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353: #define   MRecVolLimit       L\"\\nTotal number of usual and recovery volumes must not exceed %d\"",
          "354: #define   MVolumeNumber      L\"volume %d\"",
          "355: #define   MCannotDelete      L\"\\nCannot delete %s\"",
          "356: #define   MCalcCRC           L\"\\nCalculating the checksum\"",
          "357: #define   MTooLargeSFXArc    L\"\\nWARNING: Too large SFX archive. Windows cannot run the executable file exceeding 4 GB.\"",
          "358: #define   MCalcCRCAllVol     L\"\\nCalculating checksums of all volumes.\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "357: #define   MRecycleFailed     L\"\\nCannot move some files and folders to Recycle Bin\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "360: #define   MNewerRAR          L\"\\nYou may need a newer version of RAR.\"",
          "361: #define   MUnkEncMethod      L\"\\nUnknown encryption method in %s\"",
          "362: #define   MWrongPassword     L\"\\nThe specified password is incorrect.\"",
          "364: #define   MAreaDamaged       L\"\\nCorrupt %d bytes at %08x %08x\"",
          "366: #define   MRRDamaged         L\"\\nRecovery record is corrupt.\"",
          "367: #define   MTestingRR         L\"\\nTesting the recovery record\"",
          "368: #define   MFailed            L\"Failed\"",
          "",
          "[Removed Lines]",
          "363: #define   MRepairing         L\"\\nRepairing\"",
          "365: #define   MBlocksRecovered   L\"\\n%d blocks recovered.\"",
          "",
          "[Added Lines]",
          "366: #define   MBlocksRecovered   L\"\\n%u blocks are recovered, %u blocks are relocated\"",
          "",
          "---------------"
        ],
        "model.cpp||model.cpp": [
          "File: model.cpp -> model.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "171: inline RARPPM_CONTEXT* ModelPPM::CreateSuccessors(bool Skip,RARPPM_STATE* p1)",
          "172: {",
          "176:   RARPPM_STATE UpState;",
          "177:   RARPPM_CONTEXT* pc=MinContext, * UpBranch=FoundState->Successor;",
          "178:   RARPPM_STATE * p, * ps[MAX_O], ** pps=ps;",
          "",
          "[Removed Lines]",
          "173: #ifdef __ICL",
          "174:   static",
          "175: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:     {",
          "207:       pc=p->Successor;",
          "208:       break;",
          "209:     }",
          "211:   } while ( pc->Suffix );",
          "212: NO_LOOP:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "211:     if (pps>=ps+ASIZE(ps))",
          "212:       return NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "496:       p++;",
          "497:     } while (Model->CharMask[p->Symbol] == Model->EscCount);",
          "498:     HiCnt += p->Freq;",
          "500:   } while ( --i );",
          "501:   Model->Coder.SubRange.scale += HiCnt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506:     if (pps>=ps+ASIZE(ps))",
          "507:       return false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "507:   {",
          "508:     HiCnt=0;",
          "509:     while ((HiCnt += p->Freq) <= count)",
          "511:     Model->Coder.SubRange.LowCount = (Model->Coder.SubRange.HighCount=HiCnt)-p->Freq;",
          "512:     psee2c->update();",
          "513:     update2(Model,p);",
          "",
          "[Removed Lines]",
          "510:       p=*++pps;",
          "",
          "[Added Lines]",
          "520:     {",
          "521:       pps++;",
          "522:       if (pps>=ps+ASIZE(ps)) // Extra safety check.",
          "523:         return false;",
          "524:       p=*pps;",
          "525:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "520:     pps--;",
          "521:     do",
          "522:     {",
          "524:     } while ( --i );",
          "525:     psee2c->Summ += Model->Coder.SubRange.scale;",
          "526:     Model->NumMasked = NumStats;",
          "527:   }",
          "529: }",
          "",
          "[Removed Lines]",
          "523:       Model->CharMask[(*++pps)->Symbol]=Model->EscCount;",
          "528:   return(true);",
          "",
          "[Added Lines]",
          "538:       pps++;",
          "539:       if (pps>=ps+ASIZE(ps)) // Extra safety check.",
          "540:         return false;",
          "541:       Model->CharMask[(*pps)->Symbol]=Model->EscCount;",
          "546:   return true;",
          "",
          "---------------"
        ],
        "options.hpp||options.hpp": [
          "File: options.hpp -> options.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:     QOPEN_MODE QOpenMode;",
          "96: #endif",
          "110:     bool ConfigDisabled; // Switch -cfg-.",
          "111:     wchar ExtrPath[NM];",
          "112:     wchar CommentFile[NM];",
          "",
          "[Removed Lines]",
          "98:     bool ArcInMem;",
          "99: #ifdef USE_ARCMEM",
          "100:     void SetArcInMem(byte *Data,size_t Size)",
          "101:     {",
          "102:       ArcMemData=Data;",
          "103:       ArcMemSize=Size;",
          "104:       ArcInMem=Data!=NULL && Size>0;",
          "105:     }",
          "106:     byte *ArcMemData;",
          "107:     size_t ArcMemSize;",
          "108: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "rar.hpp||rar.hpp": [
          "File: rar.hpp -> rar.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #ifdef USE_QOPEN",
          "46: #include \"qopen.hpp\"",
          "47: #endif",
          "51: #include \"archive.hpp\"",
          "52: #include \"match.hpp\"",
          "53: #include \"cmddata.hpp\"",
          "",
          "[Removed Lines]",
          "48: #ifdef USE_ARCMEM",
          "49: #include \"arcmem.hpp\"",
          "50: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "rardefs.hpp||rardefs.hpp": [
          "File: rardefs.hpp -> rardefs.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #ifndef SFX_MODULE",
          "25: #define USE_QOPEN",
          "26: #endif",
          "30: #define ALIGN_VALUE(v,a) (size_t(v) + ( (~size_t(v) + 1) & (a - 1) ) )",
          "",
          "[Removed Lines]",
          "27: #define USE_ARCMEM",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "scantree.cpp||scantree.cpp": [
          "File: scantree.cpp -> scantree.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:   SpecPathLength=Name-CurMask;",
          "227:   Depth=0;",
          "231:   return true;",
          "232: }",
          "",
          "[Removed Lines]",
          "229:   wcscpy(OrigCurMask,CurMask);",
          "",
          "[Added Lines]",
          "229:   wcsncpyz(OrigCurMask,CurMask,ASIZE(OrigCurMask));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:     if (Slash!=NULL)",
          "351:     {",
          "352:       wchar Mask[NM];",
          "354:       if (Depth<SetAllMaskDepth)",
          "358:       wchar *PrevSlash=wcsrchr(CurMask,CPATHDIVIDER);",
          "359:       if (PrevSlash==NULL)",
          "361:       else",
          "363:     }",
          "364:     if (GetDirs==SCAN_GETDIRSTWICE &&",
          "365:         FindFile::FastFind(DirName,FD,GetLinks) && FD->IsDir)",
          "",
          "[Removed Lines]",
          "353:       wcscpy(Mask,Slash);",
          "355:         wcscpy(Mask+1,PointToName(OrigCurMask));",
          "357:       wcscpy(DirName,CurMask);",
          "360:         wcscpy(CurMask,Mask+1);",
          "362:         wcscpy(PrevSlash,Mask);",
          "",
          "[Added Lines]",
          "353:       wcsncpyz(Mask,Slash,ASIZE(Mask));",
          "355:         wcsncpyz(Mask+1,PointToName(OrigCurMask),ASIZE(Mask)-1);",
          "357:       wcsncpyz(DirName,CurMask,ASIZE(DirName));",
          "360:         wcsncpyz(CurMask,Mask+1,ASIZE(CurMask));",
          "362:       {",
          "364:         wcsncatz(CurMask,Mask,ASIZE(CurMask));",
          "365:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "398:     wchar Mask[NM];",
          "403:     if (wcslen(CurMask)+wcslen(Mask)+1>=NM || Depth>=MAXSCANDEPTH-1)",
          "404:     {",
          "",
          "[Removed Lines]",
          "400:     wcscpy(Mask,FastFindFile ? MASKALL:PointToName(CurMask));",
          "401:     wcscpy(CurMask,FD->Name);",
          "",
          "[Added Lines]",
          "403:     wcsncpyz(Mask,FastFindFile ? MASKALL:PointToName(CurMask),ASIZE(Mask));",
          "404:     wcsncpyz(CurMask,FD->Name,ASIZE(CurMask));",
          "",
          "---------------"
        ],
        "ui.hpp||ui.hpp": [
          "File: ui.hpp -> ui.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10:   UIERROR_SYSERRMSG, UIERROR_GENERALERRMSG, UIERROR_INCERRCOUNT,",
          "11:   UIERROR_CHECKSUM, UIERROR_CHECKSUMENC, UIERROR_CHECKSUMPACKED,",
          "12:   UIERROR_BADPSW, UIERROR_MEMORY, UIERROR_FILEOPEN, UIERROR_FILECREATE,",
          "15:   UIERROR_FILEATTR, UIERROR_FILECOPY, UIERROR_FILECOPYHINT,",
          "16:   UIERROR_DIRCREATE, UIERROR_SLINKCREATE, UIERROR_HLINKCREATE,",
          "17:   UIERROR_NEEDADMIN, UIERROR_ARCBROKEN, UIERROR_HEADERBROKEN,",
          "",
          "[Removed Lines]",
          "13:   UIERROR_FILECLOSE, UIERROR_FILESEEK, UIERROR_FILEREAD,",
          "14:   UIERROR_FILEWRITE, UIERROR_FILEDELETE, UIERROR_FILERENAME,",
          "",
          "[Added Lines]",
          "13:   UIERROR_FILECLOSE, UIERROR_FILESEEK, UIERROR_FILEREAD, UIERROR_FILEWRITE,",
          "14:   UIERROR_FILEDELETE, UIERROR_RECYCLEFAILED, UIERROR_FILERENAME,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   UIERROR_ULINKREAD, UIERROR_ULINKEXIST,",
          "41:   UIMSG_FIRST,",
          "44:   UIMSG_COPYINGDATA, UIMSG_AREADAMAGED, UIMSG_SECTORDAMAGED,",
          "45:   UIMSG_SECTORRECOVERED, UIMSG_SECTORNOTRECOVERED, UIMSG_FOUND,",
          "46:   UIMSG_CORRECTINGNAME, UIMSG_BADARCHIVE, UIMSG_CREATING, UIMSG_RENAMING,",
          "",
          "[Removed Lines]",
          "42:   UIMSG_STRING, UIMSG_BUILD, UIMSG_RRSEARCH, UIMSG_RRFOUND,",
          "43:   UIMSG_RRNOTFOUND, UIMSG_RRDAMAGED, UIMSG_BLOCKSRECOVERED,",
          "",
          "[Added Lines]",
          "42:   UIMSG_STRING, UIMSG_BUILD, UIMSG_RRSEARCH, UIMSG_ANALYZEFILEDATA,",
          "43:   UIMSG_RRFOUND, UIMSG_RRNOTFOUND, UIMSG_RRDAMAGED, UIMSG_BLOCKSRECOVERED,",
          "",
          "---------------"
        ],
        "uiconsole.cpp||uiconsole.cpp": [
          "File: uiconsole.cpp -> uiconsole.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:     case UIERROR_FILEDELETE:",
          "125:       Log(Str[0],St(MCannotDelete),Str[1]);",
          "126:       break;",
          "127:     case UIERROR_FILERENAME:",
          "128:       Log(Str[0],St(MErrRename),Str[1],Str[2]);",
          "129:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:     case UIERROR_RECYCLEFAILED:",
          "128:       Log(Str[0],St(MRecycleFailed));",
          "129:       break;",
          "",
          "---------------"
        ],
        "unicode.cpp||unicode.cpp": [
          "File: unicode.cpp -> unicode.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "544: int64 atoilw(const wchar *s)",
          "545: {",
          "546:   bool sign=false;",
          "548:   {",
          "549:     s++;",
          "550:     sign=true;",
          "",
          "[Removed Lines]",
          "547:   if (*s=='-')",
          "",
          "[Added Lines]",
          "547:   if (*s=='-') // We do use signed integers here, for example, in GUI SFX.",
          "",
          "---------------"
        ]
      }
    }
  ]
}