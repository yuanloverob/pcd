{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "572b0dddeea32575f9e0ab882c9dd2c029675686",
      "candidate_info": {
        "commit_hash": "572b0dddeea32575f9e0ab882c9dd2c029675686",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/572b0dddeea32575f9e0ab882c9dd2c029675686",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid",
          "src/test_hexio.c",
          "test/fts4record.test"
        ],
        "message": "Add extra tests for the handling of corrupt records in fts3.\n\nFossilOrigin-Name: 40e29a47d1266c16a4992e43579a51addcc632503099c4cd128f77dd4e67da3c",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid",
          "src/test_hexio.c||src/test_hexio.c",
          "test/fts4record.test||test/fts4record.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2580:       fts3PoslistCopy(&p, &p2);",
          "2581:       fts3GetDeltaVarint3(&p2, pEnd2, bDescDoclist, &i2);",
          "2582:     }",
          "2583:   }",
          "2585:   if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2584:     assert( (p-aOut)<=((p1?(p1-a1):n1)+(p2?(p2-a2):n2)+FTS3_VARINT_MAX-1) );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 633b214e9b9d99788ed72ab4823a69a43c7c40ed07fb76c7d56c50453c0e58ab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_hexio.c||src/test_hexio.c": [
          "File: src/test_hexio.c -> src/test_hexio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "337:   return (int) (q - (unsigned char *)p);",
          "338: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340: static int putFts3Varint(char *p, sqlite_int64 v){",
          "341:   unsigned char *q = (unsigned char *) p;",
          "342:   sqlite_uint64 vu = v;",
          "343:   do{",
          "345:     vu >>= 7;",
          "346:   }while( vu!=0 );",
          "348:   assert( q - (unsigned char *)p <= 10 );",
          "349:   return (int) (q - (unsigned char *)p);",
          "350: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367:   return TCL_OK;",
          "368: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384: static int SQLITE_TCLAPI make_fts3record(",
          "385:   void * clientData,",
          "386:   Tcl_Interp *interp,",
          "387:   int objc,",
          "388:   Tcl_Obj *CONST objv[]",
          "389: ){",
          "390:   Tcl_Obj **aArg = 0;",
          "391:   int nArg = 0;",
          "392:   unsigned char *aOut = 0;",
          "393:   int nOut = 0;",
          "394:   int nAlloc = 0;",
          "395:   int i;",
          "396:   int rc = TCL_OK;",
          "398:   if( objc!=2 ){",
          "399:     Tcl_WrongNumArgs(interp, 1, objv, \"LIST\");",
          "400:     return TCL_ERROR;",
          "401:   }",
          "402:   if( Tcl_ListObjGetElements(interp, objv[1], &nArg, &aArg) ){",
          "403:     return TCL_ERROR;",
          "404:   }",
          "406:   for(i=0; i<nArg; i++){",
          "407:     sqlite3_int64 iVal;",
          "408:     if( TCL_OK==Tcl_GetWideIntFromObj(0, aArg[i], &iVal) ){",
          "409:       if( nOut+10>nAlloc ){",
          "410:         int nNew = nAlloc?nAlloc*2:128;",
          "411:         unsigned char *aNew = sqlite3_realloc(aOut, nNew);",
          "412:         if( aNew==0 ){",
          "413:           sqlite3_free(aOut);",
          "414:           return TCL_ERROR;",
          "415:         }",
          "416:         aOut = aNew;",
          "417:         nAlloc = nNew;",
          "418:       }",
          "419:       nOut += putFts3Varint((char*)&aOut[nOut], iVal);",
          "420:     }else{",
          "421:       int nVal = 0;",
          "422:       char *zVal = Tcl_GetStringFromObj(aArg[i], &nVal);",
          "423:       while( (nOut + nVal)>nAlloc ){",
          "424:         int nNew = nAlloc?nAlloc*2:128;",
          "425:         unsigned char *aNew = sqlite3_realloc(aOut, nNew);",
          "426:         if( aNew==0 ){",
          "427:           sqlite3_free(aOut);",
          "428:           return TCL_ERROR;",
          "429:         }",
          "430:         aOut = aNew;",
          "431:         nAlloc = nNew;",
          "432:       }",
          "433:       memcpy(&aOut[nOut], zVal, nVal);",
          "434:       nOut += nVal;",
          "435:     }",
          "436:   }",
          "438:   Tcl_SetObjResult(interp, Tcl_NewByteArrayObj(aOut, nOut));",
          "439:   sqlite3_free(aOut);",
          "440:   return TCL_OK;",
          "441: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "383:      { \"hexio_render_int32\",           hexio_render_int32    },",
          "384:      { \"utf8_to_utf8\",                 utf8_to_utf8          },",
          "385:      { \"read_fts3varint\",              read_fts3varint       },",
          "386:   };",
          "387:   int i;",
          "388:   for(i=0; i<sizeof(aObjCmd)/sizeof(aObjCmd[0]); i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "459:      { \"make_fts3record\",              make_fts3record       },",
          "",
          "---------------"
        ],
        "test/fts4record.test||test/fts4record.test": [
          "File: test/fts4record.test -> test/fts4record.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 18",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS4 module.",
          "13: #",
          "14: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "18: source $testdir/fts3_common.tcl",
          "19: set testprefix fts4record",
          "21: # If SQLITE_ENABLE_FTS3 is defined, omit this file.",
          "22: ifcapable !fts3 {",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: sqlite3_fts3_may_be_corrupt 1",
          "29: do_execsql_test 1.0 {",
          "30:   CREATE VIRTUAL TABLE t1 USING fts4(x);",
          "31:   INSERT INTO t1 VALUES('terma terma terma termb');",
          "32: }",
          "34: do_execsql_test 1.1 {",
          "35:   SELECT quote(root) FROM t1_segdir",
          "36: } {",
          "37:   X'00057465726D6105010203030004016203010500'",
          "38: }",
          "40: proc make_record_wrapper {args} { make_fts3record $args }",
          "41: db func record make_record_wrapper",
          "43: do_execsql_test 1.2 {",
          "44:   select quote(",
          "45:     record(0,    5, 'terma', 5, 1, 2, 3, 3, 0,",
          "46:               4, 1, 'b'    , 3, 1, 5, 0",
          "47:   ) );",
          "48: } {",
          "49:   X'00057465726D6105010203030004016203010500'",
          "50: }",
          "52: do_execsql_test 1.3.1 {",
          "53:   UPDATE t1_segdir SET root =",
          "54:     record(0,    5, 'terma', 5, 1, 2, 3, 3, 0,",
          "55:               4, 1, 'b'    , 3, 1, 5,",
          "56:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "57:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "58:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0",
          "59:           );",
          "60: }",
          "62: do_catchsql_test 1.3.2 {",
          "63:   SELECT snippet(t1) FROM t1 WHERE t1 MATCH 'term*'",
          "64: } {1 {database disk image is malformed}}",
          "66: do_execsql_test 1.4.1 {",
          "67:   UPDATE t1_segdir SET root =",
          "68:     record(0,    5, 'terma', 5, 1, 2, 3, 3, 0,",
          "69:               4, 1, 'b'    , 4, 1, 5,",
          "70:               256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "71:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "72:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0",
          "73:           );",
          "74: }",
          "76: do_catchsql_test 1.4.2 {",
          "77:   SELECT snippet(t1) FROM t1 WHERE t1 MATCH 'term*'",
          "78: } {1 {database disk image is malformed}}",
          "80: do_execsql_test 1.4.3 {",
          "81:   SELECT quote(root) FROM t1_segdir",
          "82: } {",
          "83:   X'00057465726D610501020303000401620401058002010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100'",
          "84: }",
          "86: do_execsql_test 1.5.1 {",
          "87:   UPDATE t1_segdir SET root =",
          "88:     record(0,    5, 'terma', 5, 1, 2, 3, 3, 0,",
          "89:               4, 1, 'b'    , 4, 1, 5,",
          "90:               256, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "91:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,",
          "92:               1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0",
          "93:           );",
          "94: }",
          "96: do_catchsql_test 1.4.2 {",
          "97:   SELECT snippet(t1) FROM t1 WHERE t1 MATCH 'term*'",
          "98: } {1 {database disk image is malformed}}",
          "100: do_execsql_test 1.4.3 {",
          "101:   SELECT quote(root) FROM t1_segdir",
          "102: } {",
          "103:   X'00057465726D610501020303000401620401058002010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100'",
          "104: }",
          "107: do_execsql_test 1.5.1 {",
          "108:   UPDATE t1_segdir SET root =",
          "109:   X'00057465726D61050102030300040162040105FF00010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100'",
          "110: }",
          "112: do_catchsql_test 1.5.2 {",
          "113:   SELECT snippet(t1) FROM t1 WHERE t1 MATCH 'term*'",
          "114: } {1 {database disk image is malformed}}",
          "116: do_catchsql_test 1.5.3 {",
          "117:   INSERT INTO t1(t1) VALUES('integrity-check');",
          "118: } {1 {database disk image is malformed}}",
          "120: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94e95ea46e89f34adeba606db60f4691a25d7c1f",
      "candidate_info": {
        "commit_hash": "94e95ea46e89f34adeba606db60f4691a25d7c1f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94e95ea46e89f34adeba606db60f4691a25d7c1f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/lock_common.tcl",
          "test/shmlock.test",
          "test/wal.test"
        ],
        "message": "Copy some extra test infrastructure from the mutexfree-shmlock branch to trunk.\n\nFossilOrigin-Name: 883337ffdb434b6856ceaada121c0be67e2fdec7b447675f45e85568ef28d7d9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/lock_common.tcl||test/lock_common.tcl",
          "test/shmlock.test||test/shmlock.test",
          "test/wal.test||test/wal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 95a9a39ff784b960b62dd6298e722a620ba3f9c8b76839a49bbef35d7bc84a8e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1564:   return TCL_ERROR;",
          "1565: }",
          "1567: int Sqlitetestvfs_Init(Tcl_Interp *interp){",
          "1568:   Tcl_CreateObjCommand(interp, \"testvfs\", testvfs_cmd, 0, 0);",
          "1569:   return TCL_OK;",
          "1570: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1567: extern int getDbPointer(Tcl_Interp *interp, const char *zA, sqlite3 **ppDb);",
          "1568: extern const char *sqlite3ErrName(int);",
          "1573: static int SQLITE_TCLAPI test_vfs_shmlock(",
          "1574:   void * clientData,",
          "1575:   Tcl_Interp *interp,",
          "1576:   int objc,",
          "1577:   Tcl_Obj *CONST objv[]",
          "1578: ){",
          "1579:   const char *azArg1[] = {\"shared\", \"exclusive\", 0};",
          "1580:   const char *azArg2[] = {\"lock\", \"unlock\", 0};",
          "1581:   sqlite3 *db = 0;",
          "1582:   int rc = SQLITE_OK;",
          "1583:   const char *zDbname = 0;",
          "1584:   int iArg1 = 0;",
          "1585:   int iArg2 = 0;",
          "1586:   int iOffset = 0;",
          "1587:   int n = 0;",
          "1588:   sqlite3_file *pFd;",
          "1590:   if( objc!=7 ){",
          "1591:     Tcl_WrongNumArgs(interp, 1, objv,",
          "1592:         \"DB DBNAME (shared|exclusive) (lock|unlock) OFFSET N\"",
          "1593:     );",
          "1594:     return TCL_ERROR;",
          "1595:   }",
          "1597:   zDbname = Tcl_GetString(objv[2]);",
          "1598:   if( getDbPointer(interp, Tcl_GetString(objv[1]), &db)",
          "1599:    || Tcl_GetIndexFromObj(interp, objv[3], azArg1, \"ARG\", 0, &iArg1)",
          "1600:    || Tcl_GetIndexFromObj(interp, objv[4], azArg2, \"ARG\", 0, &iArg2)",
          "1601:    || Tcl_GetIntFromObj(interp, objv[5], &iOffset)",
          "1602:    || Tcl_GetIntFromObj(interp, objv[6], &n)",
          "1603:   ){",
          "1604:     return TCL_ERROR;",
          "1605:   }",
          "1607:   sqlite3_file_control(db, zDbname, SQLITE_FCNTL_FILE_POINTER, (void*)&pFd);",
          "1608:   if( pFd==0 ){",
          "1609:     return TCL_ERROR;",
          "1610:   }",
          "1611:   rc = pFd->pMethods->xShmLock(pFd, iOffset, n,",
          "1612:       (iArg1==0 ? SQLITE_SHM_SHARED : SQLITE_SHM_EXCLUSIVE)",
          "1613:     | (iArg2==0 ? SQLITE_SHM_LOCK : SQLITE_SHM_UNLOCK)",
          "1614:   );",
          "1615:   Tcl_SetObjResult(interp, Tcl_NewStringObj(sqlite3ErrName(rc), -1));",
          "1616:   return TCL_OK;",
          "1617: }",
          "1622:   Tcl_CreateObjCommand(interp, \"vfs_shmlock\", test_vfs_shmlock, 0, 0);",
          "",
          "---------------"
        ],
        "test/lock_common.tcl||test/lock_common.tcl": [
          "File: test/lock_common.tcl -> test/lock_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: proc do_multiclient_test {varname script} {",
          "19:     if {[info exists ::G(valgrind)]} { db close ; continue }",
          "20:     set ::code2_chan [launch_testfixture]",
          "21:     set ::code3_chan [launch_testfixture]",
          "22:     proc code2 {tcl} { testfixture $::code2_chan $tcl }",
          "23:     proc code3 {tcl} { testfixture $::code3_chan $tcl }",
          "26:     proc code2 {tcl} { uplevel #0 $tcl }",
          "27:     proc code3 {tcl} { uplevel #0 $tcl }",
          "29:   }] {",
          "30:     faultsim_delete_and_reopen",
          "32:     proc code1 {tcl} { uplevel #0 $tcl }",
          "",
          "[Removed Lines]",
          "18:   foreach code [list {",
          "24:     set tn 1",
          "25:   } {",
          "28:     set tn 2",
          "",
          "[Added Lines]",
          "18:   foreach {tn code} [list 1 {",
          "24:   } 2 {",
          "28:     # Do not run multi-process tests with the unix-excl VFS.",
          "29:     #",
          "30:     if {$tn==1 && [permutation]==\"unix-excl\"} continue",
          "",
          "---------------"
        ],
        "test/shmlock.test||test/shmlock.test": [
          "File: test/shmlock.test -> test/shmlock.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 December 6",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "16: set testprefix shmlock",
          "18: ifcapable !wal {finish_test ; return }",
          "20: sqlite3 db2 test.db",
          "21: sqlite3 db3 test.db",
          "23: do_execsql_test 1.0 {",
          "24:   PRAGMA journal_mode = wal;",
          "25:   CREATE TABLE t1(a, b);",
          "26:   INSERT INTO t1 VALUES(1, 2);",
          "27: } {wal}",
          "28: do_test 1.1 { execsql { SELECT * FROM t1 } db2 } {1 2}",
          "29: do_test 1.2 { execsql { SELECT * FROM t1 } db3 } {1 2}",
          "31: foreach {tn dbhandle cmd res} {",
          "32:   1    db  {shared    lock   7 1}    OK",
          "33:   2    db2 {exclusive lock   7 1}    BUSY",
          "34:   3    db  {shared    unlock 7 1}    OK",
          "35:   4    db2 {exclusive lock   7 1}    OK",
          "36:   5    db  {shared    lock   7 1}    BUSY",
          "37:   6    db  {exclusive lock   7 1}    BUSY",
          "38:   7    db2 {exclusive unlock 7 1}    OK",
          "40:   8    db  {exclusive lock   0 8}    OK",
          "41:   9    db  {exclusive unlock 0 8}    OK",
          "42:   10   db2 {exclusive lock   0 8}    OK",
          "43:   11   db2 {exclusive unlock 0 8}    OK",
          "45:   12   db  {shared    lock   0 1}    OK",
          "46:   13   db2 {shared    lock   0 1}    OK",
          "47:   14   db3 {shared    lock   0 1}    OK",
          "48:   15   db3 {shared    unlock 0 1}    OK",
          "49:   16   db3 {exclusive lock   0 1}    BUSY",
          "50:   17   db2 {shared    unlock 0 1}    OK",
          "51:   18   db3 {exclusive lock   0 1}    BUSY",
          "52:   19   db  {shared    unlock 0 1}    OK",
          "53:   20   db3 {exclusive lock   0 1}    OK",
          "54:   21   db3 {exclusive unlock 0 1}    OK",
          "56:   22   db  {shared    lock   3 1}    OK",
          "57:   23   db2 {exclusive lock   2 2}    BUSY",
          "58:   24   db  {shared    lock   2 1}    OK",
          "59:   25   db2 {exclusive lock   0 5}    BUSY",
          "60:   26   db2 {exclusive lock   0 4}    BUSY",
          "61:   27   db2 {exclusive lock   0 3}    BUSY",
          "62:   28   db  {shared    unlock 3 1}    OK",
          "63:   29   db2 {exclusive lock   2 2}    BUSY",
          "64:   28   db  {shared    unlock 2 1}    OK",
          "65:   29   db2 {exclusive lock   2 2}    OK",
          "66:   29   db2 {exclusive unlock 2 2}    OK",
          "67: } {",
          "68:   do_test 1.3.$tn [list vfs_shmlock $dbhandle main {*}$cmd] \"SQLITE_$res\"",
          "69: }",
          "71: db  close",
          "72: db2 close",
          "73: db3 close",
          "75: if {[permutation]==\"unix-excl\"} {",
          "76:   do_test 2.0 {",
          "77:     for {set i 0} {$i < 256} {incr i} {",
          "78:       sqlite3 db$i test.db",
          "79:       execsql { SELECT * FROM t1 } db$i",
          "80:     }",
          "81:     for {set i 0} {$i < 255} {incr i} {",
          "82:       set rc [vfs_shmlock db$i main shared lock 4 1]",
          "83:       if {$rc != \"SQLITE_OK\"} { error $rc }",
          "84:     }",
          "86:     vfs_shmlock db255 main shared lock 4 1",
          "87:   } {SQLITE_BUSY}",
          "89:   do_test 2.1 { vfs_shmlock db255 main exclusive lock   4 1 } SQLITE_BUSY",
          "90:   do_test 2.2 { vfs_shmlock db0   main shared    unlock 4 1 } SQLITE_OK",
          "91:   do_test 2.3 { vfs_shmlock db255 main shared    lock   4 1 } SQLITE_OK",
          "92:   do_test 2.4 { vfs_shmlock db255 main shared    unlock 4 1 } SQLITE_OK",
          "93:   do_test 2.5 { vfs_shmlock db255 main exclusive lock   4 1 } SQLITE_BUSY",
          "95:   do_test 2.6 {",
          "96:     for {set i 1} {$i < 255} {incr i} {",
          "97:       set rc [vfs_shmlock db255 main exclusive lock 4 1]",
          "98:       if {$rc != \"SQLITE_BUSY\"} { error $rc }",
          "99:       set rc [vfs_shmlock db$i main shared unlock 4 1]",
          "100:       if {$rc != \"SQLITE_OK\"} { error $rc }",
          "101:     }",
          "103:     vfs_shmlock db255 main exclusive lock 4 1",
          "104:   } {SQLITE_OK}",
          "106:   vfs_shmlock db255 main exclusive unlock 4 1",
          "108:   for {set i 0} {$i < 256} {incr i} {",
          "109:     db$i close",
          "110:   }",
          "111: }",
          "113: sqlite3 db0 test.db",
          "114: sqlite3 db1 test.db",
          "115: do_test 3.1 { execsql { SELECT * FROM t1 } db0 } {1 2}",
          "116: do_test 3.2 { execsql { SELECT * FROM t1 } db1 } {1 2}",
          "118: set L(0) {n n n n n n n n}",
          "119: set L(1) {n n n n n n n n}",
          "120: proc random_lock_test {idx} {",
          "121:   global L",
          "122:   set iSlot [expr int(rand()*8)]",
          "123:   if {[expr int(rand()*2)]} {",
          "124:     # Unlock operation",
          "125:     if {[lindex $L($idx) $iSlot]!=\"n\"} {",
          "126:       vfs_shmlock db$idx main [lindex $L($idx) $iSlot] unlock $iSlot 1",
          "127:       lset L($idx) $iSlot n",
          "128:     }",
          "129:   } else {",
          "130:     # Lock operation",
          "131:     if {[lindex $L($idx) $iSlot]==\"n\"} {",
          "132:       set locktype [lindex {e s} [expr int(rand()*2)]]",
          "133:       set n 1",
          "134:       if {$locktype==\"e\"} {",
          "135:         for {set l $iSlot} {$l<8 && [lindex $L($idx) $l]==\"n\"} {incr l} {}",
          "136:         set n [expr int(rand()*($l-$iSlot))+1]",
          "137:         # puts \"iSlot=$iSlot l=$l L=$L($idx)\"",
          "138:         # puts \"$iSlot $n\"",
          "139:       }",
          "140:       set res [vfs_shmlock db$idx main $locktype lock $iSlot $n]",
          "142:       set bBusy 0",
          "143:       for {set i $iSlot} {$i<($iSlot+$n)} {incr i} {",
          "144:         set other [lindex $L([expr ($idx+1)%2]) $i]",
          "145:         if {($other!=\"n\" && $locktype==\"e\")||($other==\"e\" && $locktype==\"s\")} {",
          "146:           if {$res != \"SQLITE_BUSY\"} { error \"BUSY not detected\" }",
          "147:           set bBusy 1",
          "148:           break",
          "149:         }",
          "150:       }",
          "152:       if {$bBusy==0} {",
          "153:         if {$res != \"SQLITE_OK\"} { error \"BUSY false-positive\" }",
          "154:         for {set i $iSlot} {$i<($iSlot+$n)} {incr i} {",
          "155:           lset L($idx) $i $locktype",
          "156:         }",
          "157:       }",
          "158:     }",
          "159:   }",
          "160: }",
          "162: set nStep 100000",
          "163: for {set i 0} {$i < $nStep} {incr i} {",
          "164:   random_lock_test 0",
          "165:   random_lock_test 1",
          "166: }",
          "168: db0 close",
          "169: db1 close",
          "171: finish_test",
          "",
          "---------------"
        ],
        "test/wal.test||test/wal.test": [
          "File: test/wal.test -> test/wal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1297: # At one point, SQLite was failing to grow the mapping of the wal-index",
          "1298: # file in step 3 and the checkpoint was corrupting the database file.",
          "1299: #",
          "1314:     sqlite3 db test.db",
          "1346: catch { db2 close }",
          "1347: catch { db close }",
          "",
          "[Removed Lines]",
          "1300: do_test wal-20.1 {",
          "1301:   catch {db close}",
          "1302:   forcedelete test.db test.db-wal test.db-journal",
          "1303:   sqlite3 db test.db",
          "1304:   execsql {",
          "1305:     PRAGMA journal_mode = WAL;",
          "1306:     CREATE TABLE t1(x);",
          "1307:     INSERT INTO t1 VALUES(randomblob(900));",
          "1308:     SELECT count(*) FROM t1;",
          "1309:   }",
          "1310: } {wal 1}",
          "1311: do_test wal-20.2 {",
          "1312:   set ::buddy [launch_testfixture]",
          "1313:   testfixture $::buddy {",
          "1315:     db transaction { db eval {",
          "1316:       PRAGMA wal_autocheckpoint = 0;",
          "1331:     } }",
          "1332:   }",
          "1333: } {0}",
          "1334: do_test wal-20.3 {",
          "1335:   close $::buddy",
          "1336:   execsql { PRAGMA wal_checkpoint }",
          "1337:   execsql { SELECT count(*) FROM t1 }",
          "1338: } {16384}",
          "1339: do_test wal-20.4 {",
          "1340:   db close",
          "1341:   sqlite3 db test.db",
          "1342:   execsql { SELECT count(*) FROM t1 }",
          "1343: } {16384}",
          "1344: integrity_check wal-20.5",
          "",
          "[Added Lines]",
          "1300: if {[permutation]!=\"unix-excl\"} {",
          "1301:   do_test wal-20.1 {",
          "1302:     catch {db close}",
          "1303:     forcedelete test.db test.db-wal test.db-journal",
          "1305:     execsql {",
          "1306:       PRAGMA journal_mode = WAL;",
          "1307:       CREATE TABLE t1(x);",
          "1308:       INSERT INTO t1 VALUES(randomblob(900));",
          "1309:       SELECT count(*) FROM t1;",
          "1310:     }",
          "1311:   } {wal 1}",
          "1312:   do_test wal-20.2 {",
          "1313:     set ::buddy [launch_testfixture]",
          "1314:     testfixture $::buddy {",
          "1315:       sqlite3 db test.db",
          "1316:       db transaction { db eval {",
          "1317:         PRAGMA wal_autocheckpoint = 0;",
          "1332:       } }",
          "1333:     }",
          "1334:   } {0}",
          "1335:   do_test wal-20.3 {",
          "1336:     close $::buddy",
          "1337:     execsql { PRAGMA wal_checkpoint }",
          "1338:     execsql { SELECT count(*) FROM t1 }",
          "1339:   } {16384}",
          "1340:   do_test wal-20.4 {",
          "1341:     db close",
          "1342:     sqlite3 db test.db",
          "1343:     execsql { SELECT count(*) FROM t1 }",
          "1344:   } {16384}",
          "1345:   integrity_check wal-20.5",
          "1346: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5cc870ef88c76ff6f234eb542700a54354bd3ae",
      "candidate_info": {
        "commit_hash": "c5cc870ef88c76ff6f234eb542700a54354bd3ae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c5cc870ef88c76ff6f234eb542700a54354bd3ae",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c"
        ],
        "message": "Refinement to check-in [348e7f193a963390] that avoids unreachable branches.\n\nFossilOrigin-Name: bbfb2908ecd113c88e69a0984cbe2550463cdd3a67648b0e4e3578e80630136e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ff290feb97f689cf6ce4162d6aa36f9f9dcf1bff3096847d53a85f39f728d2de",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: static int walkWindowList(Walker *pWalker, Window *pList){",
          "26:   Window *pWin;",
          "27:   for(pWin=pList; pWin; pWin=pWin->pNextWin){",
          "33:   }",
          "34:   return WRC_Continue;",
          "35: }",
          "",
          "[Removed Lines]",
          "28:     if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "29:     if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "30:     if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "31:     if( sqlite3WalkExpr(pWalker, pWin->pStart) ) return WRC_Abort;",
          "32:     if( sqlite3WalkExpr(pWalker, pWin->pEnd) ) return WRC_Abort;",
          "",
          "[Added Lines]",
          "28:     int rc;",
          "29:     rc = sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "30:     if( rc ) return WRC_Abort;",
          "31:     rc = sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "32:     if( rc ) return WRC_Abort;",
          "33:     rc = sqlite3WalkExpr(pWalker, pWin->pFilter);",
          "34:     if( rc ) return WRC_Abort;",
          "40:     rc = sqlite3WalkExpr(pWalker, pWin->pStart);",
          "41:     if( NEVER(rc) ) return WRC_Abort;",
          "42:     rc = sqlite3WalkExpr(pWalker, pWin->pEnd);",
          "43:     if( NEVER(rc) ) return WRC_Abort;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51755a78a95e122963dcd8c74525aed965837da0",
      "candidate_info": {
        "commit_hash": "51755a78a95e122963dcd8c74525aed965837da0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51755a78a95e122963dcd8c74525aed965837da0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os.c",
          "src/resolve.c",
          "src/shell.c.in"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 1eef4ddea9a2a8c97b97183402c774caa40ef906ea9cccade307381b29a9785d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os.c||src/os.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f1cd234c9888142e0ac542d866d7fb55a81fb7edd0a5cd810191b4e0395ffc7d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os.c||src/os.c": [
          "File: src/os.c -> src/os.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){",
          "261:   if( sqlite3Config.iPrngSeed ){",
          "262:     memset(zBufOut, 0, nByte);",
          "264:     memcpy(zBufOut, &sqlite3Config.iPrngSeed, nByte);",
          "265:     return SQLITE_OK;",
          "266:   }else{",
          "",
          "[Removed Lines]",
          "263:     if( ALWAYS(nByte>sizeof(unsigned)) ) nByte = sizeof(unsigned int);",
          "",
          "[Added Lines]",
          "263:     if( ALWAYS(nByte>(signed)sizeof(unsigned)) ) nByte = sizeof(unsigned int);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1306:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1307:     Window *pWin = pExpr->y.pWin;",
          "1308:     sqlite3WindowUnlinkFromSelect(pWin);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1306:   UNUSED_PARAMETER(pWalker);",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3987:   sqlite3_value **argv",
          "3988: ){",
          "3989:   const char *zName = (const char*)sqlite3_value_text(argv[0]);",
          "3990:   if( zName ){",
          "3991:     char *z = sqlite3_mprintf(\"\\\"%w\\\"\", zName);",
          "3992:     sqlite3_result_text(context, z, -1, sqlite3_free);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3990:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9262:         case SQLITE_TESTCTRL_PRNG_SEED:",
          "9263:           if( nArg==3 || nArg==4 ){",
          "9265:             sqlite3 *db;",
          "9266:             if( nArg==3 ){",
          "9267:               db = 0;",
          "",
          "[Removed Lines]",
          "9264:             int i = (int)integerValue(azArg[2]);",
          "",
          "[Added Lines]",
          "9265:             int ii = (int)integerValue(azArg[2]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9271:               sqlite3_table_column_metadata(db, 0, \"x\", 0, 0, 0, 0, 0, 0);",
          "9272:             }",
          "9274:             isOk = 3;",
          "9275:           }",
          "9276:           break;",
          "",
          "[Removed Lines]",
          "9273:             rc2 = sqlite3_test_control(testctrl, i, db);",
          "",
          "[Added Lines]",
          "9274:             rc2 = sqlite3_test_control(testctrl, ii, db);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e41fd72acc7a06ce5a6a7d28154db1ffe8ba37a8",
      "candidate_info": {
        "commit_hash": "e41fd72acc7a06ce5a6a7d28154db1ffe8ba37a8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e41fd72acc7a06ce5a6a7d28154db1ffe8ba37a8",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Enhance the rtreenode() function of rtree (used for testing) so that it uses the newer sqlite3_str object for better performance and improved error reporting.\n\nFossilOrigin-Name: 90acdbfce9c088582d5165589f7eac462b00062bbfffacdcc786eb9cf3ea5377",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3757: static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){",
          "3759:   RtreeNode node;",
          "3760:   Rtree tree;",
          "3761:   int ii;",
          "3763:   UNUSED_PARAMETER(nArg);",
          "3764:   memset(&node, 0, sizeof(RtreeNode));",
          "3765:   memset(&tree, 0, sizeof(Rtree));",
          "3766:   tree.nDim = (u8)sqlite3_value_int(apArg[0]);",
          "3767:   tree.nDim2 = tree.nDim*2;",
          "3768:   tree.nBytesPerCell = 8 + 8 * tree.nDim;",
          "3769:   node.zData = (u8 *)sqlite3_value_blob(apArg[1]);",
          "3771:   for(ii=0; ii<NCELL(&node); ii++){",
          "3774:     RtreeCell cell;",
          "3775:     int jj;",
          "3777:     nodeGetCell(&tree, &node, ii, &cell);",
          "3780:     for(jj=0; jj<tree.nDim2; jj++){",
          "3781: #ifndef SQLITE_RTREE_INT_ONLY",
          "3784: #else",
          "3787: #endif",
          "3797:     }",
          "3798:   }",
          "3801: }",
          "",
          "[Removed Lines]",
          "3758:   char *zText = 0;",
          "3772:     char zCell[512];",
          "3773:     int nCell = 0;",
          "3778:     sqlite3_snprintf(512-nCell,&zCell[nCell],\"%lld\", cell.iRowid);",
          "3779:     nCell = (int)strlen(zCell);",
          "3782:       sqlite3_snprintf(512-nCell,&zCell[nCell], \" %g\",",
          "3783:                        (double)cell.aCoord[jj].f);",
          "3785:       sqlite3_snprintf(512-nCell,&zCell[nCell], \" %d\",",
          "3786:                        cell.aCoord[jj].i);",
          "3788:       nCell = (int)strlen(zCell);",
          "3789:     }",
          "3791:     if( zText ){",
          "3792:       char *zTextNew = sqlite3_mprintf(\"%s {%s}\", zText, zCell);",
          "3793:       sqlite3_free(zText);",
          "3794:       zText = zTextNew;",
          "3795:     }else{",
          "3796:       zText = sqlite3_mprintf(\"{%s}\", zCell);",
          "3800:   sqlite3_result_text(ctx, zText, -1, sqlite3_free);",
          "",
          "[Added Lines]",
          "3761:   int nData;",
          "3762:   int errCode;",
          "3763:   sqlite3_str *pOut;",
          "3769:   if( tree.nDim<1 || tree.nDim>5 ) return;",
          "3773:   nData = sqlite3_value_bytes(apArg[1]);",
          "3774:   if( nData<4 ) return;",
          "3775:   if( nData<NCELL(&node)*tree.nBytesPerCell ) return;",
          "3777:   pOut = sqlite3_str_new(0);",
          "3783:     if( ii>0 ) sqlite3_str_append(pOut, \" \", 1);",
          "3784:     sqlite3_str_appendf(pOut, \"{%lld\", cell.iRowid);",
          "3787:       sqlite3_str_appendf(pOut, \" %g\", (double)cell.aCoord[jj].f);",
          "3789:       sqlite3_str_appendf(pOut, \" %d\", cell.aCoord[jj].i);",
          "3792:     sqlite3_str_append(pOut, \"}\", 1);",
          "3794:   errCode = sqlite3_str_errcode(pOut);",
          "3795:   sqlite3_result_text(ctx, sqlite3_str_finish(pOut), -1, sqlite3_free);",
          "3796:   sqlite3_result_error_code(ctx, errCode);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 55be6d0a9fa8a64b9c9c5ed51a2b9144304f7f0870a13b92d5864ac4d54491b6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}