{
  "cve_id": "CVE-2019-18660",
  "cve_desc": "The Linux kernel before 5.4.1 on powerpc allows Information Exposure because the Spectre-RSB mitigation is not in place for all applicable CPUs, aka CID-39e72bf96f58. This is related to arch/powerpc/kernel/entry_64.S and arch/powerpc/kernel/security.c.",
  "repo": "torvalds/linux",
  "patch_hash": "39e72bf96f5847ba87cc5bd7a3ce0fed813dc9ad",
  "patch_info": {
    "commit_hash": "39e72bf96f5847ba87cc5bd7a3ce0fed813dc9ad",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/39e72bf96f5847ba87cc5bd7a3ce0fed813dc9ad",
    "files": [
      "arch/powerpc/include/asm/asm-prototypes.h",
      "arch/powerpc/include/asm/security_features.h",
      "arch/powerpc/kernel/entry_64.S",
      "arch/powerpc/kernel/security.c"
    ],
    "message": "powerpc/book3s64: Fix link stack flush on context switch\n\nIn commit ee13cb249fab (\"powerpc/64s: Add support for software count\ncache flush\"), I added support for software to flush the count\ncache (indirect branch cache) on context switch if firmware told us\nthat was the required mitigation for Spectre v2.\n\nAs part of that code we also added a software flush of the link\nstack (return address stack), which protects against Spectre-RSB\nbetween user processes.\n\nThat is all correct for CPUs that activate that mitigation, which is\ncurrently Power9 Nimbus DD2.3.\n\nWhat I got wrong is that on older CPUs, where firmware has disabled\nthe count cache, we also need to flush the link stack on context\nswitch.\n\nTo fix it we create a new feature bit which is not set by firmware,\nwhich tells us we need to flush the link stack. We set that when\nfirmware tells us that either of the existing Spectre v2 mitigations\nare enabled.\n\nThen we adjust the patching code so that if we see that feature bit we\nenable the link stack flush. If we're also told to flush the count\ncache in software then we fall through and do that also.\n\nOn the older CPUs we don't need to do do the software count cache\nflush, firmware has disabled it, so in that case we patch in an early\nreturn after the link stack flush.\n\nThe naming of some of the functions is awkward after this patch,\nbecause they're called \"count cache\" but they also do link stack. But\nwe'll fix that up in a later commit to ease backporting.\n\nThis is the fix for CVE-2019-18660.\n\nReported-by: Anthony Steinhauser <asteinhauser@google.com>\nFixes: ee13cb249fab (\"powerpc/64s: Add support for software count cache flush\")\nCc: stable@vger.kernel.org # v4.4+\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
    "before_after_code_files": [
      "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h",
      "arch/powerpc/include/asm/security_features.h||arch/powerpc/include/asm/security_features.h",
      "arch/powerpc/kernel/entry_64.S||arch/powerpc/kernel/entry_64.S",
      "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
    ]
  },
  "patch_diff": {
    "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h": [
      "File: arch/powerpc/include/asm/asm-prototypes.h -> arch/powerpc/include/asm/asm-prototypes.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "153: extern s32 patch__call_flush_count_cache;",
      "154: extern s32 patch__flush_count_cache_return;",
      "155: extern s32 patch__memset_nocache, patch__memcpy_nocache;",
      "157: extern long flush_count_cache;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "155: extern s32 patch__flush_link_stack_return;",
      "",
      "---------------"
    ],
    "arch/powerpc/include/asm/security_features.h||arch/powerpc/include/asm/security_features.h": [
      "File: arch/powerpc/include/asm/security_features.h -> arch/powerpc/include/asm/security_features.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "82: #define SEC_FTR_FLUSH_COUNT_CACHE 0x0000000000000400ull",
      "86: #define SEC_FTR_DEFAULT \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "85: #define SEC_FTR_FLUSH_LINK_STACK 0x0000000000001000ull",
      "",
      "---------------"
    ],
    "arch/powerpc/kernel/entry_64.S||arch/powerpc/kernel/entry_64.S": [
      "File: arch/powerpc/kernel/entry_64.S -> arch/powerpc/kernel/entry_64.S",
      "--- Hunk 1 ---",
      "[Context before]",
      "546:  .balign 32",
      "548: 1: mtlr r9",
      "549:  li r9,0x7fff",
      "550:  mtctr r9",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "552: 3: nop",
      "553:  patch_site 3b patch__flush_link_stack_return",
      "",
      "---------------"
    ],
    "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c": [
      "File: arch/powerpc/kernel/security.c -> arch/powerpc/kernel/security.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "24:  COUNT_CACHE_FLUSH_HW = 0x4,",
      "25: };",
      "26: static enum count_cache_flush_type count_cache_flush_type = COUNT_CACHE_FLUSH_NONE;",
      "28: bool barrier_nospec_enabled;",
      "29: static bool no_nospec;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: static bool link_stack_flush_enabled;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "213:   if (ccd)",
      "214:    seq_buf_printf(&s, \"Indirect branch cache disabled\");",
      "215:  } else if (count_cache_flush_type != COUNT_CACHE_FLUSH_NONE) {",
      "216:   seq_buf_printf(&s, \"Mitigation: Software count cache flush\");",
      "218:   if (count_cache_flush_type == COUNT_CACHE_FLUSH_HW)",
      "219:    seq_buf_printf(&s, \" (hardware accelerated)\");",
      "220:  } else if (btb_flush_enabled) {",
      "221:   seq_buf_printf(&s, \"Mitigation: Branch predictor state flush\");",
      "222:  } else {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "217:   if (link_stack_flush_enabled)",
      "218:    seq_buf_printf(&s, \", Software link stack flush\");",
      "226:   if (link_stack_flush_enabled)",
      "227:    seq_buf_printf(&s, \", Software link stack flush\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "377: device_initcall(stf_barrier_debugfs_init);",
      "380: static void toggle_count_cache_flush(bool enable)",
      "381: {",
      "383:   patch_instruction_site(&patch__call_flush_count_cache, PPC_INST_NOP);",
      "386:   return;",
      "387:  }",
      "389:  patch_branch_site(&patch__call_flush_count_cache,",
      "390:      (u64)&flush_count_cache, BRANCH_SET_LINK);",
      "392:  if (!security_ftr_enabled(SEC_FTR_BCCTR_FLUSH_ASSIST)) {",
      "393:   count_cache_flush_type = COUNT_CACHE_FLUSH_SW;",
      "394:   pr_info(\"count-cache-flush: full software flush sequence enabled.\\n\");",
      "",
      "[Removed Lines]",
      "382:  if (!enable || !security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE)) {",
      "384:   count_cache_flush_type = COUNT_CACHE_FLUSH_NONE;",
      "385:   pr_info(\"count-cache-flush: software flush disabled.\\n\");",
      "",
      "[Added Lines]",
      "389: static void no_count_cache_flush(void)",
      "390: {",
      "391:  count_cache_flush_type = COUNT_CACHE_FLUSH_NONE;",
      "392:  pr_info(\"count-cache-flush: software flush disabled.\\n\");",
      "393: }",
      "397:  if (!security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE) &&",
      "398:      !security_ftr_enabled(SEC_FTR_FLUSH_LINK_STACK))",
      "399:   enable = false;",
      "401:  if (!enable) {",
      "403:   pr_info(\"link-stack-flush: software flush disabled.\\n\");",
      "404:   link_stack_flush_enabled = false;",
      "405:   no_count_cache_flush();",
      "413:  pr_info(\"link-stack-flush: software flush enabled.\\n\");",
      "414:  link_stack_flush_enabled = true;",
      "417:  if (!security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE)) {",
      "418:   patch_instruction_site(&patch__flush_link_stack_return, PPC_INST_BLR);",
      "419:   no_count_cache_flush();",
      "420:   return;",
      "421:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "407:  if (no_spectrev2 || cpu_mitigations_off()) {",
      "408:   if (security_ftr_enabled(SEC_FTR_BCCTRL_SERIALISED) ||",
      "409:       security_ftr_enabled(SEC_FTR_COUNT_CACHE_DISABLED))",
      "412:   enable = false;",
      "413:  }",
      "415:  toggle_count_cache_flush(enable);",
      "416: }",
      "",
      "[Removed Lines]",
      "410:    pr_warn(\"Spectre v2 mitigations not under software control, can't disable\\n\");",
      "",
      "[Added Lines]",
      "441:    pr_warn(\"Spectre v2 mitigations not fully under software control, can't disable\\n\");",
      "451:  if (security_ftr_enabled(SEC_FTR_COUNT_CACHE_DISABLED) ||",
      "452:      security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE))",
      "453:   security_ftr_set(SEC_FTR_FLUSH_LINK_STACK);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af2e8c68b9c5403f77096969c516f742f5bb29e0",
      "candidate_info": {
        "commit_hash": "af2e8c68b9c5403f77096969c516f742f5bb29e0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/af2e8c68b9c5403f77096969c516f742f5bb29e0",
        "files": [
          "arch/powerpc/include/asm/asm-prototypes.h",
          "arch/powerpc/kernel/security.c",
          "arch/powerpc/kvm/book3s_hv_rmhandlers.S"
        ],
        "message": "KVM: PPC: Book3S HV: Flush link stack on guest exit to host kernel\n\nOn some systems that are vulnerable to Spectre v2, it is up to\nsoftware to flush the link stack (return address stack), in order to\nprotect against Spectre-RSB.\n\nWhen exiting from a guest we do some house keeping and then\npotentially exit to C code which is several stack frames deep in the\nhost kernel. We will then execute a series of returns without\npreceeding calls, opening up the possiblity that the guest could have\npoisoned the link stack, and direct speculative execution of the host\nto a gadget of some sort.\n\nTo prevent this we add a flush of the link stack on exit from a guest.\n\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
        "before_after_code_files": [
          "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h",
          "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c",
          "arch/powerpc/kvm/book3s_hv_rmhandlers.S||arch/powerpc/kvm/book3s_hv_rmhandlers.S"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h",
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ],
          "candidate": [
            "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h",
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h": [
          "File: arch/powerpc/include/asm/asm-prototypes.h -> arch/powerpc/include/asm/asm-prototypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "153: extern s32 patch__call_flush_count_cache;",
          "154: extern s32 patch__flush_count_cache_return;",
          "155: extern s32 patch__flush_link_stack_return;",
          "156: extern s32 patch__memset_nocache, patch__memcpy_nocache;",
          "158: extern long flush_count_cache;",
          "160: #ifdef CONFIG_PPC_TRANSACTIONAL_MEM",
          "161: void kvmppc_save_tm_hv(struct kvm_vcpu *vcpu, u64 msr, bool preserve_nv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156: extern s32 patch__call_kvm_flush_link_stack;",
          "160: extern long kvm_flush_link_stack;",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c": [
          "File: arch/powerpc/kernel/security.c -> arch/powerpc/kernel/security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "401:  if (!enable) {",
          "402:   patch_instruction_site(&patch__call_flush_count_cache, PPC_INST_NOP);",
          "403:   pr_info(\"link-stack-flush: software flush disabled.\\n\");",
          "404:   link_stack_flush_enabled = false;",
          "405:   no_count_cache_flush();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: #ifdef CONFIG_KVM_BOOK3S_HV_POSSIBLE",
          "404:   patch_instruction_site(&patch__call_kvm_flush_link_stack, PPC_INST_NOP);",
          "405: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "410:  patch_branch_site(&patch__call_flush_count_cache,",
          "411:      (u64)&flush_count_cache, BRANCH_SET_LINK);",
          "413:  pr_info(\"link-stack-flush: software flush enabled.\\n\");",
          "414:  link_stack_flush_enabled = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "416: #ifdef CONFIG_KVM_BOOK3S_HV_POSSIBLE",
          "418:  patch_branch_site(&patch__call_kvm_flush_link_stack,",
          "419:      (u64)&kvm_flush_link_stack, BRANCH_SET_LINK);",
          "420: #endif",
          "",
          "---------------"
        ],
        "arch/powerpc/kvm/book3s_hv_rmhandlers.S||arch/powerpc/kvm/book3s_hv_rmhandlers.S": [
          "File: arch/powerpc/kvm/book3s_hv_rmhandlers.S -> arch/powerpc/kvm/book3s_hv_rmhandlers.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #include <asm/ppc_asm.h>",
          "14: #include <asm/kvm_asm.h>",
          "15: #include <asm/reg.h>",
          "16: #include <asm/mmu.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include <asm/code-patching-asm.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1487: 1:",
          "1491:  lwz r0, STACK_SLOT_SHORT_PATH(r1)",
          "1492:  cmpwi r0, 0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1495: 1: nop",
          "1496:  patch_site 1b patch__call_kvm_flush_link_stack",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1963:  mtlr r0",
          "1964:  blr",
          "1966: kvmppc_guest_external:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1974: .balign 32",
          "1975: .global kvm_flush_link_stack",
          "1976: kvm_flush_link_stack:",
          "1978:  mflr r0",
          "1981:  .rept 32",
          "1982:  bl .+4",
          "1983:  .endr",
          "1986: BEGIN_FTR_SECTION",
          "1987:  .rept 32",
          "1988:  bl .+4",
          "1989:  .endr",
          "1990: END_FTR_SECTION_IFSET(CPU_FTR_ARCH_300)",
          "1993:  mtlr r0",
          "1994:  blr",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "753462512868674a788ecc77bb96752efb818785",
      "candidate_info": {
        "commit_hash": "753462512868674a788ecc77bb96752efb818785",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/753462512868674a788ecc77bb96752efb818785",
        "files": [
          "arch/powerpc/include/asm/code-patching.h",
          "arch/powerpc/include/asm/inst.h",
          "arch/powerpc/kernel/align.c",
          "arch/powerpc/kernel/crash_dump.c",
          "arch/powerpc/kernel/epapr_paravirt.c",
          "arch/powerpc/kernel/hw_breakpoint.c",
          "arch/powerpc/kernel/jump_label.c",
          "arch/powerpc/kernel/kgdb.c",
          "arch/powerpc/kernel/kprobes.c",
          "arch/powerpc/kernel/module_64.c",
          "arch/powerpc/kernel/optprobes.c",
          "arch/powerpc/kernel/security.c",
          "arch/powerpc/kernel/setup_32.c",
          "arch/powerpc/kernel/trace/ftrace.c",
          "arch/powerpc/kernel/uprobes.c",
          "arch/powerpc/kvm/emulate_loadstore.c",
          "arch/powerpc/lib/code-patching.c",
          "arch/powerpc/lib/feature-fixups.c",
          "arch/powerpc/lib/test_emulate_step.c",
          "arch/powerpc/mm/nohash/8xx.c",
          "arch/powerpc/perf/8xx-pmu.c",
          "arch/powerpc/platforms/86xx/mpc86xx_smp.c",
          "arch/powerpc/platforms/powermac/smp.c",
          "arch/powerpc/xmon/xmon.c"
        ],
        "message": "powerpc: Use a macro for creating instructions from u32s\n\nIn preparation for instructions having a more complex data type start\nusing a macro, ppc_inst(), for making an instruction out of a u32.  A\nmacro is used so that instructions can be used as initializer elements.\nCurrently this does nothing, but it will allow for creating a data type\nthat can represent prefixed instructions.\n\nSigned-off-by: Jordan Niethe <jniethe5@gmail.com>\n[mpe: Change include guard to _ASM_POWERPC_INST_H]\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nReviewed-by: Alistair Popple <alistair@popple.id.au>\nLink: https://lore.kernel.org/r/20200506034050.24806-7-jniethe5@gmail.com",
        "before_after_code_files": [
          "arch/powerpc/include/asm/code-patching.h||arch/powerpc/include/asm/code-patching.h",
          "arch/powerpc/include/asm/inst.h||arch/powerpc/include/asm/inst.h",
          "arch/powerpc/kernel/align.c||arch/powerpc/kernel/align.c",
          "arch/powerpc/kernel/crash_dump.c||arch/powerpc/kernel/crash_dump.c",
          "arch/powerpc/kernel/epapr_paravirt.c||arch/powerpc/kernel/epapr_paravirt.c",
          "arch/powerpc/kernel/hw_breakpoint.c||arch/powerpc/kernel/hw_breakpoint.c",
          "arch/powerpc/kernel/jump_label.c||arch/powerpc/kernel/jump_label.c",
          "arch/powerpc/kernel/kgdb.c||arch/powerpc/kernel/kgdb.c",
          "arch/powerpc/kernel/kprobes.c||arch/powerpc/kernel/kprobes.c",
          "arch/powerpc/kernel/module_64.c||arch/powerpc/kernel/module_64.c",
          "arch/powerpc/kernel/optprobes.c||arch/powerpc/kernel/optprobes.c",
          "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c",
          "arch/powerpc/kernel/setup_32.c||arch/powerpc/kernel/setup_32.c",
          "arch/powerpc/kernel/trace/ftrace.c||arch/powerpc/kernel/trace/ftrace.c",
          "arch/powerpc/kernel/uprobes.c||arch/powerpc/kernel/uprobes.c",
          "arch/powerpc/kvm/emulate_loadstore.c||arch/powerpc/kvm/emulate_loadstore.c",
          "arch/powerpc/lib/code-patching.c||arch/powerpc/lib/code-patching.c",
          "arch/powerpc/lib/feature-fixups.c||arch/powerpc/lib/feature-fixups.c",
          "arch/powerpc/lib/test_emulate_step.c||arch/powerpc/lib/test_emulate_step.c",
          "arch/powerpc/mm/nohash/8xx.c||arch/powerpc/mm/nohash/8xx.c",
          "arch/powerpc/perf/8xx-pmu.c||arch/powerpc/perf/8xx-pmu.c",
          "arch/powerpc/platforms/86xx/mpc86xx_smp.c||arch/powerpc/platforms/86xx/mpc86xx_smp.c",
          "arch/powerpc/platforms/powermac/smp.c||arch/powerpc/platforms/powermac/smp.c",
          "arch/powerpc/xmon/xmon.c||arch/powerpc/xmon/xmon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ],
          "candidate": [
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/include/asm/code-patching.h||arch/powerpc/include/asm/code-patching.h": [
          "File: arch/powerpc/include/asm/code-patching.h -> arch/powerpc/include/asm/code-patching.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <linux/string.h>",
          "12: #include <linux/kallsyms.h>",
          "13: #include <asm/asm-compat.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: static inline int modify_instruction(unsigned int *addr, unsigned int clr,",
          "49:          unsigned int set)",
          "50: {",
          "52: }",
          "54: static inline int modify_instruction_site(s32 *site, unsigned int clr, unsigned int set)",
          "",
          "[Removed Lines]",
          "51:  return patch_instruction(addr, (*addr & ~clr) | set);",
          "",
          "[Added Lines]",
          "52:  return patch_instruction(addr, ppc_inst((*addr & ~clr) | set));",
          "",
          "---------------"
        ],
        "arch/powerpc/include/asm/inst.h||arch/powerpc/include/asm/inst.h": [
          "File: arch/powerpc/include/asm/inst.h -> arch/powerpc/include/asm/inst.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: #ifndef _ASM_POWERPC_INST_H",
          "3: #define _ASM_POWERPC_INST_H",
          "9: #define ppc_inst(x) (x)",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/align.c||arch/powerpc/kernel/align.c": [
          "File: arch/powerpc/kernel/align.c -> arch/powerpc/kernel/align.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <asm/disassemble.h>",
          "25: #include <asm/cpu_has_feature.h>",
          "26: #include <asm/sstep.h>",
          "28: struct aligninfo {",
          "29:  unsigned char len;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <asm/inst.h>",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/crash_dump.c||arch/powerpc/kernel/crash_dump.c": [
          "File: arch/powerpc/kernel/crash_dump.c -> arch/powerpc/kernel/crash_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include <asm/firmware.h>",
          "19: #include <linux/uaccess.h>",
          "20: #include <asm/rtas.h>",
          "22: #ifdef DEBUG",
          "23: #include <asm/udbg.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:  patch_branch(++p, addr + PHYSICAL_START, 0);",
          "49: }",
          "",
          "[Removed Lines]",
          "47:  patch_instruction(p, PPC_INST_NOP);",
          "",
          "[Added Lines]",
          "48:  patch_instruction(p, ppc_inst(PPC_INST_NOP));",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/epapr_paravirt.c||arch/powerpc/kernel/epapr_paravirt.c": [
          "File: arch/powerpc/kernel/epapr_paravirt.c -> arch/powerpc/kernel/epapr_paravirt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <asm/cacheflush.h>",
          "12: #include <asm/code-patching.h>",
          "13: #include <asm/machdep.h>",
          "15: #if !defined(CONFIG_64BIT) || defined(CONFIG_PPC_BOOK3E_64)",
          "16: extern void epapr_ev_idle(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:   return -1;",
          "38:  for (i = 0; i < (len / 4); i++) {",
          "40:   patch_instruction(epapr_hypercall_start + i, inst);",
          "41: #if !defined(CONFIG_64BIT) || defined(CONFIG_PPC_BOOK3E_64)",
          "42:   patch_instruction(epapr_ev_idle_start + i, inst);",
          "",
          "[Removed Lines]",
          "39:   u32 inst = be32_to_cpu(insts[i]);",
          "",
          "[Added Lines]",
          "40:   u32 inst = ppc_inst(be32_to_cpu(insts[i]));",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/hw_breakpoint.c||arch/powerpc/kernel/hw_breakpoint.c": [
          "File: arch/powerpc/kernel/hw_breakpoint.c -> arch/powerpc/kernel/hw_breakpoint.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <asm/debug.h>",
          "25: #include <asm/debugfs.h>",
          "26: #include <asm/hvcall.h>",
          "27: #include <linux/uaccess.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243: static bool stepping_handler(struct pt_regs *regs, struct perf_event *bp,",
          "244:         struct arch_hw_breakpoint *info)",
          "245: {",
          "247:  int ret, type, size;",
          "248:  struct instruction_op op;",
          "249:  unsigned long addr = info->address;",
          "",
          "[Removed Lines]",
          "246:  unsigned int instr = 0;",
          "",
          "[Added Lines]",
          "247:  unsigned int instr = ppc_inst(0);",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/jump_label.c||arch/powerpc/kernel/jump_label.c": [
          "File: arch/powerpc/kernel/jump_label.c -> arch/powerpc/kernel/jump_label.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include <linux/kernel.h>",
          "7: #include <linux/jump_label.h>",
          "8: #include <asm/code-patching.h>",
          "10: void arch_jump_label_transform(struct jump_entry *entry,",
          "11:           enum jump_label_type type)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "15:  if (type == JUMP_LABEL_JMP)",
          "16:   patch_branch(addr, entry->target, 0);",
          "17:  else",
          "19: }",
          "",
          "[Removed Lines]",
          "18:   patch_instruction(addr, PPC_INST_NOP);",
          "",
          "[Added Lines]",
          "19:   patch_instruction(addr, ppc_inst(PPC_INST_NOP));",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/kgdb.c||arch/powerpc/kernel/kgdb.c": [
          "File: arch/powerpc/kernel/kgdb.c -> arch/powerpc/kernel/kgdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <asm/debug.h>",
          "27: #include <asm/code-patching.h>",
          "28: #include <linux/slab.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "424:  if (err)",
          "425:   return err;",
          "428:  if (err)",
          "429:   return -EFAULT;",
          "",
          "[Removed Lines]",
          "427:  err = patch_instruction(addr, BREAK_INSTR);",
          "",
          "[Added Lines]",
          "428:  err = patch_instruction(addr, ppc_inst(BREAK_INSTR));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "439:  unsigned int instr = *(unsigned int *)bpt->saved_instr;",
          "440:  unsigned int *addr = (unsigned int *)bpt->bpt_addr;",
          "443:  if (err)",
          "444:   return -EFAULT;",
          "",
          "[Removed Lines]",
          "442:  err = patch_instruction(addr, instr);",
          "",
          "[Added Lines]",
          "443:  err = patch_instruction(addr, ppc_inst(instr));",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/kprobes.c||arch/powerpc/kernel/kprobes.c": [
          "File: arch/powerpc/kernel/kprobes.c -> arch/powerpc/kernel/kprobes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <asm/cacheflush.h>",
          "24: #include <asm/sstep.h>",
          "25: #include <asm/sections.h>",
          "26: #include <linux/uaccess.h>",
          "28: DEFINE_PER_CPU(struct kprobe *, current_kprobe) = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "139: void arch_arm_kprobe(struct kprobe *p)",
          "140: {",
          "142: }",
          "143: NOKPROBE_SYMBOL(arch_arm_kprobe);",
          "145: void arch_disarm_kprobe(struct kprobe *p)",
          "146: {",
          "148: }",
          "149: NOKPROBE_SYMBOL(arch_disarm_kprobe);",
          "",
          "[Removed Lines]",
          "141:  patch_instruction(p->addr, BREAKPOINT_INSTRUCTION);",
          "147:  patch_instruction(p->addr, p->opcode);",
          "",
          "[Added Lines]",
          "142:  patch_instruction(p->addr, ppc_inst(BREAKPOINT_INSTRUCTION));",
          "148:  patch_instruction(p->addr, ppc_inst(p->opcode));",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/module_64.c||arch/powerpc/kernel/module_64.c": [
          "File: arch/powerpc/kernel/module_64.c -> arch/powerpc/kernel/module_64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <linux/sort.h>",
          "21: #include <asm/setup.h>",
          "22: #include <asm/sections.h>",
          "25:    a separate r2 value in the init and core section, and stub between",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "495:   return 1;",
          "497:  if (*instruction != PPC_INST_NOP) {",
          "",
          "[Removed Lines]",
          "494:  if (!instr_is_relative_link_branch(*prev_insn))",
          "",
          "[Added Lines]",
          "495:  if (!instr_is_relative_link_branch(ppc_inst(*prev_insn)))",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/optprobes.c||arch/powerpc/kernel/optprobes.c": [
          "File: arch/powerpc/kernel/optprobes.c -> arch/powerpc/kernel/optprobes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <asm/code-patching.h>",
          "17: #include <asm/sstep.h>",
          "18: #include <asm/ppc-opcode.h>",
          "20: #define TMPL_CALL_HDLR_IDX \\",
          "21:  (optprobe_template_call_handler - optprobe_template_entry)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147: void patch_imm32_load_insns(unsigned int val, kprobe_opcode_t *addr)",
          "148: {",
          "152:  addr++;",
          "157: }",
          "",
          "[Removed Lines]",
          "150:  patch_instruction(addr, PPC_INST_ADDIS | ___PPC_RT(4) |",
          "151:      ((val >> 16) & 0xffff));",
          "155:  patch_instruction(addr, PPC_INST_ORI | ___PPC_RA(4) |",
          "156:      ___PPC_RS(4) | (val & 0xffff));",
          "",
          "[Added Lines]",
          "151:  patch_instruction(addr, ppc_inst(PPC_INST_ADDIS | ___PPC_RT(4) |",
          "152:      ((val >> 16) & 0xffff)));",
          "156:  patch_instruction(addr, ppc_inst(PPC_INST_ORI | ___PPC_RA(4) |",
          "157:      ___PPC_RS(4) | (val & 0xffff)));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163: void patch_imm64_load_insns(unsigned long val, kprobe_opcode_t *addr)",
          "164: {",
          "168:  addr++;",
          "173:  addr++;",
          "178:  addr++;",
          "183:  addr++;",
          "188: }",
          "190: int arch_prepare_optimized_kprobe(struct optimized_kprobe *op, struct kprobe *p)",
          "",
          "[Removed Lines]",
          "166:  patch_instruction(addr, PPC_INST_ADDIS | ___PPC_RT(3) |",
          "167:      ((val >> 48) & 0xffff));",
          "171:  patch_instruction(addr, PPC_INST_ORI | ___PPC_RA(3) |",
          "172:      ___PPC_RS(3) | ((val >> 32) & 0xffff));",
          "176:  patch_instruction(addr, PPC_INST_RLDICR | ___PPC_RA(3) |",
          "177:      ___PPC_RS(3) | __PPC_SH64(32) | __PPC_ME64(31));",
          "181:  patch_instruction(addr, PPC_INST_ORIS | ___PPC_RA(3) |",
          "182:      ___PPC_RS(3) | ((val >> 16) & 0xffff));",
          "186:  patch_instruction(addr, PPC_INST_ORI | ___PPC_RA(3) |",
          "187:      ___PPC_RS(3) | (val & 0xffff));",
          "",
          "[Added Lines]",
          "167:  patch_instruction(addr, ppc_inst(PPC_INST_ADDIS | ___PPC_RT(3) |",
          "168:      ((val >> 48) & 0xffff)));",
          "172:  patch_instruction(addr, ppc_inst(PPC_INST_ORI | ___PPC_RA(3) |",
          "173:      ___PPC_RS(3) | ((val >> 32) & 0xffff)));",
          "177:  patch_instruction(addr, ppc_inst(PPC_INST_RLDICR | ___PPC_RA(3) |",
          "178:      ___PPC_RS(3) | __PPC_SH64(32) | __PPC_ME64(31)));",
          "182:  patch_instruction(addr, ppc_inst(PPC_INST_ORIS | ___PPC_RA(3) |",
          "183:      ___PPC_RS(3) | ((val >> 16) & 0xffff)));",
          "187:  patch_instruction(addr, ppc_inst(PPC_INST_ORI | ___PPC_RA(3) |",
          "188:      ___PPC_RS(3) | (val & 0xffff)));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "230:  size = (TMPL_END_IDX * sizeof(kprobe_opcode_t)) / sizeof(int);",
          "231:  pr_devel(\"Copying template to %p, size %lu\\n\", buff, size);",
          "232:  for (i = 0; i < size; i++) {",
          "234:   if (rc < 0)",
          "235:    goto error;",
          "236:  }",
          "",
          "[Removed Lines]",
          "233:   rc = patch_instruction(buff + i, *(optprobe_template_entry + i));",
          "",
          "[Added Lines]",
          "234:   rc = patch_instruction(buff + i,",
          "235:            ppc_inst(*(optprobe_template_entry + i)));",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c": [
          "File: arch/powerpc/kernel/security.c -> arch/powerpc/kernel/security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <asm/debugfs.h>",
          "17: #include <asm/security_features.h>",
          "18: #include <asm/setup.h>",
          "21: u64 powerpc_security_features __read_mostly = SEC_FTR_DEFAULT;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "439:   enable = false;",
          "441:  if (!enable) {",
          "443: #ifdef CONFIG_KVM_BOOK3S_HV_POSSIBLE",
          "445: #endif",
          "446:   pr_info(\"link-stack-flush: software flush disabled.\\n\");",
          "447:   link_stack_flush_enabled = false;",
          "",
          "[Removed Lines]",
          "442:   patch_instruction_site(&patch__call_flush_count_cache, PPC_INST_NOP);",
          "444:   patch_instruction_site(&patch__call_kvm_flush_link_stack, PPC_INST_NOP);",
          "",
          "[Added Lines]",
          "443:   patch_instruction_site(&patch__call_flush_count_cache,",
          "444:            ppc_inst(PPC_INST_NOP));",
          "446:   patch_instruction_site(&patch__call_kvm_flush_link_stack,",
          "447:            ppc_inst(PPC_INST_NOP));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "466:  if (!security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE)) {",
          "468:   no_count_cache_flush();",
          "469:   return;",
          "470:  }",
          "",
          "[Removed Lines]",
          "467:   patch_instruction_site(&patch__flush_link_stack_return, PPC_INST_BLR);",
          "",
          "[Added Lines]",
          "470:   patch_instruction_site(&patch__flush_link_stack_return,",
          "471:            ppc_inst(PPC_INST_BLR));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "475:   return;",
          "476:  }",
          "479:  count_cache_flush_type = COUNT_CACHE_FLUSH_HW;",
          "480:  pr_info(\"count-cache-flush: hardware assisted flush sequence enabled\\n\");",
          "481: }",
          "",
          "[Removed Lines]",
          "478:  patch_instruction_site(&patch__flush_count_cache_return, PPC_INST_BLR);",
          "",
          "[Added Lines]",
          "482:  patch_instruction_site(&patch__flush_count_cache_return, ppc_inst(PPC_INST_BLR));",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/setup_32.c||arch/powerpc/kernel/setup_32.c": [
          "File: arch/powerpc/kernel/setup_32.c -> arch/powerpc/kernel/setup_32.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:  udbg_early_init();",
          "90:  create_cond_branch(&insn, addr, branch_target(addr), 0x820000);",
          "",
          "[Removed Lines]",
          "88:  patch_instruction_site(&patch__memcpy_nocache, PPC_INST_NOP);",
          "",
          "[Added Lines]",
          "88:  patch_instruction_site(&patch__memcpy_nocache, ppc_inst(PPC_INST_NOP));",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/trace/ftrace.c||arch/powerpc/kernel/trace/ftrace.c": [
          "File: arch/powerpc/kernel/trace/ftrace.c -> arch/powerpc/kernel/trace/ftrace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <asm/code-patching.h>",
          "28: #include <asm/ftrace.h>",
          "29: #include <asm/syscall.h>",
          "32: #ifdef CONFIG_DYNAMIC_FTRACE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162: #ifdef CONFIG_MPROFILE_KERNEL",
          "166:  if (probe_kernel_read(&op, (void *)(ip - 4), 4)) {",
          "167:   pr_err(\"Fetching instruction at %lx failed.\\n\", ip - 4);",
          "",
          "[Removed Lines]",
          "164:  pop = PPC_INST_NOP;",
          "",
          "[Added Lines]",
          "165:  pop = ppc_inst(PPC_INST_NOP);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:  }",
          "173:   pr_err(\"Unexpected instruction %08x around bl _mcount\\n\", op);",
          "174:   return -EINVAL;",
          "175:  }",
          "",
          "[Removed Lines]",
          "172:  if (op != PPC_INST_MFLR && op != PPC_INST_STD_LR) {",
          "",
          "[Added Lines]",
          "173:  if (op != ppc_inst(PPC_INST_MFLR) && op != ppc_inst(PPC_INST_STD_LR)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "199:   return -EFAULT;",
          "200:  }",
          "203:   pr_err(\"Expected %08x found %08x\\n\", PPC_INST_LD_TOC, op);",
          "204:   return -EINVAL;",
          "205:  }",
          "",
          "[Removed Lines]",
          "202:  if (op != PPC_INST_LD_TOC) {",
          "",
          "[Added Lines]",
          "203:  if (op != ppc_inst(PPC_INST_LD_TOC)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "275:   return -EINVAL;",
          "276:  }",
          "280:  if (patch_instruction((unsigned int *)ip, op))",
          "281:   return -EPERM;",
          "",
          "[Removed Lines]",
          "278:  op = PPC_INST_NOP;",
          "",
          "[Added Lines]",
          "279:  op = ppc_inst(PPC_INST_NOP);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "420:   }",
          "421:  }",
          "424:   pr_err(\"Patching NOP failed.\\n\");",
          "425:   return -EPERM;",
          "426:  }",
          "",
          "[Removed Lines]",
          "423:  if (patch_instruction((unsigned int *)ip, PPC_INST_NOP)) {",
          "",
          "[Added Lines]",
          "424:  if (patch_instruction((unsigned int *)ip, ppc_inst(PPC_INST_NOP))) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "442:  if (test_24bit_addr(ip, addr)) {",
          "444:   old = ftrace_call_replace(ip, addr, 1);",
          "446:   return ftrace_modify_code(ip, old, new);",
          "447:  } else if (core_kernel_text(ip))",
          "448:   return __ftrace_make_nop_kernel(rec, addr);",
          "",
          "[Removed Lines]",
          "445:   new = PPC_INST_NOP;",
          "",
          "[Added Lines]",
          "446:   new = ppc_inst(PPC_INST_NOP);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "500:   return 0;",
          "501:  return 1;",
          "502: }",
          "",
          "[Removed Lines]",
          "499:  if ((op0 != 0x48000008) || ((op1 & 0xffff0000) != 0xe8410000))",
          "",
          "[Added Lines]",
          "500:  if (op0 != ppc_inst(0x48000008) || ((op1 & 0xffff0000) != 0xe8410000))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "505: expected_nop_sequence(void *ip, unsigned int op0, unsigned int op1)",
          "506: {",
          "509:   return 0;",
          "510:  return 1;",
          "511: }",
          "",
          "[Removed Lines]",
          "508:  if (op0 != PPC_INST_NOP)",
          "",
          "[Added Lines]",
          "509:  if (op0 != ppc_inst(PPC_INST_NOP))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "588:   return -EFAULT;",
          "592:   pr_err(\"Expected NOP but have %x\\n\", op);",
          "593:   return -EINVAL;",
          "594:  }",
          "",
          "[Removed Lines]",
          "591:  if (op != PPC_INST_NOP) {",
          "",
          "[Added Lines]",
          "592:  if (op != ppc_inst(PPC_INST_NOP)) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "645:   return -EFAULT;",
          "646:  }",
          "649:   pr_err(\"Unexpected call sequence at %p: %x\\n\", ip, op);",
          "650:   return -EINVAL;",
          "651:  }",
          "",
          "[Removed Lines]",
          "648:  if (op != PPC_INST_NOP) {",
          "",
          "[Added Lines]",
          "649:  if (op != ppc_inst(PPC_INST_NOP)) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "677:  if (test_24bit_addr(ip, addr)) {",
          "680:   new = ftrace_call_replace(ip, addr, 1);",
          "681:   return ftrace_modify_code(ip, old, new);",
          "682:  } else if (core_kernel_text(ip))",
          "",
          "[Removed Lines]",
          "679:   old = PPC_INST_NOP;",
          "",
          "[Added Lines]",
          "680:   old = ppc_inst(PPC_INST_NOP);",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/uprobes.c||arch/powerpc/kernel/uprobes.c": [
          "File: arch/powerpc/kernel/uprobes.c -> arch/powerpc/kernel/uprobes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include <linux/kdebug.h>",
          "16: #include <asm/sstep.h>",
          "18: #define UPROBE_TRAP_NR UINT_MAX",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include <asm/inst.h>",
          "",
          "---------------"
        ],
        "arch/powerpc/kvm/emulate_loadstore.c||arch/powerpc/kvm/emulate_loadstore.c": [
          "File: arch/powerpc/kvm/emulate_loadstore.c -> arch/powerpc/kvm/emulate_loadstore.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:  emulated = EMULATE_FAIL;",
          "97:  vcpu->arch.regs.msr = vcpu->arch.shared->msr;",
          "99:   int type = op.type & INSTR_TYPE_MASK;",
          "100:   int size = GETSIZE(op.type);",
          "",
          "[Removed Lines]",
          "98:  if (analyse_instr(&op, &vcpu->arch.regs, inst) == 0) {",
          "",
          "[Added Lines]",
          "98:  if (analyse_instr(&op, &vcpu->arch.regs, ppc_inst(inst)) == 0) {",
          "",
          "---------------"
        ],
        "arch/powerpc/lib/code-patching.c||arch/powerpc/lib/code-patching.c": [
          "File: arch/powerpc/lib/code-patching.c -> arch/powerpc/lib/code-patching.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <asm/page.h>",
          "18: #include <asm/code-patching.h>",
          "19: #include <asm/setup.h>",
          "21: static int __patch_instruction(unsigned int *exec_addr, unsigned int instr,",
          "22:           unsigned int *patch_addr)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:  addr = (unsigned long)&instr;",
          "436:  check(instr_is_branch_to_addr(&instr, 0x100));",
          "439:  check(instr_is_branch_to_addr(&instr, 0x420fc));",
          "442:  check(instr_is_branch_to_addr(&instr, addr + 0x1FFFFFC));",
          "445:  check(instr_is_branch_to_addr(&instr, addr - 4));",
          "448:  check(instr_is_branch_to_addr(&instr, addr - 0x2000000));",
          "",
          "[Removed Lines]",
          "417:  check(instr_is_branch_iform(0x48000000));",
          "419:  check(instr_is_branch_iform(0x4bffffff));",
          "421:  check(!instr_is_branch_iform(0xcbffffff));",
          "423:  check(!instr_is_branch_iform(0x7bffffff));",
          "426:  check(instr_is_branch_iform(0x48000001));",
          "428:  check(instr_is_branch_iform(0x4bfffffd));",
          "430:  check(instr_is_branch_iform(0x4bff00fd));",
          "432:  check(!instr_is_branch_iform(0x7bfffffd));",
          "435:  instr = 0x48000103;",
          "438:  instr = 0x480420ff;",
          "441:  instr = 0x49fffffc;",
          "444:  instr = 0x4bfffffc;",
          "447:  instr = 0x4a000000;",
          "",
          "[Added Lines]",
          "418:  check(instr_is_branch_iform(ppc_inst(0x48000000)));",
          "420:  check(instr_is_branch_iform(ppc_inst(0x4bffffff)));",
          "422:  check(!instr_is_branch_iform(ppc_inst(0xcbffffff)));",
          "424:  check(!instr_is_branch_iform(ppc_inst(0x7bffffff)));",
          "427:  check(instr_is_branch_iform(ppc_inst(0x48000001)));",
          "429:  check(instr_is_branch_iform(ppc_inst(0x4bfffffd)));",
          "431:  check(instr_is_branch_iform(ppc_inst(0x4bff00fd)));",
          "433:  check(!instr_is_branch_iform(ppc_inst(0x7bfffffd)));",
          "436:  instr = ppc_inst(0x48000103);",
          "439:  instr = ppc_inst(0x480420ff);",
          "442:  instr = ppc_inst(0x49fffffc);",
          "445:  instr = ppc_inst(0x4bfffffc);",
          "448:  instr = ppc_inst(0x4a000000);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "479:  err = create_branch(&instr, &instr, addr, 0xFFFFFFFC);",
          "480:  check(instr_is_branch_to_addr(&instr, addr));",
          "482: }",
          "484: static void __init test_create_function_call(void)",
          "",
          "[Removed Lines]",
          "481:  check(instr == 0x48000000);",
          "",
          "[Added Lines]",
          "482:  check(instr == ppc_inst(0x48000000));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "505:  addr = (unsigned long)iptr;",
          "518:  check(instr_is_branch_to_addr(&instr, 0x100));",
          "521:  check(instr_is_branch_to_addr(&instr, 0x20fc));",
          "524:  check(instr_is_branch_to_addr(&instr, addr + 0x7FFC));",
          "527:  check(instr_is_branch_to_addr(&instr, addr - 4));",
          "530:  check(instr_is_branch_to_addr(&instr, addr - 0x8000));",
          "",
          "[Removed Lines]",
          "508:  check(instr_is_branch_bform(0x40000000));",
          "510:  check(instr_is_branch_bform(0x43ffffff));",
          "512:  check(!instr_is_branch_bform(0xc3ffffff));",
          "514:  check(!instr_is_branch_bform(0x7bffffff));",
          "517:  instr = 0x43ff0103;",
          "520:  instr = 0x43ff20ff;",
          "523:  instr = 0x43ff7ffc;",
          "526:  instr = 0x43fffffc;",
          "529:  instr = 0x43ff8000;",
          "",
          "[Added Lines]",
          "509:  check(instr_is_branch_bform(ppc_inst(0x40000000)));",
          "511:  check(instr_is_branch_bform(ppc_inst(0x43ffffff)));",
          "513:  check(!instr_is_branch_bform(ppc_inst(0xc3ffffff)));",
          "515:  check(!instr_is_branch_bform(ppc_inst(0x7bffffff)));",
          "518:  instr = ppc_inst(0x43ff0103);",
          "521:  instr = ppc_inst(0x43ff20ff);",
          "524:  instr = ppc_inst(0x43ff7ffc);",
          "527:  instr = ppc_inst(0x43fffffc);",
          "530:  instr = ppc_inst(0x43ff8000);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "564:  err = create_cond_branch(&instr, iptr, addr, 0xFFFFFFFC);",
          "565:  check(instr_is_branch_to_addr(&instr, addr));",
          "567: }",
          "569: static void __init test_translate_branch(void)",
          "",
          "[Removed Lines]",
          "566:  check(instr == 0x43FF0000);",
          "",
          "[Added Lines]",
          "567:  check(instr == ppc_inst(0x43FF0000));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "597:  patch_instruction(q, instr);",
          "598:  check(instr_is_branch_to_addr(p, addr));",
          "599:  check(instr_is_branch_to_addr(q, addr));",
          "603:  p = buf + 0x2000000;",
          "",
          "[Removed Lines]",
          "600:  check(*q == 0x4a000000);",
          "",
          "[Added Lines]",
          "601:  check(*q == ppc_inst(0x4a000000));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "608:  patch_instruction(q, instr);",
          "609:  check(instr_is_branch_to_addr(p, addr));",
          "610:  check(instr_is_branch_to_addr(q, addr));",
          "614:  p = buf;",
          "",
          "[Removed Lines]",
          "611:  check(*q == 0x49fffffc);",
          "",
          "[Added Lines]",
          "612:  check(*q == ppc_inst(0x49fffffc));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "654:  patch_instruction(q, instr);",
          "655:  check(instr_is_branch_to_addr(p, addr));",
          "656:  check(instr_is_branch_to_addr(q, addr));",
          "660:  p = buf + 0x8000;",
          "",
          "[Removed Lines]",
          "657:  check(*q == 0x43ff8000);",
          "",
          "[Added Lines]",
          "658:  check(*q == ppc_inst(0x43ff8000));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "666:  patch_instruction(q, instr);",
          "667:  check(instr_is_branch_to_addr(p, addr));",
          "668:  check(instr_is_branch_to_addr(q, addr));",
          "672:  p = buf;",
          "",
          "[Removed Lines]",
          "669:  check(*q == 0x43ff7ffc);",
          "",
          "[Added Lines]",
          "670:  check(*q == ppc_inst(0x43ff7ffc));",
          "",
          "---------------"
        ],
        "arch/powerpc/lib/feature-fixups.c||arch/powerpc/lib/feature-fixups.c": [
          "File: arch/powerpc/lib/feature-fixups.c -> arch/powerpc/lib/feature-fixups.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <asm/setup.h>",
          "22: #include <asm/security_features.h>",
          "23: #include <asm/firmware.h>",
          "25: struct fixup_entry {",
          "26:  unsigned long mask;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:  }",
          "91:  for (; dest < end; dest++)",
          "94:  return 0;",
          "95: }",
          "",
          "[Removed Lines]",
          "92:   raw_patch_instruction(dest, PPC_INST_NOP);",
          "",
          "[Added Lines]",
          "93:   raw_patch_instruction(dest, ppc_inst(PPC_INST_NOP));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "147:   pr_devel(\"patching dest %lx\\n\", (unsigned long)dest);",
          "151:   if (types & STF_BARRIER_FALLBACK)",
          "152:    patch_branch(dest + 1, (unsigned long)&stf_barrier_fallback,",
          "153:          BRANCH_SET_LINK);",
          "154:   else",
          "158:  }",
          "160:  printk(KERN_DEBUG \"stf-barrier: patched %d entry locations (%s barrier)\\n\", i,",
          "",
          "[Removed Lines]",
          "149:   patch_instruction(dest, instrs[0]);",
          "155:    patch_instruction(dest + 1, instrs[1]);",
          "157:   patch_instruction(dest + 2, instrs[2]);",
          "",
          "[Added Lines]",
          "150:   patch_instruction(dest, ppc_inst(instrs[0]));",
          "156:    patch_instruction(dest + 1, ppc_inst(instrs[1]));",
          "158:   patch_instruction(dest + 2, ppc_inst(instrs[2]));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208:   pr_devel(\"patching dest %lx\\n\", (unsigned long)dest);",
          "216:  }",
          "217:  printk(KERN_DEBUG \"stf-barrier: patched %d exit locations (%s barrier)\\n\", i,",
          "218:   (types == STF_BARRIER_NONE)                  ? \"no\" :",
          "",
          "[Removed Lines]",
          "210:   patch_instruction(dest, instrs[0]);",
          "211:   patch_instruction(dest + 1, instrs[1]);",
          "212:   patch_instruction(dest + 2, instrs[2]);",
          "213:   patch_instruction(dest + 3, instrs[3]);",
          "214:   patch_instruction(dest + 4, instrs[4]);",
          "215:   patch_instruction(dest + 5, instrs[5]);",
          "",
          "[Added Lines]",
          "211:   patch_instruction(dest, ppc_inst(instrs[0]));",
          "212:   patch_instruction(dest + 1, ppc_inst(instrs[1]));",
          "213:   patch_instruction(dest + 2, ppc_inst(instrs[2]));",
          "214:   patch_instruction(dest + 3, ppc_inst(instrs[3]));",
          "215:   patch_instruction(dest + 4, ppc_inst(instrs[4]));",
          "216:   patch_instruction(dest + 5, ppc_inst(instrs[5]));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "261:   pr_devel(\"patching dest %lx\\n\", (unsigned long)dest);",
          "266:  }",
          "268:  printk(KERN_DEBUG \"rfi-flush: patched %d locations (%s flush)\\n\", i,",
          "",
          "[Removed Lines]",
          "263:   patch_instruction(dest, instrs[0]);",
          "264:   patch_instruction(dest + 1, instrs[1]);",
          "265:   patch_instruction(dest + 2, instrs[2]);",
          "",
          "[Added Lines]",
          "264:   patch_instruction(dest, ppc_inst(instrs[0]));",
          "265:   patch_instruction(dest + 1, ppc_inst(instrs[1]));",
          "266:   patch_instruction(dest + 2, ppc_inst(instrs[2]));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "295:   dest = (void *)start + *start;",
          "297:   pr_devel(\"patching dest %lx\\n\", (unsigned long)dest);",
          "299:  }",
          "301:  printk(KERN_DEBUG \"barrier-nospec: patched %d locations\\n\", i);",
          "",
          "[Removed Lines]",
          "298:   patch_instruction(dest, instr);",
          "",
          "[Added Lines]",
          "299:   patch_instruction(dest, ppc_inst(instr));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "338:   dest = (void *)start + *start;",
          "340:   pr_devel(\"patching dest %lx\\n\", (unsigned long)dest);",
          "343:  }",
          "345:  printk(KERN_DEBUG \"barrier-nospec: patched %d locations\\n\", i);",
          "",
          "[Removed Lines]",
          "341:   patch_instruction(dest, instr[0]);",
          "342:   patch_instruction(dest + 1, instr[1]);",
          "",
          "[Added Lines]",
          "342:   patch_instruction(dest, ppc_inst(instr[0]));",
          "343:   patch_instruction(dest + 1, ppc_inst(instr[1]));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "353:  end = (void *)curr + *(curr + 1);",
          "354:  for (; start < end; start++) {",
          "355:   pr_devel(\"patching dest %lx\\n\", (unsigned long)start);",
          "357:  }",
          "358: }",
          "",
          "[Removed Lines]",
          "356:   patch_instruction(start, PPC_INST_NOP);",
          "",
          "[Added Lines]",
          "357:   patch_instruction(start, ppc_inst(PPC_INST_NOP));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "383:  for (; start < end; start++) {",
          "384:   dest = (void *)start + *start;",
          "386:  }",
          "387: }",
          "",
          "[Removed Lines]",
          "385:   raw_patch_instruction(dest, PPC_INST_LWSYNC);",
          "",
          "[Added Lines]",
          "386:   raw_patch_instruction(dest, ppc_inst(PPC_INST_LWSYNC));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "400:  length = (__end_interrupts - _stext) / sizeof(int);",
          "402:  while (length--) {",
          "404:   src++;",
          "405:   dest++;",
          "406:  }",
          "",
          "[Removed Lines]",
          "403:   raw_patch_instruction(dest, *src);",
          "",
          "[Added Lines]",
          "404:   raw_patch_instruction(dest, ppc_inst(*src));",
          "",
          "---------------"
        ],
        "arch/powerpc/lib/test_emulate_step.c||arch/powerpc/lib/test_emulate_step.c": [
          "File: arch/powerpc/lib/test_emulate_step.c -> arch/powerpc/lib/test_emulate_step.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <asm/sstep.h>",
          "12: #include <asm/ppc-opcode.h>",
          "13: #include <asm/code-patching.h>",
          "15: #define IMM_L(i)  ((uintptr_t)(i) & 0xffff)",
          "16: #define IMM_DS(i)  ((uintptr_t)(i) & 0xfffc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23:      ___PPC_RA(base) | IMM_DS(i))",
          "25:      ___PPC_RA(base) | IMM_L(i))",
          "27:      ___PPC_RA(a) | ___PPC_RB(b))",
          "29:      ___PPC_RA(base) | IMM_DS(i))",
          "31:      ___PPC_RA(a) | ___PPC_RB(b) | \\",
          "32:      __PPC_EH(eh))",
          "34:      ___PPC_RA(a) | ___PPC_RB(b))",
          "36:      ___PPC_RA(a) | ___PPC_RB(b))",
          "38:      ___PPC_RA(a) | ___PPC_RB(b))",
          "40:      ___PPC_RA(a) | ___PPC_RB(b))",
          "42:      ___PPC_RA(a) | ___PPC_RB(b))",
          "44:      ___PPC_RA(a) | ___PPC_RB(b))",
          "46:      ___PPC_RA(a) | ___PPC_RB(b))",
          "50:      ___PPC_RA(a) | ___PPC_RB(b))",
          "52:      ___PPC_RA(a) | ___PPC_RB(b) | 0x1)",
          "54:      ___PPC_RA(a) | ___PPC_RB(b))",
          "56:      ___PPC_RA(a) | ___PPC_RB(b) | 0x1)",
          "58: #define MAX_SUBTESTS 16",
          "",
          "[Removed Lines]",
          "22: #define TEST_LD(r, base, i) (PPC_INST_LD | ___PPC_RT(r) |  \\",
          "24: #define TEST_LWZ(r, base, i) (PPC_INST_LWZ | ___PPC_RT(r) |  \\",
          "26: #define TEST_LWZX(t, a, b) (PPC_INST_LWZX | ___PPC_RT(t) |  \\",
          "28: #define TEST_STD(r, base, i) (PPC_INST_STD | ___PPC_RS(r) |  \\",
          "30: #define TEST_LDARX(t, a, b, eh) (PPC_INST_LDARX | ___PPC_RT(t) | \\",
          "33: #define TEST_STDCX(s, a, b) (PPC_INST_STDCX | ___PPC_RS(s) | \\",
          "35: #define TEST_LFSX(t, a, b) (PPC_INST_LFSX | ___PPC_RT(t) |  \\",
          "37: #define TEST_STFSX(s, a, b) (PPC_INST_STFSX | ___PPC_RS(s) | \\",
          "39: #define TEST_LFDX(t, a, b) (PPC_INST_LFDX | ___PPC_RT(t) |  \\",
          "41: #define TEST_STFDX(s, a, b) (PPC_INST_STFDX | ___PPC_RS(s) | \\",
          "43: #define TEST_LVX(t, a, b) (PPC_INST_LVX | ___PPC_RT(t) |  \\",
          "45: #define TEST_STVX(s, a, b) (PPC_INST_STVX | ___PPC_RS(s) |  \\",
          "47: #define TEST_LXVD2X(s, a, b) (PPC_INST_LXVD2X | VSX_XX1((s), R##a, R##b))",
          "48: #define TEST_STXVD2X(s, a, b) (PPC_INST_STXVD2X | VSX_XX1((s), R##a, R##b))",
          "49: #define TEST_ADD(t, a, b) (PPC_INST_ADD | ___PPC_RT(t) |  \\",
          "51: #define TEST_ADD_DOT(t, a, b) (PPC_INST_ADD | ___PPC_RT(t) |  \\",
          "53: #define TEST_ADDC(t, a, b) (PPC_INST_ADDC | ___PPC_RT(t) |  \\",
          "55: #define TEST_ADDC_DOT(t, a, b) (PPC_INST_ADDC | ___PPC_RT(t) |  \\",
          "",
          "[Added Lines]",
          "23: #define TEST_LD(r, base, i) ppc_inst(PPC_INST_LD | ___PPC_RT(r) |  \\",
          "25: #define TEST_LWZ(r, base, i) ppc_inst(PPC_INST_LWZ | ___PPC_RT(r) |  \\",
          "27: #define TEST_LWZX(t, a, b) ppc_inst(PPC_INST_LWZX | ___PPC_RT(t) |  \\",
          "29: #define TEST_STD(r, base, i) ppc_inst(PPC_INST_STD | ___PPC_RS(r) |  \\",
          "31: #define TEST_LDARX(t, a, b, eh) ppc_inst(PPC_INST_LDARX | ___PPC_RT(t) | \\",
          "34: #define TEST_STDCX(s, a, b) ppc_inst(PPC_INST_STDCX | ___PPC_RS(s) | \\",
          "36: #define TEST_LFSX(t, a, b) ppc_inst(PPC_INST_LFSX | ___PPC_RT(t) |  \\",
          "38: #define TEST_STFSX(s, a, b) ppc_inst(PPC_INST_STFSX | ___PPC_RS(s) | \\",
          "40: #define TEST_LFDX(t, a, b) ppc_inst(PPC_INST_LFDX | ___PPC_RT(t) |  \\",
          "42: #define TEST_STFDX(s, a, b) ppc_inst(PPC_INST_STFDX | ___PPC_RS(s) | \\",
          "44: #define TEST_LVX(t, a, b) ppc_inst(PPC_INST_LVX | ___PPC_RT(t) |  \\",
          "46: #define TEST_STVX(s, a, b) ppc_inst(PPC_INST_STVX | ___PPC_RS(s) |  \\",
          "48: #define TEST_LXVD2X(s, a, b) ppc_inst(PPC_INST_LXVD2X | VSX_XX1((s), R##a, R##b))",
          "49: #define TEST_STXVD2X(s, a, b) ppc_inst(PPC_INST_STXVD2X | VSX_XX1((s), R##a, R##b))",
          "50: #define TEST_ADD(t, a, b) ppc_inst(PPC_INST_ADD | ___PPC_RT(t) |  \\",
          "52: #define TEST_ADD_DOT(t, a, b) ppc_inst(PPC_INST_ADD | ___PPC_RT(t) |  \\",
          "54: #define TEST_ADDC(t, a, b) ppc_inst(PPC_INST_ADDC | ___PPC_RT(t) |  \\",
          "56: #define TEST_ADDC_DOT(t, a, b) ppc_inst(PPC_INST_ADDC | ___PPC_RT(t) |  \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "472:   .subtests = {",
          "473:    {",
          "474:     .descr = \"R0 = LONG_MAX\",",
          "476:     .regs = {",
          "477:      .gpr[0] = LONG_MAX,",
          "478:     }",
          "",
          "[Removed Lines]",
          "475:     .instr = PPC_INST_NOP,",
          "",
          "[Added Lines]",
          "476:     .instr = ppc_inst(PPC_INST_NOP),",
          "",
          "---------------"
        ],
        "arch/powerpc/mm/nohash/8xx.c||arch/powerpc/mm/nohash/8xx.c": [
          "File: arch/powerpc/mm/nohash/8xx.c -> arch/powerpc/mm/nohash/8xx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <linux/mmu_context.h>",
          "12: #include <asm/fixmap.h>",
          "13: #include <asm/code-patching.h>",
          "15: #include <mm/mmu_decl.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:  instr &= 0xffff0000;",
          "103:  instr |= ((unsigned long)simm) >> 16;",
          "105: }",
          "107: static void mmu_mapin_ram_chunk(unsigned long offset, unsigned long top, pgprot_t prot)",
          "",
          "[Removed Lines]",
          "104:  patch_instruction_site(site, instr);",
          "",
          "[Added Lines]",
          "105:  patch_instruction_site(site, ppc_inst(instr));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:   mapped = 0;",
          "126:   mmu_mapin_immr();",
          "127:   if (!IS_ENABLED(CONFIG_PIN_TLB_IMMR))",
          "129:   if (!IS_ENABLED(CONFIG_PIN_TLB_TEXT))",
          "130:    mmu_patch_cmp_limit(&patch__itlbmiss_linmem_top, 0);",
          "131:  } else {",
          "",
          "[Removed Lines]",
          "128:    patch_instruction_site(&patch__dtlbmiss_immr_jmp, PPC_INST_NOP);",
          "",
          "[Added Lines]",
          "129:    patch_instruction_site(&patch__dtlbmiss_immr_jmp, ppc_inst(PPC_INST_NOP));",
          "",
          "---------------"
        ],
        "arch/powerpc/perf/8xx-pmu.c||arch/powerpc/perf/8xx-pmu.c": [
          "File: arch/powerpc/perf/8xx-pmu.c -> arch/powerpc/perf/8xx-pmu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <asm/firmware.h>",
          "16: #include <asm/ptrace.h>",
          "17: #include <asm/code-patching.h>",
          "19: #define PERF_8xx_ID_CPU_CYCLES  1",
          "20: #define PERF_8xx_ID_HW_INSTRUCTIONS 2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "170:  case PERF_8xx_ID_ITLB_LOAD_MISS:",
          "171:   if (atomic_dec_return(&itlb_miss_ref) == 0) {",
          "176:    patch_instruction_site(&patch__itlbmiss_exit_1, insn);",
          "177: #ifndef CONFIG_PIN_TLB_TEXT",
          "",
          "[Removed Lines]",
          "173:    unsigned int insn = PPC_INST_MFSPR | __PPC_RS(R10) |",
          "174:          __PPC_SPR(SPRN_SPRG_SCRATCH0);",
          "",
          "[Added Lines]",
          "174:    struct ppc_inst insn = ppc_inst(PPC_INST_MFSPR | __PPC_RS(R10) |",
          "175:          __PPC_SPR(SPRN_SPRG_SCRATCH0));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "182:  case PERF_8xx_ID_DTLB_LOAD_MISS:",
          "183:   if (atomic_dec_return(&dtlb_miss_ref) == 0) {",
          "188:    patch_instruction_site(&patch__dtlbmiss_exit_1, insn);",
          "189:    patch_instruction_site(&patch__dtlbmiss_exit_2, insn);",
          "",
          "[Removed Lines]",
          "185:    unsigned int insn = PPC_INST_MFSPR | __PPC_RS(R10) |",
          "186:          __PPC_SPR(SPRN_DAR);",
          "",
          "[Added Lines]",
          "186:    struct ppc_inst insn = ppc_inst(PPC_INST_MFSPR | __PPC_RS(R10) |",
          "187:          __PPC_SPR(SPRN_DAR));",
          "",
          "---------------"
        ],
        "arch/powerpc/platforms/86xx/mpc86xx_smp.c||arch/powerpc/platforms/86xx/mpc86xx_smp.c": [
          "File: arch/powerpc/platforms/86xx/mpc86xx_smp.c -> arch/powerpc/platforms/86xx/mpc86xx_smp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <asm/pci-bridge.h>",
          "18: #include <asm/mpic.h>",
          "19: #include <asm/cacheflush.h>",
          "21: #include <sysdev/fsl_soc.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:   mdelay(1);",
          "87:  local_irq_restore(flags);",
          "",
          "[Removed Lines]",
          "85:  patch_instruction(vector, save_vector);",
          "",
          "[Added Lines]",
          "86:  patch_instruction(vector, ppc_inst(save_vector));",
          "",
          "---------------"
        ],
        "arch/powerpc/platforms/powermac/smp.c||arch/powerpc/platforms/powermac/smp.c": [
          "File: arch/powerpc/platforms/powermac/smp.c -> arch/powerpc/platforms/powermac/smp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #include <asm/keylargo.h>",
          "50: #include <asm/pmac_low_i2c.h>",
          "51: #include <asm/pmac_pfunc.h>",
          "53: #include \"pmac.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "52: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "826:  mdelay(1);",
          "831:  local_irq_restore(flags);",
          "832:  if (ppc_md.progress) ppc_md.progress(\"smp_core99_kick_cpu done\", 0x347);",
          "",
          "[Removed Lines]",
          "829:  patch_instruction(vector, save_vector);",
          "",
          "[Added Lines]",
          "830:  patch_instruction(vector, ppc_inst(save_vector));",
          "",
          "---------------"
        ],
        "arch/powerpc/xmon/xmon.c||arch/powerpc/xmon/xmon.c": [
          "File: arch/powerpc/xmon/xmon.c -> arch/powerpc/xmon/xmon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #include <asm/firmware.h>",
          "55: #include <asm/code-patching.h>",
          "56: #include <asm/sections.h>",
          "58: #ifdef CONFIG_PPC64",
          "59: #include <asm/hvcall.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #include <asm/inst.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "946:   if ((bp->enabled & (BP_TRAP|BP_CIABR)) != BP_TRAP)",
          "947:    continue;",
          "948:   if (mread(bp->address, &instr, 4) == 4",
          "950:       && patch_instruction(",
          "951:    (unsigned int *)bp->address, bp->instr[0]) != 0)",
          "952:    printf(\"Couldn't remove breakpoint at %lx\\n\",",
          "",
          "[Removed Lines]",
          "949:       && instr == bpinstr",
          "",
          "[Added Lines]",
          "950:       && instr == ppc_inst(bpinstr)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2847: {",
          "2848:  int nr, dotted;",
          "2849:  unsigned long first_adr;",
          "2851:  unsigned char val[4];",
          "2853:  dotted = 0;",
          "",
          "[Removed Lines]",
          "2850:  unsigned int inst, last_inst = 0;",
          "",
          "[Added Lines]",
          "2851:  unsigned int inst, last_inst = ppc_inst(0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2860:    }",
          "2861:    break;",
          "2862:   }",
          "2864:   if (adr > first_adr && inst == last_inst) {",
          "2865:    if (!dotted) {",
          "2866:     printf(\" ...\\n\");",
          "",
          "[Removed Lines]",
          "2863:   inst = GETWORD(val);",
          "",
          "[Added Lines]",
          "2864:   inst = ppc_inst(GETWORD(val));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0036549a9d9a060fa8bc24e31f85503ce08ad5e",
      "candidate_info": {
        "commit_hash": "c0036549a9d9a060fa8bc24e31f85503ce08ad5e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c0036549a9d9a060fa8bc24e31f85503ce08ad5e",
        "files": [
          "arch/powerpc/kernel/security.c"
        ],
        "message": "powerpc/security: split branch cache flush toggle from code patching\n\nBranch cache flushing code patching has inter-dependencies on both the\nlink stack and the count cache flushing state.\n\nTo make the code clearer and to separate the link stack and count\ncache handling, split the \"toggle\" (setting up variables and printing\nenable/disable) from the code patching.\n\nSigned-off-by: Nicholas Piggin <npiggin@gmail.com>\n[mpe: Always print something, even if the flush is disabled]\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20200609070610.846703-5-npiggin@gmail.com",
        "before_after_code_files": [
          "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ],
          "candidate": [
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c": [
          "File: arch/powerpc/kernel/security.c -> arch/powerpc/kernel/security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "427: device_initcall(stf_barrier_debugfs_init);",
          "431: {",
          "445: #ifdef CONFIG_KVM_BOOK3S_HV_POSSIBLE",
          "446:   patch_instruction_site(&patch__call_kvm_flush_link_stack,",
          "447:            ppc_inst(PPC_INST_NOP));",
          "453:  }",
          "463: #endif",
          "474:  }",
          "480:  }",
          "485: }",
          "487: void setup_count_cache_flush(void)",
          "",
          "[Removed Lines]",
          "430: static void no_count_cache_flush(void)",
          "432:  count_cache_flush_type = BRANCH_CACHE_FLUSH_NONE;",
          "433:  pr_info(\"count-cache-flush: flush disabled.\\n\");",
          "434: }",
          "436: static void toggle_branch_cache_flush(bool enable)",
          "437: {",
          "438:  if (!security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE) &&",
          "439:      !security_ftr_enabled(SEC_FTR_FLUSH_LINK_STACK))",
          "440:   enable = false;",
          "442:  if (!enable) {",
          "443:   patch_instruction_site(&patch__call_flush_branch_caches,",
          "444:            ppc_inst(PPC_INST_NOP));",
          "448: #endif",
          "449:   pr_info(\"link-stack-flush: flush disabled.\\n\");",
          "450:   link_stack_flush_type = BRANCH_CACHE_FLUSH_NONE;",
          "451:   no_count_cache_flush();",
          "452:   return;",
          "456:  patch_branch_site(&patch__call_flush_branch_caches,",
          "457:      (u64)&flush_branch_caches, BRANCH_SET_LINK);",
          "459: #ifdef CONFIG_KVM_BOOK3S_HV_POSSIBLE",
          "461:  patch_branch_site(&patch__call_kvm_flush_link_stack,",
          "462:      (u64)&kvm_flush_link_stack, BRANCH_SET_LINK);",
          "465:  pr_info(\"link-stack-flush: software flush enabled.\\n\");",
          "466:  link_stack_flush_type = BRANCH_CACHE_FLUSH_SW;",
          "469:  if (!security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE)) {",
          "470:   patch_instruction_site(&patch__flush_link_stack_return,",
          "471:            ppc_inst(PPC_INST_BLR));",
          "472:   no_count_cache_flush();",
          "473:   return;",
          "476:  if (!security_ftr_enabled(SEC_FTR_BCCTR_FLUSH_ASSIST)) {",
          "477:   count_cache_flush_type = BRANCH_CACHE_FLUSH_SW;",
          "478:   pr_info(\"count-cache-flush: software flush enabled.\\n\");",
          "479:   return;",
          "482:  patch_instruction_site(&patch__flush_count_cache_return, ppc_inst(PPC_INST_BLR));",
          "483:  count_cache_flush_type = BRANCH_CACHE_FLUSH_HW;",
          "484:  pr_info(\"count-cache-flush: hardware flush enabled.\\n\");",
          "",
          "[Added Lines]",
          "430: static void update_branch_cache_flush(void)",
          "434:  if (link_stack_flush_type == BRANCH_CACHE_FLUSH_NONE) {",
          "437:  } else {",
          "438:   patch_branch_site(&patch__call_kvm_flush_link_stack,",
          "439:       (u64)&kvm_flush_link_stack, BRANCH_SET_LINK);",
          "444:  if (count_cache_flush_type == BRANCH_CACHE_FLUSH_NONE &&",
          "445:      link_stack_flush_type == BRANCH_CACHE_FLUSH_NONE) {",
          "446:   patch_instruction_site(&patch__call_flush_branch_caches,",
          "447:            ppc_inst(PPC_INST_NOP));",
          "448:  } else {",
          "449:   patch_branch_site(&patch__call_flush_branch_caches,",
          "450:       (u64)&flush_branch_caches, BRANCH_SET_LINK);",
          "453:   if (count_cache_flush_type == BRANCH_CACHE_FLUSH_NONE) {",
          "454:    patch_instruction_site(&patch__flush_link_stack_return,",
          "455:             ppc_inst(PPC_INST_BLR));",
          "458:   } else if (count_cache_flush_type == BRANCH_CACHE_FLUSH_HW) {",
          "459:    patch_instruction_site(&patch__flush_count_cache_return,",
          "460:             ppc_inst(PPC_INST_BLR));",
          "461:   }",
          "462:  }",
          "463: }",
          "465: static void toggle_branch_cache_flush(bool enable)",
          "466: {",
          "467:  if (!enable || !security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE)) {",
          "468:   if (count_cache_flush_type != BRANCH_CACHE_FLUSH_NONE)",
          "469:    count_cache_flush_type = BRANCH_CACHE_FLUSH_NONE;",
          "471:   pr_info(\"count-cache-flush: flush disabled.\\n\");",
          "472:  } else {",
          "473:   if (security_ftr_enabled(SEC_FTR_BCCTR_FLUSH_ASSIST)) {",
          "474:    count_cache_flush_type = BRANCH_CACHE_FLUSH_HW;",
          "475:    pr_info(\"count-cache-flush: hardware flush enabled.\\n\");",
          "476:   } else {",
          "477:    count_cache_flush_type = BRANCH_CACHE_FLUSH_SW;",
          "478:    pr_info(\"count-cache-flush: software flush enabled.\\n\");",
          "479:   }",
          "482:  if (!enable || !security_ftr_enabled(SEC_FTR_FLUSH_LINK_STACK)) {",
          "483:   if (link_stack_flush_type != BRANCH_CACHE_FLUSH_NONE)",
          "484:    link_stack_flush_type = BRANCH_CACHE_FLUSH_NONE;",
          "486:   pr_info(\"link-stack-flush: flush disabled.\\n\");",
          "487:  } else {",
          "488:   link_stack_flush_type = BRANCH_CACHE_FLUSH_SW;",
          "489:   pr_info(\"link-stack-flush: software flush enabled.\\n\");",
          "492:  update_branch_cache_flush();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1afe00c74ffe6d502bffa81c7d849cb4640d7ae5",
      "candidate_info": {
        "commit_hash": "1afe00c74ffe6d502bffa81c7d849cb4640d7ae5",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1afe00c74ffe6d502bffa81c7d849cb4640d7ae5",
        "files": [
          "arch/powerpc/kernel/security.c"
        ],
        "message": "powerpc/security: make display of branch cache flush more consistent\n\nMake the count-cache and link-stack messages look the same\n\nSigned-off-by: Nicholas Piggin <npiggin@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20200609070610.846703-4-npiggin@gmail.com",
        "before_after_code_files": [
          "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ],
          "candidate": [
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c": [
          "File: arch/powerpc/kernel/security.c -> arch/powerpc/kernel/security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "430: static void no_count_cache_flush(void)",
          "431: {",
          "432:  count_cache_flush_type = BRANCH_CACHE_FLUSH_NONE;",
          "434: }",
          "436: static void toggle_branch_cache_flush(bool enable)",
          "",
          "[Removed Lines]",
          "433:  pr_info(\"count-cache-flush: software flush disabled.\\n\");",
          "",
          "[Added Lines]",
          "433:  pr_info(\"count-cache-flush: flush disabled.\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "446:   patch_instruction_site(&patch__call_kvm_flush_link_stack,",
          "447:            ppc_inst(PPC_INST_NOP));",
          "448: #endif",
          "450:   link_stack_flush_type = BRANCH_CACHE_FLUSH_NONE;",
          "451:   no_count_cache_flush();",
          "452:   return;",
          "",
          "[Removed Lines]",
          "449:   pr_info(\"link-stack-flush: software flush disabled.\\n\");",
          "",
          "[Added Lines]",
          "449:   pr_info(\"link-stack-flush: flush disabled.\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "476:  if (!security_ftr_enabled(SEC_FTR_BCCTR_FLUSH_ASSIST)) {",
          "477:   count_cache_flush_type = BRANCH_CACHE_FLUSH_SW;",
          "479:   return;",
          "480:  }",
          "482:  patch_instruction_site(&patch__flush_count_cache_return, ppc_inst(PPC_INST_BLR));",
          "483:  count_cache_flush_type = BRANCH_CACHE_FLUSH_HW;",
          "485: }",
          "487: void setup_count_cache_flush(void)",
          "",
          "[Removed Lines]",
          "478:   pr_info(\"count-cache-flush: full software flush sequence enabled.\\n\");",
          "484:  pr_info(\"count-cache-flush: hardware assisted flush sequence enabled\\n\");",
          "",
          "[Added Lines]",
          "478:   pr_info(\"count-cache-flush: software flush enabled.\\n\");",
          "484:  pr_info(\"count-cache-flush: hardware flush enabled.\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1026798c644bfd3115fc4e32fd5e767cfc30ccf1",
      "candidate_info": {
        "commit_hash": "1026798c644bfd3115fc4e32fd5e767cfc30ccf1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1026798c644bfd3115fc4e32fd5e767cfc30ccf1",
        "files": [
          "arch/powerpc/include/asm/asm-prototypes.h",
          "arch/powerpc/kernel/entry_64.S",
          "arch/powerpc/kernel/security.c"
        ],
        "message": "powerpc/security: re-name count cache flush to branch cache flush\n\nThe count cache flush mostly refers to both count cache and link stack\nflushing. As a first step to untangling these a bit, re-name the bits\nthat apply to both.\n\nSigned-off-by: Nicholas Piggin <npiggin@gmail.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>\nLink: https://lore.kernel.org/r/20200609070610.846703-2-npiggin@gmail.com",
        "before_after_code_files": [
          "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h",
          "arch/powerpc/kernel/entry_64.S||arch/powerpc/kernel/entry_64.S",
          "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h",
            "arch/powerpc/kernel/entry_64.S||arch/powerpc/kernel/entry_64.S",
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ],
          "candidate": [
            "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h",
            "arch/powerpc/kernel/entry_64.S||arch/powerpc/kernel/entry_64.S",
            "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/powerpc/include/asm/asm-prototypes.h||arch/powerpc/include/asm/asm-prototypes.h": [
          "File: arch/powerpc/include/asm/asm-prototypes.h -> arch/powerpc/include/asm/asm-prototypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "144: void _kvmppc_save_tm_pr(struct kvm_vcpu *vcpu, u64 guest_msr);",
          "148: extern s32 patch__flush_count_cache_return;",
          "149: extern s32 patch__flush_link_stack_return;",
          "150: extern s32 patch__call_kvm_flush_link_stack;",
          "151: extern s32 patch__memset_nocache, patch__memcpy_nocache;",
          "154: extern long kvm_flush_link_stack;",
          "156: #ifdef CONFIG_PPC_TRANSACTIONAL_MEM",
          "",
          "[Removed Lines]",
          "147: extern s32 patch__call_flush_count_cache;",
          "153: extern long flush_count_cache;",
          "",
          "[Added Lines]",
          "147: extern s32 patch__call_flush_branch_caches;",
          "153: extern long flush_branch_caches;",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/entry_64.S||arch/powerpc/kernel/entry_64.S": [
          "File: arch/powerpc/kernel/entry_64.S -> arch/powerpc/kernel/entry_64.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "260: #define FLUSH_COUNT_CACHE \\",
          "261: 1: nop;   \\",
          "265: #define BCCTR_FLUSH .long 0x4c400420",
          "",
          "[Removed Lines]",
          "262:  patch_site 1b, patch__call_flush_count_cache",
          "",
          "[Added Lines]",
          "262:  patch_site 1b, patch__call_flush_branch_caches",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "271: .endm",
          "273: .balign 32",
          "277:  mflr r9",
          "",
          "[Removed Lines]",
          "274: .global flush_count_cache",
          "275: flush_count_cache:",
          "",
          "[Added Lines]",
          "273: .global flush_branch_caches",
          "274: flush_branch_caches:",
          "",
          "---------------"
        ],
        "arch/powerpc/kernel/security.c||arch/powerpc/kernel/security.c": [
          "File: arch/powerpc/kernel/security.c -> arch/powerpc/kernel/security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: u64 powerpc_security_features __read_mostly = SEC_FTR_DEFAULT;",
          "28: };",
          "30: static bool link_stack_flush_enabled;",
          "32: bool barrier_nospec_enabled;",
          "",
          "[Removed Lines]",
          "24: enum count_cache_flush_type {",
          "25:  COUNT_CACHE_FLUSH_NONE = 0x1,",
          "26:  COUNT_CACHE_FLUSH_SW = 0x2,",
          "27:  COUNT_CACHE_FLUSH_HW = 0x4,",
          "29: static enum count_cache_flush_type count_cache_flush_type = COUNT_CACHE_FLUSH_NONE;",
          "",
          "[Added Lines]",
          "24: enum branch_cache_flush_type {",
          "25:  BRANCH_CACHE_FLUSH_NONE = 0x1,",
          "26:  BRANCH_CACHE_FLUSH_SW = 0x2,",
          "27:  BRANCH_CACHE_FLUSH_HW = 0x4,",
          "29: static enum branch_cache_flush_type count_cache_flush_type = BRANCH_CACHE_FLUSH_NONE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "222:   if (link_stack_flush_enabled)",
          "223:    seq_buf_printf(&s, \", Software link stack flush\");",
          "226:   seq_buf_printf(&s, \"Mitigation: Software count cache flush\");",
          "229:    seq_buf_printf(&s, \" (hardware accelerated)\");",
          "231:   if (link_stack_flush_enabled)",
          "",
          "[Removed Lines]",
          "225:  } else if (count_cache_flush_type != COUNT_CACHE_FLUSH_NONE) {",
          "228:   if (count_cache_flush_type == COUNT_CACHE_FLUSH_HW)",
          "",
          "[Added Lines]",
          "225:  } else if (count_cache_flush_type != BRANCH_CACHE_FLUSH_NONE) {",
          "228:   if (count_cache_flush_type == BRANCH_CACHE_FLUSH_HW)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "430: static void no_count_cache_flush(void)",
          "431: {",
          "433:  pr_info(\"count-cache-flush: software flush disabled.\\n\");",
          "434: }",
          "437: {",
          "438:  if (!security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE) &&",
          "439:      !security_ftr_enabled(SEC_FTR_FLUSH_LINK_STACK))",
          "440:   enable = false;",
          "442:  if (!enable) {",
          "444:            ppc_inst(PPC_INST_NOP));",
          "445: #ifdef CONFIG_KVM_BOOK3S_HV_POSSIBLE",
          "446:   patch_instruction_site(&patch__call_kvm_flush_link_stack,",
          "",
          "[Removed Lines]",
          "432:  count_cache_flush_type = COUNT_CACHE_FLUSH_NONE;",
          "436: static void toggle_count_cache_flush(bool enable)",
          "443:   patch_instruction_site(&patch__call_flush_count_cache,",
          "",
          "[Added Lines]",
          "432:  count_cache_flush_type = BRANCH_CACHE_FLUSH_NONE;",
          "436: static void toggle_branch_cache_flush(bool enable)",
          "443:   patch_instruction_site(&patch__call_flush_branch_caches,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452:   return;",
          "453:  }",
          "459: #ifdef CONFIG_KVM_BOOK3S_HV_POSSIBLE",
          "",
          "[Removed Lines]",
          "456:  patch_branch_site(&patch__call_flush_count_cache,",
          "457:      (u64)&flush_count_cache, BRANCH_SET_LINK);",
          "",
          "[Added Lines]",
          "456:  patch_branch_site(&patch__call_flush_branch_caches,",
          "457:      (u64)&flush_branch_caches, BRANCH_SET_LINK);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "474:  }",
          "476:  if (!security_ftr_enabled(SEC_FTR_BCCTR_FLUSH_ASSIST)) {",
          "478:   pr_info(\"count-cache-flush: full software flush sequence enabled.\\n\");",
          "479:   return;",
          "480:  }",
          "482:  patch_instruction_site(&patch__flush_count_cache_return, ppc_inst(PPC_INST_BLR));",
          "484:  pr_info(\"count-cache-flush: hardware assisted flush sequence enabled\\n\");",
          "485: }",
          "",
          "[Removed Lines]",
          "477:   count_cache_flush_type = COUNT_CACHE_FLUSH_SW;",
          "483:  count_cache_flush_type = COUNT_CACHE_FLUSH_HW;",
          "",
          "[Added Lines]",
          "477:   count_cache_flush_type = BRANCH_CACHE_FLUSH_SW;",
          "483:  count_cache_flush_type = BRANCH_CACHE_FLUSH_HW;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "505:      security_ftr_enabled(SEC_FTR_FLUSH_COUNT_CACHE))",
          "506:   security_ftr_set(SEC_FTR_FLUSH_LINK_STACK);",
          "509: }",
          "511: #ifdef CONFIG_DEBUG_FS",
          "",
          "[Removed Lines]",
          "508:  toggle_count_cache_flush(enable);",
          "",
          "[Added Lines]",
          "508:  toggle_branch_cache_flush(enable);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "520:  else",
          "521:   return -EINVAL;",
          "525:  return 0;",
          "526: }",
          "528: static int count_cache_flush_get(void *data, u64 *val)",
          "529: {",
          "532:  else",
          "",
          "[Removed Lines]",
          "523:  toggle_count_cache_flush(enable);",
          "530:  if (count_cache_flush_type == COUNT_CACHE_FLUSH_NONE)",
          "",
          "[Added Lines]",
          "523:  toggle_branch_cache_flush(enable);",
          "530:  if (count_cache_flush_type == BRANCH_CACHE_FLUSH_NONE)",
          "",
          "---------------"
        ]
      }
    }
  ]
}