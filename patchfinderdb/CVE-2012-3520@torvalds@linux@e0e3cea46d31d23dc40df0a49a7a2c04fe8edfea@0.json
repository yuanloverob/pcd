{
  "cve_id": "CVE-2012-3520",
  "cve_desc": "The Netlink implementation in the Linux kernel before 3.2.30 does not properly handle messages that lack SCM_CREDENTIALS data, which might allow local users to spoof Netlink communication via a crafted message, as demonstrated by a message to (1) Avahi or (2) NetworkManager.",
  "repo": "torvalds/linux",
  "patch_hash": "e0e3cea46d31d23dc40df0a49a7a2c04fe8edfea",
  "patch_info": {
    "commit_hash": "e0e3cea46d31d23dc40df0a49a7a2c04fe8edfea",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/e0e3cea46d31d23dc40df0a49a7a2c04fe8edfea",
    "files": [
      "include/net/scm.h",
      "net/netlink/af_netlink.c",
      "net/unix/af_unix.c"
    ],
    "message": "af_netlink: force credentials passing [CVE-2012-3520]\n\nPablo Neira Ayuso discovered that avahi and\npotentially NetworkManager accept spoofed Netlink messages because of a\nkernel bug.  The kernel passes all-zero SCM_CREDENTIALS ancillary data\nto the receiver if the sender did not provide such data, instead of not\nincluding any such data at all or including the correct data from the\npeer (as it is the case with AF_UNIX).\n\nThis bug was introduced in commit 16e572626961\n(af_unix: dont send SCM_CREDENTIALS by default)\n\nThis patch forces passing credentials for netlink, as\nbefore the regression.\n\nAnother fix would be to not add SCM_CREDENTIALS in\nnetlink messages if not provided by the sender, but it\nmight break some programs.\n\nWith help from Florian Weimer & Petr Matousek\n\nThis issue is designated as CVE-2012-3520\n\nSigned-off-by: Eric Dumazet <edumazet@google.com>\nCc: Petr Matousek <pmatouse@redhat.com>\nCc: Florian Weimer <fweimer@redhat.com>\nCc: Pablo Neira Ayuso <pablo@netfilter.org>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "include/net/scm.h||include/net/scm.h",
      "net/netlink/af_netlink.c||net/netlink/af_netlink.c",
      "net/unix/af_unix.c||net/unix/af_unix.c"
    ]
  },
  "patch_diff": {
    "include/net/scm.h||include/net/scm.h": [
      "File: include/net/scm.h -> include/net/scm.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "70: }",
      "72: static __inline__ int scm_send(struct socket *sock, struct msghdr *msg,",
      "74: {",
      "75:  memset(scm, 0, sizeof(*scm));",
      "76:  unix_get_peersec_dgram(sock, scm);",
      "77:  if (msg->msg_controllen <= 0)",
      "78:   return 0;",
      "",
      "[Removed Lines]",
      "73:           struct scm_cookie *scm)",
      "",
      "[Added Lines]",
      "73:           struct scm_cookie *scm, bool forcecreds)",
      "76:  if (forcecreds)",
      "77:   scm_set_cred(scm, task_tgid(current), current_cred());",
      "",
      "---------------"
    ],
    "net/netlink/af_netlink.c||net/netlink/af_netlink.c": [
      "File: net/netlink/af_netlink.c -> net/netlink/af_netlink.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1362:  if (NULL == siocb->scm)",
      "1363:   siocb->scm = &scm;",
      "1366:  if (err < 0)",
      "1367:   return err;",
      "",
      "[Removed Lines]",
      "1365:  err = scm_send(sock, msg, siocb->scm);",
      "",
      "[Added Lines]",
      "1365:  err = scm_send(sock, msg, siocb->scm, true);",
      "",
      "---------------"
    ],
    "net/unix/af_unix.c||net/unix/af_unix.c": [
      "File: net/unix/af_unix.c -> net/unix/af_unix.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1450:  if (NULL == siocb->scm)",
      "1451:   siocb->scm = &tmp_scm;",
      "1452:  wait_for_unix_gc();",
      "1454:  if (err < 0)",
      "1455:   return err;",
      "",
      "[Removed Lines]",
      "1453:  err = scm_send(sock, msg, siocb->scm);",
      "",
      "[Added Lines]",
      "1453:  err = scm_send(sock, msg, siocb->scm, false);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1619:  if (NULL == siocb->scm)",
      "1620:   siocb->scm = &tmp_scm;",
      "1621:  wait_for_unix_gc();",
      "1623:  if (err < 0)",
      "1624:   return err;",
      "",
      "[Removed Lines]",
      "1622:  err = scm_send(sock, msg, siocb->scm);",
      "",
      "[Added Lines]",
      "1622:  err = scm_send(sock, msg, siocb->scm, false);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b0ee8c036ecb3ac92e18e6ca0dca7bff88beaf0",
      "candidate_info": {
        "commit_hash": "6b0ee8c036ecb3ac92e18e6ca0dca7bff88beaf0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6b0ee8c036ecb3ac92e18e6ca0dca7bff88beaf0",
        "files": [
          "include/net/af_unix.h",
          "include/net/scm.h",
          "net/core/scm.c",
          "net/unix/af_unix.c"
        ],
        "message": "scm: Stop passing struct cred\n\nNow that uids and gids are completely encapsulated in kuid_t\nand kgid_t we no longer need to pass struct cred which allowed\nus to test both the uid and the user namespace for equality.\n\nPassing struct cred potentially allows us to pass the entire group\nlist as BSD does but I don't believe the cost of cache line misses\njustifies retaining code for a future potential application.\n\nSigned-off-by: \"Eric W. Biederman\" <ebiederm@xmission.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/af_unix.h||include/net/af_unix.h",
          "include/net/scm.h||include/net/scm.h",
          "net/core/scm.c||net/core/scm.c",
          "net/unix/af_unix.c||net/unix/af_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/net/scm.h||include/net/scm.h",
            "net/unix/af_unix.c||net/unix/af_unix.c"
          ],
          "candidate": [
            "include/net/scm.h||include/net/scm.h",
            "net/unix/af_unix.c||net/unix/af_unix.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/af_unix.h||include/net/af_unix.h": [
          "File: include/net/af_unix.h -> include/net/af_unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: struct unix_skb_parms {",
          "34: #ifdef CONFIG_SECURITY_NETWORK",
          "",
          "[Removed Lines]",
          "32:  const struct cred *cred;",
          "",
          "[Added Lines]",
          "32:  kuid_t   uid;",
          "33:  kgid_t   gid;",
          "",
          "---------------"
        ],
        "include/net/scm.h||include/net/scm.h": [
          "File: include/net/scm.h -> include/net/scm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: struct scm_cookie {",
          "32: #ifdef CONFIG_SECURITY_NETWORK",
          "",
          "[Removed Lines]",
          "29:  const struct cred *cred;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53: static __inline__ void scm_set_cred(struct scm_cookie *scm,",
          "55: {",
          "56:  scm->pid  = get_pid(pid);",
          "58:  scm->creds.pid = pid_vnr(pid);",
          "61: }",
          "63: static __inline__ void scm_destroy_cred(struct scm_cookie *scm)",
          "64: {",
          "65:  put_pid(scm->pid);",
          "66:  scm->pid  = NULL;",
          "71: }",
          "73: static __inline__ void scm_destroy(struct scm_cookie *scm)",
          "",
          "[Removed Lines]",
          "54:         struct pid *pid, const struct cred *cred)",
          "57:  scm->cred = cred ? get_cred(cred) : NULL;",
          "59:  scm->creds.uid = cred ? cred->euid : INVALID_UID;",
          "60:  scm->creds.gid = cred ? cred->egid : INVALID_GID;",
          "68:  if (scm->cred)",
          "69:   put_cred(scm->cred);",
          "70:  scm->cred = NULL;",
          "",
          "[Added Lines]",
          "53:         struct pid *pid, kuid_t uid, kgid_t gid)",
          "57:  scm->creds.uid = uid;",
          "58:  scm->creds.gid = gid;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "81:           struct scm_cookie *scm, bool forcecreds)",
          "82: {",
          "83:  memset(scm, 0, sizeof(*scm));",
          "84:  if (forcecreds)",
          "86:  unix_get_peersec_dgram(sock, scm);",
          "87:  if (msg->msg_controllen <= 0)",
          "88:   return 0;",
          "",
          "[Removed Lines]",
          "85:   scm_set_cred(scm, task_tgid(current), current_cred());",
          "",
          "[Added Lines]",
          "78:  scm->creds.uid = INVALID_UID;",
          "79:  scm->creds.gid = INVALID_GID;",
          "81:   scm_set_cred(scm, task_tgid(current), current_euid(), current_egid());",
          "",
          "---------------"
        ],
        "net/core/scm.c||net/core/scm.c": [
          "File: net/core/scm.c -> net/core/scm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188:    p->creds.uid = uid;",
          "189:    p->creds.gid = gid;",
          "206:    break;",
          "207:   }",
          "208:   default:",
          "",
          "[Removed Lines]",
          "191:    if (!p->cred ||",
          "192:        !uid_eq(p->cred->euid, uid) ||",
          "193:        !gid_eq(p->cred->egid, gid)) {",
          "194:     struct cred *cred;",
          "195:     err = -ENOMEM;",
          "196:     cred = prepare_creds();",
          "197:     if (!cred)",
          "198:      goto error;",
          "200:     cred->uid = cred->euid = uid;",
          "201:     cred->gid = cred->egid = gid;",
          "202:     if (p->cred)",
          "203:      put_cred(p->cred);",
          "204:     p->cred = cred;",
          "205:    }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/unix/af_unix.c||net/unix/af_unix.c": [
          "File: net/unix/af_unix.c -> net/unix/af_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1340:  struct scm_cookie scm;",
          "1341:  memset(&scm, 0, sizeof(scm));",
          "1342:  scm.pid  = UNIXCB(skb).pid;",
          "1344:  if (UNIXCB(skb).fp)",
          "1345:   unix_detach_fds(&scm, skb);",
          "",
          "[Removed Lines]",
          "1343:  scm.cred = UNIXCB(skb).cred;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1391:  int err = 0;",
          "1393:  UNIXCB(skb).pid  = get_pid(scm->pid);",
          "1396:  UNIXCB(skb).fp = NULL;",
          "1397:  if (scm->fp && send_fds)",
          "1398:   err = unix_attach_fds(scm, skb);",
          "",
          "[Removed Lines]",
          "1394:  if (scm->cred)",
          "1395:   UNIXCB(skb).cred = get_cred(scm->cred);",
          "",
          "[Added Lines]",
          "1393:  UNIXCB(skb).uid = scm->creds.uid;",
          "1394:  UNIXCB(skb).gid = scm->creds.gid;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1409: static void maybe_add_creds(struct sk_buff *skb, const struct socket *sock,",
          "1410:        const struct sock *other)",
          "1411: {",
          "1413:   return;",
          "1414:  if (test_bit(SOCK_PASSCRED, &sock->flags) ||",
          "1415:      !other->sk_socket ||",
          "1416:      test_bit(SOCK_PASSCRED, &other->sk_socket->flags)) {",
          "1417:   UNIXCB(skb).pid  = get_pid(task_tgid(current));",
          "1419:  }",
          "1420: }",
          "",
          "[Removed Lines]",
          "1412:  if (UNIXCB(skb).cred)",
          "1418:   UNIXCB(skb).cred = get_current_cred();",
          "",
          "[Added Lines]",
          "1411:  if (UNIXCB(skb).pid)",
          "1417:   current_euid_egid(&UNIXCB(skb).uid, &UNIXCB(skb).gid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1819:   siocb->scm = &tmp_scm;",
          "1820:   memset(&tmp_scm, 0, sizeof(tmp_scm));",
          "1821:  }",
          "1823:  unix_set_secdata(siocb->scm, skb);",
          "1825:  if (!(flags & MSG_PEEK)) {",
          "",
          "[Removed Lines]",
          "1822:  scm_set_cred(siocb->scm, UNIXCB(skb).pid, UNIXCB(skb).cred);",
          "",
          "[Added Lines]",
          "1821:  scm_set_cred(siocb->scm, UNIXCB(skb).pid, UNIXCB(skb).uid, UNIXCB(skb).gid);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1991:   if (check_creds) {",
          "1993:    if ((UNIXCB(skb).pid  != siocb->scm->pid) ||",
          "1995:     break;",
          "1996:   } else if (test_bit(SOCK_PASSCRED, &sock->flags)) {",
          "1999:    check_creds = 1;",
          "2000:   }",
          "",
          "[Removed Lines]",
          "1994:        (UNIXCB(skb).cred != siocb->scm->cred))",
          "1998:    scm_set_cred(siocb->scm, UNIXCB(skb).pid, UNIXCB(skb).cred);",
          "",
          "[Added Lines]",
          "1993:        !uid_eq(UNIXCB(skb).uid, siocb->scm->creds.uid) ||",
          "1994:        !gid_eq(UNIXCB(skb).gid, siocb->scm->creds.gid))",
          "1998:    scm_set_cred(siocb->scm, UNIXCB(skb).pid, UNIXCB(skb).uid, UNIXCB(skb).gid);",
          "",
          "---------------"
        ]
      }
    }
  ]
}