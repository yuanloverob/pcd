{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "dfe3b583159900285febfeb141b6e75c3fa1411e",
      "candidate_info": {
        "commit_hash": "dfe3b583159900285febfeb141b6e75c3fa1411e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dfe3b583159900285febfeb141b6e75c3fa1411e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix a typo in a comment used to generate documentation.  No functional changes.\n\nFossilOrigin-Name: ccc4f7424bc8f37c168333091dd9e3d6f80ccff9e2b06f182df65be59a7e3349",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0888fc2e881d56ccd5222383d1a08cdf16fbd15c40da7ebfc14346be69ffb26a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c"
        ]
      }
    },
    {
      "candidate_hash": "7525b87b6c579dce72c34029863c9b4ede832a83",
      "candidate_info": {
        "commit_hash": "7525b87b6c579dce72c34029863c9b4ede832a83",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7525b87b6c579dce72c34029863c9b4ede832a83",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/indexexpr2.test"
        ],
        "message": "Posible fix for [d96eba87].\n\nFossilOrigin-Name: 89a25abfcd069aebdf817890e5c27f46de3000fb858ae01029e4528f9d677567",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/indexexpr2.test||test/indexexpr2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc42dd15100db28a9796254f69a4e367ea5eae29f546be055017cf3e12aa66ba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "779:     for(j=0; j<2 && !okToChngToIN; j++){",
          "780:       pOrTerm = pOrWc->a;",
          "781:       for(i=pOrWc->nTerm-1; i>=0; i--, pOrTerm++){",
          "782:         assert( pOrTerm->eOperator & WO_EQ );",
          "783:         pOrTerm->wtFlags &= ~TERM_OR_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:       Expr *pLeft = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "800:         }",
          "801:         iColumn = pOrTerm->u.leftColumn;",
          "802:         iCursor = pOrTerm->leftCursor;",
          "803:         break;",
          "804:       }",
          "805:       if( i<0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804:         pLeft = pOrTerm->pExpr->pLeft;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:         assert( pOrTerm->eOperator & WO_EQ );",
          "820:         if( pOrTerm->leftCursor!=iCursor ){",
          "821:           pOrTerm->wtFlags &= ~TERM_OR_OK;",
          "823:           okToChngToIN = 0;",
          "824:         }else{",
          "825:           int affLeft, affRight;",
          "",
          "[Removed Lines]",
          "822:         }else if( pOrTerm->u.leftColumn!=iColumn ){",
          "",
          "[Added Lines]",
          "824:         }else if( pOrTerm->u.leftColumn!=iColumn || (iColumn==XN_EXPR",
          "825:                && sqlite3ExprCompare(pParse, pOrTerm->pExpr->pLeft, pLeft, -1)",
          "826:         )){",
          "",
          "---------------"
        ],
        "test/indexexpr2.test||test/indexexpr2.test": [
          "File: test/indexexpr2.test -> test/indexexpr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:   } {t2 t2abc t2cd t2def}",
          "232: }",
          "235: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234: #-------------------------------------------------------------------------",
          "235: # Test that ticket [d96eba87] has been fixed.",
          "236: #",
          "237: do_execsql_test 5.0 {",
          "238:   CREATE TABLE t5(a INTEGER, b INTEGER);",
          "239:   INSERT INTO t5 VALUES(2, 4), (3, 9);",
          "240: }",
          "241: do_execsql_test 5.1 {",
          "242:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "243: } {2 4 3 9}",
          "244: do_execsql_test 5.2 {",
          "245:   CREATE INDEX t5a ON t5( abs(a) );",
          "246:   CREATE INDEX t5b ON t5( abs(b) );",
          "247: }",
          "248: do_execsql_test 5.4 {",
          "249:   SELECT * FROM t5 WHERE abs(a)=2 or abs(b)=9;",
          "250: } {2 4 3 9}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "451297752c90784f42e5d16b6ccd816fce4a3139",
      "candidate_info": {
        "commit_hash": "451297752c90784f42e5d16b6ccd816fce4a3139",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/451297752c90784f42e5d16b6ccd816fce4a3139",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "manifest",
          "manifest.uuid",
          "test/fts3snippet.test"
        ],
        "message": "Fix problems causing undefined left-shift operations in the fts3 snippet() function.\n\nFossilOrigin-Name: b90dbaed3092236e97f9796fa63989a3648060e16189e1267c430f4a7e799fac",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3snippet.test||test/fts3snippet.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:         int j;",
          "434:         u64 mPhrase = (u64)1 << i;",
          "435:         u64 mPos = (u64)1 << (iCsr - iStart);",
          "437:         if( (mCover|mCovered)&mPhrase ){",
          "438:           iScore++;",
          "439:         }else{",
          "",
          "[Removed Lines]",
          "436:         assert( iCsr>=iStart );",
          "",
          "[Added Lines]",
          "436:         assert( iCsr>=iStart && (iCsr - iStart)<=64 );",
          "437:         assert( i>=0 && i<=64 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "661:     for(nLeft=0; !(hlmask & ((u64)1 << nLeft)); nLeft++);",
          "662:     for(nRight=0; !(hlmask & ((u64)1 << (nSnippet-1-nRight))); nRight++);",
          "663:     nDesired = (nLeft-nRight)/2;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "664:     assert( (nSnippet-1-nRight)<=63 && (nSnippet-1-nRight)>=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1433:     return;",
          "1434:   }",
          "1436:   for(nSnippet=1; 1; nSnippet++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1439:   if( nToken<-64 ) nToken = -64;",
          "1440:   if( nToken>+64 ) nToken = +64;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b352f1590d20a574b0681e011ececcf4f41fa5b157503d330e03939404aca0e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3snippet.test||test/fts3snippet.test": [
          "File: test/fts3snippet.test -> test/fts3snippet.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "555:   }]",
          "556: } {64}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558: do_test 4.3 {",
          "559:   llength [db one {",
          "560:     SELECT snippet(t4, '', '', '', 0, 150) FROM t4 WHERE t4 MATCH 'E'",
          "561:   }]",
          "562: } {64}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e364802321c67602b2522ac4cde1fdeb2ac5d18",
      "candidate_info": {
        "commit_hash": "3e364802321c67602b2522ac4cde1fdeb2ac5d18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e364802321c67602b2522ac4cde1fdeb2ac5d18",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/where.test"
        ],
        "message": "Fix the OP_SeekGE, OP_SeekGT, OP_SeekLE, and OP_SeekLT opcodes so that they preserve the datatype of the value in the register used as the key. Ticket [d9f584e936c7a8d0]\n\nFossilOrigin-Name: 81b9f0f55042777b37de78069f7089041a9ee21dd0a0c86b879053fb46e140b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/where.test||test/where.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d02490a2f0cae047087130b4ad8f55f265845c2ffb3bde3b7d507edb54acea6d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4127:   pC->deferredMoveto = 0;",
          "4128:   pC->cacheStatus = CACHE_STALE;",
          "4129:   if( pC->isTable ){",
          "4131:     assert( sqlite3BtreeCursorHasHint(pC->uc.pCursor, BTREE_SEEK_EQ)==0",
          "4132:               || CORRUPT_DB );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4130:     u16 flags3, newType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4137:     pIn3 = &aMem[pOp->p3];",
          "4139:       applyNumericAffinity(pIn3, 0);",
          "4140:     }",
          "4148:           VdbeBranchTaken(1,2);",
          "4149:           goto jump_to_p2;",
          "4150:         }else{",
          "",
          "[Removed Lines]",
          "4138:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4141:     iKey = sqlite3VdbeIntValue(pIn3);",
          "4145:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4146:       if( (pIn3->flags & MEM_Real)==0 ){",
          "4147:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "[Added Lines]",
          "4139:     flags3 = pIn3->flags;",
          "4140:     if( (flags3 & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4149:     if( (newType & (MEM_Int|MEM_IntReal))==0 ){",
          "4150:       if( (newType & MEM_Real)==0 ){",
          "4151:         if( (newType & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1538:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1539: } {1 {corrupt database}}",
          "1541: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1541: # 2019-08-21 Ticket https://www.sqlite.org/src/info/d9f584e936c7a8d0",
          "1542: #",
          "1543: db close",
          "1544: sqlite3 db :memory:",
          "1545: do_execsql_test where-26.1 {",
          "1546:   CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1 TEXT);",
          "1547:   INSERT INTO t0(c0, c1) VALUES (1, 'a');",
          "1548:   CREATE TABLE t1(c0 INT PRIMARY KEY, c1 TEXT);",
          "1549:   INSERT INTO t1(c0, c1) VALUES (1, 'a');",
          "1550:   SELECT * FROM t0 WHERE '-1' BETWEEN 0 AND t0.c0;",
          "1551: } {1 a}",
          "1552: do_execsql_test where-26.2 {",
          "1553:   SELECT * FROM t1 WHERE '-1' BETWEEN 0 AND t1.c0;",
          "1554: } {1 a}",
          "1555: do_execsql_test where-26.3 {",
          "1556:   SELECT * FROM t0 WHERE '-1'>=0 AND '-1'<=t0.c0;",
          "1557: } {1 a}",
          "1558: do_execsql_test where-26.4 {",
          "1559:   SELECT * FROM t1 WHERE '-1'>=0 AND '-1'<=t1.c0;",
          "1560: } {1 a}",
          "1561: do_execsql_test where-26.5 {",
          "1562:   SELECT '-1' BETWEEN 0 AND t0.c0 FROM t0;",
          "1563: } {1}",
          "1564: do_execsql_test where-26.6 {",
          "1565:   SELECT '-1' BETWEEN 0 AND t1.c0 FROM t1;",
          "1566: } {1}",
          "1567: do_execsql_test where-26.7 {",
          "1568:   SELECT '-1'>=0 AND '-1'<=t0.c0 FROM t0;",
          "1569: } {1}",
          "1570: do_execsql_test where-26.8 {",
          "1571:   SELECT '-1'>=0 AND '-1'<=t1.c0 FROM t1;",
          "1572: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3c161e07afd4805202319f02de3ab903f4413c65",
      "candidate_info": {
        "commit_hash": "3c161e07afd4805202319f02de3ab903f4413c65",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3c161e07afd4805202319f02de3ab903f4413c65",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/os_win.c",
          "test/symlink2.test"
        ],
        "message": "Add support for the SQLITE_ACCESS_SYMLINK flag in the Win32 VFS.\n\nFossilOrigin-Name: 175c15008e9f19b8f6762c2fe4a545735128765081980eed01d5e46ca4acb500",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/os_win.c||src/os_win.c",
          "test/symlink2.test||test/symlink2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 251230cf43c591cf49cf9d2f392581c57d334b791bc3407814d216b5999c32f4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1390:       case SQLITE_CANTOPEN_ISDIR:     zName = \"SQLITE_CANTOPEN_ISDIR\";    break;",
          "1391:       case SQLITE_CANTOPEN_FULLPATH:  zName = \"SQLITE_CANTOPEN_FULLPATH\"; break;",
          "1392:       case SQLITE_CANTOPEN_CONVPATH:  zName = \"SQLITE_CANTOPEN_CONVPATH\"; break;",
          "1393:       case SQLITE_PROTOCOL:           zName = \"SQLITE_PROTOCOL\";          break;",
          "1394:       case SQLITE_EMPTY:              zName = \"SQLITE_EMPTY\";             break;",
          "1395:       case SQLITE_SCHEMA:             zName = \"SQLITE_SCHEMA\";            break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1393:       case SQLITE_CANTOPEN_SYMLINK:   zName = \"SQLITE_CANTOPEN_SYMLINK\";  break;",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "80: #  define NTDDI_WINTHRESHOLD                0x06040000",
          "81: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #ifndef FILE_ATTRIBUTE_REPARSE_POINT",
          "88: #  define FILE_ATTRIBUTE_REPARSE_POINT      0x00000400",
          "89: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5473:              (attr & FILE_ATTRIBUTE_READONLY)==0;",
          "5474:       break;",
          "5475:     case SQLITE_ACCESS_SYMLINK:",
          "5477:       break;",
          "5478:     default:",
          "5479:       assert(!\"Invalid flags argument\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5484:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5485:              (attr & FILE_ATTRIBUTE_REPARSE_POINT)!=0;",
          "",
          "---------------"
        ],
        "test/symlink2.test||test/symlink2.test": [
          "File: test/symlink2.test -> test/symlink2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 November 18",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing that SQLite can follow symbolic links.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix symlink2",
          "19: # This only runs on Windows.",
          "20: if {$::tcl_platform(platform)!=\"windows\"} {",
          "21:   finish_test",
          "22:   return",
          "23: }",
          "25: proc createWin32Symlink { link target } {",
          "26:   exec -- $::env(ComSpec) /c mklink \\",
          "27:       [file nativename $link] [file nativename $target]",
          "28:   return \"\"",
          "29: }",
          "31: proc deleteWin32Symlink { link } {",
          "32:   exec -- $::env(ComSpec) /c del [file nativename $link]",
          "33:   return \"\"",
          "34: }",
          "36: proc canCreateWin32Symlink {} {",
          "37:   set link [file join $::testdir lnk[pid].sym]",
          "38:   if {[file exists $link]} { return 0 }",
          "39:   set target [info nameofexecutable]",
          "40:   if {[catch {createWin32Symlink $link $target}] == 0} {",
          "41:     deleteWin32Symlink $link",
          "42:     return 1",
          "43:   }",
          "44:   return 0",
          "45: }",
          "47: # Creating symlinks may require administrator privileges on Windows.",
          "48: if {![canCreateWin32Symlink]} {",
          "49:   finish_test",
          "50:   return",
          "51: }",
          "53: # Ensure that test.db has been created.",
          "54: #",
          "55: do_execsql_test 1.0 {",
          "56:   CREATE TABLE t1(x, y);",
          "57:   INSERT INTO t1 VALUES(1,9999);",
          "58: }",
          "60: do_test 2.0 {",
          "61:   createWin32Symlink link.db test.db",
          "62: } {}",
          "64: do_test 2.1 {",
          "65:   file exists test.db",
          "66: } {1}",
          "68: do_test 2.2 {",
          "69:   file exists link.db",
          "70: } {1}",
          "72: do_test 3.1 {",
          "73:   execsql { SELECT x, y FROM t1; } db",
          "74: } {1 9999}",
          "76: do_test 3.2 {",
          "77:   sqlite3 db2 link.db",
          "78:   execsql { SELECT x, y FROM t1; } db2",
          "79: } {1 9999}",
          "81: do_test 3.3 {",
          "82:   sqlite3 db3 test.db -nofollow true",
          "83:   execsql { SELECT x, y FROM t1; } db3",
          "84: } {1 9999}",
          "86: do_test 3.4 {",
          "87:   db3 close",
          "88: } {}",
          "90: do_test 3.5 {",
          "91:   list [catch {",
          "92:     sqlite3 db4 link.db -nofollow true",
          "93:     execsql { SELECT x, y FROM t1; } db4",
          "94:   } res] $res",
          "95: } {1 {unable to open database file}}",
          "97: catch {db4 close}",
          "99: do_test 4.0 {",
          "100:   db2 close",
          "101:   deleteWin32Symlink link.db",
          "102: } {}",
          "104: do_test 4.1 {",
          "105:   file exists test.db",
          "106: } {1}",
          "108: do_test 4.2 {",
          "109:   file exists link.db",
          "110: } {0}",
          "112: do_test 5.1 {",
          "113:   execsql { SELECT x, y FROM t1; } db",
          "114: } {1 9999}",
          "116: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}