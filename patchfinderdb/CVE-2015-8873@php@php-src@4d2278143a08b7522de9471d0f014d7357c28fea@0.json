{
  "cve_id": "CVE-2015-8873",
  "cve_desc": "Stack consumption vulnerability in Zend/zend_exceptions.c in PHP before 5.4.44, 5.5.x before 5.5.28, and 5.6.x before 5.6.12 allows remote attackers to cause a denial of service (segmentation fault) via recursive method calls.",
  "repo": "php/php-src",
  "patch_hash": "4d2278143a08b7522de9471d0f014d7357c28fea",
  "patch_info": {
    "commit_hash": "4d2278143a08b7522de9471d0f014d7357c28fea",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/4d2278143a08b7522de9471d0f014d7357c28fea",
    "files": [
      "Zend/zend_exceptions.c",
      "ext/standard/tests/serialize/bug69152.phpt",
      "ext/standard/tests/serialize/bug69793.phpt"
    ],
    "message": "Fix #69793 - limit what we accept when unserializing exception",
    "before_after_code_files": [
      "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
      "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt",
      "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt"
    ]
  },
  "patch_diff": {
    "Zend/zend_exceptions.c||Zend/zend_exceptions.c": [
      "File: Zend/zend_exceptions.c -> Zend/zend_exceptions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "218: }",
      "223: ZEND_METHOD(error_exception, __construct)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223: #define CHECK_EXC_TYPE(name, type) \\",
      "224:  value = zend_read_property(default_exception_ce, object, name, sizeof(name)-1, 0 TSRMLS_CC); \\",
      "225:  if(value && Z_TYPE_P(value) != type) { \\",
      "226:   zval *tmp; \\",
      "227:   MAKE_STD_ZVAL(tmp); \\",
      "228:   ZVAL_STRINGL(tmp, name, sizeof(name)-1, 1); \\",
      "229:   Z_OBJ_HANDLER_P(object, unset_property)(object, tmp, 0 TSRMLS_CC); \\",
      "230:   zval_ptr_dtor(&tmp); \\",
      "231:  }",
      "233: ZEND_METHOD(exception, __wakeup)",
      "234: {",
      "235:  zval *value;",
      "236:  zval *object = getThis();",
      "237:  HashTable *intern_ht = zend_std_get_properties(getThis() TSRMLS_CC);",
      "238:  CHECK_EXC_TYPE(\"message\", IS_STRING);",
      "239:  CHECK_EXC_TYPE(\"string\", IS_STRING);",
      "240:  CHECK_EXC_TYPE(\"code\", IS_LONG);",
      "241:  CHECK_EXC_TYPE(\"file\", IS_STRING);",
      "242:  CHECK_EXC_TYPE(\"line\", IS_LONG);",
      "243:  CHECK_EXC_TYPE(\"trace\", IS_ARRAY);",
      "244:  CHECK_EXC_TYPE(\"previous\", IS_OBJECT);",
      "245: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "728: const static zend_function_entry default_exception_functions[] = {",
      "729:  ZEND_ME(exception, __clone, NULL, ZEND_ACC_PRIVATE|ZEND_ACC_FINAL)",
      "730:  ZEND_ME(exception, __construct, arginfo_exception___construct, ZEND_ACC_PUBLIC)",
      "731:  ZEND_ME(exception, getMessage, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
      "732:  ZEND_ME(exception, getCode, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
      "733:  ZEND_ME(exception, getFile, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "758:  ZEND_ME(exception, __wakeup, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
      "",
      "---------------"
    ],
    "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt": [
      "File: ext/standard/tests/serialize/bug69152.phpt -> ext/standard/tests/serialize/bug69152.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "10: ?>",
      "11: --EXPECTF--",
      "12: exception 'Exception' in %s:%d",
      "13: Stack trace:",
      "14: #0 {main}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "12: Notice: Undefined property: Exception::$previous in %s on line %d",
      "",
      "---------------"
    ],
    "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt": [
      "File: ext/standard/tests/serialize/bug69793.phpt -> ext/standard/tests/serialize/bug69793.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: --TEST--",
      "2: Bug #69793: Remotely triggerable stack exhaustion via recursive method calls",
      "3: --FILE--",
      "4: <?php",
      "5: $e = unserialize('O:9:\"Exception\":7:{s:17:\"'.\"\\0\".'Exception'.\"\\0\".'string\";s:1:\"a\";s:7:\"'.\"\\0\".'*'.\"\\0\".'code\";i:0;s:7:\"'.\"\\0\".'*'.\"\\0\".'file\";R:1;s:7:\"'.\"\\0\".'*'.\"\\0\".'line\";i:1337;s:16:\"'.\"\\0\".'Exception'.\"\\0\".'trace\";a:0:{}s:19:\"'.\"\\0\".'Exception'.\"\\0\".'previous\";i:10;s:10:\"'.\"\\0\".'*'.\"\\0\".'message\";N;}');",
      "7: var_dump($e.\"\");",
      "8: ?>",
      "9: --EXPECTF--",
      "10: Notice: Undefined property: Exception::$message in %s/bug69793.php on line %d",
      "12: Notice: Undefined property: Exception::$file in %s/bug69793.php on line %d",
      "14: Notice: Undefined property: Exception::$previous in %s/bug69793.php on line %d",
      "15: string(53) \"exception 'Exception' in :1337",
      "16: Stack trace:",
      "17: #0 {main}\"",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "feeb2fba93a451c467ec70963995ca6371b3a568",
      "candidate_info": {
        "commit_hash": "feeb2fba93a451c467ec70963995ca6371b3a568",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/feeb2fba93a451c467ec70963995ca6371b3a568",
        "files": [
          "Zend/zend_exceptions.c",
          "ext/date/tests/bug53437_var5.phpt",
          "ext/spl/spl_array.c",
          "ext/spl/spl_dllist.c",
          "ext/spl/spl_observer.c",
          "ext/standard/php_var.h",
          "ext/standard/tests/serialize/bug69793.phpt",
          "ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re"
        ],
        "message": "fix merge",
        "before_after_code_files": [
          "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
          "ext/date/tests/bug53437_var5.phpt||ext/date/tests/bug53437_var5.phpt",
          "ext/spl/spl_array.c||ext/spl/spl_array.c",
          "ext/spl/spl_dllist.c||ext/spl/spl_dllist.c",
          "ext/spl/spl_observer.c||ext/spl/spl_observer.c",
          "ext/standard/php_var.h||ext/standard/php_var.h",
          "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt",
          "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c",
          "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
            "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt"
          ],
          "candidate": [
            "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
            "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_exceptions.c||Zend/zend_exceptions.c": [
          "File: Zend/zend_exceptions.c -> Zend/zend_exceptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "284: #define CHECK_EXC_TYPE(name, type) \\",
          "287:   zval tmp; \\",
          "288:   ZVAL_STRINGL(&tmp, name, sizeof(name) - 1); \\",
          "289:   Z_OBJ_HANDLER_P(object, unset_property)(object, &tmp, NULL); \\",
          "",
          "[Removed Lines]",
          "285:  if(zend_read_property(i_get_exception_base(object), (object), name, sizeof(name) - 1, 1, &value) != &EG(uninitialized_zval) \\",
          "286:   && Z_TYPE(value) != type) { \\",
          "",
          "[Added Lines]",
          "285:  ZVAL_UNDEF(&value); \\",
          "286:  pvalue = zend_read_property(i_get_exception_base(object), (object), name, sizeof(name) - 1, 1, &value); \\",
          "287:  if(Z_TYPE_P(pvalue) != IS_UNDEF && Z_TYPE_P(pvalue) != type) { \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "293: ZEND_METHOD(exception, __wakeup)",
          "294: {",
          "296:  zval *object = getThis();",
          "297:  CHECK_EXC_TYPE(\"message\", IS_STRING);",
          "298:  CHECK_EXC_TYPE(\"string\", IS_STRING);",
          "",
          "[Removed Lines]",
          "295:  zval value;",
          "",
          "[Added Lines]",
          "296:  zval value, *pvalue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "711:  exception = getThis();",
          "712:  ZVAL_STRINGL(&fname, \"gettraceasstring\", sizeof(\"gettraceasstring\")-1);",
          "715:   zend_string *prev_str = str;",
          "716:   zend_string *message = zval_get_string(GET_PROPERTY(exception, \"message\"));",
          "717:   zend_string *file = zval_get_string(GET_PROPERTY(exception, \"file\"));",
          "",
          "[Removed Lines]",
          "714:  while (exception && Z_TYPE_P(exception) == IS_OBJECT) {",
          "",
          "[Added Lines]",
          "715:  while (exception && Z_TYPE_P(exception) == IS_OBJECT && instanceof_function(Z_OBJCE_P(exception), zend_ce_throwable)) {",
          "",
          "---------------"
        ],
        "ext/date/tests/bug53437_var5.phpt||ext/date/tests/bug53437_var5.phpt": [
          "File: ext/date/tests/bug53437_var5.phpt -> ext/date/tests/bug53437_var5.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: --EXPECTF--",
          "15: object(DateInterval)#%d (15) {",
          "16:   [\"y\"]=>",
          "18:   [\"m\"]=>",
          "20:   [\"d\"]=>",
          "22:   [\"h\"]=>",
          "24:   [\"i\"]=>",
          "26:   [\"s\"]=>",
          "28:   [\"weekday\"]=>",
          "29:   int(10)",
          "30:   [\"weekday_behavior\"]=>",
          "",
          "[Removed Lines]",
          "17:   int(-1)",
          "19:   int(-1)",
          "21:   int(-1)",
          "23:   int(-1)",
          "25:   int(-1)",
          "27:   int(-1)",
          "",
          "[Added Lines]",
          "17:   int(2)",
          "19:   int(0)",
          "21:   int(0)",
          "23:   int(6)",
          "25:   int(8)",
          "27:   int(0)",
          "",
          "---------------"
        ],
        "ext/spl/spl_array.c||ext/spl/spl_array.c": [
          "File: ext/spl/spl_array.c -> ext/spl/spl_array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1710:  size_t buf_len;",
          "1711:  const unsigned char *p, *s;",
          "1712:  php_unserialize_data_t var_hash;",
          "1714:  HashTable *aht;",
          "1715:  zend_long flags;",
          "",
          "[Removed Lines]",
          "1713:  zval members, zflags;",
          "",
          "[Added Lines]",
          "1713:  zval *members, *zflags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1737:  }",
          "1738:  ++p;",
          "1741:   goto outexcept;",
          "1742:  }",
          "",
          "[Removed Lines]",
          "1740:  if (!php_var_unserialize(&zflags, &p, s + buf_len, &var_hash) || Z_TYPE(zflags) != IS_LONG) {",
          "1744:  var_push_dtor(&var_hash, &zflags);",
          "1746:  flags = Z_LVAL(zflags);",
          "",
          "[Added Lines]",
          "1740:  zflags = var_tmp_var(&var_hash);",
          "1741:  if (!php_var_unserialize(zflags, &p, s + buf_len, &var_hash) || Z_TYPE_P(zflags) != IS_LONG) {",
          "1746:  flags = Z_LVAL_P(zflags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1777:  }",
          "1778:  ++p;",
          "1783:   goto outexcept;",
          "1784:  }",
          "1793:  PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "1794:  return;",
          "",
          "[Removed Lines]",
          "1780:  ZVAL_UNDEF(&members);",
          "1781:  if (!php_var_unserialize(&members, &p, s + buf_len, &var_hash) || Z_TYPE(members) != IS_ARRAY) {",
          "1782:   zval_ptr_dtor(&members);",
          "1786:  var_push_dtor(&var_hash, &members);",
          "1788:  object_properties_load(&intern->std, Z_ARRVAL(members));",
          "1789:  zval_ptr_dtor(&members);",
          "",
          "[Added Lines]",
          "1780:  members = var_tmp_var(&var_hash);",
          "1781:  if (!php_var_unserialize(members, &p, s + buf_len, &var_hash) || Z_TYPE_P(members) != IS_ARRAY) {",
          "1786:  object_properties_load(&intern->std, Z_ARRVAL_P(members));",
          "",
          "---------------"
        ],
        "ext/spl/spl_dllist.c||ext/spl/spl_dllist.c": [
          "File: ext/spl/spl_dllist.c -> ext/spl/spl_dllist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1178: SPL_METHOD(SplDoublyLinkedList, unserialize)",
          "1179: {",
          "1180:  spl_dllist_object *intern = Z_SPLDLLIST_P(getThis());",
          "1182:  char *buf;",
          "1183:  size_t buf_len;",
          "1184:  const unsigned char *p, *s;",
          "",
          "[Removed Lines]",
          "1181:  zval flags, elem;",
          "",
          "[Added Lines]",
          "1181:  zval *flags, *elem;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1196:  PHP_VAR_UNSERIALIZE_INIT(var_hash);",
          "1200:   goto error;",
          "1201:  }",
          "1212:  while(*p == ':') {",
          "1213:   ++p;",
          "1215:    goto error;",
          "1216:   }",
          "1220:  }",
          "1222:  if (*p != '\\0') {",
          "",
          "[Removed Lines]",
          "1199:  if (!php_var_unserialize(&flags, &p, s + buf_len, &var_hash)) {",
          "1203:  if (Z_TYPE(flags) != IS_LONG) {",
          "1204:   zval_ptr_dtor(&flags);",
          "1205:   goto error;",
          "1206:  }",
          "1208:  intern->flags = (int)Z_LVAL(flags);",
          "1209:  zval_ptr_dtor(&flags);",
          "1214:   if (!php_var_unserialize(&elem, &p, s + buf_len, &var_hash)) {",
          "1218:   spl_ptr_llist_push(intern->llist, &elem);",
          "1219:   zval_ptr_dtor(&elem);",
          "",
          "[Added Lines]",
          "1199:  flags = var_tmp_var(&var_hash);",
          "1200:  if (!php_var_unserialize(flags, &p, s + buf_len, &var_hash) || Z_TYPE_P(flags) != IS_LONG) {",
          "1204:  intern->flags = (int)Z_LVAL_P(flags);",
          "1209:   elem = var_tmp_var(&var_hash);",
          "1210:   if (!php_var_unserialize(elem, &p, s + buf_len, &var_hash)) {",
          "1214:   spl_ptr_llist_push(intern->llist, elem);",
          "",
          "---------------"
        ],
        "ext/spl/spl_observer.c||ext/spl/spl_observer.c": [
          "File: ext/spl/spl_observer.c -> ext/spl/spl_observer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:  size_t buf_len;",
          "781:  const unsigned char *p, *s;",
          "782:  php_unserialize_data_t var_hash;",
          "784:  spl_SplObjectStorageElement *element;",
          "785:  zend_long count;",
          "",
          "[Removed Lines]",
          "783:  zval entry, pmembers, pcount, inf;",
          "",
          "[Added Lines]",
          "783:  zval entry, inf;",
          "784:  zval *pcount, *pmembers;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "801:  }",
          "802:  ++p;",
          "809:   goto outexcept;",
          "810:  }",
          "816:  while (count-- > 0) {",
          "817:   spl_SplObjectStorageElement *pelement;",
          "",
          "[Removed Lines]",
          "804:  if (!php_var_unserialize(&pcount, &p, s + buf_len, &var_hash)) {",
          "805:   goto outexcept;",
          "806:  }",
          "807:  if (Z_TYPE(pcount) != IS_LONG) {",
          "808:   zval_ptr_dtor(&pcount);",
          "812:  var_push_dtor(&var_hash, &pcount);",
          "814:  count = Z_LVAL(pcount);",
          "",
          "[Added Lines]",
          "805:  pcount = var_tmp_var(&var_hash);",
          "806:  if (!php_var_unserialize(pcount, &p, s + buf_len, &var_hash) || Z_TYPE_P(pcount) != IS_LONG) {",
          "811:  count = Z_LVAL_P(pcount);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "838:     zval_ptr_dtor(&entry);",
          "839:     goto outexcept;",
          "840:    }",
          "841:   }",
          "843:   hash = spl_object_storage_get_hash(intern, getThis(), &entry);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "838:   } else {",
          "839:    ZVAL_UNDEF(&inf);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "856:     var_push_dtor(&var_hash, &pelement->obj);",
          "857:    }",
          "858:   }",
          "860:   var_replace(&var_hash, &entry, &element->obj);",
          "861:   var_replace(&var_hash, &inf, &element->inf);",
          "862:   zval_ptr_dtor(&entry);",
          "",
          "[Removed Lines]",
          "859:   element = spl_object_storage_attach(intern, getThis(), &entry, &inf);",
          "",
          "[Added Lines]",
          "858:   element = spl_object_storage_attach(intern, getThis(), &entry, Z_ISUNDEF(inf)?NULL:&inf);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "874:  }",
          "875:  ++p;",
          "880:   goto outexcept;",
          "881:  }",
          "885:  if (!intern->std.properties) {",
          "886:   rebuild_object_properties(&intern->std);",
          "887:  }",
          "891:  PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "892:  return;",
          "",
          "[Removed Lines]",
          "877:  ZVAL_UNDEF(&pmembers);",
          "878:  if (!php_var_unserialize(&pmembers, &p, s + buf_len, &var_hash) || Z_TYPE(pmembers) != IS_ARRAY) {",
          "879:   zval_ptr_dtor(&pmembers);",
          "883:  var_push_dtor(&var_hash, &pmembers);",
          "888:  zend_hash_copy(intern->std.properties, Z_ARRVAL(pmembers), (copy_ctor_func_t) zval_add_ref);",
          "889:  zval_ptr_dtor(&pmembers);",
          "",
          "[Added Lines]",
          "876:  pmembers = var_tmp_var(&var_hash);",
          "877:  if (!php_var_unserialize(pmembers, &p, s + buf_len, &var_hash) || Z_TYPE_P(pmembers) != IS_ARRAY) {",
          "885:  zend_hash_copy(intern->std.properties, Z_ARRVAL_P(pmembers), (copy_ctor_func_t) zval_add_ref);",
          "",
          "---------------"
        ],
        "ext/standard/php_var.h||ext/standard/php_var.h": [
          "File: ext/standard/php_var.h -> ext/standard/php_var.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: PHPAPI void var_replace(php_unserialize_data_t *var_hash, zval *ozval, zval *nzval);",
          "119: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hash, zval *val);",
          "121: PHPAPI void var_destroy(php_unserialize_data_t *var_hash);",
          "",
          "[Removed Lines]",
          "120: PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval *rval);",
          "",
          "[Added Lines]",
          "120: PHPAPI zval *var_tmp_var(php_unserialize_data_t *var_hashx);",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt": [
          "File: ext/standard/tests/serialize/bug69793.phpt -> ext/standard/tests/serialize/bug69793.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: Notice: Undefined property: Exception::$file in %s/bug69793.php on line %d",
          "14: Notice: Undefined property: Exception::$previous in %s/bug69793.php on line %d",
          "16: Stack trace:",
          "17: #0 {main}\"",
          "",
          "[Removed Lines]",
          "15: string(53) \"exception 'Exception' in :1337",
          "",
          "[Added Lines]",
          "15: string(41) \"Exception in :1337",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.c||ext/standard/var_unserializer.c": [
          "File: ext/standard/var_unserializer.c -> ext/standard/var_unserializer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval *rval)",
          "68: {",
          "96: }",
          "",
          "[Removed Lines]",
          "69:  var_dtor_entries *var_hash;",
          "71:  if (!var_hashx || !*var_hashx) {",
          "72:   return;",
          "73:  }",
          "75:  var_hash = (*var_hashx)->last_dtor;",
          "76: #if VAR_ENTRIES_DBG",
          "77:  fprintf(stderr, \"var_push_dtor(%ld): %d\\n\", var_hash?var_hash->used_slots:-1L, Z_TYPE_PP(rval));",
          "78: #endif",
          "80:  if (!var_hash || var_hash->used_slots == VAR_ENTRIES_MAX) {",
          "81:   var_hash = emalloc(sizeof(var_dtor_entries));",
          "82:   var_hash->used_slots = 0;",
          "83:   var_hash->next = 0;",
          "85:   if (!(*var_hashx)->first_dtor) {",
          "86:    (*var_hashx)->first_dtor = var_hash;",
          "87:   } else {",
          "88:    ((var_dtor_entries *) (*var_hashx)->last_dtor)->next = var_hash;",
          "89:   }",
          "91:   (*var_hashx)->last_dtor = var_hash;",
          "92:  }",
          "94:  ZVAL_COPY(&var_hash->data[var_hash->used_slots], rval);",
          "95:  var_hash->used_slots++;",
          "",
          "[Added Lines]",
          "69:  zval *tmp_var = var_tmp_var(var_hashx);",
          "70:     if (!tmp_var) {",
          "71:         return;",
          "72:     }",
          "73:  ZVAL_COPY(tmp_var, rval);",
          "74: }",
          "76: PHPAPI zval *var_tmp_var(php_unserialize_data_t *var_hashx)",
          "77: {",
          "78:     var_dtor_entries *var_hash;",
          "80:     if (!var_hashx || !*var_hashx) {",
          "81:         return NULL;",
          "82:     }",
          "84:     var_hash = (*var_hashx)->last_dtor;",
          "85:     if (!var_hash || var_hash->used_slots == VAR_ENTRIES_MAX) {",
          "86:         var_hash = emalloc(sizeof(var_dtor_entries));",
          "87:         var_hash->used_slots = 0;",
          "88:         var_hash->next = 0;",
          "90:         if (!(*var_hashx)->first_dtor) {",
          "91:             (*var_hashx)->first_dtor = var_hash;",
          "92:         } else {",
          "93:             ((var_dtor_entries *) (*var_hashx)->last_dtor)->next = var_hash;",
          "94:         }",
          "96:         (*var_hashx)->last_dtor = var_hash;",
          "97:     }",
          "98:     ZVAL_UNDEF(&var_hash->data[var_hash->used_slots]);",
          "99:     return &var_hash->data[var_hash->used_slots++];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259: #define YYMARKER marker",
          "",
          "[Removed Lines]",
          "262: #line 267 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "266: #line 271 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "524:  start = cursor;",
          "528: {",
          "529:  YYCTYPE yych;",
          "530:  static const unsigned char yybm[] = {",
          "",
          "[Removed Lines]",
          "527: #line 528 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "531: #line 532 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "584:  yych = *(YYMARKER = ++YYCURSOR);",
          "585:  if (yych == ':') goto yy95;",
          "586: yy3:",
          "588:  { return 0; }",
          "590: yy4:",
          "591:  yych = *(YYMARKER = ++YYCURSOR);",
          "592:  if (yych == ':') goto yy89;",
          "",
          "[Removed Lines]",
          "587: #line 875 \"ext/standard/var_unserializer.re\"",
          "589: #line 590 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "591: #line 879 \"ext/standard/var_unserializer.re\"",
          "593: #line 594 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "629:  goto yy3;",
          "630: yy14:",
          "631:  ++YYCURSOR;",
          "633:  {",
          "635:  php_error_docref(NULL, E_NOTICE, \"Unexpected end of serialized data\");",
          "637: }",
          "639: yy16:",
          "640:  yych = *++YYCURSOR;",
          "641:  goto yy3;",
          "",
          "[Removed Lines]",
          "632: #line 869 \"ext/standard/var_unserializer.re\"",
          "638: #line 639 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "636: #line 873 \"ext/standard/var_unserializer.re\"",
          "642: #line 643 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "661:  if (yybm[0+yych] & 128) {",
          "662:   goto yy20;",
          "663:  }",
          "665:  yych = *++YYCURSOR;",
          "666:  if (yych != '\"') goto yy18;",
          "667:  ++YYCURSOR;",
          "669:  {",
          "670:  size_t len, len2, len3, maxlen;",
          "671:  zend_long elements;",
          "",
          "[Removed Lines]",
          "664:  if (yych != ':') goto yy18;",
          "668: #line 724 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "668:  if (yych <= '/') goto yy18;",
          "669:  if (yych >= ';') goto yy18;",
          "673: #line 728 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "811:  return object_common2(UNSERIALIZE_PASSTHRU, elements);",
          "812: }",
          "814: yy25:",
          "815:  yych = *++YYCURSOR;",
          "816:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "813: #line 814 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "818: #line 819 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "835:  yych = *++YYCURSOR;",
          "836:  if (yych != '\"') goto yy18;",
          "837:  ++YYCURSOR;",
          "839:  {",
          "",
          "[Removed Lines]",
          "838: #line 716 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "843: #line 720 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "843:  return object_common2(UNSERIALIZE_PASSTHRU,",
          "844:    object_common1(UNSERIALIZE_PASSTHRU, ZEND_STANDARD_CLASS_DEF_PTR));",
          "845: }",
          "847: yy32:",
          "848:  yych = *++YYCURSOR;",
          "849:  if (yych == '+') goto yy33;",
          "",
          "[Removed Lines]",
          "846: #line 847 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "851: #line 852 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "864:  yych = *++YYCURSOR;",
          "865:  if (yych != '{') goto yy18;",
          "866:  ++YYCURSOR;",
          "868:  {",
          "869:  zend_long elements = parse_iv(start + 2);",
          "",
          "[Removed Lines]",
          "867: #line 695 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "872: #line 699 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "886:  return finish_nested_data(UNSERIALIZE_PASSTHRU);",
          "887: }",
          "889: yy39:",
          "890:  yych = *++YYCURSOR;",
          "891:  if (yych == '+') goto yy40;",
          "",
          "[Removed Lines]",
          "888: #line 889 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "893: #line 894 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "906:  yych = *++YYCURSOR;",
          "907:  if (yych != '\"') goto yy18;",
          "908:  ++YYCURSOR;",
          "910:  {",
          "911:  size_t len, maxlen;",
          "912:  zend_string *str;",
          "",
          "[Removed Lines]",
          "909: #line 667 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "914: #line 671 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "934:  ZVAL_STR(rval, str);",
          "935:  return 1;",
          "936: }",
          "938: yy46:",
          "939:  yych = *++YYCURSOR;",
          "940:  if (yych == '+') goto yy47;",
          "",
          "[Removed Lines]",
          "937: #line 938 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "942: #line 943 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "955:  yych = *++YYCURSOR;",
          "956:  if (yych != '\"') goto yy18;",
          "957:  ++YYCURSOR;",
          "959:  {",
          "960:  size_t len, maxlen;",
          "961:  char *str;",
          "",
          "[Removed Lines]",
          "958: #line 640 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "963: #line 644 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "982:  ZVAL_STRINGL(rval, str, len);",
          "983:  return 1;",
          "984: }",
          "986: yy53:",
          "987:  yych = *++YYCURSOR;",
          "988:  if (yych <= '/') {",
          "",
          "[Removed Lines]",
          "985: #line 986 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "990: #line 991 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1070:  }",
          "1071: yy63:",
          "1072:  ++YYCURSOR;",
          "1074:  {",
          "1075: #if SIZEOF_ZEND_LONG == 4",
          "1076: use_double:",
          "",
          "[Removed Lines]",
          "1073: #line 631 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1078: #line 635 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1079:  ZVAL_DOUBLE(rval, zend_strtod((const char *)start + 2, NULL));",
          "1080:  return 1;",
          "1081: }",
          "1083: yy65:",
          "1084:  yych = *++YYCURSOR;",
          "1085:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1082: #line 1083 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1087: #line 1088 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1138:  yych = *++YYCURSOR;",
          "1139:  if (yych != ';') goto yy18;",
          "1140:  ++YYCURSOR;",
          "1142:  {",
          "",
          "[Removed Lines]",
          "1141: #line 615 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1146: #line 619 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1155:  return 1;",
          "1156: }",
          "1158: yy76:",
          "1159:  yych = *++YYCURSOR;",
          "1160:  if (yych == 'N') goto yy73;",
          "",
          "[Removed Lines]",
          "1157: #line 1158 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1162: #line 1163 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1181:  if (yych <= '9') goto yy79;",
          "1182:  if (yych != ';') goto yy18;",
          "1183:  ++YYCURSOR;",
          "1185:  {",
          "1186: #if SIZEOF_ZEND_LONG == 4",
          "1187:  int digits = YYCURSOR - start - 3;",
          "",
          "[Removed Lines]",
          "1184: #line 589 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1189: #line 593 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1207:  ZVAL_LONG(rval, parse_iv(start + 2));",
          "1208:  return 1;",
          "1209: }",
          "1211: yy83:",
          "1212:  yych = *++YYCURSOR;",
          "1213:  if (yych <= '/') goto yy18;",
          "",
          "[Removed Lines]",
          "1210: #line 1211 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1215: #line 1216 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1215:  yych = *++YYCURSOR;",
          "1216:  if (yych != ';') goto yy18;",
          "1217:  ++YYCURSOR;",
          "1219:  {",
          "1221:  ZVAL_BOOL(rval, parse_iv(start + 2));",
          "1222:  return 1;",
          "1223: }",
          "1225: yy87:",
          "1226:  ++YYCURSOR;",
          "1228:  {",
          "1230:  ZVAL_NULL(rval);",
          "1231:  return 1;",
          "1232: }",
          "1234: yy89:",
          "1235:  yych = *++YYCURSOR;",
          "1236:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1218: #line 583 \"ext/standard/var_unserializer.re\"",
          "1224: #line 1225 \"ext/standard/var_unserializer.c\"",
          "1227: #line 577 \"ext/standard/var_unserializer.re\"",
          "1233: #line 1234 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1223: #line 587 \"ext/standard/var_unserializer.re\"",
          "1229: #line 1230 \"ext/standard/var_unserializer.c\"",
          "1232: #line 581 \"ext/standard/var_unserializer.re\"",
          "1238: #line 1239 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1253:  if (yych <= '9') goto yy91;",
          "1254:  if (yych != ';') goto yy18;",
          "1255:  ++YYCURSOR;",
          "1257:  {",
          "1258:  zend_long id;",
          "",
          "[Removed Lines]",
          "1256: #line 554 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1261: #line 558 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1277:  return 1;",
          "1278: }",
          "1280: yy95:",
          "1281:  yych = *++YYCURSOR;",
          "1282:  if (yych <= ',') {",
          "",
          "[Removed Lines]",
          "1279: #line 1280 \"ext/standard/var_unserializer.c\"",
          "",
          "[Added Lines]",
          "1284: #line 1285 \"ext/standard/var_unserializer.c\"",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1299:  if (yych <= '9') goto yy97;",
          "1300:  if (yych != ';') goto yy18;",
          "1301:  ++YYCURSOR;",
          "1303:  {",
          "1304:  zend_long id;",
          "",
          "[Removed Lines]",
          "1302: #line 532 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1307: #line 536 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1322:  return 1;",
          "1323: }",
          "1325: }",
          "1329:  return 0;",
          "",
          "[Removed Lines]",
          "1324: #line 1325 \"ext/standard/var_unserializer.c\"",
          "1326: #line 877 \"ext/standard/var_unserializer.re\"",
          "",
          "[Added Lines]",
          "1329: #line 1330 \"ext/standard/var_unserializer.c\"",
          "1331: #line 881 \"ext/standard/var_unserializer.re\"",
          "",
          "---------------"
        ],
        "ext/standard/var_unserializer.re||ext/standard/var_unserializer.re": [
          "File: ext/standard/var_unserializer.re -> ext/standard/var_unserializer.re",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval *rval)",
          "66: {",
          "94: }",
          "",
          "[Removed Lines]",
          "67:  var_dtor_entries *var_hash;",
          "69:  if (!var_hashx || !*var_hashx) {",
          "70:   return;",
          "71:  }",
          "73:  var_hash = (*var_hashx)->last_dtor;",
          "74: #if VAR_ENTRIES_DBG",
          "75:  fprintf(stderr, \"var_push_dtor(%ld): %d\\n\", var_hash?var_hash->used_slots:-1L, Z_TYPE_PP(rval));",
          "76: #endif",
          "78:  if (!var_hash || var_hash->used_slots == VAR_ENTRIES_MAX) {",
          "79:   var_hash = emalloc(sizeof(var_dtor_entries));",
          "80:   var_hash->used_slots = 0;",
          "81:   var_hash->next = 0;",
          "83:   if (!(*var_hashx)->first_dtor) {",
          "84:    (*var_hashx)->first_dtor = var_hash;",
          "85:   } else {",
          "86:    ((var_dtor_entries *) (*var_hashx)->last_dtor)->next = var_hash;",
          "87:   }",
          "89:   (*var_hashx)->last_dtor = var_hash;",
          "90:  }",
          "92:  ZVAL_COPY(&var_hash->data[var_hash->used_slots], rval);",
          "93:  var_hash->used_slots++;",
          "",
          "[Added Lines]",
          "67:  zval *tmp_var = var_tmp_var(var_hashx);",
          "68:     if (!tmp_var) {",
          "69:         return;",
          "70:     }",
          "71:  ZVAL_COPY(tmp_var, rval);",
          "72: }",
          "74: PHPAPI zval *var_tmp_var(php_unserialize_data_t *var_hashx)",
          "75: {",
          "76:     var_dtor_entries *var_hash;",
          "78:     if (!var_hashx || !*var_hashx) {",
          "79:         return NULL;",
          "80:     }",
          "82:     var_hash = (*var_hashx)->last_dtor;",
          "83:     if (!var_hash || var_hash->used_slots == VAR_ENTRIES_MAX) {",
          "84:         var_hash = emalloc(sizeof(var_dtor_entries));",
          "85:         var_hash->used_slots = 0;",
          "86:         var_hash->next = 0;",
          "88:         if (!(*var_hashx)->first_dtor) {",
          "89:             (*var_hashx)->first_dtor = var_hash;",
          "90:         } else {",
          "91:             ((var_dtor_entries *) (*var_hashx)->last_dtor)->next = var_hash;",
          "92:         }",
          "94:         (*var_hashx)->last_dtor = var_hash;",
          "95:     }",
          "96:     ZVAL_UNDEF(&var_hash->data[var_hash->used_slots]);",
          "97:     return &var_hash->data[var_hash->used_slots++];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7b94b958ccbc87595d688d178f96daf96a9f54b3",
      "candidate_info": {
        "commit_hash": "7b94b958ccbc87595d688d178f96daf96a9f54b3",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/7b94b958ccbc87595d688d178f96daf96a9f54b3",
        "files": [
          "Zend/zend.c",
          "Zend/zend_API.c",
          "Zend/zend_API.h",
          "Zend/zend_builtin_functions.c",
          "Zend/zend_closures.c",
          "Zend/zend_compile.c",
          "Zend/zend_exceptions.c",
          "Zend/zend_execute.c",
          "Zend/zend_execute_API.c",
          "Zend/zend_globals.h",
          "Zend/zend_language_parser.y",
          "Zend/zend_object_handlers.c",
          "Zend/zend_operators.c",
          "Zend/zend_string.c",
          "Zend/zend_string.h",
          "Zend/zend_vm_def.h",
          "Zend/zend_vm_execute.h",
          "ext/opcache/ZendAccelerator.c"
        ],
        "message": "Intern some known (and offten used) strings.",
        "before_after_code_files": [
          "Zend/zend.c||Zend/zend.c",
          "Zend/zend_API.c||Zend/zend_API.c",
          "Zend/zend_API.h||Zend/zend_API.h",
          "Zend/zend_builtin_functions.c||Zend/zend_builtin_functions.c",
          "Zend/zend_closures.c||Zend/zend_closures.c",
          "Zend/zend_compile.c||Zend/zend_compile.c",
          "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
          "Zend/zend_execute.c||Zend/zend_execute.c",
          "Zend/zend_execute_API.c||Zend/zend_execute_API.c",
          "Zend/zend_globals.h||Zend/zend_globals.h",
          "Zend/zend_language_parser.y||Zend/zend_language_parser.y",
          "Zend/zend_object_handlers.c||Zend/zend_object_handlers.c",
          "Zend/zend_operators.c||Zend/zend_operators.c",
          "Zend/zend_string.c||Zend/zend_string.c",
          "Zend/zend_string.h||Zend/zend_string.h",
          "Zend/zend_vm_def.h||Zend/zend_vm_def.h",
          "ext/opcache/ZendAccelerator.c||ext/opcache/ZendAccelerator.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Zend/zend_exceptions.c||Zend/zend_exceptions.c"
          ],
          "candidate": [
            "Zend/zend_exceptions.c||Zend/zend_exceptions.c"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend.c||Zend/zend.c": [
          "File: Zend/zend.c -> Zend/zend.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:  }",
          "502:  compiler_globals->script_encoding_list = NULL;",
          "506:  memset(compiler_globals->one_char_string, 0, sizeof(compiler_globals->one_char_string));",
          "507: }",
          "",
          "[Removed Lines]",
          "504:  zend_interned_empty_string_init(&compiler_globals->empty_string);",
          "",
          "[Added Lines]",
          "504:  compiler_globals->empty_string = zend_zts_interned_string_init(\"\", sizeof(\"\")-1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "529:  }",
          "530:  compiler_globals->last_static_member = 0;",
          "533: }",
          "",
          "[Removed Lines]",
          "532:  zend_interned_empty_string_free(&compiler_globals->empty_string);",
          "",
          "[Added Lines]",
          "532:  zend_zts_interned_string_free(&compiler_globals->empty_string);",
          "",
          "---------------"
        ],
        "Zend/zend_API.c||Zend/zend_API.c": [
          "File: Zend/zend_API.c -> Zend/zend_API.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4042:   zend_error_noreturn(E_CORE_ERROR, \"Property %s of class %s cannot be read\", name, ZSTR_VAL(Z_OBJCE_P(object)->name));",
          "4043:  }",
          "4046:  value = Z_OBJ_HT_P(object)->read_property(object, &property, silent?BP_VAR_IS:BP_VAR_R, NULL, rv);",
          "4049:  EG(fake_scope) = old_scope;",
          "4050:  return value;",
          "4051: }",
          "4055: {",
          "4056:  zval *property;",
          "",
          "[Removed Lines]",
          "4045:  ZVAL_STRINGL(&property, name, name_length);",
          "4047:  zval_ptr_dtor(&property);",
          "",
          "[Added Lines]",
          "4045:  ZVAL_STR(&property, name);",
          "4054: {",
          "4055:  zval *value;",
          "4056:  zend_string *str;",
          "4058:  str = zend_string_init(name, name_length, 0);",
          "4059:  value = zend_read_property_ex(scope, object, str, silent, rv);",
          "4060:  zend_string_release(str);",
          "4061:  return value;",
          "4062: }",
          "",
          "---------------"
        ],
        "Zend/zend_API.h||Zend/zend_API.h": [
          "File: Zend/zend_API.h -> Zend/zend_API.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "351: ZEND_API int zend_update_static_property_string(zend_class_entry *scope, const char *name, size_t name_length, const char *value);",
          "352: ZEND_API int zend_update_static_property_stringl(zend_class_entry *scope, const char *name, size_t name_length, const char *value, size_t value_length);",
          "354: ZEND_API zval *zend_read_property(zend_class_entry *scope, zval *object, const char *name, size_t name_length, zend_bool silent, zval *rv);",
          "356: ZEND_API zval *zend_read_static_property(zend_class_entry *scope, const char *name, size_t name_length, zend_bool silent);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354: ZEND_API zval *zend_read_property_ex(zend_class_entry *scope, zval *object, zend_string *name, zend_bool silent, zval *rv);",
          "",
          "---------------"
        ],
        "Zend/zend_builtin_functions.c||Zend/zend_builtin_functions.c": [
          "File: Zend/zend_builtin_functions.c -> Zend/zend_builtin_functions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736:   if (Z_REFCOUNTED_P(entry)) Z_ADDREF_P(entry);",
          "737:  }",
          "738:  zend_hash_index_add_new(Z_ARRVAL_P(return_value), 1, entry);",
          "742:  if (zend_hash_get_current_key(target_hash, &key, &num_key) == HASH_KEY_IS_STRING) {",
          "",
          "[Removed Lines]",
          "739:  zend_hash_str_add_new(Z_ARRVAL_P(return_value), \"value\", sizeof(\"value\")-1, entry);",
          "",
          "[Added Lines]",
          "739:  zend_hash_add_new(Z_ARRVAL_P(return_value), CG(known_strings)[ZEND_STR_VALUE], entry);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "746:   ZVAL_LONG(&tmp, num_key);",
          "747:  }",
          "748:  zend_hash_index_add_new(Z_ARRVAL_P(return_value), 0, &tmp);",
          "750:  zend_hash_move_forward(target_hash);",
          "751: }",
          "",
          "[Removed Lines]",
          "749:  zend_hash_str_add_new(Z_ARRVAL_P(return_value), \"key\", sizeof(\"key\")-1, &tmp);",
          "",
          "[Added Lines]",
          "749:  zend_hash_add_new(Z_ARRVAL_P(return_value), CG(known_strings)[ZEND_STR_KEY], &tmp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "776:    zend_ini_entry *p = EG(error_reporting_ini_entry);",
          "778:    if (!p) {",
          "780:     if (p) {",
          "781:      EG(error_reporting_ini_entry) = p;",
          "782:     } else {",
          "",
          "[Removed Lines]",
          "779:     p = zend_hash_str_find_ptr(EG(ini_directives), \"error_reporting\", sizeof(\"error_reporting\")-1);",
          "",
          "[Added Lines]",
          "779:     p = zend_hash_find_ptr(EG(ini_directives), CG(known_strings)[ZEND_STR_ERROR_REPORTING]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "788:      ALLOC_HASHTABLE(EG(modified_ini_directives));",
          "789:      zend_hash_init(EG(modified_ini_directives), 8, NULL, NULL, 0);",
          "790:     }",
          "792:      p->orig_value = p->value;",
          "793:      p->orig_modifiable = p->modifiable;",
          "794:      p->modified = 1;",
          "",
          "[Removed Lines]",
          "791:     if (EXPECTED(zend_hash_str_add_ptr(EG(modified_ini_directives), \"error_reporting\", sizeof(\"error_reporting\")-1, p) != NULL)) {",
          "",
          "[Added Lines]",
          "791:     if (EXPECTED(zend_hash_add_ptr(EG(modified_ini_directives), CG(known_strings)[ZEND_STR_ERROR_REPORTING], p) != NULL)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2570:  zend_string *function_name;",
          "2571:  zend_string *filename;",
          "2572:  zend_string *include_filename = NULL;",
          "2575:  array_init(return_value);",
          "",
          "[Removed Lines]",
          "2573:  zval stack_frame;",
          "",
          "[Added Lines]",
          "2573:  zval stack_frame, tmp;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2632:    } else {",
          "2633:     lineno = skip->opline->lineno;",
          "2634:    }",
          "",
          "[Removed Lines]",
          "2635:    add_assoc_str_ex(&stack_frame, \"file\", sizeof(\"file\")-1, zend_string_copy(filename));",
          "2636:    add_assoc_long_ex(&stack_frame, \"line\", sizeof(\"line\")-1, lineno);",
          "",
          "[Added Lines]",
          "2635:    ZVAL_STR_COPY(&tmp, filename);",
          "2636:    zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_FILE], &tmp);",
          "2637:    ZVAL_LONG(&tmp, lineno);",
          "2638:    zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_LINE], &tmp);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2650:      break;",
          "2651:     }",
          "2652:     if (prev->func && ZEND_USER_CODE(prev->func->common.type)) {",
          "2655:      break;",
          "2656:     }",
          "2657:     prev_call = prev;",
          "",
          "[Removed Lines]",
          "2653:      add_assoc_str_ex(&stack_frame, \"file\", sizeof(\"file\")-1, zend_string_copy(prev->func->op_array.filename));",
          "2654:      add_assoc_long_ex(&stack_frame, \"line\", sizeof(\"line\")-1, prev->opline->lineno);",
          "",
          "[Added Lines]",
          "2655:      ZVAL_STR_COPY(&tmp, prev->func->op_array.filename);",
          "2656:      zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_FILE], &tmp);",
          "2657:      ZVAL_LONG(&tmp, prev->opline->lineno);",
          "2658:      zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_LINE], &tmp);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2676:   }",
          "2678:   if (function_name) {",
          "2681:    if (object) {",
          "2682:     if (func->common.scope) {",
          "2684:     } else {",
          "2687:     }",
          "2688:     if ((options & DEBUG_BACKTRACE_PROVIDE_OBJECT) != 0) {",
          "2693:     }",
          "2696:    } else if (func->common.scope) {",
          "2699:    }",
          "2701:    if ((options & DEBUG_BACKTRACE_IGNORE_ARGS) == 0 &&",
          "2702:     func->type != ZEND_EVAL_CODE) {",
          "2707:    }",
          "2708:   } else {",
          "2710:    zend_bool build_filename_arg = 1;",
          "2713:    if (!ptr->func || !ZEND_USER_CODE(ptr->func->common.type) || ptr->opline->opcode != ZEND_INCLUDE_OR_EVAL) {",
          "2716:     build_filename_arg = 0;",
          "2717:    } else",
          "2718:    switch (ptr->opline->extended_value) {",
          "2719:     case ZEND_EVAL:",
          "2721:      build_filename_arg = 0;",
          "2722:      break;",
          "2723:     case ZEND_INCLUDE:",
          "2725:      break;",
          "2726:     case ZEND_REQUIRE:",
          "2728:      break;",
          "2729:     case ZEND_INCLUDE_ONCE:",
          "2731:      break;",
          "2732:     case ZEND_REQUIRE_ONCE:",
          "2734:      break;",
          "2735:     default:",
          "2739:      build_filename_arg = 0;",
          "2740:      break;",
          "2741:    }",
          "",
          "[Removed Lines]",
          "2679:    add_assoc_str_ex(&stack_frame, \"function\", sizeof(\"function\")-1, zend_string_copy(function_name));",
          "2683:      add_assoc_str_ex(&stack_frame, \"class\", sizeof(\"class\")-1, zend_string_copy(func->common.scope->name));",
          "2685:      add_assoc_str_ex(&stack_frame, \"class\", sizeof(\"class\")-1, zend_string_copy(object->ce->name));",
          "2689:      zval zv;",
          "2690:      ZVAL_OBJ(&zv, object);",
          "2691:      add_assoc_zval_ex(&stack_frame, \"object\", sizeof(\"object\")-1, &zv);",
          "2692:      Z_ADDREF(zv);",
          "2695:     add_assoc_string_ex(&stack_frame, \"type\", sizeof(\"type\")-1, \"->\");",
          "2697:     add_assoc_str_ex(&stack_frame, \"class\", sizeof(\"class\")-1, zend_string_copy(func->common.scope->name));",
          "2698:     add_assoc_string_ex(&stack_frame, \"type\", sizeof(\"type\")-1, \"::\");",
          "2703:     zval args;",
          "2705:     debug_backtrace_get_args(call, &args);",
          "2706:     add_assoc_zval_ex(&stack_frame, \"args\", sizeof(\"args\")-1, &args);",
          "2711:    const char *pseudo_function_name;",
          "2715:     pseudo_function_name = \"unknown\";",
          "2720:      pseudo_function_name = \"eval\";",
          "2724:      pseudo_function_name = \"include\";",
          "2727:      pseudo_function_name = \"require\";",
          "2730:      pseudo_function_name = \"include_once\";",
          "2733:      pseudo_function_name = \"require_once\";",
          "2738:      pseudo_function_name = \"unknown\";",
          "",
          "[Added Lines]",
          "2683:    ZVAL_STR_COPY(&tmp, function_name);",
          "2684:    zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_FUNCTION], &tmp);",
          "2688:      ZVAL_STR_COPY(&tmp, func->common.scope->name);",
          "2690:      ZVAL_STR_COPY(&tmp, object->ce->name);",
          "2693:     zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_CLASS], &tmp);",
          "2695:      ZVAL_OBJ(&tmp, object);",
          "2696:      zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_OBJECT], &tmp);",
          "2697:      Z_ADDREF(tmp);",
          "2700:     ZVAL_INTERNED_STR(&tmp, CG(known_strings)[ZEND_STR_OBJECT_OPERATOR]);",
          "2701:     zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_TYPE], &tmp);",
          "2703:     ZVAL_STR_COPY(&tmp, func->common.scope->name);",
          "2704:     zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_CLASS], &tmp);",
          "2705:     ZVAL_INTERNED_STR(&tmp, CG(known_strings)[ZEND_STR_PAAMAYIM_NEKUDOTAYIM]);",
          "2706:     zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_TYPE], &tmp);",
          "2712:     debug_backtrace_get_args(call, &tmp);",
          "2713:     zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_ARGS], &tmp);",
          "2718:    zend_string *pseudo_function_name;",
          "2722:     pseudo_function_name = CG(known_strings)[ZEND_STR_UNKNOWN];",
          "2727:      pseudo_function_name = CG(known_strings)[ZEND_STR_EVAL];",
          "2731:      pseudo_function_name = CG(known_strings)[ZEND_STR_INCLUDE];",
          "2734:      pseudo_function_name = CG(known_strings)[ZEND_STR_REQUIRE];",
          "2737:      pseudo_function_name = CG(known_strings)[ZEND_STR_INCLUDE_ONCE];",
          "2740:      pseudo_function_name = CG(known_strings)[ZEND_STR_REQUIRE_ONCE];",
          "2745:      pseudo_function_name = CG(known_strings)[ZEND_STR_UNKNOWN];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2749:        if we have called include in the frame above - this is the file we have included.",
          "2754:    }",
          "2757:   }",
          "2759:   zend_hash_next_index_insert_new(Z_ARRVAL_P(return_value), &stack_frame);",
          "",
          "[Removed Lines]",
          "2752:     add_next_index_str(&arg_array, zend_string_copy(include_filename));",
          "2753:     add_assoc_zval_ex(&stack_frame, \"args\", sizeof(\"args\")-1, &arg_array);",
          "2756:    add_assoc_string_ex(&stack_frame, \"function\", sizeof(\"function\")-1, (char *) pseudo_function_name);",
          "",
          "[Added Lines]",
          "2759:     ZVAL_STR_COPY(&tmp, include_filename);",
          "2760:     zend_hash_next_index_insert_new(Z_ARRVAL(arg_array), &tmp);",
          "2761:     zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_ARGS], &arg_array);",
          "2764:    ZVAL_INTERNED_STR(&tmp, pseudo_function_name);",
          "2765:    zend_hash_add_new(Z_ARRVAL(stack_frame), CG(known_strings)[ZEND_STR_FUNCTION], &tmp);",
          "",
          "---------------"
        ],
        "Zend/zend_closures.c||Zend/zend_closures.c": [
          "File: Zend/zend_closures.c -> Zend/zend_closures.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "271:  invoke->internal_function.handler = ZEND_MN(Closure___invoke);",
          "272:  invoke->internal_function.module = 0;",
          "273:  invoke->internal_function.scope = zend_ce_closure;",
          "275:  return invoke;",
          "276: }",
          "",
          "[Removed Lines]",
          "274:  invoke->internal_function.function_name = zend_string_init(ZEND_INVOKE_FUNC_NAME, sizeof(ZEND_INVOKE_FUNC_NAME)-1, 0);",
          "",
          "[Added Lines]",
          "274:  invoke->internal_function.function_name = CG(known_strings)[ZEND_STR_MAGIC_INVOKE];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:  if (closure->func.type == ZEND_USER_FUNCTION && closure->func.op_array.static_variables) {",
          "412:   HashTable *static_variables = closure->func.op_array.static_variables;",
          "413:   ZVAL_ARR(&val, zend_array_dup(static_variables));",
          "415:  }",
          "417:  if (Z_TYPE(closure->this_ptr) != IS_UNDEF) {",
          "418:   Z_ADDREF(closure->this_ptr);",
          "420:  }",
          "422:  if (arg_info &&",
          "",
          "[Removed Lines]",
          "414:   zend_hash_str_update(debug_info, \"static\", sizeof(\"static\")-1, &val);",
          "419:   zend_hash_str_update(debug_info, \"this\", sizeof(\"this\")-1, &closure->this_ptr);",
          "",
          "[Added Lines]",
          "414:   zend_hash_update(debug_info, CG(known_strings)[ZEND_STR_STATIC], &val);",
          "419:   zend_hash_update(debug_info, CG(known_strings)[ZEND_STR_THIS], &closure->this_ptr);",
          "",
          "---------------"
        ],
        "Zend/zend_compile.c||Zend/zend_compile.c": [
          "File: Zend/zend_compile.c -> Zend/zend_compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2544:   if (ast->kind != ZEND_AST_ZVAL",
          "2545:    && CG(active_op_array)->scope && CG(active_op_array)->this_var == (uint32_t)-1",
          "2546:   ) {",
          "2548:    CG(active_op_array)->this_var = lookup_cv(CG(active_op_array), key);",
          "2549:   }",
          "2550:  }",
          "",
          "[Removed Lines]",
          "2547:    zend_string *key = zend_string_init(\"this\", sizeof(\"this\") - 1, 0);",
          "",
          "[Added Lines]",
          "2547:    zend_string *key = CG(known_strings)[ZEND_STR_THIS];",
          "",
          "---------------"
        ],
        "Zend/zend_exceptions.c||Zend/zend_exceptions.c": [
          "File: Zend/zend_exceptions.c -> Zend/zend_exceptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:  ZVAL_OBJ(&zv, exception);",
          "88:  ex = &zv;",
          "89:  do {",
          "91:   while (Z_TYPE_P(ancestor) == IS_OBJECT) {",
          "92:    if (Z_OBJ_P(ancestor) == Z_OBJ_P(ex)) {",
          "93:     OBJ_RELEASE(add_previous);",
          "94:     return;",
          "95:    }",
          "97:   }",
          "98:   base_ce = i_get_exception_base(ex);",
          "100:   if (Z_TYPE_P(previous) == IS_NULL) {",
          "102:    GC_REFCOUNT(add_previous)--;",
          "103:    return;",
          "104:   }",
          "",
          "[Removed Lines]",
          "90:   ancestor = zend_read_property(i_get_exception_base(&pv), &pv, \"previous\", sizeof(\"previous\")-1, 1, &rv);",
          "96:    ancestor = zend_read_property(i_get_exception_base(ancestor), ancestor, \"previous\", sizeof(\"previous\")-1, 1, &rv);",
          "99:   previous = zend_read_property(base_ce, ex, \"previous\", sizeof(\"previous\")-1, 1, &rv);",
          "101:    zend_update_property(base_ce, ex, \"previous\", sizeof(\"previous\")-1, &pv);",
          "",
          "[Added Lines]",
          "90:   ancestor = zend_read_property_ex(i_get_exception_base(&pv), &pv, CG(known_strings)[ZEND_STR_PREVIOUS], 1, &rv);",
          "96:    ancestor = zend_read_property_ex(i_get_exception_base(ancestor), ancestor, CG(known_strings)[ZEND_STR_PREVIOUS], 1, &rv);",
          "99:   previous = zend_read_property_ex(base_ce, ex, CG(known_strings)[ZEND_STR_PREVIOUS], 1, &rv);",
          "101:    zend_update_property_ex(base_ce, ex, CG(known_strings)[ZEND_STR_PREVIOUS], &pv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "200: {",
          "202:  zend_object *object;",
          "203:  zval trace;",
          "204:  zend_class_entry *base_ce;",
          "",
          "[Removed Lines]",
          "201:  zval obj;",
          "",
          "[Added Lines]",
          "201:  zval obj, tmp;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219:  base_ce = i_get_exception_base(&obj);",
          "221:  if (EXPECTED(class_type != zend_ce_parse_error || !(filename = zend_get_compiled_filename()))) {",
          "224:  } else {",
          "227:  }",
          "230:  return object;",
          "231: }",
          "",
          "[Removed Lines]",
          "222:   zend_update_property_string(base_ce, &obj, \"file\", sizeof(\"file\")-1, zend_get_executed_filename());",
          "223:   zend_update_property_long(base_ce, &obj, \"line\", sizeof(\"line\")-1, zend_get_executed_lineno());",
          "225:   zend_update_property_str(base_ce, &obj, \"file\", sizeof(\"file\")-1, filename);",
          "226:   zend_update_property_long(base_ce, &obj, \"line\", sizeof(\"line\")-1, zend_get_compiled_lineno());",
          "228:  zend_update_property(base_ce, &obj, \"trace\", sizeof(\"trace\")-1, &trace);",
          "",
          "[Added Lines]",
          "222:   ZVAL_STRING(&tmp, zend_get_executed_filename());",
          "223:   zend_update_property_ex(base_ce, &obj, CG(known_strings)[ZEND_STR_FILE], &tmp);",
          "224:   zval_ptr_dtor(&tmp);",
          "225:   ZVAL_LONG(&tmp, zend_get_executed_lineno());",
          "226:   zend_update_property_ex(base_ce, &obj, CG(known_strings)[ZEND_STR_LINE], &tmp);",
          "228:   ZVAL_STR(&tmp, filename);",
          "229:   zend_update_property_ex(base_ce, &obj, CG(known_strings)[ZEND_STR_FILE], &tmp);",
          "230:   ZVAL_LONG(&tmp, zend_get_compiled_lineno());",
          "231:   zend_update_property_ex(base_ce, &obj, CG(known_strings)[ZEND_STR_LINE], &tmp);",
          "233:  zend_update_property_ex(base_ce, &obj, CG(known_strings)[ZEND_STR_TRACE], &trace);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "258: {",
          "259:  zend_string *message = NULL;",
          "260:  zend_long   code = 0;",
          "262:  zend_class_entry *base_ce;",
          "263:  int    argc = ZEND_NUM_ARGS();",
          "",
          "[Removed Lines]",
          "261:  zval  *object, *previous = NULL;",
          "",
          "[Added Lines]",
          "266:  zval  tmp, *object, *previous = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "280:  }",
          "282:  if (message) {",
          "284:  }",
          "286:  if (code) {",
          "288:  }",
          "290:  if (previous) {",
          "292:  }",
          "293: }",
          "299:  ZVAL_UNDEF(&value); \\",
          "301:  if(Z_TYPE_P(pvalue) != IS_UNDEF && Z_TYPE_P(pvalue) != type) { \\",
          "302:   zval tmp; \\",
          "304:   Z_OBJ_HANDLER_P(object, unset_property)(object, &tmp, NULL); \\",
          "305:   zval_ptr_dtor(&tmp); \\",
          "306:  }",
          "",
          "[Removed Lines]",
          "283:   zend_update_property_str(base_ce, object, \"message\", sizeof(\"message\")-1, message);",
          "287:   zend_update_property_long(base_ce, object, \"code\", sizeof(\"code\")-1, code);",
          "291:   zend_update_property(base_ce, object, \"previous\", sizeof(\"previous\")-1, previous);",
          "298: #define CHECK_EXC_TYPE(name, type) \\",
          "300:  pvalue = zend_read_property(i_get_exception_base(object), (object), name, sizeof(name) - 1, 1, &value); \\",
          "303:   ZVAL_STRINGL(&tmp, name, sizeof(name) - 1); \\",
          "",
          "[Added Lines]",
          "288:   ZVAL_STR(&tmp, message);",
          "289:   zend_update_property_ex(base_ce, object, CG(known_strings)[ZEND_STR_MESSAGE], &tmp);",
          "293:   ZVAL_LONG(&tmp, code);",
          "294:   zend_update_property_ex(base_ce, object, CG(known_strings)[ZEND_STR_CODE], &tmp);",
          "298:   zend_update_property_ex(base_ce, object, CG(known_strings)[ZEND_STR_PREVIOUS], previous);",
          "305: #define CHECK_EXC_TYPE(id, type) \\",
          "307:  pvalue = zend_read_property_ex(i_get_exception_base(object), (object), CG(known_strings)[id], 1, &value); \\",
          "310:   ZVAL_STR_COPY(&tmp, CG(known_strings)[id]); \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "309: {",
          "310:  zval value, *pvalue;",
          "311:  zval *object = getThis();",
          "319: }",
          "",
          "[Removed Lines]",
          "312:  CHECK_EXC_TYPE(\"message\", IS_STRING);",
          "313:  CHECK_EXC_TYPE(\"string\", IS_STRING);",
          "314:  CHECK_EXC_TYPE(\"code\", IS_LONG);",
          "315:  CHECK_EXC_TYPE(\"file\", IS_STRING);",
          "316:  CHECK_EXC_TYPE(\"line\", IS_LONG);",
          "317:  CHECK_EXC_TYPE(\"trace\", IS_ARRAY);",
          "318:  CHECK_EXC_TYPE(\"previous\", IS_OBJECT);",
          "",
          "[Added Lines]",
          "319:  CHECK_EXC_TYPE(ZEND_STR_MESSAGE,  IS_STRING);",
          "320:  CHECK_EXC_TYPE(ZEND_STR_STRING,   IS_STRING);",
          "321:  CHECK_EXC_TYPE(ZEND_STR_CODE,     IS_LONG);",
          "322:  CHECK_EXC_TYPE(ZEND_STR_FILE,     IS_STRING);",
          "323:  CHECK_EXC_TYPE(ZEND_STR_LINE,     IS_LONG);",
          "324:  CHECK_EXC_TYPE(ZEND_STR_TRACE,    IS_ARRAY);",
          "325:  CHECK_EXC_TYPE(ZEND_STR_PREVIOUS, IS_OBJECT);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "325: {",
          "326:  char  *message = NULL, *filename = NULL;",
          "327:  zend_long   code = 0, severity = E_ERROR, lineno;",
          "329:  int    argc = ZEND_NUM_ARGS();",
          "330:  size_t message_len, filename_len;",
          "",
          "[Removed Lines]",
          "328:  zval  *object, *previous = NULL;",
          "",
          "[Added Lines]",
          "335:  zval   tmp, *object, *previous = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "346:  object = getThis();",
          "348:  if (message) {",
          "350:  }",
          "352:  if (code) {",
          "354:  }",
          "356:  if (previous) {",
          "358:  }",
          "362:  if (argc >= 4) {",
          "364:      if (argc < 5) {",
          "366:      }",
          "368:  }",
          "369: }",
          "",
          "[Removed Lines]",
          "349:   zend_update_property_string(zend_ce_exception, object, \"message\", sizeof(\"message\")-1, message);",
          "353:   zend_update_property_long(zend_ce_exception, object, \"code\", sizeof(\"code\")-1, code);",
          "357:   zend_update_property(zend_ce_exception, object, \"previous\", sizeof(\"previous\")-1, previous);",
          "360:  zend_update_property_long(zend_ce_error_exception, object, \"severity\", sizeof(\"severity\")-1, severity);",
          "363:      zend_update_property_string(zend_ce_exception, object, \"file\", sizeof(\"file\")-1, filename);",
          "367:   zend_update_property_long(zend_ce_exception, object, \"line\", sizeof(\"line\")-1, lineno);",
          "",
          "[Added Lines]",
          "356:   ZVAL_STRING(&tmp, message);",
          "357:   zend_update_property_ex(zend_ce_exception, object, CG(known_strings)[ZEND_STR_MESSAGE], &tmp);",
          "358:   zval_ptr_dtor(&tmp);",
          "362:   ZVAL_LONG(&tmp, code);",
          "363:   zend_update_property_ex(zend_ce_exception, object, CG(known_strings)[ZEND_STR_CODE], &tmp);",
          "367:   zend_update_property_ex(zend_ce_exception, object, CG(known_strings)[ZEND_STR_PREVIOUS], previous);",
          "370:  ZVAL_LONG(&tmp, severity);",
          "371:  zend_update_property_ex(zend_ce_exception, object, CG(known_strings)[ZEND_STR_SEVERITY], &tmp);",
          "374:   ZVAL_STRING(&tmp, filename);",
          "375:   zend_update_property_ex(zend_ce_exception, object, CG(known_strings)[ZEND_STR_FILE], &tmp);",
          "376:   zval_ptr_dtor(&tmp);",
          "380:   ZVAL_LONG(&tmp, lineno);",
          "381:   zend_update_property_ex(zend_ce_exception, object, CG(known_strings)[ZEND_STR_LINE], &tmp);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "374:   return; \\",
          "375:  }",
          "",
          "[Removed Lines]",
          "377: #define GET_PROPERTY(object, name) \\",
          "378:  zend_read_property(i_get_exception_base(object), (object), name, sizeof(name) - 1, 0, &rv)",
          "379: #define GET_PROPERTY_SILENT(object, name) \\",
          "380:  zend_read_property(i_get_exception_base(object), (object), name, sizeof(name) - 1, 1, &rv)",
          "",
          "[Added Lines]",
          "391: #define GET_PROPERTY(object, id) \\",
          "392:  zend_read_property_ex(i_get_exception_base(object), (object), CG(known_strings)[id], 0, &rv)",
          "393: #define GET_PROPERTY_SILENT(object, id) \\",
          "394:  zend_read_property_ex(i_get_exception_base(object), (object), CG(known_strings)[id], 1, &rv)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "388:  DEFAULT_0_PARAMS;",
          "391: }",
          "",
          "[Removed Lines]",
          "390:  ZVAL_COPY(return_value, GET_PROPERTY(getThis(), \"file\"));",
          "",
          "[Added Lines]",
          "404:  ZVAL_COPY(return_value, GET_PROPERTY(getThis(), ZEND_STR_FILE));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "400:  DEFAULT_0_PARAMS;",
          "403: }",
          "",
          "[Removed Lines]",
          "402:  ZVAL_COPY(return_value, GET_PROPERTY(getThis(), \"line\"));",
          "",
          "[Added Lines]",
          "416:  ZVAL_COPY(return_value, GET_PROPERTY(getThis(), ZEND_STR_LINE));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "412:  DEFAULT_0_PARAMS;",
          "415: }",
          "",
          "[Removed Lines]",
          "414:  ZVAL_COPY(return_value, GET_PROPERTY(getThis(), \"message\"));",
          "",
          "[Added Lines]",
          "428:  ZVAL_COPY(return_value, GET_PROPERTY(getThis(), ZEND_STR_MESSAGE));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "424:  DEFAULT_0_PARAMS;",
          "427: }",
          "",
          "[Removed Lines]",
          "426:  ZVAL_COPY(return_value, GET_PROPERTY(getThis(), \"code\"));",
          "",
          "[Added Lines]",
          "440:  ZVAL_COPY(return_value, GET_PROPERTY(getThis(), ZEND_STR_CODE));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "436:  DEFAULT_0_PARAMS;",
          "439: }",
          "",
          "[Removed Lines]",
          "438:  ZVAL_COPY(return_value, GET_PROPERTY(getThis(), \"trace\"));",
          "",
          "[Added Lines]",
          "452:  ZVAL_COPY(return_value, GET_PROPERTY(getThis(), ZEND_STR_TRACE));",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "448:  DEFAULT_0_PARAMS;",
          "451: }",
          "454: #define TRACE_APPEND_KEY(key) do {                                          \\",
          "456:   if (tmp) {                                                          \\",
          "457:    if (Z_TYPE_P(tmp) != IS_STRING) {                               \\",
          "459:     smart_str_appends(str, \"[unknown]\");                        \\",
          "460:    } else {                                                        \\",
          "462:    }                                                               \\",
          "463:   } \\",
          "464:  } while (0)",
          "468: {",
          "",
          "[Removed Lines]",
          "450:  ZVAL_COPY(return_value, GET_PROPERTY(getThis(), \"severity\"));",
          "455:   tmp = zend_hash_str_find(ht, key, sizeof(key)-1);                   \\",
          "458:     zend_error(E_WARNING, \"Value for %s is no string\", key);    \\",
          "461:     smart_str_appends(str, Z_STRVAL_P(tmp));   \\",
          "",
          "[Added Lines]",
          "464:  ZVAL_COPY(return_value, GET_PROPERTY(getThis(), ZEND_STR_SEVERITY));",
          "469:   tmp = zend_hash_find(ht, key);                                      \\",
          "472:     zend_error(E_WARNING, \"Value for %s is no string\",          \\",
          "473:      ZSTR_VAL(key));                                         \\",
          "476:     smart_str_appends(str, Z_STRVAL_P(tmp));                    \\",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "530:  smart_str_append_long(str, num);",
          "531:  smart_str_appendc(str, ' ');",
          "534:  if (file) {",
          "535:   if (Z_TYPE_P(file) != IS_STRING) {",
          "536:    zend_error(E_WARNING, \"Function name is no string\");",
          "537:    smart_str_appends(str, \"[unknown function]\");",
          "538:   } else{",
          "539:    zend_long line;",
          "541:    if (tmp) {",
          "542:     if (Z_TYPE_P(tmp) == IS_LONG) {",
          "543:      line = Z_LVAL_P(tmp);",
          "",
          "[Removed Lines]",
          "533:  file = zend_hash_str_find(ht, \"file\", sizeof(\"file\")-1);",
          "540:    tmp = zend_hash_str_find(ht, \"line\", sizeof(\"line\")-1);",
          "",
          "[Added Lines]",
          "547:  file = zend_hash_find(ht, CG(known_strings)[ZEND_STR_FILE]);",
          "554:    tmp = zend_hash_find(ht, CG(known_strings)[ZEND_STR_LINE]);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "556:  } else {",
          "557:   smart_str_appends(str, \"[internal function]: \");",
          "558:  }",
          "562:  smart_str_appendc(str, '(');",
          "564:  if (tmp) {",
          "565:   if (Z_TYPE_P(tmp) == IS_ARRAY) {",
          "566:    size_t last_len = ZSTR_LEN(str->s);",
          "",
          "[Removed Lines]",
          "559:  TRACE_APPEND_KEY(\"class\");",
          "560:  TRACE_APPEND_KEY(\"type\");",
          "561:  TRACE_APPEND_KEY(\"function\");",
          "563:  tmp = zend_hash_str_find(ht, \"args\", sizeof(\"args\")-1);",
          "",
          "[Added Lines]",
          "573:  TRACE_APPEND_KEY(CG(known_strings)[ZEND_STR_CLASS]);",
          "574:  TRACE_APPEND_KEY(CG(known_strings)[ZEND_STR_TYPE]);",
          "575:  TRACE_APPEND_KEY(CG(known_strings)[ZEND_STR_FUNCTION]);",
          "577:  tmp = zend_hash_find(ht, CG(known_strings)[ZEND_STR_ARGS]);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "597:  object = getThis();",
          "598:  base_ce = i_get_exception_base(object);",
          "601:  if (Z_TYPE_P(trace) != IS_ARRAY) {",
          "602:   RETURN_FALSE;",
          "603:  }",
          "",
          "[Removed Lines]",
          "600:  trace = zend_read_property(base_ce, object, \"trace\", sizeof(\"trace\")-1, 1, &rv);",
          "",
          "[Added Lines]",
          "614:  trace = zend_read_property_ex(base_ce, object, CG(known_strings)[ZEND_STR_TRACE], 1, &rv);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "628:  DEFAULT_0_PARAMS;",
          "",
          "[Removed Lines]",
          "630:  ZVAL_COPY(return_value, GET_PROPERTY_SILENT(getThis(), \"previous\"));",
          "",
          "[Added Lines]",
          "644:  ZVAL_COPY(return_value, GET_PROPERTY_SILENT(getThis(), ZEND_STR_PREVIOUS));",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "662:  zend_class_entry *base_ce;",
          "663:  zend_string *str;",
          "664:  zend_fcall_info fci;",
          "666:  zend_string *fname;",
          "668:  DEFAULT_0_PARAMS;",
          "",
          "[Removed Lines]",
          "665:  zval rv;",
          "",
          "[Added Lines]",
          "679:  zval rv, tmp;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "675:  while (exception && Z_TYPE_P(exception) == IS_OBJECT && instanceof_function(Z_OBJCE_P(exception), zend_ce_throwable)) {",
          "676:   zend_string *prev_str = str;",
          "681:   fci.size = sizeof(fci);",
          "682:   ZVAL_STR(&fci.function_name, fname);",
          "",
          "[Removed Lines]",
          "677:   zend_string *message = zval_get_string(GET_PROPERTY(exception, \"message\"));",
          "678:   zend_string *file = zval_get_string(GET_PROPERTY(exception, \"file\"));",
          "679:   zend_long line = zval_get_long(GET_PROPERTY(exception, \"line\"));",
          "",
          "[Added Lines]",
          "691:   zend_string *message = zval_get_string(GET_PROPERTY(exception, ZEND_STR_MESSAGE));",
          "692:   zend_string *file = zval_get_string(GET_PROPERTY(exception, ZEND_STR_FILE));",
          "693:   zend_long line = zval_get_long(GET_PROPERTY(exception, ZEND_STR_LINE));",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "718:   zend_string_release(file);",
          "719:   zval_ptr_dtor(&trace);",
          "722:  }",
          "723:  zend_string_release(fname);",
          "",
          "[Removed Lines]",
          "721:   exception = GET_PROPERTY(exception, \"previous\");",
          "",
          "[Added Lines]",
          "735:   exception = GET_PROPERTY(exception, ZEND_STR_PREVIOUS);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "732:  RETURN_STR(str);",
          "733: }",
          "",
          "[Removed Lines]",
          "730:  zend_update_property_str(base_ce, exception, \"string\", sizeof(\"string\")-1, str);",
          "",
          "[Added Lines]",
          "744:  ZVAL_STR(&tmp, str);",
          "745:  zend_update_property_ex(base_ce, exception, CG(known_strings)[ZEND_STR_STRING], &tmp);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "870: {",
          "873:  if (exception_ce) {",
          "874:   if (!instanceof_function(exception_ce, zend_ce_throwable)) {",
          "",
          "[Removed Lines]",
          "871:  zval ex;",
          "",
          "[Added Lines]",
          "886:  zval ex, tmp;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "884:  if (message) {",
          "886:  }",
          "887:  if (code) {",
          "889:  }",
          "891:  zend_throw_exception_internal(&ex);",
          "",
          "[Removed Lines]",
          "885:   zend_update_property_string(exception_ce, &ex, \"message\", sizeof(\"message\")-1, message);",
          "888:   zend_update_property_long(exception_ce, &ex, \"code\", sizeof(\"code\")-1, code);",
          "",
          "[Added Lines]",
          "900:   ZVAL_STRING(&tmp, message);",
          "901:   zend_update_property_ex(exception_ce, &ex, CG(known_strings)[ZEND_STR_MESSAGE], &tmp);",
          "902:   zval_ptr_dtor(&tmp);",
          "905:   ZVAL_LONG(&tmp, code);",
          "906:   zend_update_property_ex(exception_ce, &ex, CG(known_strings)[ZEND_STR_CODE], &tmp);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "912: {",
          "914:  zend_object *obj = zend_throw_exception(exception_ce, message, code);",
          "915:  ZVAL_OBJ(&ex, obj);",
          "917:  return obj;",
          "918: }",
          "",
          "[Removed Lines]",
          "913:  zval ex;",
          "916:  zend_update_property_long(zend_ce_error_exception, &ex, \"severity\", sizeof(\"severity\")-1, severity);",
          "",
          "[Added Lines]",
          "931:  zval ex, tmp;",
          "934:  ZVAL_LONG(&tmp, severity);",
          "935:  zend_update_property_ex(zend_ce_error_exception, &ex, CG(known_strings)[ZEND_STR_SEVERITY], &tmp);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "948:  ce_exception = Z_OBJCE(exception);",
          "949:  EG(exception) = NULL;",
          "950:  if (ce_exception == zend_ce_parse_error) {",
          "955:   zend_error_helper(E_PARSE, ZSTR_VAL(file), line, \"%s\", ZSTR_VAL(message));",
          "",
          "[Removed Lines]",
          "951:   zend_string *message = zval_get_string(GET_PROPERTY(&exception, \"message\"));",
          "952:   zend_string *file = zval_get_string(GET_PROPERTY_SILENT(&exception, \"file\"));",
          "953:   zend_long line = zval_get_long(GET_PROPERTY_SILENT(&exception, \"line\"));",
          "",
          "[Added Lines]",
          "970:   zend_string *message = zval_get_string(GET_PROPERTY(&exception, ZEND_STR_MESSAGE));",
          "971:   zend_string *file = zval_get_string(GET_PROPERTY_SILENT(&exception, ZEND_STR_FILE));",
          "972:   zend_long line = zval_get_long(GET_PROPERTY_SILENT(&exception, ZEND_STR_LINE));",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "966:    if (Z_TYPE(tmp) != IS_STRING) {",
          "967:     zend_error(E_WARNING, \"%s::__toString() must return a string\", ZSTR_VAL(ce_exception->name));",
          "968:    } else {",
          "970:    }",
          "971:   }",
          "972:   zval_ptr_dtor(&tmp);",
          "",
          "[Removed Lines]",
          "969:     zend_update_property(i_get_exception_base(&exception), &exception, \"string\", sizeof(\"string\")-1, &tmp);",
          "",
          "[Added Lines]",
          "988:     zend_update_property_ex(i_get_exception_base(&exception), &exception, CG(known_strings)[ZEND_STR_STRING], &tmp);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "977:    ZVAL_OBJ(&zv, EG(exception));",
          "979:    if (instanceof_function(ce_exception, zend_ce_exception) || instanceof_function(ce_exception, zend_ce_error)) {",
          "982:    }",
          "984:    zend_error_va(E_WARNING, (file && ZSTR_LEN(file) > 0) ? ZSTR_VAL(file) : NULL, line,",
          "",
          "[Removed Lines]",
          "980:     file = zval_get_string(GET_PROPERTY_SILENT(&zv, \"file\"));",
          "981:     line = zval_get_long(GET_PROPERTY_SILENT(&zv, \"line\"));",
          "",
          "[Added Lines]",
          "999:     file = zval_get_string(GET_PROPERTY_SILENT(&zv, ZEND_STR_FILE));",
          "1000:     line = zval_get_long(GET_PROPERTY_SILENT(&zv, ZEND_STR_LINE));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "990:    }",
          "991:   }",
          "997:   zend_error_va(severity, (file && ZSTR_LEN(file) > 0) ? ZSTR_VAL(file) : NULL, line,",
          "998:    \"Uncaught %s\\n  thrown\", ZSTR_VAL(str));",
          "",
          "[Removed Lines]",
          "993:   str = zval_get_string(GET_PROPERTY_SILENT(&exception, \"string\"));",
          "994:   file = zval_get_string(GET_PROPERTY_SILENT(&exception, \"file\"));",
          "995:   line = zval_get_long(GET_PROPERTY_SILENT(&exception, \"line\"));",
          "",
          "[Added Lines]",
          "1012:   str = zval_get_string(GET_PROPERTY_SILENT(&exception, ZEND_STR_STRING));",
          "1013:   file = zval_get_string(GET_PROPERTY_SILENT(&exception, ZEND_STR_FILE));",
          "1014:   line = zval_get_long(GET_PROPERTY_SILENT(&exception, ZEND_STR_LINE));",
          "",
          "---------------"
        ],
        "Zend/zend_execute.c||Zend/zend_execute.c": [
          "File: Zend/zend_execute.c -> Zend/zend_execute.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2228:  if (UNEXPECTED(op_array->this_var != (uint32_t)-1) && EXPECTED(Z_TYPE(EX(This)) == IS_OBJECT)) {",
          "2229:   GC_REFCOUNT(Z_OBJ(EX(This)))++;",
          "2231:    GC_REFCOUNT(Z_OBJ(EX(This)))--;",
          "2232:   }",
          "2233:  }",
          "",
          "[Removed Lines]",
          "2230:   if (!zend_hash_str_add(EX(symbol_table), \"this\", sizeof(\"this\")-1, &EX(This))) {",
          "",
          "[Added Lines]",
          "2230:   if (!zend_hash_add(EX(symbol_table), CG(known_strings)[ZEND_STR_THIS], &EX(This))) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2256:  if (EX_CALL_INFO() & ZEND_CALL_HAS_SYMBOL_TABLE) {",
          "2257:   if (UNEXPECTED(op_array->this_var != (uint32_t)-1) && EXPECTED(Z_TYPE(EX(This)) == IS_OBJECT)) {",
          "2258:    GC_REFCOUNT(Z_OBJ(EX(This)))++;",
          "2260:     GC_REFCOUNT(Z_OBJ(EX(This)))--;",
          "2261:    }",
          "2262:   }",
          "",
          "[Removed Lines]",
          "2259:    if (!zend_hash_str_add(EX(symbol_table), \"this\", sizeof(\"this\")-1, &EX(This))) {",
          "",
          "[Added Lines]",
          "2259:    if (!zend_hash_add(EX(symbol_table), CG(known_strings)[ZEND_STR_THIS], &EX(This))) {",
          "",
          "---------------"
        ],
        "Zend/zend_execute_API.c||Zend/zend_execute_API.c": [
          "File: Zend/zend_execute_API.c -> Zend/zend_execute_API.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "956:  }",
          "958:  if (!EG(autoload_func)) {",
          "960:   if (func) {",
          "961:    EG(autoload_func) = func;",
          "962:   } else {",
          "",
          "[Removed Lines]",
          "959:   zend_function *func = zend_hash_str_find_ptr(EG(function_table), ZEND_AUTOLOAD_FUNC_NAME, sizeof(ZEND_AUTOLOAD_FUNC_NAME) - 1);",
          "",
          "[Added Lines]",
          "959:   zend_function *func = zend_hash_find_ptr(EG(function_table), CG(known_strings)[ZEND_STR_MAGIC_AUTOLOAD]);",
          "",
          "---------------"
        ],
        "Zend/zend_globals.h||Zend/zend_globals.h": [
          "File: Zend/zend_globals.h -> Zend/zend_globals.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "114:  zend_string *empty_string;",
          "115:  zend_string *one_char_string[256];",
          "117:  HashTable interned_strings;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:  zend_string **known_strings;",
          "117:  uint32_t    known_strings_count;",
          "",
          "---------------"
        ],
        "Zend/zend_language_parser.y||Zend/zend_language_parser.y": [
          "File: Zend/zend_language_parser.y -> Zend/zend_language_parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1020: class_name:",
          "1021:   T_STATIC",
          "1023:      $$ = zend_ast_create_zval_ex(&zv, ZEND_NAME_NOT_FQ); }",
          "1024:  | name { $$ = $1; }",
          "1025: ;",
          "",
          "[Removed Lines]",
          "1022:    { zval zv; ZVAL_STRINGL(&zv, \"static\", sizeof(\"static\")-1);",
          "",
          "[Added Lines]",
          "1022:    { zval zv; ZVAL_INTERNED_STR(&zv, CG(known_strings)[ZEND_STR_STATIC]);",
          "",
          "---------------"
        ],
        "Zend/zend_object_handlers.c||Zend/zend_object_handlers.c": [
          "File: Zend/zend_object_handlers.c -> Zend/zend_object_handlers.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1713:  ce = Z_OBJCE_P(obj);",
          "1716:   return FAILURE;",
          "1717:  }",
          "",
          "[Removed Lines]",
          "1715:  if ((func = zend_hash_str_find(&ce->function_table, ZEND_INVOKE_FUNC_NAME, sizeof(ZEND_INVOKE_FUNC_NAME)-1)) == NULL) {",
          "",
          "[Added Lines]",
          "1715:  if ((func = zend_hash_find(&ce->function_table, CG(known_strings)[ZEND_STR_MAGIC_INVOKE])) == NULL) {",
          "",
          "---------------"
        ],
        "Zend/zend_operators.c||Zend/zend_operators.c": [
          "File: Zend/zend_operators.c -> Zend/zend_operators.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "677:    zval tmp;",
          "678:    ZVAL_COPY_VALUE(&tmp, op);",
          "679:    object_init(op);",
          "681:    break;",
          "682:   }",
          "683:  }",
          "",
          "[Removed Lines]",
          "680:    zend_hash_str_add_new(Z_OBJPROP_P(op), \"scalar\", sizeof(\"scalar\")-1, &tmp);",
          "",
          "[Added Lines]",
          "680:    zend_hash_add_new(Z_OBJPROP_P(op), CG(known_strings)[ZEND_STR_SCALAR], &tmp);",
          "",
          "---------------"
        ],
        "Zend/zend_string.c||Zend/zend_string.c": [
          "File: Zend/zend_string.c -> Zend/zend_string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: }",
          "43: #endif",
          "45: void zend_interned_strings_init(void)",
          "46: {",
          "47: #ifndef ZTS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: ZEND_API uint32_t zend_intern_known_strings(const char **strings, uint32_t count)",
          "46: {",
          "47:  uint32_t i, old_count = CG(known_strings_count);",
          "49:  CG(known_strings) = perealloc(CG(known_strings), sizeof(char*) * (old_count + count), 1);",
          "50:  for (i = 0; i < count; i++) {",
          "51: #ifndef ZTS",
          "52:   zend_string *str = zend_string_init(strings[i], strlen(strings[i]), 1);",
          "53:   CG(known_strings)[CG(known_strings_count) + i] =",
          "54:    zend_new_interned_string_int(str);",
          "55: #else",
          "56:   CG(known_strings)[CG(known_strings_count) + i] =",
          "57:    zend_zts_interned_string_init(strings[i], strlen(strings[i]));",
          "58: #endif",
          "59:  }",
          "60:  CG(known_strings_count) = old_count + count;",
          "61:  return old_count;",
          "62: }",
          "64: static const char *known_strings[] = {",
          "65: #define _ZEND_STR_DSC(id, str) str,",
          "66: ZEND_KNOWN_STRINGS(_ZEND_STR_DSC)",
          "67: #undef _ZEND_STR_DSC",
          "68:  NULL",
          "69: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64:  memset(CG(one_char_string), 0, sizeof(CG(one_char_string)));",
          "66:  zend_new_interned_string = zend_new_interned_string_int;",
          "67:  zend_interned_strings_snapshot = zend_interned_strings_snapshot_int;",
          "68:  zend_interned_strings_restore = zend_interned_strings_restore_int;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:  CG(known_strings) = NULL;",
          "94:  CG(known_strings_count) = 0;",
          "95:  zend_intern_known_strings(known_strings, (sizeof(known_strings) / sizeof(known_strings[0])) - 1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72: {",
          "73: #ifndef ZTS",
          "74:  zend_hash_destroy(&CG(interned_strings));",
          "75: #endif",
          "76: }",
          "78: static zend_string *zend_new_interned_string_int(zend_string *str)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: #else",
          "107:  uint32_t i;",
          "109:  for (i = 0; i < CG(known_strings_count); i++) {",
          "110:   zend_zts_interned_string_free(&CG(known_strings)[i]);",
          "111:  }",
          "113:  free(CG(known_strings));",
          "114:  CG(known_strings) = NULL;",
          "115:  CG(known_strings_count) = 0;",
          "",
          "---------------"
        ],
        "Zend/zend_string.h||Zend/zend_string.h": [
          "File: Zend/zend_string.h -> Zend/zend_string.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "358: #endif",
          "359: }",
          "362: {",
          "363:  zend_string *str;",
          "371:  zend_string_hash_val(str);",
          "372:  GC_FLAGS(str) |= IS_STR_INTERNED;",
          "375: }",
          "378: {",
          "379:  if (NULL != *s) {",
          "380:   free(*s);",
          "382:  }",
          "383: }",
          "",
          "[Removed Lines]",
          "361: static zend_always_inline void zend_interned_empty_string_init(zend_string **s)",
          "365:  str = zend_string_alloc(sizeof(\"\")-1, 1);",
          "366:  ZSTR_VAL(str)[0] = '\\000';",
          "368: #ifndef ZTS",
          "370: #else",
          "374: #endif",
          "377: static zend_always_inline void zend_interned_empty_string_free(zend_string **s)",
          "",
          "[Added Lines]",
          "361: #ifdef ZTS",
          "362: static zend_always_inline zend_string* zend_zts_interned_string_init(const char *val, size_t len)",
          "366:  str = zend_string_init(val, len, 1);",
          "370:  return str;",
          "373: static zend_always_inline void zend_zts_interned_string_free(zend_string **s)",
          "380: #endif",
          "382: #define ZEND_KNOWN_STRINGS(_) \\",
          "383:  _(ZEND_STR_FILE,                   \"file\") \\",
          "384:  _(ZEND_STR_LINE,                   \"line\") \\",
          "385:  _(ZEND_STR_FUNCTION,               \"function\") \\",
          "386:  _(ZEND_STR_CLASS,                  \"class\") \\",
          "387:  _(ZEND_STR_OBJECT,                 \"object\") \\",
          "388:  _(ZEND_STR_TYPE,                   \"type\") \\",
          "389:  _(ZEND_STR_OBJECT_OPERATOR,        \"->\") \\",
          "390:  _(ZEND_STR_PAAMAYIM_NEKUDOTAYIM,   \"::\") \\",
          "391:  _(ZEND_STR_ARGS,                   \"args\") \\",
          "392:  _(ZEND_STR_UNKNOWN,                \"unknown\") \\",
          "393:  _(ZEND_STR_EVAL,                   \"eval\") \\",
          "394:  _(ZEND_STR_INCLUDE,                \"include\") \\",
          "395:  _(ZEND_STR_REQUIRE,                \"require\") \\",
          "396:  _(ZEND_STR_INCLUDE_ONCE,           \"include_once\") \\",
          "397:  _(ZEND_STR_REQUIRE_ONCE,           \"require_once\") \\",
          "398:  _(ZEND_STR_SCALAR,                 \"scalar\") \\",
          "399:  _(ZEND_STR_ERROR_REPORTING,        \"error_reporting\") \\",
          "400:  _(ZEND_STR_STATIC,                 \"static\") \\",
          "401:  _(ZEND_STR_THIS,                   \"this\") \\",
          "402:  _(ZEND_STR_VALUE,                  \"value\") \\",
          "403:  _(ZEND_STR_KEY,                    \"key\") \\",
          "404:  _(ZEND_STR_MAGIC_AUTOLOAD,         \"__autoload\") \\",
          "405:  _(ZEND_STR_MAGIC_INVOKE,           \"__invoke\") \\",
          "406:  _(ZEND_STR_PREVIOUS,               \"previous\") \\",
          "407:  _(ZEND_STR_CODE,                   \"code\") \\",
          "408:  _(ZEND_STR_MESSAGE,                \"message\") \\",
          "409:  _(ZEND_STR_SEVERITY,               \"severity\") \\",
          "410:  _(ZEND_STR_STRING,                 \"string\") \\",
          "411:  _(ZEND_STR_TRACE,                  \"trace\") \\",
          "414: typedef enum _zend_known_string_id {",
          "415: #define _ZEND_STR_ID(id, str) id,",
          "416: ZEND_KNOWN_STRINGS(_ZEND_STR_ID)",
          "417: #undef _ZEND_STR_ID",
          "418:  ZEND_STR_LAST_KNOWN",
          "419: } zend_known_string_id;",
          "421: ZEND_API uint32_t zend_intern_known_strings(const char **strings, uint32_t count);",
          "",
          "---------------"
        ],
        "Zend/zend_vm_def.h||Zend/zend_vm_def.h": [
          "File: Zend/zend_vm_def.h -> Zend/zend_vm_def.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5298:     if (Z_TYPE_P(expr) != IS_ARRAY) {",
          "5299:      object_init(result);",
          "5300:      if (Z_TYPE_P(expr) != IS_NULL) {",
          "5302:       if (OP1_TYPE == IS_CONST) {",
          "5303:        if (UNEXPECTED(Z_OPT_COPYABLE_P(expr))) {",
          "5304:         zval_copy_ctor_func(expr);",
          "",
          "[Removed Lines]",
          "5301:       expr = zend_hash_str_add_new(Z_OBJPROP_P(result), \"scalar\", sizeof(\"scalar\")-1, expr);",
          "",
          "[Added Lines]",
          "5301:       expr = zend_hash_add_new(Z_OBJPROP_P(result), CG(known_strings)[ZEND_STR_SCALAR], expr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6636:   do {",
          "6637:    EG(error_reporting) = 0;",
          "6638:    if (!EG(error_reporting_ini_entry)) {",
          "6640:     if (p) {",
          "6641:      EG(error_reporting_ini_entry) = p;",
          "6642:     } else {",
          "",
          "[Removed Lines]",
          "6639:     zend_ini_entry *p = zend_hash_str_find_ptr(EG(ini_directives), \"error_reporting\", sizeof(\"error_reporting\")-1);",
          "",
          "[Added Lines]",
          "6639:     zend_ini_entry *p = zend_hash_find_ptr(EG(ini_directives), CG(known_strings)[ZEND_STR_ERROR_REPORTING]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6648:      ALLOC_HASHTABLE(EG(modified_ini_directives));",
          "6649:      zend_hash_init(EG(modified_ini_directives), 8, NULL, NULL, 0);",
          "6650:     }",
          "6652:      EG(error_reporting_ini_entry)->orig_value = EG(error_reporting_ini_entry)->value;",
          "6653:      EG(error_reporting_ini_entry)->orig_modifiable = EG(error_reporting_ini_entry)->modifiable;",
          "6654:      EG(error_reporting_ini_entry)->modified = 1;",
          "",
          "[Removed Lines]",
          "6651:     if (EXPECTED(zend_hash_str_add_ptr(EG(modified_ini_directives), \"error_reporting\", sizeof(\"error_reporting\")-1, EG(error_reporting_ini_entry)) != NULL)) {",
          "",
          "[Added Lines]",
          "6651:     if (EXPECTED(zend_hash_add_ptr(EG(modified_ini_directives), CG(known_strings)[ZEND_STR_ERROR_REPORTING], EG(error_reporting_ini_entry)) != NULL)) {",
          "",
          "---------------"
        ],
        "ext/opcache/ZendAccelerator.c||ext/opcache/ZendAccelerator.c": [
          "File: ext/opcache/ZendAccelerator.c -> ext/opcache/ZendAccelerator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:   s[1] = 0;",
          "524:   CG(one_char_string)[j] = accel_new_interned_string(zend_string_init(s, 1, 0));",
          "525:  }",
          "528:  for (idx = 0; idx < CG(function_table)->nNumUsed; idx++) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "526:  for (j = 0; j < CG(known_strings_count); j++) {",
          "527:   CG(known_strings)[j] = accel_new_interned_string(CG(known_strings)[j]);",
          "528:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e416bba90860a7037cfa66d6725dc33a3436bea",
      "candidate_info": {
        "commit_hash": "3e416bba90860a7037cfa66d6725dc33a3436bea",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/3e416bba90860a7037cfa66d6725dc33a3436bea",
        "files": [
          "Zend/zend_exceptions.c",
          "ext/spl/spl_array.c"
        ],
        "message": "fix merge",
        "before_after_code_files": [
          "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
          "ext/spl/spl_array.c||ext/spl/spl_array.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Zend/zend_exceptions.c||Zend/zend_exceptions.c"
          ],
          "candidate": [
            "Zend/zend_exceptions.c||Zend/zend_exceptions.c"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_exceptions.c||Zend/zend_exceptions.c": [
          "File: Zend/zend_exceptions.c -> Zend/zend_exceptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "284: #define CHECK_EXC_TYPE(name, type) \\",
          "291:   zval_ptr_dtor(&tmp); \\",
          "292:  }",
          "",
          "[Removed Lines]",
          "285:  zend_read_property(i_get_exception_base(object), (object), name, sizeof(name) - 1, 1, &value); \\",
          "286:  if(value && Z_TYPE_P(value) != type) { \\",
          "287:   zval *tmp; \\",
          "288:   MAKE_STD_ZVAL(tmp); \\",
          "289:   ZVAL_STRINGL(tmp, name, sizeof(name)-1, 1); \\",
          "290:   Z_OBJ_HANDLER_P(object, unset_property)(object, tmp, 0 TSRMLS_CC); \\",
          "",
          "[Added Lines]",
          "285:  if(zend_read_property(i_get_exception_base(object), (object), name, sizeof(name) - 1, 1, &value) != &EG(uninitialized_zval) \\",
          "286:   && Z_TYPE(value) != type) { \\",
          "287:   zval tmp; \\",
          "288:   ZVAL_STRINGL(&tmp, name, sizeof(name) - 1); \\",
          "289:   Z_OBJ_HANDLER_P(object, unset_property)(object, &tmp, NULL); \\",
          "",
          "---------------"
        ],
        "ext/spl/spl_array.c||ext/spl/spl_array.c": [
          "File: ext/spl/spl_array.c -> ext/spl/spl_array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1741:   goto outexcept;",
          "1742:  }",
          "1746:  flags = Z_LVAL(zflags);",
          "",
          "[Removed Lines]",
          "1744:  var_push_dtor(&var_hash, &pflags);",
          "",
          "[Added Lines]",
          "1744:  var_push_dtor(&var_hash, &zflags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1783:   goto outexcept;",
          "1784:  }",
          "1788:  object_properties_load(&intern->std, Z_ARRVAL(members));",
          "1789:  zval_ptr_dtor(&members);",
          "",
          "[Removed Lines]",
          "1786:  var_push_dtor(&var_hash, &pmembers);",
          "",
          "[Added Lines]",
          "1786:  var_push_dtor(&var_hash, &members);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1793:  PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "1797:  return;",
          "1799: outexcept:",
          "",
          "[Removed Lines]",
          "1794:  if (pflags) {",
          "1795:   zval_ptr_dtor(&pflags);",
          "1796:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97047e7665368d0cf30501f7a4b6a124de25957b",
      "candidate_info": {
        "commit_hash": "97047e7665368d0cf30501f7a4b6a124de25957b",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/97047e7665368d0cf30501f7a4b6a124de25957b",
        "files": [
          ".gitignore",
          "Zend/tests/bug70121.phpt",
          "Zend/zend_exceptions.c",
          "ext/date/tests/bug53437_var3.phpt",
          "ext/date/tests/bug53437_var5.phpt",
          "ext/openssl/openssl.c",
          "ext/phar/phar_internal.h",
          "ext/phar/phar_object.c",
          "ext/phar/tests/bug70019.phpt",
          "ext/phar/tests/bug70019.zip",
          "ext/soap/php_http.c",
          "ext/spl/spl_array.c",
          "ext/spl/spl_observer.c",
          "ext/spl/tests/bug70068.phpt",
          "ext/spl/tests/bug70166.phpt",
          "ext/spl/tests/bug70168.phpt",
          "ext/spl/tests/bug70169.phpt",
          "ext/standard/tests/serialize/bug69152.phpt",
          "ext/standard/tests/serialize/bug69793.phpt",
          "sapi/cli/tests/005.phpt"
        ],
        "message": "Merge branch 'PHP-5.6'\n\n* PHP-5.6:\n  update NEWS\n  fix test\n  update NEWS\n  Fix bug #70019 - limit extracted files to given directory\n  Do not do convert_to_* on unserialize, it messes up references\n  Fix #69793 - limit what we accept when unserializing exception\n  Fixed bug #70169 (Use After Free Vulnerability in unserialize() with SplDoublyLinkedList)\n  Fixed bug #70166 - Use After Free Vulnerability in unserialize() with SPLArrayObject\n  ignore signatures for packages too\n  Fix bug #70168 - Use After Free Vulnerability in unserialize() with SplObjectStorage\n  Fixed bug #69892\n  Fix bug #70014 - use RAND_bytes instead of deprecated RAND_pseudo_bytes\n  Improved fix for Bug #69441\n  Fix bug #70068 (Dangling pointer in the unserialization of ArrayObject items)\n  Fix bug #70121 (unserialize() could lead to unexpected methods execution / NULL pointer deref)\n  Fix bug #70081: check types for SOAP variables\n\nConflicts:\n\tZend/zend_exceptions.c\n\text/date/php_date.c\n\text/openssl/openssl.c\n\text/phar/phar_internal.h\n\text/soap/php_http.c\n\text/spl/spl_array.c\n\text/spl/spl_dllist.c\n\text/spl/spl_observer.c\n\text/standard/tests/serialize/bug69152.phpt\n\tsapi/cli/tests/005.phpt",
        "before_after_code_files": [
          "Zend/tests/bug70121.phpt||Zend/tests/bug70121.phpt",
          "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
          "ext/date/tests/bug53437_var3.phpt||ext/date/tests/bug53437_var3.phpt",
          "ext/date/tests/bug53437_var5.phpt||ext/date/tests/bug53437_var5.phpt",
          "ext/openssl/openssl.c||ext/openssl/openssl.c",
          "ext/phar/phar_internal.h||ext/phar/phar_internal.h",
          "ext/phar/phar_object.c||ext/phar/phar_object.c",
          "ext/phar/tests/bug70019.phpt||ext/phar/tests/bug70019.phpt",
          "ext/soap/php_http.c||ext/soap/php_http.c",
          "ext/spl/spl_array.c||ext/spl/spl_array.c",
          "ext/spl/spl_observer.c||ext/spl/spl_observer.c",
          "ext/spl/tests/bug70068.phpt||ext/spl/tests/bug70068.phpt",
          "ext/spl/tests/bug70166.phpt||ext/spl/tests/bug70166.phpt",
          "ext/spl/tests/bug70168.phpt||ext/spl/tests/bug70168.phpt",
          "ext/spl/tests/bug70169.phpt||ext/spl/tests/bug70169.phpt",
          "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt",
          "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt",
          "sapi/cli/tests/005.phpt||sapi/cli/tests/005.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
            "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt",
            "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt"
          ],
          "candidate": [
            "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
            "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt",
            "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt"
          ]
        }
      },
      "candidate_diff": {
        "Zend/tests/bug70121.phpt||Zend/tests/bug70121.phpt": [
          "File: Zend/tests/bug70121.phpt -> Zend/tests/bug70121.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70121 (unserialize() could lead to unexpected methods execution / NULL pointer deref)",
          "3: --FILE--",
          "4: <?php",
          "5: unserialize('O:12:\"DateInterval\":1:{s:4:\"days\";O:9:\"Exception\":7:{s:10:\"'.\"\\0\".'*'.\"\\0\".'message\";s:1:\"x\";s:17:\"'.\"\\0\".'Exception'.\"\\0\".'string\";s:1:\"A\";s:7:\"'.\"\\0\".'*'.\"\\0\".'code\";i:0;s:7:\"'.\"\\0\".'*'.\"\\0\".'file\";s:1:\"a\";s:7:\"'.\"\\0\".'*'.\"\\0\".'line\";i:1337;s:16:\"'.\"\\0\".'Exception'.\"\\0\".'trace\";a:0:{}s:19:\"'.\"\\0\".'Exception'.\"\\0\".'previous\";O:8:\"stdClass\":0:{}}}');",
          "6: ?>",
          "7: OK",
          "8: --EXPECT--",
          "9: OK",
          "",
          "---------------"
        ],
        "Zend/zend_exceptions.c||Zend/zend_exceptions.c": [
          "File: Zend/zend_exceptions.c -> Zend/zend_exceptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279: }",
          "284: ZEND_METHOD(error_exception, __construct)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: #define CHECK_EXC_TYPE(name, type) \\",
          "285:  zend_read_property(i_get_exception_base(object), (object), name, sizeof(name) - 1, 1, &value); \\",
          "286:  if(value && Z_TYPE_P(value) != type) { \\",
          "287:   zval *tmp; \\",
          "288:   MAKE_STD_ZVAL(tmp); \\",
          "289:   ZVAL_STRINGL(tmp, name, sizeof(name)-1, 1); \\",
          "290:   Z_OBJ_HANDLER_P(object, unset_property)(object, tmp, 0 TSRMLS_CC); \\",
          "291:   zval_ptr_dtor(&tmp); \\",
          "292:  }",
          "294: ZEND_METHOD(exception, __wakeup)",
          "295: {",
          "296:  zval value;",
          "297:  zval *object = getThis();",
          "298:  CHECK_EXC_TYPE(\"message\", IS_STRING);",
          "299:  CHECK_EXC_TYPE(\"string\", IS_STRING);",
          "300:  CHECK_EXC_TYPE(\"code\", IS_LONG);",
          "301:  CHECK_EXC_TYPE(\"file\", IS_STRING);",
          "302:  CHECK_EXC_TYPE(\"line\", IS_LONG);",
          "303:  CHECK_EXC_TYPE(\"trace\", IS_ARRAY);",
          "304:  CHECK_EXC_TYPE(\"previous\", IS_OBJECT);",
          "305: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "782: static const zend_function_entry default_exception_functions[] = {",
          "783:  ZEND_ME(exception, __clone, NULL, ZEND_ACC_PRIVATE|ZEND_ACC_FINAL)",
          "784:  ZEND_ME(exception, __construct, arginfo_exception___construct, ZEND_ACC_PUBLIC)",
          "785:  ZEND_ME(exception, getMessage, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
          "786:  ZEND_ME(exception, getCode, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
          "787:  ZEND_ME(exception, getFile, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811:  ZEND_ME(exception, __wakeup, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "872: {",
          "873:  return zend_ce_exception;",
          "874: }",
          "",
          "[Removed Lines]",
          "871: ZEND_API zend_class_entry *zend_exception_get_default(void)",
          "",
          "[Added Lines]",
          "898: ZEND_API zend_class_entry *zend_exception_get_default(void)",
          "",
          "---------------"
        ],
        "ext/date/tests/bug53437_var3.phpt||ext/date/tests/bug53437_var3.phpt": [
          "File: ext/date/tests/bug53437_var3.phpt -> ext/date/tests/bug53437_var3.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: --EXPECTF--",
          "15: object(DateInterval)#%d (15) {",
          "16:   [\"y\"]=>",
          "18:   [\"m\"]=>",
          "20:   [\"d\"]=>",
          "22:   [\"h\"]=>",
          "24:   [\"i\"]=>",
          "26:   [\"s\"]=>",
          "28:   [\"weekday\"]=>",
          "29:   int(10)",
          "30:   [\"weekday_behavior\"]=>",
          "",
          "[Removed Lines]",
          "17:   int(2)",
          "19:   int(0)",
          "21:   int(0)",
          "23:   int(6)",
          "25:   int(8)",
          "27:   int(0)",
          "",
          "[Added Lines]",
          "17:   int(-1)",
          "19:   int(-1)",
          "21:   int(-1)",
          "23:   int(-1)",
          "25:   int(-1)",
          "27:   int(-1)",
          "",
          "---------------"
        ],
        "ext/date/tests/bug53437_var5.phpt||ext/date/tests/bug53437_var5.phpt": [
          "File: ext/date/tests/bug53437_var5.phpt -> ext/date/tests/bug53437_var5.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: --EXPECTF--",
          "15: object(DateInterval)#%d (15) {",
          "16:   [\"y\"]=>",
          "18:   [\"m\"]=>",
          "20:   [\"d\"]=>",
          "22:   [\"h\"]=>",
          "24:   [\"i\"]=>",
          "26:   [\"s\"]=>",
          "28:   [\"weekday\"]=>",
          "29:   int(10)",
          "30:   [\"weekday_behavior\"]=>",
          "",
          "[Removed Lines]",
          "17:   int(2)",
          "19:   int(0)",
          "21:   int(0)",
          "23:   int(6)",
          "25:   int(8)",
          "27:   int(0)",
          "",
          "[Added Lines]",
          "17:   int(-1)",
          "19:   int(-1)",
          "21:   int(-1)",
          "23:   int(-1)",
          "25:   int(-1)",
          "27:   int(-1)",
          "",
          "---------------"
        ],
        "ext/openssl/openssl.c||ext/openssl/openssl.c": [
          "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5428:  zend_long buffer_length;",
          "5429:  zend_string *buffer = NULL;",
          "5430:  zval *zstrong_result_returned = NULL;",
          "5433:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"l|z/\", &buffer_length, &zstrong_result_returned) == FAILURE) {",
          "5434:   return;",
          "",
          "[Removed Lines]",
          "5431:  int strong_result = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5446:  buffer = zend_string_alloc(buffer_length, 0);",
          "5448: #ifdef PHP_WIN32",
          "5451:  if (php_win32_get_random_bytes((unsigned char*)buffer->val, (size_t) buffer_length) == FAILURE){",
          "5452:   zend_string_release(buffer);",
          "",
          "[Removed Lines]",
          "5449:  strong_result = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5456:   RETURN_FALSE;",
          "5457:  }",
          "5458: #else",
          "5460:   zend_string_release(buffer);",
          "5461:   if (zstrong_result_returned) {",
          "5462:    ZVAL_FALSE(zstrong_result_returned);",
          "",
          "[Removed Lines]",
          "5459:  if ((strong_result = RAND_pseudo_bytes((unsigned char*)ZSTR_VAL(buffer), buffer_length)) < 0) {",
          "",
          "[Added Lines]",
          "5457:  if (RAND_bytes((unsigned char*)ZSTR_VAL(buffer), buffer_length) <= 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5469:  RETVAL_STR(buffer);",
          "5471:  if (zstrong_result_returned) {",
          "5473:  }",
          "5474: }",
          "",
          "[Removed Lines]",
          "5472:   ZVAL_BOOL(zstrong_result_returned, strong_result);",
          "",
          "[Added Lines]",
          "5470:   ZVAL_BOOL(zstrong_result_returned, 1);",
          "",
          "---------------"
        ],
        "ext/phar/phar_internal.h||ext/phar/phar_internal.h": [
          "File: ext/phar/phar_internal.h -> ext/phar/phar_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "524: {",
          "525:  char tmp[MAXPATHLEN];",
          "526:  int tmp_len;",
          "529:  tmp_len = MIN(MAXPATHLEN, entry->filename_len + entry->phar->fname_len);",
          "535: }",
          "",
          "[Removed Lines]",
          "527:  size_t len;",
          "530:  len = MIN(entry->phar->fname_len, tmp_len);",
          "531:  memcpy(tmp, entry->phar->fname, len);",
          "532:  len = MIN(tmp_len - len, entry->filename_len);",
          "533:  memcpy(tmp + entry->phar->fname_len, entry->filename, len);",
          "534:  entry->inode = (unsigned short)zend_hash_func(tmp, tmp_len);",
          "",
          "[Added Lines]",
          "527:  size_t len1, len2;",
          "531:  len1 = MIN(entry->phar->fname_len, tmp_len);",
          "532:  memcpy(tmp, entry->phar->fname, len1);",
          "534:  len2 = MIN(tmp_len - len1, entry->filename_len);",
          "535:  memcpy(tmp + len1, entry->filename, len2);",
          "537:  entry->inode = (unsigned short) zend_hash_func(tmp, tmp_len);",
          "",
          "---------------"
        ],
        "ext/phar/phar_object.c||ext/phar/phar_object.c": [
          "File: ext/phar/phar_object.c -> ext/phar/phar_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4068:  char *fullpath;",
          "4069:  const char *slash;",
          "4070:  mode_t mode;",
          "4072:  if (entry->is_mounted) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4071:  cwd_state new_state;",
          "4072:  char *filename;",
          "4073:  size_t filename_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4077:  if (entry->filename_len >= sizeof(\".phar\")-1 && !memcmp(entry->filename, \".phar\", sizeof(\".phar\")-1)) {",
          "4078:   return SUCCESS;",
          "4079:  }",
          "4083:  if (len >= MAXPATHLEN) {",
          "4084:   char *tmp;",
          "",
          "[Removed Lines]",
          "4081:  len = spprintf(&fullpath, 0, \"%s/%s\", dest, entry->filename);",
          "",
          "[Added Lines]",
          "4084:  new_state.cwd = (char*)malloc(2);",
          "4085:  new_state.cwd[0] = DEFAULT_SLASH;",
          "4086:  new_state.cwd[1] = '\\0';",
          "4087:  new_state.cwd_length = 1;",
          "4088:  if (virtual_file_ex(&new_state, entry->filename, NULL, CWD_EXPAND TSRMLS_CC) != 0 ||",
          "4089:    new_state.cwd_length <= 1) {",
          "4090:   if (EINVAL == errno && entry->filename_len > 50) {",
          "4091:    char *tmp = estrndup(entry->filename, 50);",
          "4092:    spprintf(error, 4096, \"Cannot extract \\\"%s...\\\" to \\\"%s...\\\", extracted filename is too long for filesystem\", tmp, dest);",
          "4093:    efree(tmp);",
          "4094:   } else {",
          "4095:    spprintf(error, 4096, \"Cannot extract \\\"%s\\\", internal error\", entry->filename);",
          "4096:   }",
          "4097:   free(new_state.cwd);",
          "4098:   return FAILURE;",
          "4099:  }",
          "4100:  filename = new_state.cwd + 1;",
          "4101:  filename_len = new_state.cwd_length - 1;",
          "4102: #ifdef PHP_WIN32",
          "4104:  {",
          "4105:   int cnt = filename_len;",
          "4107:   do {",
          "4108:    if ('\\\\' == filename[cnt]) {",
          "4109:     filename[cnt] = '/';",
          "4110:    }",
          "4111:   } while (cnt-- >= 0);",
          "4112:  }",
          "4113: #endif",
          "4115:  len = spprintf(&fullpath, 0, \"%s/%s\", dest, filename);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4092:    spprintf(error, 4096, \"Cannot extract \\\"%s\\\" to \\\"%s...\\\", extracted filename is too long for filesystem\", entry->filename, fullpath);",
          "4093:   }",
          "4094:   efree(fullpath);",
          "4095:   return FAILURE;",
          "4096:  }",
          "4098:  if (!len) {",
          "4099:   spprintf(error, 4096, \"Cannot extract \\\"%s\\\", internal error\", entry->filename);",
          "4100:   efree(fullpath);",
          "4101:   return FAILURE;",
          "4102:  }",
          "4104:  if (PHAR_OPENBASEDIR_CHECKPATH(fullpath)) {",
          "4105:   spprintf(error, 4096, \"Cannot extract \\\"%s\\\" to \\\"%s\\\", openbasedir/safe mode restrictions in effect\", entry->filename, fullpath);",
          "4106:   efree(fullpath);",
          "4107:   return FAILURE;",
          "4108:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4129:   free(new_state.cwd);",
          "4136:   free(new_state.cwd);",
          "4143:   free(new_state.cwd);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4111:  if (!overwrite && SUCCESS == php_stream_stat_path(fullpath, &ssb)) {",
          "4112:   spprintf(error, 4096, \"Cannot extract \\\"%s\\\" to \\\"%s\\\", path already exists\", entry->filename, fullpath);",
          "4113:   efree(fullpath);",
          "4114:   return FAILURE;",
          "4115:  }",
          "4120:  if (slash) {",
          "4122:  } else {",
          "4123:   fullpath[dest_len] = '\\0';",
          "4124:  }",
          "",
          "[Removed Lines]",
          "4118:  slash = zend_memrchr(entry->filename, '/', entry->filename_len);",
          "4121:   fullpath[dest_len + (slash - entry->filename) + 1] = '\\0';",
          "",
          "[Added Lines]",
          "4151:   free(new_state.cwd);",
          "4156:  slash = zend_memrchr(filename, '/', filename_len);",
          "4159:   fullpath[dest_len + (slash - filename) + 1] = '\\0';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4128:    if (!php_stream_mkdir(fullpath, entry->flags & PHAR_ENT_PERM_MASK,  PHP_STREAM_MKDIR_RECURSIVE, NULL)) {",
          "4129:     spprintf(error, 4096, \"Cannot extract \\\"%s\\\", could not create directory \\\"%s\\\"\", entry->filename, fullpath);",
          "4130:     efree(fullpath);",
          "4131:     return FAILURE;",
          "4132:    }",
          "4133:   } else {",
          "4134:    if (!php_stream_mkdir(fullpath, 0777,  PHP_STREAM_MKDIR_RECURSIVE, NULL)) {",
          "4135:     spprintf(error, 4096, \"Cannot extract \\\"%s\\\", could not create directory \\\"%s\\\"\", entry->filename, fullpath);",
          "4136:     efree(fullpath);",
          "4137:     return FAILURE;",
          "4138:    }",
          "4139:   }",
          "4140:  }",
          "4142:  if (slash) {",
          "4144:  } else {",
          "4145:   fullpath[dest_len] = '/';",
          "4146:  }",
          "4149:  if (entry->is_dir) {",
          "4150:   efree(fullpath);",
          "",
          "[Removed Lines]",
          "4143:   fullpath[dest_len + (slash - entry->filename) + 1] = '/';",
          "",
          "[Added Lines]",
          "4169:     free(new_state.cwd);",
          "4176:     free(new_state.cwd);",
          "4183:   fullpath[dest_len + (slash - filename) + 1] = '/';",
          "4188:  filename = NULL;",
          "4189:  free(new_state.cwd);",
          "",
          "---------------"
        ],
        "ext/phar/tests/bug70019.phpt||ext/phar/tests/bug70019.phpt": [
          "File: ext/phar/tests/bug70019.phpt -> ext/phar/tests/bug70019.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70019 Files extracted from archive may be placed outside of destination directory",
          "3: --FILE--",
          "4: <?php",
          "5: $dir = __DIR__.\"/bug70019\";",
          "6: $phar = new PharData(__DIR__.\"/bug70019.zip\");",
          "7: if(!is_dir($dir)) {",
          "8:   mkdir($dir);",
          "9: }",
          "10: $phar->extractTo($dir);",
          "11: var_dump(file_exists(\"$dir/ThisIsATestFile.txt\"));",
          "12: ?>",
          "13: ===DONE===",
          "14: --CLEAN--",
          "15: <?php",
          "16: $dir = __DIR__.\"/bug70019\";",
          "17: unlink(\"$dir/ThisIsATestFile.txt\");",
          "18: rmdir($dir);",
          "19: ?>",
          "20: --EXPECTF--",
          "21: bool(true)",
          "22: ===DONE===",
          "",
          "---------------"
        ],
        "ext/soap/php_http.c||ext/soap/php_http.c": [
          "File: ext/soap/php_http.c -> ext/soap/php_http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "815:     zend_hash_internal_pointer_reset(Z_ARRVAL_P(cookies));",
          "816:     smart_str_append_const(&soap_headers, \"Cookie: \");",
          "817:     for (i = 0; i < n; i++) {",
          "818:      data = zend_hash_get_current_data(Z_ARRVAL_P(cookies));",
          "822:        zval *value;",
          "824:       if ((value = zend_hash_index_find(Z_ARRVAL_P(data), 0)) != NULL &&",
          "",
          "[Removed Lines]",
          "819:      zend_hash_get_current_key(Z_ARRVAL_P(cookies), &key, NULL);",
          "821:      if (Z_TYPE_P(data) == IS_ARRAY) {",
          "",
          "[Added Lines]",
          "818:      ulong numindx;",
          "819:      int res = zend_hash_get_current_key(Z_ARRVAL_P(cookies), &key, &numindx);",
          "822:      if (res == HASH_KEY_IS_STRING && Z_TYPE_P(data) == IS_ARRAY) {",
          "",
          "---------------"
        ],
        "ext/spl/spl_array.c||ext/spl/spl_array.c": [
          "File: ext/spl/spl_array.c -> ext/spl/spl_array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1741:   goto outexcept;",
          "1742:  }",
          "1745:  flags = Z_LVAL(zflags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1744:  var_push_dtor(&var_hash, &pflags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1763:   if (!php_var_unserialize(&intern->array, &p, s + buf_len, &var_hash)) {",
          "1764:    goto outexcept;",
          "1765:   }",
          "1766:  }",
          "1767:  if (*p != ';') {",
          "1768:   goto outexcept;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1767:   var_push_dtor(&var_hash, &intern->array);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1781:   goto outexcept;",
          "1782:  }",
          "1785:  object_properties_load(&intern->std, Z_ARRVAL(members));",
          "1786:  zval_ptr_dtor(&members);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1786:  var_push_dtor(&var_hash, &pmembers);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1790:  PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "1791:  return;",
          "1793: outexcept:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1794:  if (pflags) {",
          "1795:   zval_ptr_dtor(&pflags);",
          "1796:  }",
          "",
          "---------------"
        ],
        "ext/spl/spl_observer.c||ext/spl/spl_observer.c": [
          "File: ext/spl/spl_observer.c -> ext/spl/spl_observer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "809:   goto outexcept;",
          "810:  }",
          "813:  count = Z_LVAL(pcount);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:  var_push_dtor(&var_hash, &pcount);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "879:   goto outexcept;",
          "880:  }",
          "883:  if (!intern->std.properties) {",
          "884:   rebuild_object_properties(&intern->std);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "883:  var_push_dtor(&var_hash, &pmembers);",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70068.phpt||ext/spl/tests/bug70068.phpt": [
          "File: ext/spl/tests/bug70068.phpt -> ext/spl/tests/bug70068.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70068 (Dangling pointer in the unserialization of ArrayObject items)",
          "3: --FILE--",
          "4: <?php",
          "5: $a = unserialize('a:3:{i:0;C:11:\"ArrayObject\":20:{x:i:0;r:3;;m:a:0:{};}i:1;d:11;i:2;S:31:\"AAAAAAAABBBBCCCC\\01\\00\\00\\00\\04\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\";}');",
          "6: ?>",
          "7: OK",
          "8: --EXPECT--",
          "9: OK",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70166.phpt||ext/spl/tests/bug70166.phpt": [
          "File: ext/spl/tests/bug70166.phpt -> ext/spl/tests/bug70166.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: Bug #70166 Use After Free Vulnerability in unserialize() with SPLArrayObject",
          "3: --FILE--",
          "4: <?php",
          "5: $inner = 'x:i:1;a:0:{};m:a:0:{}';",
          "6: $exploit = 'a:2:{i:0;C:11:\"ArrayObject\":'.strlen($inner).':{'.$inner.'}i:1;R:5;}';",
          "8: $data = unserialize($exploit);",
          "10: for($i = 0; $i < 5; $i++) {",
          "11:     $v[$i] = 'hi'.$i;",
          "12: }",
          "14: var_dump($data);",
          "15: ?>",
          "16: ===DONE===",
          "17: --EXPECTF--",
          "18: array(2) {",
          "19:   [0]=>",
          "20:   object(ArrayObject)#%d (1) {",
          "21:     [\"storage\":\"ArrayObject\":private]=>",
          "22:     array(0) {",
          "23:     }",
          "24:   }",
          "25:   [1]=>",
          "26:   array(0) {",
          "27:   }",
          "28: }",
          "29: ===DONE===",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70168.phpt||ext/spl/tests/bug70168.phpt": [
          "File: ext/spl/tests/bug70168.phpt -> ext/spl/tests/bug70168.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: Bug #70168 Use After Free Vulnerability in unserialize() with SplObjectStorage",
          "3: --FILE--",
          "4: <?php",
          "5: $inner = 'x:i:1;O:8:\"stdClass\":0:{};m:a:0:{}';",
          "6: $exploit = 'a:2:{i:0;C:16:\"SplObjectStorage\":'.strlen($inner).':{'.$inner.'}i:1;R:3;}';",
          "8: $data = unserialize($exploit);",
          "10: for($i = 0; $i < 5; $i++) {",
          "11:     $v[$i] = 'hi'.$i;",
          "12: }",
          "14: var_dump($data);",
          "15: ?>",
          "16: ===DONE===",
          "17: --EXPECTF--",
          "18: array(2) {",
          "19:   [0]=>",
          "20:   object(SplObjectStorage)#%d (1) {",
          "21:     [\"storage\":\"SplObjectStorage\":private]=>",
          "22:     array(1) {",
          "23:       [\"%s\"]=>",
          "24:       array(2) {",
          "25:         [\"obj\"]=>",
          "26:         object(stdClass)#2 (0) {",
          "27:         }",
          "28:         [\"inf\"]=>",
          "29:         NULL",
          "30:       }",
          "31:     }",
          "32:   }",
          "33:   [1]=>",
          "34:   int(1)",
          "35: }",
          "36: ===DONE===",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70169.phpt||ext/spl/tests/bug70169.phpt": [
          "File: ext/spl/tests/bug70169.phpt -> ext/spl/tests/bug70169.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: Bug #70169 Use After Free Vulnerability in unserialize() with SplDoublyLinkedList",
          "3: --FILE--",
          "4: <?php",
          "5: $inner = 'i:1;';",
          "6: $exploit = 'a:2:{i:0;C:19:\"SplDoublyLinkedList\":'.strlen($inner).':{'.$inner.'}i:1;R:3;}';",
          "8: $data = unserialize($exploit);",
          "10: for($i = 0; $i < 5; $i++) {",
          "11:     $v[$i] = 'hi'.$i;",
          "12: }",
          "14: var_dump($data);",
          "15: ?>",
          "16: ===DONE===",
          "17: --EXPECTF--",
          "18: array(2) {",
          "19:   [0]=>",
          "20:   object(SplDoublyLinkedList)#%d (2) {",
          "21:     [\"flags\":\"SplDoublyLinkedList\":private]=>",
          "22:     int(1)",
          "23:     [\"dllist\":\"SplDoublyLinkedList\":private]=>",
          "24:     array(0) {",
          "25:     }",
          "26:   }",
          "27:   [1]=>",
          "28:   int(1)",
          "29: }",
          "30: ===DONE===",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt": [
          "File: ext/standard/tests/serialize/bug69152.phpt -> ext/standard/tests/serialize/bug69152.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: ?>",
          "11: --EXPECTF--",
          "12: Exception in %s:%d",
          "13: Stack trace:",
          "14: #0 {main}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: Notice: Undefined property: Exception::$previous in %s on line %d",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt": [
          "File: ext/standard/tests/serialize/bug69793.phpt -> ext/standard/tests/serialize/bug69793.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #69793: Remotely triggerable stack exhaustion via recursive method calls",
          "3: --FILE--",
          "4: <?php",
          "5: $e = unserialize('O:9:\"Exception\":7:{s:17:\"'.\"\\0\".'Exception'.\"\\0\".'string\";s:1:\"a\";s:7:\"'.\"\\0\".'*'.\"\\0\".'code\";i:0;s:7:\"'.\"\\0\".'*'.\"\\0\".'file\";R:1;s:7:\"'.\"\\0\".'*'.\"\\0\".'line\";i:1337;s:16:\"'.\"\\0\".'Exception'.\"\\0\".'trace\";a:0:{}s:19:\"'.\"\\0\".'Exception'.\"\\0\".'previous\";i:10;s:10:\"'.\"\\0\".'*'.\"\\0\".'message\";N;}');",
          "7: var_dump($e.\"\");",
          "8: ?>",
          "9: --EXPECTF--",
          "10: Notice: Undefined property: Exception::$message in %s/bug69793.php on line %d",
          "12: Notice: Undefined property: Exception::$file in %s/bug69793.php on line %d",
          "14: Notice: Undefined property: Exception::$previous in %s/bug69793.php on line %d",
          "15: string(53) \"exception 'Exception' in :1337",
          "16: Stack trace:",
          "17: #0 {main}\"",
          "",
          "---------------"
        ],
        "sapi/cli/tests/005.phpt||sapi/cli/tests/005.phpt": [
          "File: sapi/cli/tests/005.phpt -> sapi/cli/tests/005.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: <?php",
          "5: include \"skipif.inc\";",
          "6: if (!extension_loaded(\"reflection\")) {",
          "8: }",
          "9: ?>",
          "10: --FILE--",
          "",
          "[Removed Lines]",
          "7:  die(\"skip reflection extension required\");",
          "",
          "[Added Lines]",
          "7:     die(\"skip reflection extension required\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: echo \"Done\\n\";",
          "20: ?>",
          "22: string(40) \"Exception: Class unknown does not exist",
          "23: \"",
          "24: string(183) \"Class [ <internal:Core> class stdClass ] {",
          "",
          "[Removed Lines]",
          "21: --EXPECTF--",
          "",
          "[Added Lines]",
          "21: --EXPECTF--",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     Property [ <default> private $previous ]",
          "62:   }",
          "65:     Method [ <internal:Core> final private method __clone ] {",
          "66:     }",
          "",
          "[Removed Lines]",
          "64:   - Methods [10] {",
          "",
          "[Added Lines]",
          "64:   - Methods [11] {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:       }",
          "75:     }",
          "77:     Method [ <internal:Core, prototype Throwable> final public method getMessage ] {",
          "78:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     Method [ <internal:Core, prototype Throwable> final public method __wakeup ] {",
          "78:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7903276f4c18fcfda06c02785f0b4201421f9c7c",
      "candidate_info": {
        "commit_hash": "7903276f4c18fcfda06c02785f0b4201421f9c7c",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/7903276f4c18fcfda06c02785f0b4201421f9c7c",
        "files": [
          "NEWS",
          "Zend/zend_exceptions.c",
          "ext/standard/tests/serialize/bug69152.phpt",
          "ext/standard/tests/serialize/bug69793.phpt"
        ],
        "message": "backport to 5.6 (we should not unset the default value)",
        "before_after_code_files": [
          "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
          "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt",
          "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
            "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt",
            "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt"
          ],
          "candidate": [
            "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
            "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt",
            "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt"
          ]
        }
      },
      "candidate_diff": {
        "Zend/zend_exceptions.c||Zend/zend_exceptions.c": [
          "File: Zend/zend_exceptions.c -> Zend/zend_exceptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "231: #define CHECK_EXC_TYPE(name, type) \\",
          "232:  value = zend_read_property(default_exception_ce, object, name, sizeof(name)-1, 0 TSRMLS_CC); \\",
          "234:   zval *tmp; \\",
          "235:   MAKE_STD_ZVAL(tmp); \\",
          "236:   ZVAL_STRINGL(tmp, name, sizeof(name)-1, 1); \\",
          "",
          "[Removed Lines]",
          "233:  if(value && Z_TYPE_P(value) != type) { \\",
          "",
          "[Added Lines]",
          "233:  if (value && Z_TYPE_P(value) != IS_NULL && Z_TYPE_P(value) != type) { \\",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt": [
          "File: ext/standard/tests/serialize/bug69152.phpt -> ext/standard/tests/serialize/bug69152.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: ?>",
          "11: --EXPECTF--",
          "13: exception 'Exception' in %s:%d",
          "14: Stack trace:",
          "15: #0 {main}",
          "",
          "[Removed Lines]",
          "12: Notice: Undefined property: Exception::$previous in %s on line %d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt": [
          "File: ext/standard/tests/serialize/bug69793.phpt -> ext/standard/tests/serialize/bug69793.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: var_dump($e.\"\");",
          "8: ?>",
          "9: --EXPECTF--",
          "12: Notice: Undefined property: Exception::$file in %s%ebug69793.php on line %d",
          "14: Notice: Undefined property: Exception::$previous in %s%ebug69793.php on line %d",
          "",
          "[Removed Lines]",
          "10: Notice: Undefined property: Exception::$message in %s%ebug69793.php on line %d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}