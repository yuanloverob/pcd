{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b5aaee5e31c081b3ba5beeb563419f2d66be2656",
      "candidate_info": {
        "commit_hash": "b5aaee5e31c081b3ba5beeb563419f2d66be2656",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b5aaee5e31c081b3ba5beeb563419f2d66be2656",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Add a new assert() to the SELECT processing.\n\nFossilOrigin-Name: 98cea4a32ba558c137d71a5e373a6803d764d34c5640907371dcf6468ffb2e64",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 32a88bdd4be5acdc1b80856bf6e32724dc3a467d5050bec0fe1a3dfedcc06f34",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5829:     Select *pSub = pItem->pSelect;",
          "5830:     Table *pTab = pItem->pTab;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5835:     assert( pTab!=0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ec43d8040a063d39b5fccf24c60c4b206cafa671",
      "candidate_info": {
        "commit_hash": "ec43d8040a063d39b5fccf24c60c4b206cafa671",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ec43d8040a063d39b5fccf24c60c4b206cafa671",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Change the magic number used to identify the \"excluded\" pseudo-table in an UPSERT statement into a #define constant.\n\nFossilOrigin-Name: e96c2ac9ab1a1c51b1498f4b91fb71d2987c30579d072b2f0297da9eb945cb97",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a73f80f22a585d1a2f55650d5cda4ece6c4ef039ef5eae2c02c3e5c269d4c30a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"sqliteInt.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #define EXCLUDED_TABLE_NUMBER  2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "386:         Upsert *pUpsert = pNC->uNC.pUpsert;",
          "387:         if( pUpsert && sqlite3StrICmp(\"excluded\",zTab)==0 ){",
          "388:           pTab = pUpsert->pUpsertSrc->a[0].pTab;",
          "390:         }",
          "391:       }",
          "",
          "[Removed Lines]",
          "389:           pExpr->iTable = 2;",
          "",
          "[Added Lines]",
          "394:           pExpr->iTable = EXCLUDED_TABLE_NUMBER;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "411:         if( iCol<pTab->nCol ){",
          "412:           cnt++;",
          "413: #ifndef SQLITE_OMIT_UPSERT",
          "415:             testcase( iCol==(-1) );",
          "416:             if( IN_RENAME_OBJECT ){",
          "417:               pExpr->iColumn = iCol;",
          "",
          "[Removed Lines]",
          "414:           if( pExpr->iTable==2 ){",
          "",
          "[Added Lines]",
          "419:           if( pExpr->iTable==EXCLUDED_TABLE_NUMBER ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "783e159e48979c551c204cbfe9c8f7dd4550d5e4",
      "candidate_info": {
        "commit_hash": "783e159e48979c551c204cbfe9c8f7dd4550d5e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/783e159e48979c551c204cbfe9c8f7dd4550d5e4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/main.c",
          "src/sqliteInt.h",
          "src/wal.c"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 92dc59132f8547635d73c61c21ea29b380c401ddc84a6d01412808e00386b9e8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/main.c||src/main.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98eb54c6d83992886f17a00b6fc8998df230e3b5f45bafc6fae0d15a9ee5a4c6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2304:   BtShared *pBt = (BtShared*)pArg;",
          "2305:   assert( pBt->db );",
          "2306:   assert( sqlite3_mutex_held(pBt->db->mutex) );",
          "2309: }",
          "",
          "[Removed Lines]",
          "2307:   return sqlite3InvokeBusyHandler(&pBt->db->busyHandler,",
          "2308:                                   sqlite3PagerFile(pBt->pPager));",
          "",
          "[Added Lines]",
          "2307:   return sqlite3InvokeBusyHandler(&pBt->db->busyHandler);",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1668:   int rc;",
          "1669:   if( p->xBusyHandler==0 || p->nBusy<0 ) return 0;",
          "1670:   rc = p->xBusyHandler(p->pBusyArg, p->nBusy);",
          "",
          "[Removed Lines]",
          "1667: int sqlite3InvokeBusyHandler(BusyHandler *p, sqlite3_file *pFile){",
          "",
          "[Added Lines]",
          "1667: int sqlite3InvokeBusyHandler(BusyHandler *p){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4584: CollSeq *sqlite3GetCollSeq(Parse*, u8, CollSeq *, const char*);",
          "4585: char sqlite3AffinityType(const char*, Column*);",
          "4586: void sqlite3Analyze(Parse*, Token*, Token*);",
          "4588: int sqlite3FindDb(sqlite3*, Token*);",
          "4589: int sqlite3FindDbName(sqlite3 *, const char *);",
          "4590: int sqlite3AnalysisLoad(sqlite3*,int iDB);",
          "",
          "[Removed Lines]",
          "4587: int sqlite3InvokeBusyHandler(BusyHandler*, sqlite3_file*);",
          "",
          "[Added Lines]",
          "4587: int sqlite3InvokeBusyHandler(BusyHandler*);",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3697:   sqlite3WalDb(pWal, db);",
          "",
          "[Removed Lines]",
          "3698:   walEnableBlocking(pWal);",
          "",
          "[Added Lines]",
          "3698:   (void)walEnableBlocking(pWal);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c075c505f30b91e3de18fb2a058e2e6d6fd7aead",
      "candidate_info": {
        "commit_hash": "c075c505f30b91e3de18fb2a058e2e6d6fd7aead",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c075c505f30b91e3de18fb2a058e2e6d6fd7aead",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Fix parser bugs: require a semicolon after an EXPLAIN command.\n\nFossilOrigin-Name: 707a058a22bd00ef14431cee0d02048cf1be745c0ef5254eda76c325435738ff",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 355afd77df21a2265871ca6d075f26b1fa121c7c2682cf512281944ff0c2186d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: ecmd ::= SEMI.",
          "121: ecmd ::= cmdx SEMI.",
          "122: %ifndef SQLITE_OMIT_EXPLAIN",
          "124: explain ::= EXPLAIN.              { pParse->explain = 1; }",
          "125: explain ::= EXPLAIN QUERY PLAN.   { pParse->explain = 2; }",
          "126: %endif  SQLITE_OMIT_EXPLAIN",
          "",
          "[Removed Lines]",
          "123: ecmd ::= explain cmdx.",
          "",
          "[Added Lines]",
          "123: ecmd ::= explain cmdx SEMI.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad84bd849e00917b9007edea4521da48a6a00ed1",
      "candidate_info": {
        "commit_hash": "ad84bd849e00917b9007edea4521da48a6a00ed1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ad84bd849e00917b9007edea4521da48a6a00ed1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/dbstat.c",
          "test/stat.test"
        ],
        "message": "Begin an enhancement effort for the built-in DBSTAT virtual table.\n\nFossilOrigin-Name: 9b5722f0fe666b99677e5f333dd8413aefb9ace7a461d74f6558f0ac53768719",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/dbstat.c||src/dbstat.c",
          "test/stat.test||test/stat.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4330f0795dbc2ab41dddd41d5979331fb9b78c477c66367c4be52f929531a45f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   \");\"",
          "75: typedef struct StatTable StatTable;",
          "76: typedef struct StatCursor StatCursor;",
          "77: typedef struct StatPage StatPage;",
          "78: typedef struct StatCell StatCell;",
          "80: struct StatCell {",
          "",
          "[Removed Lines]",
          "59: #define VTAB_SCHEMA                                                         \\",
          "60:   \"CREATE TABLE xx( \"                                                       \\",
          "61:   \"  name       TEXT,             /* Name of table or index */\"             \\",
          "62:   \"  path       TEXT,             /* Path to page from root */\"             \\",
          "63:   \"  pageno     INTEGER,          /* Page number */\"                        \\",
          "64:   \"  pagetype   TEXT,             /* 'internal', 'leaf' or 'overflow' */\"   \\",
          "65:   \"  ncell      INTEGER,          /* Cells on page (0 for overflow) */\"     \\",
          "66:   \"  payload    INTEGER,          /* Bytes of payload on this page */\"      \\",
          "67:   \"  unused     INTEGER,          /* Bytes of unused space on this page */\" \\",
          "68:   \"  mx_payload INTEGER,          /* Largest payload size of all cells */\"  \\",
          "69:   \"  pgoffset   INTEGER,          /* Offset of page in file */\"             \\",
          "70:   \"  pgsize     INTEGER,          /* Size of the page */\"                   \\",
          "71:   \"  schema     TEXT HIDDEN       /* Database schema being analyzed */\"     \\",
          "",
          "[Added Lines]",
          "59: #define VTAB_SCHEMA                                                          \\",
          "60:   \"CREATE TABLE xx( \"                                                        \\",
          "61:   \"  name       TEXT,\"          /*  0 Name of table or index */              \\",
          "62:   \"  path       TEXT,\"          /*  1 Path to page from root */              \\",
          "63:   \"  pageno     INTEGER,\"       /*  2 Page number */                         \\",
          "64:   \"  pagetype   TEXT,\"          /*  3 'internal', 'leaf' or 'overflow' */    \\",
          "65:   \"  ncell      INTEGER,\"       /*  4 Cells on page (0 for overflow) */      \\",
          "66:   \"  payload    INTEGER,\"       /*  5 Bytes of payload on this page */       \\",
          "67:   \"  unused     INTEGER,\"       /*  6 Bytes of unused space on this page */  \\",
          "68:   \"  mx_payload INTEGER,\"       /*  7 Largest payload size of all cells */   \\",
          "69:   \"  pgoffset   INTEGER,\"       /*  8 Offset of page in file */              \\",
          "70:   \"  pgsize     INTEGER,\"       /*  9 Size of the page */                    \\",
          "71:   \"  schema     TEXT HIDDEN,\"   /* 10 Database schema being analyzed */      \\",
          "72:   \"  aggregate  BOOLEAN HIDDEN\" /* 11 aggregate info for each table */       \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "87: };",
          "89: struct StatPage {",
          "",
          "[Removed Lines]",
          "90:   u32 iPgno;",
          "91:   DbPage *pPg;",
          "92:   int iCell;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103: };",
          "105: struct StatCursor {",
          "",
          "[Removed Lines]",
          "106:   sqlite3_vtab_cursor base;",
          "111:   StatPage aPage[32];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125: };",
          "127: struct StatTable {",
          "131: };",
          "",
          "[Removed Lines]",
          "128:   sqlite3_vtab base;",
          "129:   sqlite3 *db;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185: }",
          "194: static int statBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){",
          "195:   int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205:   int iSchema = -1;",
          "206:   int iName = -1;",
          "207:   int iAgg = -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "202:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "205:     if( pIdxInfo->aConstraint[i].op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;",
          "211:   }",
          "",
          "[Removed Lines]",
          "203:     if( pIdxInfo->aConstraint[i].iColumn!=10 ) continue;",
          "204:     if( pIdxInfo->aConstraint[i].usable==0 ) return SQLITE_CONSTRAINT;",
          "206:     pIdxInfo->idxNum = 1;",
          "207:     pIdxInfo->estimatedCost = 1.0;",
          "208:     pIdxInfo->aConstraintUsage[i].argvIndex = 1;",
          "209:     pIdxInfo->aConstraintUsage[i].omit = 1;",
          "210:     break;",
          "",
          "[Added Lines]",
          "216:     if( pIdxInfo->aConstraint[i].usable==0 ){",
          "218:       return SQLITE_CONSTRAINT;",
          "219:     }",
          "220:     switch( pIdxInfo->aConstraint[i].iColumn ){",
          "222:         iName = i;",
          "223:         break;",
          "224:       }",
          "226:         iSchema = i;",
          "227:         break;",
          "228:       }",
          "230:         iAgg = i;",
          "231:         break;",
          "232:       }",
          "233:     }",
          "235:   i = 0;",
          "236:   if( iSchema>=0 ){",
          "237:     pIdxInfo->aConstraintUsage[iSchema].argvIndex = ++i;",
          "238:     pIdxInfo->aConstraintUsage[iSchema].omit = 1;",
          "239:     pIdxInfo->idxNum |= 0x01;",
          "240:   }",
          "241:   if( iName>=0 ){",
          "242:     pIdxInfo->aConstraintUsage[iName].argvIndex = ++i;",
          "243:     pIdxInfo->aConstraintUsage[iName].omit = 1;",
          "244:     pIdxInfo->idxNum |= 0x02;",
          "245:   }",
          "246:   if( iAgg>=0 ){",
          "247:     pIdxInfo->aConstraintUsage[iAgg].argvIndex = ++i;",
          "248:     pIdxInfo->aConstraintUsage[iAgg].omit = 1;",
          "249:     pIdxInfo->idxNum |= 0x04;",
          "250:   }",
          "251:   pIdxInfo->estimatedCost = 1.0;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "227:      )",
          "228:   ){",
          "229:     pIdxInfo->orderByConsumed = 1;",
          "230:   }",
          "232:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269:     pIdxInfo->idxNum |= 0x08;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "294:   return SQLITE_OK;",
          "295: }",
          "302: ){",
          "303:   int nLocal;",
          "304:   int nMinLocal;",
          "",
          "[Removed Lines]",
          "297: static void getLocalPayload(",
          "",
          "[Added Lines]",
          "342: static int getLocalPayload(",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "315:   nLocal = nMinLocal + (nTotal - nMinLocal) % (nUsable - 4);",
          "316:   if( nLocal>nMaxLocal ) nLocal = nMinLocal;",
          "318: }",
          "320: static int statDecodePage(Btree *pBt, StatPage *p){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361:   return nLocal;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "387:           iOff += sqlite3GetVarint(&aData[iOff], &dummy);",
          "388:         }",
          "389:         if( nPayload>(u32)p->nMxPayload ) p->nMxPayload = nPayload;",
          "391:         if( nLocal<0 ) goto statPageIsCorrupt;",
          "392:         pCell->nLocal = nLocal;",
          "393:         assert( nPayload>=(u32)nLocal );",
          "",
          "[Removed Lines]",
          "390:         getLocalPayload(nUsable, p->flags, nPayload, &nLocal);",
          "",
          "[Added Lines]",
          "434:         nLocal = getLocalPayload(nUsable, p->flags, nPayload);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "604: ){",
          "605:   StatCursor *pCsr = (StatCursor *)pCursor;",
          "606:   StatTable *pTab = (StatTable*)(pCursor->pVtab);",
          "612:     pCsr->iDb = sqlite3FindDbName(pTab->db, zDbase);",
          "613:     if( pCsr->iDb<0 ){",
          "614:       sqlite3_free(pCursor->pVtab->zErrMsg);",
          "",
          "[Removed Lines]",
          "607:   char *zSql;",
          "608:   int rc = SQLITE_OK;",
          "610:   if( idxNum==1 ){",
          "611:     const char *zDbase = (const char*)sqlite3_value_text(argv[0]);",
          "",
          "[Added Lines]",
          "661:   statResetCsr(pCsr);",
          "662:   sqlite3_finalize(pCsr->pStmt);",
          "663:   pCsr->pStmt = 0;",
          "664:   if( idxNum & 0x01 ){",
          "666:     const char *zDbase = (const char*)sqlite3_value_text(argv[iArg++]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "618:   }else{",
          "619:     pCsr->iDb = pTab->iDb;",
          "620:   }",
          "630:   if( zSql==0 ){",
          "631:     return SQLITE_NOMEM_BKPT;",
          "632:   }else{",
          "",
          "[Removed Lines]",
          "621:   statResetCsr(pCsr);",
          "622:   sqlite3_finalize(pCsr->pStmt);",
          "623:   pCsr->pStmt = 0;",
          "624:   zSql = sqlite3_mprintf(",
          "625:       \"SELECT 'sqlite_master' AS name, 1 AS rootpage, 'table' AS type\"",
          "626:       \"  UNION ALL  \"",
          "627:       \"SELECT name, rootpage, type\"",
          "628:       \"  FROM \\\"%w\\\".sqlite_master WHERE rootpage!=0\"",
          "629:       \"  ORDER BY name\", pTab->db->aDb[pCsr->iDb].zDbSName);",
          "",
          "[Added Lines]",
          "676:   if( idxNum & 0x02 ){",
          "678:     zName = (const char*)sqlite3_value_text(argv[iArg++]);",
          "679:   }",
          "680:   if( idxNum & 0x04 ){",
          "682:     pCsr->isAgg = sqlite3_value_double(argv[iArg++])!=0.0;",
          "683:   }else{",
          "684:     pCsr->isAgg = 0;",
          "685:   }",
          "686:   pSql = sqlite3_str_new(pTab->db);",
          "687:   sqlite3_str_appendf(pSql,",
          "688:       \"SELECT * FROM (\"",
          "689:         \"SELECT 'sqlite_master' AS name,1 AS rootpage,'table' AS type\"",
          "690:         \" UNION ALL \"",
          "691:         \"SELECT name,rootpage,type\"",
          "692:         \" FROM \\\"%w\\\".sqlite_master WHERE rootpage!=0)\",",
          "693:       pTab->db->aDb[pCsr->iDb].zDbSName);",
          "694:   if( zName ){",
          "695:     sqlite3_str_appendf(pSql, \"WHERE name=%Q\", zName);",
          "696:   }",
          "697:   if( idxNum & 0x08 ){",
          "698:     sqlite3_str_appendf(pSql, \" ORDER BY name\");",
          "699:   }",
          "700:   zSql = sqlite3_str_finish(pSql);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "678:       sqlite3_result_int(ctx, pCsr->szPage);",
          "679:       break;",
          "681:       sqlite3 *db = sqlite3_context_db_handle(ctx);",
          "682:       int iDb = pCsr->iDb;",
          "683:       sqlite3_result_text(ctx, db->aDb[iDb].zDbSName, -1, SQLITE_STATIC);",
          "684:       break;",
          "685:     }",
          "686:   }",
          "687:   return SQLITE_OK;",
          "688: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "758:       sqlite3_result_int(ctx, pCsr->isAgg);",
          "759:       break;",
          "760:     }",
          "",
          "---------------"
        ],
        "test/stat.test||test/stat.test": [
          "File: test/stat.test -> test/stat.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   INSERT INTO t3 SELECT a_string(110+rowid), a_string(221+rowid) FROM t3",
          "109:    ORDER BY rowid;",
          "110:   SELECT name, path, pageno, pagetype, ncell, payload, unused, mx_payload",
          "112: } [list \\",
          "113:   sqlite_autoindex_t3_1 / 3 internal 3 368 623 125       \\",
          "114:   sqlite_autoindex_t3_1 /000/ 8 leaf 8 946 46 123        \\",
          "",
          "[Removed Lines]",
          "111:     FROM stat WHERE name != 'sqlite_master';",
          "",
          "[Added Lines]",
          "111:     FROM stat WHERE name != 'sqlite_master' ORDER BY name;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "150:   CREATE INDEX i4 ON t4(x);",
          "151:   INSERT INTO t4(rowid, x) VALUES(2, a_string(7777));",
          "152:   SELECT name, path, pageno, pagetype, ncell, payload, unused, mx_payload",
          "154: } [list \\",
          "155:   i4 / 3 leaf 1 103 905 7782                 \\",
          "156:   i4 /000+000000 4 overflow 0 1020 0 0       \\",
          "",
          "[Removed Lines]",
          "153:     FROM stat WHERE name != 'sqlite_master';",
          "",
          "[Added Lines]",
          "153:     FROM stat WHERE name != 'sqlite_master' ORDER BY name;",
          "",
          "---------------"
        ]
      }
    }
  ]
}