{
  "cve_id": "CVE-2020-11096",
  "cve_desc": "In FreeRDP before version 2.1.2, there is a global OOB read in update_read_cache_bitmap_v3_order. As a workaround, one can disable bitmap cache with -bitmap-cache (default). This is fixed in version 2.1.2.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "b8beb55913471952f92770c90c372139d78c16c0",
  "patch_info": {
    "commit_hash": "b8beb55913471952f92770c90c372139d78c16c0",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b8beb55913471952f92770c90c372139d78c16c0",
    "files": [
      "libfreerdp/core/orders.c"
    ],
    "message": "Fixed OOB read in update_read_cache_bitmap_v3_order\n\nCVE-2020-11096 thanks @antonio-morales for finding this.",
    "before_after_code_files": [
      "libfreerdp/core/orders.c||libfreerdp/core/orders.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/core/orders.c||libfreerdp/core/orders.c": [
      "File: libfreerdp/core/orders.c -> libfreerdp/core/orders.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "113:  }",
      "114: }",
      "131: static BOOL check_order_activated(wLog* log, rdpSettings* settings, const char* orderName,",
      "132:                                   BOOL condition)",
      "",
      "[Removed Lines]",
      "116: static const BYTE CBR2_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
      "118: static const BYTE BPP_CBR2[] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
      "119:                               0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
      "121: static const BYTE CBR23_BPP[] = { 0, 0, 0, 8, 16, 24, 32 };",
      "123: static const BYTE BPP_CBR23[] = { 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
      "124:                                0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
      "126: static const BYTE BMF_BPP[] = { 0, 1, 0, 8, 16, 24, 32, 0 };",
      "128: static const BYTE BPP_BMF[] = { 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0,",
      "129:                              0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0 };",
      "",
      "[Added Lines]",
      "116: static BYTE get_cbr2_bpp(UINT32 bpp, BOOL* pValid)",
      "117: {",
      "118:  if (pValid)",
      "120:  switch (bpp)",
      "121:  {",
      "122:   case 3:",
      "123:    return 8;",
      "124:   case 4:",
      "125:    return 16;",
      "126:   case 5:",
      "127:    return 24;",
      "128:   case 6:",
      "129:    return 32;",
      "130:   default:",
      "131:    WLog_WARN(TAG, \"Invalid bpp %\" PRIu32, bpp);",
      "132:    if (pValid)",
      "134:    return 0;",
      "135:  }",
      "136: }",
      "138: static BYTE get_bmf_bpp(UINT32 bmf, BOOL* pValid)",
      "139: {",
      "140:  if (pValid)",
      "142:  switch (bmf)",
      "143:  {",
      "144:   case 1:",
      "145:    return 1;",
      "146:   case 3:",
      "147:    return 8;",
      "148:   case 4:",
      "149:    return 16;",
      "150:   case 5:",
      "151:    return 24;",
      "152:   case 6:",
      "153:    return 32;",
      "154:   default:",
      "155:    WLog_WARN(TAG, \"Invalid bmf %\" PRIu32, bmf);",
      "156:    if (pValid)",
      "158:    return 0;",
      "159:  }",
      "160: }",
      "161: static BYTE get_bpp_bmf(UINT32 bpp, BOOL* pValid)",
      "162: {",
      "163:  if (pValid)",
      "165:  switch (bpp)",
      "166:  {",
      "167:   case 1:",
      "168:    return 1;",
      "169:   case 8:",
      "170:    return 3;",
      "171:   case 16:",
      "172:    return 4;",
      "173:   case 24:",
      "174:    return 5;",
      "175:   case 32:",
      "176:    return 6;",
      "177:   default:",
      "178:    WLog_WARN(TAG, \"Invalid color depth %\" PRIu32, bpp);",
      "179:    if (pValid)",
      "181:    return 0;",
      "182:  }",
      "183: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "815:  if (brush->style & CACHED_BRUSH)",
      "816:  {",
      "817:   brush->index = brush->hatch;",
      "820:   if (brush->bpp == 0)",
      "821:    brush->bpp = 1;",
      "822:  }",
      "",
      "[Removed Lines]",
      "818:   brush->bpp = BMF_BPP[brush->style & 0x07];",
      "",
      "[Added Lines]",
      "871:   BOOL rc;",
      "873:   brush->bpp = get_bmf_bpp(brush->style, &rc);",
      "874:   if (!rc)",
      "875:    return FALSE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "859:  if (brush->style & CACHED_BRUSH)",
      "860:  {",
      "861:   brush->hatch = brush->index;",
      "864:   if (brush->bpp == 0)",
      "865:    brush->bpp = 1;",
      "866:  }",
      "",
      "[Removed Lines]",
      "862:   brush->bpp = BMF_BPP[brush->style & 0x07];",
      "",
      "[Added Lines]",
      "917:   BOOL rc;",
      "919:   brush->bpp = get_bmf_bpp(brush->style, &rc);",
      "920:   if (!rc)",
      "921:    return FALSE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2016: static CACHE_BITMAP_V2_ORDER* update_read_cache_bitmap_v2_order(rdpUpdate* update, wStream* s,",
      "2017:                                                                 BOOL compressed, UINT16 flags)",
      "2018: {",
      "2019:  BYTE bitsPerPixelId;",
      "2020:  CACHE_BITMAP_V2_ORDER* cache_bitmap_v2;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2077:  BOOL rc;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2030:  cache_bitmap_v2->cacheId = flags & 0x0003;",
      "2031:  cache_bitmap_v2->flags = (flags & 0xFF80) >> 7;",
      "2032:  bitsPerPixelId = (flags & 0x0078) >> 3;",
      "2035:  if (cache_bitmap_v2->flags & CBR2_PERSISTENT_KEY_PRESENT)",
      "2036:  {",
      "",
      "[Removed Lines]",
      "2033:  cache_bitmap_v2->bitmapBpp = CBR2_BPP[bitsPerPixelId];",
      "",
      "[Added Lines]",
      "2092:  cache_bitmap_v2->bitmapBpp = get_cbr2_bpp(bitsPerPixelId, &rc);",
      "2093:  if (!rc)",
      "2094:   goto fail;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2109: BOOL update_write_cache_bitmap_v2_order(wStream* s, CACHE_BITMAP_V2_ORDER* cache_bitmap_v2,",
      "2110:                                         BOOL compressed, UINT16* flags)",
      "2111: {",
      "2112:  BYTE bitsPerPixelId;",
      "2114:  if (!Stream_EnsureRemainingCapacity(",
      "2115:          s, update_approximate_cache_bitmap_v2_order(cache_bitmap_v2, compressed, flags)))",
      "2116:   return FALSE;",
      "2120:           ((cache_bitmap_v2->flags << 7) & 0xFF80);",
      "",
      "[Removed Lines]",
      "2118:  bitsPerPixelId = BPP_CBR2[cache_bitmap_v2->bitmapBpp];",
      "",
      "[Added Lines]",
      "2173:  BOOL rc;",
      "2180:  bitsPerPixelId = get_bpp_bmf(cache_bitmap_v2->bitmapBpp, &rc);",
      "2181:  if (!rc)",
      "2182:   return FALSE;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "2177: static CACHE_BITMAP_V3_ORDER* update_read_cache_bitmap_v3_order(rdpUpdate* update, wStream* s,",
      "2178:                                                                 UINT16 flags)",
      "2179: {",
      "2180:  BYTE bitsPerPixelId;",
      "2181:  BITMAP_DATA_EX* bitmapData;",
      "2182:  UINT32 new_len;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2244:  BOOL rc;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "2194:  cache_bitmap_v3->cacheId = flags & 0x00000003;",
      "2195:  cache_bitmap_v3->flags = (flags & 0x0000FF80) >> 7;",
      "2196:  bitsPerPixelId = (flags & 0x00000078) >> 3;",
      "2199:  if (Stream_GetRemainingLength(s) < 21)",
      "2200:   goto fail;",
      "",
      "[Removed Lines]",
      "2197:  cache_bitmap_v3->bpp = CBR23_BPP[bitsPerPixelId];",
      "",
      "[Added Lines]",
      "2262:  cache_bitmap_v3->bpp = get_cbr2_bpp(bitsPerPixelId, &rc);",
      "2263:  if (!rc)",
      "2264:   goto fail;",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "2242: BOOL update_write_cache_bitmap_v3_order(wStream* s, CACHE_BITMAP_V3_ORDER* cache_bitmap_v3,",
      "2243:                                         UINT16* flags)",
      "2244: {",
      "2245:  BYTE bitsPerPixelId;",
      "2246:  BITMAP_DATA_EX* bitmapData;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2312:  BOOL rc;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "2250:   return FALSE;",
      "2252:  bitmapData = &cache_bitmap_v3->bitmapData;",
      "2255:           ((cache_bitmap_v3->flags << 7) & 0x0000FF80) | ((bitsPerPixelId << 3) & 0x00000078);",
      "",
      "[Removed Lines]",
      "2253:  bitsPerPixelId = BPP_CBR23[cache_bitmap_v3->bpp];",
      "",
      "[Added Lines]",
      "2321:  bitsPerPixelId = get_bpp_bmf(cache_bitmap_v3->bpp, &rc);",
      "2322:  if (!rc)",
      "2323:   return FALSE;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "2574: static CACHE_BRUSH_ORDER* update_read_cache_brush_order(rdpUpdate* update, wStream* s, UINT16 flags)",
      "2575: {",
      "2576:  int i;",
      "2577:  BYTE iBitmapFormat;",
      "2578:  BOOL compressed = FALSE;",
      "2579:  CACHE_BRUSH_ORDER* cache_brush = calloc(1, sizeof(CACHE_BRUSH_ORDER));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2647:  BOOL rc;",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "2591:   goto fail;",
      "",
      "[Removed Lines]",
      "2590:  if (iBitmapFormat >= ARRAYSIZE(BMF_BPP))",
      "2593:  cache_brush->bpp = BMF_BPP[iBitmapFormat];",
      "",
      "[Added Lines]",
      "2661:  cache_brush->bpp = get_bmf_bpp(iBitmapFormat, &rc);",
      "2662:  if (!rc)",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "2661: {",
      "2662:  int i;",
      "2663:  BYTE iBitmapFormat;",
      "2664:  BOOL compressed = FALSE;",
      "2666:  if (!Stream_EnsureRemainingCapacity(s,",
      "2667:                                      update_approximate_cache_brush_order(cache_brush, flags)))",
      "2668:   return FALSE;",
      "",
      "[Removed Lines]",
      "2670:  iBitmapFormat = BPP_BMF[cache_brush->bpp];",
      "",
      "[Added Lines]",
      "2735:  BOOL rc;",
      "2742:  iBitmapFormat = get_bpp_bmf(cache_brush->bpp, &rc);",
      "2743:  if (!rc)",
      "2744:   return FALSE;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "36478d3d0b3d7fa378a875f60170a08e94747226",
      "candidate_info": {
        "commit_hash": "36478d3d0b3d7fa378a875f60170a08e94747226",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/36478d3d0b3d7fa378a875f60170a08e94747226",
        "files": [
          "channels/rdpdr/client/rdpdr_main.c",
          "client/X11/xf_client.c",
          "winpr/libwinpr/sspicli/sspicli.c"
        ],
        "message": "Replaced getlogin with getlogin_r",
        "before_after_code_files": [
          "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c",
          "client/X11/xf_client.c||client/X11/xf_client.c",
          "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rdpdr/client/rdpdr_main.c||channels/rdpdr/client/rdpdr_main.c": [
          "File: channels/rdpdr/client/rdpdr_main.c -> channels/rdpdr/client/rdpdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "598:  size_t x;",
          "599:  char buffer[MAX_PATH];",
          "600:  uid_t uid = getuid();",
          "603:  if (!path)",
          "604:   return FALSE;",
          "",
          "[Removed Lines]",
          "601:  const char* uname = getlogin();",
          "",
          "[Added Lines]",
          "601:  const char uname[MAX_PATH] = { 0 };",
          "603:  if (getlogin_r(uname, sizeof(uname)) != 0)",
          "604:   return FALSE;",
          "",
          "---------------"
        ],
        "client/X11/xf_client.c||client/X11/xf_client.c": [
          "File: client/X11/xf_client.c -> client/X11/xf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1182:  if (!settings->Username && !settings->CredentialsFromStdin && !settings->SmartcardLogon)",
          "1183:  {",
          "1187:   {",
          "1188:    settings->Username = _strdup(login_name);",
          "",
          "[Removed Lines]",
          "1184:   char* login_name = getlogin();",
          "1186:   if (login_name)",
          "",
          "[Added Lines]",
          "1184:   char login_name[MAX_PATH] = { 0 };",
          "1186:   if (getlogin_r(login_name, sizeof(login_name)) == 0)",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sspicli/sspicli.c||winpr/libwinpr/sspicli/sspicli.c": [
          "File: winpr/libwinpr/sspicli/sspicli.c -> winpr/libwinpr/sspicli/sspicli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: BOOL GetUserNameExA(EXTENDED_NAME_FORMAT NameFormat, LPSTR lpNameBuffer, PULONG nSize)",
          "202: {",
          "203:  size_t length;",
          "206:  switch (NameFormat)",
          "207:  {",
          "208:   case NameSamCompatible:",
          "210:    length = strlen(login);",
          "212:    if (*nSize >= length)",
          "213:    {",
          "214:     CopyMemory(lpNameBuffer, login, length + 1);",
          "216:    }",
          "217:    else",
          "218:    {",
          "",
          "[Removed Lines]",
          "204:  char* login;",
          "209:    login = getlogin();",
          "215:     return 1;",
          "",
          "[Added Lines]",
          "204:  char login[MAX_PATH];",
          "209:    if (getlogin_r(login, sizeof(login)) != 0)",
          "210:     return FALSE;",
          "216:     return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:    break;",
          "236:  }",
          "239: }",
          "241: BOOL GetUserNameExW(EXTENDED_NAME_FORMAT NameFormat, LPWSTR lpNameBuffer, PULONG nSize)",
          "",
          "[Removed Lines]",
          "238:  return 0;",
          "",
          "[Added Lines]",
          "239:  return FALSE;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "05cd9ea2290d23931f615c1b004d4b2e69074e27",
      "candidate_info": {
        "commit_hash": "05cd9ea2290d23931f615c1b004d4b2e69074e27",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/05cd9ea2290d23931f615c1b004d4b2e69074e27",
        "files": [
          "winpr/libwinpr/utils/trio/trio.c",
          "winpr/libwinpr/utils/trio/triostr.c"
        ],
        "message": "Fixed TrioParse and trio_length limts.\n\nCVE-2020-4030 thanks to @antonio-morales for finding this.",
        "before_after_code_files": [
          "winpr/libwinpr/utils/trio/trio.c||winpr/libwinpr/utils/trio/trio.c",
          "winpr/libwinpr/utils/trio/triostr.c||winpr/libwinpr/utils/trio/triostr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/trio/trio.c||winpr/libwinpr/utils/trio/trio.c": [
          "File: winpr/libwinpr/utils/trio/trio.c -> winpr/libwinpr/utils/trio/trio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2729:                                              trio_class_t* self, TRIO_CONST char* string,",
          "2730:                                              trio_flags_t flags, int width, int precision)",
          "2731: {",
          "2733:  int ch;",
          "2735:  assert(VALID(self));",
          "",
          "[Removed Lines]",
          "2732:  int length;",
          "",
          "[Added Lines]",
          "2732:  int length = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2747:  }",
          "2748:  else",
          "2749:  {",
          "2751:   {",
          "2752:    length = trio_length(string);",
          "2753:   }",
          "",
          "[Removed Lines]",
          "2750:   if (precision == 0)",
          "",
          "[Added Lines]",
          "2750:   if (precision <= 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4754:   }",
          "4758:    return NULL;",
          "",
          "[Removed Lines]",
          "4757:   if (trio_length(name) >= MAX_USER_NAME)",
          "",
          "[Added Lines]",
          "4757:   if (trio_length_max(name, MAX_USER_NAME) >= MAX_USER_NAME)",
          "",
          "---------------"
        ],
        "winpr/libwinpr/utils/trio/triostr.c||winpr/libwinpr/utils/trio/triostr.c": [
          "File: winpr/libwinpr/utils/trio/triostr.c -> winpr/libwinpr/utils/trio/triostr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #include <assert.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "28: #include <ctype.h>",
          "29: #include \"triodef.h\"",
          "30: #include \"triostr.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <limits.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "329: TRIO_PUBLIC_STRING size_t trio_length TRIO_ARGS1((string), TRIO_CONST char* string)",
          "330: {",
          "332: }",
          "334: #endif",
          "",
          "[Removed Lines]",
          "331:  return strlen(string);",
          "",
          "[Added Lines]",
          "332:  return trio_length_max(string, INT_MAX);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "240fdd07b123594a1f7a460de7e6877b1963d09e",
      "candidate_info": {
        "commit_hash": "240fdd07b123594a1f7a460de7e6877b1963d09e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/240fdd07b123594a1f7a460de7e6877b1963d09e",
        "files": [
          "channels/printer/client/cups/printer_cups.c",
          "channels/printer/client/win/printer_win.c",
          "winpr/libwinpr/sysinfo/sysinfo.c",
          "winpr/libwinpr/timezone/timezone.c"
        ],
        "message": "Replaced localtime with localtime_r",
        "before_after_code_files": [
          "channels/printer/client/cups/printer_cups.c||channels/printer/client/cups/printer_cups.c",
          "channels/printer/client/win/printer_win.c||channels/printer/client/win/printer_win.c",
          "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c",
          "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/printer/client/cups/printer_cups.c||channels/printer/client/cups/printer_cups.c": [
          "File: channels/printer/client/cups/printer_cups.c -> channels/printer/client/cups/printer_cups.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: static void printer_cups_get_printjob_name(char* buf, size_t size, size_t id)",
          "70: {",
          "71:  time_t tt;",
          "72:  struct tm* t;",
          "74:  tt = time(NULL);",
          "76:  sprintf_s(buf, size - 1, \"FreeRDP Print %04d-%02d-%02d %02d-%02d-%02d - Job %\" PRIdz,",
          "77:            t->tm_year + 1900, t->tm_mon + 1, t->tm_mday, t->tm_hour, t->tm_min, t->tm_sec, id);",
          "78: }",
          "",
          "[Removed Lines]",
          "75:  t = localtime(&tt);",
          "",
          "[Added Lines]",
          "72:  struct tm tres;",
          "76:  t = localtime_r(&tt, &tres);",
          "",
          "---------------"
        ],
        "channels/printer/client/win/printer_win.c||channels/printer/client/win/printer_win.c": [
          "File: channels/printer/client/win/printer_win.c -> channels/printer/client/win/printer_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78: static WCHAR* printer_win_get_printjob_name(size_t id)",
          "79: {",
          "80:  time_t tt;",
          "81:  struct tm* t;",
          "82:  WCHAR* str;",
          "83:  size_t len = 1024;",
          "84:  int rc;",
          "86:  tt = time(NULL);",
          "89:  str = calloc(len, sizeof(WCHAR));",
          "90:  if (!str)",
          "",
          "[Removed Lines]",
          "87:  t = localtime(&tt);",
          "",
          "[Added Lines]",
          "81:  struct tm tres;",
          "88:  t = localtime_r(&tt, &tres);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/sysinfo/sysinfo.c||winpr/libwinpr/sysinfo/sysinfo.c": [
          "File: winpr/libwinpr/sysinfo/sysinfo.c -> winpr/libwinpr/sysinfo/sysinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242: VOID GetLocalTime(LPSYSTEMTIME lpSystemTime)",
          "243: {",
          "244:  time_t ct = 0;",
          "245:  struct tm* ltm = NULL;",
          "246:  WORD wMilliseconds = 0;",
          "247:  ct = time(NULL);",
          "248:  wMilliseconds = (WORD)(GetTickCount() % 1000);",
          "250:  ZeroMemory(lpSystemTime, sizeof(SYSTEMTIME));",
          "252:  if (ltm)",
          "",
          "[Removed Lines]",
          "249:  ltm = localtime(&ct);",
          "",
          "[Added Lines]",
          "245:  struct tm tres;",
          "250:  ltm = localtime_r(&ct, &tres);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c": [
          "File: winpr/libwinpr/timezone/timezone.c -> winpr/libwinpr/timezone/timezone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: DWORD GetTimeZoneInformation(LPTIME_ZONE_INFORMATION lpTimeZoneInformation)",
          "340: {",
          "341:  time_t t;",
          "342:  struct tm* local_time;",
          "343:  TIME_ZONE_ENTRY* dtz;",
          "344:  LPTIME_ZONE_INFORMATION tz = lpTimeZoneInformation;",
          "345:  lpTimeZoneInformation->StandardBias = 0;",
          "346:  time(&t);",
          "348:  memset(tz, 0, sizeof(TIME_ZONE_INFORMATION));",
          "349: #ifdef HAVE_TM_GMTOFF",
          "350:  {",
          "",
          "[Removed Lines]",
          "347:  local_time = localtime(&t);",
          "",
          "[Added Lines]",
          "342:  struct tm tres;",
          "343:  ;",
          "349:  local_time = localtime_r(&t, &tres);",
          "350:  if (!local_time)",
          "351:   goto out_error;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "308c2c3544763873a5bea4d18c72c9f62e1584cb",
      "candidate_info": {
        "commit_hash": "308c2c3544763873a5bea4d18c72c9f62e1584cb",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/308c2c3544763873a5bea4d18c72c9f62e1584cb",
        "files": [
          "winpr/libwinpr/timezone/timezone.c"
        ],
        "message": "Removed duplicate semicolon",
        "before_after_code_files": [
          "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/timezone/timezone.c||winpr/libwinpr/timezone/timezone.c": [
          "File: winpr/libwinpr/timezone/timezone.c -> winpr/libwinpr/timezone/timezone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340: {",
          "341:  time_t t;",
          "342:  struct tm tres;",
          "344:  struct tm* local_time;",
          "345:  TIME_ZONE_ENTRY* dtz;",
          "346:  LPTIME_ZONE_INFORMATION tz = lpTimeZoneInformation;",
          "",
          "[Removed Lines]",
          "343:  ;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
      "candidate_info": {
        "commit_hash": "6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6d86e20e1e7caaab4f0c7f89e36d32914dbccc52",
        "files": [
          "server/shadow/shadow_server.c"
        ],
        "message": "Fixed double free",
        "before_after_code_files": [
          "server/shadow/shadow_server.c||server/shadow/shadow_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6295"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "server/shadow/shadow_server.c||server/shadow/shadow_server.c": [
          "File: server/shadow/shadow_server.c -> server/shadow/shadow_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "586:   char** list = CommandLineParseCommaSeparatedValuesEx(NULL, server->ipcSocket, &count);",
          "587:   if (!list || (count <= 1))",
          "588:   {",
          "590:    if (server->ipcSocket == NULL)",
          "591:    {",
          "592:     if (!open_port(server, NULL))",
          "593:      return -1;",
          "594:    }",
          "595:    else",
          "596:     return -1;",
          "597:   }",
          "599:   for (x = 1; x < count; x++)",
          "",
          "[Removed Lines]",
          "589:    free(list);",
          "",
          "[Added Lines]",
          "592:     {",
          "593:      free(list);",
          "595:     }",
          "598:    {",
          "599:     free(list);",
          "601:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}