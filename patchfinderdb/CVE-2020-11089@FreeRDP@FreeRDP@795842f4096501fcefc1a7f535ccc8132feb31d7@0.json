{
  "cve_id": "CVE-2020-11089",
  "cve_desc": "In FreeRDP before 2.1.0, there is an out-of-bound read in irp functions (parallel_process_irp_create, serial_process_irp_create, drive_process_irp_write, printer_process_irp_write, rdpei_recv_pdu, serial_process_irp_write). This has been fixed in 2.1.0.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "795842f4096501fcefc1a7f535ccc8132feb31d7",
  "patch_info": {
    "commit_hash": "795842f4096501fcefc1a7f535ccc8132feb31d7",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/795842f4096501fcefc1a7f535ccc8132feb31d7",
    "files": [
      "channels/parallel/client/parallel_main.c"
    ],
    "message": "Fixed oob read in parallel_process_irp_create",
    "before_after_code_files": [
      "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
    ]
  },
  "patch_diff": {
    "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
      "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "83: {",
      "84:  char* path = NULL;",
      "85:  int status;",
      "86:  UINT32 PathLength;",
      "90:  Stream_Read_UINT32(irp->input, PathLength);",
      "94:  if (status < 1)",
      "95:   if (!(path = (char*)calloc(1, 1)))",
      "",
      "[Removed Lines]",
      "87:  Stream_Seek(irp->input, 28);",
      "91:  status = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer(irp->input), PathLength / 2,",
      "92:                              &path, 0, NULL, NULL);",
      "",
      "[Added Lines]",
      "86:  WCHAR* ptr;",
      "88:  if (!Stream_SafeSeek(irp->input, 28))",
      "89:   return ERROR_INVALID_DATA;",
      "92:  if (Stream_GetRemainingLength(irp->input) < 4)",
      "93:   return ERROR_INVALID_DATA;",
      "95:  ptr = (WCHAR*)Stream_Pointer(irp->input);",
      "96:  if (!Stream_SafeSeek(irp->input, PathLength))",
      "97:   return ERROR_INVALID_DATA;",
      "98:  status = ConvertFromUnicode(CP_UTF8, 0, ptr, PathLength / 2, &path, 0, NULL, NULL);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b230ac98e9e5f0c6b05b3b7f4f14016977bb5395",
      "candidate_info": {
        "commit_hash": "b230ac98e9e5f0c6b05b3b7f4f14016977bb5395",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/b230ac98e9e5f0c6b05b3b7f4f14016977bb5395",
        "files": [
          "channels/cliprdr/cliprdr_common.c"
        ],
        "message": "Fixed oob read in cliprdr_read_format_list",
        "before_after_code_files": [
          "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
          "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:  int formatNameLength;",
          "401:  char* szFormatName;",
          "402:  WCHAR* wszFormatName;",
          "404:  CLIPRDR_FORMAT* formats = NULL;",
          "405:  UINT error = CHANNEL_RC_OK;",
          "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
          "409:  index = 0;",
          "410:  formatList->numFormats = 0;",
          "413:  if (!formatList->dataLen)",
          "414:  {",
          "418:  }",
          "419:  else if (!useLongFormatNames)",
          "420:  {",
          "424:   {",
          "426:    return ERROR_INTERNAL_ERROR;",
          "427:   }",
          "",
          "[Removed Lines]",
          "403:  UINT32 dataLen = formatList->dataLen;",
          "411:  position = Stream_GetPosition(s);",
          "416:   formatList->formats = NULL;",
          "417:   formatList->numFormats = 0;",
          "421:   formatList->numFormats = (dataLen / 36);",
          "423:   if ((formatList->numFormats * 36) != dataLen)",
          "425:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIu32 \"\", dataLen);",
          "",
          "[Added Lines]",
          "403:  wStream sub1, sub2;",
          "411:  formatList->formats = NULL;",
          "414:  Stream_StaticInit(&sub1, Stream_Pointer(s), formatList->dataLen);",
          "415:  if (!Stream_SafeSeek(s, formatList->dataLen))",
          "416:   return ERROR_INVALID_DATA;",
          "423:   const size_t cap = Stream_Capacity(&sub1);",
          "424:   formatList->numFormats = (cap / 36);",
          "426:   if ((formatList->numFormats * 36) != cap)",
          "428:    WLog_ERR(TAG, \"Invalid short format list length: %\" PRIuz \"\", cap);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "438:   formatList->formats = formats;",
          "441:   {",
          "445:    formats[index].formatName = NULL;",
          "",
          "[Removed Lines]",
          "440:   while (dataLen)",
          "443:    dataLen -= 4;",
          "",
          "[Added Lines]",
          "443:   while (Stream_GetRemainingLength(&sub1) >= 4)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "455:    if (asciiNames)",
          "456:    {",
          "459:     if (szFormatName[0])",
          "460:     {",
          "",
          "[Removed Lines]",
          "457:     szFormatName = (char*)Stream_Pointer(s);",
          "",
          "[Added Lines]",
          "457:    szFormatName = (char*)Stream_Pointer(&sub1);",
          "458:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
          "459:    if (!Stream_SafeSeek(&sub1, 32))",
          "460:     goto error_out;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "472:    }",
          "473:    else",
          "474:    {",
          "477:     if (wszFormatName[0])",
          "478:     {",
          "",
          "[Removed Lines]",
          "475:     wszFormatName = (WCHAR*)Stream_Pointer(s);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "489:     }",
          "490:    }",
          "494:    index++;",
          "495:   }",
          "496:  }",
          "497:  else",
          "498:  {",
          "500:   {",
          "514:    formatList->numFormats++;",
          "515:   }",
          "520:   if (formatList->numFormats)",
          "521:    formats = (CLIPRDR_FORMAT*)calloc(formatList->numFormats, sizeof(CLIPRDR_FORMAT));",
          "",
          "[Removed Lines]",
          "492:    Stream_Seek(s, 32);",
          "493:    dataLen -= 32;",
          "499:   while (dataLen)",
          "502:    dataLen -= 4;",
          "504:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
          "506:    if (!wszFormatName[0])",
          "507:     formatNameLength = 0;",
          "508:    else",
          "509:     formatNameLength = _wcslen(wszFormatName);",
          "511:    Stream_Seek(s, (formatNameLength + 1) * 2);",
          "512:    dataLen -= ((formatNameLength + 1) * 2);",
          "517:   dataLen = formatList->dataLen;",
          "518:   Stream_SetPosition(s, position);",
          "",
          "[Added Lines]",
          "499:   sub2 = sub1;",
          "500:   while (Stream_GetRemainingLength(&sub1) > 0)",
          "502:    size_t rest;",
          "504:     goto error_out;",
          "506:    wszFormatName = (WCHAR*)Stream_Pointer(&sub1);",
          "507:    rest = Stream_GetRemainingLength(&sub1);",
          "508:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
          "510:    if (!Stream_SafeSeek(&sub1, (formatNameLength + 1) * sizeof(WCHAR)))",
          "511:     goto error_out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "529:   formatList->formats = formats;",
          "532:   {",
          "536:    formats[index].formatName = NULL;",
          "545:    if (formatNameLength)",
          "546:    {",
          "549:     {",
          "550:      WLog_ERR(TAG, \"failed to convert long clipboard format name\");",
          "551:      error = ERROR_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "531:   while (dataLen)",
          "534:    dataLen -= 4;",
          "538:    wszFormatName = (WCHAR*)Stream_Pointer(s);",
          "540:    if (!wszFormatName[0])",
          "541:     formatNameLength = 0;",
          "542:    else",
          "543:     formatNameLength = _wcslen(wszFormatName);",
          "547:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, -1, &(formats[index].formatName),",
          "548:                            0, NULL, NULL) < 1)",
          "",
          "[Added Lines]",
          "526:   while (Stream_GetRemainingLength(&sub2) >= 4)",
          "528:    size_t rest;",
          "533:    wszFormatName = (WCHAR*)Stream_Pointer(&sub2);",
          "534:    rest = Stream_GetRemainingLength(&sub2);",
          "535:    formatNameLength = _wcsnlen(wszFormatName, rest / sizeof(WCHAR));",
          "536:    if (!Stream_SafeSeek(&sub2, (formatNameLength + 1) * sizeof(WCHAR)))",
          "537:     goto error_out;",
          "541:     if (ConvertFromUnicode(CP_UTF8, 0, wszFormatName, formatNameLength,",
          "542:                            &(formats[index].formatName), 0, NULL, NULL) < 1)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "553:     }",
          "554:    }",
          "559:    index++;",
          "560:   }",
          "561:  }",
          "",
          "[Removed Lines]",
          "556:    Stream_Seek(s, (formatNameLength + 1) * 2);",
          "557:    dataLen -= ((formatNameLength + 1) * 2);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "582:   }",
          "584:   free(formatList->formats);",
          "585:  }",
          "586: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "576:   formatList->formats = NULL;",
          "577:   formatList->numFormats = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "06c32f170093a6ecde93e3bc07fed6a706bfbeb3",
      "candidate_info": {
        "commit_hash": "06c32f170093a6ecde93e3bc07fed6a706bfbeb3",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/06c32f170093a6ecde93e3bc07fed6a706bfbeb3",
        "files": [
          "channels/video/client/video_main.c"
        ],
        "message": "Fixed int overflow in PresentationContext_new\n\nThanks to hac425 CVE-2020-11038",
        "before_after_code_files": [
          "channels/video/client/video_main.c||channels/video/client/video_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/video/client/video_main.c||channels/video/client/video_main.c": [
          "File: channels/video/client/video_main.c -> channels/video/client/video_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "220: static PresentationContext* PresentationContext_new(VideoClientContext* video, BYTE PresentationId,",
          "221:                                                     UINT32 x, UINT32 y, UINT32 width, UINT32 height)",
          "222: {",
          "223:  VideoClientContextPriv* priv = video->priv;",
          "225:  if (!ret)",
          "226:   return NULL;",
          "",
          "[Removed Lines]",
          "224:  PresentationContext* ret = calloc(1, sizeof(*ret));",
          "",
          "[Added Lines]",
          "223:  size_t s;",
          "225:  PresentationContext* ret;",
          "226:  s = width * height * 4ULL;",
          "227:  if (s > INT32_MAX)",
          "228:   return NULL;",
          "230:  ret = calloc(1, sizeof(*ret));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "243:   goto error_currentSample;",
          "244:  }",
          "247:  if (!ret->surfaceData)",
          "248:  {",
          "249:   WLog_ERR(TAG, \"unable to allocate surfaceData\");",
          "",
          "[Removed Lines]",
          "246:  ret->surfaceData = BufferPool_Take(priv->surfacePool, width * height * 4);",
          "",
          "[Added Lines]",
          "252:  ret->surfaceData = BufferPool_Take(priv->surfacePool, s);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "daf4e1132477a4dab8ce9797422406c090a3b103",
      "candidate_info": {
        "commit_hash": "daf4e1132477a4dab8ce9797422406c090a3b103",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/daf4e1132477a4dab8ce9797422406c090a3b103",
        "files": [
          "libfreerdp/core/rdp.c"
        ],
        "message": "Silence valgrind in rdp_read_header\n\nIf a disconnect message is received, we returned success but did\nnot initialize the return arguments.",
        "before_after_code_files": [
          "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/rdp.c||libfreerdp/core/rdp.c": [
          "File: libfreerdp/core/rdp.c -> libfreerdp/core/rdp.c"
        ]
      }
    },
    {
      "candidate_hash": "8ec50b6cc15a0c5ee800f525145c6a0c6d344aff",
      "candidate_info": {
        "commit_hash": "8ec50b6cc15a0c5ee800f525145c6a0c6d344aff",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/8ec50b6cc15a0c5ee800f525145c6a0c6d344aff",
        "files": [
          "channels/cliprdr/client/cliprdr_main.c",
          "channels/cliprdr/cliprdr_common.c"
        ],
        "message": "Fix short format name configuration and format list return.",
        "before_after_code_files": [
          "channels/cliprdr/client/cliprdr_main.c||channels/cliprdr/client/cliprdr_main.c",
          "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/cliprdr/client/cliprdr_main.c||channels/cliprdr/client/cliprdr_main.c": [
          "File: channels/cliprdr/client/cliprdr_main.c -> channels/cliprdr/client/cliprdr_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:                                         const CLIPRDR_CAPABILITIES* capabilities)",
          "540: {",
          "541:  wStream* s;",
          "542:  const CLIPRDR_GENERAL_CAPABILITY_SET* generalCapabilitySet;",
          "543:  cliprdrPlugin* cliprdr = (cliprdrPlugin*)context->handle;",
          "544:  s = cliprdr_packet_new(CB_CLIP_CAPS, 0, 4 + CB_CAPSTYPE_GENERAL_LEN);",
          "546:  if (!s)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:  UINT32 flags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:  WLog_Print(cliprdr->log, WLOG_DEBUG, \"ClientCapabilities\");",
          "560:  return cliprdr_packet_send(cliprdr, s);",
          "561: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560:  flags = generalCapabilitySet->generalFlags;",
          "566:  if (!cliprdr->useLongFormatNames)",
          "567:   flags &= ~CB_USE_LONG_FORMAT_NAMES;",
          "568:  if (!cliprdr->streamFileClipEnabled)",
          "569:   flags &= ~CB_STREAM_FILECLIP_ENABLED;",
          "570:  if (!cliprdr->fileClipNoFilePaths)",
          "571:   flags &= ~CB_FILECLIP_NO_FILE_PATHS;",
          "572:  if (!cliprdr->canLockClipData)",
          "573:   flags &= CB_CAN_LOCK_CLIPDATA;",
          "575:  cliprdr->useLongFormatNames = flags & CB_USE_LONG_FORMAT_NAMES;",
          "576:  cliprdr->streamFileClipEnabled = flags & CB_STREAM_FILECLIP_ENABLED;",
          "577:  cliprdr->fileClipNoFilePaths = flags & CB_FILECLIP_NO_FILE_PATHS;",
          "578:  cliprdr->canLockClipData = flags & CB_CAN_LOCK_CLIPDATA;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1139:  }",
          "1141:  cliprdr->log = WLog_Get(\"com.freerdp.channels.cliprdr.client\");",
          "1146:  WLog_Print(cliprdr->log, WLOG_DEBUG, \"VirtualChannelEntryEx\");",
          "1147:  CopyMemory(&(cliprdr->channelEntryPoints), pEntryPoints,",
          "1148:             sizeof(CHANNEL_ENTRY_POINTS_FREERDP_EX));",
          "",
          "[Removed Lines]",
          "1142:  cliprdr->useLongFormatNames = TRUE;",
          "1143:  cliprdr->streamFileClipEnabled = FALSE;",
          "1144:  cliprdr->fileClipNoFilePaths = TRUE;",
          "1145:  cliprdr->canLockClipData = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "channels/cliprdr/cliprdr_common.c||channels/cliprdr/cliprdr_common.c": [
          "File: channels/cliprdr/cliprdr_common.c -> channels/cliprdr/cliprdr_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "402:  WCHAR* wszFormatName;",
          "403:  wStream sub1, sub2;",
          "404:  CLIPRDR_FORMAT* formats = NULL;",
          "407:  asciiNames = (formatList->msgFlags & CB_ASCII_NAMES) ? TRUE : FALSE;",
          "",
          "[Removed Lines]",
          "405:  UINT error = CHANNEL_RC_OK;",
          "",
          "[Added Lines]",
          "405:  UINT error = ERROR_INTERNAL_ERROR;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "551:   }",
          "552:  }",
          "556: error_out:",
          "557:  cliprdr_free_format_list(formatList);",
          "",
          "[Removed Lines]",
          "554:  return error;",
          "",
          "[Added Lines]",
          "554:  return CHANNEL_RC_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6efa8290d8df489ed472edbdf6ce27002f4323b6",
      "candidate_info": {
        "commit_hash": "6efa8290d8df489ed472edbdf6ce27002f4323b6",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/6efa8290d8df489ed472edbdf6ce27002f4323b6",
        "files": [
          "channels/parallel/client/parallel_main.c"
        ],
        "message": "Fixed oob read in parallel_process_irp_read",
        "before_after_code_files": [
          "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6151"
        ],
        "olp_code_files": {
          "patch": [
            "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
          ],
          "candidate": [
            "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c"
          ]
        }
      },
      "candidate_diff": {
        "channels/parallel/client/parallel_main.c||channels/parallel/client/parallel_main.c": [
          "File: channels/parallel/client/parallel_main.c -> channels/parallel/client/parallel_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "149:  UINT64 Offset;",
          "150:  ssize_t status;",
          "151:  BYTE* buffer = NULL;",
          "152:  Stream_Read_UINT32(irp->input, Length);",
          "153:  Stream_Read_UINT64(irp->input, Offset);",
          "154:  buffer = (BYTE*)malloc(Length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152:  if (Stream_GetRemainingLength(irp->input) < 12)",
          "153:   return ERROR_INVALID_DATA;",
          "",
          "---------------"
        ]
      }
    }
  ]
}