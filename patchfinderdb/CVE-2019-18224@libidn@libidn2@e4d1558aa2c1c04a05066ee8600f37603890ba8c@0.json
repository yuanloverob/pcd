{
  "cve_id": "CVE-2019-18224",
  "cve_desc": "idn2_to_ascii_4i in lib/lookup.c in GNU libidn2 before 2.1.1 has a heap-based buffer overflow via a long domain string.",
  "repo": "libidn/libidn2",
  "patch_hash": "e4d1558aa2c1c04a05066ee8600f37603890ba8c",
  "patch_info": {
    "commit_hash": "e4d1558aa2c1c04a05066ee8600f37603890ba8c",
    "repo": "libidn/libidn2",
    "commit_url": "https://github.com/libidn/libidn2/commit/e4d1558aa2c1c04a05066ee8600f37603890ba8c",
    "files": [
      "lib/lookup.c"
    ],
    "message": "idn2_to_ascii_4i(): Restrict output length to 63",
    "before_after_code_files": [
      "lib/lookup.c||lib/lookup.c"
    ]
  },
  "patch_diff": {
    "lib/lookup.c||lib/lookup.c": [
      "File: lib/lookup.c -> lib/lookup.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "620:       if (output)",
      "624:     }",
      "626:   return rc;",
      "",
      "[Removed Lines]",
      "621:  strcpy (output, (const char *) output_u8);",
      "623:       free(output_u8);",
      "",
      "[Added Lines]",
      "620:       size_t len = strlen ((char *) output_u8);",
      "622:       if (len > 63)",
      "623:         {",
      "624:    free (output_u8);",
      "625:    return IDN2_TOO_BIG_DOMAIN;",
      "626:         }",
      "629:  strcpy (output, (char *) output_u8);",
      "631:       free (output_u8);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "301a43b5ac41f0fbea41d70444c0942ae93624cd",
      "candidate_info": {
        "commit_hash": "301a43b5ac41f0fbea41d70444c0942ae93624cd",
        "repo": "libidn/libidn2",
        "commit_url": "https://github.com/libidn/libidn2/commit/301a43b5ac41f0fbea41d70444c0942ae93624cd",
        "files": [
          "fuzz/libidn2_to_ascii_8z_fuzzer.c",
          "lib/idn2.h.in",
          "lib/idn2.map",
          "lib/lookup.c",
          "tests/test-lookup.c"
        ],
        "message": "Deprecate idn2_to_ascii_4i(), add idn2_to_ascii_4i2()",
        "before_after_code_files": [
          "fuzz/libidn2_to_ascii_8z_fuzzer.c||fuzz/libidn2_to_ascii_8z_fuzzer.c",
          "lib/idn2.h.in||lib/idn2.h.in",
          "lib/idn2.map||lib/idn2.map",
          "lib/lookup.c||lib/lookup.c",
          "tests/test-lookup.c||tests/test-lookup.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/lookup.c||lib/lookup.c"
          ],
          "candidate": [
            "lib/lookup.c||lib/lookup.c"
          ]
        }
      },
      "candidate_diff": {
        "fuzz/libidn2_to_ascii_8z_fuzzer.c||fuzz/libidn2_to_ascii_8z_fuzzer.c": [
          "File: fuzz/libidn2_to_ascii_8z_fuzzer.c -> fuzz/libidn2_to_ascii_8z_fuzzer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:   assert(u32 != NULL);",
          "70:   assert(out2 != NULL);",
          "72:   for (unsigned it = 0; it < sizeof(flags)/sizeof(flags[0]); it++)",
          "75:   memcpy(u32, data, size);",
          "76:   u32[size / 4] = 0;",
          "",
          "[Removed Lines]",
          "73:    idn2_to_ascii_4i((uint32_t *) data, size / 4, out2, flags[it]);",
          "",
          "[Added Lines]",
          "72:   idn2_to_ascii_4i((uint32_t *) data, size / 4, out2, 0);",
          "75:    if (idn2_to_ascii_4i2((uint32_t *) data, size / 4, &out, flags[it]) == IDN2_OK)",
          "76:     idn2_free(out);",
          "",
          "---------------"
        ],
        "lib/idn2.h.in||lib/idn2.h.in": [
          "File: lib/idn2.h.in -> lib/idn2.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: #if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 96)",
          "76: # define G_GNUC_IDN2_ATTRIBUTE_PURE __attribute__ ((__pure__))",
          "77: # define G_GNUC_IDN2_ATTRIBUTE_CONST __attribute__ ((__const__))",
          "78: # define G_GNUC_UNUSED __attribute__ ((__unused__))",
          "79: #else",
          "85: #endif",
          "",
          "[Removed Lines]",
          "74: # define _IDN2_ATTRIBUTE_PURE __attribute__ ((__pure__))",
          "75: # define _IDN2_ATTRIBUTE_CONST __attribute__ ((__const__))",
          "",
          "[Added Lines]",
          "83: # define G_GNUC_DEPRECATED __attribute__((deprecated))",
          "92: #if defined(_MSC_VER)",
          "93: # undef G_GNUC_DEPRECATED",
          "94: # define G_GNUC_DEPRECATED __declspec(deprecated)",
          "95: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267:     idn2_to_ascii_4i (const uint32_t * input, size_t inlen, char * output, int flags);",
          "268:   extern _IDN2_API int",
          "269:     idn2_to_ascii_4z (const uint32_t * input, char ** output, int flags);",
          "270:   extern _IDN2_API int",
          "",
          "[Removed Lines]",
          "266:   extern _IDN2_API int",
          "",
          "[Added Lines]",
          "276:   extern _IDN2_API G_GNUC_DEPRECATED int",
          "278:   extern _IDN2_API int",
          "279:     idn2_to_ascii_4i2 (const uint32_t * input, size_t inlen, char ** output, int flags);",
          "",
          "---------------"
        ],
        "lib/idn2.map||lib/idn2.map": [
          "File: lib/idn2.map -> lib/idn2.map",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:     idn2_decode_ul;",
          "28:     idn2_register_ul;",
          "35:     idn2_to_unicode_8z4z;",
          "36:     idn2_to_unicode_4z4z;",
          "",
          "[Removed Lines]",
          "30:   idn2_to_ascii_4i;",
          "31:   idn2_to_ascii_4z;",
          "32:   idn2_to_ascii_8z;",
          "33:   idn2_to_ascii_lz;",
          "",
          "[Added Lines]",
          "30:     idn2_to_ascii_4i;",
          "31:     idn2_to_ascii_4z;",
          "32:     idn2_to_ascii_8z;",
          "33:     idn2_to_ascii_lz;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "42:     idn2_strerror;",
          "43:     idn2_strerror_name;",
          "49:   local:",
          "51: };",
          "",
          "[Removed Lines]",
          "45:     # Internal self-test use only.",
          "46:     _idn2_punycode_encode;",
          "47:     _idn2_punycode_decode;",
          "",
          "[Added Lines]",
          "49: IDN2_2.1.0 {",
          "50:   global:",
          "51:     idn2_to_ascii_4i2;",
          "52: } IDN2_0.0.0;",
          "",
          "---------------"
        ],
        "lib/lookup.c||lib/lookup.c": [
          "File: lib/lookup.c -> lib/lookup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "580: int",
          "581: idn2_to_ascii_4i (const uint32_t * input, size_t inlen, char * output, int flags)",
          "582: {",
          "583:   uint32_t *input_u32;",
          "584:   uint8_t *input_u8, *output_u8;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "584: {",
          "585:   char *out;",
          "586:   int rc;",
          "588:   if (!input)",
          "589:     {",
          "590:       if (output)",
          "592:       return IDN2_OK;",
          "593:     }",
          "595:   rc = idn2_to_ascii_4i2 (input, inlen, &out, flags);",
          "596:   if (rc == IDN2_OK)",
          "597:   {",
          "598:    size_t len = strlen(out);",
          "600:    if (len > 63)",
          "601:     rc = IDN2_TOO_BIG_DOMAIN;",
          "602:    else if (output)",
          "603:     memcpy (output, out, len);",
          "605:    free (out);",
          "606:   }",
          "608:   return rc;",
          "609: }",
          "645: int",
          "646: idn2_to_ascii_4i2 (const uint32_t * input, size_t inlen, char ** output, int flags)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "614:   if (rc == IDN2_OK)",
          "615:     {",
          "628:       if (output)",
          "632:     }",
          "634:   return rc;",
          "",
          "[Removed Lines]",
          "620:       size_t len = strlen ((char *) output_u8);",
          "622:       if (len > 63)",
          "623:         {",
          "624:    free (output_u8);",
          "625:    return IDN2_TOO_BIG_DOMAIN;",
          "626:         }",
          "629:  strcpy (output, (char *) output_u8);",
          "631:       free (output_u8);",
          "",
          "[Added Lines]",
          "683:   else",
          "684:  free (output_u8);",
          "",
          "---------------"
        ],
        "tests/test-lookup.c||tests/test-lookup.c": [
          "File: tests/test-lookup.c -> tests/test-lookup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "899: {",
          "900:   uint32_t dummy_u32[4] = { 'a', 'b', 'c', 0 };",
          "901:   uint8_t *out;",
          "903:   size_t i;",
          "904:   int rc;",
          "",
          "[Removed Lines]",
          "902:   char outbuf[4];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1033:     ok++;",
          "1034:   }",
          "1037:     failed++;",
          "1038:     printf(\"special #9 failed with %d\\n\", rc);",
          "1039:   } else {",
          "1040:     ok++;",
          "1041:   }",
          "1042: }",
          "",
          "[Removed Lines]",
          "1036:   if ((rc = idna_to_ascii_4i (dummy_u32, 4, outbuf, 0)) != IDN2_OK) {",
          "",
          "[Added Lines]",
          "1035:   if ((rc = idn2_to_ascii_4i2 (dummy_u32, 4, (char **) &out, 0)) != IDN2_OK) {",
          "1039:     idn2_free (out);",
          "",
          "---------------"
        ]
      }
    }
  ]
}