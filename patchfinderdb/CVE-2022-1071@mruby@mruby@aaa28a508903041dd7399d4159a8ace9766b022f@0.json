{
  "cve_id": "CVE-2022-1071",
  "cve_desc": "User after free in mrb_vm_exec in GitHub repository mruby/mruby prior to 3.2.",
  "repo": "mruby/mruby",
  "patch_hash": "aaa28a508903041dd7399d4159a8ace9766b022f",
  "patch_info": {
    "commit_hash": "aaa28a508903041dd7399d4159a8ace9766b022f",
    "repo": "mruby/mruby",
    "commit_url": "https://github.com/mruby/mruby/commit/aaa28a508903041dd7399d4159a8ace9766b022f",
    "files": [
      "src/vm.c"
    ],
    "message": "vm.c: stack may be reallocated in functions calls.\n\nProbably due to recursive VM calls via `mrb_funcall()`.",
    "before_after_code_files": [
      "src/vm.c||src/vm.c"
    ]
  },
  "patch_diff": {
    "src/vm.c||src/vm.c": [
      "File: src/vm.c -> src/vm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1394:         regs[a] = mrb_ary_entry(va, mrb_integer(vb));",
      "1395:         break;",
      "1396:       case MRB_TT_HASH:",
      "1398:         break;",
      "1399:       case MRB_TT_STRING:",
      "1400:         switch (mrb_type(vb)) {",
      "1401:         case MRB_TT_INTEGER:",
      "1402:         case MRB_TT_STRING:",
      "1403:         case MRB_TT_RANGE:",
      "1405:           break;",
      "1406:         default:",
      "1407:           goto getidx_fallback;",
      "",
      "[Removed Lines]",
      "1397:         regs[a] = mrb_hash_get(mrb, va, vb);",
      "1404:           regs[a] = mrb_str_aref(mrb, va, vb, mrb_undef_value());",
      "",
      "[Added Lines]",
      "1397:         va = mrb_hash_get(mrb, va, vb);",
      "1398:         regs[a] = va;",
      "1405:           va = mrb_str_aref(mrb, va, vb, mrb_undef_value());",
      "1406:           regs[a] = va;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1423:     }",
      "1425:     CASE(OP_GETCONST, BB) {",
      "1427:       NEXT;",
      "1428:     }",
      "",
      "[Removed Lines]",
      "1426:       regs[a] = mrb_vm_const_get(mrb, syms[b]);",
      "",
      "[Added Lines]",
      "1428:       mrb_value v = mrb_vm_const_get(mrb, syms[b]);",
      "1429:       regs[a] = v;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1433:     }",
      "1435:     CASE(OP_GETMCNST, BB) {",
      "1437:       NEXT;",
      "1438:     }",
      "",
      "[Removed Lines]",
      "1436:       regs[a] = mrb_const_get(mrb, regs[a], syms[b]);",
      "",
      "[Added Lines]",
      "1439:       mrb_value v = mrb_const_get(mrb, regs[a], syms[b]);",
      "1440:       regs[a] = v;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2014:     CASE(OP_KARG, BB) {",
      "2015:       mrb_value k = mrb_symbol_value(syms[b]);",
      "2016:       mrb_int kidx = mrb_ci_kidx(mrb->c->ci);",
      "2019:       if (kidx < 0 || !mrb_hash_p(kdict=regs[kidx]) || !mrb_hash_key_p(mrb, kdict, k)) {",
      "2020:         mrb_value str = mrb_format(mrb, \"missing keyword: %v\", k);",
      "2021:         mrb_exc_set(mrb, mrb_exc_new_str(mrb, E_ARGUMENT_ERROR, str));",
      "2022:         goto L_RAISE;",
      "2023:       }",
      "2025:       mrb_hash_delete_key(mrb, kdict, k);",
      "2026:       NEXT;",
      "2027:     }",
      "",
      "[Removed Lines]",
      "2017:       mrb_value kdict;",
      "2024:       regs[a] = mrb_hash_get(mrb, kdict, k);",
      "",
      "[Added Lines]",
      "2021:       mrb_value kdict, v;",
      "2028:       v = mrb_hash_get(mrb, kdict, k);",
      "2029:       regs[a] = v;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8c355ec7e36eaccd7ac39b15fc340cf7894adc40",
      "candidate_info": {
        "commit_hash": "8c355ec7e36eaccd7ac39b15fc340cf7894adc40",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/8c355ec7e36eaccd7ac39b15fc340cf7894adc40",
        "files": [
          "src/vm.c"
        ],
        "message": "Partially allow overriding of `String#[]` methods\n\nThis is for the purpose of supporting `Regexp`.\n\n- configuration and build\n\n  ```console\n  % cat regexp_config.rb\n  MRuby::Lockfile.disable\n  MRuby::Build.new do\n    toolchain \"clang\"\n    enable_debug\n    gem core: \"mruby-bin-mruby\"\n    gem core: \"mruby-print\"\n    gem mgem: \"mruby-onig-regexp\"\n    #gem mgem: \"mruby-regexp-pcre\"\n  end\n\n  % rake MRUBY_CONFIG=regexp_config.rb\n  ```\n\n- mruby HEAD (bec074e)\n\n  ```console\n  % build/host/bin/mruby -e 'p \"abcdefg\"[/.(?=...$)/]'\n  -e:1: can't convert OnigRegexp into Integer (TypeError)\n  ```\n\n- with this patch\n\n  ```console\n  % build/host/bin/mruby -e 'p \"abcdefg\"[/.(?=...$)/]'\n  \"d\"\n  ```",
        "before_after_code_files": [
          "src/vm.c||src/vm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vm.c||src/vm.c"
          ],
          "candidate": [
            "src/vm.c||src/vm.c"
          ]
        }
      },
      "candidate_diff": {
        "src/vm.c||src/vm.c": [
          "File: src/vm.c -> src/vm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1261:         regs[a] = mrb_hash_get(mrb, va, vb);",
          "1262:         break;",
          "1263:       case MRB_TT_STRING:",
          "1265:         break;",
          "1266:       default:",
          "1267:       getidx_fallback:",
          "",
          "[Removed Lines]",
          "1264:         regs[a] = mrb_str_aref(mrb, va, vb, mrb_undef_value());",
          "",
          "[Added Lines]",
          "1264:         switch (mrb_type(vb)) {",
          "1265:         case MRB_TT_INTEGER:",
          "1266:         case MRB_TT_STRING:",
          "1267:         case MRB_TT_RANGE:",
          "1268:           regs[a] = mrb_str_aref(mrb, va, vb, mrb_undef_value());",
          "1269:           break;",
          "1270:         default:",
          "1271:           goto getidx_fallback;",
          "1272:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09336c5d49481d56587f6e28924014954b4c8dd2",
      "candidate_info": {
        "commit_hash": "09336c5d49481d56587f6e28924014954b4c8dd2",
        "repo": "mruby/mruby",
        "commit_url": "https://github.com/mruby/mruby/commit/09336c5d49481d56587f6e28924014954b4c8dd2",
        "files": [
          "include/mruby/ops.h",
          "mrbgems/mruby-compiler/core/codegen.c",
          "src/codedump.c",
          "src/string.c",
          "src/vm.c"
        ],
        "message": "mruby/ops.h: add new instructions `OP_GETIDX` and `OP_SETIDX`.\n\nWhich represent `obj[int]` and `obj[int]=val` respectively where `obj`\nis either `string`, `array` or `hash`, so that index access could be\nfaster. When `obj` is not assumed type or `R(a+1)` is not integer, the\ninstructions fallback to method calls.",
        "before_after_code_files": [
          "include/mruby/ops.h||include/mruby/ops.h",
          "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c",
          "src/codedump.c||src/codedump.c",
          "src/string.c||src/string.c",
          "src/vm.c||src/vm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/vm.c||src/vm.c"
          ],
          "candidate": [
            "src/vm.c||src/vm.c"
          ]
        }
      },
      "candidate_diff": {
        "include/mruby/ops.h||include/mruby/ops.h": [
          "File: include/mruby/ops.h -> include/mruby/ops.h"
        ],
        "mrbgems/mruby-compiler/core/codegen.c||mrbgems/mruby-compiler/core/codegen.c": [
          "File: mrbgems/mruby-compiler/core/codegen.c -> mrbgems/mruby-compiler/core/codegen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "832: gen_binop(codegen_scope *s, mrb_sym op, uint16_t dst)",
          "833: {",
          "834:   if (no_peephole(s)) return FALSE;",
          "835:   else {",
          "836:     struct mrb_insn_data data = mrb_last_insn(s);",
          "837:     mrb_int n, n0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "835:   else if (op == MRB_OPSYM_2(s->mrb, aref)) {",
          "836:     genop_1(s, OP_GETIDX, dst);",
          "837:     return TRUE;",
          "838:   }",
          "",
          "---------------"
        ],
        "src/codedump.c||src/codedump.c": [
          "File: src/codedump.c -> src/codedump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "265:       printf(\"OP_SETCV\\t%s\\tR%d\\t\", mrb_sym_dump(mrb, irep->syms[b]), a);",
          "266:       print_lv_a(mrb, irep, a);",
          "267:       break;",
          "268:     CASE(OP_JMP, S):",
          "269:       i = pc - irep->iseq;",
          "270:       printf(\"OP_JMP\\t\\t%03d\\n\", (int)i+(int16_t)a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:     CASE(OP_GETIDX, B):",
          "269:       printf(\"OP_GETIDX\\tR%d\\tR%d\\n\", a, a+1);",
          "270:       break;",
          "271:     CASE(OP_SETIDX, B):",
          "272:       printf(\"OP_SETIDX\\tR%d\\tR%d\\tR%d\\n\", a, a+1, a+2);",
          "273:       break;",
          "",
          "---------------"
        ],
        "src/string.c||src/string.c": [
          "File: src/string.c -> src/string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1146:   return STR_OUT_OF_RANGE;",
          "1147: }",
          "1150: mrb_str_aref(mrb_state *mrb, mrb_value str, mrb_value indx, mrb_value alen)",
          "1151: {",
          "1152:   mrb_int beg, len;",
          "",
          "[Removed Lines]",
          "1149: static mrb_value",
          "",
          "[Added Lines]",
          "1149: mrb_value",
          "",
          "---------------"
        ],
        "src/vm.c||src/vm.c": [
          "File: src/vm.c -> src/vm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1063: mrb_value mrb_obj_missing(mrb_state *mrb, mrb_value mod);",
          "1064: void mrb_hash_check_kdict(mrb_state *mrb, mrb_value self);",
          "1065: void mrb_method_added(mrb_state *mrb, struct RClass *c, mrb_sym mid);",
          "1067: MRB_API mrb_value",
          "1068: mrb_vm_exec(mrb_state *mrb, const struct RProc *proc, const mrb_code *pc)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1066: mrb_value mrb_str_aref(mrb_state *mrb, mrb_value str, mrb_value idx, mrb_value len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1252:       NEXT;",
          "1253:     }",
          "1255:     CASE(OP_GETCONST, BB) {",
          "1256:       mrb_value val;",
          "1257:       mrb_sym sym = syms[b];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1256:     CASE(OP_GETIDX, B) {",
          "1257:       mrb_value va = regs[a], vb = regs[a+1];",
          "1258:       switch (mrb_type(va)) {",
          "1259:       case MRB_TT_ARRAY:",
          "1260:         if (!mrb_integer_p(vb)) goto getidx_fallback;",
          "1261:         regs[a] = mrb_ary_entry(va, mrb_integer(vb));",
          "1262:         break;",
          "1263:       case MRB_TT_HASH:",
          "1264:         regs[a] = mrb_hash_get(mrb, va, vb);",
          "1265:         break;",
          "1266:       case MRB_TT_STRING:",
          "1267:         regs[a] = mrb_str_aref(mrb, va, vb, mrb_undef_value());",
          "1268:         break;",
          "1269:       default:",
          "1270:       getidx_fallback:",
          "1271:         c = 1;",
          "1272:         mid = MRB_OPSYM(aref);",
          "1273:         goto L_SEND_SYM;",
          "1274:       }",
          "1275:       NEXT;",
          "1276:     }",
          "1278:     CASE(OP_SETIDX, B) {",
          "1279:       c = 1;",
          "1280:       mid = MRB_OPSYM(aset);",
          "1281:       goto L_SEND_SYM;",
          "1282:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}