{
  "cve_id": "CVE-2016-7151",
  "cve_desc": "Capstone 3.0.4 has an out-of-bounds vulnerability (SEGV caused by a read memory access) in X86_insn_reg_intel in arch/X86/X86Mapping.c.",
  "repo": "aquynh/capstone",
  "patch_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
  "patch_info": {
    "commit_hash": "87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/87a25bb543c8e4c09b48d4b4a6c7db31ce58df06",
    "files": [
      "arch/X86/X86Mapping.c"
    ],
    "message": "x86: fast path checking for X86_insn_reg_intel()",
    "before_after_code_files": [
      "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c"
    ]
  },
  "patch_diff": {
    "arch/X86/X86Mapping.c||arch/X86/X86Mapping.c": [
      "File: arch/X86/X86Mapping.c -> arch/X86/X86Mapping.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2930:  return (l - r);",
      "2931: }",
      "2937: x86_reg X86_insn_reg_intel(unsigned int id, enum cs_ac_type *access)",
      "2938: {",
      "2939:  unsigned int first = 0;",
      "2940:  unsigned int last = ARR_SIZE(insn_regs_intel) - 1;",
      "2943:  if (!intel_regs_sorted) {",
      "2944:   memcpy(insn_regs_intel_sorted, insn_regs_intel,",
      "",
      "[Removed Lines]",
      "2933: static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid = ARR_SIZE(insn_regs_intel) / 2;",
      "",
      "[Added Lines]",
      "2938:  static bool intel_regs_sorted = false;",
      "2941:  unsigned int mid;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2949:   intel_regs_sorted = true;",
      "2950:  }",
      "2952:  while (first <= last) {",
      "2953:   if (insn_regs_intel_sorted[mid].insn < id) {",
      "2954:    first = mid + 1;",
      "2955:   } else if (insn_regs_intel_sorted[mid].insn == id) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2952:  if (insn_regs_intel_sorted[0].insn > id ||",
      "2953:    insn_regs_intel_sorted[last].insn < id) {",
      "2954:   return 0;",
      "2955:  }",
      "2958:   mid = (first + last) / 2;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2962:     break;",
      "2963:    last = mid - 1;",
      "2964:   }",
      "2966:  }",
      "",
      "[Removed Lines]",
      "2965:   mid = (first + last) / 2;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9325590b13e7dd315bb7eaba7fbeadbfe30d936b",
      "candidate_info": {
        "commit_hash": "9325590b13e7dd315bb7eaba7fbeadbfe30d936b",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/9325590b13e7dd315bb7eaba7fbeadbfe30d936b",
        "files": [
          "include/capstone/sparc.h",
          "include/capstone/systemz.h",
          "include/capstone/xcore.h"
        ],
        "message": "Fixed xcore header to comply with bindings\n\nand fixed whitespace",
        "before_after_code_files": [
          "include/capstone/sparc.h||include/capstone/sparc.h",
          "include/capstone/systemz.h||include/capstone/systemz.h",
          "include/capstone/xcore.h||include/capstone/xcore.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone/sparc.h||include/capstone/sparc.h": [
          "File: include/capstone/sparc.h -> include/capstone/sparc.h"
        ],
        "include/capstone/systemz.h||include/capstone/systemz.h": [
          "File: include/capstone/systemz.h -> include/capstone/systemz.h"
        ],
        "include/capstone/xcore.h||include/capstone/xcore.h": [
          "File: include/capstone/xcore.h -> include/capstone/xcore.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: typedef struct xcore_op_mem {",
          "69:  int32_t disp; // displacement/offset value",
          "70:  int     direct; // +1: forward, -1: backward",
          "71: } xcore_op_mem;",
          "",
          "[Removed Lines]",
          "67:  xcore_reg base;  // base register",
          "68:  xcore_reg index; // index register",
          "",
          "[Added Lines]",
          "67:  uint8_t base;  // base register, can be safely interpreted as",
          "70:  uint8_t index;  // index register, same conditions apply here",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c748610853bb263ac8804fa1ceb4a600bd3354b",
      "candidate_info": {
        "commit_hash": "7c748610853bb263ac8804fa1ceb4a600bd3354b",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/7c748610853bb263ac8804fa1ceb4a600bd3354b",
        "files": [
          "arch/X86/X86Disassembler.c",
          "arch/X86/X86DisassemblerDecoder.h",
          "tests/test_iter_benchmark.c"
        ],
        "message": "https://github.com/aquynh/capstone/issues/483",
        "before_after_code_files": [
          "arch/X86/X86Disassembler.c||arch/X86/X86Disassembler.c",
          "arch/X86/X86DisassemblerDecoder.h||arch/X86/X86DisassemblerDecoder.h",
          "tests/test_iter_benchmark.c||tests/test_iter_benchmark.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86Disassembler.c||arch/X86/X86Disassembler.c": [
          "File: arch/X86/X86Disassembler.c -> arch/X86/X86Disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "791:  info.offset = address;",
          "793:  memset(&insn, 0, offsetof(InternalInstruction, reader));",
          "795:  if (instr->flat_insn->detail) {",
          "796:   instr->flat_insn->detail->x86.op_count = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "795:  insn.prefixPresent[0x26] = 0;",
          "796:  insn.prefixPresent[0x2e] = 0;",
          "797:  insn.prefixPresent[0x36] = 0;",
          "798:  insn.prefixPresent[0x3e] = 0;",
          "799:  insn.prefixPresent[0x64] = 0;",
          "800:  insn.prefixPresent[0x65] = 0;",
          "801:  insn.prefixPresent[0x66] = 0;",
          "802:  insn.prefixPresent[0xf0] = 0;",
          "803:  insn.prefixPresent[0xf2] = 0;",
          "804:  insn.prefixPresent[0xf3] = 0;",
          "",
          "---------------"
        ],
        "arch/X86/X86DisassemblerDecoder.h||arch/X86/X86DisassemblerDecoder.h": [
          "File: arch/X86/X86DisassemblerDecoder.h -> arch/X86/X86DisassemblerDecoder.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "553: typedef struct InternalInstruction {",
          "555:   uint8_t operandSize;",
          "558:   uint8_t prefix0, prefix1, prefix2, prefix3;",
          "560:   uint8_t rexPrefix;",
          "",
          "[Removed Lines]",
          "557:   uint8_t prefixPresent[0x100];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "581:   bool xAcquireRelease;",
          "587:   uint8_t vectorExtensionPrefix[4];",
          "",
          "[Removed Lines]",
          "584:   uint64_t prefixLocations[0x100];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "592:   byteReader_t reader;",
          "594:   const void* readerArg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:   uint8_t prefixPresent[0x100];",
          "592:   uint64_t prefixLocations[0x100];",
          "",
          "---------------"
        ],
        "tests/test_iter_benchmark.c||tests/test_iter_benchmark.c": [
          "File: tests/test_iter_benchmark.c -> tests/test_iter_benchmark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: #include <stdio.h>",
          "6: #include <stdlib.h>",
          "7: #include <time.h>",
          "8: #include \"../myinttypes.h\"",
          "10: #include <capstone.h>",
          "12: static void test()",
          "13: {",
          "14: #define X86_CODE32 \"\\x8d\\x4c\\x32\\x08\\x01\\xd8\\x81\\xc6\\x34\\x12\\x00\\x00\"",
          "19:     output:time used:1.138000",
          "22:  csh handle;",
          "23:  uint64_t address;",
          "24:  cs_insn *insn;",
          "25:  int i;",
          "26:  cs_err err;",
          "27:  const uint8_t *code;",
          "28:  size_t size;",
          "30:  err = cs_open(CS_ARCH_X86, CS_MODE_32, &handle);",
          "31:  if (err) {",
          "32:   printf(\"Failed on cs_open() with error returned: %u\\n\", err);",
          "33:   return;",
          "34:  }",
          "35:  cs_option(handle, CS_OPT_SYNTAX, CS_OPT_SYNTAX_INTEL);",
          "36:  cs_option(handle, CS_OPT_DETAIL, CS_OPT_ON);",
          "38:  clock_t start, end;",
          "39:  double  timeUsed;",
          "41:  start = clock();",
          "42:  int maxcount = 3400000;",
          "43:  insn = cs_malloc(handle);",
          "44:  for (i = 0; i < maxcount;) {",
          "45:   code = X86_CODE32;",
          "46:   address = 0x1000;",
          "47:   size = sizeof(X86_CODE32) - 1;",
          "48:   while(cs_disasm_iter(handle, &code, &size, &address, insn)) {",
          "49:    i++;",
          "50:   }",
          "51:  }",
          "52:  cs_free(insn, 1);",
          "53:  cs_close(&handle);",
          "54:  end = clock();",
          "55:  timeUsed = (double)(end - start) / CLOCKS_PER_SEC;",
          "56:  printf(\"time used:%f\\n\", timeUsed);",
          "57:  getchar();",
          "58: }",
          "60: int main()",
          "61: {",
          "62:  test();",
          "64:  return 0;",
          "65: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "952d534d1bd220de61120710ee6ce6217a81b85d",
      "candidate_info": {
        "commit_hash": "952d534d1bd220de61120710ee6ce6217a81b85d",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/952d534d1bd220de61120710ee6ce6217a81b85d",
        "files": [
          "arch/ARM/ARMMapping.c"
        ],
        "message": "Patch for issue #842\n\nThe SETEND instruction is a 16 bit Thumb instruction which is included\nin T variants of ARMv6 and above, but is not available in M-Class cores\n(see ARM Compiler toolchain Assembler Reference Ver 5.0).\n\nTo be consistent with other similar instructions its group flags have\nbeen updated to be:\n\n{ARM_GRP_THUMB, ARM_GRP_V6, ARM_GRP_NOTMCLASS,0}",
        "before_after_code_files": [
          "arch/ARM/ARMMapping.c||arch/ARM/ARMMapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/ARM/ARMMapping.c||arch/ARM/ARMMapping.c": [
          "File: arch/ARM/ARMMapping.c -> arch/ARM/ARMMapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13418:  {",
          "13419:   ARM_tSETEND, ARM_INS_SETEND,",
          "13420: #ifndef CAPSTONE_DIET",
          "13422: #endif",
          "13423:  },",
          "13424:  {",
          "",
          "[Removed Lines]",
          "13421:   { 0 }, { 0 }, { ARM_GRP_NOTMCLASS, 0 }, 0, 0",
          "",
          "[Added Lines]",
          "13421:   { 0 }, { 0 }, { ARM_GRP_THUMB, ARM_GRP_V6, ARM_GRP_NOTMCLASS, 0}, 0, 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e7a2e743560ecd541730d0de88a17df876fb2f5",
      "candidate_info": {
        "commit_hash": "0e7a2e743560ecd541730d0de88a17df876fb2f5",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/0e7a2e743560ecd541730d0de88a17df876fb2f5",
        "files": [
          "cs.c"
        ],
        "message": "Minor fixes for the M68K port.",
        "before_after_code_files": [
          "cs.c||cs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "cs.c||cs.c": [
          "File: cs.c -> cs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     (1 << CS_ARCH_MIPS) | (1 << CS_ARCH_X86) |",
          "179:     (1 << CS_ARCH_PPC) | (1 << CS_ARCH_SPARC) |",
          "180:     (1 << CS_ARCH_SYSZ) | (1 << CS_ARCH_XCORE) |",
          "183:  if ((unsigned int)query < CS_ARCH_MAX)",
          "184:   return all_arch & (1 << query);",
          "",
          "[Removed Lines]",
          "181:     (1 << CS_ARCH_TMS320C64X));",
          "",
          "[Added Lines]",
          "181:     (1 << CS_ARCH_M68K) | (1 << CS_ARCH_TMS320C64X));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1114:     if (insn->detail->xcore.operands[i].type == (xcore_op_type)op_type)",
          "1115:      count++;",
          "1116:    break;",
          "1117:   case CS_ARCH_TMS320C64X:",
          "1118:    for (i = 0; i < insn->detail->tms320c64x.op_count; i++)",
          "1119:     if (insn->detail->tms320c64x.operands[i].type == (tms320c64x_op_type)op_type)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1117:   case CS_ARCH_M68K:",
          "1118:    for (i = 0; i < insn->detail->m68k.op_count; i++)",
          "1119:     if (insn->detail->m68k.operands[i].type == (m68k_op_type)op_type)",
          "1120:      count++;",
          "1121:    break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1220:      return i;",
          "1221:    }",
          "1222:    break;",
          "1223:   case CS_ARCH_TMS320C64X:",
          "1224:    for (i = 0; i < insn->detail->tms320c64x.op_count; i++) {",
          "1225:     if (insn->detail->tms320c64x.operands[i].type == (tms320c64x_op_type)op_type)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1228:   case CS_ARCH_M68K:",
          "1229:    for (i = 0; i < insn->detail->m68k.op_count; i++) {",
          "1230:     if (insn->detail->m68k.operands[i].type == (m68k_op_type)op_type)",
          "1231:      count++;",
          "1232:     if (count == post)",
          "1233:      return i;",
          "1234:    }",
          "1235:    break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efc9036063aa9ece7144d971fca221852f741d29",
      "candidate_info": {
        "commit_hash": "efc9036063aa9ece7144d971fca221852f741d29",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/efc9036063aa9ece7144d971fca221852f741d29",
        "files": [
          "arch/X86/X86ATTInstPrinter.c"
        ],
        "message": "x86: AT&T syntax bug with zero offset segment register. see #884",
        "before_after_code_files": [
          "arch/X86/X86ATTInstPrinter.c||arch/X86/X86ATTInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/X86/X86ATTInstPrinter.c||arch/X86/X86ATTInstPrinter.c": [
          "File: arch/X86/X86ATTInstPrinter.c -> arch/X86/X86ATTInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "676:  MCOperand *DispSpec = MCInst_getOperand(MI, Op + X86_AddrDisp);",
          "677:  MCOperand *SegReg = MCInst_getOperand(MI, Op + X86_AddrSegmentReg);",
          "678:  uint64_t ScaleVal;",
          "681:  if (MI->csh->detail) {",
          "682:   MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].type = X86_OP_MEM;",
          "",
          "[Removed Lines]",
          "679:  int reg;",
          "",
          "[Added Lines]",
          "679:  int segreg;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "689:  }",
          "694:   _printOperand(MI, Op + X86_AddrSegmentReg, O);",
          "695:   if (MI->csh->detail) {",
          "697:   }",
          "699:   SStream_concat0(O, \":\");",
          "",
          "[Removed Lines]",
          "692:  reg = MCOperand_getReg(SegReg);",
          "693:  if (reg) {",
          "696:    MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].mem.segment = reg;",
          "",
          "[Added Lines]",
          "692:  segreg = MCOperand_getReg(SegReg);",
          "693:  if (segreg) {",
          "696:    MI->flat_insn->detail->x86.operands[MI->flat_insn->detail->x86.op_count].mem.segment = segreg;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "728:     }",
          "729:    }",
          "730:   } else {",
          "732:   }",
          "733:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "731:    if (segreg)",
          "732:     SStream_concat0(O, \"0\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}