{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e39f388eb1b66df91a59038abaa6566306f1cbb7",
      "candidate_info": {
        "commit_hash": "e39f388eb1b66df91a59038abaa6566306f1cbb7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e39f388eb1b66df91a59038abaa6566306f1cbb7",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 8ea1dc727d391b15d0c4fa858ff68d5b8a63dde46408f24027dac8d28f044cbd",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1868:   int argc,",
          "1869:   sqlite3_value **argv",
          "1870: ){",
          "1872:   int inStr = 0;",
          "1873:   int nNest = 0;",
          "1874:   char *z;",
          "",
          "[Removed Lines]",
          "1871:   int i;",
          "",
          "[Added Lines]",
          "1871:   unsigned int i;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 20f7951bb238ddc0b8932a55145df426b6fdf7b8631e069345902c853c90f191",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6235:       if( sSort.pOrderBy && pGroupBy->nExpr==sSort.pOrderBy->nExpr ){",
          "6245:         }",
          "6246:         if( sqlite3ExprListCompare(pGroupBy, sSort.pOrderBy, -1)==0 ){",
          "6247:           orderByGrp = 1;",
          "",
          "[Removed Lines]",
          "6236:         int i;",
          "6242:         for(i=0; i<pGroupBy->nExpr; i++){",
          "6243:           u8 sortFlags = sSort.pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC;",
          "6244:           pGroupBy->a[i].sortFlags = sortFlags;",
          "",
          "[Added Lines]",
          "6236:         int ii;",
          "6242:         for(ii=0; ii<pGroupBy->nExpr; ii++){",
          "6243:           u8 sortFlags = sSort.pOrderBy->a[ii].sortFlags & KEYINFO_ORDER_DESC;",
          "6244:           pGroupBy->a[ii].sortFlags = sortFlags;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa5083491497d7c3bfade8a115007a1f88bc7cc7",
      "candidate_info": {
        "commit_hash": "fa5083491497d7c3bfade8a115007a1f88bc7cc7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fa5083491497d7c3bfade8a115007a1f88bc7cc7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/test1.c",
          "test/tkt-18458b1a.test"
        ],
        "message": "Ensure the columns of views and sub-queries maintain their implicit collation sequences when the \"push-down\" optimization is applied. Fix for [18458b1a].\n\nFossilOrigin-Name: 36997c4ade2ef3a274cd1ac52b44118fb3a05325adb650b7b338ecb43d060575",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/test1.c||src/test1.c",
          "test/tkt-18458b1a.test||test/tkt-18458b1a.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b9ec72203c19c2b95e648ac1dfad74eec98d4ff82581cdc10dc4221ba551728f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3480:         sqlite3ExprDelete(db, pExpr);",
          "3481:         pExpr = pNew;",
          "3486:           if( pExpr->op!=TK_COLUMN && pExpr->op!=TK_COLLATE ){",
          "3487:             CollSeq *pColl = sqlite3ExprCollSeq(pSubst->pParse, pExpr);",
          "3488:             pExpr = sqlite3ExprAddCollateString(pSubst->pParse, pExpr,",
          "",
          "[Removed Lines]",
          "3485:         if( pSubst->bFlattener && pExpr ){",
          "",
          "[Added Lines]",
          "3484:         if( pExpr ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4056:       x.iNewTable = iNewParent;",
          "4057:       x.isLeftJoin = isLeftJoin;",
          "4058:       x.pEList = pSub->pEList;",
          "4060:       substSelect(&x, pParent, 0);",
          "4061:     }",
          "",
          "[Removed Lines]",
          "4059:       x.bFlattener = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4382:       x.iNewTable = iCursor;",
          "4383:       x.isLeftJoin = 0;",
          "4384:       x.pEList = pSubq->pEList;",
          "4386:       pNew = substExpr(&x, pNew);",
          "4387:       if( pSubq->selFlags & SF_Aggregate ){",
          "4388:         pSubq->pHaving = sqlite3ExprAnd(pParse, pSubq->pHaving, pNew);",
          "",
          "[Removed Lines]",
          "4385:       x.bFlattener = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7200:     { \"omit-noop-join\",      SQLITE_OmitNoopJoin   },",
          "7201:     { \"stat4\",               SQLITE_Stat4          },",
          "7202:     { \"skip-scan\",           SQLITE_SkipScan       },",
          "7203:   };",
          "7205:   if( objc!=4 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7203:     { \"push-down\",           SQLITE_PushDown       },",
          "",
          "---------------"
        ],
        "test/tkt-18458b1a.test||test/tkt-18458b1a.test": [
          "File: test/tkt-18458b1a.test -> test/tkt-18458b1a.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket [18458b1a] have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-18458b1a",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener and push-down optimizations",
          "23:     optimization_control db query-flattener 0",
          "24:     optimization_control db push-down 0",
          "25:   } else {",
          "26:     # Enable them",
          "27:     optimization_control db query-flattener 1",
          "28:     optimization_control db push-down 1",
          "29:   }",
          "31:   db cache size 0",
          "33:   do_execsql_test $tn.1.1 {",
          "34:     CREATE TABLE t0(c0 COLLATE NOCASE);",
          "35:     INSERT INTO t0(c0) VALUES ('B');",
          "36:     CREATE VIEW v0(c0, c1) AS SELECT DISTINCT t0.c0, 'a' FROM t0;",
          "37:   }",
          "39:   do_execsql_test $tn.1.2 {",
          "40:     SELECT count(*) FROM v0 WHERE c1 >= c0;",
          "41:   } 1",
          "43:   do_execsql_test $tn.1.3 {",
          "44:     SELECT count(*) FROM v0 WHERE NOT NOT (c1 >= c0);",
          "45:   } 1",
          "47:   do_execsql_test $tn.1.4 {",
          "48:     SELECT count(*) FROM v0 WHERE ((c1 >= c0) OR 0+0);",
          "49:   } 1",
          "50: }",
          "52: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6397a78b2ba93729678ef0ea68d0765e046a360e",
      "candidate_info": {
        "commit_hash": "6397a78b2ba93729678ef0ea68d0765e046a360e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6397a78b2ba93729678ef0ea68d0765e046a360e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/trigger.c",
          "test/trigger1.test"
        ],
        "message": "If a TEMP TRIGGER references an auxiliary schema, and that auxiliary schema is detached, move the trigger to reference the TEMP schema before completing the detach, so that the trigger does not hold a dangling schema pointer.\n\nFossilOrigin-Name: 069c2f4c61f06211a8981abc412afcc1536ece13380b13a70aa99123f8f527cd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/trigger.c||src/trigger.c",
          "test/trigger1.test||test/trigger1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 279ac7fdec0b1409cd400b7b093f89089d93c49f596f378c6a3032434a85bf83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "299:   sqlite3 *db = sqlite3_context_db_handle(context);",
          "300:   int i;",
          "301:   Db *pDb = 0;",
          "302:   char zErr[128];",
          "304:   UNUSED_PARAMETER(NotUsed);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302:   HashElem *pEntry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:     goto detach_error;",
          "324:   }",
          "326:   sqlite3BtreeClose(pDb->pBt);",
          "327:   pDb->pBt = 0;",
          "328:   pDb->pSchema = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329:   assert( db->aDb[1].pSchema );",
          "330:   pEntry = sqliteHashFirst(&db->aDb[1].pSchema->trigHash);",
          "331:   while( pEntry ){",
          "332:     Trigger *pTrig = (Trigger*)sqliteHashData(pEntry);",
          "333:     if( pTrig->pTabSchema==pDb->pSchema ){",
          "334:       pTrig->pTabSchema = pTrig->pSchema;",
          "335:     }",
          "336:     pEntry = sqliteHashNext(pEntry);",
          "337:   }",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "618:   iDb = sqlite3SchemaToIndex(pParse->db, pTrigger->pSchema);",
          "619:   assert( iDb>=0 && iDb<db->nDb );",
          "620:   pTable = tableOfTrigger(pTrigger);",
          "623: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "625:     int code = SQLITE_DROP_TRIGGER;",
          "626:     const char *zDb = db->aDb[iDb].zDbSName;",
          "627:     const char *zTab = SCHEMA_TABLE(iDb);",
          "",
          "[Removed Lines]",
          "621:   assert( pTable );",
          "622:   assert( pTable->pSchema==pTrigger->pSchema || iDb==1 );",
          "624:   {",
          "",
          "[Added Lines]",
          "621:   assert( (pTable && pTable->pSchema==pTrigger->pSchema) || iDb==1 );",
          "623:   if( pTable ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "639:   if( (v = sqlite3GetVdbe(pParse))!=0 ){",
          "640:     sqlite3NestedParse(pParse,",
          "641:        \"DELETE FROM %Q.%s WHERE name=%Q AND type='trigger'\",",
          "",
          "[Removed Lines]",
          "638:   assert( pTable!=0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "659:   if( ALWAYS(pTrigger) ){",
          "660:     if( pTrigger->pSchema==pTrigger->pTabSchema ){",
          "661:       Table *pTab = tableOfTrigger(pTrigger);",
          "665:     }",
          "666:     sqlite3DeleteTrigger(db, pTrigger);",
          "667:     db->mDbFlags |= DBFLAG_SchemaChange;",
          "",
          "[Removed Lines]",
          "662:       Trigger **pp;",
          "663:       for(pp=&pTab->pTrigger; *pp!=pTrigger; pp=&((*pp)->pNext));",
          "",
          "[Added Lines]",
          "660:       if( pTab ){",
          "661:         Trigger **pp;",
          "662:         for(pp=&pTab->pTrigger; *pp!=pTrigger; pp=&((*pp)->pNext));",
          "664:       }",
          "",
          "---------------"
        ],
        "test/trigger1.test||test/trigger1.test": [
          "File: test/trigger1.test -> test/trigger1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "768:   SELECT * FROM t19;",
          "769: } {1 2 2}",
          "771: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "771: # 2019-08-26 Chromium sqlite3_fts3_lpm_fuzzer find.",
          "772: #",
          "773: db close",
          "774: sqlite3 db :memory:",
          "775: do_execsql_test trigger1-20.1 {",
          "776:   CREATE TABLE t20_1(x);",
          "777:   ATTACH ':memory:' AS aux;",
          "778:   CREATE TABLE aux.t20_2(y);",
          "779:   CREATE TABLE aux.t20_3(z);",
          "780:   CREATE TEMP TRIGGER r20_3 AFTER INSERT ON t20_2 BEGIN UPDATE t20_3 SET z=z+1; END;",
          "781:   DETACH aux;",
          "782:   DROP TRIGGER r20_3;",
          "783: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3dcdba387dc58b26fcc2ad2a68808afd352647d",
      "candidate_info": {
        "commit_hash": "c3dcdba387dc58b26fcc2ad2a68808afd352647d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c3dcdba387dc58b26fcc2ad2a68808afd352647d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/printf.c",
          "src/sqliteInt.h",
          "src/util.c",
          "src/vdbemem.c"
        ],
        "message": "Improved reporting of SQLITE_TOOBIG errors while parsing.\n\nFossilOrigin-Name: ea2d4b65e20e44e19219c821bf68e97ff3af1760b3b4762250d020ba2a5a6343",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/printf.c||src/printf.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/util.c||src/util.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8820408597341344b308277ce6ef41b47c7514d6c613520789b05ee52cbedae8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:   assert( eError==SQLITE_NOMEM || eError==SQLITE_TOOBIG );",
          "138:   p->accError = eError;",
          "139:   if( p->mxAlloc ) sqlite3_str_reset(p);",
          "140: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:   if( eError==SQLITE_TOOBIG ) sqlite3ErrorToParser(p->db, eError);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3835: void sqlite3SetString(char **, sqlite3*, const char*);",
          "3836: void sqlite3ErrorMsg(Parse*, const char*, ...);",
          "3837: void sqlite3Dequote(char*);",
          "3838: void sqlite3DequoteExpr(Expr*);",
          "3839: void sqlite3TokenInit(Token*,char*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3837: int sqlite3ErrorToParser(sqlite3*,int);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233:   }",
          "234: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "241: int sqlite3ErrorToParser(sqlite3 *db, int errCode){",
          "242:   Parse *pParse;",
          "243:   if( db==0 || (pParse = db->pParse)==0 ) return errCode;",
          "244:   pParse->rc = errCode;",
          "245:   pParse->nErr++;",
          "246:   return errCode;",
          "247: }",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1065:       nAlloc += (enc==SQLITE_UTF8?1:2);",
          "1066:     }",
          "1067:     if( nByte>iLimit ){",
          "1069:     }",
          "1070:     testcase( nAlloc==0 );",
          "1071:     testcase( nAlloc==31 );",
          "",
          "[Removed Lines]",
          "1068:       return SQLITE_TOOBIG;",
          "",
          "[Added Lines]",
          "1068:       return sqlite3ErrorToParser(pMem->db, SQLITE_TOOBIG);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23a885956e6f6798bf0b75ddf083e77c77ed41cd",
      "candidate_info": {
        "commit_hash": "23a885956e6f6798bf0b75ddf083e77c77ed41cd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/23a885956e6f6798bf0b75ddf083e77c77ed41cd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/global.c",
          "src/main.c",
          "src/memdb.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h"
        ],
        "message": "Add the SQLITE_CONFIG_MEMDB_MAXSIZE configuration option for configuring the default maximum size of an in-memory database created using sqlite3_deserialize().  This is necessary to make the interface reasonably testable.\n\nFossilOrigin-Name: cb72ee0478ce98c48aae059fd5de4e36caf2b8c953e08fcb799bfd119ad46b73",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/global.c||src/global.c",
          "src/main.c||src/main.c",
          "src/memdb.c||src/memdb.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b80119bd6044c0993210115732b6ae7b4b0b29c1471b0723bef24f2052c8e671",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "189: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195: #ifndef SQLITE_MEMDB_DEFAULT_MAXSIZE",
          "196: # define SQLITE_MEMDB_DEFAULT_MAXSIZE 1073741824",
          "197: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "238: #endif",
          "239: #ifndef SQLITE_UNTESTABLE",
          "241: #endif",
          "246: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "248: #endif",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "653:     }",
          "656:     default: {",
          "657:       rc = SQLITE_ERROR;",
          "658:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "656: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "657:     case SQLITE_CONFIG_MEMDB_MAXSIZE: {",
          "658:       sqlite3GlobalConfig.mxMemdbSize = va_arg(ap, sqlite3_int64);",
          "659:       break;",
          "660:     }",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: };",
          "",
          "[Removed Lines]",
          "46: #ifndef SQLITE_MEMDB_DEFAULT_MAXSIZE",
          "47: # define SQLITE_MEMDB_DEFAULT_MAXSIZE 1073741824",
          "48: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "348:   p->base.pMethods = &memdb_io_methods;",
          "350:   return SQLITE_OK;",
          "351: }",
          "",
          "[Removed Lines]",
          "349:   p->szMax = SQLITE_MEMDB_DEFAULT_MAXSIZE;",
          "",
          "[Added Lines]",
          "344:   p->szMax = sqlite3GlobalConfig.mxMemdbSize;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "598:     p->sz = szDb;",
          "599:     p->szAlloc = szBuf;",
          "600:     p->szMax = szBuf;",
          "603:     }",
          "604:     p->mFlags = mFlags;",
          "605:     rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "601:     if( p->szMax<SQLITE_MEMDB_DEFAULT_MAXSIZE ){",
          "602:       p->szMax = SQLITE_MEMDB_DEFAULT_MAXSIZE;",
          "",
          "[Added Lines]",
          "596:     if( p->szMax<sqlite3GlobalConfig.mxMemdbSize ){",
          "597:       p->szMax = sqlite3GlobalConfig.mxMemdbSize;",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3430: #endif",
          "3431: #ifndef SQLITE_UNTESTABLE",
          "3433: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3431: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3433: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}