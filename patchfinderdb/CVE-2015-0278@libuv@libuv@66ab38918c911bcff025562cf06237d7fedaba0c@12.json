{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1acbd768b092b791d0ceb3b2bd2b129a2c785b40",
      "candidate_info": {
        "commit_hash": "1acbd768b092b791d0ceb3b2bd2b129a2c785b40",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/1acbd768b092b791d0ceb3b2bd2b129a2c785b40",
        "files": [
          "include/uv.h",
          "src/unix/stream.c",
          "src/unix/udp.c",
          "src/win/pipe.c",
          "src/win/tcp.c",
          "src/win/tty.c",
          "src/win/udp.c"
        ],
        "message": "unix, windows: don't read/recv if buf.len==0\n\nMake it possible for the libuv user to handle out of memory conditions\ngracefully. When alloc_cb() returns a buffer with len==0, call the read\nor recv callback with nread=UV_ENOBUFS. It's up to the user to stop or\nclose the handle.\n\nFixes #752.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/stream.c||src/unix/stream.c",
          "src/unix/udp.c||src/unix/udp.c",
          "src/win/pipe.c||src/win/pipe.c",
          "src/win/tcp.c||src/win/tcp.c",
          "src/win/tty.c||src/win/tty.c",
          "src/win/udp.c||src/win/udp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "977:   while ((stream->read_cb || stream->read2_cb)",
          "978:       && (stream->flags & UV_STREAM_READING)",
          "979:       && (count-- > 0)) {",
          "981:     buf = stream->alloc_cb((uv_handle_t*)stream, 64 * 1024);",
          "985:     assert(uv__stream_fd(stream) >= 0);",
          "987:     if (stream->read_cb) {",
          "",
          "[Removed Lines]",
          "980:     assert(stream->alloc_cb);",
          "983:     assert(buf.len > 0);",
          "984:     assert(buf.base);",
          "",
          "[Added Lines]",
          "980:     assert(stream->alloc_cb != NULL);",
          "983:     if (buf.len == 0) {",
          "985:       uv__stream_read_cb(stream, UV_ENOBUFS, buf, UV_UNKNOWN_HANDLE);",
          "986:       return;",
          "987:     }",
          "989:     assert(buf.base != NULL);",
          "",
          "---------------"
        ],
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205:   h.msg_name = &peer;",
          "207:   do {",
          "210:     assert(buf.base != NULL);",
          "212:     h.msg_namelen = sizeof(peer);",
          "",
          "[Removed Lines]",
          "208:     buf = handle->alloc_cb((uv_handle_t*)handle, 64 * 1024);",
          "209:     assert(buf.len > 0);",
          "",
          "[Added Lines]",
          "208:     buf = handle->alloc_cb((uv_handle_t*) handle, 64 * 1024);",
          "209:     if (buf.len == 0) {",
          "210:       handle->recv_cb(handle, UV_ENOBUFS, buf, NULL, 0);",
          "211:       return;",
          "212:     }",
          "",
          "---------------"
        ],
        "src/win/pipe.c||src/win/pipe.c": [
          "File: src/win/pipe.c -> src/win/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1429:       }",
          "1431:       buf = handle->alloc_cb((uv_handle_t*) handle, avail);",
          "1434:       if (ReadFile(handle->handle,",
          "1435:                    buf.base,",
          "",
          "[Removed Lines]",
          "1432:       assert(buf.len > 0);",
          "",
          "[Added Lines]",
          "1432:       if (buf.len == 0) {",
          "1433:         if (handle->read2_cb) {",
          "1434:           handle->read2_cb(handle, UV_ENOBUFS, buf, UV_UNKNOWN_HANDLE);",
          "1435:         } else if (handle->read_cb) {",
          "1436:           handle->read_cb((uv_stream_t*) handle, UV_ENOBUFS, buf);",
          "1437:         }",
          "1438:         break;",
          "1439:       }",
          "1440:       assert(buf.base != NULL);",
          "",
          "---------------"
        ],
        "src/win/tcp.c||src/win/tcp.c": [
          "File: src/win/tcp.c -> src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:   if (loop->active_tcp_streams < uv_active_tcp_streams_threshold) {",
          "435:     handle->flags &= ~UV_HANDLE_ZERO_READ;",
          "436:     handle->read_buffer = handle->alloc_cb((uv_handle_t*) handle, 65536);",
          "438:     buf = handle->read_buffer;",
          "439:   } else {",
          "440:     handle->flags |= UV_HANDLE_ZERO_READ;",
          "",
          "[Removed Lines]",
          "437:     assert(handle->read_buffer.len > 0);",
          "",
          "[Added Lines]",
          "437:     if (handle->read_buffer.len == 0) {",
          "438:       handle->read_cb((uv_stream_t*) handle, UV_ENOBUFS, buf);",
          "439:       return;",
          "440:     }",
          "441:     assert(handle->read_buffer.base != NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "944:     while (handle->flags & UV_HANDLE_READING) {",
          "945:       buf = handle->alloc_cb((uv_handle_t*) handle, 65536);",
          "947:       flags = 0;",
          "948:       if (WSARecv(handle->socket,",
          "949:                   (WSABUF*)&buf,",
          "",
          "[Removed Lines]",
          "946:       assert(buf.len > 0);",
          "",
          "[Added Lines]",
          "950:       if (buf.len == 0) {",
          "951:         handle->read_cb(handle, UV_ENOBUFS, buf);",
          "952:         break;",
          "953:       }",
          "954:       assert(buf.base != NULL);",
          "",
          "---------------"
        ],
        "src/win/tty.c||src/win/tty.c": [
          "File: src/win/tty.c -> src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "348:   memset(&req->overlapped, 0, sizeof(req->overlapped));",
          "350:   handle->read_line_buffer = handle->alloc_cb((uv_handle_t*) handle, 8192);",
          "351:   assert(handle->read_line_buffer.base != NULL);",
          "",
          "[Removed Lines]",
          "352:   assert(handle->read_line_buffer.len > 0);",
          "",
          "[Added Lines]",
          "351:   if (handle->read_line_buffer.len == 0) {",
          "352:     handle->read_cb(handle, UV_ENOBUFS, handle->read_line_buffer);",
          "353:     return;",
          "354:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "683:         if (buf_used == 0) {",
          "684:           buf = handle->alloc_cb((uv_handle_t*) handle, 1024);",
          "685:         }",
          "687:         buf.base[buf_used++] = handle->last_key[handle->last_key_offset++];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "688:           if (buf.len == 0) {",
          "689:             handle->read_cb((uv_stream_t*) handle, UV_ENOBUFS, buf);",
          "690:             goto out;",
          "691:           }",
          "692:           assert(buf.base != NULL);",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:     handle->flags &= ~UV_HANDLE_ZERO_READ;",
          "274:     handle->recv_buffer = handle->alloc_cb((uv_handle_t*) handle, 65536);",
          "277:     buf = handle->recv_buffer;",
          "278:     memset(&handle->recv_from, 0, sizeof handle->recv_from);",
          "",
          "[Removed Lines]",
          "275:     assert(handle->recv_buffer.len > 0);",
          "",
          "[Added Lines]",
          "275:     if (handle->recv_buffer.len == 0) {",
          "276:       handle->recv_cb(handle, UV_ENOBUFS, handle->recv_buffer, NULL, 0);",
          "277:       return;",
          "278:     }",
          "279:     assert(handle->recv_buffer.base != NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:     buf = handle->alloc_cb((uv_handle_t*) handle, 65536);",
          "520:     memset(&from, 0, sizeof from);",
          "521:     from_len = sizeof from;",
          "",
          "[Removed Lines]",
          "518:     assert(buf.len > 0);",
          "",
          "[Added Lines]",
          "522:     if (buf.len == 0) {",
          "523:       handle->recv_cb(handle, UV_ENOBUFS, buf, NULL, 0);",
          "524:       goto done;",
          "525:     }",
          "526:     assert(buf.base != NULL);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "218f48ae56550a72befab61c13d4db66bab38723",
      "candidate_info": {
        "commit_hash": "218f48ae56550a72befab61c13d4db66bab38723",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/218f48ae56550a72befab61c13d4db66bab38723",
        "files": [
          "test/test-fs.c"
        ],
        "message": "build: fix compilation warning on MinGW-w64",
        "before_after_code_files": [
          "test/test-fs.c||test/test-fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-fs.c||test/test-fs.c": [
          "File: test/test-fs.c -> test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: # include <io.h>",
          "37: # define unlink _unlink",
          "38: # define rmdir _rmdir",
          "40: # define open _open",
          "41: # define write _write",
          "43: # define close _close",
          "44: #endif",
          "46: #define TOO_LONG_NAME_LENGTH 65536",
          "",
          "[Removed Lines]",
          "39: # define stat _stati64",
          "42: # define lseek _lseek",
          "",
          "[Added Lines]",
          "42: # ifndef stat",
          "43: #  define stat _stati64",
          "44: # endif",
          "45: # ifndef lseek",
          "46: #   define lseek _lseek",
          "47: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "29ed404138e1b351cbed1add1781a218fefc3b01",
      "candidate_info": {
        "commit_hash": "29ed404138e1b351cbed1add1781a218fefc3b01",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/29ed404138e1b351cbed1add1781a218fefc3b01",
        "files": [
          "Makefile.mingw"
        ],
        "message": "build: add clean target, improve single file compile on MinGW",
        "before_after_code_files": [
          "Makefile.mingw||Makefile.mingw"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.mingw||Makefile.mingw": [
          "File: Makefile.mingw -> Makefile.mingw",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: all: libuv.a",
          "75: libuv.a: $(OBJS)",
          "76:  $(AR) crs $@ $^",
          "",
          "[Removed Lines]",
          "78: # FIXME(bnoordhuis) Don't rebuild everything when a source file changes.",
          "79: $(OBJS): $(OBJS:.o=.c) $(INCLUDES)",
          "",
          "[Added Lines]",
          "75: clean:",
          "76:  -$(RM) $(OBJS) libuv.a",
          "81: $(OBJS): %.o : %.c $(INCLUDES)",
          "82:  $(CC) $(CFLAGS) $(EXTRA_CFLAGS) -c -o $@ $<",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a762934aa8c0947ed4d4e1dcbceaeaeb7e765329",
      "candidate_info": {
        "commit_hash": "a762934aa8c0947ed4d4e1dcbceaeaeb7e765329",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a762934aa8c0947ed4d4e1dcbceaeaeb7e765329",
        "files": [
          "vcbuild.bat"
        ],
        "message": "build: add support for VS2013",
        "before_after_code_files": [
          "vcbuild.bat||vcbuild.bat"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "vcbuild.bat||vcbuild.bat": [
          "File: vcbuild.bat -> vcbuild.bat",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: goto next-arg",
          "42: :args-done",
          "44: @rem Look for Visual Studio 2012",
          "45: if not defined VS110COMNTOOLS goto vc-set-2010",
          "46: if not exist \"%VS110COMNTOOLS%\\..\\..\\vc\\vcvarsall.bat\" goto vc-set-2010",
          "47: call \"%VS110COMNTOOLS%\\..\\..\\vc\\vcvarsall.bat\" %vs_toolset%",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: @rem Look for Visual Studio 2013",
          "45: if not defined VS120COMNTOOLS goto vc-set-2012",
          "46: if not exist \"%VS120COMNTOOLS%\\..\\..\\vc\\vcvarsall.bat\" goto vc-set-2012",
          "47: call \"%VS120COMNTOOLS%\\..\\..\\vc\\vcvarsall.bat\" %vs_toolset%",
          "48: set GYP_MSVS_VERSION=2013",
          "49: goto select-target",
          "52: :vc-set-2012",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f58bb6018812878101f73ca1add309214705379",
      "candidate_info": {
        "commit_hash": "2f58bb6018812878101f73ca1add309214705379",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/2f58bb6018812878101f73ca1add309214705379",
        "files": [
          "include/uv-errno.h",
          "include/uv.h"
        ],
        "message": "unix, windows: map ERANGE errno",
        "before_after_code_files": [
          "include/uv-errno.h||include/uv-errno.h",
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-errno.h||include/uv-errno.h": [
          "File: include/uv-errno.h -> include/uv-errno.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "388: # define UV__ENOPROTOOPT (-4035)",
          "389: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "391: #if defined(ERANGE) && !defined(_WIN32)",
          "392: # define UV__ERANGE (-ERANGE)",
          "393: #else",
          "394: # define UV__ERANGE (-4034)",
          "395: #endif",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:   XX(EPROTO, \"protocol error\")                                                \\",
          "128:   XX(EPROTONOSUPPORT, \"protocol not supported\")                               \\",
          "129:   XX(EPROTOTYPE, \"protocol wrong type for socket\")                            \\",
          "130:   XX(EROFS, \"read-only file system\")                                          \\",
          "131:   XX(ESHUTDOWN, \"cannot send after transport endpoint shutdown\")              \\",
          "132:   XX(ESPIPE, \"invalid seek\")                                                  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:   XX(ERANGE, \"result too large\")                                              \\",
          "",
          "---------------"
        ]
      }
    }
  ]
}